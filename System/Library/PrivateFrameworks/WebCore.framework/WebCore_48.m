_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(void)>,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E335A710;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(void)>,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335A710;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(void)>,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1953D3A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteCookie(WebCore::Cookie const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteCookie(WebCore::Cookie const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  uint64_t result;

  v2 = (const void *)a1[6];
  a1[6] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  a1[5] = 0;
  if (v3)
    CFRelease(v3);
  result = a1[4];
  a1[4] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteCookie(WebCore::Cookie const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteCookie(WebCore::Cookie const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  objc_msgSend(*(id *)(a1 + 40), "deleteCookie:", *(_QWORD *)(a1 + 48));
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *v2 = &off_1E335A710;
  v2[1] = v3;
  if (v3)
  {
    v5 = v2;
    WTF::ensureOnMainThread();
    result = (uint64_t)v5;
    if (v5)
      return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  }
  else
  {
    result = 139;
    __break(0xC471u);
  }
  return result;
}

void sub_1953D3B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::VectorMover<false,WebCore::Cookie>::move(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  for (; result != a2; a3 += 136)
  {
    v5 = *result;
    *result = 0;
    *(_QWORD *)a3 = v5;
    v6 = result[1];
    result[1] = 0;
    *(_QWORD *)(a3 + 8) = v6;
    v7 = result[2];
    result[2] = 0;
    *(_QWORD *)(a3 + 16) = v7;
    v8 = result[3];
    result[3] = 0;
    *(_QWORD *)(a3 + 24) = v8;
    v9 = *((_OWORD *)result + 2);
    *(_OWORD *)(a3 + 43) = *(_OWORD *)((char *)result + 43);
    *(_OWORD *)(a3 + 32) = v9;
    v10 = result[8];
    result[8] = 0;
    *(_QWORD *)(a3 + 64) = v10;
    v11 = result[9];
    result[9] = 0;
    *(_QWORD *)(a3 + 72) = v11;
    v12 = *(_DWORD *)(a3 + 80) & 0xFFFFFFFE | result[10] & 1;
    *(_DWORD *)(a3 + 80) = v12;
    v13 = v12 & 0xFFFFFFFD | (2 * ((*((_DWORD *)result + 20) >> 1) & 1));
    *(_DWORD *)(a3 + 80) = v13;
    v14 = v13 & 0xFFFFFFFB | (4 * ((*((_DWORD *)result + 20) >> 2) & 1));
    *(_DWORD *)(a3 + 80) = v14;
    v15 = v14 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)result + 20) >> 3) & 7));
    *(_DWORD *)(a3 + 80) = v15;
    *(_DWORD *)(a3 + 80) = result[10] & 0xFFFFFFC0 | v15 & 0x3F;
    *(_OWORD *)(a3 + 84) = *(_OWORD *)((char *)result + 84);
    *(_QWORD *)(a3 + 100) = *(uint64_t *)((char *)result + 100);
    *(_DWORD *)(a3 + 108) = *((_DWORD *)result + 27);
    *((_DWORD *)result + 20) &= ~1u;
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 120) = 0;
    v16 = result[14];
    result[14] = 0;
    *(_QWORD *)(a3 + 112) = v16;
    LODWORD(v16) = *((_DWORD *)result + 30);
    *((_DWORD *)result + 30) = 0;
    *(_DWORD *)(a3 + 120) = v16;
    LODWORD(v16) = *((_DWORD *)result + 31);
    *((_DWORD *)result + 31) = 0;
    *(_DWORD *)(a3 + 124) = v16;
    *(_BYTE *)(a3 + 128) = *((_BYTE *)result + 128);
    WebCore::Cookie::~Cookie((WebCore::Cookie *)result, a2);
    result = (uint64_t *)(v17 + 136);
  }
  return result;
}

WebCore::CookieStorageObserver *std::make_unique[abi:sn180100]<WebCore::CookieStorageObserver,NSHTTPCookieStorage *>(WebCore::CookieStorageObserver **a1, NSHTTPCookieStorage **a2)
{
  WebCore::CookieStorageObserver *v4;
  WebCore::CookieStorageObserver *result;

  v4 = (WebCore::CookieStorageObserver *)WTF::fastMalloc((WTF *)0x28);
  result = WebCore::CookieStorageObserver::CookieStorageObserver(v4, *a2);
  *a1 = v4;
  return result;
}

void sub_1953D3CC4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteHTTPCookie(OpaqueCFHTTPCookieStorage *,NSHTTPCookie *,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteHTTPCookie(OpaqueCFHTTPCookieStorage *,NSHTTPCookie *,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  uint64_t result;

  v2 = (const void *)a1[6];
  a1[6] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  a1[5] = 0;
  if (v3)
    CFRelease(v3);
  result = a1[4];
  a1[4] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteHTTPCookie(OpaqueCFHTTPCookieStorage *,NSHTTPCookie *,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteHTTPCookie(OpaqueCFHTTPCookieStorage *,NSHTTPCookie *,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return WebCore::NetworkStorageSession::deleteHTTPCookie(OpaqueCFHTTPCookieStorage *,NSHTTPCookie *,WTF::CompletionHandler<void ()(void)> &&)const::$_0::operator()((uint64_t *)(a1 + 32));
}

void ___ZZN7WebCoreL13cookiesForURLEP19NSHTTPCookieStorageP5NSURLS3_RKNSt3__18optionalINS_12SameSiteInfoEEEP8NSStringENK3__0cvU13block_pointerFvP7NSArrayEEv_block_invoke(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4;
  const void *v5;

  if (cf)
    CFRetain(cf);
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v4 + 8))
  {
    v5 = *(const void **)v4;
    *(_QWORD *)v4 = cf;
    if (v5)
      CFRelease(v5);
  }
  else
  {
    *(_QWORD *)v4 = cf;
    *(_BYTE *)(v4 + 8) = 1;
  }
}

uint64_t __copy_helper_block_e8_32c118_ZTSKZN7WebCoreL13cookiesForURLEP19NSHTTPCookieStorageP5NSURLS3_RKNSt3__18optionalINS_12SameSiteInfoEEEP8NSStringE3__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  const void *v2;
  uint64_t result;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return WebCore::NetworkStorageSession::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()((uint64_t *)(a1 + 32));
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *v2 = &off_1E335A710;
  v2[1] = v3;
  if (v3)
  {
    v5 = v2;
    WTF::ensureOnMainThread();
    result = (uint64_t)v5;
    if (v5)
      return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  }
  else
  {
    result = 139;
    __break(0xC471u);
  }
  return result;
}

void sub_1953D3EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  uint64_t result;

  v2 = (const void *)a1[6];
  a1[6] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  a1[5] = 0;
  if (v3)
    CFRelease(v3);
  result = a1[4];
  a1[4] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;

  objc_msgSend(*(id *)(a1 + 40), "removeCookiesSinceDate:", *(_QWORD *)(a1 + 48));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  v4 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v4 = MEMORY[0x1E0C809A0];
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void *)#1}::__invoke;
  v4[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1})::descriptor;
  v4[4] = v2;
  objc_msgSend(v3, "_saveCookies:", v4);
  _Block_release(v4);
}

void sub_1953D3FB4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

unsigned int *WTF::BlockPtr<void ()(NSArray<NSHTTPCookie *> *,NSString *)>::fromCallable<WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_0>(WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSArray<NSHTTPCookie *> *,NSString *)>::fromCallable<WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_0>(WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_0)::{lambda(void *,NSArray<NSHTTPCookie *> *,NSString *)#1}::__invoke(WTF::StringImpl *result, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  const WTF::StringImpl *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  int v27;
  unsigned int v28;
  WTF::StringImpl *v29;

  v3 = *((_QWORD *)result + 5);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return result;
  v5 = *((_QWORD *)result + 4);
  MEMORY[0x19AEA5508](&v29, a3);
  v8 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v5 + 56), &v29, v6);
  if (*(_QWORD *)(v5 + 56) + 24 * *(unsigned int *)(v5 + 64) != v8)
  {
    v9 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v9 = off_1E335A838;
    v25 = v9;
    WebCore::nsCookiesToCookieVector((uint64_t)&v26, a2, &v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v28;
    if (!v28)
    {
LABEL_43:
      v23 = v26;
      if (v26)
      {
        v26 = 0;
        v27 = 0;
        WTF::fastFree(v23, v7);
      }
      goto LABEL_45;
    }
    v11 = *(_QWORD *)(v8 + 8);
    if (v11)
    {
      v13 = *(unsigned int *)(v11 - 4);
      v12 = v11 + 8 * v13;
      if (*(_DWORD *)(v11 - 12))
      {
        if (!(_DWORD)v13)
        {
          v14 = *(_QWORD *)(v8 + 8);
          goto LABEL_59;
        }
        v24 = 8 * v13;
        v14 = *(_QWORD *)(v8 + 8);
        while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
        {
          v14 += 8;
          v24 -= 8;
          if (!v24)
          {
            v14 = v12;
            break;
          }
        }
LABEL_8:
        if (!v11)
        {
          v15 = 0;
LABEL_10:
          if (v15 != v14)
          {
            while (!*(_QWORD *)(*(_QWORD *)v14 + 8))
            {
              v16 = v14 + 8;
              v14 = v12;
              if (v16 != v12)
              {
                v14 = v16;
                while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
                {
                  v14 += 8;
                  if (v14 == v12)
                  {
                    v14 = v12;
                    break;
                  }
                }
              }
              if (v14 == v15)
              {
                v14 = v15;
                break;
              }
            }
          }
          if (v11)
            v17 = v11 + 8 * *(unsigned int *)(v11 - 4);
          else
            v17 = 0;
          if (v14 != v17)
          {
            do
            {
              (*(void (**)(_QWORD, WTF::StringImpl **, WTF **))(**(_QWORD **)(*(_QWORD *)v14 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v14 + 8), &v29, &v26);
              v18 = v12;
              if (v14 + 8 != v12)
              {
                v18 = v14 + 8;
                while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
                {
                  v18 += 8;
                  if (v18 == v12)
                  {
                    v18 = v12;
                    break;
                  }
                }
              }
              v14 = v15;
              if (v18 != v15)
              {
                v14 = v18;
                if (!*(_QWORD *)(*(_QWORD *)v18 + 8))
                {
                  while (1)
                  {
                    v19 = v14 + 8;
                    v14 = v12;
                    if (v19 != v12)
                    {
                      v14 = v19;
                      while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
                      {
                        v14 += 8;
                        if (v14 == v12)
                        {
                          v14 = v12;
                          break;
                        }
                      }
                    }
                    if (v14 == v15)
                      break;
                    if (*(_QWORD *)(*(_QWORD *)v14 + 8))
                      goto LABEL_38;
                  }
                  v14 = v15;
                }
              }
LABEL_38:
              ++*(_DWORD *)(v8 + 16);
            }
            while (v14 != v17);
            v10 = v28;
          }
          if (v10)
          {
            v20 = v26;
            v21 = 136 * v10;
            do
            {
              WebCore::Cookie::~Cookie(v20, v7);
              v20 = (WTF *)(v22 + 136);
              v21 -= 136;
            }
            while (v21);
          }
          goto LABEL_43;
        }
        LODWORD(v13) = *(_DWORD *)(v11 - 4);
LABEL_59:
        v15 = v11 + 8 * v13;
        goto LABEL_10;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    v14 = v12;
    v12 = v11 + 8 * v13;
    goto LABEL_8;
  }
LABEL_45:
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1953D42E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13)
{
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v15);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_0::operator() const(NSArray<NSHTTPCookie *> *,NSString *)::{lambda(NSHTTPCookie *)#1},BOOL,NSHTTPCookie *>::call(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isHTTPOnly") ^ 1;
}

unsigned int *WTF::BlockPtr<void ()(NSArray<NSHTTPCookie *> *,NSString *,BOOL)>::fromCallable<WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_1>(WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSArray<NSHTTPCookie *> *,NSString *,BOOL)>::fromCallable<WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_1>(WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_1)::{lambda(void *,NSArray<NSHTTPCookie *> *,NSString *,BOOL)#1}::__invoke(WTF::StringImpl *result, void *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  int v45;
  unsigned int v46;
  WTF::StringImpl *v47;

  v4 = *((_QWORD *)result + 5);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return result;
  v5 = *((_QWORD *)result + 4);
  if (!a4)
  {
    MEMORY[0x19AEA5508](&v47, a3);
    v12 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v5 + 56), &v47, v10);
    if (*(_QWORD *)(v5 + 56) + 24 * *(unsigned int *)(v5 + 64) == v12)
    {
LABEL_52:
      result = v47;
      v47 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    v13 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v13 = off_1E335A880;
    v43 = v13;
    WebCore::nsCookiesToCookieVector((uint64_t)&v44, a2, &v43);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v46;
    if (!v46)
    {
LABEL_50:
      v27 = v44;
      if (v44)
      {
        v44 = 0;
        v45 = 0;
        WTF::fastFree(v27, v11);
      }
      goto LABEL_52;
    }
    v15 = *(_QWORD *)(v12 + 8);
    if (v15)
    {
      v17 = *(unsigned int *)(v15 - 4);
      v16 = v15 + 8 * v17;
      if (*(_DWORD *)(v15 - 12))
      {
        if (!(_DWORD)v17)
        {
          v18 = *(_QWORD *)(v12 + 8);
          goto LABEL_116;
        }
        v42 = 8 * v17;
        v18 = *(_QWORD *)(v12 + 8);
        while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
        {
          v18 += 8;
          v42 -= 8;
          if (!v42)
          {
            v18 = v16;
            break;
          }
        }
LABEL_15:
        if (!v15)
        {
          v19 = 0;
LABEL_17:
          if (v19 != v18)
          {
            while (!*(_QWORD *)(*(_QWORD *)v18 + 8))
            {
              v20 = v18 + 8;
              v18 = v16;
              if (v20 != v16)
              {
                v18 = v20;
                while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
                {
                  v18 += 8;
                  if (v18 == v16)
                  {
                    v18 = v16;
                    break;
                  }
                }
              }
              if (v18 == v19)
              {
                v18 = v19;
                break;
              }
            }
          }
          if (v15)
            v21 = v15 + 8 * *(unsigned int *)(v15 - 4);
          else
            v21 = 0;
          if (v18 != v21)
          {
            do
            {
              (*(void (**)(_QWORD, WTF::StringImpl **, WTF **))(**(_QWORD **)(*(_QWORD *)v18 + 8) + 24))(*(_QWORD *)(*(_QWORD *)v18 + 8), &v47, &v44);
              v22 = v16;
              if (v18 + 8 != v16)
              {
                v22 = v18 + 8;
                while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
                {
                  v22 += 8;
                  if (v22 == v16)
                  {
                    v22 = v16;
                    break;
                  }
                }
              }
              v18 = v19;
              if (v22 != v19)
              {
                v18 = v22;
                if (!*(_QWORD *)(*(_QWORD *)v22 + 8))
                {
                  while (1)
                  {
                    v23 = v18 + 8;
                    v18 = v16;
                    if (v23 != v16)
                    {
                      v18 = v23;
                      while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
                      {
                        v18 += 8;
                        if (v18 == v16)
                        {
                          v18 = v16;
                          break;
                        }
                      }
                    }
                    if (v18 == v19)
                      break;
                    if (*(_QWORD *)(*(_QWORD *)v18 + 8))
                      goto LABEL_45;
                  }
                  v18 = v19;
                }
              }
LABEL_45:
              ++*(_DWORD *)(v12 + 16);
            }
            while (v18 != v21);
            v14 = v46;
          }
          if (v14)
          {
            v24 = v44;
            v25 = 136 * v14;
            do
            {
              WebCore::Cookie::~Cookie(v24, v11);
              v24 = (WTF *)(v26 + 136);
              v25 -= 136;
            }
            while (v25);
          }
          goto LABEL_50;
        }
        LODWORD(v17) = *(_DWORD *)(v15 - 4);
LABEL_116:
        v19 = v15 + 8 * v17;
        goto LABEL_17;
      }
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v18 = v16;
    v16 = v15 + 8 * v17;
    goto LABEL_15;
  }
  if (*(_DWORD *)(v5 + 68))
  {
    v6 = *(unsigned int *)(v5 + 64);
    if ((_DWORD)v6)
    {
      v7 = 24 * v6;
      for (i = *(_QWORD *)(v5 + 56); !*(_QWORD *)i; i += 24)
      {
        v7 -= 24;
        if (!v7)
          return result;
      }
    }
    else
    {
      i = *(_QWORD *)(v5 + 56);
    }
    v28 = *(_QWORD *)(v5 + 56) + 24 * v6;
LABEL_58:
    if (i != v28)
    {
      v29 = *(_QWORD *)(i + 8);
      if (v29)
      {
        v31 = *(unsigned int *)(v29 - 4);
        v30 = (uint64_t *)(v29 + 8 * v31);
        if (*(_DWORD *)(v29 - 12))
        {
          if (!(_DWORD)v31)
          {
            v41 = 0;
            v32 = *(uint64_t **)(i + 8);
            goto LABEL_105;
          }
          v36 = 8 * v31;
          v32 = *(uint64_t **)(i + 8);
          while ((unint64_t)(*v32 + 1) <= 1)
          {
            ++v32;
            v36 -= 8;
            if (!v36)
            {
              v32 = v30;
              break;
            }
          }
LABEL_62:
          if (!v29)
          {
            v33 = 0;
LABEL_64:
            if (v33 != v32)
            {
              while (!*(_QWORD *)(*v32 + 8))
              {
                v34 = v32 + 1;
                v32 = v30;
                if (v34 != v30)
                {
                  v32 = v34;
                  while ((unint64_t)(*v32 + 1) <= 1)
                  {
                    if (++v32 == v30)
                    {
                      v32 = v30;
                      break;
                    }
                  }
                }
                if (v32 == v33)
                {
                  v32 = v33;
                  break;
                }
              }
            }
            if (v29)
              v35 = (uint64_t *)(v29 + 8 * *(unsigned int *)(v29 - 4));
            else
              v35 = 0;
            while (v32 != v35)
            {
              v38 = *v32;
              v37 = v32 + 1;
              result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v38 + 8) + 32))(*(_QWORD *)(v38 + 8));
              v39 = v30;
              if (v37 != v30)
              {
                v39 = v37;
                while ((unint64_t)(*v39 + 1) <= 1)
                {
                  if (++v39 == v30)
                  {
                    v39 = v30;
                    break;
                  }
                }
              }
              v32 = v33;
              if (v39 != v33)
              {
                v32 = v39;
                if (!*(_QWORD *)(*v39 + 8))
                {
                  while (1)
                  {
                    v40 = v32 + 1;
                    v32 = v30;
                    if (v40 != v30)
                    {
                      v32 = v40;
                      while ((unint64_t)(*v32 + 1) <= 1)
                      {
                        if (++v32 == v30)
                        {
                          v32 = v30;
                          break;
                        }
                      }
                    }
                    if (v32 == v33)
                      break;
                    if (*(_QWORD *)(*v32 + 8))
                      goto LABEL_98;
                  }
                  v32 = v33;
                }
              }
LABEL_98:
              ++*(_DWORD *)(i + 16);
            }
            while (1)
            {
              i += 24;
              if (i == v28)
                return result;
              if (*(_QWORD *)i)
                goto LABEL_58;
            }
          }
          v41 = *(unsigned int *)(v29 - 4);
LABEL_105:
          v33 = (uint64_t *)(v29 + 8 * v41);
          goto LABEL_64;
        }
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
      v32 = v30;
      v30 = (uint64_t *)(v29 + 8 * v31);
      goto LABEL_62;
    }
  }
  return result;
}

void sub_1953D48AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13)
{
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v15);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_1::operator() const(NSArray<NSHTTPCookie *> *,NSString *,BOOL)::{lambda(NSHTTPCookie *)#1},BOOL,NSHTTPCookie *>::call(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isHTTPOnly") ^ 1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *a1 = &off_1E335A8C8;
  v3 = (const void *)a1[3];
  a1[3] = 0;
  if (v3)
    CFRelease(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (!v4)
    return a1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return a1;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *(_QWORD *)this = &off_1E335A8C8;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v4)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return WTF::fastFree(this, a2);
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_0::operator() const(void)::{lambda(void)#1},void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  WebCore::RangeResponseGenerator *v3;
  int v5;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = result;
  v3 = (WebCore::RangeResponseGenerator *)*((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v3)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v3)
  {
LABEL_12:
    WebCore::RangeResponseGenerator::removeTask(v3, *((WebCoreNSURLSessionDataTask **)v2 + 3));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  }
  return result;
}

void sub_1953D4BDC(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v5 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v6 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E335A8F0;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 24) = v6;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

void sub_1953D4CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  BOOL v11;

  v2 = result;
  v3 = *(WTF **)(result + 8);
  v4 = *(WTF **)(result + 16);
  if (v4)
  {
    v5 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 2) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = *((_QWORD *)v4 + 1);
    if (v6)
    {
      v7 = *(unsigned int *)(v6 - 4);
      if ((_DWORD)v7)
      {
        v8 = *((_QWORD *)v4 + 1);
        do
        {
          v9 = *(WTF::StringImpl **)v8;
          if (*(_QWORD *)v8 != -1)
          {
            v10 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = 0;
            if (v10)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
              v9 = *(WTF::StringImpl **)v8;
            }
            *(_QWORD *)v8 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, a2);
              else
                *(_DWORD *)v9 -= 2;
            }
          }
          v8 += 16;
          --v7;
        }
        while (v7);
      }
      WTF::fastFree((WTF *)(v6 - 16), a2);
    }
    result = WTF::fastFree(v4, a2);
  }
  if (*(_BYTE *)(v2 + 24))
    v11 = v3 == 0;
  else
    v11 = 1;
  if (!v11)
    return WTF::fastFree(v3, a2);
  return result;
}

void WebCore::RangeResponseGenerator::MediaResourceClient::~MediaResourceClient(WebCore::RangeResponseGenerator::MediaResourceClient *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  *(_QWORD *)this = off_1E335A918;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_9:
    v6 = *(_QWORD *)(v4 + 16) - 1;
    *(_QWORD *)(v4 + 16) = v6;
    if (!v6)
    {
      v7 = *(_QWORD *)(v4 + 8);
      v8 = __ldxr((unsigned __int8 *)v4);
      if (v8 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v4))
        {
          if (v7)
            return;
LABEL_16:
          WTF::fastFree((WTF *)v4, a2);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if (v7)
        return;
      goto LABEL_16;
    }
    v9 = __ldxr((unsigned __int8 *)v4);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  *(_QWORD *)this = off_1E335A918;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v4)
    goto LABEL_17;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_9:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v9 = __ldxr((unsigned __int8 *)v4);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_17;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_16;
      goto LABEL_17;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_16:
    WTF::fastFree((WTF *)v4, a2);
LABEL_17:
  WTF::fastFree(this, a2);
}

uint64_t WebCore::RangeResponseGenerator::MediaResourceClient::responseReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_1953D5028(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebCore::RangeResponseGenerator::MediaResourceClient::redirectReceived()
{
  __break(0xC471u);
}

uint64_t WebCore::RangeResponseGenerator::MediaResourceClient::shouldCacheResponse()
{
  return 0;
}

void WebCore::RangeResponseGenerator::MediaResourceClient::dataSent(WebCore::RangeResponseGenerator::MediaResourceClient *this, PlatformMediaResource *a2)
{
  __break(0xC471u);
}

unsigned __int8 *WebCore::RangeResponseGenerator::MediaResourceClient::dataReceived(unsigned __int8 *this, WebCore::PlatformMediaResource *a2, const WebCore::SharedBuffer *a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  int v13;
  int i;
  uint64_t v15;
  WTF *v16;
  uint64_t *v17;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    return this;
  v5 = this;
  v6 = *((_QWORD *)this + 3);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](v3, a2);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v3);
  if (v8 != 1)
  {
    __clrex();
LABEL_16:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v6)
      return this;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_16;
  if (!v6)
    return this;
LABEL_12:
  v9 = *(_QWORD *)(v6 + 8);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = (WTF::StringImpl *)*((_QWORD *)v5 + 4);
    v12 = *((_DWORD *)v11 + 4);
    if (v12 < 0x100)
      v13 = WTF::StringImpl::hashSlowCase(v11);
    else
      v13 = v12 >> 8;
    for (i = 0; ; v13 = i + v15)
    {
      v15 = v13 & v10;
      v16 = *(WTF **)(v9 + 16 * v15);
      if (v16 != (WTF *)-1)
      {
        if (!v16)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
        if ((WTF::equal(v16, *((const WTF::StringImpl **)v5 + 4), a3) & 1) != 0)
          break;
      }
      ++i;
    }
    v17 = *(uint64_t **)(v9 + 16 * v15 + 8);
    if (v17)
    {
      WebCore::SharedBufferBuilder::ensureBuffer(v17 + 2);
      WebCore::FragmentedSharedBuffer::append((WebCore::FragmentedSharedBuffer *)v17[2], a3);
      WebCore::RangeResponseGenerator::giveResponseToTasksWithFinishedRanges((WebCore::RangeResponseGenerator *)v6, (WebCore::RangeResponseGenerator::Data *)v17);
    }
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
}

void sub_1953D51DC(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

void WebCore::RangeResponseGenerator::MediaResourceClient::accessControlCheckFailed()
{
  __break(0xC471u);
}

unsigned __int8 *WebCore::RangeResponseGenerator::MediaResourceClient::loadFailed(unsigned __int8 *this, WebCore::PlatformMediaResource *a2, const WebCore::ResourceError *a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v6;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  int v14;
  int i;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  id *v31;
  id *v32;
  uint64_t v33;
  id *v34;
  id *v35;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    return this;
  v5 = this;
  v6 = *((_QWORD *)this + 3);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](v3, a2);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v3);
  if (v8 != 1)
  {
    __clrex();
LABEL_16:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v6)
      goto LABEL_12;
    return this;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_16;
  if (v6)
  {
LABEL_12:
    v9 = (uint64_t *)(v6 + 8);
    v10 = *(_QWORD *)(v6 + 8);
    if (!v10)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
    v11 = *(_DWORD *)(v10 - 8);
    v12 = (WTF::StringImpl *)*((_QWORD *)v5 + 4);
    v13 = *((_DWORD *)v12 + 4);
    v14 = v13 < 0x100 ? WTF::StringImpl::hashSlowCase(v12) : v13 >> 8;
    for (i = 0; ; v14 = ++i + v16)
    {
      v16 = v14 & v11;
      v17 = *(WTF **)(v10 + 16 * v16);
      if (v17 != (WTF *)-1)
      {
        if (!v17)
        {
          v18 = *v9;
          if (!*v9)
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
          v19 = v18 + 16 * *(unsigned int *)(v18 - 4);
          goto LABEL_27;
        }
        if ((WTF::equal(v17, *((const WTF::StringImpl **)v5 + 4), a3) & 1) != 0)
          break;
      }
    }
    v19 = v10 + 16 * v16;
    v18 = *v9;
    if (!*v9)
      goto LABEL_28;
LABEL_27:
    v18 += 16 * *(unsigned int *)(v18 - 4);
LABEL_28:
    if (v18 == v19)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
    v20 = *(_QWORD **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = 0;
    v21 = *v9;
    if (!*v9 || (v21 += 16 * *(unsigned int *)(v21 - 4), v21 != v19))
    {
      if (v21 != v19)
      {
        v22 = *(WTF::StringImpl **)v19;
        *(_QWORD *)v19 = -1;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, a2);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = *(_QWORD *)(v19 + 8);
        *(_QWORD *)(v19 + 8) = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        ++*(_DWORD *)(*v9 - 16);
        v24 = *v9;
        if (*v9)
          v25 = *(_DWORD *)(v24 - 12) - 1;
        else
          v25 = -1;
        *(_DWORD *)(v24 - 12) = v25;
        v26 = *v9;
        if (*v9)
        {
          v27 = 6 * *(_DWORD *)(v26 - 12);
          v28 = *(_DWORD *)(v26 - 4);
          if (v27 < v28 && v28 >= 9)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::RangeResponseGenerator::Data>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::RangeResponseGenerator::Data>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::RangeResponseGenerator::Data>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGenerator::Data>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)(v6 + 8), v28 >> 1, 0);
        }
      }
    }
    if (!v20)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
    v29 = v20[1];
    if (v29)
    {
      v30 = *(unsigned int *)(v29 - 4);
      v31 = (id *)(v29 + 16 * v30);
      if (*(_DWORD *)(v29 - 12))
      {
        v32 = (id *)v20[1];
        if ((_DWORD)v30)
        {
          v33 = 16 * v30;
          v32 = (id *)v20[1];
          while ((unint64_t)*v32 + 1 <= 1)
          {
            v32 += 2;
            v33 -= 16;
            if (!v33)
            {
              v32 = v31;
              goto LABEL_55;
            }
          }
        }
        goto LABEL_55;
      }
      v32 = (id *)(v29 + 16 * v30);
    }
    else
    {
      v32 = 0;
      v30 = 0;
    }
    v31 = (id *)(v29 + 16 * v30);
LABEL_55:
    if (v29)
      v34 = (id *)(v29 + 16 * *(unsigned int *)(v29 - 4));
    else
      v34 = 0;
    while (v32 != v34)
    {
      objc_msgSend(*v32, "resource:loadFailedWithError:", 0, a3);
      v35 = v32 + 2;
      v32 = v31;
      if (v35 != v31)
      {
        v32 = v35;
        while ((unint64_t)*v32 + 1 <= 1)
        {
          v32 += 2;
          if (v32 == v31)
          {
            v32 = v31;
            break;
          }
        }
      }
    }
    (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
  }
  return this;
}

void sub_1953D5514(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned __int8 **v2;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *WebCore::RangeResponseGenerator::MediaResourceClient::loadFinished(unsigned __int8 *this, WebCore::PlatformMediaResource *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  int i;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    return this;
  v4 = this;
  v5 = *((_QWORD *)this + 3);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](v3, a2, a3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 != 1)
  {
    __clrex();
LABEL_16:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v5)
      goto LABEL_12;
    return this;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_16;
  if (v5)
  {
LABEL_12:
    v8 = *(_QWORD *)(v5 + 8);
    if (!v8)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
    v9 = *(_DWORD *)(v8 - 8);
    v10 = (WTF::StringImpl *)*((_QWORD *)v4 + 4);
    v11 = *((_DWORD *)v10 + 4);
    v12 = v11 < 0x100 ? WTF::StringImpl::hashSlowCase(v10) : v11 >> 8;
    for (i = 0; ; v12 = ++i + v14)
    {
      v14 = v12 & v9;
      v15 = *(WTF **)(v8 + 16 * v14);
      if (v15 != (WTF *)-1)
      {
        if (!v15)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
        if ((WTF::equal(v15, *((const WTF::StringImpl **)v4 + 4), a3) & 1) != 0)
          break;
      }
    }
    v16 = *(_QWORD *)(v8 + 16 * v14 + 8);
    if (!v16)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
    *(_BYTE *)(v16 + 280) = 1;
    v17 = *(_QWORD *)(v16 + 288);
    if (!v17
      || ((*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17),
          v19 = *(_QWORD *)(v16 + 288),
          *(_QWORD *)(v16 + 288) = 0,
          !v19))
    {
LABEL_43:
      WebCore::RangeResponseGenerator::giveResponseToTasksWithFinishedRanges((WebCore::RangeResponseGenerator *)v5, (WebCore::RangeResponseGenerator::Data *)v16);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
    }
    v20 = *(_QWORD *)(v19 + 8);
    if (__ldaxr((unsigned __int8 *)v20))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v20))
    {
      goto LABEL_31;
    }
    MEMORY[0x19AEA534C](v20);
LABEL_31:
    v22 = *(_QWORD *)(v20 + 8);
    v23 = v22 - 1;
    *(_QWORD *)(v20 + 8) = v22 - 1;
    if (v22 == 1)
    {
      v27 = *(_QWORD *)(v20 + 16);
      v24 = *(_QWORD *)(v20 + 24);
      *(_QWORD *)(v20 + 24) = 0;
      v25 = v27 != 0;
    }
    else
    {
      v24 = 0;
      v25 = 1;
    }
    v26 = __ldxr((unsigned __int8 *)v20);
    if (v26 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
      {
LABEL_38:
        if (!v23)
        {
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
          if (!v25)
            WTF::fastFree((WTF *)v20, v18);
        }
        goto LABEL_43;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v20);
    goto LABEL_38;
  }
  return this;
}

void sub_1953D5740(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RangeResponseGenerator,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::RangeResponseGenerator::Data>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::RangeResponseGenerator::Data>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::RangeResponseGenerator::Data>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGenerator::Data>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v14);
          else
            v20 = v19 >> 8;
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = v17 + 16 * v22;
          v24 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            v25 = *(WTF::StringImpl **)v23;
            *(_QWORD *)v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v10);
              else
                *(_DWORD *)v25 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v23 = 0;
          }
          v26 = *v13;
          *v13 = 0;
          *(_QWORD *)v23 = v26;
          v27 = v6 + 16 * v11;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v28;
          v29 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          v30 = *v13;
          *v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v10);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::setAllCookiesToSameSiteStrict(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;

  *a1 = &off_1E335A978;
  v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::setAllCookiesToSameSiteStrict(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  const void *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E335A978;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::setAllCookiesToSameSiteStrict(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(void **)(a1 + 16);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 24), "setCookie:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * i));
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void sub_1953D5B4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1953D5B68(void *exc_buf, int a2)
{
  NSException *v2;

  if (a2 == 1)
  {
    v2 = (NSException *)objc_begin_catch(exc_buf);
    ReportBlockedObjCException(v2);
    objc_end_catch();
    JUMPOUT(0x1953D5AF0);
  }
  JUMPOUT(0x1953D5B60);
}

void sub_1953D5B90()
{
  objc_end_catch();
  JUMPOUT(0x1953D5B60);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::setAllCookiesToSameSiteStrict(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  *a1 = &off_1E335A9A0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

void sub_1953D5C44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::setAllCookiesToSameSiteStrict(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335A9A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void sub_1953D5D20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<NSString *,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<NSString *,void>>(uint64_t *a1, int8x16_t **a2, CFStringRef *a3, char *a4, CFStringRef *a5)
{
  int v10;
  int v11;
  int Length;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int8x16_t *v22;
  int8x16_t *v23;
  const __CFString *v24;
  UniChar v25;
  const __CFString *v26;
  UniChar *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int16 v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  int8x16_t *v41;
  uint64_t v42;
  const __CFString *v43;
  char v44;
  const __CFString *v45;
  _BYTE *v46;
  const char *CStringPtr;
  size_t v48;
  uint64_t v49;
  UniChar *v50;
  UniChar *v51;
  _BYTE *v52;
  void *v53;
  const char *v54;
  size_t v55;
  CFRange v56;
  CFRange v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;

  v10 = *((_DWORD *)a1 + 4);
  v11 = *((_DWORD *)a2 + 2);
  if (*a3)
    Length = CFStringGetLength(*a3);
  else
    Length = 0;
  if (*a5)
  {
    v13 = CFStringGetLength(*a5);
    v14 = v13 + 1;
    if (v13 == -1)
      v14 = -1;
  }
  else
  {
    v14 = 1;
  }
  v15 = __CFADD__(v14, Length);
  v16 = v14 + Length;
  if (v15)
    v16 = -1;
  v15 = __CFADD__(v16, v11);
  v17 = v16 + v11;
  if (v15)
    v17 = -1;
  v15 = __CFADD__(v17, v10);
  v18 = v17 + v10;
  if (v15)
    v19 = 0xFFFFFFFFLL;
  else
    v19 = v18;
  v20 = a1[1];
  if ((v20 || (v20 = *a1) != 0) && (*(_BYTE *)(v20 + 16) & 4) == 0
    || *a3 && !CFStringGetCStringPtr(*a3, 0x201u)
    || *a5 && !CFStringGetCStringPtr(*a5, 0x201u))
  {
    v21 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1);
    if (v21)
    {
      v22 = *a2;
      v23 = a2[1];
      v24 = *a3;
      v25 = *a4;
      v26 = *a5;
      v27 = (UniChar *)&v21[2 * v23];
      v28 = v23 & 0xFFFFFFC0;
      if (v28)
      {
        v29 = &v21[2 * v28];
        v30 = 0uLL;
        do
        {
          v58.val[0] = *v22;
          v31 = v22[1];
          v59.val[0] = v22[2];
          v32 = v22[3];
          v22 += 4;
          v33 = v32;
          v59.val[1] = 0uLL;
          v60.val[0] = v31;
          v58.val[1] = 0uLL;
          v34 = v21;
          vst2q_s8(v34, v58);
          v34 += 32;
          v60.val[1] = 0uLL;
          vst2q_s8(v34, v60);
          v35 = v21 + 64;
          vst2q_s8(v35, v59);
          v36 = v21 + 96;
          vst2q_s8(v36, *(int8x16x2_t *)(&v30 - 1));
          v21 += 128;
        }
        while (v21 != v29);
        v21 = v29;
      }
      while (v21 != (char *)v27)
      {
        v37 = v22->u8[0];
        v22 = (int8x16_t *)((char *)v22 + 1);
        *(_WORD *)v21 = v37;
        v21 += 2;
      }
      if (v24)
      {
        v56.length = CFStringGetLength(v24);
        v56.location = 0;
        CFStringGetCharacters(v24, v56, v27);
        v38 = CFStringGetLength(v24);
      }
      else
      {
        v38 = 0;
      }
      v50 = &v27[v38];
      *v50 = v25;
      if (v26)
      {
        v51 = v50 + 1;
        v57.length = CFStringGetLength(v26);
        v57.location = 0;
        CFStringGetCharacters(v26, v57, v51);
      }
    }
  }
  else
  {
    v39 = (_BYTE *)MEMORY[0x19AEA4824](a1, v19);
    if (v39)
    {
      v40 = v39;
      v41 = a2[1];
      v42 = v41;
      v43 = *a3;
      v44 = *a4;
      v45 = *a5;
      if ((_DWORD)v41)
      {
        v46 = *a2;
        if ((_DWORD)v41 == 1)
          *v39 = *v46;
        else
          memcpy(v39, v46, a2[1]);
      }
      if (v43)
      {
        CStringPtr = CFStringGetCStringPtr(v43, 0x201u);
        v48 = CFStringGetLength(v43);
        memcpy(&v40[v42], CStringPtr, v48);
        v49 = CFStringGetLength(v43);
      }
      else
      {
        v49 = 0;
      }
      v52 = &v40[v42 + v49];
      *v52 = v44;
      if (v45)
      {
        v53 = v52 + 1;
        v54 = CFStringGetCStringPtr(v45, 0x201u);
        v55 = CFStringGetLength(v45);
        memcpy(v53, v54, v55);
      }
    }
  }
}

uint64_t *WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(uint64_t **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = &v5[17 * *(unsigned int *)(a1 + 12)];
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v13 = *(uint64_t **)a1;
        return &v13[(uint64_t)(v3 - (_QWORD)v5) >> 3];
      }
      if (v9 < 0x1E1E1E2)
      {
        v10 = 136 * v9;
        v11 = WTF::fastMalloc((WTF *)(136 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x88;
        *(_QWORD *)a1 = v11;
        WTF::VectorMover<false,WebCore::Cookie>::move(v5, v6, v11);
        v13 = *(uint64_t **)a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *(uint64_t **)a1;
        }
        return &v13[(uint64_t)(v3 - (_QWORD)v5) >> 3];
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x1953D61C8);
    }
  }
  v14 = *(unsigned int *)(a1 + 8);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v16 = a2;
  if (v16 > v14)
  {
    if (v16 >= 0x1E1E1E2)
      goto LABEL_28;
    v17 = &v5[17 * *(unsigned int *)(a1 + 12)];
    v18 = 136 * v16;
    v19 = WTF::fastMalloc((WTF *)(136 * v16));
    *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x88;
    *(_QWORD *)a1 = v19;
    WTF::VectorMover<false,WebCore::Cookie>::move(v5, v17, v19);
    if (v5)
    {
      if (*(uint64_t **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (uint64_t *)v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::deleteCookie(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  *a1 = &off_1E335A9C8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

void sub_1953D627C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::deleteCookie(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335A9C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void sub_1953D6358(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::deleteCookiesMatching(WTF::Function<BOOL ()(NSHTTPCookie *)> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;

  *a1 = &off_1E335A9F0;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::deleteCookiesMatching(WTF::Function<BOOL ()(NSHTTPCookie *)> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E335A9F0;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::deleteCookiesMatching(WTF::Function<BOOL ()(NSHTTPCookie *)> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  v3 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v3 = MEMORY[0x1E0C809A0];
  v3[1] = 50331650;
  v3[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteCookiesMatching(WTF::Function<BOOL ()(NSHTTPCookie *)> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebCore::NetworkStorageSession::deleteCookiesMatching(WTF::Function<BOOL ()(NSHTTPCookie *)> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void *)#1}::__invoke;
  v3[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteCookiesMatching(WTF::Function<BOOL ()(NSHTTPCookie *)> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebCore::NetworkStorageSession::deleteCookiesMatching(WTF::Function<BOOL ()(NSHTTPCookie *)> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1})::descriptor;
  v3[4] = v1;
  objc_msgSend(v2, "_saveCookies:", v3);
  _Block_release(v3);
}

void sub_1953D64BC(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteCookiesMatching(WTF::Function<BOOL ()(NSHTTPCookie *)> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebCore::NetworkStorageSession::deleteCookiesMatching(WTF::Function<BOOL ()(NSHTTPCookie *)> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::NetworkStorageSession::deleteCookiesMatching(WTF::Function<BOOL ()(NSHTTPCookie *)> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebCore::NetworkStorageSession::deleteCookiesMatching(WTF::Function<BOOL ()(NSHTTPCookie *)> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *v2 = &off_1E335A710;
  v2[1] = v3;
  if (v3)
  {
    v5 = v2;
    WTF::ensureOnMainThread();
    result = (uint64_t)v5;
    if (v5)
      return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  }
  else
  {
    result = 139;
    __break(0xC471u);
  }
  return result;
}

void sub_1953D6594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::deleteCookiesMatching(WTF::Function<BOOL ()(NSHTTPCookie *)> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  *a1 = &off_1E335AA38;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

void sub_1953D6660(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::deleteCookiesMatching(WTF::Function<BOOL ()(NSHTTPCookie *)> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335AA38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void sub_1953D673C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::deleteCookies(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,BOOL,NSHTTPCookie *>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E335AA60;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::deleteCookies(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,BOOL,NSHTTPCookie *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335AA60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::deleteCookies(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,BOOL,NSHTTPCookie *>::call(uint64_t a1, void *a2)
{
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  MEMORY[0x19AEA5508](&v12, objc_msgSend(a2, "domain"));
  if (WTF::equal(v12, *(const WTF::StringImpl **)(a1 + 8), v4))
  {
    MEMORY[0x19AEA5508](&v11, objc_msgSend(a2, "_storagePartition"));
    v7 = WTF::equalIgnoringNullity(v11, **(WTF::StringImpl ***)(a1 + 16), v6);
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v7;
}

void sub_1953D68D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::deleteCookiesForHostnames(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::IncludeHttpOnlyCookies,WebCore::ScriptWrittenCookiesOnly,WTF::CompletionHandler<void ()(void)> &&)::$_0,BOOL,NSHTTPCookie *>::call(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t *v6;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int i;
  int v15;
  WTF *v16;
  WTF::StringImpl *v18;

  if (!objc_msgSend(a2, "domain") || !**(_BYTE **)(a1 + 8) && (objc_msgSend(a2, "isHTTPOnly") & 1) != 0)
    return 0;
  v4 = objc_msgSend((id)objc_msgSend(a2, "properties"), "valueForKey:", CFSTR("SetInJavaScript"));
  if (**(_BYTE **)(a1 + 16) && v4 == 0)
    return 0;
  v6 = *(uint64_t **)(a1 + 24);
  MEMORY[0x19AEA5508](&v18, objc_msgSend(a2, "domain"));
  v9 = *v6;
  v10 = v18;
  if (*v6)
  {
    v11 = *(_DWORD *)(v9 - 8);
    v12 = *((_DWORD *)v18 + 4);
    if (v12 < 0x100)
      v13 = WTF::StringImpl::hashSlowCase(v18);
    else
      v13 = v12 >> 8;
    for (i = 0; ; v13 = i + v15)
    {
      v15 = v13 & v11;
      v16 = *(WTF **)(v9 + 8 * (v13 & v11));
      if (!v16)
        break;
      if (v16 != (WTF *)-1 && (WTF::equal(v16, v18, v8) & 1) != 0)
      {
        v9 = 1;
        goto LABEL_19;
      }
      ++i;
    }
    v9 = 0;
LABEL_19:
    v10 = v18;
  }
  v18 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  return v9;
}

void sub_1953D6A64(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetworkStorageSession::domCookiesForHost(WTF::String const&)::$_0,BOOL,NSHTTPCookie *>::call(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isHTTPOnly") ^ 1;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  WTF **v11;
  unsigned int v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return 24 * v4;
  v7 = v4 - 1;
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
  {
    v10 = WTF::StringImpl::hashSlowCase(*a2);
    v3 = *a1;
  }
  else
  {
    v10 = v9 >> 8;
  }
  v12 = (v10 ^ v8) & v7;
  v11 = (WTF **)(v3 + 24 * v12);
  v13 = *v11;
  if (*v11)
  {
    v14 = -1;
    while (1)
    {
      v15 = *((_DWORD *)v13 + 4);
      v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v15 >> 8;
      if (++v14 > ((v12 + v4 - ((v16 ^ v8) & v7)) & v7))
        break;
      if (v16 == v10 && (WTF::equal(*v11, *a2, a3) & 1) != 0)
        return (uint64_t)v11;
      v3 = *a1;
      v12 = (v12 + 1) & v7;
      v11 = (WTF **)(*a1 + 24 * v12);
      v13 = *v11;
      if (!*v11)
        return v3 + 24 * *((unsigned int *)a1 + 2);
    }
    v3 = *a1;
  }
  return v3 + 24 * *((unsigned int *)a1 + 2);
}

void WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(WTF **a1, unsigned int a2)
{
  WTF *v3;
  size_t v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  char *v22;
  uint64_t *v23;
  uint64_t *v24;
  WTF *v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t k;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t i;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t j;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t m;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v85;
  uint64_t *v86;
  int v87;
  int v88;
  int v89;

  v82 = *((unsigned int *)a1 + 2);
  v3 = *a1;
  v4 = 24 * a2;
  v5 = (WTF *)WTF::fastMalloc((WTF *)v4);
  v7 = v5;
  if (a2)
    bzero(v5, v4);
  v8 = a1;
  *a1 = v7;
  *((_DWORD *)a1 + 2) = a2;
  v9 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  *((_DWORD *)a1 + 4) = (v11 >> 31) ^ v11;
  *((_BYTE *)a1 + 20) = 0;
  if ((_DWORD)v82)
  {
    v12 = 0;
    v81 = v3;
    do
    {
      v83 = v12;
      v13 = (char *)v3 + 24 * v12;
      v14 = *(WTF::StringImpl **)v13;
      if (*(_QWORD *)v13)
      {
        v15 = *((_DWORD *)v8 + 2);
        v16 = *((_DWORD *)v8 + 4);
        v17 = *((_DWORD *)v14 + 4);
        v89 = v15;
        v88 = v16;
        if (v17 < 0x100)
        {
          v18 = WTF::StringImpl::hashSlowCase(v14);
          v16 = v88;
          v15 = v89;
          v8 = a1;
        }
        else
        {
          v18 = v17 >> 8;
        }
        v19 = 0;
        v20 = v15 - 1;
        v21 = (v18 ^ v16) & (v15 - 1);
        v22 = (char *)v3 + 24 * v12;
        v23 = (uint64_t *)(v22 + 8);
        v24 = (uint64_t *)(v22 + 16);
        v87 = v15 - 1;
        v85 = (uint64_t *)(v22 + 16);
        v86 = (uint64_t *)(v22 + 8);
        while (1)
        {
          v25 = *v8;
          v26 = (WTF::StringImpl **)((char *)*v8 + 24 * v21);
          v27 = *v26;
          if (!*v26)
            break;
          v28 = *((_DWORD *)v27 + 4);
          if (v28 < 0x100)
          {
            v29 = WTF::StringImpl::hashSlowCase(*v26);
            v24 = v85;
            v23 = v86;
            v20 = v87;
            v16 = v88;
            v15 = v89;
            v8 = a1;
          }
          else
          {
            v29 = v28 >> 8;
          }
          v35 = (v21 + v15 - ((v29 ^ v16) & v20)) & v20;
          if (v19 > v35)
          {
            v6 = *(WTF::StringImpl **)v13;
            v36 = *v23;
            *(_QWORD *)v13 = 0;
            *((_QWORD *)v13 + 1) = 0;
            v37 = *v24;
            v38 = *v26;
            *v26 = 0;
            v39 = *(WTF::StringImpl **)v13;
            *(_QWORD *)v13 = v38;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
              {
                v49 = v37;
                v50 = v36;
                v51 = v6;
                WTF::StringImpl::destroy(v39, v6);
                v6 = v51;
                v3 = v81;
                v36 = v50;
                v37 = v49;
                v24 = v85;
                v23 = v86;
                v20 = v87;
                v16 = v88;
                v15 = v89;
                v8 = a1;
              }
              else
              {
                *(_DWORD *)v39 -= 2;
              }
            }
            v40 = (uint64_t)v25 + 24 * v21;
            v42 = *(_QWORD *)(v40 + 8);
            v41 = (uint64_t *)(v40 + 8);
            *v41 = 0;
            v43 = *v23;
            *v23 = v42;
            if (v43)
            {
              v78 = v6;
              v79 = v36;
              v80 = v37;
              v59 = *(unsigned int *)(v43 - 4);
              if ((_DWORD)v59)
              {
                for (i = 0; i != v59; ++i)
                {
                  v61 = *(unsigned int **)(v43 + 8 * i);
                  if (v61 != (unsigned int *)-1)
                  {
                    *(_QWORD *)(v43 + 8 * i) = 0;
                    if (v61)
                    {
                      do
                      {
                        v62 = __ldaxr(v61);
                        v63 = v62 - 1;
                      }
                      while (__stlxr(v63, v61));
                      if (!v63)
                      {
                        atomic_store(1u, v61);
                        v77 = v59;
                        WTF::fastFree((WTF *)v61, v6);
                        v59 = v77;
                      }
                    }
                  }
                }
              }
              WTF::fastFree((WTF *)(v43 - 16), v6);
              v37 = v80;
              v3 = v81;
              v8 = a1;
              v24 = v85;
              v15 = v89;
              v20 = v87;
              v16 = v88;
              v23 = v86;
              v6 = v78;
              v36 = v79;
            }
            v44 = (uint64_t)v25 + 24 * v21;
            v46 = *(_QWORD *)(v44 + 16);
            v45 = (_QWORD *)(v44 + 16);
            *v24 = v46;
            v47 = *v26;
            *v26 = v6;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
              {
                v52 = v37;
                v53 = v36;
                WTF::StringImpl::destroy(v47, v6);
                v36 = v53;
                v37 = v52;
                v24 = v85;
                v23 = v86;
                v20 = v87;
                v16 = v88;
                v15 = v89;
                v8 = a1;
              }
              else
              {
                *(_DWORD *)v47 -= 2;
              }
            }
            v48 = *v41;
            *v41 = v36;
            if (v48)
            {
              v64 = v37;
              v65 = *(unsigned int *)(v48 - 4);
              if ((_DWORD)v65)
              {
                for (j = 0; j != v65; ++j)
                {
                  v67 = *(unsigned int **)(v48 + 8 * j);
                  if (v67 != (unsigned int *)-1)
                  {
                    *(_QWORD *)(v48 + 8 * j) = 0;
                    if (v67)
                    {
                      do
                      {
                        v68 = __ldaxr(v67);
                        v69 = v68 - 1;
                      }
                      while (__stlxr(v69, v67));
                      if (!v69)
                      {
                        atomic_store(1u, v67);
                        WTF::fastFree((WTF *)v67, v6);
                      }
                    }
                  }
                }
              }
              WTF::fastFree((WTF *)(v48 - 16), v6);
              v8 = a1;
              v24 = v85;
              v15 = v89;
              v20 = v87;
              v16 = v88;
              v23 = v86;
              v37 = v64;
            }
            *v45 = v37;
            v19 = v35;
          }
          v21 = (v21 + 1) & v20;
          ++v19;
          if (!v27)
            goto LABEL_63;
        }
        v30 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        v31 = *v26;
        *v26 = v30;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
          {
            WTF::StringImpl::destroy(v31, v6);
            v24 = v85;
            v23 = v86;
            v8 = a1;
          }
          else
          {
            *(_DWORD *)v31 -= 2;
          }
        }
        v32 = (uint64_t)v25 + 24 * v21;
        v33 = *v23;
        *v23 = 0;
        v34 = *(_QWORD *)(v32 + 8);
        *(_QWORD *)(v32 + 8) = v33;
        if (v34)
        {
          v54 = *(unsigned int *)(v34 - 4);
          if ((_DWORD)v54)
          {
            for (k = 0; k != v54; ++k)
            {
              v56 = *(unsigned int **)(v34 + 8 * k);
              if (v56 != (unsigned int *)-1)
              {
                *(_QWORD *)(v34 + 8 * k) = 0;
                if (v56)
                {
                  do
                  {
                    v57 = __ldaxr(v56);
                    v58 = v57 - 1;
                  }
                  while (__stlxr(v58, v56));
                  if (!v58)
                  {
                    atomic_store(1u, v56);
                    WTF::fastFree((WTF *)v56, v6);
                  }
                }
              }
            }
          }
          WTF::fastFree((WTF *)(v34 - 16), v6);
          v8 = a1;
          v24 = v85;
        }
        *((_QWORD *)v25 + 3 * v21 + 2) = *v24;
      }
LABEL_63:
      v70 = *((_QWORD *)v3 + 3 * v83 + 1);
      if (v70)
      {
        v72 = *(unsigned int *)(v70 - 4);
        if ((_DWORD)v72)
        {
          for (m = 0; m != v72; ++m)
          {
            v74 = *(unsigned int **)(v70 + 8 * m);
            if (v74 != (unsigned int *)-1)
            {
              *(_QWORD *)(v70 + 8 * m) = 0;
              if (v74)
              {
                do
                {
                  v75 = __ldaxr(v74);
                  v76 = v75 - 1;
                }
                while (__stlxr(v76, v74));
                if (!v76)
                {
                  atomic_store(1u, v74);
                  WTF::fastFree((WTF *)v74, v6);
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v70 - 16), v6);
        v8 = a1;
      }
      v71 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
        {
          WTF::StringImpl::destroy(v71, v6);
          v8 = a1;
        }
        else
        {
          *(_DWORD *)v71 -= 2;
        }
      }
      v12 = v83 + 1;
    }
    while (v83 + 1 != v82);
  }
  else if (!v3)
  {
    return;
  }
  WTF::fastFree(v3, v6);
}

void WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  WTF *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char *v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t j;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t k;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t i;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v46 = a1;
  v5 = a2[1];
  if (v5)
  {
    v40 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v40)
    {
      for (i = 0; i != v40; ++i)
      {
        v42 = (unsigned int *)*((_QWORD *)v5 + i);
        if (v42 != (unsigned int *)-1)
        {
          *((_QWORD *)v5 + i) = 0;
          if (v42)
          {
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              atomic_store(1u, v42);
              WTF::fastFree((WTF *)v42, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF::StringImpl *)((char *)v5 - 16), a2);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = v46;
  v7 = *(_DWORD *)(v46 + 8);
  v8 = *(_DWORD *)(v46 + 12) - 1;
  *(_DWORD *)(v46 + 12) = v8;
  v9 = v7 - 1;
  v10 = *(WTF **)v46;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - *(_QWORD *)v46) >> 3);
  v12 = ((_DWORD)v11 + 1) & (v7 - 1);
  v13 = *(_QWORD *)v46 + 24 * v12;
  v14 = *(WTF::StringImpl **)v13;
  if (*(_QWORD *)v13)
  {
    v15 = *(_DWORD *)(v46 + 16);
    v16 = -1431655765 * (((uint64_t)a2 - *(_QWORD *)v46) >> 3);
    v17 = (WTF::StringImpl **)((char *)v10 + 24 * v11);
    v18 = (v11 + 1) & (v7 - 1);
    v47 = v15;
    v48 = v7;
    do
    {
      v19 = *((_DWORD *)v14 + 4);
      if (v19 < 0x100)
      {
        v20 = WTF::StringImpl::hashSlowCase(v14);
        v15 = v47;
        v7 = v48;
      }
      else
      {
        v20 = v19 >> 8;
      }
      if (((v18 + v7 - ((v20 ^ v15) & v9)) & v9) == 0)
        break;
      v21 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      v22 = *v17;
      *v17 = v21;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
          v15 = v47;
          v7 = v48;
        }
        else
        {
          *(_DWORD *)v22 -= 2;
        }
      }
      v23 = (char *)v10 + 24 * v16;
      v24 = (char *)v10 + 24 * v12;
      v26 = *((_QWORD *)v24 + 1);
      v25 = (uint64_t *)(v24 + 8);
      *v25 = 0;
      v27 = *((_QWORD *)v23 + 1);
      *((_QWORD *)v23 + 1) = v26;
      if (v27)
      {
        v30 = *(unsigned int *)(v27 - 4);
        if ((_DWORD)v30)
        {
          for (j = 0; j != v30; ++j)
          {
            v32 = *(unsigned int **)(v27 + 8 * j);
            if (v32 != (unsigned int *)-1)
            {
              *(_QWORD *)(v27 + 8 * j) = 0;
              if (v32)
              {
                do
                {
                  v33 = __ldaxr(v32);
                  v34 = v33 - 1;
                }
                while (__stlxr(v34, v32));
                if (!v34)
                {
                  atomic_store(1u, v32);
                  v45 = v30;
                  WTF::fastFree((WTF *)v32, a2);
                  v30 = v45;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v27 - 16), a2);
        v6 = v46;
        v15 = v47;
        v7 = v48;
      }
      *((_QWORD *)v10 + 3 * v16 + 2) = *((_QWORD *)v10 + 3 * v12 + 2);
      v28 = *v25;
      if (*v25)
      {
        v35 = *(unsigned int *)(v28 - 4);
        if ((_DWORD)v35)
        {
          for (k = 0; k != v35; ++k)
          {
            v37 = *(unsigned int **)(v28 + 8 * k);
            if (v37 != (unsigned int *)-1)
            {
              *(_QWORD *)(v28 + 8 * k) = 0;
              if (v37)
              {
                do
                {
                  v38 = __ldaxr(v37);
                  v39 = v38 - 1;
                }
                while (__stlxr(v39, v37));
                if (!v39)
                {
                  atomic_store(1u, v37);
                  WTF::fastFree((WTF *)v37, a2);
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v28 - 16), a2);
        v6 = v46;
        v15 = v47;
        v7 = v48;
      }
      v29 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
          v15 = v47;
          v7 = v48;
        }
        else
        {
          *(_DWORD *)v29 -= 2;
        }
      }
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      v12 = (v18 + 1) & v9;
      v10 = *(WTF **)v6;
      v16 = v18;
      v17 = (WTF::StringImpl **)(*(_QWORD *)v6 + 24 * v18);
      v13 = *(_QWORD *)v6 + 24 * v12;
      v14 = *(WTF::StringImpl **)v13;
      v18 = (v18 + 1) & v9;
    }
    while (*(_QWORD *)v13);
    v7 = *(_DWORD *)(v6 + 8);
    v8 = *(_DWORD *)(v6 + 12);
  }
  if (v7 >= 9 && 6 * v8 < v7)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((WTF **)v6, v7 >> 1);
}

uint64_t WTF::HashTable<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashMap<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>>::rehash(uint64_t *a1, unsigned int a2, const void **a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  const void *v14;
  uint64_t v15;
  WTF *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  const void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  const void *v42;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (const void **)(v5 + 16 * v10);
      v14 = *v13;
      if (*v13 != (const void *)-1)
      {
        if (v14)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v20 + 16 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (v28);
          v29 = v20 + 16 * v27;
          v30 = *(WTF **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v30)
          {
            if (*(_QWORD *)v30)
            {
              *(_QWORD *)(*(_QWORD *)v30 + 8) = 0;
              v31 = *(unsigned int **)v30;
              *(_QWORD *)v30 = 0;
              if (v31)
              {
                do
                {
                  v32 = __ldaxr(v31);
                  v33 = v32 - 1;
                }
                while (__stlxr(v33, v31));
                if (!v33)
                {
                  atomic_store(1u, v31);
                  WTF::fastFree((WTF *)v31, v9);
                }
              }
            }
            else
            {
              *(_QWORD *)v30 = 0;
            }
            WTF::fastFree(v30, v9);
            v34 = *(const void **)v29;
            *(_QWORD *)v29 = 0;
            if (v34)
              CFRelease(v34);
          }
          else
          {
            *(_QWORD *)v29 = 0;
          }
          v35 = *v13;
          *v13 = 0;
          *(_QWORD *)v29 = v35;
          v36 = v5 + 16 * v10;
          v37 = *(_QWORD *)(v36 + 8);
          *(_QWORD *)(v36 + 8) = 0;
          *(_QWORD *)(v29 + 8) = v37;
          v38 = *(WTF **)(v36 + 8);
          *(_QWORD *)(v36 + 8) = 0;
          if (v38)
          {
            if (*(_QWORD *)v38)
            {
              *(_QWORD *)(*(_QWORD *)v38 + 8) = 0;
              v39 = *(unsigned int **)v38;
              *(_QWORD *)v38 = 0;
              if (v39)
              {
                do
                {
                  v40 = __ldaxr(v39);
                  v41 = v40 - 1;
                }
                while (__stlxr(v41, v39));
                if (!v41)
                {
                  atomic_store(1u, v39);
                  WTF::fastFree((WTF *)v39, v9);
                }
              }
            }
            else
            {
              *(_QWORD *)v38 = 0;
            }
            WTF::fastFree(v38, v9);
          }
          v42 = *v13;
          *v13 = 0;
          if (v42)
            CFRelease(v42);
          if (v13 == a3)
            v11 = v29;
        }
        else
        {
          v15 = v5 + 16 * v10;
          v16 = *(WTF **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            if (*(_QWORD *)v16)
            {
              *(_QWORD *)(*(_QWORD *)v16 + 8) = 0;
              v17 = *(unsigned int **)v16;
              *(_QWORD *)v16 = 0;
              if (v17)
              {
                do
                {
                  v18 = __ldaxr(v17);
                  v19 = v18 - 1;
                }
                while (__stlxr(v19, v17));
                if (!v19)
                {
                  atomic_store(1u, v17);
                  WTF::fastFree((WTF *)v17, v9);
                }
              }
            }
            else
            {
              *(_QWORD *)v16 = 0;
            }
            WTF::fastFree(v16, v9);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
            CFRelease(v14);
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_1,void,WebCore::ShouldContinuePolicyCheck>::~CallableWrapper(_QWORD *a1, void *a2)
{
  const void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E335AAD8;
  v3 = (const void *)a1[9];
  a1[9] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_1,void,WebCore::ShouldContinuePolicyCheck>::~CallableWrapper(WTF *a1, void *a2)
{
  const void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;

  *(_QWORD *)a1 = off_1E335AAD8;
  v3 = (const void *)*((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 9) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)*((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v7);
}

WTF *WTF::Detail::CallableWrapper<WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_1,void,WebCore::ShouldContinuePolicyCheck>::call(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      *(_BYTE *)(v3 + 32) = 2;
  }
  if (a2)
    return WebCore::RangeResponseGenerator::giveResponseToTaskIfBytesInRangeReceived(WebCoreNSURLSessionDataTask *,WebCore::ParsedRequestRange const&,std::optional<unsigned long>,WebCore::RangeResponseGenerator::Data const&)::$_0::operator()(a1 + 8);
  else
    return (WTF *)objc_msgSend(*(id *)(a1 + 72), "cancel");
}

void WebCore::RangeResponseGenerator::Data::~Data(WebCore::RangeResponseGenerator::Data *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::RangeResponseGenerator::Data::~Data(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  const void *v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[2];

  *(_QWORD *)this = off_1E335AB00;
  v3 = *((_QWORD *)this + 36);
  if (!v3
    || ((*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3),
        v4 = *((_QWORD *)this + 36),
        *((_QWORD *)this + 36) = 0,
        !v4))
  {
    *((_QWORD *)this + 36) = 0;
    goto LABEL_37;
  }
  v5 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_8:
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 - 1;
  *(_QWORD *)(v5 + 8) = v7 - 1;
  if (v7 == 1)
  {
    v35 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v10 = v35 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = __ldxr((unsigned __int8 *)v5);
  if (v11 != 1)
  {
    __clrex();
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      goto LABEL_20;
    goto LABEL_16;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
    goto LABEL_15;
  if (v8)
    goto LABEL_20;
LABEL_16:
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  if (!v10)
    WTF::fastFree((WTF *)v5, a2);
LABEL_20:
  v12 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (!v12)
    goto LABEL_37;
  v13 = *(_QWORD *)(v12 + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_25;
  }
  MEMORY[0x19AEA534C](v13);
LABEL_25:
  v15 = *(_QWORD *)(v13 + 8);
  v16 = v15 - 1;
  *(_QWORD *)(v13 + 8) = v15 - 1;
  if (v15 == 1)
  {
    v36 = *(_QWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    v18 = v36 != 0;
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  v19 = __ldxr((unsigned __int8 *)v13);
  if (v19 != 1)
  {
    __clrex();
LABEL_32:
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      goto LABEL_37;
    goto LABEL_33;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
    goto LABEL_32;
  if (v16)
    goto LABEL_37;
LABEL_33:
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  if (!v18)
    WTF::fastFree((WTF *)v13, a2);
LABEL_37:
  v20 = (const void *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v20)
    CFRelease(v20);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::RangeResponseGenerator::Data *)((char *)this + 24), (WTF::StringImpl *)a2);
  v22 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v22)
  {
    do
    {
      v23 = __ldaxr((unsigned int *)v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)v22));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)v22);
      v26 = *(unsigned int *)(v22 + 20);
      if ((_DWORD)v26)
      {
        v27 = *(_QWORD *)(v22 + 8);
        v28 = v27 + 16 * v26;
        do
        {
          v29 = *(unsigned int **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
          {
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              atomic_store(1u, v29);
              v32 = v29[6];
              if ((_DWORD)v32 != -1)
                ((void (*)(_BYTE *, unsigned int *))off_1E335A898[v32])(v37, v29 + 2);
              v29[6] = -1;
              WTF::fastFree((WTF *)v29, v21);
            }
          }
          v27 += 16;
        }
        while (v27 != v28);
      }
      v33 = *(WTF **)(v22 + 8);
      if ((WTF *)(v22 + 24) != v33 && v33 != 0)
      {
        *(_QWORD *)(v22 + 8) = 0;
        *(_DWORD *)(v22 + 16) = 0;
        WTF::fastFree(v33, v21);
      }
      WTF::fastFree((WTF *)v22, v21);
    }
  }
  v25 = *((_QWORD *)this + 1);
  if (v25)
    WTF::HashTable<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashMap<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>>::deallocateTable(v25, v21);
}

uint64_t WTF::HashTable<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashMap<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  const void *v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + 16 * i;
      v6 = *(const void **)v5;
      if (*(_QWORD *)v5 != -1)
      {
        v7 = *(WTF **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v7)
        {
          if (*(_QWORD *)v7)
          {
            *(_QWORD *)(*(_QWORD *)v7 + 8) = 0;
            v8 = *(unsigned int **)v7;
            *(_QWORD *)v7 = 0;
            if (v8)
            {
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
              {
                atomic_store(1u, v8);
                WTF::fastFree((WTF *)v8, a2);
              }
            }
          }
          else
          {
            *(_QWORD *)v7 = 0;
          }
          WTF::fastFree(v7, a2);
          v6 = *(const void **)v5;
        }
        *(_QWORD *)v5 = 0;
        if (v6)
          CFRelease(v6);
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void sub_1953D7C04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  const void *v23;
  void *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF *v38;

  v15 = v13[36];
  v13[36] = 0;
  if (!v15)
    goto LABEL_19;
  v16 = *(_QWORD *)(v15 + 8);
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
LABEL_7:
    v18 = *(_QWORD *)(v16 + 8);
    v19 = v18 - 1;
    *(_QWORD *)(v16 + 8) = v18 - 1;
    if (v18 == 1)
    {
      v30 = *(_QWORD *)(v16 + 16);
      v20 = *(_QWORD *)(v16 + 24);
      *(_QWORD *)(v16 + 24) = 0;
      v21 = v30 != 0;
    }
    else
    {
      v20 = 0;
      v21 = 1;
    }
    v22 = __ldxr((unsigned __int8 *)v16);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
LABEL_14:
        if (!v19)
        {
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
          if (!v21)
            WTF::fastFree((WTF *)v16, a2);
        }
LABEL_19:
        v23 = (const void *)v13[33];
        v13[33] = 0;
        if (v23)
          CFRelease(v23);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(v13 + 3), (WTF::StringImpl *)a2);
        v25 = (unsigned int *)v13[2];
        v13[2] = 0;
        if (v25)
        {
          v26 = v25;
          do
          {
            v27 = __ldaxr(v25);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v25));
          if (!v28)
          {
            atomic_store(1u, v25);
            v31 = v25[5];
            if ((_DWORD)v31)
            {
              v32 = *((_QWORD *)v26 + 1);
              v33 = v32 + 16 * v31;
              do
              {
                v34 = *(unsigned int **)(v32 + 8);
                *(_QWORD *)(v32 + 8) = 0;
                if (v34)
                {
                  do
                  {
                    v35 = __ldaxr(v34);
                    v36 = v35 - 1;
                  }
                  while (__stlxr(v36, v34));
                  if (!v36)
                  {
                    atomic_store(1u, v34);
                    v37 = v34[6];
                    if ((_DWORD)v37 != -1)
                      ((void (*)(char *, unsigned int *))off_1E335A898[v37])(&a13, v34 + 2);
                    v34[6] = -1;
                    WTF::fastFree((WTF *)v34, v24);
                  }
                }
                v32 += 16;
              }
              while (v32 != v33);
            }
            v38 = (WTF *)*((_QWORD *)v26 + 1);
            if (v26 + 6 != (unsigned int *)v38 && v38 != 0)
            {
              *((_QWORD *)v26 + 1) = 0;
              v26[4] = 0;
              WTF::fastFree(v38, v24);
            }
            WTF::fastFree((WTF *)v26, v24);
          }
        }
        v29 = v13[1];
        if (v29)
          WTF::HashTable<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashMap<WTF::RetainPtr<WebCoreNSURLSessionDataTask>,std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>,WTF::DefaultHash<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>,WTF::HashTraits<std::unique_ptr<WebCore::RangeResponseGeneratorDataTaskData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<WebCoreNSURLSessionDataTask>>>::deallocateTable(v29, v24);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v16);
  goto LABEL_7;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,__CFString const*>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    result = MEMORY[0x19AEA5508](*(_QWORD *)v3 + 8 * *(unsigned int *)(v3 + 12), *a2);
    ++*(_DWORD *)(v3 + 12);
    return result;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore20NetworkStateNotifier14startObservingEvEUb_E4__21vJEE4callEv(WebCore::NetworkStateNotifier *a1)
{
  WTF::MonotonicTime *v1;
  uint64_t v2;
  double v3;

  v1 = (WTF::MonotonicTime *)WebCore::NetworkStateNotifier::singleton(a1);
  v2 = (uint64_t)v1 + 24;
  *((_QWORD *)v1 + 6) = 0;
  WTF::MonotonicTime::now(v1);
  return WebCore::TimerBase::setNextFireTime(v2, v3 + 2.0);
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::SQLiteIDBBackingStore(WebCore::IDBServer::SQLiteIDBBackingStore *this, const WebCore::IDBDatabaseIdentifier *a2, const WTF::String *a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t result;
  char v11;
  char v12;

  *(_QWORD *)this = off_1E335A5B0;
  if (WTF::isMainThread(this))
  {
    result = 102;
    __break(0xC471u);
  }
  else
  {
    *(_QWORD *)this = off_1E335AB48;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 88) = 0u;
    *(_OWORD *)((char *)this + 104) = 0u;
    *(_OWORD *)((char *)this + 120) = 0u;
    *(_OWORD *)((char *)this + 136) = 0u;
    *(_OWORD *)((char *)this + 152) = 0u;
    *(_OWORD *)((char *)this + 168) = 0u;
    *(_OWORD *)((char *)this + 184) = 0u;
    *(_OWORD *)((char *)this + 200) = 0u;
    *(_OWORD *)((char *)this + 216) = 0u;
    *(_OWORD *)((char *)this + 232) = 0u;
    *(_OWORD *)((char *)this + 248) = 0u;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 264) = 0u;
    *(_OWORD *)((char *)this + 280) = 0u;
    *(_OWORD *)((char *)this + 296) = 0u;
    *(_OWORD *)((char *)this + 312) = 0u;
    *(_OWORD *)((char *)this + 328) = 0u;
    *(_OWORD *)((char *)this + 344) = 0u;
    *(_OWORD *)((char *)this + 360) = 0u;
    *(_OWORD *)((char *)this + 376) = 0u;
    *(_OWORD *)((char *)this + 392) = 0u;
    *(_OWORD *)((char *)this + 408) = 0u;
    *(_OWORD *)((char *)this + 424) = 0u;
    *(_OWORD *)((char *)this + 440) = 0u;
    v6 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v6 += 2;
    *((_QWORD *)this + 57) = v6;
    *((_BYTE *)this + 464) = 0;
    *((_DWORD *)this + 122) = -1;
    v7 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(char *, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_1[v7])(&v11, (char *)this + 464, (char *)a2 + 8);
      *((_DWORD *)this + 122) = v7;
    }
    *((_BYTE *)this + 496) = 0;
    *((_DWORD *)this + 130) = -1;
    v8 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(char *, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_1[v8])(&v12, (char *)this + 496, (char *)a2 + 40);
      *((_DWORD *)this + 130) = v8;
    }
    *((_BYTE *)this + 528) = *((_BYTE *)a2 + 72);
    *(_OWORD *)((char *)this + 536) = 0u;
    *(_OWORD *)((char *)this + 552) = 0u;
    *((_QWORD *)this + 71) = 0;
    v9 = *(_DWORD **)a3;
    if (*(_QWORD *)a3)
      *v9 += 2;
    *((_QWORD *)this + 72) = v9;
    return (uint64_t)this;
  }
  return result;
}

void WebCore::IDBServer::SQLiteIDBBackingStore::~SQLiteIDBBackingStore(WebCore::IDBServer::SQLiteIDBBackingStore *this, void *a2)
{
  uint64_t i;
  char *v4;
  sqlite3_stmt **v5;
  void *v6;
  unsigned int *v7;
  unsigned int v9;
  WebCore::SQLiteDatabase *v10;
  uint64_t v11;
  WTF *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::IDBServer::SQLiteIDBTransaction **v22;
  WebCore::IDBServer::SQLiteIDBTransaction *v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  WTF *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WebCore::IDBObjectStoreInfo *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WebCore::IDBObjectStoreInfo *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::IDBServer::SQLiteIDBBackingStore *v45;
  WTF::StringImpl *v46;
  sqlite3_stmt **v47;
  sqlite3_stmt **v48;
  void *v49;
  unsigned int *v50;
  unsigned int v52;
  WTF *v53;
  void *v54;
  WTF *v55;
  void *v56;
  char v57;
  char v58;

  if (*((_QWORD *)this + 69))
  {
    for (i = 0; i != 56; ++i)
    {
      v4 = (char *)this + 8 * i;
      v5 = (sqlite3_stmt **)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v5)
      {
        sqlite3_finalize(v5[1]);
        v7 = (unsigned int *)*v5;
        *v5 = 0;
        if (v7)
        {
          if (!atomic_load(v7))
          {
            __break(0xC471u);
            JUMPOUT(0x1953D8458);
          }
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
        WTF::fastFree((WTF *)v5, v6);
      }
    }
    v10 = (WebCore::SQLiteDatabase *)*((_QWORD *)this + 69);
    if (v10)
    {
      WebCore::SQLiteDatabase::close(v10);
      v11 = *((_QWORD *)this + 69);
      *((_QWORD *)this + 69) = 0;
      if (v11)
      {
        WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v11);
        v12 = *(WTF **)(v11 + 56);
        *(_QWORD *)(v11 + 56) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 1)
            WTF::fastFree(v12, a2);
          else
            --*(_DWORD *)v12;
        }
        v13 = *(unsigned int **)(v11 + 40);
        *(_QWORD *)(v11 + 40) = 0;
        if (v13)
        {
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            atomic_store(1u, v13);
            WTF::Thread::~Thread((WTF::Thread *)v13);
            WTF::fastFree(v55, v56);
          }
        }
        v16 = *(_QWORD *)(v11 + 24);
        *(_QWORD *)(v11 + 24) = 0;
        if (v16)
          WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v16, (WTF::StringImpl *)a2);
        if (atomic_load((unsigned int *)v11))
        {
          *(_OWORD *)(v11 + 32) = 0u;
          *(_OWORD *)(v11 + 48) = 0u;
          *(_OWORD *)v11 = 0u;
          *(_OWORD *)(v11 + 16) = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v11, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)this + 69) = 0;
    }
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *((_QWORD *)this + 71);
  if (v19)
    WTF::fastFree((WTF *)(v19 - 16), a2);
  v20 = *((_QWORD *)this + 70);
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v21)
    {
      v22 = (WebCore::IDBServer::SQLiteIDBTransaction **)(v20 + 16);
      do
      {
        if (*(v22 - 2) != (WebCore::IDBServer::SQLiteIDBTransaction *)-1)
        {
          v23 = *v22;
          *v22 = 0;
          if (v23)
          {
            WebCore::IDBServer::SQLiteIDBTransaction::~SQLiteIDBTransaction(v23, (WTF::StringImpl *)a2);
            WTF::fastFree(v24, v25);
          }
        }
        v22 += 3;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v20 - 16), a2);
  }
  v26 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v26)
  {
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v26);
    v27 = *(WTF **)(v26 + 56);
    *(_QWORD *)(v26 + 56) = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 1)
        WTF::fastFree(v27, a2);
      else
        --*(_DWORD *)v27;
    }
    v28 = *(unsigned int **)(v26 + 40);
    *(_QWORD *)(v26 + 40) = 0;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::Thread::~Thread((WTF::Thread *)v28);
        WTF::fastFree(v53, v54);
      }
    }
    v31 = *(_QWORD *)(v26 + 24);
    *(_QWORD *)(v26 + 24) = 0;
    if (v31)
      WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v31, (WTF::StringImpl *)a2);
    if (atomic_load((unsigned int *)v26))
    {
      *(_OWORD *)(v26 + 32) = 0u;
      *(_OWORD *)(v26 + 48) = 0u;
      *(_OWORD *)v26 = 0u;
      *(_OWORD *)(v26 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v26, a2);
    }
  }
  v33 = (WTF::StringImpl **)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v33)
  {
    v34 = v33[4];
    if (v34)
    {
      v35 = *((unsigned int *)v34 - 1);
      if ((_DWORD)v35)
      {
        v36 = (WTF::StringImpl *)((char *)v34 + 8);
        do
        {
          if (*((_QWORD *)v36 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v36, (WTF::StringImpl *)a2);
          v36 = (WebCore::IDBObjectStoreInfo *)((char *)v36 + 72);
          --v35;
        }
        while (v35);
      }
      WTF::fastFree((WTF::StringImpl *)((char *)v34 - 16), a2);
    }
    v37 = *v33;
    *v33 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v37 -= 2;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v33, a2);
  }
  v38 = (WTF::StringImpl **)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v38)
  {
    v39 = v38[4];
    if (v39)
    {
      v40 = *((unsigned int *)v39 - 1);
      if ((_DWORD)v40)
      {
        v41 = (WTF::StringImpl *)((char *)v39 + 8);
        do
        {
          if (*((_QWORD *)v41 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v41, (WTF::StringImpl *)a2);
          v41 = (WebCore::IDBObjectStoreInfo *)((char *)v41 + 72);
          --v40;
        }
        while (v40);
      }
      WTF::fastFree((WTF::StringImpl *)((char *)v39 - 16), a2);
    }
    v42 = *v38;
    *v38 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v42 -= 2;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v38, a2);
  }
  v43 = *((unsigned int *)this + 130);
  if ((_DWORD)v43 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_1[v43])(&v57, (char *)this + 496);
  *((_DWORD *)this + 130) = -1;
  v44 = *((unsigned int *)this + 122);
  if ((_DWORD)v44 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_1[v44])(&v58, (char *)this + 464);
  v45 = (WebCore::IDBServer::SQLiteIDBBackingStore *)((char *)this + 456);
  *((_DWORD *)this + 122) = -1;
  v46 = (WTF::StringImpl *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      v46 = (WTF::StringImpl *)WTF::StringImpl::destroy(v46, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v46 -= 2;
  }
  do
  {
    v48 = (sqlite3_stmt **)*((_QWORD *)v45 - 1);
    v45 = (WebCore::IDBServer::SQLiteIDBBackingStore *)((char *)v45 - 8);
    v47 = v48;
    *(_QWORD *)v45 = 0;
    if (v48)
    {
      sqlite3_finalize(v47[1]);
      v50 = (unsigned int *)*v47;
      *v47 = 0;
      if (v50)
      {
        if (!atomic_load(v50))
        {
          __break(0xC471u);
          JUMPOUT(0x1953D8438);
        }
        do
          v52 = __ldaxr(v50);
        while (__stlxr(v52 - 1, v50));
      }
      v46 = (WTF::StringImpl *)WTF::fastFree((WTF *)v47, v49);
    }
  }
  while (v45 != (WebCore::IDBServer::SQLiteIDBBackingStore *)((char *)this + 8));
  *(_QWORD *)this = off_1E335A5B0;
  if (WTF::isMainThread(v46))
  {
    __break(0xC471u);
    JUMPOUT(0x1953D8478);
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::IDBServer::SQLiteIDBBackingStore::~SQLiteIDBBackingStore(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement(sqlite3_stmt ***a1, uint64_t a2, unint64_t a3, const char *a4, int a5)
{
  sqlite3_stmt **v6;
  uint64_t v7;
  sqlite3_stmt ***v8;
  sqlite3_stmt **v9;
  unsigned int *v10;
  int v11;
  sqlite3_stmt **v12;
  sqlite3_stmt **v13;
  void *v14;
  unsigned int *v15;
  unsigned int v17;
  sqlite3_stmt **v18;
  int v19;
  char v20;

  if (a3 > 0x37)
    goto LABEL_2;
  v7 = a2 + 8 * a3;
  v9 = *(sqlite3_stmt ***)(v7 + 8);
  v8 = (sqlite3_stmt ***)(v7 + 8);
  v6 = v9;
  if (v9)
    goto LABEL_16;
  v10 = *(unsigned int **)(a2 + 552);
  if (!v10)
  {
LABEL_2:
    v6 = 0;
LABEL_16:
    *a1 = v6;
    return;
  }
  WebCore::SQLiteDatabase::prepareHeapStatement(v10, a4, a5, &v18);
  v11 = v19;
  if (v19)
  {
LABEL_11:
    if (v11 == -1)
      goto LABEL_15;
    goto LABEL_14;
  }
  v12 = v18;
  v18 = 0;
  v13 = *v8;
  *v8 = v12;
  if (!v13)
  {
    v11 = 0;
LABEL_14:
    ((void (*)(char *, sqlite3_stmt ***))off_1E335AE38[v11])(&v20, &v18);
LABEL_15:
    v6 = *v8;
    goto LABEL_16;
  }
  sqlite3_finalize(v13[1]);
  v15 = (unsigned int *)*v13;
  *v13 = 0;
  if (!v15)
  {
LABEL_10:
    WTF::fastFree((WTF *)v13, v14);
    v11 = v19;
    goto LABEL_11;
  }
  if (atomic_load(v15))
  {
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    goto LABEL_10;
  }
  __break(0xC471u);
}

void WebCore::IDBServer::SQLiteIDBBackingStore::updateOneIndexForAddRecord(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int *a5, unsigned int **a6, sqlite3_int64 a7)
{
  uint64_t v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  WTF::StringImpl *v22;
  int v23;
  __int16 v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  unsigned int v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  char v40;
  uint64_t v41;
  __int128 v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  char v47;
  _BYTE v48[16];
  int v49;
  WTF *v50;
  _BYTE *v51;
  uint64_t v52[2];
  int v53;
  char v54;
  char *v55;
  _BYTE v56[32];
  int v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v56[0] = 0;
  v58 = 0;
  WebCore::IDBObjectStoreInfo::isolatedCopy(a3, (uint64_t)&v35);
  WebCore::IDBIndexInfo::isolatedCopy(a4, (uint64_t)&v42);
  v13 = a5[6];
  if ((_DWORD)v13 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v55 = &v54;
  ((void (*)(uint64_t *__return_ptr, char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v13])(v52, &v55, a5 + 2);
  v47 = 0;
  v48[0] = 0;
  v49 = -1;
  v14 = v53;
  if (v53 != -1)
  {
    ((void (*)(char **, _BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v53])(&v55, v48, v52);
    v49 = v14;
    if (v53 != -1)
      ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v53])(&v55, v52);
  }
  v15 = *a6;
  if (*a6)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v50 = (WTF *)v15;
  v51 = v56;
  v17 = WTF::fastMalloc((WTF *)0xB0);
  v18 = v17;
  *(_QWORD *)v17 = off_1E335AEC8;
  *(_QWORD *)(v17 + 8) = v35;
  v19 = v36;
  v36 = 0;
  *(_QWORD *)(v17 + 16) = v19;
  *(_BYTE *)(v17 + 24) = 0;
  *(_BYTE *)(v17 + 48) = 0;
  if (v39)
  {
    *(_DWORD *)(v17 + 40) = -1;
    v20 = v38;
    if (v38 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, uint64_t *))off_1E335AE28[v38])(v52, v17 + 24, &v37);
      *(_DWORD *)(v18 + 40) = v20;
    }
    *(_BYTE *)(v18 + 48) = 1;
  }
  v21 = v40;
  *(_BYTE *)(v18 + 96) = 0;
  *(_BYTE *)(v18 + 56) = v21;
  *(_QWORD *)(v18 + 64) = v41;
  *(_OWORD *)(v18 + 72) = v42;
  v22 = v43;
  v41 = 0;
  v43 = 0;
  *(_QWORD *)(v18 + 88) = v22;
  *(_DWORD *)(v18 + 112) = -1;
  v23 = v45;
  if (v45 != -1)
  {
    ((void (*)(uint64_t *))off_1E335AE28[v45])(v52);
    *(_DWORD *)(v18 + 112) = v23;
  }
  v24 = v46;
  *(_BYTE *)(v18 + 136) = 0;
  *(_WORD *)(v18 + 120) = v24;
  *(_BYTE *)(v18 + 128) = v47;
  *(_DWORD *)(v18 + 152) = -1;
  v25 = v49;
  if (v49 != -1)
  {
    ((void (*)(uint64_t *))off_1E335ADE0[v49])(v52);
    *(_DWORD *)(v18 + 152) = v25;
  }
  v26 = (unsigned int *)v50;
  if (v50)
  {
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
  }
  *(_QWORD *)(v18 + 160) = v26;
  *(_QWORD *)(v18 + 168) = v51;
  v52[0] = v18;
  WebCore::callOnIDBSerializationThreadAndWait(v52);
  v29 = v52[0];
  v52[0] = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = v50;
  v50 = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr((unsigned int *)v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)v30));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)v30);
      v34 = (WTF *)*((_QWORD *)v30 + 1);
      if (v34)
      {
        *((_QWORD *)v30 + 1) = 0;
        *((_DWORD *)v30 + 4) = 0;
        WTF::fastFree(v34, v28);
      }
      WTF::fastFree(v30, v28);
    }
  }
  if (v49 != -1)
    ((void (*)(char **, _BYTE *))off_1E335ACA8[v49])(&v55, v48);
  v49 = -1;
  if (v45 != -1)
    ((void (*)(char **, uint64_t *))off_1E335AC88[v45])(&v55, &v44);
  v45 = -1;
  v33 = v43;
  v43 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v28);
    else
      *(_DWORD *)v33 -= 2;
  }
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)&v35, (WTF::StringImpl *)v28);
  if (!v58)
  {
    *(_WORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (v57)
  {
    WebCore::IDBServer::SQLiteIDBBackingStore::uncheckedPutIndexKey(a1, a2, (uint64_t)a4, (WebCore *)a5, (uint64_t)v56, a7);
    if (!v58)
      return;
  }
  else
  {
    *(_WORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (v57 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E335ACF0[v57])(&v35, v56);
}

void WebCore::IDBServer::SQLiteIDBBackingStore::extractExistingDatabaseInfo(WebCore::IDBServer::SQLiteIDBBackingStore *this, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  sqlite3_stmt *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  WTF::StringImpl **v18;
  unint64_t *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WebCore::IDBObjectStoreInfo *v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  const WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  const WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  const WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  WTF *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF *v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  WebCore::SQLiteDatabaseTracker *v45;
  int v46;
  unsigned __int8 *v47;
  WebCore::SQLiteDatabaseTracker *v49;
  int v50;
  int v51;
  unsigned __int8 *v52;
  WebCore::SQLiteDatabaseTracker *v54;
  int v55;
  int v56;
  const UInt8 *v57;
  const UInt8 *v58;
  int v59;
  CFIndex v60;
  char v61;
  int v62;
  sqlite3_stmt **v63;
  int v64;
  WTF::StringImpl *v65;
  unsigned __int8 *v66;
  WebCore::SQLiteDatabaseTracker *v68;
  int v69;
  WTF::StringImpl *v70;
  unsigned __int8 *v71;
  WebCore::SQLiteDatabaseTracker *v73;
  WebCore::SQLiteDatabaseTracker *v74;
  WebCore::SQLiteDatabaseTracker *v75;
  int v76;
  int v77;
  WebCore::SQLiteDatabaseTracker *v78;
  int v79;
  int v80;
  unsigned __int8 *v81;
  WebCore::SQLiteDatabaseTracker *v83;
  int v84;
  unint64_t v85;
  unsigned __int8 *v86;
  WebCore::SQLiteDatabaseTracker *v88;
  int v89;
  int v90;
  unsigned __int8 *v91;
  WebCore::SQLiteDatabaseTracker *v93;
  int v94;
  int v95;
  sqlite3_int64 v96;
  unsigned __int8 *v97;
  WebCore::SQLiteDatabaseTracker *v99;
  int v100;
  int v101;
  const UInt8 *v102;
  const UInt8 *v103;
  int v104;
  CFIndex v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unsigned int v114;
  uint64_t *v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  sqlite3_int64 v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int v125;
  sqlite3_int64 *v126;
  sqlite3_int64 v127;
  sqlite3_int64 v128;
  sqlite3_int64 *v129;
  int v130;
  uint64_t v131;
  int v132;
  WTF::StringImpl *v133;
  int v134;
  uint64_t v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned int v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  int v144;
  WTF **v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  WTF *v151;
  uint64_t v152;
  int v153;
  unsigned __int8 *v154;
  unsigned __int8 *v156;
  WebCore::SQLiteDatabaseTracker *v158;
  WebCore::SQLiteDatabaseTracker *v159;
  WebCore::SQLiteDatabaseTracker *v160;
  uint64_t v161;
  unint64_t v162;
  sqlite3_int64 v163;
  WTF::StringImpl *v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int v168;
  WebCore::SQLiteDatabaseTracker *v169;
  int v170;
  int v171;
  WebCore::SQLiteDatabaseTracker *v172;
  int v173;
  int v174;
  unsigned int *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unsigned int v179;
  unint64_t v180;
  unint64_t v181;
  _DWORD *v182;
  unint64_t v183;
  _DWORD *v184;
  uint64_t v185;
  unint64_t v186;
  __int16 v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  int *v192;
  int v193;
  unsigned __int8 *v194;
  WebCore::SQLiteDatabaseTracker *v196;
  int v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WebCore::SQLiteDatabaseTracker *v200;
  WebCore::SQLiteDatabaseTracker *v201;
  unint64_t v202;
  unsigned int v203;
  int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  sqlite3_int64 v211;
  unsigned int *v212;
  unsigned int v213;
  sqlite3_stmt **v214;
  unsigned int v215;
  WTF::StringImpl *v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unsigned int v223;
  uint64_t *v224;
  uint64_t v225;
  int v226;
  uint64_t *v227;
  const WTF::StringImpl *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  WTF::StringImpl *v237;
  unsigned int v238;
  int v239;
  WTF::StringImpl *v240;
  sqlite3_stmt **v241;
  char *v242;
  unint64_t v243;
  WTF *v244;
  uint64_t v245;
  uint64_t v246;
  const void *v247;
  unsigned int v248;
  sqlite3_stmt **v249;
  char *v250;
  char *v251;
  int v252;
  CFIndex v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  int v257;
  uint64_t v258;
  sqlite3_int64 v259;
  unsigned int v260;
  unsigned int v261;
  WTF *v262;
  int v263;
  sqlite3_stmt **v264;
  int v265;
  WTF *v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int *v271;
  unsigned int *v272;
  unsigned int *v273;
  unsigned int v274;
  unsigned int v275;
  uint64_t v276;
  WTF *v277;
  BOOL v278;
  WTF::StringImpl *v279;
  uint64_t v280;
  WTF::StringImpl **v281;
  sqlite3_int64 *v282;
  WebCore::SQLiteDatabaseTracker *v283;
  int v284;
  int v285;
  unsigned __int8 *v286;
  WebCore::SQLiteDatabaseTracker *v288;
  int v289;
  sqlite3_int64 v290;
  unsigned __int8 *v291;
  WebCore::SQLiteDatabaseTracker *v293;
  int v294;
  int v295;
  uint64_t v296;
  sqlite3_int64 v297;
  unsigned __int8 *v298;
  WebCore::SQLiteDatabaseTracker *v300;
  int v301;
  int v302;
  void *v303;
  void *v304;
  int v305;
  int v306;
  void *v307;
  int v308;
  int v309;
  WTF::StringImpl *v310;
  sqlite3_stmt **v311;
  unint64_t v312;
  char *v313;
  unint64_t v314;
  unsigned __int8 *v315;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  unsigned __int8 *v319;
  unsigned __int8 *v321;
  WebCore::SQLiteDatabaseTracker *v323;
  int v324;
  int v325;
  WebCore::SQLiteDatabaseTracker *v326;
  int v327;
  int v328;
  WebCore::SQLiteDatabaseTracker *v329;
  WebCore::SQLiteDatabaseTracker *v330;
  WebCore::SQLiteDatabaseTracker *v331;
  WebCore::SQLiteDatabaseTracker *v332;
  WebCore::SQLiteDatabaseTracker *v333;
  int v334;
  WebCore::SQLiteDatabaseTracker *v335;
  unsigned int v336;
  int v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t i;
  uint64_t v342;
  WTF **v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  WTF::StringImpl *v348;
  WTF *v349;
  WebCore::SQLiteDatabaseTracker *v350;
  uint64_t v352;
  int v353;
  int v354;
  unsigned __int8 *v355;
  WebCore::SQLiteDatabaseTracker *v357;
  int v358;
  sqlite3_int64 v359;
  WebCore::SQLiteDatabaseTracker *v361;
  int v362;
  int v363;
  sqlite3_int64 v364;
  uint64_t v365;
  sqlite3_int64 v366;
  unsigned __int8 *v367;
  WebCore::SQLiteDatabaseTracker *v369;
  int v370;
  void *v371;
  void *v372;
  int v373;
  int v374;
  void *v375;
  unsigned __int8 *v376;
  WebCore::SQLiteDatabaseTracker *v378;
  int v379;
  const void *v380;
  int v381;
  int v382;
  const void *v383;
  unsigned __int8 *v384;
  WebCore::SQLiteDatabaseTracker *v386;
  int v387;
  int v388;
  sqlite3_stmt **v389;
  WebCore::SQLiteDatabaseTracker *v391;
  int v392;
  const char *v393;
  WebCore::SQLiteDatabaseTracker *v394;
  WebCore::SQLiteDatabaseTracker *v395;
  WebCore::SQLiteDatabaseTracker *v396;
  WebCore::SQLiteDatabaseTracker *v397;
  uint64_t v398;
  unsigned int v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t *v402;
  uint64_t v403;
  _QWORD *v404;
  unint64_t v405;
  uint64_t *v406;
  int v407;
  int v408;
  void *v409;
  unint64_t *v410;
  unint64_t *v411;
  uint64_t *v412;
  void *v413;
  int v414;
  WTF::StringImpl **v415;
  WTF::StringImpl **v416;
  uint64_t v417;
  uint64_t v418;
  sqlite3_int64 v419[2];
  WTF::StringImpl *v420;
  char v421[8];
  int v422;
  int v423;
  int v424;
  uint64_t v425;
  WTF::StringImpl *v426;
  sqlite3_stmt *pStmt;
  int v428;
  const char *v429;
  WTF::StringImpl *v430;
  unsigned int *v431;
  sqlite3_stmt **v432;
  sqlite3_stmt **v433;
  uint64_t v434;
  int v435;
  int v436;
  WTF *v437[2];

  WebCore::SQLiteDatabase::tableSQL(*(_QWORD *)(a2 + 552), "IDBDatabaseInfo", 0x10000000FLL, v419);
  v7 = (WTF::StringImpl *)v419[0];
  if (!v419[0])
    goto LABEL_2;
  v8 = (WTF::StringImpl *)*(unsigned int *)(v419[0] + 4);
  v419[0] = 0;
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, v6);
    if ((_DWORD)v8)
      goto LABEL_6;
LABEL_2:
    *(_QWORD *)this = 0;
    return;
  }
  *(_DWORD *)v7 -= 2;
  if (!(_DWORD)v8)
    goto LABEL_2;
LABEL_6:
  WebCore::SQLiteDatabase::prepareStatement(*(_QWORD *)(a2 + 552), "SELECT value FROM IDBDatabaseInfo WHERE key = 'DatabaseName';",
    62,
    (uint64_t)v419);
  if ((_DWORD)v420)
    goto LABEL_1008;
  WebCore::SQLiteStatement::columnText((sqlite3_stmt **)v419, 0, &v433);
  v8 = (WTF::StringImpl *)v433;
  if ((WTF::equal((WTF *)v433, *(const WTF::StringImpl **)(a2 + 456), v9) & 1) == 0)
  {
    *(_QWORD *)this = 0;
    if ((_DWORD)v420 != -1)
      ((void (*)(sqlite3_stmt ***, sqlite3_int64 *))off_1E335AC78[v420])(&v433, v419);
    goto LABEL_43;
  }
  if ((_DWORD)v420 != -1)
    ((void (*)(sqlite3_stmt ***, sqlite3_int64 *))off_1E335AC78[v420])(&v433, v419);
  WebCore::SQLiteDatabase::prepareStatement(*(_QWORD *)(a2 + 552), "SELECT value FROM IDBDatabaseInfo WHERE key = 'DatabaseVersion';",
    65,
    (uint64_t)v419);
  if ((_DWORD)v420)
  {
LABEL_1008:
    v352 = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_1009;
  }
  WebCore::SQLiteStatement::columnText((sqlite3_stmt **)v419, 0, &v433);
  if (v433)
  {
    v11 = v433[1];
    v12 = *((unsigned int *)v433 + 1);
    if (((_BYTE)v433[2] & 4) == 0)
    {
      v13 = WTF::parseInteger<unsigned long long,char16_t>((uint64_t)v11, v12, 0xAu, 0);
      goto LABEL_20;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::parseInteger<unsigned long long,unsigned char>((uint64_t)v11, v12, 0xAu, 0);
LABEL_20:
  v14 = v13;
  v15 = v10;
  if (!(_BYTE)v10)
  {
    v14 = 0;
    *(_QWORD *)this = 0;
  }
  v16 = (WTF::StringImpl *)v433;
  v433 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v10);
    else
      *(_DWORD *)v16 -= 2;
  }
  if ((_DWORD)v420 != -1)
    ((void (*)(sqlite3_stmt ***, sqlite3_int64 *))off_1E335AC78[v420])(&v433, v419);
  if (!v15)
    goto LABEL_43;
  v17 = (_QWORD *)bmalloc::api::isoAllocate();
  v18 = (WTF::StringImpl **)v17;
  if (v8)
    *(_DWORD *)v8 += 2;
  v17[2] = 0;
  v19 = v17 + 2;
  *v17 = v8;
  v17[1] = v14;
  v17[4] = 0;
  v2 = v17 + 4;
  v17[3] = 0;
  WebCore::SQLiteDatabase::tableSQL(*(_QWORD *)(a2 + 552), "ObjectStoreInfo", 0x10000000FLL, v437);
  if (!v437[0])
    goto LABEL_31;
  v415 = v18;
  if (!*((_DWORD *)v437[0] + 1))
  {
    v24 = 0;
    v25 = 0;
    goto LABEL_84;
  }
  if ((MEMORY[0x19AEA53F4]() & 1) != 0)
  {
    v24 = 0;
    v25 = 1;
    goto LABEL_84;
  }
  v419[0] = (sqlite3_int64)"CREATE TABLE ";
  LODWORD(v419[1]) = 13;
  v433 = (sqlite3_stmt **)"\"ObjectStoreInfo\"";
  LODWORD(v434) = 17;
  v429 = " (id INTEGER PRIMARY KEY NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL, name TEXT NOT NULL ON CONFLICT FAIL"
         " UNIQUE ON CONFLICT FAIL, keyPath BLOB NOT NULL ON CONFLICT FAIL, autoInc INTEGER NOT NULL ON CONFLICT FAIL)";
  LODWORD(v430) = 219;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v419, (uint64_t)&v433, (uint64_t)&v429, &v426);
  if (!v426)
  {
LABEL_1011:
    __break(0xC471u);
    JUMPOUT(0x1953DBD6CLL);
  }
  v27 = WTF::equal(v437[0], v426, v26);
  v28 = v426;
  v426 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::destroy(v28, v10);
      if ((v27 & 1) != 0)
        goto LABEL_57;
      goto LABEL_60;
    }
    *(_DWORD *)v28 -= 2;
  }
  if ((v27 & 1) != 0)
  {
LABEL_57:
    v24 = 0;
    v25 = 1;
    goto LABEL_84;
  }
LABEL_60:
  v419[0] = (sqlite3_int64)"CREATE TABLE ";
  LODWORD(v419[1]) = 13;
  v433 = (sqlite3_stmt **)"ObjectStoreInfo";
  LODWORD(v434) = 15;
  v429 = " (id INTEGER PRIMARY KEY NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL, name TEXT NOT NULL ON CONFLICT FAIL"
         " UNIQUE ON CONFLICT FAIL, keyPath BLOB NOT NULL ON CONFLICT FAIL, autoInc INTEGER NOT NULL ON CONFLICT FAIL, ma"
         "xIndexID INTEGER NOT NULL ON CONFLICT FAIL)";
  LODWORD(v430) = 265;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v419, (uint64_t)&v433, (uint64_t)&v429, &v426);
  if (!v426)
  {
    __break(0xC471u);
    JUMPOUT(0x1953DBD74);
  }
  if ((WTF::equal(v437[0], v426, v29) & 1) != 0)
  {
    v31 = 0;
  }
  else
  {
    v419[0] = (sqlite3_int64)"CREATE TABLE ";
    LODWORD(v419[1]) = 13;
    v433 = (sqlite3_stmt **)"\"ObjectStoreInfo\"";
    LODWORD(v434) = 17;
    v429 = " (id INTEGER PRIMARY KEY NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL, name TEXT NOT NULL ON CONFLICT FA"
           "IL UNIQUE ON CONFLICT FAIL, keyPath BLOB NOT NULL ON CONFLICT FAIL, autoInc INTEGER NOT NULL ON CONFLICT FAIL"
           ", maxIndexID INTEGER NOT NULL ON CONFLICT FAIL)";
    LODWORD(v430) = 265;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v419, (uint64_t)&v433, (uint64_t)&v429, &v432);
    if (!v432)
      goto LABEL_1014;
    v31 = WTF::equal(v437[0], (const WTF::StringImpl *)v432, v32) ^ 1;
    v33 = (WTF::StringImpl *)v432;
    v432 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v30);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  v34 = v426;
  v426 = 0;
  if (!v34)
    goto LABEL_70;
  if (*(_DWORD *)v34 == 2)
  {
    WTF::StringImpl::destroy(v34, v30);
    if (!v31)
      goto LABEL_71;
LABEL_1014:
    __break(0xC471u);
    JUMPOUT(0x1953DA370);
  }
  *(_DWORD *)v34 -= 2;
LABEL_70:
  if (v31)
    goto LABEL_1014;
LABEL_71:
  v35 = *(WTF::StringImpl **)(a2 + 552);
  v426 = v35;
  do
    v36 = __ldaxr((unsigned int *)v35);
  while (__stlxr(v36 + 1, (unsigned int *)v35));
  LOWORD(pStmt) = 0;
  WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v426);
  v37 = *(WTF **)(a2 + 552);
  v419[0] = (sqlite3_int64)"CREATE TABLE ";
  LODWORD(v419[1]) = 13;
  v433 = (sqlite3_stmt **)"_Temp_ObjectStoreInfo";
  LODWORD(v434) = 21;
  v429 = " (id INTEGER PRIMARY KEY NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL, name TEXT NOT NULL ON CONFLICT FAIL"
         " UNIQUE ON CONFLICT FAIL, keyPath BLOB NOT NULL ON CONFLICT FAIL, autoInc INTEGER NOT NULL ON CONFLICT FAIL)";
  LODWORD(v430) = 219;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v419, (uint64_t)&v433, (uint64_t)&v429, &v432);
  if (!v432)
  {
    __break(0xC471u);
    JUMPOUT(0x1953DBD7CLL);
  }
  v24 = WebCore::SQLiteDatabase::executeCommandSlow(v37, (char *)v432[1], *((unsigned int *)v432 + 1) | ((unint64_t)((*((_DWORD *)v432 + 4) >> 2) & 1) << 32));
  v39 = (WTF::StringImpl *)v432;
  v432 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::destroy(v39, v38);
      if (v24)
        goto LABEL_78;
      goto LABEL_83;
    }
    *(_DWORD *)v39 -= 2;
  }
  if (v24)
  {
LABEL_78:
    if (WebCore::SQLiteDatabase::executeCommand(*(_QWORD *)(a2 + 552), "INSERT INTO _Temp_ObjectStoreInfo (id, name, keyPath, autoInc) SELECT id, name, keyPath, autoInc FROM ObjectStoreInfo", 118)&& WebCore::SQLiteDatabase::executeCommand(*(_QWORD *)(a2 + 552), "DROP TABLE ObjectStoreInfo", 27)&& WebCore::SQLiteDatabase::executeCommand(*(_QWORD *)(a2 + 552), "ALTER TABLE _Temp_ObjectStoreInfo RENAME TO ObjectStoreInfo", 60))
    {
      WebCore::SQLiteTransaction::commit((uint64_t)&v426);
      v24 = 1;
    }
    else
    {
      v24 = 0;
    }
  }
LABEL_83:
  WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v426);
  v25 = v24;
LABEL_84:
  v40 = v437[0];
  v437[0] = 0;
  if (!v40)
    goto LABEL_87;
  if (*(_DWORD *)v40 != 2)
  {
    *(_DWORD *)v40 -= 2;
LABEL_87:
    if (v25)
      goto LABEL_88;
LABEL_31:
    *(_QWORD *)this = 0;
LABEL_32:
    v20 = v18[4];
    if (v20)
    {
      v21 = *((unsigned int *)v20 - 1);
      if ((_DWORD)v21)
      {
        v22 = (WTF::StringImpl *)((char *)v20 + 8);
        do
        {
          if (*((_QWORD *)v22 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v22, v10);
          v22 = (WebCore::IDBObjectStoreInfo *)((char *)v22 + 72);
          --v21;
        }
        while (v21);
      }
      WTF::fastFree((WTF::StringImpl *)((char *)v20 - 16), v10);
    }
    v23 = *v18;
    *v18 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v10);
      else
        *(_DWORD *)v23 -= 2;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v18, v10);
    goto LABEL_43;
  }
  WTF::StringImpl::destroy(v40, v10);
  if (!v25)
    goto LABEL_31;
LABEL_88:
  WebCore::SQLiteDatabase::prepareStatement(*(_QWORD *)(a2 + 552), "SELECT id, name, keyPath, autoInc FROM ObjectStoreInfo;",
    56,
    (uint64_t)&v426);
  v41 = v428;
  if (v428)
  {
    *(_QWORD *)this = 0;
    v42 = 1;
    goto LABEL_208;
  }
  v407 = v24;
  v43 = (unsigned __int8 *)v426 + 32;
  if (__ldaxr((unsigned __int8 *)v426 + 32))
  {
    __clrex();
LABEL_93:
    MEMORY[0x19AEA534C](v43);
    goto LABEL_94;
  }
  if (__stxr(1u, v43))
    goto LABEL_93;
LABEL_94:
  v410 = v19;
  if (*((_BYTE *)v426 + 20) || (v45 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v45))
  {
    v3 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v45);
    v3 = sqlite3_step(pStmt);
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v3);
  }
  v46 = __ldxr(v43);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_101;
  }
  if (__stlxr(0, v43))
LABEL_101:
    WTF::Lock::unlockSlow((WTF::Lock *)v43);
  while ((_DWORD)v3 == 100)
  {
    if (v428)
      goto LABEL_1008;
    if (sqlite3_stmt_busy(pStmt))
      goto LABEL_118;
    v47 = (unsigned __int8 *)v426 + 32;
    if (__ldaxr((unsigned __int8 *)v426 + 32))
    {
      __clrex();
LABEL_108:
      MEMORY[0x19AEA534C](v47);
      goto LABEL_109;
    }
    if (__stxr(1u, v47))
      goto LABEL_108;
LABEL_109:
    if (*((_BYTE *)v426 + 20) || (v49 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v49))
    {
      v50 = sqlite3_step(pStmt);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v49);
      v73 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
      v50 = (int)v73;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v73);
    }
    v51 = __ldxr(v47);
    if (v51 != 1)
    {
      __clrex();
LABEL_116:
      WTF::Lock::unlockSlow((WTF::Lock *)v47);
      goto LABEL_117;
    }
    if (__stlxr(0, v47))
      goto LABEL_116;
LABEL_117:
    if (v50 != 100)
      goto LABEL_120;
LABEL_118:
    if (sqlite3_data_count(pStmt) < 1)
    {
LABEL_120:
      v3 = 0;
      goto LABEL_121;
    }
    v3 = sqlite3_column_int64(pStmt, 0);
LABEL_121:
    if (v428)
      goto LABEL_1008;
    WebCore::SQLiteStatement::columnText(&v426, 1, &v432);
    if (v428)
      goto LABEL_1008;
    if (sqlite3_stmt_busy(pStmt))
      goto LABEL_137;
    v52 = (unsigned __int8 *)v426 + 32;
    if (__ldaxr((unsigned __int8 *)v426 + 32))
    {
      __clrex();
LABEL_127:
      MEMORY[0x19AEA534C](v52);
      goto LABEL_128;
    }
    if (__stxr(1u, v52))
      goto LABEL_127;
LABEL_128:
    if (*((_BYTE *)v426 + 20) || (v54 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v54))
    {
      v55 = sqlite3_step(pStmt);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v54);
      v74 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
      v55 = (int)v74;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v74);
    }
    v56 = __ldxr(v52);
    if (v56 != 1)
    {
      __clrex();
LABEL_135:
      WTF::Lock::unlockSlow((WTF::Lock *)v52);
      goto LABEL_136;
    }
    if (__stlxr(0, v52))
      goto LABEL_135;
LABEL_136:
    if (v55 != 100)
      goto LABEL_145;
LABEL_137:
    if (sqlite3_data_count(pStmt) < 3)
    {
LABEL_145:
      v57 = 0;
LABEL_146:
      v60 = 0;
      goto LABEL_147;
    }
    v57 = (const UInt8 *)sqlite3_column_blob(pStmt, 2);
    if (!v57)
      goto LABEL_146;
    v58 = v57;
    v59 = sqlite3_column_bytes(pStmt, 2);
    if (v59 >= 1)
      v60 = v59;
    else
      v60 = 0;
    if (v59 >= 1)
      v57 = v58;
    else
      v57 = 0;
LABEL_147:
    LOBYTE(v433) = 0;
    LOBYTE(v436) = 0;
    v61 = WebCore::deserializeIDBKeyPath(v57, v60, (uint64_t)&v433);
    if ((v61 & 1) == 0)
    {
      *(_QWORD *)this = 0;
      v3 = 100;
      goto LABEL_174;
    }
    if (v428)
      goto LABEL_1008;
    if (!sqlite3_stmt_busy(pStmt))
    {
      v71 = (unsigned __int8 *)v426 + 32;
      if (__ldaxr((unsigned __int8 *)v426 + 32))
      {
        __clrex();
        goto LABEL_190;
      }
      if (__stxr(1u, v71))
LABEL_190:
        MEMORY[0x19AEA534C](v71);
      if (*((_BYTE *)v426 + 20) || (v75 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v75))
      {
        v76 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v75);
        v78 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v76 = (int)v78;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v78);
      }
      v77 = __ldxr(v71);
      if (v77 == 1)
      {
        if (!__stlxr(0, v71))
        {
LABEL_199:
          v278 = v76 == 100;
          v18 = v415;
          if (!v278)
            goto LABEL_200;
          goto LABEL_150;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v71);
      goto LABEL_199;
    }
LABEL_150:
    if (sqlite3_data_count(pStmt) >= 4)
    {
      v62 = sqlite3_column_int(pStmt, 3);
      goto LABEL_152;
    }
LABEL_200:
    v62 = 0;
LABEL_152:
    v419[0] = v3;
    v63 = v432;
    if (v432)
      *(_DWORD *)v432 += 2;
    v419[1] = (sqlite3_int64)v63;
    LOBYTE(v420) = 0;
    LOBYTE(v423) = 0;
    if ((_BYTE)v436)
    {
      v422 = -1;
      v64 = v435;
      if (v435 != -1)
      {
        ((void (*)(const char **, WTF::StringImpl **, sqlite3_stmt ***))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v435])(&v429, &v420, &v433);
        v422 = v64;
        v3 = v419[0];
      }
      LOBYTE(v423) = 1;
    }
    LOBYTE(v424) = v62 != 0;
    v425 = 0;
    if (v3 > (unint64_t)v18[3])
      v18[3] = (WTF::StringImpl *)v3;
    v437[0] = (WTF *)v3;
    WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBObjectStoreInfo&>(v2, (uint64_t *)v437, (uint64_t)v419, (uint64_t)&v429);
    WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)v419, v65);
    if (v428)
      goto LABEL_1008;
    v66 = (unsigned __int8 *)v426 + 32;
    if (__ldaxr((unsigned __int8 *)v426 + 32))
    {
      __clrex();
    }
    else if (!__stxr(1u, v66))
    {
      goto LABEL_166;
    }
    MEMORY[0x19AEA534C](v66);
LABEL_166:
    if (*((_BYTE *)v426 + 20) || (v68 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v68))
    {
      v3 = sqlite3_step(pStmt);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v68);
      v3 = sqlite3_step(pStmt);
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v3);
    }
    v69 = __ldxr(v66);
    if (v69 == 1)
    {
      if (!__stlxr(0, v66))
        goto LABEL_174;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v66);
LABEL_174:
    if ((_BYTE)v436 && v435 != -1)
      ((void (*)(sqlite3_int64 *, sqlite3_stmt ***))off_1E335AC88[v435])(v419, &v433);
    v70 = (WTF::StringImpl *)v432;
    v432 = 0;
    if (!v70)
      goto LABEL_180;
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::destroy(v70, v10);
      if ((v61 & 1) == 0)
      {
LABEL_206:
        v42 = 1;
        v19 = v410;
        v24 = v407;
        goto LABEL_207;
      }
    }
    else
    {
      *(_DWORD *)v70 -= 2;
LABEL_180:
      if ((v61 & 1) == 0)
        goto LABEL_206;
    }
  }
  v24 = v407;
  if ((_DWORD)v3 == 101)
  {
    v42 = 0;
  }
  else
  {
    *(_QWORD *)this = 0;
    v42 = 1;
  }
  v19 = v410;
LABEL_207:
  v41 = v428;
LABEL_208:
  if (v41 != -1)
    ((void (*)(sqlite3_int64 *, WTF::StringImpl **))off_1E335AC78[v41])(v419, &v426);
  if (v42)
    goto LABEL_848;
  v417 = 0;
  v418 = 0;
  WebCore::SQLiteDatabase::prepareStatement(*(_QWORD *)(a2 + 552), "SELECT id, name, objectStoreID, keyPath, isUnique, multiEntry FROM IndexInfo;",
    78,
    (uint64_t)&v426);
  v79 = v428;
  if (v428)
  {
    *(_QWORD *)this = 0;
    v80 = 1;
    goto LABEL_465;
  }
  v408 = v24;
  v81 = (unsigned __int8 *)v426 + 32;
  if (__ldaxr((unsigned __int8 *)v426 + 32))
  {
    __clrex();
    goto LABEL_218;
  }
  if (__stxr(1u, v81))
LABEL_218:
    MEMORY[0x19AEA534C](v81);
  v411 = v19;
  if (*((_BYTE *)v426 + 20) || (v83 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v83))
  {
    v3 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v83);
    v3 = sqlite3_step(pStmt);
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v3);
  }
  v84 = __ldxr(v81);
  if (v84 != 1)
  {
    __clrex();
    goto LABEL_226;
  }
  if (__stlxr(0, v81))
LABEL_226:
    WTF::Lock::unlockSlow((WTF::Lock *)v81);
  v85 = 0;
  while ((_DWORD)v3 == 100)
  {
    if (v428)
      goto LABEL_1008;
    if (sqlite3_stmt_busy(pStmt))
      goto LABEL_244;
    v86 = (unsigned __int8 *)v426 + 32;
    if (__ldaxr((unsigned __int8 *)v426 + 32))
    {
      __clrex();
LABEL_234:
      MEMORY[0x19AEA534C](v86);
      goto LABEL_235;
    }
    if (__stxr(1u, v86))
      goto LABEL_234;
LABEL_235:
    if (*((_BYTE *)v426 + 20) || (v88 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v88))
    {
      v89 = sqlite3_step(pStmt);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v88);
      v158 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
      v89 = (int)v158;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v158);
    }
    v90 = __ldxr(v86);
    if (v90 != 1)
    {
      __clrex();
LABEL_242:
      WTF::Lock::unlockSlow((WTF::Lock *)v86);
      goto LABEL_243;
    }
    if (__stlxr(0, v86))
      goto LABEL_242;
LABEL_243:
    if (v89 != 100)
      goto LABEL_246;
LABEL_244:
    if (sqlite3_data_count(pStmt) < 1)
    {
LABEL_246:
      v3 = 0;
      goto LABEL_247;
    }
    v3 = sqlite3_column_int64(pStmt, 0);
LABEL_247:
    if (v428)
      goto LABEL_1008;
    WebCore::SQLiteStatement::columnText(&v426, 1, &v432);
    if (v428)
      goto LABEL_1008;
    if (!sqlite3_stmt_busy(pStmt))
    {
      v91 = (unsigned __int8 *)v426 + 32;
      if (__ldaxr((unsigned __int8 *)v426 + 32))
      {
        __clrex();
        goto LABEL_253;
      }
      if (__stxr(1u, v91))
LABEL_253:
        MEMORY[0x19AEA534C](v91);
      if (*((_BYTE *)v426 + 20) || (v93 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v93))
      {
        v94 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v93);
        v159 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v94 = (int)v159;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v159);
      }
      v95 = __ldxr(v91);
      if (v95 == 1)
      {
        if (!__stlxr(0, v91))
        {
LABEL_262:
          if (v94 != 100)
            goto LABEL_265;
          goto LABEL_263;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v91);
      goto LABEL_262;
    }
LABEL_263:
    if (sqlite3_data_count(pStmt) >= 3)
    {
      v96 = sqlite3_column_int64(pStmt, 2);
      goto LABEL_266;
    }
LABEL_265:
    v96 = 0;
LABEL_266:
    if (v428)
      goto LABEL_1008;
    if (sqlite3_stmt_busy(pStmt))
      goto LABEL_282;
    v97 = (unsigned __int8 *)v426 + 32;
    if (__ldaxr((unsigned __int8 *)v426 + 32))
    {
      __clrex();
LABEL_271:
      MEMORY[0x19AEA534C](v97);
      goto LABEL_272;
    }
    if (__stxr(1u, v97))
      goto LABEL_271;
LABEL_272:
    if (*((_BYTE *)v426 + 20) || (v99 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v99))
    {
      v100 = sqlite3_step(pStmt);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v99);
      v160 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
      v100 = (int)v160;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v160);
    }
    v101 = __ldxr(v97);
    if (v101 != 1)
    {
      __clrex();
LABEL_279:
      WTF::Lock::unlockSlow((WTF::Lock *)v97);
      goto LABEL_280;
    }
    if (__stlxr(0, v97))
      goto LABEL_279;
LABEL_280:
    v278 = v100 == 100;
    v18 = v415;
    if (!v278)
      goto LABEL_290;
LABEL_282:
    if (sqlite3_data_count(pStmt) < 4)
    {
LABEL_290:
      v102 = 0;
LABEL_291:
      v105 = 0;
      goto LABEL_292;
    }
    v102 = (const UInt8 *)sqlite3_column_blob(pStmt, 3);
    if (!v102)
      goto LABEL_291;
    v103 = v102;
    v104 = sqlite3_column_bytes(pStmt, 3);
    if (v104 >= 1)
      v105 = v104;
    else
      v105 = 0;
    if (v104 >= 1)
      v102 = v103;
    else
      v102 = 0;
LABEL_292:
    LOBYTE(v433) = 0;
    LOBYTE(v436) = 0;
    if ((WebCore::deserializeIDBKeyPath(v102, v105, (uint64_t)&v433) & 1) == 0)
    {
      *(_QWORD *)this = 0;
      v118 = 1;
      v3 = 100;
      goto LABEL_444;
    }
    if ((_BYTE)v436)
    {
      if (v428)
        goto LABEL_1008;
      if (sqlite3_stmt_busy(pStmt))
      {
LABEL_296:
        if (sqlite3_data_count(pStmt) >= 5)
        {
          v106 = sqlite3_column_int(pStmt, 4);
          goto LABEL_298;
        }
LABEL_393:
        v106 = 0;
LABEL_298:
        if (v428)
          goto LABEL_1008;
        if (sqlite3_stmt_busy(pStmt))
        {
LABEL_300:
          if (sqlite3_data_count(pStmt) >= 6)
          {
            v107 = sqlite3_column_int(pStmt, 5);
LABEL_302:
            v108 = *v2;
            if (*v2)
            {
              v109 = *(_DWORD *)(v108 - 8);
              v110 = (v96 + ~(v96 << 32)) ^ ((unint64_t)(v96 + ~(v96 << 32)) >> 22);
              v111 = 9 * ((v110 + ~(v110 << 13)) ^ ((v110 + ~(v110 << 13)) >> 8));
              v112 = (v111 ^ (v111 >> 15)) + ~((v111 ^ (v111 >> 15)) << 27);
              v113 = v112 ^ (v112 >> 31);
              v114 = v109 & v113;
              v115 = (uint64_t *)(v108 + 72 * (v109 & v113));
              v116 = *v115;
              if (*v115 != v96)
              {
                v117 = 1;
                while (v116)
                {
                  v114 = (v114 + v117) & v109;
                  v115 = (uint64_t *)(v108 + 72 * v114);
                  v116 = *v115;
                  ++v117;
                  if (*v115 == v96)
                    goto LABEL_311;
                }
                v115 = (uint64_t *)(v108 + 72 * *(unsigned int *)(v108 - 4));
              }
LABEL_311:
              if (v115 != (uint64_t *)(v108 + 72 * *(unsigned int *)(v108 - 4)))
              {
                v404 = v115 + 1;
                if (v408)
                {
                  v119 = v418;
                  if (v418
                    || (WTF::HashTable<std::pair<unsigned long long,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned long long,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned long long,unsigned long long>,unsigned long long>>,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>,WTF::HashMap<std::pair<unsigned long long,unsigned long long>,unsigned long long,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned long long,unsigned long long>>>::expand(&v418),
                        (v119 = v418) != 0))
                  {
                    v120 = *(_DWORD *)(v119 - 8);
                  }
                  else
                  {
                    v120 = 0;
                  }
                  v121 = v85 + 1;
                  v122 = (v3 + ~(v3 << 32)) ^ ((v3 + ~(v3 << 32)) >> 22);
                  v123 = 9 * ((v122 + ~(v122 << 13)) ^ ((v122 + ~(v122 << 13)) >> 8));
                  v124 = (v123 ^ (v123 >> 15)) + ~((v123 ^ (v123 >> 15)) << 27);
                  v125 = v120 & ((0xD7862706ELL
                                * (unint64_t)(95187966 * ((v124 >> 31) ^ v124)
                                                   + 277951225 * (_DWORD)v113)) >> 4);
                  v126 = (sqlite3_int64 *)(v119 + 24 * v125);
                  v127 = *v126;
                  v128 = v126[1];
                  if (*(_OWORD *)v126 != 0)
                  {
                    v129 = 0;
                    v130 = 1;
                    do
                    {
                      if (v127 == v96 && v128 == v3)
                      {
                        v126[2] = v121;
                        goto LABEL_370;
                      }
                      if (v127 == -1)
                        v129 = v126;
                      v125 = (v125 + v130) & v120;
                      v126 = (sqlite3_int64 *)(v119 + 24 * v125);
                      v127 = *v126;
                      v128 = v126[1];
                      ++v130;
                    }
                    while (*(_OWORD *)v126 != 0);
                    if (v129)
                    {
                      *v129 = 0;
                      v129[1] = 0;
                      v129[2] = 0;
                      --*(_DWORD *)(v119 - 16);
                      v126 = v129;
                    }
                  }
                  *v126 = v96;
                  v126[1] = v3;
                  v126[2] = v121;
                  v131 = v418;
                  if (v418)
                    v132 = *(_DWORD *)(v418 - 12) + 1;
                  else
                    v132 = 1;
                  *(_DWORD *)(v418 - 12) = v132;
                  v161 = (*(_DWORD *)(v131 - 16) + v132);
                  v162 = *(unsigned int *)(v131 - 4);
                  if (v162 > 0x400)
                  {
                    if (v162 <= 2 * v161)
LABEL_368:
                      WTF::HashTable<std::pair<unsigned long long,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned long long,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned long long,unsigned long long>,unsigned long long>>,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>,WTF::HashMap<std::pair<unsigned long long,unsigned long long>,unsigned long long,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned long long,unsigned long long>>>::expand(&v418);
                  }
                  else if (3 * v162 <= 4 * v161)
                  {
                    goto LABEL_368;
                  }
LABEL_370:
                  if (!(_BYTE)v436)
                  {
LABEL_1010:
                    std::__throw_bad_optional_access[abi:sn180100]();
                    goto LABEL_1011;
                  }
                  v163 = v121;
                  v419[0] = v121;
                  v419[1] = v96;
                  v164 = (WTF::StringImpl *)v432;
                  if (v432)
                    *(_DWORD *)v432 += 2;
                  v420 = v164;
                  v421[0] = 0;
                  v423 = -1;
                  v165 = v435;
                  if (v435 != -1)
                  {
                    ((void (*)(const char **, char *, sqlite3_stmt ***))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v435])(&v429, v421, &v433);
                    v423 = v165;
                  }
                  LOBYTE(v424) = v106 != 0;
                  BYTE1(v424) = v107 != 0;
                  v85 = v163;
                  v3 = v163;
LABEL_423:
                  v437[0] = (WTF *)v419[0];
                  WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBIndexInfo&>(v404 + 7, (WTF::StringImpl *)v437, (uint64_t)v419, (uint64_t)&v429);
                  if (v85 <= v3)
                    v85 = v3;
                  v18 = v415;
                  if (v428)
                    goto LABEL_1008;
                  v194 = (unsigned __int8 *)v426 + 32;
                  if (__ldaxr((unsigned __int8 *)v426 + 32))
                  {
                    __clrex();
                    goto LABEL_429;
                  }
                  if (__stxr(1u, v194))
LABEL_429:
                    MEMORY[0x19AEA534C](v194);
                  if (*((_BYTE *)v426 + 20)
                    || (v196 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v196))
                  {
                    v3 = sqlite3_step(pStmt);
                  }
                  else
                  {
                    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v196);
                    v3 = sqlite3_step(pStmt);
                    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v3);
                  }
                  v197 = __ldxr(v194);
                  if (v197 == 1)
                  {
                    if (!__stlxr(0, v194))
                    {
LABEL_438:
                      if (v423 != -1)
                        ((void (*)(const char **, char *))off_1E335AC88[v423])(&v429, v421);
                      v423 = -1;
                      v198 = v420;
                      v420 = 0;
                      if (v198)
                      {
                        if (*(_DWORD *)v198 == 2)
                          WTF::StringImpl::destroy(v198, v10);
                        else
                          *(_DWORD *)v198 -= 2;
                      }
                      v118 = 0;
                      goto LABEL_444;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v194);
                  goto LABEL_438;
                }
                if (!(_BYTE)v436)
                  goto LABEL_1010;
                v401 = v85;
                v419[0] = v3;
                v419[1] = v96;
                v133 = (WTF::StringImpl *)v432;
                if (v432)
                  *(_DWORD *)v432 += 2;
                v420 = v133;
                v421[0] = 0;
                v423 = -1;
                v134 = v435;
                if (v435 != -1)
                {
                  ((void (*)(const char **, char *, sqlite3_stmt ***))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v435])(&v429, v421, &v433);
                  v423 = v134;
                }
                LOBYTE(v424) = v106 != 0;
                BYTE1(v424) = v107 != 0;
                v135 = v417;
                if (v417
                  || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(&v417, 8u, 0), (v135 = v417) != 0))
                {
                  v136 = *(_DWORD *)(v135 - 8);
                }
                else
                {
                  v136 = 0;
                }
                v137 = (v3 + ~(v3 << 32)) ^ ((v3 + ~(v3 << 32)) >> 22);
                v138 = 9 * ((v137 + ~(v137 << 13)) ^ ((v137 + ~(v137 << 13)) >> 8));
                v139 = (v138 ^ (v138 >> 15)) + ~((v138 ^ (v138 >> 15)) << 27);
                v140 = v136 & ((v139 >> 31) ^ v139);
                v141 = (unint64_t *)(v135 + 24 * v140);
                v142 = *v141;
                if (*v141)
                {
                  v143 = 0;
                  v144 = 1;
                  while (v142 != v3)
                  {
                    if (v142 == -1)
                      v143 = v141;
                    v140 = (v140 + v144) & v136;
                    v141 = (unint64_t *)(v135 + 24 * v140);
                    v142 = *v141;
                    ++v144;
                    if (!*v141)
                    {
                      if (v143)
                      {
                        *v143 = 0;
                        v143[1] = 0;
                        v143[2] = 0;
                        --*(_DWORD *)(v135 - 16);
                        v141 = v143;
                      }
                      goto LABEL_344;
                    }
                  }
                  goto LABEL_411;
                }
LABEL_344:
                *v141 = v3;
                v145 = (WTF **)(v141 + 1);
                v146 = *((unsigned int *)v141 + 5);
                if ((_DWORD)v146)
                {
                  v147 = 56 * v146;
                  v148 = (uint64_t)*v145 + 24;
                  do
                  {
                    v149 = *(unsigned int *)(v148 + 16);
                    if ((_DWORD)v149 != -1)
                      ((void (*)(const char **, uint64_t))off_1E335AC88[v149])(&v429, v148);
                    *(_DWORD *)(v148 + 16) = -1;
                    v150 = *(WTF::StringImpl **)(v148 - 8);
                    *(_QWORD *)(v148 - 8) = 0;
                    if (v150)
                    {
                      if (*(_DWORD *)v150 == 2)
                        WTF::StringImpl::destroy(v150, v10);
                      else
                        *(_DWORD *)v150 -= 2;
                    }
                    v148 += 56;
                    v147 -= 56;
                  }
                  while (v147);
                }
                v151 = *v145;
                if (*v145)
                {
                  v141[1] = 0;
                  *((_DWORD *)v141 + 4) = 0;
                  WTF::fastFree(v151, v10);
                }
                *v145 = 0;
                v141[2] = 0;
                v152 = v417;
                if (v417)
                  v153 = *(_DWORD *)(v417 - 12) + 1;
                else
                  v153 = 1;
                *(_DWORD *)(v417 - 12) = v153;
                v166 = (*(_DWORD *)(v152 - 16) + v153);
                v167 = *(unsigned int *)(v152 - 4);
                if (v167 > 0x400)
                {
                  if (v167 <= 2 * v166)
                  {
LABEL_380:
                    v168 = (_DWORD)v167 << (6 * v153 >= (2 * v167));
                    goto LABEL_410;
                  }
                }
                else if (3 * v167 <= 4 * v166)
                {
                  if ((_DWORD)v167)
                    goto LABEL_380;
                  v168 = 8;
LABEL_410:
                  v141 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(&v417, v168, v141);
                }
LABEL_411:
                v175 = (unsigned int *)(v141 + 1);
                v176 = *((unsigned int *)v141 + 5);
                if ((_DWORD)v176 == *((_DWORD *)v141 + 4))
                {
                  v177 = WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v175, v176 + 1, (unint64_t)v419);
                  v178 = v177;
                  v179 = *((_DWORD *)v141 + 5);
                  v180 = v141[1];
                  v181 = v180 + 56 * v179;
                  *(_OWORD *)v181 = *(_OWORD *)v177;
                  v182 = *(_DWORD **)(v177 + 16);
                  if (v182)
                    *v182 += 2;
                  v183 = v180 + 56 * v179;
                  *(_BYTE *)(v183 + 24) = 0;
                  v183 += 24;
                  *(_QWORD *)(v181 + 16) = v182;
                  *(_DWORD *)(v183 + 16) = -1;
                  v184 = (_DWORD *)(v183 + 16);
                  v185 = *(unsigned int *)(v177 + 40);
                  if ((_DWORD)v185 != -1)
                  {
                    v399 = v179;
                    ((void (*)(const char **))off_1E335AC98[v185])(&v429);
                    v179 = v399;
                    *v184 = v185;
                  }
                  v186 = v180 + 56 * v179;
                  v187 = *(_WORD *)(v178 + 48);
                }
                else
                {
                  v188 = *(_QWORD *)v175;
                  v189 = *(_QWORD *)v175 + 56 * v176;
                  *(_OWORD *)v189 = *(_OWORD *)v419;
                  v190 = v420;
                  if (v420)
                    *(_DWORD *)v420 += 2;
                  v191 = v188 + 56 * v176;
                  *(_BYTE *)(v191 + 24) = 0;
                  v191 += 24;
                  *(_QWORD *)(v189 + 16) = v190;
                  *(_DWORD *)(v191 + 16) = -1;
                  v192 = (int *)(v191 + 16);
                  v193 = v423;
                  if (v423 != -1)
                  {
                    ((void (*)(const char **))off_1E335AC98[v423])(&v429);
                    *v192 = v193;
                  }
                  v186 = v188 + 56 * v176;
                  v187 = v424;
                }
                *(_WORD *)(v186 + 48) = v187;
                ++*((_DWORD *)v141 + 5);
                v85 = v401;
                goto LABEL_423;
              }
            }
            *(_QWORD *)this = 0;
            v118 = 1;
            v3 = 100;
            v18 = v415;
LABEL_444:
            if ((_BYTE)v436 && v435 != -1)
              ((void (*)(sqlite3_int64 *, sqlite3_stmt ***))off_1E335AC88[v435])(v419, &v433);
            goto LABEL_447;
          }
LABEL_405:
          v107 = 0;
          goto LABEL_302;
        }
        v156 = (unsigned __int8 *)v426 + 32;
        if (__ldaxr((unsigned __int8 *)v426 + 32))
        {
          __clrex();
          goto LABEL_395;
        }
        if (__stxr(1u, v156))
LABEL_395:
          MEMORY[0x19AEA534C](v156);
        if (*((_BYTE *)v426 + 20)
          || (v172 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v172))
        {
          v173 = sqlite3_step(pStmt);
        }
        else
        {
          WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v172);
          v201 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
          v173 = (int)v201;
          WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v201);
        }
        v174 = __ldxr(v156);
        if (v174 == 1)
        {
          if (!__stlxr(0, v156))
          {
LABEL_404:
            if (v173 == 100)
              goto LABEL_300;
            goto LABEL_405;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v156);
        goto LABEL_404;
      }
      v154 = (unsigned __int8 *)v426 + 32;
      if (__ldaxr((unsigned __int8 *)v426 + 32))
      {
        __clrex();
        goto LABEL_383;
      }
      if (__stxr(1u, v154))
LABEL_383:
        MEMORY[0x19AEA534C](v154);
      if (*((_BYTE *)v426 + 20)
        || (v169 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v169))
      {
        v170 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v169);
        v200 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v170 = (int)v200;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v200);
      }
      v171 = __ldxr(v154);
      if (v171 == 1)
      {
        if (!__stlxr(0, v154))
        {
LABEL_392:
          if (v170 == 100)
            goto LABEL_296;
          goto LABEL_393;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v154);
      goto LABEL_392;
    }
    *(_QWORD *)this = 0;
    v3 = 100;
    v118 = 1;
LABEL_447:
    v199 = (WTF::StringImpl *)v432;
    v432 = 0;
    if (v199)
    {
      if (*(_DWORD *)v199 != 2)
      {
        *(_DWORD *)v199 -= 2;
        goto LABEL_450;
      }
      WTF::StringImpl::destroy(v199, v10);
      if (v118)
        goto LABEL_463;
    }
    else
    {
LABEL_450:
      if (v118)
        goto LABEL_463;
    }
  }
  if ((_DWORD)v3 == 101)
  {
    v202 = v85;
    v80 = 0;
    v19 = v411;
    *v411 = v202;
  }
  else
  {
    *(_QWORD *)this = 0;
LABEL_463:
    v80 = 1;
    v19 = v411;
  }
  v24 = v408;
  v79 = v428;
LABEL_465:
  if (v79 != -1)
    ((void (*)(sqlite3_int64 *, WTF::StringImpl **))off_1E335AC78[v79])(v419, &v426);
  if (v80)
    goto LABEL_828;
  if (!v24)
  {
    v206 = v417;
    if (v417)
    {
      v207 = *(unsigned int *)(v417 - 4);
      v400 = v417 + 24 * v207;
      if (*(_DWORD *)(v417 - 12))
      {
        v208 = v417;
        if ((_DWORD)v207)
        {
          v209 = 24 * v207;
          v208 = v417;
          do
          {
            if ((unint64_t)(*(_QWORD *)v208 + 1) > 1)
              goto LABEL_491;
            v208 += 24;
            v209 -= 24;
          }
          while (v209);
          v208 = v400;
        }
        goto LABEL_491;
      }
      v208 = v417 + 24 * v207;
    }
    else
    {
      v208 = 0;
      LODWORD(v207) = 0;
    }
    v400 = v417 + 24 * v207;
LABEL_491:
    if (v417)
      v206 = v417 + 24 * *(unsigned int *)(v417 - 4);
    if (v206 == v208)
    {
LABEL_656:
      v281 = v415;
      v18 = 0;
      goto LABEL_827;
    }
    v398 = v206;
    v412 = (uint64_t *)v19;
    while (1)
    {
      if (*(_DWORD *)(v208 + 20) == 1)
        goto LABEL_650;
      v211 = *(_QWORD *)v208;
      v212 = *(unsigned int **)(a2 + 552);
      v419[0] = (sqlite3_int64)v212;
      do
        v213 = __ldaxr(v212);
      while (__stlxr(v213 + 1, v212));
      LOWORD(v419[1]) = 0;
      WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)v419);
      WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement(&v433, a2, 0xEuLL, "DELETE FROM IndexInfo WHERE id = ?;",
        36);
      v214 = v433;
      if (!v433)
        goto LABEL_658;
      if (sqlite3_bind_int64(v433[1], 1, v211) || WebCore::SQLiteStatement::step(v214) != 101)
        goto LABEL_657;
      sqlite3_reset(v214[1]);
      sqlite3_clear_bindings(v214[1]);
      WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement(&v433, a2, 0x13uLL, "DELETE FROM IndexRecords WHERE indexID = ?;",
        44);
      v214 = v433;
      if (!v433)
        goto LABEL_658;
      if (sqlite3_bind_int64(v433[1], 1, v211) || WebCore::SQLiteStatement::step(v214) != 101)
      {
LABEL_657:
        sqlite3_reset(v214[1]);
        sqlite3_clear_bindings(v214[1]);
LABEL_658:
        v18 = v415;
        v282 = v419;
LABEL_826:
        WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)v282);
        v281 = 0;
        goto LABEL_827;
      }
      sqlite3_reset(v214[1]);
      sqlite3_clear_bindings(v214[1]);
      WebCore::SQLiteTransaction::commit((uint64_t)v419);
      WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)v419);
      v215 = *(_DWORD *)(v208 + 20);
      if (!v215)
        goto LABEL_650;
      v3 = *(_QWORD *)(v208 + 8);
      v405 = v3 + 56 * v215;
      do
      {
        *(_OWORD *)v419 = *(_OWORD *)v3;
        v216 = *(WTF::StringImpl **)(v3 + 16);
        if (v216)
          *(_DWORD *)v216 += 2;
        v420 = v216;
        v421[0] = 0;
        v423 = -1;
        v217 = *(unsigned int *)(v3 + 40);
        if ((_DWORD)v217 != -1)
        {
          ((void (*)(sqlite3_stmt ***, char *, unint64_t))off_1E335AC98[v217])(&v433, v421, v3 + 24);
          v423 = v217;
        }
        LOWORD(v424) = *(_WORD *)(v3 + 48);
        v218 = *v2;
        if (*v2)
        {
          v219 = *(_DWORD *)(v218 - 8);
          v220 = (v419[1] + ~(v419[1] << 32)) ^ ((unint64_t)(v419[1] + ~(v419[1] << 32)) >> 22);
          v221 = 9 * ((v220 + ~(v220 << 13)) ^ ((v220 + ~(v220 << 13)) >> 8));
          v222 = (v221 ^ (v221 >> 15)) + ~((v221 ^ (v221 >> 15)) << 27);
          v223 = v219 & ((v222 >> 31) ^ v222);
          v224 = (uint64_t *)(v218 + 72 * v223);
          v225 = *v224;
          if (*v224 != v419[1])
          {
            v226 = 1;
            while (v225)
            {
              v223 = (v223 + v226) & v219;
              v224 = (uint64_t *)(v218 + 72 * v223);
              v225 = *v224;
              ++v226;
              if (*v224 == v419[1])
                goto LABEL_518;
            }
            v224 = (uint64_t *)(v218 + 72 * *(unsigned int *)(v218 - 4));
          }
LABEL_518:
          v218 += 72 * *(unsigned int *)(v218 - 4);
        }
        else
        {
          v224 = 0;
        }
        if (v224 == (uint64_t *)v218)
          v227 = 0;
        else
          v227 = v224 + 1;
        v433 = (sqlite3_stmt **)v419[0];
        WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::remove(v227 + 7, (WTF::StringImpl *)&v433);
        v402 = v227;
        v229 = v227[7];
        v406 = v227 + 7;
        if (v229)
        {
          v230 = *(unsigned int *)(v229 - 4);
          v231 = v229 + (v230 << 6);
          if (*(_DWORD *)(v229 - 12))
          {
            v232 = v229;
            if ((_DWORD)v230)
            {
              v233 = v230 << 6;
              v232 = v229;
              do
              {
                if ((unint64_t)(*(_QWORD *)v232 + 1) > 1)
                  goto LABEL_532;
                v232 += 64;
                v233 -= 64;
              }
              while (v233);
              v232 = v231;
            }
            goto LABEL_532;
          }
          v232 = v229 + (v230 << 6);
        }
        else
        {
          v232 = 0;
          v230 = 0;
        }
        v231 = v229 + (v230 << 6);
LABEL_532:
        if (v229)
          v234 = v229 + ((unint64_t)*(unsigned int *)(v229 - 4) << 6);
        else
          v234 = 0;
        while (v232 != v234)
        {
          if ((WTF::equal(*(WTF **)(v232 + 24), v420, v228) & 1) != 0)
          {
            v263 = 5;
            goto LABEL_639;
          }
          v235 = v232 + 64;
          v232 = v231;
          if (v235 != v231)
          {
            v232 = v235;
            do
            {
              if ((unint64_t)(*(_QWORD *)v232 + 1) > 1)
                goto LABEL_542;
              v232 += 64;
            }
            while (v232 != v231);
            v232 = v231;
          }
LABEL_542:
          ;
        }
        v236 = *v412 + 1;
        *v412 = v236;
        v419[0] = v236;
        v237 = *(WTF::StringImpl **)(a2 + 552);
        v426 = v237;
        do
          v238 = __ldaxr((unsigned int *)v237);
        while (__stlxr(v238 + 1, (unsigned int *)v237));
        LOWORD(pStmt) = 0;
        WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v426);
        LOBYTE(v433) = 0;
        v435 = -1;
        v239 = v423;
        if (v423 != -1)
        {
          ((void (*)(const char **, sqlite3_stmt ***, char *))off_1E335AC98[v423])(&v429, &v433, v421);
          v435 = v239;
        }
        LOBYTE(v436) = 1;
        WebCore::serializeIDBKeyPath((uint64_t)&v433);
        if ((_BYTE)v436 && v435 != -1)
          ((void (*)(const char **, sqlite3_stmt ***))off_1E335AC88[v435])(&v429, &v433);
        if (!v437[0])
        {
          WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v426);
          goto LABEL_638;
        }
        WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v429, a2, 0xBuLL, "INSERT INTO IndexInfo VALUES (?, ?, ?, ?, ?, ?);",
          49);
        v241 = (sqlite3_stmt **)v429;
        if (!v429)
          goto LABEL_615;
        if (sqlite3_bind_int64(*((sqlite3_stmt **)v429 + 1), 1, v419[0]))
          goto LABEL_614;
        if (v420)
        {
          v242 = (char *)*((_QWORD *)v420 + 1);
          v243 = *((unsigned int *)v420 + 1) | ((unint64_t)((*((_DWORD *)v420 + 4) >> 2) & 1) << 32);
        }
        else
        {
          v242 = 0;
          v243 = 0x100000000;
        }
        if (WebCore::SQLiteStatement::bindText((uint64_t)v241, 2, v242, v243)
          || sqlite3_bind_int64(v241[1], 3, v419[1]))
        {
          goto LABEL_614;
        }
        v244 = v437[0];
        if (*((_DWORD *)v437[0] + 5))
        {
          v245 = *(_QWORD *)(*((_QWORD *)v437[0] + 1) + 8);
          v246 = *(unsigned int *)(v245 + 24);
          if ((_DWORD)v246 == -1)
            goto LABEL_1008;
          v433 = (sqlite3_stmt **)&v432;
          v247 = (const void *)((uint64_t (*)(sqlite3_stmt ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v246])(&v433, v245 + 8);
        }
        else
        {
          v247 = 0;
        }
        if (sqlite3_bind_blob(v241[1], 4, v247, *((_DWORD *)v244 + 12), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL)
          || sqlite3_bind_int(v241[1], 5, v424)
          || sqlite3_bind_int(v241[1], 6, BYTE1(v424))
          || WebCore::SQLiteStatement::step(v241) != 101)
        {
          goto LABEL_614;
        }
        sqlite3_reset(v241[1]);
        sqlite3_clear_bindings(v241[1]);
        WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement(&v432, a2, 0x23uLL, "SELECT key, value, recordID FROM Records WHERE objectStoreID = ?;",
          66);
        v241 = v432;
        if (!v432)
          goto LABEL_615;
        if (sqlite3_bind_int64(v432[1], 1, v419[1]))
          goto LABEL_614;
        v248 = WebCore::SQLiteStatement::step(v241);
        while (v248 == 100)
        {
          v249 = v432;
          if ((sqlite3_stmt_busy(v432[1]) || WebCore::SQLiteStatement::step(v249) == 100)
            && sqlite3_data_count(v249[1]) >= 1
            && (v250 = (char *)sqlite3_column_blob(v249[1], 0)) != 0)
          {
            v251 = v250;
            v252 = sqlite3_column_bytes(v249[1], 0);
            LOBYTE(v433) = 0;
            v434 = 0;
            v436 = 0;
            if (v252 >= 1)
              v253 = v252;
            else
              v253 = 0;
            if (v252 >= 1)
            {
              if (*v251)
              {
                if (*v251 == 98)
                {
                  v254 = WTF::fastMalloc((WTF *)0x140);
                  v255 = WebCore::KeyedDecoderCF::KeyedDecoderCF(v254, (const UInt8 *)v251, v253);
                  v256 = WebCore::IDBKeyData::decode(v255, (uint64_t)&v433);
                  (*(void (**)(uint64_t))(*(_QWORD *)v254 + 8))(v254);
                  if ((v256 & 1) != 0)
                    goto LABEL_588;
                }
              }
              else
              {
                v429 = v251 + 1;
                v430 = (WTF::StringImpl *)(v253 - 1);
                if ((WebCore::decodeKey((unsigned __int8 **)&v429, (uint64_t)&v433) & 1) != 0 && !v430)
                {
LABEL_588:
                  WebCore::SQLiteStatement::columnBlob(v249, 1, (uint64_t)&v429);
                  v258 = WTF::fastMalloc((WTF *)0x18);
                  *(_DWORD *)v258 = 1;
                  *(_QWORD *)(v258 + 8) = v429;
                  *(_QWORD *)(v258 + 16) = v430;
                  v431 = (unsigned int *)v258;
                  if ((sqlite3_stmt_busy(v249[1]) || WebCore::SQLiteStatement::step(v249) == 100)
                    && sqlite3_data_count(v249[1]) >= 3)
                  {
                    v259 = sqlite3_column_int64(v249[1], 2);
                  }
                  else
                  {
                    v259 = 0;
                  }
                  WebCore::IDBServer::SQLiteIDBBackingStore::updateOneIndexForAddRecord((uint64_t)&v429, a2, v402, v419, (unsigned int *)&v433, &v431, v259);
                  if (BYTE1(v429))
                  {
                    v257 = 1;
                    v248 = 100;
                  }
                  else
                  {
                    v248 = WebCore::SQLiteStatement::step(v249);
                    v257 = 0;
                  }
                  if (v430)
                  {
                    if (*(_DWORD *)v430 == 2)
                      WTF::StringImpl::destroy(v430, v240);
                    else
                      *(_DWORD *)v430 -= 2;
                  }
                  v431 = 0;
                  do
                  {
                    v260 = __ldaxr((unsigned int *)v258);
                    v261 = v260 - 1;
                  }
                  while (__stlxr(v261, (unsigned int *)v258));
                  if (!v261)
                  {
                    atomic_store(1u, (unsigned int *)v258);
                    v262 = *(WTF **)(v258 + 8);
                    if (v262)
                    {
                      *(_QWORD *)(v258 + 8) = 0;
                      *(_DWORD *)(v258 + 16) = 0;
                      WTF::fastFree(v262, v240);
                    }
                    WTF::fastFree((WTF *)v258, v240);
                  }
                  goto LABEL_582;
                }
              }
            }
          }
          else
          {
            LOBYTE(v433) = 0;
            v434 = 0;
            v436 = 0;
          }
          v257 = 1;
          v248 = 100;
LABEL_582:
          if (v436 != -1)
            ((void (*)(const char **, uint64_t *))off_1E335ACA8[v436])(&v429, &v434);
          if (v257)
            goto LABEL_613;
        }
        if (v248 != 101)
        {
LABEL_613:
          v241 = v432;
          if (v432)
          {
LABEL_614:
            sqlite3_reset(v241[1]);
            sqlite3_clear_bindings(v241[1]);
          }
LABEL_615:
          v265 = 0;
          goto LABEL_616;
        }
        v264 = v432;
        if (v432)
        {
          sqlite3_reset(v432[1]);
          sqlite3_clear_bindings(v264[1]);
        }
        WebCore::SQLiteTransaction::commit((uint64_t)&v426);
        v265 = 1;
LABEL_616:
        v266 = v437[0];
        v437[0] = 0;
        if (!v266)
          goto LABEL_619;
        do
        {
          v267 = __ldaxr((unsigned int *)v266);
          v268 = v267 - 1;
        }
        while (__stlxr(v268, (unsigned int *)v266));
        if (!v268)
        {
          atomic_store(1u, (unsigned int *)v266);
          v269 = *((unsigned int *)v266 + 5);
          if ((_DWORD)v269)
          {
            v270 = *((_QWORD *)v266 + 1);
            v403 = v270 + 16 * v269;
            do
            {
              v271 = *(unsigned int **)(v270 + 8);
              *(_QWORD *)(v270 + 8) = 0;
              if (v271)
              {
                v272 = v271;
                v273 = v271;
                do
                {
                  v274 = __ldaxr(v273);
                  v275 = v274 - 1;
                }
                while (__stlxr(v275, v273));
                if (!v275)
                {
                  atomic_store(1u, v272);
                  v276 = v272[6];
                  if ((_DWORD)v276 != -1)
                    ((void (*)(sqlite3_stmt ***, unsigned int *))off_1E335AE70[v276])(&v433, v272 + 2);
                  v272[6] = -1;
                  WTF::fastFree((WTF *)v272, v240);
                }
              }
              v270 += 16;
            }
            while (v270 != v403);
          }
          v277 = (WTF *)*((_QWORD *)v266 + 1);
          v278 = (WTF *)((char *)v266 + 24) == v277 || v277 == 0;
          if (!v278)
          {
            *((_QWORD *)v266 + 1) = 0;
            *((_DWORD *)v266 + 4) = 0;
            WTF::fastFree(v277, v240);
          }
          WTF::fastFree(v266, v240);
          WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v426);
          if ((v265 & 1) == 0)
            goto LABEL_638;
LABEL_620:
          v429 = (const char *)v419[0];
          WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBIndexInfo&>(v406, (WTF::StringImpl *)&v429, (uint64_t)v419, (uint64_t)&v433);
          v263 = 0;
        }
        else
        {
LABEL_619:
          WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v426);
          if (v265)
            goto LABEL_620;
LABEL_638:
          v263 = 1;
        }
LABEL_639:
        if (v423 != -1)
          ((void (*)(sqlite3_stmt ***, char *))off_1E335AC88[v423])(&v433, v421);
        v423 = -1;
        v279 = v420;
        v420 = 0;
        if (v279)
        {
          if (*(_DWORD *)v279 == 2)
            WTF::StringImpl::destroy(v279, v10);
          else
            *(_DWORD *)v279 -= 2;
        }
        if (v263 != 5 && v263)
          goto LABEL_1005;
        v3 += 56;
      }
      while (v3 != v405);
LABEL_650:
      v280 = v208 + 24;
      v208 = v400;
      if (v280 != v400)
      {
        v208 = v280;
        do
        {
          if ((unint64_t)(*(_QWORD *)v208 + 1) > 1)
            goto LABEL_655;
          v208 += 24;
        }
        while (v208 != v400);
        v208 = v400;
      }
LABEL_655:
      if (v208 == v398)
        goto LABEL_656;
    }
  }
  v2 = *(uint64_t **)(a2 + 552);
  v433 = (sqlite3_stmt **)v2;
  do
    v203 = __ldaxr((unsigned int *)v2);
  while (__stlxr(v203 + 1, (unsigned int *)v2));
  LOWORD(v434) = 0;
  WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v433);
  if (!WebCore::SQLiteDatabase::executeCommand((uint64_t)v2, "CREATE TABLE _Temp_IndexInfo (id INTEGER NOT NULL ON CONFLICT FAIL, name TEXT NOT NULL ON CONFLICT FAIL, objectStoreID INTEGER NOT NULL ON CONFLICT FAIL, keyPath BLOB NOT NULL ON CONFLICT FAIL, isUnique INTEGER NOT NULL ON CONFLICT FAIL, multiEntry INTEGER NOT NULL ON CONFLICT FAIL)", 284))goto LABEL_825;
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)v2, "SELECT id, name, objectStoreID, keyPath, isUnique, multiEntry FROM IndexInfo;",
    78,
    (uint64_t)v419);
  v204 = (int)v420;
  if ((_DWORD)v420)
  {
    v205 = 1;
    goto LABEL_815;
  }
  v3 = v419[0] + 32;
  if (__ldaxr((unsigned __int8 *)(v419[0] + 32)))
  {
    __clrex();
    goto LABEL_662;
  }
  if (__stxr(1u, (unsigned __int8 *)v3))
LABEL_662:
    MEMORY[0x19AEA534C](v3);
  if (*(_BYTE *)(v419[0] + 20)
    || (v283 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly((sqlite3_stmt *)v419[1]), (_DWORD)v283))
  {
    v284 = sqlite3_step((sqlite3_stmt *)v419[1]);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v283);
    v350 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step((sqlite3_stmt *)v419[1]);
    v284 = (int)v350;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v350);
  }
  v285 = __ldxr((unsigned __int8 *)v3);
  if (v285 != 1)
  {
    __clrex();
    goto LABEL_670;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_670:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  while (v284 == 100)
  {
    if ((_DWORD)v420)
      goto LABEL_1008;
    if (sqlite3_stmt_busy((sqlite3_stmt *)v419[1]))
      goto LABEL_687;
    v286 = (unsigned __int8 *)(v419[0] + 32);
    if (__ldaxr((unsigned __int8 *)(v419[0] + 32)))
    {
      __clrex();
LABEL_677:
      MEMORY[0x19AEA534C](v286);
      goto LABEL_678;
    }
    if (__stxr(1u, v286))
      goto LABEL_677;
LABEL_678:
    if (*(_BYTE *)(v419[0] + 20)
      || (v288 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly((sqlite3_stmt *)v419[1]), (_DWORD)v288))
    {
      v3 = sqlite3_step((sqlite3_stmt *)v419[1]);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v288);
      v3 = sqlite3_step((sqlite3_stmt *)v419[1]);
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v3);
    }
    v289 = __ldxr(v286);
    if (v289 != 1)
    {
      __clrex();
LABEL_685:
      WTF::Lock::unlockSlow((WTF::Lock *)v286);
      goto LABEL_686;
    }
    if (__stlxr(0, v286))
      goto LABEL_685;
LABEL_686:
    if ((_DWORD)v3 != 100)
      goto LABEL_689;
LABEL_687:
    if (sqlite3_data_count((sqlite3_stmt *)v419[1]) < 1)
    {
LABEL_689:
      v290 = 0;
      goto LABEL_690;
    }
    v290 = sqlite3_column_int64((sqlite3_stmt *)v419[1], 0);
LABEL_690:
    if ((_DWORD)v420)
      goto LABEL_1008;
    WebCore::SQLiteStatement::columnText((sqlite3_stmt **)v419, 1, &v429);
    if ((_DWORD)v420)
      goto LABEL_1008;
    if (!sqlite3_stmt_busy((sqlite3_stmt *)v419[1]))
    {
      v291 = (unsigned __int8 *)(v419[0] + 32);
      if (__ldaxr((unsigned __int8 *)(v419[0] + 32)))
      {
        __clrex();
        goto LABEL_696;
      }
      if (__stxr(1u, v291))
LABEL_696:
        MEMORY[0x19AEA534C](v291);
      if (*(_BYTE *)(v419[0] + 20)
        || (v293 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly((sqlite3_stmt *)v419[1]), (_DWORD)v293))
      {
        v294 = sqlite3_step((sqlite3_stmt *)v419[1]);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v293);
        v329 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step((sqlite3_stmt *)v419[1]);
        v294 = (int)v329;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v329);
      }
      v295 = __ldxr(v291);
      if (v295 == 1)
      {
        if (!__stlxr(0, v291))
        {
LABEL_705:
          if (v294 != 100)
            goto LABEL_708;
          goto LABEL_706;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v291);
      goto LABEL_705;
    }
LABEL_706:
    if (sqlite3_data_count((sqlite3_stmt *)v419[1]) >= 3)
    {
      v3 = sqlite3_column_int64((sqlite3_stmt *)v419[1], 2);
      goto LABEL_709;
    }
LABEL_708:
    v3 = 0;
LABEL_709:
    v296 = WTF::HashMap<std::pair<unsigned long long,unsigned long long>,unsigned long long,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned long long,unsigned long long>,unsigned long long,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>>,std::pair<unsigned long long,unsigned long long>>(v418, v3, v290);
    if ((_DWORD)v420)
      goto LABEL_1008;
    v297 = v296;
    if (sqlite3_stmt_busy((sqlite3_stmt *)v419[1]))
      goto LABEL_724;
    v298 = (unsigned __int8 *)(v419[0] + 32);
    if (__ldaxr((unsigned __int8 *)(v419[0] + 32)))
    {
      __clrex();
LABEL_714:
      MEMORY[0x19AEA534C](v298);
      goto LABEL_715;
    }
    if (__stxr(1u, v298))
      goto LABEL_714;
LABEL_715:
    if (*(_BYTE *)(v419[0] + 20)
      || (v300 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly((sqlite3_stmt *)v419[1]), (_DWORD)v300))
    {
      v301 = sqlite3_step((sqlite3_stmt *)v419[1]);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v300);
      v330 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step((sqlite3_stmt *)v419[1]);
      v301 = (int)v330;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v330);
    }
    v302 = __ldxr(v298);
    if (v302 != 1)
    {
      __clrex();
LABEL_722:
      WTF::Lock::unlockSlow((WTF::Lock *)v298);
      goto LABEL_723;
    }
    if (__stlxr(0, v298))
      goto LABEL_722;
LABEL_723:
    if (v301 != 100)
      goto LABEL_733;
LABEL_724:
    if (sqlite3_data_count((sqlite3_stmt *)v419[1]) < 4
      || (v303 = (void *)sqlite3_column_blob((sqlite3_stmt *)v419[1], 3)) == 0)
    {
LABEL_733:
      v413 = 0;
      v306 = 0;
      goto LABEL_734;
    }
    v304 = v303;
    v305 = sqlite3_column_bytes((sqlite3_stmt *)v419[1], 3);
    if (v305 >= 1)
      v306 = v305;
    else
      v306 = 0;
    if (v305 >= 1)
      v307 = v304;
    else
      v307 = 0;
    v413 = v307;
LABEL_734:
    if ((_DWORD)v420)
      goto LABEL_1008;
    if (!sqlite3_stmt_busy((sqlite3_stmt *)v419[1]))
    {
      v319 = (unsigned __int8 *)(v419[0] + 32);
      if (__ldaxr((unsigned __int8 *)(v419[0] + 32)))
      {
        __clrex();
        goto LABEL_770;
      }
      if (__stxr(1u, v319))
LABEL_770:
        MEMORY[0x19AEA534C](v319);
      if (*(_BYTE *)(v419[0] + 20)
        || (v323 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly((sqlite3_stmt *)v419[1]), (_DWORD)v323))
      {
        v324 = sqlite3_step((sqlite3_stmt *)v419[1]);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v323);
        v331 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step((sqlite3_stmt *)v419[1]);
        v324 = (int)v331;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v331);
      }
      v325 = __ldxr(v319);
      if (v325 == 1)
      {
        if (!__stlxr(0, v319))
        {
LABEL_779:
          if (v324 != 100)
            goto LABEL_780;
          goto LABEL_736;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v319);
      goto LABEL_779;
    }
LABEL_736:
    if (sqlite3_data_count((sqlite3_stmt *)v419[1]) >= 5)
    {
      v308 = sqlite3_column_int((sqlite3_stmt *)v419[1], 4);
      goto LABEL_738;
    }
LABEL_780:
    v308 = 0;
LABEL_738:
    if ((_DWORD)v420)
      goto LABEL_1008;
    if (!sqlite3_stmt_busy((sqlite3_stmt *)v419[1]))
    {
      v321 = (unsigned __int8 *)(v419[0] + 32);
      if (__ldaxr((unsigned __int8 *)(v419[0] + 32)))
      {
        __clrex();
        goto LABEL_782;
      }
      if (__stxr(1u, v321))
LABEL_782:
        MEMORY[0x19AEA534C](v321);
      if (*(_BYTE *)(v419[0] + 20)
        || (v326 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly((sqlite3_stmt *)v419[1]), (_DWORD)v326))
      {
        v327 = sqlite3_step((sqlite3_stmt *)v419[1]);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v326);
        v332 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step((sqlite3_stmt *)v419[1]);
        v327 = (int)v332;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v332);
      }
      v328 = __ldxr(v321);
      if (v328 == 1)
      {
        if (!__stlxr(0, v321))
        {
LABEL_791:
          if (v327 != 100)
            goto LABEL_792;
          goto LABEL_740;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v321);
      goto LABEL_791;
    }
LABEL_740:
    if (sqlite3_data_count((sqlite3_stmt *)v419[1]) >= 6)
    {
      v309 = sqlite3_column_int((sqlite3_stmt *)v419[1], 5);
      goto LABEL_742;
    }
LABEL_792:
    v309 = 0;
LABEL_742:
    WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v426, a2, 0xCuLL, "INSERT INTO _Temp_IndexInfo VALUES (?, ?, ?, ?, ?, ?);",
      55);
    v311 = (sqlite3_stmt **)v426;
    if (v426)
    {
      if (!sqlite3_bind_int64(*((sqlite3_stmt **)v426 + 1), 1, v297))
      {
        v312 = (unint64_t)v429;
        if (v429)
        {
          v313 = (char *)*((_QWORD *)v429 + 1);
          v312 = *((unsigned int *)v429 + 1);
          v314 = ((unint64_t)*((unsigned int *)v429 + 4) >> 2) & 1;
        }
        else
        {
          v313 = 0;
          v314 = 1;
        }
        if (!WebCore::SQLiteStatement::bindText((uint64_t)v311, 2, v313, v312 | (v314 << 32))
          && !sqlite3_bind_int64(v311[1], 3, v3)
          && !sqlite3_bind_blob(v311[1], 4, v413, v306, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL)
          && !sqlite3_bind_int(v311[1], 5, v308 != 0)
          && !sqlite3_bind_int(v311[1], 6, v309 != 0)
          && WebCore::SQLiteStatement::step(v311) == 101)
        {
          if ((_DWORD)v420)
            goto LABEL_1008;
          v315 = (unsigned __int8 *)(v419[0] + 32);
          if (__ldaxr((unsigned __int8 *)(v419[0] + 32)))
          {
            __clrex();
            goto LABEL_800;
          }
          if (__stxr(1u, v315))
LABEL_800:
            MEMORY[0x19AEA534C](v315);
          if (*(_BYTE *)(v419[0] + 20)
            || (v333 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly((sqlite3_stmt *)v419[1]), (_DWORD)v333))
          {
            v284 = sqlite3_step((sqlite3_stmt *)v419[1]);
          }
          else
          {
            WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v333);
            v335 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step((sqlite3_stmt *)v419[1]);
            v284 = (int)v335;
            WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v335);
          }
          v334 = __ldxr(v315);
          if (v334 == 1)
          {
            if (!__stlxr(0, v315))
            {
LABEL_809:
              v3 = 1;
LABEL_756:
              v317 = v426;
              v18 = v415;
              if (v426)
              {
                sqlite3_reset(*((sqlite3_stmt **)v426 + 1));
                sqlite3_clear_bindings(*((sqlite3_stmt **)v317 + 1));
              }
              goto LABEL_759;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v315);
          goto LABEL_809;
        }
      }
      v3 = 0;
      v284 = 100;
      goto LABEL_756;
    }
    v3 = 0;
    v284 = 100;
    v18 = v415;
LABEL_759:
    v318 = (WTF::StringImpl *)v429;
    v429 = 0;
    if (v318)
    {
      if (*(_DWORD *)v318 == 2)
        WTF::StringImpl::destroy(v318, v310);
      else
        *(_DWORD *)v318 -= 2;
    }
    if ((v3 & 1) == 0)
      goto LABEL_813;
  }
  if (v284 == 101)
  {
    v205 = 0;
    goto LABEL_814;
  }
LABEL_813:
  v205 = 1;
LABEL_814:
  v204 = (int)v420;
LABEL_815:
  if (v204 != -1)
    ((void (*)(const char **, sqlite3_int64 *))off_1E335AC78[v204])(&v429, v419);
  if (v205
    || !WebCore::SQLiteDatabase::executeCommand((uint64_t)v2, "DROP TABLE IndexInfo", 21)
    || (WebCore::SQLiteDatabase::executeCommand((uint64_t)v2, "ALTER TABLE _Temp_IndexInfo RENAME TO IndexInfo", 48) & 1) == 0)
  {
LABEL_825:
    v282 = (sqlite3_int64 *)&v433;
    goto LABEL_826;
  }
  WebCore::SQLiteTransaction::commit((uint64_t)&v433);
  WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v433);
  v2 = *(uint64_t **)(a2 + 552);
  v433 = (sqlite3_stmt **)v2;
  do
    v336 = __ldaxr((unsigned int *)v2);
  while (__stlxr(v336 + 1, (unsigned int *)v2));
  LOWORD(v434) = 0;
  WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v433);
  if (!WebCore::SQLiteDatabase::executeCommand((uint64_t)v2, "CREATE TABLE _Temp_IndexRecords (indexID INTEGER NOT NULL ON CONFLICT FAIL, objectStoreID INTEGER NOT NULL ON CONFLICT FAIL, key TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, value TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, objectStoreRecordID INTEGER NOT NULL ON CONFLICT FAIL)", 284))goto LABEL_1004;
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)v2, "SELECT indexID, objectStoreID, key, value, objectStoreRecordID FROM IndexRecords;",
    82,
    (uint64_t)v419);
  v337 = (int)v420;
  if ((_DWORD)v420)
  {
    v338 = 1;
    goto LABEL_998;
  }
  v3 = v419[0] + 32;
  if (__ldaxr((unsigned __int8 *)(v419[0] + 32)))
  {
    __clrex();
    goto LABEL_854;
  }
  if (__stxr(1u, (unsigned __int8 *)v3))
LABEL_854:
    MEMORY[0x19AEA534C](v3);
  if (*(_BYTE *)(v419[0] + 20) || (v352 = sqlite3_stmt_readonly((sqlite3_stmt *)v419[1]), (_DWORD)v352))
  {
    v353 = sqlite3_step((sqlite3_stmt *)v419[1]);
    goto LABEL_858;
  }
LABEL_1009:
  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v352);
  v397 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step((sqlite3_stmt *)v419[1]);
  v353 = (int)v397;
  WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v397);
LABEL_858:
  v354 = __ldxr((unsigned __int8 *)v3);
  if (v354 != 1)
  {
    __clrex();
    goto LABEL_862;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_862:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  while (v353 == 100)
  {
    if ((_DWORD)v420)
      goto LABEL_1008;
    if (!sqlite3_stmt_busy((sqlite3_stmt *)v419[1]))
    {
      v355 = (unsigned __int8 *)(v419[0] + 32);
      if (__ldaxr((unsigned __int8 *)(v419[0] + 32)))
      {
        __clrex();
        goto LABEL_869;
      }
      if (__stxr(1u, v355))
LABEL_869:
        MEMORY[0x19AEA534C](v355);
      if (*(_BYTE *)(v419[0] + 20)
        || (v357 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly((sqlite3_stmt *)v419[1]), (_DWORD)v357))
      {
        v3 = sqlite3_step((sqlite3_stmt *)v419[1]);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v357);
        v3 = sqlite3_step((sqlite3_stmt *)v419[1]);
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v3);
      }
      v358 = __ldxr(v355);
      if (v358 == 1)
      {
        if (!__stlxr(0, v355))
        {
LABEL_878:
          if ((_DWORD)v3 != 100)
            goto LABEL_881;
          goto LABEL_879;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v355);
      goto LABEL_878;
    }
LABEL_879:
    if (sqlite3_data_count((sqlite3_stmt *)v419[1]) >= 1)
    {
      v359 = sqlite3_column_int64((sqlite3_stmt *)v419[1], 0);
      goto LABEL_882;
    }
LABEL_881:
    v359 = 0;
LABEL_882:
    if ((_DWORD)v420)
      goto LABEL_1008;
    if (!sqlite3_stmt_busy((sqlite3_stmt *)v419[1]))
    {
      v3 = v419[0] + 32;
      if (__ldaxr((unsigned __int8 *)(v419[0] + 32)))
      {
        __clrex();
        goto LABEL_887;
      }
      if (__stxr(1u, (unsigned __int8 *)v3))
LABEL_887:
        MEMORY[0x19AEA534C](v3);
      if (*(_BYTE *)(v419[0] + 20)
        || (v361 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly((sqlite3_stmt *)v419[1]), (_DWORD)v361))
      {
        v362 = sqlite3_step((sqlite3_stmt *)v419[1]);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v361);
        v395 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step((sqlite3_stmt *)v419[1]);
        v362 = (int)v395;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v395);
      }
      v363 = __ldxr((unsigned __int8 *)v3);
      if (v363 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v3))
        {
LABEL_896:
          if (v362 != 100)
            goto LABEL_899;
          goto LABEL_897;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      goto LABEL_896;
    }
LABEL_897:
    if (sqlite3_data_count((sqlite3_stmt *)v419[1]) >= 2)
    {
      v364 = sqlite3_column_int64((sqlite3_stmt *)v419[1], 1);
      goto LABEL_900;
    }
LABEL_899:
    v364 = 0;
LABEL_900:
    v365 = WTF::HashMap<std::pair<unsigned long long,unsigned long long>,unsigned long long,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned long long,unsigned long long>,unsigned long long,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>>,std::pair<unsigned long long,unsigned long long>>(v418, v364, v359);
    if ((_DWORD)v420)
      goto LABEL_1008;
    v366 = v365;
    if (sqlite3_stmt_busy((sqlite3_stmt *)v419[1]))
      goto LABEL_915;
    v367 = (unsigned __int8 *)(v419[0] + 32);
    if (__ldaxr((unsigned __int8 *)(v419[0] + 32)))
    {
      __clrex();
LABEL_905:
      MEMORY[0x19AEA534C](v367);
      goto LABEL_906;
    }
    if (__stxr(1u, v367))
      goto LABEL_905;
LABEL_906:
    if (*(_BYTE *)(v419[0] + 20)
      || (v369 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly((sqlite3_stmt *)v419[1]), (_DWORD)v369))
    {
      v3 = sqlite3_step((sqlite3_stmt *)v419[1]);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v369);
      v3 = sqlite3_step((sqlite3_stmt *)v419[1]);
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v3);
    }
    v370 = __ldxr(v367);
    if (v370 != 1)
    {
      __clrex();
LABEL_913:
      WTF::Lock::unlockSlow((WTF::Lock *)v367);
      goto LABEL_914;
    }
    if (__stlxr(0, v367))
      goto LABEL_913;
LABEL_914:
    if ((_DWORD)v3 != 100)
      goto LABEL_924;
LABEL_915:
    if (sqlite3_data_count((sqlite3_stmt *)v419[1]) < 3
      || (v371 = (void *)sqlite3_column_blob((sqlite3_stmt *)v419[1], 2)) == 0)
    {
LABEL_924:
      v409 = 0;
      v414 = 0;
      goto LABEL_925;
    }
    v372 = v371;
    v373 = sqlite3_column_bytes((sqlite3_stmt *)v419[1], 2);
    if (v373 >= 1)
      v374 = v373;
    else
      v374 = 0;
    v414 = v374;
    if (v373 >= 1)
      v375 = v372;
    else
      v375 = 0;
    v409 = v375;
LABEL_925:
    if ((_DWORD)v420)
      goto LABEL_1008;
    if (sqlite3_stmt_busy((sqlite3_stmt *)v419[1]))
      goto LABEL_940;
    v376 = (unsigned __int8 *)(v419[0] + 32);
    if (__ldaxr((unsigned __int8 *)(v419[0] + 32)))
    {
      __clrex();
LABEL_930:
      MEMORY[0x19AEA534C](v376);
      goto LABEL_931;
    }
    if (__stxr(1u, v376))
      goto LABEL_930;
LABEL_931:
    if (*(_BYTE *)(v419[0] + 20)
      || (v378 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly((sqlite3_stmt *)v419[1]), (_DWORD)v378))
    {
      v3 = sqlite3_step((sqlite3_stmt *)v419[1]);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v378);
      v3 = sqlite3_step((sqlite3_stmt *)v419[1]);
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v3);
    }
    v379 = __ldxr(v376);
    if (v379 != 1)
    {
      __clrex();
LABEL_938:
      WTF::Lock::unlockSlow((WTF::Lock *)v376);
      goto LABEL_939;
    }
    if (__stlxr(0, v376))
      goto LABEL_938;
LABEL_939:
    if ((_DWORD)v3 != 100)
      goto LABEL_948;
LABEL_940:
    if (sqlite3_data_count((sqlite3_stmt *)v419[1]) < 4
      || (v380 = sqlite3_column_blob((sqlite3_stmt *)v419[1], 3)) == 0)
    {
LABEL_948:
      v383 = 0;
      v382 = 0;
      goto LABEL_949;
    }
    v3 = (unint64_t)v380;
    v381 = sqlite3_column_bytes((sqlite3_stmt *)v419[1], 3);
    if (v381 >= 1)
      v382 = v381;
    else
      v382 = 0;
    if (v381 >= 1)
      v383 = (const void *)v3;
    else
      v383 = 0;
LABEL_949:
    if ((_DWORD)v420)
      goto LABEL_1008;
    if (!sqlite3_stmt_busy((sqlite3_stmt *)v419[1]))
    {
      v384 = (unsigned __int8 *)(v419[0] + 32);
      if (__ldaxr((unsigned __int8 *)(v419[0] + 32)))
      {
        __clrex();
        goto LABEL_954;
      }
      if (__stxr(1u, v384))
LABEL_954:
        MEMORY[0x19AEA534C](v384);
      if (*(_BYTE *)(v419[0] + 20)
        || (v386 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly((sqlite3_stmt *)v419[1]), (_DWORD)v386))
      {
        v387 = sqlite3_step((sqlite3_stmt *)v419[1]);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v386);
        v396 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step((sqlite3_stmt *)v419[1]);
        v387 = (int)v396;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v396);
      }
      v388 = __ldxr(v384);
      if (v388 == 1)
      {
        if (!__stlxr(0, v384))
        {
LABEL_963:
          if (v387 != 100)
            goto LABEL_966;
          goto LABEL_964;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v384);
      goto LABEL_963;
    }
LABEL_964:
    if (sqlite3_data_count((sqlite3_stmt *)v419[1]) >= 5)
    {
      v3 = sqlite3_column_int64((sqlite3_stmt *)v419[1], 4);
      goto LABEL_967;
    }
LABEL_966:
    v3 = 0;
LABEL_967:
    WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v429, a2, 0x11uLL, "INSERT INTO _Temp_IndexRecords VALUES (?, ?, CAST(? AS TEXT), CAST(? AS TEXT), ?);",
      83);
    v389 = (sqlite3_stmt **)v429;
    if (!v429)
      goto LABEL_996;
    if (sqlite3_bind_int64(*((sqlite3_stmt **)v429 + 1), 1, v366)
      || sqlite3_bind_int64(v389[1], 2, v364)
      || sqlite3_bind_blob(v389[1], 3, v409, v414, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL)
      || sqlite3_bind_blob(v389[1], 4, v383, v382, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL)
      || sqlite3_bind_int64(v389[1], 5, v3)
      || WebCore::SQLiteStatement::step(v389) != 101)
    {
      sqlite3_reset(v389[1]);
      sqlite3_clear_bindings(v389[1]);
LABEL_996:
      v338 = 1;
      goto LABEL_997;
    }
    if ((_DWORD)v420)
      goto LABEL_1008;
    v3 = v419[0] + 32;
    if (__ldaxr((unsigned __int8 *)(v419[0] + 32)))
    {
      __clrex();
LABEL_978:
      MEMORY[0x19AEA534C](v3);
      goto LABEL_979;
    }
    if (__stxr(1u, (unsigned __int8 *)v3))
      goto LABEL_978;
LABEL_979:
    if (*(_BYTE *)(v419[0] + 20)
      || (v391 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly((sqlite3_stmt *)v419[1]), (_DWORD)v391))
    {
      v353 = sqlite3_step((sqlite3_stmt *)v419[1]);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v391);
      v394 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step((sqlite3_stmt *)v419[1]);
      v353 = (int)v394;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v394);
    }
    v392 = __ldxr((unsigned __int8 *)v3);
    if (v392 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_987;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_987:
    v393 = v429;
    if (v429)
    {
      sqlite3_reset(*((sqlite3_stmt **)v429 + 1));
      sqlite3_clear_bindings(*((sqlite3_stmt **)v393 + 1));
    }
  }
  if (v353 != 101)
    goto LABEL_996;
  v338 = 0;
LABEL_997:
  v337 = (int)v420;
LABEL_998:
  if (v337 != -1)
    ((void (*)(const char **, sqlite3_int64 *))off_1E335AC78[v337])(&v429, v419);
  if (!v338
    && WebCore::SQLiteDatabase::executeCommand((uint64_t)v2, "DROP TABLE IndexRecords", 24)
    && (WebCore::SQLiteDatabase::executeCommand((uint64_t)v2, "ALTER TABLE _Temp_IndexRecords RENAME TO IndexRecords", 54) & 1) != 0)
  {
    WebCore::SQLiteTransaction::commit((uint64_t)&v433);
    WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v433);
    goto LABEL_656;
  }
LABEL_1004:
  WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v433);
LABEL_1005:
  v281 = 0;
  v18 = v415;
LABEL_827:
  *(_QWORD *)this = v281;
LABEL_828:
  v339 = v417;
  if (v417)
  {
    v416 = v18;
    v340 = *(unsigned int *)(v417 - 4);
    if ((_DWORD)v340)
    {
      for (i = 0; i != v340; ++i)
      {
        if (*(_QWORD *)(v339 + 24 * i) != -1)
        {
          v342 = v339 + 24 * i;
          v343 = (WTF **)(v342 + 8);
          v344 = *(unsigned int *)(v342 + 20);
          if ((_DWORD)v344)
          {
            v345 = 56 * v344;
            v346 = (uint64_t)*v343 + 24;
            do
            {
              v347 = *(unsigned int *)(v346 + 16);
              if ((_DWORD)v347 != -1)
                ((void (*)(sqlite3_int64 *, uint64_t))off_1E335AC88[v347])(v419, v346);
              *(_DWORD *)(v346 + 16) = -1;
              v348 = *(WTF::StringImpl **)(v346 - 8);
              *(_QWORD *)(v346 - 8) = 0;
              if (v348)
              {
                if (*(_DWORD *)v348 == 2)
                  WTF::StringImpl::destroy(v348, v10);
                else
                  *(_DWORD *)v348 -= 2;
              }
              v346 += 56;
              v345 -= 56;
            }
            while (v345);
          }
          v349 = *v343;
          if (*v343)
          {
            *v343 = 0;
            *(_DWORD *)(v339 + 24 * i + 16) = 0;
            WTF::fastFree(v349, v10);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v339 - 16), v10);
    v18 = v416;
  }
  if (v418)
    WTF::fastFree((WTF *)(v418 - 16), v10);
LABEL_848:
  if (v18)
    goto LABEL_32;
LABEL_43:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v10);
    else
      *(_DWORD *)v8 -= 2;
  }
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::encodeDatabaseName@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
    return (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::FileSystemImpl::encodeForFileName(this, a2);
  result = v6;
  if (v6)
  {
    WTF::StringImpl::replace();
    result = v6;
    if (*(_DWORD *)v6 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::decodeDatabaseName@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *result;
  const WTF::String *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  result = (WTF::StringImpl *)MEMORY[0x19AEA53F4](*(_QWORD *)this, "%00", 3);
  if ((_DWORD)result)
  {
    v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v7 += 2;
    *a2 = v7;
  }
  else
  {
    if (*(_QWORD *)this)
    {
      WTF::StringImpl::replace();
      v8 = v10;
    }
    else
    {
      v8 = 0;
    }
    v10 = v8;
    WTF::FileSystemImpl::decodeFromFilename((WTF::FileSystemImpl *)&v10, v6);
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::fullDatabasePathForDirectory(WebCore::IDBServer::SQLiteIDBBackingStore *this, const WTF::String *a2)
{
  return WTF::FileSystemImpl::pathByAppendingComponent();
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::fullDatabasePath(WebCore::IDBServer::SQLiteIDBBackingStore *this)
{
  return WTF::FileSystemImpl::pathByAppendingComponent();
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::databaseNameAndVersionFromFile@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  sqlite3_stmt *v25[2];
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[2];
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  char v34;
  uint64_t v35;
  char v36;
  WTF::Thread *v37;
  char v38;
  int v39;
  WTF *v40;

  v30 = 0;
  v31 = 0;
  v32 = -1;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 1;
  v40 = 0;
  if ((WebCore::SQLiteDatabase::open((uint64_t)&v30, this, 2u, 0) & 1) == 0)
    goto LABEL_3;
  WebCore::SQLiteDatabase::tableSQL((uint64_t)&v30, "IDBDatabaseInfo", 0x10000000FLL, v28);
  v5 = v28[0];
  if (!v28[0])
    goto LABEL_3;
  v12 = *((_DWORD *)v28[0] + 1);
  v28[0] = 0;
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
    if (v12)
      goto LABEL_16;
LABEL_3:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v5, v4);
  if (!v12)
    goto LABEL_3;
LABEL_16:
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)&v30, "SELECT value FROM IDBDatabaseInfo WHERE key = 'DatabaseName';",
    62,
    (uint64_t)v28);
  v13 = v29;
  if (!v29)
  {
    WebCore::SQLiteStatement::columnText(v28, 0, &v27);
    WebCore::SQLiteDatabase::prepareStatement((uint64_t)&v30, "SELECT value FROM IDBDatabaseInfo WHERE key = 'DatabaseVersion';",
      65,
      (uint64_t)v25);
    if (v26)
    {
      v14 = 0;
      v15 = 0;
      v24 = 0;
    }
    else
    {
      WebCore::SQLiteStatement::columnText(v25, 0, &v24);
      if (v24)
      {
        v14 = *((_QWORD *)v24 + 1);
        v15 = *((unsigned int *)v24 + 1);
        if ((*((_BYTE *)v24 + 16) & 4) == 0)
        {
          v16 = WTF::parseInteger<unsigned long long,char16_t>(v14, v15, 0xAu, 0);
LABEL_28:
          if ((_BYTE)v17)
          {
            v20 = v27;
            if (v27)
              *(_DWORD *)v27 += 2;
            *(_QWORD *)a2 = v20;
            *(_QWORD *)(a2 + 8) = v16;
            v21 = 1;
          }
          else
          {
            v21 = 0;
            *(_BYTE *)a2 = 0;
          }
          *(_BYTE *)(a2 + 16) = v21;
          v22 = v24;
          v24 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v17);
            else
              *(_DWORD *)v22 -= 2;
          }
          if (v26 != -1)
            ((void (*)(WTF::StringImpl **, sqlite3_stmt **))off_1E335AC78[v26])(&v24, v25);
          v23 = v27;
          v27 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v17);
            else
              *(_DWORD *)v23 -= 2;
          }
          v13 = v29;
          goto LABEL_42;
        }
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    v16 = WTF::parseInteger<unsigned long long,unsigned char>(v14, v15, 0xAu, 0);
    goto LABEL_28;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
LABEL_42:
  if (v13 != -1)
    ((void (*)(sqlite3_stmt **, WTF::StringImpl **))off_1E335AC78[v13])(v25, v28);
LABEL_4:
  WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)&v30);
  v7 = v40;
  v40 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, v6);
    else
      --*(_DWORD *)v7;
  }
  v8 = (unsigned int *)v37;
  v37 = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::Thread::~Thread((WTF::Thread *)v8);
      WTF::fastFree(v18, v19);
    }
  }
  result = v35;
  v35 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(result, (WTF::StringImpl *)v6);
  return result;
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::getOrEstablishDatabaseInfo@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, WebCore::IDBDatabaseInfo *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::IDBObjectStoreInfo *v13;
  const WTF::String *v15;
  const WTF::String *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  WTF *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  NSObject *v29;
  uint64_t i;
  char *v31;
  sqlite3_stmt **v32;
  void *v33;
  unsigned int *v34;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  WTF *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  sqlite3 *v48;
  const char *v49;
  void *v50;
  WTF *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  unsigned int v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  int v59;
  sqlite3 *v60;
  unsigned int v61;
  sqlite3 *v62;
  char *v63;
  size_t v64;
  const WTF::StringImpl *v65;
  const WTF::StringImpl *v66;
  const WTF::StringImpl *v67;
  const WTF::StringImpl *v68;
  unsigned int v69;
  char *v70;
  uint64_t v71;
  sqlite3 *v72;
  int v73;
  sqlite3 *v74;
  const char *v75;
  uint64_t v76;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  sqlite3 *v81;
  unsigned int v82;
  sqlite3 *v83;
  char *v84;
  size_t v85;
  uint64_t v86;
  sqlite3 *v87;
  unsigned int v88;
  sqlite3 *v89;
  char *v90;
  size_t v91;
  const WTF::StringImpl *v92;
  const WTF::StringImpl *v93;
  const WTF::StringImpl *v94;
  const WTF::StringImpl *v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t j;
  char *v100;
  sqlite3_stmt **v101;
  void *v102;
  unsigned int *v103;
  unsigned int v105;
  uint64_t v106;
  WTF *v107;
  unsigned int *v108;
  unsigned int v109;
  BOOL v110;
  sqlite3 *v111;
  unsigned int v112;
  sqlite3 *v113;
  char *v114;
  size_t v115;
  uint64_t v116;
  int v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  char v120;
  uint64_t k;
  char *v122;
  sqlite3_stmt **v123;
  void *v124;
  unsigned int *v125;
  unsigned int v127;
  WTF *v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v132;
  sqlite3 *v133;
  unsigned int v134;
  sqlite3 *v135;
  char *v136;
  size_t v137;
  uint64_t v138;
  sqlite3 *v139;
  unsigned int v140;
  sqlite3 *v141;
  char *v142;
  size_t v143;
  sqlite3 *v144;
  unsigned int v145;
  sqlite3 *v146;
  char *v147;
  size_t v148;
  uint64_t v149;
  sqlite3 *v150;
  unsigned int v151;
  sqlite3 *v152;
  char *v153;
  size_t v154;
  uint64_t v155;
  void *v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  sqlite3 *v159;
  unsigned int v160;
  sqlite3 *v161;
  char *v162;
  size_t v163;
  uint64_t v164;
  sqlite3 *v165;
  unsigned int v166;
  sqlite3 *v167;
  char *v168;
  size_t v169;
  uint64_t v170;
  int v171;
  WTF::StringImpl *v172;
  char v173;
  uint64_t m;
  char *v175;
  sqlite3_stmt **v176;
  void *v177;
  unsigned int *v178;
  unsigned int v180;
  uint64_t v181;
  WTF *v182;
  unsigned int *v183;
  unsigned int v184;
  BOOL v185;
  uint64_t v186;
  uint64_t v188;
  sqlite3 *v189;
  unsigned int v190;
  sqlite3 *v191;
  char *v192;
  size_t v193;
  uint64_t v194;
  sqlite3 *v195;
  unsigned int v196;
  sqlite3 *v197;
  char *v198;
  size_t v199;
  uint64_t v200;
  sqlite3 *v201;
  unsigned int v202;
  sqlite3 *v203;
  char *v204;
  size_t v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  uint64_t v208;
  sqlite3 *v209;
  unsigned int v210;
  sqlite3 *v211;
  char *v212;
  size_t v213;
  uint64_t v214;
  int v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  uint64_t n;
  char *v220;
  sqlite3_stmt **v221;
  void *v222;
  unsigned int *v223;
  unsigned int v225;
  WTF *v226;
  unsigned int v227;
  uint64_t v228;
  sqlite3 *v229;
  unsigned int v230;
  sqlite3 *v231;
  char *v232;
  size_t v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  uint64_t v236;
  sqlite3 *v237;
  unsigned int v238;
  sqlite3 *v239;
  char *v240;
  size_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  int v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl **v250;
  WTF::StringImpl *v251;
  uint64_t v252;
  WebCore::IDBObjectStoreInfo *v253;
  WTF::StringImpl *v254;
  _DWORD *v255;
  WTF::StringImpl *v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  WebCore::IDBObjectStoreInfo *v260;
  uint64_t ii;
  char *v262;
  sqlite3_stmt **v263;
  void *v264;
  unsigned int *v265;
  unsigned int v267;
  WTF *v268;
  unsigned int v269;
  unsigned __int8 *v270;
  uint64_t jj;
  char *v273;
  sqlite3_stmt **v274;
  void *v275;
  unsigned int *v276;
  unsigned int v278;
  uint64_t v279;
  void *v280;
  WTF *v281;
  unsigned int *v282;
  unsigned int v283;
  BOOL v284;
  uint64_t kk;
  char *v286;
  sqlite3_stmt **v287;
  void *v288;
  unsigned int *v289;
  unsigned int v291;
  WTF *v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t mm;
  char *v296;
  sqlite3_stmt **v297;
  void *v298;
  unsigned int *v299;
  unsigned int v301;
  WTF *v302;
  unsigned int v303;
  uint64_t v304;
  sqlite3 *v305;
  unsigned int v306;
  sqlite3 *v307;
  char *v308;
  size_t v309;
  uint64_t v310;
  WTF::StringImpl *v311;
  WTF *v312;
  void *v313;
  uint64_t v314;
  uint64_t nn;
  char *v316;
  sqlite3_stmt **v317;
  void *v318;
  unsigned int *v319;
  unsigned int v321;
  WTF *v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  WTF *v330;
  void *v331;
  WTF *v332;
  void *v333;
  uint64_t v334;
  int v335;
  WebCore::SQLiteDatabaseTracker *v336;
  int v337;
  int v338;
  int v339;
  uint64_t i1;
  char *v341;
  sqlite3_stmt **v342;
  void *v343;
  unsigned int *v344;
  unsigned int v346;
  uint64_t v347;
  void *v348;
  WTF *v349;
  unsigned int *v350;
  unsigned int v351;
  unsigned int v352;
  uint64_t v353;
  uint64_t v355;
  unint64_t v356;
  char *v357;
  uint64_t v358;
  unsigned __int8 *v359;
  WTF *v361;
  void *v362;
  WebCore::SQLiteDatabaseTracker *v363;
  int v364;
  int v365;
  int v366;
  uint64_t i2;
  char *v368;
  sqlite3_stmt **v369;
  void *v370;
  unsigned int *v371;
  unsigned int v373;
  uint64_t v374;
  void *v375;
  WTF *v376;
  unsigned int *v377;
  unsigned int v378;
  unsigned int v379;
  uint64_t v380;
  unsigned int v382;
  char *v383;
  unint64_t v384;
  BOOL v385;
  WTF::StringImpl *v386;
  unsigned __int8 *v387;
  WebCore::SQLiteDatabaseTracker *v389;
  int v390;
  int v391;
  WTF::StringImpl *v392;
  uint64_t i3;
  char *v394;
  sqlite3_stmt **v395;
  void *v396;
  unsigned int *v397;
  unsigned int v399;
  uint64_t v400;
  void *v401;
  WTF *v402;
  unsigned int *v403;
  unsigned int v404;
  unsigned int v405;
  uint64_t v406;
  int v408;
  WebCore::SQLiteDatabaseTracker *v409;
  uint64_t v410;
  _DWORD *v411;
  uint64_t i4;
  char *v413;
  sqlite3_stmt **v414;
  void *v415;
  unsigned int *v416;
  unsigned int v418;
  WTF *v419;
  unsigned int v420;
  uint64_t v421;
  char *v422;
  sqlite3_stmt **v423;
  void *v424;
  unsigned int *v425;
  unsigned int v427;
  uint64_t v428;
  void *v429;
  WTF *v430;
  unsigned int *v431;
  unsigned int v432;
  unsigned int v433;
  uint64_t v434;
  WTF::StringImpl *v436;
  int v437;
  WTF::StringImpl *v438;
  uint64_t v439;
  uint64_t v440;
  WebCore::IDBObjectStoreInfo *v441;
  WTF::StringImpl *v442;
  WebCore::SQLiteDatabaseTracker *v443;
  WTF *v444;
  void *v445;
  WTF *v446;
  void *v447;
  WebCore::SQLiteDatabaseTracker *v448;
  WTF *v449;
  void *v450;
  WTF *v451;
  void *v452;
  WTF::StringImpl *v453;
  WTF::StringImpl *v454;
  int v455;
  WTF *v456;
  void *v457;
  WTF::StringImpl *v458;
  WTF::StringImpl *v459;
  int v460;
  WTF::StringImpl *v461;
  WTF::StringImpl *v462;
  int v463;
  WTF::StringImpl *v464;
  WTF::StringImpl *v465;
  int v466;
  WTF::StringImpl *v467;
  WTF::StringImpl *v468;
  int v469;
  WTF::StringImpl *v470;
  WTF::StringImpl *v471;
  int v472;
  WTF::StringImpl *v473;
  WTF::StringImpl *v474;
  int v475;
  WTF::StringImpl *v476;
  WTF::StringImpl *v477;
  int v478;
  WTF::StringImpl *v479;
  WTF::StringImpl *v480;
  WTF::StringImpl *v481;
  WTF::StringImpl *v482;
  int v483;
  WTF::StringImpl *v484;
  int v485;
  _BYTE buf[22];
  __int16 v487;
  int v488;
  __int16 v489;
  const char *v490;
  uint64_t v491;

  v491 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 67);
  if (v5)
  {
    v6 = *(_DWORD **)v5;
    if (*(_QWORD *)v5)
      *v6 += 2;
    v7 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *(_OWORD *)(v5 + 8);
    *((_QWORD *)a2 + 3) = *(_QWORD *)(v5 + 24);
    *(_OWORD *)((char *)a2 + 8) = v8;
    result = (WTF::StringImpl *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)buf, (_QWORD *)(v5 + 32));
    v11 = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = *(_QWORD *)buf;
    *(_QWORD *)buf = v11;
    if (v11)
    {
      v12 = *(unsigned int *)(v11 - 4);
      if ((_DWORD)v12)
      {
        v13 = (WebCore::IDBObjectStoreInfo *)(v11 + 8);
        do
        {
          if (*((_QWORD *)v13 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v13, v10);
          v13 = (WebCore::IDBObjectStoreInfo *)((char *)v13 + 72);
          --v12;
        }
        while (v12);
      }
      result = (WTF::StringImpl *)WTF::fastFree((WTF *)(v11 - 16), v10);
    }
    *(_WORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return result;
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)&v479, v15);
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)buf, v16);
  v18 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_DWORD *)(v19 + 16) = -1;
  *(_WORD *)(v19 + 20) = 0;
  *(_BYTE *)(v19 + 22) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  *(_BYTE *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_BYTE *)(v19 + 48) = 0;
  *(_DWORD *)(v19 + 52) = 1;
  *(_QWORD *)(v19 + 56) = 0;
  v20 = (uint64_t *)((char *)this + 552);
  v21 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = v19;
  if (v21)
  {
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v21);
    v23 = *(WTF **)(v21 + 56);
    *(_QWORD *)(v21 + 56) = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::fastFree(v23, v22);
      else
        --*(_DWORD *)v23;
    }
    v24 = *(unsigned int **)(v21 + 40);
    *(_QWORD *)(v21 + 40) = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::Thread::~Thread((WTF::Thread *)v24);
        WTF::fastFree(v312, v313);
      }
    }
    v27 = *(_QWORD *)(v21 + 24);
    *(_QWORD *)(v21 + 24) = 0;
    if (v27)
      WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v27, (WTF::StringImpl *)v22);
    if (atomic_load((unsigned int *)v21))
    {
      *(_OWORD *)(v21 + 32) = 0u;
      *(_OWORD *)(v21 + 48) = 0u;
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)(v21 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v21, v22);
    }
  }
  if ((WebCore::SQLiteDatabase::open(*v20, (WTF::FileSystemImpl *)&v479, 2u, 1) & 1) != 0)
    goto LABEL_52;
  v29 = qword_1ECE7C338;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C338, OS_LOG_TYPE_ERROR))
  {
    WTF::String::utf8();
    if (v484)
      v70 = (char *)v484 + 16;
    else
      v70 = 0;
    v71 = *v20;
    v72 = *(sqlite3 **)(*v20 + 8);
    if (v72)
    {
      v73 = sqlite3_errcode(v72);
      v71 = *v20;
      v74 = *(sqlite3 **)(*v20 + 8);
      if (v74)
      {
        v75 = sqlite3_errmsg(v74);
        goto LABEL_250;
      }
    }
    else
    {
      v73 = *(_DWORD *)(v71 + 52);
    }
    v155 = *(_QWORD *)(v71 + 56);
    if (v155)
      v75 = (const char *)(v155 + 16);
    else
      v75 = "database is not open";
LABEL_250:
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v70;
    v487 = 1024;
    v488 = v73;
    v489 = 2082;
    v490 = v75;
    _os_log_error_impl(&dword_1940B8000, v29, OS_LOG_TYPE_ERROR, "%p - SQLiteIDBBackingStore::getOrEstablishDatabaseInfo: Failed to open database at path '%{public}s' (%d) - %{public}s", buf, 0x26u);
    v157 = v484;
    v484 = 0;
    if (v157)
    {
      if (*(_DWORD *)v157 == 1)
        WTF::fastFree(v157, v156);
      else
        --*(_DWORD *)v157;
    }
  }
  for (i = 0; i != 56; ++i)
  {
    v31 = (char *)this + 8 * i;
    v32 = (sqlite3_stmt **)*((_QWORD *)v31 + 1);
    *((_QWORD *)v31 + 1) = 0;
    if (v32)
    {
      sqlite3_finalize(v32[1]);
      v34 = (unsigned int *)*v32;
      *v32 = 0;
      if (v34)
      {
        if (!atomic_load(v34))
          goto LABEL_923;
        do
          v36 = __ldaxr(v34);
        while (__stlxr(v36 - 1, v34));
      }
      WTF::fastFree((WTF *)v32, v33);
    }
  }
  if (!*v20)
  {
    *v20 = 0;
    goto LABEL_66;
  }
  WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
  v37 = *v20;
  *v20 = 0;
  if (!v37)
  {
LABEL_66:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a3 = 280;
    v58 = *(WTF::StringImpl **)buf;
    if (!*(_QWORD *)buf)
    {
      *(_QWORD *)(a3 + 8) = 0;
      goto LABEL_482;
    }
    v59 = **(_DWORD **)buf;
    **(_DWORD **)buf += 2;
    *(_QWORD *)(a3 + 8) = v58;
    *(_QWORD *)buf = 0;
    if (v59)
    {
      *(_DWORD *)v58 = v59;
      goto LABEL_482;
    }
    goto LABEL_847;
  }
  WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v37);
  v39 = *(WTF **)(v37 + 56);
  *(_QWORD *)(v37 + 56) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
      WTF::fastFree(v39, v38);
    else
      --*(_DWORD *)v39;
  }
  v40 = *(unsigned int **)(v37 + 40);
  *(_QWORD *)(v37 + 40) = 0;
  if (v40)
  {
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v40);
      WTF::Thread::~Thread((WTF::Thread *)v40);
      WTF::fastFree(v330, v331);
    }
  }
  v43 = *(_QWORD *)(v37 + 24);
  *(_QWORD *)(v37 + 24) = 0;
  if (v43)
    WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v43, (WTF::StringImpl *)v38);
  if (atomic_load((unsigned int *)v37))
  {
    *(_OWORD *)(v37 + 32) = 0u;
    *(_OWORD *)(v37 + 48) = 0u;
    *(_OWORD *)v37 = 0u;
    *(_OWORD *)(v37 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v37, v38);
  }
LABEL_52:
  if (!*v20)
    goto LABEL_66;
  sqlite3_wal_hook(*(sqlite3 **)(*v20 + 8), (int (__cdecl *)(void *, sqlite3 *, const char *, int))WebCore::walAutomaticTruncationHook, 0);
  v45 = *v20;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v484 = *(WTF::StringImpl **)buf;
  v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v46 = off_1E335AEA0;
  v47 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v47 = v46;
  v48 = *(sqlite3 **)(v45 + 8);
  WTF::String::utf8();
  if (*(_QWORD *)buf)
    v49 = (const char *)(*(_QWORD *)buf + 16);
  else
    v49 = 0;
  sqlite3_create_collation_v2(v48, v49, 1, v47, (int (__cdecl *)(void *, int, const void *, int, const void *))WebCore::callCollationFunction, (void (__cdecl *)(void *))WebCore::destroyCollationFunction);
  v51 = *(WTF **)buf;
  *(_QWORD *)buf = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
      WTF::fastFree(v51, v50);
    else
      --*(_DWORD *)v51;
  }
  v52 = v484;
  v484 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v50);
    else
      *(_DWORD *)v52 -= 2;
  }
  v53 = *v20;
  WebCore::SQLiteDatabase::tableSQL(*v20, "Records", 0x100000007, &v480);
  if (v480 && *((_DWORD *)v480 + 1))
  {
    if ((MEMORY[0x19AEA53F4]() & 1) == 0
      && (MEMORY[0x19AEA53F4](v480, "CREATE TABLE \"Records\" (objectStoreID INTEGER NOT NULL ON CONFLICT FAIL, key TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, value NOT NULL ON CONFLICT FAIL, recordID INTEGER PRIMARY KEY)", 186) & 1) == 0)
    {
      if ((_MergedGlobals_137 & 1) == 0)
      {
        *(_QWORD *)buf = "CREATE TABLE ";
        *(_DWORD *)&buf[8] = 13;
        v484 = (WTF::StringImpl *)"Records";
        v485 = 7;
        v482 = (WTF::StringImpl *)" (objectStoreID INTEGER NOT NULL ON CONFLICT FAIL, key TEXT COLLATE IDBKEY NOT NULL ON"
                                  " CONFLICT FAIL UNIQUE ON CONFLICT REPLACE, value NOT NULL ON CONFLICT FAIL)";
        v483 = 161;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(buf, (uint64_t)&v484, (uint64_t)&v482, &v481);
        v454 = v481;
        if (!v481)
        {
          __break(0xC471u);
          JUMPOUT(0x1953DF3C4);
        }
        v455 = *(_DWORD *)v481;
        *(_DWORD *)v481 += 2;
        qword_1ECE81EF8 = (uint64_t)v454;
        v481 = 0;
        if (v455)
          *(_DWORD *)v454 = v455;
        else
          WTF::StringImpl::destroy(v454, v453);
        _MergedGlobals_137 = 1;
      }
      if ((WTF::equal(v480, (const WTF::StringImpl *)qword_1ECE81EF8, v65) & 1) == 0)
      {
        if ((byte_1ECE81EF1 & 1) == 0)
        {
          *(_QWORD *)buf = "CREATE TABLE ";
          *(_DWORD *)&buf[8] = 13;
          v484 = (WTF::StringImpl *)"\"Records\"";
          v485 = 9;
          v482 = (WTF::StringImpl *)" (objectStoreID INTEGER NOT NULL ON CONFLICT FAIL, key TEXT COLLATE IDBKEY NOT NULL "
                                    "ON CONFLICT FAIL UNIQUE ON CONFLICT REPLACE, value NOT NULL ON CONFLICT FAIL)";
          v483 = 161;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(buf, (uint64_t)&v484, (uint64_t)&v482, &v481);
          v459 = v481;
          if (!v481)
          {
            __break(0xC471u);
            JUMPOUT(0x1953DF3CCLL);
          }
          v460 = *(_DWORD *)v481;
          *(_DWORD *)v481 += 2;
          qword_1ECE81F00 = (uint64_t)v459;
          v481 = 0;
          if (v460)
            *(_DWORD *)v459 = v460;
          else
            WTF::StringImpl::destroy(v459, v458);
          byte_1ECE81EF1 = 1;
        }
        if ((WTF::equal(v480, (const WTF::StringImpl *)qword_1ECE81F00, v66) & 1) == 0)
        {
          if ((byte_1ECE81EF2 & 1) == 0)
          {
            *(_QWORD *)buf = "CREATE TABLE ";
            *(_DWORD *)&buf[8] = 13;
            v484 = (WTF::StringImpl *)"Records";
            v485 = 7;
            v482 = (WTF::StringImpl *)" (objectStoreID INTEGER NOT NULL ON CONFLICT FAIL, key TEXT COLLATE IDBKEY NOT NUL"
                                      "L ON CONFLICT FAIL, value NOT NULL ON CONFLICT FAIL)";
            v483 = 134;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(buf, (uint64_t)&v484, (uint64_t)&v482, &v481);
            v465 = v481;
            if (!v481)
            {
              __break(0xC471u);
              JUMPOUT(0x1953DF3DCLL);
            }
            v466 = *(_DWORD *)v481;
            *(_DWORD *)v481 += 2;
            qword_1ECE81F08 = (uint64_t)v465;
            v481 = 0;
            if (v466)
              *(_DWORD *)v465 = v466;
            else
              WTF::StringImpl::destroy(v465, v464);
            byte_1ECE81EF2 = 1;
          }
          if ((WTF::equal(v480, (const WTF::StringImpl *)qword_1ECE81F08, v67) & 1) == 0)
          {
            if ((byte_1ECE81EF3 & 1) == 0)
            {
              *(_QWORD *)buf = "CREATE TABLE ";
              *(_DWORD *)&buf[8] = 13;
              v484 = (WTF::StringImpl *)"\"Records\"";
              v485 = 9;
              v482 = (WTF::StringImpl *)" (objectStoreID INTEGER NOT NULL ON CONFLICT FAIL, key TEXT COLLATE IDBKEY NOT N"
                                        "ULL ON CONFLICT FAIL, value NOT NULL ON CONFLICT FAIL)";
              v483 = 134;
              WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(buf, (uint64_t)&v484, (uint64_t)&v482, &v481);
              v471 = v481;
              if (!v481)
              {
                __break(0xC471u);
                JUMPOUT(0x1953DF3ECLL);
              }
              v472 = *(_DWORD *)v481;
              *(_DWORD *)v481 += 2;
              qword_1ECE81F10 = (uint64_t)v471;
              v481 = 0;
              if (v472)
                *(_DWORD *)v471 = v472;
              else
                WTF::StringImpl::destroy(v471, v470);
              byte_1ECE81EF3 = 1;
            }
            if ((WTF::equal(v480, (const WTF::StringImpl *)qword_1ECE81F10, v68) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1953DF238);
            }
          }
        }
      }
      *(_QWORD *)buf = v53;
      do
        v69 = __ldaxr((unsigned int *)v53);
      while (__stlxr(v69 + 1, (unsigned int *)v53));
      *(_WORD *)&buf[8] = 0;
      WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)buf);
      if ((WebCore::SQLiteDatabase::executeCommand(v53, "CREATE TABLE _Temp_Records (objectStoreID INTEGER NOT NULL ON CONFLICT FAIL, key TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, value NOT NULL ON CONFLICT FAIL, recordID INTEGER PRIMARY KEY)", 191) & 1) != 0)
      {
        if ((WebCore::SQLiteDatabase::executeCommand(v53, "INSERT INTO _Temp_Records (objectStoreID, key, value) SELECT objectStoreID, CAST(key AS TEXT), value FROM Records", 114) & 1) != 0)
        {
          if ((WebCore::SQLiteDatabase::executeCommand(v53, "DROP TABLE Records", 19) & 1) != 0)
          {
            if ((WebCore::SQLiteDatabase::executeCommand(v53, "ALTER TABLE _Temp_Records RENAME TO Records", 44) & 1) != 0)
            {
              WebCore::SQLiteTransaction::commit((uint64_t)buf);
              v55 = 0;
              v56 = 0;
              v57 = 0;
LABEL_617:
              WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)buf);
              goto LABEL_111;
            }
            v201 = *(sqlite3 **)(v53 + 8);
            if (v201)
            {
              v202 = sqlite3_errcode(v201);
              v203 = *(sqlite3 **)(v53 + 8);
              if (v203)
              {
                v204 = (char *)sqlite3_errmsg(v203);
                if (!v204)
                {
                  v205 = 0;
                  goto LABEL_613;
                }
LABEL_612:
                v205 = strlen(v204);
LABEL_613:
                WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v484, "Error renaming temporary Records table (", 41, v202, ") - ", 5, v204, v205);
                v56 = v484;
                if (!v484)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1953DF3B4);
                }
LABEL_614:
                v328 = *(_DWORD *)v56;
                *(_DWORD *)v56 += 2;
                if (v328)
                  *(_DWORD *)v56 = v328;
                else
                  WTF::StringImpl::destroy(v56, v207);
                v57 = 1;
                v55 = 280;
                goto LABEL_617;
              }
            }
            else
            {
              v202 = *(_DWORD *)(v53 + 52);
            }
            v327 = *(_QWORD *)(v53 + 56);
            if (v327)
              v204 = (char *)(v327 + 16);
            else
              v204 = "database is not open";
            goto LABEL_612;
          }
          v159 = *(sqlite3 **)(v53 + 8);
          if (v159)
          {
            v160 = sqlite3_errcode(v159);
            v161 = *(sqlite3 **)(v53 + 8);
            if (v161)
            {
              v162 = (char *)sqlite3_errmsg(v161);
              if (!v162)
              {
                v163 = 0;
                goto LABEL_577;
              }
LABEL_576:
              v163 = strlen(v162);
LABEL_577:
              WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v484, "Error dropping Records table (", 31, v160, ") - ", 5, v162, v163);
              v56 = v484;
              if (!v484)
              {
                __break(0xC471u);
                JUMPOUT(0x1953DE0BCLL);
              }
              goto LABEL_614;
            }
          }
          else
          {
            v160 = *(_DWORD *)(v53 + 52);
          }
          v314 = *(_QWORD *)(v53 + 56);
          if (v314)
            v162 = (char *)(v314 + 16);
          else
            v162 = "database is not open";
          goto LABEL_576;
        }
        v144 = *(sqlite3 **)(v53 + 8);
        if (v144)
        {
          v145 = sqlite3_errcode(v144);
          v146 = *(sqlite3 **)(v53 + 8);
          if (v146)
          {
            v147 = (char *)sqlite3_errmsg(v146);
            if (!v147)
            {
              v148 = 0;
              goto LABEL_537;
            }
LABEL_536:
            v148 = strlen(v147);
LABEL_537:
            WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v484, "Error migrating Records table (", 32, v145, ") - ", 5, v147, v148);
            v56 = v484;
            if (!v484)
            {
              __break(0xC471u);
              JUMPOUT(0x1953DDEA0);
            }
            goto LABEL_614;
          }
        }
        else
        {
          v145 = *(_DWORD *)(v53 + 52);
        }
        v294 = *(_QWORD *)(v53 + 56);
        if (v294)
          v147 = (char *)(v294 + 16);
        else
          v147 = "database is not open";
        goto LABEL_536;
      }
      v111 = *(sqlite3 **)(v53 + 8);
      if (v111)
      {
        v112 = sqlite3_errcode(v111);
        v113 = *(sqlite3 **)(v53 + 8);
        if (v113)
        {
          v114 = (char *)sqlite3_errmsg(v113);
          if (!v114)
          {
            v115 = 0;
            goto LABEL_340;
          }
LABEL_339:
          v115 = strlen(v114);
LABEL_340:
          WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v484, "Error creating temporary Records table (", 41, v112, ") - ", 5, v114, v115);
          v56 = v484;
          if (!v484)
          {
            __break(0xC471u);
            JUMPOUT(0x1953DD4DCLL);
          }
          goto LABEL_614;
        }
      }
      else
      {
        v112 = *(_DWORD *)(v53 + 52);
      }
      v206 = *(_QWORD *)(v53 + 56);
      if (v206)
        v114 = (char *)(v206 + 16);
      else
        v114 = "database is not open";
      goto LABEL_339;
    }
LABEL_64:
    v55 = 0;
    v56 = 0;
    v57 = 0;
    goto LABEL_111;
  }
  if ((WebCore::SQLiteDatabase::executeCommand(v53, "CREATE TABLE Records (objectStoreID INTEGER NOT NULL ON CONFLICT FAIL, key TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, value NOT NULL ON CONFLICT FAIL, recordID INTEGER PRIMARY KEY)", 185) & 1) != 0)goto LABEL_64;
  v60 = *(sqlite3 **)(v53 + 8);
  if (!v60)
  {
    v61 = *(_DWORD *)(v53 + 52);
LABEL_103:
    v76 = *(_QWORD *)(v53 + 56);
    if (v76)
      v63 = (char *)(v76 + 16);
    else
      v63 = "database is not open";
    goto LABEL_106;
  }
  v61 = sqlite3_errcode(v60);
  v62 = *(sqlite3 **)(v53 + 8);
  if (!v62)
    goto LABEL_103;
  v63 = (char *)sqlite3_errmsg(v62);
  if (v63)
  {
LABEL_106:
    v64 = strlen(v63);
    goto LABEL_107;
  }
  v64 = 0;
LABEL_107:
  WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(buf, "Error creating Records table (", 31, v61, ") - ", 5, v63, v64);
  v56 = *(WTF::StringImpl **)buf;
  if (!*(_QWORD *)buf)
  {
    __break(0xC471u);
    JUMPOUT(0x1953DF370);
  }
  v77 = **(_DWORD **)buf;
  **(_DWORD **)buf += 2;
  if (v77)
    *(_DWORD *)v56 = v77;
  else
    WTF::StringImpl::destroy(v56, v54);
  v57 = 1;
  v55 = 280;
LABEL_111:
  v78 = v480;
  v480 = 0;
  if (!v78)
    goto LABEL_114;
  if (*(_DWORD *)v78 != 2)
  {
    *(_DWORD *)v78 -= 2;
LABEL_114:
    if (v57)
      goto LABEL_116;
LABEL_115:
    if ((WebCore::SQLiteDatabase::executeCommand(*v20, "CREATE UNIQUE INDEX IF NOT EXISTS RecordsIndex ON Records (objectStoreID, key);",
            80) & 1) != 0)
      goto LABEL_116;
    v80 = *v20;
    v81 = *(sqlite3 **)(*v20 + 8);
    if (v81)
    {
      v82 = sqlite3_errcode(v81);
      v80 = *v20;
      v83 = *(sqlite3 **)(*v20 + 8);
      if (v83)
      {
        v84 = (char *)sqlite3_errmsg(v83);
        if (!v84)
        {
          v85 = 0;
LABEL_156:
          WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(buf, "Error creating RecordsIndex on Records table (", 47, v82, ") - ", 5, v84, v85);
          v79 = *(WTF::StringImpl **)buf;
          if (!*(_QWORD *)buf)
          {
LABEL_908:
            __break(0xC471u);
            JUMPOUT(0x1953DF384);
          }
          **(_DWORD **)buf += 2;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2)
              WTF::StringImpl::destroy(v56, v54);
            else
              *(_DWORD *)v56 -= 2;
          }
          if (*(_DWORD *)v79 == 2)
            WTF::StringImpl::destroy(v79, v54);
          else
            *(_DWORD *)v79 -= 2;
          LOWORD(v55) = 280;
LABEL_163:
          for (j = 0; j != 56; ++j)
          {
            v100 = (char *)this + 8 * j;
            v101 = (sqlite3_stmt **)*((_QWORD *)v100 + 1);
            *((_QWORD *)v100 + 1) = 0;
            if (v101)
            {
              sqlite3_finalize(v101[1]);
              v103 = (unsigned int *)*v101;
              *v101 = 0;
              if (v103)
              {
                if (!atomic_load(v103))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1953DD104);
                }
                do
                  v105 = __ldaxr(v103);
                while (__stlxr(v105 - 1, v103));
              }
              WTF::fastFree((WTF *)v101, v102);
            }
          }
          if (*v20)
          {
            WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
            v106 = *v20;
            *v20 = 0;
            if (v106)
            {
              WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v106);
              v107 = *(WTF **)(v106 + 56);
              *(_QWORD *)(v106 + 56) = 0;
              if (v107)
              {
                if (*(_DWORD *)v107 == 1)
                  WTF::fastFree(v107, v54);
                else
                  --*(_DWORD *)v107;
              }
              v108 = *(unsigned int **)(v106 + 40);
              *(_QWORD *)(v106 + 40) = 0;
              if (!v108)
                goto LABEL_216;
              do
              {
                v109 = __ldaxr(v108);
                v110 = --v109 == 0;
              }
              while (__stlxr(v109, v108));
              goto LABEL_214;
            }
LABEL_481:
            *(_WORD *)a3 = v55;
            *(_QWORD *)(a3 + 8) = v79;
            goto LABEL_482;
          }
LABEL_383:
          *v20 = 0;
          goto LABEL_481;
        }
LABEL_155:
        v85 = strlen(v84);
        goto LABEL_156;
      }
    }
    else
    {
      v82 = *(_DWORD *)(v80 + 52);
    }
    v98 = *(_QWORD *)(v80 + 56);
    if (v98)
      v84 = (char *)(v98 + 16);
    else
      v84 = "database is not open";
    goto LABEL_155;
  }
  WTF::StringImpl::destroy(v78, v54);
  if (!v57)
    goto LABEL_115;
LABEL_116:
  if (v55 >= 0x100)
  {
    v79 = v56;
    goto LABEL_163;
  }
  WebCore::SQLiteDatabase::tableSQL(*v20, "IndexRecords", 0x10000000CLL, &v480);
  if (v480 && *((_DWORD *)v480 + 1))
  {
    if ((MEMORY[0x19AEA53F4]() & 1) == 0
      && (MEMORY[0x19AEA53F4](v480, "CREATE TABLE \"IndexRecords\" (indexID INTEGER NOT NULL ON CONFLICT FAIL, objectStoreID INTEGER NOT NULL ON CONFLICT FAIL, key TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, value TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, objectStoreRecordID INTEGER NOT NULL ON CONFLICT FAIL)", 279) & 1) == 0)
    {
      if ((byte_1ECE81EF4 & 1) == 0)
      {
        *(_QWORD *)buf = "CREATE TABLE ";
        *(_DWORD *)&buf[8] = 13;
        v484 = (WTF::StringImpl *)"IndexRecords";
        v485 = 12;
        v482 = (WTF::StringImpl *)" (indexID INTEGER NOT NULL ON CONFLICT FAIL, objectStoreID INTEGER NOT NULL ON CONFLIC"
                                  "T FAIL, key TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, value NOT NULL ON CONFLICT FAIL)";
        v483 = 177;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(buf, (uint64_t)&v484, (uint64_t)&v482, &v481);
        v462 = v481;
        if (!v481)
        {
          __break(0xC471u);
          JUMPOUT(0x1953DF3D4);
        }
        v463 = *(_DWORD *)v481;
        *(_DWORD *)v481 += 2;
        qword_1ECE81F18 = (uint64_t)v462;
        v481 = 0;
        if (v463)
          *(_DWORD *)v462 = v463;
        else
          WTF::StringImpl::destroy(v462, v461);
        byte_1ECE81EF4 = 1;
      }
      if ((WTF::equal(v480, (const WTF::StringImpl *)qword_1ECE81F18, v92) & 1) == 0)
      {
        if ((byte_1ECE81EF5 & 1) == 0)
        {
          *(_QWORD *)buf = "CREATE TABLE ";
          *(_DWORD *)&buf[8] = 13;
          v484 = (WTF::StringImpl *)"\"IndexRecords\"";
          v485 = 14;
          v482 = (WTF::StringImpl *)" (indexID INTEGER NOT NULL ON CONFLICT FAIL, objectStoreID INTEGER NOT NULL ON CONFL"
                                    "ICT FAIL, key TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, value NOT NULL ON CONFLICT FAIL)";
          v483 = 177;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(buf, (uint64_t)&v484, (uint64_t)&v482, &v481);
          v468 = v481;
          if (!v481)
          {
            __break(0xC471u);
            JUMPOUT(0x1953DF3E4);
          }
          v469 = *(_DWORD *)v481;
          *(_DWORD *)v481 += 2;
          qword_1ECE81F20 = (uint64_t)v468;
          v481 = 0;
          if (v469)
            *(_DWORD *)v468 = v469;
          else
            WTF::StringImpl::destroy(v468, v467);
          byte_1ECE81EF5 = 1;
        }
        if ((WTF::equal(v480, (const WTF::StringImpl *)qword_1ECE81F20, v93) & 1) == 0)
        {
          if ((byte_1ECE81EF6 & 1) == 0)
          {
            *(_QWORD *)buf = "CREATE TABLE ";
            *(_DWORD *)&buf[8] = 13;
            v484 = (WTF::StringImpl *)"IndexRecords";
            v485 = 12;
            v482 = (WTF::StringImpl *)" (indexID INTEGER NOT NULL ON CONFLICT FAIL, objectStoreID INTEGER NOT NULL ON CON"
                                      "FLICT FAIL, key TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, value TEXT COLLATE "
                                      "IDBKEY NOT NULL ON CONFLICT FAIL)";
            v483 = 197;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(buf, (uint64_t)&v484, (uint64_t)&v482, &v481);
            v474 = v481;
            if (!v481)
            {
              __break(0xC471u);
              JUMPOUT(0x1953DF3F4);
            }
            v475 = *(_DWORD *)v481;
            *(_DWORD *)v481 += 2;
            qword_1ECE81F28 = (uint64_t)v474;
            v481 = 0;
            if (v475)
              *(_DWORD *)v474 = v475;
            else
              WTF::StringImpl::destroy(v474, v473);
            byte_1ECE81EF6 = 1;
          }
          if ((WTF::equal(v480, (const WTF::StringImpl *)qword_1ECE81F28, v94) & 1) == 0)
          {
            if ((byte_1ECE81EF7 & 1) == 0)
            {
              *(_QWORD *)buf = "CREATE TABLE ";
              *(_DWORD *)&buf[8] = 13;
              v484 = (WTF::StringImpl *)"\"IndexRecords\"";
              v485 = 14;
              v482 = (WTF::StringImpl *)" (indexID INTEGER NOT NULL ON CONFLICT FAIL, objectStoreID INTEGER NOT NULL ON C"
                                        "ONFLICT FAIL, key TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, value TEXT COLL"
                                        "ATE IDBKEY NOT NULL ON CONFLICT FAIL)";
              v483 = 197;
              WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(buf, (uint64_t)&v484, (uint64_t)&v482, &v481);
              v477 = v481;
              if (!v481)
              {
LABEL_923:
                __break(0xC471u);
                JUMPOUT(0x1953DCF8CLL);
              }
              v478 = *(_DWORD *)v481;
              *(_DWORD *)v481 += 2;
              qword_1ECE81F30 = (uint64_t)v477;
              v481 = 0;
              if (v478)
                *(_DWORD *)v477 = v478;
              else
                WTF::StringImpl::destroy(v477, v476);
              byte_1ECE81EF7 = 1;
            }
            if ((WTF::equal(v480, (const WTF::StringImpl *)qword_1ECE81F30, v95) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1953DEE98);
            }
          }
        }
      }
      v96 = (unsigned int *)*v20;
      *(_QWORD *)buf = *v20;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 + 1, v96));
      *(_WORD *)&buf[8] = 0;
      WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)buf);
      if ((WebCore::SQLiteDatabase::executeCommand(*v20, "CREATE TABLE _Temp_IndexRecords (indexID INTEGER NOT NULL ON CONFLICT FAIL, objectStoreID INTEGER NOT NULL ON CONFLICT FAIL, key TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, value TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, objectStoreRecordID INTEGER NOT NULL ON CONFLICT FAIL)", 284) & 1) != 0)
      {
        if ((WebCore::SQLiteDatabase::executeCommand(*v20, "INSERT INTO _Temp_IndexRecords SELECT IndexRecords.indexID, IndexRecords.objectStoreID, IndexRecords.key, IndexRecords.value, Records.rowid FROM IndexRecords INNER JOIN Records ON Records.key = IndexRecords.value AND Records.objectStoreID = IndexRecords.objectStoreID", 268) & 1) != 0)
        {
          if ((WebCore::SQLiteDatabase::executeCommand(*v20, "DROP TABLE IndexRecords", 24) & 1) != 0)
          {
            if ((WebCore::SQLiteDatabase::executeCommand(*v20, "ALTER TABLE _Temp_IndexRecords RENAME TO IndexRecords", 54) & 1) != 0)
            {
              WebCore::SQLiteTransaction::commit((uint64_t)buf);
              v79 = 0;
              v55 = 0;
LABEL_639:
              WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)buf);
              goto LABEL_191;
            }
            v304 = *v20;
            v305 = *(sqlite3 **)(*v20 + 8);
            if (v305)
            {
              v306 = sqlite3_errcode(v305);
              v304 = *v20;
              v307 = *(sqlite3 **)(*v20 + 8);
              if (v307)
              {
                v308 = (char *)sqlite3_errmsg(v307);
                if (!v308)
                {
                  v309 = 0;
                  goto LABEL_635;
                }
LABEL_634:
                v309 = strlen(v308);
LABEL_635:
                WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v484, "Error renaming temporary IndexRecords table (", 46, v306, ") - ", 5, v308, v309);
                v79 = v484;
                if (!v484)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1953DF3BCLL);
                }
LABEL_636:
                v335 = *(_DWORD *)v79;
                *(_DWORD *)v79 += 2;
                if (v335)
                  *(_DWORD *)v79 = v335;
                else
                  WTF::StringImpl::destroy(v79, v311);
                v55 = 280;
                goto LABEL_639;
              }
            }
            else
            {
              v306 = *(_DWORD *)(v304 + 52);
            }
            v334 = *(_QWORD *)(v304 + 56);
            if (v334)
              v308 = (char *)(v334 + 16);
            else
              v308 = "database is not open";
            goto LABEL_634;
          }
          v208 = *v20;
          v209 = *(sqlite3 **)(*v20 + 8);
          if (v209)
          {
            v210 = sqlite3_errcode(v209);
            v208 = *v20;
            v211 = *(sqlite3 **)(*v20 + 8);
            if (v211)
            {
              v212 = (char *)sqlite3_errmsg(v211);
              if (!v212)
              {
                v213 = 0;
                goto LABEL_624;
              }
LABEL_623:
              v213 = strlen(v212);
LABEL_624:
              WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v484, "Error dropping IndexRecords table (", 36, v210, ") - ", 5, v212, v213);
              v79 = v484;
              if (!v484)
              {
                __break(0xC471u);
                JUMPOUT(0x1953DE304);
              }
              goto LABEL_636;
            }
          }
          else
          {
            v210 = *(_DWORD *)(v208 + 52);
          }
          v329 = *(_QWORD *)(v208 + 56);
          if (v329)
            v212 = (char *)(v329 + 16);
          else
            v212 = "database is not open";
          goto LABEL_623;
        }
        v164 = *v20;
        v165 = *(sqlite3 **)(*v20 + 8);
        if (v165)
        {
          v166 = sqlite3_errcode(v165);
          v164 = *v20;
          v167 = *(sqlite3 **)(*v20 + 8);
          if (v167)
          {
            v168 = (char *)sqlite3_errmsg(v167);
            if (!v168)
            {
              v169 = 0;
              goto LABEL_605;
            }
LABEL_604:
            v169 = strlen(v168);
LABEL_605:
            WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v484, "Error migrating IndexRecords table (", 37, v166, ") - ", 5, v168, v169);
            v79 = v484;
            if (!v484)
            {
              __break(0xC471u);
              JUMPOUT(0x1953DE1F8);
            }
            goto LABEL_636;
          }
        }
        else
        {
          v166 = *(_DWORD *)(v164 + 52);
        }
        v326 = *(_QWORD *)(v164 + 56);
        if (v326)
          v168 = (char *)(v326 + 16);
        else
          v168 = "database is not open";
        goto LABEL_604;
      }
      v149 = *v20;
      v150 = *(sqlite3 **)(*v20 + 8);
      if (v150)
      {
        v151 = sqlite3_errcode(v150);
        v149 = *v20;
        v152 = *(sqlite3 **)(*v20 + 8);
        if (v152)
        {
          v153 = (char *)sqlite3_errmsg(v152);
          if (!v153)
          {
            v154 = 0;
            goto LABEL_564;
          }
LABEL_563:
          v154 = strlen(v153);
LABEL_564:
          WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v484, "Error creating temporary IndexRecords table (", 46, v151, ") - ", 5, v153, v154);
          v79 = v484;
          if (!v484)
          {
            __break(0xC471u);
            JUMPOUT(0x1953DDFECLL);
          }
          goto LABEL_636;
        }
      }
      else
      {
        v151 = *(_DWORD *)(v149 + 52);
      }
      v310 = *(_QWORD *)(v149 + 56);
      if (v310)
        v153 = (char *)(v310 + 16);
      else
        v153 = "database is not open";
      goto LABEL_563;
    }
LABEL_119:
    v79 = 0;
    v55 = 0;
    goto LABEL_191;
  }
  if ((WebCore::SQLiteDatabase::executeCommand(*v20, "CREATE TABLE IndexRecords (indexID INTEGER NOT NULL ON CONFLICT FAIL, objectStoreID INTEGER NOT NULL ON CONFLICT FAIL, key TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, value TEXT COLLATE IDBKEY NOT NULL ON CONFLICT FAIL, objectStoreRecordID INTEGER NOT NULL ON CONFLICT FAIL)", 278) & 1) != 0)goto LABEL_119;
  v86 = *v20;
  v87 = *(sqlite3 **)(*v20 + 8);
  if (!v87)
  {
    v88 = *(_DWORD *)(v86 + 52);
LABEL_183:
    v116 = *(_QWORD *)(v86 + 56);
    if (v116)
      v90 = (char *)(v116 + 16);
    else
      v90 = "database is not open";
    goto LABEL_186;
  }
  v88 = sqlite3_errcode(v87);
  v86 = *v20;
  v89 = *(sqlite3 **)(*v20 + 8);
  if (!v89)
    goto LABEL_183;
  v90 = (char *)sqlite3_errmsg(v89);
  if (v90)
  {
LABEL_186:
    v91 = strlen(v90);
    goto LABEL_187;
  }
  v91 = 0;
LABEL_187:
  WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(buf, "Error creating IndexRecords table (", 36, v88, ") - ", 5, v90, v91);
  v79 = *(WTF::StringImpl **)buf;
  if (!*(_QWORD *)buf)
  {
    __break(0xC471u);
    JUMPOUT(0x1953DF38CLL);
  }
  v117 = **(_DWORD **)buf;
  **(_DWORD **)buf += 2;
  if (v117)
    *(_DWORD *)v79 = v117;
  else
    WTF::StringImpl::destroy(v79, v54);
  v55 = 280;
LABEL_191:
  v118 = v480;
  v480 = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
    {
      WTF::StringImpl::destroy(v118, v54);
      if (!v56)
        goto LABEL_197;
      goto LABEL_195;
    }
    *(_DWORD *)v118 -= 2;
  }
  if (!v56)
    goto LABEL_197;
LABEL_195:
  if (*(_DWORD *)v56 == 2)
    WTF::StringImpl::destroy(v56, v54);
  else
    *(_DWORD *)v56 -= 2;
LABEL_197:
  if (v55 >= 0x100)
  {
    for (k = 0; k != 56; ++k)
    {
      v122 = (char *)this + 8 * k;
      v123 = (sqlite3_stmt **)*((_QWORD *)v122 + 1);
      *((_QWORD *)v122 + 1) = 0;
      if (v123)
      {
        sqlite3_finalize(v123[1]);
        v125 = (unsigned int *)*v123;
        *v123 = 0;
        if (v125)
        {
          if (!atomic_load(v125))
          {
            __break(0xC471u);
            JUMPOUT(0x1953DD530);
          }
          do
            v127 = __ldaxr(v125);
          while (__stlxr(v127 - 1, v125));
        }
        WTF::fastFree((WTF *)v123, v124);
      }
    }
    if (*v20)
    {
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
      v106 = *v20;
      *v20 = 0;
      if (v106)
      {
        WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v106);
        v128 = *(WTF **)(v106 + 56);
        *(_QWORD *)(v106 + 56) = 0;
        if (v128)
        {
          if (*(_DWORD *)v128 == 1)
            WTF::fastFree(v128, v54);
          else
            --*(_DWORD *)v128;
        }
        v108 = *(unsigned int **)(v106 + 40);
        *(_QWORD *)(v106 + 40) = 0;
        if (!v108)
          goto LABEL_216;
        do
        {
          v129 = __ldaxr(v108);
          v110 = --v129 == 0;
        }
        while (__stlxr(v129, v108));
        goto LABEL_214;
      }
      goto LABEL_481;
    }
    goto LABEL_383;
  }
  WebCore::SQLiteDatabase::indexSQL(*v20, "IndexRecordsIndex", 0x100000011, buf);
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)buf, "CREATE INDEX IndexRecordsIndex ON IndexRecords (indexID, key, value)", 68) & 1) != 0)goto LABEL_199;
  if ((WebCore::SQLiteDatabase::executeCommand(*v20, "DROP INDEX IF EXISTS IndexRecordsIndex", 39) & 1) == 0)
  {
    v138 = *v20;
    v139 = *(sqlite3 **)(*v20 + 8);
    if (v139)
    {
      v140 = sqlite3_errcode(v139);
      v138 = *v20;
      v141 = *(sqlite3 **)(*v20 + 8);
      if (v141)
      {
        v142 = (char *)sqlite3_errmsg(v141);
        if (!v142)
        {
          v143 = 0;
          goto LABEL_259;
        }
LABEL_258:
        v143 = strlen(v142);
LABEL_259:
        WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v484, "Error dropping IndexRecordsIndex index (", 41, v140, ") - ", 5, v142, v143);
        v119 = v484;
        if (!v484)
        {
          __break(0xC471u);
          JUMPOUT(0x1953DD0E4);
        }
        goto LABEL_277;
      }
    }
    else
    {
      v140 = *(_DWORD *)(v138 + 52);
    }
    v158 = *(_QWORD *)(v138 + 56);
    if (v158)
      v142 = (char *)(v158 + 16);
    else
      v142 = "database is not open";
    goto LABEL_258;
  }
  if ((WebCore::SQLiteDatabase::executeCommand(*v20, "CREATE INDEX IndexRecordsIndex ON IndexRecords (indexID, key, value)", 69) & 1) != 0)
  {
LABEL_199:
    v119 = 0;
    LOWORD(v55) = 0;
    v120 = 1;
    goto LABEL_280;
  }
  v132 = *v20;
  v133 = *(sqlite3 **)(*v20 + 8);
  if (!v133)
  {
    v134 = *(_DWORD *)(v132 + 52);
LABEL_272:
    v170 = *(_QWORD *)(v132 + 56);
    if (v170)
      v136 = (char *)(v170 + 16);
    else
      v136 = "database is not open";
    goto LABEL_275;
  }
  v134 = sqlite3_errcode(v133);
  v132 = *v20;
  v135 = *(sqlite3 **)(*v20 + 8);
  if (!v135)
    goto LABEL_272;
  v136 = (char *)sqlite3_errmsg(v135);
  if (!v136)
  {
    v137 = 0;
    goto LABEL_276;
  }
LABEL_275:
  v137 = strlen(v136);
LABEL_276:
  WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v484, "Error creating IndexRecordsIndex index (", 41, v134, ") - ", 5, v136, v137);
  v119 = v484;
  if (!v484)
  {
    __break(0xC471u);
    JUMPOUT(0x1953DF394);
  }
LABEL_277:
  v171 = *(_DWORD *)v119;
  *(_DWORD *)v119 += 2;
  if (v171)
    *(_DWORD *)v119 = v171;
  else
    WTF::StringImpl::destroy(v119, v54);
  v120 = 0;
  LOWORD(v55) = 280;
LABEL_280:
  v172 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
    {
      WTF::StringImpl::destroy(v172, v54);
      if (!v79)
        goto LABEL_286;
      goto LABEL_284;
    }
    *(_DWORD *)v172 -= 2;
  }
  if (!v79)
    goto LABEL_286;
LABEL_284:
  if (*(_DWORD *)v79 == 2)
    WTF::StringImpl::destroy(v79, v54);
  else
    *(_DWORD *)v79 -= 2;
LABEL_286:
  if ((v120 & 1) == 0)
  {
    for (m = 0; m != 56; ++m)
    {
      v175 = (char *)this + 8 * m;
      v176 = (sqlite3_stmt **)*((_QWORD *)v175 + 1);
      *((_QWORD *)v175 + 1) = 0;
      if (v176)
      {
        sqlite3_finalize(v176[1]);
        v178 = (unsigned int *)*v176;
        *v176 = 0;
        if (v178)
        {
          if (!atomic_load(v178))
          {
            __break(0xC471u);
            JUMPOUT(0x1953DE00CLL);
          }
          do
            v180 = __ldaxr(v178);
          while (__stlxr(v180 - 1, v178));
        }
        WTF::fastFree((WTF *)v176, v177);
      }
    }
    if (*v20)
    {
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
      v181 = *v20;
      *v20 = 0;
      if (v181)
      {
        WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v181);
        v182 = *(WTF **)(v181 + 56);
        *(_QWORD *)(v181 + 56) = 0;
        if (v182)
        {
          if (*(_DWORD *)v182 == 1)
            WTF::fastFree(v182, v54);
          else
            --*(_DWORD *)v182;
        }
        v183 = *(unsigned int **)(v181 + 40);
        *(_QWORD *)(v181 + 40) = 0;
        if (!v183)
          goto LABEL_305;
        do
        {
          v184 = __ldaxr(v183);
          v185 = --v184 == 0;
        }
        while (__stlxr(v184, v183));
        goto LABEL_303;
      }
LABEL_480:
      v79 = v119;
      goto LABEL_481;
    }
LABEL_479:
    *v20 = 0;
    goto LABEL_480;
  }
  WebCore::SQLiteDatabase::indexSQL(*v20, "IndexRecordsRecordIndex", 0x100000017, buf);
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)buf, "CREATE INDEX IndexRecordsRecordIndex ON IndexRecords (objectStoreID, objectStoreRecordID)", 89) & 1) != 0)goto LABEL_288;
  if ((WebCore::SQLiteDatabase::executeCommand(*v20, "DROP INDEX IF EXISTS IndexRecordsRecordIndex", 45) & 1) == 0)
  {
    v194 = *v20;
    v195 = *(sqlite3 **)(*v20 + 8);
    if (v195)
    {
      v196 = sqlite3_errcode(v195);
      v194 = *v20;
      v197 = *(sqlite3 **)(*v20 + 8);
      if (v197)
      {
        v198 = (char *)sqlite3_errmsg(v197);
        if (!v198)
        {
          v199 = 0;
          goto LABEL_329;
        }
LABEL_328:
        v199 = strlen(v198);
LABEL_329:
        WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v484, "Error dropping IndexRecordsRecordIndex index (", 47, v196, ") - ", 5, v198, v199);
        v79 = v484;
        if (!v484)
        {
          __break(0xC471u);
          JUMPOUT(0x1953DD450);
        }
        goto LABEL_353;
      }
    }
    else
    {
      v196 = *(_DWORD *)(v194 + 52);
    }
    v200 = *(_QWORD *)(v194 + 56);
    if (v200)
      v198 = (char *)(v200 + 16);
    else
      v198 = "database is not open";
    goto LABEL_328;
  }
  if ((WebCore::SQLiteDatabase::executeCommand(*v20, "CREATE INDEX IndexRecordsRecordIndex ON IndexRecords (objectStoreID, objectStoreRecordID)", 90) & 1) != 0)
  {
LABEL_288:
    v79 = 0;
    LOWORD(v55) = 0;
    v173 = 1;
    goto LABEL_356;
  }
  v188 = *v20;
  v189 = *(sqlite3 **)(*v20 + 8);
  if (!v189)
  {
    v190 = *(_DWORD *)(v188 + 52);
LABEL_348:
    v214 = *(_QWORD *)(v188 + 56);
    if (v214)
      v192 = (char *)(v214 + 16);
    else
      v192 = "database is not open";
    goto LABEL_351;
  }
  v190 = sqlite3_errcode(v189);
  v188 = *v20;
  v191 = *(sqlite3 **)(*v20 + 8);
  if (!v191)
    goto LABEL_348;
  v192 = (char *)sqlite3_errmsg(v191);
  if (!v192)
  {
    v193 = 0;
    goto LABEL_352;
  }
LABEL_351:
  v193 = strlen(v192);
LABEL_352:
  WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v484, "Error creating IndexRecordsRecordIndex index (", 47, v190, ") - ", 5, v192, v193);
  v79 = v484;
  if (!v484)
  {
    __break(0xC471u);
    JUMPOUT(0x1953DF3A4);
  }
LABEL_353:
  v215 = *(_DWORD *)v79;
  *(_DWORD *)v79 += 2;
  if (v215)
    *(_DWORD *)v79 = v215;
  else
    WTF::StringImpl::destroy(v79, v54);
  v173 = 0;
  LOWORD(v55) = 280;
LABEL_356:
  v216 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v216)
  {
    if (*(_DWORD *)v216 == 2)
    {
      WTF::StringImpl::destroy(v216, v54);
      if (!v119)
        goto LABEL_362;
      goto LABEL_360;
    }
    *(_DWORD *)v216 -= 2;
  }
  if (!v119)
    goto LABEL_362;
LABEL_360:
  if (*(_DWORD *)v119 == 2)
    WTF::StringImpl::destroy(v119, v54);
  else
    *(_DWORD *)v119 -= 2;
LABEL_362:
  if ((v173 & 1) == 0)
  {
    for (n = 0; n != 56; ++n)
    {
      v220 = (char *)this + 8 * n;
      v221 = (sqlite3_stmt **)*((_QWORD *)v220 + 1);
      *((_QWORD *)v220 + 1) = 0;
      if (v221)
      {
        sqlite3_finalize(v221[1]);
        v223 = (unsigned int *)*v221;
        *v221 = 0;
        if (v223)
        {
          if (!atomic_load(v223))
          {
            __break(0xC471u);
            JUMPOUT(0x1953DE218);
          }
          do
            v225 = __ldaxr(v223);
          while (__stlxr(v225 - 1, v223));
        }
        WTF::fastFree((WTF *)v221, v222);
      }
    }
    if (*v20)
    {
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
      v106 = *v20;
      *v20 = 0;
      if (v106)
      {
        WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v106);
        v226 = *(WTF **)(v106 + 56);
        *(_QWORD *)(v106 + 56) = 0;
        if (v226)
        {
          if (*(_DWORD *)v226 == 1)
            WTF::fastFree(v226, v54);
          else
            --*(_DWORD *)v226;
        }
        v108 = *(unsigned int **)(v106 + 40);
        *(_QWORD *)(v106 + 40) = 0;
        if (!v108)
          goto LABEL_216;
        do
        {
          v227 = __ldaxr(v108);
          v110 = --v227 == 0;
        }
        while (__stlxr(v227, v108));
LABEL_214:
        if (v110)
        {
          atomic_store(1u, v108);
          WTF::Thread::~Thread((WTF::Thread *)v108);
          WTF::fastFree(v332, v333);
        }
LABEL_216:
        v130 = *(_QWORD *)(v106 + 24);
        *(_QWORD *)(v106 + 24) = 0;
        if (v130)
          WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v130, v54);
        if (atomic_load((unsigned int *)v106))
        {
          *(_OWORD *)(v106 + 32) = 0u;
          *(_OWORD *)(v106 + 48) = 0u;
          *(_OWORD *)v106 = 0u;
          *(_OWORD *)(v106 + 16) = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v106, v54);
        }
        goto LABEL_481;
      }
      goto LABEL_481;
    }
    goto LABEL_383;
  }
  WebCore::SQLiteDatabase::tableSQL(*v20, "BlobRecords", 0x10000000BLL, &v484);
  if (v484 && *((_DWORD *)v484 + 1))
    goto LABEL_389;
  if ((WebCore::SQLiteDatabase::executeCommand(*v20, "CREATE TABLE BlobRecords (objectStoreRow INTEGER NOT NULL ON CONFLICT FAIL, blobURL TEXT NOT NULL ON CONFLICT FAIL)", 116) & 1) != 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v218 = v484;
    v484 = *(WTF::StringImpl **)buf;
    if (v218)
    {
      if (*(_DWORD *)v218 == 2)
        WTF::StringImpl::destroy(v218, v217);
      else
        *(_DWORD *)v218 -= 2;
    }
LABEL_389:
    if ((MEMORY[0x19AEA53F4]() & 1) == 0
      && (MEMORY[0x19AEA53F4](v484, "CREATE TABLE \"BlobRecords\" (objectStoreRow INTEGER NOT NULL ON CONFLICT FAIL, blobURL TEXT NOT NULL ON CONFLICT FAIL)", 117) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1953DEA14);
    }
    WebCore::SQLiteDatabase::tableSQL(*v20, "BlobFiles", 0x100000009, &v482);
    if (v482 && *((_DWORD *)v482 + 1))
      goto LABEL_401;
    if ((WebCore::SQLiteDatabase::executeCommand(*v20, "CREATE TABLE BlobFiles (blobURL TEXT NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL, fileName TEXT NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL)", 153) & 1) != 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v235 = v482;
      v482 = *(WTF::StringImpl **)buf;
      if (v235)
      {
        if (*(_DWORD *)v235 == 2)
          WTF::StringImpl::destroy(v235, v234);
        else
          *(_DWORD *)v235 -= 2;
      }
LABEL_401:
      if ((MEMORY[0x19AEA53F4]() & 1) == 0
        && (MEMORY[0x19AEA53F4](v482, "CREATE TABLE \"BlobFiles\" (blobURL TEXT NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL, fileName TEXT NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL)", 154) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1953DEA9CLL);
      }
      v119 = 0;
      v55 = 0;
LABEL_427:
      v246 = v482;
      v482 = 0;
      if (v246)
      {
        if (*(_DWORD *)v246 == 2)
          WTF::StringImpl::destroy(v246, v54);
        else
          *(_DWORD *)v246 -= 2;
      }
      goto LABEL_430;
    }
    v236 = *v20;
    v237 = *(sqlite3 **)(*v20 + 8);
    if (v237)
    {
      v238 = sqlite3_errcode(v237);
      v236 = *v20;
      v239 = *(sqlite3 **)(*v20 + 8);
      if (v239)
      {
        v240 = (char *)sqlite3_errmsg(v239);
        if (!v240)
        {
          v241 = 0;
LABEL_423:
          WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(buf, "Error creating BlobFiles table (", 33, v238, ") - ", 5, v240, v241);
          v119 = *(WTF::StringImpl **)buf;
          if (!*(_QWORD *)buf)
          {
            __break(0xC471u);
            JUMPOUT(0x1953DF3ACLL);
          }
          v245 = **(_DWORD **)buf;
          **(_DWORD **)buf += 2;
          if (v245)
            *(_DWORD *)v119 = v245;
          else
            WTF::StringImpl::destroy(v119, v54);
          v55 = 280;
          goto LABEL_427;
        }
LABEL_422:
        v241 = strlen(v240);
        goto LABEL_423;
      }
    }
    else
    {
      v238 = *(_DWORD *)(v236 + 52);
    }
    v244 = *(_QWORD *)(v236 + 56);
    if (v244)
      v240 = (char *)(v244 + 16);
    else
      v240 = "database is not open";
    goto LABEL_422;
  }
  v228 = *v20;
  v229 = *(sqlite3 **)(*v20 + 8);
  if (!v229)
  {
    v230 = *(_DWORD *)(v228 + 52);
LABEL_409:
    v242 = *(_QWORD *)(v228 + 56);
    if (v242)
      v232 = (char *)(v242 + 16);
    else
      v232 = "database is not open";
    goto LABEL_412;
  }
  v230 = sqlite3_errcode(v229);
  v228 = *v20;
  v231 = *(sqlite3 **)(*v20 + 8);
  if (!v231)
    goto LABEL_409;
  v232 = (char *)sqlite3_errmsg(v231);
  if (v232)
  {
LABEL_412:
    v233 = strlen(v232);
    goto LABEL_413;
  }
  v233 = 0;
LABEL_413:
  WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(buf, "Error creating BlobRecords table (", 35, v230, ") - ", 5, v232, v233);
  v119 = *(WTF::StringImpl **)buf;
  if (!*(_QWORD *)buf)
  {
    __break(0xC471u);
    JUMPOUT(0x1953DF39CLL);
  }
  v243 = **(_DWORD **)buf;
  **(_DWORD **)buf += 2;
  if (v243)
    *(_DWORD *)v119 = v243;
  else
    WTF::StringImpl::destroy(v119, v54);
  v55 = 280;
LABEL_430:
  v247 = v484;
  v484 = 0;
  if (v247)
  {
    if (*(_DWORD *)v247 == 2)
    {
      WTF::StringImpl::destroy(v247, v54);
      if (!v79)
        goto LABEL_436;
      goto LABEL_434;
    }
    *(_DWORD *)v247 -= 2;
  }
  if (!v79)
    goto LABEL_436;
LABEL_434:
  if (*(_DWORD *)v79 == 2)
    WTF::StringImpl::destroy(v79, v54);
  else
    *(_DWORD *)v79 -= 2;
LABEL_436:
  if (v55 >= 0x100)
  {
    for (ii = 0; ii != 56; ++ii)
    {
      v262 = (char *)this + 8 * ii;
      v263 = (sqlite3_stmt **)*((_QWORD *)v262 + 1);
      *((_QWORD *)v262 + 1) = 0;
      if (v263)
      {
        sqlite3_finalize(v263[1]);
        v265 = (unsigned int *)*v263;
        *v263 = 0;
        if (v265)
        {
          if (!atomic_load(v265))
          {
            __break(0xC471u);
            JUMPOUT(0x1953DE324);
          }
          do
            v267 = __ldaxr(v265);
          while (__stlxr(v267 - 1, v265));
        }
        WTF::fastFree((WTF *)v263, v264);
      }
    }
    if (*v20)
    {
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
      v181 = *v20;
      *v20 = 0;
      if (v181)
      {
        WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v181);
        v268 = *(WTF **)(v181 + 56);
        *(_QWORD *)(v181 + 56) = 0;
        if (v268)
        {
          if (*(_DWORD *)v268 == 1)
            WTF::fastFree(v268, v54);
          else
            --*(_DWORD *)v268;
        }
        v183 = *(unsigned int **)(v181 + 40);
        *(_QWORD *)(v181 + 40) = 0;
        if (!v183)
          goto LABEL_305;
        do
        {
          v269 = __ldaxr(v183);
          v185 = --v269 == 0;
        }
        while (__stlxr(v269, v183));
LABEL_303:
        if (v185)
        {
          atomic_store(1u, v183);
          WTF::Thread::~Thread((WTF::Thread *)v183);
          WTF::fastFree(v361, v362);
        }
LABEL_305:
        v186 = *(_QWORD *)(v181 + 24);
        *(_QWORD *)(v181 + 24) = 0;
        if (v186)
          WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v186, v54);
        if (atomic_load((unsigned int *)v181))
        {
          *(_OWORD *)(v181 + 32) = 0u;
          *(_OWORD *)(v181 + 48) = 0u;
          *(_OWORD *)v181 = 0u;
          *(_OWORD *)(v181 + 16) = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v181, v54);
        }
        goto LABEL_480;
      }
      goto LABEL_480;
    }
    goto LABEL_479;
  }
  WebCore::IDBServer::SQLiteIDBBackingStore::extractExistingDatabaseInfo((WebCore::IDBServer::SQLiteIDBBackingStore *)&v482, (uint64_t)this);
  v249 = v482;
  if (v482)
  {
LABEL_438:
    v482 = 0;
    v250 = (WTF::StringImpl **)*((_QWORD *)this + 67);
    *((_QWORD *)this + 67) = v249;
    if (v250)
    {
      v251 = v250[4];
      if (v251)
      {
        v252 = *((unsigned int *)v251 - 1);
        if ((_DWORD)v252)
        {
          v253 = (WTF::StringImpl *)((char *)v251 + 8);
          do
          {
            if (*((_QWORD *)v253 - 1) != -1)
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v253, v248);
            v253 = (WebCore::IDBObjectStoreInfo *)((char *)v253 + 72);
            --v252;
          }
          while (v252);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v251 - 16), v248);
      }
      v254 = *v250;
      *v250 = 0;
      if (v254)
      {
        if (*(_DWORD *)v254 == 2)
          WTF::StringImpl::destroy(v254, v248);
        else
          *(_DWORD *)v254 -= 2;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v250, v248);
      v249 = (WTF::StringImpl *)*((_QWORD *)this + 67);
    }
    v255 = *(_DWORD **)v249;
    if (*(_QWORD *)v249)
      *v255 += 2;
    v256 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v255;
    if (v256)
    {
      if (*(_DWORD *)v256 == 2)
        WTF::StringImpl::destroy(v256, v248);
      else
        *(_DWORD *)v256 -= 2;
    }
    v257 = *(_OWORD *)((char *)v249 + 8);
    *((_QWORD *)a2 + 3) = *((_QWORD *)v249 + 3);
    *(_OWORD *)((char *)a2 + 8) = v257;
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)buf, (_QWORD *)v249 + 4);
    v258 = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = *(_QWORD *)buf;
    *(_QWORD *)buf = v258;
    if (v258)
    {
      v259 = *(unsigned int *)(v258 - 4);
      if ((_DWORD)v259)
      {
        v260 = (WebCore::IDBObjectStoreInfo *)(v258 + 8);
        do
        {
          if (*((_QWORD *)v260 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v260, v54);
          v260 = (WebCore::IDBObjectStoreInfo *)((char *)v260 + 72);
          --v259;
        }
        while (v259);
      }
      WTF::fastFree((WTF *)(v258 - 16), v54);
    }
    *(_WORD *)a3 = 0;
    goto LABEL_463;
  }
  if ((WebCore::SQLiteDatabase::executeCommand(*v20, "CREATE TABLE IDBDatabaseInfo (key TEXT NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT REPLACE, value TEXT NOT NULL ON CONFLICT FAIL);",
          132) & 1) == 0)
  {
    for (jj = 0; jj != 56; ++jj)
    {
      v273 = (char *)this + 8 * jj;
      v274 = (sqlite3_stmt **)*((_QWORD *)v273 + 1);
      *((_QWORD *)v273 + 1) = 0;
      if (v274)
      {
        sqlite3_finalize(v274[1]);
        v276 = (unsigned int *)*v274;
        *v274 = 0;
        if (v276)
        {
          if (!atomic_load(v276))
          {
            __break(0xC471u);
            JUMPOUT(0x1953DE424);
          }
          do
            v278 = __ldaxr(v276);
          while (__stlxr(v278 - 1, v276));
        }
        WTF::fastFree((WTF *)v274, v275);
      }
    }
    if (*v20)
    {
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
      v279 = *v20;
      *v20 = 0;
      if (!v279)
        goto LABEL_807;
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v279);
      v281 = *(WTF **)(v279 + 56);
      *(_QWORD *)(v279 + 56) = 0;
      if (v281)
      {
        if (*(_DWORD *)v281 == 1)
          WTF::fastFree(v281, v280);
        else
          --*(_DWORD *)v281;
      }
      v282 = *(unsigned int **)(v279 + 40);
      *(_QWORD *)(v279 + 40) = 0;
      if (!v282)
        goto LABEL_596;
      do
      {
        v283 = __ldaxr(v282);
        v284 = --v283 == 0;
      }
      while (__stlxr(v283, v282));
      goto LABEL_594;
    }
LABEL_806:
    *v20 = 0;
    goto LABEL_807;
  }
  if ((WebCore::SQLiteDatabase::executeCommand(*v20, "CREATE TABLE ObjectStoreInfo (id INTEGER PRIMARY KEY NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL, name TEXT NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL, keyPath BLOB NOT NULL ON CONFLICT FAIL, autoInc INTEGER NOT NULL ON CONFLICT FAIL)", 248) & 1) == 0)
  {
    for (kk = 0; kk != 56; ++kk)
    {
      v286 = (char *)this + 8 * kk;
      v287 = (sqlite3_stmt **)*((_QWORD *)v286 + 1);
      *((_QWORD *)v286 + 1) = 0;
      if (v287)
      {
        sqlite3_finalize(v287[1]);
        v289 = (unsigned int *)*v287;
        *v287 = 0;
        if (v289)
        {
          if (!atomic_load(v289))
          {
            __break(0xC471u);
            JUMPOUT(0x1953DE654);
          }
          do
            v291 = __ldaxr(v289);
          while (__stlxr(v291 - 1, v289));
        }
        WTF::fastFree((WTF *)v287, v288);
      }
    }
    if (*v20)
    {
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
      v279 = *v20;
      *v20 = 0;
      if (!v279)
        goto LABEL_807;
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v279);
      v292 = *(WTF **)(v279 + 56);
      *(_QWORD *)(v279 + 56) = 0;
      if (v292)
      {
        if (*(_DWORD *)v292 == 1)
          WTF::fastFree(v292, v280);
        else
          --*(_DWORD *)v292;
      }
      v282 = *(unsigned int **)(v279 + 40);
      *(_QWORD *)(v279 + 40) = 0;
      if (!v282)
        goto LABEL_596;
      do
      {
        v293 = __ldaxr(v282);
        v284 = --v293 == 0;
      }
      while (__stlxr(v293, v282));
      goto LABEL_594;
    }
    goto LABEL_806;
  }
  if ((WebCore::SQLiteDatabase::executeCommand(*v20, "CREATE TABLE IndexInfo (id INTEGER NOT NULL ON CONFLICT FAIL, name TEXT NOT NULL ON CONFLICT FAIL, objectStoreID INTEGER NOT NULL ON CONFLICT FAIL, keyPath BLOB NOT NULL ON CONFLICT FAIL, isUnique INTEGER NOT NULL ON CONFLICT FAIL, multiEntry INTEGER NOT NULL ON CONFLICT FAIL)", 278) & 1) == 0)
  {
    for (mm = 0; mm != 56; ++mm)
    {
      v296 = (char *)this + 8 * mm;
      v297 = (sqlite3_stmt **)*((_QWORD *)v296 + 1);
      *((_QWORD *)v296 + 1) = 0;
      if (v297)
      {
        sqlite3_finalize(v297[1]);
        v299 = (unsigned int *)*v297;
        *v297 = 0;
        if (v299)
        {
          if (!atomic_load(v299))
          {
            __break(0xC471u);
            JUMPOUT(0x1953DE878);
          }
          do
            v301 = __ldaxr(v299);
          while (__stlxr(v301 - 1, v299));
        }
        WTF::fastFree((WTF *)v297, v298);
      }
    }
    if (*v20)
    {
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
      v279 = *v20;
      *v20 = 0;
      if (!v279)
        goto LABEL_807;
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v279);
      v302 = *(WTF **)(v279 + 56);
      *(_QWORD *)(v279 + 56) = 0;
      if (v302)
      {
        if (*(_DWORD *)v302 == 1)
          WTF::fastFree(v302, v280);
        else
          --*(_DWORD *)v302;
      }
      v282 = *(unsigned int **)(v279 + 40);
      *(_QWORD *)(v279 + 40) = 0;
      if (!v282)
        goto LABEL_596;
      do
      {
        v303 = __ldaxr(v282);
        v284 = --v303 == 0;
      }
      while (__stlxr(v303, v282));
      goto LABEL_594;
    }
    goto LABEL_806;
  }
  if ((WebCore::SQLiteDatabase::executeCommand(*v20, "CREATE TABLE KeyGenerators (objectStoreID INTEGER NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT REPLACE, currentKey INTEGER NOT NULL ON CONFLICT FAIL);",
          151) & 1) == 0)
  {
    for (nn = 0; nn != 56; ++nn)
    {
      v316 = (char *)this + 8 * nn;
      v317 = (sqlite3_stmt **)*((_QWORD *)v316 + 1);
      *((_QWORD *)v316 + 1) = 0;
      if (v317)
      {
        sqlite3_finalize(v317[1]);
        v319 = (unsigned int *)*v317;
        *v317 = 0;
        if (v319)
        {
          if (!atomic_load(v319))
          {
            __break(0xC471u);
            JUMPOUT(0x1953DEA34);
          }
          do
            v321 = __ldaxr(v319);
          while (__stlxr(v321 - 1, v319));
        }
        WTF::fastFree((WTF *)v317, v318);
      }
    }
    if (*v20)
    {
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
      v279 = *v20;
      *v20 = 0;
      if (!v279)
        goto LABEL_807;
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v279);
      v322 = *(WTF **)(v279 + 56);
      *(_QWORD *)(v279 + 56) = 0;
      if (v322)
      {
        if (*(_DWORD *)v322 == 1)
          WTF::fastFree(v322, v280);
        else
          --*(_DWORD *)v322;
      }
      v282 = *(unsigned int **)(v279 + 40);
      *(_QWORD *)(v279 + 40) = 0;
      if (!v282)
        goto LABEL_596;
      do
      {
        v323 = __ldaxr(v282);
        v284 = --v323 == 0;
      }
      while (__stlxr(v323, v282));
      goto LABEL_594;
    }
    goto LABEL_806;
  }
  WebCore::SQLiteDatabase::prepareStatement(*v20, "INSERT INTO IDBDatabaseInfo VALUES ('MetadataVersion', ?);",
    59,
    (uint64_t)buf);
  if (*(_DWORD *)&buf[16] || sqlite3_bind_int(*(sqlite3_stmt **)&buf[8], 1, 1))
    goto LABEL_656;
  if (*(_DWORD *)&buf[16])
    goto LABEL_907;
  v270 = (unsigned __int8 *)(*(_QWORD *)buf + 32);
  if (__ldaxr((unsigned __int8 *)(*(_QWORD *)buf + 32)))
  {
    __clrex();
LABEL_645:
    MEMORY[0x19AEA534C](v270);
    goto LABEL_646;
  }
  if (__stxr(1u, v270))
    goto LABEL_645;
LABEL_646:
  if (*(_BYTE *)(*(_QWORD *)buf + 20)
    || (v336 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(*(sqlite3_stmt **)&buf[8]), (_DWORD)v336))
  {
    v337 = sqlite3_step(*(sqlite3_stmt **)&buf[8]);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v336);
    v409 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(*(sqlite3_stmt **)&buf[8]);
    v337 = (int)v409;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v409);
  }
  v338 = __ldxr(v270);
  if (v338 != 1)
  {
    __clrex();
    goto LABEL_653;
  }
  if (__stlxr(0, v270))
LABEL_653:
    WTF::Lock::unlockSlow((WTF::Lock *)v270);
  if (v337 == 101)
  {
    v339 = 1;
    goto LABEL_678;
  }
LABEL_656:
  for (i1 = 0; i1 != 56; ++i1)
  {
    v341 = (char *)this + 8 * i1;
    v342 = (sqlite3_stmt **)*((_QWORD *)v341 + 1);
    *((_QWORD *)v341 + 1) = 0;
    if (v342)
    {
      sqlite3_finalize(v342[1]);
      v344 = (unsigned int *)*v342;
      *v342 = 0;
      if (v344)
      {
        if (!atomic_load(v344))
        {
          __break(0xC471u);
          JUMPOUT(0x1953DEA58);
        }
        do
          v346 = __ldaxr(v344);
        while (__stlxr(v346 - 1, v344));
      }
      WTF::fastFree((WTF *)v342, v343);
    }
  }
  if (*v20)
  {
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
    v347 = *v20;
    *v20 = 0;
    if (!v347)
    {
LABEL_676:
      v339 = 0;
      goto LABEL_678;
    }
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v347);
    v349 = *(WTF **)(v347 + 56);
    *(_QWORD *)(v347 + 56) = 0;
    if (v349)
    {
      if (*(_DWORD *)v349 == 1)
        WTF::fastFree(v349, v348);
      else
        --*(_DWORD *)v349;
    }
    v350 = *(unsigned int **)(v347 + 40);
    *(_QWORD *)(v347 + 40) = 0;
    if (v350)
    {
      do
      {
        v351 = __ldaxr(v350);
        v352 = v351 - 1;
      }
      while (__stlxr(v352, v350));
      if (!v352)
      {
        atomic_store(1u, v350);
        WTF::Thread::~Thread((WTF::Thread *)v350);
        WTF::fastFree(v449, v450);
      }
    }
    v353 = *(_QWORD *)(v347 + 24);
    *(_QWORD *)(v347 + 24) = 0;
    if (v353)
      WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v353, (WTF::StringImpl *)v348);
    if (!atomic_load((unsigned int *)v347))
    {
      WTF::fastFree((WTF *)v347, v348);
      goto LABEL_676;
    }
    v339 = 0;
    *(_OWORD *)(v347 + 32) = 0u;
    *(_OWORD *)(v347 + 48) = 0u;
    *(_OWORD *)v347 = 0u;
    *(_OWORD *)(v347 + 16) = 0u;
  }
  else
  {
    v339 = 0;
    *v20 = 0;
  }
LABEL_678:
  if (*(_DWORD *)&buf[16] != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E335AC78[*(unsigned int *)&buf[16]])(&v484, buf);
  if (!v339)
    goto LABEL_807;
  WebCore::SQLiteDatabase::prepareStatement(*v20, "INSERT INTO IDBDatabaseInfo VALUES ('DatabaseName', ?);",
    56,
    (uint64_t)buf);
  if (*(_DWORD *)&buf[16])
    goto LABEL_704;
  v355 = *((_QWORD *)this + 57);
  if (v355)
  {
    v356 = *(unsigned int *)(v355 + 16);
    v357 = *(char **)(v355 + 8);
    LODWORD(v355) = *(_DWORD *)(v355 + 4);
    v358 = (v356 >> 2) & 1;
  }
  else
  {
    v357 = 0;
    v358 = 1;
  }
  if (WebCore::SQLiteStatement::bindText((uint64_t)buf, 1, v357, v355 | (unint64_t)(v358 << 32)))goto LABEL_704;
  if (*(_DWORD *)&buf[16])
  {
LABEL_907:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_908;
  }
  v359 = (unsigned __int8 *)(*(_QWORD *)buf + 32);
  if (__ldaxr((unsigned __int8 *)(*(_QWORD *)buf + 32)))
  {
    __clrex();
LABEL_693:
    MEMORY[0x19AEA534C](v359);
    goto LABEL_694;
  }
  if (__stxr(1u, v359))
    goto LABEL_693;
LABEL_694:
  if (*(_BYTE *)(*(_QWORD *)buf + 20)
    || (v363 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(*(sqlite3_stmt **)&buf[8]), (_DWORD)v363))
  {
    v364 = sqlite3_step(*(sqlite3_stmt **)&buf[8]);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v363);
    v443 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(*(sqlite3_stmt **)&buf[8]);
    v364 = (int)v443;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v443);
  }
  v365 = __ldxr(v359);
  if (v365 != 1)
  {
    __clrex();
    goto LABEL_701;
  }
  if (__stlxr(0, v359))
LABEL_701:
    WTF::Lock::unlockSlow((WTF::Lock *)v359);
  if (v364 == 101)
  {
    v366 = 1;
    goto LABEL_726;
  }
LABEL_704:
  for (i2 = 0; i2 != 56; ++i2)
  {
    v368 = (char *)this + 8 * i2;
    v369 = (sqlite3_stmt **)*((_QWORD *)v368 + 1);
    *((_QWORD *)v368 + 1) = 0;
    if (v369)
    {
      sqlite3_finalize(v369[1]);
      v371 = (unsigned int *)*v369;
      *v369 = 0;
      if (v371)
      {
        if (!atomic_load(v371))
        {
          __break(0xC471u);
          JUMPOUT(0x1953DEDD8);
        }
        do
          v373 = __ldaxr(v371);
        while (__stlxr(v373 - 1, v371));
      }
      WTF::fastFree((WTF *)v369, v370);
    }
  }
  if (*v20)
  {
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
    v374 = *v20;
    *v20 = 0;
    if (!v374)
    {
LABEL_724:
      v366 = 0;
      goto LABEL_726;
    }
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v374);
    v376 = *(WTF **)(v374 + 56);
    *(_QWORD *)(v374 + 56) = 0;
    if (v376)
    {
      if (*(_DWORD *)v376 == 1)
        WTF::fastFree(v376, v375);
      else
        --*(_DWORD *)v376;
    }
    v377 = *(unsigned int **)(v374 + 40);
    *(_QWORD *)(v374 + 40) = 0;
    if (v377)
    {
      do
      {
        v378 = __ldaxr(v377);
        v379 = v378 - 1;
      }
      while (__stlxr(v379, v377));
      if (!v379)
      {
        atomic_store(1u, v377);
        WTF::Thread::~Thread((WTF::Thread *)v377);
        WTF::fastFree(v451, v452);
      }
    }
    v380 = *(_QWORD *)(v374 + 24);
    *(_QWORD *)(v374 + 24) = 0;
    if (v380)
      WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v380, (WTF::StringImpl *)v375);
    if (!atomic_load((unsigned int *)v374))
    {
      WTF::fastFree((WTF *)v374, v375);
      goto LABEL_724;
    }
    v366 = 0;
    *(_OWORD *)(v374 + 32) = 0u;
    *(_OWORD *)(v374 + 48) = 0u;
    *(_OWORD *)v374 = 0u;
    *(_OWORD *)(v374 + 16) = 0u;
  }
  else
  {
    v366 = 0;
    *v20 = 0;
  }
LABEL_726:
  if (*(_DWORD *)&buf[16] != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E335AC78[*(unsigned int *)&buf[16]])(&v484, buf);
  if (!v366)
    goto LABEL_807;
  WebCore::SQLiteDatabase::prepareStatement(*v20, "INSERT INTO IDBDatabaseInfo VALUES ('DatabaseVersion', ?);",
    59,
    (uint64_t)buf);
  if (!*(_DWORD *)&buf[16])
  {
    WTF::String::number(0);
    v382 = v484;
    if (v484)
    {
      v383 = (char *)*((_QWORD *)v484 + 1);
      v382 = *((_DWORD *)v484 + 1);
      v384 = ((unint64_t)*((unsigned int *)v484 + 4) >> 2) & 1;
    }
    else
    {
      v383 = 0;
      v384 = 1;
    }
    v385 = 1;
    if (WebCore::SQLiteStatement::bindText((uint64_t)buf, 1, v383, v382 | (v384 << 32)))
    {
LABEL_750:
      v392 = v484;
      v484 = 0;
      if (v392)
      {
        if (*(_DWORD *)v392 == 2)
        {
          WTF::StringImpl::destroy(v392, v386);
          if (v385)
            goto LABEL_754;
          goto LABEL_783;
        }
        *(_DWORD *)v392 -= 2;
      }
      if (v385)
        goto LABEL_754;
LABEL_783:
      v408 = 1;
      goto LABEL_784;
    }
    if (!*(_DWORD *)&buf[16])
    {
      v387 = (unsigned __int8 *)(*(_QWORD *)buf + 32);
      if (__ldaxr((unsigned __int8 *)(*(_QWORD *)buf + 32)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v387))
      {
LABEL_741:
        if (*(_BYTE *)(*(_QWORD *)buf + 20)
          || (v389 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(*(sqlite3_stmt **)&buf[8]), (_DWORD)v389))
        {
          v390 = sqlite3_step(*(sqlite3_stmt **)&buf[8]);
        }
        else
        {
          WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v389);
          v448 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(*(sqlite3_stmt **)&buf[8]);
          v390 = (int)v448;
          WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v448);
        }
        v391 = __ldxr(v387);
        if (v391 == 1)
        {
          if (!__stlxr(0, v387))
            goto LABEL_749;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v387);
LABEL_749:
        v385 = v390 != 101;
        goto LABEL_750;
      }
      MEMORY[0x19AEA534C](v387);
      goto LABEL_741;
    }
    goto LABEL_907;
  }
LABEL_754:
  for (i3 = 0; i3 != 56; ++i3)
  {
    v394 = (char *)this + 8 * i3;
    v395 = (sqlite3_stmt **)*((_QWORD *)v394 + 1);
    *((_QWORD *)v394 + 1) = 0;
    if (v395)
    {
      sqlite3_finalize(v395[1]);
      v397 = (unsigned int *)*v395;
      *v395 = 0;
      if (v397)
      {
        if (!atomic_load(v397))
        {
          __break(0xC471u);
          JUMPOUT(0x1953DEE78);
        }
        do
          v399 = __ldaxr(v397);
        while (__stlxr(v399 - 1, v397));
      }
      WTF::fastFree((WTF *)v395, v396);
    }
  }
  if (*v20)
  {
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
    v400 = *v20;
    *v20 = 0;
    if (!v400)
    {
LABEL_774:
      v408 = 0;
      goto LABEL_784;
    }
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v400);
    v402 = *(WTF **)(v400 + 56);
    *(_QWORD *)(v400 + 56) = 0;
    if (v402)
    {
      if (*(_DWORD *)v402 == 1)
        WTF::fastFree(v402, v401);
      else
        --*(_DWORD *)v402;
    }
    v403 = *(unsigned int **)(v400 + 40);
    *(_QWORD *)(v400 + 40) = 0;
    if (v403)
    {
      do
      {
        v404 = __ldaxr(v403);
        v405 = v404 - 1;
      }
      while (__stlxr(v405, v403));
      if (!v405)
      {
        atomic_store(1u, v403);
        WTF::Thread::~Thread((WTF::Thread *)v403);
        WTF::fastFree(v456, v457);
      }
    }
    v406 = *(_QWORD *)(v400 + 24);
    *(_QWORD *)(v400 + 24) = 0;
    if (v406)
      WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v406, (WTF::StringImpl *)v401);
    if (!atomic_load((unsigned int *)v400))
    {
      WTF::fastFree((WTF *)v400, v401);
      goto LABEL_774;
    }
    v408 = 0;
    *(_OWORD *)(v400 + 32) = 0u;
    *(_OWORD *)(v400 + 48) = 0u;
    *(_OWORD *)v400 = 0u;
    *(_OWORD *)(v400 + 16) = 0u;
  }
  else
  {
    v408 = 0;
    *v20 = 0;
  }
LABEL_784:
  if (*(_DWORD *)&buf[16] != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E335AC78[*(unsigned int *)&buf[16]])(&v484, buf);
  if (v408)
  {
    if ((WebCore::SQLiteDatabase::executeCommand(*v20, "INSERT INTO IDBDatabaseInfo VALUES ('MaxObjectStoreID', 1);",
            60) & 1) != 0)
    {
      v410 = bmalloc::api::isoAllocate();
      v249 = (WTF::StringImpl *)v410;
      v411 = (_DWORD *)*((_QWORD *)this + 57);
      if (v411)
        *v411 += 2;
      *(_QWORD *)v410 = v411;
      *(_OWORD *)(v410 + 8) = 0u;
      *(_OWORD *)(v410 + 24) = 0u;
      goto LABEL_438;
    }
    for (i4 = 0; i4 != 56; ++i4)
    {
      v413 = (char *)this + 8 * i4;
      v414 = (sqlite3_stmt **)*((_QWORD *)v413 + 1);
      *((_QWORD *)v413 + 1) = 0;
      if (v414)
      {
        sqlite3_finalize(v414[1]);
        v416 = (unsigned int *)*v414;
        *v414 = 0;
        if (v416)
        {
          if (!atomic_load(v416))
          {
            __break(0xC471u);
            JUMPOUT(0x1953DEEB8);
          }
          do
            v418 = __ldaxr(v416);
          while (__stlxr(v418 - 1, v416));
        }
        WTF::fastFree((WTF *)v414, v415);
      }
    }
    if (*v20)
    {
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
      v279 = *v20;
      *v20 = 0;
      if (!v279)
        goto LABEL_807;
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v279);
      v419 = *(WTF **)(v279 + 56);
      *(_QWORD *)(v279 + 56) = 0;
      if (v419)
      {
        if (*(_DWORD *)v419 == 1)
          WTF::fastFree(v419, v280);
        else
          --*(_DWORD *)v419;
      }
      v282 = *(unsigned int **)(v279 + 40);
      *(_QWORD *)(v279 + 40) = 0;
      if (!v282)
        goto LABEL_596;
      do
      {
        v420 = __ldaxr(v282);
        v284 = --v420 == 0;
      }
      while (__stlxr(v420, v282));
LABEL_594:
      if (v284)
      {
        atomic_store(1u, v282);
        WTF::Thread::~Thread((WTF::Thread *)v282);
        WTF::fastFree(v446, v447);
      }
LABEL_596:
      v324 = *(_QWORD *)(v279 + 24);
      *(_QWORD *)(v279 + 24) = 0;
      if (v324)
        WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v324, (WTF::StringImpl *)v280);
      if (atomic_load((unsigned int *)v279))
      {
        *(_OWORD *)(v279 + 32) = 0u;
        *(_OWORD *)(v279 + 48) = 0u;
        *(_OWORD *)v279 = 0u;
        *(_OWORD *)(v279 + 16) = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v279, v280);
      }
      goto LABEL_807;
    }
    goto LABEL_806;
  }
LABEL_807:
  v421 = 0;
  v482 = 0;
  do
  {
    v422 = (char *)this + 8 * v421;
    v423 = (sqlite3_stmt **)*((_QWORD *)v422 + 1);
    *((_QWORD *)v422 + 1) = 0;
    if (v423)
    {
      sqlite3_finalize(v423[1]);
      v425 = (unsigned int *)*v423;
      *v423 = 0;
      if (v425)
      {
        if (!atomic_load(v425))
        {
          __break(0xC471u);
          JUMPOUT(0x1953DEDB0);
        }
        do
          v427 = __ldaxr(v425);
        while (__stlxr(v427 - 1, v425));
      }
      WTF::fastFree((WTF *)v423, v424);
    }
    ++v421;
  }
  while (v421 != 56);
  if (*v20)
  {
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)*v20);
    v428 = *v20;
    *v20 = 0;
    if (v428)
    {
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v428);
      v430 = *(WTF **)(v428 + 56);
      *(_QWORD *)(v428 + 56) = 0;
      if (v430)
      {
        if (*(_DWORD *)v430 == 1)
          WTF::fastFree(v430, v429);
        else
          --*(_DWORD *)v430;
      }
      v431 = *(unsigned int **)(v428 + 40);
      *(_QWORD *)(v428 + 40) = 0;
      if (v431)
      {
        do
        {
          v432 = __ldaxr(v431);
          v433 = v432 - 1;
        }
        while (__stlxr(v433, v431));
        if (!v433)
        {
          atomic_store(1u, v431);
          WTF::Thread::~Thread((WTF::Thread *)v431);
          WTF::fastFree(v444, v445);
        }
      }
      v434 = *(_QWORD *)(v428 + 24);
      *(_QWORD *)(v428 + 24) = 0;
      if (v434)
        WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v434, (WTF::StringImpl *)v429);
      if (atomic_load((unsigned int *)v428))
      {
        *(_OWORD *)(v428 + 32) = 0u;
        *(_OWORD *)(v428 + 48) = 0u;
        *(_OWORD *)v428 = 0u;
        *(_OWORD *)(v428 + 16) = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v428, v429);
      }
    }
  }
  else
  {
    *v20 = 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a3 = 280;
  v436 = *(WTF::StringImpl **)buf;
  if (*(_QWORD *)buf)
  {
    v437 = **(_DWORD **)buf;
    **(_DWORD **)buf += 2;
    *(_QWORD *)(a3 + 8) = v436;
    *(_QWORD *)buf = 0;
    if (v437)
      *(_DWORD *)v436 = v437;
    else
      WTF::StringImpl::destroy(v436, v54);
    goto LABEL_831;
  }
LABEL_463:
  *(_QWORD *)(a3 + 8) = 0;
LABEL_831:
  v438 = v482;
  if (v482)
  {
    v439 = *((_QWORD *)v482 + 4);
    if (v439)
    {
      v440 = *(unsigned int *)(v439 - 4);
      if ((_DWORD)v440)
      {
        v441 = (WebCore::IDBObjectStoreInfo *)(v439 + 8);
        do
        {
          if (*((_QWORD *)v441 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v441, v54);
          v441 = (WebCore::IDBObjectStoreInfo *)((char *)v441 + 72);
          --v440;
        }
        while (v440);
      }
      WTF::fastFree((WTF *)(v439 - 16), v54);
    }
    v442 = *(WTF::StringImpl **)v438;
    *(_QWORD *)v438 = 0;
    if (v442)
    {
      if (*(_DWORD *)v442 == 2)
        WTF::StringImpl::destroy(v442, v54);
      else
        *(_DWORD *)v442 -= 2;
    }
    bmalloc::api::isoDeallocate(v438, v54);
  }
  if (!v119)
    goto LABEL_482;
  if (*(_DWORD *)v119 != 2)
  {
    *(_DWORD *)v119 -= 2;
    goto LABEL_482;
  }
  v58 = v119;
LABEL_847:
  WTF::StringImpl::destroy(v58, v54);
LABEL_482:
  result = v479;
  v479 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v54);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::databaseVersion(WebCore::IDBServer::SQLiteIDBBackingStore *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7[2];
  char v8;
  WTF::StringImpl *v9;

  v1 = *((_QWORD *)this + 67);
  if (v1)
    return *(WTF::StringImpl **)(v1 + 8);
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v9, v3)
    && (WebCore::IDBServer::SQLiteIDBBackingStore::databaseNameAndVersionFromFile((WebCore::IDBServer::SQLiteIDBBackingStore *)&v9, (uint64_t)v7), v8))
  {
    v2 = v7[1];
    if (v7[0])
    {
      if (*(_DWORD *)v7[0] == 2)
        WTF::StringImpl::destroy(v7[0], v4);
      else
        *(_DWORD *)v7[0] -= 2;
    }
  }
  else
  {
    v2 = 0;
  }
  v5 = v9;
  v9 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v2;
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::databasesSizeForDirectory(WebCore::IDBServer::SQLiteIDBBackingStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  const WTF::String *v6;
  WTF *v7;
  uint64_t v8;
  const WTF::String *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v18;
  WTF *v19;
  int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF *v23;
  int v24;
  unsigned int v25;

  WTF::FileSystemImpl::listDirectory(this, a2);
  v3 = v23;
  if (!v25)
  {
    v4 = 0;
LABEL_40:
    if (v3)
      goto LABEL_43;
    return v4;
  }
  v4 = 0;
  v5 = (WTF *)((char *)v23 + 8 * v25);
  do
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)&v22, v6);
    v7 = v19;
    if (!v21)
      goto LABEL_15;
    v8 = 8 * v21;
    do
    {
      if (*(_QWORD *)v7 && WTF::StringImpl::endsWith())
      {
        WTF::FileSystemImpl::pathByAppendingComponent();
        v10 = WebCore::SQLiteFileSystem::databaseFileSize((WebCore::SQLiteFileSystem *)&v18, v9);
        v11 = v18;
        v18 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v2);
          else
            *(_DWORD *)v11 -= 2;
        }
        v4 += v10;
      }
      v7 = (WTF *)((char *)v7 + 8);
      v8 -= 8;
    }
    while (v8);
    v7 = v19;
    if (!v21)
    {
LABEL_15:
      if (!v7)
        goto LABEL_16;
LABEL_30:
      v19 = 0;
      v20 = 0;
      WTF::fastFree(v7, v2);
      goto LABEL_16;
    }
    v13 = 8 * v21;
    do
    {
      v14 = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v7 = (WTF *)((char *)v7 + 8);
      v13 -= 8;
    }
    while (v13);
    v7 = v19;
    if (v19)
      goto LABEL_30;
LABEL_16:
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v2);
      else
        *(_DWORD *)v12 -= 2;
    }
    v3 = (WTF *)((char *)v3 + 8);
  }
  while (v3 != v5);
  v3 = v23;
  if (!v25)
    goto LABEL_40;
  v15 = 8 * v25;
  do
  {
    v16 = *(WTF::StringImpl **)v3;
    *(_QWORD *)v3 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v2);
      else
        *(_DWORD *)v16 -= 2;
    }
    v3 = (WTF *)((char *)v3 + 8);
    v15 -= 8;
  }
  while (v15);
  v3 = v23;
  if (v23)
  {
LABEL_43:
    v23 = 0;
    v24 = 0;
    WTF::fastFree(v3, v2);
  }
  return v4;
}

void WebCore::IDBServer::SQLiteIDBBackingStore::beginTransaction(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBTransactionInfo *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  WebCore::IDBServer::SQLiteIDBTransaction *v22;
  WTF *v23;
  void *v24;
  unint64_t *v25;
  int v26;
  unint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WebCore::IDBServer::SQLiteIDBTransaction *v38;
  WTF *v39;
  void *v40;
  unsigned int *v41;
  BOOL v42;
  WebCore::SQLiteTransaction *v43;
  unsigned int v44;
  WebCore::SQLiteTransaction *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  __int128 v52;
  WTF::StringImpl *v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WebCore::IDBObjectStoreInfo *v57;
  WTF::StringImpl *v58;
  char *v59;
  unint64_t v60;
  _BOOL4 v61;
  WTF::StringImpl *v62;
  unsigned __int8 *v63;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  WebCore::SQLiteDatabaseTracker *v68;
  int v69;
  int v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WebCore::SQLiteDatabaseTracker *v75;
  WebCore::IDBServer::SQLiteIDBBackingStore *v76;
  const WebCore::IDBResourceIdentifier *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  sqlite3_stmt *pStmt;
  int v81;

  v6 = (uint64_t *)((char *)this + 560);
  v7 = *((_QWORD *)this + 70);
  if (v7
    || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash((uint64_t *)this + 70, 8u, 0), (v7 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_QWORD *)a2 + 1);
  v10 = (*(_QWORD *)a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*(_QWORD *)a2 - 1640531527) << 16) ^ ((unsigned __int16)*(_QWORD *)a2 - 1640531527);
  v11 = v10 + (unsigned __int16)WORD2(*(_QWORD *)a2) + (v10 >> 11);
  v12 = (*(_QWORD *)a2 >> 37) & 0x7FFF800 ^ (v11 << 16) ^ v11;
  v13 = (v9 >> 5) & 0x7FFF800 ^ ((v12 + (unsigned __int16)v9 + (v12 >> 11)) << 16) ^ (v12
                                                                                                  + (unsigned __int16)v9
                                                                                                  + (v12 >> 11));
  v14 = (v9 >> 37) & 0x7FFF800 ^ ((v13 + WORD2(v9) + (v13 >> 11)) << 16) ^ (v13 + WORD2(v9) + (v13 >> 11));
  v15 = (v14 + (v14 >> 11)) ^ (8 * (v14 + (v14 >> 11)));
  v16 = (v15 + (v15 >> 5)) ^ (4 * (v15 + (v15 >> 5)));
  v17 = (v16 + (v16 >> 15)) ^ ((v16 + (v16 >> 15)) << 10);
  if (!v17)
    v17 = 0x800000;
  v18 = v17 & v8;
  v19 = (unint64_t *)(v7 + 24 * (v17 & v8));
  v21 = *v19;
  v20 = v19[1];
  if (*(_OWORD *)v19 != 0)
  {
    v25 = 0;
    v26 = 1;
    while (1)
    {
      v27 = v25;
      v25 = v19;
      if (v21 != -1)
      {
        v25 = v27;
        if (v21 == *(_QWORD *)a2 && v20 == v9)
          goto LABEL_60;
      }
      v18 = (v18 + v26) & v8;
      v19 = (unint64_t *)(v7 + 24 * v18);
      v21 = *v19;
      v20 = v19[1];
      ++v26;
      if (*(_OWORD *)v19 == 0)
      {
        if (!v25)
          break;
        *v25 = 0;
        v25[1] = 0;
        v25[2] = 0;
        --*(_DWORD *)(*v6 - 16);
        *(_OWORD *)v25 = *(_OWORD *)a2;
        v25[2] = 0;
        goto LABEL_17;
      }
    }
  }
  v22 = (WebCore::IDBServer::SQLiteIDBTransaction *)v19[2];
  *(_OWORD *)v19 = *(_OWORD *)a2;
  v19[2] = 0;
  if (v22)
  {
    WebCore::IDBServer::SQLiteIDBTransaction::~SQLiteIDBTransaction(v22, a2);
    WTF::fastFree(v23, v24);
  }
  v25 = v19;
LABEL_17:
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *v6;
  if (*v6)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 <= 0x400)
  {
    if (3 * v33 > 4 * v32)
      goto LABEL_31;
    if (!(_DWORD)v33)
    {
      v34 = 8;
      goto LABEL_30;
    }
LABEL_26:
    v34 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
LABEL_30:
    v25 = (unint64_t *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v6, v34, v25);
    goto LABEL_31;
  }
  if (v33 <= 2 * v32)
    goto LABEL_26;
LABEL_31:
  v35 = WTF::fastMalloc((WTF *)0x80);
  v36 = WebCore::IDBTransactionInfo::IDBTransactionInfo(v35, a2);
  *(_QWORD *)(v36 + 56) = this;
  *(_OWORD *)(v36 + 64) = 0u;
  *(_OWORD *)(v36 + 80) = 0u;
  *(_OWORD *)(v36 + 96) = 0u;
  *(_OWORD *)(v36 + 109) = 0u;
  v38 = (WebCore::IDBServer::SQLiteIDBTransaction *)v25[2];
  v25[2] = v35;
  if (v38)
  {
    WebCore::IDBServer::SQLiteIDBTransaction::~SQLiteIDBTransaction(v38, v37);
    WTF::fastFree(v39, v40);
    v35 = v25[2];
  }
  v41 = (unsigned int *)*((_QWORD *)this + 69);
  v42 = *(_BYTE *)(v35 + 16) == 0;
  v43 = (WebCore::SQLiteTransaction *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v43 = v41;
  do
    v44 = __ldaxr(v41);
  while (__stlxr(v44 + 1, v41));
  *((_BYTE *)v43 + 8) = 0;
  *((_BYTE *)v43 + 9) = v42;
  v45 = *(WebCore::SQLiteTransaction **)(v35 + 64);
  *(_QWORD *)(v35 + 64) = v43;
  if (v45)
  {
    WebCore::SQLiteTransaction::~SQLiteTransaction(v45);
    WTF::fastFree(v46, v47);
    v43 = *(WebCore::SQLiteTransaction **)(v35 + 64);
  }
  WebCore::SQLiteTransaction::begin(v43);
  if (*(_BYTE *)(*(_QWORD *)(v35 + 64) + 8))
  {
    *(_WORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if (*((_BYTE *)a2 + 16) != 2)
      return;
    v48 = *((_QWORD *)this + 67);
    v49 = bmalloc::api::isoAllocate();
    v50 = v49;
    v51 = *(_DWORD **)v48;
    if (*(_QWORD *)v48)
      *v51 += 2;
    *(_QWORD *)v49 = v51;
    v52 = *(_OWORD *)(v48 + 8);
    *(_QWORD *)(v49 + 24) = *(_QWORD *)(v48 + 24);
    *(_OWORD *)(v49 + 8) = v52;
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)(v49 + 32), (_QWORD *)(v48 + 32));
    v54 = (WTF::StringImpl **)*((_QWORD *)this + 68);
    *((_QWORD *)this + 68) = v50;
    if (v54)
    {
      v55 = v54[4];
      if (v55)
      {
        v56 = *((unsigned int *)v55 - 1);
        if ((_DWORD)v56)
        {
          v57 = (WTF::StringImpl *)((char *)v55 + 8);
          do
          {
            if (*((_QWORD *)v57 - 1) != -1)
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v57, v53);
            v57 = (WebCore::IDBObjectStoreInfo *)((char *)v57 + 72);
            --v56;
          }
          while (v56);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v55 - 16), v53);
      }
      v58 = *v54;
      *v54 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v53);
        else
          *(_DWORD *)v58 -= 2;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v54, v53);
    }
    WebCore::SQLiteDatabase::prepareStatement(*((_QWORD *)this + 69), "UPDATE IDBDatabaseInfo SET value = ? where key = 'DatabaseVersion';",
      68,
      (uint64_t)&v79);
    if (v81)
      goto LABEL_81;
    WTF::String::number(*((WTF::String **)a2 + 3));
    if (v78)
    {
      v59 = (char *)*((_QWORD *)v78 + 1);
      v60 = *((unsigned int *)v78 + 1) | ((unint64_t)((*((_DWORD *)v78 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v59 = 0;
      v60 = 0x100000000;
    }
    v61 = 1;
    if (WebCore::SQLiteStatement::bindText((uint64_t)&v79, 1, v59, v60))
    {
LABEL_77:
      v71 = v78;
      v78 = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
        {
          WTF::StringImpl::destroy(v71, v62);
          if (v61)
            goto LABEL_81;
          goto LABEL_89;
        }
        *(_DWORD *)v71 -= 2;
      }
      if (v61)
      {
LABEL_81:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v73 = v78;
        if (v78)
          *(_DWORD *)v78 += 2;
        *(_WORD *)a3 = 280;
        v74 = *(WTF::StringImpl **)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v73;
        if (v74)
        {
          if (*(_DWORD *)v74 == 2)
          {
            WTF::StringImpl::destroy(v74, v72);
            v73 = v78;
          }
          else
          {
            *(_DWORD *)v74 -= 2;
          }
        }
        v78 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 2)
            WTF::StringImpl::destroy(v73, v72);
          else
            *(_DWORD *)v73 -= 2;
        }
      }
LABEL_89:
      if (v81 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E335AC78[v81])(&v78, &v79);
      return;
    }
    if (v81)
    {
      v76 = (WebCore::IDBServer::SQLiteIDBBackingStore *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::IDBServer::SQLiteIDBBackingStore::abortTransaction(v76, v77);
      return;
    }
    v63 = (unsigned __int8 *)v79 + 32;
    if (__ldaxr((unsigned __int8 *)v79 + 32))
    {
      __clrex();
    }
    else if (!__stxr(1u, v63))
    {
LABEL_68:
      if (*((_BYTE *)v79 + 20) || (v68 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v68))
      {
        v69 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v68);
        v75 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v69 = (int)v75;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v75);
      }
      v70 = __ldxr(v63);
      if (v70 == 1)
      {
        if (!__stlxr(0, v63))
          goto LABEL_76;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v63);
LABEL_76:
      v61 = v69 != 101;
      goto LABEL_77;
    }
    MEMORY[0x19AEA534C](v63);
    goto LABEL_68;
  }
LABEL_60:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a3 = 280;
  v66 = v79;
  if (v79)
  {
    v67 = *(_DWORD *)v79;
    *(_DWORD *)v79 += 2;
    *(_QWORD *)(a3 + 8) = v66;
    v79 = 0;
    if (v67)
      *(_DWORD *)v66 = v67;
    else
      WTF::StringImpl::destroy(v66, v65);
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
  }
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::abortTransaction@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WebCore::IDBObjectStoreInfo *v11;
  WTF::StringImpl *v12;
  WTF::FileSystemImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::SQLiteDatabaseTracker *v17;
  WebCore::SQLiteTransaction *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  WTF *v22;
  void *v23;
  WTF::StringImpl *result;
  WTF::StringImpl *v25;
  int v26;
  WTF *v27;
  void *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>,WTF::HashTableTraits>::take(&v30, (uint64_t *)this + 70, *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  v6 = v30;
  if (v30)
  {
    if (*(_BYTE *)(v30 + 16) == 2)
    {
      v7 = *((_QWORD *)this + 68);
      if (v7)
      {
        *((_QWORD *)this + 68) = 0;
        v8 = (WTF::StringImpl **)*((_QWORD *)this + 67);
        *((_QWORD *)this + 67) = v7;
        if (v8)
        {
          v9 = v8[4];
          if (v9)
          {
            v10 = *((unsigned int *)v9 - 1);
            if ((_DWORD)v10)
            {
              v11 = (WTF::StringImpl *)((char *)v9 + 8);
              do
              {
                if (*((_QWORD *)v11 - 1) != -1)
                  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v11, v5);
                v11 = (WebCore::IDBObjectStoreInfo *)((char *)v11 + 72);
                --v10;
              }
              while (v10);
            }
            WTF::fastFree((WTF::StringImpl *)((char *)v9 - 16), v5);
          }
          v12 = *v8;
          *v8 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v5);
            else
              *(_DWORD *)v12 -= 2;
          }
          bmalloc::api::isoDeallocate((bmalloc::api *)v8, v5);
        }
      }
    }
    v13 = *(WTF::FileSystemImpl **)(v6 + 88);
    v14 = *(unsigned int *)(v6 + 100);
    if ((_DWORD)v14)
    {
      v15 = 16 * v14;
      do
      {
        WTF::FileSystemImpl::deleteFile(v13, v5);
        v13 = (WTF::FileSystemImpl *)((char *)v13 + 16);
        v15 -= 16;
      }
      while (v15);
    }
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(v6 + 88), 0);
    v16 = *(_QWORD *)(v6 + 64);
    if (v16
      && *(_BYTE *)(v16 + 8)
      && (v17 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::executeCommand(*(_QWORD *)v16, "ROLLBACK", 9),
          *(_BYTE *)(v16 + 8) = 0,
          *(_BYTE *)(*(_QWORD *)v16 + 20) = 0,
          WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v17),
          v18 = *(WebCore::SQLiteTransaction **)(v6 + 64),
          !*((_BYTE *)v18 + 8)))
    {
      *(_QWORD *)(v6 + 64) = 0;
      WebCore::SQLiteTransaction::~SQLiteTransaction(v18);
      WTF::fastFree(v27, v28);
      WebCore::IDBServer::SQLiteIDBTransaction::clearCursors((WebCore::IDBServer::SQLiteIDBTransaction *)v6, v29);
      *(_WORD *)a3 = 0;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)a3 = 280;
      v20 = v31;
      if (v31)
      {
        v21 = *(_DWORD *)v31;
        *(_DWORD *)v31 += 2;
        *(_QWORD *)(a3 + 8) = v20;
        v31 = 0;
        if (v21)
          *(_DWORD *)v20 = v21;
        else
          WTF::StringImpl::destroy(v20, v19);
        goto LABEL_25;
      }
    }
    *(_QWORD *)(a3 + 8) = 0;
LABEL_25:
    WebCore::IDBServer::SQLiteIDBTransaction::~SQLiteIDBTransaction((WebCore::IDBServer::SQLiteIDBTransaction *)v6, v19);
    return (WTF::StringImpl *)WTF::fastFree(v22, v23);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a3 = 280;
  result = v31;
  if (v31)
  {
    v26 = *(_DWORD *)v31;
    *(_DWORD *)v31 += 2;
    *(_QWORD *)(a3 + 8) = result;
    v31 = 0;
    if (v26)
      *(_DWORD *)result = v26;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>,WTF::HashTableTraits>::take(uint64_t *result, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v4 = result;
  v5 = *a2;
  if (!*a2)
    goto LABEL_10;
  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*a2, a3, a4);
  v7 = *(_DWORD *)(v5 - 4);
  if (!result)
    result = (uint64_t *)(v5 + 24 * v7);
  if ((uint64_t *)(v5 + 24 * v7) == result)
  {
LABEL_10:
    *v4 = 0;
  }
  else
  {
    v8 = result[2];
    result[2] = 0;
    *v4 = v8;
    v9 = *a2;
    if (!*a2 || (v9 += 24 * *(unsigned int *)(v9 - 4), (uint64_t *)v9 != result))
    {
      if ((uint64_t *)v9 != result)
      {
        *result = -1;
        result[2] = 0;
        ++*(_DWORD *)(*a2 - 16);
        v10 = *a2;
        v11 = *a2 ? *(_DWORD *)(v10 - 12) - 1 : -1;
        *(_DWORD *)(v10 - 12) = v11;
        v12 = *a2;
        if (*a2)
        {
          v13 = 6 * *(_DWORD *)(v12 - 12);
          v14 = *(_DWORD *)(v12 - 4);
          if (v13 < v14 && v14 >= 9)
            return (uint64_t *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a2, v14 >> 1, 0);
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::commitTransaction@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebCore::IDBObjectStoreInfo *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl ***v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  const WTF::String *v26;
  WTF::StringImpl *v27;
  const WTF::String *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::FileSystemImpl *v32;
  uint64_t v33;
  uint64_t v34;
  const WTF::String *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WebCore::SQLiteTransaction *v39;
  WTF *v40;
  void *v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WebCore::IDBObjectStoreInfo *v45;
  WTF::StringImpl *v46;
  WTF *v47;
  void *v48;
  WTF::StringImpl *v49;
  WTF::FileSystemImpl *v50;
  uint64_t v51;
  uint64_t v52;
  const WTF::String *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF::StringImpl *v57;

  WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>,WTF::HashTableTraits>::take(&v56, (uint64_t *)this + 70, *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  v5 = v56;
  if (v56)
  {
    v6 = *(_QWORD *)(v56 + 64);
    if (!v6 || !*(_BYTE *)(v6 + 8) || (WebCore::SQLiteTransaction::commit(v6), *(_BYTE *)(*(_QWORD *)(v5 + 64) + 8)))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)a3 = 280;
      v9 = v57;
      if (v57)
      {
        v10 = *(_DWORD *)v57;
        *(_DWORD *)v57 += 2;
        *(_QWORD *)(a3 + 8) = v9;
        v57 = 0;
        if (v10)
          *(_DWORD *)v9 = v10;
        else
          WTF::StringImpl::destroy(v9, v8);
      }
      else
      {
        *(_QWORD *)(a3 + 8) = 0;
      }
      if (*(_BYTE *)(v5 + 16) == 2)
      {
        v11 = *((_QWORD *)this + 68);
        *((_QWORD *)this + 68) = 0;
        v12 = (WTF::StringImpl **)*((_QWORD *)this + 67);
        *((_QWORD *)this + 67) = v11;
        if (v12)
        {
          v13 = v12[4];
          if (v13)
          {
            v14 = *((unsigned int *)v13 - 1);
            if ((_DWORD)v14)
            {
              v15 = (WTF::StringImpl *)((char *)v13 + 8);
              do
              {
                if (*((_QWORD *)v15 - 1) != -1)
                  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v15, v8);
                v15 = (WebCore::IDBObjectStoreInfo *)((char *)v15 + 72);
                --v14;
              }
              while (v14);
            }
            WTF::fastFree((WTF::StringImpl *)((char *)v13 - 16), v8);
          }
          v16 = *v12;
          *v12 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v8);
            else
              *(_DWORD *)v16 -= 2;
          }
          bmalloc::api::isoDeallocate((bmalloc::api *)v12, v8);
        }
      }
LABEL_84:
      WebCore::IDBServer::SQLiteIDBTransaction::~SQLiteIDBTransaction((WebCore::IDBServer::SQLiteIDBTransaction *)v5, v8);
      return (WTF::StringImpl *)WTF::fastFree(v47, v48);
    }
    if (*(_DWORD *)(v5 + 116))
    {
      v20 = *(WTF::StringImpl **)(*(_QWORD *)(v5 + 56) + 576);
      if (v20)
        *(_DWORD *)v20 += 2;
      v21 = (WTF::StringImpl ***)(v5 + 104);
      v22 = *(unsigned int *)(v5 + 112);
      if ((_DWORD)v22)
      {
        v23 = 8 * v22;
        v24 = *(_QWORD **)(v5 + 104);
        while (!*v24)
        {
          ++v24;
          v23 -= 8;
          if (!v23)
            goto LABEL_53;
        }
      }
      else
      {
        v24 = *(_QWORD **)(v5 + 104);
      }
      v25 = *(_QWORD *)(v5 + 104) + 8 * v22;
      if (v24 != (_QWORD *)v25)
      {
        if (v20)
        {
LABEL_37:
          WTF::FileSystemImpl::pathByAppendingComponent();
          WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v57, v26);
          v27 = v57;
          v57 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v7);
            else
              *(_DWORD *)v27 -= 2;
          }
          while (++v24 != (_QWORD *)v25)
          {
            if (*v24)
            {
              if (v24 != (_QWORD *)v25)
                goto LABEL_37;
              break;
            }
          }
        }
        else
        {
LABEL_47:
          WTF::FileSystemImpl::pathByAppendingComponent();
          WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v57, v28);
          v29 = v57;
          v57 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v7);
            else
              *(_DWORD *)v29 -= 2;
          }
          while (++v24 != (_QWORD *)v25)
          {
            if (*v24)
            {
              if (v24 != (_QWORD *)v25)
                goto LABEL_47;
              break;
            }
          }
        }
      }
LABEL_53:
      v30 = *v21;
      if (*v21)
      {
        v49 = (WTF::StringImpl *)*(unsigned int *)(v5 + 112);
        *v21 = 0;
        *(_QWORD *)(v5 + 112) = 0;
        *(_QWORD *)(v5 + 117) = 0;
        WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v30, v49);
        if (v20)
        {
LABEL_55:
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v7);
          else
            *(_DWORD *)v20 -= 2;
        }
      }
      else if (v20)
      {
        goto LABEL_55;
      }
    }
    v31 = *(WTF::StringImpl **)(*(_QWORD *)(v5 + 56) + 576);
    if (v31)
    {
      *(_DWORD *)v31 += 2;
      v32 = *(WTF::FileSystemImpl **)(v5 + 88);
      v33 = *(unsigned int *)(v5 + 100);
      if ((_DWORD)v33)
      {
        v34 = 16 * v33;
        do
        {
          WTF::FileSystemImpl::pathByAppendingComponent();
          WTF::FileSystemImpl::hardLinkOrCopyFile(v32, (const WTF::String *)&v57, v35);
          v37 = v57;
          v57 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v36);
            else
              *(_DWORD *)v37 -= 2;
          }
          WTF::FileSystemImpl::deleteFile(v32, v36);
          v32 = (WTF::FileSystemImpl *)((char *)v32 + 16);
          v34 -= 16;
        }
        while (v34);
      }
      WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(v5 + 88), 0);
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v38);
      else
        *(_DWORD *)v31 -= 2;
    }
    else
    {
      v50 = *(WTF::FileSystemImpl **)(v5 + 88);
      v51 = *(unsigned int *)(v5 + 100);
      if ((_DWORD)v51)
      {
        v52 = 16 * v51;
        do
        {
          WTF::FileSystemImpl::pathByAppendingComponent();
          WTF::FileSystemImpl::hardLinkOrCopyFile(v50, (const WTF::String *)&v57, v53);
          v55 = v57;
          v57 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, v54);
            else
              *(_DWORD *)v55 -= 2;
          }
          WTF::FileSystemImpl::deleteFile(v50, v54);
          v50 = (WTF::FileSystemImpl *)((char *)v50 + 16);
          v52 -= 16;
        }
        while (v52);
      }
      WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(v5 + 88), 0);
    }
    v39 = *(WebCore::SQLiteTransaction **)(v5 + 64);
    *(_QWORD *)(v5 + 64) = 0;
    if (v39)
    {
      WebCore::SQLiteTransaction::~SQLiteTransaction(v39);
      WTF::fastFree(v40, v41);
    }
    WebCore::IDBServer::SQLiteIDBTransaction::clearCursors((WebCore::IDBServer::SQLiteIDBTransaction *)v5, v38);
    *(_WORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v42 = (WTF::StringImpl **)*((_QWORD *)this + 68);
    *((_QWORD *)this + 68) = 0;
    if (v42)
    {
      v43 = v42[4];
      if (v43)
      {
        v44 = *((unsigned int *)v43 - 1);
        if ((_DWORD)v44)
        {
          v45 = (WTF::StringImpl *)((char *)v43 + 8);
          do
          {
            if (*((_QWORD *)v45 - 1) != -1)
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v45, v8);
            v45 = (WebCore::IDBObjectStoreInfo *)((char *)v45 + 72);
            --v44;
          }
          while (v44);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v43 - 16), v8);
      }
      v46 = *v42;
      *v42 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v8);
        else
          *(_DWORD *)v46 -= 2;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v42, v8);
    }
    if (!*(_BYTE *)(v5 + 17))
      WebCore::SQLiteDatabase::checkpoint(*((_QWORD *)this + 69), 0);
    goto LABEL_84;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a3 = 280;
  result = v57;
  if (v57)
  {
    v19 = *(_DWORD *)v57;
    *(_DWORD *)v57 += 2;
    *(_QWORD *)(a3 + 8) = result;
    v57 = 0;
    if (v19)
      *(_DWORD *)result = v19;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::createObjectStore@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, sqlite3_int64 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  sqlite3_int64 v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;
  WebCore::IDBServer::SQLiteIDBBackingStore *v37;
  const WebCore::IDBResourceIdentifier *v38;
  unint64_t v39;
  WTF *v40;
  char v41;
  WTF::StringImpl *v42[3];
  WTF::StringImpl *v43;

  v7 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (!v7 || (v8 = v7[2]) == 0 || (v9 = *(_QWORD *)(v8 + 64)) == 0 || !*(_BYTE *)(v9 + 8) || *(_BYTE *)(v8 + 16) != 2)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a4 = 280;
    result = (uint64_t)v42[0];
    if (v42[0])
    {
      v23 = *(_DWORD *)v42[0];
      *(_DWORD *)v42[0] += 2;
      *(_QWORD *)(a4 + 8) = result;
      v42[0] = 0;
      if (v23)
        *(_DWORD *)result = v23;
      else
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v22);
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
    }
    return result;
  }
  WebCore::serializeIDBKeyPath((uint64_t)(a3 + 2));
  if (v40)
  {
    WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v43, (uint64_t)this, 0, "INSERT INTO ObjectStoreInfo VALUES (?, ?, ?, ?);",
      49);
    v10 = v43;
    if (!v43 || sqlite3_bind_int64(*((sqlite3_stmt **)v43 + 1), 1, *a3))
      goto LABEL_30;
    v11 = a3[1];
    if (v11)
    {
      v12 = *(unsigned int *)(v11 + 16);
      v13 = *(char **)(v11 + 8);
      LODWORD(v11) = *(_DWORD *)(v11 + 4);
      v14 = (v12 >> 2) & 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    if (WebCore::SQLiteStatement::bindText((uint64_t)v10, 2, v13, v11 | (unint64_t)(v14 << 32)))goto LABEL_30;
    if (*((_DWORD *)v40 + 5))
    {
      v15 = *(_QWORD *)(*((_QWORD *)v40 + 1) + 8);
      v16 = *(unsigned int *)(v15 + 24);
      if ((_DWORD)v16 == -1)
      {
        v37 = (WebCore::IDBServer::SQLiteIDBBackingStore *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::IDBServer::SQLiteIDBBackingStore::deleteObjectStore(v37, v38, v39);
      }
      v42[0] = (WTF::StringImpl *)&v41;
      v17 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v16])(v42, v15 + 8);
    }
    else
    {
      v17 = 0;
    }
    if (sqlite3_bind_blob(*((sqlite3_stmt **)v10 + 1), 3, v17, *((_DWORD *)v40 + 12), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL)|| sqlite3_bind_int(*((sqlite3_stmt **)v10 + 1), 4, *((unsigned __int8 *)a3 + 48))|| WebCore::SQLiteStatement::step((sqlite3_stmt **)v10) != 101)
    {
LABEL_30:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)a4 = 280;
      result = (uint64_t)v42[0];
      if (v42[0])
      {
        v24 = *(_DWORD *)v42[0];
        *(_DWORD *)v42[0] += 2;
        *(_QWORD *)(a4 + 8) = result;
        v42[0] = 0;
        if (!v24)
        {
LABEL_56:
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
          goto LABEL_33;
        }
LABEL_32:
        *(_DWORD *)result = v24;
        goto LABEL_33;
      }
    }
    else
    {
      sqlite3_reset(*((sqlite3_stmt **)v10 + 1));
      sqlite3_clear_bindings(*((sqlite3_stmt **)v10 + 1));
      WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)v42, (uint64_t)this, 1uLL, "INSERT INTO KeyGenerators VALUES (?, 0);",
        41);
      v10 = v42[0];
      if (v42[0]
        && !sqlite3_bind_int64(*((sqlite3_stmt **)v42[0] + 1), 1, *a3)
        && WebCore::SQLiteStatement::step((sqlite3_stmt **)v10) == 101)
      {
        sqlite3_reset(*((sqlite3_stmt **)v10 + 1));
        sqlite3_clear_bindings(*((sqlite3_stmt **)v10 + 1));
        v18 = *((_QWORD *)this + 67);
        v19 = (WTF::StringImpl *)*a3;
        if ((unint64_t)*a3 > *(_QWORD *)(v18 + 24))
          *(_QWORD *)(v18 + 24) = v19;
        v43 = v19;
        result = WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBObjectStoreInfo&>((uint64_t *)(v18 + 32), (uint64_t *)&v43, (uint64_t)a3, (uint64_t)v42);
        *(_WORD *)a4 = 0;
        goto LABEL_57;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)a4 = 280;
      result = (uint64_t)v43;
      if (v43)
      {
        v24 = *(_DWORD *)v43;
        *(_DWORD *)v43 += 2;
        *(_QWORD *)(a4 + 8) = result;
        v43 = 0;
        if (!v24)
          goto LABEL_56;
        goto LABEL_32;
      }
    }
    *(_QWORD *)(a4 + 8) = 0;
LABEL_33:
    if (v10)
    {
      sqlite3_reset(*((sqlite3_stmt **)v10 + 1));
      result = sqlite3_clear_bindings(*((sqlite3_stmt **)v10 + 1));
    }
    goto LABEL_38;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a4 = 280;
  result = (uint64_t)v42[0];
  if (v42[0])
  {
    v25 = *(_DWORD *)v42[0];
    *(_DWORD *)v42[0] += 2;
    *(_QWORD *)(a4 + 8) = result;
    v42[0] = 0;
    if (v25)
      *(_DWORD *)result = v25;
    else
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
    goto LABEL_38;
  }
LABEL_57:
  *(_QWORD *)(a4 + 8) = 0;
LABEL_38:
  if (v40)
  {
    do
    {
      v26 = __ldaxr((unsigned int *)v40);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)v40));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)v40);
      v28 = *((unsigned int *)v40 + 5);
      if ((_DWORD)v28)
      {
        v29 = *((_QWORD *)v40 + 1);
        v30 = v29 + 16 * v28;
        do
        {
          v31 = *(unsigned int **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v31);
              v34 = v31[6];
              if ((_DWORD)v34 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335AE70[v34])(v42, v31 + 2);
              v31[6] = -1;
              WTF::fastFree((WTF *)v31, v21);
            }
          }
          v29 += 16;
        }
        while (v29 != v30);
      }
      v35 = (WTF *)*((_QWORD *)v40 + 1);
      if ((WTF *)((char *)v40 + 24) != v35 && v35 != 0)
      {
        *((_QWORD *)v40 + 1) = 0;
        *((_DWORD *)v40 + 4) = 0;
        WTF::fastFree(v35, v21);
      }
      return WTF::fastFree(v40, v21);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::deleteObjectStore@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  sqlite3_stmt **v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  WebCore::SQLiteStatement *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v7 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (!v7 || (v8 = v7[2]) == 0 || (v9 = *(_QWORD *)(v8 + 64)) == 0 || !*(_BYTE *)(v9 + 8) || *(_BYTE *)(v8 + 16) != 2)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a4 = 280;
    result = v17;
    if (!v17)
    {
      *(_QWORD *)(a4 + 8) = 0;
      return result;
    }
    v13 = *(_DWORD *)v17;
    *(_DWORD *)v17 += 2;
    *(_QWORD *)(a4 + 8) = result;
    v17 = 0;
    if (!v13)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
LABEL_27:
    *(_DWORD *)result = v13;
    return result;
  }
  WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v17, (uint64_t)this, 2uLL, "DELETE FROM ObjectStoreInfo WHERE id = ?;",
    42);
  v10 = (sqlite3_stmt **)v17;
  if (!v17)
    goto LABEL_30;
  if (sqlite3_bind_int64(*((sqlite3_stmt **)v17 + 1), 1, (sqlite3_int64)a3))
    goto LABEL_30;
  if (WebCore::SQLiteStatement::step(v10) != 101)
    goto LABEL_30;
  sqlite3_reset(v10[1]);
  sqlite3_clear_bindings(v10[1]);
  WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v17, (uint64_t)this, 3uLL, "DELETE FROM KeyGenerators WHERE objectStoreID = ?;",
    51);
  v10 = (sqlite3_stmt **)v17;
  if (!v17)
    goto LABEL_30;
  if (sqlite3_bind_int64(*((sqlite3_stmt **)v17 + 1), 1, (sqlite3_int64)a3))
    goto LABEL_30;
  if (WebCore::SQLiteStatement::step(v10) != 101)
    goto LABEL_30;
  sqlite3_reset(v10[1]);
  sqlite3_clear_bindings(v10[1]);
  WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v17, (uint64_t)this, 4uLL, "DELETE FROM Records WHERE objectStoreID = ?;",
    45);
  v10 = (sqlite3_stmt **)v17;
  if (!v17)
    goto LABEL_30;
  if (sqlite3_bind_int64(*((sqlite3_stmt **)v17 + 1), 1, (sqlite3_int64)a3))
    goto LABEL_30;
  if (WebCore::SQLiteStatement::step(v10) != 101)
    goto LABEL_30;
  sqlite3_reset(v10[1]);
  sqlite3_clear_bindings(v10[1]);
  WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v17, (uint64_t)this, 5uLL, "DELETE FROM IndexInfo WHERE objectStoreID = ?;",
    47);
  v10 = (sqlite3_stmt **)v17;
  if (!v17)
    goto LABEL_30;
  if (sqlite3_bind_int64(*((sqlite3_stmt **)v17 + 1), 1, (sqlite3_int64)a3))
    goto LABEL_30;
  if (WebCore::SQLiteStatement::step(v10) != 101)
    goto LABEL_30;
  sqlite3_reset(v10[1]);
  sqlite3_clear_bindings(v10[1]);
  WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v17, (uint64_t)this, 6uLL, "DELETE FROM IndexRecords WHERE objectStoreID = ?;",
    50);
  v10 = (sqlite3_stmt **)v17;
  if (!v17)
    goto LABEL_30;
  if (!sqlite3_bind_int64(*((sqlite3_stmt **)v17 + 1), 1, (sqlite3_int64)a3)
    && WebCore::SQLiteStatement::step(v10) == 101
    && (sqlite3_reset(v10[1]),
        sqlite3_clear_bindings(v10[1]),
        WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v17, (uint64_t)this, 7uLL, "DELETE FROM BlobRecords WHERE objectStoreRow NOT IN (SELECT recordID FROM Records)", 83), (v10 = (sqlite3_stmt **)v17) != 0)&& WebCore::SQLiteStatement::step((sqlite3_stmt **)v17) == 101)
  {
    sqlite3_reset(v10[1]);
    sqlite3_clear_bindings(v10[1]);
    result = (WTF::StringImpl *)WebCore::IDBServer::SQLiteIDBBackingStore::deleteUnusedBlobFileRecords((uint64_t)&v17, (uint64_t)this, v8);
    if (BYTE1(v17))
    {
      *(_WORD *)a4 = (_WORD)v17;
      *(_QWORD *)(a4 + 8) = v18;
      return result;
    }
    v16 = *((_QWORD *)this + 67);
    v19 = a3;
    WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::remove((uint64_t *)(v16 + 32), (WTF::StringImpl *)&v19);
    *(_WORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    result = v18;
    if (v18)
    {
      v13 = *(_DWORD *)v18 - 2;
      if (*(_DWORD *)v18 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      goto LABEL_27;
    }
  }
  else
  {
LABEL_30:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a4 = 280;
    result = v19;
    if (v19)
    {
      v15 = *(_DWORD *)v19;
      *(_DWORD *)v19 += 2;
      *(_QWORD *)(a4 + 8) = result;
      v19 = 0;
      if (v15)
        *(_DWORD *)result = v15;
      else
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
    }
    if (v10)
    {
      sqlite3_reset(v10[1]);
      return (WTF::StringImpl *)sqlite3_clear_bindings(v10[1]);
    }
  }
  return result;
}

_QWORD *WebCore::IDBServer::SQLiteIDBBackingStore::deleteUnusedBlobFileRecords(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  WTF::StringImpl **v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  _QWORD *result;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _QWORD *v28;
  WTF::StringImpl *v29[3];

  v28 = 0;
  WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v27, a2, 0x16uLL, "SELECT fileName FROM BlobFiles WHERE blobURL NOT IN (SELECT blobURL FROM BlobRecords)", 86);
  v6 = v27;
  if (!v27)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a1 = 280;
    v8 = v29[0];
    if (v29[0])
    {
      v9 = *(_DWORD *)v29[0];
      *(_DWORD *)v29[0] += 2;
      *(_QWORD *)(a1 + 8) = v8;
      v29[0] = 0;
      if (v9)
        *(_DWORD *)v8 = v9;
      else
        WTF::StringImpl::destroy(v8, v7);
      goto LABEL_28;
    }
    goto LABEL_23;
  }
  while (1)
  {
    v13 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v6);
    if (v13 != 100)
      break;
    WebCore::SQLiteStatement::columnText((sqlite3_stmt **)v6, 0, &v26);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v28, &v26, v10, (uint64_t)v29);
    v12 = v26;
    v26 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  if (v13 != 101)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a1 = 280;
    v21 = v29[0];
    if (v29[0])
    {
      v22 = *(_DWORD *)v29[0];
      *(_DWORD *)v29[0] += 2;
      *(_QWORD *)(a1 + 8) = v21;
      v29[0] = 0;
      if (v22)
        *(_DWORD *)v21 = v22;
      else
        WTF::StringImpl::destroy(v21, v20);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
    }
LABEL_27:
    sqlite3_reset(*((sqlite3_stmt **)v6 + 1));
    sqlite3_clear_bindings(*((sqlite3_stmt **)v6 + 1));
    goto LABEL_28;
  }
  sqlite3_reset(*((sqlite3_stmt **)v6 + 1));
  sqlite3_clear_bindings(*((sqlite3_stmt **)v6 + 1));
  if (!v28 || !*((_DWORD *)v28 - 3))
  {
LABEL_12:
    v14 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(&v28);
    v16 = v14;
    v17 = (WTF::StringImpl **)v7;
    if (v28)
      v18 = (WTF::StringImpl **)&v28[*((unsigned int *)v28 - 1)];
    else
      v18 = 0;
    if (v18 != v14)
    {
      v19 = a3 + 104;
      do
      {
        WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(v19, v16, v15, (uint64_t)v29);
        while (++v16 != v17)
        {
          if ((unint64_t)*v16 + 1 > 1)
            goto LABEL_21;
        }
        v16 = v17;
LABEL_21:
        ;
      }
      while (v16 != v18);
    }
    *(_WORD *)a1 = 0;
LABEL_23:
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_28;
  }
  WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)v29, a2, 0x17uLL, "DELETE FROM BlobFiles WHERE blobURL NOT IN (SELECT blobURL FROM BlobRecords)", 77);
  v6 = v29[0];
  if (v29[0] && WebCore::SQLiteStatement::step((sqlite3_stmt **)v29[0]) == 101)
  {
    sqlite3_reset(*((sqlite3_stmt **)v6 + 1));
    sqlite3_clear_bindings(*((sqlite3_stmt **)v6 + 1));
    goto LABEL_12;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a1 = 280;
  v24 = v27;
  if (v27)
  {
    v25 = *(_DWORD *)v27;
    *(_DWORD *)v27 += 2;
    *(_QWORD *)(a1 + 8) = v24;
    v27 = 0;
    if (v25)
      *(_DWORD *)v24 = v25;
    else
      WTF::StringImpl::destroy(v24, v7);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (v6)
    goto LABEL_27;
LABEL_28:
  result = v28;
  if (v28)
    return (_QWORD *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v28, v7);
  return result;
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::renameObjectStore@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, WTF::StringImpl **a3@<X3>, WTF::StringImpl *a4@<X2>, uint64_t a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  sqlite3_stmt **v12;
  WTF::StringImpl *v13;
  char *v14;
  unint64_t v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v9 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (v9
    && (v10 = v9[2]) != 0
    && (v11 = *(_QWORD *)(v10 + 64)) != 0
    && *(_BYTE *)(v11 + 8)
    && *(_BYTE *)(v10 + 16) == 2)
  {
    WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v22, (uint64_t)this, 8uLL, "UPDATE ObjectStoreInfo SET name = ? WHERE id = ?;",
      50);
    v12 = (sqlite3_stmt **)v22;
    if (v22)
    {
      v13 = *a3;
      if (*a3)
      {
        v14 = (char *)*((_QWORD *)v13 + 1);
        v15 = *((unsigned int *)v13 + 1) | ((unint64_t)((*((_DWORD *)v13 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v14 = 0;
        v15 = 0x100000000;
      }
      if (!WebCore::SQLiteStatement::bindText((uint64_t)v22, 1, v14, v15)
        && !sqlite3_bind_int64(v12[1], 2, (sqlite3_int64)a4)
        && WebCore::SQLiteStatement::step(v12) == 101)
      {
        sqlite3_reset(v12[1]);
        sqlite3_clear_bindings(v12[1]);
        result = WebCore::IDBDatabaseInfo::renameObjectStore(*((WTF::StringImpl **)this + 67), a4, a3);
        *(_WORD *)a5 = 0;
LABEL_13:
        *(_QWORD *)(a5 + 8) = 0;
        return result;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a5 = 280;
    result = v21;
    if (v21)
    {
      v20 = *(_DWORD *)v21;
      *(_DWORD *)v21 += 2;
      *(_QWORD *)(a5 + 8) = v21;
      if (v20)
        *(_DWORD *)v21 = v20;
      else
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v21, v19);
    }
    else
    {
      *(_QWORD *)(a5 + 8) = 0;
    }
    if (v12)
    {
      sqlite3_reset(v12[1]);
      return (WTF::StringImpl *)sqlite3_clear_bindings(v12[1]);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a5 = 280;
    result = v22;
    if (!v22)
      goto LABEL_13;
    v18 = *(_DWORD *)v22;
    *(_DWORD *)v22 += 2;
    *(_QWORD *)(a5 + 8) = result;
    v22 = 0;
    if (v18)
      *(_DWORD *)result = v18;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::clearObjectStore@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  sqlite3_stmt **v10;
  sqlite3_stmt **v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  int v16;
  sqlite3_stmt *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v7 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (v7 && (v8 = v7[2]) != 0 && (v9 = *(_QWORD *)(v8 + 64)) != 0 && *(_BYTE *)(v9 + 8) && *(_BYTE *)(v8 + 16))
  {
    WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v21, (uint64_t)this, 9uLL, "DELETE FROM Records WHERE objectStoreID = ?;",
      45);
    v10 = (sqlite3_stmt **)v21;
    if (v21
      && !sqlite3_bind_int64(*((sqlite3_stmt **)v21 + 1), 1, (sqlite3_int64)a3)
      && WebCore::SQLiteStatement::step(v10) == 101)
    {
      sqlite3_reset(v10[1]);
      sqlite3_clear_bindings(v10[1]);
      WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v21, (uint64_t)this, 0xAuLL, "DELETE FROM IndexRecords WHERE objectStoreID = ?;",
        50);
      v11 = (sqlite3_stmt **)v21;
      if (v21
        && !sqlite3_bind_int64(*((sqlite3_stmt **)v21 + 1), 1, (sqlite3_int64)a3)
        && WebCore::SQLiteStatement::step(v11) == 101)
      {
        sqlite3_reset(v11[1]);
        sqlite3_clear_bindings(v11[1]);
        result = (WTF::StringImpl *)WebCore::IDBServer::SQLiteIDBTransaction::notifyCursorsOfChanges(v8, a3);
        *(_WORD *)a4 = 0;
LABEL_31:
        *(_QWORD *)(a4 + 8) = 0;
        return result;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)a4 = 280;
      result = v20;
      if (v20)
      {
        v19 = *(_DWORD *)v20;
        *(_DWORD *)v20 += 2;
        *(_QWORD *)(a4 + 8) = v20;
        if (v19)
          *(_DWORD *)v20 = v19;
        else
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v20, v18);
      }
      else
      {
        *(_QWORD *)(a4 + 8) = 0;
      }
      if (v11)
      {
        sqlite3_reset(v11[1]);
        v17 = v11[1];
        return (WTF::StringImpl *)sqlite3_clear_bindings(v17);
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)a4 = 280;
      result = v20;
      if (v20)
      {
        v16 = *(_DWORD *)v20;
        *(_DWORD *)v20 += 2;
        *(_QWORD *)(a4 + 8) = v20;
        if (v16)
          *(_DWORD *)v20 = v16;
        else
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v20, v15);
      }
      else
      {
        *(_QWORD *)(a4 + 8) = 0;
      }
      if (v10)
      {
        sqlite3_reset(v10[1]);
        v17 = v10[1];
        return (WTF::StringImpl *)sqlite3_clear_bindings(v17);
      }
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a4 = 280;
    result = v21;
    if (!v21)
      goto LABEL_31;
    v14 = *(_DWORD *)v21;
    *(_DWORD *)v21 += 2;
    *(_QWORD *)(a4 + 8) = result;
    v21 = 0;
    if (v14)
      *(_DWORD *)result = v14;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  }
  return result;
}

uint64_t WebCore::IDBServer::SQLiteIDBTransaction::notifyCursorsOfChanges(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = this;
  v4 = *(_QWORD *)(this + 72);
  if (!v4)
  {
    v7 = 0;
    LODWORD(v5) = 0;
LABEL_14:
    v6 = v4 + 24 * v5;
    goto LABEL_15;
  }
  v5 = *(unsigned int *)(v4 - 4);
  v6 = v4 + 24 * v5;
  if (!*(_DWORD *)(v4 - 12))
  {
    v7 = v4 + 24 * v5;
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(this + 72);
  if ((_DWORD)v5)
  {
    v8 = 24 * v5;
    v7 = *(_QWORD *)(this + 72);
    while (*(_OWORD *)v7 == 0 || *(_QWORD *)v7 == -1)
    {
      v7 += 24;
      v8 -= 24;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_15:
  if (v4)
    v10 = v4 + 24 * *(unsigned int *)(v4 - 4);
  else
    v10 = 0;
  while (v7 != v10)
  {
    this = *(_QWORD *)(v7 + 16);
    if (*(WTF::StringImpl **)(this + 24) == a2)
      this = WebCore::IDBServer::SQLiteIDBCursor::objectStoreRecordsChanged(this, a2);
    v11 = v7 + 24;
    v7 = v6;
    if (v11 != v6)
    {
      v7 = v11;
      while (*(_OWORD *)v7 == 0 || *(_QWORD *)v7 == -1)
      {
        v7 += 24;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
  }
  v13 = *(_QWORD *)(v3 + 80);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    v15 = v13 + 8 * v14;
    if (*(_DWORD *)(v13 - 12))
    {
      v16 = v13;
      if ((_DWORD)v14)
      {
        v17 = 8 * v14;
        v16 = v13;
        while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
        {
          v16 += 8;
          v17 -= 8;
          if (!v17)
          {
            v16 = v15;
            goto LABEL_38;
          }
        }
      }
      goto LABEL_38;
    }
    v16 = v13 + 8 * v14;
  }
  else
  {
    v16 = 0;
    v14 = 0;
  }
  v15 = v13 + 8 * v14;
  if (v13)
  {
LABEL_38:
    v18 = v13 + 8 * *(unsigned int *)(v13 - 4);
    goto LABEL_43;
  }
  v18 = 0;
LABEL_43:
  while (v16 != v18)
  {
    this = *(_QWORD *)v16;
    if (*(WTF::StringImpl **)(*(_QWORD *)v16 + 24) == a2)
      this = WebCore::IDBServer::SQLiteIDBCursor::objectStoreRecordsChanged(this, a2);
    v19 = v16 + 8;
    v16 = v15;
    if (v19 != v15)
    {
      v16 = v19;
      while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
      {
        v16 += 8;
        if (v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  return this;
}

void WebCore::IDBServer::SQLiteIDBBackingStore::createIndex(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, sqlite3_int64 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  sqlite3_stmt **v11;
  sqlite3_int64 v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  WebCore::IDBServer::SQLiteIDBCursor *v20;
  WebCore::IDBServer::SQLiteIDBCursor *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  sqlite3_int64 v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  WebCore::IDBServer::SQLiteIDBCursor *v47;
  uint64_t v48;
  uint64_t *v49;
  sqlite3_stmt **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  char v55;
  WTF::StringImpl *v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  WTF::StringImpl *v60;
  _QWORD *v61;
  uint64_t v62;
  _DWORD **v63;
  uint64_t v64;
  _DWORD *v65;
  unsigned int *v66;
  _QWORD *v67;
  uint64_t v68;
  _DWORD **v69;
  uint64_t v70;
  _DWORD *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v92;
  uint64_t *v93;
  sqlite3_int64 v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unsigned int v99;
  uint64_t *v100;
  uint64_t v101;
  int v102;
  NSObject *v103;
  WTF::StringImpl *v104;
  int v105;
  _QWORD *v106;
  WTF *v107;
  void *v108;
  sqlite3_stmt **v109;
  unsigned int *v110;
  WebCore::IDBServer::SQLiteIDBCursor *v111;
  WTF *v112;
  sqlite3_stmt **v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  __int128 buf;
  int v117;
  unsigned int v118;
  _QWORD *v119;
  int v120;
  unsigned int v121;
  uint64_t v122;
  int v123;
  __int16 v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v7 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (!v7 || (v8 = v7[2]) == 0 || (v9 = *(_QWORD *)(v8 + 64)) == 0 || !*(_BYTE *)(v9 + 8) || *(_BYTE *)(v8 + 16) != 2)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a4 = 280;
    v74 = (WTF::StringImpl *)buf;
    if ((_QWORD)buf)
    {
      v75 = *(_DWORD *)buf;
      *(_DWORD *)buf += 2;
      *(_QWORD *)(a4 + 8) = v74;
      *(_QWORD *)&buf = 0;
      if (v75)
        *(_DWORD *)v74 = v75;
      else
        WTF::StringImpl::destroy(v74, v73);
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
    }
    return;
  }
  LOBYTE(buf) = 0;
  v117 = -1;
  v10 = *((unsigned int *)a3 + 10);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(sqlite3_stmt ***, __int128 *, sqlite3_int64 *))off_1E335AC98[v10])(&v113, &buf, a3 + 3);
    v117 = v10;
  }
  LOBYTE(v119) = 1;
  WebCore::serializeIDBKeyPath((uint64_t)&buf);
  if ((_BYTE)v119 && v117 != -1)
    ((void (*)(sqlite3_stmt ***, __int128 *))off_1E335AC88[v117])(&v113, &buf);
  if (!v112)
    goto LABEL_110;
  WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement(&v113, (uint64_t)this, 0xBuLL, "INSERT INTO IndexInfo VALUES (?, ?, ?, ?, ?, ?);",
    49);
  v11 = v113;
  if (!v113 || sqlite3_bind_int64(v113[1], 1, *a3))
    goto LABEL_105;
  v12 = a3[2];
  if (v12)
  {
    v13 = *(unsigned int *)(v12 + 16);
    v14 = *(char **)(v12 + 8);
    LODWORD(v12) = *(_DWORD *)(v12 + 4);
    v15 = (v13 >> 2) & 1;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  if (WebCore::SQLiteStatement::bindText((uint64_t)v11, 2, v14, v12 | (unint64_t)(v15 << 32))|| sqlite3_bind_int64(v11[1], 3, a3[1]))
  {
    goto LABEL_105;
  }
  if (*((_DWORD *)v112 + 5))
  {
    v16 = *(_QWORD *)(*((_QWORD *)v112 + 1) + 8);
    v17 = *(unsigned int *)(v16 + 24);
    if ((_DWORD)v17 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_167:
      __break(0xC471u);
      JUMPOUT(0x1953E2264);
    }
    *(_QWORD *)&buf = &v115;
    v18 = (const void *)((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v17])(&buf, v16 + 8);
  }
  else
  {
    v18 = 0;
  }
  if (sqlite3_bind_blob(v11[1], 4, v18, *((_DWORD *)v112 + 12), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL)
    || sqlite3_bind_int(v11[1], 5, *((unsigned __int8 *)a3 + 48))
    || sqlite3_bind_int(v11[1], 6, *((unsigned __int8 *)a3 + 49))
    || WebCore::SQLiteStatement::step(v11) != 101)
  {
LABEL_105:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a4 = 280;
    v76 = (WTF::StringImpl *)buf;
    if ((_QWORD)buf)
    {
      v77 = *(_DWORD *)buf;
      *(_DWORD *)buf += 2;
      *(_QWORD *)(a4 + 8) = v76;
      *(_QWORD *)&buf = 0;
      if (v77)
        *(_DWORD *)v76 = v77;
      else
        WTF::StringImpl::destroy(v76, v60);
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
    }
    if (v11)
    {
      sqlite3_reset(v11[1]);
      sqlite3_clear_bindings(v11[1]);
    }
    goto LABEL_113;
  }
  sqlite3_reset(v11[1]);
  sqlite3_clear_bindings(v11[1]);
  v19 = a3[1];
  *((_QWORD *)&buf + 1) = 0;
  v122 = 0;
  v124 = 0;
  LOBYTE(buf) = 0;
  LODWORD(v119) = 7;
  LOBYTE(v120) = 0;
  v123 = 8;
  WebCore::IDBServer::SQLiteIDBCursor::maybeCreateBackingStoreCursor((WebCore::IDBServer::SQLiteIDBCursor *)&v111, (WebCore::IDBServer::SQLiteIDBTransaction *)v8, v19, 0, (const WebCore::IDBKeyRangeData *)&buf);
  v20 = v111;
  if (v111)
  {
    v115 = v111;
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add((uint64_t *)&v113, (uint64_t *)(v8 + 80), (uint64_t *)&v115);
  }
  if (v123 != -1)
    ((void (*)(sqlite3_stmt ***, uint64_t *))off_1E335ACA8[v123])(&v113, &v122);
  v123 = -1;
  if ((_DWORD)v119 != -1)
    ((void (*)(sqlite3_stmt ***, char *))off_1E335ACA8[v119])(&v113, (char *)&buf + 8);
  if (!v20)
  {
LABEL_110:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a4 = 280;
    v78 = (WTF::StringImpl *)buf;
    if ((_QWORD)buf)
    {
      v79 = *(_DWORD *)buf;
      *(_DWORD *)buf += 2;
      *(_QWORD *)(a4 + 8) = v78;
      *(_QWORD *)&buf = 0;
      if (v79)
        *(_DWORD *)v78 = v79;
      else
        WTF::StringImpl::destroy(v78, v60);
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
    }
    goto LABEL_113;
  }
  do
  {
    v21 = v111;
    v22 = *((_QWORD *)v111 + 27);
    if (v22 == *((_QWORD *)v111 + 28))
    {
LABEL_168:
      __break(0xC471u);
      JUMPOUT(0x1953E2238);
    }
    v23 = *((_QWORD *)v111 + 29);
    v24 = (unsigned int *)(v23 + 120 * v22);
    if (!v24[6])
    {
      v92 = *((_QWORD *)this + 67);
      if (v92)
      {
        v93 = *(uint64_t **)(v92 + 32);
        if (v93)
        {
          v94 = a3[1];
          v95 = *((_DWORD *)v93 - 2);
          v96 = (v94 + ~(v94 << 32)) ^ ((unint64_t)(v94 + ~(v94 << 32)) >> 22);
          v97 = 9 * ((v96 + ~(v96 << 13)) ^ ((v96 + ~(v96 << 13)) >> 8));
          v98 = (v97 ^ (v97 >> 15)) + ~((v97 ^ (v97 >> 15)) << 27);
          v99 = v95 & ((v98 >> 31) ^ v98);
          v100 = &v93[9 * v99];
          v101 = *v100;
          if (*v100 != v94)
          {
            v102 = 1;
            while (v101)
            {
              v99 = (v99 + v102) & v95;
              v100 = &v93[9 * v99];
              v101 = *v100;
              ++v102;
              if (*v100 == v94)
                goto LABEL_155;
            }
            v100 = &v93[9 * *((unsigned int *)v93 - 1)];
          }
LABEL_155:
          v93 += 9 * *((unsigned int *)v93 - 1);
        }
        else
        {
          v100 = 0;
        }
        if (v100 == v93)
          v106 = 0;
        else
          v106 = v100 + 1;
        v113 = (sqlite3_stmt **)*a3;
        WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBIndexInfo&>(v106 + 7, (WTF::StringImpl *)&v113, (uint64_t)a3, (uint64_t)&buf);
        *(_QWORD *)(*((_QWORD *)this + 67) + 16) = *a3;
        *(_WORD *)a4 = 0;
      }
      else
      {
        v103 = qword_1ECE7C338;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C338, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 134217984;
          *(_QWORD *)((char *)&buf + 4) = this;
          _os_log_error_impl(&dword_1940B8000, v103, OS_LOG_TYPE_ERROR, "%p - SQLiteIDBBackingStore::clearObjectStore: m_databaseInfo is null", (uint8_t *)&buf, 0xCu);
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_WORD *)a4 = 280;
        v104 = (WTF::StringImpl *)buf;
        if ((_QWORD)buf)
        {
          v105 = *(_DWORD *)buf;
          *(_DWORD *)buf += 2;
          *(_QWORD *)(a4 + 8) = v104;
          *(_QWORD *)&buf = 0;
          if (v105)
            *(_DWORD *)v104 = v105;
          else
            WTF::StringImpl::destroy(v104, v60);
          goto LABEL_161;
        }
      }
      *(_QWORD *)(a4 + 8) = 0;
      goto LABEL_161;
    }
    v25 = *(unsigned int **)(v23 + 120 * v22 + 64);
    if (v25)
    {
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }
    buf = (unint64_t)v25;
    v27 = v23 + 120 * v22;
    v30 = *(_DWORD *)(v27 + 84);
    v28 = (unsigned int *)(v27 + 84);
    v29 = v30;
    v117 = 0;
    v118 = v30;
    if (v30)
    {
      if (v29 >> 29)
        goto LABEL_167;
      v61 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v29));
      v117 = v29;
      *((_QWORD *)&buf + 1) = v61;
      v62 = *v28;
      v24 = (unsigned int *)(v23 + 120 * v22);
      if ((_DWORD)v62)
      {
        v63 = *(_DWORD ***)(v28 - 3);
        v64 = 8 * v62;
        do
        {
          v65 = *v63;
          if (*v63)
            *v65 += 2;
          *v61++ = v65;
          ++v63;
          v64 -= 8;
          v24 = (unsigned int *)(v23 + 120 * v22);
        }
        while (v64);
      }
    }
    v31 = v23 + 120 * v22;
    v34 = *(_DWORD *)(v31 + 100);
    v32 = (unsigned int *)(v31 + 100);
    v33 = v34;
    v119 = 0;
    v120 = 0;
    v121 = v34;
    if (v34)
    {
      if (v33 >> 29)
        goto LABEL_168;
      v66 = v24;
      v67 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v33));
      v120 = v33;
      v119 = v67;
      v68 = *v32;
      v24 = v66;
      if ((_DWORD)v68)
      {
        v69 = *(_DWORD ***)(v32 - 3);
        v70 = 8 * v68;
        do
        {
          v71 = *v69;
          if (*v69)
            *v71 += 2;
          *v67++ = v71;
          ++v69;
          v70 -= 8;
          v24 = v66;
        }
        while (v70);
      }
    }
    v35 = buf;
    if ((_QWORD)buf)
    {
      do
        v36 = __ldaxr((unsigned int *)v35);
      while (__stlxr(v36 + 1, (unsigned int *)v35));
    }
    v110 = (unsigned int *)v35;
    v37 = *(uint64_t **)(*((_QWORD *)this + 67) + 32);
    if (v37)
    {
      v38 = a3[1];
      v39 = *((_DWORD *)v37 - 2);
      v40 = (v38 + ~(v38 << 32)) ^ ((unint64_t)(v38 + ~(v38 << 32)) >> 22);
      v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
      v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
      v43 = v39 & ((v42 >> 31) ^ v42);
      v44 = &v37[9 * v43];
      v45 = *v44;
      if (*v44 != v38)
      {
        v46 = 1;
        while (v45)
        {
          v43 = (v43 + v46) & v39;
          v44 = &v37[9 * v43];
          v45 = *v44;
          ++v46;
          if (*v44 == v38)
            goto LABEL_48;
        }
        v44 = &v37[9 * *((unsigned int *)v37 - 1)];
      }
LABEL_48:
      v37 += 9 * *((unsigned int *)v37 - 1);
    }
    else
    {
      v44 = 0;
    }
    v47 = v111;
    v48 = *((_QWORD *)v111 + 27);
    if (v48 == *((_QWORD *)v111 + 28))
    {
      __break(0xC471u);
      JUMPOUT(0x1953E2258);
    }
    if (v44 == v37)
      v49 = 0;
    else
      v49 = v44 + 1;
    WebCore::IDBServer::SQLiteIDBBackingStore::updateOneIndexForAddRecord((uint64_t)&v113, (uint64_t)this, v49, a3, v24, &v110, *(_QWORD *)(*((_QWORD *)v111 + 29) + 120 * v48 + 112));
    if (BYTE1(v113))
    {
      WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement(&v109, (uint64_t)this, 0xDuLL, "DELETE FROM IndexInfo WHERE id = ? AND objectStoreID = ?;",
        58);
      v50 = v109;
      if (!v109
        || sqlite3_bind_int64(v109[1], 1, *a3)
        || sqlite3_bind_int64(v50[1], 2, a3[1])
        || WebCore::SQLiteStatement::step(v50) != 101)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v53 = v115;
        *(_WORD *)a4 = 280;
        if (v53)
        {
          v54 = *(_DWORD *)v53;
          *(_DWORD *)v53 += 2;
          *(_QWORD *)(a4 + 8) = v53;
          if (v54)
            *(_DWORD *)v53 = v54;
          else
            WTF::StringImpl::destroy(v53, v52);
        }
        else
        {
          *(_QWORD *)(a4 + 8) = 0;
        }
        if (!v50)
          goto LABEL_64;
      }
      else
      {
        *(_WORD *)a4 = (_WORD)v113;
        v51 = v114;
        v114 = 0;
        *(_QWORD *)(a4 + 8) = v51;
      }
      sqlite3_reset(v50[1]);
      sqlite3_clear_bindings(v50[1]);
LABEL_64:
      v55 = 0;
      goto LABEL_69;
    }
    v55 = 1;
    if (!WebCore::IDBServer::SQLiteIDBCursor::advance(v47, 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v56 = v115;
      *(_WORD *)a4 = 280;
      if (v56)
      {
        v57 = *(_DWORD *)v56;
        *(_DWORD *)v56 += 2;
        *(_QWORD *)(a4 + 8) = v56;
        if (!v57)
        {
          WTF::StringImpl::destroy(v56, v52);
          goto LABEL_64;
        }
        v55 = 0;
        *(_DWORD *)v56 = v57;
      }
      else
      {
        v55 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
LABEL_69:
    if (v114)
    {
      if (*(_DWORD *)v114 == 2)
        WTF::StringImpl::destroy(v114, v52);
      else
        *(_DWORD *)v114 -= 2;
    }
    v110 = 0;
    if (v35)
    {
      do
      {
        v58 = __ldaxr((unsigned int *)v35);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, (unsigned int *)v35));
      if (!v59)
      {
        atomic_store(1u, (unsigned int *)v35);
        v72 = *(WTF **)(v35 + 8);
        if (v72)
        {
          *(_QWORD *)(v35 + 8) = 0;
          *(_DWORD *)(v35 + 16) = 0;
          WTF::fastFree(v72, v52);
        }
        WTF::fastFree((WTF *)v35, v52);
      }
    }
    WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&buf, v52);
  }
  while ((v55 & 1) != 0);
  v21 = v111;
  if (!v111)
    goto LABEL_113;
LABEL_161:
  WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor(v21, v60);
  WTF::fastFree(v107, v108);
LABEL_113:
  v80 = v112;
  v112 = 0;
  if (v80)
  {
    do
    {
      v81 = __ldaxr((unsigned int *)v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, (unsigned int *)v80));
    if (!v82)
    {
      atomic_store(1u, (unsigned int *)v80);
      v83 = *((unsigned int *)v80 + 5);
      if ((_DWORD)v83)
      {
        v84 = *((_QWORD *)v80 + 1);
        v85 = v84 + 16 * v83;
        do
        {
          v86 = *(unsigned int **)(v84 + 8);
          *(_QWORD *)(v84 + 8) = 0;
          if (v86)
          {
            do
            {
              v87 = __ldaxr(v86);
              v88 = v87 - 1;
            }
            while (__stlxr(v88, v86));
            if (!v88)
            {
              atomic_store(1u, v86);
              v89 = v86[6];
              if ((_DWORD)v89 != -1)
                ((void (*)(__int128 *, unsigned int *))off_1E335AE70[v89])(&buf, v86 + 2);
              v86[6] = -1;
              WTF::fastFree((WTF *)v86, v60);
            }
          }
          v84 += 16;
        }
        while (v84 != v85);
      }
      v90 = (WTF *)*((_QWORD *)v80 + 1);
      if ((WTF *)((char *)v80 + 24) != v90 && v90 != 0)
      {
        *((_QWORD *)v80 + 1) = 0;
        *((_DWORD *)v80 + 4) = 0;
        WTF::fastFree(v90, v60);
      }
      WTF::fastFree(v80, v60);
    }
  }
}

uint64_t *WebCore::IDBServer::SQLiteIDBBackingStore::infoForObjectStore(WebCore::IDBServer::SQLiteIDBBackingStore *this, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v2 = *(uint64_t **)(*((_QWORD *)this + 67) + 32);
  if (v2)
  {
    v3 = *((_DWORD *)v2 - 2);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = &v2[9 * v7];
    v9 = *v8;
    if (*v8 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v7 = (v7 + v10) & v3;
        v8 = &v2[9 * v7];
        v9 = *v8;
        ++v10;
        if (*v8 == a2)
          goto LABEL_9;
      }
      v8 = &v2[9 * *((unsigned int *)v2 - 1)];
    }
LABEL_9:
    v2 += 9 * *((unsigned int *)v2 - 1);
  }
  else
  {
    v8 = 0;
  }
  if (v8 == v2)
    return 0;
  else
    return v8 + 1;
}

BOOL WebCore::IDBServer::SQLiteIDBCursor::advance(WebCore::IDBServer::SQLiteIDBCursor *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL8 result;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;

  v5 = *((_QWORD *)this + 27);
  v4 = *((_QWORD *)this + 28);
  if (v5 == v4)
    goto LABEL_2;
  v58 = *((_QWORD *)this + 29);
  if (*(_WORD *)(v58 + 120 * v5 + 104))
    return 0;
  if (!v4)
    v4 = *((unsigned int *)this + 60);
  v59 = v58 + 120 * v4;
  *((_BYTE *)this + 256) = *(_BYTE *)(v59 - 120);
  v60 = *((unsigned int *)this + 70);
  v61 = *(unsigned int *)(v59 - 96);
  if ((_DWORD)v60 == -1)
  {
    if ((_DWORD)v61 == -1)
      goto LABEL_2;
LABEL_85:
    v62 = (char *)this + 264;
    ((void (*)(char **))off_1E335AD98[v61])(&v62);
    goto LABEL_2;
  }
  if ((_DWORD)v61 != -1)
    goto LABEL_85;
  ((void (*)(char **, char *))off_1E335ACA8[v60])(&v62, (char *)this + 264);
  *((_DWORD *)this + 70) = -1;
LABEL_2:
  v6 = *((_QWORD *)this + 27);
  v7 = *((_QWORD *)this + 28);
  v8 = v6;
  do
  {
    v9 = *((_QWORD *)this + 28);
    if (v8 == v9)
      goto LABEL_32;
    v10 = *((_QWORD *)this + 29);
    v11 = v10 + 120 * v8;
    if (*(_BYTE *)(v11 + 104) || *(_BYTE *)(v10 + 120 * v8 + 105))
      goto LABEL_30;
    v12 = WebCore::IDBKeyData::size((WebCore::IDBKeyData *)v11);
    v13 = WebCore::IDBKeyData::size((WebCore::IDBKeyData *)(v11 + 32));
    v15 = *(unsigned int *)(v11 + 84);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = *(uint64_t **)(v11 + 72);
      v18 = 8 * v15;
      do
      {
        v19 = *v17;
        if (*v17)
          LODWORD(v19) = *(_DWORD *)(v19 + 4) << ((*(_DWORD *)(v19 + 16) & 4) == 0);
        v16 += v19;
        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
    else
    {
      v16 = 0;
    }
    v20 = *(unsigned int *)(v11 + 100);
    if ((_DWORD)v20)
    {
      v21 = *(uint64_t **)(v11 + 88);
      v22 = 8 * v20;
      do
      {
        v23 = *v21;
        if (*v21)
          LODWORD(v23) = *(_DWORD *)(v23 + 4) << ((*(_DWORD *)(v23 + 16) & 4) == 0);
        v16 += v23;
        ++v21;
        v22 -= 8;
      }
      while (v22);
    }
    v24 = *(_QWORD *)(v11 + 64);
    if (v24)
      v24 = *(unsigned int *)(v24 + 20);
    *((_QWORD *)this + 31) -= v13 + v12 + v16 + v24;
    v25 = *((_QWORD *)this + 27);
    if (v25 == *((_QWORD *)this + 28))
    {
LABEL_89:
      __break(0xC471u);
      JUMPOUT(0x1953E27C8);
    }
    v26 = (unsigned int *)(*((_QWORD *)this + 29) + 120 * v25);
    WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(v26 + 16), v14);
    v27 = v26[14];
    if ((_DWORD)v27 != -1)
      ((void (*)(char **, unsigned int *))off_1E335ACA8[v27])(&v62, v26 + 10);
    v26[14] = -1;
    v28 = v26[6];
    if ((_DWORD)v28 != -1)
      ((void (*)(char **, unsigned int *))off_1E335ACA8[v28])(&v62, v26 + 2);
    v26[6] = -1;
    v29 = *((_QWORD *)this + 27);
    if (v29 == *((unsigned int *)this + 60) - 1)
      v8 = 0;
    else
      v8 = v29 + 1;
    *((_QWORD *)this + 27) = v8;
    --a2;
  }
  while (a2);
  v9 = *((_QWORD *)this + 28);
LABEL_30:
  v57 = v8 == v9;
  v8 = v9;
  if (!v57)
    return 1;
LABEL_32:
  if (v6 == v7)
    v30 = a2;
  else
    v30 = a2 + 1;
  if (v30)
  {
    v31 = v8;
    while (1)
    {
      if (v31 == v8)
        goto LABEL_67;
      v32 = *((_QWORD *)this + 29) + 120 * v31;
      *((_BYTE *)this + 256) = *(_BYTE *)v32;
      v33 = *((unsigned int *)this + 70);
      v34 = *(unsigned int *)(v32 + 24);
      if ((_DWORD)v33 == -1)
      {
        if ((_DWORD)v34 != -1)
        {
LABEL_42:
          v62 = (char *)this + 264;
          ((void (*)(char **, char *, uint64_t))off_1E335AD98[v34])(&v62, (char *)this + 264, v32 + 8);
        }
      }
      else
      {
        if ((_DWORD)v34 != -1)
          goto LABEL_42;
        ((void (*)(char **, char *))off_1E335ACA8[v33])(&v62, (char *)this + 264);
        *((_DWORD *)this + 70) = -1;
      }
      v35 = *((_QWORD *)this + 27);
      if (v35 == *((_QWORD *)this + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x1953E2808);
      }
      v36 = *((_QWORD *)this + 29) + 120 * v35;
      v37 = WebCore::IDBKeyData::size((WebCore::IDBKeyData *)v36);
      v38 = WebCore::IDBKeyData::size((WebCore::IDBKeyData *)(v36 + 32));
      v40 = *(unsigned int *)(v36 + 84);
      if ((_DWORD)v40)
      {
        v41 = 0;
        v42 = *(uint64_t **)(v36 + 72);
        v43 = 8 * v40;
        do
        {
          v44 = *v42;
          if (*v42)
            LODWORD(v44) = *(_DWORD *)(v44 + 4) << ((*(_DWORD *)(v44 + 16) & 4) == 0);
          v41 += v44;
          ++v42;
          v43 -= 8;
        }
        while (v43);
      }
      else
      {
        v41 = 0;
      }
      v45 = *(unsigned int *)(v36 + 100);
      if ((_DWORD)v45)
      {
        v46 = *(uint64_t **)(v36 + 88);
        v47 = 8 * v45;
        do
        {
          v48 = *v46;
          if (*v46)
            LODWORD(v48) = *(_DWORD *)(v48 + 4) << ((*(_DWORD *)(v48 + 16) & 4) == 0);
          v41 += v48;
          ++v46;
          v47 -= 8;
        }
        while (v47);
      }
      v49 = *(_QWORD *)(v36 + 64);
      if (v49)
        v49 = *(unsigned int *)(v49 + 20);
      *((_QWORD *)this + 31) -= v38 + v37 + v41 + v49;
      v50 = *((_QWORD *)this + 27);
      if (v50 == *((_QWORD *)this + 28))
        goto LABEL_89;
      v51 = (unsigned int *)(*((_QWORD *)this + 29) + 120 * v50);
      WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(v51 + 16), v39);
      v52 = v51[14];
      if ((_DWORD)v52 != -1)
        ((void (*)(char **, unsigned int *))off_1E335ACA8[v52])(&v62, v51 + 10);
      v51[14] = -1;
      v53 = v51[6];
      if ((_DWORD)v53 != -1)
        ((void (*)(char **, unsigned int *))off_1E335ACA8[v53])(&v62, v51 + 2);
      v51[6] = -1;
      v54 = *((_QWORD *)this + 27);
      if (v54 == *((unsigned int *)this + 60) - 1)
        v55 = 0;
      else
        v55 = v54 + 1;
      *((_QWORD *)this + 27) = v55;
LABEL_67:
      result = WebCore::IDBServer::SQLiteIDBCursor::fetch(this);
      if (result)
      {
        v31 = *((_QWORD *)this + 27);
        v8 = *((_QWORD *)this + 28);
        if (v31 == v8)
        {
          __break(0xC471u);
          JUMPOUT(0x1953E27E8);
        }
        v57 = *(_BYTE *)(*((_QWORD *)this + 29) + 120 * v31 + 104) || --v30 == 0;
        if (!v57)
          continue;
      }
      return result;
    }
  }
  return 1;
}

WebCore::IDBKeyData *WebCore::IDBServer::SQLiteIDBBackingStore::uncheckedPutIndexKey(uint64_t a1, uint64_t a2, uint64_t a3, WebCore *a4, uint64_t a5, sqlite3_int64 a6)
{
  uint64_t v8;
  void *v9;
  WebCore::IDBKeyData *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char v17;
  _DWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  WTF::StringImpl *v22;
  WebCore::IDBKeyData *v23;
  WebCore::IDBKeyData *v24;
  WTF *v25;
  sqlite3_stmt **v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  WTF::StringImpl *v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  int v46;
  WTF *v47;
  WebCore *v49;
  WebCore *v50;
  sqlite3_int64 v51;
  sqlite3_int64 v52;
  WTF *v53;
  sqlite3_stmt **v54;
  sqlite3_stmt **v55;
  uint64_t v56;
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  WTF::StringImpl *v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  sqlite3_stmt *v67;
  sqlite3_stmt *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  int v76;
  WTF *v77;
  unsigned int v78;
  unsigned int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  WTF *v88;
  WTF *v90;
  WebCore::IDBKeyData *result;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  WebCore::IDBServer::SQLiteIDBBackingStore *v96;
  const WebCore::IDBResourceIdentifier *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v105;
  _QWORD v106[2];
  unsigned int v107;
  WTF *v108;
  uint64_t v109;
  WebCore::IDBKeyData *v110;
  uint64_t v111;
  sqlite3_stmt **v112;
  sqlite3_stmt **v113;
  char v114;

  v110 = 0;
  v111 = 0;
  if (*(_BYTE *)(a3 + 49))
  {
    v108 = 0;
    v109 = 0;
    v105 = (WTF::StringImpl *)&v108;
    v106[0] = &v108;
    v8 = *(unsigned int *)(a5 + 32);
    if ((_DWORD)v8 != -1)
    {
      v113 = &v105;
      ((void (*)(sqlite3_stmt ***, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore8IndexKey10multiEntryEvE3__0JZNKS9_10multiEntryEvE3__1ZNKS9_10multiEntryEvE3__2EEEEEJRKNS0_6__implIJDnNS8_10IDBKeyDataENS6_6VectorISG_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix
                                                       + v8))(&v113, a5);
      v10 = v110;
      if (HIDWORD(v111))
      {
        v11 = 32 * HIDWORD(v111);
        v12 = (_DWORD *)((char *)v110 + 24);
        do
        {
          v13 = *v12;
          if ((_DWORD)v13 != -1)
            ((void (*)(WTF::StringImpl **, _DWORD *))off_1E335ACA8[v13])(&v105, v12 - 4);
          *v12 = -1;
          v12 += 8;
          v11 -= 32;
        }
        while (v11);
        v10 = v110;
      }
      if (v10)
      {
        v110 = 0;
        LODWORD(v111) = 0;
        WTF::fastFree(v10, v9);
      }
      v110 = v108;
      v111 = v109;
      goto LABEL_21;
    }
LABEL_185:
    v96 = (WebCore::IDBServer::SQLiteIDBBackingStore *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::IDBKeyData *)WebCore::IDBServer::SQLiteIDBBackingStore::deleteIndex(v96, v97, v98, v99);
  }
  v14 = *(unsigned int *)(a5 + 32);
  if ((_DWORD)v14 == -1)
    goto LABEL_185;
  v108 = (WTF *)&v113;
  ((void (*)(WTF::StringImpl **__return_ptr, WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore8IndexKey8asOneKeyEvE3__0JZNKS9_8asOneKeyEvE3__1ZNKS9_8asOneKeyEvE3__2EEEEEJRKNS0_6__implIJDnNS8_10IDBKeyDataENS6_6VectorISG_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v14])(&v105, &v108, a5);
  if (HIDWORD(v111) == (_DWORD)v111)
  {
    v15 = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v110, HIDWORD(v111) + 1, (unint64_t)&v105);
    v16 = (char *)v110 + 32 * HIDWORD(v111);
    v17 = *(_BYTE *)v15;
    v16[8] = 0;
    v9 = v16 + 8;
    *v16 = v17;
    *((_DWORD *)v16 + 6) = -1;
    v18 = v16 + 24;
    v19 = *(unsigned int *)(v15 + 24);
    if ((_DWORD)v19 == -1)
      goto LABEL_19;
    v20 = (_QWORD *)(v15 + 8);
  }
  else
  {
    v21 = (char *)v110 + 32 * HIDWORD(v111);
    *v21 = (char)v105;
    v21[8] = 0;
    v9 = v21 + 8;
    *((_DWORD *)v21 + 6) = -1;
    v18 = v21 + 24;
    v19 = v107;
    if (v107 == -1)
      goto LABEL_19;
    v20 = v106;
  }
  ((void (*)(WTF **, void *, _QWORD *))off_1E335ADE0[v19])(&v108, v9, v20);
  *v18 = v19;
LABEL_19:
  ++HIDWORD(v111);
  if (v107 != -1)
    ((void (*)(WTF **, _QWORD *))off_1E335ACA8[v107])(&v108, v106);
LABEL_21:
  if (!*(_BYTE *)(a3 + 48))
  {
LABEL_86:
    if (HIDWORD(v111))
    {
      v49 = v110;
      v50 = (WebCore::IDBKeyData *)((char *)v110 + 32 * HIDWORD(v111));
      while (1)
      {
        if (WebCore::IDBKeyData::isValid(v49))
        {
          v52 = *(_QWORD *)a3;
          v51 = *(_QWORD *)(a3 + 8);
          WebCore::serializeIDBKeyData(v49, (uint64_t *)&v108);
          v53 = v108;
          if (v108)
          {
            WebCore::serializeIDBKeyData(a4, (uint64_t *)&v113);
            v54 = v113;
            if (v113)
            {
              WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement(&v112, a2, 0x10uLL, "INSERT INTO IndexRecords VALUES (?, ?, CAST(? AS TEXT), CAST(? AS TEXT), ?);",
                77);
              v55 = v112;
              if (!v112 || sqlite3_bind_int64(v112[1], 1, v52) || sqlite3_bind_int64(v55[1], 2, v51))
                goto LABEL_105;
              if (*((_DWORD *)v53 + 5))
              {
                v56 = *(_QWORD *)(*((_QWORD *)v53 + 1) + 8);
                v57 = *(unsigned int *)(v56 + 24);
                if ((_DWORD)v57 == -1)
                  goto LABEL_185;
                v105 = (WTF::StringImpl *)&v114;
                v58 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v57])(&v105, v56 + 8);
              }
              else
              {
                v58 = 0;
              }
              if (sqlite3_bind_blob(v55[1], 3, v58, *((_DWORD *)v53 + 12), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
              {
                goto LABEL_105;
              }
              if (*((_DWORD *)v54 + 5))
              {
                v59 = *((_QWORD *)v54[1] + 1);
                v60 = *(unsigned int *)(v59 + 24);
                if ((_DWORD)v60 == -1)
                  goto LABEL_185;
                v105 = (WTF::StringImpl *)&v114;
                v61 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v60])(&v105, v59 + 8);
              }
              else
              {
                v61 = 0;
              }
              if (sqlite3_bind_blob(v55[1], 4, v61, *((_DWORD *)v54 + 12), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL)|| sqlite3_bind_int64(v55[1], 5, a6)|| WebCore::SQLiteStatement::step(v55) != 101)
              {
LABEL_105:
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v62 = v105;
                *(_WORD *)a1 = 280;
                if (v62)
                {
                  v63 = *(_DWORD *)v62;
                  *(_DWORD *)v62 += 2;
                  *(_QWORD *)(a1 + 8) = v62;
                  if (v63)
                    *(_DWORD *)v62 = v63;
                  else
                    WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v9);
                }
                else
                {
                  *(_QWORD *)(a1 + 8) = 0;
                }
                if (v55)
                {
                  sqlite3_reset(v55[1]);
                  sqlite3_clear_bindings(v55[1]);
                }
              }
              else
              {
                sqlite3_reset(v55[1]);
                sqlite3_clear_bindings(v55[1]);
                *(_WORD *)a1 = 0;
                *(_QWORD *)(a1 + 8) = 0;
              }
              v113 = 0;
              do
              {
                v64 = __ldaxr((unsigned int *)v54);
                v65 = v64 - 1;
              }
              while (__stlxr(v65, (unsigned int *)v54));
              if (!v65)
              {
                atomic_store(1u, (unsigned int *)v54);
                v66 = *((unsigned int *)v54 + 5);
                if ((_DWORD)v66)
                {
                  v67 = v54[1];
                  v68 = (sqlite3_stmt *)((char *)v67 + 16 * v66);
                  do
                  {
                    v69 = (unsigned int *)*((_QWORD *)v67 + 1);
                    *((_QWORD *)v67 + 1) = 0;
                    if (v69)
                    {
                      do
                      {
                        v70 = __ldaxr(v69);
                        v71 = v70 - 1;
                      }
                      while (__stlxr(v71, v69));
                      if (!v71)
                      {
                        atomic_store(1u, v69);
                        v72 = v69[6];
                        if ((_DWORD)v72 != -1)
                          ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335AE70[v72])(&v105, v69 + 2);
                        v69[6] = -1;
                        WTF::fastFree((WTF *)v69, v9);
                      }
                    }
                    v67 = (sqlite3_stmt *)((char *)v67 + 16);
                  }
                  while (v67 != v68);
                }
                v90 = v54[1];
                if (v54 + 3 != (sqlite3_stmt **)v90 && v90 != 0)
                {
                  v54[1] = 0;
                  *((_DWORD *)v54 + 4) = 0;
                  WTF::fastFree(v90, v9);
                }
                WTF::fastFree((WTF *)v54, v9);
              }
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v75 = v105;
              *(_WORD *)a1 = 280;
              if (v75)
              {
                v76 = *(_DWORD *)v75;
                *(_DWORD *)v75 += 2;
                *(_QWORD *)(a1 + 8) = v75;
                if (v76)
                  *(_DWORD *)v75 = v76;
                else
                  WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v9);
              }
              else
              {
                *(_QWORD *)(a1 + 8) = 0;
              }
            }
            v77 = v108;
            v108 = 0;
            if (v77)
            {
              do
              {
                v78 = __ldaxr((unsigned int *)v77);
                v79 = v78 - 1;
              }
              while (__stlxr(v79, (unsigned int *)v77));
              if (!v79)
              {
                atomic_store(1u, (unsigned int *)v77);
                v81 = *((unsigned int *)v77 + 5);
                if ((_DWORD)v81)
                {
                  v82 = *((_QWORD *)v77 + 1);
                  v83 = v82 + 16 * v81;
                  do
                  {
                    v84 = *(unsigned int **)(v82 + 8);
                    *(_QWORD *)(v82 + 8) = 0;
                    if (v84)
                    {
                      do
                      {
                        v85 = __ldaxr(v84);
                        v86 = v85 - 1;
                      }
                      while (__stlxr(v86, v84));
                      if (!v86)
                      {
                        atomic_store(1u, v84);
                        v87 = v84[6];
                        if ((_DWORD)v87 != -1)
                          ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335AE70[v87])(&v105, v84 + 2);
                        v84[6] = -1;
                        WTF::fastFree((WTF *)v84, v9);
                      }
                    }
                    v82 += 16;
                  }
                  while (v82 != v83);
                }
                v88 = (WTF *)*((_QWORD *)v77 + 1);
                if ((WTF *)((char *)v77 + 24) != v88 && v88 != 0)
                {
                  *((_QWORD *)v77 + 1) = 0;
                  *((_DWORD *)v77 + 4) = 0;
                  WTF::fastFree(v88, v9);
                }
                WTF::fastFree(v77, v9);
              }
            }
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *(_WORD *)a1 = 280;
            v73 = v105;
            if (v105)
            {
              v74 = *(_DWORD *)v105;
              *(_DWORD *)v105 += 2;
              *(_QWORD *)(a1 + 8) = v73;
              v105 = 0;
              if (v74)
                *(_DWORD *)v73 = v74;
              else
                WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v9);
            }
            else
            {
              *(_QWORD *)(a1 + 8) = 0;
            }
          }
          if (*(_BYTE *)(a1 + 1))
            goto LABEL_170;
          v80 = *(WTF::StringImpl **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          if (v80)
          {
            if (*(_DWORD *)v80 == 2)
              WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v9);
            else
              *(_DWORD *)v80 -= 2;
          }
        }
        v49 = (WebCore *)((char *)v49 + 32);
        if (v49 == v50)
          goto LABEL_169;
      }
    }
    goto LABEL_169;
  }
  if (!HIDWORD(v111))
  {
LABEL_169:
    *(_WORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_170;
  }
  v22 = 0;
  v23 = v110;
  v24 = (WebCore::IDBKeyData *)((char *)v110 + 32 * HIDWORD(v111));
  while (!WebCore::IDBKeyData::isValid(v23))
  {
LABEL_60:
    v23 = (WebCore::IDBKeyData *)((char *)v23 + 32);
    if (v23 == v24)
    {
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v9);
        else
          *(_DWORD *)v22 -= 2;
      }
      goto LABEL_86;
    }
  }
  WebCore::serializeIDBKeyData(v23, (uint64_t *)&v108);
  v25 = v108;
  if (!v108)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v30 = v105;
    if (v105)
    {
      v43 = *(_DWORD *)v105;
      *(_DWORD *)v105 += 2;
      v105 = 0;
      if (v43)
        *(_DWORD *)v30 = v43;
      else
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v9);
    }
    v32 = 0;
    v33 = 280;
LABEL_54:
    if (!v22)
      goto LABEL_57;
    goto LABEL_55;
  }
  WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement(&v113, a2, 0xFuLL, "SELECT rowid FROM IndexRecords WHERE indexID = ? AND key = CAST(? AS TEXT);",
    76);
  v26 = v113;
  if (v113 && !sqlite3_bind_int64(v113[1], 1, *(_QWORD *)a3))
  {
    if (*((_DWORD *)v25 + 5))
    {
      v27 = *(_QWORD *)(*((_QWORD *)v25 + 1) + 8);
      v28 = *(unsigned int *)(v27 + 24);
      if ((_DWORD)v28 == -1)
        goto LABEL_185;
      v105 = (WTF::StringImpl *)&v112;
      v29 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v28])(&v105, v27 + 8);
    }
    else
    {
      v29 = 0;
    }
    if (!sqlite3_bind_blob(v26[1], 2, v29, *((_DWORD *)v25 + 12), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
    {
      v44 = WebCore::SQLiteStatement::step(v26);
      v32 = 0;
      v30 = 0;
      if (v44)
      {
        if (v44 == 100)
        {
          v30 = 0;
          v33 = 0;
          v32 = 1;
        }
        else
        {
          v33 = 0;
          if (v44 != 101)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v30 = v105;
            if (v105)
            {
              v46 = *(_DWORD *)v105;
              *(_DWORD *)v105 += 2;
              v105 = 0;
              if (v46)
                *(_DWORD *)v30 = v46;
              else
                WTF::StringImpl::destroy(v30, v45);
            }
            v32 = 0;
            v33 = 280;
          }
        }
      }
      else
      {
        v33 = 0;
      }
      goto LABEL_36;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v30 = v105;
  if (v105)
  {
    v31 = *(_DWORD *)v105;
    *(_DWORD *)v105 += 2;
    v105 = 0;
    if (v31)
      *(_DWORD *)v30 = v31;
    else
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v9);
  }
  v32 = 0;
  v33 = 280;
  if (v26)
  {
LABEL_36:
    sqlite3_reset(v26[1]);
    sqlite3_clear_bindings(v26[1]);
  }
  v108 = 0;
  do
  {
    v34 = __ldaxr((unsigned int *)v25);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, (unsigned int *)v25));
  if (v35)
    goto LABEL_54;
  atomic_store(1u, (unsigned int *)v25);
  v36 = *((unsigned int *)v25 + 5);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v25 + 1);
    v38 = v37 + 16 * v36;
    do
    {
      v39 = *(unsigned int **)(v37 + 8);
      *(_QWORD *)(v37 + 8) = 0;
      if (v39)
      {
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
        {
          v100 = v38;
          v101 = v37;
          atomic_store(1u, v39);
          v42 = v39[6];
          if ((_DWORD)v42 != -1)
            ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335AE70[v42])(&v105, v39 + 2);
          v39[6] = -1;
          WTF::fastFree((WTF *)v39, v9);
          v38 = v100;
          v37 = v101;
        }
      }
      v37 += 16;
    }
    while (v37 != v38);
  }
  v47 = (WTF *)*((_QWORD *)v25 + 1);
  if ((WTF *)((char *)v25 + 24) != v47 && v47 != 0)
  {
    *((_QWORD *)v25 + 1) = 0;
    *((_DWORD *)v25 + 4) = 0;
    WTF::fastFree(v47, v9);
  }
  WTF::fastFree(v25, v9);
  if (v22)
  {
LABEL_55:
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v22 -= 2;
  }
LABEL_57:
  if (v33 > 0xFF)
  {
    *(_WORD *)a1 = v33;
    *(_QWORD *)(a1 + 8) = v30;
    goto LABEL_170;
  }
  if (!v32)
  {
    v22 = v30;
    goto LABEL_60;
  }
  *(_WORD *)a1 = 281;
  *(_QWORD *)(a1 + 8) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v30 -= 2;
  }
LABEL_170:
  result = v110;
  if (HIDWORD(v111))
  {
    v93 = 32 * HIDWORD(v111);
    v94 = (_DWORD *)((char *)v110 + 24);
    do
    {
      v95 = *v94;
      if ((_DWORD)v95 != -1)
        ((void (*)(WTF::StringImpl **, _DWORD *))off_1E335ACA8[v95])(&v105, v94 - 4);
      *v94 = -1;
      v94 += 8;
      v93 -= 32;
    }
    while (v93);
    result = v110;
  }
  if (result)
  {
    v110 = 0;
    LODWORD(v111) = 0;
    return (WebCore::IDBKeyData *)WTF::fastFree(result, v9);
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::deleteIndex@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, sqlite3_int64 a3@<X2>, WTF::StringImpl *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  sqlite3_stmt **v12;
  uint64_t *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *result;
  int v24;
  WTF::StringImpl *v25;
  int v26;
  _QWORD *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v9 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (v9
    && (v10 = v9[2]) != 0
    && (v11 = *(_QWORD *)(v10 + 64)) != 0
    && *(_BYTE *)(v11 + 8)
    && *(_BYTE *)(v10 + 16) == 2)
  {
    WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v29, (uint64_t)this, 0xDuLL, "DELETE FROM IndexInfo WHERE id = ? AND objectStoreID = ?;",
      58);
    v12 = (sqlite3_stmt **)v29;
    if (v29)
    {
      if (!sqlite3_bind_int64(*((sqlite3_stmt **)v29 + 1), 1, (sqlite3_int64)a4)
        && !sqlite3_bind_int64(v12[1], 2, a3)
        && WebCore::SQLiteStatement::step(v12) == 101)
      {
        sqlite3_reset(v12[1]);
        sqlite3_clear_bindings(v12[1]);
        WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v29, (uint64_t)this, 0x13uLL, "DELETE FROM IndexRecords WHERE indexID = ?;",
          44);
        v12 = (sqlite3_stmt **)v29;
        if (v29)
        {
          if (!sqlite3_bind_int64(*((sqlite3_stmt **)v29 + 1), 1, (sqlite3_int64)a4)
            && WebCore::SQLiteStatement::step(v12) == 101)
          {
            sqlite3_reset(v12[1]);
            sqlite3_clear_bindings(v12[1]);
            v13 = *(uint64_t **)(*((_QWORD *)this + 67) + 32);
            if (v13)
            {
              v14 = *((_DWORD *)v13 - 2);
              v15 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
              v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
              v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
              v18 = v14 & ((v17 >> 31) ^ v17);
              v19 = &v13[9 * v18];
              v20 = *v19;
              if (*v19 != a3)
              {
                v21 = 1;
                while (v20)
                {
                  v18 = (v18 + v21) & v14;
                  v19 = &v13[9 * v18];
                  v20 = *v19;
                  ++v21;
                  if (*v19 == a3)
                    goto LABEL_34;
                }
                v19 = &v13[9 * *((unsigned int *)v13 - 1)];
              }
LABEL_34:
              v13 += 9 * *((unsigned int *)v13 - 1);
            }
            else
            {
              v19 = 0;
            }
            if (v19 == v13)
              v27 = 0;
            else
              v27 = v19 + 1;
            v29 = a4;
            result = (WTF::StringImpl *)WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::remove(v27 + 7, (WTF::StringImpl *)&v29);
            *(_WORD *)a5 = 0;
            goto LABEL_39;
          }
        }
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a5 = 280;
    result = v28;
    if (v28)
    {
      v26 = *(_DWORD *)v28;
      *(_DWORD *)v28 += 2;
      *(_QWORD *)(a5 + 8) = v28;
      if (v26)
        *(_DWORD *)v28 = v26;
      else
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v28, v25);
    }
    else
    {
      *(_QWORD *)(a5 + 8) = 0;
    }
    if (v12)
    {
      sqlite3_reset(v12[1]);
      return (WTF::StringImpl *)sqlite3_clear_bindings(v12[1]);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a5 = 280;
    result = v29;
    if (!v29)
    {
LABEL_39:
      *(_QWORD *)(a5 + 8) = 0;
      return result;
    }
    v24 = *(_DWORD *)v29;
    *(_DWORD *)v29 += 2;
    *(_QWORD *)(a5 + 8) = result;
    v29 = 0;
    if (v24)
      *(_DWORD *)result = v24;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::renameIndex@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, WTF::StringImpl **a3@<X4>, sqlite3_int64 a4@<X2>, sqlite3_int64 a5@<X3>, uint64_t a6@<X8>)
{
  uint64_t v7;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *result;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  sqlite3_stmt **v34;
  WTF::StringImpl *v35;
  char *v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;

  v7 = *(_QWORD *)(*((_QWORD *)this + 67) + 32);
  if (!v7)
    goto LABEL_17;
  v12 = *(_DWORD *)(v7 - 8);
  v13 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = (uint64_t *)(v7 + 72 * v16);
  v18 = *v17;
  if (*v17 != a4)
  {
    v19 = 1;
    while (v18)
    {
      v16 = (v16 + v19) & v12;
      v17 = (uint64_t *)(v7 + 72 * v16);
      v18 = *v17;
      ++v19;
      if (*v17 == a4)
        goto LABEL_8;
    }
    v17 = (uint64_t *)(v7 + 72 * *(unsigned int *)(v7 - 4));
  }
  if (v17 == (uint64_t *)(v7 + 72 * *(unsigned int *)(v7 - 4)))
    goto LABEL_17;
  v20 = v17[8];
  if (!v20)
    goto LABEL_17;
LABEL_8:
  v21 = *(_DWORD *)(v20 - 8);
  v22 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
  v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
  v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
  v25 = v21 & ((v24 >> 31) ^ v24);
  v26 = *(_QWORD *)(v20 + (v25 << 6));
  if (v26 != a5)
  {
    v27 = 1;
    while (v26)
    {
      v25 = ((_DWORD)v25 + v27) & v21;
      v26 = *(_QWORD *)(v20 + ((unint64_t)v25 << 6));
      ++v27;
      if (v26 == a5)
        goto LABEL_16;
    }
    v25 = *(unsigned int *)(v20 - 4);
  }
LABEL_16:
  if (v25 != *(_DWORD *)(v20 - 4)
    && (v31 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), *(_QWORD *)a2, *((_QWORD *)a2 + 1))) != 0&& (v32 = v31[2]) != 0&& (v33 = *(_QWORD *)(v32 + 64)) != 0&& *(_BYTE *)(v33 + 8)&& *(_BYTE *)(v32 + 16) == 2)
  {
    WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v44, (uint64_t)this, 0x14uLL, "UPDATE IndexInfo SET name = ? WHERE objectStoreID = ? AND id = ?;",
      66);
    v34 = (sqlite3_stmt **)v44;
    if (v44)
    {
      v35 = *a3;
      if (*a3)
      {
        v36 = (char *)*((_QWORD *)v35 + 1);
        v37 = *((unsigned int *)v35 + 1) | ((unint64_t)((*((_DWORD *)v35 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v36 = 0;
        v37 = 0x100000000;
      }
      if (!WebCore::SQLiteStatement::bindText((uint64_t)v44, 1, v36, v37)
        && !sqlite3_bind_int64(v34[1], 2, a4)
        && !sqlite3_bind_int64(v34[1], 3, a5)
        && WebCore::SQLiteStatement::step(v34) == 101)
      {
        sqlite3_reset(v34[1]);
        sqlite3_clear_bindings(v34[1]);
        v39 = (WTF::StringImpl **)(v20 + (v25 << 6) + 24);
        v40 = *a3;
        if (*a3)
          *(_DWORD *)v40 += 2;
        result = *v39;
        *v39 = v40;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
        *(_WORD *)a6 = 0;
        goto LABEL_39;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a6 = 280;
    result = v43;
    if (v43)
    {
      v42 = *(_DWORD *)v43;
      *(_DWORD *)v43 += 2;
      *(_QWORD *)(a6 + 8) = v43;
      if (v42)
        *(_DWORD *)v43 = v42;
      else
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v43, v41);
    }
    else
    {
      *(_QWORD *)(a6 + 8) = 0;
    }
    if (v34)
    {
      sqlite3_reset(v34[1]);
      return (WTF::StringImpl *)sqlite3_clear_bindings(v34[1]);
    }
  }
  else
  {
LABEL_17:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a6 = 280;
    result = v44;
    if (!v44)
    {
LABEL_39:
      *(_QWORD *)(a6 + 8) = 0;
      return result;
    }
    v30 = *(_DWORD *)v44;
    *(_DWORD *)v44 += 2;
    *(_QWORD *)(a6 + 8) = result;
    v44 = 0;
    if (v30)
      *(_DWORD *)result = v30;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
  }
  return result;
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::keyExistsInObjectStore@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, const WebCore::IDBKeyData *a3@<X3>, BOOL *a4@<X4>, sqlite3_int64 a5@<X2>, uint64_t a6@<X8>)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  sqlite3_stmt **v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  WTF::StringImpl *v19;
  uint64_t result;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  WTF *v37;
  WebCore::IDBServer::SQLiteIDBBackingStore *v39;
  WebCore::IDBServer::SQLiteIDBTransaction *v40;
  uint64_t v41;
  const WebCore::IDBKeyData *v42;
  sqlite3_stmt **v43;
  uint64_t v44;
  char v45;
  WTF::StringImpl *v46;

  *a4 = 0;
  v11 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (!v11
    || (v12 = v11[2]) == 0
    || (v13 = *(_QWORD *)(v12 + 64)) == 0
    || !*(_BYTE *)(v13 + 8)
    || (WebCore::serializeIDBKeyData(a3, &v44), (v14 = v44) == 0))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a6 = 280;
    result = (uint64_t)v46;
    if (v46)
    {
      v32 = *(_DWORD *)v46;
      *(_DWORD *)v46 += 2;
      *(_QWORD *)(a6 + 8) = result;
      v46 = 0;
      if (v32)
        *(_DWORD *)result = v32;
      else
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v31);
    }
    else
    {
      *(_QWORD *)(a6 + 8) = 0;
    }
    return result;
  }
  WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement(&v43, (uint64_t)this, 0x15uLL, "SELECT key FROM Records WHERE objectStoreID = ? AND key = CAST(? AS TEXT) LIMIT 1;",
    83);
  v15 = v43;
  if (v43 && !sqlite3_bind_int64(v43[1], 1, a5))
  {
    if (*(_DWORD *)(v14 + 20))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8);
      v17 = *(unsigned int *)(v16 + 24);
      if ((_DWORD)v17 == -1)
      {
        v39 = (WebCore::IDBServer::SQLiteIDBBackingStore *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::IDBServer::SQLiteIDBBackingStore::deleteRecord(v39, v40, v41, v42);
      }
      v46 = (WTF::StringImpl *)&v45;
      v18 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v17])(&v46, v16 + 8);
    }
    else
    {
      v18 = 0;
    }
    if (!sqlite3_bind_blob(v15[1], 2, v18, *(_DWORD *)(v14 + 48), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
    {
      v33 = WebCore::SQLiteStatement::step(v15);
      if (v33 != 101)
      {
        if (v33 == 100)
        {
          *a4 = 1;
        }
        else if (v33)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_WORD *)a6 = 280;
          v35 = v46;
          if (v46)
          {
            v36 = *(_DWORD *)v46;
            *(_DWORD *)v46 += 2;
            *(_QWORD *)(a6 + 8) = v35;
            v46 = 0;
            if (v36)
              *(_DWORD *)v35 = v36;
            else
              WTF::StringImpl::destroy(v35, v34);
            goto LABEL_16;
          }
LABEL_45:
          *(_QWORD *)(a6 + 8) = 0;
LABEL_16:
          sqlite3_reset(v15[1]);
          result = sqlite3_clear_bindings(v15[1]);
          goto LABEL_17;
        }
      }
      *(_WORD *)a6 = 0;
      goto LABEL_45;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a6 = 280;
  result = (uint64_t)v46;
  if (v46)
  {
    v21 = *(_DWORD *)v46;
    *(_DWORD *)v46 += 2;
    *(_QWORD *)(a6 + 8) = result;
    v46 = 0;
    if (v21)
      *(_DWORD *)result = v21;
    else
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
  }
  else
  {
    *(_QWORD *)(a6 + 8) = 0;
  }
  if (v15)
    goto LABEL_16;
LABEL_17:
  v44 = 0;
  do
  {
    v22 = __ldaxr((unsigned int *)v14);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, (unsigned int *)v14));
  if (!v23)
  {
    atomic_store(1u, (unsigned int *)v14);
    v24 = *(unsigned int *)(v14 + 20);
    if ((_DWORD)v24)
    {
      v25 = *(_QWORD *)(v14 + 8);
      v26 = v25 + 16 * v24;
      do
      {
        v27 = *(unsigned int **)(v25 + 8);
        *(_QWORD *)(v25 + 8) = 0;
        if (v27)
        {
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v27);
            v30 = v27[6];
            if ((_DWORD)v30 != -1)
              ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335AE70[v30])(&v46, v27 + 2);
            v27[6] = -1;
            WTF::fastFree((WTF *)v27, v19);
          }
        }
        v25 += 16;
      }
      while (v25 != v26);
    }
    v37 = *(WTF **)(v14 + 8);
    if ((WTF *)(v14 + 24) != v37 && v37 != 0)
    {
      *(_QWORD *)(v14 + 8) = 0;
      *(_DWORD *)(v14 + 16) = 0;
      WTF::fastFree(v37, v19);
    }
    return WTF::fastFree((WTF *)v14, v19);
  }
  return result;
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::deleteRecord(WebCore::IDBServer::SQLiteIDBBackingStore *this, WebCore::IDBServer::SQLiteIDBTransaction *a2, uint64_t a3, const WebCore::IDBKeyData *a4, WebCore *a5)
{
  uint64_t v5;
  uint64_t v6;
  WTF *v11;
  sqlite3_stmt **v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  WTF::StringImpl *v16;
  uint64_t result;
  int v18;
  int v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  sqlite3_stmt **v27;
  WTF::StringImpl *v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  sqlite3_stmt **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  WTF *v45;
  WTF::StringImpl *v47;
  int v48;
  sqlite3_stmt *v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF *v55;
  char v56;
  WTF::StringImpl *v57;

  WebCore::serializeIDBKeyData(a5, (uint64_t *)&v55);
  v11 = v55;
  if (!v55)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)this = 280;
    result = (uint64_t)v53;
    if (v53)
    {
      v19 = *(_DWORD *)v53;
      *(_DWORD *)v53 += 2;
      *((_QWORD *)this + 1) = result;
      v53 = 0;
      if (v19)
        *(_DWORD *)result = v19;
      else
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
    }
    else
    {
      *((_QWORD *)this + 1) = 0;
    }
    goto LABEL_16;
  }
  WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v57, (uint64_t)a2, 0x18uLL, "SELECT recordID, value FROM Records WHERE objectStoreID = ? AND key = CAST(? AS TEXT);",
    87);
  v12 = (sqlite3_stmt **)v57;
  if (v57 && !sqlite3_bind_int64(*((sqlite3_stmt **)v57 + 1), 1, (sqlite3_int64)a4))
  {
    if (*((_DWORD *)v11 + 5))
    {
      v13 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8);
      v14 = *(unsigned int *)(v13 + 24);
      if ((_DWORD)v14 == -1)
        goto LABEL_105;
      v53 = (WTF::StringImpl *)&v52;
      v15 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v14])(&v53, v13 + 8);
    }
    else
    {
      v15 = 0;
    }
    if (sqlite3_bind_blob(v12[1], 2, v15, *((_DWORD *)v11 + 12), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
      goto LABEL_8;
    v23 = WebCore::SQLiteStatement::step(v12);
    if (v23 != 100)
    {
      if (v23 == 101)
      {
        *(_WORD *)this = 0;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_WORD *)this = 280;
        v25 = v53;
        if (v53)
        {
          v26 = *(_DWORD *)v53;
          *(_DWORD *)v53 += 2;
          *((_QWORD *)this + 1) = v25;
          v53 = 0;
          if (v26)
            *(_DWORD *)v25 = v26;
          else
            WTF::StringImpl::destroy(v25, v24);
          goto LABEL_12;
        }
      }
      *((_QWORD *)this + 1) = 0;
LABEL_12:
      sqlite3_reset(v12[1]);
      result = sqlite3_clear_bindings(v12[1]);
      goto LABEL_16;
    }
    if ((sqlite3_stmt_busy(v12[1]) || WebCore::SQLiteStatement::step(v12) == 100)
      && sqlite3_data_count(v12[1]) >= 1)
    {
      v6 = sqlite3_column_int64(v12[1], 0);
    }
    else
    {
      v6 = 0;
    }
    WebCore::SQLiteStatement::columnBlob(v12, 1, (uint64_t)&v53);
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v53;
    *(_QWORD *)(v5 + 16) = v54;
    sqlite3_reset(v12[1]);
    sqlite3_clear_bindings(v12[1]);
    if (v6 <= 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)this = 280;
      result = (uint64_t)v53;
      if (!v53)
      {
        *((_QWORD *)this + 1) = 0;
        do
        {
LABEL_48:
          v31 = __ldaxr((unsigned int *)v5);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, (unsigned int *)v5));
        if (!v32)
        {
          atomic_store(1u, (unsigned int *)v5);
          v33 = *(WTF **)(v5 + 8);
          if (v33)
          {
            *(_QWORD *)(v5 + 8) = 0;
            *(_DWORD *)(v5 + 16) = 0;
            WTF::fastFree(v33, v16);
          }
          result = WTF::fastFree((WTF *)v5, v16);
        }
        goto LABEL_16;
      }
      v30 = *(_DWORD *)v53;
      *(_DWORD *)v53 += 2;
      *((_QWORD *)this + 1) = result;
      v53 = 0;
      if (!v30)
      {
LABEL_91:
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
        goto LABEL_48;
      }
LABEL_47:
      *(_DWORD *)result = v30;
      goto LABEL_48;
    }
    WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v53, (uint64_t)a2, 0x19uLL, "DELETE FROM BlobRecords WHERE objectStoreRow = ?;",
      50);
    v27 = (sqlite3_stmt **)v53;
    if (!v53
      || sqlite3_bind_int64(*((sqlite3_stmt **)v53 + 1), 1, v6)
      || WebCore::SQLiteStatement::step(v27) != 101)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)this = 280;
      result = (uint64_t)v57;
      if (v57)
      {
        v29 = *(_DWORD *)v57;
        *(_DWORD *)v57 += 2;
        *((_QWORD *)this + 1) = result;
        v57 = 0;
        if (v29)
          *(_DWORD *)result = v29;
        else
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
      }
      else
      {
        *((_QWORD *)this + 1) = 0;
      }
      if (v27)
      {
        sqlite3_reset(v27[1]);
        result = sqlite3_clear_bindings(v27[1]);
      }
      goto LABEL_48;
    }
    sqlite3_reset(v27[1]);
    sqlite3_clear_bindings(v27[1]);
    WebCore::IDBServer::SQLiteIDBBackingStore::deleteUnusedBlobFileRecords((uint64_t)&v53, (uint64_t)a2, a3);
    if (BYTE1(v53))
    {
      *(_WORD *)this = (_WORD)v53;
      v28 = v54;
      v54 = 0;
      *((_QWORD *)this + 1) = v28;
      goto LABEL_89;
    }
    WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v52, (uint64_t)a2, 0x1AuLL, "DELETE FROM Records WHERE objectStoreID = ? AND key = CAST(? AS TEXT);",
      71);
    v12 = (sqlite3_stmt **)v52;
    if (!v52 || sqlite3_bind_int64(*((sqlite3_stmt **)v52 + 1), 1, (sqlite3_int64)a4))
      goto LABEL_83;
    if (!*((_DWORD *)v11 + 5))
      goto LABEL_106;
    v34 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8);
    v35 = *(unsigned int *)(v34 + 24);
    if ((_DWORD)v35 != -1)
    {
      v57 = (WTF::StringImpl *)&v56;
      v36 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v35])(&v57, v34 + 8);
LABEL_60:
      if (!sqlite3_bind_blob(v12[1], 2, v36, *((_DWORD *)v11 + 12), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL)
        && WebCore::SQLiteStatement::step(v12) == 101)
      {
        sqlite3_reset(v12[1]);
        sqlite3_clear_bindings(v12[1]);
        WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v57, (uint64_t)a2, 0x1BuLL, "DELETE FROM IndexRecords WHERE objectStoreID = ? AND objectStoreRecordID = ?;",
          78);
        v37 = (sqlite3_stmt **)v57;
        if (v57
          && !sqlite3_bind_int64(*((sqlite3_stmt **)v57 + 1), 1, (sqlite3_int64)a4)
          && !sqlite3_bind_int64(v37[1], 2, v6)
          && WebCore::SQLiteStatement::step(v37) == 101)
        {
          sqlite3_reset(v37[1]);
          sqlite3_clear_bindings(v37[1]);
          *(_WORD *)this = 0;
          *((_QWORD *)this + 1) = 0;
          goto LABEL_89;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_WORD *)this = 280;
        v50 = v52;
        if (v52)
        {
          v51 = *(_DWORD *)v52;
          *(_DWORD *)v52 += 2;
          *((_QWORD *)this + 1) = v50;
          v52 = 0;
          if (v51)
            *(_DWORD *)v50 = v51;
          else
            WTF::StringImpl::destroy(v50, v16);
        }
        else
        {
          *((_QWORD *)this + 1) = 0;
        }
        if (v37)
        {
          sqlite3_reset(v37[1]);
          v49 = v37[1];
          goto LABEL_88;
        }
        goto LABEL_89;
      }
LABEL_83:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)this = 280;
      v47 = v57;
      if (v57)
      {
        v48 = *(_DWORD *)v57;
        *(_DWORD *)v57 += 2;
        *((_QWORD *)this + 1) = v47;
        v57 = 0;
        if (v48)
          *(_DWORD *)v47 = v48;
        else
          WTF::StringImpl::destroy(v47, v16);
      }
      else
      {
        *((_QWORD *)this + 1) = 0;
      }
      if (v12)
      {
        sqlite3_reset(v12[1]);
        v49 = v12[1];
LABEL_88:
        sqlite3_clear_bindings(v49);
      }
LABEL_89:
      result = (uint64_t)v54;
      if (!v54)
        goto LABEL_48;
      v30 = *(_DWORD *)v54 - 2;
      if (*(_DWORD *)v54 == 2)
        goto LABEL_91;
      goto LABEL_47;
    }
LABEL_105:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_106:
    v36 = 0;
    goto LABEL_60;
  }
LABEL_8:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)this = 280;
  result = (uint64_t)v53;
  if (v53)
  {
    v18 = *(_DWORD *)v53;
    *(_DWORD *)v53 += 2;
    *((_QWORD *)this + 1) = result;
    v53 = 0;
    if (v18)
      *(_DWORD *)result = v18;
    else
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  if (v12)
    goto LABEL_12;
LABEL_16:
  v20 = v55;
  v55 = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      v38 = *((unsigned int *)v20 + 5);
      if ((_DWORD)v38)
      {
        v39 = *((_QWORD *)v20 + 1);
        v40 = v39 + 16 * v38;
        do
        {
          v41 = *(unsigned int **)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          if (v41)
          {
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              atomic_store(1u, v41);
              v44 = v41[6];
              if ((_DWORD)v44 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335AE70[v44])(&v53, v41 + 2);
              v41[6] = -1;
              WTF::fastFree((WTF *)v41, v16);
            }
          }
          v39 += 16;
        }
        while (v39 != v40);
      }
      v45 = (WTF *)*((_QWORD *)v20 + 1);
      if ((WTF *)((char *)v20 + 24) != v45 && v45 != 0)
      {
        *((_QWORD *)v20 + 1) = 0;
        *((_DWORD *)v20 + 4) = 0;
        WTF::fastFree(v45, v16);
      }
      return WTF::fastFree(v20, v16);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::deleteRange@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, const WebCore::IDBKeyRangeData *a3@<X3>, const WebCore::IDBKeyData *a4@<X2>, uint64_t a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  const WTF::String *v12;
  WebCore::IDBServer::SQLiteIDBCursor *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *result;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  WebCore *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  BOOL v39;
  WTF *v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WebCore::IDBServer::SQLiteIDBCursor *v48;
  WTF *v49;
  WTF::StringImpl *v50;

  v9 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (!v9)
    goto LABEL_24;
  v10 = v9[2];
  if (!v10)
    goto LABEL_24;
  v11 = *(_QWORD *)(v10 + 64);
  if (!v11 || !*(_BYTE *)(v11 + 8) || !*(_BYTE *)(v10 + 16))
    goto LABEL_24;
  if (!(*((_DWORD *)a3 + 6) | *((_DWORD *)a3 + 14))
    || *((_BYTE *)a3 + 64)
    || *((_BYTE *)a3 + 65)
    || !WebCore::IDBKeyData::isValid((const WebCore::IDBKeyRangeData *)((char *)a3 + 32))
    || !WebCore::IDBKeyData::isValid(a3)
    || WebCore::IDBKeyData::compare(a3, (const WebCore::IDBKeyRangeData *)((char *)a3 + 32), v12))
  {
    WebCore::IDBServer::SQLiteIDBCursor::maybeCreateBackingStoreCursor((WebCore::IDBServer::SQLiteIDBCursor *)&v48, (WebCore::IDBServer::SQLiteIDBTransaction *)v10, (uint64_t)a4, 0, a3);
    v13 = v48;
    if (v48)
    {
      v46 = v48;
      WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add((uint64_t *)&v49, (uint64_t *)(v10 + 80), (uint64_t *)&v46);
      v49 = 0;
      v50 = 0;
      v14 = *((_QWORD *)v13 + 27);
      if (v14 == *((_QWORD *)v13 + 28))
      {
LABEL_23:
        __break(0xC471u);
        JUMPOUT(0x1953E4514);
      }
      while (1)
      {
        v15 = *((_QWORD *)v13 + 29);
        v16 = v15 + 120 * v14;
        v17 = *(unsigned __int8 *)(v16 + 104);
        v18 = *(unsigned __int8 *)(v16 + 105);
        if (v17)
        {
          if (v18)
          {
LABEL_31:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *(_WORD *)a5 = 280;
            v31 = v46;
            if (v46)
            {
              v32 = *(_DWORD *)v46;
              *(_DWORD *)v46 += 2;
              *(_QWORD *)(a5 + 8) = v31;
              v46 = 0;
              if (v32)
                *(_DWORD *)v31 = v32;
              else
                WTF::StringImpl::destroy(v31, v30);
            }
            else
            {
              *(_QWORD *)(a5 + 8) = 0;
            }
          }
          else
          {
            *(_WORD *)a5 = 0;
            *(_QWORD *)(a5 + 8) = 0;
            if (HIDWORD(v50))
            {
              v33 = 0;
              v34 = v49;
              v35 = 32 * HIDWORD(v50) - 32;
              do
              {
                WebCore::IDBServer::SQLiteIDBBackingStore::deleteRecord((WebCore::IDBServer::SQLiteIDBBackingStore *)&v46, this, v10, a4, v34);
                v37 = (unsigned __int16)v46;
                *(_WORD *)a5 = (_WORD)v46;
                v38 = v47;
                *(_QWORD *)(a5 + 8) = v47;
                if (v33)
                {
                  if (*(_DWORD *)v33 == 2)
                    WTF::StringImpl::destroy(v33, v36);
                  else
                    *(_DWORD *)v33 -= 2;
                }
                v34 = (WebCore *)((char *)v34 + 32);
                v39 = v37 > 0xFF || v35 == 0;
                v35 -= 32;
                v33 = v38;
              }
              while (!v39);
            }
            WebCore::IDBServer::SQLiteIDBTransaction::notifyCursorsOfChanges(v10, a4);
          }
          v40 = v49;
          if (HIDWORD(v50))
          {
            v41 = 32 * HIDWORD(v50);
            v42 = (_DWORD *)((char *)v49 + 24);
            do
            {
              v43 = *v42;
              if ((_DWORD)v43 != -1)
                ((void (*)(WTF::StringImpl **, _DWORD *))off_1E335ACA8[v43])(&v46, v42 - 4);
              *v42 = -1;
              v42 += 8;
              v41 -= 32;
            }
            while (v41);
            v40 = v49;
          }
          if (v40)
          {
            v49 = 0;
            LODWORD(v50) = 0;
            WTF::fastFree(v40, v30);
          }
          result = v48;
          if (v48)
          {
            WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor(v48, v30);
            return (WTF::StringImpl *)WTF::fastFree(v44, v45);
          }
          return result;
        }
        if (v18)
          goto LABEL_31;
        v19 = v15 + 120 * v14;
        if (HIDWORD(v50) == (_DWORD)v50)
        {
          v20 = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v49, HIDWORD(v50) + 1, v19);
          v21 = (char *)v49 + 32 * HIDWORD(v50);
          *v21 = *(_BYTE *)v20;
          v21[8] = 0;
          v22 = v21 + 8;
          *((_DWORD *)v21 + 6) = -1;
          v23 = v21 + 24;
          v24 = *(unsigned int *)(v20 + 24);
          if ((_DWORD)v24 != -1)
          {
            v25 = v20 + 8;
LABEL_21:
            ((void (*)(WTF::StringImpl **, char *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v24])(&v46, v22, v25);
            *v23 = v24;
          }
        }
        else
        {
          v26 = (char *)v49 + 32 * HIDWORD(v50);
          *v26 = *(_BYTE *)v19;
          v26[8] = 0;
          v22 = v26 + 8;
          *((_DWORD *)v26 + 6) = -1;
          v23 = v26 + 24;
          v24 = *(unsigned int *)(v19 + 24);
          if ((_DWORD)v24 != -1)
          {
            v25 = v19 + 8;
            goto LABEL_21;
          }
        }
        ++HIDWORD(v50);
        WebCore::IDBServer::SQLiteIDBCursor::advance(v13, 1);
        v14 = *((_QWORD *)v13 + 27);
        if (v14 == *((_QWORD *)v13 + 28))
          goto LABEL_23;
      }
    }
LABEL_24:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a5 = 280;
    result = v49;
    if (!v49)
    {
      *(_QWORD *)(a5 + 8) = 0;
      return result;
    }
    v29 = *(_DWORD *)v49;
    *(_DWORD *)v49 += 2;
    *(_QWORD *)(a5 + 8) = result;
    v49 = 0;
    if (v29)
      goto LABEL_26;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
  }
  result = (WTF::StringImpl *)WebCore::IDBServer::SQLiteIDBBackingStore::deleteRecord((WebCore::IDBServer::SQLiteIDBBackingStore *)&v49, this, v10, a4, a3);
  if (BYTE1(v49))
  {
    *(_WORD *)a5 = (_WORD)v49;
    *(_QWORD *)(a5 + 8) = v50;
    return result;
  }
  WebCore::IDBServer::SQLiteIDBTransaction::notifyCursorsOfChanges(v10, a4);
  *(_WORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  result = v50;
  if (v50)
  {
    v29 = *(_DWORD *)v50 - 2;
    if (*(_DWORD *)v50 != 2)
    {
LABEL_26:
      *(_DWORD *)result = v29;
      return result;
    }
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
  }
  return result;
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::addRecord@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, sqlite3_int64 *a3@<X2>, WebCore *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  sqlite3_stmt **v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  sqlite3 *v22;
  WTF::StringImpl *v23;
  uint64_t result;
  int v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  WTF *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  sqlite3_int64 v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  WTF::StringImpl *v57;
  unsigned int v58;
  _QWORD *v59;
  WTF::StringImpl *v60;
  unsigned int v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  uint64_t v64;
  sqlite3_stmt **v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  sqlite3 *v70;
  unint64_t v71;
  sqlite3_stmt **v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  int v78;
  int v79;
  unsigned int v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  int v83;
  unint64_t v84;
  int v85;
  BOOL v86;
  unint64_t v87;
  BOOL v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  size_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unsigned int v99;
  unint64_t v100;
  char *v101;
  sqlite3_stmt **v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  int v116;
  uint64_t v117;
  WTF::StringImpl **v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  int v123;
  __int16 v124;
  WTF::StringImpl *v125;
  sqlite3_stmt **v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  int v129;
  __int16 v130;
  WTF::StringImpl *v131;
  sqlite3_stmt **v132;
  WTF *v133;
  uint64_t v134;
  uint64_t v135;
  const void *v136;
  WTF::StringImpl *v137;
  int v138;
  WTF *v139;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  sqlite3_int64 insert_rowid;
  int v146;
  __int16 v147;
  WTF *v148;
  WTF::StringImpl *v149;
  char v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  _QWORD v153[2];

  v153[1] = *MEMORY[0x1E0C80C00];
  v13 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*(_QWORD *)(a1 + 560), *a2, a2[1]);
  if (v13 && (v14 = v13[2]) != 0 && (v15 = *(_QWORD *)(v14 + 64)) != 0 && *(_BYTE *)(v15 + 8) && *(_BYTE *)(v14 + 16))
  {
    WebCore::serializeIDBKeyData(a4, (uint64_t *)&v148);
    v16 = v148;
    if (v148)
    {
      WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v149, a1, 0x1CuLL, "INSERT INTO Records VALUES (?, CAST(? AS TEXT), ?, NULL);",
        58);
      v17 = (sqlite3_stmt **)v149;
      if (!v149 || sqlite3_bind_int64(*((sqlite3_stmt **)v149 + 1), 1, *a3))
        goto LABEL_25;
      if (*((_DWORD *)v16 + 5))
      {
        v18 = *(_QWORD *)(*((_QWORD *)v16 + 1) + 8);
        v19 = *(unsigned int *)(v18 + 24);
        if ((_DWORD)v19 == -1)
          goto LABEL_251;
        v151 = (WTF::StringImpl *)&v150;
        v20 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v19])(&v151, v18 + 8);
      }
      else
      {
        v20 = 0;
      }
      if (sqlite3_bind_blob(v17[1], 2, v20, *((_DWORD *)v16 + 12), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL)
        || (*(_QWORD *)a6 ? (v21 = *(_QWORD *)a6 + 8) : (v21 = 0),
            sqlite3_bind_blob(v17[1], 3, *(const void **)v21, *(_DWORD *)(v21 + 12), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL)|| WebCore::SQLiteStatement::step(v17) != 101))
      {
LABEL_25:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_WORD *)a7 = 280;
        result = (uint64_t)v151;
        if (v151)
        {
          v27 = *(_DWORD *)v151;
          *(_DWORD *)v151 += 2;
          *(_QWORD *)(a7 + 8) = result;
          v151 = 0;
          if (v27)
            *(_DWORD *)result = v27;
          else
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
        }
        else
        {
          *(_QWORD *)(a7 + 8) = 0;
        }
        if (v17)
        {
          sqlite3_reset(v17[1]);
          result = sqlite3_clear_bindings(v17[1]);
        }
        goto LABEL_34;
      }
      v22 = *(sqlite3 **)(*(_QWORD *)(a1 + 552) + 8);
      if (v22)
        insert_rowid = sqlite3_last_insert_rowid(v22);
      else
        insert_rowid = 0;
      sqlite3_reset(v17[1]);
      sqlite3_clear_bindings(v17[1]);
      v39 = (_QWORD *)*a5;
      if (*a5)
      {
        v40 = *((unsigned int *)v39 - 1);
        v41 = &v39[6 * v40];
        if (*((_DWORD *)v39 - 3))
        {
          v42 = (_QWORD *)*a5;
          if ((_DWORD)v40)
          {
            v43 = 48 * v40;
            v42 = (_QWORD *)*a5;
            do
            {
              if ((unint64_t)(*v42 + 1) > 1)
                goto LABEL_60;
              v42 += 6;
              v43 -= 48;
            }
            while (v43);
            v42 = v41;
          }
          goto LABEL_60;
        }
        v42 = &v39[6 * v40];
      }
      else
      {
        v42 = 0;
        LODWORD(v40) = 0;
      }
      v41 = &v39[6 * v40];
LABEL_60:
      if (v39)
        v44 = &v39[6 * *((unsigned int *)v39 - 1)];
      else
        v44 = 0;
      if (v44 == v42)
      {
        LOWORD(v58) = 0;
        v45 = 0;
        goto LABEL_86;
      }
      v45 = 0;
      v46 = 0;
      while (1)
      {
        v47 = v45;
        v48 = a3[7];
        if (!v48)
          break;
        v49 = *(_DWORD *)(v48 - 8);
        v50 = *v42 + ~(*v42 << 32);
        v51 = (v50 ^ (v50 >> 22)) + ~((v50 ^ (v50 >> 22)) << 13);
        v52 = (9 * (v51 ^ (v51 >> 8))) ^ ((9 * (v51 ^ (v51 >> 8))) >> 15);
        v53 = v49 & (((v52 + ~(v52 << 27)) >> 31) ^ ((_DWORD)v52 + ~((_DWORD)v52 << 27)));
        v54 = *(_QWORD *)(v48 + ((unint64_t)v53 << 6));
        if (v54 != *v42)
        {
          v55 = 1;
          while (v54)
          {
            v53 = ((_DWORD)v53 + v55) & v49;
            v54 = *(_QWORD *)(v48 + ((unint64_t)v53 << 6));
            ++v55;
            if (v54 == *v42)
              goto LABEL_72;
          }
          v53 = *(unsigned int *)(v48 - 4);
        }
LABEL_72:
        if (v53 == *(_DWORD *)(v48 - 4))
          break;
        v146 = v46;
        v56 = v44;
        WebCore::IDBServer::SQLiteIDBBackingStore::uncheckedPutIndexKey((uint64_t)&v151, a1, v48 + (v53 << 6) + 8, a4, (uint64_t)(v42 + 1), insert_rowid);
        v58 = (unsigned __int16)v151;
        v45 = v152;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
          {
            v60 = v47;
            v144 = v152;
            v61 = (unsigned __int16)v151;
            WTF::StringImpl::destroy(v60, v57);
            v58 = v61;
            v45 = v144;
          }
          else
          {
            *(_DWORD *)v47 -= 2;
          }
        }
        if (v58 > 0xFF)
        {
          LOBYTE(v46) = v146;
LABEL_198:
          if (v58 >= 0x100 && (v46 & 1) != 0)
          {
LABEL_200:
            v124 = v58;
            v125 = v45;
            WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v151, a1, 0x1BuLL, "DELETE FROM IndexRecords WHERE objectStoreID = ? AND objectStoreRecordID = ?;",
              78);
            v126 = (sqlite3_stmt **)v151;
            if (v151
              && !sqlite3_bind_int64(*((sqlite3_stmt **)v151 + 1), 1, *a3)
              && !sqlite3_bind_int64(v126[1], 2, insert_rowid)
              && WebCore::SQLiteStatement::step(v126) == 101)
            {
              sqlite3_reset(v126[1]);
              sqlite3_clear_bindings(v126[1]);
              v45 = v125;
              LOWORD(v58) = v124;
              goto LABEL_215;
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v128 = v149;
            if (v149)
            {
              v129 = *(_DWORD *)v149;
              *(_DWORD *)v149 += 2;
              v149 = 0;
              if (v129)
              {
                *(_DWORD *)v128 = v129;
                goto LABEL_208;
              }
              WTF::StringImpl::destroy(v128, v127);
              if (!v126)
              {
LABEL_210:
                if (v125)
                {
                  if (*(_DWORD *)v125 == 2)
                    WTF::StringImpl::destroy(v125, v127);
                  else
                    *(_DWORD *)v125 -= 2;
                }
                LOWORD(v58) = 280;
                v45 = v128;
                goto LABEL_215;
              }
            }
            else
            {
LABEL_208:
              if (!v126)
                goto LABEL_210;
            }
            sqlite3_reset(v126[1]);
            sqlite3_clear_bindings(v126[1]);
            goto LABEL_210;
          }
          if (v58 >= 0x100)
            goto LABEL_215;
LABEL_86:
          v147 = v58;
          v62 = v45;
          if (!*(_DWORD *)(a6 + 20))
          {
LABEL_190:
            result = WebCore::IDBServer::SQLiteIDBTransaction::notifyCursorsOfChanges(v14, (WTF::StringImpl *)*a3);
            *(_WORD *)a7 = v147;
            *(_QWORD *)(a7 + 8) = v62;
            goto LABEL_34;
          }
          v63 = 0;
          while (2)
          {
            v64 = *(_QWORD *)(a6 + 8);
            WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v151, a1, 0x1DuLL, "INSERT INTO BlobRecords VALUES (?, ?);",
              39);
            v65 = (sqlite3_stmt **)v151;
            if (!v151
              || sqlite3_bind_int64(*((sqlite3_stmt **)v151 + 1), 1, insert_rowid)
              || ((v66 = *(_QWORD *)(v64 + 8 * v63)) == 0
                ? (v68 = 0, v69 = 1)
                : (v67 = *(unsigned int *)(v66 + 16),
                   v68 = *(char **)(v66 + 8),
                   v66 = *(unsigned int *)(v66 + 4),
                   v69 = (v67 >> 2) & 1),
                  WebCore::SQLiteStatement::bindText((uint64_t)v65, 2, v68, v66 | (v69 << 32))
               || WebCore::SQLiteStatement::step(v65) != 101))
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              *(_WORD *)a7 = 280;
              v122 = v149;
              if (v149)
              {
                v123 = *(_DWORD *)v149;
                *(_DWORD *)v149 += 2;
                *(_QWORD *)(a7 + 8) = v122;
                v149 = 0;
                if (v123)
                  *(_DWORD *)v122 = v123;
                else
                  WTF::StringImpl::destroy(v122, v26);
              }
              else
              {
                *(_QWORD *)(a7 + 8) = 0;
              }
              if (v65)
              {
                sqlite3_reset(v65[1]);
                sqlite3_clear_bindings(v65[1]);
              }
LABEL_196:
              result = (uint64_t)v62;
LABEL_229:
              if (result)
              {
                v28 = *(_DWORD *)result - 2;
                if (*(_DWORD *)result == 2)
                {
LABEL_231:
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
                  goto LABEL_34;
                }
LABEL_33:
                *(_DWORD *)result = v28;
                goto LABEL_34;
              }
              goto LABEL_34;
            }
            sqlite3_reset(v65[1]);
            sqlite3_clear_bindings(v65[1]);
            v70 = *(sqlite3 **)(*(_QWORD *)(a1 + 552) + 8);
            if (v70)
              v71 = sqlite3_last_insert_rowid(v70);
            else
              v71 = 0;
            WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v149, a1, 0x1EuLL, "SELECT fileName FROM BlobFiles WHERE blobURL = ?;",
              50);
            v72 = (sqlite3_stmt **)v149;
            if (!v149
              || ((v73 = *(_QWORD *)(v64 + 8 * v63)) == 0
                ? (v75 = 0, v76 = 1)
                : (v74 = *(unsigned int *)(v73 + 16),
                   v75 = *(char **)(v73 + 8),
                   v73 = *(unsigned int *)(v73 + 4),
                   v76 = (v74 >> 2) & 1),
                  WebCore::SQLiteStatement::bindText((uint64_t)v149, 1, v75, v73 | (v76 << 32))))
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v77 = v151;
              *(_WORD *)a7 = 280;
              if (v77)
              {
                v78 = *(_DWORD *)v77;
                *(_DWORD *)v77 += 2;
                *(_QWORD *)(a7 + 8) = v77;
                if (v78)
                  *(_DWORD *)v77 = v78;
                else
                  WTF::StringImpl::destroy(v77, v26);
              }
              else
              {
                *(_QWORD *)(a7 + 8) = 0;
              }
              v79 = 1;
              if (v72)
                goto LABEL_105;
              goto LABEL_106;
            }
            v80 = WebCore::SQLiteStatement::step(v72);
            if (v80 - 102 <= 0xFFFFFFFD)
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v82 = v151;
              *(_WORD *)a7 = 280;
              if (v82)
              {
                v83 = *(_DWORD *)v82;
                *(_DWORD *)v82 += 2;
                *(_QWORD *)(a7 + 8) = v82;
                if (v83)
                  *(_DWORD *)v82 = v83;
                else
                  WTF::StringImpl::destroy(v82, v81);
              }
              else
              {
                *(_QWORD *)(a7 + 8) = 0;
              }
              v79 = 1;
LABEL_105:
              sqlite3_reset(v72[1]);
              sqlite3_clear_bindings(v72[1]);
LABEL_106:
              if ((v79 | 4) != 4)
                goto LABEL_196;
              if (++v63 >= *(unsigned int *)(a6 + 20))
                goto LABEL_190;
              continue;
            }
            break;
          }
          if (v80 == 100)
          {
            v79 = 4;
            goto LABEL_105;
          }
          sqlite3_reset(v72[1]);
          sqlite3_clear_bindings(v72[1]);
          v84 = v71;
          if ((v71 & 0x8000000000000000) != 0)
          {
            v87 = -(uint64_t)v71;
            v85 = 1;
            do
            {
              ++v85;
              v88 = v87 >= 0xA;
              v87 /= 0xAuLL;
            }
            while (v88);
          }
          else
          {
            v85 = 0;
            do
            {
              ++v85;
              v86 = v71 > 9;
              v71 /= 0xAuLL;
            }
            while (v86);
          }
          if (v85 < 0)
            goto LABEL_252;
          v89 = (v85 + 5);
          if (__OFADD__(v85, 5))
            goto LABEL_252;
          WTF::tryFastCompactMalloc((WTF *)(v89 + 20));
          v90 = v151;
          if (!v151)
            goto LABEL_252;
          *(_DWORD *)v151 = 2;
          *((_DWORD *)v90 + 1) = v89;
          v91 = (char *)v90 + 20;
          *((_QWORD *)v90 + 1) = (char *)v90 + 20;
          v143 = v90;
          *((_DWORD *)v90 + 4) = 4;
          v92 = v84;
          v93 = 0;
          if ((v84 & 0x8000000000000000) != 0)
          {
            v96 = -(uint64_t)v84;
            do
            {
              *((_BYTE *)v153 + v93--) = (v96 % 0xA) | 0x30;
              v86 = v96 > 9;
              v96 /= 0xAuLL;
            }
            while (v86);
            v97 = v93 + 24;
            v94 = (char *)&v151 + v93 + 24;
            *v94 = 45;
            if (v93 + 26 <= 26)
            {
              if (v97 <= 24)
                v97 = 24;
              v95 = v97 - v93 - 23;
LABEL_138:
              memcpy(v91, v94, v95);
            }
          }
          else
          {
            do
            {
              *((_BYTE *)v153 + v93--) = (v92 % 0xA) | 0x30;
              v86 = v92 > 9;
              v92 /= 0xAuLL;
            }
            while (v86);
            if (v93 + 26 <= 25)
            {
              v94 = (char *)v153 + v93 + 1;
              v95 = -v93;
              goto LABEL_138;
            }
          }
          v98 = v84;
          if ((v84 & 0x8000000000000000) != 0)
          {
            v100 = -(uint64_t)v84;
            v99 = 1;
            do
            {
              ++v99;
              v88 = v100 >= 0xA;
              v100 /= 0xAuLL;
            }
            while (v88);
          }
          else
          {
            v99 = 0;
            do
            {
              ++v99;
              v86 = v98 > 9;
              v98 /= 0xAuLL;
            }
            while (v86);
          }
          v101 = &v91[v99];
          v101[4] = 98;
          *(_DWORD *)v101 = 1869373998;
          WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v149, a1, 0x1FuLL, "INSERT INTO BlobFiles VALUES (?, ?);",
            37);
          v102 = (sqlite3_stmt **)v149;
          if (!v149
            || ((v103 = *(_QWORD *)(v64 + 8 * v63)) == 0
              ? (v105 = 0, v106 = 1)
              : (v104 = *(unsigned int *)(v103 + 16),
                 v105 = *(char **)(v103 + 8),
                 v103 = *(unsigned int *)(v103 + 4),
                 v106 = (v104 >> 2) & 1),
                WebCore::SQLiteStatement::bindText((uint64_t)v149, 1, v105, v103 | (v106 << 32))
             || WebCore::SQLiteStatement::bindText((uint64_t)v102, 2, *((char **)v143 + 1), *((unsigned int *)v143 + 1) | ((unint64_t)((*((_DWORD *)v143 + 4) >> 2) & 1) << 32))|| WebCore::SQLiteStatement::step(v102) != 101))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v115 = v151;
            *(_WORD *)a7 = 280;
            if (v115)
            {
              v116 = *(_DWORD *)v115;
              *(_DWORD *)v115 += 2;
              *(_QWORD *)(a7 + 8) = v115;
              if (v116)
                *(_DWORD *)v115 = v116;
              else
                WTF::StringImpl::destroy(v115, v26);
            }
            else
            {
              *(_QWORD *)(a7 + 8) = 0;
            }
            if (v102)
            {
              sqlite3_reset(v102[1]);
              sqlite3_clear_bindings(v102[1]);
            }
            v79 = 1;
          }
          else
          {
            sqlite3_reset(v102[1]);
            sqlite3_clear_bindings(v102[1]);
            if (v63 >= *(unsigned int *)(a6 + 36))
              goto LABEL_252;
            v107 = *(WTF::StringImpl **)(*(_QWORD *)(a6 + 24) + 8 * v63);
            if (v107)
              *(_DWORD *)v107 += 2;
            v151 = v107;
            *(_DWORD *)v143 += 2;
            v152 = v143;
            v108 = *(unsigned int *)(v14 + 100);
            if ((_DWORD)v108 == *(_DWORD *)(v14 + 96))
            {
              v109 = (uint64_t *)WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14 + 88, v108 + 1, (unint64_t)&v151);
              v110 = *(unsigned int *)(v14 + 100);
              v111 = (_QWORD *)(*(_QWORD *)(v14 + 88) + 16 * v110);
              v112 = *v109;
              *v109 = 0;
              *v111 = v112;
              v113 = v109[1];
              v109[1] = 0;
              v111[1] = v113;
              v114 = v152;
              *(_DWORD *)(v14 + 100) = v110 + 1;
              v152 = 0;
              if (v114)
              {
                if (*(_DWORD *)v114 == 2)
                  WTF::StringImpl::destroy(v114, v26);
                else
                  *(_DWORD *)v114 -= 2;
              }
            }
            else
            {
              v117 = *(_QWORD *)(v14 + 88);
              v151 = 0;
              v118 = (WTF::StringImpl **)(v117 + 16 * v108);
              *v118 = v107;
              v118[1] = v143;
              *(_DWORD *)(v14 + 100) = v108 + 1;
              v152 = 0;
            }
            v119 = v151;
            v151 = 0;
            if (v119)
            {
              if (*(_DWORD *)v119 == 2)
                WTF::StringImpl::destroy(v119, v26);
              else
                *(_DWORD *)v119 -= 2;
            }
            v79 = 0;
          }
          if (*(_DWORD *)v143 == 2)
            WTF::StringImpl::destroy(v143, v26);
          else
            *(_DWORD *)v143 -= 2;
          goto LABEL_106;
        }
        v44 = v56;
        v59 = v42 + 6;
        v42 = v41;
        if (v59 != v41)
        {
          v42 = v59;
          do
          {
            if ((unint64_t)(*v42 + 1) > 1)
              goto LABEL_82;
            v42 += 6;
          }
          while (v42 != v41);
          v42 = v41;
        }
LABEL_82:
        v46 = (v58 < 0x100) | v146;
        if (v42 == v44)
          goto LABEL_198;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v45 = v151;
      if (v151)
        *(_DWORD *)v151 += 2;
      v121 = v45;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          v141 = v45;
          WTF::StringImpl::destroy(v47, v120);
          v45 = v141;
          v121 = v151;
        }
        else
        {
          *(_DWORD *)v47 -= 2;
          v121 = v45;
        }
      }
      v151 = 0;
      if (v121)
      {
        if (*(_DWORD *)v121 == 2)
        {
          v142 = v45;
          WTF::StringImpl::destroy(v121, v120);
          v45 = v142;
        }
        else
        {
          *(_DWORD *)v121 -= 2;
        }
      }
      LOWORD(v58) = 264;
      if ((v46 & 1) != 0)
        goto LABEL_200;
LABEL_215:
      v130 = v58;
      v131 = v45;
      WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v149, a1, 0x1AuLL, "DELETE FROM Records WHERE objectStoreID = ? AND key = CAST(? AS TEXT);",
        71);
      v132 = (sqlite3_stmt **)v149;
      if (!v149 || sqlite3_bind_int64(*((sqlite3_stmt **)v149 + 1), 1, *a3))
        goto LABEL_223;
      v133 = v148;
      if (!*((_DWORD *)v148 + 5))
      {
        v136 = 0;
        goto LABEL_220;
      }
      v134 = *(_QWORD *)(*((_QWORD *)v148 + 1) + 8);
      v135 = *(unsigned int *)(v134 + 24);
      if ((_DWORD)v135 != -1)
      {
        v151 = (WTF::StringImpl *)&v150;
        v136 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v135])(&v151, v134 + 8);
LABEL_220:
        if (!sqlite3_bind_blob(v132[1], 2, v136, *((_DWORD *)v133 + 12), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL)&& WebCore::SQLiteStatement::step(v132) == 101)
        {
          *(_WORD *)a7 = v130;
          *(_QWORD *)(a7 + 8) = v131;
          v131 = 0;
LABEL_227:
          sqlite3_reset(v132[1]);
          sqlite3_clear_bindings(v132[1]);
LABEL_228:
          result = (uint64_t)v131;
          goto LABEL_229;
        }
LABEL_223:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_WORD *)a7 = 280;
        v137 = v151;
        if (v151)
        {
          v138 = *(_DWORD *)v151;
          *(_DWORD *)v151 += 2;
          *(_QWORD *)(a7 + 8) = v137;
          v151 = 0;
          if (v138)
            *(_DWORD *)v137 = v138;
          else
            WTF::StringImpl::destroy(v137, v26);
        }
        else
        {
          *(_QWORD *)(a7 + 8) = 0;
        }
        if (!v132)
          goto LABEL_228;
        goto LABEL_227;
      }
LABEL_251:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_252:
      __break(0xC471u);
      JUMPOUT(0x1953E56CCLL);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a7 = 280;
    result = (uint64_t)v151;
    if (v151)
    {
      v28 = *(_DWORD *)v151;
      *(_DWORD *)v151 += 2;
      *(_QWORD *)(a7 + 8) = result;
      v151 = 0;
      if (!v28)
        goto LABEL_231;
      goto LABEL_33;
    }
    *(_QWORD *)(a7 + 8) = 0;
LABEL_34:
    v29 = v148;
    v148 = 0;
    if (v29)
    {
      do
      {
        v30 = __ldaxr((unsigned int *)v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, (unsigned int *)v29));
      if (!v31)
      {
        atomic_store(1u, (unsigned int *)v29);
        v32 = *((unsigned int *)v29 + 5);
        if ((_DWORD)v32)
        {
          v33 = *((_QWORD *)v29 + 1);
          v34 = v33 + 16 * v32;
          do
          {
            v35 = *(unsigned int **)(v33 + 8);
            *(_QWORD *)(v33 + 8) = 0;
            if (v35)
            {
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                atomic_store(1u, v35);
                v38 = v35[6];
                if ((_DWORD)v38 != -1)
                  ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335AE70[v38])(&v151, v35 + 2);
                v35[6] = -1;
                WTF::fastFree((WTF *)v35, v26);
              }
            }
            v33 += 16;
          }
          while (v33 != v34);
        }
        v139 = (WTF *)*((_QWORD *)v29 + 1);
        if ((WTF *)((char *)v29 + 24) != v139 && v139 != 0)
        {
          *((_QWORD *)v29 + 1) = 0;
          *((_DWORD *)v29 + 4) = 0;
          WTF::fastFree(v139, v26);
        }
        return WTF::fastFree(v29, v26);
      }
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a7 = 280;
    result = (uint64_t)v151;
    if (v151)
    {
      v25 = *(_DWORD *)v151;
      *(_DWORD *)v151 += 2;
      *(_QWORD *)(a7 + 8) = result;
      v151 = 0;
      if (v25)
        *(_DWORD *)result = v25;
      else
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
    }
    else
    {
      *(_QWORD *)(a7 + 8) = 0;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::IDBServer::SQLiteIDBBackingStore::getBlobRecordsForObjectStoreRecord(uint64_t a1, uint64_t a2, sqlite3_int64 a3, uint64_t a4, uint64_t a5)
{
  sqlite3_stmt **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  sqlite3_stmt *v14;
  WTF::StringImpl **result;
  unsigned int v16;
  const WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl **v23;
  sqlite3_stmt **v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl **v37;
  _DWORD **v38;
  uint64_t v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46[3];
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl **v49;

  v49 = 0;
  WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v48, a2, 0x20uLL, "SELECT blobURL FROM BlobRecords WHERE objectStoreRow = ?", 57);
  v10 = (sqlite3_stmt **)v48;
  if (!v48 || sqlite3_bind_int64(*((sqlite3_stmt **)v48 + 1), 1, a3))
    goto LABEL_3;
  v16 = WebCore::SQLiteStatement::step(v10);
  if (!v16 || v16 == 101)
  {
    *(_WORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
LABEL_7:
    sqlite3_reset(v10[1]);
    v14 = v10[1];
LABEL_8:
    sqlite3_clear_bindings(v14);
    goto LABEL_9;
  }
  while (v16 == 100)
  {
    WebCore::SQLiteStatement::columnText(v10, 0, &v47);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v49, &v47, v17, (uint64_t)v46);
    v19 = v47;
    v47 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v16 = WebCore::SQLiteStatement::step(v10);
  }
  if (v16 != 101)
  {
LABEL_3:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a1 = 280;
    v12 = v46[0];
    if (v46[0])
    {
      v13 = *(_DWORD *)v46[0];
      *(_DWORD *)v46[0] += 2;
      *(_QWORD *)(a1 + 8) = v12;
      v46[0] = 0;
      if (v13)
        *(_DWORD *)v12 = v13;
      else
        WTF::StringImpl::destroy(v12, v11);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (!v10)
      goto LABEL_9;
    goto LABEL_7;
  }
  sqlite3_reset(v10[1]);
  sqlite3_clear_bindings(v10[1]);
  v20 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(&v49);
  v21 = v20;
  v22 = v11;
  if (v49)
    v23 = &v49[*((unsigned int *)v49 - 1)];
  else
    v23 = 0;
  if (v23 == v20)
  {
LABEL_59:
    *(_WORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    while (1)
    {
      WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)v46, a2, 0x1EuLL, "SELECT fileName FROM BlobFiles WHERE blobURL = ?;",
        50);
      v24 = (sqlite3_stmt **)v46[0];
      if (!v46[0])
        break;
      v25 = (unint64_t)*v21;
      if (*v21)
      {
        v26 = *(unsigned int *)(v25 + 16);
        v27 = *(char **)(v25 + 8);
        v25 = *(unsigned int *)(v25 + 4);
        v28 = (v26 >> 2) & 1;
      }
      else
      {
        v27 = 0;
        v28 = 1;
      }
      if (WebCore::SQLiteStatement::bindText((uint64_t)v46[0], 1, v27, v25 | (v28 << 32)))
        break;
      if (WebCore::SQLiteStatement::step(v24) != 100)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_WORD *)a1 = 280;
        v44 = v48;
        if (v48)
        {
          v45 = *(_DWORD *)v48;
          *(_DWORD *)v48 += 2;
          *(_QWORD *)(a1 + 8) = v44;
          v48 = 0;
          if (v45)
            *(_DWORD *)v44 = v45;
          else
            WTF::StringImpl::destroy(v44, v43);
        }
        else
        {
          *(_QWORD *)(a1 + 8) = 0;
        }
LABEL_68:
        sqlite3_reset(v24[1]);
        v14 = v24[1];
        goto LABEL_8;
      }
      v29 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v29 == *(_DWORD *)(a4 + 8))
      {
        v38 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v29 + 1, (unint64_t)v21);
        v29 = *(unsigned int *)(a4 + 12);
        v39 = *(_QWORD *)a4;
        v40 = *v38;
        if (*v38)
          *v40 += 2;
        *(_QWORD *)(v39 + 8 * v29) = v40;
        v24 = (sqlite3_stmt **)v46[0];
      }
      else
      {
        v30 = *(_QWORD *)a4;
        v31 = *v21;
        if (*v21)
          *(_DWORD *)v31 += 2;
        *(_QWORD *)(v30 + 8 * v29) = v31;
      }
      *(_DWORD *)(a4 + 12) = v29 + 1;
      WebCore::SQLiteStatement::columnText(v24, 0, &v48);
      WTF::FileSystemImpl::pathByAppendingComponent();
      v32 = *(unsigned int *)(a5 + 12);
      if ((_DWORD)v32 == *(_DWORD *)(a5 + 8))
      {
        v37 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v32 + 1, (unint64_t)&v47);
        v32 = *(unsigned int *)(a5 + 12);
        v33 = *(_QWORD *)a5;
        v34 = *v37;
        *v37 = 0;
      }
      else
      {
        v33 = *(_QWORD *)a5;
        v34 = v47;
        v47 = 0;
      }
      *(_QWORD *)(v33 + 8 * v32) = v34;
      *(_DWORD *)(a5 + 12) = v32 + 1;
      v35 = v47;
      v47 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v11);
        else
          *(_DWORD *)v35 -= 2;
      }
      v36 = v48;
      v48 = 0;
      if (!v36)
        goto LABEL_42;
      if (*(_DWORD *)v36 != 2)
      {
        *(_DWORD *)v36 -= 2;
LABEL_42:
        if (!v24)
          goto LABEL_44;
LABEL_43:
        sqlite3_reset(v24[1]);
        sqlite3_clear_bindings(v24[1]);
        goto LABEL_44;
      }
      WTF::StringImpl::destroy(v36, v11);
      if (v24)
        goto LABEL_43;
LABEL_44:
      while (++v21 != (WTF::StringImpl **)v22)
      {
        if ((unint64_t)*v21 + 1 > 1)
          goto LABEL_48;
      }
      v21 = (WTF::StringImpl **)v22;
LABEL_48:
      if (v21 == v23)
        goto LABEL_59;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a1 = 280;
    v41 = v48;
    if (v48)
    {
      v42 = *(_DWORD *)v48;
      *(_DWORD *)v48 += 2;
      *(_QWORD *)(a1 + 8) = v41;
      v48 = 0;
      if (v42)
        *(_DWORD *)v41 = v42;
      else
        WTF::StringImpl::destroy(v41, v11);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (v24)
      goto LABEL_68;
  }
LABEL_9:
  result = v49;
  if (v49)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v49, v11);
  return result;
}

void WebCore::IDBServer::SQLiteIDBBackingStore::getRecord(uint64_t a1@<X0>, unint64_t *a2@<X1>, sqlite3_int64 a3@<X2>, char *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  __int16 v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  sqlite3_stmt **v44;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  const void *v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  sqlite3_int64 v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  int v65;
  uint64_t v66;
  const UInt8 *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  WTF::StringImpl *v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  WTF *v94;
  int v96;
  WTF::StringImpl *v97;
  unsigned int v98;
  WTF::StringImpl *v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF *v107;
  WTF *v108;
  WTF *v109;
  WTF *v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  WTF *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WebCore::IDBServer::SQLiteIDBBackingStore *v116;
  const WebCore::IDBResourceIdentifier *v117;
  const WebCore::IDBGetAllRecordsData *v118;
  WebCore::IDBGetAllResult *v119;
  sqlite3_int64 v120;
  CFIndex v121;
  _QWORD v122[6];
  __int16 v123;
  WTF::StringImpl *v124;
  WTF *v125;
  uint64_t v126;
  WTF *v127;
  uint64_t v128;
  WTF::StringImpl *v129[2];
  __int128 v130;
  uint64_t v131;
  char v132;
  _BYTE v133[16];
  int v134;
  char v135;
  uint64_t v136;
  int v137;
  char v138[16];
  int v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  char v144[8];
  _QWORD v145[2];
  int v146;
  uint64_t v147;
  uint64_t v148;
  char v149[8];
  _BYTE v150[16];
  int v151;
  _BYTE v152[9];

  v13 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*(_QWORD *)(a1 + 560), *a2, a2[1]);
  if (v13 && (v14 = v13[2]) != 0 && (v15 = *(_QWORD *)(v14 + 64)) != 0 && *(_BYTE *)(v15 + 8))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 536) + 32);
    if (v16)
    {
      v17 = *(_DWORD *)(v16 - 8);
      v18 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 72 * v21);
      v23 = *v22;
      if (*v22 != a3)
      {
        v24 = 1;
        while (v23)
        {
          v21 = (v21 + v24) & v17;
          v22 = (uint64_t *)(v16 + 72 * v21);
          v23 = *v22;
          ++v24;
          if (*v22 == a3)
            goto LABEL_18;
        }
        v22 = (uint64_t *)(v16 + 72 * *(unsigned int *)(v16 - 4));
      }
LABEL_18:
      if (v22 != (uint64_t *)(v16 + 72 * *(unsigned int *)(v16 - 4)))
      {
        v149[0] = *a4;
        v150[0] = 0;
        v151 = -1;
        v29 = *((unsigned int *)a4 + 6);
        if ((_DWORD)v29 != -1)
        {
          ((void (*)(WTF::StringImpl **, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v29])(v129, v150, a4 + 8);
          v151 = v29;
          if (!(_DWORD)v29)
          {
            LOBYTE(v129[0]) = 0;
            v129[1] = 0;
            DWORD2(v130) = 7;
            v149[0] = 0;
            ((void (*)(_QWORD *))off_1E335ACA8[v29])(v122);
            v151 = 7;
            if (DWORD2(v130) != -1)
              ((void (*)(_QWORD *, WTF::StringImpl **))off_1E335ACA8[DWORD2(v130)])(v122, &v129[1]);
          }
        }
        WebCore::serializeIDBKeyData((WebCore *)v149, &v148);
        v30 = v148;
        if (!v148)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_WORD *)a7 = 280;
          v34 = v129[0];
          if (v129[0])
          {
            v35 = *(_DWORD *)v129[0];
            *(_DWORD *)v129[0] += 2;
            *(_QWORD *)(a7 + 8) = v34;
            v129[0] = 0;
            if (v35)
              *(_DWORD *)v34 = v35;
            else
              WTF::StringImpl::destroy(v34, v33);
          }
          else
          {
            *(_QWORD *)(a7 + 8) = 0;
          }
LABEL_77:
          if (v151 != -1)
            ((void (*)(WTF::StringImpl **, _BYTE *))off_1E335ACA8[v151])(v129, v150);
          return;
        }
        v149[0] = a4[32];
        v31 = *((unsigned int *)a4 + 14);
        if (v151 == -1)
        {
          if ((_DWORD)v31 == -1)
            goto LABEL_35;
        }
        else if ((_DWORD)v31 == -1)
        {
          ((void (*)(WTF::StringImpl **, _BYTE *))off_1E335ACA8[v151])(v129, v150);
          v32 = -1;
          goto LABEL_34;
        }
        v129[0] = (WTF::StringImpl *)v150;
        ((void (*)(WTF::StringImpl **, _BYTE *, char *))off_1E335AD98[v31])(v129, v150, a4 + 40);
        if (v151)
          goto LABEL_35;
        v149[0] = 0;
        v32 = 8;
LABEL_34:
        v151 = v32;
LABEL_35:
        WebCore::serializeIDBKeyData((WebCore *)v149, &v147);
        v36 = v147;
        if (!v147)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v42 = v129[0];
          *(_WORD *)a7 = 280;
          if (v42)
          {
            v43 = *(_DWORD *)v42;
            *(_DWORD *)v42 += 2;
            *(_QWORD *)(a7 + 8) = v42;
            if (v43)
              *(_DWORD *)v42 = v43;
            else
              WTF::StringImpl::destroy(v42, v41);
          }
          else
          {
            *(_QWORD *)(a7 + 8) = 0;
          }
LABEL_71:
          v53 = v147;
          v147 = 0;
          if (v53)
          {
            do
            {
              v54 = __ldaxr((unsigned int *)v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, (unsigned int *)v53));
            if (!v55)
            {
              atomic_store(1u, (unsigned int *)v53);
              v87 = *(unsigned int *)(v53 + 20);
              if ((_DWORD)v87)
              {
                v88 = *(_QWORD *)(v53 + 8);
                v89 = v88 + 16 * v87;
                do
                {
                  v90 = *(unsigned int **)(v88 + 8);
                  *(_QWORD *)(v88 + 8) = 0;
                  if (v90)
                  {
                    do
                    {
                      v91 = __ldaxr(v90);
                      v92 = v91 - 1;
                    }
                    while (__stlxr(v92, v90));
                    if (!v92)
                    {
                      atomic_store(1u, v90);
                      v93 = v90[6];
                      if ((_DWORD)v93 != -1)
                        ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335AE70[v93])(v129, v90 + 2);
                      v90[6] = -1;
                      WTF::fastFree((WTF *)v90, v41);
                    }
                  }
                  v88 += 16;
                }
                while (v88 != v89);
              }
              v94 = *(WTF **)(v53 + 8);
              if ((WTF *)(v53 + 24) != v94 && v94 != 0)
              {
                *(_QWORD *)(v53 + 8) = 0;
                *(_DWORD *)(v53 + 16) = 0;
                WTF::fastFree(v94, v41);
              }
              WTF::fastFree((WTF *)v53, v41);
            }
          }
          v56 = v148;
          v148 = 0;
          if (v56)
          {
            do
            {
              v57 = __ldaxr((unsigned int *)v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, (unsigned int *)v56));
            if (!v58)
            {
              atomic_store(1u, (unsigned int *)v56);
              v78 = *(unsigned int *)(v56 + 20);
              if ((_DWORD)v78)
              {
                v79 = *(_QWORD *)(v56 + 8);
                v80 = v79 + 16 * v78;
                do
                {
                  v81 = *(unsigned int **)(v79 + 8);
                  *(_QWORD *)(v79 + 8) = 0;
                  if (v81)
                  {
                    do
                    {
                      v82 = __ldaxr(v81);
                      v83 = v82 - 1;
                    }
                    while (__stlxr(v83, v81));
                    if (!v83)
                    {
                      atomic_store(1u, v81);
                      v84 = v81[6];
                      if ((_DWORD)v84 != -1)
                        ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335AE70[v84])(v129, v81 + 2);
                      v81[6] = -1;
                      WTF::fastFree((WTF *)v81, v41);
                    }
                  }
                  v79 += 16;
                }
                while (v79 != v80);
              }
              v85 = *(WTF **)(v56 + 8);
              if ((WTF *)(v56 + 24) != v85 && v85 != 0)
              {
                *(_QWORD *)(v56 + 8) = 0;
                *(_DWORD *)(v56 + 16) = 0;
                WTF::fastFree(v85, v41);
              }
              WTF::fastFree((WTF *)v56, v41);
            }
          }
          goto LABEL_77;
        }
        if (a5)
        {
          if (a4[64])
          {
            if (a4[65])
            {
              v37 = "SELECT key, value, ROWID FROM Records WHERE objectStoreID = ? AND key > CAST(? AS TEXT) AND key < CA"
                    "ST(? AS TEXT) ORDER BY key;";
              v38 = a1;
              v39 = 40;
              v40 = 128;
LABEL_56:
              WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)v129, v38, v39, v37, v40);
              v44 = (sqlite3_stmt **)v129[0];
              if (!v129[0] || sqlite3_bind_int64(*((sqlite3_stmt **)v129[0] + 1), 1, a3))
                goto LABEL_66;
              if (*(_DWORD *)(v30 + 20))
              {
                v45 = *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8);
                v46 = *(unsigned int *)(v45 + 24);
                if ((_DWORD)v46 == -1)
                  goto LABEL_200;
                v129[0] = (WTF::StringImpl *)v122;
                v47 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v46])(v129, v45 + 8);
              }
              else
              {
                v47 = 0;
              }
              if (sqlite3_bind_blob(v44[1], 2, v47, *(_DWORD *)(v30 + 48), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
              {
                goto LABEL_66;
              }
              if (!*(_DWORD *)(v36 + 20))
              {
                v50 = 0;
LABEL_65:
                if (sqlite3_bind_blob(v44[1], 3, v50, *(_DWORD *)(v36 + 48), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
                {
LABEL_66:
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v51 = v129[0];
                  *(_WORD *)a7 = 280;
                  if (v51)
                  {
                    v52 = *(_DWORD *)v51;
                    *(_DWORD *)v51 += 2;
                    *(_QWORD *)(a7 + 8) = v51;
                    if (v52)
                      *(_DWORD *)v51 = v52;
                    else
                      WTF::StringImpl::destroy(v51, v41);
                  }
                  else
                  {
                    *(_QWORD *)(a7 + 8) = 0;
                  }
                  if (!v44)
                    goto LABEL_71;
                  goto LABEL_70;
                }
                v59 = WebCore::SQLiteStatement::step(v44);
                if (v59 == 101)
                  goto LABEL_85;
                if (v59 != 100)
                {
                  if (v59)
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v64 = v129[0];
                    *(_WORD *)a7 = 280;
                    if (v64)
                    {
                      v65 = *(_DWORD *)v64;
                      *(_DWORD *)v64 += 2;
                      *(_QWORD *)(a7 + 8) = v64;
                      if (v65)
                        *(_DWORD *)v64 = v65;
                      else
                        WTF::StringImpl::destroy(v64, v63);
                      goto LABEL_70;
                    }
LABEL_86:
                    *(_QWORD *)(a7 + 8) = 0;
LABEL_70:
                    sqlite3_reset(v44[1]);
                    sqlite3_clear_bindings(v44[1]);
                    goto LABEL_71;
                  }
LABEL_85:
                  *(_WORD *)a7 = 0;
                  goto LABEL_86;
                }
                WebCore::SQLiteStatement::columnBlob(v44, 0, (uint64_t)v129);
                v60 = WTF::fastMalloc((WTF *)0x18);
                *(_DWORD *)v60 = 1;
                *(WTF::StringImpl **)(v60 + 8) = v129[0];
                *(WTF::StringImpl **)(v60 + 16) = v129[1];
                if (a5)
                {
                  WebCore::SQLiteStatement::columnBlob(v44, 1, (uint64_t)v129);
                  v61 = WTF::fastMalloc((WTF *)0x18);
                  *(_DWORD *)v61 = 1;
                  *(WTF::StringImpl **)(v61 + 8) = v129[0];
                  *(WTF::StringImpl **)(v61 + 16) = v129[1];
                  if ((sqlite3_stmt_busy(v44[1]) || WebCore::SQLiteStatement::step(v44) == 100)
                    && sqlite3_data_count(v44[1]) >= 3)
                  {
                    v62 = sqlite3_column_int64(v44[1], 2);
                    goto LABEL_98;
                  }
                }
                else
                {
                  v61 = 0;
                }
                v62 = 0;
LABEL_98:
                sqlite3_reset(v44[1]);
                sqlite3_clear_bindings(v44[1]);
                v144[0] = 0;
                v145[0] = 0;
                v146 = 0;
                v66 = *(unsigned int *)(v60 + 20);
                if ((_DWORD)v66)
                {
                  v67 = *(const UInt8 **)(v60 + 8);
                  if (*v67)
                  {
                    if (*v67 == 98)
                    {
                      v120 = v62;
                      v121 = *(unsigned int *)(v60 + 20);
                      v68 = WTF::fastMalloc((WTF *)0x140);
                      v69 = WebCore::KeyedDecoderCF::KeyedDecoderCF(v68, v67, v121);
                      v70 = WebCore::IDBKeyData::decode(v69, (uint64_t)v144);
                      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
                      if ((v70 & 1) != 0)
                        goto LABEL_118;
                    }
                  }
                  else
                  {
                    v129[0] = (WTF::StringImpl *)(v67 + 1);
                    v129[1] = (WTF::StringImpl *)(v66 - 1);
                    if ((WebCore::decodeKey((unsigned __int8 **)v129, (uint64_t)v144) & 1) != 0)
                    {
                      v120 = v62;
                      if (!v129[1])
                      {
LABEL_118:
                        if ((a5 & 1) != 0)
                        {
                          v127 = 0;
                          v128 = 0;
                          v125 = 0;
                          v126 = 0;
                          WebCore::IDBServer::SQLiteIDBBackingStore::getBlobRecordsForObjectStoreRecord((uint64_t)&v123, a1, v120, (uint64_t)&v127, (uint64_t)&v125);
                          if (HIBYTE(v123))
                          {
                            *(_WORD *)a7 = v123;
                            *(_QWORD *)(a7 + 8) = v124;
                          }
                          else
                          {
                            if (v61)
                            {
                              do
                                v98 = __ldaxr((unsigned int *)v61);
                              while (__stlxr(v98 + 1, (unsigned int *)v61));
                            }
                            v99 = v127;
                            v127 = 0;
                            v100 = v125;
                            v125 = 0;
                            memset(v122, 0, 40);
                            v129[0] = (WTF::StringImpl *)v61;
                            v129[1] = v99;
                            v101 = v128;
                            v128 = 0;
                            *(_QWORD *)&v130 = v101;
                            *((_QWORD *)&v130 + 1) = v100;
                            v102 = v126;
                            v126 = 0;
                            v131 = v102;
                            v132 = v144[0];
                            v133[0] = 0;
                            v134 = -1;
                            v103 = v146;
                            if (v146 != -1)
                            {
                              ((void (*)(_BYTE *, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v146])(v152, v133, v145);
                              v134 = v103;
                            }
                            v135 = 0;
                            v136 = 0;
                            v137 = 0;
                            v138[0] = 0;
                            v140 = 0;
                            if (*((_BYTE *)v22 + 48))
                            {
                              v139 = -1;
                              v104 = *((unsigned int *)v22 + 10);
                              if ((_DWORD)v104 != -1)
                              {
                                ((void (*)(_BYTE *, char *, uint64_t *))off_1E335AC98[v104])(v152, v138, v22 + 3);
                                v139 = v104;
                              }
                              v140 = 1;
                            }
                            v141 = 0;
                            v142 = 0;
                            v143 = 1;
                            WebCore::IDBGetResult::operator=(a6, (uint64_t)v129);
                            WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v129, v105);
                            WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v122, v106);
                            *(_WORD *)a7 = 0;
                            *(_QWORD *)(a7 + 8) = 0;
                            if (v124)
                            {
                              if (*(_DWORD *)v124 == 2)
                                WTF::StringImpl::destroy(v124, v41);
                              else
                                *(_DWORD *)v124 -= 2;
                            }
                          }
                          if (HIDWORD(v126))
                          {
                            v110 = v125;
                            v111 = 8 * HIDWORD(v126);
                            do
                            {
                              v112 = *(WTF::StringImpl **)v110;
                              *(_QWORD *)v110 = 0;
                              if (v112)
                              {
                                if (*(_DWORD *)v112 == 2)
                                  WTF::StringImpl::destroy(v112, v41);
                                else
                                  *(_DWORD *)v112 -= 2;
                              }
                              v110 = (WTF *)((char *)v110 + 8);
                              v111 -= 8;
                            }
                            while (v111);
                          }
                          v107 = v125;
                          if (v125)
                          {
                            v125 = 0;
                            LODWORD(v126) = 0;
                            WTF::fastFree(v107, v41);
                          }
                          if (HIDWORD(v128))
                          {
                            v113 = v127;
                            v114 = 8 * HIDWORD(v128);
                            do
                            {
                              v115 = *(WTF::StringImpl **)v113;
                              *(_QWORD *)v113 = 0;
                              if (v115)
                              {
                                if (*(_DWORD *)v115 == 2)
                                  WTF::StringImpl::destroy(v115, v41);
                                else
                                  *(_DWORD *)v115 -= 2;
                              }
                              v113 = (WTF *)((char *)v113 + 8);
                              v114 -= 8;
                            }
                            while (v114);
                          }
                          v108 = v127;
                          if (v127)
                          {
                            v127 = 0;
                            LODWORD(v128) = 0;
                            WTF::fastFree(v108, v41);
                          }
                        }
                        else
                        {
                          v131 = 0;
                          *(_OWORD *)v129 = 0u;
                          v130 = 0u;
                          v132 = v144[0];
                          v133[0] = 0;
                          v134 = -1;
                          v96 = v146;
                          if (v146 != -1)
                          {
                            ((void (*)(_QWORD *, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v146])(v122, v133, v145);
                            v134 = v96;
                          }
                          v135 = 0;
                          v136 = 0;
                          v137 = 0;
                          v138[0] = 0;
                          v140 = 0;
                          v141 = 0;
                          v142 = 0;
                          v143 = 1;
                          WebCore::IDBGetResult::operator=(a6, (uint64_t)v129);
                          WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v129, v97);
                          *(_WORD *)a7 = 0;
                          *(_QWORD *)(a7 + 8) = 0;
                        }
                        goto LABEL_108;
                      }
                    }
                  }
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v71 = v129[0];
                *(_WORD *)a7 = 280;
                if (v71)
                {
                  v72 = *(_DWORD *)v71;
                  *(_DWORD *)v71 += 2;
                  *(_QWORD *)(a7 + 8) = v71;
                  if (v72)
                    *(_DWORD *)v71 = v72;
                  else
                    WTF::StringImpl::destroy(v71, v41);
                }
                else
                {
                  *(_QWORD *)(a7 + 8) = 0;
                }
LABEL_108:
                if (v146 != -1)
                  ((void (*)(WTF::StringImpl **, _QWORD *))off_1E335ACA8[v146])(v129, v145);
                if (v61)
                {
                  do
                  {
                    v73 = __ldaxr((unsigned int *)v61);
                    v74 = v73 - 1;
                  }
                  while (__stlxr(v74, (unsigned int *)v61));
                  if (!v74)
                  {
                    atomic_store(1u, (unsigned int *)v61);
                    v109 = *(WTF **)(v61 + 8);
                    if (v109)
                    {
                      *(_QWORD *)(v61 + 8) = 0;
                      *(_DWORD *)(v61 + 16) = 0;
                      WTF::fastFree(v109, v41);
                    }
                    WTF::fastFree((WTF *)v61, v41);
                  }
                }
                do
                {
                  v75 = __ldaxr((unsigned int *)v60);
                  v76 = v75 - 1;
                }
                while (__stlxr(v76, (unsigned int *)v60));
                if (!v76)
                {
                  atomic_store(1u, (unsigned int *)v60);
                  v77 = *(WTF **)(v60 + 8);
                  if (v77)
                  {
                    *(_QWORD *)(v60 + 8) = 0;
                    *(_DWORD *)(v60 + 16) = 0;
                    WTF::fastFree(v77, v41);
                  }
                  WTF::fastFree((WTF *)v60, v41);
                }
                goto LABEL_71;
              }
              v48 = *(_QWORD *)(*(_QWORD *)(v36 + 8) + 8);
              v49 = *(unsigned int *)(v48 + 24);
              if ((_DWORD)v49 != -1)
              {
                v129[0] = (WTF::StringImpl *)v122;
                v50 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v49])(v129, v48 + 8);
                goto LABEL_65;
              }
LABEL_200:
              v116 = (WebCore::IDBServer::SQLiteIDBBackingStore *)std::__throw_bad_variant_access[abi:sn180100]();
              WebCore::IDBServer::SQLiteIDBBackingStore::getAllRecords(v116, v117, v118, v119);
              return;
            }
            v37 = "SELECT key, value, ROWID FROM Records WHERE objectStoreID = ? AND key > CAST(? AS TEXT) AND key <= CAS"
                  "T(? AS TEXT) ORDER BY key;";
            v38 = a1;
            v39 = 41;
          }
          else
          {
            if (!a4[65])
            {
              v37 = "SELECT key, value, ROWID FROM Records WHERE objectStoreID = ? AND key >= CAST(? AS TEXT) AND key <= "
                    "CAST(? AS TEXT) ORDER BY key;";
              v38 = a1;
              v39 = 43;
              v40 = 130;
              goto LABEL_56;
            }
            v37 = "SELECT key, value, ROWID FROM Records WHERE objectStoreID = ? AND key >= CAST(? AS TEXT) AND key < CAS"
                  "T(? AS TEXT) ORDER BY key;";
            v38 = a1;
            v39 = 42;
          }
          v40 = 129;
          goto LABEL_56;
        }
        if (a4[64])
        {
          if (a4[65])
          {
            v37 = "SELECT key FROM Records WHERE objectStoreID = ? AND key > CAST(? AS TEXT) AND key < CAST(? AS TEXT) ORDER BY key;";
            v38 = a1;
            v39 = 44;
            v40 = 114;
            goto LABEL_56;
          }
          v37 = "SELECT key FROM Records WHERE objectStoreID = ? AND key > CAST(? AS TEXT) AND key <= CAST(? AS TEXT) ORDER BY key;";
          v38 = a1;
          v39 = 45;
        }
        else
        {
          if (!a4[65])
          {
            v37 = "SELECT key FROM Records WHERE objectStoreID = ? AND key >= CAST(? AS TEXT) AND key <= CAST(? AS TEXT) ORDER BY key;";
            v38 = a1;
            v39 = 47;
            v40 = 116;
            goto LABEL_56;
          }
          v37 = "SELECT key FROM Records WHERE objectStoreID = ? AND key >= CAST(? AS TEXT) AND key < CAST(? AS TEXT) ORDER BY key;";
          v38 = a1;
          v39 = 46;
        }
        v40 = 115;
        goto LABEL_56;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v26 = 264;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v26 = 280;
  }
  *(_WORD *)a7 = v26;
  v27 = v129[0];
  if (v129[0])
  {
    v28 = *(_DWORD *)v129[0];
    *(_DWORD *)v129[0] += 2;
    *(_QWORD *)(a7 + 8) = v27;
    v129[0] = 0;
    if (v28)
      *(_DWORD *)v27 = v28;
    else
      WTF::StringImpl::destroy(v27, v25);
  }
  else
  {
    *(_QWORD *)(a7 + 8) = 0;
  }
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::getAllRecords@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, const WebCore::IDBGetAllRecordsData *a3@<X2>, WebCore::IDBGetAllResult *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  WebCore::IDBServer::SQLiteIDBCursor *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  __int16 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t result;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  const char *v43;
  WebCore::IDBServer::SQLiteIDBBackingStore *v44;
  unint64_t v45;
  int v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  WebCore::IDBValue *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  BOOL v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  BOOL v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  unsigned int v91;
  WTF::StringImpl *v92;
  WTF *v93;
  uint64_t v94;
  _DWORD **v95;
  uint64_t v96;
  _DWORD *v97;
  WTF *v98;
  uint64_t v99;
  _DWORD **v100;
  uint64_t v101;
  _DWORD *v102;
  WTF::StringImpl *v103;
  int v104;
  WTF *v105;
  void *v106;
  sqlite3_stmt **v107;
  uint64_t v108;
  uint64_t v109;
  const void *v110;
  uint64_t v111;
  uint64_t v112;
  const void *v113;
  __int16 v114;
  int v115;
  sqlite3_stmt **v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WebCore::IDBValue *v135;
  uint64_t v136;
  uint64_t v137;
  WTF *v138;
  WTF *v139;
  uint64_t v140;
  _DWORD *v141;
  uint64_t v142;
  unsigned int v143;
  BOOL v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  sqlite3_stmt **v148;
  const UInt8 *v149;
  const UInt8 *v150;
  int v151;
  CFIndex v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  void (*v157)(uint64_t);
  uint64_t v158;
  int v159;
  char v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _DWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  sqlite3_int64 v170;
  WTF *v171;
  unsigned int v172;
  unsigned int v173;
  WTF *v174;
  WTF *v175;
  WTF *v176;
  WTF *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF *v181;
  WTF *v182;
  unsigned int v183;
  unsigned int v184;
  WTF *v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  WTF *v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  WTF *v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  WTF *v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  WTF *v197;
  WTF *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int *v202;
  unsigned int v203;
  unsigned int v204;
  uint64_t v205;
  WTF *v206;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int *v211;
  unsigned int v212;
  unsigned int v213;
  uint64_t v214;
  WTF *v215;
  unsigned int v217;
  _QWORD *v218;
  _QWORD *v219;
  unsigned int v220;
  unsigned int v221;
  WTF *v222;
  WTF *v223;
  WTF *v224;
  WTF *v225;
  WebCore::IDBServer::SQLiteIDBCursor *v226;
  _QWORD v227[2];
  int v228;
  WTF::StringImpl *v229;
  WTF *v230[2];
  WTF *v231[2];
  _BYTE v232[16];
  int v233;
  char v234;
  sqlite3_stmt **v235;
  uint64_t v236;
  uint64_t v237;
  WebCore::IDBServer::SQLiteIDBCursor *v238;
  _BYTE v239[16];
  int v240;

  v10 = *((_QWORD *)a3 + 12);
  v11 = *(_QWORD *)a2;
  v12 = *((_QWORD *)a2 + 1);
  if (!v10)
  {
    v20 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), v11, v12);
    if (!v20)
      goto LABEL_23;
    v21 = v20[2];
    if (!v21)
      goto LABEL_23;
    v22 = *(_QWORD *)(v21 + 64);
    if (!v22 || !*(_BYTE *)(v22 + 8))
      goto LABEL_23;
    LOBYTE(v238) = *(_BYTE *)a3;
    v239[0] = 0;
    v240 = -1;
    v23 = *((unsigned int *)a3 + 6);
    if ((_DWORD)v23 != -1)
    {
      ((void (*)(WTF::StringImpl **, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v23])(&v229, v239, (char *)a3 + 8);
      v240 = v23;
      if (!(_DWORD)v23)
      {
        LOBYTE(v229) = 0;
        v230[0] = 0;
        LODWORD(v231[0]) = 7;
        LOBYTE(v238) = 0;
        ((void (*)(WebCore::IDBServer::SQLiteIDBCursor **, _BYTE *))off_1E335ACA8[v23])(&v226, v239);
        v240 = 7;
        if (LODWORD(v231[0]) != -1)
          ((void (*)(WebCore::IDBServer::SQLiteIDBCursor **, WTF **))off_1E335ACA8[LODWORD(v231[0])])(&v226, v230);
      }
    }
    WebCore::serializeIDBKeyData((WebCore *)&v238, &v237);
    v24 = v237;
    if (!v237)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)a5 = 280;
      result = (uint64_t)v229;
      if (v229)
      {
        v41 = *(_DWORD *)v229;
        *(_DWORD *)v229 += 2;
        *(_QWORD *)(a5 + 8) = result;
        v229 = 0;
        if (v41)
          *(_DWORD *)result = v41;
        else
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v40);
      }
      else
      {
        *(_QWORD *)(a5 + 8) = 0;
      }
      goto LABEL_166;
    }
    LOBYTE(v238) = *((_BYTE *)a3 + 32);
    v25 = *((unsigned int *)a3 + 14);
    if (v240 == -1)
    {
      if ((_DWORD)v25 == -1)
        goto LABEL_42;
    }
    else if ((_DWORD)v25 == -1)
    {
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E335ACA8[v240])(&v229, v239);
      v26 = -1;
      goto LABEL_41;
    }
    v229 = (WTF::StringImpl *)v239;
    ((void (*)(WTF::StringImpl **, _BYTE *, char *))off_1E335AD98[v25])(&v229, v239, (char *)a3 + 40);
    if (v240)
      goto LABEL_42;
    LOBYTE(v238) = 0;
    v26 = 8;
LABEL_41:
    v240 = v26;
LABEL_42:
    WebCore::serializeIDBKeyData((WebCore *)&v238, &v236);
    v42 = v236;
    if (!v236)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      result = (uint64_t)v229;
      *(_WORD *)a5 = 280;
      if (result)
      {
        v48 = *(_DWORD *)result;
        *(_DWORD *)result += 2;
        *(_QWORD *)(a5 + 8) = result;
        if (v48)
          *(_DWORD *)result = v48;
        else
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v47);
      }
      else
      {
        *(_QWORD *)(a5 + 8) = 0;
      }
      goto LABEL_163;
    }
    if (*((_BYTE *)a3 + 72))
    {
      if (*((_BYTE *)a3 + 64))
      {
        if (*((_BYTE *)a3 + 65))
        {
          v43 = "SELECT key, value, ROWID FROM Records WHERE objectStoreID = ? AND key > CAST(? AS TEXT) AND key < CAST(?"
                " AS TEXT) ORDER BY key;";
          v44 = this;
          v45 = 40;
          v46 = 128;
LABEL_144:
          WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement(&v235, (uint64_t)v44, v45, v43, v46);
          v107 = v235;
          if (!v235 || sqlite3_bind_int64(v235[1], 1, *((_QWORD *)a3 + 11)))
            goto LABEL_154;
          if (*(_DWORD *)(v24 + 20))
          {
            v108 = *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8);
            v109 = *(unsigned int *)(v108 + 24);
            if ((_DWORD)v109 == -1)
              goto LABEL_350;
            v229 = (WTF::StringImpl *)&v226;
            v110 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v109])(&v229, v108 + 8);
          }
          else
          {
            v110 = 0;
          }
          if (sqlite3_bind_blob(v107[1], 2, v110, *(_DWORD *)(v24 + 48), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
          {
            goto LABEL_154;
          }
          if (!*(_DWORD *)(v42 + 20))
          {
            v113 = 0;
LABEL_153:
            if (sqlite3_bind_blob(v107[1], 3, v113, *(_DWORD *)(v42 + 48), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
            {
              goto LABEL_154;
            }
            v123 = *(_QWORD *)(*((_QWORD *)this + 67) + 32);
            if (!v123)
              goto LABEL_305;
            v124 = *((_QWORD *)a3 + 11);
            v125 = *(_DWORD *)(v123 - 8);
            v126 = (v124 + ~(v124 << 32)) ^ ((unint64_t)(v124 + ~(v124 << 32)) >> 22);
            v127 = 9 * ((v126 + ~(v126 << 13)) ^ ((v126 + ~(v126 << 13)) >> 8));
            v128 = (v127 ^ (v127 >> 15)) + ~((v127 ^ (v127 >> 15)) << 27);
            v129 = v125 & ((v128 >> 31) ^ v128);
            v130 = (uint64_t *)(v123 + 72 * v129);
            v131 = *v130;
            if (*v130 != v124)
            {
              v132 = 1;
              while (v131)
              {
                v129 = (v129 + v132) & v125;
                v130 = (uint64_t *)(v123 + 72 * v129);
                v131 = *v130;
                ++v132;
                if (*v130 == v124)
                  goto LABEL_178;
              }
              v130 = (uint64_t *)(v123 + 72 * *(unsigned int *)(v123 - 4));
            }
LABEL_178:
            if (v130 == (uint64_t *)(v123 + 72 * *(unsigned int *)(v123 - 4)))
            {
LABEL_305:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              result = (uint64_t)v229;
              v114 = 264;
              goto LABEL_155;
            }
            LOBYTE(v229) = *((_BYTE *)a3 + 72);
            v234 = 0;
            *(_OWORD *)v230 = 0u;
            *(_OWORD *)v231 = 0u;
            v232[0] = 0;
            if (*((_BYTE *)v130 + 48))
            {
              v233 = -1;
              v133 = *((unsigned int *)v130 + 10);
              if ((_DWORD)v133 != -1)
              {
                ((void (*)(WebCore::IDBServer::SQLiteIDBCursor **, _BYTE *, uint64_t *))off_1E335AC98[v133])(&v226, v232, v130 + 3);
                v233 = v133;
              }
              v234 = 1;
            }
            WebCore::IDBGetAllResult::operator=((uint64_t)a4, &v229);
            if (v234)
            {
              if (v233 != -1)
                ((void (*)(WebCore::IDBServer::SQLiteIDBCursor **, _BYTE *))off_1E335AC88[v233])(&v226, v232);
              v233 = -1;
            }
            if (HIDWORD(v231[1]))
            {
              v135 = v231[0];
              v136 = 40 * HIDWORD(v231[1]);
              do
              {
                WebCore::IDBValue::~IDBValue(v135, v134);
                v135 = (WebCore::IDBValue *)(v137 + 40);
                v136 -= 40;
              }
              while (v136);
            }
            v138 = v231[0];
            if (v231[0])
            {
              v231[0] = 0;
              LODWORD(v231[1]) = 0;
              WTF::fastFree(v138, v134);
            }
            v139 = v230[0];
            if (HIDWORD(v230[1]))
            {
              v140 = 32 * HIDWORD(v230[1]);
              v141 = (_DWORD *)((char *)v230[0] + 24);
              do
              {
                v142 = *v141;
                if ((_DWORD)v142 != -1)
                  ((void (*)(WebCore::IDBServer::SQLiteIDBCursor **, _DWORD *))off_1E335ACA8[v142])(&v226, v141 - 4);
                *v141 = -1;
                v141 += 8;
                v140 -= 32;
              }
              while (v140);
              v139 = v230[0];
            }
            if (v139)
            {
              v230[0] = 0;
              LODWORD(v230[1]) = 0;
              WTF::fastFree(v139, v134);
            }
            v143 = *((_DWORD *)a3 + 19);
            if (v143)
              v144 = *((_BYTE *)a3 + 80) == 0;
            else
              v144 = 1;
            if (v144)
              v145 = 0xFFFFFFFFLL;
            else
              v145 = v143;
            result = (uint64_t)WebCore::SQLiteStatement::step(v235);
            v146 = result;
            v147 = 0;
            v219 = (_QWORD *)((char *)a4 + 8);
            while (1)
            {
              if (v146 != 100 || v147 >= v145)
              {
                if ((v146 - 100) < 2 || !v146)
                {
                  *(_WORD *)a5 = 0;
LABEL_309:
                  *(_QWORD *)(a5 + 8) = 0;
LABEL_158:
                  v116 = v235;
                  if (v235)
                  {
                    sqlite3_reset(v235[1]);
                    result = sqlite3_clear_bindings(v116[1]);
                  }
                  v117 = v236;
                  v236 = 0;
                  if (v117)
                  {
                    do
                    {
                      v118 = __ldaxr((unsigned int *)v117);
                      v119 = v118 - 1;
                    }
                    while (__stlxr(v119, (unsigned int *)v117));
                    if (!v119)
                    {
                      atomic_store(1u, (unsigned int *)v117);
                      v208 = *(unsigned int *)(v117 + 20);
                      if ((_DWORD)v208)
                      {
                        v209 = *(_QWORD *)(v117 + 8);
                        v210 = v209 + 16 * v208;
                        do
                        {
                          v211 = *(unsigned int **)(v209 + 8);
                          *(_QWORD *)(v209 + 8) = 0;
                          if (v211)
                          {
                            do
                            {
                              v212 = __ldaxr(v211);
                              v213 = v212 - 1;
                            }
                            while (__stlxr(v213, v211));
                            if (!v213)
                            {
                              atomic_store(1u, v211);
                              v214 = v211[6];
                              if ((_DWORD)v214 != -1)
                                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335AE70[v214])(&v229, v211 + 2);
                              v211[6] = -1;
                              WTF::fastFree((WTF *)v211, v47);
                            }
                          }
                          v209 += 16;
                        }
                        while (v209 != v210);
                      }
                      v215 = *(WTF **)(v117 + 8);
                      if ((WTF *)(v117 + 24) != v215 && v215 != 0)
                      {
                        *(_QWORD *)(v117 + 8) = 0;
                        *(_DWORD *)(v117 + 16) = 0;
                        WTF::fastFree(v215, v47);
                      }
                      result = WTF::fastFree((WTF *)v117, v47);
                    }
                  }
LABEL_163:
                  v120 = v237;
                  v237 = 0;
                  if (v120)
                  {
                    do
                    {
                      v121 = __ldaxr((unsigned int *)v120);
                      v122 = v121 - 1;
                    }
                    while (__stlxr(v122, (unsigned int *)v120));
                    if (!v122)
                    {
                      atomic_store(1u, (unsigned int *)v120);
                      v199 = *(unsigned int *)(v120 + 20);
                      if ((_DWORD)v199)
                      {
                        v200 = *(_QWORD *)(v120 + 8);
                        v201 = v200 + 16 * v199;
                        do
                        {
                          v202 = *(unsigned int **)(v200 + 8);
                          *(_QWORD *)(v200 + 8) = 0;
                          if (v202)
                          {
                            do
                            {
                              v203 = __ldaxr(v202);
                              v204 = v203 - 1;
                            }
                            while (__stlxr(v204, v202));
                            if (!v204)
                            {
                              atomic_store(1u, v202);
                              v205 = v202[6];
                              if ((_DWORD)v205 != -1)
                                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335AE70[v205])(&v229, v202 + 2);
                              v202[6] = -1;
                              WTF::fastFree((WTF *)v202, v47);
                            }
                          }
                          v200 += 16;
                        }
                        while (v200 != v201);
                      }
                      v206 = *(WTF **)(v120 + 8);
                      if ((WTF *)(v120 + 24) != v206 && v206 != 0)
                      {
                        *(_QWORD *)(v120 + 8) = 0;
                        *(_DWORD *)(v120 + 16) = 0;
                        WTF::fastFree(v206, v47);
                      }
                      result = WTF::fastFree((WTF *)v120, v47);
                    }
                  }
LABEL_166:
                  if (v240 != -1)
                    return ((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E335ACA8[v240])(&v229, v239);
                  return result;
                }
LABEL_154:
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                result = (uint64_t)v229;
                v114 = 280;
LABEL_155:
                *(_WORD *)a5 = v114;
                if (!result)
                  goto LABEL_309;
                v115 = *(_DWORD *)result;
                *(_DWORD *)result += 2;
                *(_QWORD *)(a5 + 8) = result;
                if (v115)
                  *(_DWORD *)result = v115;
                else
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v47);
                goto LABEL_158;
              }
              v148 = v235;
              if (!sqlite3_stmt_busy(v235[1]) && WebCore::SQLiteStatement::step(v148) != 100
                || sqlite3_data_count(v148[1]) < 1
                || (v149 = (const UInt8 *)sqlite3_column_blob(v148[1], 0)) == 0)
              {
                LOBYTE(v226) = 0;
                v227[0] = 0;
                v228 = 0;
LABEL_222:
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                result = (uint64_t)v229;
                *(_WORD *)a5 = 280;
                if (result)
                {
                  v159 = *(_DWORD *)result;
                  *(_DWORD *)result += 2;
                  *(_QWORD *)(a5 + 8) = result;
                  if (v159)
                  {
                    v160 = 0;
                    *(_DWORD *)result = v159;
                  }
                  else
                  {
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v47);
                    v160 = 0;
                  }
                }
                else
                {
                  v160 = 0;
                  *(_QWORD *)(a5 + 8) = 0;
                }
                v146 = 100;
                goto LABEL_226;
              }
              v150 = v149;
              v151 = sqlite3_column_bytes(v148[1], 0);
              LOBYTE(v226) = 0;
              v227[0] = 0;
              v228 = 0;
              if (v151 >= 1)
                v152 = v151;
              else
                v152 = 0;
              if (v151 < 1)
                goto LABEL_222;
              if (*v150)
              {
                if (*v150 != 98)
                  goto LABEL_222;
                v221 = v147;
                v153 = v145;
                v154 = WTF::fastMalloc((WTF *)0x140);
                v155 = WebCore::KeyedDecoderCF::KeyedDecoderCF(v154, v150, v152);
                v156 = WebCore::IDBKeyData::decode(v155, (uint64_t)&v226);
                v157 = *(void (**)(uint64_t))(*(_QWORD *)v154 + 8);
                v158 = v154;
                v145 = v153;
                v147 = v221;
                v157(v158);
                if ((v156 & 1) == 0)
                  goto LABEL_222;
              }
              else
              {
                v229 = (WTF::StringImpl *)(v150 + 1);
                v230[0] = (WTF *)(v152 - 1);
                if ((WebCore::decodeKey((unsigned __int8 **)&v229, (uint64_t)&v226) & 1) == 0 || v230[0])
                  goto LABEL_222;
              }
              v217 = v145;
              v161 = *((unsigned int *)a4 + 5);
              if ((_DWORD)v161 == *((_DWORD *)a4 + 4))
              {
                v162 = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v219, v161 + 1, (unint64_t)&v226);
                v163 = *((_QWORD *)a4 + 1) + 32 * *((unsigned int *)a4 + 5);
                *(_BYTE *)v163 = *(_BYTE *)v162;
                *(_BYTE *)(v163 + 8) = 0;
                v164 = v163 + 8;
                *(_DWORD *)(v163 + 24) = -1;
                v165 = (_DWORD *)(v163 + 24);
                v166 = *(unsigned int *)(v162 + 24);
                if ((_DWORD)v166 == -1)
                  goto LABEL_239;
                ((void (*)(WTF::StringImpl **, uint64_t, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v166])(&v229, v164, v162 + 8);
              }
              else
              {
                v167 = *v219 + 32 * v161;
                *(_BYTE *)v167 = (_BYTE)v226;
                *(_BYTE *)(v167 + 8) = 0;
                v168 = v167 + 8;
                *(_DWORD *)(v167 + 24) = -1;
                v165 = (_DWORD *)(v167 + 24);
                LODWORD(v166) = v228;
                if (v228 == -1)
                  goto LABEL_239;
                ((void (*)(WTF::StringImpl **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v228])(&v229, v168, v227);
              }
              *v165 = v166;
LABEL_239:
              ++*((_DWORD *)a4 + 5);
              if (*((_BYTE *)a3 + 72))
              {
                WebCore::SQLiteStatement::columnBlob(v148, 1, (uint64_t)&v229);
                v169 = WTF::fastMalloc((WTF *)0x18);
                *(_DWORD *)v169 = 1;
                *(_QWORD *)(v169 + 8) = v229;
                *(WTF **)(v169 + 16) = v230[0];
                if ((sqlite3_stmt_busy(v148[1]) || WebCore::SQLiteStatement::step(v148) == 100)
                  && sqlite3_data_count(v148[1]) >= 3)
                {
                  v170 = sqlite3_column_int64(v148[1], 2);
                }
                else
                {
                  v170 = 0;
                }
                v224 = 0;
                v225 = 0;
                v222 = 0;
                v223 = 0;
                WebCore::IDBServer::SQLiteIDBBackingStore::getBlobRecordsForObjectStoreRecord(a5, (uint64_t)this, v170, (uint64_t)&v224, (uint64_t)&v222);
                if (*(_BYTE *)(a5 + 1))
                {
                  if (HIDWORD(v223))
                  {
                    v185 = v222;
                    v186 = 8 * HIDWORD(v223);
                    do
                    {
                      v187 = *(WTF::StringImpl **)v185;
                      *(_QWORD *)v185 = 0;
                      if (v187)
                      {
                        if (*(_DWORD *)v187 == 2)
                          WTF::StringImpl::destroy(v187, v47);
                        else
                          *(_DWORD *)v187 -= 2;
                      }
                      v185 = (WTF *)((char *)v185 + 8);
                      v186 -= 8;
                    }
                    while (v186);
                  }
                  v171 = v222;
                  if (v222)
                  {
                    v222 = 0;
                    LODWORD(v223) = 0;
                    WTF::fastFree(v171, v47);
                  }
                  if (HIDWORD(v225))
                  {
                    v188 = v224;
                    v189 = 8 * HIDWORD(v225);
                    do
                    {
                      v190 = *(WTF::StringImpl **)v188;
                      *(_QWORD *)v188 = 0;
                      if (v190)
                      {
                        if (*(_DWORD *)v190 == 2)
                          WTF::StringImpl::destroy(v190, v47);
                        else
                          *(_DWORD *)v190 -= 2;
                      }
                      v188 = (WTF *)((char *)v188 + 8);
                      v189 -= 8;
                    }
                    while (v189);
                  }
                  result = (uint64_t)v224;
                  if (v224)
                  {
                    v224 = 0;
                    LODWORD(v225) = 0;
                    result = WTF::fastFree((WTF *)result, v47);
                  }
                  do
                    v172 = __ldaxr((unsigned int *)v169);
                  while (__stlxr(v172 - 1, (unsigned int *)v169));
                  if (v172 == 1)
                  {
                    atomic_store(1u, (unsigned int *)v169);
                    v197 = *(WTF **)(v169 + 8);
                    if (v197)
                    {
                      *(_QWORD *)(v169 + 8) = 0;
                      *(_DWORD *)(v169 + 16) = 0;
                      WTF::fastFree(v197, v47);
                    }
                    result = WTF::fastFree((WTF *)v169, v47);
                  }
                  v160 = 0;
                  v146 = 100;
                  goto LABEL_268;
                }
                do
                  v173 = __ldaxr((unsigned int *)v169);
                while (__stlxr(v173 + 1, (unsigned int *)v169));
                v174 = v224;
                v224 = 0;
                v229 = (WTF::StringImpl *)v169;
                v230[0] = v174;
                v175 = v225;
                v225 = 0;
                v230[1] = v175;
                v176 = v222;
                v222 = 0;
                v231[0] = v176;
                v177 = v223;
                v223 = 0;
                v231[1] = v177;
                WebCore::IDBGetAllResult::addValue((uint64_t)a4, (unint64_t)&v229);
                WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v229, v178);
                v180 = *(WTF::StringImpl **)(a5 + 8);
                *(_QWORD *)(a5 + 8) = 0;
                if (v180)
                {
                  if (*(_DWORD *)v180 == 2)
                    WTF::StringImpl::destroy(v180, v179);
                  else
                    *(_DWORD *)v180 -= 2;
                }
                if (HIDWORD(v223))
                {
                  v191 = v222;
                  v192 = 8 * HIDWORD(v223);
                  do
                  {
                    v193 = *(WTF::StringImpl **)v191;
                    *(_QWORD *)v191 = 0;
                    if (v193)
                    {
                      if (*(_DWORD *)v193 == 2)
                        WTF::StringImpl::destroy(v193, v179);
                      else
                        *(_DWORD *)v193 -= 2;
                    }
                    v191 = (WTF *)((char *)v191 + 8);
                    v192 -= 8;
                  }
                  while (v192);
                }
                v181 = v222;
                if (v222)
                {
                  v222 = 0;
                  LODWORD(v223) = 0;
                  WTF::fastFree(v181, v179);
                }
                if (HIDWORD(v225))
                {
                  v194 = v224;
                  v195 = 8 * HIDWORD(v225);
                  do
                  {
                    v196 = *(WTF::StringImpl **)v194;
                    *(_QWORD *)v194 = 0;
                    if (v196)
                    {
                      if (*(_DWORD *)v196 == 2)
                        WTF::StringImpl::destroy(v196, v179);
                      else
                        *(_DWORD *)v196 -= 2;
                    }
                    v194 = (WTF *)((char *)v194 + 8);
                    v195 -= 8;
                  }
                  while (v195);
                }
                v182 = v224;
                if (v224)
                {
                  v224 = 0;
                  LODWORD(v225) = 0;
                  WTF::fastFree(v182, v179);
                }
                do
                {
                  v183 = __ldaxr((unsigned int *)v169);
                  v184 = v183 - 1;
                }
                while (__stlxr(v184, (unsigned int *)v169));
                if (!v184)
                {
                  atomic_store(1u, (unsigned int *)v169);
                  v198 = *(WTF **)(v169 + 8);
                  if (v198)
                  {
                    *(_QWORD *)(v169 + 8) = 0;
                    *(_DWORD *)(v169 + 16) = 0;
                    WTF::fastFree(v198, v179);
                  }
                  WTF::fastFree((WTF *)v169, v179);
                }
              }
              ++v147;
              result = (uint64_t)WebCore::SQLiteStatement::step(v235);
              v146 = result;
              v160 = 1;
LABEL_268:
              v145 = v217;
LABEL_226:
              if (v228 != -1)
                result = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E335ACA8[v228])(&v229, v227);
              if ((v160 & 1) == 0)
                goto LABEL_158;
            }
          }
          v111 = *(_QWORD *)(*(_QWORD *)(v42 + 8) + 8);
          v112 = *(unsigned int *)(v111 + 24);
          if ((_DWORD)v112 != -1)
          {
            v229 = (WTF::StringImpl *)&v226;
            v113 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v112])(&v229, v111 + 8);
            goto LABEL_153;
          }
LABEL_350:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_351:
          __break(0xC471u);
          JUMPOUT(0x1953E7DDCLL);
        }
        v43 = "SELECT key, value, ROWID FROM Records WHERE objectStoreID = ? AND key > CAST(? AS TEXT) AND key <= CAST(? "
              "AS TEXT) ORDER BY key;";
        v44 = this;
        v45 = 41;
      }
      else
      {
        if (!*((_BYTE *)a3 + 65))
        {
          v43 = "SELECT key, value, ROWID FROM Records WHERE objectStoreID = ? AND key >= CAST(? AS TEXT) AND key <= CAST"
                "(? AS TEXT) ORDER BY key;";
          v44 = this;
          v45 = 43;
          v46 = 130;
          goto LABEL_144;
        }
        v43 = "SELECT key, value, ROWID FROM Records WHERE objectStoreID = ? AND key >= CAST(? AS TEXT) AND key < CAST(? "
              "AS TEXT) ORDER BY key;";
        v44 = this;
        v45 = 42;
      }
      v46 = 129;
      goto LABEL_144;
    }
    if (*((_BYTE *)a3 + 64))
    {
      if (*((_BYTE *)a3 + 65))
      {
        v43 = "SELECT key FROM Records WHERE objectStoreID = ? AND key > CAST(? AS TEXT) AND key < CAST(? AS TEXT) ORDER BY key;";
        v44 = this;
        v45 = 36;
        v46 = 114;
        goto LABEL_144;
      }
      v43 = "SELECT key FROM Records WHERE objectStoreID = ? AND key > CAST(? AS TEXT) AND key <= CAST(? AS TEXT) ORDER BY key;";
      v44 = this;
      v45 = 37;
    }
    else
    {
      if (!*((_BYTE *)a3 + 65))
      {
        v43 = "SELECT key FROM Records WHERE objectStoreID = ? AND key >= CAST(? AS TEXT) AND key <= CAST(? AS TEXT) ORDER BY key;";
        v44 = this;
        v45 = 39;
        v46 = 116;
        goto LABEL_144;
      }
      v43 = "SELECT key FROM Records WHERE objectStoreID = ? AND key >= CAST(? AS TEXT) AND key < CAST(? AS TEXT) ORDER BY key;";
      v44 = this;
      v45 = 38;
    }
    v46 = 115;
    goto LABEL_144;
  }
  v13 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), v11, v12);
  if (!v13
    || (v14 = (uint64_t *)v13[2]) == 0
    || (v15 = v14[8]) == 0
    || !*(_BYTE *)(v15 + 8)
    || (WebCore::IDBServer::SQLiteIDBCursor::maybeCreateBackingStoreCursor((WebCore::IDBServer::SQLiteIDBCursor *)&v226, (WebCore::IDBServer::SQLiteIDBTransaction *)v14, *((_QWORD *)a3 + 11), v10, a3), (v16 = v226) == 0))
  {
LABEL_23:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a5 = 280;
    result = (uint64_t)v229;
    if (v229)
    {
      v29 = *(_DWORD *)v229;
      *(_DWORD *)v229 += 2;
      *(_QWORD *)(a5 + 8) = result;
      v229 = 0;
      if (v29)
        *(_DWORD *)result = v29;
      else
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v27);
    }
    else
    {
      *(_QWORD *)(a5 + 8) = 0;
    }
    return result;
  }
  v238 = v226;
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add((uint64_t *)&v229, v14 + 10, (uint64_t *)&v238);
  v17 = *((_QWORD *)v16 + 27);
  if (v17 == *((_QWORD *)v16 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x1953E7C48);
  }
  if (*(_BYTE *)(*((_QWORD *)v16 + 29) + 120 * v17 + 105))
    goto LABEL_9;
  v30 = *(_QWORD *)(*((_QWORD *)this + 67) + 32);
  if (!v30)
    goto LABEL_126;
  v31 = *((_QWORD *)a3 + 11);
  v32 = *(_DWORD *)(v30 - 8);
  v33 = (v31 + ~(v31 << 32)) ^ ((unint64_t)(v31 + ~(v31 << 32)) >> 22);
  v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
  v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
  v36 = v32 & ((v35 >> 31) ^ v35);
  v37 = (uint64_t *)(v30 + 72 * v36);
  v38 = *v37;
  if (*v37 != v31)
  {
    v39 = 1;
    while (v38)
    {
      v36 = (v36 + v39) & v32;
      v37 = (uint64_t *)(v30 + 72 * v36);
      v38 = *v37;
      ++v39;
      if (*v37 == v31)
        goto LABEL_56;
    }
    v37 = (uint64_t *)(v30 + 72 * *(unsigned int *)(v30 - 4));
  }
LABEL_56:
  if (v37 == (uint64_t *)(v30 + 72 * *(unsigned int *)(v30 - 4)))
  {
LABEL_126:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = 264;
    goto LABEL_127;
  }
  LOBYTE(v229) = *((_BYTE *)a3 + 72);
  v234 = 0;
  *(_OWORD *)v230 = 0u;
  *(_OWORD *)v231 = 0u;
  v232[0] = 0;
  if (*((_BYTE *)v37 + 48))
  {
    v233 = -1;
    v49 = *((unsigned int *)v37 + 10);
    if ((_DWORD)v49 != -1)
    {
      ((void (*)(WebCore::IDBServer::SQLiteIDBCursor **, _BYTE *, uint64_t *))off_1E335AC98[v49])(&v238, v232, v37 + 3);
      v233 = v49;
    }
    v234 = 1;
  }
  WebCore::IDBGetAllResult::operator=((uint64_t)a4, &v229);
  if (v234)
  {
    if (v233 != -1)
      ((void (*)(WebCore::IDBServer::SQLiteIDBCursor **, _BYTE *))off_1E335AC88[v233])(&v238, v232);
    v233 = -1;
  }
  if (HIDWORD(v231[1]))
  {
    v50 = v231[0];
    v51 = 40 * HIDWORD(v231[1]);
    do
    {
      WebCore::IDBValue::~IDBValue(v50, v18);
      v50 = (WebCore::IDBValue *)(v52 + 40);
      v51 -= 40;
    }
    while (v51);
  }
  v53 = v231[0];
  if (v231[0])
  {
    v231[0] = 0;
    LODWORD(v231[1]) = 0;
    WTF::fastFree(v53, v18);
  }
  v54 = v230[0];
  if (HIDWORD(v230[1]))
  {
    v55 = 32 * HIDWORD(v230[1]);
    v56 = (_DWORD *)((char *)v230[0] + 24);
    do
    {
      v57 = *v56;
      if ((_DWORD)v57 != -1)
        ((void (*)(WebCore::IDBServer::SQLiteIDBCursor **, _DWORD *))off_1E335ACA8[v57])(&v238, v56 - 4);
      *v56 = -1;
      v56 += 8;
      v55 -= 32;
    }
    while (v55);
    v54 = v230[0];
  }
  if (v54)
  {
    v230[0] = 0;
    LODWORD(v230[1]) = 0;
    WTF::fastFree(v54, v18);
  }
  if (*((_DWORD *)a3 + 19))
    v58 = *((_BYTE *)a3 + 80) == 0;
  else
    v58 = 1;
  if (v58)
    v59 = -1;
  else
    v59 = *((_DWORD *)a3 + 19);
  v220 = v59;
  v16 = v226;
  v61 = (uint64_t *)((char *)v226 + 216);
  v60 = *((_QWORD *)v226 + 27);
  v62 = (_QWORD *)((char *)v226 + 224);
  if (v60 == *((_QWORD *)v226 + 28))
  {
LABEL_352:
    __break(0xC471u);
    JUMPOUT(0x1953E7BF4);
  }
  v63 = 0;
  v218 = (_QWORD *)((char *)a4 + 8);
  while (1)
  {
    v64 = *((_QWORD *)v16 + 29);
    v65 = v64 + 120 * v60;
    v66 = *(unsigned __int8 *)(v65 + 104);
    v67 = *(unsigned __int8 *)(v65 + 105);
    v68 = !v66 && v67 == 0;
    if (!v68 || v63 >= v220)
      break;
    v70 = v64 + 120 * v60;
    LOBYTE(v238) = *(_BYTE *)(v70 + 32);
    v239[0] = 0;
    v240 = -1;
    v71 = *(unsigned int *)(v70 + 56);
    if ((_DWORD)v71 != -1)
    {
      ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v71])(&v229, v239, v64 + 120 * v60 + 40);
      v240 = v71;
    }
    v72 = *((unsigned int *)a4 + 5);
    if ((_DWORD)v72 == *((_DWORD *)a4 + 4))
    {
      v73 = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v218, v72 + 1, (unint64_t)&v238);
      v74 = *((_QWORD *)a4 + 1) + 32 * *((unsigned int *)a4 + 5);
      *(_BYTE *)v74 = *(_BYTE *)v73;
      *(_BYTE *)(v74 + 8) = 0;
      v75 = v74 + 8;
      *(_DWORD *)(v74 + 24) = -1;
      v76 = (_DWORD *)(v74 + 24);
      v77 = *(unsigned int *)(v73 + 24);
      if ((_DWORD)v77 != -1)
      {
        ((void (*)(WTF::StringImpl **, uint64_t, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v77])(&v229, v75, v73 + 8);
LABEL_100:
        *v76 = v77;
      }
    }
    else
    {
      v78 = *v218 + 32 * v72;
      *(_BYTE *)v78 = (_BYTE)v238;
      *(_BYTE *)(v78 + 8) = 0;
      v79 = v78 + 8;
      *(_DWORD *)(v78 + 24) = -1;
      v76 = (_DWORD *)(v78 + 24);
      LODWORD(v77) = v240;
      if (v240 != -1)
      {
        ((void (*)(WTF::StringImpl **, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v240])(&v229, v79, v239);
        goto LABEL_100;
      }
    }
    ++*((_DWORD *)a4 + 5);
    if (*((_BYTE *)a3 + 72))
    {
      v80 = *v61;
      if (v80 == *v62)
      {
        __break(0xC471u);
        JUMPOUT(0x1953E7C14);
      }
      v81 = *((_QWORD *)v16 + 29);
      v82 = *(unsigned int **)(v81 + 120 * v80 + 64);
      if (v82)
      {
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 + 1, v82));
      }
      v229 = (WTF::StringImpl *)v82;
      v84 = v81 + 120 * v80;
      v87 = *(_DWORD *)(v84 + 84);
      v86 = (unsigned int *)(v84 + 84);
      v85 = v87;
      v230[0] = 0;
      LODWORD(v230[1]) = 0;
      HIDWORD(v230[1]) = v87;
      if (v87)
      {
        if (v85 >> 29)
          goto LABEL_351;
        v93 = (WTF *)WTF::fastMalloc((WTF *)(8 * v85));
        LODWORD(v230[1]) = v85;
        v230[0] = v93;
        v94 = *v86;
        if ((_DWORD)v94)
        {
          v95 = *(_DWORD ***)(v86 - 3);
          v96 = 8 * v94;
          do
          {
            v97 = *v95;
            if (*v95)
              *v97 += 2;
            *(_QWORD *)v93 = v97;
            v93 = (WTF *)((char *)v93 + 8);
            ++v95;
            v96 -= 8;
          }
          while (v96);
        }
      }
      v88 = v81 + 120 * v80;
      v91 = *(_DWORD *)(v88 + 100);
      v89 = (unsigned int *)(v88 + 100);
      v90 = v91;
      v231[0] = 0;
      LODWORD(v231[1]) = 0;
      HIDWORD(v231[1]) = v91;
      if (v91)
      {
        if (v90 >> 29)
          goto LABEL_352;
        v98 = (WTF *)WTF::fastMalloc((WTF *)(8 * v90));
        LODWORD(v231[1]) = v90;
        v231[0] = v98;
        v99 = *v89;
        if ((_DWORD)v99)
        {
          v100 = *(_DWORD ***)(v89 - 3);
          v101 = 8 * v99;
          do
          {
            v102 = *v100;
            if (*v100)
              *v102 += 2;
            *(_QWORD *)v98 = v102;
            v98 = (WTF *)((char *)v98 + 8);
            ++v100;
            v101 -= 8;
          }
          while (v101);
        }
      }
      WebCore::IDBGetAllResult::addValue((uint64_t)a4, (unint64_t)&v229);
      WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v229, v92);
      v16 = v226;
    }
    WebCore::IDBServer::SQLiteIDBCursor::advance(v16, 1);
    if (v240 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E335ACA8[v240])(&v229, v239);
    ++v63;
    v16 = v226;
    v61 = (uint64_t *)((char *)v226 + 216);
    v60 = *((_QWORD *)v226 + 27);
    v62 = (_QWORD *)((char *)v226 + 224);
    if (v60 == *((_QWORD *)v226 + 28))
      goto LABEL_352;
  }
  if (v67)
  {
LABEL_9:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = 280;
LABEL_127:
    *(_WORD *)a5 = v19;
    v103 = v229;
    if (!v229)
      goto LABEL_133;
    v104 = *(_DWORD *)v229;
    *(_DWORD *)v229 += 2;
    *(_QWORD *)(a5 + 8) = v103;
    v229 = 0;
    if (v104)
      *(_DWORD *)v103 = v104;
    else
      WTF::StringImpl::destroy(v103, v18);
    goto LABEL_130;
  }
  *(_WORD *)a5 = 0;
LABEL_133:
  *(_QWORD *)(a5 + 8) = 0;
LABEL_130:
  v226 = 0;
  WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor(v16, v18);
  return WTF::fastFree(v105, v106);
}

void WebCore::IDBServer::SQLiteIDBBackingStore::getIndexRecord(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, sqlite3_int64 a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  const WTF::String *v18;
  WebCore::IDBServer::SQLiteIDBCursor *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  sqlite3_stmt **v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF *v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  unsigned int v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  char v73;
  char *v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  unsigned int v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  int v87;
  uint64_t v88;
  const UInt8 *v89;
  const UInt8 *v90;
  int v91;
  CFIndex v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  WTF::StringImpl *v107;
  int v108;
  sqlite3_int64 v109;
  WTF *v110;
  int v112;
  WTF::StringImpl *v113;
  uint64_t *v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unsigned int v119;
  uint64_t *v120;
  uint64_t v121;
  int v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  WTF::StringImpl *v127;
  WTF *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  unsigned int v136;
  unsigned int v137;
  WTF *v138;
  WTF *v139;
  WTF *v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF *v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  WTF *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int16 v153;
  WTF::StringImpl *v154;
  WTF *v155;
  uint64_t v156;
  WTF *v157;
  uint64_t v158;
  WTF *v159;
  uint64_t v160;
  WTF::StringImpl *v161[2];
  _OWORD v162[2];
  _QWORD v163[2];
  int v164;
  char v165;
  _QWORD v166[2];
  int v167;
  _BYTE v168[16];
  int v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  _QWORD v175[2];
  int v176;
  sqlite3_stmt **v177;
  uint64_t v178;
  _BYTE v179[9];

  v15 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*(_QWORD *)(a1 + 560), *a2, a2[1]);
  if (!v15)
    goto LABEL_17;
  v16 = (uint64_t *)v15[2];
  if (!v16)
    goto LABEL_17;
  v17 = v16[8];
  if (!v17 || !*(_BYTE *)(v17 + 8))
    goto LABEL_17;
  if (*(_DWORD *)(a6 + 24) | *(_DWORD *)(a6 + 56)
    && !*(_BYTE *)(a6 + 64)
    && !*(_BYTE *)(a6 + 65)
    && WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)(a6 + 32))
    && WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)a6)
    && !WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)a6, (const WebCore::IDBKeyData *)(a6 + 32), v18))
  {
    WebCore::serializeIDBKeyData((WebCore *)a6, &v178);
    v37 = v178;
    if (!v178)
    {
LABEL_17:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)a8 = 280;
      v26 = v161[0];
      if (v161[0])
      {
        v27 = *(_DWORD *)v161[0];
        *(_DWORD *)v161[0] += 2;
        *(_QWORD *)(a8 + 8) = v26;
        v161[0] = 0;
        if (v27)
          *(_DWORD *)v26 = v27;
        else
          WTF::StringImpl::destroy(v26, v25);
      }
      else
      {
        *(_QWORD *)(a8 + 8) = 0;
      }
      return;
    }
    WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement(&v177, a1, 0x12uLL, "SELECT IndexRecords.value, Records.value, Records.recordID FROM Records INNER JOIN IndexRecords ON Records.objectStoreID = IndexRecords.objectStoreID AND Records.recordID = IndexRecords.objectStoreRecordID WHERE IndexRecords.indexID = ? AND IndexRecords.key = CAST(? AS TEXT) ORDER BY IndexRecords.key, IndexRecords.value", 322);
    v38 = v177;
    if (!v177 || sqlite3_bind_int64(v177[1], 1, a4))
      goto LABEL_39;
    if (*(_DWORD *)(v37 + 20))
    {
      v39 = *(_QWORD *)(*(_QWORD *)(v37 + 8) + 8);
      v40 = *(unsigned int *)(v39 + 24);
      if ((_DWORD)v40 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_206;
      }
      v161[0] = (WTF::StringImpl *)&v148;
      v41 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v40])(v161, v39 + 8);
    }
    else
    {
      v41 = 0;
    }
    if (sqlite3_bind_blob(v38[1], 2, v41, *(_DWORD *)(v37 + 48), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_39:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)a8 = 280;
      v43 = v161[0];
      if (v161[0])
      {
        v44 = *(_DWORD *)v161[0];
        *(_DWORD *)v161[0] += 2;
        *(_QWORD *)(a8 + 8) = v43;
        v161[0] = 0;
        if (v44)
          *(_DWORD *)v43 = v44;
        else
          WTF::StringImpl::destroy(v43, v42);
      }
      else
      {
        *(_QWORD *)(a8 + 8) = 0;
      }
      goto LABEL_42;
    }
    v84 = WebCore::SQLiteStatement::step(v38);
    if (v84 - 102 <= 0xFFFFFFFD)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)a8 = 280;
      v86 = v161[0];
      if (v161[0])
      {
        v87 = *(_DWORD *)v161[0];
        *(_DWORD *)v161[0] += 2;
        *(_QWORD *)(a8 + 8) = v86;
        v161[0] = 0;
        if (v87)
          *(_DWORD *)v86 = v87;
        else
          WTF::StringImpl::destroy(v86, v85);
        goto LABEL_43;
      }
      goto LABEL_96;
    }
    if (v84 == 101)
    {
      *(_WORD *)a8 = 0;
LABEL_96:
      *(_QWORD *)(a8 + 8) = 0;
      goto LABEL_43;
    }
    v88 = a3;
    LOBYTE(v174) = 0;
    a3 = (uint64_t)v175;
    v175[0] = 0;
    v176 = 0;
    if ((sqlite3_stmt_busy(v38[1]) || WebCore::SQLiteStatement::step(v38) == 100)
      && sqlite3_data_count(v38[1]) >= 1)
    {
      v89 = (const UInt8 *)sqlite3_column_blob(v38[1], 0);
      if (v89)
      {
        v90 = v89;
        v91 = sqlite3_column_bytes(v38[1], 0);
        v92 = v91 >= 1 ? v91 : 0;
        if (v91 >= 1)
        {
          if (*v90)
          {
            if (*v90 == 98)
            {
              v93 = WTF::fastMalloc((WTF *)0x140);
              v94 = WebCore::KeyedDecoderCF::KeyedDecoderCF(v93, v90, v92);
              v95 = WebCore::IDBKeyData::decode(v94, (uint64_t)&v174);
              (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
              if ((v95 & 1) != 0)
              {
LABEL_134:
                if ((a5 & 1) != 0)
                {
                  WebCore::SQLiteStatement::columnBlob(v38, 1, (uint64_t)&v159);
                  if ((sqlite3_stmt_busy(v38[1]) || WebCore::SQLiteStatement::step(v38) == 100)
                    && sqlite3_data_count(v38[1]) >= 3)
                  {
                    v109 = sqlite3_column_int64(v38[1], 2);
                  }
                  else
                  {
                    v109 = 0;
                  }
                  v157 = 0;
                  v158 = 0;
                  v155 = 0;
                  v156 = 0;
                  WebCore::IDBServer::SQLiteIDBBackingStore::getBlobRecordsForObjectStoreRecord((uint64_t)&v153, a1, v109, (uint64_t)&v157, (uint64_t)&v155);
                  if (HIBYTE(v153))
                  {
                    *(_WORD *)a8 = v153;
                    *(_QWORD *)(a8 + 8) = v154;
LABEL_182:
                    if (HIDWORD(v156))
                    {
                      v140 = v155;
                      v141 = 8 * HIDWORD(v156);
                      do
                      {
                        v142 = *(WTF::StringImpl **)v140;
                        *(_QWORD *)v140 = 0;
                        if (v142)
                        {
                          if (*(_DWORD *)v142 == 2)
                            WTF::StringImpl::destroy(v142, v42);
                          else
                            *(_DWORD *)v142 -= 2;
                        }
                        v140 = (WTF *)((char *)v140 + 8);
                        v141 -= 8;
                      }
                      while (v141);
                    }
                    v138 = v155;
                    if (v155)
                    {
                      v155 = 0;
                      LODWORD(v156) = 0;
                      WTF::fastFree(v138, v42);
                    }
                    if (HIDWORD(v158))
                    {
                      v143 = v157;
                      v144 = 8 * HIDWORD(v158);
                      do
                      {
                        v145 = *(WTF::StringImpl **)v143;
                        *(_QWORD *)v143 = 0;
                        if (v145)
                        {
                          if (*(_DWORD *)v145 == 2)
                            WTF::StringImpl::destroy(v145, v42);
                          else
                            *(_DWORD *)v145 -= 2;
                        }
                        v143 = (WTF *)((char *)v143 + 8);
                        v144 -= 8;
                      }
                      while (v144);
                    }
                    v139 = v157;
                    if (v157)
                    {
                      v157 = 0;
                      LODWORD(v158) = 0;
                      WTF::fastFree(v139, v42);
                    }
                    if (v159)
                      WTF::fastFree(v159, v42);
                    goto LABEL_130;
                  }
                  v114 = *(uint64_t **)(*(_QWORD *)(a1 + 536) + 32);
                  if (v114)
                  {
                    v115 = *((_DWORD *)v114 - 2);
                    v116 = (~(v88 << 32) + v88) ^ ((unint64_t)(~(v88 << 32) + v88) >> 22);
                    v117 = 9 * ((v116 + ~(v116 << 13)) ^ ((v116 + ~(v116 << 13)) >> 8));
                    v118 = (v117 ^ (v117 >> 15)) + ~((v117 ^ (v117 >> 15)) << 27);
                    v119 = v115 & ((v118 >> 31) ^ v118);
                    v120 = &v114[9 * v119];
                    v121 = *v120;
                    if (*v120 != v88)
                    {
                      v122 = 1;
                      while (v121)
                      {
                        v119 = (v119 + v122) & v115;
                        v120 = &v114[9 * v119];
                        v121 = *v120;
                        ++v122;
                        if (*v120 == v88)
                          goto LABEL_162;
                      }
                      v120 = &v114[9 * *((unsigned int *)v114 - 1)];
                    }
LABEL_162:
                    v114 += 9 * *((unsigned int *)v114 - 1);
                  }
                  else
                  {
                    v120 = 0;
                  }
                  if (v120 == v114)
                    v123 = 0;
                  else
                    v123 = v120 + 1;
                  v124 = WTF::fastMalloc((WTF *)0x18);
                  v38 = (sqlite3_stmt **)v124;
                  *(_DWORD *)v124 = 1;
                  *(_QWORD *)(v124 + 8) = v159;
                  v125 = v160;
                  v159 = 0;
                  v160 = 0;
                  *(_QWORD *)(v124 + 16) = v125;
                  do
                    v126 = __ldaxr((unsigned int *)v124);
                  while (__stlxr(v126 + 1, (unsigned int *)v124));
                  v127 = v157;
                  v157 = 0;
                  v128 = v155;
                  v155 = 0;
                  v148 = 0;
                  v149 = 0;
                  v161[0] = (WTF::StringImpl *)v124;
                  v161[1] = v127;
                  v150 = 0;
                  v129 = v158;
                  v158 = 0;
                  *(_QWORD *)&v162[0] = v129;
                  v151 = 0;
                  *((_QWORD *)&v162[0] + 1) = v128;
                  v152 = 0;
                  v130 = v156;
                  v156 = 0;
                  *(_QWORD *)&v162[1] = v130;
                  BYTE8(v162[1]) = v174;
                  LOBYTE(v163[0]) = 0;
                  v164 = -1;
                  v131 = v176;
                  if (v176 == -1)
                  {
                    v165 = v174;
                    LOBYTE(v166[0]) = 0;
                    v167 = -1;
                  }
                  else
                  {
                    ((void (*)(_BYTE *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v176])(v179, v163, v175);
                    v164 = v131;
                    v132 = v176;
                    v165 = v174;
                    LOBYTE(v166[0]) = 0;
                    v167 = -1;
                    if (v176 != -1)
                    {
                      ((void (*)(_BYTE *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v176])(v179, v166, v175);
                      v167 = v132;
                    }
                  }
                  v168[0] = 0;
                  v170 = 0;
                  if (*((_BYTE *)v123 + 40))
                  {
                    v169 = -1;
                    v133 = *((unsigned int *)v123 + 8);
                    if ((_DWORD)v133 != -1)
                    {
                      ((void (*)(_BYTE *, _BYTE *, _QWORD *))off_1E335AC98[v133])(v179, v168, v123 + 2);
                      v169 = v133;
                    }
                    v170 = 1;
                  }
                  v171 = 0;
                  v172 = 0;
                  v173 = 1;
                  WebCore::IDBGetResult::operator=(a7, (uint64_t)v161);
                  WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v161, v134);
                  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v148, v135);
                  do
                  {
                    v136 = __ldaxr((unsigned int *)v38);
                    v137 = v136 - 1;
                  }
                  while (__stlxr(v137, (unsigned int *)v38));
                  if (v137)
                  {
LABEL_179:
                    *(_WORD *)a8 = 0;
                    *(_QWORD *)(a8 + 8) = 0;
                    if (v154)
                    {
                      if (*(_DWORD *)v154 == 2)
                        WTF::StringImpl::destroy(v154, v42);
                      else
                        *(_DWORD *)v154 -= 2;
                    }
                    goto LABEL_182;
                  }
LABEL_206:
                  atomic_store(1u, (unsigned int *)v38);
                  v146 = v38[1];
                  if (v146)
                  {
                    v38[1] = 0;
                    *((_DWORD *)v38 + 4) = 0;
                    WTF::fastFree(v146, v42);
                  }
                  WTF::fastFree((WTF *)v38, v42);
                  goto LABEL_179;
                }
                *(_OWORD *)v161 = 0u;
                memset(v162, 0, 24);
                BYTE8(v162[1]) = v174;
                LOBYTE(v163[0]) = 0;
                v164 = -1;
                v112 = v176;
                if (v176 != -1)
                {
                  ((void (*)(uint64_t *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v176])(&v148, v163, v175);
                  v164 = v112;
                }
                v165 = 0;
                v166[0] = 0;
                v167 = 0;
                v168[0] = 0;
                v170 = 0;
                v171 = 0;
                v172 = 0;
                v173 = 1;
                WebCore::IDBGetResult::operator=(a7, (uint64_t)v161);
                WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v161, v113);
                *(_WORD *)a8 = 0;
                goto LABEL_148;
              }
            }
          }
          else
          {
            v161[0] = (WTF::StringImpl *)(v90 + 1);
            v161[1] = (WTF::StringImpl *)(v92 - 1);
            if ((WebCore::decodeKey((unsigned __int8 **)v161, (uint64_t)&v174) & 1) != 0 && !v161[1])
              goto LABEL_134;
          }
        }
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a8 = 280;
    v107 = v161[0];
    if (v161[0])
    {
      v108 = *(_DWORD *)v161[0];
      *(_DWORD *)v161[0] += 2;
      *(_QWORD *)(a8 + 8) = v107;
      v161[0] = 0;
      if (v108)
        *(_DWORD *)v107 = v108;
      else
        WTF::StringImpl::destroy(v107, v42);
      goto LABEL_130;
    }
LABEL_148:
    *(_QWORD *)(a8 + 8) = 0;
LABEL_130:
    if (v176 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t))off_1E335ACA8[v176])(v161, a3);
    v38 = v177;
LABEL_42:
    if (!v38)
    {
LABEL_44:
      v45 = v178;
      v178 = 0;
      if (v45)
      {
        do
        {
          v46 = __ldaxr((unsigned int *)v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, (unsigned int *)v45));
        if (!v47)
        {
          atomic_store(1u, (unsigned int *)v45);
          v48 = *(unsigned int *)(v45 + 20);
          if ((_DWORD)v48)
          {
            v49 = *(_QWORD *)(v45 + 8);
            v50 = v49 + 16 * v48;
            do
            {
              v51 = *(unsigned int **)(v49 + 8);
              *(_QWORD *)(v49 + 8) = 0;
              if (v51)
              {
                do
                {
                  v52 = __ldaxr(v51);
                  v53 = v52 - 1;
                }
                while (__stlxr(v53, v51));
                if (!v53)
                {
                  atomic_store(1u, v51);
                  v54 = v51[6];
                  if ((_DWORD)v54 != -1)
                    ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335AE70[v54])(v161, v51 + 2);
                  v51[6] = -1;
                  WTF::fastFree((WTF *)v51, v42);
                }
              }
              v49 += 16;
            }
            while (v49 != v50);
          }
          v110 = *(WTF **)(v45 + 8);
          if ((WTF *)(v45 + 24) != v110 && v110 != 0)
          {
            *(_QWORD *)(v45 + 8) = 0;
            *(_DWORD *)(v45 + 16) = 0;
            WTF::fastFree(v110, v42);
          }
          v58 = (WTF *)v45;
          goto LABEL_63;
        }
      }
      return;
    }
LABEL_43:
    sqlite3_reset(v38[1]);
    sqlite3_clear_bindings(v38[1]);
    goto LABEL_44;
  }
  WebCore::IDBServer::SQLiteIDBCursor::maybeCreateBackingStoreCursor((WebCore::IDBServer::SQLiteIDBCursor *)&v174, (WebCore::IDBServer::SQLiteIDBTransaction *)v16, a3, a4, (const WebCore::IDBKeyRangeData *)a6);
  v19 = (WebCore::IDBServer::SQLiteIDBCursor *)v174;
  if (!v174)
    goto LABEL_17;
  v148 = v174;
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add((uint64_t *)v161, v16 + 10, &v148);
  v20 = *((_QWORD *)v19 + 27);
  if (v20 == *((_QWORD *)v19 + 28))
    goto LABEL_210;
  v21 = *((_QWORD *)v19 + 29);
  if (*(_BYTE *)(v21 + 120 * v20 + 105))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a8 = 280;
    v23 = v161[0];
    if (v161[0])
    {
      v24 = *(_DWORD *)v161[0];
      *(_DWORD *)v161[0] += 2;
      *(_QWORD *)(a8 + 8) = v23;
      v161[0] = 0;
      if (v24)
        *(_DWORD *)v23 = v24;
      else
        WTF::StringImpl::destroy(v23, v22);
      goto LABEL_62;
    }
LABEL_61:
    *(_QWORD *)(a8 + 8) = 0;
LABEL_62:
    WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor(v19, v22);
LABEL_63:
    WTF::fastFree(v58, v42);
    return;
  }
  if (*(_BYTE *)(v21 + 120 * v20 + 104))
  {
    v163[0] = 0;
    v164 = 0;
    v165 = 0;
    v166[0] = 0;
    v167 = 0;
    v168[0] = 0;
    v170 = 0;
    v171 = 0;
    v172 = 0;
    v173 = 0;
    *(_OWORD *)v161 = 0u;
    memset(v162, 0, 25);
LABEL_60:
    WebCore::IDBGetResult::operator=(a7, (uint64_t)v161);
    WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v161, v57);
    *(_WORD *)a8 = 0;
    goto LABEL_61;
  }
  if ((a5 & 1) == 0)
  {
    v55 = v21 + 120 * v20;
    *(_OWORD *)v161 = 0u;
    memset(v162, 0, 24);
    BYTE8(v162[1]) = *(_BYTE *)(v55 + 32);
    LOBYTE(v163[0]) = 0;
    v164 = -1;
    v56 = *(unsigned int *)(v55 + 56);
    if ((_DWORD)v56 != -1)
    {
      ((void (*)(uint64_t *, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v56])(&v148, v163, v21 + 120 * v20 + 40);
      v164 = v56;
    }
    v165 = 0;
    v166[0] = 0;
    v167 = 0;
    v168[0] = 0;
    v170 = 0;
    v171 = 0;
    v172 = 0;
    v173 = 1;
    goto LABEL_60;
  }
  v28 = *(uint64_t **)(*(_QWORD *)(a1 + 536) + 32);
  if (v28)
  {
    v29 = *((_DWORD *)v28 - 2);
    v30 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
    v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
    v33 = v29 & ((v32 >> 31) ^ v32);
    v34 = &v28[9 * v33];
    v35 = *v34;
    if (*v34 != a3)
    {
      v36 = 1;
      while (v35)
      {
        v33 = (v33 + v36) & v29;
        v34 = &v28[9 * v33];
        v35 = *v34;
        ++v36;
        if (*v34 == a3)
          goto LABEL_68;
      }
      v34 = &v28[9 * *((unsigned int *)v28 - 1)];
    }
LABEL_68:
    v28 += 9 * *((unsigned int *)v28 - 1);
  }
  else
  {
    v34 = 0;
  }
  if (v34 == v28)
    v59 = 0;
  else
    v59 = v34 + 1;
  v60 = v21 + 120 * v20;
  v61 = *(unsigned int **)(v60 + 64);
  if (v61)
  {
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 + 1, v61));
  }
  v63 = v21 + 120 * v20;
  v66 = *(_DWORD *)(v63 + 84);
  v64 = (unsigned int *)(v63 + 84);
  v65 = v66;
  v147 = v59;
  if (v66)
  {
    if (v65 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1953E8C08);
    }
    v96 = WTF::fastMalloc((WTF *)(8 * v65));
    v67 = (WTF::StringImpl *)v96;
    v97 = *v64;
    if ((_DWORD)v97)
    {
      v98 = 0;
      v99 = *(_QWORD *)(v64 - 3);
      v100 = 8 * v97;
      do
      {
        v101 = *(_DWORD **)(v99 + v98);
        if (v101)
          *v101 += 2;
        *(_QWORD *)(v96 + v98) = v101;
        v98 += 8;
      }
      while (v100 != v98);
    }
  }
  else
  {
    v67 = 0;
  }
  v68 = v21 + 120 * v20;
  v71 = *(_DWORD *)(v68 + 100);
  v69 = (unsigned int *)(v68 + 100);
  v70 = v71;
  if (!v71)
  {
    v72 = 0;
    goto LABEL_78;
  }
  if (v70 >> 29)
  {
LABEL_210:
    __break(0xC471u);
    JUMPOUT(0x1953E8600);
  }
  v72 = WTF::fastMalloc((WTF *)(8 * v70));
  v102 = *v69;
  if ((_DWORD)v102)
  {
    v103 = 0;
    v104 = *(_QWORD *)(v69 - 3);
    v105 = 8 * v102;
    do
    {
      v106 = *(_DWORD **)(v104 + v103);
      if (v106)
        *v106 += 2;
      *(_QWORD *)(v72 + v103) = v106;
      v103 += 8;
    }
    while (v105 != v103);
  }
LABEL_78:
  v148 = 0;
  v149 = 0;
  v161[0] = (WTF::StringImpl *)v61;
  v161[1] = v67;
  v150 = 0;
  LODWORD(v162[0]) = v65;
  DWORD1(v162[0]) = v65;
  v151 = 0;
  *((_QWORD *)&v162[0] + 1) = v72;
  v152 = 0;
  LODWORD(v162[1]) = v70;
  DWORD1(v162[1]) = v70;
  v75 = *(_BYTE *)(v60 + 32);
  v74 = (char *)(v60 + 32);
  v73 = v75;
  BYTE8(v162[1]) = v75;
  LOBYTE(v163[0]) = 0;
  v164 = -1;
  v76 = v21 + 120 * v20;
  v79 = *(_DWORD *)(v76 + 56);
  v78 = (unsigned int *)(v76 + 56);
  v77 = v79;
  if (v79 == -1)
  {
    v165 = v73;
    LOBYTE(v166[0]) = 0;
    v167 = -1;
  }
  else
  {
    ((void (*)(WTF **, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v77])(&v159, v163, v21 + 120 * v20 + 40);
    v164 = v77;
    v80 = *v78;
    v165 = *v74;
    LOBYTE(v166[0]) = 0;
    v167 = -1;
    if ((_DWORD)v80 != -1)
    {
      ((void (*)(WTF **, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v80])(&v159, v166, v21 + 120 * v20 + 40);
      v167 = v80;
    }
  }
  v168[0] = 0;
  v170 = 0;
  if (*((_BYTE *)v147 + 40))
  {
    v169 = -1;
    v81 = *((unsigned int *)v147 + 8);
    if ((_DWORD)v81 != -1)
    {
      ((void (*)(WTF **, _BYTE *, _QWORD *))off_1E335AC98[v81])(&v159, v168, v147 + 2);
      v169 = v81;
    }
    v170 = 1;
  }
  v171 = 0;
  v172 = 0;
  v173 = 1;
  WebCore::IDBGetResult::operator=(a7, (uint64_t)v161);
  WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v161, v82);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v148, v83);
  v19 = (WebCore::IDBServer::SQLiteIDBCursor *)v174;
  *(_WORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  if (v19)
    goto LABEL_62;
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::getCount@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, const WebCore::IDBKeyRangeData *a3@<X4>, unint64_t *a4@<X5>, sqlite3_int64 a5@<X2>, sqlite3_int64 a6@<X3>, uint64_t a7@<X8>)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t result;
  int v19;
  WTF *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  const char *v27;
  WebCore::IDBServer::SQLiteIDBBackingStore *v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  const char *v32;
  WebCore::IDBServer::SQLiteIDBBackingStore *v33;
  unint64_t v34;
  int v35;
  int v36;
  sqlite3_stmt **v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  WTF *v76;
  WebCore::IDBServer::SQLiteIDBBackingStore *v78;
  uint64_t v79;
  unint64_t *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  _QWORD v83[2];
  int v84;
  WTF *v85;
  WTF::StringImpl *v86;
  _QWORD v87[2];
  int v88;
  char v89;
  WTF::StringImpl *v90;

  v13 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (v13)
  {
    v14 = v13[2];
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 64);
      if (v15)
      {
        if (*(_BYTE *)(v15 + 8))
        {
          *a4 = 0;
          v16 = *((unsigned int *)a3 + 6);
          if ((_DWORD)v16)
          {
            LOBYTE(v86) = *(_BYTE *)a3;
            LOBYTE(v87[0]) = 0;
            v88 = -1;
            if ((_DWORD)v16 != -1)
            {
              ((void (*)(WTF::StringImpl **, _QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v16])(&v82, v87, (char *)a3 + 8);
              v88 = v16;
            }
          }
          else
          {
            LOBYTE(v86) = 0;
            v87[0] = 0;
            v88 = 7;
          }
          WebCore::serializeIDBKeyData((WebCore *)&v86, (uint64_t *)&v85);
          v20 = v85;
          if (!v85)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *(_WORD *)a7 = 280;
            result = (uint64_t)v82;
            if (v82)
            {
              v23 = *(_DWORD *)v82;
              *(_DWORD *)v82 += 2;
              *(_QWORD *)(a7 + 8) = result;
              v82 = 0;
              if (v23)
                *(_DWORD *)result = v23;
              else
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v22);
            }
            else
            {
              *(_QWORD *)(a7 + 8) = 0;
            }
LABEL_88:
            if (v88 != -1)
              return ((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E335ACA8[v88])(&v82, v87);
            return result;
          }
          v21 = *((unsigned int *)a3 + 14);
          if ((_DWORD)v21)
          {
            LOBYTE(v82) = *((_BYTE *)a3 + 32);
            LOBYTE(v83[0]) = 0;
            v84 = -1;
            if ((_DWORD)v21 != -1)
            {
              ((void (*)(WTF::StringImpl **, _QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v21])(&v90, v83, (char *)a3 + 40);
              v84 = v21;
            }
          }
          else
          {
            LOBYTE(v82) = 0;
            v83[0] = 0;
            v84 = 8;
          }
          WebCore::serializeIDBKeyData((WebCore *)&v82, &v81);
          v24 = v81;
          if (!v81)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            result = (uint64_t)v90;
            *(_WORD *)a7 = 280;
            if (result)
            {
              v31 = *(_DWORD *)result;
              *(_DWORD *)result += 2;
              *(_QWORD *)(a7 + 8) = result;
              if (v31)
                *(_DWORD *)result = v31;
              else
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v30);
            }
            else
            {
              *(_QWORD *)(a7 + 8) = 0;
            }
LABEL_83:
            if (v84 != -1)
              result = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E335ACA8[v84])(&v90, v83);
            v53 = v85;
            v85 = 0;
            if (v53)
            {
              do
              {
                v54 = __ldaxr((unsigned int *)v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, (unsigned int *)v53));
              if (!v55)
              {
                atomic_store(1u, (unsigned int *)v53);
                v60 = *((unsigned int *)v53 + 5);
                if ((_DWORD)v60)
                {
                  v61 = *((_QWORD *)v53 + 1);
                  v62 = v61 + 16 * v60;
                  do
                  {
                    v63 = *(unsigned int **)(v61 + 8);
                    *(_QWORD *)(v61 + 8) = 0;
                    if (v63)
                    {
                      do
                      {
                        v64 = __ldaxr(v63);
                        v65 = v64 - 1;
                      }
                      while (__stlxr(v65, v63));
                      if (!v65)
                      {
                        atomic_store(1u, v63);
                        v66 = v63[6];
                        if ((_DWORD)v66 != -1)
                          ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335AE70[v66])(&v82, v63 + 2);
                        v63[6] = -1;
                        WTF::fastFree((WTF *)v63, v30);
                      }
                    }
                    v61 += 16;
                  }
                  while (v61 != v62);
                }
                v67 = (WTF *)*((_QWORD *)v53 + 1);
                if ((WTF *)((char *)v53 + 24) != v67 && v67 != 0)
                {
                  *((_QWORD *)v53 + 1) = 0;
                  *((_DWORD *)v53 + 4) = 0;
                  WTF::fastFree(v67, v30);
                }
                result = WTF::fastFree(v53, v30);
              }
            }
            goto LABEL_88;
          }
          if (*((_BYTE *)a3 + 64))
            v25 = *((_BYTE *)a3 + 65) == 0;
          else
            v25 = 1;
          v26 = v25;
          if (a6)
          {
            if ((v26 & 1) != 0)
            {
              if (!*((_BYTE *)a3 + 64) || *((_BYTE *)a3 + 65))
              {
                if (*((_BYTE *)a3 + 64) || !*((_BYTE *)a3 + 65))
                {
                  v27 = "SELECT COUNT(*) FROM IndexRecords WHERE indexID = ? AND key >= CAST(? AS TEXT) AND key <= CAST(? AS TEXT);";
                  v28 = this;
                  v29 = 55;
                  v35 = 107;
                  goto LABEL_52;
                }
                v27 = "SELECT COUNT(*) FROM IndexRecords WHERE indexID = ? AND key >= CAST(? AS TEXT) AND key < CAST(? AS TEXT);";
                v28 = this;
                v29 = 54;
              }
              else
              {
                v27 = "SELECT COUNT(*) FROM IndexRecords WHERE indexID = ? AND key > CAST(? AS TEXT) AND key <= CAST(? AS TEXT);";
                v28 = this;
                v29 = 53;
              }
              v35 = 106;
            }
            else
            {
              v27 = "SELECT COUNT(*) FROM IndexRecords WHERE indexID = ? AND key > CAST(? AS TEXT) AND key < CAST(? AS TEXT);";
              v28 = this;
              v29 = 52;
              v35 = 105;
            }
LABEL_52:
            WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v90, (uint64_t)v28, v29, v27, v35);
            v37 = (sqlite3_stmt **)v90;
            if (!v90 || sqlite3_bind_int64(*((sqlite3_stmt **)v90 + 1), 1, a6))
              goto LABEL_75;
            if (*((_DWORD *)v20 + 5))
            {
              v38 = *(_QWORD *)(*((_QWORD *)v20 + 1) + 8);
              v39 = *(unsigned int *)(v38 + 24);
              if ((_DWORD)v39 == -1)
                goto LABEL_144;
              v90 = (WTF::StringImpl *)&v89;
              v40 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v39])(&v90, v38 + 8);
            }
            else
            {
              v40 = 0;
            }
            if (sqlite3_bind_blob(v37[1], 2, v40, *((_DWORD *)v20 + 12), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
            {
              goto LABEL_75;
            }
            if (!*(_DWORD *)(v24 + 20))
            {
              v43 = 0;
LABEL_61:
              if (sqlite3_bind_blob(v37[1], 3, v43, *(_DWORD *)(v24 + 48), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
              {
LABEL_75:
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                result = (uint64_t)v90;
                *(_WORD *)a7 = 280;
                if (result)
                {
                  v50 = *(_DWORD *)result;
                  *(_DWORD *)result += 2;
                  *(_QWORD *)(a7 + 8) = result;
                  if (v50)
                    *(_DWORD *)result = v50;
                  else
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v30);
                }
                else
                {
                  *(_QWORD *)(a7 + 8) = 0;
                }
                if (!v37)
                {
LABEL_80:
                  v81 = 0;
                  do
                  {
                    v51 = __ldaxr((unsigned int *)v24);
                    v52 = v51 - 1;
                  }
                  while (__stlxr(v52, (unsigned int *)v24));
                  if (!v52)
                  {
                    atomic_store(1u, (unsigned int *)v24);
                    v69 = *(unsigned int *)(v24 + 20);
                    if ((_DWORD)v69)
                    {
                      v70 = *(_QWORD *)(v24 + 8);
                      v71 = v70 + 16 * v69;
                      do
                      {
                        v72 = *(unsigned int **)(v70 + 8);
                        *(_QWORD *)(v70 + 8) = 0;
                        if (v72)
                        {
                          do
                          {
                            v73 = __ldaxr(v72);
                            v74 = v73 - 1;
                          }
                          while (__stlxr(v74, v72));
                          if (!v74)
                          {
                            atomic_store(1u, v72);
                            v75 = v72[6];
                            if ((_DWORD)v75 != -1)
                              ((void (*)(WTF::StringImpl **, unsigned int *))off_1E335AE70[v75])(&v90, v72 + 2);
                            v72[6] = -1;
                            WTF::fastFree((WTF *)v72, v30);
                          }
                        }
                        v70 += 16;
                      }
                      while (v70 != v71);
                    }
                    v76 = *(WTF **)(v24 + 8);
                    if ((WTF *)(v24 + 24) != v76 && v76 != 0)
                    {
                      *(_QWORD *)(v24 + 8) = 0;
                      *(_DWORD *)(v24 + 16) = 0;
                      WTF::fastFree(v76, v30);
                    }
                    result = WTF::fastFree((WTF *)v24, v30);
                  }
                  goto LABEL_83;
                }
                goto LABEL_79;
              }
LABEL_92:
              if (WebCore::SQLiteStatement::step(v37) == 100)
              {
                if ((sqlite3_stmt_busy(v37[1]) || WebCore::SQLiteStatement::step(v37) == 100)
                  && sqlite3_data_count(v37[1]) >= 1)
                {
                  v56 = sqlite3_column_int(v37[1], 0);
                }
                else
                {
                  v56 = 0;
                }
                *a4 = v56;
                *(_WORD *)a7 = 0;
              }
              else
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v58 = v90;
                *(_WORD *)a7 = 280;
                if (v58)
                {
                  v59 = *(_DWORD *)v58;
                  *(_DWORD *)v58 += 2;
                  *(_QWORD *)(a7 + 8) = v58;
                  if (v59)
                    *(_DWORD *)v58 = v59;
                  else
                    WTF::StringImpl::destroy(v58, v57);
                  goto LABEL_79;
                }
              }
              *(_QWORD *)(a7 + 8) = 0;
LABEL_79:
              sqlite3_reset(v37[1]);
              result = sqlite3_clear_bindings(v37[1]);
              goto LABEL_80;
            }
            v41 = *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8);
            v42 = *(unsigned int *)(v41 + 24);
            if ((_DWORD)v42 != -1)
            {
              v90 = (WTF::StringImpl *)&v89;
              v43 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v42])(&v90, v41 + 8);
              goto LABEL_61;
            }
LABEL_144:
            v78 = (WebCore::IDBServer::SQLiteIDBBackingStore *)std::__throw_bad_variant_access[abi:sn180100]();
            return WebCore::IDBServer::SQLiteIDBBackingStore::uncheckedGetKeyGeneratorValue(v78, v79, v80);
          }
          if ((v26 & 1) != 0)
          {
            if (!*((_BYTE *)a3 + 64) || *((_BYTE *)a3 + 65))
            {
              if (*((_BYTE *)a3 + 64) || !*((_BYTE *)a3 + 65))
              {
                v32 = "SELECT COUNT(*) FROM Records WHERE objectStoreID = ? AND key >= CAST(? AS TEXT) AND key <= CAST(? AS TEXT);";
                v33 = this;
                v34 = 51;
                v36 = 108;
                goto LABEL_65;
              }
              v32 = "SELECT COUNT(*) FROM Records WHERE objectStoreID = ? AND key >= CAST(? AS TEXT) AND key < CAST(? AS TEXT);";
              v33 = this;
              v34 = 50;
            }
            else
            {
              v32 = "SELECT COUNT(*) FROM Records WHERE objectStoreID = ? AND key > CAST(? AS TEXT) AND key <= CAST(? AS TEXT);";
              v33 = this;
              v34 = 49;
            }
            v36 = 107;
          }
          else
          {
            v32 = "SELECT COUNT(*) FROM Records WHERE objectStoreID = ? AND key > CAST(? AS TEXT) AND key < CAST(? AS TEXT);";
            v33 = this;
            v34 = 48;
            v36 = 106;
          }
LABEL_65:
          WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement((sqlite3_stmt ***)&v90, (uint64_t)v33, v34, v32, v36);
          v37 = (sqlite3_stmt **)v90;
          if (!v90 || sqlite3_bind_int64(*((sqlite3_stmt **)v90 + 1), 1, a5))
            goto LABEL_75;
          if (*((_DWORD *)v20 + 5))
          {
            v44 = *(_QWORD *)(*((_QWORD *)v20 + 1) + 8);
            v45 = *(unsigned int *)(v44 + 24);
            if ((_DWORD)v45 == -1)
              goto LABEL_144;
            v90 = (WTF::StringImpl *)&v89;
            v46 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v45])(&v90, v44 + 8);
          }
          else
          {
            v46 = 0;
          }
          if (sqlite3_bind_blob(v37[1], 2, v46, *((_DWORD *)v20 + 12), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
            goto LABEL_75;
          if (*(_DWORD *)(v24 + 20))
          {
            v47 = *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8);
            v48 = *(unsigned int *)(v47 + 24);
            if ((_DWORD)v48 == -1)
              goto LABEL_144;
            v90 = (WTF::StringImpl *)&v89;
            v49 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v48])(&v90, v47 + 8);
          }
          else
          {
            v49 = 0;
          }
          if (sqlite3_bind_blob(v37[1], 3, v49, *(_DWORD *)(v24 + 48), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
            goto LABEL_75;
          goto LABEL_92;
        }
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a7 = 280;
  result = (uint64_t)v86;
  if (v86)
  {
    v19 = *(_DWORD *)v86;
    *(_DWORD *)v86 += 2;
    *(_QWORD *)(a7 + 8) = result;
    v86 = 0;
    if (v19)
      *(_DWORD *)result = v19;
    else
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
  }
  else
  {
    *(_QWORD *)(a7 + 8) = 0;
  }
  return result;
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::uncheckedGetKeyGeneratorValue(WebCore::IDBServer::SQLiteIDBBackingStore *this, uint64_t a2, unint64_t *a3, sqlite3_int64 *a4)
{
  sqlite3_stmt **v7;
  WTF::StringImpl *v8;
  uint64_t result;
  int v10;
  sqlite3_int64 v11;
  WTF::StringImpl *v12;
  __int16 v13;
  int v14;
  WTF::StringImpl *v15;
  sqlite3_stmt **v16;

  WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement(&v16, a2, 0x21uLL, "SELECT currentKey FROM KeyGenerators WHERE objectStoreID = ?;",
    62);
  v7 = v16;
  if (v16 && !sqlite3_bind_int64(v16[1], 1, (sqlite3_int64)a3))
  {
    if (WebCore::SQLiteStatement::step(v7) == 100)
    {
      if ((sqlite3_stmt_busy(v7[1]) || WebCore::SQLiteStatement::step(v7) == 100)
        && sqlite3_data_count(v7[1]) >= 1)
      {
        v11 = sqlite3_column_int64(v7[1], 0);
        if (v11 < 0)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v13 = 281;
          goto LABEL_16;
        }
      }
      else
      {
        v11 = 0;
      }
      *a4 = v11;
      *(_WORD *)this = 0;
      goto LABEL_21;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = 280;
LABEL_16:
    *(_WORD *)this = v13;
    if (v15)
    {
      v14 = *(_DWORD *)v15;
      *(_DWORD *)v15 += 2;
      *((_QWORD *)this + 1) = v15;
      if (v14)
        *(_DWORD *)v15 = v14;
      else
        WTF::StringImpl::destroy(v15, v12);
      goto LABEL_7;
    }
LABEL_21:
    *((_QWORD *)this + 1) = 0;
LABEL_7:
    sqlite3_reset(v7[1]);
    return sqlite3_clear_bindings(v7[1]);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)this = 280;
  result = (uint64_t)v15;
  if (v15)
  {
    v10 = *(_DWORD *)v15;
    *(_DWORD *)v15 += 2;
    *((_QWORD *)this + 1) = v15;
    if (v10)
      *(_DWORD *)v15 = v10;
    else
      result = WTF::StringImpl::destroy(v15, v8);
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  if (v7)
    goto LABEL_7;
  return result;
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::uncheckedSetKeyGeneratorValue(WebCore::IDBServer::SQLiteIDBBackingStore *this, uint64_t a2, sqlite3_int64 a3, sqlite3_int64 a4)
{
  sqlite3_stmt **v7;
  WTF::StringImpl *v8;
  uint64_t result;
  int v10;
  WTF::StringImpl *v11;
  sqlite3_stmt **v12;

  WebCore::IDBServer::SQLiteIDBBackingStore::cachedStatement(&v12, a2, 0x22uLL, "INSERT INTO KeyGenerators VALUES (?, ?);",
    41);
  v7 = v12;
  if (v12
    && !sqlite3_bind_int64(v12[1], 1, a3)
    && !sqlite3_bind_int64(v7[1], 2, a4)
    && WebCore::SQLiteStatement::step(v7) == 101)
  {
    *(_WORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
LABEL_10:
    sqlite3_reset(v7[1]);
    return sqlite3_clear_bindings(v7[1]);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)this = 281;
  result = (uint64_t)v11;
  if (v11)
  {
    v10 = *(_DWORD *)v11;
    *(_DWORD *)v11 += 2;
    *((_QWORD *)this + 1) = v11;
    if (v10)
      *(_DWORD *)v11 = v10;
    else
      result = WTF::StringImpl::destroy(v11, v8);
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  if (v7)
    goto LABEL_10;
  return result;
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::generateKeyNumber@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, sqlite3_int64 *a3@<X3>, unint64_t *a4@<X2>, WebCore::IDBServer::SQLiteIDBBackingStore *a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  int v15;
  sqlite3_int64 v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  sqlite3_int64 v21;

  v9 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (!v9 || (v10 = v9[2]) == 0 || (v11 = *(_QWORD *)(v10 + 64)) == 0 || !*(_BYTE *)(v11 + 8) || !*(_BYTE *)(v10 + 16))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a5 = 280;
    result = v19;
    if (!v19)
    {
      *((_QWORD *)a5 + 1) = 0;
      return result;
    }
    v15 = *(_DWORD *)v19;
    *(_DWORD *)v19 += 2;
    *((_QWORD *)a5 + 1) = result;
    v19 = 0;
    if (!v15)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    goto LABEL_10;
  }
  v21 = 0;
  WebCore::IDBServer::SQLiteIDBBackingStore::uncheckedGetKeyGeneratorValue((WebCore::IDBServer::SQLiteIDBBackingStore *)&v19, (uint64_t)this, a4, &v21);
  if (BYTE1(v19))
  {
    *(_WORD *)a5 = (_WORD)v19;
    v13 = v20;
    v20 = 0;
    *((_QWORD *)a5 + 1) = v13;
  }
  else
  {
    v16 = v21 + 1;
    if ((unint64_t)(v21 + 1) < 0x20000000000001)
    {
      *a3 = v16;
      WebCore::IDBServer::SQLiteIDBBackingStore::uncheckedSetKeyGeneratorValue(a5, (uint64_t)this, (sqlite3_int64)a4, v16);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_WORD *)a5 = 281;
      if (v18)
      {
        v17 = *(_DWORD *)v18;
        *(_DWORD *)v18 += 2;
        *((_QWORD *)a5 + 1) = v18;
        if (v17)
          *(_DWORD *)v18 = v17;
        else
          WTF::StringImpl::destroy(v18, v12);
      }
      else
      {
        *((_QWORD *)a5 + 1) = 0;
      }
    }
  }
  result = v20;
  if (v20)
  {
    v15 = *(_DWORD *)v20 - 2;
    if (*(_DWORD *)v20 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
LABEL_10:
    *(_DWORD *)result = v15;
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::revertGeneratedKeyNumber@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, sqlite3_int64 a3@<X2>, uint64_t a4@<X3>, WebCore::IDBServer::SQLiteIDBBackingStore *a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;

  v9 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (v9)
  {
    v10 = v9[2];
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 64);
      if (v11)
      {
        if (*(_BYTE *)(v11 + 8) && *(_BYTE *)(v10 + 16))
          return (WTF::StringImpl *)WebCore::IDBServer::SQLiteIDBBackingStore::uncheckedSetKeyGeneratorValue(a5, (uint64_t)this, a3, a4 - 1);
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a5 = 280;
  result = v15;
  if (v15)
  {
    v14 = *(_DWORD *)v15;
    *(_DWORD *)v15 += 2;
    *((_QWORD *)a5 + 1) = v15;
    if (v14)
      *(_DWORD *)v15 = v14;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v13);
  }
  else
  {
    *((_QWORD *)a5 + 1) = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::maybeUpdateKeyGeneratorNumber@<X0>(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, double a3@<D0>, unint64_t *a4@<X2>, WebCore::IDBServer::SQLiteIDBBackingStore *a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  int v15;
  double v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;

  v9 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (!v9 || (v10 = v9[2]) == 0 || (v11 = *(_QWORD *)(v10 + 64)) == 0 || !*(_BYTE *)(v11 + 8) || !*(_BYTE *)(v10 + 16))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a5 = 280;
    result = v17;
    if (!v17)
    {
      *((_QWORD *)a5 + 1) = 0;
      return result;
    }
    v15 = *(_DWORD *)v17;
    *(_DWORD *)v17 += 2;
    *((_QWORD *)a5 + 1) = result;
    v17 = 0;
    if (!v15)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    goto LABEL_10;
  }
  v19 = 0;
  WebCore::IDBServer::SQLiteIDBBackingStore::uncheckedGetKeyGeneratorValue((WebCore::IDBServer::SQLiteIDBBackingStore *)&v17, (uint64_t)this, a4, (sqlite3_int64 *)&v19);
  if (BYTE1(v17))
  {
    *(_WORD *)a5 = (_WORD)v17;
    v13 = v18;
    v18 = 0;
    *((_QWORD *)a5 + 1) = v13;
  }
  else if ((double)v19 >= a3)
  {
    *(_WORD *)a5 = 0;
    *((_QWORD *)a5 + 1) = 0;
  }
  else
  {
    v16 = 9.00719925e15;
    if (a3 <= 9.00719925e15)
      v16 = a3;
    WebCore::IDBServer::SQLiteIDBBackingStore::uncheckedSetKeyGeneratorValue(a5, (uint64_t)this, (sqlite3_int64)a4, (unint64_t)v16);
  }
  result = v18;
  if (v18)
  {
    v15 = *(_DWORD *)v18 - 2;
    if (*(_DWORD *)v18 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
LABEL_10:
    *(_DWORD *)result = v15;
  }
  return result;
}

void WebCore::IDBServer::SQLiteIDBBackingStore::openCursor(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, const WebCore::IDBCursorInfo *a3@<X2>, WebCore::IDBGetResult *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  int v38;
  WebCore::IDBServer::SQLiteIDBCursor *v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t v95;
  int v96;
  _QWORD *v97;
  WebCore::IDBGetResult *v98;
  WTF::StringImpl *v99;

  v9 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 70), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (!v9)
    goto LABEL_34;
  v10 = v9[2];
  if (!v10)
    goto LABEL_34;
  v11 = *(_QWORD *)(v10 + 64);
  if (!v11 || !*(_BYTE *)(v11 + 8))
    goto LABEL_34;
  v98 = a4;
  v12 = *(_QWORD *)a3;
  v13 = *((_QWORD *)a3 + 1);
  v14 = WTF::fastMalloc((WTF *)0x150);
  v15 = v14;
  *(_QWORD *)v14 = v10;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)a3;
  *(_QWORD *)(v14 + 24) = *((_QWORD *)a3 + 4);
  if (*((_BYTE *)a3 + 120))
    v16 = -1;
  else
    v16 = *((_QWORD *)a3 + 5);
  *(_QWORD *)(v14 + 32) = v16;
  *(_WORD *)(v14 + 40) = *(_WORD *)((char *)a3 + 121);
  *(_BYTE *)(v14 + 48) = *((_BYTE *)a3 + 48);
  *(_BYTE *)(v14 + 56) = 0;
  *(_DWORD *)(v14 + 72) = -1;
  v17 = *((unsigned int *)a3 + 18);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(WTF::StringImpl **, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v17])(&v99, v14 + 56, (char *)a3 + 56);
    *(_DWORD *)(v15 + 72) = v17;
  }
  v18 = *((_BYTE *)a3 + 80);
  *(_BYTE *)(v15 + 88) = 0;
  *(_BYTE *)(v15 + 80) = v18;
  *(_DWORD *)(v15 + 104) = -1;
  v19 = *((unsigned int *)a3 + 26);
  if ((_DWORD)v19 != -1)
  {
    ((void (*)(WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v19])(&v99);
    *(_DWORD *)(v15 + 104) = v19;
  }
  v20 = (uint64_t *)(v10 + 72);
  *(_WORD *)(v15 + 112) = *((_WORD *)a3 + 56);
  *(_BYTE *)(v15 + 120) = 0;
  *(_QWORD *)(v15 + 128) = 0;
  *(_DWORD *)(v15 + 144) = 0;
  *(_BYTE *)(v15 + 152) = 0;
  *(_QWORD *)(v15 + 160) = 0;
  *(_DWORD *)(v15 + 176) = 0;
  *(_BYTE *)(v15 + 184) = 0;
  *(_QWORD *)(v15 + 192) = 0;
  *(_DWORD *)(v15 + 208) = 0;
  *(_QWORD *)(v15 + 264) = 0;
  *(_DWORD *)(v15 + 280) = 0;
  *(_OWORD *)(v15 + 216) = 0u;
  *(_OWORD *)(v15 + 232) = 0u;
  *(_OWORD *)(v15 + 241) = 0u;
  *(_QWORD *)(v15 + 296) = 0;
  *(_QWORD *)(v15 + 304) = 0;
  *(_QWORD *)(v15 + 288) = 0;
  *(_BYTE *)(v15 + 312) = 1;
  *(_QWORD *)(v15 + 320) = 0;
  *(_BYTE *)(v15 + 328) = 0;
  *(_DWORD *)(v15 + 332) = 0;
  if (!WebCore::IDBServer::SQLiteIDBCursor::establishStatement((WebCore::IDBServer::SQLiteIDBCursor *)v15)
    || !WebCore::IDBServer::SQLiteIDBCursor::advance((WebCore::IDBServer::SQLiteIDBCursor *)v15, 1))
  {
    WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor((WebCore::IDBServer::SQLiteIDBCursor *)v15, v21);
    WTF::fastFree(v22, v23);
    v15 = 0;
  }
  v24 = *v20;
  if (*v20
    || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v20, 8u, 0), (v24 = *v20) != 0))
  {
    v25 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    v25 = 0;
  }
  v26 = (v12 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v12 - 1640531527) << 16) ^ ((unsigned __int16)v12
                                                                                             - 1640531527);
  v27 = (v12 >> 37) & 0x7FFF800 ^ ((v26 + WORD2(v12) + (v26 >> 11)) << 16) ^ (v26 + WORD2(v12) + (v26 >> 11));
  v28 = (v13 >> 5) & 0x7FFF800 ^ ((v27 + (unsigned __int16)v13 + (v27 >> 11)) << 16) ^ (v27 + (unsigned __int16)v13 + (v27 >> 11));
  v29 = (v13 >> 37) & 0x7FFF800 ^ ((v28 + WORD2(v13) + (v28 >> 11)) << 16) ^ (v28 + WORD2(v13) + (v28 >> 11));
  v30 = (v29 + (v29 >> 11)) ^ (8 * (v29 + (v29 >> 11)));
  v31 = (v30 + (v30 >> 5)) ^ (4 * (v30 + (v30 >> 5)));
  v32 = (v31 + (v31 >> 15)) ^ ((v31 + (v31 >> 15)) << 10);
  if (!v32)
    v32 = 0x800000;
  v33 = v25 & v32;
  v34 = (unint64_t *)(v24 + 24 * (v25 & v32));
  v36 = *v34;
  v35 = v34[1];
  if (*(_OWORD *)v34 != 0)
  {
    v37 = 0;
    v38 = 1;
    do
    {
      if (v36 == -1)
      {
        v37 = v34;
      }
      else if (v36 == v12 && v35 == v13)
      {
        if (v15)
        {
          WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor((WebCore::IDBServer::SQLiteIDBCursor *)v15, v21);
          WTF::fastFree(v52, v53);
        }
        goto LABEL_52;
      }
      v33 = (v33 + v38) & v25;
      v34 = (unint64_t *)(v24 + 24 * v33);
      v36 = *v34;
      v35 = v34[1];
      ++v38;
    }
    while (*(_OWORD *)v34 != 0);
    if (v37)
    {
      *v37 = 0;
      v37[1] = 0;
      v37[2] = 0;
      --*(_DWORD *)(*v20 - 16);
      v34 = v37;
    }
  }
  *v34 = v12;
  v34[1] = v13;
  v39 = (WebCore::IDBServer::SQLiteIDBCursor *)v34[2];
  v34[2] = v15;
  if (v39)
  {
    WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor(v39, v21);
    WTF::fastFree(v40, v41);
  }
  v42 = *v20;
  if (*v20)
    v43 = *(_DWORD *)(v42 - 12) + 1;
  else
    v43 = 1;
  *(_DWORD *)(v42 - 12) = v43;
  v47 = *v20;
  if (*v20)
    v48 = *(_DWORD *)(v47 - 12);
  else
    v48 = 0;
  v49 = (*(_DWORD *)(v47 - 16) + v48);
  v50 = *(unsigned int *)(v47 - 4);
  if (v50 > 0x400)
  {
    if (v50 > 2 * v49)
      goto LABEL_52;
    goto LABEL_46;
  }
  if (3 * v50 <= 4 * v49)
  {
    if (!(_DWORD)v50)
    {
      v51 = 8;
      goto LABEL_51;
    }
LABEL_46:
    v51 = (_DWORD)v50 << (6 * *(_DWORD *)(v47 - 12) >= (2 * v50));
LABEL_51:
    v34 = (unint64_t *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v20, v51, v34);
  }
LABEL_52:
  v54 = v34[2];
  if (v54)
  {
    v55 = (uint64_t *)((char *)this + 568);
    v56 = *((_QWORD *)this + 71);
    if (v56
      || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash((uint64_t *)this + 71, 8u), (v56 = *v55) != 0))
    {
      v57 = *(_DWORD *)(v56 - 8);
    }
    else
    {
      v57 = 0;
    }
    v58 = *(_QWORD *)(v54 + 8);
    v59 = *(_QWORD *)(v54 + 16);
    v60 = (v58 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v58 - 1640531527) << 16) ^ ((unsigned __int16)v58
                                                                                               - 1640531527);
    v61 = (v58 >> 37) & 0x7FFF800 ^ ((v60 + WORD2(v58) + (v60 >> 11)) << 16) ^ (v60 + WORD2(v58) + (v60 >> 11));
    v62 = (v59 >> 5) & 0x7FFF800 ^ ((v61 + (unsigned __int16)v59 + (v61 >> 11)) << 16) ^ (v61 + (unsigned __int16)v59 + (v61 >> 11));
    v63 = (v59 >> 37) & 0x7FFF800 ^ ((v62 + WORD2(v59) + (v62 >> 11)) << 16) ^ (v62 + WORD2(v59) + (v62 >> 11));
    v64 = (v63 + (v63 >> 11)) ^ (8 * (v63 + (v63 >> 11)));
    v65 = (v64 + (v64 >> 5)) ^ (4 * (v64 + (v64 >> 5)));
    v66 = (v65 + (v65 >> 15)) ^ ((v65 + (v65 >> 15)) << 10);
    if (!v66)
      v66 = 0x800000;
    v67 = v66 & v57;
    v68 = (_QWORD *)(v56 + 24 * (v66 & v57));
    v70 = *v68;
    v69 = v68[1];
    if (*(_OWORD *)v68 != 0)
    {
      v71 = 0;
      v72 = 1;
      do
      {
        if (v70 == -1)
        {
          v71 = v68;
        }
        else if (v70 == v58 && v69 == v59)
        {
          v68[2] = v54;
          goto LABEL_98;
        }
        v67 = (v67 + v72) & v57;
        v68 = (_QWORD *)(v56 + 24 * v67);
        v70 = *v68;
        v69 = v68[1];
        ++v72;
      }
      while (*(_OWORD *)v68 != 0);
      if (v71)
      {
        *v71 = 0;
        v71[1] = 0;
        v71[2] = 0;
        --*(_DWORD *)(*v55 - 16);
        v68 = v71;
      }
    }
    *(_OWORD *)v68 = *(_OWORD *)(v54 + 8);
    v68[2] = v54;
    v73 = *v55;
    if (*v55)
      v74 = *(_DWORD *)(v73 - 12) + 1;
    else
      v74 = 1;
    *(_DWORD *)(v73 - 12) = v74;
    v78 = *v55;
    if (*v55)
      v79 = *(_DWORD *)(v78 - 12);
    else
      v79 = 0;
    v80 = (*(_DWORD *)(v78 - 16) + v79);
    v81 = *(unsigned int *)(v78 - 4);
    if (v81 > 0x400)
    {
      if (v81 <= 2 * v80)
        goto LABEL_96;
    }
    else if (3 * v81 <= 4 * v80)
    {
      if (!(_DWORD)v81)
      {
        v82 = 8;
LABEL_97:
        WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash((uint64_t *)this + 71, v82);
        goto LABEL_98;
      }
LABEL_96:
      v82 = (_DWORD)v81 << (6 * *(_DWORD *)(v78 - 12) >= (2 * v81));
      goto LABEL_97;
    }
LABEL_98:
    v87 = *(uint64_t **)(*((_QWORD *)this + 67) + 32);
    if (v87)
    {
      v88 = *((_QWORD *)a3 + 4);
      v89 = *((_DWORD *)v87 - 2);
      v90 = (v88 + ~(v88 << 32)) ^ ((unint64_t)(v88 + ~(v88 << 32)) >> 22);
      v91 = 9 * ((v90 + ~(v90 << 13)) ^ ((v90 + ~(v90 << 13)) >> 8));
      v92 = (v91 ^ (v91 >> 15)) + ~((v91 ^ (v91 >> 15)) << 27);
      v93 = v89 & ((v92 >> 31) ^ v92);
      v94 = &v87[9 * v93];
      v95 = *v94;
      if (*v94 != v88)
      {
        v96 = 1;
        while (v95)
        {
          v93 = (v93 + v96) & v89;
          v94 = &v87[9 * v93];
          v95 = *v94;
          ++v96;
          if (*v94 == v88)
            goto LABEL_106;
        }
        v94 = &v87[9 * *((unsigned int *)v87 - 1)];
      }
LABEL_106:
      v87 += 9 * *((unsigned int *)v87 - 1);
    }
    else
    {
      v94 = 0;
    }
    if (v94 == v87)
      v97 = 0;
    else
      v97 = v94 + 1;
    WebCore::IDBServer::SQLiteIDBCursor::currentData(v54, v98, (uint64_t)(v97 + 2), 0);
    *(_WORD *)a5 = 0;
    goto LABEL_111;
  }
  v75 = *v20;
  if (!*v20 || (v75 += 24 * *(unsigned int *)(v75 - 4), (unint64_t *)v75 != v34))
  {
    if ((unint64_t *)v75 != v34)
    {
      *v34 = -1;
      v34[2] = 0;
      ++*(_DWORD *)(*v20 - 16);
      v76 = *v20;
      v77 = *v20 ? *(_DWORD *)(v76 - 12) - 1 : -1;
      *(_DWORD *)(v76 - 12) = v77;
      v83 = *v20;
      if (*v20)
      {
        v84 = 6 * *(_DWORD *)(v83 - 12);
        v85 = *(_DWORD *)(v83 - 4);
        if (v84 < v85 && v85 >= 9)
          WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v20, v85 >> 1, 0);
      }
    }
  }
LABEL_34:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a5 = 280;
  v45 = v99;
  if (!v99)
  {
LABEL_111:
    *(_QWORD *)(a5 + 8) = 0;
    return;
  }
  v46 = *(_DWORD *)v99;
  *(_DWORD *)v99 += 2;
  *(_QWORD *)(a5 + 8) = v45;
  v99 = 0;
  if (v46)
    *(_DWORD *)v45 = v46;
  else
    WTF::StringImpl::destroy(v45, v44);
}

void WebCore::IDBServer::SQLiteIDBCursor::currentData(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v11;
  unint64_t v12;
  int v13;
  WTF *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[3];
  _QWORD v75[2];
  int v76;
  char v77;
  _QWORD v78[2];
  int v79;
  _BYTE v80[16];
  int v81;
  char v82;
  WTF *v83;
  unint64_t v84;
  char v85;
  _BYTE v86[9];

  v4 = *(_QWORD *)(a1 + 216);
  v5 = *(_QWORD *)(a1 + 224);
  if (v4 == v5)
  {
    __break(0xC471u);
    goto LABEL_99;
  }
  v8 = *(_QWORD *)(a1 + 232) + 120 * v4;
  if (*(_BYTE *)(v8 + 104))
  {
    v75[0] = 0;
    v76 = 0;
    v77 = 0;
    v78[0] = 0;
    v79 = 0;
    v80[0] = 0;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    memset(v74, 0, 41);
    WebCore::IDBGetResult::operator=((uint64_t)a2, (uint64_t)v74);
    WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v74, v9);
    return;
  }
  if ((a4 & 1) == 0)
  {
    v15 = *(unsigned int **)(v8 + 64);
    if (v15)
    {
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
    }
    v17 = *(unsigned int *)(v8 + 84);
    if ((_DWORD)v17)
    {
      if (v17 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1953EA864);
      }
      v45 = WTF::fastMalloc((WTF *)(8 * v17));
      v18 = v45;
      v46 = *(unsigned int *)(v8 + 84);
      if ((_DWORD)v46)
      {
        v47 = 0;
        v48 = *(_QWORD *)(v8 + 72);
        v49 = 8 * v46;
        do
        {
          v50 = *(_DWORD **)(v48 + v47);
          if (v50)
            *v50 += 2;
          *(_QWORD *)(v45 + v47) = v50;
          v47 += 8;
        }
        while (v49 != v47);
      }
    }
    else
    {
      v18 = 0;
    }
    v19 = *(unsigned int *)(v8 + 100);
    if ((_DWORD)v19)
    {
      if (v19 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1953EA86CLL);
      }
      v20 = WTF::fastMalloc((WTF *)(8 * v19));
      v51 = *(unsigned int *)(v8 + 100);
      if ((_DWORD)v51)
      {
        v52 = 0;
        v53 = *(_QWORD *)(v8 + 88);
        v54 = 8 * v51;
        do
        {
          v55 = *(_DWORD **)(v53 + v52);
          if (v55)
            *v55 += 2;
          *(_QWORD *)(v20 + v52) = v55;
          v52 += 8;
        }
        while (v54 != v52);
      }
    }
    else
    {
      v20 = 0;
    }
    v69 = 0;
    v70 = 0;
    *(_QWORD *)&v74[0] = v15;
    *((_QWORD *)&v74[0] + 1) = v18;
    v71 = 0;
    LODWORD(v74[1]) = v17;
    DWORD1(v74[1]) = v17;
    v72 = 0;
    *((_QWORD *)&v74[1] + 1) = v20;
    v73 = 0;
    LODWORD(v74[2]) = v19;
    DWORD1(v74[2]) = v19;
    BYTE8(v74[2]) = *(_BYTE *)v8;
    LOBYTE(v75[0]) = 0;
    v76 = -1;
    v21 = *(unsigned int *)(v8 + 24);
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(WTF **, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v21])(&v67, v75, v8 + 8);
      v76 = v21;
    }
    v77 = *(_BYTE *)(v8 + 32);
    LOBYTE(v78[0]) = 0;
    v79 = -1;
    v22 = *(unsigned int *)(v8 + 56);
    if ((_DWORD)v22 != -1)
    {
      ((void (*)(WTF **, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v22])(&v67, v78, v8 + 40);
      v79 = v22;
    }
    v80[0] = 0;
    v82 = 0;
    if (*(_BYTE *)(a3 + 24))
    {
      v81 = -1;
      v23 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v23 != -1)
      {
        ((void (*)(WTF **, _BYTE *, uint64_t))off_1E335AC98[v23])(&v67, v80, a3);
        v81 = v23;
      }
      v82 = 1;
    }
    v83 = 0;
    v84 = 0;
    goto LABEL_62;
  }
  v67 = 0;
  v68 = 0;
  v11 = v5;
  if (v4 > v5)
    v11 = v5 + *(unsigned int *)(a1 + 240);
  v12 = v11 + ~v4;
  if (v12)
  {
    if (v12 >= 0x2762763)
    {
      __break(0xC471u);
      JUMPOUT(0x1953EA854);
    }
    v13 = 104 * v12;
    v14 = (WTF *)WTF::fastMalloc((WTF *)(104 * v12));
    LODWORD(v68) = (v13 & 0xFFFFFFF8) / 0x68;
    v67 = v14;
    v4 = *(_QWORD *)(a1 + 216);
    v5 = *(_QWORD *)(a1 + 224);
    if (v4 == v5)
      goto LABEL_44;
  }
  else
  {
    v14 = 0;
  }
  v24 = 0;
  v25 = 1;
  do
  {
    v26 = *(_QWORD *)(a1 + 232);
    v27 = v26 + 120 * v4;
    if (*(_BYTE *)(v27 + 104) || *(_BYTE *)(v26 + 120 * v4 + 105))
      break;
    if ((v25 & 1) == 0)
    {
      if (v24 == (_DWORD)v68)
      {
        v28 = WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v67, v24 + 1, v27);
        v24 = HIDWORD(v68);
        v14 = v67;
        v29 = (uint64_t)v67 + 104 * HIDWORD(v68);
      }
      else
      {
        v29 = (uint64_t)v14 + 104 * v24;
        v28 = (char *)(v26 + 120 * v4);
      }
      WebCore::IDBCursorRecord::IDBCursorRecord(v29, (uint64_t)v28);
      HIDWORD(v68) = ++v24;
    }
    v30 = *(unsigned int *)(a1 + 240);
    v4 += v30 + 1;
    do
      v4 -= v30;
    while (v4 >= v30);
    v25 = 0;
  }
  while (v5 != v4);
  if (v68 > v24)
  {
    if (v24)
    {
      if (v24 >= 0x2762763)
      {
        __break(0xC471u);
        JUMPOUT(0x1953EA85CLL);
      }
      v31 = WTF::fastMalloc((WTF *)(104 * v24));
      LODWORD(v68) = 104 * v24 / 0x68;
      v67 = (WTF *)v31;
      if ((WTF *)v31 != v14)
        WTF::VectorMover<false,WebCore::IDBCursorRecord>::move((uint64_t)v14, (uint64_t)v14 + 104 * v24, v31);
    }
    if (v14)
    {
LABEL_44:
      if (v67 == v14)
      {
        v67 = 0;
        LODWORD(v68) = 0;
      }
      WTF::fastFree(v14, a2);
    }
  }
  v32 = *(unsigned int **)(v8 + 64);
  if (v32)
  {
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
  v34 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v34)
  {
    if (v34 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1953EA874);
    }
    v56 = WTF::fastMalloc((WTF *)(8 * v34));
    v35 = v56;
    v57 = *(unsigned int *)(v8 + 84);
    if ((_DWORD)v57)
    {
      v58 = 0;
      v59 = *(_QWORD *)(v8 + 72);
      v60 = 8 * v57;
      do
      {
        v61 = *(_DWORD **)(v59 + v58);
        if (v61)
          *v61 += 2;
        *(_QWORD *)(v56 + v58) = v61;
        v58 += 8;
      }
      while (v60 != v58);
    }
  }
  else
  {
    v35 = 0;
  }
  v36 = *(unsigned int *)(v8 + 100);
  if ((_DWORD)v36)
  {
    if (!(v36 >> 29))
    {
      v37 = WTF::fastMalloc((WTF *)(8 * v36));
      v62 = *(unsigned int *)(v8 + 100);
      if ((_DWORD)v62)
      {
        v63 = 0;
        v64 = *(_QWORD *)(v8 + 88);
        v65 = 8 * v62;
        do
        {
          v66 = *(_DWORD **)(v64 + v63);
          if (v66)
            *v66 += 2;
          *(_QWORD *)(v37 + v63) = v66;
          v63 += 8;
        }
        while (v65 != v63);
      }
      goto LABEL_53;
    }
    __break(0xC471u);
LABEL_99:
    JUMPOUT(0x1953EA84CLL);
  }
  v37 = 0;
LABEL_53:
  v69 = 0;
  v70 = 0;
  *(_QWORD *)&v74[0] = v32;
  *((_QWORD *)&v74[0] + 1) = v35;
  v71 = 0;
  LODWORD(v74[1]) = v34;
  DWORD1(v74[1]) = v34;
  v72 = 0;
  *((_QWORD *)&v74[1] + 1) = v37;
  v73 = 0;
  LODWORD(v74[2]) = v36;
  DWORD1(v74[2]) = v36;
  BYTE8(v74[2]) = *(_BYTE *)v8;
  LOBYTE(v75[0]) = 0;
  v76 = -1;
  v38 = *(unsigned int *)(v8 + 24);
  if ((_DWORD)v38 != -1)
  {
    ((void (*)(_BYTE *, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v38])(v86, v75, v8 + 8);
    v76 = v38;
  }
  v77 = *(_BYTE *)(v8 + 32);
  LOBYTE(v78[0]) = 0;
  v79 = -1;
  v39 = *(unsigned int *)(v8 + 56);
  if ((_DWORD)v39 != -1)
  {
    ((void (*)(_BYTE *, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v39])(v86, v78, v8 + 40);
    v79 = v39;
  }
  v80[0] = 0;
  v82 = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    v81 = -1;
    v40 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v40 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E335AC98[v40])(v86, v80, a3);
      v81 = v40;
    }
    v82 = 1;
  }
  v83 = v67;
  v41 = v68;
  v42 = HIDWORD(v68);
  v68 = 0;
  v84 = __PAIR64__(v42, v41);
LABEL_62:
  v85 = 1;
  WebCore::IDBGetResult::operator=((uint64_t)a2, (uint64_t)v74);
  WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v74, v43);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v69, v44);
}

void WebCore::IDBServer::SQLiteIDBBackingStore::iterateCursor(WebCore::IDBServer::SQLiteIDBBackingStore *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X2>, const WebCore::IDBIterateCursorData *a3@<X3>, WebCore::IDBGetResult *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BOOL4 v34;
  const WTF::String *v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::IDBKeyData *v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  const WTF::String *v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::IDBKeyData *v46;
  int v47;
  const WTF::String *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  _QWORD *v61;
  char v62;
  unsigned int v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  int v80;
  _BYTE v81[8];
  _BYTE v82[16];
  int v83;
  WTF::StringImpl *v84;
  _BYTE v85[16];
  int v86;
  WTF::StringImpl *v87;

  v7 = *((_QWORD *)this + 71);
  if (!v7)
    goto LABEL_10;
  v8 = *((_QWORD *)a2 + 1);
  v9 = *(_DWORD *)(v7 - 8);
  v10 = (*(_QWORD *)a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*(_QWORD *)a2 - 1640531527) << 16) ^ ((unsigned __int16)*(_QWORD *)a2 - 1640531527);
  v11 = v10 + (unsigned __int16)WORD2(*(_QWORD *)a2) + (v10 >> 11);
  v12 = (*(_QWORD *)a2 >> 37) & 0x7FFF800 ^ (v11 << 16) ^ v11;
  v13 = (v8 >> 5) & 0x7FFF800 ^ ((v12 + (unsigned __int16)v8 + (v12 >> 11)) << 16) ^ (v12
                                                                                                  + (unsigned __int16)v8
                                                                                                  + (v12 >> 11));
  v14 = (v8 >> 37) & 0x7FFF800 ^ ((v13 + WORD2(v8) + (v13 >> 11)) << 16) ^ (v13 + WORD2(v8) + (v13 >> 11));
  v15 = (v14 + (v14 >> 11)) ^ (8 * (v14 + (v14 >> 11)));
  v16 = (v15 + (v15 >> 5)) ^ (4 * (v15 + (v15 >> 5)));
  v17 = (v16 + (v16 >> 15)) ^ ((v16 + (v16 >> 15)) << 10);
  if (!v17)
    v17 = 0x800000;
  v18 = v9 & v17;
  v19 = (uint64_t *)(v7 + 24 * v18);
  v21 = *v19;
  v20 = v19[1];
  if (*(_OWORD *)v19 == 0)
    goto LABEL_10;
  v25 = 1;
  while (v21 == -1 || v21 != *(_QWORD *)a2 || v20 != v8)
  {
    v18 = ((_DWORD)v18 + v25) & v9;
    v21 = *(_QWORD *)(v7 + 24 * v18);
    v20 = *(_QWORD *)(v7 + 24 * v18 + 8);
    ++v25;
    if (*(_OWORD *)(v7 + 24 * v18) == 0)
      goto LABEL_10;
  }
  v29 = *(_QWORD *)(v7 + 24 * v18 + 16);
  if (!v29 || !*(_QWORD *)v29 || (v30 = *(_QWORD *)(*(_QWORD *)v29 + 64)) == 0 || !*(_BYTE *)(v30 + 8))
  {
LABEL_10:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)a5 = 280;
    v27 = v84;
    if (v84)
    {
      v28 = *(_DWORD *)v84;
      *(_DWORD *)v84 += 2;
      *(_QWORD *)(a5 + 8) = v27;
      v84 = 0;
      if (v28)
        *(_DWORD *)v27 = v28;
      else
        WTF::StringImpl::destroy(v27, v26);
    }
    else
    {
      *(_QWORD *)(a5 + 8) = 0;
    }
    return;
  }
  LOBYTE(v84) = *(_BYTE *)a3;
  v85[0] = 0;
  v86 = -1;
  v31 = *((unsigned int *)a3 + 6);
  if ((_DWORD)v31 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v31])(v81, v85, (char *)a3 + 8);
    v86 = v31;
  }
  v81[0] = *((_BYTE *)a3 + 32);
  v82[0] = 0;
  v83 = -1;
  v32 = *((unsigned int *)a3 + 14);
  if ((_DWORD)v32 != -1)
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v32])(&v87, v82, (char *)a3 + 40);
    v83 = v32;
  }
  v33 = *((_DWORD *)a3 + 16);
  if (!WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)&v84))
  {
    if (v33 <= 1)
      v42 = 1;
    else
      v42 = v33;
    if (!WebCore::IDBServer::SQLiteIDBCursor::advance((WebCore::IDBServer::SQLiteIDBCursor *)v29, v42))
      goto LABEL_106;
LABEL_59:
    if (*((_BYTE *)a3 + 68))
    {
      v51 = *(uint64_t **)(*((_QWORD *)this + 67) + 32);
      if (v51)
      {
        v52 = *(_QWORD *)(v29 + 24);
        v53 = *((_DWORD *)v51 - 2);
        v54 = (v52 + ~(v52 << 32)) ^ ((unint64_t)(v52 + ~(v52 << 32)) >> 22);
        v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
        v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
        v57 = v53 & ((v56 >> 31) ^ v56);
        v58 = &v51[9 * v57];
        v59 = *v58;
        if (*v58 != v52)
        {
          v60 = 1;
          while (v59)
          {
            v57 = (v57 + v60) & v53;
            v58 = &v51[9 * v57];
            v59 = *v58;
            ++v60;
            if (*v58 == v52)
              goto LABEL_68;
          }
          v58 = &v51[9 * *((unsigned int *)v51 - 1)];
        }
LABEL_68:
        v51 += 9 * *((unsigned int *)v51 - 1);
      }
      else
      {
        v58 = 0;
      }
      if (v58 == v51)
        v61 = 0;
      else
        v61 = v58 + 1;
      v62 = (v86 | v83) == 0;
      if (!(v86 | v83))
      {
        if (*(_DWORD *)(v29 + 332))
        {
          v63 = 0;
          v64 = (*(_QWORD *)(v29 + 248) & 0xFFFFFFFFFFF00000) != 0;
          while (1)
          {
            if (v64)
              goto LABEL_101;
            v66 = *(_QWORD *)(v29 + 216);
            v65 = *(_QWORD *)(v29 + 224);
            if (v66 == v65)
              goto LABEL_101;
            v67 = *(_QWORD *)(v29 + 224);
            if (v66 > v65)
              v67 = v65 + *(unsigned int *)(v29 + 240);
            if (v67 - v66 > 0xFF)
              goto LABEL_101;
            v68 = *(_QWORD *)(v29 + 224);
            if (!v65)
              v68 = *(unsigned int *)(v29 + 240);
            v69 = v68 - 1;
            v70 = *(_QWORD *)(v29 + 232);
            if (*(_BYTE *)(v70 + 120 * v69 + 104) || *(_BYTE *)(v70 + 120 * v69 + 105))
              goto LABEL_101;
            if (!v65)
              v65 = *(unsigned int *)(v29 + 240);
            v71 = v70 + 120 * v65;
            *(_BYTE *)(v29 + 256) = *(_BYTE *)(v71 - 120);
            v72 = *(unsigned int *)(v29 + 280);
            v73 = *(unsigned int *)(v71 - 96);
            if ((_DWORD)v72 == -1)
            {
              if ((_DWORD)v73 == -1)
                goto LABEL_91;
            }
            else if ((_DWORD)v73 == -1)
            {
              ((void (*)(WTF::StringImpl **, uint64_t))off_1E335ACA8[v72])(&v87, v29 + 264);
              *(_DWORD *)(v29 + 280) = -1;
              goto LABEL_91;
            }
            v87 = (WTF::StringImpl *)(v29 + 264);
            ((void (*)(WTF::StringImpl **, uint64_t, uint64_t))off_1E335AD98[v73])(&v87, v29 + 264, v71 - 112);
LABEL_91:
            if (!WebCore::IDBServer::SQLiteIDBCursor::fetch((WebCore::IDBServer::SQLiteIDBCursor *)v29))
              goto LABEL_101;
            v74 = *(_QWORD *)(v29 + 216);
            v75 = *(_QWORD *)(v29 + 224);
            if (v74 > v75)
              v75 += *(unsigned int *)(v29 + 240);
            if (v75 - v74 > 0xFF || *(_QWORD *)(v29 + 248) >= 0x100000uLL)
              goto LABEL_101;
            v64 = 0;
            ++v63;
            v76 = *(_DWORD *)(v29 + 332);
            if (v63 >= v76)
            {
              if (!v76)
                break;
              v77 = 2 * v76;
              goto LABEL_100;
            }
          }
        }
        v77 = 1;
LABEL_100:
        *(_DWORD *)(v29 + 332) = v77;
      }
LABEL_101:
      WebCore::IDBServer::SQLiteIDBCursor::currentData(v29, a4, (uint64_t)(v61 + 2), v62);
    }
    *(_WORD *)a5 = 0;
    goto LABEL_103;
  }
  v34 = WebCore::IDBServer::SQLiteIDBCursor::advance((WebCore::IDBServer::SQLiteIDBCursor *)v29, 1);
  LOBYTE(v36) = v34;
  if (!v86 || !v34)
    goto LABEL_58;
  v37 = *(_QWORD *)(v29 + 216);
  if (v37 == *(_QWORD *)(v29 + 224))
  {
LABEL_115:
    __break(0xC471u);
    JUMPOUT(0x1953EAB70);
  }
  v36 = 1;
  while (1)
  {
    v38 = *(_QWORD *)(v29 + 232);
    v39 = (WebCore::IDBKeyData *)(v38 + 120 * v37);
    if (*((_BYTE *)v39 + 104) || *(_BYTE *)(v38 + 120 * v37 + 105))
      break;
    if (!v36)
      goto LABEL_106;
    v40 = *(unsigned __int8 *)(v29 + 40);
    v41 = WebCore::IDBKeyData::compare(v39, (const WebCore::IDBKeyData *)&v84, v35);
    if (v40 > 1)
    {
      if (v41 < 1)
      {
LABEL_43:
        v36 = 1;
        break;
      }
    }
    else if ((v41 & 0x80000000) == 0)
    {
      goto LABEL_43;
    }
    v36 = WebCore::IDBServer::SQLiteIDBCursor::advance((WebCore::IDBServer::SQLiteIDBCursor *)v29, 1);
    v37 = *(_QWORD *)(v29 + 216);
    if (v37 == *(_QWORD *)(v29 + 224))
      goto LABEL_115;
  }
  if (!WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)v81))
  {
LABEL_58:
    if (!v36)
      goto LABEL_106;
    goto LABEL_59;
  }
  v44 = *(_QWORD *)(v29 + 216);
  if (v44 == *(_QWORD *)(v29 + 224))
  {
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x1953EAC90);
  }
  while (1)
  {
    v45 = *(_QWORD *)(v29 + 232);
    v46 = (WebCore::IDBKeyData *)(v45 + 120 * v44);
    if (*((_BYTE *)v46 + 104) || *(_BYTE *)(v45 + 120 * v44 + 105))
      goto LABEL_58;
    v47 = WebCore::IDBKeyData::compare(v46, (const WebCore::IDBKeyData *)&v84, v43);
    if (v47 || !v36)
      break;
    v49 = *(_QWORD *)(v29 + 216);
    v50 = *(_QWORD *)(v29 + 224);
    if (*(unsigned __int8 *)(v29 + 40) > 1u)
    {
      if (v49 == v50)
        goto LABEL_115;
      if ((int)WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(*(_QWORD *)(v29 + 232) + 120 * v49 + 32), (const WebCore::IDBKeyData *)v81, v48) < 1)goto LABEL_58;
    }
    else
    {
      if (v49 == v50)
      {
        __break(0xC471u);
        JUMPOUT(0x1953EAF9CLL);
      }
      if ((WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)(*(_QWORD *)(v29 + 232) + 120 * v49 + 32), (const WebCore::IDBKeyData *)v81, v48) & 0x80000000) == 0)goto LABEL_58;
    }
    v36 = WebCore::IDBServer::SQLiteIDBCursor::advance((WebCore::IDBServer::SQLiteIDBCursor *)v29, 1);
    v44 = *(_QWORD *)(v29 + 216);
    if (v44 == *(_QWORD *)(v29 + 224))
      goto LABEL_57;
  }
  if (v47 != 0 && v36)
    goto LABEL_59;
LABEL_106:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)a5 = 280;
  v79 = v87;
  if (v87)
  {
    v80 = *(_DWORD *)v87;
    *(_DWORD *)v87 += 2;
    *(_QWORD *)(a5 + 8) = v79;
    v87 = 0;
    if (v80)
      *(_DWORD *)v79 = v80;
    else
      WTF::StringImpl::destroy(v79, v78);
    goto LABEL_109;
  }
LABEL_103:
  *(_QWORD *)(a5 + 8) = 0;
LABEL_109:
  if (v83 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E335ACA8[v83])(&v87, v82);
  if (v86 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E335ACA8[v86])(v81, v85);
}

WTF::StringImpl *WebCore::IDBServer::SQLiteIDBBackingStore::deleteBackingStore(WebCore::IDBServer::SQLiteIDBBackingStore *this)
{
  const WTF::String *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t i;
  char *v14;
  sqlite3_stmt **v15;
  void *v16;
  unsigned int *v17;
  unsigned int v19;
  WebCore::SQLiteDatabase *v20;
  uint64_t v21;
  WTF *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF::FileSystemImpl *v28;
  uint64_t v29;
  int v30;
  unsigned __int8 *v31;
  WebCore::SQLiteDatabaseTracker *v33;
  int v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unsigned __int8 *v40;
  WebCore::SQLiteDatabaseTracker *v42;
  int v43;
  int v44;
  WebCore::SQLiteDatabaseTracker *v45;
  uint64_t *v46;
  WTF *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  const WTF::String *v51;
  WTF::StringImpl *v52;
  uint64_t j;
  char *v54;
  sqlite3_stmt **v55;
  void *v56;
  unsigned int *v57;
  unsigned int v59;
  WebCore::SQLiteDatabase *v60;
  uint64_t v61;
  WTF *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  WTF *v68;
  const WTF::String *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *result;
  WebCore::SQLiteDatabaseTracker *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF *v75;
  void *v76;
  WTF *v77;
  void *v78;
  WTF *v79;
  void *v80;
  WebCore::IDBServer::SQLiteIDBBackingStore *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  sqlite3_stmt *pStmt;
  int v85;
  WTF *v86;
  uint64_t v87;
  WTF::StringImpl *v88;

  WTF::FileSystemImpl::pathByAppendingComponent();
  if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v88, v2) && !*((_QWORD *)this + 69))
  {
    v4 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 16) = -1;
    *(_WORD *)(v4 + 20) = 0;
    *(_BYTE *)(v4 + 22) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_BYTE *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    *(_BYTE *)(v4 + 48) = 0;
    *(_DWORD *)(v4 + 52) = 1;
    *(_QWORD *)(v4 + 56) = 0;
    v5 = *((_QWORD *)this + 69);
    *((_QWORD *)this + 69) = v4;
    if (v5)
    {
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v5);
      v7 = *(WTF **)(v5 + 56);
      *(_QWORD *)(v5 + 56) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
          WTF::fastFree(v7, v6);
        else
          --*(_DWORD *)v7;
      }
      v8 = *(unsigned int **)(v5 + 40);
      *(_QWORD *)(v5 + 40) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::Thread::~Thread((WTF::Thread *)v8);
          WTF::fastFree(v77, v78);
        }
      }
      v11 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v11)
        WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v11, (WTF::StringImpl *)v6);
      if (atomic_load((unsigned int *)v5))
      {
        *(_OWORD *)(v5 + 32) = 0u;
        *(_OWORD *)(v5 + 48) = 0u;
        *(_OWORD *)v5 = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v5, v6);
      }
    }
    if ((WebCore::SQLiteDatabase::open(*((_QWORD *)this + 69), (WTF::FileSystemImpl *)&v88, 2u, 0) & 1) == 0)
    {
      for (i = 0; i != 56; ++i)
      {
        v14 = (char *)this + 8 * i;
        v15 = (sqlite3_stmt **)*((_QWORD *)v14 + 1);
        *((_QWORD *)v14 + 1) = 0;
        if (v15)
        {
          sqlite3_finalize(v15[1]);
          v17 = (unsigned int *)*v15;
          *v15 = 0;
          if (v17)
          {
            if (!atomic_load(v17))
            {
              __break(0xC471u);
              JUMPOUT(0x1953EB658);
            }
            do
              v19 = __ldaxr(v17);
            while (__stlxr(v19 - 1, v17));
          }
          WTF::fastFree((WTF *)v15, v16);
        }
      }
      v20 = (WebCore::SQLiteDatabase *)*((_QWORD *)this + 69);
      if (v20)
      {
        WebCore::SQLiteDatabase::close(v20);
        v21 = *((_QWORD *)this + 69);
        *((_QWORD *)this + 69) = 0;
        if (v21)
        {
          WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v21);
          v22 = *(WTF **)(v21 + 56);
          *(_QWORD *)(v21 + 56) = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 1)
              WTF::fastFree(v22, v3);
            else
              --*(_DWORD *)v22;
          }
          v23 = *(unsigned int **)(v21 + 40);
          *(_QWORD *)(v21 + 40) = 0;
          if (v23)
          {
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, v23);
              WTF::Thread::~Thread((WTF::Thread *)v23);
              WTF::fastFree(v79, v80);
            }
          }
          v26 = *(_QWORD *)(v21 + 24);
          *(_QWORD *)(v21 + 24) = 0;
          if (v26)
            WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v26, (WTF::StringImpl *)v3);
          if (atomic_load((unsigned int *)v21))
          {
            *(_OWORD *)(v21 + 32) = 0u;
            *(_OWORD *)(v21 + 48) = 0u;
            *(_OWORD *)v21 = 0u;
            *(_OWORD *)(v21 + 16) = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v21, v3);
          }
        }
      }
      else
      {
        *((_QWORD *)this + 69) = 0;
      }
    }
  }
  v28 = (WebCore::IDBServer::SQLiteIDBBackingStore *)((char *)this + 576);
  v29 = *((_QWORD *)this + 69);
  if (!v29)
    goto LABEL_110;
  v86 = 0;
  v87 = 0;
  WebCore::SQLiteDatabase::prepareStatement(v29, "SELECT fileName FROM BlobFiles;", 32, (uint64_t)&v83);
  v30 = v85;
  if (!v85)
  {
    v31 = (unsigned __int8 *)v83 + 32;
    if (__ldaxr((unsigned __int8 *)v83 + 32))
    {
      __clrex();
    }
    else if (!__stxr(1u, v31))
    {
LABEL_43:
      if (*((_BYTE *)v83 + 20) || (v33 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v33))
      {
        v34 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v33);
        v72 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v34 = (int)v72;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v72);
      }
      v35 = __ldxr(v31);
      if (v35 == 1)
      {
        if (!__stlxr(0, v31))
          goto LABEL_51;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v31);
LABEL_51:
      if (v34 == 100)
      {
        while (1)
        {
          if (v85)
            goto LABEL_133;
          WebCore::SQLiteStatement::columnText(&v83, 0, &v82);
          LODWORD(v37) = HIDWORD(v87);
          if (HIDWORD(v87) == (_DWORD)v87)
          {
            v46 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v86, HIDWORD(v87) + 1, (unint64_t)&v82);
            v37 = HIDWORD(v87);
            v47 = v86;
            v48 = *v46;
            *v46 = 0;
            *((_QWORD *)v47 + v37) = v48;
          }
          else
          {
            v38 = v82;
            v82 = 0;
            *((_QWORD *)v86 + HIDWORD(v87)) = v38;
          }
          HIDWORD(v87) = v37 + 1;
          v39 = v82;
          v82 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v36);
            else
              *(_DWORD *)v39 -= 2;
          }
          if (v85)
          {
LABEL_133:
            v81 = (WebCore::IDBServer::SQLiteIDBBackingStore *)std::__throw_bad_variant_access[abi:sn180100]();
            return (WTF::StringImpl *)WebCore::IDBServer::SQLiteIDBBackingStore::close(v81);
          }
          v40 = (unsigned __int8 *)v83 + 32;
          if (__ldaxr((unsigned __int8 *)v83 + 32))
            break;
          if (__stxr(1u, v40))
            goto LABEL_62;
LABEL_63:
          if (*((_BYTE *)v83 + 20)
            || (v42 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v42))
          {
            v43 = sqlite3_step(pStmt);
          }
          else
          {
            WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v42);
            v45 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
            v43 = (int)v45;
            WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v45);
          }
          v44 = __ldxr(v40);
          if (v44 == 1)
          {
            if (!__stlxr(0, v40))
              goto LABEL_71;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v40);
LABEL_71:
          if (v43 != 100)
            goto LABEL_76;
        }
        __clrex();
LABEL_62:
        MEMORY[0x19AEA534C](v40);
        goto LABEL_63;
      }
LABEL_76:
      v30 = v85;
      goto LABEL_77;
    }
    MEMORY[0x19AEA534C](v31);
    goto LABEL_43;
  }
LABEL_77:
  if (v30 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E335AC78[v30])(&v82, &v83);
  if (HIDWORD(v87))
  {
    v49 = v86;
    v50 = 8 * HIDWORD(v87);
    do
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v83, v51);
      v52 = v83;
      v83 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v3);
        else
          *(_DWORD *)v52 -= 2;
      }
      v49 = (WTF *)((char *)v49 + 8);
      v50 -= 8;
    }
    while (v50);
  }
  for (j = 0; j != 56; ++j)
  {
    v54 = (char *)this + 8 * j;
    v55 = (sqlite3_stmt **)*((_QWORD *)v54 + 1);
    *((_QWORD *)v54 + 1) = 0;
    if (v55)
    {
      sqlite3_finalize(v55[1]);
      v57 = (unsigned int *)*v55;
      *v55 = 0;
      if (v57)
      {
        if (!atomic_load(v57))
        {
          __break(0xC471u);
          JUMPOUT(0x1953EB5DCLL);
        }
        do
          v59 = __ldaxr(v57);
        while (__stlxr(v59 - 1, v57));
      }
      WTF::fastFree((WTF *)v55, v56);
    }
  }
  v60 = (WebCore::SQLiteDatabase *)*((_QWORD *)this + 69);
  if (v60)
  {
    WebCore::SQLiteDatabase::close(v60);
    v61 = *((_QWORD *)this + 69);
    *((_QWORD *)this + 69) = 0;
    if (v61)
    {
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v61);
      v62 = *(WTF **)(v61 + 56);
      *(_QWORD *)(v61 + 56) = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 1)
          WTF::fastFree(v62, v3);
        else
          --*(_DWORD *)v62;
      }
      v63 = *(unsigned int **)(v61 + 40);
      *(_QWORD *)(v61 + 40) = 0;
      if (v63)
      {
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          atomic_store(1u, v63);
          WTF::Thread::~Thread((WTF::Thread *)v63);
          WTF::fastFree(v75, v76);
        }
      }
      v66 = *(_QWORD *)(v61 + 24);
      *(_QWORD *)(v61 + 24) = 0;
      if (v66)
        WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v66, (WTF::StringImpl *)v3);
      if (atomic_load((unsigned int *)v61))
      {
        *(_OWORD *)(v61 + 32) = 0u;
        *(_OWORD *)(v61 + 48) = 0u;
        *(_OWORD *)v61 = 0u;
        *(_OWORD *)(v61 + 16) = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v61, v3);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 69) = 0;
  }
  v68 = v86;
  if (HIDWORD(v87))
  {
    v73 = 8 * HIDWORD(v87);
    do
    {
      v74 = *(WTF::StringImpl **)v68;
      *(_QWORD *)v68 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v3);
        else
          *(_DWORD *)v74 -= 2;
      }
      v68 = (WTF *)((char *)v68 + 8);
      v73 -= 8;
    }
    while (v73);
    v68 = v86;
    if (!v86)
      goto LABEL_110;
  }
  else if (!v86)
  {
    goto LABEL_110;
  }
  v86 = 0;
  LODWORD(v87) = 0;
  WTF::fastFree(v68, v3);
LABEL_110:
  WebCore::SQLiteFileSystem::deleteDatabaseFile(&v88, (const WTF::String *)v3);
  WTF::FileSystemImpl::deleteEmptyDirectory(v28, v69);
  result = v88;
  v88 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v70);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double WebCore::IDBServer::SQLiteIDBBackingStore::close(WebCore::IDBServer::SQLiteIDBBackingStore *this)
{
  uint64_t i;
  char *v3;
  sqlite3_stmt **v4;
  void *v5;
  unsigned int *v6;
  unsigned int v8;
  double result;
  WebCore::SQLiteDatabase *v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v19;
  void *v20;

  for (i = 0; i != 56; ++i)
  {
    v3 = (char *)this + 8 * i;
    v4 = (sqlite3_stmt **)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
    {
      sqlite3_finalize(v4[1]);
      v6 = (unsigned int *)*v4;
      *v4 = 0;
      if (v6)
      {
        if (!atomic_load(v6))
        {
          __break(0xC471u);
          JUMPOUT(0x1953EB7F4);
        }
        do
          v8 = __ldaxr(v6);
        while (__stlxr(v8 - 1, v6));
      }
      WTF::fastFree((WTF *)v4, v5);
    }
  }
  v10 = (WebCore::SQLiteDatabase *)*((_QWORD *)this + 69);
  if (v10)
  {
    WebCore::SQLiteDatabase::close(v10);
    v11 = *((_QWORD *)this + 69);
    *((_QWORD *)this + 69) = 0;
    if (v11)
    {
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v11);
      v13 = *(WTF **)(v11 + 56);
      *(_QWORD *)(v11 + 56) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          WTF::fastFree(v13, v12);
        else
          --*(_DWORD *)v13;
      }
      v14 = *(unsigned int **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = 0;
      if (v14)
      {
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          WTF::Thread::~Thread((WTF::Thread *)v14);
          WTF::fastFree(v19, v20);
        }
      }
      v17 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      if (v17)
        WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v17, (WTF::StringImpl *)v12);
      if (atomic_load((unsigned int *)v11))
      {
        result = 0.0;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)v11 = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v11, v12);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 69) = 0;
  }
  return result;
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::hasTransaction(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 560);
  if (result)
    return WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(result, *a2, a2[1]) != 0;
  return result;
}

sqlite3 *WebCore::IDBServer::SQLiteIDBBackingStore::handleLowMemoryWarning(sqlite3 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 69);
  if (v1)
  {
    this = *(sqlite3 **)(v1 + 8);
    if (this)
      return (sqlite3 *)sqlite3_db_release_memory(this);
  }
  return this;
}

uint64_t WebCore::IDBServer::SQLiteIDBCursor::establishStatement(WebCore::IDBServer::SQLiteIDBCursor *this)
{
  char *v2;
  int v3;
  _BOOL4 v4;
  _BOOL4 v5;
  BOOL v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  BOOL v15;
  const char *v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  BOOL v31;
  const char *v32;
  uint64_t v33;
  int v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  uint64_t v45;
  const char *v46;
  unint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  sqlite3_stmt **v54;
  void *v55;
  unsigned int *v56;
  unsigned int v58;
  unsigned int v60;
  size_t v62;
  size_t v63;
  size_t v64;
  size_t v65;
  size_t v66;
  size_t v67;
  const char *__src;
  const char *v69;
  size_t __n;
  uint64_t v71;
  _QWORD v72[2];
  int v73;
  char *v74;

  v2 = (char *)this + 32;
  v3 = *((unsigned __int8 *)this + 40);
  v4 = *((_DWORD *)this + 18) != 0;
  v5 = *((_BYTE *)this + 112) == 0;
  v6 = !v4 || !v5;
  if (v4 && v5)
    v7 = ">=";
  else
    v7 = ">";
  v8 = 2;
  if (v6)
    v9 = 2;
  else
    v9 = 3;
  v10 = *((_DWORD *)this + 26) != 0;
  v11 = *((_BYTE *)this + 113) == 0;
  if (v10 && v11)
    v12 = "<=";
  else
    v12 = "<";
  if (v10 && v11)
    v8 = 3;
  if (*((_QWORD *)this + 4) == -1)
  {
    v30 = v3 & 0xFE;
    v31 = v30 == 2;
    if (v30 == 2)
      v32 = " DESC";
    else
      v32 = "";
    v33 = 6;
    if (!v31)
      v33 = 1;
    v65 = v9 - 1;
    if ((unint64_t)(v9 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1953EC104);
    }
    v66 = v8 - 1;
    if ((unint64_t)(v8 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1953EC130);
    }
    v67 = v33 - 1;
    if ((unint64_t)(v33 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1953EC15CLL);
    }
    WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(70, v65, 25, v66, 29, v67, 1, (uint64_t)&v74);
    if (!(_BYTE)v74)
    {
      v34 = HIDWORD(v74);
      if (!HIDWORD(v74))
      {
        v24 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
LABEL_70:
        v2 = (char *)this + 24;
        goto LABEL_71;
      }
      if ((HIDWORD(v74) & 0x80000000) == 0)
      {
        WTF::tryFastCompactMalloc((WTF *)(HIDWORD(v74) + 20));
        v24 = v71;
        if (v71)
        {
          *(_OWORD *)(v71 + 36) = *(_OWORD *)"y, value FROM Records WHERE objectStoreID = ? AND key ";
          qmemcpy((void *)(v24 + 52), "cords WHERE objectStoreID = ? AND key ", 38);
          *(_DWORD *)v24 = 2;
          *(_DWORD *)(v24 + 4) = v34;
          *(_QWORD *)(v24 + 8) = v24 + 20;
          *(_DWORD *)(v24 + 16) = 4;
          *(_OWORD *)(v24 + 20) = *(_OWORD *)"SELECT rowid, key, value FROM Records WHERE objectStoreID = ? AND key ";
          v35 = (char *)(v24 + 90);
          if ((_DWORD)v65)
          {
            if ((_DWORD)v65 == 1)
              *v35 = *v7;
            else
              memcpy((void *)(v24 + 90), v7, v65);
          }
          qmemcpy(&v35[v65], " CAST(? AS TEXT) AND key ", 25);
          v36 = &v35[v65 + 25];
          if ((_DWORD)v66)
          {
            if ((_DWORD)v66 == 1)
              *v36 = *v12;
            else
              memcpy(&v35[v65 + 25], v12, v66);
          }
          qmemcpy(&v36[v66], " CAST(? AS TEXT) ORDER BY key", 29);
          v37 = &v36[v66 + 29];
          if ((_DWORD)v67)
          {
            if ((_DWORD)v67 == 1)
              *v37 = *v32;
            else
              memcpy(&v36[v66 + 29], v32, v67);
          }
          v37[v67] = 59;
          goto LABEL_70;
        }
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1953EC024);
  }
  if ((v3 & 0xFE) == 2)
    v13 = " DESC";
  else
    v13 = "";
  __src = v13;
  if ((v3 & 0xFE) == 2)
    v14 = 6;
  else
    v14 = 1;
  v15 = v3 == 2;
  if (v3 == 2)
    v16 = " DESC";
  else
    v16 = "";
  v69 = v16;
  if (v15)
    v17 = 6;
  else
    v17 = 1;
  v62 = v9 - 1;
  if ((unint64_t)(v9 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1953EC050);
  }
  v63 = v8 - 1;
  if ((unint64_t)(v8 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1953EC07CLL);
  }
  v64 = v14 - 1;
  if ((unint64_t)(v14 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1953EC0A8);
  }
  __n = v17 - 1;
  if ((unint64_t)(v17 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1953EC0D8);
  }
  v18 = v64 + v17 + 7 + 29;
  v19 = __OFADD__((_DWORD)v63, v18);
  v20 = v63 + v18;
  if (v19)
    goto LABEL_139;
  v19 = __OFADD__(v20, 25);
  v21 = v20 + 25;
  if (v19)
    goto LABEL_139;
  v19 = __OFADD__((_DWORD)v62, v21);
  v22 = v62 + v21;
  if (v19)
    goto LABEL_139;
  v23 = (v22 + 69);
  if (__OFADD__(v22, 69))
    goto LABEL_139;
  if (v22 == -69)
  {
    v24 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_71;
  }
  if ((v23 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v23 + 20)), (v24 = v71) == 0))
  {
LABEL_139:
    __break(0xC471u);
    goto LABEL_140;
  }
  *(_OWORD *)(v71 + 36) = *(_OWORD *)"y, value FROM IndexRecords WHERE indexID = ? AND key ";
  qmemcpy((void *)(v24 + 52), "dexRecords WHERE indexID = ? AND key ", 37);
  *(_DWORD *)v24 = 2;
  *(_DWORD *)(v24 + 4) = v23;
  *(_QWORD *)(v24 + 8) = v24 + 20;
  *(_DWORD *)(v24 + 16) = 4;
  *(_OWORD *)(v24 + 20) = *(_OWORD *)"SELECT rowid, key, value FROM IndexRecords WHERE indexID = ? AND key ";
  v25 = (char *)(v24 + 89);
  if ((_DWORD)v62)
  {
    if ((_DWORD)v62 == 1)
      *v25 = *v7;
    else
      memcpy((void *)(v24 + 89), v7, v62);
  }
  qmemcpy(&v25[v62], " CAST(? AS TEXT) AND key ", 25);
  v26 = &v25[v62 + 25];
  if ((_DWORD)v63)
  {
    if ((_DWORD)v63 == 1)
      *v26 = *v12;
    else
      memcpy(&v25[v62 + 25], v12, v63);
  }
  qmemcpy(&v26[v63], " CAST(? AS TEXT) ORDER BY key", 29);
  v27 = &v26[v63 + 29];
  if ((_DWORD)v64)
  {
    if ((_DWORD)v64 == 1)
      *v27 = *__src;
    else
      memcpy(v27, __src, v64);
  }
  v28 = &v27[v64];
  *(_DWORD *)(v28 + 3) = 1702194273;
  *(_DWORD *)v28 = 1635131436;
  v29 = &v27[v64 + 7];
  if ((_DWORD)__n)
  {
    if ((_DWORD)__n == 1)
      *v29 = *v69;
    else
      memcpy(v29, v69, __n);
  }
  v29[__n] = 59;
LABEL_71:
  *((_QWORD *)this + 40) = *(_QWORD *)v2;
  v38 = *((unsigned int *)this + 18);
  if ((_DWORD)v38)
  {
    v39 = *((_BYTE *)this + 48);
    LOBYTE(v71) = v39;
    LOBYTE(v72[0]) = 0;
    v40 = -1;
    v73 = -1;
    if ((_DWORD)v38 != -1)
    {
      ((void (*)(char **, _QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v38])(&v74, v72, (char *)this + 56);
      v73 = v38;
      v39 = v71;
      v40 = v38;
    }
  }
  else
  {
    v39 = 0;
    LOBYTE(v71) = 0;
    v72[0] = 0;
    v40 = 7;
    v73 = 7;
  }
  *((_BYTE *)this + 120) = v39;
  v41 = *((unsigned int *)this + 36);
  if ((_DWORD)v41 == -1)
  {
    if (v40 == -1)
      goto LABEL_82;
  }
  else if (v40 == -1)
  {
    ((void (*)(char **, char *))off_1E335ACA8[v41])(&v74, (char *)this + 128);
    *((_DWORD *)this + 36) = -1;
    goto LABEL_80;
  }
  v74 = (char *)this + 128;
  ((void (*)(char **))off_1E335AD50[v40])(&v74);
LABEL_80:
  if (v73 != -1)
    ((void (*)(char **, _QWORD *))off_1E335ACA8[v73])(&v74, v72);
LABEL_82:
  v42 = *((unsigned int *)this + 26);
  if ((_DWORD)v42)
  {
    v43 = *((_BYTE *)this + 80);
    LOBYTE(v71) = v43;
    LOBYTE(v72[0]) = 0;
    v44 = -1;
    v73 = -1;
    if ((_DWORD)v42 != -1)
    {
      ((void (*)(char **, _QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v42])(&v74, v72, (char *)this + 88);
      v73 = v42;
      v43 = v71;
      v44 = v42;
    }
  }
  else
  {
    v43 = 0;
    LOBYTE(v71) = 0;
    v72[0] = 0;
    v44 = 8;
    v73 = 8;
  }
  *((_BYTE *)this + 152) = v43;
  v45 = *((unsigned int *)this + 44);
  if ((_DWORD)v45 == -1)
  {
    if (v44 == -1)
      goto LABEL_93;
  }
  else if (v44 == -1)
  {
    ((void (*)(char **, char *))off_1E335ACA8[v45])(&v74, (char *)this + 160);
    *((_DWORD *)this + 44) = -1;
    goto LABEL_91;
  }
  v74 = (char *)this + 160;
  ((void (*)(char **))off_1E335AD50[v44])(&v74);
LABEL_91:
  if (v73 != -1)
    ((void (*)(char **, _QWORD *))off_1E335ACA8[v73])(&v74, v72);
LABEL_93:
  v46 = *(const char **)(v24 + 8);
  v47 = *(unsigned int *)(v24 + 4) | ((unint64_t)((*(_DWORD *)(v24 + 16) >> 2) & 1) << 32);
  v48 = **(unsigned int ***)(*(_QWORD *)this + 64);
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 + 1, v48));
  WebCore::SQLiteDatabase::prepareHeapStatementSlow(v48, v46, v47, &v71);
  v51 = v72[0];
  if (LODWORD(v72[0]))
  {
    v52 = 0;
  }
  else
  {
    v53 = v71;
    v71 = 0;
    v54 = (sqlite3_stmt **)*((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = v53;
    if (v54)
    {
      sqlite3_finalize(v54[1]);
      v56 = (unsigned int *)*v54;
      *v54 = 0;
      if (v56)
      {
        if (!atomic_load(v56))
        {
          __break(0xC471u);
          JUMPOUT(0x1953EBFECLL);
        }
        do
          v58 = __ldaxr(v56);
        while (__stlxr(v58 - 1, v56));
      }
      WTF::fastFree((WTF *)v54, v55);
    }
    v52 = WebCore::IDBServer::SQLiteIDBCursor::bindArguments(this);
    v51 = v72[0];
  }
  if (v51 != -1)
    ((void (*)(char **, uint64_t *))off_1E335AE38[v51])(&v74, &v71);
  if (v48)
  {
    if (atomic_load(v48))
    {
      do
        v60 = __ldaxr(v48);
      while (__stlxr(v60 - 1, v48));
      goto LABEL_108;
    }
    __break(0xC471u);
LABEL_140:
    JUMPOUT(0x1953EBFCCLL);
  }
LABEL_108:
  if (*(_DWORD *)v24 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v24, v50);
  else
    *(_DWORD *)v24 -= 2;
  return v52;
}

uint64_t WebCore::IDBServer::SQLiteIDBCursor::maybeCreateBackingStoreCursor(WebCore::IDBServer::SQLiteIDBCursor *this, WebCore::IDBServer::SQLiteIDBTransaction *a2, uint64_t a3, uint64_t a4, const WebCore::IDBKeyRangeData *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t result;
  WTF *v18;
  void *v19;
  char v20;
  char v21;

  v10 = WTF::fastMalloc((WTF *)0x150);
  v11 = v10;
  *(_QWORD *)v10 = a2;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)a2;
  if (a4)
    v12 = a4;
  else
    v12 = -1;
  *(_QWORD *)(v10 + 24) = a3;
  *(_QWORD *)(v10 + 32) = v12;
  *(_WORD *)(v10 + 40) = 0;
  *(_BYTE *)(v10 + 48) = *(_BYTE *)a5;
  *(_BYTE *)(v10 + 56) = 0;
  *(_DWORD *)(v10 + 72) = -1;
  v13 = *((unsigned int *)a5 + 6);
  if ((_DWORD)v13 != -1)
  {
    ((void (*)(char *, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v13])(&v20, v10 + 56, (char *)a5 + 8);
    *(_DWORD *)(v11 + 72) = v13;
  }
  v14 = *((_BYTE *)a5 + 32);
  *(_BYTE *)(v11 + 88) = 0;
  *(_BYTE *)(v11 + 80) = v14;
  *(_DWORD *)(v11 + 104) = -1;
  v15 = *((unsigned int *)a5 + 14);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v15])(&v21);
    *(_DWORD *)(v11 + 104) = v15;
  }
  *(_WORD *)(v11 + 112) = *((_WORD *)a5 + 32);
  *(_BYTE *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 128) = 0;
  *(_DWORD *)(v11 + 144) = 0;
  *(_BYTE *)(v11 + 152) = 0;
  *(_QWORD *)(v11 + 160) = 0;
  *(_DWORD *)(v11 + 176) = 0;
  *(_BYTE *)(v11 + 184) = 0;
  *(_QWORD *)(v11 + 192) = 0;
  *(_DWORD *)(v11 + 208) = 0;
  *(_QWORD *)(v11 + 264) = 0;
  *(_DWORD *)(v11 + 280) = 0;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_OWORD *)(v11 + 232) = 0u;
  *(_OWORD *)(v11 + 241) = 0u;
  *(_QWORD *)(v11 + 296) = 0;
  *(_QWORD *)(v11 + 304) = 0;
  *(_QWORD *)(v11 + 288) = 0;
  *(_BYTE *)(v11 + 312) = 1;
  *(_QWORD *)(v11 + 320) = 0;
  *(_BYTE *)(v11 + 328) = 1;
  *(_DWORD *)(v11 + 332) = 0;
  if (WebCore::IDBServer::SQLiteIDBCursor::establishStatement((WebCore::IDBServer::SQLiteIDBCursor *)v11)
    && (result = WebCore::IDBServer::SQLiteIDBCursor::advance((WebCore::IDBServer::SQLiteIDBCursor *)v11, 1),
        (_DWORD)result))
  {
    *(_QWORD *)this = v11;
  }
  else
  {
    *(_QWORD *)this = 0;
    WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor((WebCore::IDBServer::SQLiteIDBCursor *)v11, v16);
    return WTF::fastFree(v18, v19);
  }
  return result;
}

void WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor(WebCore::IDBServer::SQLiteIDBCursor *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::IDBServer::SQLiteIDBCursor *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  sqlite3_stmt **v50;
  void *v51;
  unsigned int *v52;
  unsigned int v54;
  sqlite3_stmt **v55;
  void *v56;
  unsigned int *v57;
  unsigned int v59;
  sqlite3_stmt **v60;
  void *v61;
  unsigned int *v62;
  unsigned int v64;
  uint64_t v65;
  void *v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WebCore::IDBServer::SQLiteIDBCursor *v73;
  WTF *v74;
  void *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;

  if (*((_BYTE *)this + 328))
  {
    v3 = *(_QWORD *)this;
    v4 = (uint64_t *)(*(_QWORD *)this + 80);
    v5 = *(_QWORD *)(*(_QWORD *)this + 80);
    if (!v5)
      goto LABEL_21;
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WebCore::IDBServer::SQLiteIDBCursor **)(v5 + 8 * v10);
    if (v11 != this)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WebCore::IDBServer::SQLiteIDBCursor **)(v5 + 8 * v10);
        ++v12;
        if (v11 == this)
          goto LABEL_9;
      }
      v10 = *(unsigned int *)(v5 - 4);
    }
LABEL_9:
    if (v10 == *(_DWORD *)(v5 - 4))
      goto LABEL_21;
    v13 = *(_QWORD *)(v5 + 8 * v10);
    *(_QWORD *)(v5 + 8 * v10) = -1;
    ++*(_DWORD *)(*v4 - 16);
    v14 = *v4;
    if (*v4)
      v15 = *(_DWORD *)(v14 - 12) - 1;
    else
      v15 = -1;
    *(_DWORD *)(v14 - 12) = v15;
    v16 = *v4;
    if (*v4)
    {
      v17 = 6 * *(_DWORD *)(v16 - 12);
      v18 = *(_DWORD *)(v16 - 4);
      if (v17 < v18 && v18 >= 9)
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v4, v18 >> 1, 0);
    }
    if (!v13)
    {
LABEL_21:
      v20 = *(_QWORD *)(v3 + 56);
      v21 = *(_QWORD *)(v20 + 568);
      if (v21)
      {
        v22 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*(_QWORD *)(v20 + 568), *((_QWORD *)this + 1), *((_QWORD *)this + 2));
        if (v22 && v22 != (uint64_t *)(v21 + 24 * *(unsigned int *)(v21 - 4)))
        {
          v24 = v22;
          v25 = (uint64_t *)(v20 + 568);
          *v24 = -1;
          ++*(_DWORD *)(*(_QWORD *)(v20 + 568) - 16);
          v26 = *(_QWORD *)(v20 + 568);
          v27 = v26 ? *(_DWORD *)(v26 - 12) - 1 : -1;
          *(_DWORD *)(v26 - 12) = v27;
          v28 = *v25;
          if (*v25)
          {
            v29 = 6 * *(_DWORD *)(v28 - 12);
            v30 = *(_DWORD *)(v28 - 4);
            if (v29 < v30 && v30 >= 9)
              WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v25, v30 >> 1);
          }
        }
      }
      v34 = *(_QWORD *)(v3 + 72);
      v33 = (uint64_t *)(v3 + 72);
      v32 = v34;
      if (v34)
      {
        v35 = *((_QWORD *)this + 1);
        v36 = *((_QWORD *)this + 2);
        v37 = *(_DWORD *)(v32 - 8);
        v38 = (v35 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v35 - 1640531527) << 16) ^ ((unsigned __int16)v35 - 1640531527);
        v39 = (v35 >> 37) & 0x7FFF800 ^ ((v38 + WORD2(v35) + (v38 >> 11)) << 16) ^ (v38 + WORD2(v35) + (v38 >> 11));
        v40 = (v36 >> 5) & 0x7FFF800 ^ ((v39 + (unsigned __int16)v36 + (v39 >> 11)) << 16) ^ (v39 + (unsigned __int16)v36 + (v39 >> 11));
        v41 = (v36 >> 37) & 0x7FFF800 ^ ((v40 + WORD2(v36) + (v40 >> 11)) << 16) ^ (v40 + WORD2(v36) + (v40 >> 11));
        v42 = (v41 + (v41 >> 11)) ^ (8 * (v41 + (v41 >> 11)));
        v43 = (v42 + (v42 >> 5)) ^ (4 * (v42 + (v42 >> 5)));
        v44 = (v43 + (v43 >> 15)) ^ ((v43 + (v43 >> 15)) << 10);
        if (!v44)
          v44 = 0x800000;
        v45 = v44 & v37;
        v46 = (uint64_t *)(v32 + 24 * (v44 & v37));
        v48 = *v46;
        v47 = v46[1];
        if (*(_OWORD *)v46 != 0)
        {
          v49 = 1;
          while (v48 == -1 || v48 != v35 || v47 != v36)
          {
            v45 = (v45 + v49) & v37;
            v46 = (uint64_t *)(v32 + 24 * v45);
            v48 = *v46;
            v47 = v46[1];
            ++v49;
            if (*(_OWORD *)v46 == 0)
              goto LABEL_45;
          }
          if (v46 != (uint64_t *)(v32 + 24 * *(unsigned int *)(v32 - 4)))
          {
            *v46 = -1;
            v73 = (WebCore::IDBServer::SQLiteIDBCursor *)v46[2];
            v46[2] = 0;
            if (v73)
            {
              WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor(v73);
              WTF::fastFree(v74, v75);
            }
            ++*(_DWORD *)(*v33 - 16);
            v76 = *v33;
            if (*v33)
              v77 = *(_DWORD *)(v76 - 12) - 1;
            else
              v77 = -1;
            *(_DWORD *)(v76 - 12) = v77;
            v78 = *v33;
            if (*v33)
            {
              v79 = 6 * *(_DWORD *)(v78 - 12);
              v80 = *(_DWORD *)(v78 - 4);
              if (v79 < v80 && v80 >= 9)
                WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v33, v80 >> 1, 0);
            }
          }
        }
      }
    }
  }
LABEL_45:
  v50 = (sqlite3_stmt **)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v50)
  {
    sqlite3_finalize(v50[1]);
    v52 = (unsigned int *)*v50;
    *v50 = 0;
    if (v52)
    {
      if (!atomic_load(v52))
        goto LABEL_90;
      do
        v54 = __ldaxr(v52);
      while (__stlxr(v54 - 1, v52));
    }
    WTF::fastFree((WTF *)v50, v51);
  }
  v55 = (sqlite3_stmt **)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v55)
  {
    sqlite3_finalize(v55[1]);
    v57 = (unsigned int *)*v55;
    *v55 = 0;
    if (v57)
    {
      if (!atomic_load(v57))
      {
        __break(0xC471u);
        JUMPOUT(0x1953EC824);
      }
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
    }
    WTF::fastFree((WTF *)v55, v56);
  }
  v60 = (sqlite3_stmt **)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v60)
  {
    sqlite3_finalize(v60[1]);
    v62 = (unsigned int *)*v60;
    *v60 = 0;
    if (!v62)
    {
LABEL_59:
      WTF::fastFree((WTF *)v60, v61);
      goto LABEL_60;
    }
    if (atomic_load(v62))
    {
      do
        v64 = __ldaxr(v62);
      while (__stlxr(v64 - 1, v62));
      goto LABEL_59;
    }
LABEL_90:
    __break(0xC471u);
    JUMPOUT(0x1953EC804);
  }
LABEL_60:
  v65 = *((unsigned int *)this + 70);
  if ((_DWORD)v65 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v65])(&v82, (char *)this + 264);
  *((_DWORD *)this + 70) = -1;
  WTF::Deque<WebCore::IDBServer::SQLiteIDBCursor::SQLiteCursorRecord,0ul>::destroyAll((unint64_t *)this + 27, a2);
  v67 = (WTF *)*((_QWORD *)this + 29);
  if (v67)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v67, v66);
  }
  v68 = *((unsigned int *)this + 52);
  if ((_DWORD)v68 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v68])(&v83, (char *)this + 192);
  *((_DWORD *)this + 52) = -1;
  v69 = *((unsigned int *)this + 44);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v69])(&v84, (char *)this + 160);
  *((_DWORD *)this + 44) = -1;
  v70 = *((unsigned int *)this + 36);
  if ((_DWORD)v70 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v70])(&v85, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  v71 = *((unsigned int *)this + 26);
  if ((_DWORD)v71 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v71])(&v86, (char *)this + 88);
  *((_DWORD *)this + 26) = -1;
  v72 = *((unsigned int *)this + 18);
  if ((_DWORD)v72 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v72])(&v87, (char *)this + 56);
  *((_DWORD *)this + 18) = -1;
}

uint64_t WebCore::IDBServer::SQLiteIDBCursor::bindArguments(WebCore::IDBServer::SQLiteIDBCursor *this)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  void *v9;
  WTF *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  WTF *v46;
  WTF *v48;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  WTF *v58;
  WTF *v59;
  WTF *v60;
  char v61;
  WTF *v62;

  if (sqlite3_bind_int64(*(sqlite3_stmt **)(*((_QWORD *)this + 37) + 8), 1, *((_QWORD *)this + 40)))
    return 0;
  WebCore::serializeIDBKeyData((WebCore::IDBServer::SQLiteIDBCursor *)((char *)this + 120), (uint64_t *)&v60);
  v3 = *((_QWORD *)this + 37);
  v4 = (uint64_t)v60;
  if (*((_DWORD *)v60 + 5))
  {
    v5 = *(_QWORD *)(*((_QWORD *)v60 + 1) + 8);
    v6 = *(unsigned int *)(v5 + 24);
    if ((_DWORD)v6 == -1)
      goto LABEL_72;
    v62 = (WTF *)&v61;
    v7 = (const void *)((uint64_t (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v62, v5 + 8);
  }
  else
  {
    v7 = 0;
  }
  if (sqlite3_bind_blob(*(sqlite3_stmt **)(v3 + 8), 2, v7, *(_DWORD *)(v4 + 48), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
  {
    v2 = 0;
LABEL_18:
    v60 = 0;
    do
    {
      v20 = __ldaxr((unsigned int *)v4);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v4));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v4);
      v23 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v23)
      {
        v24 = *(_QWORD *)(v4 + 8);
        v25 = v24 + 16 * v23;
        do
        {
          v26 = *(unsigned int **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              v54 = v25;
              v57 = (WTF *)v26;
              atomic_store(1u, v26);
              v29 = v26[6];
              if ((_DWORD)v29 != -1)
                ((void (*)(WTF **, unsigned int *))off_1E335AE70[v29])(&v62, v26 + 2);
              *((_DWORD *)v57 + 6) = -1;
              WTF::fastFree(v57, v8);
              v25 = v54;
            }
          }
          v24 += 16;
        }
        while (v24 != v25);
      }
      v30 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v30 && v30 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        WTF::fastFree(v30, v8);
      }
      WTF::fastFree((WTF *)v4, v8);
    }
    return v2;
  }
  WebCore::serializeIDBKeyData((WebCore::IDBServer::SQLiteIDBCursor *)((char *)this + 152), (uint64_t *)&v62);
  v10 = v62;
  v62 = 0;
  v60 = v10;
  do
  {
    v11 = __ldaxr((unsigned int *)v4);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, (unsigned int *)v4));
  if (!v12)
  {
    atomic_store(1u, (unsigned int *)v4);
    v32 = *(unsigned int *)(v4 + 20);
    if ((_DWORD)v32)
    {
      v33 = *(_QWORD *)(v4 + 8);
      v34 = v33 + 16 * v32;
      do
      {
        v35 = *(unsigned int **)(v33 + 8);
        *(_QWORD *)(v33 + 8) = 0;
        if (v35)
        {
          do
          {
            v36 = __ldaxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
          {
            v52 = v33;
            v55 = v34;
            atomic_store(1u, v35);
            v58 = (WTF *)v35;
            v38 = v35[6];
            if ((_DWORD)v38 != -1)
              ((void (*)(char *, unsigned int *))off_1E335AE70[v38])(&v61, v35 + 2);
            *((_DWORD *)v58 + 6) = -1;
            WTF::fastFree(v58, v9);
            v33 = v52;
            v34 = v55;
          }
        }
        v33 += 16;
      }
      while (v33 != v34);
    }
    v46 = *(WTF **)(v4 + 8);
    if ((WTF *)(v4 + 24) != v46 && v46 != 0)
    {
      *(_QWORD *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 16) = 0;
      WTF::fastFree(v46, v9);
    }
    WTF::fastFree((WTF *)v4, v9);
  }
  v13 = v62;
  v62 = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v39 = *((unsigned int *)v13 + 5);
      if ((_DWORD)v39)
      {
        v40 = *((_QWORD *)v13 + 1);
        v41 = v40 + 16 * v39;
        do
        {
          v42 = *(unsigned int **)(v40 + 8);
          *(_QWORD *)(v40 + 8) = 0;
          if (v42)
          {
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              v53 = v40;
              v56 = v41;
              atomic_store(1u, v42);
              v59 = (WTF *)v42;
              v45 = v42[6];
              if ((_DWORD)v45 != -1)
                ((void (*)(char *, unsigned int *))off_1E335AE70[v45])(&v61, v42 + 2);
              *((_DWORD *)v59 + 6) = -1;
              WTF::fastFree(v59, v9);
              v40 = v53;
              v41 = v56;
            }
          }
          v40 += 16;
        }
        while (v40 != v41);
      }
      v48 = (WTF *)*((_QWORD *)v13 + 1);
      if ((WTF *)((char *)v13 + 24) != v48 && v48 != 0)
      {
        *((_QWORD *)v13 + 1) = 0;
        *((_DWORD *)v13 + 4) = 0;
        WTF::fastFree(v48, v9);
      }
      WTF::fastFree(v13, v9);
    }
  }
  v16 = *((_QWORD *)this + 37);
  v4 = (uint64_t)v60;
  if (!*((_DWORD *)v60 + 5))
  {
    v19 = 0;
    goto LABEL_17;
  }
  v17 = *(_QWORD *)(*((_QWORD *)v60 + 1) + 8);
  v18 = *(unsigned int *)(v17 + 24);
  if ((_DWORD)v18 != -1)
  {
    v62 = (WTF *)&v61;
    v19 = (const void *)((uint64_t (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v18])(&v62, v17 + 8);
LABEL_17:
    v2 = sqlite3_bind_blob(*(sqlite3_stmt **)(v16 + 8), 3, v19, *(_DWORD *)(v4 + 48), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL) == 0;
    goto LABEL_18;
  }
LABEL_72:
  v50 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::IDBServer::SQLiteIDBCursor::objectStoreRecordsChanged(v50, v51);
}

uint64_t WebCore::IDBServer::SQLiteIDBCursor::objectStoreRecordsChanged(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  sqlite3_stmt **v20;
  void *v21;
  unsigned int *v22;
  unsigned int v24;
  void *v25;
  WTF::StringImpl *v26;

  if (*(_BYTE *)(this + 312))
    return this;
  v2 = this;
  v3 = *(_QWORD *)(this + 216);
  v4 = (unint64_t *)(this + 216);
  if (v3 == *(_QWORD *)(this + 224))
  {
    __break(0xC471u);
    goto LABEL_48;
  }
  v5 = *(_QWORD *)(this + 232) + 120 * v3;
  *(_BYTE *)(this + 256) = *(_BYTE *)v5;
  v6 = *(unsigned int *)(this + 280);
  v7 = *(unsigned int *)(v5 + 24);
  if ((_DWORD)v6 == -1)
  {
    if ((_DWORD)v7 == -1)
      goto LABEL_8;
  }
  else if ((_DWORD)v7 == -1)
  {
    ((void (*)(WTF::StringImpl **, uint64_t))off_1E335ACA8[v6])(&v26, this + 264);
    *(_DWORD *)(v2 + 280) = -1;
    goto LABEL_8;
  }
  v26 = (WTF::StringImpl *)(this + 264);
  ((void (*)(WTF::StringImpl **, uint64_t, uint64_t))off_1E335AD98[v7])(&v26, this + 264, v5 + 8);
LABEL_8:
  if (*(_QWORD *)(v2 + 32) == -1)
    goto LABEL_15;
  v8 = *(_QWORD *)(v2 + 216);
  if (v8 == *(_QWORD *)(v2 + 224))
  {
    __break(0xC471u);
    JUMPOUT(0x1953ECFC4);
  }
  v9 = *(_QWORD *)(v2 + 232) + 120 * v8;
  *(_BYTE *)(v2 + 184) = *(_BYTE *)(v9 + 32);
  a2 = (WTF::StringImpl *)(v2 + 192);
  v10 = *(unsigned int *)(v2 + 208);
  v11 = *(unsigned int *)(v9 + 56);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_15;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl *))off_1E335ACA8[v10])(&v26, a2);
    *(_DWORD *)(v2 + 208) = -1;
    goto LABEL_15;
  }
  v26 = (WTF::StringImpl *)(v2 + 192);
  ((void (*)(WTF::StringImpl **))off_1E335AD98[v11])(&v26);
LABEL_15:
  *(_BYTE *)(v2 + 312) = 1;
  v12 = *(_BYTE *)(v2 + 256);
  if (*(unsigned __int8 *)(v2 + 40) > 1u)
  {
    *(_BYTE *)(v2 + 152) = v12;
    v15 = *(unsigned int *)(v2 + 176);
    v16 = *(unsigned int *)(v2 + 280);
    if ((_DWORD)v15 == -1)
    {
      if ((_DWORD)v16 == -1)
        goto LABEL_30;
    }
    else if ((_DWORD)v16 == -1)
    {
      ((void (*)(WTF::StringImpl **, uint64_t))off_1E335ACA8[v15])(&v26, v2 + 160);
      *(_DWORD *)(v2 + 176) = -1;
      goto LABEL_30;
    }
    v26 = (WTF::StringImpl *)(v2 + 160);
    ((void (*)(WTF::StringImpl **, uint64_t, uint64_t))off_1E335AD98[v16])(&v26, v2 + 160, v2 + 264);
LABEL_30:
    if (*(_BYTE *)(v2 + 113))
      goto LABEL_41;
    *(_BYTE *)(v2 + 113) = 1;
    *(_BYTE *)(v2 + 80) = *(_BYTE *)(v2 + 152);
    a2 = (WTF::StringImpl *)(v2 + 88);
    v19 = *(unsigned int *)(v2 + 104);
    v18 = *(unsigned int *)(v2 + 176);
    if ((_DWORD)v19 != -1)
    {
      if ((_DWORD)v18 == -1)
      {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl *))off_1E335ACA8[v19])(&v26, a2);
        *(_DWORD *)(v2 + 104) = -1;
        goto LABEL_36;
      }
      goto LABEL_35;
    }
LABEL_34:
    if ((_DWORD)v18 == -1)
      goto LABEL_36;
    goto LABEL_35;
  }
  *(_BYTE *)(v2 + 120) = v12;
  v13 = *(unsigned int *)(v2 + 144);
  v14 = *(unsigned int *)(v2 + 280);
  if ((_DWORD)v13 == -1)
  {
    if ((_DWORD)v14 == -1)
      goto LABEL_24;
  }
  else if ((_DWORD)v14 == -1)
  {
    ((void (*)(WTF::StringImpl **, uint64_t))off_1E335ACA8[v13])(&v26, v2 + 128);
    *(_DWORD *)(v2 + 144) = -1;
    goto LABEL_24;
  }
  v26 = (WTF::StringImpl *)(v2 + 128);
  ((void (*)(WTF::StringImpl **, uint64_t, uint64_t))off_1E335AD98[v14])(&v26, v2 + 128, v2 + 264);
LABEL_24:
  if (*(_BYTE *)(v2 + 112))
    goto LABEL_41;
  *(_BYTE *)(v2 + 112) = 1;
  *(_BYTE *)(v2 + 48) = *(_BYTE *)(v2 + 120);
  a2 = (WTF::StringImpl *)(v2 + 56);
  v17 = *(unsigned int *)(v2 + 72);
  v18 = *(unsigned int *)(v2 + 144);
  if ((_DWORD)v17 == -1)
    goto LABEL_34;
  if ((_DWORD)v18 == -1)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl *))off_1E335ACA8[v17])(&v26, a2);
    *(_DWORD *)(v2 + 72) = -1;
    goto LABEL_36;
  }
LABEL_35:
  v26 = a2;
  ((void (*)(WTF::StringImpl **))off_1E335AD98[v18])(&v26);
LABEL_36:
  v20 = *(sqlite3_stmt ***)(v2 + 296);
  *(_QWORD *)(v2 + 296) = 0;
  if (v20)
  {
    sqlite3_finalize(v20[1]);
    v22 = (unsigned int *)*v20;
    *v20 = 0;
    if (!v22)
    {
LABEL_40:
      WTF::fastFree((WTF *)v20, v21);
      goto LABEL_41;
    }
    if (atomic_load(v22))
    {
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      goto LABEL_40;
    }
    __break(0xC471u);
LABEL_48:
    JUMPOUT(0x1953ECFA4);
  }
LABEL_41:
  WTF::Deque<WebCore::IDBServer::SQLiteIDBCursor::SQLiteCursorRecord,0ul>::destroyAll(v4, a2);
  *v4 = 0;
  v4[1] = 0;
  this = *(_QWORD *)(v2 + 232);
  if (this)
  {
    *(_QWORD *)(v2 + 232) = 0;
    *(_DWORD *)(v2 + 240) = 0;
    this = WTF::fastFree((WTF *)this, v25);
  }
  *(_QWORD *)(v2 + 248) = 0;
  *(_DWORD *)(v2 + 332) = 0;
  return this;
}

uint64_t WebCore::IDBServer::SQLiteIDBCursor::resetAndRebindPreIndexStatementIfNecessary(uint64_t this)
{
  uint64_t v1;
  WTF *v2;
  unsigned int *v3;
  unsigned int v4;
  sqlite3_stmt **v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  WTF *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  char *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  sqlite3_stmt **v33;
  void *v34;
  unsigned int *v35;
  unsigned int v37;
  int v38;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  WTF *v66;
  size_t v68;
  WTF *v69;
  uint64_t v70;
  _DWORD v71[4];
  int v72;
  char v73;
  WTF *v74;

  if (*(_QWORD *)(this + 32) == -1)
    return this;
  v1 = this;
  if (!*(_DWORD *)(this + 208))
    return this;
  v2 = (WTF *)(this + 184);
  v3 = **(unsigned int ***)(*(_QWORD *)this + 64);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(sqlite3_stmt ***)(this + 288);
  if (!v5)
  {
    if (*(unsigned __int8 *)(v1 + 40) >= 2u)
      LOBYTE(v10) = 60;
    else
      LOBYTE(v10) = 62;
    if (*(unsigned __int8 *)(v1 + 40) >= 2u)
      v8 = " DESC";
    else
      v8 = "";
    v27 = 6;
    if (*(unsigned __int8 *)(v1 + 40) < 2u)
      v27 = 1;
    goto LABEL_118;
  }
  while (1)
  {
    this = WebCore::SQLiteStatement::reset(v5);
    if ((_DWORD)this)
      break;
    v6 = 120;
    if (*(unsigned __int8 *)(v1 + 40) < 2u)
    {
      v7 = v1 + 120;
    }
    else
    {
      v6 = 152;
      v7 = v1 + 152;
    }
    LOBYTE(v70) = *(_BYTE *)(v1 + v6);
    v8 = (const char *)v71;
    LOBYTE(v71[0]) = 0;
    v72 = -1;
    v9 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(WTF **, _DWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v9])(&v74, v71, v7 + 8);
      v72 = v9;
    }
    this = sqlite3_bind_int64(*(sqlite3_stmt **)(*(_QWORD *)(v1 + 288) + 8), 1, *(_QWORD *)(v1 + 320));
    if ((_DWORD)this)
      goto LABEL_30;
    WebCore::serializeIDBKeyData((WebCore *)&v70, (uint64_t *)&v69);
    v10 = *(_QWORD *)(v1 + 288);
    v11 = (uint64_t)v69;
    if (*((_DWORD *)v69 + 5))
    {
      v12 = *(_QWORD *)(*((_QWORD *)v69 + 1) + 8);
      v13 = *(unsigned int *)(v12 + 24);
      if ((_DWORD)v13 == -1)
        goto LABEL_117;
      v74 = (WTF *)&v73;
      v14 = (const void *)((uint64_t (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v74, v12 + 8);
    }
    else
    {
      v14 = 0;
    }
    this = sqlite3_bind_blob(*(sqlite3_stmt **)(v10 + 8), 2, v14, *(_DWORD *)(v11 + 48), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    if ((_DWORD)this)
      goto LABEL_27;
    WebCore::serializeIDBKeyData(v2, (uint64_t *)&v74);
    v17 = v74;
    v74 = 0;
    v69 = v17;
    do
    {
      v18 = __ldaxr((unsigned int *)v11);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v11));
    if (!v19)
    {
      LOBYTE(v10) = 1;
      atomic_store(1u, (unsigned int *)v11);
      v50 = *(unsigned int *)(v11 + 20);
      if ((_DWORD)v50)
      {
        v51 = *(_QWORD *)(v11 + 8);
        v52 = v51 + 16 * v50;
        do
        {
          v53 = *(unsigned int **)(v51 + 8);
          *(_QWORD *)(v51 + 8) = 0;
          if (v53)
          {
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              atomic_store(1u, v53);
              v56 = v53[6];
              if ((_DWORD)v56 != -1)
                ((void (*)(char *, unsigned int *))off_1E335AE70[v56])(&v73, v53 + 2);
              v53[6] = -1;
              WTF::fastFree((WTF *)v53, v16);
            }
          }
          v51 += 16;
        }
        while (v51 != v52);
      }
      v57 = *(WTF **)(v11 + 8);
      if ((WTF *)(v11 + 24) != v57 && v57 != 0)
      {
        *(_QWORD *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 16) = 0;
        WTF::fastFree(v57, v16);
      }
      WTF::fastFree((WTF *)v11, v16);
    }
    v2 = v74;
    v74 = 0;
    if (v2)
    {
      do
      {
        v20 = __ldaxr((unsigned int *)v2);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, (unsigned int *)v2));
      if (!v21)
      {
        LOBYTE(v10) = 1;
        atomic_store(1u, (unsigned int *)v2);
        v59 = *((unsigned int *)v2 + 5);
        if ((_DWORD)v59)
        {
          v60 = *((_QWORD *)v2 + 1);
          v61 = v60 + 16 * v59;
          do
          {
            v62 = *(unsigned int **)(v60 + 8);
            *(_QWORD *)(v60 + 8) = 0;
            if (v62)
            {
              do
              {
                v63 = __ldaxr(v62);
                v64 = v63 - 1;
              }
              while (__stlxr(v64, v62));
              if (!v64)
              {
                atomic_store(1u, v62);
                v65 = v62[6];
                if ((_DWORD)v65 != -1)
                  ((void (*)(char *, unsigned int *))off_1E335AE70[v65])(&v73, v62 + 2);
                v62[6] = -1;
                WTF::fastFree((WTF *)v62, v16);
              }
            }
            v60 += 16;
          }
          while (v60 != v61);
        }
        v66 = (WTF *)*((_QWORD *)v2 + 1);
        if ((WTF *)((char *)v2 + 24) != v66 && v66 != 0)
        {
          *((_QWORD *)v2 + 1) = 0;
          *((_DWORD *)v2 + 4) = 0;
          WTF::fastFree(v66, v16);
        }
        WTF::fastFree(v2, v16);
      }
    }
    v1 = *(_QWORD *)(v1 + 288);
    v11 = (uint64_t)v69;
    if (!*((_DWORD *)v69 + 5))
    {
      v24 = 0;
      goto LABEL_26;
    }
    v22 = *(_QWORD *)(*((_QWORD *)v69 + 1) + 8);
    v23 = *(unsigned int *)(v22 + 24);
    if ((_DWORD)v23 != -1)
    {
      v74 = (WTF *)&v73;
      v24 = (const void *)((uint64_t (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v23])(&v74, v22 + 8);
LABEL_26:
      this = sqlite3_bind_blob(*(sqlite3_stmt **)(v1 + 8), 3, v24, *(_DWORD *)(v11 + 48), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
LABEL_27:
      v69 = 0;
      do
      {
        v25 = __ldaxr((unsigned int *)v11);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)v11));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)v11);
        v41 = *(unsigned int *)(v11 + 20);
        if ((_DWORD)v41)
        {
          v42 = *(_QWORD *)(v11 + 8);
          v43 = v42 + 16 * v41;
          do
          {
            v44 = *(unsigned int **)(v42 + 8);
            *(_QWORD *)(v42 + 8) = 0;
            if (v44)
            {
              do
              {
                v45 = __ldaxr(v44);
                v46 = v45 - 1;
              }
              while (__stlxr(v46, v44));
              if (!v46)
              {
                atomic_store(1u, v44);
                v47 = v44[6];
                if ((_DWORD)v47 != -1)
                  ((void (*)(WTF **, unsigned int *))off_1E335AE70[v47])(&v74, v44 + 2);
                v44[6] = -1;
                WTF::fastFree((WTF *)v44, v15);
              }
            }
            v42 += 16;
          }
          while (v42 != v43);
        }
        v48 = *(WTF **)(v11 + 8);
        if ((WTF *)(v11 + 24) != v48 && v48 != 0)
        {
          *(_QWORD *)(v11 + 8) = 0;
          *(_DWORD *)(v11 + 16) = 0;
          WTF::fastFree(v48, v15);
        }
        this = WTF::fastFree((WTF *)v11, v15);
      }
LABEL_30:
      if (v72 != -1)
        this = ((uint64_t (*)(WTF **, _DWORD *))off_1E335ACA8[v72])(&v74, v71);
      break;
    }
LABEL_117:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_118:
    v68 = v27 - 1;
    if ((unint64_t)(v27 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1953ED6D8);
    }
    v28 = (v27 + 129);
    WTF::tryFastCompactMalloc((WTF *)(v28 + 20));
    v29 = v74;
    if (!v74)
      goto LABEL_121;
    *(_OWORD *)((char *)v74 + 52) = *(_OWORD *)"dexRecords WHERE indexID = ? AND key = CAST(? AS TEXT) AND value ";
    qmemcpy((char *)v29 + 68, " indexID = ? AND key = CAST(? AS TEXT) AND value ", 49);
    qmemcpy((char *)v29 + 20, "SELECT rowid, key, value FROM In", 32);
    *(_DWORD *)v29 = 2;
    *((_DWORD *)v29 + 1) = v28;
    *((_QWORD *)v29 + 1) = (char *)v29 + 20;
    *((_DWORD *)v29 + 4) = 4;
    *((_BYTE *)v29 + 117) = v10;
    *(_OWORD *)((char *)v29 + 118) = *(_OWORD *)" CAST(? AS TEXT) ORDER BY value";
    v30 = (char *)v29 + 149;
    *(_OWORD *)((char *)v29 + 133) = *(_OWORD *)") ORDER BY value";
    if ((_DWORD)v68)
    {
      if ((_DWORD)v68 == 1)
        *v30 = *v8;
      else
        memcpy((char *)v29 + 149, v8, v68);
    }
    v30[v68] = 59;
    this = (uint64_t)WebCore::SQLiteDatabase::prepareHeapStatementSlow(v3, *((const char **)v29 + 1), *((unsigned int *)v29 + 1) | ((unint64_t)((*((_DWORD *)v29 + 4) >> 2) & 1) << 32), &v70);
    if (*(_DWORD *)v29 == 2)
      this = WTF::StringImpl::destroy(v29, v31);
    else
      *(_DWORD *)v29 -= 2;
    if (v71[0] == -1)
      break;
    if (v71[0])
    {
      this = ((uint64_t (*)(WTF **, uint64_t *))off_1E335AE38[v71[0]])(&v74, &v70);
      break;
    }
    v32 = v70;
    v70 = 0;
    v33 = *(sqlite3_stmt ***)(v1 + 288);
    *(_QWORD *)(v1 + 288) = v32;
    if (!v33)
    {
      v38 = 0;
LABEL_61:
      ((void (*)(WTF **, uint64_t *))off_1E335AE38[v38])(&v74, &v70);
      goto LABEL_62;
    }
    sqlite3_finalize(v33[1]);
    v35 = (unsigned int *)*v33;
    *v33 = 0;
    if (v35)
    {
      if (!atomic_load(v35))
      {
        __break(0xC471u);
        JUMPOUT(0x1953ED528);
      }
      do
        v37 = __ldaxr(v35);
      while (__stlxr(v37 - 1, v35));
    }
    WTF::fastFree((WTF *)v33, v34);
    v38 = v71[0];
    if (v71[0] != -1)
      goto LABEL_61;
LABEL_62:
    v5 = *(sqlite3_stmt ***)(v1 + 288);
  }
  if (v3)
  {
    if (!atomic_load(v3))
    {
LABEL_121:
      __break(0xC471u);
      JUMPOUT(0x1953ED45CLL);
    }
    do
      v40 = __ldaxr(v3);
    while (__stlxr(v40 - 1, v3));
  }
  return this;
}

BOOL WebCore::IDBServer::SQLiteIDBCursor::fetch(WebCore::IDBServer::SQLiteIDBCursor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  sqlite3_stmt **v28;
  uint64_t v29;
  int NextRecord;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const WTF::String *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BOOL8 result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  sqlite3_stmt **v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[56];
  char v88;

  *(_QWORD *)&v87[48] = 0;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  memset(v87, 0, 42);
  v2 = *((_QWORD *)this + 27);
  v3 = *((_QWORD *)this + 28);
  if (v2)
  {
    if (v3 + 1 != v2)
      goto LABEL_20;
    LODWORD(v4) = *((_DWORD *)this + 60);
    goto LABEL_9;
  }
  v4 = *((unsigned int *)this + 60);
  if (!v3)
  {
    if ((_DWORD)v4)
    {
      v3 = 0;
      goto LABEL_20;
    }
LABEL_9:
    v5 = v4;
    v6 = ((unint64_t)v4 >> 2) + v4;
    if (v6 <= 0xF)
      v6 = 15;
    if (v6 >= 0x2222222)
    {
      __break(0xC471u);
      goto LABEL_122;
    }
    v7 = (WTF *)*((_QWORD *)this + 29);
    v8 = 120 * v6 + 120;
    v9 = WTF::fastMalloc((WTF *)(120 * v6 + 120));
    *((_DWORD *)this + 60) = (v8 & 0xFFFFFFF8) / 0x78;
    *((_QWORD *)this + 29) = v9;
    v11 = *((_QWORD *)this + 27);
    v10 = *((_QWORD *)this + 28);
    if (v11 <= v10)
    {
      WTF::VectorMover<false,WebCore::IDBServer::SQLiteIDBCursor::SQLiteCursorRecord>::move((uint64_t)v7 + 120 * v11, (uint64_t)v7 + 120 * v10, v9 + 120 * v11);
      if (!v7)
      {
LABEL_19:
        v3 = *((_QWORD *)this + 28);
        goto LABEL_20;
      }
    }
    else
    {
      WTF::VectorMover<false,WebCore::IDBServer::SQLiteIDBCursor::SQLiteCursorRecord>::move((uint64_t)v7, (uint64_t)v7 + 120 * v10, v9);
      v12 = *((_QWORD *)this + 27);
      v13 = v12 - v5 + *((unsigned int *)this + 60);
      WTF::VectorMover<false,WebCore::IDBServer::SQLiteIDBCursor::SQLiteCursorRecord>::move((uint64_t)v7 + 120 * v12, (uint64_t)v7 + 120 * v5, *((_QWORD *)this + 29) + 120 * v13);
      *((_QWORD *)this + 27) = v13;
      if (!v7)
        goto LABEL_19;
    }
    if (*((WTF **)this + 29) == v7)
    {
      *((_QWORD *)this + 29) = 0;
      *((_DWORD *)this + 60) = 0;
    }
    WTF::fastFree(v7, v14);
    goto LABEL_19;
  }
  if (v3 == v4 - 1)
    goto LABEL_9;
LABEL_20:
  v15 = *((_QWORD *)this + 29);
  v16 = v15 + 120 * v3;
  *(_BYTE *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 0;
  *(_DWORD *)(v16 + 24) = -1;
  v17 = DWORD2(v84);
  if (DWORD2(v84) != -1)
  {
    ((void (*)(char *, uint64_t, char *))off_1E335ADE0[DWORD2(v84)])(&v88, v16 + 8, (char *)&v83 + 8);
    *(_DWORD *)(v16 + 24) = v17;
  }
  v18 = v85;
  *(_BYTE *)(v16 + 40) = 0;
  v19 = (WTF::StringImpl *)(v16 + 40);
  *(_BYTE *)(v16 + 32) = v18;
  *(_DWORD *)(v16 + 56) = -1;
  v20 = DWORD2(v86);
  if (DWORD2(v86) != -1)
  {
    ((void (*)(char *))off_1E335ADE0[DWORD2(v86)])(&v88);
    *(_DWORD *)(v16 + 56) = v20;
  }
  v21 = *(_QWORD *)v87;
  *(_QWORD *)v87 = 0;
  *(_QWORD *)(v16 + 72) = 0;
  *(_QWORD *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 64) = v21;
  v22 = *(_QWORD *)&v87[8];
  *(_QWORD *)&v87[8] = 0;
  *(_QWORD *)(v16 + 72) = v22;
  LODWORD(v22) = *(_DWORD *)&v87[16];
  *(_DWORD *)&v87[16] = 0;
  *(_DWORD *)(v16 + 80) = v22;
  LODWORD(v22) = *(_DWORD *)&v87[20];
  *(_DWORD *)&v87[20] = 0;
  *(_DWORD *)(v16 + 84) = v22;
  *(_QWORD *)(v16 + 88) = 0;
  *(_QWORD *)(v16 + 96) = 0;
  v23 = *(_QWORD *)&v87[24];
  *(_QWORD *)&v87[24] = 0;
  *(_QWORD *)(v16 + 88) = v23;
  LODWORD(v23) = *(_DWORD *)&v87[32];
  *(_DWORD *)&v87[32] = 0;
  *(_DWORD *)(v16 + 96) = v23;
  LODWORD(v23) = *(_DWORD *)&v87[36];
  *(_DWORD *)&v87[36] = 0;
  *(_DWORD *)(v16 + 100) = v23;
  *(_OWORD *)(v15 + 120 * v3 + 104) = *(_OWORD *)&v87[40];
  v24 = *((_QWORD *)this + 28);
  if (v24 == *((unsigned int *)this + 60) - 1)
    v25 = 0;
  else
    v25 = v24 + 1;
  *((_QWORD *)this + 28) = v25;
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v87, v19);
  if (DWORD2(v86) != -1)
    ((void (*)(char *, char *))off_1E335ACA8[DWORD2(v86)])(&v88, (char *)&v85 + 8);
  DWORD2(v86) = -1;
  if (DWORD2(v84) != -1)
    ((void (*)(char *, char *))off_1E335ACA8[DWORD2(v84)])(&v88, (char *)&v83 + 8);
  if ((*((unsigned __int8 *)this + 40) | 2) == 3)
  {
    for (i = *((_QWORD *)this + 28); *((_QWORD *)this + 27) != i; i = *((_QWORD *)this + 28))
    {
      if (!i)
        i = *((unsigned int *)this + 60);
      v27 = *((_QWORD *)this + 29);
      if (*((_BYTE *)this + 312))
      {
        WebCore::IDBServer::SQLiteIDBCursor::resetAndRebindPreIndexStatementIfNecessary((uint64_t)this);
        *((_BYTE *)this + 312) = 0;
        v28 = (sqlite3_stmt **)*((_QWORD *)this + 37);
        if (!v28)
        {
          if (!WebCore::IDBServer::SQLiteIDBCursor::establishStatement(this))
            goto LABEL_41;
          v28 = (sqlite3_stmt **)*((_QWORD *)this + 37);
        }
        if (!WebCore::SQLiteStatement::reset(v28))
          WebCore::IDBServer::SQLiteIDBCursor::bindArguments(this);
      }
LABEL_41:
      v29 = v27 + 120 * i - 120;
      do
        NextRecord = WebCore::IDBServer::SQLiteIDBCursor::internalFetchNextRecord((sqlite3_stmt ***)this, v29);
      while (NextRecord == 2);
      if (NextRecord)
        return 0;
      v31 = *((_QWORD *)this + 28);
      if (*((_QWORD *)this + 27) == v31)
      {
        __break(0xC471u);
        JUMPOUT(0x1953EDE04);
      }
      if (!v31)
        v31 = *((unsigned int *)this + 60);
      v32 = *((_QWORD *)this + 29) + 120 * v31;
      v33 = WebCore::IDBKeyData::size((WebCore::IDBKeyData *)(v32 - 120));
      v34 = WebCore::IDBKeyData::size((WebCore::IDBKeyData *)(v32 - 88));
      v36 = *(unsigned int *)(v32 - 36);
      if ((_DWORD)v36)
      {
        v37 = 0;
        v38 = *(uint64_t **)(v32 - 48);
        v39 = 8 * v36;
        do
        {
          v40 = *v38;
          if (*v38)
            LODWORD(v40) = *(_DWORD *)(v40 + 4) << ((*(_DWORD *)(v40 + 16) & 4) == 0);
          v37 += v40;
          ++v38;
          v39 -= 8;
        }
        while (v39);
      }
      else
      {
        v37 = 0;
      }
      v41 = *(unsigned int *)(v32 - 20);
      if ((_DWORD)v41)
      {
        v42 = *(uint64_t **)(v32 - 32);
        v43 = 8 * v41;
        do
        {
          v44 = *v42;
          if (*v42)
            LODWORD(v44) = *(_DWORD *)(v44 + 4) << ((*(_DWORD *)(v44 + 16) & 4) == 0);
          v37 += v44;
          ++v42;
          v43 -= 8;
        }
        while (v43);
      }
      v45 = *(_QWORD *)(v32 - 56);
      if (v45)
        v45 = *(unsigned int *)(v45 + 20);
      *((_QWORD *)this + 31) += v34 + v33 + v37 + v45;
      v46 = *((_QWORD *)this + 28);
      if (*((_QWORD *)this + 27) == v46)
      {
        __break(0xC471u);
        JUMPOUT(0x1953EDE24);
      }
      if (!v46)
        v46 = *((unsigned int *)this + 60);
      v47 = WebCore::IDBKeyData::compare((WebCore::IDBServer::SQLiteIDBCursor *)((char *)this + 256), (const WebCore::IDBKeyData *)(*((_QWORD *)this + 29) + 120 * v46 - 120), v35);
      result = v47 != 0;
      if (v47)
        return result;
      v49 = *((_QWORD *)this + 28);
      if (*((_QWORD *)this + 27) == v49)
      {
        __break(0xC471u);
        JUMPOUT(0x1953EDE44);
      }
      if (!v49)
        v49 = *((unsigned int *)this + 60);
      v50 = v49 - 1;
      v51 = *((_QWORD *)this + 29);
      if (*(_BYTE *)(v51 + 120 * v50 + 104))
        return result;
      v52 = v51 + 120 * v50;
      v53 = WebCore::IDBKeyData::size((WebCore::IDBKeyData *)v52);
      v54 = WebCore::IDBKeyData::size((WebCore::IDBKeyData *)(v52 + 32));
      v55 = *(unsigned int *)(v52 + 84);
      if ((_DWORD)v55)
      {
        v56 = 0;
        v57 = *(uint64_t **)(v52 + 72);
        v58 = 8 * v55;
        do
        {
          v59 = *v57;
          if (*v57)
            LODWORD(v59) = *(_DWORD *)(v59 + 4) << ((*(_DWORD *)(v59 + 16) & 4) == 0);
          v56 += v59;
          ++v57;
          v58 -= 8;
        }
        while (v58);
      }
      else
      {
        v56 = 0;
      }
      v60 = *(unsigned int *)(v52 + 100);
      if ((_DWORD)v60)
      {
        v61 = *(uint64_t **)(v52 + 88);
        v62 = 8 * v60;
        do
        {
          v63 = *v61;
          if (*v61)
            LODWORD(v63) = *(_DWORD *)(v63 + 4) << ((*(_DWORD *)(v63 + 16) & 4) == 0);
          v56 += v63;
          ++v61;
          v62 -= 8;
        }
        while (v62);
      }
      v64 = *(_QWORD *)(v52 + 64);
      if (v64)
        v64 = *(unsigned int *)(v64 + 20);
      *((_QWORD *)this + 31) -= v54 + v53 + v56 + v64;
    }
    __break(0xC471u);
LABEL_122:
    JUMPOUT(0x1953EDC60);
  }
  v65 = *((_QWORD *)this + 28);
  if (*((_QWORD *)this + 27) == v65)
  {
    __break(0xC471u);
    JUMPOUT(0x1953EDE64);
  }
  if (!v65)
    v65 = *((unsigned int *)this + 60);
  v66 = *((_QWORD *)this + 29) + 120 * v65 - 120;
  if (*((_BYTE *)this + 312))
  {
    WebCore::IDBServer::SQLiteIDBCursor::resetAndRebindPreIndexStatementIfNecessary((uint64_t)this);
    *((_BYTE *)this + 312) = 0;
    v67 = (sqlite3_stmt **)*((_QWORD *)this + 37);
    if (!v67)
    {
      if (!WebCore::IDBServer::SQLiteIDBCursor::establishStatement(this))
        goto LABEL_94;
      v67 = (sqlite3_stmt **)*((_QWORD *)this + 37);
    }
    if (!WebCore::SQLiteStatement::reset(v67))
      WebCore::IDBServer::SQLiteIDBCursor::bindArguments(this);
  }
  do
LABEL_94:
    v68 = WebCore::IDBServer::SQLiteIDBCursor::internalFetchNextRecord((sqlite3_stmt ***)this, v66);
  while (v68 == 2);
  if (v68)
    return 0;
  v69 = *((_QWORD *)this + 28);
  if (*((_QWORD *)this + 27) == v69)
  {
    __break(0xC471u);
    JUMPOUT(0x1953EDE84);
  }
  if (!v69)
    v69 = *((unsigned int *)this + 60);
  v70 = *((_QWORD *)this + 29) + 120 * v69;
  v71 = WebCore::IDBKeyData::size((WebCore::IDBKeyData *)(v70 - 120));
  v72 = WebCore::IDBKeyData::size((WebCore::IDBKeyData *)(v70 - 88));
  v73 = *(unsigned int *)(v70 - 36);
  if ((_DWORD)v73)
  {
    v74 = 0;
    v75 = *(uint64_t **)(v70 - 48);
    v76 = 8 * v73;
    do
    {
      v77 = *v75;
      if (*v75)
        LODWORD(v77) = *(_DWORD *)(v77 + 4) << ((*(_DWORD *)(v77 + 16) & 4) == 0);
      v74 += v77;
      ++v75;
      v76 -= 8;
    }
    while (v76);
  }
  else
  {
    v74 = 0;
  }
  v78 = *(unsigned int *)(v70 - 20);
  if ((_DWORD)v78)
  {
    v79 = *(uint64_t **)(v70 - 32);
    v80 = 8 * v78;
    do
    {
      v81 = *v79;
      if (*v79)
        LODWORD(v81) = *(_DWORD *)(v81 + 4) << ((*(_DWORD *)(v81 + 16) & 4) == 0);
      v74 += v81;
      ++v79;
      v80 -= 8;
    }
    while (v80);
  }
  v82 = *(_QWORD *)(v70 - 56);
  if (v82)
    v82 = *(unsigned int *)(v82 + 20);
  *((_QWORD *)this + 31) += v72 + v71 + v74 + v82;
  return 1;
}

uint64_t WebCore::IDBServer::SQLiteIDBCursor::internalFetchNextRecord(sqlite3_stmt ***a1, uint64_t a2)
{
  uint64_t *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  sqlite3_stmt **v8;
  sqlite3_stmt **v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  sqlite3_int64 v13;
  const UInt8 *v14;
  const UInt8 *v15;
  int v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned int v27;
  CFIndex v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  unsigned int v42;
  WTF *v43;
  WTF *v44;
  sqlite3_stmt **v45;
  int v46;
  sqlite3_stmt **v47;
  sqlite3_stmt **v48;
  void *v49;
  unsigned int *v50;
  unsigned int v52;
  sqlite3_stmt **v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  unsigned int v61;
  WTF *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF *v68;
  WTF *v69;
  unsigned int *v70;
  char v71;
  unsigned __int8 v72;
  WTF::StringImpl *v73;
  WTF *v74;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  _OWORD v80[3];
  __int128 v81;
  _BYTE v82[56];

  memset(v80, 0, 40);
  v4 = (uint64_t *)(a2 + 64);
  WebCore::IDBValue::operator=((uint64_t *)(a2 + 64), (uint64_t *)v80);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v80, v5);
  v6 = *(unsigned int **)(*a1)[8];
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = a1[36];
  if (!v8 || WebCore::SQLiteStatement::step(v8) != 100 || (v9 = a1[36]) == 0)
  {
    v10 = WebCore::SQLiteStatement::step(a1[37]);
    if (v10 != 100)
    {
      if (v10 == 101)
      {
        *(_QWORD *)&v82[48] = 0;
        memset(v80, 0, sizeof(v80));
        v81 = 0u;
        memset(v82, 0, 42);
        *(_BYTE *)a2 = 0;
        v11 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v11 != -1)
        {
          v12 = (_QWORD *)(a2 + 8);
          if (!(_DWORD)v11)
          {
            *v12 = 0;
            goto LABEL_31;
          }
          ((void (*)(WTF **, _QWORD *))off_1E335ACA8[v11])(&v78, v12);
        }
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 24) = 0;
LABEL_31:
        *(_BYTE *)(a2 + 32) = 0;
        v21 = *(unsigned int *)(a2 + 56);
        if ((_DWORD)v21 != -1)
        {
          v22 = (_QWORD *)(a2 + 40);
          if (!(_DWORD)v21)
          {
            *v22 = 0;
LABEL_36:
            WebCore::IDBValue::operator=(v4, (uint64_t *)v82);
            *(_OWORD *)(a2 + 104) = *(_OWORD *)&v82[40];
            WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v82, v23);
            if (DWORD2(v81) != -1)
              ((void (*)(WTF **, char *))off_1E335ACA8[DWORD2(v81)])(&v78, (char *)&v80[2] + 8);
            v24 = (_BYTE *)(a2 + 104);
            DWORD2(v81) = -1;
            if (DWORD2(v80[1]) != -1)
              ((void (*)(WTF **, char *))off_1E335ACA8[DWORD2(v80[1])])(&v78, (char *)v80 + 8);
            v25 = 0;
            *v24 = 1;
            goto LABEL_44;
          }
          ((void (*)(WTF **, _QWORD *))off_1E335ACA8[v21])(&v78, v22);
        }
        *(_QWORD *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 56) = 0;
        goto LABEL_36;
      }
LABEL_43:
      WebCore::IDBServer::SQLiteIDBCursor::markAsErrored(a2);
      v25 = 1;
      goto LABEL_44;
    }
    v9 = a1[37];
  }
  if ((sqlite3_stmt_busy(v9[1]) || WebCore::SQLiteStatement::step(v9) == 100)
    && sqlite3_data_count(v9[1]) >= 1)
  {
    v13 = sqlite3_column_int64(v9[1], 0);
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)(a2 + 112) = v13;
  if (!sqlite3_stmt_busy(v9[1]) && WebCore::SQLiteStatement::step(v9) != 100)
    goto LABEL_43;
  if (sqlite3_data_count(v9[1]) < 2)
    goto LABEL_43;
  v14 = (const UInt8 *)sqlite3_column_blob(v9[1], 1);
  if (!v14)
    goto LABEL_43;
  v15 = v14;
  v16 = sqlite3_column_bytes(v9[1], 1);
  v17 = v16 >= 1 ? v16 : 0;
  if (v16 < 1)
    goto LABEL_43;
  if (*v15)
  {
    if (*v15 != 98)
      goto LABEL_43;
    v18 = WTF::fastMalloc((WTF *)0x140);
    v19 = WebCore::KeyedDecoderCF::KeyedDecoderCF(v18, v15, v17);
    v20 = WebCore::IDBKeyData::decode(v19, a2);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if ((v20 & 1) == 0)
      goto LABEL_43;
  }
  else
  {
    *(_QWORD *)&v80[0] = v15 + 1;
    *((_QWORD *)&v80[0] + 1) = v17 - 1;
    if ((WebCore::decodeKey((unsigned __int8 **)v80, a2) & 1) == 0 || *((_QWORD *)&v80[0] + 1))
      goto LABEL_43;
  }
  WebCore::SQLiteStatement::columnBlob(v9, 2, (uint64_t)&v78);
  if (a1[4] == (sqlite3_stmt **)-1)
  {
    *(_BYTE *)(a2 + 32) = *(_BYTE *)a2;
    v34 = *(unsigned int *)(a2 + 56);
    v35 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v34 == -1)
    {
      if ((_DWORD)v35 == -1)
        goto LABEL_59;
    }
    else if ((_DWORD)v35 == -1)
    {
      ((void (*)(_OWORD *, uint64_t))off_1E335ACA8[v34])(v80, a2 + 40);
      *(_DWORD *)(a2 + 56) = -1;
      goto LABEL_59;
    }
    *(_QWORD *)&v80[0] = a2 + 40;
    ((void (*)(_OWORD *))off_1E335AD98[v35])(v80);
LABEL_59:
    v76 = 0;
    v77 = 0;
    v74 = 0;
    v75 = 0;
    WebCore::IDBServer::SQLiteIDBBackingStore::getBlobRecordsForObjectStoreRecord((uint64_t)&v71, (uint64_t)(*a1)[7], *(_QWORD *)(a2 + 112), (uint64_t)&v76, (uint64_t)&v74);
    v37 = v72;
    if (v72)
    {
      WebCore::IDBServer::SQLiteIDBCursor::markAsErrored(a2);
    }
    else if (!*((_BYTE *)a1 + 41))
    {
      v38 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = v78;
      v39 = v79;
      v78 = 0;
      v79 = 0;
      *(_QWORD *)(v38 + 16) = v39;
      v70 = (unsigned int *)v38;
      WebCore::IDBValue::IDBValue((uint64_t)v80, &v70, (uint64_t)&v76, (uint64_t)&v74);
      WebCore::IDBValue::operator=(v4, (uint64_t *)v80);
      WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v80, v40);
      v70 = 0;
      do
      {
        v41 = __ldaxr((unsigned int *)v38);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, (unsigned int *)v38));
      if (!v42)
      {
        atomic_store(1u, (unsigned int *)v38);
        v68 = *(WTF **)(v38 + 8);
        if (v68)
        {
          *(_QWORD *)(v38 + 8) = 0;
          *(_DWORD *)(v38 + 16) = 0;
          WTF::fastFree(v68, v36);
        }
        WTF::fastFree((WTF *)v38, v36);
      }
    }
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
        WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v36);
      else
        *(_DWORD *)v73 -= 2;
    }
    if (HIDWORD(v75))
    {
      v62 = v74;
      v63 = 8 * HIDWORD(v75);
      do
      {
        v64 = *(WTF::StringImpl **)v62;
        *(_QWORD *)v62 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v36);
          else
            *(_DWORD *)v64 -= 2;
        }
        v62 = (WTF *)((char *)v62 + 8);
        v63 -= 8;
      }
      while (v63);
    }
    v43 = v74;
    if (v74)
    {
      v74 = 0;
      LODWORD(v75) = 0;
      WTF::fastFree(v43, v36);
    }
    if (HIDWORD(v77))
    {
      v65 = v76;
      v66 = 8 * HIDWORD(v77);
      do
      {
        v67 = *(WTF::StringImpl **)v65;
        *(_QWORD *)v65 = 0;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2)
            WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v36);
          else
            *(_DWORD *)v67 -= 2;
        }
        v65 = (WTF *)((char *)v65 + 8);
        v66 -= 8;
      }
      while (v66);
    }
    v44 = v76;
    if (v76)
    {
      v76 = 0;
      LODWORD(v77) = 0;
      WTF::fastFree(v44, v36);
      if (v37)
        goto LABEL_95;
    }
    else if (v37)
    {
LABEL_95:
      v25 = 1;
      goto LABEL_96;
    }
LABEL_74:
    v25 = 0;
    goto LABEL_96;
  }
  v29 = HIDWORD(v79);
  if (!HIDWORD(v79))
    goto LABEL_94;
  v30 = v78;
  if (*(_BYTE *)v78)
  {
    if (*(_BYTE *)v78 != 98)
      goto LABEL_94;
    v31 = WTF::fastMalloc((WTF *)0x140);
    v32 = WebCore::KeyedDecoderCF::KeyedDecoderCF(v31, (const UInt8 *)v30, v29);
    v33 = WebCore::IDBKeyData::decode(v32, a2 + 32);
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    if ((v33 & 1) == 0)
      goto LABEL_94;
  }
  else
  {
    *(_QWORD *)&v80[0] = (char *)v78 + 1;
    *((_QWORD *)&v80[0] + 1) = HIDWORD(v79) - 1;
    if ((WebCore::decodeKey((unsigned __int8 **)v80, a2 + 32) & 1) == 0 || *((_QWORD *)&v80[0] + 1))
      goto LABEL_94;
  }
  v45 = a1[38];
  if (v45 && !WebCore::SQLiteStatement::reset(v45))
    goto LABEL_91;
  WebCore::SQLiteDatabase::prepareHeapStatement(v6, "SELECT value FROM Records WHERE key = CAST(? AS TEXT) and objectStoreID = ?;",
    77,
    v80);
  v46 = DWORD2(v80[0]);
  if (DWORD2(v80[0]))
  {
LABEL_85:
    if (v46 == -1)
      goto LABEL_91;
    goto LABEL_90;
  }
  v47 = *(sqlite3_stmt ***)&v80[0];
  *(_QWORD *)&v80[0] = 0;
  v48 = a1[38];
  a1[38] = v47;
  if (v48)
  {
    sqlite3_finalize(v48[1]);
    v50 = (unsigned int *)*v48;
    *v48 = 0;
    if (v50)
    {
      if (!atomic_load(v50))
      {
        __break(0xC471u);
        JUMPOUT(0x1953EE654);
      }
      do
        v52 = __ldaxr(v50);
      while (__stlxr(v52 - 1, v50));
    }
    WTF::fastFree((WTF *)v48, v49);
    v46 = DWORD2(v80[0]);
    goto LABEL_85;
  }
  v46 = 0;
LABEL_90:
  ((void (*)(WTF **, _OWORD *))off_1E335AE38[v46])(&v76, v80);
LABEL_91:
  v53 = a1[38];
  if (!v53
    || sqlite3_bind_blob(v53[1], 1, v78, SHIDWORD(v79), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL)
    || sqlite3_bind_int64(a1[38][1], 2, (sqlite3_int64)a1[3]))
  {
    goto LABEL_94;
  }
  v54 = WebCore::SQLiteStatement::step(a1[38]);
  if (v54 != 101)
  {
    if (v54 == 100)
    {
      WebCore::SQLiteStatement::columnBlob(a1[38], 0, (uint64_t)&v76);
      v55 = WTF::fastMalloc((WTF *)0x18);
      v56 = v55;
      *(_DWORD *)v55 = 1;
      *(_QWORD *)(v55 + 8) = v76;
      v57 = v77;
      v76 = 0;
      v77 = 0;
      *(_QWORD *)(v55 + 16) = v57;
      do
        v58 = __ldaxr((unsigned int *)v55);
      while (__stlxr(v58 + 1, (unsigned int *)v55));
      *(_QWORD *)&v80[0] = v55;
      memset((char *)v80 + 8, 0, 32);
      WebCore::IDBValue::operator=(v4, (uint64_t *)v80);
      WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v80, v59);
      do
      {
        v60 = __ldaxr((unsigned int *)v56);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, (unsigned int *)v56));
      if (!v61)
      {
        atomic_store(1u, (unsigned int *)v56);
        v69 = *(WTF **)(v56 + 8);
        if (v69)
        {
          *(_QWORD *)(v56 + 8) = 0;
          *(_DWORD *)(v56 + 16) = 0;
          WTF::fastFree(v69, v36);
        }
        WTF::fastFree((WTF *)v56, v36);
      }
      if (v76)
        WTF::fastFree(v76, v36);
      goto LABEL_74;
    }
LABEL_94:
    WebCore::IDBServer::SQLiteIDBCursor::markAsErrored(a2);
    goto LABEL_95;
  }
  v25 = 2;
LABEL_96:
  if (v78)
    WTF::fastFree(v78, v36);
LABEL_44:
  if (v6)
  {
    if (!atomic_load(v6))
    {
      __break(0xC471u);
      JUMPOUT(0x1953EE444);
    }
    do
      v27 = __ldaxr(v6);
    while (__stlxr(v27 - 1, v6));
  }
  return v25;
}

void WebCore::IDBServer::SQLiteIDBCursor::markAsErrored(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;
  char v13;

  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  *(_BYTE *)a1 = 0;
  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
  {
    v3 = (_QWORD *)(a1 + 8);
    if (!(_DWORD)v2)
    {
      *v3 = 0;
      goto LABEL_6;
    }
    ((void (*)(char *, _QWORD *))off_1E335ACA8[v2])(&v13, v3);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
LABEL_6:
  *(_BYTE *)(a1 + 32) = 0;
  v4 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v4 != -1)
  {
    v5 = (_QWORD *)(a1 + 40);
    if (!(_DWORD)v4)
    {
      *v5 = 0;
      goto LABEL_11;
    }
    ((void (*)(char *, _QWORD *))off_1E335ACA8[v4])(&v13, v5);
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = 0;
LABEL_11:
  WebCore::IDBValue::operator=((uint64_t *)(a1 + 64), (uint64_t *)v11);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v11, v6);
  if (DWORD2(v10) != -1)
    ((void (*)(char *, char *))off_1E335ACA8[DWORD2(v10)])(&v13, (char *)&v9 + 8);
  DWORD2(v10) = -1;
  if (DWORD2(v8) != -1)
    ((void (*)(char *, char *))off_1E335ACA8[DWORD2(v8)])(&v13, (char *)&v7 + 8);
  *(_WORD *)(a1 + 104) = 257;
  *(_QWORD *)(a1 + 112) = 0;
}

void WebCore::IDBServer::SQLiteIDBTransaction::~SQLiteIDBTransaction(WebCore::IDBServer::SQLiteIDBTransaction *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::SQLiteDatabaseTracker *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::IDBServer::SQLiteIDBCursor **v15;
  WebCore::IDBServer::SQLiteIDBCursor *v16;
  WTF *v17;
  void *v18;
  WebCore::SQLiteTransaction *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl **v26;
  WTF::StringImpl **v27;

  v3 = *((_QWORD *)this + 8);
  if (v3 && *(_BYTE *)(v3 + 8))
  {
    v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::executeCommand(*(_QWORD *)v3, "ROLLBACK", 9);
    *(_BYTE *)(v3 + 8) = 0;
    *(_BYTE *)(*(_QWORD *)v3 + 20) = 0;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
  }
  WebCore::IDBServer::SQLiteIDBTransaction::clearCursors(this, a2);
  v6 = (WTF *)*((_QWORD *)this + 13);
  if (v6)
  {
    v7 = *((unsigned int *)this + 28);
    if ((_DWORD)v7)
    {
      v8 = (WTF::StringImpl **)*((_QWORD *)this + 13);
      do
      {
        v9 = *v8;
        *v8 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v5);
          else
            *(_DWORD *)v9 -= 2;
        }
        ++v8;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree(v6, v5);
  }
  v10 = *((unsigned int *)this + 25);
  if ((_DWORD)v10)
  {
    v22 = 16 * v10;
    v23 = (WTF::StringImpl **)(*((_QWORD *)this + 11) + 8);
    do
    {
      v24 = *v23;
      *v23 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
        {
          v26 = v23;
          WTF::StringImpl::destroy(v24, v5);
          v23 = v26;
        }
        else
        {
          *(_DWORD *)v24 -= 2;
        }
      }
      v25 = *(v23 - 1);
      *(v23 - 1) = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          v27 = v23;
          WTF::StringImpl::destroy(v25, v5);
          v23 = v27;
        }
        else
        {
          *(_DWORD *)v25 -= 2;
        }
      }
      v23 += 2;
      v22 -= 16;
    }
    while (v22);
  }
  v11 = (WTF *)*((_QWORD *)this + 11);
  if (v11)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v11, v5);
  }
  v12 = *((_QWORD *)this + 10);
  if (v12)
    WTF::fastFree((WTF *)(v12 - 16), v5);
  v13 = *((_QWORD *)this + 9);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v14)
    {
      v15 = (WebCore::IDBServer::SQLiteIDBCursor **)(v13 + 16);
      do
      {
        if (*(v15 - 2) != (WebCore::IDBServer::SQLiteIDBCursor *)-1)
        {
          v16 = *v15;
          *v15 = 0;
          if (v16)
          {
            WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor(v16, v5);
            WTF::fastFree(v17, v18);
          }
        }
        v15 += 3;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WTF *)(v13 - 16), v5);
  }
  v19 = (WebCore::SQLiteTransaction *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v19)
  {
    WebCore::SQLiteTransaction::~SQLiteTransaction(v19);
    WTF::fastFree(v20, v21);
  }
  WebCore::IDBTransactionInfo::~IDBTransactionInfo(this, v5);
}

void WebCore::IDBServer::SQLiteIDBTransaction::clearCursors(WebCore::IDBServer::SQLiteIDBTransaction *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v24;
  uint64_t v26;
  WebCore::IDBServer::SQLiteIDBCursor **v27;
  WebCore::IDBServer::SQLiteIDBCursor *v28;
  WTF *v29;
  void *v30;

  v3 = *((_QWORD *)this + 9);
  if (!v3)
  {
    v6 = 0;
    LODWORD(v4) = 0;
LABEL_14:
    v5 = v3 + 24 * v4;
    goto LABEL_15;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = v3 + 24 * v4;
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = v3 + 24 * v4;
    goto LABEL_14;
  }
  v6 = *((_QWORD *)this + 9);
  if ((_DWORD)v4)
  {
    v7 = 24 * v4;
    v6 = *((_QWORD *)this + 9);
    while (*(_OWORD *)v6 == 0 || *(_QWORD *)v6 == -1)
    {
      v6 += 24;
      v7 -= 24;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_15:
  if (v3)
    v9 = v3 + 24 * *(unsigned int *)(v3 - 4);
  else
    v9 = 0;
  if (v9 != v6)
  {
    if (*(_QWORD *)(*((_QWORD *)this + 7) + 568))
    {
      do
      {
        v10 = *((_QWORD *)this + 7);
        v11 = *(_QWORD *)(v10 + 568);
        if (v11)
        {
          v12 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*(_QWORD *)(v10 + 568), *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v6 + 16) + 16));
          if (v12 && v12 != (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4)))
          {
            v14 = v12;
            v15 = (uint64_t *)(v10 + 568);
            *v14 = -1;
            ++*(_DWORD *)(*(_QWORD *)(v10 + 568) - 16);
            v16 = *(_QWORD *)(v10 + 568);
            v17 = v16 ? *(_DWORD *)(v16 - 12) - 1 : -1;
            *(_DWORD *)(v16 - 12) = v17;
            v18 = *v15;
            if (*v15)
            {
              v19 = 6 * *(_DWORD *)(v18 - 12);
              v20 = *(_DWORD *)(v18 - 4);
              if (v19 < v20 && v20 >= 9)
                WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WebCore::IDBServer::UniqueIDBDatabaseTransaction *,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v15, v20 >> 1);
            }
          }
        }
        v22 = v6 + 24;
        v6 = v5;
        if (v22 != v5)
        {
          v6 = v22;
          while (*(_OWORD *)v6 == 0 || *(_QWORD *)v6 == -1)
          {
            v6 += 24;
            if (v6 == v5)
            {
              v6 = v5;
              break;
            }
          }
        }
      }
      while (v6 != v9);
      v3 = *((_QWORD *)this + 9);
    }
    else
    {
      do
      {
        v24 = v6 + 24;
        v6 = v5;
        if (v24 != v5)
        {
          v6 = v24;
          while (*(_OWORD *)v6 == 0 || *(_QWORD *)v6 == -1)
          {
            v6 += 24;
            if (v6 == v5)
            {
              v6 = v5;
              break;
            }
          }
        }
      }
      while (v6 != v9);
    }
  }
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    v26 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v26)
    {
      v27 = (WebCore::IDBServer::SQLiteIDBCursor **)(v3 + 16);
      do
      {
        if (*(v27 - 2) != (WebCore::IDBServer::SQLiteIDBCursor *)-1)
        {
          v28 = *v27;
          *v27 = 0;
          if (v28)
          {
            WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor(v28, a2);
            WTF::fastFree(v29, v30);
          }
        }
        v27 += 3;
        --v26;
      }
      while (v26);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::UniqueIDBDatabase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char v17;

  *(_QWORD *)a1 = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
    goto LABEL_17;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = a2;
  v8 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  if (!v8)
    goto LABEL_17;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
LABEL_17:
    do
      v11 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v11 + 1, (unsigned int *)v5));
  }
  *(_QWORD *)(a1 + 8) = v5;
  v12 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v12 += 2;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = v12;
  *(_DWORD *)(a1 + 48) = -1;
  v13 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v13 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_1[v13])(&v16);
    *(_DWORD *)(a1 + 48) = v13;
  }
  *(_BYTE *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  v14 = *(unsigned int *)(a3 + 64);
  if ((_DWORD)v14 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_1[v14])(&v17);
    *(_DWORD *)(a1 + 80) = v14;
  }
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a3 + 72);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  return a1;
}

void WebCore::IDBServer::UniqueIDBDatabase::~UniqueIDBDatabase(WebCore::IDBServer::UniqueIDBDatabase *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction **v7;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v8;
  WTF *v9;
  void *v10;
  void *v11;
  WTF *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::IDBObjectStoreInfo *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WebCore::IDBObjectStoreInfo *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v24;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v25;
  WTF *v26;
  WTF *v27;
  void *v28;
  WTF *v29;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::IDBServer::ServerOpenDBRequest *v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  WTF *v37;
  WebCore::IDBServer::ServerOpenDBRequest *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  WTF *v49;
  void *v50;
  WTF *v51;
  void *v52;
  WTF *v53;
  void *v54;
  char v55;
  char v56;

  if (*((_QWORD *)this + 22))
  {
    __break(0xC471u);
    JUMPOUT(0x1953EF0F8);
  }
  v3 = *((_QWORD *)this + 31);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 30);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 29);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction **)(v5 + 16);
      do
      {
        if (*(v7 - 2) != (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)-1)
        {
          v8 = *v7;
          *v7 = 0;
          if (v8)
          {
            if (*((_DWORD *)v8 + 2) == 1)
            {
              WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v8, (WTF::StringImpl *)a2);
              WTF::fastFree(v9, v10);
            }
            else
            {
              --*((_DWORD *)v8 + 2);
            }
          }
        }
        v7 += 3;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  WTF::Deque<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,0ul>::destroyAll((WebCore::IDBServer::UniqueIDBDatabase *)((char *)this + 200), (WTF::StringImpl *)a2);
  v12 = (WTF *)*((_QWORD *)this + 27);
  if (v12)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v12, v11);
  }
  v13 = (WTF::StringImpl **)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v13)
  {
    v14 = v13[4];
    if (v14)
    {
      v15 = *((unsigned int *)v14 - 1);
      if ((_DWORD)v15)
      {
        v16 = (WTF::StringImpl *)((char *)v14 + 8);
        do
        {
          if (*((_QWORD *)v16 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v16, (WTF::StringImpl *)v11);
          v16 = (WebCore::IDBObjectStoreInfo *)((char *)v16 + 72);
          --v15;
        }
        while (v15);
      }
      WTF::fastFree((WTF::StringImpl *)((char *)v14 - 16), v11);
    }
    v17 = *v13;
    *v13 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v13, v11);
  }
  v18 = (WTF::StringImpl **)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v18)
  {
    v19 = v18[4];
    if (v19)
    {
      v20 = *((unsigned int *)v19 - 1);
      if ((_DWORD)v20)
      {
        v21 = (WTF::StringImpl *)((char *)v19 + 8);
        do
        {
          if (*((_QWORD *)v21 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v21, (WTF::StringImpl *)v11);
          v21 = (WebCore::IDBObjectStoreInfo *)((char *)v21 + 72);
          --v20;
        }
        while (v20);
      }
      WTF::fastFree((WTF::StringImpl *)((char *)v19 - 16), v11);
    }
    v22 = *v18;
    *v18 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v22 -= 2;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v18, v11);
  }
  v23 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 2) == 1)
    {
      WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v24, (WTF::StringImpl *)v11);
      WTF::fastFree(v49, v50);
    }
    else
    {
      --*((_DWORD *)v24 + 2);
    }
  }
  v25 = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
    {
      WebCore::IDBServer::UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection(v25);
      WTF::fastFree(v51, v52);
    }
    else
    {
      --*(_DWORD *)v25;
    }
  }
  v26 = (WTF *)*((_QWORD *)this + 18);
  while (v26)
  {
    v29 = v26;
    v26 = (WTF *)*((_QWORD *)v26 + 2);
    v30 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)v29;
    *(_QWORD *)v29 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
      {
        WebCore::IDBServer::UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection(v30);
        WTF::fastFree(v27, v28);
      }
      else
      {
        --*(_DWORD *)v30;
      }
    }
    WTF::fastFree(v29, v11);
  }
  v31 = *((_QWORD *)this + 17);
  if (v31)
    WTF::fastFree((WTF *)(v31 - 16), v11);
  v32 = *((_QWORD *)this + 16);
  if (v32)
    WTF::fastFree((WTF *)(v32 - 16), v11);
  v33 = (WebCore::IDBServer::ServerOpenDBRequest *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
    {
      WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest(v33, v11);
      WTF::fastFree(v53, v54);
    }
    else
    {
      --*(_DWORD *)v33;
    }
  }
  v34 = (WTF *)*((_QWORD *)this + 13);
  while (v34)
  {
    v37 = v34;
    v34 = (WTF *)*((_QWORD *)v34 + 2);
    v38 = *(WebCore::IDBServer::ServerOpenDBRequest **)v37;
    *(_QWORD *)v37 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 1)
      {
        WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest(v38, v11);
        WTF::fastFree(v35, v36);
      }
      else
      {
        --*(_DWORD *)v38;
      }
    }
    WTF::fastFree(v37, v11);
  }
  v39 = *((_QWORD *)this + 12);
  if (v39)
    WTF::fastFree((WTF *)(v39 - 16), v11);
  v40 = *((unsigned int *)this + 20);
  if ((_DWORD)v40 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_1[v40])(&v55, (char *)this + 56);
  *((_DWORD *)this + 20) = -1;
  v41 = *((unsigned int *)this + 12);
  if ((_DWORD)v41 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_1[v41])(&v56, (char *)this + 24);
  *((_DWORD *)this + 12) = -1;
  v42 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v43)
  {
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v43);
      WTF::fastFree((WTF *)v43, v11);
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v46 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v46)
    {
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        atomic_store(1u, v46);
        WTF::fastFree((WTF *)v46, v11);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void WebCore::IDBServer::UniqueIDBDatabase::openDatabaseConnection(WebCore::IDBServer::UniqueIDBDatabase *this, WebCore::IDBServer::IDBConnectionToClient *a2, const WebCore::IDBOpenRequestData *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  WebCore::IDBServer::ServerOpenDBRequest *v14;
  WTF *v15;
  void *v16;
  _BYTE v17[24];
  WebCore::IDBServer::ServerOpenDBRequest *v18;

  v6 = WTF::fastMalloc((WTF *)0x98);
  v7 = v6;
  *(_DWORD *)v6 = 1;
  ++*(_DWORD *)a2;
  *(_QWORD *)(v6 + 8) = a2;
  v8 = *(_OWORD *)a3;
  *(_QWORD *)(v6 + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v6 + 16) = v8;
  v9 = (_DWORD *)*((_QWORD *)a3 + 3);
  if (v9)
    *v9 += 2;
  *(_BYTE *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 40) = v9;
  *(_DWORD *)(v6 + 72) = -1;
  v10 = *((unsigned int *)a3 + 14);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(_BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_1[v10])(v17);
    *(_DWORD *)(v7 + 72) = v10;
  }
  *(_BYTE *)(v7 + 80) = 0;
  *(_DWORD *)(v7 + 104) = -1;
  v11 = *((unsigned int *)a3 + 22);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(_BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_1[v11])(v17);
    *(_DWORD *)(v7 + 104) = v11;
  }
  *(_BYTE *)(v7 + 112) = *((_BYTE *)a3 + 96);
  v12 = *((_QWORD *)a3 + 13);
  *(_BYTE *)(v7 + 128) = *((_BYTE *)a3 + 112);
  *(_QWORD *)(v7 + 120) = v12;
  *(_WORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 144) = 0;
  v18 = (WebCore::IDBServer::ServerOpenDBRequest *)v7;
  WTF::ListHashSet<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>>>::add((uint64_t *)this + 12, (uint64_t *)&v18, (uint64_t)v17);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest(v14, v13);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  WebCore::IDBServer::UniqueIDBDatabase::handleDatabaseOperations(this, v13);
}

uint64_t *WTF::ListHashSet<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t **v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = ~(*a2 << 32) + *a2;
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v7;
    v15 = (_QWORD *)(v6 + 8 * (v12 & v7));
    v16 = (_QWORD *)*v15;
    if (*v15 == -1)
    {
      v8 = (_QWORD *)(v6 + 8 * v14);
      goto LABEL_10;
    }
    if (!v16)
      break;
    if (*v16 == *a2)
    {
      v20 = 0;
      goto LABEL_31;
    }
LABEL_10:
    v12 = i + v14;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*v4 - 16);
    v15 = v8;
  }
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  v17 = *a2;
  *a2 = 0;
  result[1] = 0;
  result[2] = 0;
  *result = v17;
  *v15 = result;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_25;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
      goto LABEL_26;
    }
LABEL_25:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_26:
    v15 = WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(v4, v25, (_QWORD **)v15);
    result = (uint64_t *)*v15;
  }
  v26 = v4[2];
  result[1] = v26;
  result[2] = 0;
  if (v26)
    v27 = (uint64_t **)(v26 + 16);
  else
    v27 = (uint64_t **)(v4 + 1);
  *v27 = result;
  v4[2] = (uint64_t)result;
  v16 = (_QWORD *)*v15;
  v20 = 1;
LABEL_31:
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v16;
  *(_BYTE *)(a3 + 16) = v20;
  return result;
}

void WebCore::IDBServer::UniqueIDBDatabase::handleDatabaseOperations(WebCore::IDBServer::UniqueIDBDatabase *this, _QWORD *a2)
{
  WebCore::IDBServer::ServerOpenDBRequest *v3;
  WebCore::IDBServer::ServerOpenDBRequest **v4;
  WTF *v5;
  void *v6;
  WebCore::IDBServer::ServerOpenDBRequest *v7;
  WebCore::IDBServer::ServerOpenDBRequest **v8;
  uint64_t *v9;
  WebCore::IDBServer::UniqueIDBDatabase *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::IDBServer::ServerOpenDBRequest *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebCore::IDBServer::ServerOpenDBRequest *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  int v33;
  unint64_t *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  WebCore::IDBServer::ServerOpenDBRequest *v50;
  WTF *v51;
  void *v52;
  WebCore::IDBServer::ServerOpenDBRequest *v53;
  WTF *v54;
  void *v55;
  WTF *v56;
  void *v57;
  WebCore::IDBServer::ServerOpenDBRequest *v58;

  v3 = (WebCore::IDBServer::ServerOpenDBRequest *)*((_QWORD *)this + 15);
  if (v3)
  {
    if (!*(_BYTE *)(*((_QWORD *)v3 + 1) + 24))
    {
LABEL_21:
      v8 = (WebCore::IDBServer::ServerOpenDBRequest **)((char *)this + 96);
      v9 = (uint64_t *)((char *)this + 128);
      while (*((_BYTE *)v3 + 128) == 1)
      {
        v12 = *((_QWORD *)this + 17);
        if (v12 && *(_DWORD *)(v12 - 12))
        {
          WebCore::IDBServer::UniqueIDBDatabase::maybeNotifyConnectionsOfVersionChange(this, a2);
        }
        else if (*((_QWORD *)this + 23) || !*((_QWORD *)this + 24))
        {
          v13 = (WebCore::IDBServer::ServerOpenDBRequest *)*((_QWORD *)this + 22);
          if (v13)
          {
            v58 = (WebCore::IDBServer::ServerOpenDBRequest *)*((_QWORD *)this + 22);
            *((_QWORD *)this + 22) = 0;
          }
          else
          {
            (*(void (**)(WebCore::IDBServer::ServerOpenDBRequest **__return_ptr, _QWORD, char *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 48))(&v58, *(_QWORD *)(*((_QWORD *)this + 1) + 8), (char *)this + 16);
            v13 = v58;
          }
          v18 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::IDBServer::ServerOpenDBRequest *))(*(_QWORD *)v13 + 24))(v13);
          (*(void (**)(WebCore::IDBServer::ServerOpenDBRequest *))(*(_QWORD *)v58 + 216))(v58);
          WebCore::IDBServer::UniqueIDBDatabase::didDeleteBackingStore(this, v18);
          v19 = v58;
          v58 = 0;
          if (v19)
            goto LABEL_78;
        }
        else
        {
          WebCore::IDBServer::UniqueIDBDatabase::didDeleteBackingStore(this, 0);
        }
LABEL_79:
        if (!*((_QWORD *)this + 21) && !*((_QWORD *)this + 15))
        {
          while (1)
          {
            v3 = *v8;
            if (!*v8)
              break;
            if (!*((_DWORD *)v3 - 3))
            {
              v3 = 0;
              break;
            }
            if (!*(_BYTE *)(*(_QWORD *)(**((_QWORD **)this + 13) + 8) + 24))
            {
              WTF::ListHashSet<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>>>::takeFirst(&v58, (uint64_t)this + 96);
              v3 = v58;
              break;
            }
            WTF::ListHashSet<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>>>::takeFirst(&v58, (uint64_t)this + 96);
            if (v58)
            {
              if (*(_DWORD *)v58 == 1)
              {
                WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest(v58, a2);
                WTF::fastFree(v51, v52);
              }
              else
              {
                --*(_DWORD *)v58;
              }
            }
          }
          v53 = (WebCore::IDBServer::ServerOpenDBRequest *)*((_QWORD *)this + 15);
          *((_QWORD *)this + 15) = v3;
          if (v53)
          {
            if (*(_DWORD *)v53 == 1)
            {
              WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest(v53, a2);
              WTF::fastFree(v54, v55);
            }
            else
            {
              --*(_DWORD *)v53;
            }
            v3 = (WebCore::IDBServer::ServerOpenDBRequest *)*((_QWORD *)this + 15);
          }
          if (v3)
            continue;
        }
        return;
      }
      if (*((_BYTE *)v3 + 128))
        goto LABEL_79;
      if (*((_QWORD *)this + 22))
      {
        v10 = this;
        v11 = 1;
LABEL_40:
        WebCore::IDBServer::UniqueIDBDatabase::performCurrentOpenOperationAfterSpaceCheck(v10, (WTF::StringImpl *)v11);
        goto LABEL_79;
      }
      v14 = *((_QWORD *)this + 1);
      if (!v14 || !*(_QWORD *)(v14 + 8))
      {
        v10 = this;
        v11 = 0;
        goto LABEL_40;
      }
      v15 = *((_QWORD *)v3 + 3);
      v16 = *((_QWORD *)v3 + 4);
      v17 = *v9;
      if (*v9)
      {
        if (WTF::HashTable<WebCore::IDBResourceIdentifier,WebCore::IDBResourceIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>(*v9, *((_QWORD *)v3 + 3), *((_QWORD *)v3 + 4)))
        {
          goto LABEL_79;
        }
      }
      else
      {
        WTF::HashTable<WebCore::IDBResourceIdentifier,WebCore::IDBResourceIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash((uint64_t *)this + 16, 8u);
        v17 = *v9;
      }
      v20 = *(_DWORD *)(v17 - 8);
      v21 = (v15 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v15 - 1640531527) << 16) ^ ((unsigned __int16)v15
                                                                                                 - 1640531527);
      v22 = (v15 >> 37) & 0x7FFF800 ^ ((v21 + WORD2(v15) + (v21 >> 11)) << 16) ^ (v21 + WORD2(v15) + (v21 >> 11));
      v23 = (v16 >> 5) & 0x7FFF800 ^ ((v22 + (unsigned __int16)v16 + (v22 >> 11)) << 16) ^ (v22 + (unsigned __int16)v16 + (v22 >> 11));
      v24 = (v16 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v16) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v16) + (v23 >> 11));
      v25 = (v24 + (v24 >> 11)) ^ (8 * (v24 + (v24 >> 11)));
      v26 = (v25 + (v25 >> 5)) ^ (4 * (v25 + (v25 >> 5)));
      v27 = (v26 + (v26 >> 15)) ^ ((v26 + (v26 >> 15)) << 10);
      if (!v27)
        v27 = 0x800000;
      v28 = v20 & v27;
      v29 = (unint64_t *)(v17 + 16 * v28);
      v31 = *v29;
      v30 = v29[1];
      if (*(_OWORD *)v29 != 0)
      {
        v32 = 0;
        v33 = 1;
        while (1)
        {
          v34 = v32;
          v32 = v29;
          if (v31 != -1)
          {
            v32 = v34;
            if (v31 == v15 && v30 == v16)
              break;
          }
          v28 = (v28 + v33) & v20;
          v29 = (unint64_t *)(v17 + 16 * v28);
          v31 = *v29;
          v30 = v29[1];
          ++v33;
          if (*(_OWORD *)v29 == 0)
          {
            if (v32)
            {
              *v32 = 0;
              v32[1] = 0;
              --*(_DWORD *)(*v9 - 16);
              v29 = v32;
            }
            goto LABEL_55;
          }
        }
LABEL_67:
        v42 = *((_QWORD *)this + 1);
        if (v42)
          v43 = *(_QWORD *)(v42 + 8);
        else
          v43 = 0;
        v44 = *(_QWORD *)this;
        if (*(_QWORD *)this)
          goto LABEL_102;
        v44 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v44 = 1;
        *(_QWORD *)(v44 + 8) = this;
        v46 = *(unsigned int **)this;
        *(_QWORD *)this = v44;
        if (!v46)
          goto LABEL_102;
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
        {
          atomic_store(1u, v46);
          WTF::fastFree((WTF *)v46, v45);
        }
        v44 = *(_QWORD *)this;
        if (*(_QWORD *)this)
        {
LABEL_102:
          do
            v49 = __ldaxr((unsigned int *)v44);
          while (__stlxr(v49 + 1, (unsigned int *)v44));
        }
        v50 = (WebCore::IDBServer::ServerOpenDBRequest *)WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v50 = &off_1E335AF20;
        *((_QWORD *)v50 + 1) = this;
        *((_QWORD *)v50 + 2) = v44;
        *((_QWORD *)v50 + 3) = v15;
        *((_QWORD *)v50 + 4) = v16;
        v58 = v50;
        (*(void (**)(uint64_t, char *, uint64_t, WebCore::IDBServer::ServerOpenDBRequest **))(*(_QWORD *)v43 + 56))(v43, (char *)this + 24, 4, &v58);
        v19 = v58;
        v58 = 0;
        if (v19)
        {
LABEL_78:
          (*(void (**)(WebCore::IDBServer::ServerOpenDBRequest *))(*(_QWORD *)v19 + 8))(v19);
          goto LABEL_79;
        }
        goto LABEL_79;
      }
LABEL_55:
      *v29 = v15;
      v29[1] = v16;
      v35 = *v9;
      if (*v9)
        v36 = *(_DWORD *)(v35 - 12) + 1;
      else
        v36 = 1;
      *(_DWORD *)(v35 - 12) = v36;
      v37 = *v9;
      if (*v9)
        v38 = *(_DWORD *)(v37 - 12);
      else
        v38 = 0;
      v39 = (*(_DWORD *)(v37 - 16) + v38);
      v40 = *(unsigned int *)(v37 - 4);
      if (v40 > 0x400)
      {
        if (v40 > 2 * v39)
          goto LABEL_67;
      }
      else
      {
        if (3 * v40 > 4 * v39)
          goto LABEL_67;
        if (!(_DWORD)v40)
        {
          v41 = 8;
          goto LABEL_66;
        }
      }
      v41 = (_DWORD)v40 << (6 * *(_DWORD *)(v37 - 12) >= (2 * v40));
LABEL_66:
      WTF::HashTable<WebCore::IDBResourceIdentifier,WebCore::IDBResourceIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash((uint64_t *)this + 16, v41);
      goto LABEL_67;
    }
  }
  else if (*((_QWORD *)this + 20) || *((_QWORD *)this + 21))
  {
    return;
  }
  v4 = (WebCore::IDBServer::ServerOpenDBRequest **)((char *)this + 96);
  v3 = (WebCore::IDBServer::ServerOpenDBRequest *)*((_QWORD *)this + 12);
  if (v3)
  {
    while (1)
    {
      if (!*((_DWORD *)v3 - 3))
      {
        v3 = 0;
        goto LABEL_17;
      }
      if (!*(_BYTE *)(*(_QWORD *)(**((_QWORD **)this + 13) + 8) + 24))
        break;
      WTF::ListHashSet<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>>>::takeFirst(&v58, (uint64_t)this + 96);
      if (v58)
      {
        if (*(_DWORD *)v58 == 1)
        {
          WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest(v58, a2);
          WTF::fastFree(v5, v6);
        }
        else
        {
          --*(_DWORD *)v58;
        }
      }
      v3 = *v4;
      if (!*v4)
        goto LABEL_17;
    }
    WTF::ListHashSet<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>>>::takeFirst(&v58, (uint64_t)this + 96);
    v3 = v58;
  }
LABEL_17:
  v7 = (WebCore::IDBServer::ServerOpenDBRequest *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v3;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest(v7, a2);
      WTF::fastFree(v56, v57);
      v3 = (WebCore::IDBServer::ServerOpenDBRequest *)*((_QWORD *)this + 15);
      if (v3)
        goto LABEL_21;
      return;
    }
    --*(_DWORD *)v7;
  }
  if (v3)
    goto LABEL_21;
}

void WebCore::IDBServer::UniqueIDBDatabase::performCurrentOpenOperationAfterSpaceCheck(WebCore::IDBServer::UniqueIDBDatabase *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  __int128 v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WebCore::IDBObjectStoreInfo *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  __int128 v55;
  uint64_t v56;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  WebCore::IDBObjectStoreInfo *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF *v66;
  void *v67;
  WTF *v68;
  void *v69;
  WTF *v70;
  void *v71;
  WTF::StringImpl *v72[4];
  WTF::StringImpl *v73;
  uint64_t v74;
  char v75;
  _OWORD v76[3];
  WTF::StringImpl *v77;
  const char *v78;
  int v79;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v80;
  WTF::StringImpl *v81;

  if (*((_QWORD *)this + 22))
  {
    v3 = 0;
    goto LABEL_3;
  }
  v5 = *((_QWORD *)this + 1);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0)
  {
    v3 = 0;
    LOWORD(v10) = 264;
    goto LABEL_103;
  }
  if ((a2 & 1) == 0)
  {
    v72[0] = (WTF::StringImpl *)"Failed to ";
    LODWORD(v72[1]) = 10;
    v80 = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)"OpenBackingStore";
    LODWORD(v81) = 16;
    v78 = " in database because not enough space for domain";
    v79 = 48;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v72, (uint64_t)&v80, (uint64_t)&v78, &v77);
    v3 = v77;
    if (!v77)
      goto LABEL_128;
    v59 = *(_DWORD *)v77;
    *(_DWORD *)v77 += 2;
    v77 = 0;
    if (v59)
      *(_DWORD *)v3 = v59;
    else
      WTF::StringImpl::destroy(v3, a2);
    LOWORD(v10) = 274;
LABEL_103:
    v56 = *((_QWORD *)this + 15);
    *(_OWORD *)&v72[1] = *(_OWORD *)(v56 + 24);
    LOBYTE(v74) = 0;
    v75 = 0;
    memset(v76, 0, sizeof(v76));
    LOBYTE(v72[0]) = 0;
    LOWORD(v72[3]) = v10;
    if (v3)
      *(_DWORD *)v3 += 2;
    v73 = v3;
LABEL_106:
    v65 = *(_QWORD *)(*(_QWORD *)(v56 + 8) + 8);
    if (v65)
    {
      (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)v65 + 32))(*(_QWORD *)(*(_QWORD *)(v56 + 8) + 8), v72);
      v56 = *((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = 0;
      if (!v56)
        goto LABEL_112;
    }
    else
    {
      *((_QWORD *)this + 15) = 0;
    }
    if (*(_DWORD *)v56 != 1)
    {
      --*(_DWORD *)v56;
LABEL_112:
      WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v72);
      goto LABEL_113;
    }
LABEL_124:
    WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest((WebCore::IDBServer::ServerOpenDBRequest *)v56, a2);
    WTF::fastFree(v70, v71);
    goto LABEL_112;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, char *))(*(_QWORD *)v6 + 48))(v72, v6, (char *)this + 16);
  v7 = v72[0];
  v72[0] = 0;
  v8 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v72[0];
    v72[0] = 0;
    if (v9)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 8))(v9);
  }
  v73 = 0;
  memset(v72, 0, sizeof(v72));
  (*(void (**)(WebCore::IDBServer::UniqueIDBDatabaseConnection **__return_ptr, _QWORD, WTF::StringImpl **))(**((_QWORD **)this + 22) + 16))(&v80, *((_QWORD *)this + 22), v72);
  v10 = (unsigned __int16)v80;
  v3 = v81;
  if ((unsigned __int16)v80 > 0xFFu)
  {
    v60 = *((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  }
  else
  {
    v11 = bmalloc::api::isoAllocate();
    v12 = v11;
    v13 = v72[0];
    if (v72[0])
      *(_DWORD *)v72[0] += 2;
    *(_QWORD *)v11 = v13;
    v14 = *(_OWORD *)&v72[1];
    *(WTF::StringImpl **)(v11 + 24) = v72[3];
    *(_OWORD *)(v11 + 8) = v14;
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)(v11 + 32), &v73);
    v15 = (WTF::StringImpl **)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v12;
    if (v15)
    {
      v16 = v15[4];
      if (v16)
      {
        v17 = *((unsigned int *)v16 - 1);
        if ((_DWORD)v17)
        {
          v18 = (WTF::StringImpl *)((char *)v16 + 8);
          do
          {
            if (*((_QWORD *)v18 - 1) != -1)
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v18, a2);
            v18 = (WebCore::IDBObjectStoreInfo *)((char *)v18 + 72);
            --v17;
          }
          while (v17);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v16 - 16), a2);
      }
      v19 = *v15;
      *v15 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, a2);
        else
          *(_DWORD *)v19 -= 2;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v15, a2);
    }
  }
  v61 = v73;
  if (v73)
  {
    v62 = *((unsigned int *)v73 - 1);
    if ((_DWORD)v62)
    {
      v63 = (WTF::StringImpl *)((char *)v73 + 8);
      do
      {
        if (*((_QWORD *)v63 - 1) != -1)
          WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v63, a2);
        v63 = (WebCore::IDBObjectStoreInfo *)((char *)v63 + 72);
        --v62;
      }
      while (v62);
    }
    WTF::fastFree((WTF::StringImpl *)((char *)v61 - 16), a2);
  }
  v64 = v72[0];
  v72[0] = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, a2);
    else
      *(_DWORD *)v64 -= 2;
  }
  if (v10 >= 0x100)
    goto LABEL_103;
LABEL_3:
  if (!*((_QWORD *)this + 20))
  {
    v20 = *((_QWORD *)this + 15);
    v21 = *(_QWORD *)(v20 + 120);
    v22 = *(_QWORD *)(*((_QWORD *)this + 23) + 8);
    if (v21)
    {
      if (v21 < v22)
      {
        *(_OWORD *)&v72[1] = *(_OWORD *)(v20 + 24);
        LOBYTE(v74) = 0;
        v75 = 0;
        memset(v76, 0, sizeof(v76));
        LOBYTE(v72[0]) = 0;
        LOWORD(v72[3]) = 285;
        v73 = 0;
        v23 = *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8);
        if (v23)
        {
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v23 + 32))(v23, v72);
          v20 = *((_QWORD *)this + 15);
          *((_QWORD *)this + 15) = 0;
          if (!v20)
            goto LABEL_112;
        }
        else
        {
          *((_QWORD *)this + 15) = 0;
        }
        if (*(_DWORD *)v20 != 1)
        {
          --*(_DWORD *)v20;
          goto LABEL_112;
        }
        v56 = v20;
        goto LABEL_124;
      }
    }
    else if (v22 <= 1)
    {
      v21 = 1;
    }
    else
    {
      v21 = *(_QWORD *)(*((_QWORD *)this + 23) + 8);
    }
    v24 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 8) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    *(_QWORD *)(v24 + 16) = 0;
    v26 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      goto LABEL_132;
    v26 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v26 = 1;
    *(_QWORD *)(v26 + 8) = this;
    v27 = *(unsigned int **)this;
    *(_QWORD *)this = v26;
    if (!v27)
      goto LABEL_132;
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, v25);
    }
    v26 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
LABEL_132:
      do
        v30 = __ldaxr((unsigned int *)v26);
      while (__stlxr(v30 + 1, (unsigned int *)v26));
    }
    *(_QWORD *)(v24 + 24) = v26;
    v31 = *((_QWORD *)this + 1);
    if (v31 && (v32 = *(_QWORD *)(v31 + 8)) != 0)
    {
      v33 = *(_QWORD *)(v32 + 8);
      if (v33)
        goto LABEL_133;
      v33 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = v32;
      v34 = *(unsigned int **)(v32 + 8);
      *(_QWORD *)(v32 + 8) = v33;
      if (!v34)
        goto LABEL_133;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v34);
        WTF::fastFree((WTF *)v34, v25);
      }
      v33 = *(_QWORD *)(v32 + 8);
      if (v33)
      {
LABEL_133:
        do
          v37 = __ldaxr((unsigned int *)v33);
        while (__stlxr(v37 + 1, (unsigned int *)v33));
      }
    }
    else
    {
      v33 = 0;
    }
    *(_QWORD *)(v24 + 32) = v33;
    v38 = *(_QWORD *)(v20 + 8);
    ++*(_DWORD *)v38;
    *(_QWORD *)(v24 + 40) = v38;
    *(_OWORD *)(v24 + 48) = *(_OWORD *)(v20 + 24);
    *(_BYTE *)(v24 + 64) = 0;
    *(_QWORD *)(v24 + 72) = 0;
    v39 = *((_QWORD *)this + 1);
    if (v39)
    {
      v40 = *(_QWORD *)(v39 + 8);
      if (v40)
      {
        v41 = *(_QWORD *)(v40 + 8);
        if (v41)
          goto LABEL_134;
        v41 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v41 = 1;
        *(_QWORD *)(v41 + 8) = v40;
        v42 = *(unsigned int **)(v40 + 8);
        *(_QWORD *)(v40 + 8) = v41;
        if (!v42)
          goto LABEL_134;
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          atomic_store(1u, v42);
          WTF::fastFree((WTF *)v42, v25);
        }
        v41 = *(_QWORD *)(v40 + 8);
        if (v41)
        {
LABEL_134:
          do
            v45 = __ldaxr((unsigned int *)v41);
          while (__stlxr(v45 + 1, (unsigned int *)v41));
        }
        v46 = *(unsigned int **)(v24 + 32);
        *(_QWORD *)(v24 + 32) = v41;
        if (v46)
        {
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            atomic_store(1u, v46);
            WTF::fastFree((WTF *)v46, v25);
          }
          v41 = *(_QWORD *)(v24 + 32);
        }
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v41 + 8) + 16))(*(_QWORD *)(v41 + 8), v24);
        v38 = *(_QWORD *)(v24 + 40);
      }
    }
    v80 = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)v24;
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(v38 + 16), (uint64_t *)&v80, (uint64_t)v72);
    if (v21 != *(_QWORD *)(*((_QWORD *)this + 23) + 8))
    {
      v57 = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)*((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = v24;
      if (v57)
      {
        if (*(_DWORD *)v57 == 1)
        {
          WebCore::IDBServer::UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection(v57);
          WTF::fastFree(v68, v69);
        }
        else
        {
          --*(_DWORD *)v57;
        }
      }
      v58 = *((_QWORD *)this + 17);
      if (v58 && *(_DWORD *)(v58 - 12))
      {
        WebCore::IDBServer::UniqueIDBDatabase::maybeNotifyConnectionsOfVersionChange(this, v49);
        goto LABEL_113;
      }
      goto LABEL_85;
    }
    v80 = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)v24;
    WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add((uint64_t **)v72, (uint64_t *)this + 17, &v80);
    if (v80)
    {
      if (*(_DWORD *)v80 == 1)
      {
        WebCore::IDBServer::UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection(v80);
        WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)v80;
      }
    }
    *(_OWORD *)&v72[1] = *(_OWORD *)(*((_QWORD *)this + 15) + 24);
    LOWORD(v72[3]) = 0;
    v73 = 0;
    memset((char *)v76 + 8, 0, 40);
    LOBYTE(v72[0]) = 1;
    v50 = *(_QWORD *)(v24 + 8);
    v75 = 1;
    v74 = v50;
    v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 24) + 8) + 184);
    if (v51)
    {
      v52 = bmalloc::api::isoAllocate();
      v53 = v52;
      v54 = *(_DWORD **)v51;
      if (*(_QWORD *)v51)
        *v54 += 2;
      *(_QWORD *)v52 = v54;
      v55 = *(_OWORD *)(v51 + 8);
      *(_QWORD *)(v52 + 24) = *(_QWORD *)(v51 + 24);
      *(_OWORD *)(v52 + 8) = v55;
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)(v52 + 32), (_QWORD *)(v51 + 32));
      *(_QWORD *)&v76[0] = v53;
      v56 = *((_QWORD *)this + 15);
      goto LABEL_106;
    }
LABEL_128:
    __break(0xC471u);
    JUMPOUT(0x1953F00D0);
  }
  if (!*((_QWORD *)this + 21))
  {
    v4 = *((_QWORD *)this + 17);
    if (!v4 || !*(_DWORD *)(v4 - 12))
LABEL_85:
      WebCore::IDBServer::UniqueIDBDatabase::startVersionChangeTransaction(this);
  }
LABEL_113:
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

void WebCore::IDBServer::UniqueIDBDatabase::startVersionChangeTransaction(WebCore::IDBServer::UniqueIDBDatabase *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  __int128 v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v13;
  _DWORD **v14;
  uint64_t v15;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  void *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  void *v33;
  WTF *v34;
  void *v35;
  WTF *v36;
  void *v37;
  WTF *v38;
  void *v39;
  WTF *v40;
  void *v41;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v42[2];
  _BYTE v43[24];
  __int16 v44;
  WTF::StringImpl *v45;
  char v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63[7];

  v2 = *(_QWORD *)(*((_QWORD *)this + 15) + 120);
  if (!v2)
  {
    if (*(_QWORD *)(*((_QWORD *)this + 23) + 8) <= 1uLL)
      v2 = 1;
    else
      v2 = *(_QWORD *)(*((_QWORD *)this + 23) + 8);
  }
  v3 = (uint64_t *)*((_QWORD *)this + 20);
  v4 = *(_QWORD *)(*(_QWORD *)(v3[3] + 8) + 184);
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1953F0564);
  }
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3[5] + 8) + 16))(*(_QWORD *)(v3[5] + 8));
  WebCore::nextServerResourceNumber(void)::currentNumber += 2;
  v51 = v5;
  v52 = WebCore::nextServerResourceNumber(void)::currentNumber;
  v55 = 0;
  v56 = 0;
  LOWORD(v53) = 514;
  v54 = v2;
  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  v8 = *(_DWORD **)v4;
  if (*(_QWORD *)v4)
    *v8 += 2;
  *(_QWORD *)v6 = v8;
  v9 = *(_OWORD *)(v4 + 8);
  *(_QWORD *)(v6 + 24) = *(_QWORD *)(v4 + 24);
  *(_OWORD *)(v6 + 8) = v9;
  WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)(v6 + 32), (_QWORD *)(v4 + 32));
  v57 = v7;
  v10 = (_DWORD *)WTF::fastMalloc((WTF *)0x90);
  WebCore::IDBServer::UniqueIDBDatabaseTransaction::UniqueIDBDatabaseTransaction((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v10, (WebCore::IDBServer::UniqueIDBDatabaseConnection *)v3, (const WebCore::IDBTransactionInfo *)&v51);
  v63[0] = (unint64_t)v10;
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBServer::UniqueIDBDatabaseTransaction*>(v3 + 9, (WTF::StringImpl *)(v10 + 6), v63, (uint64_t)v43);
  if (v10[2] == 1)
  {
    WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v10, v11);
    WTF::fastFree(v32, v33);
  }
  else
  {
    --v10[2];
  }
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBTransactionInfo *)&v51, v11);
  v14 = (_DWORD **)((char *)this + 168);
  v13 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)*((_QWORD *)this + 21);
  ++v10[2];
  *((_QWORD *)this + 21) = v10;
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1)
    {
      WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v13, v12);
      WTF::fastFree(v36, v37);
      v10 = *v14;
    }
    else
    {
      --*((_DWORD *)v13 + 2);
    }
  }
  WebCore::IDBTransactionInfo::IDBTransactionInfo((uint64_t)v63, (const WebCore::IDBTransactionInfo *)(v10 + 6));
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>&>((uint64_t)&v51, (uint64_t *)this + 29, v63, (unint64_t *)this + 21);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t *))(**((_QWORD **)this + 22) + 32))(&v61, *((_QWORD *)this + 22), v63);
  v15 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  LOBYTE(v51) = 0;
  v55 = 0;
  LOBYTE(v56) = 0;
  LOBYTE(v57) = 0;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v52 = 0;
  v53 = 0;
  LOWORD(v54) = 0;
  v16 = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)*((_QWORD *)this + 20);
  if (BYTE1(v61))
  {
    v17 = *v14;
    v18 = *((_QWORD *)v16 + 3);
    if (v18)
      v19 = *(_QWORD *)(v18 + 8);
    else
      v19 = 0;
    v20 = *((_QWORD *)v16 + 2);
    if (v20)
      goto LABEL_54;
    v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = v16;
    v22 = (unsigned int *)*((_QWORD *)v16 + 2);
    *((_QWORD *)v16 + 2) = v20;
    if (!v22)
      goto LABEL_54;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v21);
    }
    v20 = *((_QWORD *)v16 + 2);
    if (v20)
    {
LABEL_54:
      do
        v25 = __ldaxr((unsigned int *)v20);
      while (__stlxr(v25 + 1, (unsigned int *)v20));
    }
    *(_OWORD *)v43 = *(_OWORD *)(v17 + 6);
    v26 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v26 = &off_1E335B218;
    *(_QWORD *)(v26 + 8) = v16;
    *(_QWORD *)(v26 + 16) = v20;
    *(_OWORD *)(v26 + 24) = *(_OWORD *)v43;
    v42[0] = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)v26;
    WebCore::IDBServer::UniqueIDBDatabase::abortTransaction(v19, v17, v42, 0);
    if (v42[0])
      (*(void (**)(WebCore::IDBServer::UniqueIDBDatabaseConnection *))(*(_QWORD *)v42[0] + 8))(v42[0]);
    v27 = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 1)
      {
        WebCore::IDBServer::UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection(v27);
        WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)v27;
      }
    }
    *(_OWORD *)&v43[8] = *(_OWORD *)(v15 + 24);
    v46 = 0;
    v47 = 0;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v43[0] = 0;
    v44 = v61;
    v28 = v62;
    if (v62)
      *(_DWORD *)v62 += 2;
    v45 = v28;
  }
  else
  {
    ++*(_DWORD *)v16;
    v42[0] = v16;
    WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add((uint64_t **)v43, (uint64_t *)this + 17, v42);
    if (v42[0])
    {
      if (*(_DWORD *)v42[0] == 1)
      {
        WebCore::IDBServer::UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection(v42[0]);
        WTF::fastFree(v40, v41);
      }
      else
      {
        --*(_DWORD *)v42[0];
      }
    }
    *(_QWORD *)(*((_QWORD *)this + 23) + 8) = v63[3];
    *(_OWORD *)v42 = *(_OWORD *)(v15 + 24);
    WebCore::IDBResultData::openDatabaseUpgradeNeeded((WebCore::IDBResultData *)v42, *((const WebCore::IDBResourceIdentifier **)this + 21), *((WebCore::IDBServer::UniqueIDBDatabaseTransaction **)this + 20), (uint64_t)v43);
  }
  WebCore::IDBResultData::operator=((uint64_t)&v51, (__int128 *)v43);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v43);
  v29 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8);
  if (v29)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v29 + 32))(v29, &v51);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v51);
  if (*(_DWORD *)v15 == 1)
  {
    WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest((WebCore::IDBServer::ServerOpenDBRequest *)v15, v30);
    WTF::fastFree(v34, v35);
  }
  else
  {
    --*(_DWORD *)v15;
  }
  v31 = v62;
  v62 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBTransactionInfo *)v63, (WTF::StringImpl *)v30);
}

_QWORD *WebCore::IDBServer::UniqueIDBDatabase::maybeNotifyConnectionsOfVersionChange(_QWORD *this, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;

  v2 = this[15];
  if (*(_BYTE *)(v2 + 137))
    return this;
  v3 = this;
  v27 = *(_OWORD *)(v2 + 24);
  v26 = 0;
  v4 = (_QWORD *)this[18];
  if (!v4)
  {
    v21 = 0;
    goto LABEL_36;
  }
  do
  {
    a2 = (_QWORD *)*v4;
    if (*(_BYTE *)(*v4 + 64))
      goto LABEL_4;
    this = *(_QWORD **)(a2[5] + 8);
    if (this)
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 168))(this);
      a2 = (_QWORD *)*v4;
    }
    v5 = a2[1];
    v6 = v26;
    if (v26
      || (this = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(&v26, 8u), (v6 = v26) != 0))
    {
      v7 = *(_DWORD *)(v6 - 8);
    }
    else
    {
      v7 = 0;
    }
    v8 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = (_QWORD *)(v6 + 8 * v11);
    v13 = *v12;
    if (*v12)
    {
      v14 = 0;
      v15 = 1;
      while (v13 != v5)
      {
        if (v13 == -1)
          v14 = v12;
        v11 = (v11 + v15) & v7;
        v12 = (_QWORD *)(v6 + 8 * v11);
        v13 = *v12;
        ++v15;
        if (!*v12)
        {
          if (v14)
          {
            *v14 = 0;
            --*(_DWORD *)(v26 - 16);
            v12 = v14;
          }
          goto LABEL_19;
        }
      }
    }
    else
    {
LABEL_19:
      *v12 = v5;
      v16 = v26;
      if (v26)
        v17 = *(_DWORD *)(v26 - 12) + 1;
      else
        v17 = 1;
      *(_DWORD *)(v26 - 12) = v17;
      v18 = (*(_DWORD *)(v16 - 16) + v17);
      v19 = *(unsigned int *)(v16 - 4);
      if (v19 <= 0x400)
      {
        if (3 * v19 > 4 * v18)
          goto LABEL_4;
        if ((_DWORD)v19)
LABEL_25:
          v20 = (_DWORD)v19 << (6 * v17 >= (2 * v19));
        else
          v20 = 8;
        this = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(&v26, v20);
        goto LABEL_4;
      }
      if (v19 <= 2 * v18)
        goto LABEL_25;
    }
LABEL_4:
    v4 = (_QWORD *)v4[2];
  }
  while (v4);
  v21 = v26;
  v2 = v3[15];
  if (v26 && *(_DWORD *)(v26 - 12))
  {
    *(_BYTE *)(v2 + 137) = 1;
    v22 = *(_QWORD *)(v2 + 144);
    *(_QWORD *)(v2 + 144) = v21;
    v21 = v22;
    if (!v22)
      return this;
    return (_QWORD *)WTF::fastFree((WTF *)(v21 - 16), a2);
  }
LABEL_36:
  if (!*(_BYTE *)(v2 + 136))
  {
    if (*(_BYTE *)(v2 + 128))
      v23 = 0;
    else
      v23 = *(_QWORD *)(v2 + 120);
    v24 = *(_QWORD *)(v3[23] + 8);
    v25 = *(_QWORD *)(v2 + 8);
    v28 = *(_OWORD *)(v2 + 24);
    this = *(_QWORD **)(v25 + 8);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *, __int128 *, uint64_t, uint64_t))(*this + 192))(this, &v28, v24, v23);
    *(_BYTE *)(v2 + 136) = 1;
  }
  if (v21)
    return (_QWORD *)WTF::fastFree((WTF *)(v21 - 16), a2);
  return this;
}

_QWORD *WebCore::IDBServer::UniqueIDBDatabase::didDeleteBackingStore(_QWORD *this, WTF::StringImpl *a2)
{
  _QWORD *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebCore::IDBObjectStoreInfo *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebCore::IDBObjectStoreInfo *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  WTF *v26;
  void *v27;
  char v28[8];
  __int128 v29;
  __int16 v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v3 = this;
  v4 = this[23];
  if (v4)
  {
    v5 = (WTF::StringImpl **)this[24];
    this[23] = 0;
    this[24] = v4;
    if (v5)
    {
      v6 = v5[4];
      if (v6)
      {
        v7 = *((unsigned int *)v6 - 1);
        if ((_DWORD)v7)
        {
          v8 = (WTF::StringImpl *)((char *)v6 + 8);
          do
          {
            if (*((_QWORD *)v8 - 1) != -1)
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v8, a2);
            v8 = (WebCore::IDBObjectStoreInfo *)((char *)v8 + 72);
            --v7;
          }
          while (v7);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v6 - 16), a2);
      }
      v9 = *v5;
      *v5 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      this = (_QWORD *)bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    }
  }
  if (!v3[24])
  {
    this = (_QWORD *)bmalloc::api::isoAllocate();
    v11 = (_DWORD *)v3[2];
    if (v11)
      *v11 += 2;
    *this = v11;
    this[1] = a2;
    this[3] = 0;
    this[4] = 0;
    this[2] = 0;
    v12 = (WTF::StringImpl **)v3[24];
    v3[24] = this;
    if (v12)
    {
      v13 = v12[4];
      if (v13)
      {
        v14 = *((unsigned int *)v13 - 1);
        if ((_DWORD)v14)
        {
          v15 = (WTF::StringImpl *)((char *)v13 + 8);
          do
          {
            if (*((_QWORD *)v15 - 1) != -1)
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v15, v10);
            v15 = (WebCore::IDBObjectStoreInfo *)((char *)v15 + 72);
            --v14;
          }
          while (v14);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v13 - 16), v10);
      }
      v16 = *v12;
      *v12 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v10);
        else
          *(_DWORD *)v16 -= 2;
      }
      this = (_QWORD *)bmalloc::api::isoDeallocate((bmalloc::api *)v12, v10);
    }
  }
  v17 = v3[15];
  if (v17)
  {
    v18 = v3[24];
    v19 = *(_QWORD *)(v17 + 8);
    v28[0] = 3;
    v29 = *(_OWORD *)(v17 + 24);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v37 = 0;
    v36 = 0u;
    v35 = 0u;
    v20 = bmalloc::api::isoAllocate();
    v21 = v20;
    v22 = *(_DWORD **)v18;
    if (*(_QWORD *)v18)
      *v22 += 2;
    *(_QWORD *)v20 = v22;
    v23 = *(_OWORD *)(v18 + 8);
    *(_QWORD *)(v20 + 24) = *(_QWORD *)(v18 + 24);
    *(_OWORD *)(v20 + 8) = v23;
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)(v20 + 32), (_QWORD *)(v18 + 32));
    v34 = v21;
    v24 = *(_QWORD *)(v19 + 8);
    if (v24)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v24 + 24))(v24, v28);
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v28);
    this = (_QWORD *)v3[15];
    v3[15] = 0;
    if (this)
    {
      if (*(_DWORD *)this == 1)
      {
        WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest((WebCore::IDBServer::ServerOpenDBRequest *)this, v25);
        return (_QWORD *)WTF::fastFree(v26, v27);
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
  }
  return this;
}

void WebCore::IDBServer::UniqueIDBDatabase::handleDelete(WebCore::IDBServer::UniqueIDBDatabase *this, WebCore::IDBServer::IDBConnectionToClient *a2, const WebCore::IDBOpenRequestData *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  WebCore::IDBServer::ServerOpenDBRequest *v14;
  WTF *v15;
  void *v16;
  _BYTE v17[24];
  WebCore::IDBServer::ServerOpenDBRequest *v18;

  v6 = WTF::fastMalloc((WTF *)0x98);
  v7 = v6;
  *(_DWORD *)v6 = 1;
  ++*(_DWORD *)a2;
  *(_QWORD *)(v6 + 8) = a2;
  v8 = *(_OWORD *)a3;
  *(_QWORD *)(v6 + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v6 + 16) = v8;
  v9 = (_DWORD *)*((_QWORD *)a3 + 3);
  if (v9)
    *v9 += 2;
  *(_BYTE *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 40) = v9;
  *(_DWORD *)(v6 + 72) = -1;
  v10 = *((unsigned int *)a3 + 14);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(_BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_1[v10])(v17);
    *(_DWORD *)(v7 + 72) = v10;
  }
  *(_BYTE *)(v7 + 80) = 0;
  *(_DWORD *)(v7 + 104) = -1;
  v11 = *((unsigned int *)a3 + 22);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(_BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_1[v11])(v17);
    *(_DWORD *)(v7 + 104) = v11;
  }
  *(_BYTE *)(v7 + 112) = *((_BYTE *)a3 + 96);
  v12 = *((_QWORD *)a3 + 13);
  *(_BYTE *)(v7 + 128) = *((_BYTE *)a3 + 112);
  *(_QWORD *)(v7 + 120) = v12;
  *(_WORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 144) = 0;
  v18 = (WebCore::IDBServer::ServerOpenDBRequest *)v7;
  WTF::ListHashSet<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>>>::add((uint64_t *)this + 12, (uint64_t *)&v18, (uint64_t)v17);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest(v14, v13);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  WebCore::IDBServer::UniqueIDBDatabase::handleDatabaseOperations(this, v13);
}

uint64_t WebCore::IDBServer::UniqueIDBDatabaseConnection::abortTransactionWithoutCallback(WebCore::IDBServer::UniqueIDBDatabaseConnection *this, WebCore::IDBServer::UniqueIDBDatabaseTransaction *a2)
{
  uint64_t v4;
  uint64_t *v5;
  __int128 *v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  uint64_t v16;

  v4 = *((_QWORD *)this + 3);
  if (v4)
    v5 = *(uint64_t **)(v4 + 8);
  else
    v5 = 0;
  v6 = (__int128 *)((char *)a2 + 24);
  v7 = *((_QWORD *)this + 2);
  if (v7)
    goto LABEL_15;
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = this;
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v7;
  if (!v9)
    goto LABEL_15;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
LABEL_15:
    do
      v12 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v12 + 1, (unsigned int *)v7));
  }
  v15 = *v6;
  v13 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v13 = &off_1E335B218;
  *(_QWORD *)(v13 + 8) = this;
  *(_QWORD *)(v13 + 16) = v7;
  *(_OWORD *)(v13 + 24) = v15;
  v16 = v13;
  WebCore::IDBServer::UniqueIDBDatabase::abortTransaction(v5, (uint64_t *)a2, &v16, 0);
  result = v16;
  if (v16)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return result;
}

void WebCore::IDBServer::UniqueIDBDatabase::notifyCurrentRequestConnectionClosedOrFiredVersionChangeEvent(WebCore::IDBServer::UniqueIDBDatabase *this, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    v4 = (uint64_t *)(v2 + 144);
    v5 = *(_QWORD *)(v2 + 144);
    if (!v5)
      goto LABEL_22;
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD **)(v5 + 8 * v10);
    if (v11 != a2)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD **)(v5 + 8 * v10);
        ++v12;
        if (v11 == a2)
          goto LABEL_9;
      }
      v10 = *(unsigned int *)(v5 - 4);
    }
LABEL_9:
    if (v10 != *(_DWORD *)(v5 - 4))
    {
      *(_QWORD *)(v5 + 8 * v10) = -1;
      ++*(_DWORD *)(*v4 - 16);
      v13 = *v4;
      v14 = *v4 ? *(_DWORD *)(v13 - 12) - 1 : -1;
      *(_DWORD *)(v13 - 12) = v14;
      v5 = *v4;
      if (!*v4)
        goto LABEL_22;
      v15 = *(_DWORD *)(v5 - 4);
      if (6 * *(_DWORD *)(v5 - 12) < v15 && v15 >= 9)
      {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v4, v15 >> 1);
        v2 = *((_QWORD *)this + 15);
        v5 = *(_QWORD *)(v2 + 144);
        if (!v5)
          goto LABEL_22;
      }
    }
    if (!*(_DWORD *)(v5 - 12))
    {
LABEL_22:
      v17 = *((_QWORD *)this + 17);
      if (v17 && *(_DWORD *)(v17 - 12) && (v18 = (_QWORD *)*((_QWORD *)this + 18)) != 0)
      {
        while (*(_BYTE *)(*v18 + 64))
        {
          v18 = (_QWORD *)v18[2];
          if (!v18)
            goto LABEL_27;
        }
        if (!*(_BYTE *)(v2 + 136))
        {
          if (*(_BYTE *)(v2 + 128))
            v19 = 0;
          else
            v19 = *(_QWORD *)(v2 + 120);
          v20 = *(_QWORD *)(*((_QWORD *)this + 23) + 8);
          v21 = *(_QWORD *)(v2 + 8);
          v23 = *(_OWORD *)(v2 + 24);
          v22 = *(_QWORD *)(v21 + 8);
          if (v22)
            (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v22 + 192))(v22, &v23, v20, v19);
          *(_BYTE *)(v2 + 136) = 1;
        }
      }
      else
      {
LABEL_27:
        WebCore::IDBServer::UniqueIDBDatabase::handleDatabaseOperations(this, a2);
      }
    }
  }
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WebCore::IDBServer::UniqueIDBDatabase::clearTransactionsOnConnection(WebCore::IDBServer::UniqueIDBDatabase *this, WebCore::IDBServer::UniqueIDBDatabaseConnection *a2)
{
  uint64_t v3;
  WTF *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v21;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  WTF *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;
  void *v34;
  WTF *v35;
  void *v36;
  WTF *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v61;
  void *v62;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *result;
  void *v64;
  unint64_t v65;
  int v66;
  uint64_t *v67;
  WTF *v68;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  v72 = 0u;
  v73 = 0u;
  v3 = *((_QWORD *)this + 25);
  v69 = a2;
  if (v3 == *((_QWORD *)this + 26))
  {
    v4 = 0;
    goto LABEL_60;
  }
  v5 = 0;
  v4 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v67 = (uint64_t *)((char *)a2 + 72);
  v65 = 0;
  v66 = DWORD2(v73);
  do
  {
    v11 = *((_QWORD *)this + 27);
    v12 = *(_QWORD *)(v11 + 8 * v3);
    *(_QWORD *)(v11 + 8 * v3) = 0;
    v13 = *((_QWORD *)this + 27);
    v14 = *(WebCore::IDBServer::UniqueIDBDatabaseTransaction **)(v13 + 8 * v3);
    *(_QWORD *)(v13 + 8 * v3) = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 2) == 1)
      {
        WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v14, a2);
        WTF::fastFree(v28, v29);
        v3 = *((_QWORD *)this + 25);
      }
      else
      {
        --*((_DWORD *)v14 + 2);
      }
    }
    if (v3 == *((unsigned int *)this + 56) - 1)
      v15 = 0;
    else
      v15 = v3 + 1;
    *((_QWORD *)this + 25) = v15;
    v16 = *(_QWORD *)(v12 + 16);
    if (!v16 || *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)(v16 + 8) != v69)
    {
      if (v10)
      {
        v17 = v9;
        if (v5 + 1 != v10)
          goto LABEL_41;
LABEL_30:
        v25 = v17 + (v17 >> 2);
        if (v25 <= 0xF)
          v25 = 15;
        if (v25 >= 0x1FFFFFFF)
        {
          DWORD2(v73) = v66;
          __break(0xC471u);
          goto LABEL_130;
        }
        v26 = v25 + 1;
        v27 = (WTF *)WTF::fastMalloc((WTF *)(8 * (v25 + 1)));
        v4 = v27;
        if (v7 <= v5)
        {
          memcpy((char *)v27 + 8 * v7, (char *)v8 + 8 * v7, 8 * v5 - 8 * v7);
        }
        else
        {
          memcpy(v27, v8, 8 * v5);
          memcpy((char *)v4 + 8 * v26 + 8 * (v7 - v17), (char *)v8 + 8 * v7, 8 * v17 - 8 * v7);
          v65 = v26 + v7 - v17;
          v7 = v65;
        }
        v6 = v26;
        if (v8)
        {
          if (v4 == v8)
          {
            v6 = 0;
            v4 = 0;
          }
          WTF::fastFree(v8, a2);
        }
        v66 = v6;
        v10 = v7;
        goto LABEL_41;
      }
      if (v5)
      {
        v17 = v9;
        if (v5 == v9 - 1)
          goto LABEL_30;
        v10 = 0;
      }
      else
      {
        v17 = 0;
        if (!v9)
          goto LABEL_30;
        v5 = 0;
        v10 = 0;
      }
LABEL_41:
      *((_QWORD *)v4 + v5) = v12;
      if (v5 == v6 - 1)
        v5 = 0;
      else
        ++v5;
      v8 = v4;
      v9 = v6;
      goto LABEL_53;
    }
    v18 = *v67;
    if (*v67)
    {
      v19 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*v67, *(_QWORD *)(v12 + 24), *(_QWORD *)(v12 + 32));
      if (v19 && v19 != (uint64_t *)(v18 + 24 * *(unsigned int *)(v18 - 4)))
      {
        v21 = v19;
        *v19 = -1;
        v22 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v19[2];
        v21[2] = 0;
        if (v22)
        {
          if (*((_DWORD *)v22 + 2) == 1)
          {
            WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v22, a2);
            WTF::fastFree(v35, v36);
          }
          else
          {
            --*((_DWORD *)v22 + 2);
          }
        }
        ++*(_DWORD *)(*v67 - 16);
        v23 = *v67;
        if (*v67)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v30 = *v67;
        if (*v67)
        {
          v31 = 6 * *(_DWORD *)(v30 - 12);
          v32 = *(_DWORD *)(v30 - 4);
          if (v31 < v32 && v32 >= 9)
            WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v67, v32 >> 1, 0);
        }
      }
    }
    if (*(_DWORD *)(v12 + 8) == 1)
    {
      WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v12, a2);
      WTF::fastFree(v33, v34);
    }
    else
    {
      --*(_DWORD *)(v12 + 8);
    }
LABEL_53:
    v3 = *((_QWORD *)this + 25);
  }
  while (v3 != *((_QWORD *)this + 26));
  DWORD2(v73) = v66;
  *((_QWORD *)&v72 + 1) = v5;
  *(_QWORD *)&v73 = v4;
  *(_QWORD *)&v72 = v65;
  if (v65 != v5)
  {
    *((_QWORD *)this + 25) = v65;
    *((_QWORD *)this + 26) = v5;
    *(_QWORD *)&v72 = v3;
    *((_QWORD *)&v72 + 1) = v3;
    v37 = (WTF *)*((_QWORD *)this + 27);
    *((_QWORD *)this + 27) = v4;
    *(_QWORD *)&v73 = v37;
    v38 = *((_DWORD *)this + 56);
    *((_DWORD *)this + 56) = v6;
    DWORD2(v73) = v38;
    v4 = v37;
  }
  a2 = v69;
LABEL_60:
  v70 = 0u;
  v71 = 0u;
  v39 = *((_QWORD *)this + 29);
  if (v39)
  {
    v40 = *(unsigned int *)(v39 - 4);
    v41 = v39 + 24 * v40;
    if (*(_DWORD *)(v39 - 12))
    {
      v42 = *((_QWORD *)this + 29);
      if ((_DWORD)v40)
      {
        v43 = 24 * v40;
        v42 = *((_QWORD *)this + 29);
        while (*(_OWORD *)v42 == 0 || *(_QWORD *)v42 == -1)
        {
          v42 += 24;
          v43 -= 24;
          if (!v43)
          {
            v42 = v41;
            break;
          }
        }
      }
LABEL_71:
      v45 = v39 + 24 * *(unsigned int *)(v39 - 4);
      goto LABEL_76;
    }
    v42 = v39 + 24 * v40;
  }
  else
  {
    v42 = 0;
    LODWORD(v40) = 0;
  }
  v41 = v39 + 24 * v40;
  if (v39)
    goto LABEL_71;
  v45 = 0;
LABEL_76:
  if (v45 == v42)
  {
    WTF::Deque<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,0ul>::destroyAll((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)&v70, a2);
    goto LABEL_125;
  }
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v68 = v4;
  while (2)
  {
    v51 = *(_QWORD *)(*(_QWORD *)(v42 + 16) + 16);
    if (v51 && *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)(v51 + 8) == a2)
    {
      if (v50)
      {
        v52 = v47;
        if (v46 + 1 != v50)
          goto LABEL_99;
      }
      else if (v46)
      {
        v52 = v47;
        if (v46 != v47 - 1)
        {
          v50 = 0;
          goto LABEL_99;
        }
      }
      else
      {
        v52 = 0;
        if (v47)
        {
          v46 = 0;
          v50 = 0;
          goto LABEL_99;
        }
      }
      v53 = v52 + (v52 >> 2);
      if (v53 <= 0xF)
        v53 = 15;
      if (v53 >= 0x1FFFFFFF)
      {
        __break(0xC471u);
LABEL_130:
        JUMPOUT(0x1953F1458);
      }
      v47 = v53 + 1;
      v54 = (char *)WTF::fastMalloc((WTF *)(8 * (v53 + 1)));
      v55 = v54;
      DWORD2(v71) = v47;
      *(_QWORD *)&v71 = v54;
      if (v49 <= v46)
      {
        memcpy(&v54[8 * v49], &v48[8 * v49], 8 * v46 - 8 * v49);
      }
      else
      {
        memcpy(v54, v48, 8 * v46);
        memcpy(&v55[8 * v47 + 8 * (v49 - v52)], &v48[8 * v49], 8 * v52 - 8 * v49);
        *(_QWORD *)&v70 = v47 + v49 - v52;
        v49 = v70;
        v4 = v68;
      }
      v47 = v47;
      if (v48)
      {
        if (v55 == v48)
        {
          v55 = 0;
          v47 = 0;
          *(_QWORD *)&v71 = 0;
          DWORD2(v71) = 0;
        }
        WTF::fastFree((WTF *)v48, v56);
      }
      v48 = v55;
      v50 = v49;
      a2 = v69;
LABEL_99:
      v57 = *(_QWORD *)(v42 + 16);
      if (v57)
        ++*(_DWORD *)(v57 + 8);
      *(_QWORD *)&v48[8 * v46] = v57;
      if (v46 == v47 - 1)
        v46 = 0;
      else
        ++v46;
      *((_QWORD *)&v70 + 1) = v46;
    }
    v58 = v42 + 24;
    v42 = v41;
    if (v58 != v41)
    {
      v42 = v58;
      while (*(_OWORD *)v42 == 0 || *(_QWORD *)v42 == -1)
      {
        v42 += 24;
        if (v42 == v41)
        {
          v42 = v41;
          break;
        }
      }
    }
    if (v42 != v45)
      continue;
    break;
  }
  while (v46 != v49)
  {
    a2 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)&v48[8 * v49];
    v60 = *((_QWORD *)a2 + 2);
    if (v60)
    {
      v61 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)(v60 + 8);
      if (v61)
        WebCore::IDBServer::UniqueIDBDatabaseConnection::abortTransactionWithoutCallback(v61, a2);
    }
    v49 += v47 + 1;
    do
      v49 -= v47;
    while (v49 >= v47);
  }
  WTF::Deque<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,0ul>::destroyAll((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)&v70, a2);
  if (v48)
    WTF::fastFree((WTF *)v48, v62);
LABEL_125:
  result = WTF::Deque<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,0ul>::destroyAll((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)&v72, (WTF::StringImpl *)v62);
  if (v4)
    return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::fastFree(v4, v64);
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WebCore::IDBServer::UniqueIDBDatabaseTransaction::abortWithoutCallback(WebCore::IDBServer::UniqueIDBDatabaseTransaction *this)
{
  uint64_t v1;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v2;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = this;
    this = *(WebCore::IDBServer::UniqueIDBDatabaseTransaction **)(v1 + 8);
    if (this)
      return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebCore::IDBServer::UniqueIDBDatabaseConnection::abortTransactionWithoutCallback(this, v2);
  }
  return this;
}

void WebCore::IDBServer::UniqueIDBDatabase::didFireVersionChangeEvent(WebCore::IDBServer::UniqueIDBDatabase *this, WebCore::IDBServer::UniqueIDBDatabaseConnection *a2, uint64_t a3, int a4)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  int i;
  WebCore::IDBServer::UniqueIDBDatabaseConnection **v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int j;
  WTF *v20;

  if (*((_QWORD *)this + 15))
  {
    v6 = (_QWORD *)*((_QWORD *)a2 + 1);
    if (a4)
    {
      v7 = *((_QWORD *)this + 17);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 - 8);
        v9 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = (v11 >> 31) ^ v11;
        v13 = v8 & v12;
        for (i = 1; ; ++i)
        {
          v15 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection ***)(v7 + 8 * v13);
          if (v15 != (WebCore::IDBServer::UniqueIDBDatabaseConnection **)-1)
          {
            if (!v15)
              goto LABEL_20;
            if (*v15 == a2)
              break;
          }
          v13 = (v13 + i) & v8;
        }
        WebCore::IDBServer::UniqueIDBDatabase::clearTransactionsOnConnection(this, a2);
        v16 = *((_QWORD *)this + 17);
        if (v16)
        {
          v17 = *(_DWORD *)(v16 - 8);
          v18 = v17 & v12;
          for (j = 1; ; ++j)
          {
            v20 = *(WTF **)(v16 + 8 * v18);
            if (v20 != (WTF *)-1)
            {
              if (!v20)
                goto LABEL_19;
              if (*(WebCore::IDBServer::UniqueIDBDatabaseConnection **)v20 == a2)
                break;
            }
            v18 = (v18 + j) & v17;
          }
          if (v18 == *(_DWORD *)(v16 - 4))
            v20 = 0;
        }
        else
        {
          v20 = 0;
        }
LABEL_19:
        WTF::ListHashSet<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseConnection,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseConnection,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>>>>::remove((uint64_t *)this + 17, (char *)this + 136, v20);
      }
    }
LABEL_20:
    WebCore::IDBServer::UniqueIDBDatabase::notifyCurrentRequestConnectionClosedOrFiredVersionChangeEvent(this, v6);
  }
}

WebCore::IDBServer::ServerOpenDBRequest *WebCore::IDBServer::UniqueIDBDatabase::openDBRequestCancelled(WebCore::IDBServer::UniqueIDBDatabase *this, const WebCore::IDBResourceIdentifier *a2)
{
  WebCore::IDBServer::ServerOpenDBRequest *result;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v6;
  WebCore::IDBServer::ServerOpenDBRequest **v8;
  WebCore::IDBServer::ServerOpenDBRequest *v9;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int i;
  WebCore::IDBServer::ServerOpenDBRequest **v19;
  int v20;
  int j;
  uint64_t v22;
  WebCore::IDBServer::ServerOpenDBRequest **v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  WebCore::IDBServer::ServerOpenDBRequest *v32;
  WebCore::IDBServer::ServerOpenDBRequest *v33;
  WebCore::IDBServer::ServerOpenDBRequest **v34;
  WebCore::IDBServer::ServerOpenDBRequest *v35;
  WTF *v36;
  void *v37;

  result = (WebCore::IDBServer::ServerOpenDBRequest *)*((_QWORD *)this + 15);
  if (result)
  {
    if (*((_QWORD *)result + 3) == *(_QWORD *)a2 && *((_QWORD *)result + 4) == *((_QWORD *)a2 + 1))
    {
      *((_QWORD *)this + 15) = 0;
      if (*(_DWORD *)result == 1)
      {
        WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest(result, a2);
        result = (WebCore::IDBServer::ServerOpenDBRequest *)WTF::fastFree(v24, v25);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v6 = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)*((_QWORD *)this + 20);
  if (v6)
  {
    if (*((_QWORD *)v6 + 6) == *(_QWORD *)a2 && *((_QWORD *)v6 + 7) == *((_QWORD *)a2 + 1))
      result = WebCore::IDBServer::UniqueIDBDatabase::connectionClosedFromClient(this, v6);
  }
  v8 = (WebCore::IDBServer::ServerOpenDBRequest **)*((_QWORD *)this + 13);
  if (v8)
  {
    result = (WebCore::IDBServer::UniqueIDBDatabase *)((char *)this + 96);
    while (1)
    {
      v9 = *v8;
      if (*((_QWORD *)*v8 + 3) == *(_QWORD *)a2 && *((_QWORD *)*v8 + 4) == *((_QWORD *)a2 + 1))
        break;
      v8 = (WebCore::IDBServer::ServerOpenDBRequest **)v8[2];
      if (!v8)
        return result;
    }
    v11 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v12 = *(_DWORD *)(v11 - 8);
      v13 = ((unint64_t)v9 + ~((_QWORD)v9 << 32)) ^ (((unint64_t)v9 + ~((_QWORD)v9 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = 1;
      for (i = v16; ; i = (i + v17++) & v12)
      {
        v19 = *(WebCore::IDBServer::ServerOpenDBRequest ***)(v11 + 8 * i);
        if (v19 != (WebCore::IDBServer::ServerOpenDBRequest **)-1)
        {
          if (!v19)
            return result;
          if (*v19 == v9)
            break;
        }
      }
      v20 = *(_DWORD *)(v11 - 4);
      if (i != v20)
      {
        for (j = 1; ; ++j)
        {
          v22 = v16;
          v23 = *(WebCore::IDBServer::ServerOpenDBRequest ***)(v11 + 8 * v16);
          if (v23 != (WebCore::IDBServer::ServerOpenDBRequest **)-1)
          {
            if (!v23)
              goto LABEL_49;
            if (*v23 == v9)
              break;
          }
          v16 = (v22 + j) & v12;
        }
        if (v20 != (_DWORD)v22)
        {
          *(_QWORD *)(v11 + 8 * v22) = -1;
          ++*(_DWORD *)(*(_QWORD *)result - 16);
          v26 = *(_QWORD *)result;
          v27 = *(_QWORD *)result ? *(_DWORD *)(v26 - 12) - 1 : -1;
          *(_DWORD *)(v26 - 12) = v27;
          v28 = *(_QWORD *)result;
          if (*(_QWORD *)result)
          {
            v29 = 6 * *(_DWORD *)(v28 - 12);
            v30 = *(_DWORD *)(v28 - 4);
            if (v29 < v30 && v30 >= 9)
              WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash((uint64_t *)result, v30 >> 1, 0);
          }
        }
LABEL_49:
        v32 = v19[1];
        v33 = v19[2];
        if (v32)
        {
          *((_QWORD *)v32 + 2) = v33;
          v33 = v19[2];
        }
        else
        {
          *((_QWORD *)this + 13) = v33;
        }
        if (v33)
          v34 = (WebCore::IDBServer::ServerOpenDBRequest **)((char *)v33 + 8);
        else
          v34 = (WebCore::IDBServer::ServerOpenDBRequest **)((char *)this + 112);
        *v34 = v32;
        v35 = *v19;
        *v19 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 1)
          {
            WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest(v35, v6);
            WTF::fastFree(v36, v37);
          }
          else
          {
            --*(_DWORD *)v35;
          }
        }
        return (WebCore::IDBServer::ServerOpenDBRequest *)WTF::fastFree((WTF *)v19, v6);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabase::connectionClosedFromClient(WebCore::IDBServer::UniqueIDBDatabase *this, WebCore::IDBServer::UniqueIDBDatabaseConnection *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  WTF *v13;
  _QWORD *v14;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v15;
  WTF::StringImpl *result;
  WTF *v17;
  void *v18;
  WTF *v19;
  void *v20;

  ++*(_DWORD *)a2;
  v6 = *((_QWORD *)this + 17);
  v4 = (uint64_t *)((char *)this + 136);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    for (i = 1; ; ++i)
    {
      v13 = *(WTF **)(v5 + 8 * v11);
      if (v13 != (WTF *)-1)
      {
        if (!v13)
          goto LABEL_10;
        if (*(WebCore::IDBServer::UniqueIDBDatabaseConnection **)v13 == a2)
          break;
      }
      v11 = (v11 + i) & v7;
    }
    if (v11 == *(_DWORD *)(v5 - 4))
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
LABEL_10:
  WTF::ListHashSet<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseConnection,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseConnection,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>>>>::remove(v4, v4, v13);
  if (*((WebCore::IDBServer::UniqueIDBDatabaseConnection **)this + 20) != a2)
    goto LABEL_11;
  *((_QWORD *)this + 20) = 0;
  if (*(_DWORD *)a2 == 1)
  {
    WebCore::IDBServer::UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection(a2);
    WTF::fastFree(v19, v20);
  }
  else
  {
    --*(_DWORD *)a2;
  }
  v15 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)*((_QWORD *)this + 21);
  if (v15)
  {
    WebCore::IDBServer::UniqueIDBDatabaseConnection::abortTransactionWithoutCallback(a2, v15);
  }
  else
  {
LABEL_11:
    WebCore::IDBServer::UniqueIDBDatabase::clearTransactionsOnConnection(this, a2);
    if (*((_QWORD *)this + 15))
      WebCore::IDBServer::UniqueIDBDatabase::notifyCurrentRequestConnectionClosedOrFiredVersionChangeEvent(this, *((_QWORD **)a2 + 1));
  }
  WebCore::IDBServer::UniqueIDBDatabase::handleDatabaseOperations(this, v14);
  result = WebCore::IDBServer::UniqueIDBDatabase::handleTransactions(this);
  if (*(_DWORD *)a2 == 1)
  {
    WebCore::IDBServer::UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection(a2);
    return (WTF::StringImpl *)WTF::fastFree(v17, v18);
  }
  else
  {
    --*(_DWORD *)a2;
  }
  return result;
}

unsigned int *WebCore::IDBServer::UniqueIDBDatabase::createObjectStore(uint64_t *a1, uint64_t *a2, uint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  WTF::StringImpl *v18;
  unsigned int *result;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t *v25;
  void *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  _DWORD *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  _DWORD *v44;
  int v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  const char **v48;
  uint64_t v49;
  void *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  WTF::StringImpl *v56;
  const char *v57;
  WTF::StringImpl *v58;
  WTF *v59;
  const char *v60;
  _DWORD *v61;
  char v62[16];
  int v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  int v69;
  const char **v70;
  unsigned int *v71;

  if (a5 == 1)
  {
    v15 = a1[22];
    if (v15)
    {
      (*(void (**)(const char ***__return_ptr, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v15 + 56))(&v70, v15, a2 + 3, a3);
      if (!BYTE1(v70))
      {
        v16 = a1[23];
        v17 = *(const char **)a3;
        if (*(_QWORD *)a3 > *(_QWORD *)(v16 + 24))
          *(_QWORD *)(v16 + 24) = v17;
        v68 = v17;
        WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBObjectStoreInfo&>((uint64_t *)(v16 + 32), (uint64_t *)&v68, a3, (uint64_t)&v57);
      }
      (*(void (**)(_QWORD, const char ***))(*(_QWORD *)*a4 + 16))(*a4, &v70);
      result = v71;
      v71 = 0;
      if (result)
        goto LABEL_35;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOWORD(v57) = 264;
      v22 = (WTF::StringImpl *)v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      v58 = v22;
      (*(void (**)(_QWORD, const char **))(*(_QWORD *)*a4 + 16))(*a4, &v57);
      v23 = v58;
      v58 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v18);
        else
          *(_DWORD *)v23 -= 2;
      }
      result = (unsigned int *)v70;
      v70 = 0;
      if (result)
        goto LABEL_35;
    }
  }
  else
  {
    if (!a5)
    {
      v9 = a1[1];
      if (v9 && *(_QWORD *)(v9 + 8))
      {
        v10 = *(_QWORD *)(a3 + 8);
        if (v10)
          v11 = (*(_DWORD *)(v10 + 4) << ((*(_DWORD *)(v10 + 16) & 4) == 0)) + 4;
        else
          v11 = 4;
        LOBYTE(v57) = 0;
        LOBYTE(v60) = 0;
        if (!*(_BYTE *)(a3 + 40))
        {
LABEL_12:
          v13 = a1[1];
          if (v13)
            v14 = *(_QWORD *)(v13 + 8);
          else
            v14 = 0;
          v25 = a1 + 3;
          v24 = *a1;
          v57 = (const char *)a1;
          if (v24)
            goto LABEL_85;
          v24 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v24 = 1;
          *(_QWORD *)(v24 + 8) = a1;
          v27 = (unsigned int *)*a1;
          *a1 = v24;
          if (!v27)
            goto LABEL_85;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v27);
            WTF::fastFree((WTF *)v27, v26);
          }
          v24 = *a1;
          if (*a1)
          {
LABEL_85:
            do
              v30 = __ldaxr((unsigned int *)v24);
            while (__stlxr(v30 + 1, (unsigned int *)v24));
          }
          v58 = (WTF::StringImpl *)v24;
          v31 = *a2;
          if (*a2)
            goto LABEL_86;
          v31 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v31 = 1;
          *(_QWORD *)(v31 + 8) = a2;
          v33 = (unsigned int *)*a2;
          *a2 = v31;
          if (!v33)
            goto LABEL_86;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            atomic_store(1u, v33);
            WTF::fastFree((WTF *)v33, v32);
          }
          v31 = *a2;
          if (*a2)
          {
LABEL_86:
            do
              v36 = __ldaxr((unsigned int *)v31);
            while (__stlxr(v36 + 1, (unsigned int *)v31));
          }
          v38 = *(const char **)a3;
          v37 = *(_DWORD **)(a3 + 8);
          v59 = (WTF *)v31;
          v60 = v38;
          if (v37)
            *v37 += 2;
          v61 = v37;
          v62[0] = 0;
          v64 = 0;
          if (*(_BYTE *)(a3 + 40))
          {
            v63 = -1;
            v39 = *(unsigned int *)(a3 + 32);
            if ((_DWORD)v39 != -1)
            {
              ((void (*)(const char ***, char *, uint64_t))off_1E335AC98[v39])(&v70, v62, a3 + 16);
              v63 = v39;
            }
            v64 = 1;
          }
          v65 = *(_BYTE *)(a3 + 48);
          WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable(&v66, (uint64_t *)(a3 + 56));
          v40 = *a4;
          *a4 = 0;
          v67 = v40;
          v41 = WTF::fastMalloc((WTF *)0x68);
          v42 = v41;
          *(_QWORD *)v41 = off_1E335AF48;
          *(_QWORD *)(v41 + 8) = v57;
          *(_QWORD *)(v41 + 16) = v58;
          v43 = v59;
          v58 = 0;
          v59 = 0;
          *(_QWORD *)(v41 + 24) = v43;
          *(_QWORD *)(v41 + 32) = v60;
          v44 = v61;
          if (v61)
            *v61 += 2;
          *(_BYTE *)(v41 + 48) = 0;
          *(_QWORD *)(v41 + 40) = v44;
          *(_BYTE *)(v41 + 72) = 0;
          if (v64)
          {
            *(_DWORD *)(v41 + 64) = -1;
            v45 = v63;
            if (v63 != -1)
            {
              ((void (*)(const char ***))off_1E335AC98[v63])(&v70);
              *(_DWORD *)(v42 + 64) = v45;
            }
            *(_BYTE *)(v42 + 72) = 1;
          }
          *(_BYTE *)(v42 + 80) = v65;
          WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)(v42 + 88), &v66);
          v46 = v67;
          v67 = 0;
          *(_QWORD *)(v42 + 96) = v46;
          v70 = (const char **)v42;
          (*(void (**)(uint64_t, uint64_t *, uint64_t, const char ***))(*(_QWORD *)v14 + 56))(v14, v25, v11 + 4, &v70);
          v48 = v70;
          v70 = 0;
          if (v48)
            (*((void (**)(const char **))*v48 + 1))(v48);
          v49 = v67;
          v67 = 0;
          if (v49)
            (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
          WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)&v60, v47);
          v51 = (unsigned int *)v59;
          v59 = 0;
          if (v51)
          {
            do
            {
              v52 = __ldaxr(v51);
              v53 = v52 - 1;
            }
            while (__stlxr(v53, v51));
            if (!v53)
            {
              atomic_store(1u, v51);
              WTF::fastFree((WTF *)v51, v50);
            }
          }
          result = (unsigned int *)v58;
          v58 = 0;
          if (result)
          {
            do
            {
              v54 = __ldaxr(result);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, result));
            if (!v55)
            {
              atomic_store(1u, result);
              return (unsigned int *)WTF::fastFree((WTF *)result, v50);
            }
          }
          return result;
        }
        LODWORD(v59) = -1;
        v12 = *(unsigned int *)(a3 + 32);
        if ((_DWORD)v12 != -1)
        {
          ((void (*)(const char ***, const char **, uint64_t))off_1E335AC98[v12])(&v70, &v57, a3 + 16);
          LODWORD(v59) = v12;
          LOBYTE(v60) = 1;
          v70 = &v68;
          v11 += ((uint64_t (*)(const char ***, const char **))off_1E335AE48[v12])(&v70, &v57);
          if ((_BYTE)v60 && (_DWORD)v59 != -1)
            ((void (*)(const char ***, const char **))off_1E335AC88[v59])(&v70, &v57);
          goto LABEL_12;
        }
        result = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_82:
        __break(0xC471u);
        return result;
      }
      LOWORD(v57) = 264;
      v58 = 0;
      (*(void (**)(_QWORD, const char **))(*(_QWORD *)*a4 + 16))(*a4, &v57);
      result = (unsigned int *)v58;
      v58 = 0;
      if (!result)
        return result;
LABEL_35:
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
      *result -= 2;
      return result;
    }
    v57 = "Failed to ";
    LODWORD(v58) = 10;
    v70 = (const char **)"CreateObjectStore";
    LODWORD(v71) = 17;
    v68 = " in database because not enough space for domain";
    v69 = 48;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v57, (uint64_t)&v70, (uint64_t)&v68, &v56);
    v20 = v56;
    if (!v56)
      goto LABEL_82;
    LOWORD(v57) = 274;
    *(_DWORD *)v56 += 2;
    v58 = v20;
    (*(void (**)(_QWORD, const char **))(*(_QWORD *)*a4 + 16))(*a4, &v57);
    v21 = v58;
    v58 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v18);
      else
        *(_DWORD *)v21 -= 2;
    }
    result = (unsigned int *)v56;
    v56 = 0;
    if (result)
      goto LABEL_35;
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabase::deleteObjectStore(uint64_t *a1, uint64_t *a2, const WTF::StringImpl **a3, _QWORD *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  const WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *result;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;

  if (a5)
  {
    v9 = *(_QWORD *)(a1[23] + 32);
    if (v9)
    {
      v10 = *(unsigned int *)(v9 - 4);
      v11 = v9 + 72 * v10;
      if (*(_DWORD *)(v9 - 12))
      {
        v12 = *(_QWORD *)(a1[23] + 32);
        if ((_DWORD)v10)
        {
          v13 = 72 * v10;
          v12 = *(_QWORD *)(a1[23] + 32);
          while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
          {
            v12 += 72;
            v13 -= 72;
            if (!v13)
            {
              v12 = v11;
              goto LABEL_38;
            }
          }
        }
        goto LABEL_38;
      }
      v12 = v9 + 72 * v10;
    }
    else
    {
      v12 = 0;
      LODWORD(v10) = 0;
    }
    v11 = v9 + 72 * v10;
LABEL_38:
    if (v9)
      v33 = v9 + 72 * *(unsigned int *)(v9 - 4);
    else
      v33 = 0;
    if (v33 == v12)
    {
LABEL_49:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v35 = 280;
    }
    else
    {
      while ((WTF::equal(*(WTF **)(v12 + 16), *a3, (const WTF::StringImpl *)a3) & 1) == 0)
      {
        v34 = v12 + 72;
        v12 = v11;
        if (v34 != v11)
        {
          v12 = v34;
          while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
          {
            v12 += 72;
            if (v12 == v11)
            {
              v12 = v11;
              break;
            }
          }
        }
        if (v12 == v33)
          goto LABEL_49;
      }
      v38 = a1[22];
      if (v38)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v38 + 64))(&v40, v38, a2 + 3, *(_QWORD *)(v12 + 8));
        if (!BYTE1(v40))
        {
          v39 = a1[23];
          v42 = *(WTF::StringImpl **)(v12 + 8);
          WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::remove((uint64_t *)(v39 + 32), (WTF::StringImpl *)&v42);
        }
LABEL_60:
        (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a4 + 16))(*a4, &v40);
        result = v41;
        v41 = 0;
        if (!result)
          return result;
LABEL_61:
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          return result;
        }
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v35 = 264;
    }
    LOWORD(v40) = v35;
    v36 = v42;
    if (v42)
      *(_DWORD *)v42 += 2;
    v41 = v36;
    (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a4 + 16))(*a4, &v40);
    v37 = v41;
    v41 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v31);
      else
        *(_DWORD *)v37 -= 2;
    }
    result = v42;
    v42 = 0;
    if (result)
      goto LABEL_61;
    return result;
  }
  v14 = a1[1];
  if (!v14 || (v15 = *(_QWORD *)(v14 + 8)) == 0)
  {
    LOWORD(v40) = 264;
    v41 = 0;
    goto LABEL_60;
  }
  v16 = *a1;
  if (*a1)
    goto LABEL_70;
  v16 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = a1;
  v18 = (unsigned int *)*a1;
  *a1 = v16;
  if (!v18)
    goto LABEL_70;
  do
  {
    v19 = __ldaxr(v18);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v18));
  if (!v20)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v17);
  }
  v16 = *a1;
  if (*a1)
  {
LABEL_70:
    do
      v21 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v21 + 1, (unsigned int *)v16));
  }
  v22 = *a2;
  if (*a2)
    goto LABEL_71;
  v22 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v22 = 1;
  *(_QWORD *)(v22 + 8) = a2;
  v24 = (unsigned int *)*a2;
  *a2 = v22;
  if (!v24)
    goto LABEL_71;
  do
  {
    v25 = __ldaxr(v24);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v24));
  if (!v26)
  {
    atomic_store(1u, v24);
    WTF::fastFree((WTF *)v24, v23);
  }
  v22 = *a2;
  if (*a2)
  {
LABEL_71:
    do
      v27 = __ldaxr((unsigned int *)v22);
    while (__stlxr(v27 + 1, (unsigned int *)v22));
  }
  v28 = *a3;
  if (v28)
    *(_DWORD *)v28 += 2;
  v29 = *a4;
  *a4 = 0;
  v30 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v30 = &off_1E335AF70;
  *((_QWORD *)v30 + 1) = a1;
  *((_QWORD *)v30 + 2) = v16;
  *((_QWORD *)v30 + 3) = v22;
  if (v28)
    *(_DWORD *)v28 += 2;
  *((_QWORD *)v30 + 4) = v28;
  *((_QWORD *)v30 + 5) = v29;
  v40 = v30;
  (*(void (**)(uint64_t, uint64_t *, _QWORD, WTF::StringImpl **))(*(_QWORD *)v15 + 56))(v15, a1 + 3, 0, &v40);
  result = v40;
  v40 = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  if (v28)
  {
    if (*(_DWORD *)v28 != 2)
    {
      *(_DWORD *)v28 -= 2;
      return result;
    }
    result = v28;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabase::renameObjectStore(uint64_t a1, uint64_t *a2, WTF::StringImpl *a3, WTF::StringImpl **a4, _QWORD *a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  char *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *result;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  __int16 v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  const char *v47;
  int v48;
  const char *v49;
  int v50;
  const char *v51;
  WTF::StringImpl *v52;

  if (a6 == 1)
  {
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 32);
    if (!v31)
      goto LABEL_50;
    v32 = *(_DWORD *)(v31 - 8);
    v33 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
    v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
    v36 = v32 & ((v35 >> 31) ^ v35);
    v37 = (WTF::StringImpl **)(v31 + 72 * v36);
    v38 = *v37;
    if (*v37 != a3)
    {
      v39 = 1;
      while (v38)
      {
        v36 = (v36 + v39) & v32;
        v37 = (WTF::StringImpl **)(v31 + 72 * v36);
        v38 = *v37;
        ++v39;
        if (*v37 == a3)
          goto LABEL_44;
      }
      v37 = (WTF::StringImpl **)(v31 + 72 * *(unsigned int *)(v31 - 4));
    }
LABEL_44:
    if (v37 == (WTF::StringImpl **)(v31 + 72 * *(unsigned int *)(v31 - 4)))
    {
LABEL_50:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v43 = 280;
    }
    else
    {
      v42 = *(_QWORD *)(a1 + 176);
      if (v42)
      {
        (*(void (**)(const char **__return_ptr, uint64_t, uint64_t *, WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v42 + 72))(&v51, v42, a2 + 3, a3, a4);
        if (!BYTE1(v51))
          WebCore::IDBDatabaseInfo::renameObjectStore(*(WTF::StringImpl **)(a1 + 184), a3, a4);
LABEL_48:
        (*(void (**)(_QWORD, const char **))(*(_QWORD *)*a5 + 16))(*a5, &v51);
        result = v52;
        v52 = 0;
        if (!result)
          return result;
        goto LABEL_57;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v43 = 264;
    }
    LOWORD(v51) = v43;
    v44 = (WTF::StringImpl *)v49;
    if (v49)
      *(_DWORD *)v49 += 2;
    v52 = v44;
    (*(void (**)(_QWORD, const char **))(*(_QWORD *)*a5 + 16))(*a5, &v51);
    v45 = v52;
    v52 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v29);
      else
        *(_DWORD *)v45 -= 2;
    }
    result = (WTF::StringImpl *)v49;
    v49 = 0;
    if (!result)
      return result;
    goto LABEL_57;
  }
  if (!a6)
  {
    v11 = *(_QWORD *)(a1 + 8);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        if (*a4)
          v13 = (*((_DWORD *)*a4 + 1) << ((*((_DWORD *)*a4 + 4) & 4) == 0)) + 4;
        else
          v13 = 4;
        v14 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          goto LABEL_69;
        v14 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v14 = 1;
        *(_QWORD *)(v14 + 8) = a1;
        v16 = *(unsigned int **)a1;
        *(_QWORD *)a1 = v14;
        if (!v16)
          goto LABEL_69;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v16);
          WTF::fastFree((WTF *)v16, v15);
        }
        v14 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
        {
LABEL_69:
          do
            v19 = __ldaxr((unsigned int *)v14);
          while (__stlxr(v19 + 1, (unsigned int *)v14));
        }
        v20 = *a2;
        if (*a2)
          goto LABEL_70;
        v20 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = a2;
        v22 = (unsigned int *)*a2;
        *a2 = v20;
        if (!v22)
          goto LABEL_70;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, v21);
        }
        v20 = *a2;
        if (*a2)
        {
LABEL_70:
          do
            v25 = __ldaxr((unsigned int *)v20);
          while (__stlxr(v25 + 1, (unsigned int *)v20));
        }
        v26 = *a4;
        if (v26)
          *(_DWORD *)v26 += 2;
        v27 = *a5;
        *a5 = 0;
        v28 = (char *)WTF::fastMalloc((WTF *)0x38);
        *(_QWORD *)v28 = &off_1E335AF98;
        *((_QWORD *)v28 + 1) = a1;
        *((_QWORD *)v28 + 2) = v14;
        *((_QWORD *)v28 + 3) = v20;
        *((_QWORD *)v28 + 4) = a3;
        if (v26)
          *(_DWORD *)v26 += 2;
        *((_QWORD *)v28 + 5) = v26;
        *((_QWORD *)v28 + 6) = v27;
        v51 = v28;
        (*(void (**)(uint64_t, uint64_t, uint64_t, const char **))(*(_QWORD *)v12 + 56))(v12, a1 + 24, v13, &v51);
        result = (WTF::StringImpl *)v51;
        v51 = 0;
        if (result)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        if (v26)
        {
          if (*(_DWORD *)v26 != 2)
          {
            *(_DWORD *)v26 -= 2;
            return result;
          }
          result = v26;
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
        }
        return result;
      }
    }
    LOWORD(v51) = 264;
    v52 = 0;
    goto LABEL_48;
  }
  v51 = "Failed to ";
  LODWORD(v52) = 10;
  v49 = "RenameObjectStore";
  v50 = 17;
  v47 = " in database because not enough space for domain";
  v48 = 48;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v51, (uint64_t)&v49, (uint64_t)&v47, &v46);
  v40 = v46;
  if (!v46)
  {
    __break(0xC471u);
    return result;
  }
  LOWORD(v51) = 274;
  *(_DWORD *)v46 += 2;
  v52 = v40;
  (*(void (**)(_QWORD, const char **))(*(_QWORD *)*a5 + 16))(*a5, &v51);
  v41 = v52;
  v52 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v29);
    else
      *(_DWORD *)v41 -= 2;
  }
  result = v46;
  v46 = 0;
  if (result)
  {
LABEL_57:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
    *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabase::clearObjectStore(uint64_t *a1, uint64_t *a2, uint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  if (a5)
  {
    v9 = a1[22];
    if (v9)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v9 + 80))(&v30, v9, a2 + 3, a3);
      goto LABEL_30;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOWORD(v30) = 264;
    if (v29)
      *(_DWORD *)v29 += 2;
    v31 = v29;
    (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a4 + 16))(*a4, &v30);
    v28 = v31;
    v31 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    result = v29;
    if (v29)
    {
LABEL_31:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v10 = a1[1];
    if (!v10 || (v11 = *(_QWORD *)(v10 + 8)) == 0)
    {
      LOWORD(v30) = 264;
      v31 = 0;
LABEL_30:
      (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a4 + 16))(*a4, &v30);
      result = v31;
      v31 = 0;
      if (!result)
        return result;
      goto LABEL_31;
    }
    v12 = *a1;
    if (*a1)
      goto LABEL_38;
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = a1;
    v14 = (unsigned int *)*a1;
    *a1 = v12;
    if (!v14)
      goto LABEL_38;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v13);
    }
    v12 = *a1;
    if (*a1)
    {
LABEL_38:
      do
        v17 = __ldaxr((unsigned int *)v12);
      while (__stlxr(v17 + 1, (unsigned int *)v12));
    }
    v18 = *a2;
    if (*a2)
      goto LABEL_39;
    v18 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = a2;
    v20 = (unsigned int *)*a2;
    *a2 = v18;
    if (!v20)
      goto LABEL_39;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v19);
    }
    v18 = *a2;
    if (*a2)
    {
LABEL_39:
      do
        v23 = __ldaxr((unsigned int *)v18);
      while (__stlxr(v23 + 1, (unsigned int *)v18));
    }
    v24 = *a4;
    *a4 = 0;
    v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v25 = &off_1E335AFC0;
    *((_QWORD *)v25 + 1) = a1;
    *((_QWORD *)v25 + 2) = v12;
    *((_QWORD *)v25 + 3) = v18;
    *((_QWORD *)v25 + 4) = a3;
    *((_QWORD *)v25 + 5) = v24;
    v30 = v25;
    (*(void (**)(uint64_t, uint64_t *, _QWORD, WTF::StringImpl **))(*(_QWORD *)v11 + 56))(v11, a1 + 3, 0, &v30);
    result = v30;
    v30 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unsigned int *WebCore::IDBServer::UniqueIDBDatabase::createIndex(uint64_t *a1, uint64_t *a2, uint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  unsigned int *result;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  const char *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  _QWORD *v64;
  WTF::StringImpl *v65;
  const char **v66;
  WTF::StringImpl *v67;
  WTF *v68;
  __int128 v69;
  WTF::StringImpl *v70;
  _BYTE v71[16];
  int v72;
  __int16 v73;
  uint64_t v74;
  const char *v75;
  int v76;
  const char *v77;
  unsigned int *v78;

  if (a5 == 1)
  {
    v16 = a1[22];
    if (v16)
    {
      (*(void (**)(const char **__return_ptr, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v16 + 88))(&v77, v16, a2 + 3, a3);
      if (!BYTE1(v77))
      {
        v17 = *(uint64_t **)(a1[23] + 32);
        if (v17)
        {
          v18 = *(_QWORD *)(a3 + 8);
          v19 = *((_DWORD *)v17 - 2);
          v20 = (v18 + ~(v18 << 32)) ^ ((unint64_t)(v18 + ~(v18 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = &v17[9 * v23];
          v25 = *v24;
          if (*v24 != v18)
          {
            v26 = 1;
            while (v25)
            {
              v23 = (v23 + v26) & v19;
              v24 = &v17[9 * v23];
              v25 = *v24;
              ++v26;
              if (*v24 == v18)
                goto LABEL_76;
            }
            v24 = &v17[9 * *((unsigned int *)v17 - 1)];
          }
LABEL_76:
          v17 += 9 * *((unsigned int *)v17 - 1);
        }
        else
        {
          v24 = 0;
        }
        if (v24 == v17)
          v64 = 0;
        else
          v64 = v24 + 1;
        v75 = *(const char **)a3;
        WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBIndexInfo&>(v64 + 7, (WTF::StringImpl *)&v75, a3, (uint64_t)&v66);
        *(_QWORD *)(a1[23] + 16) = *(_QWORD *)a3;
      }
      (*(void (**)(_QWORD, const char **))(*(_QWORD *)*a4 + 16))(*a4, &v77);
      result = v78;
      v78 = 0;
      if (result)
        goto LABEL_82;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOWORD(v66) = 264;
      v31 = (WTF::StringImpl *)v77;
      if (v77)
        *(_DWORD *)v77 += 2;
      v67 = v31;
      (*(void (**)(_QWORD, const char ***))(*(_QWORD *)*a4 + 16))(*a4, &v66);
      v32 = v67;
      v67 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v29);
        else
          *(_DWORD *)v32 -= 2;
      }
      result = (unsigned int *)v77;
      v77 = 0;
      if (result)
        goto LABEL_82;
    }
  }
  else
  {
    if (!a5)
    {
      v9 = a1[1];
      if (v9 && *(_QWORD *)(v9 + 8))
      {
        v10 = *(_QWORD *)(a3 + 16);
        if (v10)
          v11 = (*(_DWORD *)(v10 + 4) << ((*(_DWORD *)(v10 + 16) & 4) == 0)) + 4;
        else
          v11 = 4;
        v12 = *(unsigned int *)(a3 + 40);
        if ((_DWORD)v12 != -1)
        {
          v66 = &v77;
          v13 = ((uint64_t (*)(const char ***, uint64_t))off_1E335AE48[v12])(&v66, a3 + 24);
          v14 = a1[1];
          if (v14)
            v15 = *(_QWORD *)(v14 + 8);
          else
            v15 = 0;
          v33 = *a1;
          v66 = (const char **)a1;
          if (v33)
            goto LABEL_93;
          v33 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v33 = 1;
          *(_QWORD *)(v33 + 8) = a1;
          v35 = (unsigned int *)*a1;
          *a1 = v33;
          if (!v35)
            goto LABEL_93;
          do
          {
            v36 = __ldaxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
          {
            atomic_store(1u, v35);
            WTF::fastFree((WTF *)v35, v34);
          }
          v33 = *a1;
          if (*a1)
          {
LABEL_93:
            do
              v38 = __ldaxr((unsigned int *)v33);
            while (__stlxr(v38 + 1, (unsigned int *)v33));
          }
          v67 = (WTF::StringImpl *)v33;
          v39 = *a2;
          if (*a2)
            goto LABEL_94;
          v39 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v39 = 1;
          *(_QWORD *)(v39 + 8) = a2;
          v41 = (unsigned int *)*a2;
          *a2 = v39;
          if (!v41)
            goto LABEL_94;
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            atomic_store(1u, v41);
            WTF::fastFree((WTF *)v41, v40);
          }
          v39 = *a2;
          if (*a2)
          {
LABEL_94:
            do
              v44 = __ldaxr((unsigned int *)v39);
            while (__stlxr(v44 + 1, (unsigned int *)v39));
          }
          v68 = (WTF *)v39;
          v69 = *(_OWORD *)a3;
          v45 = *(WTF::StringImpl **)(a3 + 16);
          if (v45)
            *(_DWORD *)v45 += 2;
          v46 = v11 + v13;
          v70 = v45;
          v71[0] = 0;
          v72 = -1;
          v47 = *(unsigned int *)(a3 + 40);
          if ((_DWORD)v47 != -1)
          {
            ((void (*)(const char **, _BYTE *, uint64_t))off_1E335AC98[v47])(&v77, v71, a3 + 24);
            v72 = v47;
          }
          v73 = *(_WORD *)(a3 + 48);
          v48 = *a4;
          *a4 = 0;
          v74 = v48;
          v49 = WTF::fastMalloc((WTF *)0x60);
          v50 = v49;
          *(_QWORD *)v49 = &off_1E335AFE8;
          *(_QWORD *)(v49 + 8) = v66;
          *(_QWORD *)(v49 + 16) = v67;
          v51 = v68;
          v67 = 0;
          v68 = 0;
          *(_QWORD *)(v49 + 24) = v51;
          *(_OWORD *)(v49 + 32) = v69;
          v52 = v70;
          if (v70)
            *(_DWORD *)v70 += 2;
          *(_BYTE *)(v49 + 56) = 0;
          *(_QWORD *)(v49 + 48) = v52;
          *(_DWORD *)(v49 + 72) = -1;
          v53 = v72;
          if (v72 != -1)
          {
            ((void (*)(const char **))off_1E335AC98[v72])(&v77);
            *(_DWORD *)(v50 + 72) = v53;
          }
          *(_WORD *)(v50 + 80) = v73;
          v54 = v74;
          v74 = 0;
          *(_QWORD *)(v50 + 88) = v54;
          v77 = (const char *)v50;
          (*(void (**)(uint64_t, uint64_t *, uint64_t, const char **))(*(_QWORD *)v15 + 56))(v15, a1 + 3, v46 + 4, &v77);
          v56 = v77;
          v77 = 0;
          if (v56)
            (*(void (**)(const char *))(*(_QWORD *)v56 + 8))(v56);
          v57 = v74;
          v74 = 0;
          if (v57)
            (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
          if (v72 != -1)
            ((void (*)(const char **, _BYTE *))off_1E335AC88[v72])(&v75, v71);
          v72 = -1;
          v58 = v70;
          v70 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, v55);
            else
              *(_DWORD *)v58 -= 2;
          }
          v59 = (unsigned int *)v68;
          v68 = 0;
          if (v59)
          {
            do
            {
              v60 = __ldaxr(v59);
              v61 = v60 - 1;
            }
            while (__stlxr(v61, v59));
            if (!v61)
            {
              atomic_store(1u, v59);
              WTF::fastFree((WTF *)v59, v55);
            }
          }
          result = (unsigned int *)v67;
          v67 = 0;
          if (result)
          {
            do
            {
              v62 = __ldaxr(result);
              v63 = v62 - 1;
            }
            while (__stlxr(v63, result));
            if (!v63)
            {
              atomic_store(1u, result);
              return (unsigned int *)WTF::fastFree((WTF *)result, v55);
            }
          }
          return result;
        }
        result = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_90:
        __break(0xC471u);
        return result;
      }
      LOWORD(v66) = 264;
      v67 = 0;
      (*(void (**)(_QWORD, const char ***))(*(_QWORD *)*a4 + 16))(*a4, &v66);
      result = (unsigned int *)v67;
      v67 = 0;
      if (!result)
        return result;
LABEL_82:
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v29);
      *result -= 2;
      return result;
    }
    v66 = (const char **)"Failed to ";
    LODWORD(v67) = 10;
    v77 = "CreateIndex";
    LODWORD(v78) = 11;
    v75 = " in database because not enough space for domain";
    v76 = 48;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v66, (uint64_t)&v77, (uint64_t)&v75, &v65);
    v28 = v65;
    if (!v65)
      goto LABEL_90;
    LOWORD(v66) = 274;
    *(_DWORD *)v65 += 2;
    v67 = v28;
    (*(void (**)(_QWORD, const char ***))(*(_QWORD *)*a4 + 16))(*a4, &v66);
    v30 = v67;
    v67 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v29);
      else
        *(_DWORD *)v30 -= 2;
    }
    result = (unsigned int *)v65;
    v65 = 0;
    if (result)
      goto LABEL_82;
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabase::deleteIndex(uint64_t *a1, uint64_t *a2, const WTF::StringImpl *a3, const WTF::StringImpl **a4, _QWORD *a5, int a6)
{
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  const WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  const WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *result;
  __int16 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;

  if (a6)
  {
    if (!a1[22])
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v39 = 264;
      goto LABEL_63;
    }
    v11 = *(_QWORD *)(a1[23] + 32);
    if (!v11)
      goto LABEL_62;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = (_QWORD *)(v11 + 72 * v16);
    v18 = (const WTF::StringImpl *)*v17;
    if ((const WTF::StringImpl *)*v17 != a3)
    {
      v19 = 1;
      while (v18)
      {
        v16 = (v16 + v19) & v12;
        v17 = (_QWORD *)(v11 + 72 * v16);
        v18 = (const WTF::StringImpl *)*v17;
        ++v19;
        if ((const WTF::StringImpl *)*v17 == a3)
          goto LABEL_39;
      }
      v17 = (_QWORD *)(v11 + 72 * *(unsigned int *)(v11 - 4));
    }
LABEL_39:
    if (v17 == (_QWORD *)(v11 + 72 * *(unsigned int *)(v11 - 4)))
    {
LABEL_62:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v39 = 280;
LABEL_63:
      LOWORD(v52) = v39;
      v49 = v54;
      if (v54)
        *(_DWORD *)v54 += 2;
      v53 = v49;
      (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a5 + 16))(*a5, &v52);
      v50 = v53;
      v53 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v37);
        else
          *(_DWORD *)v50 -= 2;
      }
      result = v54;
      v54 = 0;
      if (result)
        goto LABEL_69;
      return result;
    }
    v42 = v17[8];
    v41 = v17 + 8;
    v40 = v42;
    if (v42)
    {
      v43 = *(unsigned int *)(v40 - 4);
      v44 = v40 + (v43 << 6);
      if (*(_DWORD *)(v40 - 12))
      {
        v45 = v40;
        if ((_DWORD)v43)
        {
          v46 = v43 << 6;
          v45 = v40;
          while ((unint64_t)(*(_QWORD *)v45 + 1) <= 1)
          {
            v45 += 64;
            v46 -= 64;
            if (!v46)
            {
              v45 = v44;
              break;
            }
          }
        }
LABEL_51:
        if (v40)
          v47 = v40 + ((unint64_t)*(unsigned int *)(v40 - 4) << 6);
        else
          v47 = 0;
        if (v47 != v45)
        {
          while ((WTF::equal(*(WTF **)(v45 + 24), *a4, a3) & 1) == 0)
          {
            v48 = v45 + 64;
            v45 = v44;
            if (v48 != v44)
            {
              v45 = v48;
              while ((unint64_t)(*(_QWORD *)v45 + 1) <= 1)
              {
                v45 += 64;
                if (v45 == v44)
                {
                  v45 = v44;
                  break;
                }
              }
            }
            if (v45 == v47)
              goto LABEL_62;
          }
          v51 = *(WTF::StringImpl **)(v45 + 8);
          (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t *, const WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)a1[22] + 96))(&v52, a1[22], a2 + 3, a3, v51);
          if (!BYTE1(v52))
          {
            v54 = v51;
            WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::remove(v41, (WTF::StringImpl *)&v54);
          }
LABEL_36:
          (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a5 + 16))(*a5, &v52);
          result = v53;
          v53 = 0;
          if (!result)
            return result;
LABEL_69:
          if (*(_DWORD *)result != 2)
          {
            *(_DWORD *)result -= 2;
            return result;
          }
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
        }
        goto LABEL_62;
      }
      v45 = v40 + (v43 << 6);
    }
    else
    {
      v45 = 0;
      v43 = 0;
    }
    v44 = v40 + (v43 << 6);
    goto LABEL_51;
  }
  v20 = a1[1];
  if (!v20 || (v21 = *(_QWORD *)(v20 + 8)) == 0)
  {
    LOWORD(v52) = 264;
    v53 = 0;
    goto LABEL_36;
  }
  v22 = *a1;
  if (*a1)
    goto LABEL_79;
  v22 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v22 = 1;
  *(_QWORD *)(v22 + 8) = a1;
  v24 = (unsigned int *)*a1;
  *a1 = v22;
  if (!v24)
    goto LABEL_79;
  do
  {
    v25 = __ldaxr(v24);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v24));
  if (!v26)
  {
    atomic_store(1u, v24);
    WTF::fastFree((WTF *)v24, v23);
  }
  v22 = *a1;
  if (*a1)
  {
LABEL_79:
    do
      v27 = __ldaxr((unsigned int *)v22);
    while (__stlxr(v27 + 1, (unsigned int *)v22));
  }
  v28 = *a2;
  if (*a2)
    goto LABEL_80;
  v28 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v28 = 1;
  *(_QWORD *)(v28 + 8) = a2;
  v30 = (unsigned int *)*a2;
  *a2 = v28;
  if (!v30)
    goto LABEL_80;
  do
  {
    v31 = __ldaxr(v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v30));
  if (!v32)
  {
    atomic_store(1u, v30);
    WTF::fastFree((WTF *)v30, v29);
  }
  v28 = *a2;
  if (*a2)
  {
LABEL_80:
    do
      v33 = __ldaxr((unsigned int *)v28);
    while (__stlxr(v33 + 1, (unsigned int *)v28));
  }
  v34 = *a4;
  if (v34)
    *(_DWORD *)v34 += 2;
  v35 = *a5;
  *a5 = 0;
  v36 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v36 = &off_1E335B010;
  *((_QWORD *)v36 + 1) = a1;
  *((_QWORD *)v36 + 2) = v22;
  *((_QWORD *)v36 + 3) = v28;
  *((_QWORD *)v36 + 4) = a3;
  if (v34)
    *(_DWORD *)v34 += 2;
  *((_QWORD *)v36 + 5) = v34;
  *((_QWORD *)v36 + 6) = v35;
  v52 = v36;
  (*(void (**)(uint64_t, uint64_t *, _QWORD, WTF::StringImpl **))(*(_QWORD *)v21 + 56))(v21, a1 + 3, 0, &v52);
  result = v52;
  v52 = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  if (v34)
  {
    if (*(_DWORD *)v34 != 2)
    {
      *(_DWORD *)v34 -= 2;
      return result;
    }
    result = v34;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabase::renameIndex(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, _QWORD *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  char *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *result;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  __int16 v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  const char *v62;
  int v63;
  const char *v64;
  int v65;
  const char *v66;
  WTF::StringImpl *v67;

  if (a7 == 1)
  {
    v33 = a1[22];
    if (v33)
    {
      v34 = *(_QWORD *)(a1[23] + 32);
      if (v34)
      {
        v35 = *(_DWORD *)(v34 - 8);
        v36 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
        v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
        v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
        v39 = v35 & ((v38 >> 31) ^ v38);
        v40 = (uint64_t *)(v34 + 72 * v39);
        v41 = *v40;
        if (*v40 != a3)
        {
          v42 = 1;
          while (v41)
          {
            v39 = (v39 + v42) & v35;
            v40 = (uint64_t *)(v34 + 72 * v39);
            v41 = *v40;
            ++v42;
            if (*v40 == a3)
              goto LABEL_48;
          }
          v40 = (uint64_t *)(v34 + 72 * *(unsigned int *)(v34 - 4));
        }
LABEL_48:
        if (v40 != (uint64_t *)(v34 + 72 * *(unsigned int *)(v34 - 4)))
        {
          v46 = v40[8];
          if (v46)
          {
            v47 = *(_DWORD *)(v46 - 8);
            v48 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
            v49 = 9 * ((v48 + ~(v48 << 13)) ^ ((v48 + ~(v48 << 13)) >> 8));
            v50 = (v49 ^ (v49 >> 15)) + ~((v49 ^ (v49 >> 15)) << 27);
            v51 = v47 & ((v50 >> 31) ^ v50);
            v52 = *(_QWORD *)(v46 + (v51 << 6));
            if (v52 != a4)
            {
              v53 = 1;
              while (v52)
              {
                v51 = ((_DWORD)v51 + v53) & v47;
                v52 = *(_QWORD *)(v46 + ((unint64_t)v51 << 6));
                ++v53;
                if (v52 == a4)
                  goto LABEL_58;
              }
              v51 = *(unsigned int *)(v46 - 4);
            }
LABEL_58:
            if (v51 != *(_DWORD *)(v46 - 4))
            {
              (*(void (**)(const char **__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v33 + 104))(&v66, v33, a2 + 3, a3, a4, a5);
              if (!BYTE1(v66))
              {
                v57 = (WTF::StringImpl **)(v46 + (v51 << 6) + 24);
                v58 = *a5;
                if (*a5)
                  *(_DWORD *)v58 += 2;
                v59 = *v57;
                *v57 = v58;
                if (v59)
                {
                  if (*(_DWORD *)v59 == 2)
                    WTF::StringImpl::destroy(v59, v56);
                  else
                    *(_DWORD *)v59 -= 2;
                }
              }
LABEL_44:
              (*(void (**)(_QWORD, const char **))(*(_QWORD *)*a6 + 16))(*a6, &v66);
              result = v67;
              v67 = 0;
              if (!result)
                return result;
              goto LABEL_66;
            }
          }
        }
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v45 = 280;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v45 = 264;
    }
    LOWORD(v66) = v45;
    v54 = (WTF::StringImpl *)v64;
    if (v64)
      *(_DWORD *)v64 += 2;
    v67 = v54;
    (*(void (**)(_QWORD, const char **))(*(_QWORD *)*a6 + 16))(*a6, &v66);
    v55 = v67;
    v67 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v31);
      else
        *(_DWORD *)v55 -= 2;
    }
    result = (WTF::StringImpl *)v64;
    v64 = 0;
    if (!result)
      return result;
    goto LABEL_66;
  }
  if (!a7)
  {
    v13 = a1[1];
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        if (*a5)
          v15 = (*((_DWORD *)*a5 + 1) << ((*((_DWORD *)*a5 + 4) & 4) == 0)) + 4;
        else
          v15 = 4;
        v60 = v15;
        v16 = *a1;
        if (*a1)
          goto LABEL_83;
        v16 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = a1;
        v18 = (unsigned int *)*a1;
        *a1 = v16;
        if (!v18)
          goto LABEL_83;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          WTF::fastFree((WTF *)v18, v17);
        }
        v16 = *a1;
        if (*a1)
        {
LABEL_83:
          do
            v21 = __ldaxr((unsigned int *)v16);
          while (__stlxr(v21 + 1, (unsigned int *)v16));
        }
        v22 = *a2;
        if (*a2)
          goto LABEL_84;
        v22 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v22 = 1;
        *(_QWORD *)(v22 + 8) = a2;
        v24 = (unsigned int *)*a2;
        *a2 = v22;
        if (!v24)
          goto LABEL_84;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          WTF::fastFree((WTF *)v24, v23);
        }
        v22 = *a2;
        if (*a2)
        {
LABEL_84:
          do
            v27 = __ldaxr((unsigned int *)v22);
          while (__stlxr(v27 + 1, (unsigned int *)v22));
        }
        v28 = *a5;
        if (v28)
          *(_DWORD *)v28 += 2;
        v29 = *a6;
        *a6 = 0;
        v30 = (char *)WTF::fastMalloc((WTF *)0x40);
        *(_QWORD *)v30 = &off_1E335B038;
        *((_QWORD *)v30 + 1) = a1;
        *((_QWORD *)v30 + 2) = v16;
        *((_QWORD *)v30 + 3) = v22;
        *((_QWORD *)v30 + 4) = a3;
        *((_QWORD *)v30 + 5) = a4;
        if (v28)
          *(_DWORD *)v28 += 2;
        *((_QWORD *)v30 + 6) = v28;
        *((_QWORD *)v30 + 7) = v29;
        v66 = v30;
        (*(void (**)(uint64_t, uint64_t *, uint64_t, const char **))(*(_QWORD *)v14 + 56))(v14, a1 + 3, v60, &v66);
        result = (WTF::StringImpl *)v66;
        v66 = 0;
        if (result)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        if (v28)
        {
          if (*(_DWORD *)v28 != 2)
          {
            *(_DWORD *)v28 -= 2;
            return result;
          }
          result = v28;
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
        }
        return result;
      }
    }
    LOWORD(v66) = 264;
    v67 = 0;
    goto LABEL_44;
  }
  v66 = "Failed to ";
  LODWORD(v67) = 10;
  v64 = "RenameIndex";
  v65 = 11;
  v62 = " in database because not enough space for domain";
  v63 = 48;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v66, (uint64_t)&v64, (uint64_t)&v62, &v61);
  v43 = v61;
  if (!v61)
  {
    __break(0xC471u);
    return result;
  }
  LOWORD(v66) = 274;
  *(_DWORD *)v61 += 2;
  v67 = v43;
  (*(void (**)(_QWORD, const char **))(*(_QWORD *)*a6 + 16))(*a6, &v66);
  v44 = v67;
  v67 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v31);
    else
      *(_DWORD *)v44 -= 2;
  }
  result = v61;
  v61 = 0;
  if (result)
  {
LABEL_66:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
    *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabase::putOrAdd(WTF::StringImpl *a1, uint64_t *a2, WebCore::IDBKeyData *a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  double v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  void *v36;
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  char v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  const WebCore::IDBKeyData *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  const WebCore::IDBKeyData *v80;
  WebCore::IDBServer *v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  const WebCore::IDBKeyData *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  unsigned int *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unint64_t v109;
  double v110;
  double v111;
  double v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  _DWORD *v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  __int128 v143;
  int v144;
  unsigned int *v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  _DWORD *v152;
  int v153;
  uint64_t v154;
  WTF::StringImpl *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD *v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  _QWORD *v163;
  uint64_t v164;
  _DWORD **v165;
  uint64_t v166;
  _DWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  _DWORD **v170;
  uint64_t v171;
  _DWORD *v172;
  _QWORD *v173;
  _DWORD **v174;
  uint64_t v175;
  _DWORD *v176;
  _QWORD *v177;
  _DWORD **v178;
  uint64_t v179;
  _DWORD *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  char v185;
  __int128 *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  uint64_t *v201;
  int v202;
  unsigned int *v203;
  _DWORD **v204;
  int v205;
  unsigned int v206;
  _DWORD **v207;
  int v208;
  unsigned int v209;
  char v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  _DWORD *v215;
  char v216[16];
  int v217;
  char v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  WTF::StringImpl *v222;
  __int128 v223;
  uint64_t v224;
  unint64_t *v225;
  char *v226;
  char v227;
  __int128 v228;
  unint64_t v229;
  char v230;
  __int16 v231;
  WTF::StringImpl *v232;
  char v233[8];
  double v234[2];
  int v235;
  _QWORD *v236;
  uint64_t v237;
  int v238;
  char v239;
  _QWORD v240[2];

  v9 = *((_QWORD *)a1 + 22);
  if (v9)
  {
    v13 = a2[8];
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 208))(v9, v13);
    if (v14)
    {
      v15 = *((_QWORD *)a1 + 1);
      if (v15 && *(_QWORD *)(v15 + 8))
      {
        v16 = (uint64_t *)v14;
        v233[0] = 0;
        v234[0] = 0.0;
        v235 = 0;
        v231 = 0;
        v232 = 0;
        v230 = 0;
        v229 = 0;
        v186 = (__int128 *)(a2 + 3);
        v228 = *(_OWORD *)(a2 + 3);
        v223 = v228;
        v222 = a1;
        v224 = v13;
        v225 = &v229;
        v226 = &v230;
        v227 = 1;
        if (!*(_BYTE *)(v14 + 48))
        {
          v233[0] = *(_BYTE *)a3;
          v18 = *((_DWORD *)a3 + 6);
          if (v18 == -1)
          {
            v17 = 0;
LABEL_25:
            ((void (*)(WTF::StringImpl **, double *))off_1E335ACA8[v17])(&v190, v234);
            v235 = -1;
            goto LABEL_39;
          }
LABEL_35:
          v190 = (WTF::StringImpl *)v234;
          ((void (*)(WTF::StringImpl **, double *, char *))off_1E335AD98[v18])(&v190, v234, (char *)a3 + 8);
          goto LABEL_39;
        }
        if ((WebCore::IDBKeyData::isValid(a3) & 1) != 0)
        {
          v17 = v235;
          v233[0] = *(_BYTE *)a3;
          v18 = *((_DWORD *)a3 + 6);
          if (v235 == -1)
          {
            if (v18 == -1)
              goto LABEL_39;
          }
          else if (v18 == -1)
          {
            goto LABEL_25;
          }
          goto LABEL_35;
        }
        (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, __int128 *, uint64_t, unint64_t *))(**((_QWORD **)a1 + 22) + 168))(&v190, *((_QWORD *)a1 + 22), &v228, v13, &v229);
        v231 = (__int16)v190;
        v24 = v191;
        v191 = 0;
        v25 = v232;
        v232 = v24;
        if (v25)
        {
          v26 = *(_DWORD *)v25 - 2;
          if (*(_DWORD *)v25 != 2)
          {
LABEL_28:
            *(_DWORD *)v25 = v26;
            goto LABEL_29;
          }
          WTF::StringImpl::destroy(v25, v23);
          v25 = v191;
          v191 = 0;
          if (v25)
          {
            v26 = *(_DWORD *)v25 - 2;
            if (*(_DWORD *)v25 != 2)
              goto LABEL_28;
            WTF::StringImpl::destroy(v25, v162);
          }
        }
LABEL_29:
        if (HIBYTE(v231))
        {
LABEL_55:
          (*(void (**)(uint64_t, __int16 *, char *))(*(_QWORD *)*a6 + 16))(*a6, &v231, v233);
          v37 = &v230;
          goto LABEL_223;
        }
        v27 = (double)v229;
        if (v235 != -1)
        {
          if (v235 == 4)
          {
            v234[0] = (double)v229;
LABEL_38:
            v230 = 1;
LABEL_39:
            if (a5 != 2)
              goto LABEL_56;
            LOBYTE(v236) = 0;
            (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, __int128 *, uint64_t, char *, _QWORD **))(**((_QWORD **)a1 + 22) + 112))(&v190, *((_QWORD *)a1 + 22), &v228, v13, v233, &v236);
            v231 = (__int16)v190;
            v29 = v191;
            v191 = 0;
            v30 = v232;
            v232 = v29;
            if (v30)
            {
              v31 = *(_DWORD *)v30 - 2;
              if (*(_DWORD *)v30 == 2)
              {
                WTF::StringImpl::destroy(v30, v28);
                v30 = v191;
                v191 = 0;
                if (!v30)
                  goto LABEL_43;
                v31 = *(_DWORD *)v30 - 2;
                if (*(_DWORD *)v30 == 2)
                {
                  WTF::StringImpl::destroy(v30, v113);
                  goto LABEL_43;
                }
              }
              *(_DWORD *)v30 = v31;
            }
LABEL_43:
            v32 = HIBYTE(v231);
            if (HIBYTE(v231) || !(_BYTE)v236)
            {
LABEL_54:
              if (v32)
                goto LABEL_55;
LABEL_56:
              v183 = a6;
              v221 = 0;
              WebCore::IDBObjectStoreInfo::isolatedCopy(v16, (uint64_t)&v190);
              if (v235 == -1)
              {
LABEL_268:
                std::__throw_bad_variant_access[abi:sn180100]();
                goto LABEL_272;
              }
              v240[0] = &v239;
              ((void (*)(_QWORD **__return_ptr, _QWORD *, double *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v235])(&v236, v240, v234);
              BYTE8(v195) = 0;
              LOBYTE(v196) = 0;
              DWORD2(v197) = -1;
              v38 = v238;
              if (v238 != -1)
              {
                ((void (*)(_QWORD *, uint64_t *, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v238])(v240, &v196, &v236);
                DWORD2(v197) = v38;
                if (v238 != -1)
                  ((void (*)(_QWORD *, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v238])(v240, &v236);
              }
              v198 = 0u;
              v199 = 0u;
              v200 = 0;
              WebCore::IDBValue::setAsIsolatedCopy((WebCore::IDBValue *)&v198, (unsigned int **)a4);
              v201 = &v221;
              v39 = WTF::fastMalloc((WTF *)0x98);
              v40 = v39;
              *(_QWORD *)v39 = off_1E335B060;
              *(_QWORD *)(v39 + 8) = v190;
              v41 = v191;
              v191 = 0;
              *(_QWORD *)(v39 + 16) = v41;
              *(_BYTE *)(v39 + 24) = 0;
              *(_BYTE *)(v39 + 48) = 0;
              v187 = (uint64_t *)a1;
              if ((_BYTE)v194)
              {
                *(_DWORD *)(v39 + 40) = -1;
                v42 = DWORD2(v193);
                if (DWORD2(v193) != -1)
                {
                  ((void (*)(_QWORD **, uint64_t, uint64_t *))off_1E335AE28[DWORD2(v193)])(&v236, v39 + 24, &v192);
                  *(_DWORD *)(v40 + 40) = v42;
                }
                *(_BYTE *)(v40 + 48) = 1;
              }
              v43 = BYTE8(v194);
              *(_BYTE *)(v40 + 80) = 0;
              *(_BYTE *)(v40 + 56) = v43;
              v44 = v195;
              *(_QWORD *)&v195 = 0;
              *(_QWORD *)(v40 + 64) = v44;
              *(_BYTE *)(v40 + 72) = BYTE8(v195);
              *(_DWORD *)(v40 + 96) = -1;
              v45 = DWORD2(v197);
              if (DWORD2(v197) != -1)
              {
                ((void (*)(_QWORD **))off_1E335ADE0[DWORD2(v197)])(&v236);
                *(_DWORD *)(v40 + 96) = v45;
              }
              *(_QWORD *)(v40 + 104) = v198;
              v46 = *((_QWORD *)&v198 + 1);
              v198 = 0uLL;
              *(_QWORD *)(v40 + 112) = v46;
              v47 = v199;
              *(_QWORD *)&v199 = 0;
              *(_QWORD *)(v40 + 120) = v47;
              v48 = *((_QWORD *)&v199 + 1);
              *((_QWORD *)&v199 + 1) = 0;
              *(_QWORD *)(v40 + 128) = v48;
              v49 = v200;
              v200 = 0;
              *(_QWORD *)(v40 + 136) = v49;
              *(_QWORD *)(v40 + 144) = v201;
              v236 = (_QWORD *)v40;
              WebCore::callOnIDBSerializationThreadAndWait((uint64_t *)&v236);
              v51 = (uint64_t)v236;
              v236 = 0;
              if (v51)
                (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
              WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v198, v50);
              if (DWORD2(v197) != -1)
                ((void (*)(_QWORD *, uint64_t *))off_1E335ACA8[DWORD2(v197)])(v240, &v196);
              DWORD2(v197) = -1;
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)&v190, v52);
              v227 = 0;
              v54 = WebCore::IDBServer::estimateSize((WebCore::IDBServer *)v233, v53);
              if (*(_QWORD *)a4)
                v55 = *(unsigned int *)(*(_QWORD *)a4 + 20) + 4;
              else
                v55 = 4;
              v56 = *(unsigned int *)(a4 + 20);
              if ((_DWORD)v56)
              {
                v57 = *(uint64_t **)(a4 + 8);
                v58 = 8 * v56;
                do
                {
                  v59 = *v57;
                  if (*v57)
                    LODWORD(v59) = *(_DWORD *)(v59 + 4) << ((*(_DWORD *)(v59 + 16) & 4) == 0);
                  v55 += v59;
                  ++v57;
                  v58 -= 8;
                }
                while (v58);
              }
              v60 = *(unsigned int *)(a4 + 36);
              if ((_DWORD)v60)
              {
                v61 = *(uint64_t **)(a4 + 24);
                v62 = 8 * v60;
                do
                {
                  v63 = *v61;
                  if (*v61)
                    LODWORD(v63) = *(_DWORD *)(v63 + 4) << ((*(_DWORD *)(v63 + 16) & 4) == 0);
                  v55 += v63;
                  ++v61;
                  v62 -= 8;
                }
                while (v62);
              }
              v184 = a4;
              v185 = a5;
              if (v221)
              {
                v64 = *(unsigned int *)(v221 - 4);
                v65 = v221 + 48 * v64;
                if (*(_DWORD *)(v221 - 12))
                {
                  v66 = v221;
                  if ((_DWORD)v64)
                  {
                    v67 = 48 * v64;
                    v66 = v221;
                    while ((unint64_t)(*(_QWORD *)v66 + 1) <= 1)
                    {
                      v66 += 48;
                      v67 -= 48;
                      if (!v67)
                      {
                        v66 = v65;
                        break;
                      }
                    }
                  }
LABEL_93:
                  if (v221)
                    v68 = v221 + 48 * *(unsigned int *)(v221 - 4);
                  else
                    v68 = 0;
                  v181 = a2;
                  v182 = v54;
                  v188 = v16;
                  v69 = 0;
                  if (v68 != v66)
                  {
                    v70 = v54 + 12;
                    do
                    {
                      v71 = v16[7];
                      if (!v71)
                        goto LABEL_120;
                      v72 = *(_DWORD *)(v71 - 8);
                      v73 = *(_QWORD *)v66 + ~(*(_QWORD *)v66 << 32);
                      v74 = (v73 ^ (v73 >> 22)) + ~((v73 ^ (v73 >> 22)) << 13);
                      v75 = (9 * (v74 ^ (v74 >> 8))) ^ ((9 * (v74 ^ (v74 >> 8))) >> 15);
                      v76 = v72 & (((v75 + ~(v75 << 27)) >> 31) ^ ((_DWORD)v75 + ~((_DWORD)v75 << 27)));
                      v77 = *(_QWORD *)(v71 + ((unint64_t)v76 << 6));
                      if (v77 != *(_QWORD *)v66)
                      {
                        v78 = 1;
                        while (v77)
                        {
                          v76 = ((_DWORD)v76 + v78) & v72;
                          v77 = *(_QWORD *)(v71 + ((unint64_t)v76 << 6));
                          ++v78;
                          if (v77 == *(_QWORD *)v66)
                            goto LABEL_105;
                        }
                        v76 = *(unsigned int *)(v71 - 4);
                      }
LABEL_105:
                      if (v76 != *(_DWORD *)(v71 - 4) && *(_BYTE *)(v71 + (v76 << 6) + 57))
                      {
                        v236 = 0;
                        v237 = 0;
                        v190 = (WTF::StringImpl *)&v236;
                        v191 = (WTF::StringImpl *)&v236;
                        v79 = *(unsigned int *)(v66 + 40);
                        if ((_DWORD)v79 == -1)
                          goto LABEL_268;
                        v240[0] = &v190;
                        ((void (*)(_QWORD *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore8IndexKey10multiEntryEvE3__0JZNKS9_10multiEntryEvE3__1ZNKS9_10multiEntryEvE3__2EEEEEJRKNS0_6__implIJDnNS8_10IDBKeyDataENS6_6VectorISG_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix
                                                                 + v79))(v240, v66 + 8);
                        v81 = (WebCore::IDBServer *)v236;
                        if (HIDWORD(v237))
                        {
                          v82 = 32 * HIDWORD(v237);
                          do
                          {
                            v69 += v70 + WebCore::IDBServer::estimateSize(v81, v80);
                            v81 = (WebCore::IDBServer *)((char *)v81 + 32);
                            v82 -= 32;
                          }
                          while (v82);
                          v81 = (WebCore::IDBServer *)v236;
                          if (HIDWORD(v237))
                          {
                            v83 = 32 * HIDWORD(v237);
                            v84 = v236 + 3;
                            do
                            {
                              v85 = *v84;
                              if ((_DWORD)v85 != -1)
                                ((void (*)(WTF::StringImpl **, _DWORD *))off_1E335ACA8[v85])(&v190, v84 - 4);
                              *v84 = -1;
                              v84 += 8;
                              v83 -= 32;
                            }
                            while (v83);
                            v81 = (WebCore::IDBServer *)v236;
                          }
                          v16 = v188;
                        }
                        if (v81)
                        {
                          v236 = 0;
                          LODWORD(v237) = 0;
                          WTF::fastFree(v81, v80);
                        }
                      }
                      else
                      {
LABEL_120:
                        v86 = *(unsigned int *)(v66 + 40);
                        if ((_DWORD)v86 == -1)
                          goto LABEL_268;
                        v236 = v240;
                        ((void (*)(WTF::StringImpl **__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore8IndexKey8asOneKeyEvE3__0JZNKS9_8asOneKeyEvE3__1ZNKS9_8asOneKeyEvE3__2EEEEEJRKNS0_6__implIJDnNS8_10IDBKeyDataENS6_6VectorISG_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v86])(&v190, &v236, v66 + 8);
                        v88 = WebCore::IDBServer::estimateSize((WebCore::IDBServer *)&v190, v87);
                        if ((_DWORD)v193 != -1)
                          ((void (*)(_QWORD **, WTF::StringImpl **))off_1E335ACA8[v193])(&v236, &v191);
                        v69 += v70 + v88;
                      }
                      v89 = v66 + 48;
                      v66 = v65;
                      if (v89 != v65)
                      {
                        v66 = v89;
                        while ((unint64_t)(*(_QWORD *)v66 + 1) <= 1)
                        {
                          v66 += 48;
                          if (v66 == v65)
                          {
                            v66 = v65;
                            break;
                          }
                        }
                      }
                    }
                    while (v66 != v68);
                  }
                  v90 = v187[1];
                  if (v90)
                    v189 = *(_QWORD *)(v90 + 8);
                  else
                    v189 = 0;
                  v91 = v185;
                  v92 = v184;
                  v93 = *v187;
                  v190 = (WTF::StringImpl *)v187;
                  if (v93)
                    goto LABEL_278;
                  v93 = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v93 = 1;
                  *(_QWORD *)(v93 + 8) = v187;
                  v95 = (unsigned int *)*v187;
                  *v187 = v93;
                  if (!v95)
                    goto LABEL_278;
                  do
                  {
                    v96 = __ldaxr(v95);
                    v97 = v96 - 1;
                  }
                  while (__stlxr(v97, v95));
                  if (!v97)
                  {
                    atomic_store(1u, v95);
                    WTF::fastFree((WTF *)v95, v94);
                  }
                  v93 = *v187;
                  if (*v187)
                  {
LABEL_278:
                    do
                      v98 = __ldaxr((unsigned int *)v93);
                    while (__stlxr(v98 + 1, (unsigned int *)v93));
                  }
                  v99 = *v181;
                  v191 = (WTF::StringImpl *)v93;
                  v192 = v99;
                  v193 = *(_OWORD *)(v181 + 1);
                  v194 = *v186;
                  v195 = *(_OWORD *)(v181 + 5);
                  v196 = v181[7];
                  v197 = *((_OWORD *)v181 + 4);
                  LOBYTE(v198) = *((_BYTE *)v181 + 80);
                  *((_QWORD *)&v198 + 1) = v181[11];
                  LOBYTE(v199) = *((_BYTE *)v181 + 96);
                  BYTE8(v199) = v233[0];
                  LOBYTE(v200) = 0;
                  v202 = -1;
                  v100 = v235;
                  if (v235 != -1)
                  {
                    ((void (*)(_QWORD **, uint64_t *, double *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v235])(&v236, &v200, v234);
                    v202 = v100;
                  }
                  v101 = *(unsigned int **)v184;
                  if (*(_QWORD *)v184)
                  {
                    do
                      v102 = __ldaxr(v101);
                    while (__stlxr(v102 + 1, v101));
                  }
                  v103 = *(unsigned int *)(v184 + 20);
                  v204 = 0;
                  v205 = 0;
                  v203 = v101;
                  v206 = v103;
                  if ((_DWORD)v103)
                  {
                    if (v103 >> 29)
                      goto LABEL_272;
                    v163 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v103));
                    v205 = v103;
                    v204 = (_DWORD **)v163;
                    v164 = *(unsigned int *)(v184 + 20);
                    if ((_DWORD)v164)
                    {
                      v165 = *(_DWORD ***)(v184 + 8);
                      v166 = 8 * v164;
                      v91 = v185;
                      v92 = v184;
                      do
                      {
                        v167 = *v165;
                        if (*v165)
                          *v167 += 2;
                        *v163++ = v167;
                        ++v165;
                        v166 -= 8;
                      }
                      while (v166);
                    }
                  }
                  v104 = *(unsigned int *)(v92 + 36);
                  v207 = 0;
                  v208 = 0;
                  v209 = v104;
                  if ((_DWORD)v104)
                  {
                    if (v104 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1953F4DBCLL);
                    }
                    v168 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v104));
                    v208 = v104;
                    v207 = (_DWORD **)v168;
                    v169 = *(unsigned int *)(v92 + 36);
                    if ((_DWORD)v169)
                    {
                      v170 = *(_DWORD ***)(v92 + 24);
                      v171 = 8 * v169;
                      v91 = v185;
                      do
                      {
                        v172 = *v170;
                        if (*v170)
                          *v172 += 2;
                        *v168++ = v172;
                        ++v170;
                        v171 -= 8;
                      }
                      while (v171);
                    }
                  }
                  v210 = v91;
                  v105 = *v183;
                  *v183 = 0;
                  v211 = v105;
                  v212 = v230;
                  v213 = 0;
                  if (!v221 || (v106 = *(unsigned int *)(v221 - 12), !(_DWORD)v106))
                  {
LABEL_194:
                    v138 = v188;
                    v214 = *v188;
                    v139 = (_DWORD *)v188[1];
                    if (v139)
                      *v139 += 2;
                    v215 = v139;
                    v216[0] = 0;
                    v218 = 0;
                    if (*((_BYTE *)v188 + 40))
                    {
                      v217 = -1;
                      v140 = *((unsigned int *)v188 + 8);
                      if ((_DWORD)v140 != -1)
                      {
                        ((void (*)(_QWORD **, char *, uint64_t *))off_1E335AC98[v140])(&v236, v216, v188 + 2);
                        v217 = v140;
                      }
                      v218 = 1;
                      v138 = v188;
                    }
                    v219 = *((_BYTE *)v138 + 48);
                    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable(&v220, v138 + 7);
                    v141 = WTF::fastMalloc((WTF *)0x128);
                    *(_QWORD *)v141 = off_1E335B088;
                    *(_QWORD *)(v141 + 8) = v190;
                    v142 = v191;
                    v191 = 0;
                    *(_QWORD *)(v141 + 16) = v142;
                    *(_QWORD *)(v141 + 24) = v192;
                    *(_OWORD *)(v141 + 32) = v193;
                    *(_OWORD *)(v141 + 48) = v194;
                    v143 = v195;
                    *(_QWORD *)(v141 + 80) = v196;
                    *(_OWORD *)(v141 + 64) = v143;
                    *(_OWORD *)(v141 + 88) = v197;
                    *(_BYTE *)(v141 + 104) = v198;
                    *(_QWORD *)(v141 + 112) = *((_QWORD *)&v198 + 1);
                    *(_BYTE *)(v141 + 120) = v199;
                    *(_BYTE *)(v141 + 128) = BYTE8(v199);
                    *(_BYTE *)(v141 + 136) = 0;
                    *(_DWORD *)(v141 + 152) = -1;
                    v144 = v202;
                    if (v202 != -1)
                    {
                      ((void (*)(_QWORD **, uint64_t, uint64_t *))off_1E335ADE0[v202])(&v236, v141 + 136, &v200);
                      *(_DWORD *)(v141 + 152) = v144;
                    }
                    v145 = v203;
                    if (v203)
                    {
                      do
                        v146 = __ldaxr(v145);
                      while (__stlxr(v146 + 1, v145));
                    }
                    *(_QWORD *)(v141 + 160) = v145;
                    v147 = v206;
                    *(_QWORD *)(v141 + 168) = 0;
                    *(_QWORD *)(v141 + 176) = 0;
                    *(_DWORD *)(v141 + 180) = v147;
                    if ((_DWORD)v147)
                    {
                      if (v147 >> 29)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1953F4DC4);
                      }
                      v173 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v147));
                      *(_DWORD *)(v141 + 176) = v147;
                      *(_QWORD *)(v141 + 168) = v173;
                      if (v206)
                      {
                        v174 = v204;
                        v175 = 8 * v206;
                        do
                        {
                          v176 = *v174;
                          if (*v174)
                            *v176 += 2;
                          *v173++ = v176;
                          ++v174;
                          v175 -= 8;
                        }
                        while (v175);
                      }
                    }
                    v148 = v209;
                    *(_QWORD *)(v141 + 184) = 0;
                    *(_QWORD *)(v141 + 192) = 0;
                    *(_DWORD *)(v141 + 196) = v148;
                    if (!(_DWORD)v148)
                      goto LABEL_206;
                    if (!(v148 >> 29))
                    {
                      v177 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v148));
                      *(_DWORD *)(v141 + 192) = v148;
                      *(_QWORD *)(v141 + 184) = v177;
                      if (v209)
                      {
                        v178 = v207;
                        v179 = 8 * v209;
                        do
                        {
                          v180 = *v178;
                          if (*v178)
                            *v180 += 2;
                          *v177++ = v180;
                          ++v178;
                          v179 -= 8;
                        }
                        while (v179);
                      }
LABEL_206:
                      v149 = v182 + v55 + v69 + 4;
                      v150 = v210;
                      *(_BYTE *)(v141 + 248) = 0;
                      *(_BYTE *)(v141 + 200) = v150;
                      *(_QWORD *)(v141 + 208) = v211;
                      *(_BYTE *)(v141 + 216) = v212;
                      v151 = v213;
                      v211 = 0;
                      v213 = 0;
                      *(_QWORD *)(v141 + 224) = v151;
                      *(_QWORD *)(v141 + 232) = v214;
                      v152 = v215;
                      v215 = 0;
                      *(_QWORD *)(v141 + 240) = v152;
                      *(_BYTE *)(v141 + 272) = 0;
                      if (v218)
                      {
                        *(_DWORD *)(v141 + 264) = -1;
                        v153 = v217;
                        if (v217 != -1)
                        {
                          ((void (*)(_QWORD **))off_1E335AE28[v217])(&v236);
                          *(_DWORD *)(v141 + 264) = v153;
                        }
                        *(_BYTE *)(v141 + 272) = 1;
                      }
                      *(_BYTE *)(v141 + 280) = v219;
                      v154 = v220;
                      v220 = 0;
                      *(_QWORD *)(v141 + 288) = v154;
                      v236 = (_QWORD *)v141;
                      (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD **))(*(_QWORD *)v189 + 56))(v189, v187 + 3, v149, &v236);
                      v156 = (uint64_t)v236;
                      v236 = 0;
                      if (v156)
                        (*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v156);
                      WebCore::IDBServer::UniqueIDBDatabase::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBKeyData const&)> &&)::$_2::~$_2((uint64_t)&v190, v155);
                      v157 = v221;
                      if (v221)
                      {
                        v158 = *(unsigned int *)(v221 - 4);
                        if ((_DWORD)v158)
                        {
                          v159 = (_DWORD *)(v221 + 40);
                          do
                          {
                            if (*((_QWORD *)v159 - 5) != -1)
                            {
                              v160 = *v159;
                              if ((_DWORD)v160 != -1)
                                ((void (*)(WTF::StringImpl **, _DWORD *))off_1E335ACF0[v160])(&v190, v159 - 8);
                              *v159 = -1;
                            }
                            v159 += 12;
                            --v158;
                          }
                          while (v158);
                        }
                        WTF::fastFree((WTF *)(v157 - 16), v36);
                      }
                      if (!v227)
                        goto LABEL_227;
                      v37 = v226;
LABEL_223:
                      if (*v37)
                      {
                        (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, __int128 *, uint64_t, unint64_t))(**((_QWORD **)v222 + 22) + 176))(&v190, *((_QWORD *)v222 + 22), &v223, v224, *v225);
                        v161 = v191;
                        v191 = 0;
                        if (v161)
                        {
                          if (*(_DWORD *)v161 == 2)
                            WTF::StringImpl::destroy(v161, (WTF::StringImpl *)v36);
                          else
                            *(_DWORD *)v161 -= 2;
                        }
                      }
LABEL_227:
                      result = v232;
                      v232 = 0;
                      if (result)
                      {
                        if (*(_DWORD *)result == 2)
                          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v36);
                        else
                          *(_DWORD *)result -= 2;
                      }
                      if (v235 != -1)
                        return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, double *))off_1E335ACA8[v235])(&v190, v234);
                      return result;
                    }
LABEL_272:
                    __break(0xC471u);
                    JUMPOUT(0x1953F4DB4);
                  }
                  v107 = (v106 - 1) | ((v106 - 1) >> 1) | ((((_DWORD)v106 - 1) | ((v106 - 1) >> 1)) >> 2);
                  v108 = v107 | (v107 >> 4) | ((v107 | (v107 >> 4)) >> 8);
                  v109 = (v108 | HIWORD(v108)) + 1;
                  if (v109 > 0x400)
                  {
                    if (v109 > 2 * v106)
                      goto LABEL_156;
                  }
                  else if (3 * v109 > 4 * v106)
                  {
LABEL_151:
                    v110 = (double)v106;
                    v111 = (double)v109;
                    v112 = 0.604166667;
                    goto LABEL_157;
                  }
                  LODWORD(v109) = 2 * v109;
                  if (v109 <= 0x400)
                    goto LABEL_151;
LABEL_156:
                  v110 = (double)v106;
                  v111 = (double)v109;
                  v112 = 0.416666667;
LABEL_157:
                  if (v111 * v112 <= v110)
                    LODWORD(v109) = 2 * v109;
                  if (v109 <= 8)
                    v114 = 8;
                  else
                    v114 = v109;
                  v115 = WTF::fastMalloc((WTF *)(48 * v114 + 16));
                  v116 = (_DWORD *)(v115 + 56);
                  v117 = v114;
                  do
                  {
                    *v116 = 0;
                    *((_QWORD *)v116 - 5) = 0;
                    *((_QWORD *)v116 - 4) = 0;
                    v116 += 12;
                    --v117;
                  }
                  while (v117);
                  v213 = v115 + 16;
                  *(_DWORD *)(v115 + 12) = v114;
                  *(_DWORD *)(v213 - 8) = v114 - 1;
                  *(_DWORD *)(v213 - 12) = v106;
                  *(_DWORD *)(v213 - 16) = 0;
                  if (v221)
                  {
                    v118 = *(unsigned int *)(v221 - 4);
                    v119 = v221 + 48 * v118;
                    if (*(_DWORD *)(v221 - 12))
                    {
                      v120 = v221;
                      if ((_DWORD)v118)
                      {
                        v121 = 48 * v118;
                        v120 = v221;
                        while ((unint64_t)(*(_QWORD *)v120 + 1) <= 1)
                        {
                          v120 += 48;
                          v121 -= 48;
                          if (!v121)
                          {
                            v120 = v119;
                            break;
                          }
                        }
                      }
LABEL_174:
                      if (v221)
                        v122 = v221 + 48 * *(unsigned int *)(v221 - 4);
                      else
                        v122 = 0;
                      if (v122 != v120)
                      {
                        while (1)
                        {
                          v123 = v213;
                          if (v213)
                            v124 = *(_DWORD *)(v213 - 8);
                          else
                            v124 = 0;
                          v125 = *(_QWORD *)v120 + ~(*(_QWORD *)v120 << 32);
                          v126 = (v125 ^ (v125 >> 22)) + ~((v125 ^ (v125 >> 22)) << 13);
                          v127 = (9 * (v126 ^ (v126 >> 8))) ^ ((9 * (v126 ^ (v126 >> 8))) >> 15);
                          v128 = v124 & (((v127 + ~(v127 << 27)) >> 31) ^ (v127 + ~((_DWORD)v127 << 27)));
                          v129 = 1;
                          do
                          {
                            v130 = v128;
                            v131 = (_QWORD *)(v213 + 48 * v128);
                            v128 = (v128 + v129++) & v124;
                          }
                          while (*v131);
                          *v131 = *(_QWORD *)v120;
                          v132 = v123 + 48 * v130;
                          v135 = *(_DWORD *)(v132 + 40);
                          v134 = (_DWORD *)(v132 + 40);
                          v133 = v135;
                          v136 = *(unsigned int *)(v120 + 40);
                          if (v135 == -1)
                          {
                            if ((_DWORD)v136 != -1)
                            {
LABEL_187:
                              v236 = v134 - 8;
                              ((void (*)(_QWORD **))off_1E335AE58[v136])(&v236);
                            }
                          }
                          else
                          {
                            if ((_DWORD)v136 != -1)
                              goto LABEL_187;
                            ((void (*)(_QWORD **, _DWORD *))off_1E335ACF0[v133])(&v236, v134 - 8);
                            *v134 = -1;
                          }
                          v137 = v120 + 48;
                          v120 = v119;
                          if (v137 != v119)
                          {
                            v120 = v137;
                            while ((unint64_t)(*(_QWORD *)v120 + 1) <= 1)
                            {
                              v120 += 48;
                              if (v120 == v119)
                              {
                                v120 = v119;
                                break;
                              }
                            }
                          }
                          if (v120 == v122)
                            goto LABEL_194;
                        }
                      }
                      goto LABEL_194;
                    }
                    v120 = v221 + 48 * v118;
                  }
                  else
                  {
                    v120 = 0;
                    LODWORD(v118) = 0;
                  }
                  v119 = v221 + 48 * v118;
                  goto LABEL_174;
                }
                v66 = v221 + 48 * v64;
              }
              else
              {
                v66 = 0;
                LODWORD(v64) = 0;
              }
              v65 = v221 + 48 * v64;
              goto LABEL_93;
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v34 = v190;
            if (v190)
              *(_DWORD *)v190 += 2;
            v231 = 281;
            v35 = v232;
            v232 = v34;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
              {
                WTF::StringImpl::destroy(v35, v33);
                if (v34)
                {
LABEL_51:
                  if (*(_DWORD *)v34 == 2)
                    WTF::StringImpl::destroy(v34, v33);
                  else
                    *(_DWORD *)v34 -= 2;
                }
LABEL_53:
                v32 = HIBYTE(v231);
                goto LABEL_54;
              }
              *(_DWORD *)v35 -= 2;
            }
            if (v34)
              goto LABEL_51;
            goto LABEL_53;
          }
          ((void (*)(WTF::StringImpl **, double *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v235])(&v190, v234);
        }
        v234[0] = v27;
        v235 = 4;
        goto LABEL_38;
      }
      LOWORD(v190) = 264;
      v191 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **, WebCore::IDBKeyData *))(*(_QWORD *)*a6 + 16))(*a6, &v190, a3);
      result = v191;
      v191 = 0;
      if (!result)
        return result;
LABEL_19:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
      *(_DWORD *)result -= 2;
      return result;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOWORD(v190) = 264;
  v21 = v222;
  if (v222)
    *(_DWORD *)v222 += 2;
  v191 = v21;
  (*(void (**)(uint64_t, WTF::StringImpl **, WebCore::IDBKeyData *))(*(_QWORD *)*a6 + 16))(*a6, &v190, a3);
  v22 = v191;
  v191 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v19);
    else
      *(_DWORD *)v22 -= 2;
  }
  result = v222;
  v222 = 0;
  if (result)
    goto LABEL_19;
  return result;
}

uint64_t WebCore::IDBServer::estimateSize(WebCore::IDBServer *this, const WebCore::IDBKeyData *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  WebCore::IDBServer *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  int v11;
  uint64_t v12;

  v2 = *((_DWORD *)this + 6);
  if (v2 == -1)
    v3 = -1;
  else
    v3 = *((unsigned int *)this + 6);
  v4 = 4;
  switch(v3)
  {
    case 0:
    case 1:
    case 4:
    case 5:
    case 7:
    case 8:
      return v4;
    case 2:
      if (v2 != 2)
        goto LABEL_20;
      v6 = *((unsigned int *)this + 5);
      if (!(_DWORD)v6)
        goto LABEL_18;
      v7 = (WebCore::IDBServer *)*((_QWORD *)this + 1);
      v8 = 32 * v6;
      v4 = 4;
      do
      {
        v4 += WebCore::IDBServer::estimateSize(v7, a2);
        v7 = (WebCore::IDBServer *)((char *)v7 + 32);
        v8 -= 32;
      }
      while (v8);
      break;
    case 3:
      if (v2 != 3)
        goto LABEL_20;
      v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
      if (!v9)
        goto LABEL_18;
      v10 = *(_DWORD *)v9;
      v11 = *((_DWORD *)v9 + 1);
      *(_DWORD *)v9 += 2;
      v4 = (v11 << (((*((_DWORD *)v9 + 4) >> 2) & 1) == 0)) + 4;
      if (v10)
        *(_DWORD *)v9 = v10;
      else
        WTF::StringImpl::destroy(v9, a2);
      break;
    case 6:
      if (v2 != 6)
      {
LABEL_20:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_21:
        __break(0xC471u);
        JUMPOUT(0x1953F4EE4);
      }
      v12 = *((_QWORD *)this + 1);
      if (v12)
        v4 = *(unsigned int *)(v12 + 20) + 4;
      else
LABEL_18:
        v4 = 4;
      break;
    default:
      goto LABEL_21;
  }
  return v4;
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBKeyData const&)> &&)::$_2::~$_2(uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char v15;
  char v16;

  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 224), a2);
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (_DWORD *)(v4 + 40);
      do
      {
        if (*((_QWORD *)v6 - 5) != -1)
        {
          v7 = *v6;
          if ((_DWORD)v7 != -1)
            ((void (*)(char *, _DWORD *))off_1E335ACF0[v7])(&v15, v6 - 8);
          *v6 = -1;
        }
        v6 += 12;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  v8 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(a1 + 152), (WTF::StringImpl *)v3);
  v10 = *(unsigned int *)(a1 + 144);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v10])(&v16, a1 + 128);
  *(_DWORD *)(a1 + 144) = -1;
  v11 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v9);
    }
  }
  return a1;
}

void WebCore::IDBServer::UniqueIDBDatabase::getRecord(uint64_t *a1, uint64_t *a2, char *a3, _QWORD *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  __int128 v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  _QWORD v44[2];
  __int128 v45;
  WTF *v46[2];
  _BYTE v47[40];
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55[8];
  uint64_t v56;
  uint64_t v57;
  char v58;
  _BYTE v59[16];
  int v60;
  __int16 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;

  if (!a5)
  {
    v11 = a1[1];
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *a1;
        v46[0] = (WTF *)a1;
        if (v13)
          goto LABEL_55;
        v13 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v13 = 1;
        *(_QWORD *)(v13 + 8) = a1;
        v15 = (unsigned int *)*a1;
        *a1 = v13;
        if (!v15)
          goto LABEL_55;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, v14);
        }
        v13 = *a1;
        if (*a1)
        {
LABEL_55:
          do
            v18 = __ldaxr((unsigned int *)v13);
          while (__stlxr(v18 + 1, (unsigned int *)v13));
        }
        v19 = *a2;
        v46[1] = (WTF *)v13;
        *(_QWORD *)v47 = v19;
        *(_OWORD *)&v47[8] = *(_OWORD *)(a2 + 1);
        *(_OWORD *)&v47[24] = *(_OWORD *)(a2 + 3);
        v48 = *(_OWORD *)(a2 + 5);
        v49 = a2[7];
        v50 = *((_OWORD *)a2 + 4);
        LOBYTE(v51) = *((_BYTE *)a2 + 80);
        v52 = a2[11];
        v53 = *((_BYTE *)a2 + 96);
        v54 = *a3;
        v55[0] = 0;
        LODWORD(v57) = -1;
        v20 = *((unsigned int *)a3 + 6);
        if ((_DWORD)v20 != -1)
        {
          ((void (*)(uint64_t *, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v20])(&v64, v55, a3 + 8);
          LODWORD(v57) = v20;
        }
        v58 = a3[32];
        v59[0] = 0;
        v60 = -1;
        v21 = *((unsigned int *)a3 + 14);
        if ((_DWORD)v21 != -1)
        {
          ((void (*)(uint64_t *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v21])(&v64, v59, a3 + 40);
          v60 = v21;
        }
        v61 = *((_WORD *)a3 + 32);
        v62 = a3[72];
        v22 = *a4;
        *a4 = 0;
        v63 = v22;
        v23 = WTF::fastMalloc((WTF *)0xD8);
        *(_QWORD *)v23 = &off_1E335B0B0;
        *(WTF **)(v23 + 8) = v46[0];
        v24 = v46[1];
        v46[1] = 0;
        *(_QWORD *)(v23 + 16) = v24;
        *(_QWORD *)(v23 + 24) = *(_QWORD *)v47;
        *(_OWORD *)(v23 + 32) = *(_OWORD *)&v47[8];
        *(_OWORD *)(v23 + 48) = *(_OWORD *)&v47[24];
        v25 = v48;
        *(_QWORD *)(v23 + 80) = v49;
        *(_OWORD *)(v23 + 64) = v25;
        *(_OWORD *)(v23 + 88) = v50;
        *(_BYTE *)(v23 + 104) = v51;
        *(_QWORD *)(v23 + 112) = v52;
        *(_BYTE *)(v23 + 120) = v53;
        *(_BYTE *)(v23 + 128) = v54;
        *(_BYTE *)(v23 + 136) = 0;
        *(_DWORD *)(v23 + 152) = -1;
        v26 = v57;
        if ((_DWORD)v57 != -1)
        {
          ((void (*)(uint64_t *, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v57])(&v64, v23 + 136, v55);
          *(_DWORD *)(v23 + 152) = v26;
        }
        v27 = v58;
        *(_BYTE *)(v23 + 168) = 0;
        *(_BYTE *)(v23 + 160) = v27;
        *(_DWORD *)(v23 + 184) = -1;
        v28 = v60;
        if (v60 != -1)
        {
          ((void (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v60])(&v64);
          *(_DWORD *)(v23 + 184) = v28;
        }
        *(_WORD *)(v23 + 192) = v61;
        *(_BYTE *)(v23 + 200) = v62;
        v29 = v63;
        v63 = 0;
        *(_QWORD *)(v23 + 208) = v29;
        v64 = v23;
        (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t *))(*(_QWORD *)v12 + 56))(v12, a1 + 3, 0, &v64);
        v31 = v64;
        v64 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        v32 = v63;
        v63 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if (v60 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E335ACA8[v60])(&v45, v59);
        v60 = -1;
        if ((_DWORD)v57 != -1)
          ((void (*)(__int128 *, char *))off_1E335ACA8[v57])(&v45, v55);
        LODWORD(v57) = -1;
        v33 = (unsigned int *)v46[1];
        v46[1] = 0;
        if (v33)
        {
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            atomic_store(1u, v33);
            WTF::fastFree((WTF *)v33, v30);
          }
        }
        return;
      }
    }
    LOWORD(v64) = 264;
    v65 = 0;
    *(_QWORD *)&v47[32] = 0;
    DWORD2(v48) = 0;
    LOBYTE(v49) = 0;
    *(_QWORD *)&v50 = 0;
    v51 = 0;
    LOBYTE(v52) = 0;
    v55[0] = 0;
    v58 = 0;
    v56 = 0;
    v57 = 0;
    *(_OWORD *)v46 = 0u;
    memset(v47, 0, 25);
    (*(void (**)(_QWORD, uint64_t *, WTF **))(*(_QWORD *)*a4 + 16))(*a4, &v64, v46);
    WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v46, v41);
    v40 = v65;
    v65 = 0;
    if (!v40)
      return;
LABEL_42:
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v38);
    else
      *(_DWORD *)v40 -= 2;
    return;
  }
  v9 = a1[22];
  if (v9)
  {
    *(_QWORD *)&v47[32] = 0;
    DWORD2(v48) = 0;
    LOBYTE(v49) = 0;
    *(_QWORD *)&v50 = 0;
    v51 = 0;
    LOBYTE(v52) = 0;
    v55[0] = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    *(_OWORD *)v46 = 0u;
    memset(v47, 0, 25);
    v45 = *(_OWORD *)(a2 + 3);
    v10 = a2[9];
    if (v10)
      (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, char *, WTF **))(*(_QWORD *)v9 + 152))(v44, v9, &v45, a2[8], v10, *((unsigned __int8 *)a2 + 80), a3, v46);
    else
      (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v9 + 136))(v44, v9, &v45, a2[8], a3, a3[72], v46);
    LOWORD(v64) = v44[0];
    v65 = (WTF::StringImpl *)v44[1];
    (*(void (**)(_QWORD, uint64_t *, WTF **))(*(_QWORD *)*a4 + 16))(*a4, &v64, v46);
    v43 = v65;
    v65 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v42);
      else
        *(_DWORD *)v43 -= 2;
    }
    WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v46, v42);
    return;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOWORD(v64) = 264;
  v36 = (WTF::StringImpl *)v45;
  if ((_QWORD)v45)
    *(_DWORD *)v45 += 2;
  v65 = v36;
  *(_QWORD *)&v47[32] = 0;
  DWORD2(v48) = 0;
  LOBYTE(v49) = 0;
  *(_QWORD *)&v50 = 0;
  v51 = 0;
  LOBYTE(v52) = 0;
  v55[0] = 0;
  v58 = 0;
  v56 = 0;
  v57 = 0;
  *(_OWORD *)v46 = 0u;
  memset(v47, 0, 25);
  (*(void (**)(_QWORD, uint64_t *, WTF **))(*(_QWORD *)*a4 + 16))(*a4, &v64, v46);
  WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v46, v37);
  v39 = v65;
  v65 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = (WTF::StringImpl *)v45;
  *(_QWORD *)&v45 = 0;
  if (v40)
    goto LABEL_42;
}

WTF *WebCore::IDBServer::UniqueIDBDatabase::getAllRecords(uint64_t *a1, uint64_t a2, char *a3, _QWORD *a4, int a5)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebCore::IDBValue *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF *result;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  __int128 v35;
  int v36;
  char v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WebCore::IDBValue *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WebCore::IDBValue *v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  WTF *v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  __int128 v64;
  WTF *v65[9];
  uint64_t v66;
  __int128 v67;
  char v68;
  uint64_t v69;
  char v70;
  char v71;
  _BYTE v72[16];
  int v73;
  char v74;
  _BYTE v75[16];
  int v76;
  __int16 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  _BYTE v83[9];

  if (a5)
  {
    v9 = a1[22];
    if (v9)
    {
      LOBYTE(v65[0]) = 0;
      LOBYTE(v65[8]) = 0;
      memset(&v65[1], 0, 33);
      v64 = *(_OWORD *)(a2 + 24);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *, char *, WTF **))(*(_QWORD *)v9 + 144))(&v81, v9, &v64, a3, v65);
      (*(void (**)(_QWORD, uint64_t *, WTF **))(*(_QWORD *)*a4 + 16))(*a4, &v81, v65);
      v11 = v82;
      v82 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      if (LOBYTE(v65[8]))
      {
        if (LODWORD(v65[7]) != -1)
          ((void (*)(uint64_t *, WTF **))off_1E335AC88[LODWORD(v65[7])])(&v81, &v65[5]);
        LODWORD(v65[7]) = -1;
      }
      if (HIDWORD(v65[4]))
      {
        v12 = v65[3];
        v13 = 40 * HIDWORD(v65[4]);
        do
        {
          WebCore::IDBValue::~IDBValue(v12, v10);
          v12 = (WebCore::IDBValue *)(v14 + 40);
          v13 -= 40;
        }
        while (v13);
      }
      v15 = v65[3];
      if (v65[3])
      {
        v65[3] = 0;
        LODWORD(v65[4]) = 0;
        WTF::fastFree(v15, v10);
      }
      result = v65[1];
      if (HIDWORD(v65[2]))
      {
        v17 = 32 * HIDWORD(v65[2]);
        v18 = (_DWORD *)((char *)v65[1] + 24);
        do
        {
          v19 = *v18;
          if ((_DWORD)v19 != -1)
            ((void (*)(uint64_t *, _DWORD *))off_1E335ACA8[v19])(&v81, v18 - 4);
          *v18 = -1;
          v18 += 8;
          v17 -= 32;
        }
        while (v17);
        result = v65[1];
      }
      if (result)
      {
        v65[1] = 0;
        LODWORD(v65[2]) = 0;
        return (WTF *)WTF::fastFree(result, v10);
      }
      return result;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOWORD(v81) = 264;
    v45 = (WTF::StringImpl *)v64;
    if ((_QWORD)v64)
      *(_DWORD *)v64 += 2;
    v82 = v45;
    memset(v65, 0, sizeof(v65));
    (*(void (**)(_QWORD, uint64_t *, WTF **))(*(_QWORD *)*a4 + 16))(*a4, &v81, v65);
    if (LOBYTE(v65[8]))
    {
      if (LODWORD(v65[7]) != -1)
        ((void (*)(_BYTE *, WTF **))off_1E335AC88[LODWORD(v65[7])])(v83, &v65[5]);
      LODWORD(v65[7]) = -1;
    }
    if (HIDWORD(v65[4]))
    {
      v47 = v65[3];
      v48 = 40 * HIDWORD(v65[4]);
      do
      {
        WebCore::IDBValue::~IDBValue(v47, v46);
        v47 = (WebCore::IDBValue *)(v49 + 40);
        v48 -= 40;
      }
      while (v48);
    }
    v50 = v65[3];
    if (v65[3])
    {
      v65[3] = 0;
      LODWORD(v65[4]) = 0;
      WTF::fastFree(v50, v46);
    }
    v51 = v65[1];
    if (HIDWORD(v65[2]))
    {
      v52 = 32 * HIDWORD(v65[2]);
      v53 = (_DWORD *)((char *)v65[1] + 24);
      do
      {
        v54 = *v53;
        if ((_DWORD)v54 != -1)
          ((void (*)(_BYTE *, _DWORD *))off_1E335ACA8[v54])(v83, v53 - 4);
        *v53 = -1;
        v53 += 8;
        v52 -= 32;
      }
      while (v52);
      v51 = v65[1];
    }
    if (v51)
    {
      v65[1] = 0;
      LODWORD(v65[2]) = 0;
      WTF::fastFree(v51, v46);
    }
    v55 = v82;
    v82 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v46);
      else
        *(_DWORD *)v55 -= 2;
    }
    result = (WTF *)v64;
    *(_QWORD *)&v64 = 0;
    if (!result)
      return result;
LABEL_95:
    if (*(_DWORD *)result == 2)
      return (WTF *)WTF::StringImpl::destroy(result, v46);
    *(_DWORD *)result -= 2;
    return result;
  }
  v20 = a1[1];
  if (!v20 || (v21 = *(_QWORD *)(v20 + 8)) == 0)
  {
    LOWORD(v81) = 264;
    v82 = 0;
    memset(v65, 0, sizeof(v65));
    (*(void (**)(_QWORD, uint64_t *, WTF **))(*(_QWORD *)*a4 + 16))(*a4, &v81, v65);
    if (LOBYTE(v65[8]))
    {
      if (LODWORD(v65[7]) != -1)
        ((void (*)(__int128 *, WTF **))off_1E335AC88[LODWORD(v65[7])])(&v64, &v65[5]);
      LODWORD(v65[7]) = -1;
    }
    if (HIDWORD(v65[4]))
    {
      v56 = v65[3];
      v57 = 40 * HIDWORD(v65[4]);
      do
      {
        WebCore::IDBValue::~IDBValue(v56, v46);
        v56 = (WebCore::IDBValue *)(v58 + 40);
        v57 -= 40;
      }
      while (v57);
    }
    v59 = v65[3];
    if (v65[3])
    {
      v65[3] = 0;
      LODWORD(v65[4]) = 0;
      WTF::fastFree(v59, v46);
    }
    v60 = v65[1];
    if (HIDWORD(v65[2]))
    {
      v61 = 32 * HIDWORD(v65[2]);
      v62 = (_DWORD *)((char *)v65[1] + 24);
      do
      {
        v63 = *v62;
        if ((_DWORD)v63 != -1)
          ((void (*)(__int128 *, _DWORD *))off_1E335ACA8[v63])(&v64, v62 - 4);
        *v62 = -1;
        v62 += 8;
        v61 -= 32;
      }
      while (v61);
      v60 = v65[1];
    }
    if (v60)
    {
      v65[1] = 0;
      LODWORD(v65[2]) = 0;
      WTF::fastFree(v60, v46);
    }
    result = v82;
    v82 = 0;
    if (!result)
      return result;
    goto LABEL_95;
  }
  v22 = *a1;
  v65[0] = (WTF *)a1;
  if (v22)
    goto LABEL_103;
  v22 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v22 = 1;
  *(_QWORD *)(v22 + 8) = a1;
  v24 = (unsigned int *)*a1;
  *a1 = v22;
  if (!v24)
    goto LABEL_103;
  do
  {
    v25 = __ldaxr(v24);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v24));
  if (!v26)
  {
    atomic_store(1u, v24);
    WTF::fastFree((WTF *)v24, v23);
  }
  v22 = *a1;
  if (*a1)
  {
LABEL_103:
    do
      v27 = __ldaxr((unsigned int *)v22);
    while (__stlxr(v27 + 1, (unsigned int *)v22));
  }
  v28 = *(WTF **)a2;
  v65[1] = (WTF *)v22;
  v65[2] = v28;
  *(_OWORD *)&v65[3] = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v65[5] = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&v65[7] = *(_OWORD *)(a2 + 40);
  v66 = *(_QWORD *)(a2 + 56);
  v67 = *(_OWORD *)(a2 + 64);
  v68 = *(_BYTE *)(a2 + 80);
  v69 = *(_QWORD *)(a2 + 88);
  v70 = *(_BYTE *)(a2 + 96);
  v71 = *a3;
  v72[0] = 0;
  v73 = -1;
  v29 = *((unsigned int *)a3 + 6);
  if ((_DWORD)v29 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v29])(&v81, v72, a3 + 8);
    v73 = v29;
  }
  v74 = a3[32];
  v75[0] = 0;
  v76 = -1;
  v30 = *((unsigned int *)a3 + 14);
  if ((_DWORD)v30 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v30])(&v81, v75, a3 + 40);
    v76 = v30;
  }
  v77 = *((_WORD *)a3 + 32);
  v31 = *(_OWORD *)(a3 + 88);
  v78 = *(_OWORD *)(a3 + 72);
  v79 = v31;
  v32 = *a4;
  *a4 = 0;
  v80 = v32;
  v33 = WTF::fastMalloc((WTF *)0xF0);
  *(_QWORD *)v33 = &off_1E335B0D8;
  *(WTF **)(v33 + 8) = v65[0];
  v34 = v65[1];
  v65[1] = 0;
  *(_QWORD *)(v33 + 16) = v34;
  *(WTF **)(v33 + 24) = v65[2];
  *(_OWORD *)(v33 + 32) = *(_OWORD *)&v65[3];
  *(_OWORD *)(v33 + 48) = *(_OWORD *)&v65[5];
  v35 = *(_OWORD *)&v65[7];
  *(_QWORD *)(v33 + 80) = v66;
  *(_OWORD *)(v33 + 64) = v35;
  *(_OWORD *)(v33 + 88) = v67;
  *(_BYTE *)(v33 + 104) = v68;
  *(_QWORD *)(v33 + 112) = v69;
  *(_BYTE *)(v33 + 120) = v70;
  *(_BYTE *)(v33 + 128) = v71;
  *(_BYTE *)(v33 + 136) = 0;
  *(_DWORD *)(v33 + 152) = -1;
  v36 = v73;
  if (v73 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v73])(&v81, v33 + 136, v72);
    *(_DWORD *)(v33 + 152) = v36;
  }
  v37 = v74;
  *(_BYTE *)(v33 + 168) = 0;
  *(_BYTE *)(v33 + 160) = v37;
  *(_DWORD *)(v33 + 184) = -1;
  v38 = v76;
  if (v76 != -1)
  {
    ((void (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v76])(&v81);
    *(_DWORD *)(v33 + 184) = v38;
  }
  *(_WORD *)(v33 + 192) = v77;
  v39 = v79;
  *(_OWORD *)(v33 + 200) = v78;
  *(_OWORD *)(v33 + 216) = v39;
  v40 = v80;
  v80 = 0;
  *(_QWORD *)(v33 + 232) = v40;
  v81 = v33;
  (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t *))(*(_QWORD *)v21 + 56))(v21, a1 + 3, 0, &v81);
  v41 = v81;
  v81 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = v80;
  v80 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  if (v76 != -1)
    ((void (*)(__int128 *, _BYTE *))off_1E335ACA8[v76])(&v64, v75);
  v76 = -1;
  if (v73 != -1)
    ((void (*)(__int128 *, _BYTE *))off_1E335ACA8[v73])(&v64, v72);
  v73 = -1;
  result = v65[1];
  v65[1] = 0;
  if (result)
  {
    do
    {
      v43 = __ldaxr((unsigned int *)result);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, (unsigned int *)result));
    if (!v44)
    {
      atomic_store(1u, (unsigned int *)result);
      return (WTF *)WTF::fastFree(result, v10);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabase::getCount(uint64_t *a1, uint64_t *a2, char *a3, _QWORD *a4, int a5)
{
  uint64_t v9;
  void (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  __int128 v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *result;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  _BYTE v53[16];
  int v54;
  char v55;
  _BYTE v56[16];
  int v57;
  __int16 v58;
  uint64_t v59;

  if (a5)
  {
    v9 = a1[22];
    if (v9)
    {
      v40 = 0;
      v39 = *(_OWORD *)(a2 + 3);
      (*(void (**)(uint64_t **__return_ptr, uint64_t, __int128 *, uint64_t, uint64_t, char *, uint64_t *))(*(_QWORD *)v9 + 160))(&v41, v9, &v39, a2[8], a2[9], a3, &v40);
      v10 = *(void (**)(void))(*(_QWORD *)*a4 + 16);
      goto LABEL_41;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOWORD(v41) = 264;
    v36 = (WTF::StringImpl *)v39;
    if ((_QWORD)v39)
      *(_DWORD *)v39 += 2;
    v42 = v36;
    (*(void (**)(_QWORD, uint64_t **, _QWORD))(*(_QWORD *)*a4 + 16))(*a4, &v41, 0);
    v38 = v42;
    v42 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v37);
      else
        *(_DWORD *)v38 -= 2;
    }
    result = (WTF::StringImpl *)v39;
    *(_QWORD *)&v39 = 0;
    if (result)
    {
LABEL_42:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v11 = a1[1];
    if (!v11 || (v12 = *(_QWORD *)(v11 + 8)) == 0)
    {
      LOWORD(v41) = 264;
      v42 = 0;
      v10 = *(void (**)(void))(*(_QWORD *)*a4 + 16);
LABEL_41:
      v10();
      result = v42;
      v42 = 0;
      if (!result)
        return result;
      goto LABEL_42;
    }
    v13 = *a1;
    v41 = a1;
    if (v13)
      goto LABEL_49;
    v13 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = a1;
    v15 = (unsigned int *)*a1;
    *a1 = v13;
    if (!v15)
      goto LABEL_49;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v14);
    }
    v13 = *a1;
    if (*a1)
    {
LABEL_49:
      do
        v18 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v18 + 1, (unsigned int *)v13));
    }
    v19 = *a2;
    v42 = (WTF::StringImpl *)v13;
    v43 = v19;
    v44 = *(_OWORD *)(a2 + 1);
    v45 = *(_OWORD *)(a2 + 3);
    v46 = *(_OWORD *)(a2 + 5);
    v47 = a2[7];
    v48 = *((_OWORD *)a2 + 4);
    v49 = *((_BYTE *)a2 + 80);
    v50 = a2[11];
    v51 = *((_BYTE *)a2 + 96);
    v52 = *a3;
    v53[0] = 0;
    v54 = -1;
    v20 = *((unsigned int *)a3 + 6);
    if ((_DWORD)v20 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v20])(&v39, v53, a3 + 8);
      v54 = v20;
    }
    v55 = a3[32];
    v56[0] = 0;
    v57 = -1;
    v21 = *((unsigned int *)a3 + 14);
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v21])(&v39, v56, a3 + 40);
      v57 = v21;
    }
    v58 = *((_WORD *)a3 + 32);
    v22 = *a4;
    *a4 = 0;
    v59 = v22;
    v23 = WTF::fastMalloc((WTF *)0xD0);
    *(_QWORD *)v23 = &off_1E335B100;
    *(_QWORD *)(v23 + 8) = v41;
    v24 = v42;
    v42 = 0;
    *(_QWORD *)(v23 + 16) = v24;
    *(_QWORD *)(v23 + 24) = v43;
    *(_OWORD *)(v23 + 32) = v44;
    *(_OWORD *)(v23 + 48) = v45;
    v25 = v46;
    *(_QWORD *)(v23 + 80) = v47;
    *(_OWORD *)(v23 + 64) = v25;
    *(_OWORD *)(v23 + 88) = v48;
    *(_BYTE *)(v23 + 104) = v49;
    *(_QWORD *)(v23 + 112) = v50;
    *(_BYTE *)(v23 + 120) = v51;
    *(_BYTE *)(v23 + 128) = v52;
    *(_BYTE *)(v23 + 136) = 0;
    *(_DWORD *)(v23 + 152) = -1;
    v26 = v54;
    if (v54 != -1)
    {
      ((void (*)(__int128 *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v54])(&v39, v23 + 136, v53);
      *(_DWORD *)(v23 + 152) = v26;
    }
    v27 = v55;
    *(_BYTE *)(v23 + 168) = 0;
    *(_BYTE *)(v23 + 160) = v27;
    *(_DWORD *)(v23 + 184) = -1;
    v28 = v57;
    if (v57 != -1)
    {
      ((void (*)(__int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v57])(&v39);
      *(_DWORD *)(v23 + 184) = v28;
    }
    *(_WORD *)(v23 + 192) = v58;
    v29 = v59;
    v59 = 0;
    *(_QWORD *)(v23 + 200) = v29;
    *(_QWORD *)&v39 = v23;
    (*(void (**)(uint64_t, uint64_t *, _QWORD, __int128 *))(*(_QWORD *)v12 + 56))(v12, a1 + 3, 0, &v39);
    v31 = v39;
    *(_QWORD *)&v39 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v59;
    v59 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    if (v57 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E335ACA8[v57])(&v40, v56);
    v57 = -1;
    if (v54 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E335ACA8[v54])(&v40, v53);
    v54 = -1;
    result = v42;
    v42 = 0;
    if (result)
    {
      do
      {
        v34 = __ldaxr((unsigned int *)result);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, (unsigned int *)result));
      if (!v35)
      {
        atomic_store(1u, (unsigned int *)result);
        return (WTF::StringImpl *)WTF::fastFree(result, v30);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabase::deleteRecord(uint64_t *a1, uint64_t *a2, char *a3, _QWORD *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  __int128 v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *result;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  uint64_t *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  _BYTE v52[16];
  int v53;
  char v54;
  _BYTE v55[16];
  int v56;
  __int16 v57;
  uint64_t v58;
  _BYTE v59[9];

  if (a5)
  {
    v9 = a1[22];
    if (v9)
    {
      v39 = *(_OWORD *)(a2 + 3);
      (*(void (**)(uint64_t **__return_ptr, uint64_t, __int128 *, uint64_t, char *))(*(_QWORD *)v9 + 120))(&v40, v9, &v39, a2[8], a3);
      goto LABEL_41;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOWORD(v40) = 264;
    v36 = (WTF::StringImpl *)v39;
    if ((_QWORD)v39)
      *(_DWORD *)v39 += 2;
    v41 = v36;
    (*(void (**)(_QWORD, uint64_t **))(*(_QWORD *)*a4 + 16))(*a4, &v40);
    v38 = v41;
    v41 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v37);
      else
        *(_DWORD *)v38 -= 2;
    }
    result = (WTF::StringImpl *)v39;
    *(_QWORD *)&v39 = 0;
    if (result)
    {
LABEL_42:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v10 = a1[1];
    if (!v10 || (v11 = *(_QWORD *)(v10 + 8)) == 0)
    {
      LOWORD(v40) = 264;
      v41 = 0;
LABEL_41:
      (*(void (**)(_QWORD, uint64_t **))(*(_QWORD *)*a4 + 16))(*a4, &v40);
      result = v41;
      v41 = 0;
      if (!result)
        return result;
      goto LABEL_42;
    }
    v12 = *a1;
    v40 = a1;
    if (v12)
      goto LABEL_49;
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = a1;
    v14 = (unsigned int *)*a1;
    *a1 = v12;
    if (!v14)
      goto LABEL_49;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v13);
    }
    v12 = *a1;
    if (*a1)
    {
LABEL_49:
      do
        v17 = __ldaxr((unsigned int *)v12);
      while (__stlxr(v17 + 1, (unsigned int *)v12));
    }
    v18 = *a2;
    v41 = (WTF::StringImpl *)v12;
    v42 = v18;
    v19 = *(_OWORD *)(a2 + 3);
    v43 = *(_OWORD *)(a2 + 1);
    v44 = v19;
    v45 = *(_OWORD *)(a2 + 5);
    v46 = a2[7];
    v47 = *((_OWORD *)a2 + 4);
    v48 = *((_BYTE *)a2 + 80);
    v49 = a2[11];
    v50 = *((_BYTE *)a2 + 96);
    v51 = *a3;
    v52[0] = 0;
    v53 = -1;
    v20 = *((unsigned int *)a3 + 6);
    if ((_DWORD)v20 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v20])(&v39, v52, a3 + 8);
      v53 = v20;
    }
    v54 = a3[32];
    v55[0] = 0;
    v56 = -1;
    v21 = *((unsigned int *)a3 + 14);
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v21])(&v39, v55, a3 + 40);
      v56 = v21;
    }
    v57 = *((_WORD *)a3 + 32);
    v22 = *a4;
    *a4 = 0;
    v58 = v22;
    v23 = WTF::fastMalloc((WTF *)0xD0);
    *(_QWORD *)v23 = &off_1E335B128;
    *(_QWORD *)(v23 + 8) = v40;
    v24 = v41;
    v41 = 0;
    *(_QWORD *)(v23 + 16) = v24;
    *(_QWORD *)(v23 + 24) = v42;
    *(_OWORD *)(v23 + 32) = v43;
    *(_OWORD *)(v23 + 48) = v44;
    v25 = v45;
    *(_QWORD *)(v23 + 80) = v46;
    *(_OWORD *)(v23 + 64) = v25;
    *(_OWORD *)(v23 + 88) = v47;
    *(_BYTE *)(v23 + 104) = v48;
    *(_QWORD *)(v23 + 112) = v49;
    *(_BYTE *)(v23 + 120) = v50;
    *(_BYTE *)(v23 + 128) = v51;
    *(_BYTE *)(v23 + 136) = 0;
    *(_DWORD *)(v23 + 152) = -1;
    v26 = v53;
    if (v53 != -1)
    {
      ((void (*)(__int128 *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v53])(&v39, v23 + 136, v52);
      *(_DWORD *)(v23 + 152) = v26;
    }
    v27 = v54;
    *(_BYTE *)(v23 + 168) = 0;
    *(_BYTE *)(v23 + 160) = v27;
    *(_DWORD *)(v23 + 184) = -1;
    v28 = v56;
    if (v56 != -1)
    {
      ((void (*)(__int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v56])(&v39);
      *(_DWORD *)(v23 + 184) = v28;
    }
    *(_WORD *)(v23 + 192) = v57;
    v29 = v58;
    v58 = 0;
    *(_QWORD *)(v23 + 200) = v29;
    *(_QWORD *)&v39 = v23;
    (*(void (**)(uint64_t, uint64_t *, _QWORD, __int128 *))(*(_QWORD *)v11 + 56))(v11, a1 + 3, 0, &v39);
    v31 = v39;
    *(_QWORD *)&v39 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v58;
    v58 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    if (v56 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E335ACA8[v56])(v59, v55);
    v56 = -1;
    if (v53 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E335ACA8[v53])(v59, v52);
    v53 = -1;
    result = v41;
    v41 = 0;
    if (result)
    {
      do
      {
        v34 = __ldaxr((unsigned int *)result);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, (unsigned int *)result));
      if (!v35)
      {
        atomic_store(1u, (unsigned int *)result);
        return (WTF::StringImpl *)WTF::fastFree(result, v30);
      }
    }
  }
  return result;
}

void WebCore::IDBServer::UniqueIDBDatabase::openCursor(uint64_t *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, int a5)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  __int128 v46;
  WTF *v47[2];
  _BYTE v48[40];
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  _BYTE v59[16];
  int v60;
  char v61;
  _BYTE v62[16];
  int v63;
  __int16 v64;
  __int16 v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;

  if (!a5)
  {
    v12 = a1[1];
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = *a1;
        v47[0] = (WTF *)a1;
        if (v14)
          goto LABEL_52;
        v14 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v14 = 1;
        *(_QWORD *)(v14 + 8) = a1;
        v16 = (unsigned int *)*a1;
        *a1 = v14;
        if (!v16)
          goto LABEL_52;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v16);
          WTF::fastFree((WTF *)v16, v15);
        }
        v14 = *a1;
        if (*a1)
        {
LABEL_52:
          do
            v19 = __ldaxr((unsigned int *)v14);
          while (__stlxr(v19 + 1, (unsigned int *)v14));
        }
        *(_OWORD *)&v48[8] = *(_OWORD *)(a2 + 1);
        *(_OWORD *)&v48[24] = *(_OWORD *)(a2 + 3);
        v49 = *(_OWORD *)(a2 + 5);
        v51 = *((_OWORD *)a2 + 4);
        v20 = a3[1];
        v55 = *a3;
        v21 = *a2;
        v47[1] = (WTF *)v14;
        *(_QWORD *)v48 = v21;
        v50 = a2[7];
        LOBYTE(v52) = *((_BYTE *)a2 + 80);
        v53 = a2[11];
        v54 = *((_BYTE *)a2 + 96);
        v56 = v20;
        v57 = a3[2];
        v58 = *((_BYTE *)a3 + 48);
        v59[0] = 0;
        v60 = -1;
        v22 = *((unsigned int *)a3 + 18);
        if ((_DWORD)v22 != -1)
        {
          ((void (*)(uint64_t *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v22])(&v68, v59, (char *)a3 + 56);
          v60 = v22;
        }
        v61 = *((_BYTE *)a3 + 80);
        v62[0] = 0;
        v63 = -1;
        v23 = *((unsigned int *)a3 + 26);
        if ((_DWORD)v23 != -1)
        {
          ((void (*)(uint64_t *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v23])(&v68, v62, (char *)a3 + 88);
          v63 = v23;
        }
        v64 = *((_WORD *)a3 + 56);
        v65 = *((_WORD *)a3 + 60);
        v66 = *((_BYTE *)a3 + 122);
        v24 = *a4;
        *a4 = 0;
        v67 = v24;
        v25 = WTF::fastMalloc((WTF *)0x108);
        *(_QWORD *)v25 = &off_1E335B150;
        *(WTF **)(v25 + 8) = v47[0];
        v26 = v47[1];
        v47[1] = 0;
        *(_QWORD *)(v25 + 16) = v26;
        *(_QWORD *)(v25 + 24) = *(_QWORD *)v48;
        *(_OWORD *)(v25 + 32) = *(_OWORD *)&v48[8];
        *(_OWORD *)(v25 + 48) = *(_OWORD *)&v48[24];
        v27 = v49;
        *(_QWORD *)(v25 + 80) = v50;
        *(_OWORD *)(v25 + 64) = v27;
        *(_OWORD *)(v25 + 88) = v51;
        *(_BYTE *)(v25 + 104) = v52;
        *(_QWORD *)(v25 + 112) = v53;
        *(_BYTE *)(v25 + 120) = v54;
        v28 = v55;
        v29 = v57;
        *(_OWORD *)(v25 + 144) = v56;
        *(_OWORD *)(v25 + 160) = v29;
        *(_OWORD *)(v25 + 128) = v28;
        *(_BYTE *)(v25 + 176) = v58;
        *(_BYTE *)(v25 + 184) = 0;
        *(_DWORD *)(v25 + 200) = -1;
        v30 = v60;
        if (v60 != -1)
        {
          ((void (*)(uint64_t *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v60])(&v68, v25 + 184, v59);
          *(_DWORD *)(v25 + 200) = v30;
        }
        v31 = v61;
        *(_BYTE *)(v25 + 216) = 0;
        *(_BYTE *)(v25 + 208) = v31;
        *(_DWORD *)(v25 + 232) = -1;
        v32 = v63;
        if (v63 != -1)
        {
          ((void (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v63])(&v68);
          *(_DWORD *)(v25 + 232) = v32;
        }
        *(_WORD *)(v25 + 240) = v64;
        *(_WORD *)(v25 + 248) = v65;
        *(_BYTE *)(v25 + 250) = v66;
        v33 = v67;
        v67 = 0;
        *(_QWORD *)(v25 + 256) = v33;
        v68 = v25;
        (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a1 + 3, 0, &v68);
        v35 = v68;
        v68 = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v36 = v67;
        v67 = 0;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        if (v63 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E335ACA8[v63])(&v46, v62);
        v63 = -1;
        if (v60 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E335ACA8[v60])(&v46, v59);
        v60 = -1;
        v37 = (unsigned int *)v47[1];
        v47[1] = 0;
        if (v37)
        {
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            atomic_store(1u, v37);
            WTF::fastFree((WTF *)v37, v34);
          }
        }
        return;
      }
    }
    LOWORD(v68) = 264;
    v69 = 0;
    *(_QWORD *)&v48[32] = 0;
    DWORD2(v49) = 0;
    LOBYTE(v50) = 0;
    *(_QWORD *)&v51 = 0;
    v52 = 0;
    LOBYTE(v53) = 0;
    BYTE8(v55) = 0;
    LOBYTE(v57) = 0;
    v56 = 0uLL;
    *(_OWORD *)v47 = 0u;
    memset(v48, 0, 25);
    (*(void (**)(_QWORD, uint64_t *, WTF **))(*(_QWORD *)*a4 + 16))(*a4, &v68, v47);
    WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v47, v45);
    v44 = v69;
    v69 = 0;
    if (!v44)
      return;
LABEL_44:
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v42);
    else
      *(_DWORD *)v44 -= 2;
    return;
  }
  v9 = a1[22];
  if (v9)
  {
    *(_QWORD *)&v48[32] = 0;
    DWORD2(v49) = 0;
    LOBYTE(v50) = 0;
    *(_QWORD *)&v51 = 0;
    v52 = 0;
    LOBYTE(v53) = 0;
    BYTE8(v55) = 0;
    v56 = 0uLL;
    LOBYTE(v57) = 0;
    *(_OWORD *)v47 = 0u;
    memset(v48, 0, 25);
    v46 = *(_OWORD *)(a2 + 3);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *, __int128 *, WTF **))(*(_QWORD *)v9 + 192))(&v68, v9, &v46, a3, v47);
    (*(void (**)(_QWORD, uint64_t *, WTF **))(*(_QWORD *)*a4 + 16))(*a4, &v68, v47);
    v11 = v69;
    v69 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v47, v10);
    return;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOWORD(v68) = 264;
  v40 = (WTF::StringImpl *)v46;
  if ((_QWORD)v46)
    *(_DWORD *)v46 += 2;
  v69 = v40;
  *(_QWORD *)&v48[32] = 0;
  DWORD2(v49) = 0;
  LOBYTE(v50) = 0;
  *(_QWORD *)&v51 = 0;
  v52 = 0;
  LOBYTE(v53) = 0;
  BYTE8(v55) = 0;
  LOBYTE(v57) = 0;
  v56 = 0uLL;
  *(_OWORD *)v47 = 0u;
  memset(v48, 0, 25);
  (*(void (**)(_QWORD, uint64_t *, WTF **))(*(_QWORD *)*a4 + 16))(*a4, &v68, v47);
  WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v47, v41);
  v43 = v69;
  v69 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v42);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = (WTF::StringImpl *)v46;
  *(_QWORD *)&v46 = 0;
  if (v44)
    goto LABEL_44;
}

void WebCore::IDBServer::UniqueIDBDatabase::iterateCursor(WTF *a1, uint64_t *a2, char *a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  __int128 v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  _QWORD *v42;
  __int128 v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF *v46[2];
  _BYTE v47[40];
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55[8];
  uint64_t v56;
  uint64_t v57;
  char v58;
  _BYTE v59[16];
  int v60;
  int v61;
  char v62;
  uint64_t v63;
  _OWORD v64[2];

  if (!a5)
  {
    v14 = *((_QWORD *)a1 + 1);
    if (v14)
    {
      v5 = *(_QWORD *)(v14 + 8);
      if (v5)
      {
        v15 = *(WTF **)a1;
        v42 = (_QWORD *)((char *)a1 + 24);
        v46[0] = a1;
        if (v15)
          goto LABEL_15;
        v15 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v15 = 1;
        *((_QWORD *)v15 + 1) = a1;
        v11 = *(WTF **)a1;
        *(_QWORD *)a1 = v15;
        if (!v11)
          goto LABEL_15;
        do
        {
          v16 = __ldaxr((unsigned int *)v11);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, (unsigned int *)v11));
        if (v17)
        {
LABEL_14:
          v15 = *(WTF **)a1;
          if (!*(_QWORD *)a1)
          {
LABEL_16:
            v19 = *a2;
            v46[1] = v15;
            *(_QWORD *)v47 = v19;
            *(_OWORD *)&v47[8] = *(_OWORD *)(a2 + 1);
            *(_OWORD *)&v47[24] = *(_OWORD *)(a2 + 3);
            v48 = *(_OWORD *)(a2 + 5);
            v49 = a2[7];
            v50 = *((_OWORD *)a2 + 4);
            LOBYTE(v51) = *((_BYTE *)a2 + 80);
            v52 = a2[11];
            v53 = *((_BYTE *)a2 + 96);
            v54 = *a3;
            v55[0] = 0;
            LODWORD(v57) = -1;
            v20 = *((unsigned int *)a3 + 6);
            if ((_DWORD)v20 != -1)
            {
              ((void (*)(_OWORD *, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v20])(v64, v55, a3 + 8);
              LODWORD(v57) = v20;
            }
            v58 = a3[32];
            v59[0] = 0;
            v60 = -1;
            v21 = *((unsigned int *)a3 + 14);
            if ((_DWORD)v21 != -1)
            {
              ((void (*)(_OWORD *, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v21])(v64, v59, a3 + 40);
              v60 = v21;
            }
            v61 = *((_DWORD *)a3 + 16);
            v62 = a3[68];
            v22 = *a4;
            *a4 = 0;
            v63 = v22;
            v23 = WTF::fastMalloc((WTF *)0xD0);
            *(_QWORD *)v23 = &off_1E335B178;
            *(WTF **)(v23 + 8) = v46[0];
            v24 = v46[1];
            v46[1] = 0;
            *(_QWORD *)(v23 + 16) = v24;
            *(_QWORD *)(v23 + 24) = *(_QWORD *)v47;
            *(_OWORD *)(v23 + 32) = *(_OWORD *)&v47[8];
            *(_OWORD *)(v23 + 48) = *(_OWORD *)&v47[24];
            v25 = v48;
            *(_QWORD *)(v23 + 80) = v49;
            *(_OWORD *)(v23 + 64) = v25;
            *(_OWORD *)(v23 + 88) = v50;
            *(_BYTE *)(v23 + 104) = v51;
            *(_QWORD *)(v23 + 112) = v52;
            *(_BYTE *)(v23 + 120) = v53;
            *(_BYTE *)(v23 + 128) = v54;
            *(_BYTE *)(v23 + 136) = 0;
            *(_DWORD *)(v23 + 152) = -1;
            v26 = v57;
            if ((_DWORD)v57 != -1)
            {
              ((void (*)(_OWORD *, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v57])(v64, v23 + 136, v55);
              *(_DWORD *)(v23 + 152) = v26;
            }
            v27 = v58;
            *(_BYTE *)(v23 + 168) = 0;
            *(_BYTE *)(v23 + 160) = v27;
            *(_DWORD *)(v23 + 184) = -1;
            v28 = v60;
            if (v60 != -1)
            {
              ((void (*)(_OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v60])(v64);
              *(_DWORD *)(v23 + 184) = v28;
            }
            *(_DWORD *)(v23 + 192) = v61;
            *(_BYTE *)(v23 + 196) = v62;
            v29 = v63;
            v63 = 0;
            *(_QWORD *)(v23 + 200) = v29;
            *(_QWORD *)&v64[0] = v23;
            (*(void (**)(uint64_t, _QWORD *, _QWORD, _OWORD *))(*(_QWORD *)v5 + 56))(v5, v42, 0, v64);
            v31 = *(_QWORD *)&v64[0];
            *(_QWORD *)&v64[0] = 0;
            if (v31)
              (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            v32 = v63;
            v63 = 0;
            if (v32)
              (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            if (v60 != -1)
              ((void (*)(WTF::StringImpl **, _BYTE *))off_1E335ACA8[v60])(&v44, v59);
            v60 = -1;
            if ((_DWORD)v57 != -1)
              ((void (*)(WTF::StringImpl **, char *))off_1E335ACA8[v57])(&v44, v55);
            LODWORD(v57) = -1;
            v33 = (unsigned int *)v46[1];
            v46[1] = 0;
            if (v33)
            {
              do
              {
                v34 = __ldaxr(v33);
                v35 = v34 - 1;
              }
              while (__stlxr(v35, v33));
              if (!v35)
              {
                atomic_store(1u, v33);
                WTF::fastFree((WTF *)v33, v30);
              }
            }
            return;
          }
          do
LABEL_15:
            v18 = __ldaxr((unsigned int *)v15);
          while (__stlxr(v18 + 1, (unsigned int *)v15));
          goto LABEL_16;
        }
LABEL_51:
        atomic_store(1u, (unsigned int *)v11);
        WTF::fastFree(v11, a2);
        goto LABEL_14;
      }
    }
    LOWORD(v64[0]) = 264;
    *((_QWORD *)&v64[0] + 1) = 0;
    *(_QWORD *)&v47[32] = 0;
    DWORD2(v48) = 0;
    LOBYTE(v49) = 0;
    *(_QWORD *)&v50 = 0;
    v51 = 0;
    LOBYTE(v52) = 0;
    v55[0] = 0;
    v58 = 0;
    v56 = 0;
    v57 = 0;
    *(_OWORD *)v46 = 0u;
    memset(v47, 0, 25);
    (*(void (**)(_QWORD, _OWORD *, WTF **))(*(_QWORD *)*a4 + 16))(*a4, v64, v46);
    WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v46, v41);
    v40 = (WTF::StringImpl *)*((_QWORD *)&v64[0] + 1);
    *((_QWORD *)&v64[0] + 1) = 0;
    if (!v40)
      return;
LABEL_44:
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v38);
    else
      *(_DWORD *)v40 -= 2;
    return;
  }
  v10 = *((_QWORD *)a1 + 22);
  if (v10)
  {
    *(_QWORD *)&v47[32] = 0;
    DWORD2(v48) = 0;
    LOBYTE(v49) = 0;
    *(_QWORD *)&v50 = 0;
    v51 = 0;
    LOBYTE(v52) = 0;
    v55[0] = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    *(_OWORD *)v46 = 0u;
    memset(v47, 0, 25);
    v11 = (WTF *)*((unsigned __int8 *)a2 + 56);
    if (*((_BYTE *)a2 + 56))
    {
      v64[0] = *(_OWORD *)(a2 + 5);
      v43 = *(_OWORD *)(a2 + 3);
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, __int128 *, _OWORD *, char *, WTF **))(*(_QWORD *)v10 + 200))(&v44, v10, &v43, v64, a3, v46);
      (*(void (**)(_QWORD, WTF::StringImpl **, WTF **))(*(_QWORD *)*a4 + 16))(*a4, &v44, v46);
      v13 = v45;
      v45 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v46, v12);
      return;
    }
    __break(1u);
    goto LABEL_51;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOWORD(v64[0]) = 264;
  v36 = v44;
  if (v44)
    *(_DWORD *)v44 += 2;
  *((_QWORD *)&v64[0] + 1) = v36;
  *(_QWORD *)&v47[32] = 0;
  DWORD2(v48) = 0;
  LOBYTE(v49) = 0;
  *(_QWORD *)&v50 = 0;
  v51 = 0;
  LOBYTE(v52) = 0;
  v55[0] = 0;
  v58 = 0;
  v56 = 0;
  v57 = 0;
  *(_OWORD *)v46 = 0u;
  memset(v47, 0, 25);
  (*(void (**)(_QWORD, _OWORD *, WTF **))(*(_QWORD *)*a4 + 16))(*a4, v64, v46);
  WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v46, v37);
  v39 = (WTF::StringImpl *)*((_QWORD *)&v64[0] + 1);
  *((_QWORD *)&v64[0] + 1) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = v44;
  v44 = 0;
  if (v40)
    goto LABEL_44;
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabase::commitTransaction(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4, int a5)
{
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  WTF::StringImpl *result;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  int i;
  _QWORD *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  _QWORD *v49;
  WTF *v50;
  void *v51;
  WTF::StringImpl *v52;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v53;
  _BYTE buf[22];
  __int16 v55;
  unint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11 || (v12 = *(_QWORD *)(v11 + 8)) == 0)
    {
      *(_WORD *)buf = 264;
      *(_QWORD *)&buf[8] = 0;
      (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*a4 + 16))(*a4, buf);
      result = *(WTF::StringImpl **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (!result)
        return result;
      goto LABEL_57;
    }
    v13 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      goto LABEL_69;
    v13 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = a1;
    v15 = *(unsigned int **)a1;
    *(_QWORD *)a1 = v13;
    if (!v15)
      goto LABEL_69;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v14);
    }
    v13 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
LABEL_69:
      do
        v18 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v18 + 1, (unsigned int *)v13));
    }
    v19 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      goto LABEL_70;
    v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = a2;
    v21 = *(unsigned int **)a2;
    *(_QWORD *)a2 = v19;
    if (!v21)
      goto LABEL_70;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v20);
    }
    v19 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
LABEL_70:
      do
        v24 = __ldaxr((unsigned int *)v19);
      while (__stlxr(v24 + 1, (unsigned int *)v19));
    }
    v25 = *a4;
    *a4 = 0;
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
    *v26 = &off_1E335B1A0;
    v26[1] = a1;
    v26[2] = a3;
    v26[3] = v13;
    v26[4] = v19;
    v26[5] = v25;
    *(_QWORD *)buf = v26;
    (*(void (**)(uint64_t, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v12 + 56))(v12, a1 + 24, 0, buf);
    result = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (!result)
      return result;
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  v9 = *(unsigned int *)(a2 + 140);
  if (v9 >= a3)
  {
    if (v9 == a3)
      goto LABEL_27;
    v29 = (unsigned __int8 *)(*(_QWORD *)(a2 + 128) + 16 * a3 + 1);
    v30 = 16 * v9 - 16 * a3;
    while (1)
    {
      v31 = *v29;
      v29 += 16;
      if (v31)
        break;
      v30 -= 16;
      if (!v30)
        goto LABEL_27;
    }
    v48 = *a4;
    *a4 = 0;
    v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v49 = &off_1E335B1C8;
    v49[1] = v48;
    *(_QWORD *)buf = v49;
    WebCore::IDBServer::UniqueIDBDatabase::abortTransaction((uint64_t *)a1, (uint64_t *)a2, buf, a5);
    result = *(WTF::StringImpl **)buf;
    if (!*(_QWORD *)buf)
      return result;
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  v10 = qword_1ECE7C338;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C338, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = a2;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a3;
    v55 = 2048;
    v56 = v9;
    _os_log_error_impl(&dword_1940B8000, v10, OS_LOG_TYPE_ERROR, "%p - UniqueIDBDatabaseTransaction::shouldAbortDueToUnhandledRequestError: finished request count (%llu) is bigger than total request count %zu", buf, 0x20u);
  }
LABEL_27:
  if (*(_QWORD *)(a1 + 176))
  {
    result = (WTF::StringImpl *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::take((uint64_t *)&v53, (uint64_t *)(a1 + 232), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
    v32 = v53;
    if (v53)
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 48))(buf, *(_QWORD *)(a1 + 176), a2 + 24);
      (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*a4 + 16))(*a4, buf);
      WebCore::IDBServer::UniqueIDBDatabase::transactionCompleted((uint64_t *)a1, &v53);
      result = *(WTF::StringImpl **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v33);
        else
          *(_DWORD *)result -= 2;
      }
      if (*((_DWORD *)v32 + 2) == 1)
      {
        WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v32, v33);
        return (WTF::StringImpl *)WTF::fastFree(v50, v51);
      }
      else
      {
        --*((_DWORD *)v32 + 2);
      }
      return result;
    }
    v37 = *(_QWORD *)(a2 + 16);
    if (v37)
    {
      v38 = *(_QWORD *)(v37 + 8);
      if (v38)
      {
        v39 = *(_QWORD *)(a1 + 136);
        if (!v39)
          return result;
        v40 = *(_DWORD *)(v39 - 8);
        v41 = (~(v38 << 32) + v38) ^ ((unint64_t)(~(v38 << 32) + v38) >> 22);
        v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
        v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
        v44 = v40 & ((v43 >> 31) ^ v43);
        for (i = 1; ; ++i)
        {
          v46 = *(_QWORD **)(v39 + 8 * v44);
          if (v46 != (_QWORD *)-1)
          {
            if (!v46)
              return result;
            if (*v46 == v38)
              break;
          }
          v44 = (v44 + i) & v40;
        }
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)buf = 280;
    if (v52)
      *(_DWORD *)v52 += 2;
    *(_QWORD *)&buf[8] = v52;
    (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*a4 + 16))(*a4, buf);
    v47 = *(WTF::StringImpl **)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v34);
      else
        *(_DWORD *)v47 -= 2;
    }
    result = v52;
    if (v52)
    {
LABEL_57:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v34);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_WORD *)buf = 264;
    v35 = v53;
    if (v53)
      *(_DWORD *)v53 += 2;
    *(_QWORD *)&buf[8] = v35;
    (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*a4 + 16))(*a4, buf);
    v36 = *(WTF::StringImpl **)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v34);
      else
        *(_DWORD *)v36 -= 2;
    }
    result = v53;
    v53 = 0;
    if (result)
      goto LABEL_57;
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabase::abortTransaction(uint64_t *a1, uint64_t *a2, _QWORD *a3, int a4)
{
  _OWORD *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int i;
  _QWORD *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  __int128 v44;
  WTF::StringImpl *v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WebCore::IDBObjectStoreInfo *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF *v56;
  void *v57;
  WTF::StringImpl *v58[2];
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61[2];
  char v62;
  WTF::StringImpl **v63;

  if (a4)
  {
    v7 = a2 + 3;
    result = (WTF::StringImpl *)WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::take((uint64_t *)&v63, a1 + 29, a2[3], a2[4]);
    v10 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v63;
    if (v63)
    {
      if (*((_BYTE *)v63 + 120))
      {
        LOWORD(v61[0]) = *((_WORD *)v63 + 52);
        v11 = v63[14];
        if (v11)
          *(_DWORD *)v11 += 2;
        v61[1] = v11;
        v62 = 1;
        (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a3 + 16))(*a3, v61);
        result = WebCore::IDBServer::UniqueIDBDatabase::transactionCompleted(a1, (WebCore::IDBServer::UniqueIDBDatabaseTransaction **)&v63);
        if (v62)
        {
          result = v61[1];
          v61[1] = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
            else
              *(_DWORD *)result -= 2;
          }
        }
LABEL_75:
        if (*((_DWORD *)v10 + 2) == 1)
        {
          WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v10, v9);
          return (WTF::StringImpl *)WTF::fastFree(v56, v57);
        }
        else
        {
          --*((_DWORD *)v10 + 2);
        }
        return result;
      }
      *(_OWORD *)v61 = *v7;
      v38 = a1[21];
      if (v38)
      {
        if (*(WTF::StringImpl **)(v38 + 24) == v61[0] && *(WTF::StringImpl **)(v38 + 32) == v61[1])
        {
          v40 = *(_QWORD *)(v38 + 80);
          v41 = bmalloc::api::isoAllocate();
          v42 = v41;
          v43 = *(_DWORD **)v40;
          if (*(_QWORD *)v40)
            *v43 += 2;
          *(_QWORD *)v41 = v43;
          v44 = *(_OWORD *)(v40 + 8);
          *(_QWORD *)(v41 + 24) = *(_QWORD *)(v40 + 24);
          *(_OWORD *)(v41 + 8) = v44;
          WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)(v41 + 32), (_QWORD *)(v40 + 32));
          v46 = (WTF::StringImpl **)a1[23];
          a1[23] = v42;
          if (v46)
          {
            v47 = v46[4];
            if (v47)
            {
              v48 = *((unsigned int *)v47 - 1);
              if ((_DWORD)v48)
              {
                v49 = (WTF::StringImpl *)((char *)v47 + 8);
                do
                {
                  if (*((_QWORD *)v49 - 1) != -1)
                    WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v49, v45);
                  v49 = (WebCore::IDBObjectStoreInfo *)((char *)v49 + 72);
                  --v48;
                }
                while (v48);
              }
              WTF::fastFree((WTF::StringImpl *)((char *)v47 - 16), v45);
            }
            v50 = *v46;
            *v46 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
                WTF::StringImpl::destroy(v50, v45);
              else
                *(_DWORD *)v50 -= 2;
            }
            bmalloc::api::isoDeallocate((bmalloc::api *)v46, v45);
          }
        }
      }
      v51 = a1[22];
      if (v51)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v51 + 40))(v58, v51, v61);
        LOWORD(v59) = v58[0];
        v60 = v58[1];
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v55 = v58[0];
        if (v58[0])
        {
          *(_DWORD *)v58[0] += 2;
          LOWORD(v59) = 264;
          v60 = v55;
          v58[0] = 0;
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v54);
          else
            *(_DWORD *)v55 -= 2;
        }
        else
        {
          LOWORD(v59) = 264;
          v60 = 0;
        }
      }
      (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a3 + 16))(*a3, &v59);
      WebCore::IDBServer::UniqueIDBDatabase::transactionCompleted(a1, (WebCore::IDBServer::UniqueIDBDatabaseTransaction **)&v63);
      result = v60;
      v60 = 0;
      if (result)
        goto LABEL_72;
      goto LABEL_74;
    }
    v28 = a2[2];
    if (v28)
      v28 = *(_QWORD *)(v28 + 8);
    v29 = a1[17];
    if (v29)
    {
      v30 = *(_DWORD *)(v29 - 8);
      v31 = (~(v28 << 32) + v28) ^ ((unint64_t)(~(v28 << 32) + v28) >> 22);
      v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
      v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
      v34 = v30 & ((v33 >> 31) ^ v33);
      for (i = 1; ; ++i)
      {
        v36 = *(_QWORD **)(v29 + 8 * v34);
        if (v36 != (_QWORD *)-1)
        {
          if (!v36)
            goto LABEL_74;
          if (*v36 == v28)
            break;
        }
        v34 = (v34 + i) & v30;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOWORD(v61[0]) = 280;
      v52 = v59;
      if (v59)
        *(_DWORD *)v59 += 2;
      v61[1] = v52;
      (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a3 + 16))(*a3, v61);
      v53 = v61[1];
      v61[1] = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v9);
        else
          *(_DWORD *)v53 -= 2;
      }
      result = v59;
      v59 = 0;
      if (result)
      {
LABEL_72:
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
          if (!v10)
            return result;
          goto LABEL_75;
        }
        *(_DWORD *)result -= 2;
      }
LABEL_74:
      if (!v10)
        return result;
      goto LABEL_75;
    }
  }
  else
  {
    v12 = a1[1];
    if (v12 && (v13 = *(_QWORD *)(v12 + 8)) != 0)
    {
      v14 = *a1;
      if (*a1)
        goto LABEL_89;
      v14 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = a1;
      v16 = (unsigned int *)*a1;
      *a1 = v14;
      if (!v16)
        goto LABEL_89;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v15);
      }
      v14 = *a1;
      if (*a1)
      {
LABEL_89:
        do
          v19 = __ldaxr((unsigned int *)v14);
        while (__stlxr(v19 + 1, (unsigned int *)v14));
      }
      v20 = *a2;
      if (*a2)
        goto LABEL_90;
      v20 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = a2;
      v22 = (unsigned int *)*a2;
      *a2 = v20;
      if (!v22)
        goto LABEL_90;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
      v20 = *a2;
      if (*a2)
      {
LABEL_90:
        do
          v25 = __ldaxr((unsigned int *)v20);
        while (__stlxr(v25 + 1, (unsigned int *)v20));
      }
      v26 = *a3;
      *a3 = 0;
      v27 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v27 = &off_1E335B1F0;
      *((_QWORD *)v27 + 1) = a1;
      *((_QWORD *)v27 + 2) = v14;
      *((_QWORD *)v27 + 3) = v20;
      *((_QWORD *)v27 + 4) = v26;
      v61[0] = v27;
      (*(void (**)(uint64_t, uint64_t *, _QWORD, WTF::StringImpl **))(*(_QWORD *)v13 + 56))(v13, a1 + 3, 0, v61);
      result = v61[0];
      v61[0] = 0;
      if (result)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      LOWORD(v61[0]) = 264;
      v61[1] = 0;
      (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a3 + 16))(*a3, v61);
      result = v61[1];
      v61[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::take(uint64_t *result, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v4 = result;
  v5 = *a2;
  if (!*a2)
    goto LABEL_10;
  result = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*a2, a3, a4);
  v7 = *(_DWORD *)(v5 - 4);
  if (!result)
    result = (uint64_t *)(v5 + 24 * v7);
  if ((uint64_t *)(v5 + 24 * v7) == result)
  {
LABEL_10:
    *v4 = 0;
  }
  else
  {
    v8 = result[2];
    result[2] = 0;
    *v4 = v8;
    v9 = *a2;
    if (!*a2 || (v9 += 24 * *(unsigned int *)(v9 - 4), (uint64_t *)v9 != result))
    {
      if ((uint64_t *)v9 != result)
      {
        *result = -1;
        result[2] = 0;
        ++*(_DWORD *)(*a2 - 16);
        v10 = *a2;
        v11 = *a2 ? *(_DWORD *)(v10 - 12) - 1 : -1;
        *(_DWORD *)(v10 - 12) = v11;
        v12 = *a2;
        if (*a2)
        {
          v13 = 6 * *(_DWORD *)(v12 - 12);
          v14 = *(_DWORD *)(v12 - 4);
          if (v13 < v14 && v14 >= 9)
            return (uint64_t *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a2, v14 >> 1, 0);
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabase::transactionCompleted(uint64_t *a1, WebCore::IDBServer::UniqueIDBDatabaseTransaction **a2)
{
  char **v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v52;
  WTF *v54;
  void *v55;

  v4 = WebCore::IDBServer::UniqueIDBDatabaseTransaction::objectStoreIdentifiers(*a2);
  v6 = *((unsigned int *)v4 + 3);
  if ((_DWORD)v6)
  {
    v7 = *v4;
    v8 = (uint64_t)&(*v4)[8 * v6];
    v9 = a1 + 31;
    do
    {
      v10 = *(_QWORD *)v7;
      v11 = ~(*(_QWORD *)v7 << 32);
      if (*((_BYTE *)*a2 + 40))
      {
        v12 = *v9;
        if (*v9)
        {
          v13 = *(_DWORD *)(v12 - 8);
          v14 = ((v10 + v11) ^ ((unint64_t)(v10 + v11) >> 22))
              + ~(((v10 + v11) ^ ((unint64_t)(v10 + v11) >> 22)) << 13);
          v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
          v16 = v13 & (((v15 + ~(v15 << 27)) >> 31) ^ ((_DWORD)v15 + ~((_DWORD)v15 << 27)));
          v17 = *(_QWORD *)(v12 + 8 * v16);
          if (v17 != v10)
          {
            v18 = 1;
            while (v17)
            {
              v16 = ((_DWORD)v16 + v18) & v13;
              v17 = *(_QWORD *)(v12 + 8 * v16);
              ++v18;
              if (v17 == v10)
                goto LABEL_11;
            }
            v16 = *(unsigned int *)(v12 - 4);
          }
LABEL_11:
          if (v16 != *(_DWORD *)(v12 - 4))
          {
            *(_QWORD *)(v12 + 8 * v16) = -1;
            ++*(_DWORD *)(*v9 - 16);
            v19 = *v9;
            v20 = *v9 ? *(_DWORD *)(v19 - 12) - 1 : -1;
            *(_DWORD *)(v19 - 12) = v20;
            v21 = *v9;
            if (*v9)
            {
              v22 = 6 * *(_DWORD *)(v21 - 12);
              v23 = *(_DWORD *)(v21 - 4);
              if (v22 < v23 && v23 >= 9)
                WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::rehash(a1 + 31, v23 >> 1, 0);
            }
          }
        }
      }
      v25 = a1[30];
      if (v25)
      {
        v26 = *(_DWORD *)(v25 - 8);
        v27 = ((v10 + v11) ^ ((unint64_t)(v10 + v11) >> 22))
            + ~(((v10 + v11) ^ ((unint64_t)(v10 + v11) >> 22)) << 13);
        v28 = (9 * (v27 ^ (v27 >> 8))) ^ ((9 * (v27 ^ (v27 >> 8))) >> 15);
        v29 = v26 & (((v28 + ~(v28 << 27)) >> 31) ^ ((_DWORD)v28 + ~((_DWORD)v28 << 27)));
        v30 = *(_QWORD *)(v25 + 16 * v29);
        if (v30 != v10)
        {
          v31 = 1;
          while (v30)
          {
            v29 = ((_DWORD)v29 + v31) & v26;
            v30 = *(_QWORD *)(v25 + 16 * v29);
            ++v31;
            if (v30 == v10)
              goto LABEL_29;
          }
          v29 = *(unsigned int *)(v25 - 4);
        }
LABEL_29:
        if (v29 != *(_DWORD *)(v25 - 4))
        {
          v32 = v25 + 16 * v29;
          if (*(_DWORD *)(v32 + 8) == 1)
          {
            *(_QWORD *)v32 = -1;
            ++*(_DWORD *)(a1[30] - 16);
            v33 = a1[30];
            if (v33)
              v34 = *(_DWORD *)(v33 - 12) - 1;
            else
              v34 = -1;
            *(_DWORD *)(v33 - 12) = v34;
            v35 = a1[30];
            if (v35)
            {
              v36 = *(_DWORD *)(v35 - 12);
              v37 = *(unsigned int *)(v35 - 4);
              if (6 * v36 < v37 && v37 >= 9)
              {
                v39 = WTF::fastZeroedMalloc((WTF *)(16 * (v37 >> 1) + 16));
                v41 = 0;
                a1[30] = v39 + 16;
                *(_DWORD *)(v39 + 12) = v37 >> 1;
                *(_DWORD *)(a1[30] - 8) = (v37 >> 1) - 1;
                *(_DWORD *)(a1[30] - 16) = 0;
                *(_DWORD *)(a1[30] - 12) = v36;
                do
                {
                  v42 = (_QWORD *)(v35 + 16 * v41);
                  if ((unint64_t)(*v42 + 1) >= 2)
                  {
                    v43 = a1[30];
                    if (v43)
                      v44 = *(_DWORD *)(v43 - 8);
                    else
                      v44 = 0;
                    v45 = (*v42 + ~(*v42 << 32)) ^ ((*v42 + ~(*v42 << 32)) >> 22);
                    v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((unint64_t)(v45 + ~(v45 << 13)) >> 8));
                    v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
                    v48 = v44 & ((v47 >> 31) ^ v47);
                    v49 = 1;
                    do
                    {
                      v50 = v48;
                      v51 = *(_QWORD *)(v43 + 16 * v48);
                      v48 = (v48 + v49++) & v44;
                    }
                    while (v51);
                    *(_OWORD *)(v43 + 16 * v50) = *(_OWORD *)v42;
                  }
                  ++v41;
                }
                while (v41 != v37);
                WTF::fastFree((WTF *)(v35 - 16), v40);
              }
            }
          }
          else
          {
            --*(_DWORD *)(v32 + 8);
          }
        }
      }
      v7 += 8;
    }
    while (v7 != (char *)v8);
  }
  v52 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)a1[21];
  if (v52 == *a2)
  {
    a1[21] = 0;
    if (v52)
    {
      if (*((_DWORD *)v52 + 2) == 1)
      {
        WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v52, v5);
        WTF::fastFree(v54, v55);
      }
      else
      {
        --*((_DWORD *)v52 + 2);
      }
    }
  }
  WebCore::IDBServer::UniqueIDBDatabase::handleDatabaseOperations((WebCore::IDBServer::UniqueIDBDatabase *)a1, v5);
  return WebCore::IDBServer::UniqueIDBDatabase::handleTransactions((WebCore::IDBServer::UniqueIDBDatabase *)a1);
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabase::didFinishHandlingVersionChange(WebCore::IDBServer::UniqueIDBDatabase *this, WebCore::IDBServer::UniqueIDBDatabaseConnection *a2, const WebCore::IDBResourceIdentifier *a3)
{
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v4;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v5;
  WTF *v7;
  void *v8;
  WTF *v9;
  void *v10;

  v4 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 2) == 1)
    {
      WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v4, a2);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*((_DWORD *)v4 + 2);
    }
  }
  v5 = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::IDBServer::UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection(v5);
      WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  WebCore::IDBServer::UniqueIDBDatabase::handleDatabaseOperations(this, a2);
  return WebCore::IDBServer::UniqueIDBDatabase::handleTransactions(this);
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabase::handleTransactions(WebCore::IDBServer::UniqueIDBDatabase *this)
{
  WTF::StringImpl *result;
  unint64_t v3;
  char **v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _OWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  void *v61;
  uint64_t i;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  unint64_t v78;
  WTF *v79;
  void *v80;
  WTF *v81;
  void *v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  WTF::StringImpl *v86;
  unint64_t v87;
  BOOL v88;

  v88 = 0;
  result = (WTF::StringImpl *)WebCore::IDBServer::UniqueIDBDatabase::takeNextRunnableTransaction((uint64_t)&v87, (BOOL *)this, &v88);
  v3 = v87;
  if (v87)
  {
    while (1)
    {
      WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>&>((uint64_t)&v85, (uint64_t *)this + 29, (_QWORD *)(v3 + 24), &v87);
      v4 = WebCore::IDBServer::UniqueIDBDatabaseTransaction::objectStoreIdentifiers((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v3);
      v5 = *((unsigned int *)v4 + 3);
      if ((_DWORD)v5)
        break;
LABEL_83:
      (*(void (**)(unint64_t *__return_ptr, _QWORD, unint64_t))(**((_QWORD **)this + 22) + 32))(&v85, *((_QWORD *)this + 22), v3 + 24);
      v74 = *(_QWORD *)(v3 + 16);
      if (v74)
      {
        v75 = *(_QWORD *)(v74 + 8);
        if (v75)
        {
          v76 = *(_QWORD *)(*(_QWORD *)(v75 + 40) + 8);
          if (v76)
            (*(void (**)(uint64_t, unint64_t, unint64_t *))(*(_QWORD *)v76 + 176))(v76, v3 + 24, &v85);
        }
      }
      result = v86;
      v86 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v73);
        else
          *(_DWORD *)result -= 2;
      }
      if (v88)
      {
        v87 = 0;
        if (*(_DWORD *)(v3 + 8) == 1)
        {
          WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v3, v73);
          return (WTF::StringImpl *)WTF::fastFree(v81, v82);
        }
        else
        {
          --*(_DWORD *)(v3 + 8);
        }
        return result;
      }
      result = (WTF::StringImpl *)WebCore::IDBServer::UniqueIDBDatabase::takeNextRunnableTransaction((uint64_t)&v85, (BOOL *)this, &v88);
      v78 = v85;
      v87 = v85;
      if (*(_DWORD *)(v3 + 8) == 1)
      {
        WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v3, v77);
        result = (WTF::StringImpl *)WTF::fastFree(v79, v80);
      }
      else
      {
        --*(_DWORD *)(v3 + 8);
      }
      v3 = v78;
      if (!v78)
        return result;
    }
    v6 = *v4;
    v7 = (uint64_t)&(*v4)[8 * v5];
    v83 = v7;
    while (1)
    {
      v8 = *(_QWORD *)v6;
      v9 = *((_QWORD *)this + 30);
      if (v9
        || (v10 = WTF::fastZeroedMalloc((WTF *)0x90),
            *((_QWORD *)this + 30) = v10 + 16,
            *(_DWORD *)(v10 + 12) = 8,
            *(_DWORD *)(*((_QWORD *)this + 30) - 8) = 7,
            *(_DWORD *)(*((_QWORD *)this + 30) - 16) = 0,
            *(_DWORD *)(*((_QWORD *)this + 30) - 12) = 0,
            (v9 = *((_QWORD *)this + 30)) != 0))
      {
        v11 = *(_DWORD *)(v9 - 8);
      }
      else
      {
        v11 = 0;
      }
      v12 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = (v14 >> 31) ^ v14;
      v16 = v11 & v15;
      v17 = (_QWORD *)(v9 + 16 * (v11 & v15));
      v18 = *v17;
      if (!*v17)
        break;
      v19 = 0;
      v20 = 1;
      while (v18 != v8)
      {
        if (v18 == -1)
          v19 = v17;
        v16 = (v16 + v20) & v11;
        v17 = (_QWORD *)(v9 + 16 * v16);
        v18 = *v17;
        ++v20;
        if (!*v17)
        {
          if (v19)
          {
            *v19 = 0;
            v19[1] = 0;
            --*(_DWORD *)(*((_QWORD *)this + 30) - 16);
            v17 = v19;
          }
          goto LABEL_15;
        }
      }
LABEL_41:
      ++*((_DWORD *)v17 + 2);
      if (*(_BYTE *)(v87 + 40))
      {
        v44 = *((_QWORD *)this + 31);
        if (v44
          || (v45 = WTF::fastZeroedMalloc((WTF *)0x50),
              *((_QWORD *)this + 31) = v45 + 16,
              *(_DWORD *)(v45 + 12) = 8,
              *(_DWORD *)(*((_QWORD *)this + 31) - 8) = 7,
              *(_DWORD *)(*((_QWORD *)this + 31) - 16) = 0,
              *(_DWORD *)(*((_QWORD *)this + 31) - 12) = 0,
              (v44 = *((_QWORD *)this + 31)) != 0))
        {
          v46 = *(_DWORD *)(v44 - 8);
        }
        else
        {
          v46 = 0;
        }
        v47 = v46 & v15;
        v48 = (_QWORD *)(v44 + 8 * (v46 & v15));
        v49 = *v48;
        if (*v48)
        {
          v50 = 0;
          v51 = 1;
          while (v49 != v8)
          {
            if (v49 == -1)
              v50 = v48;
            v47 = (v47 + v51) & v46;
            v48 = (_QWORD *)(v44 + 8 * v47);
            v49 = *v48;
            ++v51;
            if (!*v48)
            {
              if (v50)
              {
                *v50 = 0;
                --*(_DWORD *)(*((_QWORD *)this + 31) - 16);
                v48 = v50;
              }
              goto LABEL_53;
            }
          }
          goto LABEL_79;
        }
LABEL_53:
        *v48 = v8;
        v52 = *((_QWORD *)this + 31);
        if (v52)
          v53 = *(_DWORD *)(v52 - 12) + 1;
        else
          v53 = 1;
        *(_DWORD *)(v52 - 12) = v53;
        v54 = *((_QWORD *)this + 31);
        if (v54)
          v55 = *(_DWORD *)(v54 - 12);
        else
          v55 = 0;
        v56 = (*(_DWORD *)(v54 - 16) + v55);
        v57 = *(unsigned int *)(v54 - 4);
        if (v57 > 0x400)
        {
          if (v57 <= 2 * v56)
            goto LABEL_62;
        }
        else if (3 * v57 <= 4 * v56)
        {
          if ((_DWORD)v57)
          {
LABEL_62:
            v58 = *(_DWORD *)(v54 - 12);
            v59 = (_DWORD)v57 << (6 * v58 >= (2 * v57));
          }
          else
          {
            v58 = *(_DWORD *)(v54 - 12);
            v59 = 8;
          }
          v60 = WTF::fastZeroedMalloc((WTF *)(8 * v59 + 16));
          *((_QWORD *)this + 31) = v60 + 16;
          *(_DWORD *)(v60 + 12) = v59;
          *(_DWORD *)(*((_QWORD *)this + 31) - 8) = v59 - 1;
          *(_DWORD *)(*((_QWORD *)this + 31) - 16) = 0;
          *(_DWORD *)(*((_QWORD *)this + 31) - 12) = v58;
          if (!(_DWORD)v57)
            goto LABEL_78;
          for (i = 0; i != v57; ++i)
          {
            v63 = *(_QWORD *)(v54 + 8 * i);
            if ((unint64_t)(v63 + 1) >= 2)
            {
              v64 = *((_QWORD *)this + 31);
              if (v64)
                v65 = *(_DWORD *)(v64 - 8);
              else
                v65 = 0;
              v66 = (v63 + ~(v63 << 32)) ^ ((unint64_t)(v63 + ~(v63 << 32)) >> 22);
              v67 = 9 * ((v66 + ~(v66 << 13)) ^ ((v66 + ~(v66 << 13)) >> 8));
              v68 = (v67 ^ (v67 >> 15)) + ~((v67 ^ (v67 >> 15)) << 27);
              v69 = v65 & ((v68 >> 31) ^ v68);
              v70 = 1;
              do
              {
                v71 = v69;
                v72 = *(_QWORD *)(v64 + 8 * v69);
                v69 = (v69 + v70++) & v65;
              }
              while (v72);
              *(_QWORD *)(v64 + 8 * v71) = v63;
            }
          }
          if (v54)
LABEL_78:
            WTF::fastFree((WTF *)(v54 - 16), v61);
        }
      }
LABEL_79:
      v6 += 8;
      if (v6 == (char *)v7)
      {
        v3 = v87;
        goto LABEL_83;
      }
    }
LABEL_15:
    *v17 = v8;
    *((_DWORD *)v17 + 2) = 0;
    v21 = *((_QWORD *)this + 30);
    if (v21)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *((_QWORD *)this + 30);
    if (v23)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
        goto LABEL_41;
    }
    else
    {
      if (3 * v26 > 4 * v25)
        goto LABEL_41;
      if (!(_DWORD)v26)
      {
        v84 = v15;
        v27 = *(_DWORD *)(v23 - 12);
        v28 = 8;
        goto LABEL_27;
      }
    }
    v84 = v15;
    v27 = *(_DWORD *)(v23 - 12);
    v28 = (_DWORD)v26 << (6 * v27 >= (2 * v26));
LABEL_27:
    v29 = WTF::fastZeroedMalloc((WTF *)(16 * v28 + 16));
    *((_QWORD *)this + 30) = v29 + 16;
    *(_DWORD *)(v29 + 12) = v28;
    *(_DWORD *)(*((_QWORD *)this + 30) - 8) = v28 - 1;
    *(_DWORD *)(*((_QWORD *)this + 30) - 16) = 0;
    *(_DWORD *)(*((_QWORD *)this + 30) - 12) = v27;
    if ((_DWORD)v26)
    {
      v31 = 0;
      v32 = 0;
      v7 = v83;
      do
      {
        v33 = (_QWORD *)(v23 + 16 * v31);
        if ((unint64_t)(*v33 + 1) >= 2)
        {
          v34 = *((_QWORD *)this + 30);
          v35 = v34 ? *(_DWORD *)(v34 - 8) : 0;
          v36 = (*v33 + ~(*v33 << 32)) ^ ((*v33 + ~(*v33 << 32)) >> 22);
          v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((unint64_t)(v36 + ~(v36 << 13)) >> 8));
          v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
          v39 = v35 & ((v38 >> 31) ^ v38);
          v40 = 1;
          do
          {
            v41 = v39;
            v42 = *(_QWORD *)(v34 + 16 * v39);
            v39 = (v39 + v40++) & v35;
          }
          while (v42);
          v43 = (_OWORD *)(v34 + 16 * v41);
          *v43 = *(_OWORD *)v33;
          if (v33 == v17)
            v32 = v43;
        }
        ++v31;
      }
      while (v31 != v26);
    }
    else
    {
      v32 = 0;
      v7 = v83;
    }
    WTF::fastFree((WTF *)(v23 - 16), v30);
    v17 = v32;
    v15 = v84;
    goto LABEL_41;
  }
  return result;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabase::connectionClosedFromServer(WebCore::IDBServer::UniqueIDBDatabase *this, WebCore::IDBServer::UniqueIDBDatabaseConnection *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  WTF *v18;
  __int16 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v4 = *((_QWORD *)a2 + 5);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = 280;
  v6 = v22;
  if (v22)
  {
    v7 = *(_DWORD *)v22;
    *(_DWORD *)v22 += 2;
    v21 = v6;
    v22 = 0;
    if (v7)
      *(_DWORD *)v6 = v7;
    else
      WTF::StringImpl::destroy(v6, v5);
  }
  else
  {
    v21 = 0;
  }
  v8 = *(_QWORD *)(v4 + 8);
  if (v8)
  {
    (*(void (**)(uint64_t, WebCore::IDBServer::UniqueIDBDatabaseConnection *, __int16 *))(*(_QWORD *)v8 + 184))(v8, a2, &v20);
    v6 = v21;
  }
  v21 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v11 = *((_QWORD *)this + 17);
  v10 = (uint64_t *)((char *)this + 136);
  v9 = v11;
  if (v11)
  {
    v12 = *(_DWORD *)(v9 - 8);
    v13 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    for (i = 1; ; ++i)
    {
      v18 = *(WTF **)(v9 + 8 * v16);
      if (v18 != (WTF *)-1)
      {
        if (!v18)
          return WTF::ListHashSet<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseConnection,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseConnection,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>>>>::remove(v10, v10, v18);
        if (*(WebCore::IDBServer::UniqueIDBDatabaseConnection **)v18 == a2)
          break;
      }
      v16 = (v16 + i) & v12;
    }
    if (v16 == *(_DWORD *)(v9 - 4))
      v18 = 0;
  }
  else
  {
    v18 = 0;
  }
  return WTF::ListHashSet<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseConnection,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseConnection,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>>>>::remove(v10, v10, v18);
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::takeNextRunnableTransaction(uint64_t this, BOOL *a2, BOOL *a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v18;
  uint64_t v19;
  int v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _BOOL4 v32;
  int v33;
  char **v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  _BOOL4 v44;
  int v45;
  char **v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  char **v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  char **v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  WTF *v77;
  void *v78;
  unint64_t v79;
  WTF *v80;
  unint64_t v81;
  unint64_t v82;
  WTF *v83;
  WTF *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  int v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF *v102;
  void *v103;
  void *v104;
  BOOL *v105;
  unint64_t v106;
  WTF *v107;
  unint64_t v108;
  WTF *__src;
  unint64_t v110;
  unint64_t v111;
  unsigned __int8 **v112;
  char v113[24];
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;

  *a3 = 0;
  if (*((_QWORD *)a2 + 25) == *((_QWORD *)a2 + 26))
  {
    *(_QWORD *)this = 0;
    return this;
  }
  v112 = (unsigned __int8 **)this;
  this = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 22) + 224))(*((_QWORD *)a2 + 22));
  if ((this & 1) == 0)
  {
    v6 = *((_QWORD *)a2 + 29);
    if (v6)
    {
      if (*(_DWORD *)(v6 - 12))
      {
        *v112 = 0;
        return this;
      }
    }
  }
  v105 = a3;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v110 = 0;
  v111 = 0;
  v7 = 0;
  __src = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v116 = 0u;
  v117 = 0u;
  v13 = v112;
  *v112 = 0;
  v115 = 0;
  while (1)
  {
    v14 = *((_QWORD *)a2 + 25);
    if (v14 == *((_QWORD *)a2 + 26))
      break;
    v15 = *((_QWORD *)a2 + 27);
    v16 = *(unsigned __int8 **)(v15 + 8 * v14);
    *(_QWORD *)(v15 + 8 * v14) = 0;
    v17 = *((_QWORD *)a2 + 27);
    v18 = *(WebCore::IDBServer::UniqueIDBDatabaseTransaction **)(v17 + 8 * v14);
    *(_QWORD *)(v17 + 8 * v14) = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 2) == 1)
      {
        WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v18, v5);
        WTF::fastFree(v77, v78);
        v13 = v112;
        v14 = *((_QWORD *)a2 + 25);
      }
      else
      {
        --*((_DWORD *)v18 + 2);
      }
    }
    if (v14 == *((unsigned int *)a2 + 56) - 1)
      v19 = 0;
    else
      v19 = v14 + 1;
    *((_QWORD *)a2 + 25) = v19;
    *v13 = v16;
    v20 = v16[40];
    if (v16[40])
    {
      if (v20 != 1)
      {
        if (v20 == 2)
        {
LABEL_152:
          __break(0xC471u);
          JUMPOUT(0x1953F914CLL);
        }
        break;
      }
      v21 = WebCore::IDBServer::UniqueIDBDatabaseTransaction::objectStoreIdentifiers((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v16);
      v22 = *((unsigned int *)v21 + 3);
      if ((_DWORD)v22 && (v23 = *((_QWORD *)a2 + 30)) != 0)
      {
        v24 = *v21;
        v25 = (uint64_t)&(*v21)[8 * v22];
        v26 = *(_DWORD *)(v23 - 8);
        while (1)
        {
          v27 = *(_QWORD *)v24 + ~(*(_QWORD *)v24 << 32);
          v28 = (v27 ^ (v27 >> 22)) + ~((v27 ^ (v27 >> 22)) << 13);
          v29 = (9 * (v28 ^ (v28 >> 8))) ^ ((9 * (v28 ^ (v28 >> 8))) >> 15);
          v30 = v26 & (((v29 + ~(v29 << 27)) >> 31) ^ (v29 + ~((_DWORD)v29 << 27)));
          v31 = *(_QWORD *)(v23 + 16 * v30);
          v32 = v31 == *(_QWORD *)v24;
          if (v31 == *(_QWORD *)v24)
            break;
          v33 = 1;
          while (v31)
          {
            v30 = (v30 + v33) & v26;
            v31 = *(_QWORD *)(v23 + 16 * v30);
            ++v33;
            if (v31 == *(_QWORD *)v24)
              goto LABEL_39;
          }
          v24 += 8;
          if (v24 == (char *)v25)
            goto LABEL_40;
        }
LABEL_39:
        v32 = 1;
      }
      else
      {
        v32 = 0;
      }
LABEL_40:
      v46 = WebCore::IDBServer::UniqueIDBDatabaseTransaction::objectStoreIdentifiers((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v16);
      v47 = *((unsigned int *)v46 + 3);
      if ((_DWORD)v47 && v115)
      {
        v48 = *v46;
        v49 = (uint64_t)&(*v46)[8 * v47];
        v50 = *(_DWORD *)(v115 - 8);
        while (1)
        {
          v51 = *(_QWORD *)v48 + ~(*(_QWORD *)v48 << 32);
          v52 = (v51 ^ (v51 >> 22)) + ~((v51 ^ (v51 >> 22)) << 13);
          v53 = (9 * (v52 ^ (v52 >> 8))) ^ ((9 * (v52 ^ (v52 >> 8))) >> 15);
          v54 = v50 & (((v53 + ~(v53 << 27)) >> 31) ^ (v53 + ~((_DWORD)v53 << 27)));
          v55 = *(_QWORD *)(v115 + 8 * v54);
          if (v55 == *(_QWORD *)v48)
            break;
          v56 = 1;
          while (v55)
          {
            v54 = (v54 + v56) & v50;
            v55 = *(_QWORD *)(v115 + 8 * v54);
            ++v56;
            if (v55 == *(_QWORD *)v48)
              goto LABEL_50;
          }
          v48 += 8;
          if (v48 == (char *)v49)
            goto LABEL_49;
        }
LABEL_50:
        v57 = WebCore::IDBServer::UniqueIDBDatabaseTransaction::objectStoreIdentifiers((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v16);
        v58 = *((unsigned int *)v57 + 3);
        if ((_DWORD)v58)
        {
          v59 = (uint64_t *)*v57;
          v60 = 8 * v58;
          do
          {
            v114 = 0;
            v61 = *v59++;
            v114 = v61;
            WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::add(&v115, &v114, (uint64_t)v113);
            v60 -= 8;
          }
          while (v60);
        }
        v13 = v112;
        if (v8)
        {
          if (v11 + 1 == v8)
            goto LABEL_81;
          v62 = __src;
          v10 = v110;
          goto LABEL_106;
        }
        v10 = v108;
        if (v11)
        {
          if (v11 == v108 - 1)
          {
            v110 = v108;
LABEL_81:
            v79 = v110 + (v110 >> 2);
            if (v79 <= 0xF)
              v79 = 15;
            if (v79 >= 0x1FFFFFFF)
            {
              __break(0xC471u);
              JUMPOUT(0x1953F915CLL);
            }
            v10 = v79 + 1;
            v80 = (WTF *)WTF::fastMalloc((WTF *)(8 * (v79 + 1)));
            v62 = v80;
            DWORD2(v117) = v10;
            *(_QWORD *)&v117 = v80;
            if (v8 <= v11)
            {
              memcpy((char *)v80 + 8 * v8, (char *)v9 + 8 * v8, 8 * v11 - 8 * v8);
              v76 = v7;
            }
            else
            {
              memcpy(v80, v9, 8 * v11);
              v76 = v10 + v8 - v110;
              memcpy((char *)v62 + 8 * v76, (char *)v9 + 8 * v8, 8 * v110 - 8 * v8);
              *(_QWORD *)&v116 = v76;
              v8 = v76;
            }
            v10 = v10;
            v13 = v112;
            if (!v9)
            {
              v106 = v10;
              v107 = v62;
              v75 = v10;
              v108 = v10;
              goto LABEL_108;
            }
            if (v62 == v9)
            {
              v10 = 0;
              *(_QWORD *)&v117 = 0;
              DWORD2(v117) = 0;
            }
            WTF::fastFree(v9, v5);
            v62 = (WTF *)v117;
            v106 = v10;
            v107 = (WTF *)v117;
            v75 = v10;
            v108 = v10;
LABEL_103:
            v13 = v112;
            goto LABEL_108;
          }
          v8 = 0;
          v62 = __src;
LABEL_106:
          v75 = v111;
        }
        else
        {
          v110 = 0;
          if (!v108)
            goto LABEL_81;
          v10 = v108;
          v62 = __src;
          v8 = 0;
          v75 = v111;
        }
        v76 = v7;
        goto LABEL_108;
      }
LABEL_49:
      if (v32)
        goto LABEL_50;
LABEL_70:
      v13 = v112;
      if (v16)
        break;
    }
    else
    {
      v34 = WebCore::IDBServer::UniqueIDBDatabaseTransaction::objectStoreIdentifiers((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v16);
      v35 = *((unsigned int *)v34 + 3);
      if ((_DWORD)v35 && v115)
      {
        v36 = *v34;
        v37 = (uint64_t)&(*v34)[8 * v35];
        v38 = *(_DWORD *)(v115 - 8);
        while (1)
        {
          v39 = *(_QWORD *)v36 + ~(*(_QWORD *)v36 << 32);
          v40 = (v39 ^ (v39 >> 22)) + ~((v39 ^ (v39 >> 22)) << 13);
          v41 = (9 * (v40 ^ (v40 >> 8))) ^ ((9 * (v40 ^ (v40 >> 8))) >> 15);
          v42 = v38 & (((v41 + ~(v41 << 27)) >> 31) ^ (v41 + ~((_DWORD)v41 << 27)));
          v43 = *(_QWORD *)(v115 + 8 * v42);
          v44 = v43 == *(_QWORD *)v36;
          if (v43 == *(_QWORD *)v36)
            break;
          v45 = 1;
          while (v43)
          {
            v42 = (v42 + v45) & v38;
            v43 = *(_QWORD *)(v115 + 8 * v42);
            ++v45;
            if (v43 == *(_QWORD *)v36)
              goto LABEL_56;
          }
          v36 += 8;
          if (v36 == (char *)v37)
            goto LABEL_57;
        }
LABEL_56:
        v44 = 1;
      }
      else
      {
        v44 = 0;
      }
LABEL_57:
      v63 = WebCore::IDBServer::UniqueIDBDatabaseTransaction::objectStoreIdentifiers((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v16);
      v64 = *((unsigned int *)v63 + 3);
      if ((_DWORD)v64 && (v65 = *((_QWORD *)a2 + 31)) != 0)
      {
        v66 = *v63;
        v67 = (uint64_t)&(*v63)[8 * v64];
        v68 = *(_DWORD *)(v65 - 8);
        while (1)
        {
          v69 = *(_QWORD *)v66 + ~(*(_QWORD *)v66 << 32);
          v70 = (v69 ^ (v69 >> 22)) + ~((v69 ^ (v69 >> 22)) << 13);
          v71 = (9 * (v70 ^ (v70 >> 8))) ^ ((9 * (v70 ^ (v70 >> 8))) >> 15);
          v72 = v68 & (((v71 + ~(v71 << 27)) >> 31) ^ (v71 + ~((_DWORD)v71 << 27)));
          v73 = *(_QWORD *)(v65 + 8 * v72);
          if (v73 == *(_QWORD *)v66)
            break;
          v74 = 1;
          while (v73)
          {
            v72 = (v72 + v74) & v68;
            v73 = *(_QWORD *)(v65 + 8 * v72);
            ++v74;
            if (v73 == *(_QWORD *)v66)
              goto LABEL_67;
          }
          v66 += 8;
          if (v66 == (char *)v67)
            goto LABEL_66;
        }
      }
      else
      {
LABEL_66:
        if (!v44)
          goto LABEL_70;
      }
LABEL_67:
      if (v7)
      {
        v13 = v112;
        if (v11 + 1 != v7)
        {
          v62 = v107;
          v10 = v111;
          v75 = v111;
          v76 = v7;
          v108 = v111;
          v8 = v7;
          goto LABEL_108;
        }
      }
      else
      {
        v13 = v112;
        if (v11)
        {
          if (v11 != v106 - 1)
          {
            v76 = 0;
            v8 = 0;
            v62 = v107;
            v10 = v106;
            v75 = v106;
            v108 = v106;
            goto LABEL_108;
          }
          v111 = v106;
        }
        else
        {
          v111 = 0;
          v76 = 0;
          v8 = 0;
          v62 = v107;
          v10 = v106;
          v75 = v106;
          v108 = v106;
          if (v106)
            goto LABEL_108;
        }
      }
      v81 = v111 + (v111 >> 2);
      if (v81 <= 0xF)
        v81 = 15;
      if (v81 >= 0x1FFFFFFF)
        goto LABEL_152;
      v82 = v81 + 1;
      v83 = (WTF *)WTF::fastMalloc((WTF *)(8 * (v81 + 1)));
      v62 = v83;
      DWORD2(v117) = v82;
      *(_QWORD *)&v117 = v83;
      if (v7 <= v11)
      {
        memcpy((char *)v83 + 8 * v7, (char *)__src + 8 * v7, 8 * v11 - 8 * v7);
        v76 = v7;
      }
      else
      {
        memcpy(v83, __src, 8 * v11);
        v76 = v82 + v7 - v111;
        memcpy((char *)v62 + 8 * v76, (char *)__src + 8 * v7, 8 * v111 - 8 * v7);
        *(_QWORD *)&v116 = v76;
      }
      v10 = v82;
      v13 = v112;
      if (__src)
      {
        if (v62 == __src)
        {
          v10 = 0;
          *(_QWORD *)&v117 = 0;
          DWORD2(v117) = 0;
        }
        WTF::fastFree(__src, v5);
        v62 = (WTF *)v117;
        v106 = v10;
        v107 = (WTF *)v117;
        v75 = v10;
        v108 = v10;
        v8 = v76;
        goto LABEL_103;
      }
      v106 = v82;
      v107 = v62;
      v75 = v82;
      v108 = v82;
      v8 = v76;
LABEL_108:
      *v13 = 0;
      *((_QWORD *)v62 + v11) = v16;
      if (v11 == v10 - 1)
        v11 = 0;
      else
        ++v11;
      v110 = v10;
      v111 = v75;
      v7 = v76;
      *((_QWORD *)&v116 + 1) = v11;
      __src = v62;
      v9 = v62;
      v12 = v8;
    }
  }
  *v105 = v12 != v11;
  v84 = v107;
  if (v12 == v11)
    goto LABEL_144;
  v85 = v116;
  while (2)
  {
    if (v11)
      v86 = v11;
    else
      v86 = v10;
    v11 = v86 - 1;
    v87 = *((_QWORD *)v9 + v86 - 1);
    *((_QWORD *)v9 + v86 - 1) = 0;
    v9 = (WTF *)v117;
    v88 = *(WebCore::IDBServer::UniqueIDBDatabaseTransaction **)(v117 + 8 * (v86 - 1));
    *(_QWORD *)(v117 + 8 * (v86 - 1)) = 0;
    if (v88)
    {
      if (*((_DWORD *)v88 + 2) == 1)
      {
        WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v88, v5);
        WTF::fastFree(v102, v103);
      }
      else
      {
        --*((_DWORD *)v88 + 2);
      }
    }
    v90 = *((_QWORD *)a2 + 25);
    v89 = *((_QWORD *)a2 + 26);
    if (v90)
    {
      if (v89 + 1 == v90)
      {
        v91 = *((unsigned int *)a2 + 56);
        goto LABEL_129;
      }
    }
    else
    {
      v91 = *((unsigned int *)a2 + 56);
      if (v89)
      {
        if (v89 != v91 - 1)
          goto LABEL_139;
      }
      else if (*((_DWORD *)a2 + 56))
      {
        goto LABEL_139;
      }
LABEL_129:
      v92 = v91 + (v91 >> 2);
      if (v92 <= 0xF)
        v92 = 15;
      if (v92 >= 0x1FFFFFFF)
      {
        __break(0xC471u);
        JUMPOUT(0x1953F9154);
      }
      v93 = (char *)*((_QWORD *)a2 + 27);
      v94 = v92 + 1;
      v95 = (char *)WTF::fastMalloc((WTF *)(8 * (v92 + 1)));
      *((_DWORD *)a2 + 56) = v94;
      *((_QWORD *)a2 + 27) = v95;
      v97 = *((_QWORD *)a2 + 25);
      v96 = *((_QWORD *)a2 + 26);
      if (v97 <= v96)
      {
        memcpy(&v95[8 * v97], &v93[8 * v97], 8 * v96 - 8 * v97);
        if (!v93)
          goto LABEL_139;
      }
      else
      {
        memcpy(v95, v93, 8 * v96);
        v98 = *((_QWORD *)a2 + 25);
        v99 = v98 - v91 + *((unsigned int *)a2 + 56);
        memcpy((void *)(*((_QWORD *)a2 + 27) + 8 * v99), &v93[8 * v98], 8 * v91 - 8 * v98);
        *((_QWORD *)a2 + 25) = v99;
        if (!v93)
          goto LABEL_139;
      }
      if (*((char **)a2 + 27) == v93)
      {
        *((_QWORD *)a2 + 27) = 0;
        *((_DWORD *)a2 + 56) = 0;
      }
      WTF::fastFree((WTF *)v93, v5);
    }
LABEL_139:
    v100 = *((_QWORD *)a2 + 25);
    if (!v100)
      v100 = *((unsigned int *)a2 + 56);
    v101 = v100 - 1;
    *((_QWORD *)a2 + 25) = v101;
    *(_QWORD *)(*((_QWORD *)a2 + 27) + 8 * v101) = v87;
    if (v85 != v11)
      continue;
    break;
  }
  *((_QWORD *)&v116 + 1) = v85;
  v84 = v9;
LABEL_144:
  if (v115)
    WTF::fastFree((WTF *)(v115 - 16), v5);
  this = (uint64_t)WTF::Deque<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,0ul>::destroyAll((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)&v116, v5);
  if (v84)
  {
    *(_QWORD *)&v117 = 0;
    DWORD2(v117) = 0;
    return WTF::fastFree(v84, v104);
  }
  return this;
}

char **WebCore::IDBServer::UniqueIDBDatabaseTransaction::objectStoreIdentifiers(WebCore::IDBServer::UniqueIDBDatabaseTransaction *this)
{
  char **v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int v20;
  int v21;
  int v22;
  _DWORD *v23;
  unsigned int v24;
  const WTF::StringImpl **v25;
  const WTF::StringImpl **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  uint64_t v42;

  v1 = (char **)((char *)this + 88);
  if (*((_DWORD *)this + 25))
    return v1;
  v4 = *((_QWORD *)this + 2);
  if (!v4)
    return v1;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return v1;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    return v1;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return v1;
  v8 = *(_QWORD *)(v7 + 184);
  if (!v8)
    goto LABEL_69;
  v9 = *(_QWORD *)(v8 + 32);
  if (!v9)
    return v1;
  v10 = *(unsigned int *)(v9 - 12);
  if (!(_DWORD)v10)
    return v1;
  if (v10 >> 29)
  {
LABEL_69:
    __break(0xC471u);
    JUMPOUT(0x1953F9488);
  }
  v11 = WTF::fastMalloc((WTF *)(8 * v10));
  v14 = (WTF *)v11;
  v15 = *(_QWORD *)(v8 + 32);
  if (!v15 || !*(_DWORD *)(v15 - 12))
    goto LABEL_68;
  v16 = *(unsigned int *)(v15 - 4);
  if ((_DWORD)v16)
  {
    v17 = 72 * v16;
    v18 = *(_QWORD **)(v8 + 32);
    while ((unint64_t)(*v18 + 1) <= 1)
    {
      v18 += 9;
      v17 -= 72;
      if (!v17)
        goto LABEL_68;
    }
  }
  else
  {
    v18 = *(_QWORD **)(v8 + 32);
  }
  v19 = (_QWORD *)(v15 + 72 * v16);
  if (v18 == v19)
    goto LABEL_68;
  v20 = 0;
  v21 = 1;
LABEL_21:
  v22 = v21;
  v23 = (_DWORD *)v18[2];
  if (v23)
    *v23 += 2;
  v24 = v20 + 1;
  *(_QWORD *)(v11 + 8 * v20) = v23;
  while (1)
  {
    v18 += 9;
    if (v18 == v19)
      break;
    if ((unint64_t)(*v18 + 1) > 1)
    {
      v21 = v22 + 1;
      ++v20;
      if (v18 != v19)
        goto LABEL_21;
      break;
    }
  }
  if (!v24)
    goto LABEL_68;
  v41 = v22;
  v25 = (const WTF::StringImpl **)(v11 + 8 * v24);
  v26 = (const WTF::StringImpl **)v11;
  do
  {
    v27 = *(_QWORD *)(v8 + 32);
    if (!v27)
    {
      v30 = 0;
      LODWORD(v28) = 0;
LABEL_38:
      v29 = v27 + 72 * v28;
      goto LABEL_39;
    }
    v28 = *(unsigned int *)(v27 - 4);
    v29 = v27 + 72 * v28;
    if (!*(_DWORD *)(v27 - 12))
    {
      v30 = v27 + 72 * v28;
      goto LABEL_38;
    }
    v30 = *(_QWORD *)(v8 + 32);
    if ((_DWORD)v28)
    {
      v31 = 72 * v28;
      v30 = *(_QWORD *)(v8 + 32);
      while ((unint64_t)(*(_QWORD *)v30 + 1) <= 1)
      {
        v30 += 72;
        v31 -= 72;
        if (!v31)
        {
          v30 = v29;
          break;
        }
      }
    }
LABEL_39:
    if (v27)
      v32 = v27 + 72 * *(unsigned int *)(v27 - 4);
    else
      v32 = 0;
    if (v32 != v30)
    {
      while ((WTF::equal(*(WTF **)(v30 + 16), *v26, v13) & 1) == 0)
      {
        v33 = v30 + 72;
        v30 = v29;
        if (v33 != v29)
        {
          v30 = v33;
          while ((unint64_t)(*(_QWORD *)v30 + 1) <= 1)
          {
            v30 += 72;
            if (v30 == v29)
            {
              v30 = v29;
              break;
            }
          }
        }
        if (v30 == v32)
          goto LABEL_60;
      }
      if (*((_DWORD *)this + 17))
      {
        v34 = 0;
        while ((WTF::equal(*(WTF **)(*((_QWORD *)this + 7) + 8 * v34), *v26, v13) & 1) == 0)
        {
          if (++v34 >= (unint64_t)*((unsigned int *)this + 17))
            goto LABEL_60;
        }
        v35 = *(_QWORD *)(v30 + 8);
        v42 = v35;
        v36 = *((unsigned int *)this + 25);
        if ((_DWORD)v36 == *((_DWORD *)this + 24))
        {
          v37 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1, v36 + 1, (unint64_t)&v42);
          v36 = *((unsigned int *)this + 25);
          *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v36) = *(_QWORD *)v37;
        }
        else
        {
          *(_QWORD *)&(*v1)[8 * v36] = v35;
        }
        *((_DWORD *)this + 25) = v36 + 1;
      }
    }
LABEL_60:
    ++v26;
  }
  while (v26 != v25);
  v38 = 8 * v41;
  v39 = (WTF::StringImpl **)v14;
  do
  {
    v40 = *v39;
    *v39 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v12);
      else
        *(_DWORD *)v40 -= 2;
    }
    ++v39;
    v38 -= 8;
  }
  while (v38);
LABEL_68:
  WTF::fastFree(v14, v12);
  return v1;
}

WTF *WebCore::IDBServer::UniqueIDBDatabase::immediateClose(WebCore::IDBServer::UniqueIDBDatabase *this, WTF::StringImpl *a2)
{
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  WTF *result;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  _OWORD *v14;
  uint64_t v15;
  WTF *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v25;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v33;
  WTF *v34;
  void *v35;
  unsigned int v36;
  _OWORD *v37;
  unint64_t *v39;
  unint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::IDBServer *v46;
  WebCore::IDBServer::ServerOpenDBRequest *v47;
  uint64_t v48;
  WTF **v49;
  WTF *v50;
  WTF *v51;
  WebCore::IDBServer::ServerOpenDBRequest *v52;
  WTF *v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  int i;
  unsigned int v65;
  _QWORD **v66;
  _QWORD *v67;
  _QWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  _QWORD *v75;
  WTF **v76;
  WTF *j;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  int k;
  WebCore::IDBServer::UniqueIDBDatabaseConnection **v85;
  WTF *m;
  WTF *v87;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v88;
  WTF *v89;
  void *v90;
  WTF *v91;
  void *v92;
  WTF *v93;
  void *v94;
  uint64_t v95;
  WTF *v96;
  _QWORD *v97;

  v4 = *((_QWORD *)this + 25);
  v5 = *((_QWORD *)this + 26);
  v3 = (WebCore::IDBServer::UniqueIDBDatabase *)((char *)this + 200);
  while (v5 != v4)
  {
    v17 = *(_QWORD **)(*((_QWORD *)this + 27) + 8 * v4);
    v18 = v17[2];
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        v22 = *(_QWORD *)(v19 + 72);
        v20 = (uint64_t *)(v19 + 72);
        v21 = v22;
        if (v22)
        {
          v23 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(v21, v17[3], v17[4]);
          if (v23 && v23 != (uint64_t *)(v21 + 24 * *(unsigned int *)(v21 - 4)))
          {
            v25 = v23;
            *v23 = -1;
            v26 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v23[2];
            v25[2] = 0;
            if (v26)
            {
              if (*((_DWORD *)v26 + 2) == 1)
              {
                WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v26, a2);
                WTF::fastFree(v34, v35);
              }
              else
              {
                --*((_DWORD *)v26 + 2);
              }
            }
            ++*(_DWORD *)(*v20 - 16);
            v27 = *v20;
            if (*v20)
              v28 = *(_DWORD *)(v27 - 12) - 1;
            else
              v28 = -1;
            *(_DWORD *)(v27 - 12) = v28;
            v29 = *v20;
            if (*v20)
            {
              v30 = 6 * *(_DWORD *)(v29 - 12);
              v31 = *(_DWORD *)(v29 - 4);
              if (v30 < v31 && v31 >= 9)
                WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v20, v31 >> 1, 0);
            }
          }
        }
      }
    }
    v33 = *((unsigned int *)this + 56);
    v4 += v33 + 1;
    do
      v4 -= v33;
    while (v4 >= v33);
  }
  WTF::Deque<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,0ul>::destroyAll(v3, a2);
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  result = (WTF *)*((_QWORD *)this + 27);
  if (result)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    result = (WTF *)WTF::fastFree(result, v6);
  }
  v8 = *((_QWORD *)this + 29);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    v10 = (_OWORD *)(v8 + 24 * v9);
    if (*(_DWORD *)(v8 - 12))
    {
      v11 = (_OWORD *)*((_QWORD *)this + 29);
      if ((_DWORD)v9)
      {
        v12 = 24 * v9;
        v11 = (_OWORD *)*((_QWORD *)this + 29);
        while (*v11 == 0 || *(_QWORD *)v11 == -1)
        {
          v11 = (_OWORD *)((char *)v11 + 24);
          v12 -= 24;
          if (!v12)
          {
            v11 = v10;
            goto LABEL_15;
          }
        }
      }
      goto LABEL_15;
    }
    v11 = (_OWORD *)(v8 + 24 * v9);
  }
  else
  {
    v11 = 0;
    LODWORD(v9) = 0;
  }
  v10 = (_OWORD *)(v8 + 24 * v9);
  if (!v8)
  {
    v14 = 0;
    goto LABEL_47;
  }
LABEL_15:
  v14 = (_OWORD *)(v8 + 24 * *(unsigned int *)(v8 - 4));
  v15 = *(unsigned int *)(v8 - 12);
  if ((_DWORD)v15)
  {
    if (v15 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v16 = (WTF *)WTF::fastMalloc((WTF *)(16 * v15));
    goto LABEL_48;
  }
LABEL_47:
  v16 = 0;
LABEL_48:
  if (v14 != v11)
  {
    v36 = 0;
    do
    {
      v37 = (_OWORD *)((char *)v11 + 24);
      *((_OWORD *)v16 + v36) = *v11;
      v11 = v10;
      if (v37 != v10)
      {
        v11 = v37;
        while (*v11 == 0 || *(_QWORD *)v11 == -1)
        {
          v11 = (_OWORD *)((char *)v11 + 24);
          if (v11 == v10)
          {
            v11 = v10;
            break;
          }
        }
      }
      ++v36;
    }
    while (v11 != v14);
    if (v36)
    {
      v39 = (unint64_t *)((char *)v16 + 16 * v36);
      v40 = (unint64_t *)v16;
      do
      {
        v41 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*((_QWORD *)this + 29), *v40, v40[1]);
        if (v41)
          v6 = (_QWORD *)v41[2];
        else
          v6 = 0;
        v42 = v6[2];
        if (v42)
        {
          v43 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)(v42 + 8);
          if (v43)
            WebCore::IDBServer::UniqueIDBDatabaseConnection::abortTransactionWithoutCallback(v43, (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v6);
        }
        v40 += 2;
      }
      while (v40 != v39);
    }
  }
  if (v16)
    WTF::fastFree(v16, v6);
  v44 = *((_QWORD *)this + 30);
  if (v44)
  {
    *((_QWORD *)this + 30) = 0;
    WTF::fastFree((WTF *)(v44 - 16), v6);
  }
  v45 = *((_QWORD *)this + 31);
  if (v45)
  {
    *((_QWORD *)this + 31) = 0;
    WTF::fastFree((WTF *)(v45 - 16), v6);
  }
  v46 = (WebCore::IDBServer *)*((_QWORD *)this + 15);
  if (v46)
  {
    WebCore::IDBServer::errorOpenDBRequestForUserDelete(v46, (WebCore::IDBServer::ServerOpenDBRequest *)v6);
    v47 = (WebCore::IDBServer::ServerOpenDBRequest *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 1)
      {
        WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest(v47, v6);
        WTF::fastFree(v91, v92);
      }
      else
      {
        --*(_DWORD *)v47;
      }
    }
  }
  v49 = (WTF **)((char *)this + 104);
  v48 = *((_QWORD *)this + 13);
  if (v48)
  {
    do
    {
      WebCore::IDBServer::errorOpenDBRequestForUserDelete(*(WebCore::IDBServer **)v48, (WebCore::IDBServer::ServerOpenDBRequest *)v6);
      v48 = *(_QWORD *)(v48 + 16);
    }
    while (v48);
    v50 = *v49;
    while (v50)
    {
      v51 = v50;
      v50 = (WTF *)*((_QWORD *)v50 + 2);
      v52 = *(WebCore::IDBServer::ServerOpenDBRequest **)v51;
      *(_QWORD *)v51 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 1)
        {
          WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest(v52, v6);
          WTF::fastFree(v53, v54);
        }
        else
        {
          --*(_DWORD *)v52;
        }
      }
      WTF::fastFree(v51, v6);
    }
  }
  v55 = *((_QWORD *)this + 12);
  if (v55)
  {
    *((_QWORD *)this + 12) = 0;
    WTF::fastFree((WTF *)(v55 - 16), v6);
  }
  *v49 = 0;
  *((_QWORD *)this + 14) = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v56 = (_QWORD *)*((_QWORD *)this + 18);
  if (!v56)
    goto LABEL_125;
  while (2)
  {
    WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(&v95, 8u, 0);
    v57 = v95;
    if (v95)
LABEL_92:
      v58 = *(_DWORD *)(v57 - 8);
    else
      v58 = 0;
    v59 = 0;
    v60 = ~(*v56 << 32) + *v56;
    v61 = (v60 ^ (v60 >> 22)) + ~((v60 ^ (v60 >> 22)) << 13);
    v62 = (9 * (v61 ^ (v61 >> 8))) ^ ((9 * (v61 ^ (v61 >> 8))) >> 15);
    v63 = ((v62 + ~(v62 << 27)) >> 31) ^ (v62 + ~((_DWORD)v62 << 27));
    for (i = 1; ; ++i)
    {
      v65 = v63 & v58;
      v66 = (_QWORD **)(v57 + 8 * v65);
      v67 = *v66;
      if (*v66 == (_QWORD *)-1)
      {
        v59 = (_QWORD *)(v57 + 8 * v65);
        goto LABEL_99;
      }
      if (!v67)
        break;
      if (*v67 == *v56)
        goto LABEL_118;
LABEL_99:
      v63 = i + v65;
    }
    if (v59)
    {
      *v59 = 0;
      --*(_DWORD *)(v95 - 16);
      v66 = (_QWORD **)v59;
    }
    v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v69 = (_DWORD *)*v56;
    if (*v56)
      ++*v69;
    v68[1] = 0;
    v68[2] = 0;
    *v68 = v69;
    *v66 = v68;
    v70 = v95;
    if (v95)
      v71 = *(_DWORD *)(v95 - 12) + 1;
    else
      v71 = 1;
    *(_DWORD *)(v95 - 12) = v71;
    v72 = (*(_DWORD *)(v70 - 16) + v71);
    v73 = *(unsigned int *)(v70 - 4);
    if (v73 > 0x400)
    {
      if (v73 <= 2 * v72)
      {
LABEL_110:
        v74 = (_DWORD)v73 << (6 * v71 >= (2 * v73));
        goto LABEL_113;
      }
    }
    else if (3 * v73 <= 4 * v72)
    {
      if ((_DWORD)v73)
        goto LABEL_110;
      v74 = 8;
LABEL_113:
      v68 = (_QWORD *)*WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(&v95, v74, v66);
    }
    v75 = v97;
    v68[1] = v97;
    v68[2] = 0;
    if (v75)
      v76 = (WTF **)(v75 + 2);
    else
      v76 = &v96;
    *v76 = (WTF *)v68;
    v97 = v68;
LABEL_118:
    v56 = (_QWORD *)v56[2];
    if (v56)
    {
      v57 = v95;
      if (v95)
        goto LABEL_92;
      continue;
    }
    break;
  }
  for (j = v96; j; j = (WTF *)*((_QWORD *)j + 2))
    WebCore::IDBServer::UniqueIDBDatabase::connectionClosedFromServer(this, *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)j);
LABEL_125:
  v78 = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)*((_QWORD *)this + 20);
  if (v78)
  {
    if (v95)
    {
      v79 = *(_DWORD *)(v95 - 8);
      v80 = ((unint64_t)v78 + ~((_QWORD)v78 << 32)) ^ (((unint64_t)v78 + ~((_QWORD)v78 << 32)) >> 22);
      v81 = 9 * ((v80 + ~(v80 << 13)) ^ ((v80 + ~(v80 << 13)) >> 8));
      v82 = (v81 ^ (v81 >> 15)) + ~((v81 ^ (v81 >> 15)) << 27);
      v83 = v79 & ((v82 >> 31) ^ v82);
      for (k = 1; ; ++k)
      {
        v85 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection ***)(v95 + 8 * v83);
        if (v85 != (WebCore::IDBServer::UniqueIDBDatabaseConnection **)-1)
        {
          if (!v85)
            goto LABEL_132;
          if (*v85 == v78)
            break;
        }
        v83 = (v83 + k) & v79;
      }
    }
    else
    {
LABEL_132:
      WebCore::IDBServer::UniqueIDBDatabase::connectionClosedFromServer(this, *((WebCore::IDBServer::UniqueIDBDatabaseConnection **)this + 20));
      v78 = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)*((_QWORD *)this + 20);
    }
    *((_QWORD *)this + 20) = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 1)
      {
        WebCore::IDBServer::UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection(v78);
        WTF::fastFree(v93, v94);
      }
      else
      {
        --*(_DWORD *)v78;
      }
    }
  }
  result = (WTF *)*((_QWORD *)this + 22);
  if (result)
  {
    (*(void (**)(WTF *))(*(_QWORD *)result + 248))(result);
    result = (WTF *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = 0;
    if (result)
      result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  }
  for (m = v96; m; result = (WTF *)WTF::fastFree(v87, v6))
  {
    v87 = m;
    m = (WTF *)*((_QWORD *)m + 2);
    v88 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)v87;
    *(_QWORD *)v87 = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 1)
      {
        WebCore::IDBServer::UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection(v88);
        WTF::fastFree(v89, v90);
      }
      else
      {
        --*(_DWORD *)v88;
      }
    }
  }
  if (v95)
    return (WTF *)WTF::fastFree((WTF *)(v95 - 16), v6);
  return result;
}

void WebCore::IDBServer::errorOpenDBRequestForUserDelete(WebCore::IDBServer *this, WebCore::IDBServer::ServerOpenDBRequest *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  WTF::StringImpl *v11[3];
  __int16 v12;
  WTF::StringImpl *v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v11[0];
  if (v11[0])
  {
    v7 = *(_DWORD *)v11[0];
    *(_DWORD *)v11[0] += 2;
    v11[0] = 0;
    if (v7)
      *(_DWORD *)v6 = v7;
    else
      WTF::StringImpl::destroy(v6, v5);
  }
  v11[1] = v3;
  v11[2] = v4;
  v14 = 0;
  v15 = 0;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  LOBYTE(v11[0]) = 0;
  v12 = 280;
  if (v6)
  {
    v8 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    v13 = v6;
    if (v8)
      *(_DWORD *)v6 = v8;
    else
      WTF::StringImpl::destroy(v6, v5);
  }
  else
  {
    v13 = 0;
  }
  v9 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
  if (v9)
  {
    v10 = 24;
    if (!*((_BYTE *)this + 128))
      v10 = 32;
    (*(void (**)(void))(*v9 + v10))();
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v11);
}

_QWORD *WebCore::IDBServer::UniqueIDBDatabase::abortActiveTransactions(_QWORD *this, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v9;
  uint64_t v10;
  WTF *v11;
  unsigned int v12;
  _OWORD *v13;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  v2 = this;
  v3 = this[29];
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (_OWORD *)(v3 + 24 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = (_OWORD *)this[29];
      if ((_DWORD)v4)
      {
        v7 = 24 * v4;
        v6 = (_OWORD *)this[29];
        while (*v6 == 0 || *(_QWORD *)v6 == -1)
        {
          v6 = (_OWORD *)((char *)v6 + 24);
          v7 -= 24;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v6 = (_OWORD *)(v3 + 24 * v4);
  }
  else
  {
    v6 = 0;
    LODWORD(v4) = 0;
  }
  v5 = (_OWORD *)(v3 + 24 * v4);
  if (!v3)
  {
    v9 = 0;
    goto LABEL_19;
  }
LABEL_12:
  v9 = (_OWORD *)(v3 + 24 * *(unsigned int *)(v3 - 4));
  v10 = *(unsigned int *)(v3 - 12);
  if (!(_DWORD)v10)
  {
LABEL_19:
    v11 = 0;
    goto LABEL_20;
  }
  if (v10 >> 28)
  {
    __break(0xC471u);
    return this;
  }
  this = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v10));
  v11 = (WTF *)this;
LABEL_20:
  if (v9 != v6)
  {
    v12 = 0;
    do
    {
      v13 = (_OWORD *)((char *)v6 + 24);
      *((_OWORD *)v11 + v12) = *v6;
      v6 = v5;
      if (v13 != v5)
      {
        v6 = v13;
        while (*v6 == 0 || *(_QWORD *)v6 == -1)
        {
          v6 = (_OWORD *)((char *)v6 + 24);
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
      ++v12;
    }
    while (v6 != v9);
    if (v12)
    {
      v15 = (unint64_t *)((char *)v11 + 16 * v12);
      v16 = (unint64_t *)v11;
      do
      {
        v17 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(v2[29], *v16, v16[1]);
        if (v17)
          v18 = v17[2];
        else
          v18 = 0;
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v2[22] + 40))(&v22, v2[22], v18 + 24);
        v19 = v22;
        this = v23;
        if (v23)
          *(_DWORD *)v23 += 2;
        v20 = *(unsigned __int8 *)(v18 + 120);
        *(_WORD *)(v18 + 104) = v19;
        if (v20)
        {
          v21 = *(WTF::StringImpl **)(v18 + 112);
          *(_QWORD *)(v18 + 112) = this;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
            {
              WTF::StringImpl::destroy(v21, a2);
              this = v23;
            }
            else
            {
              *(_DWORD *)v21 -= 2;
            }
          }
        }
        else
        {
          *(_QWORD *)(v18 + 112) = this;
          *(_BYTE *)(v18 + 120) = 1;
        }
        v23 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          else
            *(_DWORD *)this -= 2;
        }
        v16 += 2;
      }
      while (v16 != v15);
    }
  }
  if (v11)
    return (_QWORD *)WTF::fastFree(v11, a2);
  return this;
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::tryClose(WebCore::IDBServer::UniqueIDBDatabase *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 22);
  if (v2 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 232))(v2) & 1) != 0)
    return 0;
  v3 = *((_QWORD *)this + 17);
  if (v3)
  {
    if (*(_DWORD *)(v3 - 12))
      return 0;
  }
  if (*((_QWORD *)this + 20))
    return 0;
  v5 = *((_QWORD *)this + 22);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 248))(v5);
    v6 = *((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return 1;
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::hasDataInMemory(WebCore::IDBServer::UniqueIDBDatabase *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 22);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 232))(result);
  return result;
}

uint64_t WTF::ListHashSet<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::ServerOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBServer::ServerOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::ServerOpenDBRequest>>>>::takeFirst(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  WebCore::IDBServer::ServerOpenDBRequest **v20;
  WebCore::IDBServer::ServerOpenDBRequest *v21;
  WebCore::IDBServer::ServerOpenDBRequest *v22;
  WebCore::IDBServer::ServerOpenDBRequest **v23;
  WebCore::IDBServer::ServerOpenDBRequest *v24;
  WTF *v26;
  void *v27;

  v3 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(*(_QWORD *)a2 - 8);
  v5 = **(_QWORD **)(a2 + 8);
  v6 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v4 & ((v8 >> 31) ^ v8);
  for (i = 1; ; ++i)
  {
    v11 = v9;
    v12 = *(uint64_t **)(v3 + 8 * v9);
    if (v12 == (uint64_t *)-1)
      goto LABEL_5;
    if (!v12)
      break;
    if (*v12 == v5)
      goto LABEL_7;
LABEL_5:
    v9 = (v11 + i) & v4;
  }
  v11 = *(unsigned int *)(v3 - 4);
  v12 = *(uint64_t **)(v3 + 8 * v11);
  v5 = *v12;
LABEL_7:
  v13 = (_QWORD *)(v3 + 8 * v11);
  *v12 = 0;
  *a1 = v5;
  if (!*(_QWORD *)a2 || (_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)a2 - 4)) != v13)
  {
    *v13 = -1;
    ++*(_DWORD *)(*(_QWORD *)a2 - 16);
    v14 = *(_QWORD *)a2;
    v15 = *(_QWORD *)a2 ? *(_DWORD *)(v14 - 12) - 1 : -1;
    *(_DWORD *)(v14 - 12) = v15;
    v16 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v17 = 6 * *(_DWORD *)(v16 - 12);
      v18 = *(_DWORD *)(v16 - 4);
      if (v17 < v18 && v18 >= 9)
        WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash((uint64_t *)a2, v18 >> 1, 0);
    }
  }
  v20 = *(WebCore::IDBServer::ServerOpenDBRequest ***)(a2 + 8);
  v21 = v20[1];
  v22 = v20[2];
  if (v21)
  {
    *((_QWORD *)v21 + 2) = v22;
    v22 = v20[2];
  }
  else
  {
    *(_QWORD *)(a2 + 8) = v22;
  }
  if (v22)
    v23 = (WebCore::IDBServer::ServerOpenDBRequest **)((char *)v22 + 8);
  else
    v23 = (WebCore::IDBServer::ServerOpenDBRequest **)(a2 + 16);
  *v23 = v21;
  v24 = *v20;
  *v20 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
    {
      WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest(v24, (void *)a2);
      WTF::fastFree(v26, v27);
    }
    else
    {
      --*(_DWORD *)v24;
    }
  }
  return WTF::fastFree((WTF *)v20, (void *)a2);
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::filePath@<X0>(WebCore::IDBServer::UniqueIDBDatabase *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v3;

  result = *((_QWORD *)this + 22);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 240))(result);
  v3 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
    *v3 += 2;
  *a2 = v3;
  return result;
}

_QWORD *WebCore::IDBServer::UniqueIDBDatabase::nameAndVersion@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v2 = this[22];
  if (!v2)
    goto LABEL_12;
  v3 = this[21];
  if (!v3)
  {
    v6 = this[23];
    v5 = *(_DWORD **)v6;
    if (*(_QWORD *)v6)
      *v5 += 2;
    v2 = *(_QWORD *)(v6 + 8);
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(v3 + 80);
  if (!v4)
  {
    LOBYTE(v2) = 0;
    goto LABEL_12;
  }
  v2 = *(_QWORD *)(v4 + 8);
  if (!v2)
  {
LABEL_12:
    *(_BYTE *)a2 = 0;
    goto LABEL_13;
  }
  v5 = *(_DWORD **)v4;
  if (v5)
    *v5 += 2;
LABEL_10:
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v2;
  LOBYTE(v2) = 1;
LABEL_13:
  *(_BYTE *)(a2 + 16) = v2;
  return this;
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::handleLowMemoryWarning(WebCore::IDBServer::UniqueIDBDatabase *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 22);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
  return result;
}

void WebCore::IDBServer::UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection(WebCore::IDBServer::UniqueIDBDatabaseConnection *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction **v7;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      (*(void (**)(uint64_t, WebCore::IDBServer::UniqueIDBDatabaseConnection *))(*(_QWORD *)v3 + 24))(v3, this);
  }
  WebCore::IDBServer::IDBConnectionToClient::unregisterDatabaseConnection(*((WebCore::IDBServer::IDBConnectionToClient **)this + 5), this);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction **)(v5 + 16);
      do
      {
        if (*(v7 - 2) != (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)-1)
        {
          v8 = *v7;
          *v7 = 0;
          if (v8)
          {
            if (*((_DWORD *)v8 + 2) == 1)
            {
              WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v8, v4);
              WTF::fastFree(v9, v10);
            }
            else
            {
              --*((_DWORD *)v8 + 2);
            }
          }
        }
        v7 += 3;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  v11 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      v22 = *((_QWORD *)v11 + 2);
      if (v22)
        WTF::fastFree((WTF *)(v22 - 16), v4);
      WTF::fastFree(v11, v4);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  v12 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v4);
    }
  }
  v15 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v4);
    }
  }
  v18 = *((_QWORD *)this + 2);
  if (v18)
  {
    *(_QWORD *)(v18 + 8) = 0;
    v19 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t WebCore::IDBServer::UniqueIDBDatabaseConnection::connectionPendingCloseFromClient(uint64_t this)
{
  *(_BYTE *)(this + 64) = 1;
  return this;
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabaseConnection::connectionClosedFromClient(WebCore::IDBServer::UniqueIDBDatabaseConnection *this)
{
  uint64_t v2;
  WebCore::IDBServer::UniqueIDBDatabase *v3;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v2 + 8);
  else
    v3 = 0;
  return WebCore::IDBServer::UniqueIDBDatabase::connectionClosedFromClient(v3, this);
}

void WebCore::IDBServer::UniqueIDBDatabaseConnection::didFireVersionChangeEvent(WebCore::IDBServer::UniqueIDBDatabaseConnection *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WebCore::IDBServer::UniqueIDBDatabase *v5;

  v4 = *((_QWORD *)a1 + 3);
  if (v4)
    v5 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v4 + 8);
  else
    v5 = 0;
  WebCore::IDBServer::UniqueIDBDatabase::didFireVersionChangeEvent(v5, a1, a3, a3);
}

WTF::StringImpl *WebCore::IDBServer::UniqueIDBDatabaseConnection::didFinishHandlingVersionChange(WebCore::IDBServer::UniqueIDBDatabaseConnection *this, const WebCore::IDBResourceIdentifier *a2, const WebCore::IDBResourceIdentifier *a3)
{
  uint64_t v3;
  WebCore::IDBServer::UniqueIDBDatabase *v4;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    v4 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v3 + 8);
  else
    v4 = 0;
  return WebCore::IDBServer::UniqueIDBDatabase::didFinishHandlingVersionChange(v4, a2, a3);
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WebCore::IDBServer::UniqueIDBDatabaseConnection::establishTransaction(WebCore::IDBServer::UniqueIDBDatabaseConnection *this, const WebCore::IDBTransactionInfo *a2)
{
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v4;
  uint64_t v5;
  WebCore::IDBServer::UniqueIDBDatabase *v6;
  WTF::StringImpl *v7;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *result;
  WTF *v9;
  void *v10;
  _BYTE v11[24];
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v12;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v13;

  v4 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::fastMalloc((WTF *)0x90);
  v13 = WebCore::IDBServer::UniqueIDBDatabaseTransaction::UniqueIDBDatabaseTransaction(v4, this, a2);
  v12 = v13;
  WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBServer::UniqueIDBDatabaseTransaction*>((uint64_t *)this + 9, (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)((char *)v13 + 24), (unint64_t *)&v12, (uint64_t)v11);
  v5 = *((_QWORD *)this + 3);
  if (v5)
    v6 = *(WebCore::IDBServer::UniqueIDBDatabase **)(v5 + 8);
  else
    v6 = 0;
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)v6 + 200, (uint64_t *)&v13);
  WebCore::IDBServer::UniqueIDBDatabase::handleTransactions(v6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(result, v7);
      return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::fastFree(v9, v10);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WebCore::IDBServer::UniqueIDBDatabaseTransaction::UniqueIDBDatabaseTransaction(WebCore::IDBServer::UniqueIDBDatabaseTransaction *this, WebCore::IDBServer::UniqueIDBDatabaseConnection *a2, const WebCore::IDBTransactionInfo *a3)
{
  uint64_t v5;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl ***v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  _DWORD *v16;
  __int128 v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WebCore::IDBObjectStoreInfo *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 1;
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    goto LABEL_35;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = a2;
  v8 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  if (!v8)
    goto LABEL_35;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
  {
LABEL_35:
    do
      v11 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v11 + 1, (unsigned int *)v5));
  }
  *((_QWORD *)this + 2) = v5;
  WebCore::IDBTransactionInfo::IDBTransactionInfo((uint64_t)this + 24, a3);
  *((_QWORD *)this + 10) = 0;
  v12 = (WTF::StringImpl ***)((char *)this + 80);
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 0;
  if (*((_BYTE *)this + 40) == 2)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 24) + 8) + 184);
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x1953FA5ACLL);
    }
    v14 = bmalloc::api::isoAllocate();
    v15 = (WTF::StringImpl **)v14;
    v16 = *(_DWORD **)v13;
    if (*(_QWORD *)v13)
      *v16 += 2;
    *(_QWORD *)v14 = v16;
    v17 = *(_OWORD *)(v13 + 8);
    *(_QWORD *)(v14 + 24) = *(_QWORD *)(v13 + 24);
    *(_OWORD *)(v14 + 8) = v17;
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)(v14 + 32), (_QWORD *)(v13 + 32));
    v19 = *v12;
    *v12 = v15;
    if (v19)
    {
      v20 = v19[4];
      if (v20)
      {
        v21 = *((unsigned int *)v20 - 1);
        if ((_DWORD)v21)
        {
          v22 = (WTF::StringImpl *)((char *)v20 + 8);
          do
          {
            if (*((_QWORD *)v22 - 1) != -1)
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v22, v18);
            v22 = (WebCore::IDBObjectStoreInfo *)((char *)v22 + 72);
            --v21;
          }
          while (v21);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v20 - 16), v18);
      }
      v23 = *v19;
      *v19 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v18);
        else
          *(_DWORD *)v23 -= 2;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v19, v18);
    }
  }
  v24 = *((_QWORD *)this + 2);
  if (v24)
  {
    v25 = *(_QWORD *)(v24 + 8);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 32);
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 8);
        if (v27)
          (*(void (**)(uint64_t, WebCore::IDBServer::UniqueIDBDatabaseTransaction *))(*(_QWORD *)v27 + 32))(v27, this);
      }
    }
  }
  return this;
}

void WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(WebCore::IDBServer::UniqueIDBDatabaseTransaction *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::IDBObjectStoreInfo *v17;
  WTF::StringImpl *v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 32);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
          (*(void (**)(uint64_t, WebCore::IDBServer::UniqueIDBDatabaseTransaction *))(*(_QWORD *)v6 + 40))(v6, this);
      }
    }
  }
  v7 = *((unsigned int *)this + 35);
  if ((_DWORD)v7)
  {
    v8 = 16 * v7;
    v9 = (WTF::StringImpl **)(*((_QWORD *)this + 16) + 8);
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v9 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  v11 = (WTF *)*((_QWORD *)this + 16);
  if (v11)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v11, a2);
  }
  if (*((_BYTE *)this + 120))
  {
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, a2);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v13 = (WTF *)*((_QWORD *)this + 11);
  if (v13)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v13, a2);
  }
  v14 = (WTF::StringImpl **)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v14)
  {
    v15 = v14[4];
    if (v15)
    {
      v16 = *((unsigned int *)v15 - 1);
      if ((_DWORD)v16)
      {
        v17 = (WTF::StringImpl *)((char *)v15 + 8);
        do
        {
          if (*((_QWORD *)v17 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v17, a2);
          v17 = (WebCore::IDBObjectStoreInfo *)((char *)v17 + 72);
          --v16;
        }
        while (v16);
      }
      WTF::fastFree((WTF::StringImpl *)((char *)v15 - 16), a2);
    }
    v18 = *v14;
    *v14 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, a2);
      else
        *(_DWORD *)v18 -= 2;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v14, a2);
  }
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBServer::UniqueIDBDatabaseTransaction *)((char *)this + 24), a2);
  v20 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v19);
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v23 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v19);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::abort(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = this[2];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(uint64_t **)(v3 + 8);
        if (v4)
        {
          v5 = this;
          v6 = *this;
          if (*this)
            goto LABEL_16;
          v6 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v6 = 1;
          *(_QWORD *)(v6 + 8) = v5;
          v8 = (unsigned int *)*v5;
          *v5 = v6;
          if (!v8)
            goto LABEL_16;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v8);
            WTF::fastFree((WTF *)v8, v7);
          }
          v6 = *v5;
          if (*v5)
          {
LABEL_16:
            do
              v11 = __ldaxr((unsigned int *)v6);
            while (__stlxr(v11 + 1, (unsigned int *)v6));
          }
          v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v12 = &off_1E335B240;
          v12[1] = v5;
          v12[2] = v6;
          v13 = (uint64_t)v12;
          WebCore::IDBServer::UniqueIDBDatabase::abortTransaction(v4, v5, &v13, 0);
          this = (uint64_t *)v13;
          if (v13)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
      }
    }
  }
  return this;
}

BOOL WebCore::IDBServer::UniqueIDBDatabaseTransaction::isVersionChange(WebCore::IDBServer::UniqueIDBDatabaseTransaction *this)
{
  return *((_BYTE *)this + 40) == 2;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::commit(uint64_t *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;

  v2 = this[2];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v7 = this;
          v8 = *this;
          if (*this)
            goto LABEL_16;
          v8 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v8 = 1;
          *(_QWORD *)(v8 + 8) = v7;
          v10 = (unsigned int *)*v7;
          *v7 = v8;
          if (!v10)
            goto LABEL_16;
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            atomic_store(1u, v10);
            WTF::fastFree((WTF *)v10, v9);
          }
          v8 = *v7;
          if (*v7)
          {
LABEL_16:
            do
              v13 = __ldaxr((unsigned int *)v8);
            while (__stlxr(v13 + 1, (unsigned int *)v8));
          }
          v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v14 = &off_1E335B268;
          v14[1] = v7;
          v14[2] = v8;
          v15 = (uint64_t)v14;
          WebCore::IDBServer::UniqueIDBDatabase::commitTransaction(v5, (uint64_t)v7, a2, &v15, 0);
          this = (uint64_t *)v15;
          if (v15)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::createObjectStore(uint64_t *this, const WebCore::IDBRequestData *a2, const WebCore::IDBObjectStoreInfo *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v3 = this[2];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(uint64_t **)(v5 + 8);
        if (v6)
        {
          v9 = this;
          v10 = *this;
          if (*this)
            goto LABEL_16;
          v10 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v10 = 1;
          *(_QWORD *)(v10 + 8) = v9;
          v12 = (unsigned int *)*v9;
          *v9 = v10;
          if (!v12)
            goto LABEL_16;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v11);
          }
          v10 = *v9;
          if (*v9)
          {
LABEL_16:
            do
              v15 = __ldaxr((unsigned int *)v10);
            while (__stlxr(v15 + 1, (unsigned int *)v10));
          }
          v16 = *(_QWORD *)a2;
          v25 = *(_OWORD *)((char *)a2 + 24);
          v26 = *(_OWORD *)((char *)a2 + 8);
          v23 = *(_OWORD *)((char *)a2 + 40);
          v17 = *((_QWORD *)a2 + 8);
          v24 = *((_QWORD *)a2 + 7);
          v18 = *((_QWORD *)a2 + 9);
          v19 = *((_BYTE *)a2 + 80);
          v20 = *((_QWORD *)a2 + 11);
          v21 = *((_BYTE *)a2 + 96);
          v22 = WTF::fastMalloc((WTF *)0x80);
          *(_QWORD *)v22 = &off_1E335B290;
          *(_QWORD *)(v22 + 8) = v9;
          *(_QWORD *)(v22 + 16) = v10;
          *(_QWORD *)(v22 + 24) = v16;
          *(_OWORD *)(v22 + 32) = v26;
          *(_OWORD *)(v22 + 48) = v25;
          *(_OWORD *)(v22 + 64) = v23;
          *(_QWORD *)(v22 + 80) = v24;
          *(_QWORD *)(v22 + 88) = v17;
          *(_QWORD *)(v22 + 96) = v18;
          *(_BYTE *)(v22 + 104) = v19;
          *(_QWORD *)(v22 + 112) = v20;
          *(_BYTE *)(v22 + 120) = v21;
          v27 = v22;
          WebCore::IDBServer::UniqueIDBDatabase::createObjectStore(v6, v9, (uint64_t)a3, &v27, 0);
          this = (uint64_t *)v27;
          if (v27)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteObjectStore(uint64_t *this, const WebCore::IDBRequestData *a2, const WTF::StringImpl **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v3 = this[2];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(uint64_t **)(v5 + 8);
        if (v6)
        {
          v9 = this;
          v10 = *this;
          if (*this)
            goto LABEL_16;
          v10 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v10 = 1;
          *(_QWORD *)(v10 + 8) = v9;
          v12 = (unsigned int *)*v9;
          *v9 = v10;
          if (!v12)
            goto LABEL_16;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v11);
          }
          v10 = *v9;
          if (*v9)
          {
LABEL_16:
            do
              v15 = __ldaxr((unsigned int *)v10);
            while (__stlxr(v15 + 1, (unsigned int *)v10));
          }
          v16 = *(_QWORD *)a2;
          v25 = *(_OWORD *)((char *)a2 + 24);
          v26 = *(_OWORD *)((char *)a2 + 8);
          v23 = *(_OWORD *)((char *)a2 + 40);
          v17 = *((_QWORD *)a2 + 8);
          v24 = *((_QWORD *)a2 + 7);
          v18 = *((_QWORD *)a2 + 9);
          v19 = *((_BYTE *)a2 + 80);
          v20 = *((_QWORD *)a2 + 11);
          v21 = *((_BYTE *)a2 + 96);
          v22 = WTF::fastMalloc((WTF *)0x80);
          *(_QWORD *)v22 = &off_1E335B2B8;
          *(_QWORD *)(v22 + 8) = v9;
          *(_QWORD *)(v22 + 16) = v10;
          *(_QWORD *)(v22 + 24) = v16;
          *(_OWORD *)(v22 + 32) = v26;
          *(_OWORD *)(v22 + 48) = v25;
          *(_OWORD *)(v22 + 64) = v23;
          *(_QWORD *)(v22 + 80) = v24;
          *(_QWORD *)(v22 + 88) = v17;
          *(_QWORD *)(v22 + 96) = v18;
          *(_BYTE *)(v22 + 104) = v19;
          *(_QWORD *)(v22 + 112) = v20;
          *(_BYTE *)(v22 + 120) = v21;
          v27 = v22;
          WebCore::IDBServer::UniqueIDBDatabase::deleteObjectStore(v6, v9, a3, &v27, 0);
          this = (uint64_t *)v27;
          if (v27)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::renameObjectStore(uint64_t *this, const WebCore::IDBRequestData *a2, WTF::StringImpl *a3, WTF::StringImpl **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v4 = this[2];
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v11 = this;
          v25 = v7;
          v12 = *this;
          if (*this)
            goto LABEL_16;
          v12 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v12 = 1;
          *(_QWORD *)(v12 + 8) = v11;
          v14 = (unsigned int *)*v11;
          *v11 = v12;
          if (!v14)
            goto LABEL_16;
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, v13);
          }
          v12 = *v11;
          if (*v11)
          {
LABEL_16:
            do
              v17 = __ldaxr((unsigned int *)v12);
            while (__stlxr(v17 + 1, (unsigned int *)v12));
          }
          v18 = *(_QWORD *)a2;
          v28 = *(_OWORD *)((char *)a2 + 24);
          v29 = *(_OWORD *)((char *)a2 + 8);
          v26 = *(_OWORD *)((char *)a2 + 40);
          v19 = *((_QWORD *)a2 + 8);
          v27 = *((_QWORD *)a2 + 7);
          v20 = *((_QWORD *)a2 + 9);
          v21 = *((_BYTE *)a2 + 80);
          v22 = *((_QWORD *)a2 + 11);
          v23 = *((_BYTE *)a2 + 96);
          v24 = WTF::fastMalloc((WTF *)0x80);
          *(_QWORD *)v24 = &off_1E335B2E0;
          *(_QWORD *)(v24 + 8) = v11;
          *(_QWORD *)(v24 + 16) = v12;
          *(_QWORD *)(v24 + 24) = v18;
          *(_OWORD *)(v24 + 32) = v29;
          *(_OWORD *)(v24 + 48) = v28;
          *(_OWORD *)(v24 + 64) = v26;
          *(_QWORD *)(v24 + 80) = v27;
          *(_QWORD *)(v24 + 88) = v19;
          *(_QWORD *)(v24 + 96) = v20;
          *(_BYTE *)(v24 + 104) = v21;
          *(_QWORD *)(v24 + 112) = v22;
          *(_BYTE *)(v24 + 120) = v23;
          v30 = v24;
          WebCore::IDBServer::UniqueIDBDatabase::renameObjectStore(v25, v11, a3, a4, &v30, 0);
          this = (uint64_t *)v30;
          if (v30)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::clearObjectStore(uint64_t *this, const WebCore::IDBRequestData *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v3 = this[2];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(uint64_t **)(v5 + 8);
        if (v6)
        {
          v9 = this;
          v10 = *this;
          if (*this)
            goto LABEL_16;
          v10 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v10 = 1;
          *(_QWORD *)(v10 + 8) = v9;
          v12 = (unsigned int *)*v9;
          *v9 = v10;
          if (!v12)
            goto LABEL_16;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v11);
          }
          v10 = *v9;
          if (*v9)
          {
LABEL_16:
            do
              v15 = __ldaxr((unsigned int *)v10);
            while (__stlxr(v15 + 1, (unsigned int *)v10));
          }
          v16 = *(_QWORD *)a2;
          v25 = *(_OWORD *)((char *)a2 + 24);
          v26 = *(_OWORD *)((char *)a2 + 8);
          v23 = *(_OWORD *)((char *)a2 + 40);
          v17 = *((_QWORD *)a2 + 8);
          v24 = *((_QWORD *)a2 + 7);
          v18 = *((_QWORD *)a2 + 9);
          v19 = *((_BYTE *)a2 + 80);
          v20 = *((_QWORD *)a2 + 11);
          v21 = *((_BYTE *)a2 + 96);
          v22 = WTF::fastMalloc((WTF *)0x80);
          *(_QWORD *)v22 = &off_1E335B308;
          *(_QWORD *)(v22 + 8) = v9;
          *(_QWORD *)(v22 + 16) = v10;
          *(_QWORD *)(v22 + 24) = v16;
          *(_OWORD *)(v22 + 32) = v26;
          *(_OWORD *)(v22 + 48) = v25;
          *(_OWORD *)(v22 + 64) = v23;
          *(_QWORD *)(v22 + 80) = v24;
          *(_QWORD *)(v22 + 88) = v17;
          *(_QWORD *)(v22 + 96) = v18;
          *(_BYTE *)(v22 + 104) = v19;
          *(_QWORD *)(v22 + 112) = v20;
          *(_BYTE *)(v22 + 120) = v21;
          v27 = v22;
          WebCore::IDBServer::UniqueIDBDatabase::clearObjectStore(v6, v9, a3, &v27, 0);
          this = (uint64_t *)v27;
          if (v27)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::createIndex(uint64_t *this, const WebCore::IDBRequestData *a2, const WebCore::IDBIndexInfo *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v3 = this[2];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(uint64_t **)(v5 + 8);
        if (v6)
        {
          v9 = this;
          v10 = *this;
          if (*this)
            goto LABEL_16;
          v10 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v10 = 1;
          *(_QWORD *)(v10 + 8) = v9;
          v12 = (unsigned int *)*v9;
          *v9 = v10;
          if (!v12)
            goto LABEL_16;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v11);
          }
          v10 = *v9;
          if (*v9)
          {
LABEL_16:
            do
              v15 = __ldaxr((unsigned int *)v10);
            while (__stlxr(v15 + 1, (unsigned int *)v10));
          }
          v16 = *(_QWORD *)a2;
          v25 = *(_OWORD *)((char *)a2 + 24);
          v26 = *(_OWORD *)((char *)a2 + 8);
          v23 = *(_OWORD *)((char *)a2 + 40);
          v17 = *((_QWORD *)a2 + 8);
          v24 = *((_QWORD *)a2 + 7);
          v18 = *((_QWORD *)a2 + 9);
          v19 = *((_BYTE *)a2 + 80);
          v20 = *((_QWORD *)a2 + 11);
          v21 = *((_BYTE *)a2 + 96);
          v22 = WTF::fastMalloc((WTF *)0x80);
          *(_QWORD *)v22 = &off_1E335B330;
          *(_QWORD *)(v22 + 8) = v9;
          *(_QWORD *)(v22 + 16) = v10;
          *(_QWORD *)(v22 + 24) = v16;
          *(_OWORD *)(v22 + 32) = v26;
          *(_OWORD *)(v22 + 48) = v25;
          *(_OWORD *)(v22 + 64) = v23;
          *(_QWORD *)(v22 + 80) = v24;
          *(_QWORD *)(v22 + 88) = v17;
          *(_QWORD *)(v22 + 96) = v18;
          *(_BYTE *)(v22 + 104) = v19;
          *(_QWORD *)(v22 + 112) = v20;
          *(_BYTE *)(v22 + 120) = v21;
          v27 = v22;
          WebCore::IDBServer::UniqueIDBDatabase::createIndex(v6, v9, (uint64_t)a3, &v27, 0);
          this = (uint64_t *)v27;
          if (v27)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteIndex(uint64_t *this, const WebCore::IDBRequestData *a2, const WTF::StringImpl *a3, const WTF::StringImpl **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v4 = this[2];
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(uint64_t **)(v6 + 8);
        if (v7)
        {
          v11 = this;
          v25 = v7;
          v12 = *this;
          if (*this)
            goto LABEL_16;
          v12 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v12 = 1;
          *(_QWORD *)(v12 + 8) = v11;
          v14 = (unsigned int *)*v11;
          *v11 = v12;
          if (!v14)
            goto LABEL_16;
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, v13);
          }
          v12 = *v11;
          if (*v11)
          {
LABEL_16:
            do
              v17 = __ldaxr((unsigned int *)v12);
            while (__stlxr(v17 + 1, (unsigned int *)v12));
          }
          v18 = *(_QWORD *)a2;
          v28 = *(_OWORD *)((char *)a2 + 24);
          v29 = *(_OWORD *)((char *)a2 + 8);
          v26 = *(_OWORD *)((char *)a2 + 40);
          v19 = *((_QWORD *)a2 + 8);
          v27 = *((_QWORD *)a2 + 7);
          v20 = *((_QWORD *)a2 + 9);
          v21 = *((_BYTE *)a2 + 80);
          v22 = *((_QWORD *)a2 + 11);
          v23 = *((_BYTE *)a2 + 96);
          v24 = WTF::fastMalloc((WTF *)0x80);
          *(_QWORD *)v24 = &off_1E335B358;
          *(_QWORD *)(v24 + 8) = v11;
          *(_QWORD *)(v24 + 16) = v12;
          *(_QWORD *)(v24 + 24) = v18;
          *(_OWORD *)(v24 + 32) = v29;
          *(_OWORD *)(v24 + 48) = v28;
          *(_OWORD *)(v24 + 64) = v26;
          *(_QWORD *)(v24 + 80) = v27;
          *(_QWORD *)(v24 + 88) = v19;
          *(_QWORD *)(v24 + 96) = v20;
          *(_BYTE *)(v24 + 104) = v21;
          *(_QWORD *)(v24 + 112) = v22;
          *(_BYTE *)(v24 + 120) = v23;
          v30 = v24;
          WebCore::IDBServer::UniqueIDBDatabase::deleteIndex(v25, v11, a3, a4, &v30, 0);
          this = (uint64_t *)v30;
          if (v30)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::renameIndex(uint64_t *this, const WebCore::IDBRequestData *a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v5 = this[2];
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v8 = *(uint64_t **)(v7 + 8);
        if (v8)
        {
          v13 = this;
          v27 = v8;
          v14 = *this;
          if (*this)
            goto LABEL_16;
          v14 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v14 = 1;
          *(_QWORD *)(v14 + 8) = v13;
          v16 = (unsigned int *)*v13;
          *v13 = v14;
          if (!v16)
            goto LABEL_16;
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            atomic_store(1u, v16);
            WTF::fastFree((WTF *)v16, v15);
          }
          v14 = *v13;
          if (*v13)
          {
LABEL_16:
            do
              v19 = __ldaxr((unsigned int *)v14);
            while (__stlxr(v19 + 1, (unsigned int *)v14));
          }
          v20 = *(_QWORD *)a2;
          v30 = *(_OWORD *)((char *)a2 + 24);
          v31 = *(_OWORD *)((char *)a2 + 8);
          v28 = *(_OWORD *)((char *)a2 + 40);
          v21 = *((_QWORD *)a2 + 8);
          v29 = *((_QWORD *)a2 + 7);
          v22 = *((_QWORD *)a2 + 9);
          v23 = *((_BYTE *)a2 + 80);
          v26 = *((_QWORD *)a2 + 11);
          v24 = *((_BYTE *)a2 + 96);
          v25 = WTF::fastMalloc((WTF *)0x80);
          *(_QWORD *)v25 = &off_1E335B380;
          *(_QWORD *)(v25 + 8) = v13;
          *(_QWORD *)(v25 + 16) = v14;
          *(_QWORD *)(v25 + 24) = v20;
          *(_OWORD *)(v25 + 32) = v31;
          *(_OWORD *)(v25 + 48) = v30;
          *(_OWORD *)(v25 + 64) = v28;
          *(_QWORD *)(v25 + 80) = v29;
          *(_QWORD *)(v25 + 88) = v21;
          *(_QWORD *)(v25 + 96) = v22;
          *(_BYTE *)(v25 + 104) = v23;
          *(_QWORD *)(v25 + 112) = v26;
          *(_BYTE *)(v25 + 120) = v24;
          v32 = v25;
          WebCore::IDBServer::UniqueIDBDatabase::renameIndex(v27, v13, a3, a4, a5, &v32, 0);
          this = (uint64_t *)v32;
          if (v32)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::putOrAdd(uint64_t *result, uint64_t a2, WebCore::IDBKeyData *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int **v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;

  v5 = result[2];
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v8 = *(WTF::StringImpl **)(v7 + 8);
        if (v8)
        {
          v13 = (unsigned int **)result;
          v27 = v8;
          v14 = *result;
          if (*result)
            goto LABEL_16;
          v14 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v14 = 1;
          *(_QWORD *)(v14 + 8) = v13;
          v16 = *v13;
          *v13 = (unsigned int *)v14;
          if (!v16)
            goto LABEL_16;
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            atomic_store(1u, v16);
            WTF::fastFree((WTF *)v16, v15);
          }
          v14 = (uint64_t)*v13;
          if (*v13)
          {
LABEL_16:
            do
              v19 = __ldaxr((unsigned int *)v14);
            while (__stlxr(v19 + 1, (unsigned int *)v14));
          }
          v20 = *(_QWORD *)a2;
          v30 = *(_OWORD *)(a2 + 24);
          v31 = *(_OWORD *)(a2 + 8);
          v28 = *(_OWORD *)(a2 + 40);
          v21 = *(_QWORD *)(a2 + 64);
          v29 = *(_QWORD *)(a2 + 56);
          v22 = *(_QWORD *)(a2 + 72);
          v23 = *(_BYTE *)(a2 + 80);
          v26 = *(_QWORD *)(a2 + 88);
          v25 = *(_BYTE *)(a2 + 96);
          v24 = WTF::fastMalloc((WTF *)0x80);
          *(_QWORD *)v24 = &off_1E335B3A8;
          *(_QWORD *)(v24 + 8) = v13;
          *(_QWORD *)(v24 + 16) = v14;
          *(_QWORD *)(v24 + 24) = v20;
          *(_OWORD *)(v24 + 32) = v31;
          *(_OWORD *)(v24 + 48) = v30;
          *(_OWORD *)(v24 + 64) = v28;
          *(_QWORD *)(v24 + 80) = v29;
          *(_QWORD *)(v24 + 88) = v21;
          *(_QWORD *)(v24 + 96) = v22;
          *(_BYTE *)(v24 + 104) = v23;
          *(_QWORD *)(v24 + 112) = v26;
          *(_BYTE *)(v24 + 120) = v25;
          v32 = (uint64_t *)v24;
          WebCore::IDBServer::UniqueIDBDatabase::putOrAdd(v27, (uint64_t *)a2, a3, a4, a5, (uint64_t *)&v32);
          result = v32;
          if (v32)
            return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v32 + 8))(v32);
        }
      }
    }
  }
  return result;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::getRecord(uint64_t *this, const WebCore::IDBRequestData *a2, const WebCore::IDBGetRecordData *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int **v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v3 = this[2];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(uint64_t **)(v5 + 8);
        if (v6)
        {
          v9 = (unsigned int **)this;
          v23 = v6;
          v10 = *this;
          if (*this)
            goto LABEL_16;
          v10 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v10 = 1;
          *(_QWORD *)(v10 + 8) = v9;
          v12 = *v9;
          *v9 = (unsigned int *)v10;
          if (!v12)
            goto LABEL_16;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v11);
          }
          v10 = (uint64_t)*v9;
          if (*v9)
          {
LABEL_16:
            do
              v15 = __ldaxr((unsigned int *)v10);
            while (__stlxr(v15 + 1, (unsigned int *)v10));
          }
          v16 = *(_QWORD *)a2;
          v26 = *(_OWORD *)((char *)a2 + 24);
          v27 = *(_OWORD *)((char *)a2 + 8);
          v24 = *(_OWORD *)((char *)a2 + 40);
          v17 = *((_QWORD *)a2 + 8);
          v25 = *((_QWORD *)a2 + 7);
          v18 = *((_QWORD *)a2 + 9);
          v19 = *((_BYTE *)a2 + 80);
          v20 = *((_QWORD *)a2 + 11);
          v21 = *((_BYTE *)a2 + 96);
          v22 = WTF::fastMalloc((WTF *)0x80);
          *(_QWORD *)v22 = &off_1E335B3D0;
          *(_QWORD *)(v22 + 8) = v9;
          *(_QWORD *)(v22 + 16) = v10;
          *(_QWORD *)(v22 + 24) = v16;
          *(_OWORD *)(v22 + 32) = v27;
          *(_OWORD *)(v22 + 48) = v26;
          *(_OWORD *)(v22 + 64) = v24;
          *(_QWORD *)(v22 + 80) = v25;
          *(_QWORD *)(v22 + 88) = v17;
          *(_QWORD *)(v22 + 96) = v18;
          *(_BYTE *)(v22 + 104) = v19;
          *(_QWORD *)(v22 + 112) = v20;
          *(_BYTE *)(v22 + 120) = v21;
          v28 = v22;
          WebCore::IDBServer::UniqueIDBDatabase::getRecord(v23, (uint64_t *)a2, (char *)a3, &v28, 0);
          this = (uint64_t *)v28;
          if (v28)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::getAllRecords(uint64_t *this, const WebCore::IDBRequestData *a2, const WebCore::IDBGetAllRecordsData *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int **v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v3 = this[2];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(uint64_t **)(v5 + 8);
        if (v6)
        {
          v9 = (unsigned int **)this;
          v23 = v6;
          v10 = *this;
          if (*this)
            goto LABEL_16;
          v10 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v10 = 1;
          *(_QWORD *)(v10 + 8) = v9;
          v12 = *v9;
          *v9 = (unsigned int *)v10;
          if (!v12)
            goto LABEL_16;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v11);
          }
          v10 = (uint64_t)*v9;
          if (*v9)
          {
LABEL_16:
            do
              v15 = __ldaxr((unsigned int *)v10);
            while (__stlxr(v15 + 1, (unsigned int *)v10));
          }
          v16 = *(_QWORD *)a2;
          v26 = *(_OWORD *)((char *)a2 + 24);
          v27 = *(_OWORD *)((char *)a2 + 8);
          v24 = *(_OWORD *)((char *)a2 + 40);
          v17 = *((_QWORD *)a2 + 8);
          v25 = *((_QWORD *)a2 + 7);
          v18 = *((_QWORD *)a2 + 9);
          v19 = *((_BYTE *)a2 + 80);
          v20 = *((_QWORD *)a2 + 11);
          v21 = *((_BYTE *)a2 + 96);
          v22 = WTF::fastMalloc((WTF *)0x80);
          *(_QWORD *)v22 = &off_1E335B3F8;
          *(_QWORD *)(v22 + 8) = v9;
          *(_QWORD *)(v22 + 16) = v10;
          *(_QWORD *)(v22 + 24) = v16;
          *(_OWORD *)(v22 + 32) = v27;
          *(_OWORD *)(v22 + 48) = v26;
          *(_OWORD *)(v22 + 64) = v24;
          *(_QWORD *)(v22 + 80) = v25;
          *(_QWORD *)(v22 + 88) = v17;
          *(_QWORD *)(v22 + 96) = v18;
          *(_BYTE *)(v22 + 104) = v19;
          *(_QWORD *)(v22 + 112) = v20;
          *(_BYTE *)(v22 + 120) = v21;
          v28 = v22;
          WebCore::IDBServer::UniqueIDBDatabase::getAllRecords(v23, (uint64_t)a2, (char *)a3, &v28, 0);
          this = (uint64_t *)v28;
          if (v28)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::getCount(uint64_t *this, const WebCore::IDBRequestData *a2, const WebCore::IDBKeyRangeData *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int **v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v3 = this[2];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(uint64_t **)(v5 + 8);
        if (v6)
        {
          v9 = (unsigned int **)this;
          v23 = v6;
          v10 = *this;
          if (*this)
            goto LABEL_16;
          v10 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v10 = 1;
          *(_QWORD *)(v10 + 8) = v9;
          v12 = *v9;
          *v9 = (unsigned int *)v10;
          if (!v12)
            goto LABEL_16;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v11);
          }
          v10 = (uint64_t)*v9;
          if (*v9)
          {
LABEL_16:
            do
              v15 = __ldaxr((unsigned int *)v10);
            while (__stlxr(v15 + 1, (unsigned int *)v10));
          }
          v16 = *(_QWORD *)a2;
          v26 = *(_OWORD *)((char *)a2 + 24);
          v27 = *(_OWORD *)((char *)a2 + 8);
          v24 = *(_OWORD *)((char *)a2 + 40);
          v17 = *((_QWORD *)a2 + 8);
          v25 = *((_QWORD *)a2 + 7);
          v18 = *((_QWORD *)a2 + 9);
          v19 = *((_BYTE *)a2 + 80);
          v20 = *((_QWORD *)a2 + 11);
          v21 = *((_BYTE *)a2 + 96);
          v22 = WTF::fastMalloc((WTF *)0x80);
          *(_QWORD *)v22 = &off_1E335B420;
          *(_QWORD *)(v22 + 8) = v9;
          *(_QWORD *)(v22 + 16) = v10;
          *(_QWORD *)(v22 + 24) = v16;
          *(_OWORD *)(v22 + 32) = v27;
          *(_OWORD *)(v22 + 48) = v26;
          *(_OWORD *)(v22 + 64) = v24;
          *(_QWORD *)(v22 + 80) = v25;
          *(_QWORD *)(v22 + 88) = v17;
          *(_QWORD *)(v22 + 96) = v18;
          *(_BYTE *)(v22 + 104) = v19;
          *(_QWORD *)(v22 + 112) = v20;
          *(_BYTE *)(v22 + 120) = v21;
          v28 = v22;
          WebCore::IDBServer::UniqueIDBDatabase::getCount(v23, (uint64_t *)a2, (char *)a3, &v28, 0);
          this = (uint64_t *)v28;
          if (v28)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteRecord(uint64_t *this, const WebCore::IDBRequestData *a2, const WebCore::IDBKeyRangeData *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int **v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v3 = this[2];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(uint64_t **)(v5 + 8);
        if (v6)
        {
          v9 = (unsigned int **)this;
          v23 = v6;
          v10 = *this;
          if (*this)
            goto LABEL_16;
          v10 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v10 = 1;
          *(_QWORD *)(v10 + 8) = v9;
          v12 = *v9;
          *v9 = (unsigned int *)v10;
          if (!v12)
            goto LABEL_16;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v11);
          }
          v10 = (uint64_t)*v9;
          if (*v9)
          {
LABEL_16:
            do
              v15 = __ldaxr((unsigned int *)v10);
            while (__stlxr(v15 + 1, (unsigned int *)v10));
          }
          v16 = *(_QWORD *)a2;
          v26 = *(_OWORD *)((char *)a2 + 24);
          v27 = *(_OWORD *)((char *)a2 + 8);
          v24 = *(_OWORD *)((char *)a2 + 40);
          v17 = *((_QWORD *)a2 + 8);
          v25 = *((_QWORD *)a2 + 7);
          v18 = *((_QWORD *)a2 + 9);
          v19 = *((_BYTE *)a2 + 80);
          v20 = *((_QWORD *)a2 + 11);
          v21 = *((_BYTE *)a2 + 96);
          v22 = WTF::fastMalloc((WTF *)0x80);
          *(_QWORD *)v22 = &off_1E335B448;
          *(_QWORD *)(v22 + 8) = v9;
          *(_QWORD *)(v22 + 16) = v10;
          *(_QWORD *)(v22 + 24) = v16;
          *(_OWORD *)(v22 + 32) = v27;
          *(_OWORD *)(v22 + 48) = v26;
          *(_OWORD *)(v22 + 64) = v24;
          *(_QWORD *)(v22 + 80) = v25;
          *(_QWORD *)(v22 + 88) = v17;
          *(_QWORD *)(v22 + 96) = v18;
          *(_BYTE *)(v22 + 104) = v19;
          *(_QWORD *)(v22 + 112) = v20;
          *(_BYTE *)(v22 + 120) = v21;
          v28 = v22;
          WebCore::IDBServer::UniqueIDBDatabase::deleteRecord(v23, (uint64_t *)a2, (char *)a3, &v28, 0);
          this = (uint64_t *)v28;
          if (v28)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::openCursor(uint64_t *this, const WebCore::IDBRequestData *a2, const WebCore::IDBCursorInfo *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int **v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v3 = this[2];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(uint64_t **)(v5 + 8);
        if (v6)
        {
          v9 = (unsigned int **)this;
          v23 = v6;
          v10 = *this;
          if (*this)
            goto LABEL_16;
          v10 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v10 = 1;
          *(_QWORD *)(v10 + 8) = v9;
          v12 = *v9;
          *v9 = (unsigned int *)v10;
          if (!v12)
            goto LABEL_16;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v11);
          }
          v10 = (uint64_t)*v9;
          if (*v9)
          {
LABEL_16:
            do
              v15 = __ldaxr((unsigned int *)v10);
            while (__stlxr(v15 + 1, (unsigned int *)v10));
          }
          v16 = *(_QWORD *)a2;
          v26 = *(_OWORD *)((char *)a2 + 24);
          v27 = *(_OWORD *)((char *)a2 + 8);
          v24 = *(_OWORD *)((char *)a2 + 40);
          v17 = *((_QWORD *)a2 + 8);
          v25 = *((_QWORD *)a2 + 7);
          v18 = *((_QWORD *)a2 + 9);
          v19 = *((_BYTE *)a2 + 80);
          v20 = *((_QWORD *)a2 + 11);
          v21 = *((_BYTE *)a2 + 96);
          v22 = WTF::fastMalloc((WTF *)0x80);
          *(_QWORD *)v22 = &off_1E335B470;
          *(_QWORD *)(v22 + 8) = v9;
          *(_QWORD *)(v22 + 16) = v10;
          *(_QWORD *)(v22 + 24) = v16;
          *(_OWORD *)(v22 + 32) = v27;
          *(_OWORD *)(v22 + 48) = v26;
          *(_OWORD *)(v22 + 64) = v24;
          *(_QWORD *)(v22 + 80) = v25;
          *(_QWORD *)(v22 + 88) = v17;
          *(_QWORD *)(v22 + 96) = v18;
          *(_BYTE *)(v22 + 104) = v19;
          *(_QWORD *)(v22 + 112) = v20;
          *(_BYTE *)(v22 + 120) = v21;
          v28 = v22;
          WebCore::IDBServer::UniqueIDBDatabase::openCursor(v23, (uint64_t *)a2, (__int128 *)a3, &v28, 0);
          this = (uint64_t *)v28;
          if (v28)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::IDBServer::UniqueIDBDatabaseTransaction::iterateCursor(uint64_t *this, const WebCore::IDBRequestData *a2, const WebCore::IDBIterateCursorData *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  unsigned int **v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  WTF *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v3 = this[2];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(WTF **)(v5 + 8);
        if (v6)
        {
          v9 = (unsigned int **)this;
          v24 = v6;
          v10 = *this;
          if (*this)
            goto LABEL_16;
          v10 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v10 = 1;
          *(_QWORD *)(v10 + 8) = v9;
          v12 = *v9;
          *v9 = (unsigned int *)v10;
          if (!v12)
            goto LABEL_16;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v11);
          }
          v10 = (uint64_t)*v9;
          if (*v9)
          {
LABEL_16:
            do
              v15 = __ldaxr((unsigned int *)v10);
            while (__stlxr(v15 + 1, (unsigned int *)v10));
          }
          v16 = *(_QWORD *)a2;
          v27 = *(_OWORD *)((char *)a2 + 24);
          v28 = *(_OWORD *)((char *)a2 + 8);
          v25 = *(_OWORD *)((char *)a2 + 40);
          v17 = *((_QWORD *)a2 + 8);
          v26 = *((_QWORD *)a2 + 7);
          v18 = *((_QWORD *)a2 + 9);
          v19 = *((_BYTE *)a2 + 80);
          v20 = *((_QWORD *)a2 + 11);
          v21 = *((_BYTE *)a2 + 96);
          v23 = *((_BYTE *)a3 + 68);
          v22 = WTF::fastMalloc((WTF *)0x88);
          *(_QWORD *)v22 = &off_1E335B498;
          *(_QWORD *)(v22 + 8) = v9;
          *(_QWORD *)(v22 + 16) = v10;
          *(_QWORD *)(v22 + 24) = v16;
          *(_OWORD *)(v22 + 32) = v28;
          *(_OWORD *)(v22 + 48) = v27;
          *(_OWORD *)(v22 + 64) = v25;
          *(_QWORD *)(v22 + 80) = v26;
          *(_QWORD *)(v22 + 88) = v17;
          *(_QWORD *)(v22 + 96) = v18;
          *(_BYTE *)(v22 + 104) = v19;
          *(_QWORD *)(v22 + 112) = v20;
          *(_BYTE *)(v22 + 120) = v21;
          *(_BYTE *)(v22 + 128) = v23;
          v29 = v22;
          WebCore::IDBServer::UniqueIDBDatabase::iterateCursor(v24, (uint64_t *)a2, (char *)a3, &v29, 0);
          this = (uint64_t *)v29;
          if (v29)
            return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        }
      }
    }
  }
  return this;
}

double WebCore::IDBCursorInfo::IDBCursorInfo(WebCore::IDBCursorInfo *this)
{
  double result;

  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_WORD *)this + 56) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_BYTE *)this + 48) = 0;
  return result;
}

{
  double result;

  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_WORD *)this + 56) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_BYTE *)this + 48) = 0;
  return result;
}

uint64_t WebCore::IDBCursorInfo::IDBCursorInfo(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4, uint64_t a5, char *a6, char a7, char a8, char a9)
{
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v18;
  char v19;

  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = *a3;
  v13 = *a6;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_BYTE *)(a1 + 48) = v13;
  *(_DWORD *)(a1 + 72) = -1;
  v14 = *((unsigned int *)a6 + 6);
  if ((_DWORD)v14 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v14])(&v18);
    *(_DWORD *)(a1 + 72) = v14;
  }
  v15 = a6[32];
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 80) = v15;
  *(_DWORD *)(a1 + 104) = -1;
  v16 = *((unsigned int *)a6 + 14);
  if ((_DWORD)v16 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v16])(&v19);
    *(_DWORD *)(a1 + 104) = v16;
  }
  *(_WORD *)(a1 + 112) = *((_WORD *)a6 + 32);
  *(_BYTE *)(a1 + 120) = a7;
  *(_BYTE *)(a1 + 121) = a8;
  *(_BYTE *)(a1 + 122) = a9;
  return a1;
}

{
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v18;
  char v19;

  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = *a3;
  v13 = *a6;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_BYTE *)(a1 + 48) = v13;
  *(_DWORD *)(a1 + 72) = -1;
  v14 = *((unsigned int *)a6 + 6);
  if ((_DWORD)v14 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v14])(&v18);
    *(_DWORD *)(a1 + 72) = v14;
  }
  v15 = a6[32];
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 80) = v15;
  *(_DWORD *)(a1 + 104) = -1;
  v16 = *((unsigned int *)a6 + 14);
  if ((_DWORD)v16 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v16])(&v19);
    *(_DWORD *)(a1 + 104) = v16;
  }
  *(_WORD *)(a1 + 112) = *((_WORD *)a6 + 32);
  *(_BYTE *)(a1 + 120) = a7;
  *(_BYTE *)(a1 + 121) = a8;
  *(_BYTE *)(a1 + 122) = a9;
  return a1;
}

_QWORD *WebCore::IDBCursorInfo::isolatedCopy@<X0>(WebCore::IDBCursorInfo *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  char v7;
  char v8;
  char v9;
  int v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[8];
  _BYTE v17[16];
  int v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  __int16 v22;
  char v23;

  v14 = *((_OWORD *)this + 1);
  v15 = *(_OWORD *)this;
  v4 = *((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 5);
  result = WebCore::IDBKeyRangeData::isolatedCopy((WebCore::IDBCursorInfo *)((char *)this + 48), (uint64_t)v16);
  v7 = *((_BYTE *)this + 120);
  v8 = *((_BYTE *)this + 121);
  v9 = *((_BYTE *)this + 122);
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = v16[0];
  *(_BYTE *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 72) = -1;
  v10 = v18;
  if (v18 != -1)
  {
    result = (_QWORD *)((uint64_t (*)(char *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v18])(&v23, a2 + 56, v17);
    *(_DWORD *)(a2 + 72) = v10;
  }
  v11 = v19;
  *(_BYTE *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 80) = v11;
  *(_DWORD *)(a2 + 104) = -1;
  v12 = v21;
  if (v21 == -1)
  {
    *(_WORD *)(a2 + 112) = v22;
    *(_BYTE *)(a2 + 120) = v7;
    *(_BYTE *)(a2 + 121) = v8;
    *(_BYTE *)(a2 + 122) = v9;
  }
  else
  {
    result = (_QWORD *)((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v21])(&v23);
    *(_DWORD *)(a2 + 104) = v12;
    v13 = v21;
    *(_WORD *)(a2 + 112) = v22;
    *(_BYTE *)(a2 + 120) = v7;
    *(_BYTE *)(a2 + 121) = v8;
    *(_BYTE *)(a2 + 122) = v9;
    if ((_DWORD)v13 != -1)
      result = (_QWORD *)((uint64_t (*)(char *, uint64_t *))off_1E335ACA8[v13])(&v23, &v20);
  }
  v21 = -1;
  if (v18 != -1)
    return (_QWORD *)((uint64_t (*)(char *, _BYTE *))off_1E335ACA8[v18])(&v23, v17);
  return result;
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::supportsSimultaneousTransactions(WebCore::IDBServer::SQLiteIDBBackingStore *this)
{
  return 0;
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::isEphemeral(WebCore::IDBServer::SQLiteIDBBackingStore *this)
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_iEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v6;

  result = sqlite3_finalize(*(sqlite3_stmt **)(a2 + 8));
  v4 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v4)
  {
    if (atomic_load(v4))
    {
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 - 1, v4));
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore15SQLiteStatementEEEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSC_iEEEEEEDcSG_DpT0_(uint64_t a1, sqlite3_stmt ***a2)
{
  sqlite3_stmt **v2;
  void *v3;
  unsigned int *v4;
  unsigned int v6;
  uint64_t result;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    sqlite3_finalize(v2[1]);
    v4 = (unsigned int *)*v2;
    *v2 = 0;
    if (!v4)
      return WTF::fastFree((WTF *)v2, v3);
    if (atomic_load(v4))
    {
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 - 1, v4));
      return WTF::fastFree((WTF *)v2, v3);
    }
    result = 286;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  if ((_DWORD)a2)
  {
    v3 = a2;
    v4 = this;
    do
    {
      v5 = *v4;
      *v4 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)this, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBServer::estimateSize(std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&)::{lambda(WTF::String const&)#1},WebCore::IDBServer::estimateSize(std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a2)
    return (*(_DWORD *)(*(_QWORD *)a2 + 4) << (((*(_DWORD *)(*(_QWORD *)a2 + 16) >> 2) & 1) == 0));
  else
    return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IDBServer::estimateSize(std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&)::{lambda(WTF::String const&)#1},WebCore::IDBServer::estimateSize(std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  int v8;

  v2 = a2[3];
  if (!(_DWORD)v2)
    return 0;
  v3 = 0;
  v4 = *(WTF::StringImpl ***)a2;
  v5 = 8 * v2;
  do
  {
    v6 = *v4;
    if (*v4)
    {
      v7 = *(_DWORD *)v6;
      v8 = *((_DWORD *)v6 + 1);
      *(_DWORD *)v6 += 2;
      v3 += (v8 << (~(*((_DWORD *)v6 + 4) >> 2) & 1));
      if (v7)
        *(_DWORD *)v6 = v7;
      else
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    ++v4;
    v5 -= 8;
  }
  while (v5);
  return v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJDnS9_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E335ACF0[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJDnS9_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
  {
LABEL_7:
    *(_DWORD *)(v4 + 32) = -1;
    *(_BYTE *)v4 = *(_BYTE *)a3;
    *(_BYTE *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 24) = -1;
    v10 = *(unsigned int *)(a3 + 24);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v10])(&v14, v4 + 8, a3 + 8);
      *(_DWORD *)(v4 + 24) = v10;
    }
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E335ACF0[v5])(&v13, v4);
    goto LABEL_7;
  }
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v7 = a2 + 8;
  v8 = *(unsigned int *)(a2 + 24);
  v9 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v8 == -1)
  {
    if ((_DWORD)v9 == -1)
      return result;
  }
  else if ((_DWORD)v9 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E335ACA8[v8])(&v12, v7);
    *(_DWORD *)(a2 + 24) = -1;
    return result;
  }
  v11 = v7;
  return ((uint64_t (*)(uint64_t *))off_1E335AD98[v9])(&v11);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS9_Lm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJDnS9_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
      return WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2, a3);
    result = ((uint64_t (*)(char *, uint64_t))off_1E335ACF0[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  v6 = a3[3];
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 12) = v6;
  if (!(_DWORD)v6)
    goto LABEL_12;
  if (!(v6 >> 27))
  {
    result = WTF::fastMalloc((WTF *)(32 * v6));
    *(_DWORD *)(v4 + 8) = v6;
    *(_QWORD *)v4 = result;
    v7 = a3[3];
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a3 + 32 * v7;
      v9 = (_DWORD *)(result + 24);
      v10 = *(_QWORD *)a3 + 8;
      do
      {
        v11 = v10 - 8;
        *((_BYTE *)v9 - 24) = *(_BYTE *)(v10 - 8);
        *((_BYTE *)v9 - 16) = 0;
        *v9 = -1;
        v12 = *(unsigned int *)(v10 + 16);
        if ((_DWORD)v12 != -1)
        {
          result = ((uint64_t (*)(char *, _DWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_2[v12])(&v14, v9 - 4, v10);
          *v9 = v12;
        }
        v9 += 8;
        v10 += 32;
      }
      while (v11 + 32 != v8);
    }
LABEL_12:
    *(_DWORD *)(v4 + 32) = 2;
    return result;
  }
  __break(0xC471u);
  return result;
}

_BYTE *WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(_BYTE *result, _BYTE *a2, uint64_t a3, unsigned int a4, _BYTE *a5, uint64_t a6, _BYTE *a7, unint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  size_t v12;
  size_t v13;
  int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned int v26;
  _BYTE *v27;
  size_t v28;
  unsigned int v29;
  _BYTE *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  _QWORD v37[3];

  v8 = a8;
  v9 = a4;
  v11 = result;
  v37[2] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v12 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1953FCA48);
    }
  }
  else
  {
    v12 = 0;
  }
  if (a6)
  {
    v13 = a6 - 1;
    if ((unint64_t)(a6 - 1) >> 31)
    {
LABEL_57:
      __break(0xC471u);
      JUMPOUT(0x1953FC92CLL);
    }
  }
  else
  {
    v13 = 0;
  }
  if (a8 >> 31)
    goto LABEL_57;
  if ((a4 & 0x80000000) != 0)
  {
    v33 = -a4;
    v15 = 1;
    do
    {
      ++v15;
      v34 = v33 >= 0xA;
      v33 /= 0xAu;
    }
    while (v34);
  }
  else
  {
    v15 = 0;
    v16 = a4;
    do
    {
      ++v15;
      v17 = v16 > 9;
      v16 /= 0xAu;
    }
    while (v17);
  }
  v18 = 0;
  v19 = v13 + a8;
  if (!__OFADD__((_DWORD)v13, (_DWORD)a8) && (v15 & 0x80000000) == 0)
  {
    v20 = __OFADD__(v15, v19);
    v21 = v15 + v19;
    if (v20)
      goto LABEL_52;
    v22 = (v12 + v21);
    if (__OFADD__((_DWORD)v12, v21))
      goto LABEL_52;
    if (!(_DWORD)v22)
    {
      v18 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_34;
    }
    if ((v22 & 0x80000000) != 0)
    {
LABEL_52:
      v18 = 0;
      goto LABEL_34;
    }
    result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v22 + 20));
    v18 = v37[0];
    if (v37[0])
    {
      v23 = (_BYTE *)(v37[0] + 20);
      *(_DWORD *)v37[0] = 2;
      *(_DWORD *)(v18 + 4) = v22;
      *(_QWORD *)(v18 + 8) = v18 + 20;
      *(_DWORD *)(v18 + 16) = 4;
      if ((_DWORD)v12)
      {
        if ((_DWORD)v12 == 1)
          *v23 = *a2;
        else
          result = memcpy((void *)(v18 + 20), a2, v12);
      }
      v24 = &v23[v12];
      v25 = 0;
      if ((v9 & 0x80000000) != 0)
      {
        v31 = -v9;
        do
        {
          *((_BYTE *)&v37[1] + v25-- + 4) = (v31 % 0xA) | 0x30;
          v17 = v31 > 9;
          v31 /= 0xAu;
        }
        while (v17);
        v32 = v25 + 12;
        v27 = (char *)&v37[1] + v25 + 4;
        *v27 = 45;
        if (v25 + 14 > 14)
          goto LABEL_25;
        if (v32 <= 12)
          v32 = 12;
        v28 = v32 - v25 - 11;
      }
      else
      {
        v26 = v9;
        do
        {
          *((_BYTE *)&v37[1] + v25-- + 4) = (v26 % 0xA) | 0x30;
          v17 = v26 > 9;
          v26 /= 0xAu;
        }
        while (v17);
        if (v25 + 14 > 13)
          goto LABEL_25;
        v27 = (char *)&v37[1] + v25 + 5;
        v28 = -v25;
      }
      result = memcpy(&v23[v12], v27, v28);
LABEL_25:
      if ((v9 & 0x80000000) != 0)
      {
        v35 = -v9;
        v29 = 1;
        do
        {
          ++v29;
          v34 = v35 >= 0xA;
          v35 /= 0xAu;
        }
        while (v34);
      }
      else
      {
        v29 = 0;
        do
        {
          ++v29;
          v17 = v9 > 9;
          v9 /= 0xAu;
        }
        while (v17);
      }
      v30 = &v24[v29];
      if ((_DWORD)v13)
      {
        if ((_DWORD)v13 == 1)
        {
          *v30 = *a5;
          if (!v8)
            goto LABEL_34;
LABEL_32:
          result = &v30[v13];
          if (v8 == 1)
            *result = *a7;
          else
            result = memcpy(result, a7, v8);
          goto LABEL_34;
        }
        result = memcpy(&v24[v29], a5, v13);
      }
      if (!v8)
        goto LABEL_34;
      goto LABEL_32;
    }
  }
LABEL_34:
  *v11 = v18;
  return result;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(_WORD *result, unsigned int a2, int8x16_t *a3, int a4, int8x16_t *a5, int a6)
{
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  _WORD *v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  _WORD *v13;
  unsigned int v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  char *v26;
  char *v27;
  __int128 v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  unsigned int v36;
  _BYTE v37[13];
  uint64_t v38;
  int8x16x2_t v39;
  int8x16x2_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;

  v38 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) != 0)
  {
    v11 = -a2;
    v12 = 12;
    do
    {
      v37[v12--] = (v11 % 0xA) | 0x30;
      v8 = v11 > 9;
      v11 /= 0xAu;
    }
    while (v8);
    v37[v12] = 45;
    if (v12 + 2 <= 14)
    {
      v13 = result;
      do
      {
        *v13++ = v37[v12];
        v8 = v12++ < 12;
      }
      while (v8);
    }
  }
  else
  {
    v6 = 0;
    v7 = a2;
    do
    {
      v37[v6-- + 12] = (v7 % 0xA) | 0x30;
      v8 = v7 > 9;
      v7 /= 0xAu;
    }
    while (v8);
    if (v6 + 14 <= 13)
    {
      v9 = result;
      do
      {
        *v9++ = *((unsigned __int8 *)&v38 + v6);
        v10 = __CFADD__(v6++, 1);
      }
      while (!v10);
    }
  }
  if ((a2 & 0x80000000) != 0)
  {
    v36 = -a2;
    v14 = 1;
    do
    {
      ++v14;
      v10 = v36 >= 0xA;
      v36 /= 0xAu;
    }
    while (v10);
  }
  else
  {
    v14 = 0;
    do
    {
      ++v14;
      v8 = a2 > 9;
      a2 /= 0xAu;
    }
    while (v8);
  }
  v15 = (char *)&result[v14];
  v16 = &v15[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v17 = &v15[2 * (a4 & 0xFFFFFFC0)];
    v18 = 0uLL;
    do
    {
      v39.val[0] = *a3;
      v19 = a3[1];
      v41.val[0] = a3[2];
      v20 = a3[3];
      a3 += 4;
      v21 = v20;
      v41.val[1] = 0uLL;
      v43.val[0] = v19;
      v39.val[1] = 0uLL;
      v22 = v15;
      vst2q_s8(v22, v39);
      v22 += 32;
      v43.val[1] = 0uLL;
      vst2q_s8(v22, v43);
      v23 = v15 + 64;
      vst2q_s8(v23, v41);
      v24 = v15 + 96;
      vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
      v15 += 128;
    }
    while (v15 != v17);
    v15 = v17;
  }
  while (v15 != v16)
  {
    v25 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v15 = v25;
    v15 += 2;
  }
  v26 = &v16[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v27 = &v16[2 * (a6 & 0xFFFFFFC0)];
    v28 = 0uLL;
    do
    {
      v40.val[0] = *a5;
      v29 = a5[1];
      v42.val[0] = a5[2];
      v30 = a5[3];
      a5 += 4;
      v31 = v30;
      v42.val[1] = 0uLL;
      v44.val[0] = v29;
      v40.val[1] = 0uLL;
      v32 = v16;
      vst2q_s8(v32, v40);
      v32 += 32;
      v44.val[1] = 0uLL;
      vst2q_s8(v32, v44);
      v33 = v16 + 64;
      vst2q_s8(v33, v42);
      v34 = v16 + 96;
      vst2q_s8(v34, *(int8x16x2_t *)(&v28 - 1));
      v16 += 128;
    }
    while (v16 != v27);
    v16 = v27;
  }
  while (v16 != v26)
  {
    v35 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v16 = v35;
    v16 += 2;
  }
  return result;
}

uint64_t WTF::HashMap<std::pair<unsigned long long,unsigned long long>,unsigned long long,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned long long,unsigned long long>,unsigned long long,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>>,std::pair<unsigned long long,unsigned long long>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t *v16;

  if (result)
  {
    v3 = *(_DWORD *)(result - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v3 & ((0xD7862706ELL
               * (unint64_t)(277951225 * ((v6 >> 31) ^ v6)
                                  + 95187966 * ((v9 >> 31) ^ v9))) >> 4);
    v11 = (uint64_t *)(result + 24 * v10);
    v12 = *v11;
    v13 = v11[1];
    if (*v11 == a2 && v13 == a3)
    {
      return *(_QWORD *)(result + 24 * v10 + 16);
    }
    else
    {
      v15 = 1;
      while (v12 | v13)
      {
        v10 = (v10 + v15) & v3;
        v16 = (uint64_t *)(result + 24 * v10);
        v12 = *v16;
        v13 = v16[1];
        ++v15;
        if (v12 == a2 && v13 == a3)
          return *(_QWORD *)(result + 24 * v10 + 16);
      }
      return 0;
    }
  }
  return result;
}

unint64_t WTF::parseInteger<unsigned long long,unsigned char>(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  int v12;
  char v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *i;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  int v23;
  uint64_t v25;
  int v26;

  v4 = 0;
  v5 = 0;
  if (!a1 || !a2)
    return v5 | v4;
  v6 = 0;
  while (1)
  {
    v7 = *(unsigned __int8 *)(a1 + v6);
    if (v7 - 9 >= 5 && v7 != 32)
      break;
    if (a2 == ++v6)
      goto LABEL_54;
  }
  if (v7 == 43)
  {
    if (a2 - 1 == v6)
      goto LABEL_54;
    v8 = ~v6 + a2;
    v9 = (unsigned __int8 *)(a1 + v6 + 1);
    v7 = *v9;
  }
  else
  {
    v9 = (unsigned __int8 *)(a1 + v6);
    v8 = a2 - v6;
  }
  if (v7 - 48 <= 9)
  {
    if (v7 - 48 < a3)
    {
      if ((int)a3 >= 36)
        v10 = 36;
      else
        v10 = a3;
      v11 = v10 + 87;
      goto LABEL_23;
    }
LABEL_54:
    v4 = 0;
    v5 = 0;
    return v5 | v4;
  }
  if ((v7 | 0x20) < 0x61)
    goto LABEL_54;
  v12 = (int)a3 >= 36 ? 36 : a3;
  v11 = v12 + 87;
  if (v12 + 87 <= (v7 | 0x20))
    goto LABEL_54;
LABEL_23:
  v4 = 0;
  v13 = 0;
  v14 = &v9[v8];
  v15 = v8 - 1;
  for (i = v9 + 1; ; ++i)
  {
    v17 = v7 - 48;
    v18 = v7 - 48;
    v19 = (v7 | 0x20) - 87;
    if (v17 < 0xA)
      v19 = v18;
    v20 = (v4 * (unsigned __int128)a3) >> 64;
    if (is_mul_ok(v4, a3))
      v4 *= a3;
    v21 = __CFADD__(v4, v19);
    v22 = v4 + v19;
    v23 = v21;
    if (!v21)
      v4 = v22;
    if (v20 ? 1 : v23)
      v13 = 1;
    if (!v15)
      break;
    ++v9;
    v7 = *i;
    if (v7 - 48 > 9)
    {
      if ((v7 | 0x20) < 0x61 || v11 <= (v7 | 0x20))
      {
        v14 = i;
        break;
      }
    }
    else if (v7 - 48 >= a3)
    {
      v14 = v9;
      break;
    }
    --v15;
  }
  if (v13)
    goto LABEL_54;
  if (!a4 && v15)
  {
    v25 = 0;
    do
    {
      v26 = v14[v25];
      if ((v26 - 9) >= 5 && v26 != 32)
        goto LABEL_54;
    }
    while (v15 != ++v25);
  }
  v5 = v4 & 0xFFFFFFFFFFFFFF00;
  v4 = v4;
  return v5 | v4;
}

unint64_t WTF::parseInteger<unsigned long long,char16_t>(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  char v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  int v21;
  uint64_t v23;
  int v24;

  v4 = 0;
  v5 = 0;
  if (!a1 || !a2)
    return v5 | v4;
  v6 = (unsigned __int16 *)(a1 + 2);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 - 9 >= 5 && v7 != 32)
      break;
    ++v6;
    if (!--a2)
      goto LABEL_54;
  }
  if (v7 == 43)
  {
    if (!--a2)
      goto LABEL_54;
    v7 = *v6;
  }
  else
  {
    --v6;
  }
  if (v7 - 48 <= 9)
  {
    if (v7 - 48 < a3)
    {
      if ((int)a3 >= 36)
        v8 = 36;
      else
        v8 = a3;
      v9 = v8 + 87;
      goto LABEL_23;
    }
LABEL_54:
    v4 = 0;
    v5 = 0;
    return v5 | v4;
  }
  if ((v7 | 0x20) < 0x61)
    goto LABEL_54;
  v10 = (int)a3 >= 36 ? 36 : a3;
  v9 = v10 + 87;
  if (v10 + 87 <= (v7 | 0x20))
    goto LABEL_54;
LABEL_23:
  v4 = 0;
  v11 = 0;
  v12 = a2 - 1;
  v13 = v6 + 1;
  v14 = &v6[a2];
  while (1)
  {
    v15 = v7 - 48;
    v16 = v7 - 48;
    v17 = (v7 | 0x20) - 87;
    if (v15 < 0xA)
      v17 = v16;
    v18 = (v4 * (unsigned __int128)a3) >> 64;
    if (is_mul_ok(v4, a3))
      v4 *= a3;
    v19 = __CFADD__(v4, v17);
    v20 = v4 + v17;
    v21 = v19;
    if (!v19)
      v4 = v20;
    if (v18 ? 1 : v21)
      v11 = 1;
    if (!v12)
      break;
    ++v6;
    v7 = *v13;
    if (v7 - 48 > 9)
    {
      if ((v7 | 0x20) < 0x61 || v9 <= (v7 | 0x20))
      {
        v14 = v13;
        break;
      }
    }
    else if (v7 - 48 >= a3)
    {
      v14 = v6;
      break;
    }
    --v12;
    ++v13;
  }
  if (v11)
    goto LABEL_54;
  if (!a4 && v12)
  {
    v23 = 0;
    do
    {
      v24 = v14[v23];
      if ((v24 - 9) >= 5 && v24 != 32)
        goto LABEL_54;
    }
    while (v12 != ++v23);
  }
  v5 = v4 & 0xFFFFFFFFFFFFFF00;
  v4 = v4;
  return v5 | v4;
}

uint64_t WTF::HashTable<std::pair<unsigned long long,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned long long,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned long long,unsigned long long>,unsigned long long>>,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>,WTF::HashMap<std::pair<unsigned long long,unsigned long long>,unsigned long long,WTF::DefaultHash<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<std::pair<unsigned long long,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned long long,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t i;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(24 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v9 = (unint64_t *)(v2 + 24 * i);
      v7 = *v9;
      if (*v9 != -1)
      {
        v10 = v9[1];
        if (v7 | v10)
        {
          v11 = *a1;
          if (*a1)
            v12 = *(_DWORD *)(v11 - 8);
          else
            v12 = 0;
          v13 = (v7 + ~(v7 << 32)) ^ ((v7 + ~(v7 << 32)) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v7 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v15 = (v10 + ~(v10 << 32)) ^ ((v10 + ~(v10 << 32)) >> 22);
          v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          LODWORD(v7) = v12 & ((0xD7862706ELL
                              * (unint64_t)(277951225 * ((v7 >> 31) ^ v7)
                                                 + 95187966 * ((v17 >> 31) ^ v17))) >> 4);
          v18 = 1;
          do
          {
            v19 = v11 + 24 * v7;
            v7 = ((_DWORD)v7 + v18++) & v12;
          }
          while (*(_OWORD *)v19 != 0);
          v20 = *(_OWORD *)v9;
          *(_QWORD *)(v19 + 16) = v9[2];
          *(_OWORD *)v19 = v20;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), (void *)v7);
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WTF **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  WTF *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  WTF **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF *v51;
  _QWORD *result;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  char v59;
  char v60;
  char v61;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v57 = v4;
    do
    {
      v12 = (_QWORD *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v21 = *a1;
          v58 = v12;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v56 = v10;
          v24 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
          v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
          v27 = v22 & ((v26 >> 31) ^ v26);
          v28 = 1;
          do
          {
            v29 = v27;
            v30 = (_QWORD *)(v21 + 24 * v27);
            v27 = (v27 + v28++) & v22;
          }
          while (*v30);
          v55 = v29;
          v31 = v21 + 24 * v29;
          v34 = *(_DWORD *)(v31 + 20);
          v33 = (_DWORD *)(v31 + 20);
          v32 = v34;
          v35 = (WTF **)(v33 - 3);
          if (v34)
          {
            v36 = 56 * v32;
            v37 = (uint64_t)*v35 + 24;
            do
            {
              v38 = *(unsigned int *)(v37 + 16);
              if ((_DWORD)v38 != -1)
                ((void (*)(char *, uint64_t))off_1E335AC88[v38])(&v61, v37);
              *(_DWORD *)(v37 + 16) = -1;
              v39 = *(WTF::StringImpl **)(v37 - 8);
              *(_QWORD *)(v37 - 8) = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, v8);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v37 += 56;
              v36 -= 56;
            }
            while (v36);
          }
          v40 = *v35;
          if (*v35)
          {
            *v35 = 0;
            *(_DWORD *)(v21 + 24 * v55 + 16) = 0;
            WTF::fastFree(v40, v8);
          }
          *v30 = *v58;
          v41 = v57 + 24 * v9;
          *v35 = 0;
          *(_QWORD *)(v33 - 1) = 0;
          v43 = *(WTF **)(v41 + 8);
          v42 = v41 + 8;
          *(_QWORD *)v42 = 0;
          *v35 = v43;
          v44 = *(_DWORD *)(v42 + 8);
          *(_DWORD *)(v42 + 8) = 0;
          *(_DWORD *)(v21 + 24 * v55 + 16) = v44;
          v45 = *(_DWORD *)(v42 + 12);
          *(_DWORD *)(v42 + 12) = 0;
          *v33 = v45;
          v46 = *(unsigned int *)(v42 + 12);
          if ((_DWORD)v46)
          {
            v47 = 56 * v46;
            v48 = *(_QWORD *)v42 + 24;
            do
            {
              v49 = *(unsigned int *)(v48 + 16);
              if ((_DWORD)v49 != -1)
                ((void (*)(char *, uint64_t))off_1E335AC88[v49])(&v60, v48);
              *(_DWORD *)(v48 + 16) = -1;
              v50 = *(WTF::StringImpl **)(v48 - 8);
              *(_QWORD *)(v48 - 8) = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, v8);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v48 += 56;
              v47 -= 56;
            }
            while (v47);
          }
          v51 = *(WTF **)v42;
          if (*(_QWORD *)v42)
          {
            *(_QWORD *)v42 = 0;
            *(_DWORD *)(v42 + 8) = 0;
            WTF::fastFree(v51, v8);
          }
          v11 = v5;
          v4 = v57;
          v10 = v56;
          if (v58 == a3)
            v10 = v30;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v15 = (WTF **)(v14 + 8);
          v16 = *(unsigned int *)(v14 + 20);
          if ((_DWORD)v16)
          {
            v17 = 56 * v16;
            v18 = (uint64_t)*v15 + 24;
            do
            {
              v19 = *(unsigned int *)(v18 + 16);
              if ((_DWORD)v19 != -1)
                ((void (*)(char *, uint64_t))off_1E335AC88[v19])(&v59, v18);
              *(_DWORD *)(v18 + 16) = -1;
              v20 = *(WTF::StringImpl **)(v18 - 8);
              *(_QWORD *)(v18 - 8) = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2)
                  WTF::StringImpl::destroy(v20, v8);
                else
                  *(_DWORD *)v20 -= 2;
              }
              v18 += 56;
              v17 -= 56;
            }
            while (v17);
          }
          v23 = *v15;
          if (*v15)
          {
            *v15 = 0;
            *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
            WTF::fastFree(v23, v8);
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

unint64_t WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 56 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::IDBIndexInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  char *v7;
  unsigned int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;

  if (result[2] < a2)
  {
    if (a2 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 56 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(56 * a2));
      v2[2] = v5 / 0x38;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = (char *)v3 + 56 * v4;
        v8 = result + 6;
        v9 = (char *)v3 + 24;
        do
        {
          *(_OWORD *)(v8 - 6) = *(_OWORD *)(v9 - 24);
          v10 = *((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = 0;
          *((_QWORD *)v8 - 1) = v10;
          *(_BYTE *)v8 = 0;
          v8[4] = -1;
          v11 = *((unsigned int *)v9 + 4);
          if ((_DWORD)v11 != -1)
          {
            ((void (*)(char *, unsigned int *, char *))off_1E335AE28[v11])(&v14, v8, v9);
            v8[4] = v11;
          }
          v12 = v9 - 24;
          *((_WORD *)v8 + 12) = *((_WORD *)v9 + 12);
          v13 = *((unsigned int *)v9 + 4);
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, char *))off_1E335AC88[v13])(&v15, v9);
          *((_DWORD *)v9 + 4) = -1;
          result = (unsigned int *)*((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v8 += 14;
          v9 += 56;
        }
        while (v12 + 56 != v7);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::SQLiteIDBBackingStore::getOrEstablishDatabaseInfo(WebCore::IDBDatabaseInfo &)::$_0,int,int,void const*,int,void const*>::call(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  CFIndex v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  const WTF::String *v15;
  uint64_t v16;
  _BYTE v18[8];
  uint64_t v19;
  int v20;
  _BYTE v21[8];
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;

  v21[0] = 0;
  v22 = 0;
  v23 = 0;
  v18[0] = 0;
  v19 = 0;
  v20 = 0;
  if (!a2)
    goto LABEL_15;
  v8 = a2;
  if (*(_BYTE *)a3)
  {
    if (*(_BYTE *)a3 != 98)
      goto LABEL_15;
    v9 = WTF::fastMalloc((WTF *)0x140);
    v10 = WebCore::KeyedDecoderCF::KeyedDecoderCF(v9, (const UInt8 *)a3, v8);
    v11 = WebCore::IDBKeyData::decode(v10, (uint64_t)v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if ((v11 & 1) == 0)
      goto LABEL_15;
  }
  else
  {
    v24 = (unsigned __int8 *)(a3 + 1);
    v25 = a2 - 1;
    if ((WebCore::decodeKey(&v24, (uint64_t)v21) & 1) == 0 || v25)
      goto LABEL_15;
  }
  if (!a4)
    goto LABEL_15;
  if (!*(_BYTE *)a5)
  {
    v24 = (unsigned __int8 *)(a5 + 1);
    v25 = a4 - 1;
    if ((WebCore::decodeKey(&v24, (uint64_t)v18) & 1) != 0 && !v25)
      goto LABEL_21;
LABEL_15:
    v16 = 1;
    goto LABEL_16;
  }
  if (*(_BYTE *)a5 != 98)
    goto LABEL_15;
  v12 = WTF::fastMalloc((WTF *)0x140);
  v13 = WebCore::KeyedDecoderCF::KeyedDecoderCF(v12, (const UInt8 *)a5, a4);
  v14 = WebCore::IDBKeyData::decode(v13, (uint64_t)v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if ((v14 & 1) == 0)
    goto LABEL_15;
LABEL_21:
  v16 = WebCore::IDBKeyData::compare((WebCore::IDBKeyData *)v21, (const WebCore::IDBKeyData *)v18, v15);
LABEL_16:
  if (v20 != -1)
    ((void (*)(unsigned __int8 **, uint64_t *))off_1E335ACA8[v20])(&v24, &v19);
  if (v23 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_1E335ACA8[v23])(v18, &v22);
  return v16;
}

_OWORD *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::SQLiteIDBTransaction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  WebCore::IDBServer::SQLiteIDBTransaction *v21;
  WTF *v22;
  void *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  _OWORD *v34;
  uint64_t v35;
  WebCore::IDBServer::SQLiteIDBTransaction *v36;
  _QWORD *v37;
  WebCore::IDBServer::SQLiteIDBTransaction *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::IDBServer::SQLiteIDBTransaction *v43;
  WTF *v44;
  void *v45;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unint64_t *)(v6 + 24 * v13);
      v16 = *v15;
      if (*v15 != -1)
      {
        v17 = v15[1];
        if (v17 | v16)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v24 = 0;
          v25 = (v16 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v16 - 1640531527) << 16) ^ ((unsigned __int16)v16 - 1640531527);
          v26 = (v16 >> 37) & 0x7FFF800 ^ ((v25 + WORD2(v16) + (v25 >> 11)) << 16) ^ (v25 + WORD2(v16) + (v25 >> 11));
          v27 = (v17 >> 5) & 0x7FFF800 ^ ((v26 + (v26 >> 11) + (unsigned __int16)v17) << 16) ^ (v26 + (v26 >> 11) + (unsigned __int16)v17);
          v28 = (v17 >> 37) & 0x7FFF800 ^ ((v27 + WORD2(v17) + (v27 >> 11)) << 16) ^ (v27 + WORD2(v17) + (v27 >> 11));
          v29 = (v28 + (v28 >> 11)) ^ (8 * (v28 + (v28 >> 11)));
          v30 = (v29 + (v29 >> 5)) ^ (4 * (v29 + (v29 >> 5)));
          v31 = (v30 + (v30 >> 15)) ^ ((v30 + (v30 >> 15)) << 10);
          if (v31)
            v32 = v31;
          else
            v32 = 0x800000;
          do
          {
            v33 = v32 & v19;
            v34 = (_OWORD *)(v18 + 24 * (v32 & v19));
            v32 = ++v24 + (v32 & v19);
          }
          while (*v34 != 0);
          v35 = v18 + 24 * v33;
          v38 = *(WebCore::IDBServer::SQLiteIDBTransaction **)(v35 + 16);
          v37 = (_QWORD *)(v35 + 16);
          v36 = v38;
          *v37 = 0;
          if (v38)
          {
            WebCore::IDBServer::SQLiteIDBTransaction::~SQLiteIDBTransaction(v36, v10);
            WTF::fastFree(v39, v40);
          }
          *v34 = *(_OWORD *)v15;
          v41 = v6 + 24 * v13;
          v42 = *(_QWORD *)(v41 + 16);
          *(_QWORD *)(v41 + 16) = 0;
          *v37 = v42;
          v43 = *(WebCore::IDBServer::SQLiteIDBTransaction **)(v41 + 16);
          *(_QWORD *)(v41 + 16) = 0;
          if (v43)
          {
            WebCore::IDBServer::SQLiteIDBTransaction::~SQLiteIDBTransaction(v43, v10);
            WTF::fastFree(v44, v45);
          }
          if (v15 == a3)
            v14 = v34;
        }
        else
        {
          v20 = v6 + 24 * v13;
          v21 = *(WebCore::IDBServer::SQLiteIDBTransaction **)(v20 + 16);
          *(_QWORD *)(v20 + 16) = 0;
          if (v21)
          {
            WebCore::IDBServer::SQLiteIDBTransaction::~SQLiteIDBTransaction(v21, v10);
            WTF::fastFree(v22, v23);
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::SQLiteIDBBackingStore::updateOneIndexForAddRecord(WebCore::IDBObjectStoreInfo &,WebCore::IDBIndexInfo const&,WebCore::IDBKeyData const&,WebCore::ThreadSafeDataBuffer const&,long long)::$_0,void,JSC::JSGlobalObject &>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v10;
  char v11;
  char v12;

  *(_QWORD *)a1 = off_1E335AEC8;
  v3 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v10 = *(WTF **)(v3 + 8);
      if (v10)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v10, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v6])(&v11, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v7 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_1E335AC88[v7])(&v12, a1 + 96);
  *(_DWORD *)(a1 + 112) = -1;
  v8 = *(WTF::StringImpl **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 8), (WTF::StringImpl *)a2);
  return a1;
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  void *v9;
  WTF *v11;
  char v12;
  char v13;

  *(_QWORD *)a1 = off_1E335AEC8;
  v3 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v11 = *(WTF **)(v3 + 8);
      if (v11)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v11, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v6])(&v12, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v7 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_1E335AC88[v7])(&v13, a1 + 96);
  *(_DWORD *)(a1 + 112) = -1;
  v8 = *(WTF::StringImpl **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 8), (WTF::StringImpl *)a2);
  return WTF::fastFree((WTF *)a1, v9);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::SQLiteIDBBackingStore::updateOneIndexForAddRecord(WebCore::IDBObjectStoreInfo &,WebCore::IDBIndexInfo const&,WebCore::IDBKeyData const&,WebCore::ThreadSafeDataBuffer const&,long long)::$_0,void,JSC::JSGlobalObject &>::call(uint64_t a1, WebCore *a2, uint64_t a3, const WebCore::IDBValue *a4)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t *v14;
  WTF::StringImpl *v15;
  char v16;
  _QWORD v17[4];
  int v18;
  _QWORD v19[4];
  int v20;
  unsigned int *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int **)(a1 + 160);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v21 = v6;
  v22 = 0u;
  v23 = 0u;
  v8 = WebCore::deserializeIDBValueToJSValue(a2, a2, (JSC::JSGlobalObject *)&v21, a4);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v21, v9);
  if ((v8 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v19[0] = 0;
    v20 = 0;
    WebCore::generateIndexKeyForValue((uint64_t)a2, a1 + 72, v8, (uint64_t)v19, a1 + 24, a1 + 128);
    if (v20 == -1)
    {
      v14 = (unint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      WTF::Deque<WebCore::IDBServer::SQLiteIDBCursor::SQLiteCursorRecord,0ul>::destroyAll(v14, v15);
      return;
    }
    v17[0] = &v16;
    ((void (*)(unsigned int **__return_ptr, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyDataENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE4copyEOSF_EUlOT_E_EEJNS0_6__implIJDnSA_SE_EEEEEEDcSJ_DpOT0____fmatrix[v20])(&v21, v17, v19);
    LOBYTE(v17[0]) = 0;
    v18 = -1;
    v10 = DWORD2(v23);
    if (DWORD2(v23) != -1)
    {
      ((void (*)(char *, _QWORD *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS7_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[DWORD2(v23)])(&v16, v17, &v21);
      v18 = v10;
      if (DWORD2(v23) != -1)
        ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS7_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[DWORD2(v23)])(&v16, &v21);
    }
    v11 = *(_QWORD *)(a1 + 168);
    if (!*(_BYTE *)(v11 + 40))
    {
      *(_BYTE *)v11 = 0;
      *(_DWORD *)(v11 + 32) = -1;
      v13 = v18;
      if (v18 != -1)
      {
        ((void (*)(unsigned int **, uint64_t, _QWORD *))off_1E335AEF8[v18])(&v21, v11, v17);
        *(_DWORD *)(v11 + 32) = v13;
      }
      *(_BYTE *)(v11 + 40) = 1;
      goto LABEL_17;
    }
    v12 = *(unsigned int *)(v11 + 32);
    if ((_DWORD)v12 == -1)
    {
      if (v18 == -1)
      {
LABEL_19:
        if (v20 != -1)
          ((void (*)(unsigned int **, _QWORD *))off_1E335ACF0[v20])(&v21, v19);
        return;
      }
    }
    else if (v18 == -1)
    {
      ((void (*)(unsigned int **, uint64_t))off_1E335ACF0[v12])(&v21, v11);
      *(_DWORD *)(v11 + 32) = -1;
      goto LABEL_17;
    }
    v21 = (unsigned int *)v11;
    ((void (*)(unsigned int **, uint64_t, _QWORD *))off_1E335AEE0[v18])(&v21, v11, v17);
LABEL_17:
    if (v18 != -1)
      ((void (*)(unsigned int **, _QWORD *))off_1E335ACF0[v18])(&v21, v17);
    goto LABEL_19;
  }
}

void WTF::Deque<WebCore::IDBServer::SQLiteIDBCursor::SQLiteCursorRecord,0ul>::destroyAll(unint64_t *a1, WTF::StringImpl *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  WebCore::IDBValue *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  if (*a1 <= v3)
  {
    if (*a1 != v3)
    {
      v16 = 120 * v2;
      v17 = 120 * v3;
      do
      {
        v18 = v4 + v16;
        WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(v4 + v16 + 64), a2);
        v19 = *(unsigned int *)(v4 + v16 + 56);
        if ((_DWORD)v19 != -1)
          ((void (*)(char *, unint64_t))off_1E335ACA8[v19])(&v21, v18 + 40);
        *(_DWORD *)(v18 + 56) = -1;
        v20 = *(unsigned int *)(v18 + 24);
        if ((_DWORD)v20 != -1)
          ((void (*)(char *, unint64_t))off_1E335ACA8[v20])(&v22, v4 + v16 + 8);
        *(_DWORD *)(v18 + 24) = -1;
        v17 -= 120;
        v4 += 120;
      }
      while (v16 != v17);
    }
  }
  else
  {
    if (v3)
    {
      v6 = 120 * v3;
      v7 = (WebCore::IDBValue *)(v4 + 64);
      do
      {
        WebCore::IDBValue::~IDBValue(v7, a2);
        v8 = *((unsigned int *)v7 - 2);
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, char *))off_1E335ACA8[v8])(&v23, (char *)v7 - 24);
        *((_DWORD *)v7 - 2) = -1;
        v9 = *((unsigned int *)v7 - 10);
        if ((_DWORD)v9 != -1)
          ((void (*)(char *, char *))off_1E335ACA8[v9])(&v24, (char *)v7 - 56);
        *((_DWORD *)v7 - 10) = -1;
        v7 = (WebCore::IDBValue *)((char *)v7 + 120);
        v6 -= 120;
      }
      while (v6);
      v4 = a1[2];
      v2 = *a1;
    }
    v10 = *((unsigned int *)a1 + 6);
    if (v2 != v10)
    {
      v11 = 120 * v2;
      v12 = 120 * v10;
      do
      {
        v13 = v4 + v11;
        WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(v4 + v11 + 64), a2);
        v14 = *(unsigned int *)(v4 + v11 + 56);
        if ((_DWORD)v14 != -1)
          ((void (*)(char *, unint64_t))off_1E335ACA8[v14])(&v25, v13 + 40);
        *(_DWORD *)(v13 + 56) = -1;
        v15 = *(unsigned int *)(v13 + 24);
        if ((_DWORD)v15 != -1)
          ((void (*)(char *, unint64_t))off_1E335ACA8[v15])(&v26, v4 + v11 + 8);
        *(_DWORD *)(v13 + 24) = -1;
        v12 -= 120;
        v4 += 120;
      }
      while (v11 != v12);
    }
  }
}

char *WTF::Vector<WebCore::IDBCursorRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (unint64_t)v5 + 104 * *(unsigned int *)(a1 + 12), v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x2762763)
      {
        __break(0xC471u);
        JUMPOUT(0x1953FE488);
      }
      v17 = (uint64_t)v5 + 104 * *(unsigned int *)(a1 + 12);
      v18 = 104 * v16;
      v19 = WTF::fastMalloc((WTF *)(104 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x68;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::IDBCursorRecord>::move((uint64_t)v5, v17, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v9 >= 0x2762763)
      {
        __break(0xC471u);
        JUMPOUT(0x1953FE490);
      }
      v10 = 104 * v9;
      v11 = WTF::fastMalloc((WTF *)(104 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x68;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::IDBCursorRecord>::move((uint64_t)v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

void WTF::VectorMover<false,WebCore::IDBServer::SQLiteIDBCursor::SQLiteCursorRecord>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    v24 = v3;
    v25 = v4;
    v8 = 0;
    do
    {
      v9 = a1 + v8;
      v10 = a3 + v8;
      *(_BYTE *)v10 = *(_BYTE *)(a1 + v8);
      *(_BYTE *)(a3 + v8 + 8) = 0;
      *(_DWORD *)(v10 + 24) = -1;
      v11 = *(unsigned int *)(a1 + v8 + 24);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(char *, uint64_t, uint64_t))off_1E335ADE0[v11])(&v20, a3 + v8 + 8, v9 + 8);
        *(_DWORD *)(v10 + 24) = v11;
      }
      *(_BYTE *)(v10 + 32) = *(_BYTE *)(v9 + 32);
      *(_BYTE *)(v10 + 40) = 0;
      v12 = (WTF::StringImpl *)(v10 + 40);
      *(_DWORD *)(v10 + 56) = -1;
      v13 = *(unsigned int *)(v9 + 56);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(char *, WTF::StringImpl *, uint64_t))off_1E335ADE0[v13])(&v21, v12, a1 + v8 + 40);
        *(_DWORD *)(v10 + 56) = v13;
      }
      v14 = a3 + v8;
      v15 = *(_QWORD *)(v9 + 64);
      *(_QWORD *)(v9 + 64) = 0;
      *(_QWORD *)(v14 + 72) = 0;
      *(_QWORD *)(v14 + 80) = 0;
      *(_QWORD *)(v14 + 64) = v15;
      v16 = *(_QWORD *)(v9 + 72);
      *(_QWORD *)(v9 + 72) = 0;
      *(_QWORD *)(v14 + 72) = v16;
      LODWORD(v16) = *(_DWORD *)(v9 + 80);
      *(_DWORD *)(v9 + 80) = 0;
      *(_DWORD *)(v14 + 80) = v16;
      LODWORD(v16) = *(_DWORD *)(v9 + 84);
      *(_DWORD *)(v9 + 84) = 0;
      *(_DWORD *)(v14 + 84) = v16;
      *(_QWORD *)(v14 + 88) = 0;
      *(_QWORD *)(v14 + 96) = 0;
      v17 = *(_QWORD *)(v9 + 88);
      *(_QWORD *)(v9 + 88) = 0;
      *(_QWORD *)(v14 + 88) = v17;
      LODWORD(v17) = *(_DWORD *)(v9 + 96);
      *(_DWORD *)(v9 + 96) = 0;
      *(_DWORD *)(v14 + 96) = v17;
      LODWORD(v17) = *(_DWORD *)(v9 + 100);
      *(_DWORD *)(v9 + 100) = 0;
      *(_DWORD *)(v14 + 100) = v17;
      *(_OWORD *)(v14 + 104) = *(_OWORD *)(v9 + 104);
      WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(a1 + v8 + 64), v12);
      v18 = *(unsigned int *)(v9 + 56);
      if ((_DWORD)v18 != -1)
        ((void (*)(char *, uint64_t))off_1E335ACA8[v18])(&v22, a1 + v8 + 40);
      *(_DWORD *)(v9 + 56) = -1;
      v19 = *(unsigned int *)(v9 + 24);
      if ((_DWORD)v19 != -1)
        ((void (*)(char *, uint64_t))off_1E335ACA8[v19])(&v23, a1 + v8 + 8);
      *(_DWORD *)(v9 + 24) = -1;
      v8 += 120;
    }
    while (v9 + 120 != a2);
  }
}

unsigned int *WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;

  if (result[2] > a2)
  {
    v3 = result;
    if (result[3] > a2)
      result = WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, (WTF::StringImpl *)a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v4, (void *)(16 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v5 = v3[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)memcpy(result, v4, 16 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

unsigned int *WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if ((WTF::StringImpl *)v4 != a2)
  {
    v5 = 16 * v4 - 16 * (_QWORD)a2;
    v6 = (WTF::StringImpl **)(*(_QWORD *)result + 16 * (_QWORD)a2 + 8);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      result = (unsigned int *)*(v6 - 1);
      *(v6 - 1) = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  v3[3] = v2;
  return result;
}

_OWORD *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::SQLiteIDBCursor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  WebCore::IDBServer::SQLiteIDBCursor *v21;
  WTF *v22;
  void *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  _OWORD *v34;
  uint64_t v35;
  WebCore::IDBServer::SQLiteIDBCursor *v36;
  _QWORD *v37;
  WebCore::IDBServer::SQLiteIDBCursor *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::IDBServer::SQLiteIDBCursor *v43;
  WTF *v44;
  void *v45;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unint64_t *)(v6 + 24 * v13);
      v16 = *v15;
      if (*v15 != -1)
      {
        v17 = v15[1];
        if (v17 | v16)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v24 = 0;
          v25 = (v16 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v16 - 1640531527) << 16) ^ ((unsigned __int16)v16 - 1640531527);
          v26 = (v16 >> 37) & 0x7FFF800 ^ ((v25 + WORD2(v16) + (v25 >> 11)) << 16) ^ (v25 + WORD2(v16) + (v25 >> 11));
          v27 = (v17 >> 5) & 0x7FFF800 ^ ((v26 + (v26 >> 11) + (unsigned __int16)v17) << 16) ^ (v26 + (v26 >> 11) + (unsigned __int16)v17);
          v28 = (v17 >> 37) & 0x7FFF800 ^ ((v27 + WORD2(v17) + (v27 >> 11)) << 16) ^ (v27 + WORD2(v17) + (v27 >> 11));
          v29 = (v28 + (v28 >> 11)) ^ (8 * (v28 + (v28 >> 11)));
          v30 = (v29 + (v29 >> 5)) ^ (4 * (v29 + (v29 >> 5)));
          v31 = (v30 + (v30 >> 15)) ^ ((v30 + (v30 >> 15)) << 10);
          if (v31)
            v32 = v31;
          else
            v32 = 0x800000;
          do
          {
            v33 = v32 & v19;
            v34 = (_OWORD *)(v18 + 24 * (v32 & v19));
            v32 = ++v24 + (v32 & v19);
          }
          while (*v34 != 0);
          v35 = v18 + 24 * v33;
          v38 = *(WebCore::IDBServer::SQLiteIDBCursor **)(v35 + 16);
          v37 = (_QWORD *)(v35 + 16);
          v36 = v38;
          *v37 = 0;
          if (v38)
          {
            WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor(v36);
            WTF::fastFree(v39, v40);
          }
          *v34 = *(_OWORD *)v15;
          v41 = v6 + 24 * v13;
          v42 = *(_QWORD *)(v41 + 16);
          *(_QWORD *)(v41 + 16) = 0;
          *v37 = v42;
          v43 = *(WebCore::IDBServer::SQLiteIDBCursor **)(v41 + 16);
          *(_QWORD *)(v41 + 16) = 0;
          if (v43)
          {
            WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor(v43);
            WTF::fastFree(v44, v45);
          }
          if (v15 == a3)
            v14 = v34;
        }
        else
        {
          v20 = v6 + 24 * v13;
          v21 = *(WebCore::IDBServer::SQLiteIDBCursor **)(v20 + 16);
          *(_QWORD *)(v20 + 16) = 0;
          if (v21)
          {
            WebCore::IDBServer::SQLiteIDBCursor::~SQLiteIDBCursor(v21);
            WTF::fastFree(v22, v23);
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

void WebCore::IDBServer::ServerOpenDBRequest::~ServerOpenDBRequest(WebCore::IDBServer::ServerOpenDBRequest *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  char v9;
  char v10;

  v3 = *((_QWORD *)this + 18);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((unsigned int *)this + 26);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_1[v4])(&v9, (char *)this + 80);
  *((_DWORD *)this + 26) = -1;
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_1[v5])(&v10, (char *)this + 48);
  *((_DWORD *)this + 18) = -1;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v8 = *((_QWORD *)v7 + 2);
      if (v8)
        WTF::fastFree((WTF *)(v8 - 16), a2);
      WTF::fastFree(v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = *(_QWORD *)(v4 + 8 * i);
      if ((unint64_t)(v10 + 1) >= 2)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = 1;
        do
        {
          result = v16;
          v8 = *(void **)(v11 + 8 * v16);
          v16 = ((_DWORD)v16 + v17++) & v12;
        }
        while (v8);
        *(_QWORD *)(v11 + 8 * result) = v10;
      }
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WTF::Deque<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,0ul>::destroyAll(WebCore::IDBServer::UniqueIDBDatabaseTransaction *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  unint64_t v3;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction **v4;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction **v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction **v14;
  uint64_t v15;
  WTF *v16;
  void *v17;

  v2 = *(_QWORD *)result;
  v3 = *((_QWORD *)result + 1);
  v4 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction **)*((_QWORD *)result + 2);
  if (*(_QWORD *)result <= v3)
  {
    if (*(_QWORD *)result != v3)
    {
      v9 = &v4[v2];
      v10 = 8 * v3 - 8 * v2;
      do
      {
        result = *v9;
        *v9 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1)
          {
            WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(result, a2);
            result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::fastFree(v11, v12);
          }
          else
          {
            --*((_DWORD *)result + 2);
          }
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  else
  {
    v5 = result;
    if (v3)
    {
      v6 = 8 * v3;
      do
      {
        result = *v4;
        *v4 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1)
          {
            WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(result, a2);
            result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::fastFree(v7, v8);
          }
          else
          {
            --*((_DWORD *)result + 2);
          }
        }
        ++v4;
        v6 -= 8;
      }
      while (v6);
      v4 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction **)*((_QWORD *)v5 + 2);
      v2 = *(_QWORD *)v5;
    }
    v13 = *((unsigned int *)v5 + 6);
    if (v2 != v13)
    {
      v14 = &v4[v2];
      v15 = 8 * v13 - 8 * v2;
      do
      {
        result = *v14;
        *v14 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1)
          {
            WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(result, a2);
            result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::fastFree(v16, v17);
          }
          else
          {
            --*((_DWORD *)result + 2);
          }
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::IDBResourceIdentifier,WebCore::IDBResourceIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (result)
  {
    v3 = *(_DWORD *)(result - 8);
    v4 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                            - 1640531527);
    v5 = (a2 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(a2) + (v4 >> 11)) << 16) ^ (v4 + WORD2(a2) + (v4 >> 11));
    v6 = (a3 >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)a3 + (v5 >> 11)) << 16) ^ (v5
                                                                                                 + (unsigned __int16)a3
                                                                                                 + (v5 >> 11));
    v7 = (a3 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(a3) + (v6 >> 11)) << 16) ^ (v6 + WORD2(a3) + (v6 >> 11));
    v8 = (v7 + (v7 >> 11)) ^ (8 * (v7 + (v7 >> 11)));
    v9 = (v8 + (v8 >> 5)) ^ (4 * (v8 + (v8 >> 5)));
    v10 = (v9 + (v9 >> 15)) ^ ((v9 + (v9 >> 15)) << 10);
    if (!v10)
      v10 = 0x800000;
    v11 = v3 & v10;
    v12 = (uint64_t *)(result + 16 * v11);
    v14 = *v12;
    v13 = v12[1];
    if (*(_OWORD *)v12 == 0)
    {
      return 0;
    }
    else
    {
      v15 = 1;
      while (v14 == -1 || v14 != a2 || v13 != a3)
      {
        v11 = ((_DWORD)v11 + v15) & v3;
        v14 = *(_QWORD *)(result + 16 * v11);
        v13 = *(_QWORD *)(result + 16 * v11 + 8);
        ++v15;
        if (*(_OWORD *)(result + 16 * v11) == 0)
          return 0;
      }
      result += 16 * v11;
    }
  }
  return result;
}

void WTF::HashTable<WebCore::IDBResourceIdentifier,WebCore::IDBResourceIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (unint64_t *)(v4 + 16 * i);
      v13 = *v12;
      if (*v12 != -1)
      {
        v14 = v12[1];
        if (v14 | v13)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = 0;
          v18 = (v13 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v13 - 1640531527) << 16) ^ ((unsigned __int16)v13 - 1640531527);
          v19 = (v13 >> 37) & 0x7FFF800 ^ ((v18 + WORD2(v13) + (v18 >> 11)) << 16) ^ (v18 + WORD2(v13) + (v18 >> 11));
          v20 = (v14 >> 5) & 0x7FFF800 ^ ((v19 + (v19 >> 11) + (unsigned __int16)v14) << 16) ^ (v19 + (v19 >> 11) + (unsigned __int16)v14);
          v21 = (v14 >> 37) & 0x7FFF800 ^ ((v20 + WORD2(v14) + (v20 >> 11)) << 16) ^ (v20 + WORD2(v14) + (v20 >> 11));
          v22 = (v21 + (v21 >> 11)) ^ (8 * (v21 + (v21 >> 11)));
          v23 = (v22 + (v22 >> 5)) ^ (4 * (v22 + (v22 >> 5)));
          v24 = (v23 + (v23 >> 15)) ^ ((v23 + (v23 >> 15)) << 10);
          if (v24)
            v25 = v24;
          else
            v25 = 0x800000;
          do
          {
            v26 = v25 & v16;
            v27 = (uint64_t *)(v15 + 16 * v26);
            v29 = *v27;
            v28 = v27[1];
            v25 = ++v17 + v26;
            v8 = (void *)(v28 | v29);
          }
          while (v8);
          *(_OWORD *)(v15 + 16 * v26) = *(_OWORD *)v12;
        }
      }
    }
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::performCurrentOpenOperation(void)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335AF20;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::performCurrentOpenOperation(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335AF20;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::performCurrentOpenOperation(void)::$_0,void,BOOL>::call(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1[2];
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v5 = (uint64_t *)a1[1];
    v6 = v5 + 16;
    v7 = v5[16];
    if (v7)
    {
      v8 = (_QWORD *)WTF::HashTable<WebCore::IDBResourceIdentifier,WebCore::IDBResourceIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>,WebCore::IDBResourceIdentifier>(v7, a1[3], a1[4]);
      if (v8 && v8 != (_QWORD *)(v7 + 16 * *(unsigned int *)(v7 - 4)))
      {
        *v8 = -1;
        ++*(_DWORD *)(*v6 - 16);
        v10 = *v6;
        v11 = *v6 ? *(_DWORD *)(v10 - 12) - 1 : -1;
        *(_DWORD *)(v10 - 12) = v11;
        v12 = *v6;
        if (*v6)
        {
          v13 = 6 * *(_DWORD *)(v12 - 12);
          v14 = *(_DWORD *)(v12 - 4);
          if (v13 < v14 && v14 >= 9)
            WTF::HashTable<WebCore::IDBResourceIdentifier,WebCore::IDBResourceIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v6, v14 >> 1);
        }
      }
    }
    v16 = v5[15];
    v18 = *(_QWORD *)(v16 + 24);
    v17 = *(_QWORD *)(v16 + 32);
    if (v18 == a1[3] && v17 == a1[4])
      WebCore::IDBServer::UniqueIDBDatabase::performCurrentOpenOperationAfterSpaceCheck((WebCore::IDBServer::UniqueIDBDatabase *)v5, a2);
  }
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>&>(uint64_t a1, uint64_t *a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  int v25;
  unint64_t v26;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *result;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  WTF *v37;
  void *v38;
  WTF *v39;
  void *v40;

  v6 = a2;
  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a2, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = a3[1];
  v12 = (*a3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a3 - 1640531527) << 16) ^ ((unsigned __int16)*a3
                                                                                             - 1640531527);
  v13 = v12 + (unsigned __int16)WORD2(*a3) + (v12 >> 11);
  v14 = (*a3 >> 37) & 0x7FFF800 ^ (v13 << 16) ^ v13;
  v15 = (v11 >> 5) & 0x7FFF800 ^ ((v14 + (unsigned __int16)v11 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)v11 + (v14 >> 11));
  v16 = (v11 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v11) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v11) + (v15 >> 11));
  v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
  v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
  v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
  if (!v19)
    v19 = 0x800000;
  v20 = v19 & v10;
  v21 = (unint64_t *)(v8 + 24 * (v19 & v10));
  v22 = *v21;
  v23 = v21[1];
  if (*(_OWORD *)v21 != 0)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v22 == -1)
      {
        v24 = v21;
      }
      else if (v22 == *a3 && v23 == v11)
      {
        if ((v9 & 1) != 0)
          v35 = 0;
        else
          v35 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)a1 = v21;
        *(_QWORD *)(a1 + 8) = v8 + 24 * v35;
        *(_BYTE *)(a1 + 16) = 0;
        v36 = *a4;
        if (*a4)
          ++*(_DWORD *)(v36 + 8);
        result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v21[2];
        v21[2] = v36;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1)
          {
            WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(result, (WTF::StringImpl *)a2);
            return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::fastFree(v39, v40);
          }
          else
          {
            --*((_DWORD *)result + 2);
          }
        }
        return result;
      }
      v20 = (v20 + v25) & v10;
      v21 = (unint64_t *)(v8 + 24 * v20);
      v22 = *v21;
      v23 = v21[1];
      ++v25;
      a2 = (uint64_t *)(v23 | *v21);
    }
    while (a2);
    if (v24)
    {
      *v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v21 = v24;
    }
  }
  *(_OWORD *)v21 = *(_OWORD *)a3;
  v26 = *a4;
  if (*a4)
    ++*(_DWORD *)(v26 + 8);
  result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v21[2];
  v21[2] = v26;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(result, (WTF::StringImpl *)a2);
      result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::fastFree(v37, v38);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *v6;
  if (*v6)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 <= 2 * v32)
      goto LABEL_30;
  }
  else if (3 * v33 <= 4 * v32)
  {
    if (!(_DWORD)v33)
    {
      v34 = 8;
LABEL_35:
      result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v6, v34, v21);
      v21 = (unint64_t *)result;
      v30 = *v6;
      if (*v6)
        LODWORD(v33) = *(_DWORD *)(v30 - 4);
      else
        LODWORD(v33) = 0;
      goto LABEL_39;
    }
LABEL_30:
    v34 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
    goto LABEL_35;
  }
LABEL_39:
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v30 + 24 * v33;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  _OWORD *v32;
  uint64_t v33;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v34;
  _QWORD *v35;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unint64_t *)(v6 + 24 * v13);
      v16 = *v15;
      if (*v15 != -1)
      {
        v17 = v15[1];
        if (v17 | v16)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v22 = 0;
          v23 = (v16 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v16 - 1640531527) << 16) ^ ((unsigned __int16)v16 - 1640531527);
          v24 = (v16 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v16) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v16) + (v23 >> 11));
          v25 = (v17 >> 5) & 0x7FFF800 ^ ((v24 + (v24 >> 11) + (unsigned __int16)v17) << 16) ^ (v24 + (v24 >> 11) + (unsigned __int16)v17);
          v26 = (v17 >> 37) & 0x7FFF800 ^ ((v25 + WORD2(v17) + (v25 >> 11)) << 16) ^ (v25 + WORD2(v17) + (v25 >> 11));
          v27 = (v26 + (v26 >> 11)) ^ (8 * (v26 + (v26 >> 11)));
          v28 = (v27 + (v27 >> 5)) ^ (4 * (v27 + (v27 >> 5)));
          v29 = (v28 + (v28 >> 15)) ^ ((v28 + (v28 >> 15)) << 10);
          if (v29)
            v30 = v29;
          else
            v30 = 0x800000;
          do
          {
            v31 = v30 & v19;
            v32 = (_OWORD *)(v18 + 24 * (v30 & v19));
            v30 = ++v22 + (v30 & v19);
          }
          while (*v32 != 0);
          v33 = v18 + 24 * v31;
          v36 = *(WebCore::IDBServer::UniqueIDBDatabaseTransaction **)(v33 + 16);
          v35 = (_QWORD *)(v33 + 16);
          v34 = v36;
          *v35 = 0;
          if (v36)
          {
            if (*((_DWORD *)v34 + 2) == 1)
            {
              WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v34, v10);
              WTF::fastFree(v40, v41);
            }
            else
            {
              --*((_DWORD *)v34 + 2);
            }
          }
          *v32 = *(_OWORD *)v15;
          v37 = v6 + 24 * v13;
          v38 = *(_QWORD *)(v37 + 16);
          *(_QWORD *)(v37 + 16) = 0;
          *v35 = v38;
          v39 = *(WebCore::IDBServer::UniqueIDBDatabaseTransaction **)(v37 + 16);
          *(_QWORD *)(v37 + 16) = 0;
          if (v39)
          {
            if (*((_DWORD *)v39 + 2) == 1)
            {
              WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v39, v10);
              WTF::fastFree(v42, v43);
            }
            else
            {
              --*((_DWORD *)v39 + 2);
            }
          }
          if (v15 == a3)
            v14 = v32;
        }
        else
        {
          v20 = v6 + 24 * v13;
          v21 = *(WebCore::IDBServer::UniqueIDBDatabaseTransaction **)(v20 + 16);
          *(_QWORD *)(v20 + 16) = 0;
          if (v21)
          {
            if (*((_DWORD *)v21 + 2) == 1)
            {
              WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v21, v10);
              WTF::fastFree(v44, v45);
            }
            else
            {
              --*((_DWORD *)v21 + 2);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t *WTF::ListHashSet<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseConnection,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>>,WTF::DefaultHash<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseConnection,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseConnection>>>>::remove(uint64_t *result, void *a2, WTF *this)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *v23;
  WTF *v24;
  void *v25;

  if (this)
  {
    v4 = result;
    v5 = *result;
    if (*result)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = ~(*(_QWORD *)this << 32) + *(_QWORD *)this;
      v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
      v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
      v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
      for (i = 1; ; ++i)
      {
        v12 = v10;
        v13 = *(_QWORD **)(v5 + 8 * v10);
        if (v13 != (_QWORD *)-1)
        {
          if (!v13)
            goto LABEL_20;
          if (*v13 == *(_QWORD *)this)
            break;
        }
        v10 = (v12 + i) & v6;
      }
      if (*(_DWORD *)(v5 - 4) != (_DWORD)v12)
      {
        *(_QWORD *)(v5 + 8 * v12) = -1;
        ++*(_DWORD *)(*result - 16);
        v14 = *result;
        v15 = *result ? *(_DWORD *)(v14 - 12) - 1 : -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *result;
        if (*result)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(result, v18 >> 1, 0);
        }
      }
    }
LABEL_20:
    v20 = *((_QWORD *)this + 1);
    v21 = *((_QWORD *)this + 2);
    if (v20)
    {
      *(_QWORD *)(v20 + 16) = v21;
      v21 = *((_QWORD *)this + 2);
    }
    else
    {
      v4[1] = v21;
    }
    if (v21)
      v22 = (_QWORD *)(v21 + 8);
    else
      v22 = v4 + 2;
    *v22 = v20;
    v23 = *(WebCore::IDBServer::UniqueIDBDatabaseConnection **)this;
    *(_QWORD *)this = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WebCore::IDBServer::UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection(v23);
        WTF::fastFree(v24, v25);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
    return (uint64_t *)WTF::fastFree(this, a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::createObjectStore(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,WebCore::IDBObjectStoreInfo const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *a1 = off_1E335AF48;
  v3 = a1[12];
  a1[12] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 4), a2);
  v5 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::createObjectStore(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,WebCore::IDBObjectStoreInfo const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *a1 = off_1E335AF48;
  v3 = a1[12];
  a1[12] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 4), a2);
  v5 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v4);
    }
  }
  return WTF::fastFree((WTF *)a1, v4);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::createObjectStore(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,WebCore::IDBObjectStoreInfo const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  unsigned int *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int16 v12;
  WTF::StringImpl *v13;

  v3 = a1[2];
  if (v3 && *(_QWORD *)(v3 + 8) && (v4 = a1[3]) != 0 && (v5 = *(uint64_t **)(v4 + 8)) != 0)
  {
    v6 = (uint64_t *)a1[1];
    if (a2)
      v7 = 1;
    else
      v7 = 2;
    return WebCore::IDBServer::UniqueIDBDatabase::createObjectStore(v6, v5, (uint64_t)(a1 + 4), a1 + 12, v7);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 264;
    if (v11)
      *(_DWORD *)v11 += 2;
    v13 = v11;
    (*(void (**)(_QWORD, __int16 *))(*(_QWORD *)a1[12] + 16))(a1[12], &v12);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = (unsigned int *)v11;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        return (unsigned int *)WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::deleteObjectStore(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,WTF::String const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *a1 = &off_1E335AF70;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::deleteObjectStore(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,WTF::String const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E335AF70;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::deleteObjectStore(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,WTF::String const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int16 v12;
  WTF::StringImpl *v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8) && (v4 = *(_QWORD *)(a1 + 24)) != 0 && (v5 = *(uint64_t **)(v4 + 8)) != 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    if (a2)
      v7 = 1;
    else
      v7 = 2;
    return WebCore::IDBServer::UniqueIDBDatabase::deleteObjectStore(v6, v5, (const WTF::StringImpl **)(a1 + 32), (_QWORD *)(a1 + 40), v7);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 264;
    if (v11)
      *(_DWORD *)v11 += 2;
    v13 = v11;
    (*(void (**)(_QWORD, __int16 *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v12);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = v11;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::renameObjectStore(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::String const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *a1 = &off_1E335AF98;
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::renameObjectStore(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::String const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E335AF98;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::renameObjectStore(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::String const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int16 v12;
  WTF::StringImpl *v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8) && (v4 = *(_QWORD *)(a1 + 24)) != 0 && (v5 = *(uint64_t **)(v4 + 8)) != 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (a2)
      v7 = 1;
    else
      v7 = 2;
    return WebCore::IDBServer::UniqueIDBDatabase::renameObjectStore(v6, v5, *(WTF::StringImpl **)(a1 + 32), (WTF::StringImpl **)(a1 + 40), (_QWORD *)(a1 + 48), v7);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 264;
    if (v11)
      *(_DWORD *)v11 += 2;
    v13 = v11;
    (*(void (**)(_QWORD, __int16 *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), &v12);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = v11;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::clearObjectStore(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E335AFC0;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::clearObjectStore(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_1E335AFC0;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::clearObjectStore(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int16 v12;
  WTF::StringImpl *v13;

  v3 = a1[2];
  if (v3 && *(_QWORD *)(v3 + 8) && (v4 = a1[3]) != 0 && (v5 = *(uint64_t **)(v4 + 8)) != 0)
  {
    v6 = (uint64_t *)a1[1];
    if (a2)
      v7 = 1;
    else
      v7 = 2;
    return WebCore::IDBServer::UniqueIDBDatabase::clearObjectStore(v6, v5, a1[4], a1 + 5, v7);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 264;
    if (v11)
      *(_DWORD *)v11 += 2;
    v13 = v11;
    (*(void (**)(_QWORD, __int16 *))(*(_QWORD *)a1[5] + 16))(a1[5], &v12);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = v11;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::createIndex(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,WebCore::IDBIndexInfo const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  char v13;

  *(_QWORD *)a1 = &off_1E335AFE8;
  v3 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E335AC88[v4])(&v13, a1 + 56);
  *(_DWORD *)(a1 + 72) = -1;
  v5 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::createIndex(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,WebCore::IDBIndexInfo const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  char v13;

  *(_QWORD *)this = &off_1E335AFE8;
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 18);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E335AC88[v4])(&v13, (char *)this + 56);
  *((_DWORD *)this + 18) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::createIndex(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,WebCore::IDBIndexInfo const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  unsigned int *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int16 v12;
  WTF::StringImpl *v13;

  v3 = a1[2];
  if (v3 && *(_QWORD *)(v3 + 8) && (v4 = a1[3]) != 0 && (v5 = *(uint64_t **)(v4 + 8)) != 0)
  {
    v6 = (uint64_t *)a1[1];
    if (a2)
      v7 = 1;
    else
      v7 = 2;
    return WebCore::IDBServer::UniqueIDBDatabase::createIndex(v6, v5, (uint64_t)(a1 + 4), a1 + 11, v7);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 264;
    if (v11)
      *(_DWORD *)v11 += 2;
    v13 = v11;
    (*(void (**)(_QWORD, __int16 *))(*(_QWORD *)a1[11] + 16))(a1[11], &v12);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = (unsigned int *)v11;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        return (unsigned int *)WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::deleteIndex(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::String const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *a1 = &off_1E335B010;
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::deleteIndex(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::String const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E335B010;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::deleteIndex(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::String const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int16 v12;
  WTF::StringImpl *v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8) && (v4 = *(_QWORD *)(a1 + 24)) != 0 && (v5 = *(uint64_t **)(v4 + 8)) != 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    if (a2)
      v7 = 1;
    else
      v7 = 2;
    return WebCore::IDBServer::UniqueIDBDatabase::deleteIndex(v6, v5, *(const WTF::StringImpl **)(a1 + 32), (const WTF::StringImpl **)(a1 + 40), (_QWORD *)(a1 + 48), v7);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 264;
    if (v11)
      *(_DWORD *)v11 += 2;
    v13 = v11;
    (*(void (**)(_QWORD, __int16 *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), &v12);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = v11;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::renameIndex(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,unsigned long long,WTF::String const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *a1 = &off_1E335B038;
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::renameIndex(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,unsigned long long,WTF::String const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E335B038;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::renameIndex(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,unsigned long long,WTF::String const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int16 v12;
  WTF::StringImpl *v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8) && (v4 = *(_QWORD *)(a1 + 24)) != 0 && (v5 = *(uint64_t **)(v4 + 8)) != 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    if (a2)
      v7 = 1;
    else
      v7 = 2;
    return WebCore::IDBServer::UniqueIDBDatabase::renameIndex(v6, v5, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (WTF::StringImpl **)(a1 + 48), (_QWORD *)(a1 + 56), v7);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 264;
    if (v11)
      *(_DWORD *)v11 += 2;
    v13 = v11;
    (*(void (**)(_QWORD, __int16 *))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), &v12);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = v11;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBKeyData const&)> &&)::$_1,void,JSC::JSGlobalObject &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)a1 = off_1E335B060;
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(a1 + 104), a2);
  v4 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v4])(&v6, a1 + 80);
  *(_DWORD *)(a1 + 96) = -1;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 8), v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBKeyData const&)> &&)::$_1,void,JSC::JSGlobalObject &>::~CallableWrapper(unsigned int *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  void *v5;
  char v7;

  *(_QWORD *)a1 = off_1E335B060;
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(a1 + 26), a2);
  v4 = a1[24];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, unsigned int *))off_1E335ACA8[v4])(&v7, a1 + 20);
  a1[24] = -1;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 2), v3);
  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBKeyData const&)> &&)::$_1,void,JSC::JSGlobalObject &>::call(_QWORD *a1, WebCore *a2, uint64_t a3, uint64_t a4, const WebCore::IDBValue *a5)
{
  uint64_t result;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  result = (uint64_t)WebCore::generateIndexKeyMapForValueIsolatedCopy(a2, (JSC::JSGlobalObject *)(a1 + 1), (const WebCore::IDBObjectStoreInfo *)(a1 + 9), (const WebCore::IDBKeyData *)(a1 + 13), a5, &v18);
  v8 = (uint64_t *)a1[18];
  v9 = v18;
  v18 = 0;
  v10 = *v8;
  *v8 = v9;
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      v12 = (_DWORD *)(v10 + 40);
      do
      {
        if (*((_QWORD *)v12 - 5) != -1)
        {
          v13 = *v12;
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, _DWORD *))off_1E335ACF0[v13])(&v19, v12 - 8);
          *v12 = -1;
        }
        v12 += 12;
        --v11;
      }
      while (v11);
    }
    result = WTF::fastFree((WTF *)(v10 - 16), v7);
  }
  v14 = v18;
  if (v18)
  {
    v15 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v15)
    {
      v16 = (_DWORD *)(v18 + 40);
      do
      {
        if (*((_QWORD *)v16 - 5) != -1)
        {
          v17 = *v16;
          if ((_DWORD)v17 != -1)
            ((void (*)(char *, _DWORD *))off_1E335ACF0[v17])(&v20, v16 - 8);
          *v16 = -1;
        }
        v16 += 12;
        --v15;
      }
      while (v15);
    }
    return WTF::fastFree((WTF *)(v14 - 16), v7);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBKeyData const&)> &&)::$_2,void,BOOL>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E335B088;
  WebCore::IDBServer::UniqueIDBDatabase::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBKeyData const&)> &&)::$_2::~$_2((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBKeyData const&)> &&)::$_2,void,BOOL>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E335B088;
  WebCore::IDBServer::UniqueIDBDatabase::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBKeyData const&)> &&)::$_2::~$_2((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBKeyData const&)> &&)::$_2,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  void (*v11)(void);
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  int v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  int v38;
  uint64_t v39;
  const char *v40;
  WTF::StringImpl *v41[2];
  int v42;
  char v43;
  _BYTE v44[16];
  int v45;
  __int16 v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  __int128 v49;
  uint64_t v50;
  unint64_t *v51;
  char *v52;
  char v53;
  __int128 v54;
  unint64_t v55;
  char v56;
  const char *v57;
  int v58;
  const char *v59;
  WTF::StringImpl *v60;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = *(WTF::StringImpl **)(a1 + 8);
    v5 = *(unsigned __int8 *)(a1 + 200);
    v6 = *(unsigned __int8 *)(a1 + 216);
    v7 = *(_OWORD *)(a1 + 48);
    v56 = *(_BYTE *)(a1 + 216);
    v8 = *((_QWORD *)v4 + 22);
    if (v8)
    {
      if (v6)
      {
        if (*(_DWORD *)(a1 + 152) != 4)
        {
LABEL_76:
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_77;
        }
        v9 = (unint64_t)*(double *)(a1 + 136);
      }
      else
      {
        v9 = 0;
      }
      v55 = v9;
      v16 = *(_QWORD *)(a1 + 232);
      v54 = v7;
      v49 = v7;
      v48 = v4;
      v50 = v16;
      v51 = &v55;
      v52 = &v56;
      v53 = 1;
      if ((a2 & 1) == 0)
      {
        v40 = "Failed to ";
        LODWORD(v41[0]) = 10;
        v59 = "PutOrAdd";
        LODWORD(v60) = 8;
        v57 = " in database because not enough space for domain";
        v58 = 48;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v40, (uint64_t)&v59, (uint64_t)&v57, &v47);
        v20 = v47;
        if (v47)
        {
          LOWORD(v40) = 274;
          *(_DWORD *)v47 += 2;
          v41[0] = v20;
          (*(void (**)(_QWORD, const char **, uint64_t))(**(_QWORD **)(a1 + 208) + 16))(*(_QWORD *)(a1 + 208), &v40, a1 + 128);
          v22 = v41[0];
          v41[0] = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v21);
            else
              *(_DWORD *)v22 -= 2;
          }
          result = v47;
          v47 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
            else
              *(_DWORD *)result -= 2;
          }
          goto LABEL_59;
        }
        goto LABEL_77;
      }
      v38 = v5;
      v39 = a1 + 128;
      v17 = *(_BYTE *)(a1 + 128);
      LOBYTE(v40) = v17;
      LOBYTE(v41[0]) = 0;
      v42 = -1;
      v18 = *(unsigned int *)(a1 + 152);
      if ((_DWORD)v18 == -1)
      {
        v43 = v17;
        v44[0] = 0;
        v45 = -1;
      }
      else
      {
        ((void (*)(const char **, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v18])(&v59, v41, a1 + 136);
        v42 = v18;
        v19 = *(unsigned int *)(a1 + 152);
        v43 = *(_BYTE *)(a1 + 128);
        v44[0] = 0;
        v45 = -1;
        if ((_DWORD)v19 != -1)
        {
          ((void (*)(const char **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_0[v19])(&v59, v44, a1 + 136);
          v45 = v19;
        }
      }
      v46 = 0;
      (*(void (**)(const char **__return_ptr, uint64_t, __int128 *, uint64_t, const char **))(*(_QWORD *)v8 + 120))(&v59, v8, &v54, v16, &v40);
      if (v45 != -1)
        ((void (*)(const char **, _BYTE *))off_1E335ACA8[v45])(&v57, v44);
      v45 = -1;
      if (v42 != -1)
        ((void (*)(const char **, WTF::StringImpl **))off_1E335ACA8[v42])(&v57, v41);
      if (BYTE1(v59))
      {
        v23 = 0;
        v24 = v39;
        goto LABEL_55;
      }
      v24 = v39;
      (*(void (**)(const char **__return_ptr, _QWORD, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v4 + 22) + 128))(&v40, *((_QWORD *)v4 + 22), &v54, a1 + 232, v39, a1 + 224, a1 + 160);
      LOWORD(v59) = (_WORD)v40;
      v26 = v41[0];
      v41[0] = 0;
      v27 = v60;
      v60 = v26;
      if (v27)
      {
        v28 = *(_DWORD *)v27 - 2;
        if (*(_DWORD *)v27 != 2)
        {
LABEL_44:
          *(_DWORD *)v27 = v28;
          goto LABEL_45;
        }
        WTF::StringImpl::destroy(v27, v25);
        v27 = v41[0];
        v41[0] = 0;
        if (v27)
        {
          v28 = *(_DWORD *)v27 - 2;
          if (*(_DWORD *)v27 != 2)
            goto LABEL_44;
          WTF::StringImpl::destroy(v27, v32);
        }
      }
LABEL_45:
      if (BYTE1(v59))
      {
        v23 = 0;
        goto LABEL_55;
      }
      if (v38 == 1 || !*(_BYTE *)(a1 + 280))
        goto LABEL_54;
      v29 = *(_DWORD *)(a1 + 152);
      if (v29 == -1)
        v30 = -1;
      else
        v30 = *(unsigned int *)(a1 + 152);
      if (v30 <= 8)
      {
        if (v30 != 4)
          goto LABEL_54;
        if (v29 == 4)
        {
          (*(void (**)(const char **__return_ptr, _QWORD, __int128 *, uint64_t, double))(**((_QWORD **)v4 + 22)
                                                                                                 + 184))(&v40, *((_QWORD *)v4 + 22), &v54, v16, *(double *)(a1 + 136));
          LOWORD(v59) = (_WORD)v40;
          v34 = v41[0];
          v41[0] = 0;
          v35 = v60;
          v60 = v34;
          if (v35)
          {
            v36 = *(_DWORD *)v35 - 2;
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::destroy(v35, v33);
              v35 = v41[0];
              v41[0] = 0;
              if (!v35)
                goto LABEL_54;
              v36 = *(_DWORD *)v35 - 2;
              if (*(_DWORD *)v35 == 2)
              {
                WTF::StringImpl::destroy(v35, v37);
                goto LABEL_54;
              }
            }
            *(_DWORD *)v35 = v36;
          }
LABEL_54:
          v53 = 0;
          v23 = 1;
LABEL_55:
          (*(void (**)(_QWORD, const char **, uint64_t))(**(_QWORD **)(a1 + 208) + 16))(*(_QWORD *)(a1 + 208), &v59, v24);
          result = v60;
          v60 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
            {
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
              if ((v23 & 1) != 0)
                return result;
LABEL_59:
              if (!v56)
                return result;
              (*(void (**)(const char **__return_ptr, _QWORD, __int128 *, uint64_t, unint64_t))(**((_QWORD **)v4 + 22) + 176))(&v40, *((_QWORD *)v4 + 22), &v49, v16, v55);
              result = v41[0];
              v41[0] = 0;
              if (!result)
                return result;
LABEL_14:
              if (*(_DWORD *)result == 2)
                return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
              *(_DWORD *)result -= 2;
              return result;
            }
            *(_DWORD *)result -= 2;
          }
          if ((v23 & 1) != 0)
            return result;
          goto LABEL_59;
        }
        goto LABEL_76;
      }
LABEL_77:
      __break(0xC471u);
      JUMPOUT(0x195401284);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOWORD(v40) = 264;
    v15 = v48;
    if (v48)
      *(_DWORD *)v48 += 2;
    v41[0] = v15;
    v11 = *(void (**)(void))(**(_QWORD **)(a1 + 208) + 16);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOWORD(v40) = 264;
    v10 = v48;
    if (v48)
      *(_DWORD *)v48 += 2;
    v41[0] = v10;
    v11 = *(void (**)(void))(**(_QWORD **)(a1 + 208) + 16);
  }
  v11();
  v13 = v41[0];
  v41[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v48;
  v48 = 0;
  if (result)
    goto LABEL_14;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::getRecord(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBGetResult const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  char v10;
  char v11;

  *(_QWORD *)a1 = &off_1E335B0B0;
  v3 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v4])(&v10, a1 + 168);
  *(_DWORD *)(a1 + 184) = -1;
  v5 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v5])(&v11, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v6 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::getRecord(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBGetResult const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  char v10;
  char v11;

  *(_QWORD *)this = &off_1E335B0B0;
  v3 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 46);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v4])(&v10, (char *)this + 168);
  *((_DWORD *)this + 46) = -1;
  v5 = *((unsigned int *)this + 38);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v5])(&v11, (char *)this + 136);
  *((_DWORD *)this + 38) = -1;
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::getRecord(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBGetResult const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _OWORD v11[3];
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  WTF::StringImpl *v22;
  __int16 v23;
  WTF::StringImpl *v24;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = *(uint64_t **)(a1 + 8);
    if (a2)
      v5 = 1;
    else
      v5 = 2;
    WebCore::IDBServer::UniqueIDBDatabase::getRecord(v4, (uint64_t *)(a1 + 24), (char *)(a1 + 128), (_QWORD *)(a1 + 208), v5);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v23 = 264;
    v6 = v22;
    if (v22)
      *(_DWORD *)v22 += 2;
    v24 = v6;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v21 = 0;
    v19 = 0;
    v20 = 0;
    memset(v11, 0, 41);
    (*(void (**)(_QWORD, __int16 *, _OWORD *))(**(_QWORD **)(a1 + 208) + 16))(*(_QWORD *)(a1 + 208), &v23, v11);
    WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v11, v7);
    v9 = v24;
    v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v22;
    v22 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::getAllRecords(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBGetAllResult const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  char v10;
  char v11;

  *(_QWORD *)a1 = &off_1E335B0D8;
  v3 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v4])(&v10, a1 + 168);
  *(_DWORD *)(a1 + 184) = -1;
  v5 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v5])(&v11, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v6 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::getAllRecords(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBGetAllResult const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  char v10;
  char v11;

  *(_QWORD *)this = &off_1E335B0D8;
  v3 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 46);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v4])(&v10, (char *)this + 168);
  *((_DWORD *)this + 46) = -1;
  v5 = *((unsigned int *)this + 38);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v5])(&v11, (char *)this + 136);
  *((_DWORD *)this + 38) = -1;
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::getAllRecords(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBGetAllResult const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebCore::IDBValue *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF *v18[2];
  WTF *v19[2];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  __int16 v24;
  WTF::StringImpl *v25;
  char v26;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = *(uint64_t **)(a1 + 8);
    if (a2)
      v5 = 1;
    else
      v5 = 2;
    return WebCore::IDBServer::UniqueIDBDatabase::getAllRecords(v4, a1 + 24, (char *)(a1 + 128), (_QWORD *)(a1 + 232), v5);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v24 = 264;
    v7 = v23;
    if (v23)
      *(_DWORD *)v23 += 2;
    v25 = v7;
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)v18 = 0u;
    *(_OWORD *)v19 = 0u;
    (*(void (**)(_QWORD, __int16 *, WTF **))(**(_QWORD **)(a1 + 232) + 16))(*(_QWORD *)(a1 + 232), &v24, v18);
    if ((_BYTE)v22)
    {
      if (DWORD2(v21) != -1)
        ((void (*)(char *, char *))off_1E335AC88[DWORD2(v21)])(&v26, (char *)&v20 + 8);
      DWORD2(v21) = -1;
    }
    if (DWORD1(v20))
    {
      v9 = v19[1];
      v10 = 40 * DWORD1(v20);
      do
      {
        WebCore::IDBValue::~IDBValue(v9, v8);
        v9 = (WebCore::IDBValue *)(v11 + 40);
        v10 -= 40;
      }
      while (v10);
    }
    v12 = v19[1];
    if (v19[1])
    {
      v19[1] = 0;
      LODWORD(v20) = 0;
      WTF::fastFree(v12, v8);
    }
    v13 = v18[1];
    if (HIDWORD(v19[0]))
    {
      v14 = 32 * HIDWORD(v19[0]);
      v15 = (_DWORD *)((char *)v18[1] + 24);
      do
      {
        v16 = *v15;
        if ((_DWORD)v16 != -1)
          ((void (*)(char *, _DWORD *))off_1E335ACA8[v16])(&v26, v15 - 4);
        *v15 = -1;
        v15 += 8;
        v14 -= 32;
      }
      while (v14);
      v13 = v18[1];
    }
    if (v13)
    {
      v18[1] = 0;
      LODWORD(v19[0]) = 0;
      WTF::fastFree(v13, v8);
    }
    v17 = v25;
    v25 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v8);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::getCount(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&,WTF::Function<void ()(WebCore::IDBError const&,unsigned long long)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  char v10;
  char v11;

  *(_QWORD *)a1 = &off_1E335B100;
  v3 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v4])(&v10, a1 + 168);
  *(_DWORD *)(a1 + 184) = -1;
  v5 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v5])(&v11, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v6 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::getCount(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&,WTF::Function<void ()(WebCore::IDBError const&,unsigned long long)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  char v10;
  char v11;

  *(_QWORD *)this = &off_1E335B100;
  v3 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 46);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v4])(&v10, (char *)this + 168);
  *((_DWORD *)this + 46) = -1;
  v5 = *((unsigned int *)this + 38);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v5])(&v11, (char *)this + 136);
  *((_DWORD *)this + 38) = -1;
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::getCount(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&,WTF::Function<void ()(WebCore::IDBError const&,unsigned long long)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __int16 v10;
  WTF::StringImpl *v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = *(uint64_t **)(a1 + 8);
    if (a2)
      v5 = 1;
    else
      v5 = 2;
    return WebCore::IDBServer::UniqueIDBDatabase::getCount(v4, (uint64_t *)(a1 + 24), (char *)(a1 + 128), (_QWORD *)(a1 + 200), v5);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = 264;
    if (v9)
      *(_DWORD *)v9 += 2;
    v11 = v9;
    (*(void (**)(_QWORD, __int16 *, _QWORD))(**(_QWORD **)(a1 + 200) + 16))(*(_QWORD *)(a1 + 200), &v10, 0);
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = v9;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::deleteRecord(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  char v10;
  char v11;

  *(_QWORD *)a1 = &off_1E335B128;
  v3 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v4])(&v10, a1 + 168);
  *(_DWORD *)(a1 + 184) = -1;
  v5 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v5])(&v11, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v6 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::deleteRecord(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  char v10;
  char v11;

  *(_QWORD *)this = &off_1E335B128;
  v3 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 46);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v4])(&v10, (char *)this + 168);
  *((_DWORD *)this + 46) = -1;
  v5 = *((unsigned int *)this + 38);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v5])(&v11, (char *)this + 136);
  *((_DWORD *)this + 38) = -1;
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::deleteRecord(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __int16 v10;
  WTF::StringImpl *v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = *(uint64_t **)(a1 + 8);
    if (a2)
      v5 = 1;
    else
      v5 = 2;
    return WebCore::IDBServer::UniqueIDBDatabase::deleteRecord(v4, (uint64_t *)(a1 + 24), (char *)(a1 + 128), (_QWORD *)(a1 + 200), v5);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = 264;
    if (v9)
      *(_DWORD *)v9 += 2;
    v11 = v9;
    (*(void (**)(_QWORD, __int16 *))(**(_QWORD **)(a1 + 200) + 16))(*(_QWORD *)(a1 + 200), &v10);
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = v9;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::openCursor(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBGetResult const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  char v10;
  char v11;

  *(_QWORD *)a1 = &off_1E335B150;
  v3 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 232);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v4])(&v10, a1 + 216);
  *(_DWORD *)(a1 + 232) = -1;
  v5 = *(unsigned int *)(a1 + 200);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v5])(&v11, a1 + 184);
  *(_DWORD *)(a1 + 200) = -1;
  v6 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::openCursor(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBGetResult const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  char v10;
  char v11;

  *(_QWORD *)this = &off_1E335B150;
  v3 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 58);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v4])(&v10, (char *)this + 216);
  *((_DWORD *)this + 58) = -1;
  v5 = *((unsigned int *)this + 50);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v5])(&v11, (char *)this + 184);
  *((_DWORD *)this + 50) = -1;
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::openCursor(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBGetResult const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _OWORD v11[3];
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  WTF::StringImpl *v22;
  __int16 v23;
  WTF::StringImpl *v24;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = *(uint64_t **)(a1 + 8);
    if (a2)
      v5 = 1;
    else
      v5 = 2;
    WebCore::IDBServer::UniqueIDBDatabase::openCursor(v4, (uint64_t *)(a1 + 24), (__int128 *)(a1 + 128), (_QWORD *)(a1 + 256), v5);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v23 = 264;
    v6 = v22;
    if (v22)
      *(_DWORD *)v22 += 2;
    v24 = v6;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v21 = 0;
    v19 = 0;
    v20 = 0;
    memset(v11, 0, 41);
    (*(void (**)(_QWORD, __int16 *, _OWORD *))(**(_QWORD **)(a1 + 256) + 16))(*(_QWORD *)(a1 + 256), &v23, v11);
    WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v11, v7);
    v9 = v24;
    v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v22;
    v22 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::iterateCursor(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBGetResult const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  char v10;
  char v11;

  *(_QWORD *)a1 = &off_1E335B178;
  v3 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v4])(&v10, a1 + 168);
  *(_DWORD *)(a1 + 184) = -1;
  v5 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_1E335ACA8[v5])(&v11, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v6 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::iterateCursor(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBGetResult const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  char v10;
  char v11;

  *(_QWORD *)this = &off_1E335B178;
  v3 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 46);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v4])(&v10, (char *)this + 168);
  *((_DWORD *)this + 46) = -1;
  v5 = *((unsigned int *)this + 38);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E335ACA8[v5])(&v11, (char *)this + 136);
  *((_DWORD *)this + 38) = -1;
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::iterateCursor(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&,WTF::Function<void ()(WebCore::IDBError const&,WebCore::IDBGetResult const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  WTF *v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _OWORD v11[3];
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  WTF::StringImpl *v22;
  __int16 v23;
  WTF::StringImpl *v24;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = *(WTF **)(a1 + 8);
    if (a2)
      v5 = 1;
    else
      v5 = 2;
    WebCore::IDBServer::UniqueIDBDatabase::iterateCursor(v4, (uint64_t *)(a1 + 24), (char *)(a1 + 128), (_QWORD *)(a1 + 200), v5);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v23 = 264;
    v6 = v22;
    if (v22)
      *(_DWORD *)v22 += 2;
    v24 = v6;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v21 = 0;
    v19 = 0;
    v20 = 0;
    memset(v11, 0, 41);
    (*(void (**)(_QWORD, __int16 *, _OWORD *))(**(_QWORD **)(a1 + 200) + 16))(*(_QWORD *)(a1 + 200), &v23, v11);
    WebCore::IDBGetResult::~IDBGetResult((WebCore::IDBGetResult *)v11, v7);
    v9 = v24;
    v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v22;
    v22 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::commitTransaction(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E335B1A0;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::commitTransaction(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_1E335B1A0;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::commitTransaction(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int16 v12;
  WTF::StringImpl *v13;

  v3 = a1[3];
  if (v3 && *(_QWORD *)(v3 + 8) && (v4 = a1[4]) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = a1[1];
    if (a2)
      v7 = 1;
    else
      v7 = 2;
    return WebCore::IDBServer::UniqueIDBDatabase::commitTransaction(v6, v5, a1[2], a1 + 5, v7);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 264;
    if (v11)
      *(_DWORD *)v11 += 2;
    v13 = v11;
    (*(void (**)(_QWORD, __int16 *))(*(_QWORD *)a1[5] + 16))(a1[5], &v12);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = v11;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::commitTransaction(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_1,void,WebCore::IDBError const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E335B1C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::commitTransaction(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_1,void,WebCore::IDBError const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335B1C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::commitTransaction(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,unsigned long long,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_1,void,WebCore::IDBError const&>::call(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  __int16 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int16 v12;
  WTF::StringImpl *v13;

  v3 = *a2;
  v9 = *a2;
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  if (v4)
    *(_DWORD *)v4 += 2;
  v10 = v4;
  if (v3 >= 0x100)
  {
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, __int16 *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v9);
    v4 = v10;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 280;
    v5 = v11;
    if (v11)
      *(_DWORD *)v11 += 2;
    v13 = v5;
    (*(void (**)(_QWORD, __int16 *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v12);
    v7 = v13;
    v13 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v10 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::abortTransaction(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E335B1F0;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::abortTransaction(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_1E335B1F0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabase::abortTransaction(WebCore::IDBServer::UniqueIDBDatabaseTransaction &,WTF::Function<void ()(WebCore::IDBError const&)> &&,WebCore::IDBServer::UniqueIDBDatabase::SpaceCheckResult)::$_0,void,BOOL>::call(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int16 v12;
  WTF::StringImpl *v13;

  v3 = a1[2];
  if (v3 && *(_QWORD *)(v3 + 8) && (v4 = a1[3]) != 0 && (v5 = *(uint64_t **)(v4 + 8)) != 0)
  {
    v6 = (uint64_t *)a1[1];
    if (a2)
      v7 = 1;
    else
      v7 = 2;
    return WebCore::IDBServer::UniqueIDBDatabase::abortTransaction(v6, v5, a1 + 4, v7);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 264;
    if (v11)
      *(_DWORD *)v11 += 2;
    v13 = v11;
    (*(void (**)(_QWORD, __int16 *))(*(_QWORD *)a1[4] + 16))(a1[4], &v12);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = v11;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseConnection::abortTransactionWithoutCallback(WebCore::IDBServer::UniqueIDBDatabaseTransaction &)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B218;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseConnection::abortTransactionWithoutCallback(WebCore::IDBServer::UniqueIDBDatabaseTransaction &)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B218;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseConnection::abortTransactionWithoutCallback(WebCore::IDBServer::UniqueIDBDatabaseTransaction &)::$_0,void,WebCore::IDBError const&>::call(WebCore::IDBServer::UniqueIDBDatabaseTransaction *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v15;
  void *v16;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = *((_QWORD *)result + 1);
      v5 = *(_QWORD *)(v2 + 72);
      v3 = (uint64_t *)(v2 + 72);
      v4 = v5;
      if (v5)
      {
        result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(v4, *((_QWORD *)result + 3), *((_QWORD *)result + 4));
        if (result
          && result != (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)(v4 + 24 * *(unsigned int *)(v4 - 4)))
        {
          v8 = result;
          *(_QWORD *)result = -1;
          result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)*((_QWORD *)result + 2);
          *((_QWORD *)v8 + 2) = 0;
          if (result)
          {
            if (*((_DWORD *)result + 2) == 1)
            {
              WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(result, v6);
              result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::fastFree(v15, v16);
            }
            else
            {
              --*((_DWORD *)result + 2);
            }
          }
          ++*(_DWORD *)(*v3 - 16);
          v9 = *v3;
          if (*v3)
            v10 = *(_DWORD *)(v9 - 12) - 1;
          else
            v10 = -1;
          *(_DWORD *)(v9 - 12) = v10;
          v11 = *v3;
          if (*v3)
          {
            v12 = 6 * *(_DWORD *)(v11 - 12);
            v13 = *(_DWORD *)(v11 - 4);
            if (v12 < v13 && v13 >= 9)
              return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v3, v13 >> 1, 0);
          }
        }
      }
    }
  }
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::inlineSet<WebCore::IDBResourceIdentifier const&,WebCore::IDBServer::UniqueIDBDatabaseTransaction*>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  int v25;
  unint64_t v26;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *result;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  WTF *v37;
  void *v38;
  WTF *v39;
  void *v40;

  v5 = a2;
  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *((_QWORD *)v5 + 1);
  v12 = (*(_QWORD *)v5 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*(_QWORD *)v5 - 1640531527) << 16) ^ ((unsigned __int16)*(_QWORD *)v5 - 1640531527);
  v13 = v12 + (unsigned __int16)WORD2(*(_QWORD *)v5) + (v12 >> 11);
  v14 = (*(_QWORD *)v5 >> 37) & 0x7FFF800 ^ (v13 << 16) ^ v13;
  v15 = (v11 >> 5) & 0x7FFF800 ^ ((v14 + (unsigned __int16)v11 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)v11 + (v14 >> 11));
  v16 = (v11 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v11) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v11) + (v15 >> 11));
  v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
  v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
  v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
  if (!v19)
    v19 = 0x800000;
  v20 = v19 & v10;
  v21 = (unint64_t *)(v8 + 24 * (v19 & v10));
  v22 = *v21;
  v23 = v21[1];
  if (*(_OWORD *)v21 != 0)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v22 == -1)
      {
        v24 = v21;
      }
      else if (v22 == *(_QWORD *)v5 && v23 == v11)
      {
        if ((v9 & 1) != 0)
          v35 = 0;
        else
          v35 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)a4 = v21;
        *(_QWORD *)(a4 + 8) = v8 + 24 * v35;
        *(_BYTE *)(a4 + 16) = 0;
        v36 = *a3;
        if (*a3)
          ++*(_DWORD *)(v36 + 8);
        result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v21[2];
        v21[2] = v36;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1)
          {
            WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(result, a2);
            return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::fastFree(v39, v40);
          }
          else
          {
            --*((_DWORD *)result + 2);
          }
        }
        return result;
      }
      v20 = (v20 + v25) & v10;
      v21 = (unint64_t *)(v8 + 24 * v20);
      v22 = *v21;
      v23 = v21[1];
      ++v25;
      a2 = (WTF::StringImpl *)(v23 | *v21);
    }
    while (a2);
    if (v24)
    {
      *v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v21 = v24;
    }
  }
  *(_OWORD *)v21 = *(_OWORD *)v5;
  v26 = *a3;
  if (*a3)
    ++*(_DWORD *)(v26 + 8);
  result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v21[2];
  v21[2] = v26;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(result, a2);
      result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::fastFree(v37, v38);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  v28 = *a1;
  if (*a1)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *a1;
  if (*a1)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 <= 2 * v32)
      goto LABEL_30;
  }
  else if (3 * v33 <= 4 * v32)
  {
    if (!(_DWORD)v33)
    {
      v34 = 8;
LABEL_35:
      result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, v34, v21);
      v21 = (unint64_t *)result;
      v30 = *a1;
      if (*a1)
        LODWORD(v33) = *(_DWORD *)(v30 - 4);
      else
        LODWORD(v33) = 0;
      goto LABEL_39;
    }
LABEL_30:
    v34 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
    goto LABEL_35;
  }
LABEL_39:
  *(_QWORD *)a4 = v21;
  *(_QWORD *)(a4 + 8) = v30 + 24 * v33;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::abort(void)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B240;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::abort(void)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B240;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::abort(void)::$_0,void,WebCore::IDBError const&>::call(WebCore::IDBServer::UniqueIDBDatabaseTransaction *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v11;
  __int128 v12;

  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *((_QWORD *)result + 1);
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v12 = *(_OWORD *)(v3 + 24);
          WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::take((uint64_t *)&v11, (uint64_t *)(v5 + 72), v12, *((unint64_t *)&v12 + 1));
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
          if (v8)
            (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v8 + 40))(v8, &v12, a2);
          result = v11;
          if (v11)
          {
            if (*((_DWORD *)v11 + 2) == 1)
            {
              WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v11, v7);
              return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WTF::fastFree(v9, v10);
            }
            else
            {
              --*((_DWORD *)v11 + 2);
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::commit(unsigned long long)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B268;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::commit(unsigned long long)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B268;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::commit(unsigned long long)::$_0,void,WebCore::IDBError const&>::call(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  WTF::StringImpl *v10;
  uint64_t *v12;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v20;
  void *v21;
  __int128 v22;

  v2 = result[2];
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = result[1];
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v22 = *(_OWORD *)(v3 + 24);
          v7 = (uint64_t *)(v5 + 72);
          v8 = *(_QWORD *)(v5 + 72);
          if (v8)
          {
            v9 = WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBResourceIdentifier>>>,WebCore::IDBResourceIdentifier>(*(_QWORD *)(v5 + 72), v22, *((unint64_t *)&v22 + 1));
            if (v9 && v9 != (uint64_t *)(v8 + 24 * *(unsigned int *)(v8 - 4)))
            {
              v12 = v9;
              *v9 = -1;
              v13 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)v9[2];
              v12[2] = 0;
              if (v13)
              {
                if (*((_DWORD *)v13 + 2) == 1)
                {
                  WebCore::IDBServer::UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction(v13, v10);
                  WTF::fastFree(v20, v21);
                }
                else
                {
                  --*((_DWORD *)v13 + 2);
                }
              }
              ++*(_DWORD *)(*v7 - 16);
              v14 = *v7;
              if (*v7)
                v15 = *(_DWORD *)(v14 - 12) - 1;
              else
                v15 = -1;
              *(_DWORD *)(v14 - 12) = v15;
              v16 = *v7;
              if (*v7)
              {
                v17 = 6 * *(_DWORD *)(v16 - 12);
                v18 = *(_DWORD *)(v16 - 4);
                if (v17 < v18 && v18 >= 9)
                  WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::RawPtrTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBServer::UniqueIDBDatabaseTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash((uint64_t *)(v5 + 72), v18 >> 1, 0);
              }
            }
          }
          result = *(_QWORD **)(*(_QWORD *)(v5 + 40) + 8);
          if (result)
            return (_QWORD *)(*(uint64_t (**)(_QWORD *, __int128 *, uint64_t))(*result + 48))(result, &v22, a2);
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::createObjectStore(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B290;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::createObjectStore(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B290;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::createObjectStore(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&)::$_0,void,WebCore::IDBError const&>::call(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  char v7[8];
  __int128 v8;
  __int16 v9;
  _DWORD *v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (*((_BYTE *)a2 + 1))
          {
            v8 = *(_OWORD *)(a1 + 32);
            v11 = 0;
            v12 = 0;
            v13 = 0u;
            v14 = 0u;
            v15 = 0u;
            v7[0] = 0;
            v9 = *a2;
            v5 = (_DWORD *)*((_QWORD *)a2 + 1);
            if (v5)
              *v5 += 2;
            v10 = v5;
          }
          else
          {
            v7[0] = 4;
            v8 = *(_OWORD *)(a1 + 32);
            v9 = 0;
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0u;
            v14 = 0u;
            v15 = 0u;
          }
          v6 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
          if (v6)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 56))(v6, v7);
          WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v7);
        }
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteObjectStore(WebCore::IDBRequestData const&,WTF::String const&)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B2B8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteObjectStore(WebCore::IDBRequestData const&,WTF::String const&)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B2B8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteObjectStore(WebCore::IDBRequestData const&,WTF::String const&)::$_0,void,WebCore::IDBError const&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  char v15[8];
  __int128 v16;
  __int16 v17;
  _DWORD *v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return;
  if (!*(_QWORD *)(v2 + 8))
    return;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5 || !*(_QWORD *)(v5 + 8))
    return;
  v7 = (unsigned int *)(v4 + 128);
  v8 = *(unsigned int *)(v4 + 140);
  if ((_DWORD)v8 != *(_DWORD *)(v4 + 136))
  {
    v10 = *(_QWORD *)v7;
    *(_WORD *)(*(_QWORD *)v7 + 16 * v8) = *(_WORD *)a2;
    v11 = *(_DWORD **)(a2 + 8);
    if (!v11)
      goto LABEL_8;
    goto LABEL_7;
  }
  v9 = WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, a2);
  v8 = *(unsigned int *)(v4 + 140);
  v10 = *(_QWORD *)(v4 + 128);
  *(_WORD *)(v10 + 16 * v8) = *(_WORD *)v9;
  v11 = *(_DWORD **)(v9 + 8);
  if (v11)
LABEL_7:
    *v11 += 2;
LABEL_8:
  *(_QWORD *)(v10 + 16 * v8 + 8) = v11;
  ++*(_DWORD *)(v4 + 140);
  v12 = *(_QWORD *)(v4 + 16);
  if (*(_BYTE *)(a2 + 1))
  {
    if (v12)
      v12 = *(_QWORD *)(v12 + 8);
    v16 = *(_OWORD *)(a1 + 32);
    v19 = 0;
    v20 = 0;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v15[0] = 0;
    v17 = *(_WORD *)a2;
    v13 = *(_DWORD **)(a2 + 8);
    if (v13)
      *v13 += 2;
    v18 = v13;
  }
  else
  {
    v12 = *(_QWORD *)(v12 + 8);
    v15[0] = 5;
    v16 = *(_OWORD *)(a1 + 32);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
  if (v14)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v14 + 64))(v14, v15);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v15);
}

unint64_t WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (WTF *)((char *)v7 + 16 * v8);
        v12 = v7;
        do
        {
          *(_WORD *)v10 = *(_WORD *)v12;
          v13 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *((_QWORD *)v10 + 1) = v13;
          result = (unsigned int *)*((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
            else
              *result -= 2;
          }
          v12 = (WTF *)((char *)v12 + 16);
          v10 += 4;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::renameObjectStore(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B2E0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::renameObjectStore(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B2E0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::renameObjectStore(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&)::$_0,void,WebCore::IDBError const&>::call(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  char v7[8];
  __int128 v8;
  __int16 v9;
  _DWORD *v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (*((_BYTE *)a2 + 1))
          {
            v8 = *(_OWORD *)(a1 + 32);
            v11 = 0;
            v12 = 0;
            v13 = 0u;
            v14 = 0u;
            v15 = 0u;
            v7[0] = 0;
            v9 = *a2;
            v5 = (_DWORD *)*((_QWORD *)a2 + 1);
            if (v5)
              *v5 += 2;
            v10 = v5;
          }
          else
          {
            v7[0] = 16;
            v8 = *(_OWORD *)(a1 + 32);
            v9 = 0;
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0u;
            v14 = 0u;
            v15 = 0u;
          }
          v6 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
          if (v6)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 72))(v6, v7);
          WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v7);
        }
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::clearObjectStore(WebCore::IDBRequestData const&,unsigned long long)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B308;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::clearObjectStore(WebCore::IDBRequestData const&,unsigned long long)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B308;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::clearObjectStore(WebCore::IDBRequestData const&,unsigned long long)::$_0,void,WebCore::IDBError const&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  char v15[8];
  __int128 v16;
  __int16 v17;
  _DWORD *v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return;
  if (!*(_QWORD *)(v2 + 8))
    return;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5 || !*(_QWORD *)(v5 + 8))
    return;
  v7 = (unsigned int *)(v4 + 128);
  v8 = *(unsigned int *)(v4 + 140);
  if ((_DWORD)v8 != *(_DWORD *)(v4 + 136))
  {
    v10 = *(_QWORD *)v7;
    *(_WORD *)(*(_QWORD *)v7 + 16 * v8) = *(_WORD *)a2;
    v11 = *(_DWORD **)(a2 + 8);
    if (!v11)
      goto LABEL_8;
    goto LABEL_7;
  }
  v9 = WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, a2);
  v8 = *(unsigned int *)(v4 + 140);
  v10 = *(_QWORD *)(v4 + 128);
  *(_WORD *)(v10 + 16 * v8) = *(_WORD *)v9;
  v11 = *(_DWORD **)(v9 + 8);
  if (v11)
LABEL_7:
    *v11 += 2;
LABEL_8:
  *(_QWORD *)(v10 + 16 * v8 + 8) = v11;
  ++*(_DWORD *)(v4 + 140);
  v12 = *(_QWORD *)(v4 + 16);
  if (*(_BYTE *)(a2 + 1))
  {
    if (v12)
      v12 = *(_QWORD *)(v12 + 8);
    v16 = *(_OWORD *)(a1 + 32);
    v19 = 0;
    v20 = 0;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v15[0] = 0;
    v17 = *(_WORD *)a2;
    v13 = *(_DWORD **)(a2 + 8);
    if (v13)
      *v13 += 2;
    v18 = v13;
  }
  else
  {
    v12 = *(_QWORD *)(v12 + 8);
    v15[0] = 6;
    v16 = *(_OWORD *)(a1 + 32);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
  if (v14)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v14 + 80))(v14, v15);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v15);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::createIndex(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B330;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::createIndex(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B330;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::createIndex(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&)::$_0,void,WebCore::IDBError const&>::call(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  char v7[8];
  __int128 v8;
  __int16 v9;
  _DWORD *v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (*((_BYTE *)a2 + 1))
          {
            v8 = *(_OWORD *)(a1 + 32);
            v11 = 0;
            v12 = 0;
            v13 = 0u;
            v14 = 0u;
            v15 = 0u;
            v7[0] = 0;
            v9 = *a2;
            v5 = (_DWORD *)*((_QWORD *)a2 + 1);
            if (v5)
              *v5 += 2;
            v10 = v5;
          }
          else
          {
            v7[0] = 12;
            v8 = *(_OWORD *)(a1 + 32);
            v9 = 0;
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0u;
            v14 = 0u;
            v15 = 0u;
          }
          v6 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
          if (v6)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 88))(v6, v7);
          WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v7);
        }
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteIndex(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B358;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteIndex(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B358;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteIndex(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&)::$_0,void,WebCore::IDBError const&>::call(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  char v7[8];
  __int128 v8;
  __int16 v9;
  _DWORD *v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (*((_BYTE *)a2 + 1))
          {
            v8 = *(_OWORD *)(a1 + 32);
            v11 = 0;
            v12 = 0;
            v13 = 0u;
            v14 = 0u;
            v15 = 0u;
            v7[0] = 0;
            v9 = *a2;
            v5 = (_DWORD *)*((_QWORD *)a2 + 1);
            if (v5)
              *v5 += 2;
            v10 = v5;
          }
          else
          {
            v7[0] = 13;
            v8 = *(_OWORD *)(a1 + 32);
            v9 = 0;
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0u;
            v14 = 0u;
            v15 = 0u;
          }
          v6 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
          if (v6)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 96))(v6, v7);
          WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v7);
        }
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::renameIndex(WebCore::IDBRequestData const&,unsigned long long,unsigned long long,WTF::String const&)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B380;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::renameIndex(WebCore::IDBRequestData const&,unsigned long long,unsigned long long,WTF::String const&)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B380;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::renameIndex(WebCore::IDBRequestData const&,unsigned long long,unsigned long long,WTF::String const&)::$_0,void,WebCore::IDBError const&>::call(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  char v7[8];
  __int128 v8;
  __int16 v9;
  _DWORD *v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (*((_BYTE *)a2 + 1))
          {
            v8 = *(_OWORD *)(a1 + 32);
            v11 = 0;
            v12 = 0;
            v13 = 0u;
            v14 = 0u;
            v15 = 0u;
            v7[0] = 0;
            v9 = *a2;
            v5 = (_DWORD *)*((_QWORD *)a2 + 1);
            if (v5)
              *v5 += 2;
            v10 = v5;
          }
          else
          {
            v7[0] = 17;
            v8 = *(_OWORD *)(a1 + 32);
            v9 = 0;
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0u;
            v14 = 0u;
            v15 = 0u;
          }
          v6 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
          if (v6)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 104))(v6, v7);
          WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v7);
        }
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode)::$_0,void,WebCore::IDBError const&,WebCore::IDBKeyData const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B3A8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode)::$_0,void,WebCore::IDBError const&,WebCore::IDBKeyData const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B3A8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode)::$_0,void,WebCore::IDBError const&,WebCore::IDBKeyData const&>::call(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19[8];
  __int128 v20;
  __int16 v21;
  _DWORD *v22;
  char v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return;
  if (!*(_QWORD *)(v3 + 8))
    return;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    return;
  v9 = (unsigned int *)(v5 + 128);
  v10 = *(unsigned int *)(v5 + 140);
  if ((_DWORD)v10 != *(_DWORD *)(v5 + 136))
  {
    v12 = *(_QWORD *)v9;
    *(_WORD *)(*(_QWORD *)v9 + 16 * v10) = *(_WORD *)a2;
    v13 = *(_DWORD **)(a2 + 8);
    if (!v13)
      goto LABEL_8;
    goto LABEL_7;
  }
  v11 = WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, a2);
  v10 = *(unsigned int *)(v5 + 140);
  v12 = *(_QWORD *)(v5 + 128);
  *(_WORD *)(v12 + 16 * v10) = *(_WORD *)v11;
  v13 = *(_DWORD **)(v11 + 8);
  if (v13)
LABEL_7:
    *v13 += 2;
LABEL_8:
  *(_QWORD *)(v12 + 16 * v10 + 8) = v13;
  ++*(_DWORD *)(v5 + 140);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 40);
  if (*(_BYTE *)(a2 + 1))
  {
    v20 = *(_OWORD *)(a1 + 32);
    v23 = 0;
    v24 = 0;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v19[0] = 0;
    v21 = *(_WORD *)a2;
    v15 = *(_DWORD **)(a2 + 8);
    if (v15)
      *v15 += 2;
    v22 = v15;
  }
  else
  {
    v19[0] = 7;
    v20 = *(_OWORD *)(a1 + 32);
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v16 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v16 = *(_BYTE *)a3;
    *(_BYTE *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 24) = -1;
    v17 = *(unsigned int *)(a3 + 24);
    if ((_DWORD)v17 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_3[v17])(&v28, v16 + 8, a3 + 8);
      *(_DWORD *)(v16 + 24) = v17;
    }
    *(_QWORD *)&v26 = v16;
  }
  v18 = *(_QWORD *)(v14 + 8);
  if (v18)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v18 + 112))(v18, v19);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v19);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::getRecord(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&)::$_0,void,WebCore::IDBError const&,WebCore::IDBGetResult const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B3D0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::getRecord(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&)::$_0,void,WebCore::IDBError const&,WebCore::IDBGetResult const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B3D0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::getRecord(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&)::$_0,void,WebCore::IDBError const&,WebCore::IDBGetResult const&>::call(uint64_t a1, unint64_t a2, const WebCore::IDBGetResult *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  WebCore::IDBGetResult *v16;
  uint64_t v17;
  char v18[8];
  __int128 v19;
  __int16 v20;
  _DWORD *v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return;
  if (!*(_QWORD *)(v3 + 8))
    return;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    return;
  v9 = (unsigned int *)(v5 + 128);
  v10 = *(unsigned int *)(v5 + 140);
  if ((_DWORD)v10 != *(_DWORD *)(v5 + 136))
  {
    v12 = *(_QWORD *)v9;
    *(_WORD *)(*(_QWORD *)v9 + 16 * v10) = *(_WORD *)a2;
    v13 = *(_DWORD **)(a2 + 8);
    if (!v13)
      goto LABEL_8;
    goto LABEL_7;
  }
  v11 = WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, a2);
  v10 = *(unsigned int *)(v5 + 140);
  v12 = *(_QWORD *)(v5 + 128);
  *(_WORD *)(v12 + 16 * v10) = *(_WORD *)v11;
  v13 = *(_DWORD **)(v11 + 8);
  if (v13)
LABEL_7:
    *v13 += 2;
LABEL_8:
  *(_QWORD *)(v12 + 16 * v10 + 8) = v13;
  ++*(_DWORD *)(v5 + 140);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 40);
  if (*(_BYTE *)(a2 + 1))
  {
    v19 = *(_OWORD *)(a1 + 32);
    v22 = 0;
    v23 = 0;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v18[0] = 0;
    v20 = *(_WORD *)a2;
    v15 = *(_DWORD **)(a2 + 8);
    if (v15)
      *v15 += 2;
    v21 = v15;
  }
  else
  {
    v18[0] = 8;
    v19 = *(_OWORD *)(a1 + 32);
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0u;
    *(_QWORD *)&v25 = 0;
    v26 = 0u;
    v16 = (WebCore::IDBGetResult *)bmalloc::api::isoAllocate();
    *((_QWORD *)&v25 + 1) = WebCore::IDBGetResult::IDBGetResult(v16, a3);
  }
  v17 = *(_QWORD *)(v14 + 8);
  if (v17)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v17 + 120))(v17, v18);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v18);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::getAllRecords(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&)::$_0,void,WebCore::IDBError const&,WebCore::IDBGetAllResult const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B3F8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::getAllRecords(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&)::$_0,void,WebCore::IDBError const&,WebCore::IDBGetAllResult const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B3F8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::getAllRecords(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&)::$_0,void,WebCore::IDBError const&,WebCore::IDBGetAllResult const&>::call(uint64_t a1, unint64_t a2, const WebCore::IDBGetAllResult *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  WebCore::IDBGetAllResult *v16;
  uint64_t v17;
  char v18[8];
  __int128 v19;
  __int16 v20;
  _DWORD *v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return;
  if (!*(_QWORD *)(v3 + 8))
    return;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    return;
  v9 = (unsigned int *)(v5 + 128);
  v10 = *(unsigned int *)(v5 + 140);
  if ((_DWORD)v10 != *(_DWORD *)(v5 + 136))
  {
    v12 = *(_QWORD *)v9;
    *(_WORD *)(*(_QWORD *)v9 + 16 * v10) = *(_WORD *)a2;
    v13 = *(_DWORD **)(a2 + 8);
    if (!v13)
      goto LABEL_8;
    goto LABEL_7;
  }
  v11 = WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, a2);
  v10 = *(unsigned int *)(v5 + 140);
  v12 = *(_QWORD *)(v5 + 128);
  *(_WORD *)(v12 + 16 * v10) = *(_WORD *)v11;
  v13 = *(_DWORD **)(v11 + 8);
  if (v13)
LABEL_7:
    *v13 += 2;
LABEL_8:
  *(_QWORD *)(v12 + 16 * v10 + 8) = v13;
  ++*(_DWORD *)(v5 + 140);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 40);
  if (*(_BYTE *)(a2 + 1))
  {
    v19 = *(_OWORD *)(a1 + 32);
    v22 = 0;
    v23 = 0;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v18[0] = 0;
    v20 = *(_WORD *)a2;
    v15 = *(_DWORD **)(a2 + 8);
    if (v15)
      *v15 += 2;
    v21 = v15;
  }
  else
  {
    v18[0] = 9;
    v19 = *(_OWORD *)(a1 + 32);
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v16 = (WebCore::IDBGetAllResult *)bmalloc::api::isoAllocate();
    *(_QWORD *)&v26 = WebCore::IDBGetAllResult::IDBGetAllResult(v16, a3);
  }
  v17 = *(_QWORD *)(v14 + 8);
  if (v17)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v17 + 128))(v17, v18);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v18);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::getCount(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBError const&,unsigned long long>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B420;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::getCount(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBError const&,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B420;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::getCount(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBError const&,unsigned long long>::call(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  char v17[8];
  __int128 v18;
  __int16 v19;
  _DWORD *v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return;
  if (!*(_QWORD *)(v3 + 8))
    return;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    return;
  v9 = (unsigned int *)(v5 + 128);
  v10 = *(unsigned int *)(v5 + 140);
  if ((_DWORD)v10 != *(_DWORD *)(v5 + 136))
  {
    v12 = *(_QWORD *)v9;
    *(_WORD *)(*(_QWORD *)v9 + 16 * v10) = *(_WORD *)a2;
    v13 = *(_DWORD **)(a2 + 8);
    if (!v13)
      goto LABEL_8;
    goto LABEL_7;
  }
  v11 = WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, a2);
  v10 = *(unsigned int *)(v5 + 140);
  v12 = *(_QWORD *)(v5 + 128);
  *(_WORD *)(v12 + 16 * v10) = *(_WORD *)v11;
  v13 = *(_DWORD **)(v11 + 8);
  if (v13)
LABEL_7:
    *v13 += 2;
LABEL_8:
  *(_QWORD *)(v12 + 16 * v10 + 8) = v13;
  ++*(_DWORD *)(v5 + 140);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 40);
  if (*(_BYTE *)(a2 + 1))
  {
    v18 = *(_OWORD *)(a1 + 32);
    v21 = 0;
    v22 = 0;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v17[0] = 0;
    v19 = *(_WORD *)a2;
    v15 = *(_DWORD **)(a2 + 8);
    if (v15)
      *v15 += 2;
    v20 = v15;
  }
  else
  {
    v17[0] = 8;
    v18 = *(_OWORD *)(a1 + 32);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0u;
    v24 = 0u;
    *(_QWORD *)&v25 = 0;
    *((_QWORD *)&v25 + 1) = a3;
  }
  v16 = *(_QWORD *)(v14 + 8);
  if (v16)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 136))(v16, v17);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v17);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteRecord(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B448;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteRecord(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBError const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B448;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteRecord(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void,WebCore::IDBError const&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  char v15[8];
  __int128 v16;
  __int16 v17;
  _DWORD *v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return;
  if (!*(_QWORD *)(v2 + 8))
    return;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5 || !*(_QWORD *)(v5 + 8))
    return;
  v7 = (unsigned int *)(v4 + 128);
  v8 = *(unsigned int *)(v4 + 140);
  if ((_DWORD)v8 != *(_DWORD *)(v4 + 136))
  {
    v10 = *(_QWORD *)v7;
    *(_WORD *)(*(_QWORD *)v7 + 16 * v8) = *(_WORD *)a2;
    v11 = *(_DWORD **)(a2 + 8);
    if (!v11)
      goto LABEL_8;
    goto LABEL_7;
  }
  v9 = WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, a2);
  v8 = *(unsigned int *)(v4 + 140);
  v10 = *(_QWORD *)(v4 + 128);
  *(_WORD *)(v10 + 16 * v8) = *(_WORD *)v9;
  v11 = *(_DWORD **)(v9 + 8);
  if (v11)
LABEL_7:
    *v11 += 2;
LABEL_8:
  *(_QWORD *)(v10 + 16 * v8 + 8) = v11;
  ++*(_DWORD *)(v4 + 140);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 8) + 40);
  if (*(_BYTE *)(a2 + 1))
  {
    v16 = *(_OWORD *)(a1 + 32);
    v19 = 0;
    v20 = 0;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v15[0] = 0;
    v17 = *(_WORD *)a2;
    v13 = *(_DWORD **)(a2 + 8);
    if (v13)
      *v13 += 2;
    v18 = v13;
  }
  else
  {
    v15[0] = 11;
    v16 = *(_OWORD *)(a1 + 32);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
  }
  v14 = *(_QWORD *)(v12 + 8);
  if (v14)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v14 + 144))(v14, v15);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v15);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::openCursor(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&)::$_0,void,WebCore::IDBError const&,WebCore::IDBGetResult const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B470;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::openCursor(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&)::$_0,void,WebCore::IDBError const&,WebCore::IDBGetResult const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B470;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::openCursor(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&)::$_0,void,WebCore::IDBError const&,WebCore::IDBGetResult const&>::call(uint64_t a1, unint64_t a2, const WebCore::IDBGetResult *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  WebCore::IDBGetResult *v16;
  uint64_t v17;
  char v18[8];
  __int128 v19;
  __int16 v20;
  _DWORD *v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return;
  if (!*(_QWORD *)(v3 + 8))
    return;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    return;
  v9 = (unsigned int *)(v5 + 128);
  v10 = *(unsigned int *)(v5 + 140);
  if ((_DWORD)v10 != *(_DWORD *)(v5 + 136))
  {
    v12 = *(_QWORD *)v9;
    *(_WORD *)(*(_QWORD *)v9 + 16 * v10) = *(_WORD *)a2;
    v13 = *(_DWORD **)(a2 + 8);
    if (!v13)
      goto LABEL_8;
    goto LABEL_7;
  }
  v11 = WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, a2);
  v10 = *(unsigned int *)(v5 + 140);
  v12 = *(_QWORD *)(v5 + 128);
  *(_WORD *)(v12 + 16 * v10) = *(_WORD *)v11;
  v13 = *(_DWORD **)(v11 + 8);
  if (v13)
LABEL_7:
    *v13 += 2;
LABEL_8:
  *(_QWORD *)(v12 + 16 * v10 + 8) = v13;
  ++*(_DWORD *)(v5 + 140);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 40);
  if (*(_BYTE *)(a2 + 1))
  {
    v19 = *(_OWORD *)(a1 + 32);
    v22 = 0;
    v23 = 0;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v18[0] = 0;
    v20 = *(_WORD *)a2;
    v15 = *(_DWORD **)(a2 + 8);
    if (v15)
      *v15 += 2;
    v21 = v15;
  }
  else
  {
    v18[0] = 14;
    v19 = *(_OWORD *)(a1 + 32);
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0u;
    *(_QWORD *)&v25 = 0;
    v26 = 0u;
    v16 = (WebCore::IDBGetResult *)bmalloc::api::isoAllocate();
    *((_QWORD *)&v25 + 1) = WebCore::IDBGetResult::IDBGetResult(v16, a3);
  }
  v17 = *(_QWORD *)(v14 + 8);
  if (v17)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v17 + 152))(v17, v18);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v18);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::iterateCursor(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&)::$_0,void,WebCore::IDBError const&,WebCore::IDBGetResult const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335B498;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::iterateCursor(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&)::$_0,void,WebCore::IDBError const&,WebCore::IDBGetResult const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335B498;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::IDBServer::UniqueIDBDatabaseTransaction::iterateCursor(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&)::$_0,void,WebCore::IDBError const&,WebCore::IDBGetResult const&>::call(uint64_t a1, unint64_t a2, const WebCore::IDBGetResult *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  WebCore::IDBGetResult *v16;
  uint64_t v17;
  char v18[8];
  __int128 v19;
  __int16 v20;
  _DWORD *v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  if (!*(_BYTE *)(a1 + 128))
    return;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return;
  if (!*(_QWORD *)(v4 + 8))
    return;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    return;
  v9 = (unsigned int *)(v5 + 128);
  v10 = *(unsigned int *)(v5 + 140);
  if ((_DWORD)v10 != *(_DWORD *)(v5 + 136))
  {
    v12 = *(_QWORD *)v9;
    *(_WORD *)(*(_QWORD *)v9 + 16 * v10) = *(_WORD *)a2;
    v13 = *(_DWORD **)(a2 + 8);
    if (!v13)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, a2);
  v10 = *(unsigned int *)(v5 + 140);
  v12 = *(_QWORD *)(v5 + 128);
  *(_WORD *)(v12 + 16 * v10) = *(_WORD *)v11;
  v13 = *(_DWORD **)(v11 + 8);
  if (v13)
LABEL_8:
    *v13 += 2;
LABEL_9:
  *(_QWORD *)(v12 + 16 * v10 + 8) = v13;
  ++*(_DWORD *)(v5 + 140);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 40);
  if (*(_BYTE *)(a2 + 1))
  {
    v19 = *(_OWORD *)(a1 + 32);
    v22 = 0;
    v23 = 0;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v18[0] = 0;
    v20 = *(_WORD *)a2;
    v15 = *(_DWORD **)(a2 + 8);
    if (v15)
      *v15 += 2;
    v21 = v15;
  }
  else
  {
    v18[0] = 15;
    v19 = *(_OWORD *)(a1 + 32);
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0u;
    *(_QWORD *)&v25 = 0;
    v26 = 0u;
    v16 = (WebCore::IDBGetResult *)bmalloc::api::isoAllocate();
    *((_QWORD *)&v25 + 1) = WebCore::IDBGetResult::IDBGetResult(v16, a3);
  }
  v17 = *(_QWORD *)(v14 + 8);
  if (v17)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v17 + 160))(v17, v18);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v18);
}

uint64_t WebCore::startObservingCookieChanges(WebCore::NetworkStorageSession *a1, uint64_t *a2)
{
  WebCore::CookieStorageObserver *v3;

  v3 = WebCore::NetworkStorageSession::cookieStorageObserver(a1);
  return WebCore::CookieStorageObserver::startObserving((uint64_t)v3, a2);
}

void WebCore::stopObservingCookieChanges(WebCore *this, WebCore::NetworkStorageSession *a2)
{
  WebCore::CookieStorageObserver *v2;

  v2 = WebCore::NetworkStorageSession::cookieStorageObserver(this);
  WebCore::CookieStorageObserver::stopObserving(v2);
}

NSURLCredential *WebCore::CredentialStorage::getFromPersistentStorage@<X0>(WebCore::CredentialStorage *this@<X0>, uint64_t a2@<X8>)
{
  NSURLCredential *result;
  _DWORD *v5;

  result = (NSURLCredential *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C92C68], "sharedCredentialStorage"), "defaultCredentialForProtectionSpace:", WebCore::ProtectionSpace::nsSpace(this));
  if (result)
    return (NSURLCredential *)WebCore::Credential::Credential((WebCore::Credential *)a2, result);
  v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v5 += 4;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void WebCore::setHTTPBody(void *a1, uint64_t *a2)
{
  WebCore::setHTTPBody(objc_msgSend(a1, "_CFURLRequest"), a2);
}

void WebCore::createHTTPBodyNSInputStream(uint64_t *a1@<X0>, CFTypeRef *a2@<X8>)
{
  CFTypeRef v3;
  CFTypeRef cf;

  WebCore::createHTTPBodyCFReadStream(*a1, (uint64_t *)&cf);
  v3 = cf;
  *a2 = cf;
  if (v3)
  {
    CFRetain(v3);
    CFRelease(v3);
  }
}

void sub_19540506C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1954051A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  _Unwind_Resume(exception_object);
}

void *WebCore::ResourceError::mapPlatformError(WebCore::ResourceError *this)
{
  void *result;
  void *v3;
  uint64_t v4;
  char v5;
  char v6;

  result = (void *)*((_QWORD *)this + 8);
  if (result)
  {
    v3 = (void *)objc_msgSend(result, "domain");
    v4 = objc_msgSend(*((id *)this + 8), "code");
    if ((objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0CB32E8]) & 1) != 0
      || objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0C930A8]))
    {
      if (v4 == -999)
        v5 = 3;
      else
        v5 = 1;
      if (v4 == -1001)
        v6 = 4;
      else
        v6 = v5;
    }
    else
    {
      v6 = 1;
    }
    return (void *)WebCore::ResourceErrorBase::setType((uint64_t)this, v6);
  }
  return result;
}

void WebCore::ResourceErrorBase::~ResourceErrorBase(WebCore::ResourceErrorBase *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t WebCore::ResourceError::fromIPCData@<X0>(uint64_t a1@<X0>, WebCore::ResourceError *a2@<X8>)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 24))
    return WebCore::ResourceError::ResourceError((uint64_t)a2);
  result = (uint64_t)WebCore::ResourceError::ResourceError(a2, *(NSError **)(a1 + 8));
  if (*(_BYTE *)(a1 + 24)
    && (result = WebCore::ResourceErrorBase::setType((uint64_t)a2, *(_BYTE *)a1), *(_BYTE *)(a1 + 24)))
  {
    if (*(_BYTE *)(a1 + 16))
      *((_BYTE *)a2 + 61) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_195405388(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceError *v2;

  WebCore::ResourceError::~ResourceError(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ResourceError::ResourceError(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return a1;
}

void sub_1954053E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *v2;
  *v2 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_BYTE *WebCore::ResourceError::ipcData@<X0>(_BYTE *this@<X0>, uint64_t a2@<X8>)
{
  char v3;
  _BYTE *v4;
  _BYTE *v5;
  char v6;
  char v7;

  v3 = this[60];
  if (v3)
  {
    v4 = this;
    this = (_BYTE *)WebCore::ResourceError::nsError((WebCore::ResourceError *)this);
    v5 = this;
    if (this)
      this = CFRetain(this);
    v6 = v4[61];
    *(_BYTE *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 24) = v7;
  return this;
}

void *WebCore::ResourceError::getNSURLErrorDomain(WebCore::ResourceError *this)
{
  if ((_MergedGlobals_138 & 1) == 0)
  {
    MEMORY[0x19AEA5508](&unk_1ECE81F40, *MEMORY[0x1E0CB32E8]);
    _MergedGlobals_138 = 1;
  }
  return &unk_1ECE81F40;
}

void *WebCore::ResourceError::getCFErrorDomainCFNetwork(WebCore::ResourceError *this)
{
  if ((byte_1ECE81F39 & 1) == 0)
  {
    MEMORY[0x19AEA5508](&unk_1ECE81F48, *MEMORY[0x1E0C930A8]);
    byte_1ECE81F39 = 1;
  }
  return &unk_1ECE81F48;
}

void WebCore::ResourceError::errorRecoveryMethod(WebCore::ResourceError *this)
{
  __CFString *v2;
  int v3;
  BOOL v4;
  unsigned int v5;
  __CFString *v7;
  WTF::URL *v8;
  WebCore::ResourceError *v9;

  WebCore::ResourceError::platformLazyInit(this);
  if (*(_QWORD *)this)
    v2 = (__CFString *)WTF::StringImpl::operator NSString *();
  else
    v2 = &stru_1E3487BC0;
  if (-[__CFString isEqualToString:](v2, "isEqualToString:", *MEMORY[0x1E0CB32E8]))
  {
    v3 = *((_DWORD *)this + 14);
    v4 = (v3 + 1017) > 0x10 || ((1 << (v3 - 7)) & 0x176CF) == 0;
    v5 = v3 + 1206;
    if (!v4 || v5 < 7)
    {
LABEL_17:
      v8 = (WebCore::ResourceError *)((char *)this + 8);
      if (WTF::URL::protocolIs() && (WTF::URL::port(v8) & 0xFF0000) != 0)
      {
        if ((WTF::URL::port(v8) & 0xFF0000) != 0)
        {
          WTF::URL::protocol(v8);
          WTF::isDefaultPortForProtocol();
        }
        else
        {
          v9 = (WebCore::ResourceError *)std::__throw_bad_optional_access[abi:sn180100]();
          WebCore::ResourceError::platformLazyInit(v9);
        }
      }
    }
  }
  else
  {
    if (*(_QWORD *)this)
      v7 = (__CFString *)WTF::StringImpl::operator NSString *();
    else
      v7 = &stru_1E3487BC0;
    if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("WebKitErrorDomain"))
      && *((_DWORD *)this + 14) == 304)
    {
      goto LABEL_17;
    }
  }
}

void WebCore::ResourceError::platformLazyInit(WebCore::ResourceError *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  void *v6;
  void *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20[5];

  if (!*((_BYTE *)this + 72))
  {
    MEMORY[0x19AEA5508](v20, objc_msgSend(*((id *)this + 8), "domain"));
    v3 = v20[0];
    v20[0] = 0;
    v4 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = v3;
    if (!v4)
      goto LABEL_5;
    v5 = *(_DWORD *)v4 - 2;
    if (*(_DWORD *)v4 != 2)
      goto LABEL_4;
    WTF::StringImpl::destroy(v4, v2);
    v4 = v20[0];
    v20[0] = 0;
    if (v4)
    {
      v5 = *(_DWORD *)v4 - 2;
      if (*(_DWORD *)v4 != 2)
      {
LABEL_4:
        *(_DWORD *)v4 = v5;
        goto LABEL_5;
      }
      WTF::StringImpl::destroy(v4, v16);
    }
LABEL_5:
    *((_DWORD *)this + 14) = objc_msgSend(*((id *)this + 8), "code");
    v6 = (void *)objc_msgSend(*((id *)this + 8), "userInfo");
    v7 = v6;
    if (v6)
      CFRetain(v6);
    v8 = objc_msgSend(v7, "valueForKey:", CFSTR("NSErrorFailingURLStringKey"));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & (v8 != 0)) == 1)
    {
      MEMORY[0x19AEA5508](&v19, v8);
      MEMORY[0x19AEA52D4](v20, &v19, 0);
      WTF::URL::operator=((uint64_t)this + 8, (uint64_t *)v20);
      v10 = v20[0];
      v20[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v19;
      v19 = 0;
      if (v11)
        goto LABEL_12;
    }
    else
    {
      v18 = objc_msgSend(v7, "valueForKey:", CFSTR("NSErrorFailingURLKey"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & (v18 != 0)) == 1)
      {
        MEMORY[0x19AEA52E0](v20, v18);
        WTF::URL::operator=((uint64_t)this + 8, (uint64_t *)v20);
        v11 = v20[0];
        v20[0] = 0;
        if (v11)
        {
LABEL_12:
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v9);
          else
            *(_DWORD *)v11 -= 2;
        }
      }
    }
    WTF::String::operator=((uint64_t *)this + 6, (WTF::StringImpl **)this + 1);
    MEMORY[0x19AEA5508](v20, objc_msgSend(*((id *)this + 8), "_web_localizedDescription"));
    v13 = v20[0];
    v20[0] = 0;
    v14 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v13;
    if (!v14)
      goto LABEL_17;
    v15 = *(_DWORD *)v14 - 2;
    if (*(_DWORD *)v14 != 2)
      goto LABEL_16;
    WTF::StringImpl::destroy(v14, v12);
    v14 = v20[0];
    v20[0] = 0;
    if (v14)
    {
      v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 != 2)
      {
LABEL_16:
        *(_DWORD *)v14 = v15;
        goto LABEL_17;
      }
      WTF::StringImpl::destroy(v14, v17);
    }
LABEL_17:
    *((_BYTE *)this + 72) = 1;
    if (v7)
      CFRelease(v7);
  }
}

void sub_1954058D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebCore::createNSErrorFromResourceErrorBase(WebCore *this, const WebCore::ResourceErrorBase *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  const __CFString *v8;
  const __CFString *v9;
  __CFString *v10;
  uint64_t v11;

  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  WebCore::ResourceError::platformLazyInit(a2);
  v5 = *((_QWORD *)a2 + 6);
  if (v5 && *(_DWORD *)(v5 + 4))
  {
    WebCore::ResourceError::platformLazyInit(a2);
    if (*((_QWORD *)a2 + 6))
      v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v9 = &stru_1E3487BC0;
    objc_msgSend(v4, "setValue:forKey:", v9, *MEMORY[0x1E0CB2D50]);
  }
  WebCore::ResourceError::platformLazyInit(a2);
  v6 = *((_QWORD *)a2 + 1);
  if (v6 && *(_DWORD *)(v6 + 4))
  {
    WebCore::ResourceError::platformLazyInit(a2);
    v10 = *((_QWORD *)a2 + 1) ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E3487BC0;
    objc_msgSend(v4, "setValue:forKey:", v10, CFSTR("NSErrorFailingURLStringKey"));
    WebCore::ResourceError::platformLazyInit(a2);
    v11 = WTF::URL::operator NSURL *();
    if (v11)
      objc_msgSend(v4, "setValue:forKey:", v11, CFSTR("NSErrorFailingURLKey"));
  }
  v7 = objc_alloc(MEMORY[0x1E0CB35C8]);
  WebCore::ResourceError::platformLazyInit(a2);
  if (*(_QWORD *)a2)
    v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v8 = &stru_1E3487BC0;
  WebCore::ResourceError::platformLazyInit(a2);
  *(_QWORD *)this = objc_msgSend(v7, "initWithDomain:code:userInfo:", v8, *((int *)a2 + 14), v4);
  if (v4)
    CFRelease(v4);
}

void sub_195405B10(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ResourceError::blockedKnownTracker(WebCore::ResourceError *this)
{
  void *v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend((id)objc_msgSend((id)WebCore::ResourceError::nsError(this), "userInfo"), "objectForKeyedSubscript:", CFSTR("_NSURLErrorBlockedTrackerFailureKey"));
  if (v2)
    return objc_msgSend(v2, "BOOLValue");
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v4 = (void *)objc_msgSend((id)WebCore::ResourceError::nsError(this), "underlyingErrors", 0);
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v9;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v4);
        if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v7), "userInfo"), "objectForKeyedSubscript:", CFSTR("_NSURLErrorBlockedTrackerFailureKey")), "BOOLValue") & 1) != 0)return 1;
        ++v7;
      }
      while (v5 != v7);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v5 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

void WebCore::ResourceError::blockedTrackerHostName(WebCore::ResourceError *this@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v4;
  nw_endpoint_t v5;
  const char *known_tracker_name;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  NSObject *v11;
  nw_endpoint_t v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend((id)objc_msgSend((id)WebCore::ResourceError::nsError(this), "userInfo"), "objectForKeyedSubscript:", CFSTR("_NSURLErrorNWPathKey"));
  if (v4)
  {
    v5 = nw_path_copy_effective_remote_endpoint(v4);
    known_tracker_name = (const char *)nw_endpoint_get_known_tracker_name();
    if (known_tracker_name)
    {
      strlen(known_tracker_name);
      WTF::String::fromUTF8();
      if (!v5)
        return;
    }
    else
    {
      *a2 = 0;
      if (!v5)
        return;
    }
    CFRelease(v5);
    return;
  }
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v7 = (void *)objc_msgSend((id)WebCore::ResourceError::nsError(this), "underlyingErrors", 0);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(v7);
        v11 = objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * i), "userInfo"), "objectForKeyedSubscript:", CFSTR("_NSURLErrorNWPathKey"));
        if (v11)
        {
          v12 = nw_path_copy_effective_remote_endpoint(v11);
          v13 = (const char *)nw_endpoint_get_known_tracker_name();
          if (v13)
          {
            strlen(v13);
            WTF::String::fromUTF8();
            if (v12)
              CFRelease(v12);
            return;
          }
          if (v12)
            CFRelease(v12);
        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v8)
        continue;
      break;
    }
  }
  *a2 = 0;
}

void sub_195405E7C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::ResourceHandleInternal::~ResourceHandleInternal(WebCore::ResourceHandleInternal *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  const void *v8;
  const void *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  void *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  char v34;

  v3 = *((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v29 = *(WTF::StringImpl **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, a2);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = *(WTF::StringImpl **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, a2);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = *(unsigned int *)(v3 + 32);
      if ((_DWORD)v31 != -1)
        ((void (*)(char *, uint64_t))off_1E335B4E0[v31])(&v34, v3 + 8);
      *(_DWORD *)(v3 + 32) = -1;
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this + 120) = off_1E31F7378;
  v6 = *((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WebCore::TimerBase::~TimerBase((WebCore::ResourceHandleInternal *)((char *)this + 960));
  v8 = (const void *)*((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v9)
    CFRelease(v9);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::ResourceHandleInternal *)((char *)this + 528), v7);
  v11 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v32 = *(_DWORD **)(v11 + 128);
      *(_QWORD *)(v11 + 128) = 0;
      if (v32)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v32, v10);
      v33 = *(WTF::StringImpl **)(v11 + 96);
      *(_QWORD *)(v11 + 96) = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v10);
        else
          *(_DWORD *)v33 -= 2;
      }
      WTF::fastFree((WTF *)v11, v10);
    }
  }
  v14 = (const void *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v14)
    CFRelease(v14);
  v15 = (const void *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v15)
    CFRelease(v15);
  v16 = (const void *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v16)
    CFRelease(v16);
  v17 = (const void *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v17)
    CFRelease(v17);
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v10);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v10);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v10);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v10);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v10);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v10);
    else
      *(_DWORD *)v23 -= 2;
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceHandleInternal *)((char *)this + 216), v10);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceHandleInternal *)((char *)this + 16), v24);
  v25 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
    }
  }
}

void WebCore::ResourceHandle::~ResourceHandle(WebCore::ResourceHandle *this)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  WTF::StringImpl *v5;
  WebCore::ResourceHandleInternal *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = &off_1E335B588;
  v2 = *(void **)(*((_QWORD *)this + 2) + 488);
  if (v2)
  {
    objc_msgSend(v2, "detachHandle");
    v3 = *((_QWORD *)this + 2);
    v4 = *(const void **)(v3 + 488);
    *(_QWORD *)(v3 + 488) = 0;
    if (v4)
      CFRelease(v4);
  }
  WebCore::AuthenticationChallenge::setAuthenticationClient((WebCore::AuthenticationChallenge *)(*((_QWORD *)this + 2) + 528), 0);
  v6 = (WebCore::ResourceHandleInternal *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    WebCore::ResourceHandleInternal::~ResourceHandleInternal(v6, v5);
    WTF::fastFree(v7, v8);
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::ResourceHandle::~ResourceHandle(this);
  WTF::fastFree(v1, v2);
}

void sub_195406224(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WebCore::ResourceHandleInternal *v4;
  WTF *v5;
  void *v6;

  v4 = *(WebCore::ResourceHandleInternal **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v4)
  {
    WebCore::ResourceHandleInternal::~ResourceHandleInternal(v4, a2);
    WTF::fastFree(v5, v6);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::ResourceHandle::createNSURLConnection(uint64_t a1, uint64_t a2, int a3, char a4, int a5, void *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD **v16;
  _DWORD *v17;
  __int128 v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  __int128 v24;
  _BYTE *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::CredentialStorage *v31;
  uint64_t v32;
  const WTF::URL *v33;
  uint64_t DefaultProtectionSpaceForURL;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  CFTypeRef v42;
  const void *v43;
  CFTypeRef v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  WebCore::CredentialStorage *v50;
  const WTF::URL *v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  CFTypeRef v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WebCore::CredentialBase *v57;
  uint64_t v58;
  char v59;
  const void *v60;
  CFTypeRef v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  CFTypeRef v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  const void *v74;
  CFTypeRef v75;
  uint64_t v76;
  unsigned __int16 *v77;
  int v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl **v82;
  uint64_t v83;
  char v84;
  _BOOL4 isIBooks;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  char v89;
  CFTypeRef cf;
  CFTypeRef v91;
  WTF::StringImpl *v92[2];
  CFTypeRef v93[2];

  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(v12 + 432);
  if (v13 && *(_DWORD *)(v13 + 4) || (v14 = *(_QWORD *)(v12 + 440)) != 0 && *(_DWORD *)(v14 + 4))
  {
    if ((*(_BYTE *)(v12 + 200) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v12 + 16));
      *(_BYTE *)(v12 + 200) |= 1u;
    }
    if ((*(_BYTE *)(v12 + 24) & 2) == 0)
    {
      v15 = *(_QWORD *)(a1 + 16);
      v16 = (_DWORD **)(v15 + 16);
      if ((*(_BYTE *)(v15 + 200) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v15 + 16));
        *(_BYTE *)(v15 + 200) |= 1u;
      }
      v17 = *v16;
      if (*v16)
        *v17 += 2;
      v91 = v17;
      v18 = *(_OWORD *)(v15 + 40);
      *(_OWORD *)v92 = *(_OWORD *)(v15 + 24);
      *(_OWORD *)v93 = v18;
      WTF::URL::setUser();
      WTF::URL::setPassword();
      v20 = *(_QWORD *)(a1 + 16);
      v21 = (WTF::StringImpl **)(v20 + 16);
      if ((*(_BYTE *)(v20 + 200) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v20 + 16));
        *(_BYTE *)(v20 + 200) |= 1u;
      }
      v22 = (WTF::StringImpl *)v91;
      if (v91)
        *(_DWORD *)v91 += 2;
      v23 = *v21;
      *v21 = v22;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
        {
          WTF::StringImpl::destroy(v23, v19);
          v22 = (WTF::StringImpl *)v91;
        }
        else
        {
          *(_DWORD *)v23 -= 2;
        }
      }
      v24 = *(_OWORD *)v93;
      *(_OWORD *)(v20 + 24) = *(_OWORD *)v92;
      *(_OWORD *)(v20 + 40) = v24;
      *(_BYTE *)(v20 + 164) &= ~0x20u;
      *(_BYTE *)(v20 + 200) &= ~2u;
      v91 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::destroy(v22, v19);
          if (!a3)
            goto LABEL_74;
          goto LABEL_24;
        }
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  if (!a3)
    goto LABEL_74;
LABEL_24:
  v25 = *(_BYTE **)(a1 + 16);
  if ((v25[200] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v25 + 16));
    v25[200] |= 1u;
  }
  if ((v25[24] & 2) != 0)
  {
    v26 = *(_QWORD **)(a1 + 16);
    v27 = v26[54];
    if (v27 && *(_DWORD *)(v27 + 4) || (v28 = v26[55]) != 0 && *(_DWORD *)(v28 + 4))
    {
      v47 = (**(uint64_t (***)(_QWORD))*v26)(*v26);
      if (v47)
      {
        v48 = *(_QWORD *)(a1 + 16);
        v49 = *(_DWORD **)(v48 + 432);
        if (v49 && v49[1] || (v49 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
          *v49 += 2;
        v50 = (WebCore::CredentialStorage *)(v47 + 96);
        v51 = (const WTF::URL *)(v48 + 16);
        v52 = (WTF::StringImpl **)(v48 + 176);
        v91 = v49;
        v53 = *(WTF::StringImpl **)(v48 + 440);
        if (v53 && *((_DWORD *)v53 + 1) || (v53 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
          *(_DWORD *)v53 += 2;
        v92[0] = v53;
        LOBYTE(v92[1]) = 0;
        v93[0] = 0;
        if ((*(_BYTE *)(v48 + 200) & 1) == 0)
        {
          v82 = (WTF::StringImpl **)(v48 + 176);
          v83 = v48;
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v48 + 16));
          v52 = v82;
          *(_BYTE *)(v83 + 200) |= 1u;
        }
        WebCore::CredentialStorage::set(v50, v52, (const WebCore::Credential *)&v91, v51);
        v54 = v93[0];
        v93[0] = 0;
        if (v54)
          CFRelease(v54);
        v55 = v92[0];
        v92[0] = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v35);
          else
            *(_DWORD *)v55 -= 2;
        }
        v46 = (WTF::StringImpl *)v91;
        v91 = 0;
        if (v46)
        {
LABEL_72:
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v35);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v29 = (**(uint64_t (***)(_QWORD))*v26)(*v26);
      if (v29)
      {
        v30 = v29;
        v31 = (WebCore::CredentialStorage *)(v29 + 96);
        v32 = *(_QWORD *)(a1 + 16);
        v33 = (const WTF::URL *)(v32 + 16);
        if ((*(_BYTE *)(v32 + 200) & 1) == 0)
        {
          v86 = v32 + 16;
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v32 + 16));
          v33 = (const WTF::URL *)(v32 + 16);
          *(_BYTE *)(v32 + 200) |= 1u;
        }
        DefaultProtectionSpaceForURL = WebCore::CredentialStorage::findDefaultProtectionSpaceForURL(v31, v33);
        v36 = *(_QWORD *)(v30 + 128);
        if (v36)
          v36 += 40 * *(unsigned int *)(v36 - 4);
        if (v36 == DefaultProtectionSpaceForURL)
        {
          v37 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
            *(_DWORD *)v37 += 4;
          v88 = v37;
          v89 = 0;
          cf = 0;
        }
        else
        {
          std::make_pair[abi:sn180100]<WTF::String const&,WebCore::ProtectionSpace &>((_DWORD **)(v32 + 176), DefaultProtectionSpaceForURL + 8, (uint64_t)&v91);
          WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>>,std::pair<WTF::String,WebCore::ProtectionSpace>>((uint64_t)v31, (const WTF::StringImpl **)&v91, (uint64_t)&v87);
          std::pair<WTF::String,WebCore::ProtectionSpace>::~pair((uint64_t)&v91, v81);
          v37 = v87;
        }
        v38 = *(_QWORD *)(a1 + 16);
        v87 = 0;
        v39 = *(WTF::StringImpl **)(v38 + 448);
        *(_QWORD *)(v38 + 448) = v37;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v35);
          else
            *(_DWORD *)v39 -= 2;
        }
        v40 = v88;
        v88 = 0;
        v41 = *(WTF::StringImpl **)(v38 + 456);
        *(_QWORD *)(v38 + 456) = v40;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v35);
          else
            *(_DWORD *)v41 -= 2;
        }
        *(_BYTE *)(v38 + 464) = v89;
        v42 = cf;
        cf = 0;
        v43 = *(const void **)(v38 + 472);
        *(_QWORD *)(v38 + 472) = v42;
        if (v43)
        {
          CFRelease(v43);
          v44 = cf;
          cf = 0;
          if (v44)
            CFRelease(v44);
        }
        v45 = v88;
        v88 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v35);
          else
            *(_DWORD *)v45 -= 2;
        }
        v46 = v87;
        v87 = 0;
        if (v46)
          goto LABEL_72;
      }
    }
  }
LABEL_74:
  v56 = *(_QWORD *)(a1 + 16);
  v57 = (WebCore::CredentialBase *)(v56 + 448);
  if (*(_QWORD *)(v56 + 472)
    || *(_QWORD *)v57 && *(_DWORD *)(*(_QWORD *)v57 + 4)
    || (v58 = *(_QWORD *)(v56 + 456)) != 0 && *(_DWORD *)(v58 + 4))
  {
    v76 = *(unsigned int *)(v56 + 124);
    if ((_DWORD)v76)
    {
      v77 = *(unsigned __int16 **)(v56 + 112);
      while (1)
      {
        v78 = *v77;
        v77 += 8;
        if (v78 == 14)
          break;
        if (!--v76)
          goto LABEL_124;
      }
    }
    else
    {
LABEL_124:
      WebCore::CredentialBase::serializationForBasicAuthorizationHeader(v57, &v91);
      if ((*(_BYTE *)(v56 + 200) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v56 + 16));
        *(_BYTE *)(v56 + 200) |= 1u;
      }
      WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(v56 + 112), (WTF::StringImpl *)0xE, (WTF::StringImpl **)&v91);
      *(_BYTE *)(v56 + 200) &= ~2u;
      v80 = (WTF::StringImpl *)v91;
      v91 = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
          WTF::StringImpl::destroy(v80, v79);
        else
          *(_DWORD *)v80 -= 2;
      }
      v56 = *(_QWORD *)(a1 + 16);
    }
  }
  v59 = *(_BYTE *)(v56 + 200);
  if ((v59 & 2) == 0)
  {
    WebCore::ResourceRequest::doUpdatePlatformRequest((WebCore::ResourceRequest *)(v56 + 16));
    v59 = *(_BYTE *)(v56 + 200) | 2;
    *(_BYTE *)(v56 + 200) = v59;
  }
  if ((v59 & 8) == 0)
  {
    WebCore::ResourceRequest::doUpdatePlatformHTTPBody((WebCore::ResourceRequest *)(v56 + 16));
    *(_BYTE *)(v56 + 200) |= 8u;
  }
  v60 = *(const void **)(v56 + 208);
  if (v60)
    CFRetain(*(CFTypeRef *)(v56 + 208));
  v61 = (id)CFMakeCollectable(v60);
  v62 = (void *)v61;
  if (v61)
    CFRetain(v61);
  v63 = v62;
  if ((a4 & 1) == 0)
  {
    v64 = (void *)objc_msgSend(v62, "mutableCopy");
    objc_msgSend(v64, "_setProperty:forKey:", MEMORY[0x1E0C9AAA0], *MEMORY[0x1E0C93088]);
    v63 = (id)CFMakeCollectable(v64);
  }
  if (v63)
    CFRetain(v63);
  if (v62)
    CFRelease(v62);
  v65 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 496);
  if (v65)
  {
    WebCore::copyRequestWithStorageSession(v65, v63, &v91);
    v66 = (void *)v91;
    v91 = 0;
    if (v63)
    {
      CFRelease(v63);
      v67 = v91;
      v91 = 0;
      if (v67)
        CFRelease(v67);
    }
  }
  else
  {
    v66 = v63;
  }
  v68 = (void *)objc_msgSend(a6, "objectForKey:", CFSTR("kCFURLConnectionSocketStreamProperties"), v86, v87, v88);
  if (v68)
  {
    v69 = (void *)objc_msgSend(v68, "mutableCopy");
  }
  else
  {
    v70 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v69 = v70;
    if (v70)
      CFRetain(v70);
  }
  if ((a3 & 1) == 0)
    objc_msgSend(v69, "setObject:forKey:", CFSTR("WebKitPrivateSession"), CFSTR("_kCFURLConnectionSessionID"));
  if (a5 == 1)
    objc_msgSend(v69, "setObject:forKey:", &unk_1E349D858, CFSTR("_WebKitSynchronousRequest"));
  (*(void (**)(CFTypeRef *__return_ptr))(***(_QWORD ***)(a1 + 16) + 56))(&v91);
  if (v91)
    objc_msgSend(v69, "setObject:forKey:", v91, CFSTR("kCFStreamPropertySourceApplication"));
  v71 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", a6);
  objc_msgSend(v71, "setObject:forKey:", v69, CFSTR("kCFURLConnectionSocketStreamProperties"));
  if (byte_1ECE81F3B == 1)
  {
    if (byte_1ECE81F3A)
      goto LABEL_110;
    goto LABEL_109;
  }
  v84 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("WebKitDisableSynchronousWillSendRequestPreferenceKey"));
  isIBooks = 1;
  if ((v84 & 1) == 0)
    isIBooks = WebCore::CocoaApplication::isIBooks((WebCore::CocoaApplication *)1);
  byte_1ECE81F3A = isIBooks;
  byte_1ECE81F3B = 1;
  if (!isIBooks)
  {
LABEL_109:
    objc_msgSend(v66, "_CFURLRequest");
    CFURLRequestSetShouldStartSynchronously();
  }
LABEL_110:
  objc_msgSend(v71, "setObject:forKey:", &unk_1E349D8D0, CFSTR("kCFURLConnectionURLConnectionProperties"));
  objc_msgSend(v71, "setObject:forKey:", &unk_1E349D8F8, CFSTR("_kCFURLConnectionPropertyATSFrameworkOverrides"));
  v72 = objc_msgSend(objc_alloc(MEMORY[0x1E0C92C58]), "_initWithRequest:delegate:usesCache:maxContentLength:startImmediately:connectionProperties:", v66, a2, 0, 0, 0, v71);
  v73 = *(_QWORD *)(a1 + 16);
  v74 = *(const void **)(v73 + 480);
  *(_QWORD *)(v73 + 480) = v72;
  if (v74)
    CFRelease(v74);
  v75 = v91;
  v91 = 0;
  if (v75)
    CFRelease(v75);
  if (v69)
    CFRelease(v69);
  if (v66)
    CFRelease(v66);
}

void sub_195406B10(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ResourceHandle::start(WebCore::ResourceHandle *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  WebCoreResourceHandleAsOperationQueueDelegate *v11;
  uint64_t v12;
  const void *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  void *v18;
  CFTypeRef v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  WebCoreResourceHandleWithCredentialStorageAsOperationQueueDelegate *v29;
  uint64_t v30;
  void *v31;
  WTF *v32;
  CFTypeRef cf;
  uint64_t v35;

  v2 = **((_QWORD **)this + 2);
  if (!v2 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2) & 1) == 0)
    return 0;
  v3 = (****((uint64_t (*****)(_QWORD))this + 2))(**((_QWORD **)this + 2));
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 24);
    v5 = *((_QWORD *)this + 2);
    if (v4)
      CFRetain(*(CFTypeRef *)(v3 + 24));
    v6 = *(const void **)(v5 + 496);
    *(_QWORD *)(v5 + 496) = v4;
    if (v6)
      CFRelease(v6);
  }
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v7)
  {
    v8 = (*(uint64_t (**)(uint64_t, WebCore::ResourceHandle *))(*(_QWORD *)v7 + 112))(v7, this);
    v9 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    if (v9)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
    else
      v10 = 0;
    v35 = 0;
    if (!v8)
    {
      v29 = -[WebCoreResourceHandleAsOperationQueueDelegate initWithHandle:messageQueue:]([WebCoreResourceHandleWithCredentialStorageAsOperationQueueDelegate alloc], "initWithHandle:messageQueue:", this, &v35);
      v14 = 0;
      v30 = *((_QWORD *)this + 2);
      v13 = *(const void **)(v30 + 488);
      *(_QWORD *)(v30 + 488) = v29;
      if (!v13)
        goto LABEL_15;
      goto LABEL_29;
    }
  }
  else
  {
    v10 = 0;
    v35 = 0;
  }
  v11 = -[WebCoreResourceHandleAsOperationQueueDelegate initWithHandle:messageQueue:]([WebCoreResourceHandleAsOperationQueueDelegate alloc], "initWithHandle:messageQueue:", this, &v35);
  v12 = *((_QWORD *)this + 2);
  v13 = *(const void **)(v12 + 488);
  *(_QWORD *)(v12 + 488) = v11;
  v14 = 1;
  if (!v13)
    goto LABEL_15;
LABEL_29:
  CFRelease(v13);
LABEL_15:
  v15 = (_QWORD *)*((_QWORD *)this + 2);
  v16 = v15[61];
  if (*((_BYTE *)v15 + 1038))
  {
    v17 = 1;
  }
  else
  {
    v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v15 + 40))(*v15);
    v15 = (_QWORD *)*((_QWORD *)this + 2);
  }
  (*(void (**)(CFTypeRef *__return_ptr, _QWORD, WebCore::ResourceHandle *))(*(_QWORD *)v15[1] + 136))(&cf, v15[1], this);
  WebCore::ResourceHandle::createNSURLConnection((uint64_t)this, v16, v14, v17, v10, (void *)cf);
  v19 = cf;
  cf = 0;
  if (v19)
    CFRelease(v19);
  v20 = v35;
  v35 = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::destroyAll((unint64_t *)(v20 + 16), v18);
      v32 = *(WTF **)(v20 + 32);
      if (v32)
      {
        *(_QWORD *)(v20 + 32) = 0;
        *(_DWORD *)(v20 + 40) = 0;
        WTF::fastFree(v32, v31);
      }
      WTF::fastFree((WTF *)v20, v31);
    }
  }
  v23 = *(void **)(*((_QWORD *)this + 2) + 480);
  if (byte_1ECE81F3C == 1)
  {
    v24 = (id)qword_1ECE81F50;
  }
  else
  {
    v24 = objc_alloc_init(MEMORY[0x1E0CB3828]);
    objc_msgSend(v24, "setMaxConcurrentOperationCount:", -1, cf, v35);
    qword_1ECE81F50 = (uint64_t)v24;
    byte_1ECE81F3C = 1;
  }
  objc_msgSend(v23, "setDelegateQueue:", v24, cf);
  WTF::MonotonicTime::now((WTF::MonotonicTime *)objc_msgSend(*(id *)(*((_QWORD *)this + 2) + 480), "start"));
  *(_QWORD *)(*((_QWORD *)this + 2) + 520) = v25;
  v26 = *((_QWORD *)this + 2);
  v27 = *(void **)(v26 + 480);
  if (!v27)
    return 0;
  v28 = 1;
  if (*(_BYTE *)(v26 + 1037))
    objc_msgSend(v27, "setDefersCallbacks:", 1);
  return v28;
}

void sub_195406FA0()
{
  objc_end_catch();
  JUMPOUT(0x195406EB8);
}

uint64_t WebCore::ResourceHandle::connection(WebCore::ResourceHandle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 480);
}

uint64_t WebCore::ResourceHandle::cancel(WebCore::ResourceHandle *this)
{
  uint64_t v2;
  void *v3;

  v2 = *((_QWORD *)this + 2);
  v3 = *(void **)(v2 + 504);
  if (v3)
  {
    objc_msgSend((id)objc_msgSend(v3, "sender"), "cancelAuthenticationChallenge:", *(_QWORD *)(*((_QWORD *)this + 2) + 504));
    v2 = *((_QWORD *)this + 2);
  }
  return objc_msgSend(*(id *)(v2 + 480), "cancel");
}

const __CFString *WebCore::ResourceHandle::synchronousLoadRunLoopMode(WebCore::ResourceHandle *this)
{
  return CFSTR("WebCoreSynchronousLoaderRunLoopMode");
}

void WebCore::ResourceHandle::platformLoadResourceSynchronously(uint64_t a1, WebCore::ResourceRequest *a2, int a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  WTF::StringImpl *v26;
  CFTypeRef v27;
  const void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unsigned int *v32;
  unsigned int v33;
  WebCoreResourceHandleWithCredentialStorageAsOperationQueueDelegate *v34;
  WebCoreResourceHandleWithCredentialStorageAsOperationQueueDelegate *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void *v41;
  CFTypeRef v42;
  WTF::StringImpl *v43;
  unsigned int v44;
  unsigned int v45;
  void *v46;
  id v47;
  void *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  WTF **v59;
  WTF *v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v69;
  int v70;
  CFTypeRef v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  void *v78;
  WTF *v79;
  CFTypeRef v80;
  uint64_t v81;
  uint64_t *v82;
  CFTypeRef cf;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  CFTypeRef v87;
  char v88;
  void (**v89)(WebCore::SynchronousLoaderClient *__hidden);
  BOOL v90;
  _QWORD v91[5];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  char v97;
  char v98;
  __int16 v99;
  char v100;
  int64x2_t v101;
  int64x2_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int64x2_t v106;
  uint64_t v107;
  char v108;
  __int16 v109;
  char v110;
  CFTypeRef v111;
  char v112;
  __int128 v113;
  _OWORD v114[3];
  _QWORD v115[3];
  char v116;
  uint64_t v117;

  v89 = &off_1E341DC68;
  v91[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v91);
  v98 = 0;
  v99 = 0;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0;
  v101 = vdupq_n_s64(0x7FF8000000000000uLL);
  v102 = v101;
  v103 = 0;
  v104 = 0;
  v106 = v101;
  v105 = 0x8000000000000000;
  v107 = 0x7FF8000000000000;
  v108 &= 0xF0u;
  v109 &= 0xC000u;
  v110 = v110 & 0xF8 | 2;
  v111 = 0;
  v112 = 0;
  v100 = v100 & 0xC0 | 5;
  v113 = 0u;
  v114[0] = 0u;
  WTF::URL::invalidate((WTF::URL *)((char *)v114 + 8));
  *(_QWORD *)((char *)v115 + 6) = 0;
  v115[2] = 0;
  v115[0] = 0;
  v116 = 1;
  v14 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v14 = 1;
  *(_WORD *)(v14 + 8) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_BYTE *)(v14 + 48) = 0;
  v117 = v14;
  v90 = a3 == 1;
  v15 = WTF::fastMalloc((WTF *)0x18);
  v16 = v15;
  if (a4)
  {
    do
      v17 = __ldaxr(a4);
    while (__stlxr(v17 + 1, a4));
  }
  v84 = (WTF::StringImpl *)a4;
  WebCore::ResourceHandle::ResourceHandle(v15, a1, a2, (uint64_t)&v89, 0, 1, 0, (uint64_t *)&v84, 0);
  v19 = v84;
  v84 = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr((unsigned int *)v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v19));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v19);
      v75 = (WTF::StringImpl *)*((_QWORD *)v19 + 6);
      *((_QWORD *)v19 + 6) = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v18);
        else
          *(_DWORD *)v75 -= 2;
      }
      v76 = (WTF::StringImpl *)*((_QWORD *)v19 + 5);
      *((_QWORD *)v19 + 5) = 0;
      if (v76)
      {
        if (*(_DWORD *)v76 == 2)
          WTF::StringImpl::destroy(v76, v18);
        else
          *(_DWORD *)v76 -= 2;
      }
      v77 = *((unsigned int *)v19 + 8);
      if ((_DWORD)v77 != -1)
        ((void (*)(CFTypeRef *, char *))off_1E335B4E0[v77])(&cf, (char *)v19 + 8);
      *((_DWORD *)v19 + 8) = -1;
      WTF::fastFree(v19, v18);
    }
  }
  v22 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v23 = *(_QWORD *)(v22 + 24);
  v24 = *(_QWORD *)(v16 + 16);
  if (v23)
    CFRetain(*(CFTypeRef *)(v22 + 24));
  v25 = *(const void **)(v24 + 496);
  *(_QWORD *)(v24 + 496) = v23;
  if (v25)
    CFRelease(v25);
  if (*(_DWORD *)(*(_QWORD *)(v16 + 16) + 1032))
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)a1 + 64))(&v84, a1, a2);
    WebCore::ResourceErrorBase::operator=(a5, (uint64_t *)&v84);
    v27 = v87;
    v87 = 0;
    v28 = *(const void **)(a5 + 64);
    *(_QWORD *)(a5 + 64) = v27;
    if (v28)
    {
      CFRelease(v28);
      v80 = v87;
      *(_BYTE *)(a5 + 72) = v88;
      v87 = 0;
      if (v80)
        CFRelease(v80);
    }
    else
    {
      *(_BYTE *)(a5 + 72) = v88;
      v87 = 0;
    }
    v29 = v86;
    v86 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v26);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v85;
    v85 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v26);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = v84;
    v84 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v26);
      else
        *(_DWORD *)v31 -= 2;
    }
    goto LABEL_88;
  }
  v32 = (unsigned int *)v117;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 + 1, v32));
  v84 = (WTF::StringImpl *)v32;
  if (a3 == 1)
    v34 = -[WebCoreResourceHandleAsOperationQueueDelegate initWithHandle:messageQueue:]([WebCoreResourceHandleAsOperationQueueDelegate alloc], "initWithHandle:messageQueue:", v16, &v84);
  else
    v34 = -[WebCoreResourceHandleAsOperationQueueDelegate initWithHandle:messageQueue:]([WebCoreResourceHandleWithCredentialStorageAsOperationQueueDelegate alloc], "initWithHandle:messageQueue:", v16, &v84);
  v35 = v34;
  v36 = *(_QWORD *)(v16 + 16);
  v37 = *(const void **)(v36 + 488);
  *(_QWORD *)(v36 + 488) = v35;
  if (v37)
    CFRelease(v37);
  v38 = *(_QWORD *)(v16 + 16);
  v39 = *(_QWORD *)(v38 + 488);
  if (*(_BYTE *)(v38 + 1038))
  {
    v40 = 1;
  }
  else
  {
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v38 = *(_QWORD *)(v16 + 16);
  }
  (*(void (**)(CFTypeRef *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v38 + 8) + 136))(&cf, *(_QWORD *)(v38 + 8), v16);
  WebCore::ResourceHandle::createNSURLConnection(v16, v39, a3 == 1, v40, 1, (void *)cf);
  v42 = cf;
  cf = 0;
  if (v42)
    CFRelease(v42);
  v43 = v84;
  v84 = 0;
  if (v43)
  {
    do
    {
      v44 = __ldaxr((unsigned int *)v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, (unsigned int *)v43));
    if (!v45)
    {
      atomic_store(1u, (unsigned int *)v43);
      WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::destroyAll((unint64_t *)v43 + 2, v41);
      v79 = (WTF *)*((_QWORD *)v43 + 4);
      if (v79)
      {
        *((_QWORD *)v43 + 4) = 0;
        *((_DWORD *)v43 + 10) = 0;
        WTF::fastFree(v79, v78);
      }
      WTF::fastFree(v43, v78);
    }
  }
  v46 = *(void **)(*(_QWORD *)(v16 + 16) + 480);
  if (byte_1ECE81F3C == 1)
  {
    v47 = (id)qword_1ECE81F50;
  }
  else
  {
    v47 = objc_alloc_init(MEMORY[0x1E0CB3828]);
    objc_msgSend(v47, "setMaxConcurrentOperationCount:", -1);
    qword_1ECE81F50 = (uint64_t)v47;
    byte_1ECE81F3C = 1;
  }
  objc_msgSend(v46, "setDelegateQueue:", v47);
  objc_msgSend(*(id *)(*(_QWORD *)(v16 + 16) + 480), "start");
  v81 = a6;
  v82 = a7;
  do
  {
    while (1)
    {
      v49 = v117;
      v50 = (unsigned __int8 *)(v117 + 8);
      if (__ldaxr((unsigned __int8 *)(v117 + 8)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v50))
      {
        goto LABEL_44;
      }
      MEMORY[0x19AEA534C](v50);
LABEL_44:
      if (*(_BYTE *)(v49 + 48))
        goto LABEL_79;
      v53 = *(_QWORD *)(v49 + 16);
      v52 = *(_QWORD *)(v49 + 24);
      if (v53 == v52)
      {
        while (1)
        {
          v84 = (WTF::StringImpl *)0x7FF0000000000000;
          LODWORD(v85) = 1;
          v54 = WTF::Condition::waitUntilUnchecked<WTF::Lock>(v49 + 9, v50, (WTF::TimeWithDynamicClockType *)&v84);
          v55 = *(_BYTE *)(v49 + 48) ? 0 : v54;
          if ((v55 & 1) == 0)
            break;
          v53 = *(_QWORD *)(v49 + 16);
          if (v53 != *(_QWORD *)(v49 + 24))
          {
            v52 = *(_QWORD *)(v49 + 24);
            goto LABEL_52;
          }
        }
LABEL_79:
        v57 = 0;
        goto LABEL_59;
      }
LABEL_52:
      v56 = *(_QWORD *)(v49 + 32);
      v57 = *(WTF **)(v56 + 8 * v53);
      *(_QWORD *)(v56 + 8 * v53) = 0;
      if (v52 != v53)
      {
        v58 = *(_QWORD *)(v49 + 32);
        v59 = (WTF **)(v58 + 8 * v53);
        v60 = *v59;
        *v59 = 0;
        if (v60)
        {
          v61 = *(_QWORD *)v60;
          *(_QWORD *)v60 = 0;
          if (v61)
            (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
          WTF::fastFree(v60, v48);
        }
        v62 = *(_QWORD *)(v49 + 16);
        if (v62 > v53)
        {
          memmove((void *)(v58 + 8 * v53), (const void *)(v58 + 8 * v53 + 8), 8 * *(_QWORD *)(v49 + 24) - (8 * v53 + 8));
          *(_QWORD *)(v49 + 24) = (*(_QWORD *)(v49 + 24) + (unint64_t)*(unsigned int *)(v49 + 40) - 1)
                                % *(unsigned int *)(v49 + 40);
        }
        else
        {
          memmove((void *)(v58 + 8 * v62 + 8), (const void *)(v58 + 8 * v62), 8 * v53 - 8 * v62);
          *(_QWORD *)(v49 + 16) = (*(_QWORD *)(v49 + 16) + 1) % (unint64_t)*(unsigned int *)(v49 + 40);
        }
      }
LABEL_59:
      v63 = __ldxr(v50);
      if (v63 == 1)
      {
        if (!__stlxr(0, v50))
        {
          if (!v57)
            goto LABEL_68;
          goto LABEL_65;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v50);
      if (!v57)
        goto LABEL_68;
LABEL_65:
      (*(void (**)(_QWORD))(**(_QWORD **)v57 + 16))(*(_QWORD *)v57);
      v65 = *(_QWORD *)v57;
      *(_QWORD *)v57 = 0;
      if (v65)
        (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
      WTF::fastFree(v57, v64);
LABEL_68:
      v66 = v117;
      v67 = (unsigned __int8 *)(v117 + 8);
      if (__ldaxr((unsigned __int8 *)(v117 + 8)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v67))
      {
        goto LABEL_72;
      }
      MEMORY[0x19AEA534C](v67);
LABEL_72:
      v69 = *(unsigned __int8 *)(v66 + 48);
      v70 = __ldxr(v67);
      if (v70 != 1)
        break;
      if (__stlxr(0, v67))
        goto LABEL_77;
      if (v69)
        goto LABEL_81;
    }
    __clrex();
LABEL_77:
    WTF::Lock::unlockSlow((WTF::Lock *)v67);
  }
  while (!v69);
LABEL_81:
  WebCore::ResourceError::operator=(a5, (uint64_t)v114);
  objc_msgSend(*(id *)(*(_QWORD *)(v16 + 16) + 480), "cancel");
  v26 = (WTF::StringImpl *)v91;
  if (!*(_BYTE *)(a5 + 60))
  {
    WebCore::ResourceResponseBase::operator=(v81, (uint64_t)v91);
    v71 = v111;
    if (v111)
      CFRetain(v111);
    v72 = *(const void **)(v81 + 240);
    *(_QWORD *)(v81 + 240) = v71;
    if (v72)
      CFRelease(v72);
    *(_BYTE *)(v81 + 248) = v112;
  }
  v73 = *v82;
  *v82 = v113;
  *(_QWORD *)&v113 = v73;
  v74 = v82[1];
  v82[1] = *((_QWORD *)&v113 + 1);
  *((_QWORD *)&v113 + 1) = v74;
LABEL_88:
  if (*(_DWORD *)(v16 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
  else
    --*(_DWORD *)(v16 + 8);
  WebCore::SynchronousLoaderClient::~SynchronousLoaderClient((WebCore::SynchronousLoaderClient *)&v89, v26);
}

void sub_1954077C0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,CFTypeRef a23,uint64_t a24,char a25)
{
  _DWORD *v25;
  const void *v26;

  if (v26)
    CFRelease(v26);
  if (v25[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 48))(v25);
  else
    --v25[2];
  WebCore::SynchronousLoaderClient::~SynchronousLoaderClient((WebCore::SynchronousLoaderClient *)&a25, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebCore::ResourceHandle::willSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  void *v15;
  WebCore::FormData *v16;
  WebCore::FormData *v17;
  WebCore::FormData *v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  unint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  unint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  char v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  uint64_t v46;
  _DWORD *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  unint64_t v50;
  WTF::StringImpl **v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl **v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t DefaultProtectionSpaceForURL;
  uint64_t v64;
  WTF::StringImpl *v65;
  int v66;
  WTF::StringImpl *v67;
  int v68;
  char v69;
  const void *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  char v74;
  uint64_t v75;
  char v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  const void *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *result;
  uint64_t v85;
  int v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  bmalloc::api *v91;
  void *v92;
  WTF::StringImpl *v93;
  char v94;
  char v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  char v99;
  const void *v100;
  WTF::StringImpl *v101[5];

  v8 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(v8 + 400) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v8 + 216));
    v94 = *(_BYTE *)(v8 + 400) | 1;
    *(_BYTE *)(v8 + 400) = v94;
    if ((v94 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v8 + 216));
      *(_BYTE *)(v8 + 400) |= 1u;
    }
  }
  v9 = *(_QWORD *)(a1 + 16);
  v10 = v9 + 16;
  v11 = v9 + 216;
  if (*(_QWORD *)(v8 + 216))
    v12 = v11;
  else
    v12 = v10;
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  if (*(_WORD *)(a3 + 136) == 307)
  {
    v14 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 16) + 416);
    if (v14)
      *(_DWORD *)v14 += 2;
    v101[0] = v14;
    if ((*(_BYTE *)(a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      *(_BYTE *)(a2 + 184) |= 1u;
    }
    if ((WTF::equalIgnoringASCIICase(v14, *(const WTF::StringImpl **)(a2 + 88), v13) & 1) != 0)
      goto LABEL_63;
    WebCore::ResourceRequestBase::setHTTPMethod((WTF **)a2, v101);
    if ((*(_BYTE *)(v12 + 184) & 1) != 0)
    {
      if ((*(_BYTE *)(v12 + 184) & 4) != 0)
        goto LABEL_13;
    }
    else
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v12);
      v95 = *(_BYTE *)(v12 + 184) | 1;
      *(_BYTE *)(v12 + 184) = v95;
      if ((v95 & 4) != 0)
        goto LABEL_13;
    }
    WebCore::ResourceRequest::doUpdateResourceHTTPBody((WebCore::ResourceRequest *)v12);
    *(_BYTE *)(v12 + 184) |= 4u;
LABEL_13:
    v16 = *(WebCore::FormData **)(v12 + 168);
    if (v16)
      ++*(_DWORD *)v16;
    if (v101[0] && *((_DWORD *)v101[0] + 1) == 3)
    {
      v88 = *((_QWORD *)v101[0] + 1);
      if ((*((_BYTE *)v101[0] + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v88 & 0xDF) == 0x47 && (*(_BYTE *)(v88 + 1) & 0xDF) == 0x45)
        {
          v89 = *(unsigned __int8 *)(v88 + 2);
          goto LABEL_224;
        }
      }
      else if ((*(_WORD *)v88 & 0xFFDF) == 0x47 && (*(_WORD *)(v88 + 2) & 0xFFDF) == 0x45)
      {
        v89 = *(unsigned __int16 *)(v88 + 4);
LABEL_224:
        v90 = v89 & 0xFFFFFFDF;
        if (v90 == 84)
          v18 = v16;
        else
          v18 = 0;
        if (!v16 || v90 == 84)
          goto LABEL_43;
        goto LABEL_17;
      }
    }
    if (!v16)
    {
      v18 = 0;
      goto LABEL_43;
    }
LABEL_17:
    if (*((_DWORD *)v16 + 5))
    {
      if ((*(_BYTE *)(a2 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
        *(_BYTE *)(a2 + 184) |= 1u;
      }
      v17 = *(WebCore::FormData **)(a2 + 168);
      *(_QWORD *)(a2 + 168) = v16;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
        {
          WebCore::FormData::~FormData(v17, v15);
          bmalloc::api::isoDeallocate(v91, v92);
        }
        else
        {
          --*(_DWORD *)v17;
        }
      }
      v18 = 0;
      *(_BYTE *)(a2 + 184) = *(_BYTE *)(a2 + 184) & 0xF3 | 4;
    }
    else
    {
      v18 = v16;
    }
LABEL_43:
    if ((*(_BYTE *)(v12 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v12);
      *(_BYTE *)(v12 + 184) |= 1u;
    }
    v25 = *(unsigned int *)(v12 + 108);
    if (!(_DWORD)v25)
      goto LABEL_61;
    v26 = 0;
    v27 = (WTF::StringImpl **)(*(_QWORD *)(v12 + 96) + 8);
    while (*((_WORD *)v27 - 4) != 26)
    {
      ++v26;
      v27 += 2;
      if (v25 == v26)
        goto LABEL_61;
    }
    if (v26 >= v25)
    {
      __break(0xC471u);
      JUMPOUT(0x195408738);
    }
    v28 = *v27;
    if (!*v27)
    {
LABEL_61:
      if (!v18)
        goto LABEL_63;
      goto LABEL_62;
    }
    *(_DWORD *)v28 += 2;
    v97 = v28;
    if (*((_DWORD *)v28 + 1))
    {
      if ((*(_BYTE *)(a2 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
        *(_BYTE *)(a2 + 184) |= 1u;
      }
      WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a2 + 96), (WTF::StringImpl *)0x1A, &v97);
      *(_BYTE *)(a2 + 184) &= ~2u;
      v28 = v97;
      v97 = 0;
      if (!v28)
        goto LABEL_61;
    }
    else
    {
      v97 = 0;
    }
    if (*(_DWORD *)v28 != 2)
    {
      *(_DWORD *)v28 -= 2;
      goto LABEL_61;
    }
    WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v15);
    if (v18)
LABEL_62:
      WTF::RefCounted<WebCore::FormData>::deref(v18, v15);
LABEL_63:
    v24 = v101[0];
    v101[0] = 0;
    if (!v24)
      goto LABEL_66;
    goto LABEL_64;
  }
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  if (*(_WORD *)(a3 + 136) != 303)
    goto LABEL_66;
  v19 = *(_BYTE *)(v12 + 184);
  if ((v19 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v12);
    v19 = *(_BYTE *)(v12 + 184) | 1;
    *(_BYTE *)(v12 + 184) = v19;
  }
  v20 = *(_QWORD *)(v12 + 88);
  if (v20 && *(_DWORD *)(v20 + 4) == 4)
  {
    v85 = *(_QWORD *)(v20 + 8);
    if ((*(_BYTE *)(v20 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v85 & 0xDF) == 0x48
        && (*(_BYTE *)(v85 + 1) & 0xDF) == 0x45
        && (*(_BYTE *)(v85 + 2) & 0xDF) == 0x41)
      {
        v86 = *(unsigned __int8 *)(v85 + 3);
        goto LABEL_214;
      }
    }
    else if ((*(_WORD *)v85 & 0xFFDF) == 0x48
           && (*(_WORD *)(v85 + 2) & 0xFFDF) == 0x45
           && (*(_WORD *)(v85 + 4) & 0xFFDF) == 0x41)
    {
      v86 = *(unsigned __int16 *)(v85 + 6);
LABEL_214:
      if ((v86 & 0xFFFFFFDF) == 0x44)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v97 = v101[0];
        WebCore::ResourceRequestBase::setHTTPMethod((WTF **)a2, &v97);
        v87 = v97;
        v97 = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
            WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v15);
          else
            *(_DWORD *)v87 -= 2;
        }
        v19 = *(_BYTE *)(v12 + 184);
      }
    }
  }
  if ((v19 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v12);
    *(_BYTE *)(v12 + 184) |= 1u;
  }
  v21 = *(unsigned int *)(v12 + 108);
  if ((_DWORD)v21)
  {
    v22 = 0;
    v23 = (WTF::StringImpl **)(*(_QWORD *)(v12 + 96) + 8);
    while (*((_WORD *)v23 - 4) != 26)
    {
      ++v22;
      v23 += 2;
      if (v21 == v22)
        goto LABEL_66;
    }
    if (v22 >= v21)
    {
      __break(0xC471u);
      JUMPOUT(0x195408730);
    }
    v24 = *v23;
    if (*v23)
    {
      *(_DWORD *)v24 += 2;
      v101[0] = v24;
      if (!*((_DWORD *)v24 + 1))
      {
        v101[0] = 0;
LABEL_64:
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v15);
        else
          *(_DWORD *)v24 -= 2;
        goto LABEL_66;
      }
      if ((*(_BYTE *)(a2 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
        *(_BYTE *)(a2 + 184) |= 1u;
      }
      WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a2 + 96), (WTF::StringImpl *)0x1A, v101);
      *(_BYTE *)(a2 + 184) &= ~2u;
      goto LABEL_63;
    }
  }
LABEL_66:
  if ((*(_BYTE *)(a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *(_BYTE *)(a2 + 184) |= 1u;
  }
  if ((WTF::URL::protocolIs() & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      *(_BYTE *)(a2 + 184) |= 1u;
    }
    v29 = *(unsigned int *)(a2 + 108);
    if ((_DWORD)v29)
    {
      v30 = 0;
      v31 = (WTF::StringImpl **)(*(_QWORD *)(a2 + 96) + 8);
      while (*((_WORD *)v31 - 4) != 60)
      {
        ++v30;
        v31 += 2;
        if (v29 == v30)
        {
          v32 = 0;
LABEL_76:
          v33 = 1;
          goto LABEL_81;
        }
      }
      if (v30 >= v29)
      {
        __break(0xC471u);
        JUMPOUT(0x195408728);
      }
      v32 = *v31;
      if (!*v31)
        goto LABEL_76;
      v33 = 0;
      *(_DWORD *)v32 += 2;
    }
    else
    {
      v32 = 0;
      v33 = 1;
    }
LABEL_81:
    if (WTF::protocolIs())
      v35 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 16) + 32))(**(_QWORD **)(a1 + 16));
    else
      v35 = 0;
    if ((v33 & 1) != 0)
    {
LABEL_87:
      if (!v35)
        goto LABEL_89;
      goto LABEL_88;
    }
    if (*(_DWORD *)v32 != 2)
    {
      *(_DWORD *)v32 -= 2;
      goto LABEL_87;
    }
    WTF::StringImpl::destroy(v32, v34);
    if (v35)
LABEL_88:
      WebCore::ResourceRequestBase::clearHTTPReferrer((_BYTE *)a2, v34);
  }
LABEL_89:
  if ((*(_BYTE *)(a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *(_BYTE *)(a2 + 184) |= 1u;
  }
  WTF::URL::user((WTF::URL *)a2);
  v37 = *(_QWORD *)(a1 + 16);
  v38 = v101[0];
  v101[0] = 0;
  v39 = *(WTF::StringImpl **)(v37 + 432);
  *(_QWORD *)(v37 + 432) = v38;
  if (v39)
  {
    v40 = *(_DWORD *)v39 - 2;
    if (*(_DWORD *)v39 != 2)
    {
LABEL_93:
      *(_DWORD *)v39 = v40;
      goto LABEL_94;
    }
    WTF::StringImpl::destroy(v39, v36);
    v39 = v101[0];
    v101[0] = 0;
    if (v39)
    {
      v40 = *(_DWORD *)v39 - 2;
      if (*(_DWORD *)v39 != 2)
        goto LABEL_93;
      WTF::StringImpl::destroy(v39, v73);
    }
  }
LABEL_94:
  WTF::URL::password((WTF::URL *)a2);
  v42 = *(_QWORD *)(a1 + 16);
  v43 = v101[0];
  v101[0] = 0;
  v44 = *(WTF::StringImpl **)(v42 + 440);
  *(_QWORD *)(v42 + 440) = v43;
  if (!v44)
    goto LABEL_97;
  v45 = *(_DWORD *)v44 - 2;
  if (*(_DWORD *)v44 != 2)
    goto LABEL_96;
  WTF::StringImpl::destroy(v44, v41);
  v44 = v101[0];
  v101[0] = 0;
  if (v44)
  {
    v45 = *(_DWORD *)v44 - 2;
    if (*(_DWORD *)v44 != 2)
    {
LABEL_96:
      *(_DWORD *)v44 = v45;
      goto LABEL_97;
    }
    WTF::StringImpl::destroy(v44, v41);
  }
LABEL_97:
  if ((*(_BYTE *)(a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *(_BYTE *)(a2 + 184) |= 1u;
  }
  v46 = *(_QWORD *)(a1 + 16);
  v47 = *(_DWORD **)(a2 + 88);
  if (v47)
    *v47 += 2;
  v48 = *(WTF::StringImpl **)(v46 + 416);
  *(_QWORD *)(v46 + 416) = v47;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v41);
    else
      *(_DWORD *)v48 -= 2;
  }
  if ((*(_BYTE *)(a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *(_BYTE *)(a2 + 184) |= 1u;
  }
  if (*(_DWORD *)(a2 + 20) > *(_DWORD *)(a2 + 12))
  {
    WTF::URL::removeCredentials((WTF::URL *)a2);
    *(_BYTE *)(a2 + 184) &= ~2u;
  }
  if ((*(_BYTE *)(v12 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v12);
    *(_BYTE *)(v12 + 184) |= 1u;
  }
  v49 = *(unsigned int *)(v12 + 108);
  if ((_DWORD)v49)
  {
    v50 = 0;
    v51 = (WTF::StringImpl **)(*(_QWORD *)(v12 + 96) + 8);
    while (*((_WORD *)v51 - 4) != 14)
    {
      ++v50;
      v51 += 2;
      if (v49 == v50)
        goto LABEL_128;
    }
    if (v50 >= v49)
    {
      __break(0xC471u);
      JUMPOUT(0x195408720);
    }
    v52 = *v51;
    if (*v51)
    {
      *(_DWORD *)v52 += 2;
      v101[0] = v52;
      if ((*(_BYTE *)(v12 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v12);
        *(_BYTE *)(v12 + 184) |= 1u;
      }
      if ((*(_BYTE *)(a2 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
        *(_BYTE *)(a2 + 184) |= 1u;
      }
      if (WTF::protocolHostAndPortAreEqual())
      {
        if ((*(_BYTE *)(a2 + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
          *(_BYTE *)(a2 + 184) |= 1u;
        }
        WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a2 + 96), (WTF::StringImpl *)0xE, v101);
        *(_BYTE *)(a2 + 184) &= ~2u;
      }
      v54 = v101[0];
      v101[0] = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v53);
        else
          *(_DWORD *)v54 -= 2;
      }
    }
  }
LABEL_128:
  if ((*(_BYTE *)(a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *(_BYTE *)(a2 + 184) |= 1u;
  }
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  if ((WTF::protocolHostAndPortAreEqual() & 1) == 0)
  {
    WebCore::ResourceRequestBase::clearHTTPAuthorization((_BYTE *)a2, v55);
    WebCore::ResourceRequestBase::clearHTTPOrigin((_BYTE *)a2, v72);
    goto LABEL_202;
  }
  v56 = *(_QWORD **)(a1 + 16);
  v57 = v56[54];
  if (v57 && *(_DWORD *)(v57 + 4))
    goto LABEL_202;
  v58 = v56[55];
  if (v58)
  {
    if (*(_DWORD *)(v58 + 4))
      goto LABEL_202;
  }
  if ((*(_BYTE *)(a3 + 138) & 1) != 0)
    goto LABEL_202;
  v59 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  v60 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v60 += 4;
  v62 = (**(uint64_t (***)(_QWORD))*v56)(*v56);
  if (!v62)
  {
    v69 = 0;
    v67 = v60;
    if (!v60)
      goto LABEL_171;
    goto LABEL_170;
  }
  if ((*(_BYTE *)(a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *(_BYTE *)(a2 + 184) |= 1u;
  }
  DefaultProtectionSpaceForURL = WebCore::CredentialStorage::findDefaultProtectionSpaceForURL((WebCore::CredentialStorage *)(v62 + 96), (const WTF::URL *)a2);
  v64 = *(_QWORD *)(v62 + 128);
  if (v64)
    v64 += 40 * *(unsigned int *)(v64 - 4);
  if (v64 == DefaultProtectionSpaceForURL)
  {
    v65 = *v59;
    if (*v59)
      *(_DWORD *)v65 += 4;
    v98 = v65;
    v99 = 0;
    v100 = 0;
  }
  else
  {
    std::make_pair[abi:sn180100]<WTF::String const&,WebCore::ProtectionSpace &>((_DWORD **)(a2 + 160), DefaultProtectionSpaceForURL + 8, (uint64_t)v101);
    WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>>,std::pair<WTF::String,WebCore::ProtectionSpace>>(v62 + 96, v101, (uint64_t)&v97);
    std::pair<WTF::String,WebCore::ProtectionSpace>::~pair((uint64_t)v101, v96);
    v65 = v97;
  }
  v97 = 0;
  if (!v60)
  {
    v67 = v98;
    v98 = 0;
    goto LABEL_150;
  }
  v66 = *(_DWORD *)v60 - 2;
  if (*(_DWORD *)v60 == 2)
  {
    WTF::StringImpl::destroy(v60, v61);
    v66 = *(_DWORD *)v60;
  }
  else
  {
    *(_DWORD *)v60 = v66;
  }
  v67 = v98;
  v98 = 0;
  v68 = v66 - 2;
  if (v68)
  {
    *(_DWORD *)v60 = v68;
LABEL_150:
    v69 = v99;
    v70 = v100;
    v100 = 0;
    v98 = 0;
    goto LABEL_151;
  }
  WTF::StringImpl::destroy(v60, v61);
  v93 = v98;
  v69 = v99;
  v70 = v100;
  v100 = 0;
  v98 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
      WTF::StringImpl::destroy(v93, v61);
    else
      *(_DWORD *)v93 -= 2;
  }
LABEL_151:
  v71 = v97;
  v97 = 0;
  if (!v71)
    goto LABEL_154;
  if (*(_DWORD *)v71 != 2)
  {
    *(_DWORD *)v71 -= 2;
LABEL_154:
    if (!v70)
      goto LABEL_155;
LABEL_238:
    v74 = 0;
    goto LABEL_174;
  }
  WTF::StringImpl::destroy(v71, v61);
  if (v70)
    goto LABEL_238;
LABEL_155:
  v60 = v65;
  if (!v65)
    goto LABEL_171;
LABEL_170:
  if (*((_DWORD *)v60 + 1))
  {
    v70 = 0;
    v75 = *(_QWORD *)(a1 + 16);
    v74 = 1;
    goto LABEL_176;
  }
LABEL_171:
  if (!v67)
    goto LABEL_199;
  if (*((_DWORD *)v67 + 1))
  {
    v70 = 0;
    v74 = 1;
    v65 = v60;
LABEL_174:
    v75 = *(_QWORD *)(a1 + 16);
    if (!v65)
    {
      v60 = 0;
LABEL_177:
      v76 = v74;
      v77 = *(WTF::StringImpl **)(v75 + 448);
      *(_QWORD *)(v75 + 448) = v60;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
        {
          WTF::StringImpl::destroy(v77, v61);
          if (!v67)
          {
LABEL_182:
            v78 = *(WTF::StringImpl **)(v75 + 456);
            *(_QWORD *)(v75 + 456) = v67;
            if (v78)
            {
              if (*(_DWORD *)v78 == 2)
                WTF::StringImpl::destroy(v78, v61);
              else
                *(_DWORD *)v78 -= 2;
            }
            *(_BYTE *)(v75 + 464) = v69;
            if ((v76 & 1) == 0)
              CFRetain(v70);
            v79 = *(const void **)(v75 + 472);
            *(_QWORD *)(v75 + 472) = v70;
            if (v79)
              CFRelease(v79);
            WebCore::CredentialBase::serializationForBasicAuthorizationHeader((WebCore::CredentialBase *)(*(_QWORD *)(a1 + 16) + 448), v101);
            if ((*(_BYTE *)(a2 + 184) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
              *(_BYTE *)(a2 + 184) |= 1u;
            }
            WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a2 + 96), (WTF::StringImpl *)0xE, v101);
            *(_BYTE *)(a2 + 184) &= ~2u;
            v80 = v101[0];
            v101[0] = 0;
            if (v80)
            {
              if (*(_DWORD *)v80 == 2)
              {
                WTF::StringImpl::destroy(v80, v61);
                if ((v76 & 1) != 0)
                {
LABEL_196:
                  if (!v67)
                    goto LABEL_199;
                  goto LABEL_197;
                }
LABEL_195:
                CFRelease(v70);
                goto LABEL_196;
              }
              *(_DWORD *)v80 -= 2;
            }
            if ((v76 & 1) != 0)
              goto LABEL_196;
            goto LABEL_195;
          }
LABEL_181:
          *(_DWORD *)v67 += 2;
          goto LABEL_182;
        }
        *(_DWORD *)v77 -= 2;
      }
      if (!v67)
        goto LABEL_182;
      goto LABEL_181;
    }
    v60 = v65;
LABEL_176:
    *(_DWORD *)v60 += 2;
    goto LABEL_177;
  }
LABEL_197:
  if (*(_DWORD *)v67 != 2)
  {
    *(_DWORD *)v67 -= 2;
LABEL_199:
    if (v60)
      goto LABEL_200;
    goto LABEL_202;
  }
  WTF::StringImpl::destroy(v67, v61);
  if (v60)
  {
LABEL_200:
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, v61);
    else
      *(_DWORD *)v60 -= 2;
  }
LABEL_202:
  v81 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  ++*(_DWORD *)(a1 + 8);
  v82 = *a4;
  *a4 = 0;
  v83 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v83 = &off_1E335B500;
  *((_QWORD *)v83 + 1) = a1;
  *((_QWORD *)v83 + 2) = a1;
  *((_QWORD *)v83 + 3) = v82;
  v101[0] = v83;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v81 + 80))(v81, a1, a2, a3, v101);
  result = v101[0];
  v101[0] = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19540874C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const void *v16;

  if (v16)
    CFRelease(v16);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, a2);
      if (!v14)
        goto LABEL_12;
      goto LABEL_7;
    }
    *(_DWORD *)v15 -= 2;
  }
  if (!v14)
    goto LABEL_12;
LABEL_7:
  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, a2);
  else
    *(_DWORD *)v14 -= 2;
LABEL_12:
  _Unwind_Resume(exception_object);
}

void WebCore::ResourceHandle::didReceiveAuthenticationChallenge(AuthenticationClient *this, const WebCore::AuthenticationChallenge *a2)
{
  int v4;
  void **var0;
  _DWORD *v6;
  _DWORD *v7;
  void *v8;
  _DWORD *v9;
  _DWORD *v10;
  id v11;
  void **v12;
  const __CFString *v13;
  const __CFString *v14;
  WTF::StringImpl *v15;
  NSURLCredential *v16;
  void **v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  int v22;
  void *v23;
  const void *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  void *v29;
  const void *v30;
  void *v31;
  const void *v32;
  void *v33;
  const void *v34;
  void *v35;
  const void *v36;
  WTF::StringImpl *v37;
  CFTypeRef v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  void **v41;
  WTF::StringImpl *v42;
  void **v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  const WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  const void *v54;
  CFTypeRef v55;
  const void *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  char v59;
  CFTypeRef v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  const WebCore::AuthenticationChallenge *v63;
  void *v64;
  uint64_t v65;
  NSURLAuthenticationChallenge *v66;
  WTF::StringImpl *v67;
  void **v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  void *v71;
  WTF::StringImpl *v72;
  void *v73;
  const void *v74;
  void *v75;
  WTF::StringImpl *v76;
  void *v77;
  WTF::StringImpl *v78;
  void *v79;
  const void *v80;
  void *v81;
  const void *v82;
  WTF::StringImpl *v83;
  void *v84;
  const void *v85;
  CFTypeRef v86;
  const void *v87;
  CFTypeRef v88;
  const void *v89;
  CFTypeRef v90;
  CFTypeRef v91;
  void **v92;
  void *v93;
  void **v94;
  WebCore::Credential *v95;
  const WTF::StringImpl *v96;
  void *v97;
  uint64_t v98;
  WebCore::CredentialStorage *v99;
  WTF::StringImpl **v100;
  void *v101;
  uint64_t v102;
  const WebCore::AuthenticationChallenge *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  void *v106;
  CFTypeRef cf;
  void *v108;
  void *v109;
  void *v110;
  char v111;
  void *v112;
  int v113;
  uint64_t v114[30];
  void *v115;
  char v116;
  uint64_t v117[8];
  void *v118;
  char v119;
  CFTypeRef v120;
  CFTypeRef v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  char v124;
  const void *v125;

  if (*((unsigned __int8 *)a2 + 28) - 5 <= 3)
  {
    objc_msgSend(*((id *)a2 + 52), "continueWithoutCredentialForAuthenticationChallenge:", *((_QWORD *)a2 + 53));
    return;
  }
  v4 = *((unsigned __int8 *)a2 + 29);
  if ((v4 - 7) < 2 || v4 == 100)
    goto LABEL_115;
  var0 = this[2].var0;
  v6 = var0[54];
  if (!v6 || !v6[1])
  {
    v7 = var0[55];
    if (!v7 || !v7[1])
    {
      v8 = var0[1];
      if (v8)
      {
        if (!(*(unsigned int (**)(void *, AuthenticationClient *))(*(_QWORD *)v8 + 112))(v8, this))
          goto LABEL_115;
        var0 = this[2].var0;
      }
      if (!var0[59])
      {
        v9 = var0[56];
        if (!v9 || !v9[1])
        {
          v10 = var0[57];
          if (v10)
          {
            if (!(v10[1] | *((_DWORD *)a2 + 18)))
              goto LABEL_82;
          }
          else if (!*((_DWORD *)a2 + 18))
          {
            goto LABEL_82;
          }
        }
      }
      v45 = (**(uint64_t (***)(void *))*var0)(*var0);
      if (v45)
        WebCore::CredentialStorage::remove((WebCore::CredentialStorage *)(v45 + 96), (WTF::StringImpl **)this[2].var0 + 53, (const WebCore::AuthenticationChallenge *)((char *)a2 + 8));
LABEL_82:
      if (!*((_DWORD *)a2 + 18))
      {
        v46 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v46 += 4;
        v104 = v46;
        v105 = v46;
        LOBYTE(v106) = 0;
        cf = 0;
        v47 = (***(uint64_t (****)(void *))this[2].var0)(*this[2].var0);
        if (v47)
        {
          WebCore::CredentialStorage::get((WebCore::CredentialStorage *)(v47 + 96), (WTF::StringImpl **)this[2].var0 + 53, (const WebCore::AuthenticationChallenge *)((char *)a2 + 8), (uint64_t)&v122);
          v50 = v122;
          v122 = 0;
          v51 = v104;
          v104 = v50;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v48);
            else
              *(_DWORD *)v51 -= 2;
          }
          v52 = v123;
          v123 = 0;
          v53 = v105;
          v105 = v52;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v48);
            else
              *(_DWORD *)v53 -= 2;
          }
          LOBYTE(v106) = v124;
          v54 = v125;
          v125 = 0;
          v55 = cf;
          cf = v54;
          if (v55)
          {
            CFRelease(v55);
            v56 = v125;
            v125 = 0;
            if (v56)
              CFRelease(v56);
          }
          v57 = v123;
          v123 = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, v48);
            else
              *(_DWORD *)v57 -= 2;
          }
          v58 = v122;
          v122 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, v48);
            else
              *(_DWORD *)v58 -= 2;
          }
        }
        if ((cf || v104 && *((_DWORD *)v104 + 1) || v105 && *((_DWORD *)v105 + 1))
          && ((v94 = this[2].var0, v106 != *((unsigned __int8 *)v94 + 464))
           || (v95 = (WebCore::Credential *)(v94 + 56),
               !WTF::equal(v104, (const WTF::StringImpl *)v94[56], v49))
           || !WTF::equal(v105, (const WTF::StringImpl *)v94[57], v96)
           || (unint64_t)cf | (unint64_t)v94[59]
           && (v97 = (void *)WebCore::Credential::nsCredential((WebCore::Credential *)&v104),
               (objc_msgSend(v97, "isEqual:", WebCore::Credential::nsCredential(v95)) & 1) == 0)))
        {
          WebCore::ResourceResponse::platformLazyInit((uint64_t)a2 + 80, 1);
          if (*((_WORD *)a2 + 108) == 401)
          {
            v98 = (***(uint64_t (****)(void *))this[2].var0)(*this[2].var0);
            if (v98)
            {
              v99 = (WebCore::CredentialStorage *)(v98 + 96);
              v100 = (WTF::StringImpl **)(this[2].var0 + 53);
              WebCore::ResourceResponse::platformLazyInit((uint64_t)a2 + 80, 1);
              WebCore::CredentialStorage::set(v99, v100, (const WebCore::Credential *)&v104, (const WebCore::AuthenticationChallenge *)((char *)a2 + 8), (const WebCore::AuthenticationChallenge *)((char *)a2 + 80));
            }
          }
          v101 = (void *)*((_QWORD *)a2 + 52);
          v102 = WebCore::Credential::nsCredential((WebCore::Credential *)&v104);
          objc_msgSend(v101, "useCredential:forAuthenticationChallenge:", v102, WebCore::mac(a2, v103));
          v59 = 0;
        }
        else
        {
          v59 = 1;
        }
        v60 = cf;
        cf = 0;
        if (v60)
          CFRelease(v60);
        v61 = v105;
        v105 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, v48);
          else
            *(_DWORD *)v61 -= 2;
        }
        v62 = v104;
        v104 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
          {
            WTF::StringImpl::destroy(v62, v48);
            if ((v59 & 1) == 0)
              return;
            goto LABEL_115;
          }
          *(_DWORD *)v62 -= 2;
        }
        if ((v59 & 1) == 0)
          return;
      }
LABEL_115:
      if (*((_DWORD *)a2 + 18) || *((unsigned __int8 *)a2 + 28) - 5 > 3)
        goto LABEL_120;
      if ((WTF::hasProcessPrivilege() & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195409218);
      }
      v64 = (void *)WebCore::mac(a2, v63);
      v65 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C92C68], "sharedCredentialStorage"), "defaultCredentialForProtectionSpace:", objc_msgSend(v64, "protectionSpace"));
      if (!v65)
      {
LABEL_120:
        v66 = (NSURLAuthenticationChallenge *)*((_QWORD *)a2 + 53);
        *((_QWORD *)this[2].var0 + 63) = v66;
        WebCore::AuthenticationChallenge::AuthenticationChallenge((WebCore::AuthenticationChallenge *)&v104, v66);
        v68 = this[2].var0;
        *((_BYTE *)v68 + 528) = (_BYTE)v104;
        v69 = v105;
        v105 = 0;
        v70 = (WTF::StringImpl *)v68[67];
        v68[67] = v69;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, v67);
          else
            *(_DWORD *)v70 -= 2;
        }
        v71 = v106;
        v106 = 0;
        v72 = (WTF::StringImpl *)v68[68];
        v68[68] = v71;
        if (v72)
        {
          if (*(_DWORD *)v72 == 2)
            WTF::StringImpl::destroy(v72, v67);
          else
            *(_DWORD *)v72 -= 2;
        }
        *((_DWORD *)v68 + 138) = (_DWORD)cf;
        *(_DWORD *)((char *)v68 + 555) = *(_DWORD *)((char *)&cf + 3);
        v73 = v108;
        v108 = 0;
        v74 = v68[70];
        v68[70] = v73;
        if (v74)
          CFRelease(v74);
        v75 = v109;
        v109 = 0;
        v76 = (WTF::StringImpl *)v68[71];
        v68[71] = v75;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
            WTF::StringImpl::destroy(v76, v67);
          else
            *(_DWORD *)v76 -= 2;
        }
        v77 = v110;
        v110 = 0;
        v78 = (WTF::StringImpl *)v68[72];
        v68[72] = v77;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
            WTF::StringImpl::destroy(v78, v67);
          else
            *(_DWORD *)v78 -= 2;
        }
        *((_BYTE *)v68 + 584) = v111;
        v79 = v112;
        v112 = 0;
        v80 = v68[74];
        v68[74] = v79;
        if (v80)
          CFRelease(v80);
        *((_DWORD *)v68 + 150) = v113;
        WebCore::ResourceResponseBase::operator=((uint64_t)(v68 + 76), v114);
        v81 = v115;
        v115 = 0;
        v82 = v68[106];
        v68[106] = v81;
        if (v82)
          CFRelease(v82);
        *((_BYTE *)v68 + 856) = v116;
        WebCore::ResourceErrorBase::operator=((uint64_t)(v68 + 108), v117);
        v84 = v118;
        v118 = 0;
        v85 = v68[116];
        v68[116] = v84;
        if (v85)
          CFRelease(v85);
        *((_BYTE *)v68 + 936) = v119;
        v86 = v120;
        v120 = 0;
        v87 = v68[118];
        v68[118] = (void *)v86;
        if (v87)
          CFRelease(v87);
        v88 = v121;
        v121 = 0;
        v89 = v68[119];
        v68[119] = (void *)v88;
        if (v89)
        {
          CFRelease(v89);
          v90 = v121;
          v121 = 0;
          if (v90)
            CFRelease(v90);
        }
        v91 = v120;
        v120 = 0;
        if (v91)
          CFRelease(v91);
        WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v104, v83);
        WebCore::AuthenticationChallenge::setAuthenticationClient((WebCore::AuthenticationChallenge *)(this[2].var0 + 66), this);
        v92 = this[2].var0;
        v93 = v92[1];
        if (v93)
        {
          (*(void (**)(void *, AuthenticationClient *, void **))(*(_QWORD *)v93 + 120))(v93, this, v92 + 66);
        }
        else
        {
          v92[63] = 0;
          *((_BYTE *)this[2].var0 + 528) = 1;
          objc_msgSend(*((id *)a2 + 52), "performDefaultHandlingForAuthenticationChallenge:", *((_QWORD *)a2 + 53));
        }
      }
      else
      {
        objc_msgSend(*((id *)a2 + 52), "useCredential:forAuthenticationChallenge:", v65, v64);
      }
      return;
    }
  }
  v11 = objc_alloc(MEMORY[0x1E0C92C60]);
  v12 = this[2].var0;
  if (v12[54])
  {
    v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
    v12 = this[2].var0;
  }
  else
  {
    v13 = &stru_1E3487BC0;
  }
  if (v12[55])
    v14 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v14 = &stru_1E3487BC0;
  v16 = (NSURLCredential *)objc_msgSend(v11, "initWithUser:password:persistence:", v13, v14, 1);
  v17 = this[2].var0;
  v17[63] = (void *)*((_QWORD *)a2 + 53);
  *((_BYTE *)v17 + 528) = *(_BYTE *)a2;
  v18 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v18)
    *v18 += 2;
  v19 = (WTF::StringImpl *)v17[67];
  v17[67] = v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v20)
    *v20 += 2;
  v21 = (WTF::StringImpl *)v17[68];
  v17[68] = v20;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v15);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *((_DWORD *)a2 + 6);
  *(_DWORD *)((char *)v17 + 555) = *(_DWORD *)((char *)a2 + 27);
  *((_DWORD *)v17 + 138) = v22;
  v23 = (void *)*((_QWORD *)a2 + 4);
  if (v23)
    CFRetain(*((CFTypeRef *)a2 + 4));
  v24 = v17[70];
  v17[70] = v23;
  if (v24)
    CFRelease(v24);
  v25 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v25)
    *v25 += 2;
  v26 = (WTF::StringImpl *)v17[71];
  v17[71] = v25;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v15);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (_DWORD *)*((_QWORD *)a2 + 6);
  if (v27)
    *v27 += 2;
  v28 = (WTF::StringImpl *)v17[72];
  v17[72] = v27;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v15);
    else
      *(_DWORD *)v28 -= 2;
  }
  *((_BYTE *)v17 + 584) = *((_BYTE *)a2 + 56);
  v29 = (void *)*((_QWORD *)a2 + 8);
  if (v29)
    CFRetain(*((CFTypeRef *)a2 + 8));
  v30 = v17[74];
  v17[74] = v29;
  if (v30)
    CFRelease(v30);
  *((_DWORD *)v17 + 150) = *((_DWORD *)a2 + 18);
  WebCore::ResourceResponseBase::operator=((uint64_t)(v17 + 76), (uint64_t)a2 + 80);
  v31 = (void *)*((_QWORD *)a2 + 40);
  if (v31)
    CFRetain(*((CFTypeRef *)a2 + 40));
  v32 = v17[106];
  v17[106] = v31;
  if (v32)
    CFRelease(v32);
  *((_BYTE *)v17 + 856) = *((_BYTE *)a2 + 328);
  WebCore::ResourceError::operator=((uint64_t)(v17 + 108), (uint64_t)a2 + 336);
  v33 = (void *)*((_QWORD *)a2 + 52);
  if (v33)
    CFRetain(*((CFTypeRef *)a2 + 52));
  v34 = v17[118];
  v17[118] = v33;
  if (v34)
    CFRelease(v34);
  v35 = (void *)*((_QWORD *)a2 + 53);
  if (v35)
    CFRetain(*((CFTypeRef *)a2 + 53));
  v36 = v17[119];
  v17[119] = v35;
  if (v36)
    CFRelease(v36);
  WebCore::Credential::Credential((WebCore::Credential *)&v104, v16);
  (*(void (**)(AuthenticationClient *, const WebCore::AuthenticationChallenge *, WTF::StringImpl **))this->var0)(this, a2, &v104);
  v38 = cf;
  cf = 0;
  if (v38)
    CFRelease(v38);
  v39 = v105;
  v105 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v37);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = v104;
  v104 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v37);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = this[2].var0;
  v42 = (WTF::StringImpl *)v41[54];
  v41[54] = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v37);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = this[2].var0;
  v44 = (WTF::StringImpl *)v43[55];
  v43[55] = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::destroy(v44, v37);
      if (v16)
        goto LABEL_78;
      return;
    }
    *(_DWORD *)v44 -= 2;
  }
  if (v16)
LABEL_78:
    CFRelease(v16);
}

void sub_195409250(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, CFTypeRef cf, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,CFTypeRef a61,CFTypeRef a62)
{
  if (cf)
    CFRelease(cf);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ResourceHandle::canAuthenticateAgainstProtectionSpace(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v6)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v6 + 96))(v6, a1, a2, a3);
  v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 16))(v8, 0, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1954093D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebCore::ResourceHandle::receivedCredential(WebCore::ResourceHandle *this, const WebCore::AuthenticationChallenge *a2, const WebCore::Credential *a3)
{
  WTF::StringImpl *result;
  uint64_t v7;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  CFTypeRef v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  const void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  CFTypeRef cf;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  const void *v32;

  result = (WTF::StringImpl *)WebCore::AuthenticationChallengeBase::equalForWebKitLegacyChallengeComparison((WTF **)a2, (const WTF::StringImpl **)(*((_QWORD *)this + 2) + 528), a3);
  if ((_DWORD)result)
  {
    if (*((_QWORD *)a3 + 3)
      || *(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4)
      || (v7 = *((_QWORD *)a3 + 1)) != 0 && *(_DWORD *)(v7 + 4))
    {
      if (*((_BYTE *)a3 + 16) != 1 || *((_BYTE *)a2 + 29) == 8)
      {
        result = (WTF::StringImpl *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)this + 2) + 504), "sender"), "useCredential:forAuthenticationChallenge:", WebCore::Credential::nsCredential(a3), *(_QWORD *)(*((_QWORD *)this + 2) + 504));
      }
      else
      {
        WebCore::Credential::Credential((uint64_t)&v30, (uint64_t)a3, 0);
        v27 = 0;
        WTF::URL::invalidate((WTF::URL *)&v27);
        v9 = (WTF::StringImpl **)((char *)a2 + 80);
        WebCore::ResourceResponse::platformLazyInit((uint64_t)a2 + 80, 1);
        if (*((_WORD *)a2 + 108) == 401)
        {
          WebCore::ResourceResponse::platformLazyInit((uint64_t)a2 + 80, 1);
          v11 = *v9;
          if (*v9)
            *(_DWORD *)v11 += 2;
          v12 = v27;
          v27 = v11;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v10);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = *(_OWORD *)((char *)a2 + 104);
          v28 = *(_OWORD *)((char *)a2 + 88);
          v29 = v13;
        }
        v14 = (****((uint64_t (*****)(_QWORD))this + 2))(**((_QWORD **)this + 2));
        if (v14)
        {
          v15 = *((_QWORD *)this + 2);
          WebCore::ProtectionSpace::ProtectionSpace((WebCore::ProtectionSpace *)&v24, (NSURLProtectionSpace *)objc_msgSend(*(id *)(v15 + 504), "protectionSpace"));
          WebCore::CredentialStorage::set((WebCore::CredentialStorage *)(v14 + 96), (WTF::StringImpl **)(v15 + 424), (const WebCore::Credential *)&v30, (const WebCore::ProtectionSpace *)&v24, (const WTF::URL *)&v27);
          v17 = cf;
          cf = 0;
          if (v17)
            CFRelease(v17);
          v18 = v25;
          v25 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v16);
            else
              *(_DWORD *)v18 -= 2;
          }
          v19 = v24;
          v24 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v16);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)this + 2) + 504), "sender"), "useCredential:forAuthenticationChallenge:", WebCore::Credential::nsCredential((WebCore::Credential *)&v30), *(_QWORD *)(*((_QWORD *)this + 2) + 504));
        v21 = v27;
        v27 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v20);
          else
            *(_DWORD *)v21 -= 2;
        }
        v22 = v32;
        v32 = 0;
        if (v22)
          CFRelease(v22);
        v23 = v31;
        v31 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v20);
          else
            *(_DWORD *)v23 -= 2;
        }
        result = v30;
        v30 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
          else
            *(_DWORD *)result -= 2;
        }
      }
      *(_QWORD *)(*((_QWORD *)this + 2) + 504) = 0;
      *(_BYTE *)(*((_QWORD *)this + 2) + 528) = 1;
    }
    else
    {
      return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::ResourceHandle *, const WebCore::AuthenticationChallenge *))(*(_QWORD *)this + 8))(this, a2);
    }
  }
  return result;
}

void sub_1954096AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, CFTypeRef cf, WTF::StringImpl *a14)
{
  uint64_t v14;
  const void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if (cf)
    CFRelease(cf);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  v16 = *(const void **)(v14 - 40);
  *(_QWORD *)(v14 - 40) = 0;
  if (v16)
    CFRelease(v16);
  v17 = *(WTF::StringImpl **)(v14 - 56);
  *(_QWORD *)(v14 - 56) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(WTF::StringImpl **)(v14 - 64);
  *(_QWORD *)(v14 - 64) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ResourceHandle::receivedRequestToContinueWithoutCredential(WebCore::ResourceHandle *this, WTF **a2, const WebCore::AuthenticationChallenge *a3)
{
  uint64_t result;

  result = WebCore::AuthenticationChallengeBase::equalForWebKitLegacyChallengeComparison(a2, (const WTF::StringImpl **)(*((_QWORD *)this + 2) + 528), a3);
  if ((_DWORD)result)
  {
    result = objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)this + 2) + 504), "sender"), "continueWithoutCredentialForAuthenticationChallenge:", *(_QWORD *)(*((_QWORD *)this + 2) + 504));
    *(_QWORD *)(*((_QWORD *)this + 2) + 504) = 0;
    *(_BYTE *)(*((_QWORD *)this + 2) + 528) = 1;
  }
  return result;
}

uint64_t WebCore::ResourceHandle::receivedCancellation(WebCore::ResourceHandle *this, WTF **a2, const WebCore::AuthenticationChallenge *a3)
{
  uint64_t result;

  result = WebCore::AuthenticationChallengeBase::equalForWebKitLegacyChallengeComparison(a2, (const WTF::StringImpl **)(*((_QWORD *)this + 2) + 528), a3);
  if ((_DWORD)result)
  {
    result = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    if (result)
      return (*(uint64_t (**)(uint64_t, WebCore::ResourceHandle *, WTF **))(*(_QWORD *)result + 128))(result, this, a2);
  }
  return result;
}

uint64_t WebCore::ResourceHandle::receivedRequestToPerformDefaultHandling(WebCore::ResourceHandle *this, WTF **a2, const WebCore::AuthenticationChallenge *a3)
{
  uint64_t result;

  result = WebCore::AuthenticationChallengeBase::equalForWebKitLegacyChallengeComparison(a2, (const WTF::StringImpl **)(*((_QWORD *)this + 2) + 528), a3);
  if ((_DWORD)result)
  {
    result = objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)this + 2) + 504), "sender"), "performDefaultHandlingForAuthenticationChallenge:", *(_QWORD *)(*((_QWORD *)this + 2) + 504));
    *(_QWORD *)(*((_QWORD *)this + 2) + 504) = 0;
    *(_BYTE *)(*((_QWORD *)this + 2) + 528) = 1;
  }
  return result;
}

uint64_t WebCore::ResourceHandle::receivedChallengeRejection(WebCore::ResourceHandle *this, WTF **a2, const WebCore::AuthenticationChallenge *a3)
{
  uint64_t result;

  result = WebCore::AuthenticationChallengeBase::equalForWebKitLegacyChallengeComparison(a2, (const WTF::StringImpl **)(*((_QWORD *)this + 2) + 528), a3);
  if ((_DWORD)result)
  {
    result = objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)this + 2) + 504), "sender"), "rejectProtectionSpaceAndContinueWithChallenge:", *(_QWORD *)(*((_QWORD *)this + 2) + 504));
    *(_QWORD *)(*((_QWORD *)this + 2) + 504) = 0;
    *(_BYTE *)(*((_QWORD *)this + 2) + 528) = 1;
  }
  return result;
}

uint64_t WebCore::SynchronousLoaderClient::didReceiveAuthenticationChallenge(WebCore::SynchronousLoaderClient *this, WebCore::ResourceHandle *a2, id *a3)
{
  return objc_msgSend(a3[52], "continueWithoutCredentialForAuthenticationChallenge:", a3[53]);
}

void WebCore::SynchronousLoaderClient::platformBadResponseError(WebCore::ResourceError *a1@<X8>)
{
  id v3;
  NSError *v4;

  v3 = objc_alloc(MEMORY[0x1E0CB35C8]);
  v4 = (NSError *)objc_msgSend(v3, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB32E8], -1011, 0);
  WebCore::ResourceError::ResourceError(a1, v4);
  if (v4)
    CFRelease(v4);
}

void sub_195409988(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::mimeTypeFromUTITree(const __CFString *this@<X0>, CFStringRef *a2@<X8>)
{
  CFStringRef v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  WebCore *Value;
  WebCore *v9;
  CFTypeID v10;
  const __CFString *v11;
  CFTypeID v12;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  WebCore *v16;
  const __CFString *v17;

  v5 = UTTypeCopyPreferredTagWithClass(this, (CFStringRef)*MEMORY[0x1E0CA5A90]);
  *a2 = v5;
  if (!v5)
  {
    *a2 = 0;
    v6 = UTTypeCopyDeclaration(this);
    if (!v6)
    {
      *a2 = 0;
      return;
    }
    v7 = v6;
    Value = (WebCore *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0CA5B08]);
    v9 = Value;
    if (Value)
    {
      v10 = CFGetTypeID(Value);
      if (v10 == CFStringGetTypeID())
      {
        WebCore::mimeTypeFromUTITree(v9, v11);
LABEL_15:
        CFRelease(v7);
        return;
      }
      v12 = CFGetTypeID(v9);
      if (v12 == CFArrayGetTypeID())
      {
        Count = CFArrayGetCount(v9);
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
            v16 = (WebCore *)WTF::dynamic_cf_cast<__CFString const*>(ValueAtIndex);
            if (v16)
            {
              WebCore::mimeTypeFromUTITree(v16, v17);
              if (*a2)
                goto LABEL_15;
              *a2 = 0;
            }
          }
        }
      }
    }
    *a2 = 0;
    goto LABEL_15;
  }
}

void sub_195409AC8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::UTIFromMIMEType@<X0>(const WTF::StringImpl **this@<X0>, const WTF::String *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  uint64_t result;
  int v9;

  if (__ldaxr(WebCore::cacheUTIFromMIMETypeLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::cacheUTIFromMIMETypeLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::cacheUTIFromMIMETypeLock, a2);
LABEL_5:
  {
    qword_1EE2F5420 = 0;
    xmmword_1EE2F5400 = 0u;
    unk_1EE2F5410 = 0u;
    xmmword_1EE2F53E0 = 0u;
    unk_1EE2F53F0 = 0u;
    xmmword_1EE2F53C0 = 0u;
    unk_1EE2F53D0 = 0u;
    xmmword_1EE2F53A0 = 0u;
    unk_1EE2F53B0 = 0u;
    xmmword_1EE2F5380 = 0u;
    unk_1EE2F5390 = 0u;
    xmmword_1EE2F5360 = 0u;
    unk_1EE2F5370 = 0u;
    xmmword_1EE2F5340 = 0u;
    unk_1EE2F5350 = 0u;
    WebCore::cacheUTIFromMIMEType(void)::cache = 0u;
    *(_OWORD *)algn_1EE2F5330 = 0u;
  }
  v7 = (_QWORD *)WTF::TinyLRUCache<WTF::String,WTF::RetainPtr<NSString>,16ul,WebCore::UTIFromMIMETypeCachePolicy>::get((uint64_t)&WebCore::cacheUTIFromMIMEType(void)::cache, this, a3);
  result = MEMORY[0x19AEA5508](a4, *v7);
  v9 = __ldxr(WebCore::cacheUTIFromMIMETypeLock);
  if (v9 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::cacheUTIFromMIMETypeLock);
  }
  if (__stlxr(0, WebCore::cacheUTIFromMIMETypeLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::cacheUTIFromMIMETypeLock);
  return result;
}

void sub_195409BD8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::cacheUTIFromMIMETypeLock);
  goto LABEL_6;
}

uint64_t WTF::TinyLRUCache<WTF::String,WTF::RetainPtr<NSString>,16ul,WebCore::UTIFromMIMETypeCachePolicy>::get(uint64_t a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  unint64_t v5;
  uint64_t *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  const void *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  const void *v22;
  void *v23;
  const __CFString *v24;
  void *v25;
  WTF::StringImpl *v26;
  void *v27;
  const __CFString *v28;
  const __CFString *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  const void *v32;
  const WTF::StringImpl *v33;
  unsigned __int8 *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  int v43;
  int v44;
  int v45;
  int v46;
  WTF::StringImpl *v47;

  v5 = *(_QWORD *)(a1 + 256);
  v6 = (uint64_t *)(a1 + 16 * v5 + 16);
  while (v5)
  {
    --v5;
    v7 = WTF::equal((WTF *)*(v6 - 4), *a2, a3);
    v6 -= 2;
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 256) - 1;
      if (v5 >= v8)
        return a1 + 16 * v8 + 8;
      v10 = *(v6 - 2);
      v9 = *(v6 - 1);
      *(v6 - 2) = 0;
      *(v6 - 1) = 0;
      do
      {
        v11 = *v6;
        *v6 = 0;
        v12 = (WTF::StringImpl *)*(v6 - 2);
        *(v6 - 2) = v11;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = v6[1];
        v6[1] = 0;
        v14 = (const void *)*(v6 - 1);
        *(v6 - 1) = v13;
        if (v14)
          CFRelease(v14);
        ++v5;
        v15 = *(_QWORD *)(a1 + 256) - 1;
        v6 += 2;
      }
      while (v5 < v15);
      v30 = *(WTF::StringImpl **)(a1 + 16 * v15);
      *(_QWORD *)(a1 + 16 * v15) = v10;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = a1 + 16 * v15;
      v32 = *(const void **)(v31 + 8);
      *(_QWORD *)(v31 + 8) = v9;
      if (v32)
        goto LABEL_67;
      goto LABEL_68;
    }
  }
  v16 = *(_QWORD *)(a1 + 256);
  if (v16 == 16)
  {
    v17 = 0;
    v18 = (uint64_t *)(a1 + 16);
    do
    {
      v19 = *v18;
      *v18 = 0;
      v20 = (WTF::StringImpl *)*(v18 - 2);
      *(v18 - 2) = v19;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = v18[1];
      v18[1] = 0;
      v22 = (const void *)*(v18 - 1);
      *(v18 - 1) = v21;
      if (v22)
        CFRelease(v22);
      ++v17;
      v18 += 2;
    }
    while (v17 < *(_QWORD *)(a1 + 256) - 1);
  }
  else
  {
    *(_QWORD *)(a1 + 256) = v16 + 1;
  }
  WTF::String::isolatedCopy();
  v23 = (void *)MEMORY[0x1E0CEC3F8];
  if (*a2)
    v24 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v24 = &stru_1E3487BC0;
  v25 = (void *)objc_msgSend(v23, "typeWithMIMEType:", v24);
  v27 = v25;
  if (!v25)
  {
    v33 = *a2;
    if (*a2)
    {
      v34 = (unsigned __int8 *)*((_QWORD *)v33 + 1);
      v35 = *((unsigned int *)v33 + 1) | ((unint64_t)((*((_DWORD *)v33 + 4) >> 2) & 1) << 32);
      v36 = *((unsigned int *)v33 + 1);
      if ((v35 & 0xFF00000000) != 0)
      {
        if (v36)
        {
          v29 = &stru_1E3487BC0;
          if ((int)v35 <= 17)
          {
            if ((_DWORD)v35 != 9)
            {
              if ((_DWORD)v35 != 17)
                goto LABEL_62;
              v37 = *v34;
              if ((v37 & 0xFFFFFFDF) != 0x4D)
                goto LABEL_62;
              if ((v34[1] & 0xDF) == 0x4F
                && (v34[2] & 0xDF) == 0x44
                && (v34[3] & 0xDF) == 0x45
                && (v34[4] & 0xDF) == 0x4C
                && (v34[5] & 0xDF) == 0xF
                && (v34[6] & 0xDF) == 0x56
                && (v34[7] & 0xDF) == 0x4E
                && (v34[8] & 0xDF) == 0x44
                && (v34[9] & 0xDF) == 0xE
                && (v34[10] & 0xDF) == 0x52
                && (v34[11] & 0xDF) == 0x45
                && (v34[12] & 0xDF) == 0x41
                && (v34[13] & 0xDF) == 0x4C
                && (v34[14] & 0xDF) == 0x49
                && (v34[15] & 0xDF) == 0x54
                && (v34[16] & 0xDF) == 0x59)
              {
                goto LABEL_59;
              }
              if (v36 != 18)
                goto LABEL_62;
              goto LABEL_150;
            }
            if ((*v34 & 0xDF) != 0x4D
              || (v34[1] & 0xDF) != 0x4F
              || (v34[2] & 0xDF) != 0x44
              || (v34[3] & 0xDF) != 0x45
              || (v34[4] & 0xDF) != 0x4C
              || (v34[5] & 0xDF) != 0xF
              || (v34[6] & 0xDF) != 0x55
              || (v34[7] & 0xDF) != 0x53)
            {
              goto LABEL_62;
            }
            v45 = v34[8];
LABEL_126:
            if ((v45 & 0xFFFFFFDF) != 0x44)
              goto LABEL_62;
            v38 = 0;
            goto LABEL_170;
          }
          if ((_DWORD)v35 != 19)
          {
            if ((_DWORD)v35 != 18)
              goto LABEL_62;
            v37 = *v34;
LABEL_150:
            if ((v37 & 0xFFFFFFDF) != 0x4D
              || (v34[1] & 0xDF) != 0x4F
              || (v34[2] & 0xDF) != 0x44
              || (v34[3] & 0xDF) != 0x45
              || (v34[4] & 0xDF) != 0x4C
              || (v34[5] & 0xDF) != 0xF
              || (v34[6] & 0xDF) != 0x56
              || (v34[7] & 0xDF) != 0x4E
              || (v34[8] & 0xDF) != 0x44
              || (v34[9] & 0xDF) != 0xE
              || (v34[10] & 0xDF) != 0x55
              || (v34[11] & 0xDF) != 0x53
              || (v34[12] & 0xDF) != 0x44
              || (v34[13] & 0xDF) != 0x5A
              || (v34[14] & 0xDF) != 0xB
              || (v34[15] & 0xDF) != 0x5A
              || (v34[16] & 0xDF) != 0x49)
            {
              goto LABEL_62;
            }
            v44 = v34[17];
            goto LABEL_168;
          }
          if ((*v34 & 0xDF) != 0x4D
            || (v34[1] & 0xDF) != 0x4F
            || (v34[2] & 0xDF) != 0x44
            || (v34[3] & 0xDF) != 0x45
            || (v34[4] & 0xDF) != 0x4C
            || (v34[5] & 0xDF) != 0xF
            || (v34[6] & 0xDF) != 0x56
            || (v34[7] & 0xDF) != 0x4E
            || (v34[8] & 0xDF) != 0x44
            || (v34[9] & 0xDF) != 0xE
            || (v34[10] & 0xDF) != 0x50
            || (v34[11] & 0xDF) != 0x49
            || (v34[12] & 0xDF) != 0x58
            || (v34[13] & 0xDF) != 0x41
            || (v34[14] & 0xDF) != 0x52
            || (v34[15] & 0xDF) != 0xE
            || (v34[16] & 0xDF) != 0x55
            || (v34[17] & 0xDF) != 0x53)
          {
            goto LABEL_62;
          }
          v46 = v34[18];
LABEL_147:
          if ((v46 & 0xFFFFFFDF) != 0x44)
            goto LABEL_62;
          v38 = 1;
          goto LABEL_170;
        }
      }
      else if (v36)
      {
        v29 = &stru_1E3487BC0;
        if ((int)v35 > 17)
        {
          if ((_DWORD)v35 == 19)
          {
            if ((*(_WORD *)v34 & 0xFFDF) != 0x4D
              || (*((_WORD *)v34 + 1) & 0xFFDF) != 0x4F
              || (*((_WORD *)v34 + 2) & 0xFFDF) != 0x44
              || (*((_WORD *)v34 + 3) & 0xFFDF) != 0x45
              || (*((_WORD *)v34 + 4) & 0xFFDF) != 0x4C
              || (*((_WORD *)v34 + 5) & 0xFFDF) != 0xF
              || (*((_WORD *)v34 + 6) & 0xFFDF) != 0x56
              || (*((_WORD *)v34 + 7) & 0xFFDF) != 0x4E
              || (*((_WORD *)v34 + 8) & 0xFFDF) != 0x44
              || (*((_WORD *)v34 + 9) & 0xFFDF) != 0xE
              || (*((_WORD *)v34 + 10) & 0xFFDF) != 0x50
              || (*((_WORD *)v34 + 11) & 0xFFDF) != 0x49
              || (*((_WORD *)v34 + 12) & 0xFFDF) != 0x58
              || (*((_WORD *)v34 + 13) & 0xFFDF) != 0x41
              || (*((_WORD *)v34 + 14) & 0xFFDF) != 0x52
              || (*((_WORD *)v34 + 15) & 0xFFDF) != 0xE
              || (*((_WORD *)v34 + 16) & 0xFFDF) != 0x55
              || (*((_WORD *)v34 + 17) & 0xFFDF) != 0x53)
            {
              goto LABEL_62;
            }
            v46 = *((unsigned __int16 *)v34 + 18);
            goto LABEL_147;
          }
          if ((_DWORD)v35 != 18)
            goto LABEL_62;
          v43 = *(unsigned __int16 *)v34;
        }
        else
        {
          if ((_DWORD)v35 == 9)
          {
            if ((*(_WORD *)v34 & 0xFFDF) != 0x4D
              || (*((_WORD *)v34 + 1) & 0xFFDF) != 0x4F
              || (*((_WORD *)v34 + 2) & 0xFFDF) != 0x44
              || (*((_WORD *)v34 + 3) & 0xFFDF) != 0x45
              || (*((_WORD *)v34 + 4) & 0xFFDF) != 0x4C
              || (*((_WORD *)v34 + 5) & 0xFFDF) != 0xF
              || (*((_WORD *)v34 + 6) & 0xFFDF) != 0x55
              || (*((_WORD *)v34 + 7) & 0xFFDF) != 0x53)
            {
              goto LABEL_62;
            }
            v45 = *((unsigned __int16 *)v34 + 8);
            goto LABEL_126;
          }
          if ((_DWORD)v35 != 17)
            goto LABEL_62;
          v43 = *(unsigned __int16 *)v34;
          if ((v43 & 0xFFFFFFDF) != 0x4D)
            goto LABEL_62;
          if ((*((_WORD *)v34 + 1) & 0xFFDF) == 0x4F
            && (*((_WORD *)v34 + 2) & 0xFFDF) == 0x44
            && (*((_WORD *)v34 + 3) & 0xFFDF) == 0x45
            && (*((_WORD *)v34 + 4) & 0xFFDF) == 0x4C
            && (*((_WORD *)v34 + 5) & 0xFFDF) == 0xF
            && (*((_WORD *)v34 + 6) & 0xFFDF) == 0x56
            && (*((_WORD *)v34 + 7) & 0xFFDF) == 0x4E
            && (*((_WORD *)v34 + 8) & 0xFFDF) == 0x44
            && (*((_WORD *)v34 + 9) & 0xFFDF) == 0xE
            && (*((_WORD *)v34 + 10) & 0xFFDF) == 0x52
            && (*((_WORD *)v34 + 11) & 0xFFDF) == 0x45
            && (*((_WORD *)v34 + 12) & 0xFFDF) == 0x41
            && (*((_WORD *)v34 + 13) & 0xFFDF) == 0x4C
            && (*((_WORD *)v34 + 14) & 0xFFDF) == 0x49
            && (*((_WORD *)v34 + 15) & 0xFFDF) == 0x54
            && (*((_WORD *)v34 + 16) & 0xFFDF) == 0x59)
          {
LABEL_59:
            v38 = 2;
LABEL_170:
            v29 = (const __CFString *)(&WebCore::UTIFromUnknownMIMEType(WTF::StringView)::typesArray)[3 * v38 + 2];
            if (!v29)
              goto LABEL_63;
LABEL_62:
            CFRetain(v29);
            goto LABEL_63;
          }
          if (v36 != 18)
            goto LABEL_62;
        }
        if ((v43 & 0xFFFFFFDF) != 0x4D
          || (*((_WORD *)v34 + 1) & 0xFFDF) != 0x4F
          || (*((_WORD *)v34 + 2) & 0xFFDF) != 0x44
          || (*((_WORD *)v34 + 3) & 0xFFDF) != 0x45
          || (*((_WORD *)v34 + 4) & 0xFFDF) != 0x4C
          || (*((_WORD *)v34 + 5) & 0xFFDF) != 0xF
          || (*((_WORD *)v34 + 6) & 0xFFDF) != 0x56
          || (*((_WORD *)v34 + 7) & 0xFFDF) != 0x4E
          || (*((_WORD *)v34 + 8) & 0xFFDF) != 0x44
          || (*((_WORD *)v34 + 9) & 0xFFDF) != 0xE
          || (*((_WORD *)v34 + 10) & 0xFFDF) != 0x55
          || (*((_WORD *)v34 + 11) & 0xFFDF) != 0x53
          || (*((_WORD *)v34 + 12) & 0xFFDF) != 0x44
          || (*((_WORD *)v34 + 13) & 0xFFDF) != 0x5A
          || (*((_WORD *)v34 + 14) & 0xFFDF) != 0xB
          || (*((_WORD *)v34 + 15) & 0xFFDF) != 0x5A
          || (*((_WORD *)v34 + 16) & 0xFFDF) != 0x49)
        {
          goto LABEL_62;
        }
        v44 = *((unsigned __int16 *)v34 + 17);
LABEL_168:
        if ((v44 & 0xFFFFFFDF) != 0x50)
          goto LABEL_62;
        v38 = 3;
        goto LABEL_170;
      }
    }
    v29 = &stru_1E3487BC0;
    goto LABEL_62;
  }
  CFRetain(v25);
  v28 = (const __CFString *)objc_msgSend(v27, "identifier");
  v29 = v28;
  if (v28)
    CFRetain(v28);
  CFRelease(v27);
LABEL_63:
  v39 = *(_QWORD *)(a1 + 256) - 1;
  v40 = *(WTF::StringImpl **)(a1 + 16 * v39);
  *(_QWORD *)(a1 + 16 * v39) = v47;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v26);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = a1 + 16 * v39;
  v32 = *(const void **)(v41 + 8);
  *(_QWORD *)(v41 + 8) = v29;
  if (v32)
LABEL_67:
    CFRelease(v32);
LABEL_68:
  v8 = *(_QWORD *)(a1 + 256) - 1;
  return a1 + 16 * v8 + 8;
}

void sub_19540A754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  CFRelease(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::isDeclaredUTI(WebCore *this, const WTF::String *a2)
{
  void *v2;
  const __CFString *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = (void *)MEMORY[0x1E0CEC3F8];
  if (*(_QWORD *)this)
    v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E3487BC0;
  v4 = (void *)objc_msgSend(v2, "typeWithIdentifier:", v3);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  v6 = objc_msgSend(v5, "isDeclared");
  if (v5)
    CFRelease(v5);
  return v6;
}

void sub_19540A804(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

NSURLRequest *WebCore::synthesizeRedirectResponseIfNecessary(WebCore *this, NSURLRequest *a2, NSURLRequest *a3, NSURLResponse *a4)
{
  NSURLRequest *v4;
  CFTypeRef v7;
  WTF::StringImpl *v8;
  CFTypeRef v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14[5];
  WTF::StringImpl *v15[5];
  _BYTE v16[240];
  CFTypeRef cf;

  v4 = a3;
  if (a3)
    return v4;
  if (-[NSString isEqualToString:](-[NSURL scheme](-[NSURLRequest URL](a2, "URL", 0, a4), "scheme"), "isEqualToString:", objc_msgSend((id)-[WebCore URL](this, "URL"), "scheme"))&& !-[NSURLRequest _schemeWasUpgradedDueToDynamicHSTS](a2, "_schemeWasUpgradedDueToDynamicHSTS"))
  {
    return 0;
  }
  MEMORY[0x19AEA52E0](v15, -[WebCore URL](this, "URL"));
  MEMORY[0x19AEA52E0](v14, -[NSURLRequest URL](a2, "URL"));
  WebCore::ResourceResponseBase::syntheticRedirectResponse((WebCore::ResourceResponseBase *)v15, v14, (uint64_t)v16);
  v7 = cf;
  if (cf)
    goto LABEL_17;
  if ((v16[138] & 1) != 0)
  {
    v7 = 0;
    goto LABEL_7;
  }
  WebCore::ResourceResponse::initNSURLResponse((WebCore::ResourceResponse *)v16);
  v7 = cf;
  if (cf)
LABEL_17:
    CFRetain(v7);
LABEL_7:
  v4 = (id)CFMakeCollectable(v7);
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v16, v8);
  v11 = v14[0];
  v14[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v15[0];
  v15[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v4;
}

void sub_19540A978(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,CFTypeRef cf)
{
  CFTypeRef v50;
  WTF::StringImpl *v51;

  v50 = cf;
  cf = 0;
  if (v50)
    CFRelease(v50);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a19, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v51);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v51);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(a1);
}

CFStringRef WebCore::filePathExtension@<X0>(CFStringRef *a1@<X8>)
{
  const __CFURL *URL;
  CFStringRef result;

  URL = (const __CFURL *)CFURLResponseGetURL();
  if (-[__CFURL isFileURL](URL, "isFileURL"))
    result = CFURLCopyPathExtension(URL);
  else
    result = 0;
  *a1 = result;
  return result;
}

uint64_t WebCore::ResourceHandle::refAuthenticationClient(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

_DWORD *WebCore::ResourceHandle::derefAuthenticationClient(_DWORD *this)
{
  if (this[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 48))(this);
  --this[2];
  return this;
}

uint64_t ___ZL21dictionaryThatCanCodeP12NSDictionary_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;

  result = objc_msgSend(a3, "conformsToProtocol:", &unk_1EE33E578);
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 32), "removeObjectForKey:", a2);
  return result;
}

CFTypeRef __copy_helper_block_e8_32c36_ZTSN3WTF9RetainPtrIP11objc_objectEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c36_ZTSN3WTF9RetainPtrIP11objc_objectEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

unint64_t *WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::destroyAll(unint64_t *result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  WTF **v4;
  uint64_t *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;

  v2 = *result;
  v3 = result[1];
  v4 = (WTF **)result[2];
  if (*result <= v3)
  {
    if (*result != v3)
    {
      v14 = &v4[v2];
      v15 = 8 * v3 - 8 * v2;
      do
      {
        v16 = *v14;
        *v14 = 0;
        if (v16)
        {
          v17 = *(_QWORD *)v16;
          *(_QWORD *)v16 = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          result = (unint64_t *)WTF::fastFree(v16, a2);
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
  }
  else
  {
    v5 = (uint64_t *)result;
    if (v3)
    {
      v6 = 8 * v3;
      do
      {
        v7 = *v4;
        *v4 = 0;
        if (v7)
        {
          v8 = *(_QWORD *)v7;
          *(_QWORD *)v7 = 0;
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          result = (unint64_t *)WTF::fastFree(v7, a2);
        }
        ++v4;
        v6 -= 8;
      }
      while (v6);
      v4 = (WTF **)v5[2];
      v2 = *v5;
    }
    v9 = *((unsigned int *)v5 + 6);
    if (v2 != v9)
    {
      v10 = &v4[v2];
      v11 = 8 * v9 - 8 * v2;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          v13 = *(_QWORD *)v12;
          *(_QWORD *)v12 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          result = (unint64_t *)WTF::fastFree(v12, a2);
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ResourceHandle::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E335B500;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 48))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ResourceHandle::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E335B500;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 48))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ResourceHandle::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::call(uint64_t a1, WebCore::ResourceRequest *this)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *((_BYTE *)this + 184);
  if ((v5 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v5 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v5;
    if ((v5 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      v5 = *((_BYTE *)this + 184) | 1;
      *((_BYTE *)this + 184) = v5;
    }
  }
  if (*(_QWORD *)this)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 496);
    if ((v5 & 2) == 0)
    {
      WebCore::ResourceRequest::doUpdatePlatformRequest(this);
      *((_BYTE *)this + 184) |= 2u;
    }
    WebCore::copyRequestWithStorageSession(v6, *((void **)this + 24), &v13);
    v7 = (const void *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = v13;
    if (v7)
      CFRelease(v7);
  }
  v8 = *(_QWORD *)(v4 + 16);
  WebCore::ResourceRequestBase::operator=(v8 + 216, (uint64_t)this);
  v9 = *((_QWORD *)this + 24);
  if (v9)
    CFRetain(*((CFTypeRef *)this + 24));
  v10 = *(const void **)(v8 + 408);
  *(_QWORD *)(v8 + 408) = v9;
  if (v10)
    CFRelease(v10);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v11 + 16))(v11, this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

void sub_19540ADFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *WebCore::IDBDatabaseInfo::bisoHeap(WebCore::IDBDatabaseInfo *this)
{
  return &WebCore::IDBDatabaseInfo::bisoHeap(void)::heap;
}

uint64_t WebCore::IDBDatabaseInfo::operator new(uint64_t this)
{
  if (this == 40)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

_QWORD *WebCore::IDBDatabaseInfo::IDBDatabaseInfo(_QWORD *result, _DWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  _DWORD *v6;
  uint64_t v7;

  v6 = *a2;
  if (*a2)
    *v6 += 2;
  *result = v6;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = 0;
  v7 = *a6;
  *a6 = 0;
  result[4] = v7;
  return result;
}

{
  _DWORD *v6;
  uint64_t v7;

  v6 = *a2;
  if (*a2)
    *v6 += 2;
  *result = v6;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = 0;
  v7 = *a6;
  *a6 = 0;
  result[4] = v7;
  return result;
}

uint64_t WebCore::IDBDatabaseInfo::IDBDatabaseInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  _BYTE v33[64];

  WTF::String::isolatedCopy();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  v5 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  if (!v6)
  {
    v9 = 0;
    LODWORD(v7) = 0;
LABEL_10:
    v8 = (uint64_t *)(v6 + 72 * v7);
    goto LABEL_11;
  }
  v7 = *(unsigned int *)(v6 - 4);
  v8 = (uint64_t *)(v6 + 72 * v7);
  if (!*(_DWORD *)(v6 - 12))
  {
    v9 = (uint64_t *)(v6 + 72 * v7);
    goto LABEL_10;
  }
  v9 = *(uint64_t **)(a2 + 32);
  if ((_DWORD)v7)
  {
    v10 = 72 * v7;
    v9 = *(uint64_t **)(a2 + 32);
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      v9 += 9;
      v10 -= 72;
      if (!v10)
      {
        v9 = v8;
        break;
      }
    }
  }
LABEL_11:
  if (v6)
    v11 = (uint64_t *)(v6 + 72 * *(unsigned int *)(v6 - 4));
  else
    v11 = 0;
  if (v11 != v9)
  {
    while (1)
    {
      WebCore::IDBObjectStoreInfo::isolatedCopy(v9 + 1, (uint64_t)v33);
      v12 = *v5;
      if (*v5
        || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash((_QWORD *)(a1 + 32), 8u, 0), (v12 = *v5) != 0))
      {
        v13 = *(_DWORD *)(v12 - 8);
      }
      else
      {
        v13 = 0;
      }
      v14 = *v9;
      v15 = *v9 + ~(*v9 << 32);
      v16 = (v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13);
      v17 = (9 * (v16 ^ (v16 >> 8))) ^ ((9 * (v16 ^ (v16 >> 8))) >> 15);
      v18 = v13 & (((v17 + ~(v17 << 27)) >> 31) ^ (v17 + ~((_DWORD)v17 << 27)));
      v19 = (uint64_t *)(v12 + 72 * v18);
      v20 = *v19;
      if (*v19)
      {
        v21 = 0;
        v22 = 1;
        do
        {
          if (v20 == v14)
          {
            WebCore::IDBObjectStoreInfo::operator=((uint64_t)(v19 + 1), (WTF::StringImpl *)v33);
            goto LABEL_40;
          }
          if (v20 == -1)
            v21 = v19;
          v18 = (v18 + v22) & v13;
          v19 = (uint64_t *)(v12 + 72 * v18);
          v20 = *v19;
          ++v22;
        }
        while (*v19);
        if (v21)
        {
          *((_BYTE *)v21 + 48) = 0;
          *((_BYTE *)v21 + 56) = 0;
          v21[8] = 0;
          v21[1] = 0;
          v21[2] = 0;
          *v21 = 0;
          *((_BYTE *)v21 + 24) = 0;
          --*(_DWORD *)(*v5 - 16);
          v14 = *v9;
          v19 = v21;
        }
      }
      *v19 = v14;
      WebCore::IDBObjectStoreInfo::operator=((uint64_t)(v19 + 1), (WTF::StringImpl *)v33);
      v24 = *v5;
      v25 = *v5 ? *(_DWORD *)(v24 - 12) + 1 : 1;
      *(_DWORD *)(v24 - 12) = v25;
      v26 = *v5;
      v27 = *v5 ? *(_DWORD *)(v26 - 12) : 0;
      v28 = (*(_DWORD *)(v26 - 16) + v27);
      v29 = *(unsigned int *)(v26 - 4);
      if (v29 > 0x400)
        break;
      if (3 * v29 <= 4 * v28)
      {
        if ((_DWORD)v29)
          goto LABEL_36;
        v30 = 8;
        goto LABEL_39;
      }
LABEL_40:
      WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)v33, v23);
      v31 = v9 + 9;
      v9 = v8;
      if (v31 != v8)
      {
        v9 = v31;
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 9;
          if (v9 == v8)
          {
            v9 = v8;
            break;
          }
        }
      }
      if (v9 == v11)
        return a1;
    }
    if (v29 > 2 * v28)
      goto LABEL_40;
LABEL_36:
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_39:
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash((_QWORD *)(a1 + 32), v30, v19);
    goto LABEL_40;
  }
  return a1;
}

WTF::StringImpl *WebCore::IDBObjectStoreInfo::isolatedCopy@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  _QWORD *v11;
  int v12;
  WTF::StringImpl *result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD **v54;
  uint64_t v55;
  char v56;
  uint64_t *v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  _QWORD v60[2];
  int v61;
  char v62;
  __int128 v63;
  WTF::StringImpl *v64;
  unsigned __int8 v65[16];
  int v66;
  __int16 v67;

  v4 = *a1;
  WTF::String::isolatedCopy();
  if (*((_BYTE *)a1 + 40))
  {
    v5 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v5 == -1)
    {
      v52 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::IDBObjectStoreInfo::IDBObjectStoreInfo(v52, v53, v54, v55, v56, v57);
    }
    *(_QWORD *)&v63 = &v62;
    ((void (*)(_QWORD *__return_ptr, __int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS6_6StringENS6_6VectorIS9_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE4copyERKSE_EUlRT_E_EEJRKNS0_6__implIJS9_SD_EEEEEEDcOSI_DpOT0____fmatrix[v5])(v60, &v63, a1 + 2);
    LOBYTE(v63) = 0;
    LODWORD(v64) = -1;
    v6 = v61;
    if (v61 == -1)
    {
      v65[0] = 1;
    }
    else
    {
      ((void (*)(char *, __int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v61])(&v62, &v63, v60);
      LODWORD(v64) = v6;
      v65[0] = 1;
      if (v61 != -1)
        ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v61])(&v62, v60);
    }
  }
  else
  {
    LOBYTE(v63) = 0;
    v65[0] = 0;
  }
  v7 = *((_BYTE *)a1 + 48);
  *(_QWORD *)a2 = v4;
  v8 = v59;
  if (v59)
    *(_DWORD *)v59 += 2;
  *(_BYTE *)(a2 + 16) = 0;
  v9 = (WTF::StringImpl *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v65[0])
  {
    *(_QWORD *)(a2 + 56) = 0;
    v11 = (_QWORD *)(a2 + 56);
LABEL_17:
    *((_BYTE *)v11 - 8) = v7;
    goto LABEL_18;
  }
  *(_DWORD *)(a2 + 32) = -1;
  v10 = (int)v64;
  if ((_DWORD)v64 == -1)
  {
    *(_QWORD *)(a2 + 56) = 0;
    v11 = (_QWORD *)(a2 + 56);
    *((_BYTE *)v11 - 16) = 1;
    goto LABEL_17;
  }
  ((void (*)(_QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v64])(v60);
  *(_QWORD *)(a2 + 56) = 0;
  v11 = (_QWORD *)(a2 + 56);
  *((_DWORD *)v11 - 6) = v10;
  v12 = v65[0];
  *((_BYTE *)v11 - 16) = 1;
  *((_BYTE *)v11 - 8) = v7;
  if (v12 && (_DWORD)v64 != -1)
    ((void (*)(_QWORD *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v64])(v60, &v63);
LABEL_18:
  result = v59;
  v59 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  v14 = (uint64_t *)a1[7];
  v58 = (WTF::StringImpl **)v11;
  v59 = 0;
  if (v14)
  {
    v15 = *((unsigned int *)v14 - 1);
    v16 = &v14[8 * v15];
    if (*((_DWORD *)v14 - 3))
    {
      v17 = v14;
      if ((_DWORD)v15)
      {
        v18 = v15 << 6;
        v17 = v14;
        while ((unint64_t)(*v17 + 1) <= 1)
        {
          v17 += 8;
          v18 -= 64;
          if (!v18)
          {
            v17 = v16;
            goto LABEL_28;
          }
        }
      }
      goto LABEL_28;
    }
    v17 = &v14[8 * v15];
  }
  else
  {
    v17 = 0;
    v15 = 0;
  }
  v16 = &v14[8 * v15];
  if (v14)
  {
LABEL_28:
    v19 = &v14[8 * (unint64_t)*((unsigned int *)v14 - 1)];
    goto LABEL_33;
  }
  v19 = 0;
LABEL_33:
  if (v19 == v17)
  {
    v40 = 0;
    goto LABEL_77;
  }
  do
  {
    v20 = *v17;
    WebCore::IDBIndexInfo::isolatedCopy(v17 + 1, (uint64_t)&v63);
    v21 = v59;
    if (v59
      || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash((uint64_t *)&v59, 8u, 0), (v21 = v59) != 0))
    {
      v22 = *((_DWORD *)v21 - 2);
    }
    else
    {
      v22 = 0;
    }
    v23 = (v20 + ~(v20 << 32)) ^ ((unint64_t)(v20 + ~(v20 << 32)) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = (char *)v21 + 64 * v26;
    v28 = *(_QWORD *)v27;
    if (*(_QWORD *)v27)
    {
      v29 = 0;
      v30 = 1;
      while (v28 != v20)
      {
        if (v28 == -1)
          v29 = v27;
        v26 = ((_DWORD)v26 + v30) & v22;
        v27 = (char *)v21 + 64 * v26;
        v28 = *(_QWORD *)v27;
        ++v30;
        if (!*(_QWORD *)v27)
        {
          if (v29)
          {
            *((_DWORD *)v29 + 12) = 0;
            *(_OWORD *)v29 = 0u;
            *((_OWORD *)v29 + 1) = 0u;
            *((_QWORD *)v29 + 4) = 0;
            *((_WORD *)v29 + 28) = 1;
            --*((_DWORD *)v21 - 4);
            v27 = v29;
          }
          goto LABEL_45;
        }
      }
      goto LABEL_60;
    }
LABEL_45:
    *(_QWORD *)v27 = v20;
    *(_OWORD *)(v27 + 8) = v63;
    v31 = v64;
    v64 = 0;
    v32 = (WTF::StringImpl *)*((_QWORD *)v27 + 3);
    *((_QWORD *)v27 + 3) = v31;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v9);
      else
        *(_DWORD *)v32 -= 2;
    }
    v9 = (WTF::StringImpl *)(v27 + 32);
    v33 = *((unsigned int *)v27 + 12);
    if ((_DWORD)v33 == -1)
    {
      if (v66 != -1)
      {
LABEL_52:
        v60[0] = v27 + 32;
        ((void (*)(_QWORD *))off_1E335B618[v66])(v60);
      }
    }
    else
    {
      if (v66 != -1)
        goto LABEL_52;
      ((void (*)(_QWORD *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v33])(v60, v9);
      *((_DWORD *)v27 + 12) = -1;
    }
    *((_WORD *)v27 + 28) = v67;
    v34 = *((_DWORD *)v21 - 4);
    v35 = *((_DWORD *)v21 - 3) + 1;
    *((_DWORD *)v21 - 3) = v35;
    v36 = (v34 + v35);
    v37 = *((unsigned int *)v21 - 1);
    if (v37 <= 0x400)
    {
      if (3 * v37 > 4 * v36)
        goto LABEL_60;
      if ((_DWORD)v37)
LABEL_56:
        v38 = (_DWORD)v37 << (6 * v35 >= (2 * v37));
      else
        v38 = 8;
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash((uint64_t *)&v59, v38, (uint64_t *)v27);
      goto LABEL_60;
    }
    if (v37 <= 2 * v36)
      goto LABEL_56;
LABEL_60:
    if (v66 != -1)
      ((void (*)(_QWORD *, unsigned __int8 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v66])(v60, v65);
    v66 = -1;
    result = v64;
    v64 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
    v39 = v17 + 8;
    v17 = v16;
    if (v39 != v16)
    {
      v17 = v39;
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = v16;
          break;
        }
      }
    }
  }
  while (v17 != v19);
  v40 = v59;
LABEL_77:
  v59 = 0;
  v41 = *v58;
  *v58 = v40;
  if (v41)
  {
    v42 = *((unsigned int *)v41 - 1);
    if ((_DWORD)v42)
    {
      v43 = (uint64_t)v41 + 24;
      do
      {
        if (*(_QWORD *)(v43 - 24) != -1)
        {
          v44 = *(unsigned int *)(v43 + 24);
          if ((_DWORD)v44 != -1)
            ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v44])(&v63, v43 + 8);
          *(_DWORD *)(v43 + 24) = -1;
          v45 = *(WTF::StringImpl **)v43;
          *(_QWORD *)v43 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, v9);
            else
              *(_DWORD *)v45 -= 2;
          }
        }
        v43 += 64;
        --v42;
      }
      while (v42);
    }
    result = (WTF::StringImpl *)WTF::fastFree((WTF::StringImpl *)((char *)v41 - 16), v9);
    v47 = v59;
    if (v59)
    {
      v48 = *((unsigned int *)v59 - 1);
      if ((_DWORD)v48)
      {
        v49 = (char *)v59 + 24;
        do
        {
          if (*((_QWORD *)v49 - 3) != -1)
          {
            v50 = *((unsigned int *)v49 + 6);
            if ((_DWORD)v50 != -1)
              ((void (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v50])(&v63, v49 + 8);
            *((_DWORD *)v49 + 6) = -1;
            v51 = *(WTF::StringImpl **)v49;
            *(_QWORD *)v49 = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2)
                WTF::StringImpl::destroy(v51, v46);
              else
                *(_DWORD *)v51 -= 2;
            }
          }
          v49 += 64;
          --v48;
        }
        while (v48);
      }
      return (WTF::StringImpl *)WTF::fastFree((WTF::StringImpl *)((char *)v47 - 16), v46);
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  WTF::StringImpl *v8;
  int v9;
  _QWORD *v10;
  int v11;
  WTF::StringImpl *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _QWORD v33[2];
  int v34;
  char v35;
  __int128 v36;
  WTF::StringImpl *v37;
  unsigned __int8 v38[16];
  unsigned int v39;
  __int16 v40;

  v4 = *a1;
  WTF::String::isolatedCopy();
  if (*((_BYTE *)a1 + 40))
  {
    v5 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v5 == -1)
    {
      v30 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::IDBObjectStoreInfo::indexNames(v30, v31);
    }
    *(_QWORD *)&v36 = &v35;
    ((void (*)(_QWORD *__return_ptr, __int128 *, uint64_t *))off_1E335B608[v5])(v33, &v36, a1 + 2);
    LOBYTE(v36) = 0;
    LODWORD(v37) = -1;
    v6 = v34;
    if (v34 == -1)
    {
      v38[0] = 1;
    }
    else
    {
      ((void (*)(char *, __int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v34])(&v35, &v36, v33);
      LODWORD(v37) = v6;
      v38[0] = 1;
      if (v34 != -1)
        ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v34])(&v35, v33);
    }
  }
  else
  {
    LOBYTE(v36) = 0;
    v38[0] = 0;
  }
  v7 = *((_BYTE *)a1 + 48);
  *(_QWORD *)a2 = v4;
  if (v32)
    *(_DWORD *)v32 += 2;
  *(_BYTE *)(a2 + 16) = 0;
  v8 = (WTF::StringImpl *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v32;
  *(_BYTE *)(a2 + 40) = 0;
  if (!v38[0])
  {
    *(_QWORD *)(a2 + 56) = 0;
    v10 = (_QWORD *)(a2 + 56);
LABEL_17:
    *((_BYTE *)v10 - 8) = v7;
    goto LABEL_18;
  }
  *(_DWORD *)(a2 + 32) = -1;
  v9 = (int)v37;
  if ((_DWORD)v37 == -1)
  {
    *(_QWORD *)(a2 + 56) = 0;
    v10 = (_QWORD *)(a2 + 56);
    *((_BYTE *)v10 - 16) = 1;
    goto LABEL_17;
  }
  ((void (*)(_QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v37])(v33);
  *(_QWORD *)(a2 + 56) = 0;
  v10 = (_QWORD *)(a2 + 56);
  *((_DWORD *)v10 - 6) = v9;
  v11 = v38[0];
  *((_BYTE *)v10 - 16) = 1;
  *((_BYTE *)v10 - 8) = v7;
  if (v11 && (_DWORD)v37 != -1)
    ((void (*)(_QWORD *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v37])(v33, &v36);
LABEL_18:
  result = v32;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v32, v8);
    else
      *(_DWORD *)v32 -= 2;
  }
  v13 = a1[7];
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    v15 = v13 + (v14 << 6);
    if (*(_DWORD *)(v13 - 12))
    {
      v16 = a1[7];
      if ((_DWORD)v14)
      {
        v17 = v14 << 6;
        v16 = a1[7];
        while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
        {
          v16 += 64;
          v17 -= 64;
          if (!v17)
          {
            v16 = v15;
            goto LABEL_28;
          }
        }
      }
      goto LABEL_28;
    }
    v16 = v13 + (v14 << 6);
  }
  else
  {
    v16 = 0;
    v14 = 0;
  }
  v15 = v13 + (v14 << 6);
  if (!v13)
  {
    v18 = 0;
    goto LABEL_33;
  }
LABEL_28:
  v18 = v13 + ((unint64_t)*(unsigned int *)(v13 - 4) << 6);
LABEL_33:
  if (v18 != v16)
  {
    while (1)
    {
      WebCore::IDBIndexInfo::isolatedCopy((uint64_t *)(v16 + 8), (uint64_t)&v36);
      *(_OWORD *)(v16 + 8) = v36;
      v20 = v37;
      v37 = 0;
      v21 = *(WTF::StringImpl **)(v16 + 24);
      *(_QWORD *)(v16 + 24) = v20;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v19);
        else
          *(_DWORD *)v21 -= 2;
      }
      v8 = (WTF::StringImpl *)(v16 + 32);
      v22 = *(unsigned int *)(v16 + 48);
      if ((_DWORD)v22 != -1)
        break;
      if (v39 != -1)
        goto LABEL_41;
      *(_WORD *)(v16 + 56) = v40;
LABEL_45:
      v39 = -1;
      result = v37;
      v37 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      v24 = v16 + 64;
      v16 = v15;
      if (v24 != v15)
      {
        v16 = v24;
        while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
        {
          v16 += 64;
          if (v16 == v15)
          {
            v16 = v15;
            break;
          }
        }
      }
      if (v16 == v18)
      {
        v13 = a1[7];
        goto LABEL_57;
      }
    }
    if (v39 == -1)
    {
      ((void (*)(_QWORD *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v22])(v33, v8);
      *(_DWORD *)(v16 + 48) = -1;
    }
    else
    {
LABEL_41:
      v33[0] = v16 + 32;
      ((void (*)(_QWORD *))off_1E335B618[v39])(v33);
    }
    v23 = v39;
    *(_WORD *)(v16 + 56) = v40;
    if ((_DWORD)v23 != -1)
      ((void (*)(_QWORD *, unsigned __int8 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v23])(v33, v38);
    goto LABEL_45;
  }
LABEL_57:
  a1[7] = 0;
  v25 = *v10;
  *v10 = v13;
  if (v25)
  {
    v26 = *(unsigned int *)(v25 - 4);
    if ((_DWORD)v26)
    {
      v27 = v25 + 24;
      do
      {
        if (*(_QWORD *)(v27 - 24) != -1)
        {
          v28 = *(unsigned int *)(v27 + 24);
          if ((_DWORD)v28 != -1)
            ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v28])(&v36, v27 + 8);
          *(_DWORD *)(v27 + 24) = -1;
          v29 = *(WTF::StringImpl **)v27;
          *(_QWORD *)v27 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v8);
            else
              *(_DWORD *)v29 -= 2;
          }
        }
        v27 += 64;
        --v26;
      }
      while (v26);
    }
    return (WTF::StringImpl *)WTF::fastFree((WTF *)(v25 - 16), v8);
  }
  return result;
}

uint64_t WebCore::IDBObjectStoreInfo::IDBObjectStoreInfo(uint64_t a1, uint64_t a2, _DWORD **a3, uint64_t a4, char a5, uint64_t *a6)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  *(_QWORD *)a1 = a2;
  v9 = *a3;
  if (*a3)
    *v9 += 2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a4 + 24))
  {
    *(_DWORD *)(a1 + 32) = -1;
    v10 = *(unsigned int *)(a4 + 16);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v10])(&v13);
      *(_DWORD *)(a1 + 32) = v10;
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 56) = 0;
  v11 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 56) = v11;
  return a1;
}

{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  *(_QWORD *)a1 = a2;
  v9 = *a3;
  if (*a3)
    *v9 += 2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a4 + 24))
  {
    *(_DWORD *)(a1 + 32) = -1;
    v10 = *(unsigned int *)(a4 + 16);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v10])(&v13);
      *(_DWORD *)(a1 + 32) = v10;
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 56) = 0;
  v11 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 56) = v11;
  return a1;
}

WTF::StringImpl *WebCore::IDBDatabaseInfo::renameObjectStore(WTF::StringImpl *this, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = (WTF::StringImpl **)(v3 + 72 * v8);
    v10 = *v9;
    if (*v9 != a2)
    {
      v11 = 1;
      while (v10)
      {
        v8 = (v8 + v11) & v4;
        v9 = (WTF::StringImpl **)(v3 + 72 * v8);
        v10 = *v9;
        ++v11;
        if (*v9 == a2)
          goto LABEL_8;
      }
      v9 = (WTF::StringImpl **)(v3 + 72 * *(unsigned int *)(v3 - 4));
    }
LABEL_8:
    if (v9 != (WTF::StringImpl **)(v3 + 72 * *(unsigned int *)(v3 - 4)))
    {
      v12 = *a3;
      if (*a3)
        *(_DWORD *)v12 += 2;
      this = v9[2];
      v9[2] = v12;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::IDBDatabaseInfo::objectStoreNames@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  _QWORD *v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(this + 32);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 12);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v5 = this;
        this = WTF::fastMalloc((WTF *)(8 * v4));
        *(_DWORD *)(a2 + 8) = v4;
        *(_QWORD *)a2 = this;
        v6 = *(_QWORD *)(v5 + 32);
        if (v6 && *(_DWORD *)(v6 - 12))
        {
          v7 = *(unsigned int *)(v6 - 4);
          if ((_DWORD)v7)
          {
            v8 = 72 * v7;
            for (i = *(_QWORD **)(v5 + 32); (unint64_t)(*i + 1) <= 1; i += 9)
            {
              v8 -= 72;
              if (!v8)
                return this;
            }
          }
          else
          {
            i = *(_QWORD **)(v5 + 32);
          }
          v10 = (_QWORD *)(v6 + 72 * v7);
          if (i != v10)
          {
            v11 = 0;
LABEL_14:
            v12 = (_DWORD *)i[2];
            if (v12)
              *v12 += 2;
            v13 = v11 + 1;
            *(_QWORD *)(this + 8 * v11) = v12;
            while (1)
            {
              i += 9;
              if (i == v10)
                break;
              if ((unint64_t)(*i + 1) > 1)
              {
                ++v11;
                if (i != v10)
                  goto LABEL_14;
                break;
              }
            }
            *(_DWORD *)(a2 + 12) = v13;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = *(_QWORD *)a2 + ~(*(_QWORD *)a2 << 32);
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
  v9 = (uint64_t *)(v2 + 72 * v8);
  v10 = *v9;
  if (*v9 != *(_QWORD *)a2)
  {
    v11 = 1;
    while (v10)
    {
      v8 = (v8 + v11) & v4;
      v9 = (uint64_t *)(v2 + 72 * v8);
      v10 = *v9;
      ++v11;
      if (*v9 == *(_QWORD *)a2)
        goto LABEL_8;
    }
    v9 = (uint64_t *)(v2 + 72 * *(unsigned int *)(v2 - 4));
  }
LABEL_8:
  if ((uint64_t *)(v2 + 72 * *(unsigned int *)(v2 - 4)) == v9)
    return 0;
  *v9 = -1;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(v9 + 1), a2);
  ++*(_DWORD *)(*a1 - 16);
  v12 = *a1;
  if (*a1)
    v13 = *(_DWORD *)(v12 - 12) - 1;
  else
    v13 = -1;
  *(_DWORD *)(v12 - 12) = v13;
  v15 = *a1;
  if (*a1)
  {
    v16 = 6 * *(_DWORD *)(v15 - 12);
    v17 = *(_DWORD *)(v15 - 4);
    if (v16 < v17 && v17 >= 9)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v17 >> 1, 0);
  }
  return 1;
}

uint64_t WebCore::IDBError::IDBError(uint64_t result, __int16 a2, _DWORD **a3)
{
  _DWORD *v3;

  *(_WORD *)result = a2;
  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

{
  _DWORD *v3;

  *(_WORD *)result = a2;
  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

__n128 WebCore::IDBGetAllRecordsData::isolatedCopy@<Q0>(WebCore::IDBGetAllRecordsData *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  WebCore::IDBKeyRangeData::isolatedCopy(this, a2);
  *(_BYTE *)(a2 + 72) = *((_BYTE *)this + 72);
  *(_DWORD *)(a2 + 76) = *((_DWORD *)this + 19);
  *(_BYTE *)(a2 + 80) = *((_BYTE *)this + 80);
  result = *(__n128 *)((char *)this + 88);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

_QWORD *WebCore::IDBGetRecordData::isolatedCopy@<X0>(WebCore::IDBGetRecordData *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;

  result = WebCore::IDBKeyRangeData::isolatedCopy(this, a2);
  *(_BYTE *)(a2 + 72) = *((_BYTE *)this + 72);
  return result;
}

double WebCore::IDBIndexInfo::IDBIndexInfo(WebCore::IDBIndexInfo *this)
{
  double result;

  *((_DWORD *)this + 10) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_WORD *)this + 24) = 1;
  return result;
}

{
  double result;

  *((_DWORD *)this + 10) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_WORD *)this + 24) = 1;
  return result;
}

uint64_t WebCore::IDBIndexInfo::IDBIndexInfo(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4, uint64_t a5, char a6, char a7)
{
  _DWORD *v10;
  uint64_t v11;
  char v13;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v10 = *a4;
  if (*a4)
    *v10 += 2;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 40) = -1;
  v11 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v11])(&v13);
    *(_DWORD *)(a1 + 40) = v11;
  }
  *(_BYTE *)(a1 + 48) = a6;
  *(_BYTE *)(a1 + 49) = a7;
  return a1;
}

{
  _DWORD *v10;
  uint64_t v11;
  char v13;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v10 = *a4;
  if (*a4)
    *v10 += 2;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 40) = -1;
  v11 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v11])(&v13);
    *(_DWORD *)(a1 + 40) = v11;
  }
  *(_BYTE *)(a1 + 48) = a6;
  *(_BYTE *)(a1 + 49) = a7;
  return a1;
}

WTF::StringImpl *WebCore::IDBIndexInfo::isolatedCopy@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *result;
  uint64_t v14;
  _QWORD v15[2];
  unsigned int v16;
  WTF::StringImpl *v17;
  char v18;
  char *v19;

  v4 = *a1;
  v5 = a1[1];
  WTF::String::isolatedCopy();
  v6 = *((unsigned int *)a1 + 10);
  if ((_DWORD)v6 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::IDBIndexInfo::isolatedCopy(v14);
  }
  else
  {
    v19 = &v18;
    ((void (*)(_QWORD *__return_ptr, char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS6_6StringENS6_6VectorIS9_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE4copyERKSE_EUlRT_E_EEJRKNS0_6__implIJS9_SD_EEEEEEDcOSI_DpOT0____fmatrix[v6])(v15, &v19, a1 + 3);
    v7 = *((_BYTE *)a1 + 48);
    v8 = *((_BYTE *)a1 + 49);
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    v9 = v17;
    if (v17)
      *(_DWORD *)v17 += 2;
    *(_BYTE *)(a2 + 24) = 0;
    v10 = (WTF::StringImpl *)(a2 + 24);
    *(_QWORD *)(a2 + 16) = v9;
    *(_DWORD *)(a2 + 40) = -1;
    v11 = v16;
    if (v16 == -1)
    {
      *(_BYTE *)(a2 + 48) = v7;
      *(_BYTE *)(a2 + 49) = v8;
    }
    else
    {
      ((void (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v16])(&v19);
      *(_DWORD *)(a2 + 40) = v11;
      v12 = v16;
      *(_BYTE *)(a2 + 48) = v7;
      *(_BYTE *)(a2 + 49) = v8;
      if ((_DWORD)v12 != -1)
        ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v12])(&v19, v15);
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *result;
  WebCore::IDBIterateCursorData *v14;
  uint64_t v15;
  _QWORD v16[2];
  unsigned int v17;
  WTF::StringImpl *v18;
  char v19;
  char *v20;

  v4 = *a1;
  v5 = a1[1];
  WTF::String::isolatedCopy();
  v6 = *((unsigned int *)a1 + 10);
  if ((_DWORD)v6 == -1)
  {
    v14 = (WebCore::IDBIterateCursorData *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::IDBIterateCursorData::isolatedCopy(v14, v15);
  }
  else
  {
    v20 = &v19;
    ((void (*)(_QWORD *__return_ptr, char **, uint64_t *))off_1E335B608[v6])(v16, &v20, a1 + 3);
    v7 = *((_BYTE *)a1 + 48);
    v8 = *((_BYTE *)a1 + 49);
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    v9 = v18;
    if (v18)
      *(_DWORD *)v18 += 2;
    *(_BYTE *)(a2 + 24) = 0;
    v10 = (WTF::StringImpl *)(a2 + 24);
    *(_QWORD *)(a2 + 16) = v9;
    *(_DWORD *)(a2 + 40) = -1;
    v11 = v17;
    if (v17 == -1)
    {
      *(_BYTE *)(a2 + 48) = v7;
      *(_BYTE *)(a2 + 49) = v8;
    }
    else
    {
      ((void (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v17])(&v20);
      *(_DWORD *)(a2 + 40) = v11;
      v12 = v17;
      *(_BYTE *)(a2 + 48) = v7;
      *(_BYTE *)(a2 + 49) = v8;
      if ((_DWORD)v12 != -1)
        ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v12])(&v20, v16);
    }
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::IDBIterateCursorData::isolatedCopy@<X0>(WebCore::IDBIterateCursorData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  _QWORD *result;
  int v8;
  uint64_t v9;
  _QWORD v10[2];
  int v11;
  char v12;
  char *v13;

  v3 = *((unsigned int *)this + 6);
  if ((_DWORD)v3 == -1)
    goto LABEL_10;
  v13 = &v12;
  ((void (*)(_QWORD *__return_ptr, char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v3])(v10, &v13, (char *)this + 8);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = -1;
  v5 = v11;
  if (v11 != -1)
  {
    ((void (*)(char **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v11])(&v13, a2 + 8, v10);
    *(_DWORD *)(a2 + 24) = v5;
    if (v11 != -1)
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v11])(&v13, v10);
  }
  v6 = *((unsigned int *)this + 14);
  if ((_DWORD)v6 == -1)
  {
LABEL_10:
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_QWORD *)WebCore::IDBObjectStoreInfo::IDBObjectStoreInfo(v9);
  }
  else
  {
    v13 = &v12;
    result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v6])(v10, &v13, (char *)this + 40);
    *(_BYTE *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 56) = -1;
    v8 = v11;
    if (v11 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v11])(&v13);
      *(_DWORD *)(a2 + 56) = v8;
      if (v11 != -1)
        result = (_QWORD *)((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v11])(&v13, v10);
    }
    *(_DWORD *)(a2 + 64) = *((_DWORD *)this + 16);
    *(_BYTE *)(a2 + 68) = *((_BYTE *)this + 68);
  }
  return result;
}

uint64_t WebCore::IDBObjectStoreInfo::IDBObjectStoreInfo(uint64_t this)
{
  *(_BYTE *)(this + 40) = 0;
  *(_BYTE *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

{
  *(_BYTE *)(this + 40) = 0;
  *(_BYTE *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

uint64_t WebCore::IDBObjectStoreInfo::indexNames@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  _QWORD *v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(this + 56);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 12);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v5 = this;
        this = WTF::fastMalloc((WTF *)(8 * v4));
        *(_DWORD *)(a2 + 8) = v4;
        *(_QWORD *)a2 = this;
        v6 = *(_QWORD *)(v5 + 56);
        if (v6 && *(_DWORD *)(v6 - 12))
        {
          v7 = *(unsigned int *)(v6 - 4);
          if ((_DWORD)v7)
          {
            v8 = v7 << 6;
            for (i = *(_QWORD **)(v5 + 56); (unint64_t)(*i + 1) <= 1; i += 8)
            {
              v8 -= 64;
              if (!v8)
                return this;
            }
          }
          else
          {
            i = *(_QWORD **)(v5 + 56);
          }
          v10 = (_QWORD *)(v6 + (v7 << 6));
          if (i != v10)
          {
            v11 = 0;
LABEL_14:
            v12 = (_DWORD *)i[3];
            if (v12)
              *v12 += 2;
            v13 = v11 + 1;
            *(_QWORD *)(this + 8 * v11) = v12;
            while (1)
            {
              i += 8;
              if (i == v10)
                break;
              if ((unint64_t)(*i + 1) > 1)
              {
                ++v11;
                if (i != v10)
                  goto LABEL_14;
                break;
              }
            }
            *(_DWORD *)(a2 + 12) = v13;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  char v21;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = *(_QWORD *)a2 + ~(*(_QWORD *)a2 << 32);
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
  v9 = *(_QWORD *)(v2 + (v8 << 6));
  if (v9 != *(_QWORD *)a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v2 + ((unint64_t)v8 << 6));
      ++v10;
      if (v9 == *(_QWORD *)a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = v2 + (v8 << 6);
  *(_QWORD *)v12 = -1;
  v13 = *(unsigned int *)(v12 + 48);
  if ((_DWORD)v13 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v13])(&v21, v12 + 32);
  *(_DWORD *)(v12 + 48) = -1;
  v14 = *(WTF::StringImpl **)(v12 + 24);
  *(_QWORD *)(v12 + 24) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  ++*(_DWORD *)(*a1 - 16);
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) - 1;
  else
    v16 = -1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
  {
    v18 = 6 * *(_DWORD *)(v17 - 12);
    v19 = *(_DWORD *)(v17 - 4);
    if (v18 < v19 && v19 >= 9)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v19 >> 1, 0);
  }
  return 1;
}

uint64_t WebCore::IDBOpenRequestData::IDBOpenRequestData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  char v16;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  v11 = *(_DWORD **)a5;
  if (*(_QWORD *)a5)
    *v11 += 2;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = v11;
  *(_DWORD *)(a1 + 56) = -1;
  v12 = *(unsigned int *)(a5 + 32);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_2[v12])(&v15);
    *(_DWORD *)(a1 + 56) = v12;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  v13 = *(unsigned int *)(a5 + 64);
  if ((_DWORD)v13 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_2[v13])(&v16);
    *(_DWORD *)(a1 + 88) = v13;
  }
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a5 + 72);
  *(_QWORD *)(a1 + 104) = a6;
  *(_BYTE *)(a1 + 112) = a7;
  return a1;
}

{
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  char v16;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  v11 = *(_DWORD **)a5;
  if (*(_QWORD *)a5)
    *v11 += 2;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = v11;
  *(_DWORD *)(a1 + 56) = -1;
  v12 = *(unsigned int *)(a5 + 32);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_2[v12])(&v15);
    *(_DWORD *)(a1 + 56) = v12;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  v13 = *(unsigned int *)(a5 + 64);
  if ((_DWORD)v13 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_2[v13])(&v16);
    *(_DWORD *)(a1 + 88) = v13;
  }
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a5 + 72);
  *(_QWORD *)(a1 + 104) = a6;
  *(_BYTE *)(a1 + 112) = a7;
  return a1;
}

WTF::StringImpl *WebCore::IDBOpenRequestData::isolatedCopy@<X0>(WebCore::IDBOpenRequestData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *result;
  __int128 v13;
  char v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v13 = *(_OWORD *)this;
  v4 = *((_QWORD *)this + 2);
  WebCore::IDBDatabaseIdentifier::isolatedCopy((uint64_t)this + 24, (uint64_t)&v15);
  v5 = *((_QWORD *)this + 13);
  v6 = *((_BYTE *)this + 112);
  *(_OWORD *)a2 = v13;
  *(_QWORD *)(a2 + 16) = v4;
  v7 = v15;
  if (v15)
    *(_DWORD *)v15 += 2;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 24) = v7;
  *(_DWORD *)(a2 + 56) = -1;
  v8 = v17;
  if (v17 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_2[v17])(&v14);
    *(_DWORD *)(a2 + 56) = v8;
  }
  *(_BYTE *)(a2 + 64) = 0;
  v9 = (WTF::StringImpl *)(a2 + 64);
  *(_DWORD *)(a2 + 88) = -1;
  v10 = v19;
  if (v19 == -1)
  {
    *(_BYTE *)(a2 + 96) = v20;
    *(_QWORD *)(a2 + 104) = v5;
    *(_BYTE *)(a2 + 112) = v6;
  }
  else
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_2[v19])(&v14);
    *(_DWORD *)(a2 + 88) = v10;
    v11 = v19;
    *(_BYTE *)(a2 + 96) = v20;
    *(_QWORD *)(a2 + 104) = v5;
    *(_BYTE *)(a2 + 112) = v6;
    if ((_DWORD)v11 != -1)
      ((void (*)(char *, uint64_t *))off_1E335B628[v11])(&v14, &v18);
  }
  v19 = -1;
  if (v17 != -1)
    ((void (*)(char *, uint64_t *))off_1E335B628[v17])(&v14, &v16);
  v17 = -1;
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringENS8_6VectorISB_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE4copyEOSG_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEEEEDcSJ_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringENS8_6VectorISB_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE4copyEOSG_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEEEEDcSJ_DpT0_(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  WTF::StringImpl **v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v4 = *(WTF::StringImpl ***)a1;
  v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5)
  {
    v7 = &v4[v5];
    do
    {
      WTF::String::isolatedCopy();
      v9 = v11;
      v11 = 0;
      v10 = *v4;
      *v4 = v9;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::destroy(v10, v8);
          v11 = 0;
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
      }
      ++v4;
    }
    while (v4 < v7);
    v4 = *(WTF::StringImpl ***)a1;
    LODWORD(v5) = *(_DWORD *)(a1 + 12);
  }
  v6 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = v5;
  *(_DWORD *)(a2 + 16) = 1;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)(((unint64_t)a2 << 6) | 0x10));
  if (a2)
  {
    v10 = v8 + 73;
    do
    {
      *(_DWORD *)(v10 - 9) = 0;
      *(_OWORD *)(v10 - 57) = 0uLL;
      *(_OWORD *)(v10 - 41) = 0uLL;
      *(_QWORD *)(v10 - 25) = 0;
      *(_WORD *)(v10 - 1) = 1;
      v10 += 64;
      --v7;
    }
    while (v7);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v41 = v5;
    do
    {
      v14 = (uint64_t *)(v4 + (v11 << 6));
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + ((unint64_t)v23 << 6));
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = v25;
          v28 = v18 + ((unint64_t)v25 << 6);
          v29 = (_DWORD *)(v28 + 48);
          if (*(_DWORD *)(v28 + 48) != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[*(unsigned int *)(v28 + 48)])(&v47, v28 + 32);
          *v29 = -1;
          v30 = *(WTF::StringImpl **)(v28 + 24);
          *(_QWORD *)(v28 + 24) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v9);
            else
              *(_DWORD *)v30 -= 2;
          }
          v44 = v12;
          *(_QWORD *)v28 = *v14;
          v31 = v18 + (v27 << 6);
          v32 = v4;
          v33 = v4 + (v11 << 6);
          *(_OWORD *)(v31 + 8) = *(_OWORD *)(v33 + 8);
          v35 = *(_QWORD *)(v33 + 24);
          v34 = (WTF::StringImpl **)(v33 + 24);
          *(_QWORD *)(v33 + 24) = 0;
          *(_BYTE *)(v31 + 32) = 0;
          v9 = (WTF::StringImpl *)(v31 + 32);
          *(_QWORD *)(v28 + 24) = v35;
          *v29 = -1;
          v37 = (_DWORD *)(v33 + 48);
          v36 = *(unsigned int *)(v33 + 48);
          if ((_DWORD)v36 != -1)
          {
            ((void (*)(char *, WTF::StringImpl *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v36])(&v48, v9, v33 + 32);
            *v29 = v36;
          }
          *(_WORD *)(v31 + 56) = *(_WORD *)(v33 + 56);
          v38 = *v37;
          if ((_DWORD)v38 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v38])(&v46, v32 + (v11 << 6) + 32);
          *v37 = -1;
          v39 = *v34;
          *v34 = 0;
          v12 = v44;
          v4 = v32;
          v13 = v41;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v9);
            else
              *(_DWORD *)v39 -= 2;
          }
          if (v14 == a3)
            v12 = v28;
        }
        else
        {
          v16 = v4 + (v11 << 6);
          if (*(_DWORD *)(v16 + 48) != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[*(unsigned int *)(v16 + 48)])(&v45, v16 + 32);
          *(_DWORD *)(v16 + 48) = -1;
          v17 = *(WTF::StringImpl **)(v16 + 24);
          *(_QWORD *)(v16 + 24) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v9);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v12;
}

uint64_t WebCore::IDBObjectStoreInfo::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v6 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)(a1 + 16);
  v8 = (uint64_t *)((char *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40))
  {
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_18;
    v9 = *(unsigned int *)(a1 + 32);
    v10 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 == -1)
    {
      if ((_DWORD)v10 == -1)
        goto LABEL_18;
    }
    else if ((_DWORD)v10 == -1)
    {
      ((void (*)(char *, WTF::StringImpl *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v9])(&v21, v7, v8);
      *(_DWORD *)(a1 + 32) = -1;
      goto LABEL_18;
    }
    v20 = a1 + 16;
    ((void (*)(uint64_t *))off_1E335B618[v10])(&v20);
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    v11 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v11 != -1)
      ((void (*)(char *, WTF::StringImpl *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v11])(&v22, v7, v8);
    *(_DWORD *)(a1 + 32) = -1;
    *(_BYTE *)(a1 + 40) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 32) = -1;
    v12 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(char *, WTF::StringImpl *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v12])(&v23, v7, v8);
      *(_DWORD *)(a1 + 32) = v12;
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
LABEL_18:
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v13 = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  v14 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v13;
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v15)
    {
      v16 = v14 + 24;
      do
      {
        if (*(_QWORD *)(v16 - 24) != -1)
        {
          v17 = *(unsigned int *)(v16 + 24);
          if ((_DWORD)v17 != -1)
            ((void (*)(char *, uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v17])(&v24, v16 + 8, v8);
          *(_DWORD *)(v16 + 24) = -1;
          v18 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v7);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        v16 += 64;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v14 - 16), v7);
  }
  return a1;
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(_QWORD *a1, unsigned int a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *result;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v46;
  char v47;

  v4 = a1;
  v5 = *a1;
  if (*a1)
  {
    LODWORD(v6) = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    LODWORD(v6) = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(72 * a2 + 16));
  if (a2)
  {
    v10 = a2;
    v11 = (_QWORD *)(v8 + 80);
    do
    {
      *((_BYTE *)v11 - 16) = 0;
      *((_BYTE *)v11 - 8) = 0;
      *v11 = 0;
      *(v11 - 7) = 0;
      *(v11 - 6) = 0;
      *(v11 - 8) = 0;
      *((_BYTE *)v11 - 40) = 0;
      v11 += 9;
      --v10;
    }
    while (v10);
  }
  *v4 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*v4 - 8) = a2 - 1;
  *(_DWORD *)(*v4 - 16) = 0;
  *(_DWORD *)(*v4 - 12) = v7;
  if ((_DWORD)v6)
  {
    v12 = 0;
    v13 = 0;
    v6 = v6;
    v42 = v4;
    v43 = v5;
    v44 = v6;
    do
    {
      v14 = (uint64_t *)(v5 + 72 * v12);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v16 = *v4;
          v46 = v13;
          if (*v4)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v13 = (_QWORD *)(v16 + 72 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (*v13);
          v24 = v23;
          v25 = v16 + 72 * v23;
          WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(v25 + 8), v9);
          v27 = v24;
          v28 = v5 + 72 * v12;
          v29 = *(_OWORD *)v14;
          v30 = *(_QWORD *)(v28 + 16);
          *(_QWORD *)(v28 + 16) = 0;
          *(_BYTE *)(v25 + 24) = 0;
          v31 = v25 + 24;
          *(_OWORD *)v13 = v29;
          *(_QWORD *)(v31 - 8) = v30;
          *(_BYTE *)(v31 + 24) = 0;
          v32 = (_BYTE *)(v31 + 24);
          if (*(_BYTE *)(v28 + 48))
          {
            v33 = v16 + 72 * v27;
            *(_DWORD *)(v33 + 40) = -1;
            v34 = (_DWORD *)(v33 + 40);
            v35 = *(unsigned int *)(v5 + 72 * v12 + 40);
            if ((_DWORD)v35 != -1)
            {
              v36 = v31;
              v37 = v27;
              ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v35])(&v47, v36, v28 + 24);
              v27 = v37;
              *v34 = v35;
            }
            *v32 = 1;
            v4 = v42;
            v5 = v43;
          }
          v38 = v16 + 72 * v27;
          v39 = v5 + 72 * v12;
          *(_BYTE *)(v38 + 56) = *(_BYTE *)(v39 + 56);
          *(_QWORD *)(v38 + 64) = 0;
          v40 = *(_QWORD *)(v39 + 64);
          *(_QWORD *)(v39 + 64) = 0;
          *(_QWORD *)(v38 + 64) = v40;
          WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(v28 + 8), v26);
          v6 = v44;
          if (v14 != a3)
            v13 = v46;
        }
        else
        {
          WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(v5 + 72 * v12 + 8), v9);
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

uint64_t WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBObjectStoreInfo&>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 72 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v8 + 72 * v23;
        *(_BYTE *)(a4 + 16) = 0;
        return WebCore::IDBObjectStoreInfo::operator=((uint64_t)(v16 + 1), a3);
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 72 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *((_BYTE *)v18 + 48) = 0;
      *((_BYTE *)v18 + 56) = 0;
      v18[8] = 0;
      v18[1] = 0;
      v18[2] = 0;
      *v18 = 0;
      *((_BYTE *)v18 + 24) = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  result = WebCore::IDBObjectStoreInfo::operator=((uint64_t)(v16 + 1), a3);
  v21 = *a1;
  if (*a1)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *a1;
  if (*a1)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
      goto LABEL_28;
  }
  else if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v28 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
LABEL_29:
    result = (uint64_t)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v28, v16);
    v16 = (uint64_t *)result;
    v24 = *a1;
    if (*a1)
      LODWORD(v27) = *(_DWORD *)(v24 - 4);
    else
      LODWORD(v27) = 0;
  }
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v24 + 72 * v27;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

WTF::StringImpl *WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::inlineSet<unsigned long long,WebCore::IDBIndexInfo&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  _DWORD *v20;
  WTF::StringImpl *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)a2 + ~(*(_QWORD *)a2 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ ((_DWORD)v14 + ~((_DWORD)v14 << 27)));
  v16 = (WTF::StringImpl *)(v8 + (v15 << 6));
  v17 = *(_QWORD *)v16;
  if (!*(_QWORD *)v16)
    goto LABEL_12;
  v18 = 0;
  v19 = 1;
  do
  {
    if (v17 == v11)
    {
      if ((v9 & 1) != 0)
        v24 = 0;
      else
        v24 = *(unsigned int *)(v8 - 4);
      *(_QWORD *)a4 = v16;
      *(_QWORD *)(a4 + 8) = v8 + (v24 << 6);
      *(_BYTE *)(a4 + 16) = 0;
      *(_OWORD *)((char *)v16 + 8) = *(_OWORD *)a3;
      v32 = *(_DWORD **)(a3 + 16);
      if (v32)
        *v32 += 2;
      result = (WTF::StringImpl *)*((_QWORD *)v16 + 3);
      *((_QWORD *)v16 + 3) = v32;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v33 = *((unsigned int *)v16 + 12);
      v34 = *(unsigned int *)(a3 + 40);
      if ((_DWORD)v33 == -1)
      {
        if ((_DWORD)v34 == -1)
          goto LABEL_46;
      }
      else if ((_DWORD)v34 == -1)
      {
        result = (WTF::StringImpl *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v33])(&v35, (char *)v16 + 32);
        *((_DWORD *)v16 + 12) = -1;
LABEL_46:
        *((_WORD *)v16 + 28) = *(_WORD *)(a3 + 48);
        return result;
      }
      v35 = (char *)v16 + 32;
      result = (WTF::StringImpl *)((uint64_t (*)(char **))off_1E335B658[v34])(&v35);
      goto LABEL_46;
    }
    if (v17 == -1)
      v18 = v16;
    v15 = ((_DWORD)v15 + v19) & v10;
    v16 = (WTF::StringImpl *)(v8 + (v15 << 6));
    v17 = *(_QWORD *)v16;
    ++v19;
  }
  while (*(_QWORD *)v16);
  if (v18)
  {
    *((_DWORD *)v18 + 12) = 0;
    *((_QWORD *)v18 + 4) = 0;
    *(_OWORD *)v18 = 0u;
    *((_OWORD *)v18 + 1) = 0u;
    *((_WORD *)v18 + 28) = 1;
    --*(_DWORD *)(*a1 - 16);
    v11 = *(_QWORD *)a2;
    v16 = v18;
  }
LABEL_12:
  *(_QWORD *)v16 = v11;
  *(_OWORD *)((char *)v16 + 8) = *(_OWORD *)a3;
  v20 = *(_DWORD **)(a3 + 16);
  if (v20)
    *v20 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)v16 + 3);
  *((_QWORD *)v16 + 3) = v20;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v22 = *((unsigned int *)v16 + 12);
  v23 = *(unsigned int *)(a3 + 40);
  if ((_DWORD)v22 == -1)
  {
    if ((_DWORD)v23 != -1)
      goto LABEL_23;
  }
  else
  {
    if ((_DWORD)v23 == -1)
    {
      result = (WTF::StringImpl *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v22])(&v35, (char *)v16 + 32);
      *((_DWORD *)v16 + 12) = -1;
      goto LABEL_24;
    }
LABEL_23:
    v35 = (char *)v16 + 32;
    result = (WTF::StringImpl *)((uint64_t (*)(char **))off_1E335B658[v23])(&v35);
  }
LABEL_24:
  *((_WORD *)v16 + 28) = *(_WORD *)(a3 + 48);
  v25 = *a1;
  if (*a1)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *a1;
  if (*a1)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 <= 2 * v29)
    {
LABEL_33:
      v31 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
      goto LABEL_48;
    }
  }
  else if (3 * v30 <= 4 * v29)
  {
    if ((_DWORD)v30)
      goto LABEL_33;
    v31 = 8;
LABEL_48:
    result = (WTF::StringImpl *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v31, (uint64_t *)v16);
    v16 = result;
    v27 = *a1;
    if (*a1)
      v30 = *(unsigned int *)(v27 - 4);
    else
      v30 = 0;
  }
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v27 + (v30 << 6);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

WebCore::LocaleCocoa *WebCore::LocaleCocoa::LocaleCocoa(WebCore::LocaleCocoa *this, const WTF::AtomString *a2)
{
  id v4;
  const __CFString *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v10;
  const __CFString *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  const void *v14;
  WTF::StringImpl *v15;

  *((_BYTE *)this + 136) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = off_1E335B678;
  v4 = objc_alloc(MEMORY[0x1E0C99DC8]);
  if (*(_QWORD *)a2)
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E3487BC0;
  *((_QWORD *)this + 18) = objc_msgSend(v4, "initWithLocaleIdentifier:", v5);
  v6 = objc_alloc(MEMORY[0x1E0C99D48]);
  v7 = objc_msgSend(v6, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 19) = v7;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *(_OWORD *)((char *)this + 281) = 0u;
  v8 = (void *)objc_msgSend(MEMORY[0x1E0C99DC8], "ISOLanguageCodes");
  if (objc_msgSend(v8, "indexOfObject:", objc_msgSend(*((id *)this + 18), "objectForKey:", *MEMORY[0x1E0C997E8])) == 0x7FFFFFFFFFFFFFFFLL)
  {
    v10 = objc_alloc(MEMORY[0x1E0C99DC8]);
    WTF::defaultLanguage();
    if (v15)
      v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v11 = &stru_1E3487BC0;
    v13 = objc_msgSend(v10, "initWithLocaleIdentifier:", v11);
    v14 = (const void *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = v13;
    if (v14)
      CFRelease(v14);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  objc_msgSend(*((id *)this + 19), "setLocale:", *((_QWORD *)this + 18));
  return this;
}

void sub_19540DB98(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WebCore::Locale *v10;
  uint64_t v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  const void *v25;
  const void *v26;

  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11 + 120, a2);
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11 + 104, v13);
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11 + 88, v14);
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11 + 72, v15);
  v17 = (WTF::StringImpl *)*((_QWORD *)v10 + 28);
  *((_QWORD *)v10 + 28) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)v10 + 27);
  *((_QWORD *)v10 + 27) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)v10 + 26);
  *((_QWORD *)v10 + 26) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)v10 + 25);
  *((_QWORD *)v10 + 25) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v16);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)v10 + 24);
  *((_QWORD *)v10 + 24) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v16);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)v10 + 23);
  *((_QWORD *)v10 + 23) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v16);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)v10 + 22);
  *((_QWORD *)v10 + 22) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v16);
    else
      *(_DWORD *)v23 -= 2;
  }
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, v16);
  v25 = (const void *)*((_QWORD *)v10 + 19);
  *((_QWORD *)v10 + 19) = 0;
  if (v25)
    CFRelease(v25);
  v26 = (const void *)*((_QWORD *)v10 + 18);
  *((_QWORD *)v10 + 18) = 0;
  if (v26)
    CFRelease(v26);
  WebCore::Locale::~Locale(v10, v24);
  _Unwind_Resume(a1);
}

void sub_19540DD3C()
{
  JUMPOUT(0x19540DCF4);
}

void WebCore::LocaleCocoa::~LocaleCocoa(WebCore::LocaleCocoa *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF *v19;
  const void *v20;
  const void *v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF::StringImpl *v36;

  v3 = *((unsigned int *)this + 73);
  if ((_DWORD)v3)
  {
    v22 = (WTF::StringImpl **)*((_QWORD *)this + 35);
    v23 = 8 * v3;
    do
    {
      v24 = *v22;
      *v22 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, a2);
        else
          *(_DWORD *)v24 -= 2;
      }
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  v4 = (WTF *)*((_QWORD *)this + 35);
  if (v4)
  {
    *((_QWORD *)this + 35) = 0;
    *((_DWORD *)this + 72) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 69);
  if ((_DWORD)v5)
  {
    v25 = (WTF::StringImpl **)*((_QWORD *)this + 33);
    v26 = 8 * v5;
    do
    {
      v27 = *v25;
      *v25 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, a2);
        else
          *(_DWORD *)v27 -= 2;
      }
      ++v25;
      v26 -= 8;
    }
    while (v26);
  }
  v6 = (WTF *)*((_QWORD *)this + 33);
  if (v6)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((unsigned int *)this + 65);
  if ((_DWORD)v7)
  {
    v28 = (WTF::StringImpl **)*((_QWORD *)this + 31);
    v29 = 8 * v7;
    do
    {
      v30 = *v28;
      *v28 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, a2);
        else
          *(_DWORD *)v30 -= 2;
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  v8 = (WTF *)*((_QWORD *)this + 31);
  if (v8)
  {
    *((_QWORD *)this + 31) = 0;
    *((_DWORD *)this + 64) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 61);
  if ((_DWORD)v9)
  {
    v31 = (WTF::StringImpl **)*((_QWORD *)this + 29);
    v32 = 8 * v9;
    do
    {
      v33 = *v31;
      *v31 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, a2);
        else
          *(_DWORD *)v33 -= 2;
      }
      ++v31;
      v32 -= 8;
    }
    while (v32);
  }
  v10 = (WTF *)*((_QWORD *)this + 29);
  if (v10)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *((unsigned int *)this + 43);
  if ((_DWORD)v18)
  {
    v34 = (WTF::StringImpl **)*((_QWORD *)this + 20);
    v35 = 8 * v18;
    do
    {
      v36 = *v34;
      *v34 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, a2);
        else
          *(_DWORD *)v36 -= 2;
      }
      ++v34;
      v35 -= 8;
    }
    while (v35);
  }
  v19 = (WTF *)*((_QWORD *)this + 20);
  if (v19)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v19, a2);
  }
  v20 = (const void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v20)
    CFRelease(v20);
  v21 = (const void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v21)
    CFRelease(v21);
  WebCore::Locale::~Locale(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::LocaleCocoa::~LocaleCocoa(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::createDateTimeFormatter(WebCore *this, NSLocale *a2, NSCalendar *a3, NSDateFormatterStyle a4, NSDateFormatterStyle a5)
{
  id v9;

  v9 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  *(_QWORD *)this = v9;
  objc_msgSend(v9, "setLocale:", a2);
  objc_msgSend(v9, "setDateStyle:", a4);
  objc_msgSend(v9, "setTimeStyle:", 2);
  objc_msgSend(v9, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithAbbreviation:", CFSTR("UTC")));
  return objc_msgSend(v9, "setCalendar:", a3);
}

void sub_19540E104(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void WebCore::LocaleCocoa::formatDateTime(WebCore::DateComponents *this@<X1>, _QWORD *a2@<X8>)
{
  double v4;
  int v5;
  uint64_t v6;

  v4 = WebCore::DateComponents::millisecondsSinceEpoch(this);
  v5 = *((unsigned __int8 *)this + 32);
  if (v5 != 5)
  {
    v6 = objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", v4 / 1000.0);
    {
      WebCore::LocalizedDateCache::LocalizedDateCache((WebCore::LocalizedDateCache *)&WebCore::localizedDateCache(void)::cache);
    }
    objc_msgSend((id)WebCore::LocalizedDateCache::formatterForDateType(&WebCore::localizedDateCache(void)::cache, v5), "stringFromDate:", v6);
    JUMPOUT(0x19AEA5508);
  }
  *a2 = 0;
}

CFTypeRef WebCore::LocalizedDateCache::formatterForDateType(uint64_t *a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const void *v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  int v28;
  const void *v29;
  uint64_t v30;
  int v31;
  const void *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;

  v4 = *a1;
  if (!*a1)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v5 & (v7 ^ HIWORD(v7));
  v9 = *(_DWORD *)(v4 + 16 * v8);
  if (v9 != a2)
  {
    v12 = 1;
    v13 = *(_DWORD *)(v4 + 16 * v8);
    v14 = v8;
    while (v13)
    {
      v14 = (v14 + v12) & v5;
      v13 = *(_DWORD *)(v4 + 16 * v14);
      ++v12;
      if (v13 == a2)
      {
        v15 = 1;
        while (v9)
        {
          v8 = ((_DWORD)v8 + v15) & v5;
          v9 = *(_DWORD *)(v4 + 16 * v8);
          ++v15;
          if (v9 == a2)
            goto LABEL_3;
        }
        return 0;
      }
    }
LABEL_12:
    v16 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    v17 = objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    objc_msgSend(v16, "setLocale:", v17);
    switch(a2)
    {
      case 1:
        objc_msgSend(v16, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", 0));
        v18 = 0;
        goto LABEL_15;
      case 2:
        objc_msgSend(v16, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", 0));
        v18 = 1;
LABEL_15:
        objc_msgSend(v16, "setTimeStyle:", v18);
        v19 = 2;
        goto LABEL_18;
      case 3:
        objc_msgSend(v16, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", 0));
        objc_msgSend(v16, "setDateFormat:", objc_msgSend(MEMORY[0x1E0CB3578], "dateFormatFromTemplate:options:locale:", CFSTR("MMMMyyyy"), 0, v17));
        break;
      case 4:
        objc_msgSend(v16, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", 0));
        objc_msgSend(v16, "setTimeStyle:", 1);
        v19 = 0;
LABEL_18:
        objc_msgSend(v16, "setDateStyle:", v19);
        break;
      default:
        break;
    }
    v20 = *a1;
    if (*a1
      || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<NSDateFormatter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<NSDateFormatter>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RetainPtr<NSDateFormatter>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RetainPtr<NSDateFormatter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(a1, 8u), (v20 = *a1) != 0))
    {
      v21 = *(_DWORD *)(v20 - 8);
    }
    else
    {
      v21 = 0;
    }
    v22 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
    v24 = v21 & (v23 ^ HIWORD(v23));
    v25 = (_QWORD *)(v20 + 16 * v24);
    v26 = *(_DWORD *)v25;
    if (*(_DWORD *)v25)
    {
      v27 = 0;
      v28 = 1;
      while (v26 != a2)
      {
        if (v26 == -1)
          v27 = v25;
        v24 = (v24 + v28) & v21;
        v25 = (_QWORD *)(v20 + 16 * v24);
        v26 = *(_DWORD *)v25;
        ++v28;
        if (!*(_DWORD *)v25)
        {
          if (v27)
          {
            *v27 = 0;
            v27[1] = 0;
            --*(_DWORD *)(*a1 - 16);
            v25 = v27;
          }
          goto LABEL_30;
        }
      }
      if (v16)
        CFRetain(v16);
      v32 = (const void *)v25[1];
      v25[1] = v16;
      if (v32)
        CFRelease(v32);
      return (id)CFMakeCollectable(v16);
    }
LABEL_30:
    *(_DWORD *)v25 = a2;
    if (v16)
      CFRetain(v16);
    v29 = (const void *)v25[1];
    v25[1] = v16;
    if (v29)
      CFRelease(v29);
    v30 = *a1;
    if (*a1)
      v31 = *(_DWORD *)(v30 - 12) + 1;
    else
      v31 = 1;
    *(_DWORD *)(v30 - 12) = v31;
    v33 = *a1;
    if (*a1)
      v34 = *(_DWORD *)(v33 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(v33 - 16) + v34);
    v36 = *(unsigned int *)(v33 - 4);
    if (v36 > 0x400)
    {
      if (v36 > 2 * v35)
        return (id)CFMakeCollectable(v16);
    }
    else
    {
      if (3 * v36 > 4 * v35)
        return (id)CFMakeCollectable(v16);
      if (!(_DWORD)v36)
      {
        v37 = 8;
        goto LABEL_52;
      }
    }
    v37 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
LABEL_52:
    WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<NSDateFormatter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<NSDateFormatter>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RetainPtr<NSDateFormatter>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RetainPtr<NSDateFormatter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(a1, v37);
    return (id)CFMakeCollectable(v16);
  }
LABEL_3:
  v10 = v4 + 16 * v8;
  v11 = *(const void **)(v10 + 8);
  if (v11)
  {
    CFRetain(*(CFTypeRef *)(v10 + 8));
    CFRelease(v11);
  }
  return v11;
}

void sub_19540E574(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl ***WebCore::LocaleCocoa::monthLabels(WebCore::LocaleCocoa *this)
{
  WTF::StringImpl ***v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _QWORD v18[2];

  v1 = (WTF::StringImpl ***)((char *)this + 160);
  if (!*((_DWORD *)this + 43))
  {
    v4 = *((_QWORD *)this + 18);
    v3 = *((_QWORD *)this + 19);
    v5 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    objc_msgSend(v5, "setLocale:", v4);
    objc_msgSend(v5, "setDateStyle:", 1);
    objc_msgSend(v5, "setTimeStyle:", 0);
    objc_msgSend(v5, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithAbbreviation:", CFSTR("UTC")));
    objc_msgSend(v5, "setCalendar:", v3);
    v6 = (void *)objc_msgSend(v5, "monthSymbols");
    if (v5)
      CFRelease(v5);
    if (objc_msgSend(v6, "count") == 12)
    {
      WTF::makeVector<WTF::String>(v6, (uint64_t)v18);
      v8 = *((unsigned int *)this + 43);
      if ((_DWORD)v8)
      {
        v12 = *v1;
        v13 = 8 * v8;
        do
        {
          v14 = *v12;
          *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v7);
            else
              *(_DWORD *)v14 -= 2;
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      v9 = (WTF *)*v1;
      if (!*v1)
        goto LABEL_11;
    }
    else
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WTF::ASCIILiteral const,12ul>((uint64_t)v18, MEMORY[0x1E0CBF3C8]);
      v10 = *((unsigned int *)this + 43);
      if ((_DWORD)v10)
      {
        v15 = *v1;
        v16 = 8 * v10;
        do
        {
          v17 = *v15;
          *v15 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v7);
            else
              *(_DWORD *)v17 -= 2;
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
      v9 = (WTF *)*v1;
      if (!*v1)
        goto LABEL_11;
    }
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v9, v7);
LABEL_11:
    *((_QWORD *)this + 20) = v18[0];
    *((_QWORD *)this + 21) = v18[1];
  }
  return v1;
}

void sub_19540E748(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl **a9, int a10, unsigned int a11)
{
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (a11)
  {
    v12 = a9;
    v13 = 8 * a11;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  if (a9)
    WTF::fastFree((WTF *)a9, a2);
  _Unwind_Resume(exception_object);
}

void WebCore::LocaleCocoa::dateFormat(WebCore::LocaleCocoa *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v3 = (_DWORD *)*((_QWORD *)this + 22);
  if (v3)
    goto LABEL_2;
  v6 = *((_QWORD *)this + 18);
  v5 = *((_QWORD *)this + 19);
  v7 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend(v7, "setLocale:", v6);
  objc_msgSend(v7, "setDateStyle:", 1);
  objc_msgSend(v7, "setTimeStyle:", 0);
  objc_msgSend(v7, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithAbbreviation:", CFSTR("UTC")));
  objc_msgSend(v7, "setCalendar:", v5);
  MEMORY[0x19AEA5508](&v13, objc_msgSend(v7, "dateFormat"));
  v9 = v13;
  v13 = 0;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      v12 = v13;
      v13 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v10 -= 2;
      v13 = 0;
    }
  }
  if (v7)
    CFRelease(v7);
  v3 = (_DWORD *)*((_QWORD *)this + 22);
  if (v3)
LABEL_2:
    *v3 += 2;
  *a2 = v3;
}

void sub_19540E93C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::LocaleCocoa::monthFormat@<X0>(_QWORD *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (WTF::StringImpl *)this[23];
  if (v3)
    goto LABEL_7;
  v4 = this;
  MEMORY[0x19AEA5508](&v8, objc_msgSend(MEMORY[0x1E0CB3578], "dateFormatFromTemplate:options:locale:", CFSTR("yyyyMMMM"), 0, this[18]));
  v3 = v8;
  v8 = 0;
  this = (_QWORD *)v4[23];
  v4[23] = v3;
  if (!this)
    goto LABEL_6;
  v6 = *(_DWORD *)this - 2;
  if (*(_DWORD *)this == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)this, v5);
    this = v8;
    v8 = 0;
    if (!this)
      goto LABEL_5;
    v6 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this == 2)
    {
      this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
      goto LABEL_5;
    }
  }
  *(_DWORD *)this = v6;
LABEL_5:
  v3 = (WTF::StringImpl *)v4[23];
LABEL_6:
  if (v3)
LABEL_7:
    *(_DWORD *)v3 += 2;
  *a2 = v3;
  return this;
}

_QWORD *WebCore::LocaleCocoa::shortMonthFormat@<X0>(_QWORD *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (WTF::StringImpl *)this[24];
  if (v3)
    goto LABEL_7;
  v4 = this;
  MEMORY[0x19AEA5508](&v8, objc_msgSend(MEMORY[0x1E0CB3578], "dateFormatFromTemplate:options:locale:", CFSTR("yM"), 0, this[18]));
  v3 = v8;
  v8 = 0;
  this = (_QWORD *)v4[24];
  v4[24] = v3;
  if (!this)
    goto LABEL_6;
  v6 = *(_DWORD *)this - 2;
  if (*(_DWORD *)this == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)this, v5);
    this = v8;
    v8 = 0;
    if (!this)
      goto LABEL_5;
    v6 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this == 2)
    {
      this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
      goto LABEL_5;
    }
  }
  *(_DWORD *)this = v6;
LABEL_5:
  v3 = (WTF::StringImpl *)v4[24];
LABEL_6:
  if (v3)
LABEL_7:
    *(_DWORD *)v3 += 2;
  *a2 = v3;
  return this;
}

void WebCore::LocaleCocoa::timeFormat(WebCore::LocaleCocoa *this@<X0>, NSDateFormatterStyle a2@<X4>, _QWORD *a3@<X8>)
{
  _DWORD *v4;
  id v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  id v12;
  WTF::StringImpl *v13;

  v4 = (_DWORD *)*((_QWORD *)this + 25);
  if (v4)
    goto LABEL_8;
  WebCore::createDateTimeFormatter((WebCore *)&v12, *((NSLocale **)this + 18), *((NSCalendar **)this + 19), NSDateFormatterNoStyle, a2);
  v6 = v12;
  MEMORY[0x19AEA5508](&v13, objc_msgSend(v12, "dateFormat"));
  v8 = v13;
  v13 = 0;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v7);
      v11 = v13;
      v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v9 -= 2;
      v13 = 0;
    }
  }
  if (v6)
    CFRelease(v6);
  v4 = (_DWORD *)*((_QWORD *)this + 25);
  if (v4)
LABEL_8:
    *v4 += 2;
  *a3 = v4;
}

void sub_19540EBA0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::LocaleCocoa::shortTimeFormat(WebCore::LocaleCocoa *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v3 = (_DWORD *)*((_QWORD *)this + 26);
  if (v3)
    goto LABEL_2;
  v6 = *((_QWORD *)this + 18);
  v5 = *((_QWORD *)this + 19);
  v7 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend(v7, "setLocale:", v6);
  objc_msgSend(v7, "setDateStyle:", 0);
  objc_msgSend(v7, "setTimeStyle:", 1);
  objc_msgSend(v7, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithAbbreviation:", CFSTR("UTC")));
  objc_msgSend(v7, "setCalendar:", v5);
  MEMORY[0x19AEA5508](&v13, objc_msgSend(v7, "dateFormat"));
  v9 = v13;
  v13 = 0;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      v12 = v13;
      v13 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v10 -= 2;
      v13 = 0;
    }
  }
  if (v7)
    CFRelease(v7);
  v3 = (_DWORD *)*((_QWORD *)this + 26);
  if (v3)
LABEL_2:
    *v3 += 2;
  *a2 = v3;
}

void sub_19540ECE8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::LocaleCocoa::dateTimeFormatWithSeconds(WebCore::LocaleCocoa *this@<X0>, NSDateFormatterStyle a2@<X4>, _QWORD *a3@<X8>)
{
  _DWORD *v4;
  id v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  id v12;
  WTF::StringImpl *v13;

  v4 = (_DWORD *)*((_QWORD *)this + 27);
  if (v4)
    goto LABEL_8;
  WebCore::createDateTimeFormatter((WebCore *)&v12, *((NSLocale **)this + 18), *((NSCalendar **)this + 19), NSDateFormatterShortStyle, a2);
  v6 = v12;
  MEMORY[0x19AEA5508](&v13, objc_msgSend(v12, "dateFormat"));
  v8 = v13;
  v13 = 0;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v7);
      v11 = v13;
      v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v9 -= 2;
      v13 = 0;
    }
  }
  if (v6)
    CFRelease(v6);
  v4 = (_DWORD *)*((_QWORD *)this + 27);
  if (v4)
LABEL_8:
    *v4 += 2;
  *a3 = v4;
}

void sub_19540EDDC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::LocaleCocoa::dateTimeFormatWithoutSeconds(WebCore::LocaleCocoa *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v3 = (_DWORD *)*((_QWORD *)this + 28);
  if (v3)
    goto LABEL_2;
  v6 = *((_QWORD *)this + 18);
  v5 = *((_QWORD *)this + 19);
  v7 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend(v7, "setLocale:", v6);
  objc_msgSend(v7, "setDateStyle:", 1);
  objc_msgSend(v7, "setTimeStyle:", 1);
  objc_msgSend(v7, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithAbbreviation:", CFSTR("UTC")));
  objc_msgSend(v7, "setCalendar:", v5);
  MEMORY[0x19AEA5508](&v13, objc_msgSend(v7, "dateFormat"));
  v9 = v13;
  v13 = 0;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      v12 = v13;
      v13 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v10 -= 2;
      v13 = 0;
    }
  }
  if (v7)
    CFRelease(v7);
  v3 = (_DWORD *)*((_QWORD *)this + 28);
  if (v3)
LABEL_2:
    *v3 += 2;
  *a2 = v3;
}

void sub_19540EF24(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl ***WebCore::LocaleCocoa::shortMonthLabels(WebCore::LocaleCocoa *this)
{
  WTF::StringImpl ***v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _QWORD v18[2];

  v1 = (WTF::StringImpl ***)((char *)this + 232);
  if (!*((_DWORD *)this + 61))
  {
    v4 = *((_QWORD *)this + 18);
    v3 = *((_QWORD *)this + 19);
    v5 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    objc_msgSend(v5, "setLocale:", v4);
    objc_msgSend(v5, "setDateStyle:", 1);
    objc_msgSend(v5, "setTimeStyle:", 0);
    objc_msgSend(v5, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithAbbreviation:", CFSTR("UTC")));
    objc_msgSend(v5, "setCalendar:", v3);
    v6 = (void *)objc_msgSend(v5, "shortMonthSymbols");
    if (v5)
      CFRelease(v5);
    if (objc_msgSend(v6, "count") == 12)
    {
      WTF::makeVector<WTF::String>(v6, (uint64_t)v18);
      v8 = *((unsigned int *)this + 61);
      if ((_DWORD)v8)
      {
        v12 = *v1;
        v13 = 8 * v8;
        do
        {
          v14 = *v12;
          *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v7);
            else
              *(_DWORD *)v14 -= 2;
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      v9 = (WTF *)*v1;
      if (!*v1)
        goto LABEL_11;
    }
    else
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WTF::ASCIILiteral const,12ul>((uint64_t)v18, MEMORY[0x1E0CC00C8]);
      v10 = *((unsigned int *)this + 61);
      if ((_DWORD)v10)
      {
        v15 = *v1;
        v16 = 8 * v10;
        do
        {
          v17 = *v15;
          *v15 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v7);
            else
              *(_DWORD *)v17 -= 2;
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
      v9 = (WTF *)*v1;
      if (!*v1)
        goto LABEL_11;
    }
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v9, v7);
LABEL_11:
    *((_QWORD *)this + 29) = v18[0];
    *((_QWORD *)this + 30) = v18[1];
  }
  return v1;
}

void sub_19540F0F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl **a9, int a10, unsigned int a11)
{
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (a11)
  {
    v12 = a9;
    v13 = 8 * a11;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  if (a9)
    WTF::fastFree((WTF *)a9, a2);
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::LocaleCocoa::standAloneMonthLabels(WebCore::LocaleCocoa *this)
{
  unsigned int *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  unsigned int *v10;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _QWORD v15[2];

  v1 = (unsigned int *)((char *)this + 248);
  if (!*((_DWORD *)this + 65))
  {
    v4 = *((_QWORD *)this + 18);
    v3 = *((_QWORD *)this + 19);
    v5 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    objc_msgSend(v5, "setLocale:", v4);
    objc_msgSend(v5, "setDateStyle:", 1);
    objc_msgSend(v5, "setTimeStyle:", 0);
    objc_msgSend(v5, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithAbbreviation:", CFSTR("UTC")));
    objc_msgSend(v5, "setCalendar:", v3);
    v6 = (void *)objc_msgSend(v5, "standaloneMonthSymbols");
    if (v5)
      CFRelease(v5);
    if (objc_msgSend(v6, "count") == 12)
    {
      WTF::makeVector<WTF::String>(v6, (uint64_t)v15);
      v8 = *((unsigned int *)this + 65);
      if ((_DWORD)v8)
      {
        v12 = *(WTF::StringImpl ***)v1;
        v13 = 8 * v8;
        do
        {
          v14 = *v12;
          *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v7);
            else
              *(_DWORD *)v14 -= 2;
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      v9 = *(WTF **)v1;
      if (*(_QWORD *)v1)
      {
        *((_QWORD *)this + 31) = 0;
        *((_DWORD *)this + 64) = 0;
        WTF::fastFree(v9, v7);
      }
      *((_QWORD *)this + 31) = v15[0];
      *((_QWORD *)this + 32) = v15[1];
    }
    else
    {
      v10 = (unsigned int *)WebCore::LocaleCocoa::shortMonthLabels(this);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v1, v10);
    }
  }
  return v1;
}

void sub_19540F310(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl **a9, int a10, unsigned int a11)
{
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (a11)
  {
    v12 = a9;
    v13 = 8 * a11;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  if (a9)
    WTF::fastFree((WTF *)a9, a2);
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::LocaleCocoa::shortStandAloneMonthLabels(WebCore::LocaleCocoa *this)
{
  unsigned int *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  unsigned int *v10;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _QWORD v15[2];

  v1 = (unsigned int *)((char *)this + 264);
  if (!*((_DWORD *)this + 69))
  {
    v4 = *((_QWORD *)this + 18);
    v3 = *((_QWORD *)this + 19);
    v5 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    objc_msgSend(v5, "setLocale:", v4);
    objc_msgSend(v5, "setDateStyle:", 1);
    objc_msgSend(v5, "setTimeStyle:", 0);
    objc_msgSend(v5, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithAbbreviation:", CFSTR("UTC")));
    objc_msgSend(v5, "setCalendar:", v3);
    v6 = (void *)objc_msgSend(v5, "shortStandaloneMonthSymbols");
    if (v5)
      CFRelease(v5);
    if (objc_msgSend(v6, "count") == 12)
    {
      WTF::makeVector<WTF::String>(v6, (uint64_t)v15);
      v8 = *((unsigned int *)this + 69);
      if ((_DWORD)v8)
      {
        v12 = *(WTF::StringImpl ***)v1;
        v13 = 8 * v8;
        do
        {
          v14 = *v12;
          *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v7);
            else
              *(_DWORD *)v14 -= 2;
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      v9 = *(WTF **)v1;
      if (*(_QWORD *)v1)
      {
        *((_QWORD *)this + 33) = 0;
        *((_DWORD *)this + 68) = 0;
        WTF::fastFree(v9, v7);
      }
      *((_QWORD *)this + 33) = v15[0];
      *((_QWORD *)this + 34) = v15[1];
    }
    else
    {
      v10 = (unsigned int *)WebCore::LocaleCocoa::shortMonthLabels(this);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v1, v10);
    }
  }
  return v1;
}

void sub_19540F4E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl **a9, int a10, unsigned int a11)
{
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (a11)
  {
    v12 = a9;
    v13 = 8 * a11;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  if (a9)
    WTF::fastFree((WTF *)a9, a2);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl ***WebCore::LocaleCocoa::timeAMPMLabels(WebCore::LocaleCocoa *this)
{
  WTF::StringImpl ***v1;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20[2];

  v20[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v1 = (WTF::StringImpl ***)((char *)this + 280);
  if (!*((_DWORD *)this + 73))
  {
    v5 = *((_QWORD *)this + 18);
    v4 = *((_QWORD *)this + 19);
    v6 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    objc_msgSend(v6, "setLocale:", v5);
    objc_msgSend(v6, "setDateStyle:", 0);
    objc_msgSend(v6, "setTimeStyle:", 1);
    objc_msgSend(v6, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithAbbreviation:", CFSTR("UTC")));
    objc_msgSend(v6, "setCalendar:", v4);
    MEMORY[0x19AEA5508](&v19, objc_msgSend(v6, "AMSymbol"));
    MEMORY[0x19AEA5508](v20, objc_msgSend(v6, "PMSymbol"));
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v9 = v7;
    v10 = v19;
    if (v19)
      *(_DWORD *)v19 += 2;
    *v7 = v10;
    v11 = v20[0];
    if (v20[0])
      *(_DWORD *)v20[0] += 2;
    v7[1] = v11;
    v12 = *((unsigned int *)this + 73);
    if ((_DWORD)v12)
    {
      v16 = *v1;
      v17 = 8 * v12;
      do
      {
        v18 = *v16;
        *v16 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v8);
          else
            *(_DWORD *)v18 -= 2;
        }
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
    v13 = (WTF *)*v1;
    if (*v1)
    {
      *((_QWORD *)this + 35) = 0;
      *((_DWORD *)this + 72) = 0;
      WTF::fastFree(v13, v8);
    }
    *((_QWORD *)this + 35) = v9;
    *((_QWORD *)this + 36) = 0x200000002;
    v14 = v20[0];
    v20[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v8);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v6)
      CFRelease(v6);
  }
  return v1;
}

void sub_19540F774(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13)
{
  const void *v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  v16 = a13;
  a13 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = a12;
  a12 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (v13)
    CFRelease(v13);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashMap<WTF::AtomString,WTF::RetainPtr<__CFString const*>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RetainPtr<__CFString const*>>,WTF::HashTableTraits>::ensure<WebCore::LocaleCocoa::canonicalLanguageIdentifierFromString(WTF::AtomString const&)::$_0>(uint64_t result, WTF::StringImpl *a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v5 = result;
  v6 = qword_1ECE81F88;
  if (qword_1ECE81F88
    || (result = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RetainPtr<__CFString const*>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RetainPtr<__CFString const*>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(0),
        (v6 = qword_1ECE81F88) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  for (i = 1; ; ++i)
  {
    v12 = v10 & v8;
    v13 = (uint64_t *)(v6 + 16 * v12);
    v14 = *v13;
    if (!*v13)
    {
      if (v9)
      {
        *v9 = 0;
        v9[1] = 0;
        --*(_DWORD *)(qword_1ECE81F88 - 16);
        v13 = v9;
      }
      result = (uint64_t)WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::AtomString,WTF::RetainPtr<__CFString const*>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RetainPtr<__CFString const*>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>,WTF::AtomString const&,WebCore::LocaleCocoa::canonicalLanguageIdentifierFromString(WTF::AtomString const&)::$_0>((uint64_t)v13, a2, a3);
      if (qword_1ECE81F88)
        v15 = *(_DWORD *)(qword_1ECE81F88 - 12) + 1;
      else
        v15 = 1;
      *(_DWORD *)(qword_1ECE81F88 - 12) = v15;
      v16 = qword_1ECE81F88;
      if (qword_1ECE81F88)
        v17 = *(_DWORD *)(qword_1ECE81F88 - 12);
      else
        v17 = 0;
      v18 = (*(_DWORD *)(qword_1ECE81F88 - 16) + v17);
      v19 = *(unsigned int *)(qword_1ECE81F88 - 4);
      if (v19 > 0x400)
      {
        if (v19 > 2 * v18)
          goto LABEL_17;
      }
      else if (3 * v19 > 4 * v18)
      {
LABEL_17:
        v20 = v16 + 16 * v19;
        v21 = 1;
        goto LABEL_18;
      }
      result = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RetainPtr<__CFString const*>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RetainPtr<__CFString const*>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(v13);
      v13 = (uint64_t *)result;
      v16 = qword_1ECE81F88;
      if (qword_1ECE81F88)
        v19 = *(unsigned int *)(qword_1ECE81F88 - 4);
      else
        v19 = 0;
      goto LABEL_17;
    }
    if (v14 == -1)
    {
      v9 = (uint64_t *)(v6 + 16 * v12);
      goto LABEL_8;
    }
    if (v14 == *(_QWORD *)a2)
      break;
LABEL_8:
    v10 = i + v12;
  }
  if ((v7 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v6 - 4);
  v21 = 0;
  v20 = v6 + 16 * v22;
LABEL_18:
  *(_QWORD *)v5 = v13;
  *(_QWORD *)(v5 + 8) = v20;
  *(_BYTE *)(v5 + 16) = v21;
  return result;
}

void WTF::RetainPtr<__CFString const*>::operator=(CFTypeRef cf)
{
  const void *v2;

  if (cf)
    CFRetain(cf);
  v2 = (const void *)qword_1ECE81F80;
  qword_1ECE81F80 = (uint64_t)cf;
  if (v2)
    CFRelease(v2);
}

uint64_t WebCore::LocaleCocoa::releaseMemory(WebCore::LocaleCocoa *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  const void *v3;
  uint64_t result;

  if ((byte_1ECE81F59 & 1) != 0)
  {
    v2 = (WTF::StringImpl *)qword_1ECE81F78;
    qword_1ECE81F78 = 0;
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, a2);
      else
        *(_DWORD *)v2 -= 2;
    }
    v3 = (const void *)qword_1ECE81F80;
    qword_1ECE81F80 = 0;
    if (v3)
      CFRelease(v3);
  }
  else
  {
    byte_1ECE81F59 = 1;
    qword_1ECE81F88 = 0;
    qword_1ECE81F80 = 0;
    qword_1ECE81F78 = 0;
  }
  result = qword_1ECE81F88;
  if (qword_1ECE81F88)
  {
    qword_1ECE81F88 = 0;
    return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RetainPtr<__CFString const*>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RetainPtr<__CFString const*>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(result, a2);
  }
  return result;
}

const void **WTF::RetainPtr<__CFString const*>::operator=(const void **a1, CFTypeRef cf)
{
  const void *v4;

  if (cf)
    CFRetain(cf);
  v4 = *a1;
  *a1 = cf;
  if (v4)
    CFRelease(v4);
  return a1;
}

void WebCore::LocaleCocoa::initializeLocaleData(WebCore::LocaleCocoa *this)
{
  id v2;
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int i;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF *v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  uint64_t v23;
  _BYTE v24[96];
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  if (*((_BYTE *)this + 296))
    return;
  *((_BYTE *)this + 296) = 1;
  v2 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
  objc_msgSend(v2, "setLocale:", *((_QWORD *)this + 18));
  objc_msgSend(v2, "setNumberStyle:", 1);
  objc_msgSend(v2, "setUsesGroupingSeparator:", 0);
  v3 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithDouble:", 9876543210.0);
  MEMORY[0x19AEA5508](&v25, objc_msgSend(v2, "stringFromNumber:", v3));
  v5 = v25;
  if (v25)
  {
    if (*((_DWORD *)v25 + 1) == 10)
    {
      v22 = (WTF *)v24;
      v23 = 12;
      for (i = 9; i != -1; --i)
      {
        v7 = v25;
        if (v25)
        {
          if (i || *((_DWORD *)v25 + 1) > 1u)
          {
            WTF::StringImpl::substring(v25);
            v7 = v26;
          }
          else
          {
            *(_DWORD *)v25 += 2;
          }
          v21 = v7;
        }
        else
        {
          v21 = 0;
        }
        v8 = HIDWORD(v23);
        if (HIDWORD(v23) == (_DWORD)v23)
        {
          WTF::Vector<WTF::String,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v22, (unint64_t)&v21);
        }
        else
        {
          v21 = 0;
          *((_QWORD *)v22 + HIDWORD(v23)) = v7;
          HIDWORD(v23) = v8 + 1;
        }
        v9 = v21;
        v21 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v4);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
      v26 = (WTF::StringImpl *)objc_msgSend(v2, "decimalSeparator");
      if (HIDWORD(v23) == (_DWORD)v23)
      {
        WTF::Vector<WTF::String,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,NSString *>((uint64_t)&v22, &v26);
      }
      else
      {
        MEMORY[0x19AEA5508]((char *)v22 + 8 * HIDWORD(v23));
        ++HIDWORD(v23);
      }
      v26 = (WTF::StringImpl *)objc_msgSend(v2, "groupingSeparator");
      if (HIDWORD(v23) == (_DWORD)v23)
      {
        WTF::Vector<WTF::String,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,NSString *>((uint64_t)&v22, &v26);
      }
      else
      {
        MEMORY[0x19AEA5508]((char *)v22 + 8 * HIDWORD(v23));
        ++HIDWORD(v23);
      }
      MEMORY[0x19AEA5508](&v26, objc_msgSend(v2, "positivePrefix"));
      MEMORY[0x19AEA5508](&v21, objc_msgSend(v2, "positiveSuffix"));
      MEMORY[0x19AEA5508](&v20, objc_msgSend(v2, "negativePrefix"));
      MEMORY[0x19AEA5508](&v19, objc_msgSend(v2, "negativeSuffix"));
      WebCore::Locale::setLocaleData((uint64_t)this, (unsigned int *)&v22, (_DWORD **)&v26, (_DWORD **)&v21, (_DWORD **)&v20, (_DWORD **)&v19);
      v10 = v19;
      v19 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v4);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v20;
      v20 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v4);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v21;
      v21 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v4);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v26;
      v26 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v4);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (HIDWORD(v23))
      {
        v14 = v22;
        v15 = 8 * HIDWORD(v23);
        do
        {
          v16 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v4);
            else
              *(_DWORD *)v16 -= 2;
          }
          v14 = (WTF *)((char *)v14 + 8);
          v15 -= 8;
        }
        while (v15);
      }
      v17 = v22;
      if (v24 != (_BYTE *)v22 && v22 != 0)
      {
        v22 = 0;
        LODWORD(v23) = 0;
        WTF::fastFree(v17, v4);
      }
      v5 = v25;
      v25 = 0;
      if (!v5)
        goto LABEL_52;
    }
    else
    {
      v25 = 0;
    }
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
LABEL_52:
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
}

void sub_19540FE48(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, char a13)
{
  const void *v13;
  const void *v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  WTF::Vector<WTF::String,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  v18 = *(WTF::StringImpl **)(v15 - 64);
  *(_QWORD *)(v15 - 64) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  _Unwind_Resume(a1);
}

void sub_19540FF68()
{
  JUMPOUT(0x19540FF40);
}

void sub_19540FF70()
{
  JUMPOUT(0x19540FF4CLL);
}

uint64_t WTF::Vector<WTF::String,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v7 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

WebCore::LocalizedDateCache *WebCore::LocalizedDateCache::LocalizedDateCache(WebCore::LocalizedDateCache *this)
{
  _DWORD *v2;
  char v3;
  unsigned int v4;
  _QWORD *v5;
  __CFNotificationCenter *LocalCenter;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 129) = 1;
  *((_BYTE *)this + 136) = 0;
  v2 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v2 += 2;
  v3 = *((_BYTE *)this + 198);
  *((_WORD *)this + 98) = 0;
  *((_QWORD *)this + 18) = v2;
  *((_WORD *)this + 76) = 0;
  *((_DWORD *)this + 39) = 2143289344;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 22) = 26216000;
  *((_WORD *)this + 92) = 257;
  v4 = *((_DWORD *)this + 48) & 0x80000000 | 0xE000;
  *((_DWORD *)this + 47) = 0;
  *((_DWORD *)this + 48) = v4;
  *((_BYTE *)this + 198) = v3 & 0xFC;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = 0x100000001;
  v5[1] = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 25) = v5;
  *((_DWORD *)this + 52) = 0;
  *((_WORD *)this + 106) &= 0xFC00u;
  *((_DWORD *)this + 54) = 0;
  *((_WORD *)this + 110) = 4;
  *((_BYTE *)this + 222) = 0;
  *((_DWORD *)this + 56) = 0;
  *((_WORD *)this + 114) = 4;
  *((_BYTE *)this + 230) = 0;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_QWORD *)((char *)this + 239) = 0;
  *((_QWORD *)this + 29) = 0;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, this, (CFNotificationCallback)WebCore::_localeChanged, (CFStringRef)*MEMORY[0x1E0C9B070], 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  return this;
}

void sub_195410158(_Unwind_Exception *a1, void *a2)
{
  uint64_t *v2;
  WebCore::FontCascade *v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  const void *v10;

  WebCore::FontCascade::~FontCascade(v3, a2);
  v6 = v2[1];
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v5);
  v7 = *v2;
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = (const void **)(v7 + 8);
      do
      {
        if (*((_DWORD *)v9 - 2) != -1)
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
            CFRelease(v10);
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), v5);
  }
  _Unwind_Resume(a1);
}

void WebCore::_localeChanged(WebCore *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  const void *v10;

  {
    WebCore::LocalizedDateCache::LocalizedDateCache((WebCore::LocalizedDateCache *)&WebCore::localizedDateCache(void)::cache);
  }
  v6 = qword_1EE2F5438;
  if (qword_1EE2F5438)
  {
    qword_1EE2F5438 = 0;
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v7 = WebCore::localizedDateCache(void)::cache;
  if (WebCore::localizedDateCache(void)::cache)
  {
    WebCore::localizedDateCache(void)::cache = 0;
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = (const void **)(v7 + 8);
      do
      {
        if (*((_DWORD *)v9 - 2) != -1)
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
            CFRelease(v10);
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
}

float WebCore::LocalizedDateCache::maximumWidthForDateType(uint64_t *a1, int a2, const WebCore::FontCascade *a3, float (***a4)(_QWORD, WTF::StringImpl **))
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  float v23;
  _BYTE v24[300];
  int v25;

  v25 = a2;
  v8 = (uint64_t)(a1 + 2);
  if (WebCore::FontCascade::operator==((uint64_t)(a1 + 2), (uint64_t)a3))
  {
    v9 = a1[1];
    if (v9)
    {
      v10 = *(_DWORD *)(v9 - 8);
      v11 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
      v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
      v13 = v10 & (v12 ^ HIWORD(v12));
      v14 = *(_DWORD *)(v9 + 8 * v13);
      if (v14 == a2)
        return *(float *)(v9 + 8 * v13 + 4);
      v19 = 1;
      v20 = *(_DWORD *)(v9 + 8 * v13);
      v21 = v13;
      while (v20)
      {
        v21 = (v21 + v19) & v10;
        v20 = *(_DWORD *)(v9 + 8 * v21);
        ++v19;
        if (v20 == a2)
        {
          v22 = 1;
          while (v14)
          {
            v13 = ((_DWORD)v13 + v22) & v10;
            v14 = *(_DWORD *)(v9 + 8 * v13);
            ++v22;
            if (v14 == a2)
              return *(float *)(v9 + 8 * v13 + 4);
          }
          return INFINITY;
        }
      }
    }
  }
  else
  {
    WebCore::FontCascade::FontCascade((WebCore::FontCascade *)v24, a3);
    WebCore::FontCascade::operator=(v8, (uint64_t)v24);
    WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v24, v16);
    v18 = a1[1];
    if (v18)
    {
      a1[1] = 0;
      WTF::fastFree((WTF *)(v18 - 16), v17);
    }
  }
  v23 = WebCore::LocalizedDateCache::calculateMaximumWidth(a1, a2, a4);
  WTF::HashMap<int,float,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<float>,WTF::HashTableTraits>::inlineSet<int const&,float &>(a1 + 1, &v25, &v23, (uint64_t)v24);
  return v23;
}

void sub_1954103DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)va, a2);
  _Unwind_Resume(a1);
}

float WebCore::LocalizedDateCache::calculateMaximumWidth(uint64_t *a1, int a2, float (***a3)(_QWORD, WTF::StringImpl **))
{
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  WTF::StringImpl *v13;
  float v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;

  v5 = (void *)objc_msgSend((id)WebCore::LocalizedDateCache::formatterForDateType(a1, a2), "copy");
  objc_msgSend(v5, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", 0));
  v6 = objc_alloc(MEMORY[0x1E0C99D48]);
  v7 = (void *)objc_msgSend(v6, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
  objc_msgSend(v7, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", 0));
  v8 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v8, "setDay:", 27);
  objc_msgSend(v8, "setYear:", 2007);
  objc_msgSend(v8, "setHour:", 22);
  objc_msgSend(v8, "setMinute:", 45);
  if (_MergedGlobals_139 == 1)
  {
    v9 = qword_1ECE81F60;
  }
  else
  {
    v9 = objc_msgSend((id)objc_msgSend(v5, "monthSymbols"), "count");
    qword_1ECE81F60 = v9;
    _MergedGlobals_139 = 1;
  }
  if ((a2 - 1) >= 3)
    v10 = 1;
  else
    v10 = v9;
  if (v10)
  {
    v11 = 0;
    v12 = 0.0;
    do
    {
      objc_msgSend(v8, "setMonth:", ++v11);
      MEMORY[0x19AEA5508](&v17, objc_msgSend(v5, "stringFromDate:", objc_msgSend(v7, "dateFromComponents:", v8)));
      v14 = (**a3)(a3, &v17);
      if (v12 < v14)
        v12 = v14;
      v15 = v17;
      v17 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    while (v10 != v11);
  }
  else
  {
    v12 = 0.0;
  }
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  if (v5)
    CFRelease(v5);
  return v12;
}

void sub_1954105CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebCore::findWordBoundary(uint64_t CFStringWithoutCopying, uint64_t a2, unsigned int a3, unsigned int *a4, int *a5)
{
  CFLocaleRef *v5;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  unsigned int IntPropertyValue;
  CFRange v17;
  UChar32 v18;
  int v19;
  int v20;
  unsigned int v21;
  const char *v22;
  const __CFAllocator *v23;
  size_t v24;
  const __CFString *v25;
  CFLocaleRef v26;
  __CFStringTokenizer *v27;
  const void *v28;
  CFRange CurrentTokenRange;
  int v30;
  CFStringRef theString;
  unsigned __int8 *v32;
  uint64_t v33;

  v8 = a2;
  if (!(_DWORD)a2)
  {
    *a4 = 0;
    *a5 = 0;
    return;
  }
  if (a2 <= a3)
  {
    *a4 = a2 - 1;
    *a5 = a2 - 1;
    return;
  }
  v10 = (unsigned __int8 *)CFStringWithoutCopying;
  if ((a2 & 0xFF00000000) != 0)
  {
    LODWORD(CFStringWithoutCopying) = *(unsigned __int8 *)(CFStringWithoutCopying + a3);
  }
  else
  {
    v11 = a3 + 1;
    CFStringWithoutCopying = *(unsigned __int16 *)(CFStringWithoutCopying + 2 * a3);
    v12 = (CFStringWithoutCopying & 0xFC00) != 0xD800 || v11 == (_DWORD)a2;
    if (!v12)
    {
      if (v11 >= a2)
      {
        __break(1u);
        goto LABEL_35;
      }
      v13 = *(unsigned __int16 *)&v10[2 * v11];
      v12 = (v13 & 0xFC00) == 56320;
      v14 = v13 + ((_DWORD)CFStringWithoutCopying << 10) - 56613888;
      if (v12)
        LODWORD(CFStringWithoutCopying) = v14;
    }
  }
  IntPropertyValue = u_getIntPropertyValue(CFStringWithoutCopying, UCHAR_LINE_BREAK);
  if (IntPropertyValue > 0x25 || ((1 << IntPropertyValue) & 0x2001004000) == 0)
  {
    if ((v8 & 0xFF00000000) != 0)
    {
      v18 = *v10;
    }
    else
    {
      v18 = *(unsigned __int16 *)v10;
      if ((_DWORD)v8 != 1 && (v18 & 0xFC00) == 0xD800)
      {
        v19 = *((unsigned __int16 *)v10 + 1);
        v12 = (v19 & 0xFC00) == 56320;
        v20 = v19 + (v18 << 10) - 56613888;
        if (v12)
          v18 = v20;
      }
    }
    v21 = u_getIntPropertyValue(v18, UCHAR_LINE_BREAK);
    if (v21 > 0x25 || ((1 << v21) & 0x2001004000) == 0)
    {
      WebCore::findSimpleWordBoundary((uint64_t)v10, v8, a3, a4, a5);
      return;
    }
  }
  v32 = v10;
  v33 = v8;
  CFStringWithoutCopying = WTF::StringView::createCFStringWithoutCopying((WTF::StringView *)&v32);
  v8 = (uint64_t)theString;
  v5 = (CFLocaleRef *)&unk_1ECE81000;
  if ((byte_1ECE81F5A & 1) == 0)
  {
LABEL_35:
    v22 = (const char *)WTF::currentTextBreakLocaleID((WTF *)CFStringWithoutCopying);
    v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v24 = strlen(v22);
    v25 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v22, v24, 0x600u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v26 = CFLocaleCreate(v23, v25);
    if (v25)
      CFRelease(v25);
    qword_1ECE81F68 = (uint64_t)v26;
    byte_1ECE81F5A = 1;
    if (!v26)
      goto LABEL_46;
    goto LABEL_21;
  }
  if (!qword_1ECE81F68)
    goto LABEL_46;
LABEL_21:
  v17.length = CFStringGetLength((CFStringRef)v8);
  if ((byte_1ECE81F5B & 1) != 0)
  {
    if (qword_1ECE81F70)
    {
      v17.location = 0;
      CFStringTokenizerSetString((CFStringTokenizerRef)qword_1ECE81F70, (CFStringRef)v8, v17);
      goto LABEL_42;
    }
  }
  else
  {
    qword_1ECE81F70 = 0;
    byte_1ECE81F5B = 1;
  }
  v17.location = 0;
  v27 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFStringRef)v8, v17, 4uLL, v5[493]);
  v28 = (const void *)qword_1ECE81F70;
  qword_1ECE81F70 = (uint64_t)v27;
  if (!v28)
    goto LABEL_43;
  CFRelease(v28);
LABEL_42:
  v27 = (__CFStringTokenizer *)qword_1ECE81F70;
LABEL_43:
  if (v27)
  {
    if (CFStringTokenizerGoToTokenAtIndex(v27, (int)a3))
    {
      CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v27);
      *a4 = CurrentTokenRange.location;
      v30 = LODWORD(CurrentTokenRange.location) + LODWORD(CurrentTokenRange.length);
    }
    else
    {
      *a4 = 0;
      v30 = v33;
    }
    *a5 = v30;
    goto LABEL_49;
  }
LABEL_46:
  WebCore::findSimpleWordBoundary((uint64_t)v32, v33, a3, a4, a5);
LABEL_49:
  if (theString)
    CFRelease(theString);
}

void sub_195410980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::findSimpleWordBoundary(uint64_t result, uint64_t a2, unsigned int a3, unsigned int *a4, _DWORD *a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  UTF32Char v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  const __CFCharacterSet *Predefined;
  unsigned int v19;
  UTF32Char v20;
  unsigned int v21;
  int v22;
  int v23;
  const __CFCharacterSet *v24;
  BOOL v26;
  UTF32Char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  int v33;
  const __CFCharacterSet *v34;
  uint64_t v35;
  BOOL v37;
  unsigned int v38;
  UTF32Char v39;
  unsigned int v40;
  int v41;
  UTF32Char v42;
  const __CFCharacterSet *v43;
  uint64_t v45;
  UTF32Char v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  int v53;
  const __CFCharacterSet *v54;

  v5 = a3;
  v6 = a2;
  v7 = result;
  v8 = BYTE4(a2);
  if (a3)
  {
    v9 = a3;
    while (1)
    {
      v10 = v9 - 1;
      if (v8)
      {
        if (v10 >= v6)
          goto LABEL_161;
        v11 = *(unsigned __int8 *)(v7 + v10);
      }
      else
      {
        if (v10 >= v6)
          goto LABEL_161;
        v11 = *(unsigned __int16 *)(v7 + 2 * v10);
      }
      v12 = v9 - 2;
      if ((int)v9 >= 2 && (v11 & 0xFC00) == 0xDC00)
      {
        if (v8)
        {
          if (v12 >= v6)
            goto LABEL_161;
          v13 = *(unsigned __int8 *)(v7 + v12);
        }
        else
        {
          if (v12 >= v6)
            goto LABEL_161;
          v13 = *(unsigned __int16 *)(v7 + 2 * v12);
        }
        v15 = (v13 & 0xFC00) == 55296;
        v16 = v11 - 56613888 + (v13 << 10);
        if (v15)
          v14 = v9 - 2;
        else
          v14 = v9 - 1;
        if (v15)
          v11 = v16;
      }
      else
      {
        v14 = v9 - 1;
      }
      Predefined = CFCharacterSetGetPredefined(kCFCharacterSetAlphaNumeric);
      result = CFCharacterSetIsLongCharacterMember(Predefined, v11);
      if (v11 != 38 && (_DWORD)result == 0)
      {
        if (!v14 || v11 != 39 && v11 != 8217 && v11 != 1524)
          goto LABEL_65;
        v19 = v14 - 1;
        if (v8)
        {
          if (v19 >= v6)
            goto LABEL_161;
          v20 = *(unsigned __int8 *)(v7 + v19);
        }
        else
        {
          if (v19 >= v6)
            goto LABEL_161;
          v20 = *(unsigned __int16 *)(v7 + 2 * v19);
        }
        if ((v20 & 0xFC00) == 0xDC00)
        {
          v21 = v14 - 2;
          if (v14 >= 2)
          {
            if (v8)
            {
              if (v21 >= v6)
                goto LABEL_161;
              v22 = *(unsigned __int8 *)(v7 + v21);
            }
            else
            {
              if (v21 >= v6)
                goto LABEL_161;
              v22 = *(unsigned __int16 *)(v7 + 2 * v21);
            }
            v15 = (v22 & 0xFC00) == 55296;
            v23 = v20 - 56613888 + (v22 << 10);
            if (v15)
              v20 = v23;
          }
        }
        v24 = CFCharacterSetGetPredefined(kCFCharacterSetAlphaNumeric);
        result = CFCharacterSetIsLongCharacterMember(v24, v20);
        v26 = v20 != 38 && (_DWORD)result == 0;
        if (!v8 && !v26)
        {
LABEL_57:
          if (v9 != 1 && (*(_WORD *)(v7 + 2 * v10) & 0xFC00) == 0xDC00)
          {
            if (v12 >= v6)
              goto LABEL_161;
            if ((*(_WORD *)(v7 + 2 * v12) & 0xFC00) == 0xD800)
              v10 = v9 - 2;
          }
          goto LABEL_62;
        }
        if (v26)
          goto LABEL_65;
      }
      else if (!v8)
      {
        goto LABEL_57;
      }
LABEL_62:
      v9 = v10;
      if (!v10)
        goto LABEL_65;
    }
  }
  v9 = 0;
LABEL_65:
  if (v6 <= v5)
  {
LABEL_126:
    LODWORD(v35) = v5;
LABEL_127:
    if (v9 != (_DWORD)v35 || v35 >= v6)
      goto LABEL_159;
    v45 = v9;
    if (!v8)
      goto LABEL_130;
    v47 = 0;
    v46 = *(unsigned __int8 *)(v7 + v9);
LABEL_132:
    if ((v46 & 0xF800) != 0xD800)
      goto LABEL_152;
    if ((v46 & 0x400) != 0)
    {
      if (v9)
      {
        v50 = v9 - 1;
        if ((v47 & 1) != 0)
          v51 = *(unsigned __int16 *)(v7 + 2 * v50);
        else
          v51 = *(unsigned __int8 *)(v7 + v50);
        v52 = (v51 & 0xFC00) == 55296;
        v53 = v46 - 56613888 + (v51 << 10);
        goto LABEL_149;
      }
    }
    else
    {
      v48 = v9 + 1;
      if ((_DWORD)v48 != v6)
      {
        if ((v47 & 1) != 0)
        {
          if (v48 < v6)
          {
            v49 = *(unsigned __int16 *)(v7 + 2 * v48);
LABEL_148:
            v52 = (v49 & 0xFC00) == 56320;
            v53 = (v46 << 10) - 56613888 + v49;
LABEL_149:
            if (v52)
              v46 = v53;
            goto LABEL_152;
          }
        }
        else if (v48 < v6)
        {
          v49 = *(unsigned __int8 *)(v7 + v48);
          goto LABEL_148;
        }
LABEL_161:
        __break(1u);
        return result;
      }
    }
LABEL_152:
    v54 = CFCharacterSetGetPredefined(kCFCharacterSetSymbol);
    result = CFCharacterSetIsLongCharacterMember(v54, v46);
    LODWORD(v35) = v9;
    if (!(_DWORD)result)
      goto LABEL_159;
    LODWORD(v35) = v9 + 1;
    if (!v47 || (*(_WORD *)(v7 + 2 * v45) & 0xFC00) != 0xD800 || (_DWORD)v35 == v6)
      goto LABEL_159;
    if (v35 < v6)
    {
      if ((*(_WORD *)(v7 + 2 * v35) & 0xFC00) == 0xDC00)
        LODWORD(v35) = v9 + 2;
      goto LABEL_159;
    }
    goto LABEL_161;
  }
  while (1)
  {
    if (v8)
      v27 = *(unsigned __int8 *)(v7 + v5);
    else
      v27 = *(unsigned __int16 *)(v7 + 2 * v5);
    if ((v27 & 0xF800) == 0xD800)
    {
      if ((v27 & 0x400) != 0)
      {
        if (!v5)
          goto LABEL_86;
        v30 = v5 - 1;
        if (v8)
          v31 = *(unsigned __int8 *)(v7 + v30);
        else
          v31 = *(unsigned __int16 *)(v7 + 2 * v30);
        v32 = (v31 & 0xFC00) == 55296;
        v33 = v27 - 56613888 + (v31 << 10);
      }
      else
      {
        v28 = v5 + 1;
        if (v5 + 1 == v6)
          goto LABEL_86;
        if (v8)
        {
          if (v28 >= v6)
            goto LABEL_161;
          v29 = *(unsigned __int8 *)(v7 + v28);
        }
        else
        {
          if (v28 >= v6)
            goto LABEL_161;
          v29 = *(unsigned __int16 *)(v7 + 2 * v28);
        }
        v32 = (v29 & 0xFC00) == 56320;
        v33 = (v27 << 10) - 56613888 + v29;
      }
      if (v32)
        v27 = v33;
    }
LABEL_86:
    v34 = CFCharacterSetGetPredefined(kCFCharacterSetAlphaNumeric);
    result = CFCharacterSetIsLongCharacterMember(v34, v27);
    v35 = v5 + 1;
    if (v27 != 38 && (_DWORD)result == 0)
      break;
LABEL_116:
    if (!v8 && (*(_WORD *)(v7 + 2 * v5) & 0xFC00) == 0xD800 && (_DWORD)v35 != v6)
    {
      if (v35 >= v6)
        goto LABEL_161;
      if ((*(_WORD *)(v7 + 2 * v35) & 0xFC00) == 0xDC00)
        LODWORD(v35) = v5 + 2;
    }
    v5 = v35;
    if (v35 >= v6)
      goto LABEL_127;
  }
  if (v8)
  {
    if ((_DWORD)v35 == v6)
      goto LABEL_126;
    if (v35 >= v6)
      goto LABEL_161;
    v39 = *(unsigned __int8 *)(v7 + v35);
    goto LABEL_111;
  }
  v37 = (*(_WORD *)(v7 + 2 * v5) & 0xFC00) != 0xD800 || (_DWORD)v35 == v6;
  v38 = v5 + 1;
  if (!v37)
  {
    if (v35 >= v6)
      goto LABEL_161;
    if ((*(_WORD *)(v7 + 2 * v35) & 0xFC00) == 0xDC00)
      v38 = v5 + 2;
    else
      v38 = v5 + 1;
  }
  if (v38 != v6)
  {
    if (v38 >= v6)
      goto LABEL_161;
    v39 = *(unsigned __int16 *)(v7 + 2 * v38);
    if ((v39 & 0xFC00) == 0xD800)
    {
      v40 = v38 + 1;
      if (v40 != v6)
      {
        if (v40 >= v6)
          goto LABEL_161;
        v41 = *(unsigned __int16 *)(v7 + 2 * v40);
        v15 = (v41 & 0xFC00) == 56320;
        v42 = (v39 << 10) - 56613888 + v41;
        if (v15)
          v39 = v42;
      }
    }
LABEL_111:
    if (v27 != 39 && v27 != 8217 && v27 != 1524)
      goto LABEL_126;
    v43 = CFCharacterSetGetPredefined(kCFCharacterSetAlphaNumeric);
    result = CFCharacterSetIsLongCharacterMember(v43, v39);
    if (v39 != 38 && !(_DWORD)result)
      goto LABEL_126;
    goto LABEL_116;
  }
  if (v9 == v5)
  {
    LODWORD(v35) = v5;
    if (v5 < v6)
    {
      v45 = v9;
LABEL_130:
      v46 = *(unsigned __int16 *)(v7 + 2 * v45);
      v47 = 1;
      goto LABEL_132;
    }
  }
  else
  {
    LODWORD(v35) = v5;
  }
LABEL_159:
  *a4 = v9;
  *a5 = v35;
  return result;
}

uint64_t WebCore::findNextWordFromIndex(unsigned __int8 *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  BOOL v11;
  unsigned __int8 *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  UChar32 v18;
  unsigned int v19;
  BOOL v20;
  unsigned __int8 *v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  UChar32 v26;

  if (WTF::wordBreakIterator())
  {
    v8 = a2 & 0xFF00000000;
    if ((a4 & 1) != 0)
    {
      result = ubrk_following();
      a3 = result;
      if (v8)
      {
        if ((_DWORD)result != -1)
        {
          while (a3 < a2)
          {
            if ((_DWORD)a3)
            {
              if ((int)a3 - 1 >= a2)
                goto LABEL_86;
              v19 = a1[(a3 - 1)];
              v20 = v19 > 0x3F || ((1 << v19) & 0x8C00500200000400) == 0;
              if (!v20 || v19 == 160 || u_isspace(v19))
                return a3;
              v21 = &a1[a3];
            }
            else
            {
              v21 = a1;
            }
            v22 = *v21;
            v23 = v22 > 0x3F || ((1 << v22) & 0x8C00500200000400) == 0;
            if (v23 && v22 != 160 && !u_isspace(v22))
              return a3;
            result = ubrk_following();
            a3 = result;
            if ((_DWORD)result == -1)
              return a2;
          }
          return a3;
        }
      }
      else if ((_DWORD)result != -1)
      {
        while (a3 < a2)
        {
          if ((_DWORD)a3)
          {
            if ((int)a3 - 1 >= a2)
              goto LABEL_86;
            v10 = *(unsigned __int16 *)&a1[2 * (a3 - 1)];
            v11 = v10 > 0x3F || ((1 << v10) & 0x8C00500200000400) == 0;
            if (!v11 || v10 == 160 || u_isspace(v10))
              return a3;
            v12 = &a1[2 * a3];
          }
          else
          {
            v12 = a1;
          }
          v13 = *(unsigned __int16 *)v12;
          v14 = v13 > 0x3F || ((1 << v13) & 0x8C00500200000400) == 0;
          if (v14 && v13 != 160 && !u_isspace(v13))
            return a3;
          result = ubrk_following();
          a3 = result;
          if ((_DWORD)result == -1)
            return a2;
        }
        return a3;
      }
      return a2;
    }
    else
    {
      if (v8)
      {
        while (1)
        {
          result = ubrk_preceding();
          v15 = (_DWORD)result == -1 ? 0 : result;
          v24 = v15 - 1;
          if ((int)v15 < 1)
            break;
          if (v15 >= a2)
            goto LABEL_86;
          a3 = result;
          result = a1[v15];
          if ((result > 0x3F || ((1 << result) & 0x8C00500200000400) == 0) && (_DWORD)result != 160)
          {
            result = u_isspace(result);
            if (!(_DWORD)result)
              return a3;
          }
          if (v24 >= a2)
          {
LABEL_86:
            __break(1u);
            return result;
          }
          v26 = a1[v24];
          if (v26 == 10 || v26 == 160 || u_isspace(v26))
            return a3;
        }
      }
      else
      {
        while (1)
        {
          result = ubrk_preceding();
          v15 = (_DWORD)result == -1 ? 0 : result;
          v16 = v15 - 1;
          if ((int)v15 < 1)
            break;
          if (v15 >= a2)
            goto LABEL_86;
          a3 = result;
          result = *(unsigned __int16 *)&a1[2 * v15];
          v17 = result > 0x3F || ((1 << result) & 0x8C00500200000400) == 0;
          if (!v17 || (_DWORD)result == 160 || (result = u_isspace(result), (_DWORD)result))
          {
            if (v16 >= a2)
              goto LABEL_86;
            v18 = *(unsigned __int16 *)&a1[2 * v16];
            if (v18 != 10 && v18 != 160 && !u_isspace(v18))
              continue;
          }
          return a3;
        }
      }
      return v15;
    }
  }
  return a3;
}

void sub_195411AD0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_195411B78(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_195411BE8(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_195411E88(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t av1DecompressionOutputCallback(void *a1, CMTime *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5, CMTime *a6, CMTime *a7)
{
  int v7;
  uint64_t v10;
  CMTimeValue value;
  double Seconds;
  NSObject *v13;
  void *v14;
  CMTime v16;
  uint64_t v17;

  v7 = a3;
  v17 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3 || !a5)
  {
    if (a3 <= 1)
      a3 = 1;
    else
      a3 = a3;
    objc_msgSend(a1, "setError:", a3, a4, a5, a6, a7);
    v13 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v16.value) = 67109120;
      HIDWORD(v16.value) = v7;
      _os_log_error_impl(&dword_1940B8000, v13, OS_LOG_TYPE_ERROR, "RTCVideoDecoderVTBAV1 failed to decode with status: %d", (uint8_t *)&v16, 8u);
    }
    (*(void (**)(void))(a2->value + 16))();
  }
  else
  {
    value = a2->value;
    v10 = *(_QWORD *)&a2->timescale;
    v16 = *a6;
    Seconds = PAL::softLinkCoreMediaCMTimeGetSeconds((PAL *)&v16, a2);
    (*(void (**)(CMTimeValue, __CVBuffer *, uint64_t, uint64_t))(value + 16))(value, a5, v10, (uint64_t)(Seconds * 1000000000.0));
  }
  _Block_release((const void *)a2->value);
  return WTF::fastFree((WTF *)a2, v14);
}

void sub_195412008(_Unwind_Exception *a1)
{
  const void **v1;
  void *v3;

  _Block_release(*v1);
  WTF::fastFree((WTF *)v1, v3);
  _Unwind_Resume(a1);
}

_QWORD *WebCore::WebRTCVideoDecoder::createFromLocalDecoder@<X0>(WebCore::WebRTCVideoDecoder *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E335B708;
  result[1] = this;
  *a2 = result;
  return result;
}

uint64_t WebCore::createAV1VTBDecoder@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  Web_RTCVideoDecoderVTBAV1 *v5;
  uint64_t result;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E335B748;
  v5 = objc_alloc_init(Web_RTCVideoDecoderVTBAV1);
  v4[1] = v5;
  result = -[Web_RTCVideoDecoderVTBAV1 setCallback:](v5, "setCallback:", a1);
  *a2 = v4;
  return result;
}

void sub_1954121F4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  const void *v4;

  v4 = (const void *)*((_QWORD *)v2 + 1);
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
    CFRelease(v4);
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::WebRTCLocalVideoDecoder::~WebRTCLocalVideoDecoder(webrtc **this, void *a2)
{
  webrtc::releaseLocalDecoder(this[1], a2);
}

{
  void *v3;

  webrtc::releaseLocalDecoder(this[1], a2);
  WTF::fastFree((WTF *)this, v3);
}

void WebCore::WebRTCDecoderVTBAV1::~WebRTCDecoderVTBAV1(id *this)
{
  id v2;

  objc_msgSend(this[1], "releaseDecoder");
  v2 = this[1];
  this[1] = 0;
  if (v2)
    CFRelease(v2);
}

{
  void *v2;
  id v3;

  objc_msgSend(this[1], "releaseDecoder");
  v3 = this[1];
  this[1] = 0;
  if (v3)
    CFRelease(v3);
  WTF::fastFree((WTF *)this, v2);
}

void sub_195412280(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WTF::ASCIILiteral const,12ul>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 12;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
  v5 = v4;
  *(_DWORD *)(a1 + 8) = 12;
  *(_QWORD *)a1 = v4;
  v6 = a2[1];
  if (v6)
  {
    if (v6 == 1)
    {
      v7 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = v31;
    }
    *v5 = v7;
  }
  else
  {
    *v4 = 0;
  }
  v8 = a2[3];
  if (v8)
  {
    if (v8 == 1)
    {
      v9 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = v31;
    }
    v5[1] = v9;
  }
  else
  {
    v5[1] = 0;
  }
  v10 = a2[5];
  if (v10)
  {
    if (v10 == 1)
    {
      v11 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v11 = v31;
    }
    v5[2] = v11;
  }
  else
  {
    v5[2] = 0;
  }
  v12 = a2[7];
  if (v12)
  {
    if (v12 == 1)
    {
      v13 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = v31;
    }
    v5[3] = v13;
  }
  else
  {
    v5[3] = 0;
  }
  v14 = a2[9];
  if (v14)
  {
    if (v14 == 1)
    {
      v15 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = v31;
    }
    v5[4] = v15;
  }
  else
  {
    v5[4] = 0;
  }
  v16 = a2[11];
  if (v16)
  {
    if (v16 == 1)
    {
      v17 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v17 = v31;
    }
    v5[5] = v17;
  }
  else
  {
    v5[5] = 0;
  }
  v18 = a2[13];
  if (v18)
  {
    if (v18 == 1)
    {
      v19 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v19 = v31;
    }
    v5[6] = v19;
  }
  else
  {
    v5[6] = 0;
  }
  v20 = a2[15];
  if (v20)
  {
    if (v20 == 1)
    {
      v21 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v21 = v31;
    }
    v5[7] = v21;
  }
  else
  {
    v5[7] = 0;
  }
  v22 = a2[17];
  if (v22)
  {
    if (v22 == 1)
    {
      v23 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v23 = v31;
    }
    v5[8] = v23;
  }
  else
  {
    v5[8] = 0;
  }
  v24 = a2[19];
  if (v24)
  {
    if (v24 == 1)
    {
      v25 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v25 = v31;
    }
    v5[9] = v25;
  }
  else
  {
    v5[9] = 0;
  }
  v26 = a2[21];
  if (v26)
  {
    if (v26 == 1)
    {
      v27 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v27 = v31;
    }
    v5[10] = v27;
  }
  else
  {
    v5[10] = 0;
  }
  v28 = a2[23];
  if (v28)
  {
    if (v28 == 1)
    {
      v29 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v29 = v31;
    }
    v5[11] = v29;
  }
  else
  {
    v5[11] = 0;
  }
  return a1;
}

void sub_195412620(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RetainPtr<__CFString const*>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RetainPtr<__CFString const*>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(_QWORD *a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE81F88 && (v2 = *(_DWORD *)(qword_1ECE81F88 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE81F88 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RetainPtr<__CFString const*>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RetainPtr<__CFString const*>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v3, a1);
}

const void **WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::AtomString,WTF::RetainPtr<__CFString const*>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RetainPtr<__CFString const*>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>,WTF::AtomString const&,WebCore::LocaleCocoa::canonicalLanguageIdentifierFromString(WTF::AtomString const&)::$_0>(uint64_t a1, WTF::StringImpl *a2, uint64_t **a3)
{
  uint64_t v5;
  void *v6;
  const __CFString *v7;

  WTF::GenericHashTraits<WTF::AtomString>::assignToEmpty<WTF::AtomString,WTF::AtomString const&>((WTF::StringImpl **)a1, a2);
  v5 = **a3;
  v6 = (void *)MEMORY[0x1E0C99DC8];
  if (v5)
    v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E3487BC0;
  return WTF::RetainPtr<__CFString const*>::operator=((const void **)(a1 + 8), (CFTypeRef)objc_msgSend(v6, "canonicalLanguageIdentifierFromString:", v7));
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RetainPtr<__CFString const*>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RetainPtr<__CFString const*>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(unsigned int a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v4 = qword_1ECE81F88;
  if (qword_1ECE81F88)
  {
    LODWORD(v5) = *(_DWORD *)(qword_1ECE81F88 - 4);
    v6 = *(_DWORD *)(qword_1ECE81F88 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE81F88 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a1;
  *(_DWORD *)(qword_1ECE81F88 - 8) = a1 - 1;
  *(_DWORD *)(qword_1ECE81F88 - 16) = 0;
  *(_DWORD *)(qword_1ECE81F88 - 12) = v6;
  v9 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v11 = (_QWORD *)v4;
    do
    {
      if (*v11 != -1)
      {
        if (*v11)
        {
          v12 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RetainPtr<__CFString const*>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RetainPtr<__CFString const*>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::reinsert(v11);
          WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>::~KeyValuePair((uint64_t)v11, v13);
          if (v11 == a2)
            v9 = v12;
        }
        else
        {
          WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>::~KeyValuePair((uint64_t)v11, v8);
        }
      }
      v11 += 2;
      --v5;
    }
    while (v5);
    goto LABEL_14;
  }
  result = 0;
  if (v4)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v9;
  }
  return result;
}

uint64_t WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;

  v3 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RetainPtr<__CFString const*>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RetainPtr<__CFString const*>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::reinsert(_QWORD *a1)
{
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1ECE81F88)
    v2 = *(_DWORD *)(qword_1ECE81F88 - 8);
  else
    v2 = 0;
  v3 = 0;
  v4 = *(_DWORD *)(*a1 + 16) >> 8;
  do
  {
    v5 = v4 & v2;
    v4 = ++v3 + v5;
  }
  while (*(_QWORD *)(qword_1ECE81F88 + 16 * v5));
  v6 = qword_1ECE81F88 + 16 * v5;
  v7 = *(const void **)(v6 + 8);
  *(_QWORD *)(v6 + 8) = 0;
  if (v7)
  {
    CFRelease(v7);
    v9 = *(WTF::StringImpl **)v6;
    *(_QWORD *)v6 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    *(_QWORD *)v6 = 0;
  }
  v10 = *a1;
  *a1 = 0;
  *(_QWORD *)v6 = v10;
  v11 = a1[1];
  a1[1] = 0;
  *(_QWORD *)(v6 + 8) = v11;
  return v6;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RetainPtr<__CFString const*>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RetainPtr<__CFString const*>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  const void *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(const void **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          CFRelease(v6);
          v5 = *(WTF::StringImpl **)v4;
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *WTF::Vector<WTF::String,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WTF::String,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<WTF::String,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 0xD)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 12;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x195412B44);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0xD)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 12;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

uint64_t WTF::Vector<WTF::String,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,NSString *>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    result = MEMORY[0x19AEA5508](*(_QWORD *)v3 + 8 * *(unsigned int *)(v3 + 12), *a2);
    ++*(_DWORD *)(v3 + 12);
    return result;
  }
  v9 = *(void **)result;
  if (v8 < 0xD)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 12;
    goto LABEL_12;
  }
  if (!(v8 >> 29))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_12:
    memcpy(v10, v9, 8 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<NSDateFormatter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<NSDateFormatter>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RetainPtr<NSDateFormatter>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RetainPtr<NSDateFormatter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (int *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
          v18 = ((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16);
          do
          {
            v19 = v18 & v15;
            v18 = ++v16 + v19;
          }
          while (*(_DWORD *)(v14 + 16 * v19));
          v20 = v14 + 16 * v19;
          v21 = *(const void **)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v21)
            CFRelease(v21);
          *(_DWORD *)v20 = *v10;
          v22 = v4 + 16 * v9;
          v23 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          *(_QWORD *)(v20 + 8) = v23;
          v13 = *(const void **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          CFRelease(v13);
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(const void **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t *WTF::HashMap<int,float,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<float>,WTF::HashTableTraits>::inlineSet<int const&,float &>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<int,WTF::KeyValuePair<int,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,float>>,WTF::DefaultHash<int>,WTF::HashMap<int,float,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (uint64_t *)(v8 + 8 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v15;
        *(_QWORD *)(a4 + 8) = v8 + 8 * v21;
        *(_BYTE *)(a4 + 16) = 0;
        *((_DWORD *)v15 + 1) = *a3;
        return result;
      }
      if (v16 == -1)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (uint64_t *)(v8 + 8 * v14);
      v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15);
    if (v17)
    {
      *v17 = 0x7F80000000000000;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v15 = v17;
    }
  }
  *(_DWORD *)v15 = v11;
  *((_DWORD *)v15 + 1) = *a3;
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_28;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_29:
    result = WTF::HashTable<int,WTF::KeyValuePair<int,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,float>>,WTF::DefaultHash<int>,WTF::HashMap<int,float,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v6, v26, v15);
    v15 = result;
    v22 = *v6;
    if (*v6)
      v25 = *(unsigned int *)(v22 - 4);
    else
      v25 = 0;
  }
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v22 + 8 * v25;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_QWORD *WTF::HashTable<int,WTF::KeyValuePair<int,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,float>>,WTF::DefaultHash<int>,WTF::HashMap<int,float,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = v9 + 20;
    do
    {
      *(_QWORD *)(v12 - 4) = 0x7F80000000000000;
      v12 += 8;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_DWORD *)(v6 + 8 * v13);
      if ((*v15 + 1) >= 2)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = 0;
        v19 = 9 * ((*v15 + ~(*v15 << 15)) ^ ((*v15 + ~(*v15 << 15)) >> 10));
        v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
        do
        {
          v21 = v20 & v17;
          v20 = ++v18 + v21;
        }
        while (*(_DWORD *)(v16 + 8 * v21));
        v22 = (_QWORD *)(v16 + 8 * v21);
        *v22 = *(_QWORD *)v15;
        if (v15 == a3)
          v14 = v22;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

void WebCore::WebRTCLocalVideoDecoder::flush(WebCore::WebRTCLocalVideoDecoder *this)
{
  JUMPOUT(0x19AEA5BECLL);
}

uint64_t WebCore::WebRTCLocalVideoDecoder::setFormat(uint64_t a1, void *a2, const unsigned __int8 *a3)
{
  return webrtc::setDecodingFormat(*(webrtc **)(a1 + 8), a2, a3);
}

uint64_t WebCore::WebRTCLocalVideoDecoder::decodeFrame(uint64_t a1, void *a2, uint64_t a3, const unsigned __int8 *a4)
{
  return webrtc::decodeFrame(*(webrtc **)(a1 + 8), a2, a3, a4);
}

uint64_t WebCore::WebRTCLocalVideoDecoder::setFrameSize(webrtc **this, void *a2)
{
  return webrtc::setDecoderFrameSize(this[1], a2);
}

void sub_19541318C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::WebRTCDecoderVTBAV1::flush(id *this)
{
  return objc_msgSend(this[1], "flush");
}

uint64_t WebCore::WebRTCDecoderVTBAV1::setFormat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend(*(id *)(a1 + 8), "setWidth:height:", a4, a5);
}

uint64_t WebCore::WebRTCDecoderVTBAV1::decodeFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 8), "decodeData:size:timeStamp:", a3, a4, a2);
}

uint64_t WebCore::WebRTCDecoderVTBAV1::setFrameSize(id *this, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(this[1], "setWidth:height:", a2, a3);
}

__n128 WebCore::IDBRequestData::IDBRequestData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 *a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  __n128 result;
  unint64_t v13;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  result = *a7;
  v13 = a7[1].n128_u64[0];
  *(__n128 *)(a1 + 40) = *a7;
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = a8;
  *(_QWORD *)(a1 + 72) = a9;
  *(_BYTE *)(a1 + 80) = a10;
  *(_QWORD *)(a1 + 88) = a11;
  *(_BYTE *)(a1 + 96) = a12;
  return result;
}

{
  __n128 result;
  unint64_t v13;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  result = *a7;
  v13 = a7[1].n128_u64[0];
  *(__n128 *)(a1 + 40) = *a7;
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = a8;
  *(_QWORD *)(a1 + 72) = a9;
  *(_BYTE *)(a1 + 80) = a10;
  *(_QWORD *)(a1 + 88) = a11;
  *(_BYTE *)(a1 + 96) = a12;
  return result;
}

__n128 WebCore::IDBRequestData::IDBRequestData(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v2 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v2;
  result = *(__n128 *)(a2 + 64);
  *(__n128 *)(a1 + 64) = result;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return result;
}

{
  __int128 v2;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v2 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v2;
  result = *(__n128 *)(a2 + 64);
  *(__n128 *)(a1 + 64) = result;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return result;
}

_QWORD *WebCore::IDBResourceIdentifier::IDBResourceIdentifier(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

__n128 WebCore::IDBRequestData::isolatedCopy@<Q0>(WebCore::IDBRequestData *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_QWORD *)a2 = *(_QWORD *)this;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)((char *)this + 40);
  *(_BYTE *)(a2 + 56) = *((_BYTE *)this + 56);
  result = *((__n128 *)this + 4);
  *(__n128 *)(a2 + 64) = result;
  *(_BYTE *)(a2 + 80) = *((_BYTE *)this + 80);
  *(_QWORD *)(a2 + 88) = *((_QWORD *)this + 11);
  *(_BYTE *)(a2 + 96) = *((_BYTE *)this + 96);
  return result;
}

uint64_t WebCore::IDBRequestData::requestIdentifier(WebCore::IDBRequestData *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t WebCore::IDBRequestData::transactionIdentifier(WebCore::IDBRequestData *this)
{
  return *((_QWORD *)this + 3);
}

_QWORD *WebCore::IDBResourceIdentifier::IDBResourceIdentifier(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t WebCore::IDBResourceIdentifier::isolatedCopy(WebCore::IDBResourceIdentifier *this)
{
  return *(_QWORD *)this;
}

uint64_t WebCore::IDBResourceIdentifier::emptyValue(WebCore::IDBResourceIdentifier *this)
{
  return 0;
}

double WebCore::IDBResultData::IDBResultData(WebCore::IDBResultData *this)
{
  double result;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 48) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  return result;
}

{
  double result;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 48) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  return result;
}

WebCore::IDBResultData *WebCore::IDBResultData::IDBResultData(WebCore::IDBResultData *this, const WebCore::IDBResultData *a2)
{
  _DWORD *v4;
  __int128 v5;
  bmalloc::api **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  _DWORD *v11;
  __int128 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::IDBObjectStoreInfo *v17;
  WTF::StringImpl *v18;
  const WebCore::IDBTransactionInfo *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WebCore::IDBTransactionInfo *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  const WebCore::IDBGetResult *v31;
  WebCore::IDBGetResult *v32;
  WTF::StringImpl *v33;
  WebCore::IDBGetResult *v34;
  bmalloc::api *v35;
  void *v36;
  const WebCore::IDBGetAllResult *v37;
  WebCore::IDBGetAllResult *v38;
  WebCore::IDBGetAllResult *v39;
  bmalloc::api *v40;
  char v42;
  char v43;

  *(_BYTE *)this = *(_BYTE *)a2;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *((_WORD *)this + 12) = *((_WORD *)a2 + 12);
  v4 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v4)
    *v4 += 2;
  *((_QWORD *)this + 4) = v4;
  v5 = *(_OWORD *)((char *)a2 + 40);
  *((_QWORD *)this + 11) = 0;
  v6 = (bmalloc::api **)((char *)this + 88);
  *(_OWORD *)((char *)this + 40) = v5;
  *(_OWORD *)((char *)this + 56) = 0u;
  v7 = (WTF::StringImpl ***)((char *)this + 56);
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  v8 = *((_QWORD *)a2 + 7);
  if (v8)
  {
    v9 = bmalloc::api::isoAllocate();
    v10 = (WTF::StringImpl **)v9;
    v11 = *(_DWORD **)v8;
    if (*(_QWORD *)v8)
      *v11 += 2;
    *(_QWORD *)v9 = v11;
    v12 = *(_OWORD *)(v8 + 8);
    *(_QWORD *)(v9 + 24) = *(_QWORD *)(v8 + 24);
    *(_OWORD *)(v9 + 8) = v12;
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)(v9 + 32), (_QWORD *)(v8 + 32));
    v14 = *v7;
    *v7 = v10;
    if (v14)
    {
      v15 = v14[4];
      if (v15)
      {
        v16 = *((unsigned int *)v15 - 1);
        if ((_DWORD)v16)
        {
          v17 = (WTF::StringImpl *)((char *)v15 + 8);
          do
          {
            if (*((_QWORD *)v17 - 1) != -1)
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v17, v13);
            v17 = (WebCore::IDBObjectStoreInfo *)((char *)v17 + 72);
            --v16;
          }
          while (v16);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v15 - 16), v13);
      }
      v18 = *v14;
      *v14 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v13);
        else
          *(_DWORD *)v18 -= 2;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v14, v13);
    }
  }
  v19 = (const WebCore::IDBTransactionInfo *)*((_QWORD *)a2 + 8);
  if (v19)
  {
    v20 = WTF::fastMalloc((WTF *)0x38);
    WebCore::IDBTransactionInfo::IDBTransactionInfo(v20, v19);
    v22 = (WebCore::IDBTransactionInfo *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v20;
    if (v22)
    {
      WebCore::IDBTransactionInfo::~IDBTransactionInfo(v22, v21);
      WTF::fastFree(v23, v24);
    }
  }
  v25 = *((_QWORD *)a2 + 9);
  if (v25)
  {
    v26 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v26 = *(_BYTE *)v25;
    *(_BYTE *)(v26 + 8) = 0;
    v27 = (void *)(v26 + 8);
    *(_DWORD *)(v26 + 24) = -1;
    v28 = *(unsigned int *)(v25 + 24);
    if ((_DWORD)v28 != -1)
    {
      ((void (*)(char *, void *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_3[v28])(&v42, v27, v25 + 8);
      *(_DWORD *)(v26 + 24) = v28;
    }
    v29 = (unsigned int *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v26;
    if (v29)
    {
      v30 = v29[6];
      if ((_DWORD)v30 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_3[v30])(&v43, v29 + 2);
      v29[6] = -1;
      WTF::fastFree((WTF *)v29, v27);
    }
  }
  v31 = (const WebCore::IDBGetResult *)*((_QWORD *)a2 + 10);
  if (v31)
  {
    v32 = (WebCore::IDBGetResult *)bmalloc::api::isoAllocate();
    WebCore::IDBGetResult::IDBGetResult(v32, v31);
    v34 = (WebCore::IDBGetResult *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v32;
    if (v34)
    {
      WebCore::IDBGetResult::~IDBGetResult(v34, v33);
      bmalloc::api::isoDeallocate(v35, v36);
    }
  }
  v37 = (const WebCore::IDBGetAllResult *)*((_QWORD *)a2 + 11);
  if (v37)
  {
    v38 = (WebCore::IDBGetAllResult *)bmalloc::api::isoAllocate();
    v39 = WebCore::IDBGetAllResult::IDBGetAllResult(v38, v37);
    v40 = *v6;
    *v6 = v39;
    if (v40)
      std::default_delete<WebCore::IDBGetAllResult>::operator()[abi:sn180100]((_DWORD)this + 88, v40);
  }
  return this;
}

void WebCore::IDBResultData::isolatedCopy(WebCore::IDBResultData *this, const WebCore::IDBResultData *a2, WebCore::IDBResultData *a3)
{
  __int16 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WebCore::IDBObjectStoreInfo *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::IDBTransactionInfo *v22;
  WTF::StringImpl *v23;
  WebCore::IDBTransactionInfo *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int **v34;
  uint64_t v35;
  WebCore::IDBGetResult *v36;
  WTF::StringImpl *v37;
  WebCore::IDBGetResult *v38;
  bmalloc::api *v39;
  void *v40;
  WebCore::IDBGetAllResult *v41;
  uint64_t v42;
  WebCore::IDBGetAllResult *v43;
  bmalloc::api *v44;
  uint64_t *v45;
  bmalloc::api *v46;
  WebCore::IDBResultData *v47;
  char v48;
  WTF::StringImpl *v49;

  *(_BYTE *)a2 = *(_BYTE *)this;
  *(_OWORD *)((char *)a2 + 8) = *(_OWORD *)((char *)this + 8);
  v5 = *((_WORD *)this + 12);
  WTF::String::isolatedCopy();
  v7 = v49;
  if (v49)
  {
    v8 = *(_DWORD *)v49;
    *(_DWORD *)v49 += 2;
    v49 = 0;
    if (v8)
      *(_DWORD *)v7 = v8;
    else
      WTF::StringImpl::destroy(v7, v6);
  }
  *((_WORD *)a2 + 12) = v5;
  v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *((_QWORD *)this + 5);
  *((_BYTE *)a2 + 48) = *((_BYTE *)this + 48);
  *((_QWORD *)a2 + 5) = v10;
  *((_QWORD *)a2 + 12) = *((_QWORD *)this + 12);
  v11 = *((_QWORD *)this + 7);
  if (v11)
  {
    v12 = bmalloc::api::isoAllocate();
    v13 = WebCore::IDBDatabaseInfo::IDBDatabaseInfo(v12, v11);
    v15 = (WTF::StringImpl **)*((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = v13;
    if (v15)
    {
      v16 = v15[4];
      if (v16)
      {
        v17 = *((unsigned int *)v16 - 1);
        if ((_DWORD)v17)
        {
          v18 = (WTF::StringImpl *)((char *)v16 + 8);
          do
          {
            if (*((_QWORD *)v18 - 1) != -1)
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v18, v14);
            v18 = (WebCore::IDBObjectStoreInfo *)((char *)v18 + 72);
            --v17;
          }
          while (v17);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v16 - 16), v14);
      }
      v19 = *v15;
      *v15 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v14);
        else
          *(_DWORD *)v19 -= 2;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v15, v14);
    }
  }
  v20 = *((_QWORD *)this + 8);
  if (v20)
  {
    v21 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;
    *(_WORD *)(v21 + 16) = 512;
    *(_OWORD *)(v21 + 24) = 0u;
    *(_OWORD *)(v21 + 40) = 0u;
    WebCore::IDBTransactionInfo::isolatedCopy(v20, (const WebCore::IDBTransactionInfo *)v21, v22);
    v24 = (WebCore::IDBTransactionInfo *)*((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = v21;
    if (v24)
    {
      WebCore::IDBTransactionInfo::~IDBTransactionInfo(v24, v23);
      WTF::fastFree(v25, v26);
    }
  }
  v27 = *((_QWORD *)this + 9);
  if (v27)
  {
    v28 = (_BYTE *)WTF::fastMalloc((WTF *)0x20);
    *v28 = 0;
    v29 = *(unsigned int *)(v27 + 24);
    if ((_DWORD)v29 == -1)
    {
      v47 = (WebCore::IDBResultData *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::IDBResultData::isolatedCopy(v47);
      return;
    }
    v30 = v28;
    v49 = (WTF::StringImpl *)&v48;
    ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v29])(&v49, v27 + 8);
    v32 = (unsigned int *)*((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 9) = v30;
    if (v32)
    {
      v33 = v32[6];
      if ((_DWORD)v33 != -1)
        ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_3[v33])(&v49, v32 + 2);
      v32[6] = -1;
      WTF::fastFree((WTF *)v32, v31);
    }
  }
  v34 = (unsigned int **)*((_QWORD *)this + 10);
  if (v34)
  {
    v35 = bmalloc::api::isoAllocate();
    *(_QWORD *)(v35 + 48) = 0;
    *(_DWORD *)(v35 + 64) = 0;
    *(_BYTE *)(v35 + 72) = 0;
    *(_QWORD *)(v35 + 80) = 0;
    *(_DWORD *)(v35 + 96) = 0;
    *(_BYTE *)(v35 + 104) = 0;
    *(_BYTE *)(v35 + 128) = 0;
    *(_QWORD *)(v35 + 136) = 0;
    *(_QWORD *)(v35 + 144) = 0;
    *(_OWORD *)v35 = 0u;
    *(_OWORD *)(v35 + 16) = 0u;
    *(_OWORD *)(v35 + 25) = 0u;
    *(_BYTE *)(v35 + 152) = 1;
    WebCore::IDBGetResult::isolatedCopy(v34, (const WebCore::IDBGetResult *)v35, v36);
    v38 = (WebCore::IDBGetResult *)*((_QWORD *)a2 + 10);
    *((_QWORD *)a2 + 10) = v35;
    if (v38)
    {
      WebCore::IDBGetResult::~IDBGetResult(v38, v37);
      bmalloc::api::isoDeallocate(v39, v40);
    }
  }
  v41 = (WebCore::IDBGetAllResult *)*((_QWORD *)this + 11);
  if (v41)
  {
    v42 = bmalloc::api::isoAllocate();
    *(_BYTE *)v42 = 0;
    *(_BYTE *)(v42 + 64) = 0;
    *(_OWORD *)(v42 + 8) = 0u;
    *(_OWORD *)(v42 + 24) = 0u;
    *(_BYTE *)(v42 + 40) = 0;
    WebCore::IDBGetAllResult::isolatedCopy(v41, (const WebCore::IDBGetAllResult *)v42, v43);
    v46 = (bmalloc::api *)*((_QWORD *)a2 + 11);
    v45 = (uint64_t *)((char *)a2 + 88);
    v44 = v46;
    *v45 = v42;
    if (v46)
      std::default_delete<WebCore::IDBGetAllResult>::operator()[abi:sn180100]((int)v45, v44);
  }
}

void WebCore::IDBResultData::isolatedCopy(WebCore::IDBResultData *this@<X0>, WebCore::IDBResultData *a2@<X2>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_WORD *)(a3 + 24) = 0;
  WebCore::IDBResultData::isolatedCopy(this, (const WebCore::IDBResultData *)a3, a2);
}

uint64_t WebCore::IDBResultData::openDatabaseUpgradeNeeded@<X0>(WebCore::IDBResultData *this@<X0>, const WebCore::IDBResourceIdentifier *a2@<X1>, WebCore::IDBServer::UniqueIDBDatabaseTransaction *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t result;

  *(_OWORD *)(a4 + 8) = *(_OWORD *)this;
  *(_WORD *)(a4 + 24) = 0;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_BYTE *)a4 = 2;
  v6 = *((_QWORD *)a3 + 1);
  *(_BYTE *)(a4 + 48) = 1;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 3) + 8) + 184);
  if (v7)
  {
    v9 = bmalloc::api::isoAllocate();
    v10 = v9;
    v11 = *(_DWORD **)v7;
    if (*(_QWORD *)v7)
      *v11 += 2;
    *(_QWORD *)v9 = v11;
    v12 = *(_OWORD *)(v7 + 8);
    *(_QWORD *)(v9 + 24) = *(_QWORD *)(v7 + 24);
    *(_OWORD *)(v9 + 8) = v12;
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)(v9 + 32), (_QWORD *)(v7 + 32));
    *(_QWORD *)(a4 + 56) = v10;
    v13 = WTF::fastMalloc((WTF *)0x38);
    result = WebCore::IDBTransactionInfo::IDBTransactionInfo(v13, (const WebCore::IDBResourceIdentifier *)((char *)a2 + 24));
    *(_QWORD *)(a4 + 64) = result;
  }
  else
  {
    result = 166;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::IDBResultData::getResult(WebCore::IDBResultData *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (!result)
  {
    result = 230;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::IDBResultData::getResultRef(WebCore::IDBResultData *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (!result)
  {
    result = 236;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::IDBResultData::getAllResult(WebCore::IDBResultData *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (!result)
  {
    result = 242;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::IDBTransactionInfo::IDBTransactionInfo(uint64_t this, const WebCore::IDBTransactionInfo *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  __int128 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebCore::IDBObjectStoreInfo *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD **v19;
  uint64_t v20;
  _DWORD *v21;

  v3 = this;
  *(_OWORD *)this = *(_OWORD *)a2;
  *(_WORD *)(this + 16) = *((_WORD *)a2 + 8);
  v4 = *((_QWORD *)a2 + 3);
  v5 = *((unsigned int *)a2 + 11);
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = v4;
  *(_DWORD *)(this + 44) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v3 + 40) = v5;
    *(_QWORD *)(v3 + 32) = v17;
    v18 = *((unsigned int *)a2 + 11);
    if ((_DWORD)v18)
    {
      v19 = (_DWORD **)*((_QWORD *)a2 + 4);
      v20 = 8 * v18;
      do
      {
        v21 = *v19;
        if (*v19)
          *v21 += 2;
        *v17++ = v21;
        ++v19;
        v20 -= 8;
      }
      while (v20);
    }
  }
  *(_QWORD *)(v3 + 48) = 0;
  v6 = *((_QWORD *)a2 + 6);
  if (v6)
  {
    v7 = bmalloc::api::isoAllocate();
    v8 = v7;
    v9 = *(_DWORD **)v6;
    if (*(_QWORD *)v6)
      *v9 += 2;
    *(_QWORD *)v7 = v9;
    v10 = *(_OWORD *)(v6 + 8);
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(v6 + 24);
    *(_OWORD *)(v7 + 8) = v10;
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBObjectStoreInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBObjectStoreInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBObjectStoreInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::HashTable((uint64_t *)(v7 + 32), (_QWORD *)(v6 + 32));
    v12 = *(WTF::StringImpl ***)(v3 + 48);
    *(_QWORD *)(v3 + 48) = v8;
    if (v12)
    {
      v13 = v12[4];
      if (v13)
      {
        v14 = *((unsigned int *)v13 - 1);
        if ((_DWORD)v14)
        {
          v15 = (WTF::StringImpl *)((char *)v13 + 8);
          do
          {
            if (*((_QWORD *)v15 - 1) != -1)
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v15, v11);
            v15 = (WebCore::IDBObjectStoreInfo *)((char *)v15 + 72);
            --v14;
          }
          while (v14);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v13 - 16), v11);
      }
      v16 = *v12;
      *v12 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v11);
        else
          *(_DWORD *)v16 -= 2;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v12, v11);
    }
  }
  return v3;
}

uint64_t WebCore::IDBTransactionInfo::isolatedCopy(uint64_t this, const WebCore::IDBTransactionInfo *a2, WebCore::IDBTransactionInfo *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::IDBObjectStoreInfo *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;

  v4 = this;
  *(_OWORD *)a2 = *(_OWORD *)this;
  *((_WORD *)a2 + 8) = *(_WORD *)(this + 16);
  *((_QWORD *)a2 + 3) = *(_QWORD *)(this + 24);
  v5 = *(unsigned int *)(this + 44);
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    v6 = WTF::fastMalloc((WTF *)(8 * v5));
    if (*(_DWORD *)(v4 + 44))
    {
      v7 = 0;
      v8 = 0;
      do
      {
        WTF::String::isolatedCopy();
        ++v8;
        *(_QWORD *)(v6 + v7) = v21;
        v7 += 8;
      }
      while (v8 < *(unsigned int *)(v4 + 44));
    }
    else
    {
      LODWORD(v8) = 0;
    }
  }
  else
  {
    LODWORD(v8) = 0;
    v6 = 0;
  }
  v9 = *((unsigned int *)a2 + 11);
  if ((_DWORD)v9)
  {
    v18 = (WTF::StringImpl **)*((_QWORD *)a2 + 4);
    v19 = 8 * v9;
    do
    {
      v20 = *v18;
      *v18 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, a2);
        else
          *(_DWORD *)v20 -= 2;
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  this = *((_QWORD *)a2 + 4);
  if (this)
  {
    *((_QWORD *)a2 + 4) = 0;
    *((_DWORD *)a2 + 10) = 0;
    this = WTF::fastFree((WTF *)this, a2);
  }
  *((_QWORD *)a2 + 4) = v6;
  *((_DWORD *)a2 + 10) = v5;
  *((_DWORD *)a2 + 11) = v8;
  v10 = *(_QWORD *)(v4 + 48);
  if (v10)
  {
    v11 = bmalloc::api::isoAllocate();
    this = WebCore::IDBDatabaseInfo::IDBDatabaseInfo(v11, v10);
    v13 = (WTF::StringImpl **)*((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = this;
    if (v13)
    {
      v14 = v13[4];
      if (v14)
      {
        v15 = *((unsigned int *)v14 - 1);
        if ((_DWORD)v15)
        {
          v16 = (WTF::StringImpl *)((char *)v14 + 8);
          do
          {
            if (*((_QWORD *)v16 - 1) != -1)
              WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v16, v12);
            v16 = (WebCore::IDBObjectStoreInfo *)((char *)v16 + 72);
            --v15;
          }
          while (v15);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v14 - 16), v12);
      }
      v17 = *v13;
      *v13 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v12);
        else
          *(_DWORD *)v17 -= 2;
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v13, v12);
    }
  }
  return this;
}

uint64_t WebCore::IDBTransactionInfo::isolatedCopy@<X0>(WebCore::IDBTransactionInfo *this@<X0>, WebCore::IDBTransactionInfo *a2@<X2>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 512;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  return WebCore::IDBTransactionInfo::isolatedCopy((uint64_t)this, (const WebCore::IDBTransactionInfo *)a3, a2);
}

WTF::StringImpl *WebCore::MediaCapabilities::decodingInfo(_QWORD *a1, uint64_t a2, WebCore *this, uint64_t *a4, double a5, double a6, float a7)
{
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  void *v14;
  WTF::StringImpl *result;
  NSObject *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  void *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  char v67;
  __int128 v68;
  _OWORD v69[2];
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint8_t buf[8];
  __int128 v78;
  __int128 v79;
  char v80;
  __int128 v81;
  _OWORD v82[2];
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  __int16 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  if (WebCore::isValidMediaConfiguration(this, (const WebCore::MediaConfiguration *)a2, a5, a6, a7))
  {
    v11 = *a4;
    *a4 = 0;
    v12 = *(char *)(a2 + 274);
    if (v12 <= 2)
      *(_DWORD *)(a2 + qword_1968DE430[v12]) += dword_1968DE448[v12];
    v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v13 = &off_1E335BAA0;
    *((_QWORD *)v13 + 1) = v11;
    *((_QWORD *)v13 + 2) = a2;
    v63 = v13;
    if (!*(_BYTE *)(a2 + 274))
    {
      *(_DWORD *)(a2 - 168) += 2;
      WebCore::gatherDecodingInfo(a2 - 192, (uint64_t)this, (uint64_t *)&v63);
      if (*(_DWORD *)(a2 - 168) == 2)
      {
        if ((*(_WORD *)(a2 - 162) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(a2 - 192), v14);
      }
      else
      {
        *(_DWORD *)(a2 - 168) -= 2;
      }
LABEL_7:
      result = v63;
      if (v63)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v63 + 8))(v63);
      return result;
    }
    v20 = a1 + 3;
    v19 = a1[3];
    ++a1[2];
    if (v19
      || (v21 = v13,
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1 + 3, 8u), v13 = v21, (v19 = *v20) != 0))
    {
      v22 = *(_DWORD *)(v19 - 8);
    }
    else
    {
      v22 = 0;
    }
    v23 = a1[2];
    v24 = (v23 + ~(v23 << 32)) ^ ((unint64_t)(v23 + ~(v23 << 32)) >> 22);
    v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
    v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
    v27 = v22 & ((v26 >> 31) ^ v26);
    v28 = (_QWORD *)(v19 + 16 * v27);
    v29 = *v28;
    if (*v28)
    {
      v30 = 0;
      v31 = 1;
      while (v29 != v23)
      {
        if (v29 == -1)
          v30 = v28;
        v27 = (v27 + v31) & v22;
        v28 = (_QWORD *)(v19 + 16 * v27);
        v29 = *v28;
        ++v31;
        if (!*v28)
        {
          if (v30)
          {
            *v30 = 0;
            v30[1] = 0;
            --*(_DWORD *)(a1[3] - 16);
            v23 = a1[2];
            v28 = v30;
          }
          goto LABEL_29;
        }
      }
      goto LABEL_44;
    }
LABEL_29:
    v32 = v28[1];
    *v28 = v23;
    v28[1] = v13;
    v63 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *v20;
    if (*v20)
      v34 = *(_DWORD *)(v33 - 12) + 1;
    else
      v34 = 1;
    *(_DWORD *)(v33 - 12) = v34;
    v35 = *v20;
    if (*v20)
      v36 = *(_DWORD *)(v35 - 12);
    else
      v36 = 0;
    v37 = (*(_DWORD *)(v35 - 16) + v36);
    v38 = *(unsigned int *)(v35 - 4);
    if (v38 > 0x400)
    {
      if (v38 > 2 * v37)
        goto LABEL_44;
    }
    else
    {
      if (3 * v38 > 4 * v37)
      {
LABEL_44:
        WebCore::MediaConfiguration::isolatedCopy(&v64, (uint64_t)this);
        buf[0] = 0;
        v80 = 0;
        if (v67)
        {
          v41 = v64;
          v64 = 0;
          *(_QWORD *)buf = v41;
          v78 = v65;
          v79 = v66;
          v80 = 1;
        }
        LOBYTE(v81) = 0;
        v83 = 0;
        if (v70)
        {
          v42 = v68;
          v68 = 0uLL;
          v81 = v42;
          v82[0] = v69[0];
          *(_OWORD *)((char *)v82 + 10) = *(_OWORD *)((char *)v69 + 10);
          v83 = 1;
        }
        LOBYTE(v84) = 0;
        v86 = 0;
        if (v73)
        {
          v84 = v71;
          v43 = v72;
          v71 = 0;
          v72 = 0;
          v85 = v43;
          v86 = 1;
        }
        LOBYTE(v87) = 0;
        v89 = 0;
        if (v76)
        {
          v87 = v74;
          v44 = v75;
          v74 = 0;
          v75 = 0;
          v88 = v44;
          v89 = 1;
        }
        v90 = *((_WORD *)this + 76);
        WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v64, v40);
        v45 = *(_OWORD *)(a2 + 240);
        v91 = *(_OWORD *)(a2 + 224);
        v92 = v45;
        v46 = a1[1];
        if (v46)
          goto LABEL_74;
        v46 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v46 = 1;
        *(_QWORD *)(v46 + 8) = a1;
        v48 = (unsigned int *)a1[1];
        a1[1] = v46;
        if (!v48)
          goto LABEL_74;
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          atomic_store(1u, v48);
          WTF::fastFree((WTF *)v48, v47);
        }
        v46 = a1[1];
        if (v46)
        {
LABEL_74:
          do
            v51 = __ldaxr((unsigned int *)v46);
          while (__stlxr(v51 + 1, (unsigned int *)v46));
        }
        v52 = a1[2];
        v93 = v46;
        v94 = v52;
        v53 = WTF::fastMalloc((WTF *)0xE0);
        *(_QWORD *)v53 = off_1E335BAF0;
        *(_BYTE *)(v53 + 16) = 0;
        *(_BYTE *)(v53 + 56) = 0;
        if (v80)
        {
          v54 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          *(_QWORD *)(v53 + 16) = v54;
          v55 = v79;
          *(_OWORD *)(v53 + 24) = v78;
          *(_OWORD *)(v53 + 40) = v55;
          *(_BYTE *)(v53 + 56) = 1;
        }
        *(_BYTE *)(v53 + 64) = 0;
        *(_BYTE *)(v53 + 112) = 0;
        if (v83)
        {
          v56 = v81;
          v81 = 0uLL;
          *(_OWORD *)(v53 + 64) = v56;
          v57 = *(_OWORD *)((char *)v82 + 10);
          *(_OWORD *)(v53 + 80) = v82[0];
          *(_OWORD *)(v53 + 90) = v57;
          *(_BYTE *)(v53 + 112) = 1;
        }
        *(_BYTE *)(v53 + 120) = 0;
        *(_BYTE *)(v53 + 136) = 0;
        if (v86)
        {
          *(_QWORD *)(v53 + 120) = v84;
          v58 = v85;
          v84 = 0;
          v85 = 0;
          *(_QWORD *)(v53 + 128) = v58;
          *(_BYTE *)(v53 + 136) = 1;
        }
        *(_BYTE *)(v53 + 144) = 0;
        *(_BYTE *)(v53 + 160) = 0;
        if (v89)
        {
          *(_QWORD *)(v53 + 144) = v87;
          v59 = v88;
          v87 = 0;
          v88 = 0;
          *(_QWORD *)(v53 + 152) = v59;
          *(_BYTE *)(v53 + 160) = 1;
        }
        *(_WORD *)(v53 + 168) = v90;
        v60 = v92;
        *(_OWORD *)(v53 + 176) = v91;
        *(_OWORD *)(v53 + 192) = v60;
        *(_QWORD *)(v53 + 208) = v46;
        *(_QWORD *)(v53 + 216) = v52;
        v64 = v53;
        WebCore::ScriptExecutionContext::postTaskToResponsibleDocument(a2, &v64);
        v62 = v64;
        v64 = 0;
        if (v62)
          (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
        v93 = 0;
        WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)buf, v61);
        goto LABEL_7;
      }
      if (!(_DWORD)v38)
      {
        v39 = 8;
        goto LABEL_43;
      }
    }
    v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
LABEL_43:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1 + 3, v39);
    goto LABEL_44;
  }
  v16 = qword_1ECE7C4A0;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_INFO, "Invalid decoding media configuration", buf, 2u);
  }
  v17 = *a4;
  *(_QWORD *)buf = 0;
  WebCore::DeferredPromise::reject(v17, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)buf, 0);
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::isValidMediaConfiguration(WebCore *this, const WebCore::MediaConfiguration *a2, double a3, double a4, float a5)
{
  WTF::StringImpl *v6;
  double v7;
  int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  _BOOL8 result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  double v21;
  double v22;
  float v23;
  int v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  char v35;
  WTF::StringImpl *v36;

  if (!*((_BYTE *)this + 40))
  {
    if (!*((_BYTE *)this + 96))
      return 0;
LABEL_76:
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    if (v19)
      *(_DWORD *)v19 += 2;
    v34 = v19;
    v35 = 0;
    v24 = 0;
    if (!WebCore::isValidMediaMIMEType((WebCore *)&v34, a2, a3, a4, a5))
      goto LABEL_144;
    WebCore::ContentType::containerType((WebCore::ContentType *)&v34, v21, v22, v23);
    v25 = v36;
    if (!v36)
    {
      v24 = 0;
LABEL_144:
      v33 = v34;
      v34 = 0;
      if (!v33)
        return v24 != 0;
      if (*(_DWORD *)v33 != 2)
      {
        *(_DWORD *)v33 -= 2;
        return v24 != 0;
      }
      WTF::StringImpl::destroy(v33, v20);
      return v24 != 0;
    }
    v26 = *((_DWORD *)v36 + 1);
    if (v26 < 6)
      goto LABEL_141;
    v27 = *((_DWORD *)v36 + 4);
    v28 = *((_QWORD *)v36 + 1);
    if ((v27 & 4) != 0)
    {
      v29 = *(_BYTE *)v28 & 0xDF;
      if (v26 == 6)
      {
        if (v29 != 65
          || (*(_BYTE *)(v28 + 1) & 0xDF) != 0x55
          || (*(_BYTE *)(v28 + 2) & 0xDF) != 0x44
          || (*(_BYTE *)(v28 + 3) & 0xDF) != 0x49
          || (*(_BYTE *)(v28 + 4) & 0xDF) != 0x4F)
        {
          goto LABEL_141;
        }
        v30 = *(unsigned __int8 *)(v28 + 5);
LABEL_89:
        if ((v30 & 0xFFFFFFDF) != 0xF)
          goto LABEL_141;
LABEL_98:
        v24 = 1;
        goto LABEL_142;
      }
      if (v29 == 65
        && (*(_BYTE *)(v28 + 1) & 0xDF) == 0x55
        && (*(_BYTE *)(v28 + 2) & 0xDF) == 0x44
        && (*(_BYTE *)(v28 + 3) & 0xDF) == 0x49
        && (*(_BYTE *)(v28 + 4) & 0xDF) == 0x4F)
      {
        v31 = *(unsigned __int8 *)(v28 + 5);
        goto LABEL_97;
      }
    }
    else
    {
      v32 = *(_WORD *)v28 & 0xFFDF;
      if (v26 == 6)
      {
        if (v32 != 65
          || (*(_WORD *)(v28 + 2) & 0xFFDF) != 0x55
          || (*(_WORD *)(v28 + 4) & 0xFFDF) != 0x44
          || (*(_WORD *)(v28 + 6) & 0xFFDF) != 0x49
          || (*(_WORD *)(v28 + 8) & 0xFFDF) != 0x4F)
        {
          goto LABEL_141;
        }
        v30 = *(unsigned __int16 *)(v28 + 10);
        goto LABEL_89;
      }
      if (v32 == 65
        && (*(_WORD *)(v28 + 2) & 0xFFDF) == 0x55
        && (*(_WORD *)(v28 + 4) & 0xFFDF) == 0x44
        && (*(_WORD *)(v28 + 6) & 0xFFDF) == 0x49
        && (*(_WORD *)(v28 + 8) & 0xFFDF) == 0x4F)
      {
        v31 = *(unsigned __int16 *)(v28 + 10);
LABEL_97:
        if ((v31 & 0xFFFFFFDF) == 0xF)
          goto LABEL_98;
      }
    }
    if (v26 < 0xC)
    {
LABEL_141:
      v24 = 0;
LABEL_142:
      v36 = 0;
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v20);
      else
        *(_DWORD *)v25 -= 2;
      goto LABEL_144;
    }
    if ((v27 & 4) != 0)
    {
      if ((*(_BYTE *)v28 & 0xDF) != 0x41
        || (*(_BYTE *)(v28 + 1) & 0xDF) != 0x50
        || (*(_BYTE *)(v28 + 2) & 0xDF) != 0x50
        || (*(_BYTE *)(v28 + 3) & 0xDF) != 0x4C
        || (*(_BYTE *)(v28 + 4) & 0xDF) != 0x49
        || (*(_BYTE *)(v28 + 5) & 0xDF) != 0x43
        || (*(_BYTE *)(v28 + 6) & 0xDF) != 0x41
        || (*(_BYTE *)(v28 + 7) & 0xDF) != 0x54
        || (*(_BYTE *)(v28 + 8) & 0xDF) != 0x49
        || (*(_BYTE *)(v28 + 9) & 0xDF) != 0x4F
        || (*(_BYTE *)(v28 + 10) & 0xDF) != 0x4E)
      {
        goto LABEL_141;
      }
      v30 = *(unsigned __int8 *)(v28 + 11);
    }
    else
    {
      if ((*(_WORD *)v28 & 0xFFDF) != 0x41
        || (*(_WORD *)(v28 + 2) & 0xFFDF) != 0x50
        || (*(_WORD *)(v28 + 4) & 0xFFDF) != 0x50
        || (*(_WORD *)(v28 + 6) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v28 + 8) & 0xFFDF) != 0x49
        || (*(_WORD *)(v28 + 10) & 0xFFDF) != 0x43
        || (*(_WORD *)(v28 + 12) & 0xFFDF) != 0x41
        || (*(_WORD *)(v28 + 14) & 0xFFDF) != 0x54
        || (*(_WORD *)(v28 + 16) & 0xFFDF) != 0x49
        || (*(_WORD *)(v28 + 18) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v28 + 20) & 0xFFDF) != 0x4E)
      {
        goto LABEL_141;
      }
      v30 = *(unsigned __int16 *)(v28 + 22);
    }
    goto LABEL_89;
  }
  v6 = *(WTF::StringImpl **)this;
  if (*(_QWORD *)this)
    *(_DWORD *)v6 += 2;
  v34 = v6;
  v35 = 0;
  v8 = 0;
  if (WebCore::isValidMediaMIMEType((WebCore *)&v34, a2, a3, a4, a5))
  {
    WebCore::ContentType::containerType((WebCore::ContentType *)&v34, v7, a4, a5);
    v9 = v36;
    if (!v36)
    {
      v8 = 0;
      goto LABEL_69;
    }
    v10 = *((_DWORD *)v36 + 1);
    if (v10 < 6)
      goto LABEL_66;
    v11 = *((_DWORD *)v36 + 4);
    v12 = *((_QWORD *)v36 + 1);
    if ((v11 & 4) != 0)
    {
      v13 = *(_BYTE *)v12 & 0xDF;
      if (v10 == 6)
      {
        if (v13 != 86
          || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x49
          || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x44
          || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x45
          || (*(_BYTE *)(v12 + 4) & 0xDF) != 0x4F)
        {
          goto LABEL_66;
        }
        v14 = *(unsigned __int8 *)(v12 + 5);
LABEL_15:
        if ((v14 & 0xFFFFFFDF) != 0xF)
          goto LABEL_66;
LABEL_26:
        v8 = 1;
        goto LABEL_67;
      }
      if (v13 == 86
        && (*(_BYTE *)(v12 + 1) & 0xDF) == 0x49
        && (*(_BYTE *)(v12 + 2) & 0xDF) == 0x44
        && (*(_BYTE *)(v12 + 3) & 0xDF) == 0x45
        && (*(_BYTE *)(v12 + 4) & 0xDF) == 0x4F)
      {
        v15 = *(unsigned __int8 *)(v12 + 5);
        goto LABEL_25;
      }
    }
    else
    {
      v16 = *(_WORD *)v12 & 0xFFDF;
      if (v10 == 6)
      {
        if (v16 != 86
          || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x49
          || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x44
          || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x45
          || (*(_WORD *)(v12 + 8) & 0xFFDF) != 0x4F)
        {
          goto LABEL_66;
        }
        v14 = *(unsigned __int16 *)(v12 + 10);
        goto LABEL_15;
      }
      if (v16 == 86
        && (*(_WORD *)(v12 + 2) & 0xFFDF) == 0x49
        && (*(_WORD *)(v12 + 4) & 0xFFDF) == 0x44
        && (*(_WORD *)(v12 + 6) & 0xFFDF) == 0x45
        && (*(_WORD *)(v12 + 8) & 0xFFDF) == 0x4F)
      {
        v15 = *(unsigned __int16 *)(v12 + 10);
LABEL_25:
        if ((v15 & 0xFFFFFFDF) == 0xF)
          goto LABEL_26;
      }
    }
    if (v10 < 0xC)
    {
LABEL_66:
      v8 = 0;
LABEL_67:
      v36 = 0;
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
      goto LABEL_69;
    }
    if ((v11 & 4) != 0)
    {
      if ((*(_BYTE *)v12 & 0xDF) != 0x41
        || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x50
        || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x50
        || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x4C
        || (*(_BYTE *)(v12 + 4) & 0xDF) != 0x49
        || (*(_BYTE *)(v12 + 5) & 0xDF) != 0x43
        || (*(_BYTE *)(v12 + 6) & 0xDF) != 0x41
        || (*(_BYTE *)(v12 + 7) & 0xDF) != 0x54
        || (*(_BYTE *)(v12 + 8) & 0xDF) != 0x49
        || (*(_BYTE *)(v12 + 9) & 0xDF) != 0x4F
        || (*(_BYTE *)(v12 + 10) & 0xDF) != 0x4E)
      {
        goto LABEL_66;
      }
      v14 = *(unsigned __int8 *)(v12 + 11);
    }
    else
    {
      if ((*(_WORD *)v12 & 0xFFDF) != 0x41
        || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x50
        || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x50
        || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v12 + 8) & 0xFFDF) != 0x49
        || (*(_WORD *)(v12 + 10) & 0xFFDF) != 0x43
        || (*(_WORD *)(v12 + 12) & 0xFFDF) != 0x41
        || (*(_WORD *)(v12 + 14) & 0xFFDF) != 0x54
        || (*(_WORD *)(v12 + 16) & 0xFFDF) != 0x49
        || (*(_WORD *)(v12 + 18) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v12 + 20) & 0xFFDF) != 0x4E)
      {
        goto LABEL_66;
      }
      v14 = *(unsigned __int16 *)(v12 + 22);
    }
    goto LABEL_15;
  }
LABEL_69:
  v17 = v34;
  v34 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, a2);
      if (!v8)
        return 0;
      goto LABEL_73;
    }
    *(_DWORD *)v17 -= 2;
  }
  if (!v8)
    return 0;
LABEL_73:
  result = 0;
  a3 = *((double *)this + 3);
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && a3 > 0.0)
  {
    if (!*((_BYTE *)this + 96))
      return 1;
    goto LABEL_76;
  }
  return result;
}

uint64_t WebCore::gatherDecodingInfo(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  __n128 v11;
  __n128 v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t result;
  _QWORD *v20;
  uint8_t buf[16];

  v6 = qword_1ECE7C4A0;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_INFO, "Gathering decoding MediaCapabilities", buf, 2u);
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E335BA20;
  v8[1] = v7;
  v20 = v8;
  v9 = *(_QWORD *)(a1 + 680);
  if ((*(_QWORD *)(v9 + 688) & 0x40) == 0 && *(_BYTE *)(a2 + 40) && *(_BYTE *)(a2 + 33))
    *(_BYTE *)(a2 + 33) = 0;
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a2 + 104), (unsigned int *)(v9 + 96));
  v10 = std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a2 + 128), (unsigned int *)(*(_QWORD *)(a1 + 680) + 120));
  *(_BYTE *)(a2 + 153) = (*(_QWORD *)(*(_QWORD *)(a1 + 680) + 712) & 0x2000000000000000) != 0;
  if (*(_BYTE *)(a2 + 152) == 2)
  {
    v14 = *(_QWORD *)(a1 + 528);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 24);
        if (v16)
        {
          v17 = *(_QWORD *)(v16 + 8);
          if (v17)
            WebCore::WebRTCProvider::createDecodingConfiguration(*(_QWORD *)(v17 + 296), a2, &v20, v11, v12, v13);
        }
      }
    }
  }
  else if (WebCore::mockEnabled(void)::enabled == 1)
  {
    WebCore::MediaEngineConfigurationFactoryMock::createDecodingConfiguration(a2, (WTF::StringImpl *)&v20, v11.n128_f64[0], v12.n128_f64[0], v13);
  }
  else
  {
    v18 = WebCore::factories((WebCore *)v10);
    WebCore::MediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0::operator()<WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)>,WebCore::MediaEngineConfigurationFactory::MediaEngineFactory *>((WebCore *)*v18, a2, &v20);
  }
  result = (uint64_t)v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebCore::MediaCapabilities::encodingInfo(_QWORD *a1, uint64_t a2, WebCore *this, uint64_t *a4, double a5, double a6, float a7)
{
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  void *v14;
  WTF::StringImpl *result;
  NSObject *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  void *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  char v67;
  __int128 v68;
  _OWORD v69[2];
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint8_t buf[8];
  __int128 v78;
  __int128 v79;
  char v80;
  __int128 v81;
  _OWORD v82[2];
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  if (WebCore::isValidMediaConfiguration(this, (const WebCore::MediaConfiguration *)a2, a5, a6, a7))
  {
    v11 = *a4;
    *a4 = 0;
    v12 = *(char *)(a2 + 274);
    if (v12 <= 2)
      *(_DWORD *)(a2 + qword_1968DE430[v12]) += dword_1968DE448[v12];
    v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v13 = &off_1E335BB68;
    *((_QWORD *)v13 + 1) = v11;
    *((_QWORD *)v13 + 2) = a2;
    v63 = v13;
    if (!*(_BYTE *)(a2 + 274))
    {
      *(_DWORD *)(a2 - 168) += 2;
      WebCore::gatherEncodingInfo(a2 - 192, this, (uint64_t *)&v63);
      if (*(_DWORD *)(a2 - 168) == 2)
      {
        if ((*(_WORD *)(a2 - 162) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(a2 - 192), v14);
      }
      else
      {
        *(_DWORD *)(a2 - 168) -= 2;
      }
LABEL_7:
      result = v63;
      if (v63)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v63 + 8))(v63);
      return result;
    }
    v20 = a1 + 4;
    v19 = a1[4];
    ++a1[2];
    if (v19
      || (v21 = v13,
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1 + 4, 8u), v13 = v21, (v19 = *v20) != 0))
    {
      v22 = *(_DWORD *)(v19 - 8);
    }
    else
    {
      v22 = 0;
    }
    v23 = a1[2];
    v24 = (v23 + ~(v23 << 32)) ^ ((unint64_t)(v23 + ~(v23 << 32)) >> 22);
    v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
    v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
    v27 = v22 & ((v26 >> 31) ^ v26);
    v28 = (_QWORD *)(v19 + 16 * v27);
    v29 = *v28;
    if (*v28)
    {
      v30 = 0;
      v31 = 1;
      while (v29 != v23)
      {
        if (v29 == -1)
          v30 = v28;
        v27 = (v27 + v31) & v22;
        v28 = (_QWORD *)(v19 + 16 * v27);
        v29 = *v28;
        ++v31;
        if (!*v28)
        {
          if (v30)
          {
            *v30 = 0;
            v30[1] = 0;
            --*(_DWORD *)(a1[4] - 16);
            v23 = a1[2];
            v28 = v30;
          }
          goto LABEL_29;
        }
      }
      goto LABEL_44;
    }
LABEL_29:
    v32 = v28[1];
    *v28 = v23;
    v28[1] = v13;
    v63 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *v20;
    if (*v20)
      v34 = *(_DWORD *)(v33 - 12) + 1;
    else
      v34 = 1;
    *(_DWORD *)(v33 - 12) = v34;
    v35 = *v20;
    if (*v20)
      v36 = *(_DWORD *)(v35 - 12);
    else
      v36 = 0;
    v37 = (*(_DWORD *)(v35 - 16) + v36);
    v38 = *(unsigned int *)(v35 - 4);
    if (v38 > 0x400)
    {
      if (v38 > 2 * v37)
        goto LABEL_44;
    }
    else
    {
      if (3 * v38 > 4 * v37)
      {
LABEL_44:
        WebCore::MediaConfiguration::isolatedCopy(&v64, (uint64_t)this);
        buf[0] = 0;
        v80 = 0;
        if (v67)
        {
          v41 = v64;
          v64 = 0;
          *(_QWORD *)buf = v41;
          v78 = v65;
          v79 = v66;
          v80 = 1;
        }
        LOBYTE(v81) = 0;
        v83 = 0;
        if (v70)
        {
          v42 = v68;
          v68 = 0uLL;
          v81 = v42;
          v82[0] = v69[0];
          *(_OWORD *)((char *)v82 + 10) = *(_OWORD *)((char *)v69 + 10);
          v83 = 1;
        }
        LOBYTE(v84) = 0;
        v86 = 0;
        if (v73)
        {
          v84 = v71;
          v43 = v72;
          v71 = 0;
          v72 = 0;
          v85 = v43;
          v86 = 1;
        }
        LOBYTE(v87) = 0;
        v89 = 0;
        if (v76)
        {
          v87 = v74;
          v44 = v75;
          v74 = 0;
          v75 = 0;
          v88 = v44;
          v89 = 1;
        }
        v90 = *((_BYTE *)this + 152);
        WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v64, v40);
        v45 = *(_OWORD *)(a2 + 240);
        v91 = *(_OWORD *)(a2 + 224);
        v92 = v45;
        v46 = a1[1];
        if (v46)
          goto LABEL_74;
        v46 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v46 = 1;
        *(_QWORD *)(v46 + 8) = a1;
        v48 = (unsigned int *)a1[1];
        a1[1] = v46;
        if (!v48)
          goto LABEL_74;
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          atomic_store(1u, v48);
          WTF::fastFree((WTF *)v48, v47);
        }
        v46 = a1[1];
        if (v46)
        {
LABEL_74:
          do
            v51 = __ldaxr((unsigned int *)v46);
          while (__stlxr(v51 + 1, (unsigned int *)v46));
        }
        v52 = a1[2];
        v93 = v46;
        v94 = v52;
        v53 = WTF::fastMalloc((WTF *)0xE0);
        *(_QWORD *)v53 = off_1E335BBB8;
        *(_BYTE *)(v53 + 16) = 0;
        *(_BYTE *)(v53 + 56) = 0;
        if (v80)
        {
          v54 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          *(_QWORD *)(v53 + 16) = v54;
          v55 = v79;
          *(_OWORD *)(v53 + 24) = v78;
          *(_OWORD *)(v53 + 40) = v55;
          *(_BYTE *)(v53 + 56) = 1;
        }
        *(_BYTE *)(v53 + 64) = 0;
        *(_BYTE *)(v53 + 112) = 0;
        if (v83)
        {
          v56 = v81;
          v81 = 0uLL;
          *(_OWORD *)(v53 + 64) = v56;
          v57 = *(_OWORD *)((char *)v82 + 10);
          *(_OWORD *)(v53 + 80) = v82[0];
          *(_OWORD *)(v53 + 90) = v57;
          *(_BYTE *)(v53 + 112) = 1;
        }
        *(_BYTE *)(v53 + 120) = 0;
        *(_BYTE *)(v53 + 136) = 0;
        if (v86)
        {
          *(_QWORD *)(v53 + 120) = v84;
          v58 = v85;
          v84 = 0;
          v85 = 0;
          *(_QWORD *)(v53 + 128) = v58;
          *(_BYTE *)(v53 + 136) = 1;
        }
        *(_BYTE *)(v53 + 144) = 0;
        *(_BYTE *)(v53 + 160) = 0;
        if (v89)
        {
          *(_QWORD *)(v53 + 144) = v87;
          v59 = v88;
          v87 = 0;
          v88 = 0;
          *(_QWORD *)(v53 + 152) = v59;
          *(_BYTE *)(v53 + 160) = 1;
        }
        *(_BYTE *)(v53 + 168) = v90;
        v60 = v92;
        *(_OWORD *)(v53 + 176) = v91;
        *(_OWORD *)(v53 + 192) = v60;
        *(_QWORD *)(v53 + 208) = v46;
        *(_QWORD *)(v53 + 216) = v52;
        v64 = v53;
        WebCore::ScriptExecutionContext::postTaskToResponsibleDocument(a2, &v64);
        v62 = v64;
        v64 = 0;
        if (v62)
          (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
        v93 = 0;
        WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)buf, v61);
        goto LABEL_7;
      }
      if (!(_DWORD)v38)
      {
        v39 = 8;
        goto LABEL_43;
      }
    }
    v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
LABEL_43:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1 + 4, v39);
    goto LABEL_44;
  }
  v16 = qword_1ECE7C4A0;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_INFO, "Invalid encoding media configuration", buf, 2u);
  }
  v17 = *a4;
  *(_QWORD *)buf = 0;
  WebCore::DeferredPromise::reject(v17, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)buf, 0);
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::gatherEncodingInfo(uint64_t a1, WebCore *a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 v9;
  __n128 v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  uint8_t buf[16];

  v6 = qword_1ECE7C4A0;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_INFO, "Gathering encoding MediaCapabilities", buf, 2u);
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E335BA48;
  v8[1] = v7;
  v17 = v8;
  if (*((_BYTE *)a2 + 152))
  {
    v12 = *(_QWORD *)(a1 + 528);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 24);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15)
            WebCore::WebRTCProvider::createEncodingConfiguration(*(_QWORD *)(v15 + 296), (uint64_t)a2, &v17, v9, v10, v11);
        }
      }
    }
  }
  else
  {
    WebCore::MediaEngineConfigurationFactory::createEncodingConfiguration(a2, (WTF::StringImpl *)&v17, v9.n128_f64[0], v10.n128_f64[0], v11);
  }
  result = (uint64_t)v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::NavigatorMediaCapabilities::~NavigatorMediaCapabilities(WebCore::NavigatorMediaCapabilities *this, void *a2)
{
  WebCore::MediaCapabilities *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::MediaCapabilities *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::MediaCapabilities::~MediaCapabilities(v3, a2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
}

{
  WebCore::MediaCapabilities *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::MediaCapabilities *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::MediaCapabilities::~MediaCapabilities(v3, a2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::WorkerNavigatorMediaCapabilities::~WorkerNavigatorMediaCapabilities(WebCore::WorkerNavigatorMediaCapabilities *this, void *a2)
{
  WebCore::MediaCapabilities *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::MediaCapabilities *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::MediaCapabilities::~MediaCapabilities(v3, a2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
}

{
  WebCore::MediaCapabilities *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::MediaCapabilities *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::MediaCapabilities::~MediaCapabilities(v3, a2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WorkerNavigatorMediaCapabilities::from(WebCore::WorkerNavigatorMediaCapabilities *this, WebCore::WorkerNavigator *a2)
{
  uint64_t *v2;
  const char **v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  const char *v9[3];
  const char *v10[2];

  v2 = (uint64_t *)((char *)this + 56);
  v9[0] = "WorkerNavigatorMediaCapabilities";
  v9[1] = (const char *)33;
  v3 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 7, v9);
  if (!v3 || (v4 = (uint64_t)v3[2]) == 0)
  {
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E335B7A8;
    v5 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v5 = 1;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_QWORD *)(v4 + 8) = v5;
    v8 = (unsigned __int8 *)v4;
    v10[0] = "WorkerNavigatorMediaCapabilities";
    v10[1] = (const char *)33;
    WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>(v2, v10, &v8, (uint64_t)v9);
    v6 = v8;
    v8 = 0;
    if (v6)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v6 + 8))(v6);
  }
  return v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyDataENS8_6VectorISC_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE4copyEOSH_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJDnSC_SG_EEEEEEDcSK_DpT0_(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 32) = 0;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyDataENS8_6VectorISC_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE4copyEOSH_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJDnSC_SG_EEEEEEDcSK_DpT0_@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _BYTE v10[16];
  unsigned int v11;
  _QWORD v12[2];
  unsigned int v13;
  char v14;

  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_QWORD *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyDataENS8_6VectorISC_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE4copyEOSH_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJDnSC_SG_EEEEEEDcSK_DpT0_(v8);
  }
  else
  {
    v9 = &v14;
    result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v3])(v12, &v9, a1 + 8);
    LOBYTE(v9) = 0;
    v10[0] = 0;
    v11 = -1;
    v5 = v13;
    if (v13 == -1)
    {
      *(_BYTE *)a2 = (_BYTE)v9;
      *(_BYTE *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 24) = -1;
LABEL_7:
      *(_DWORD *)(a2 + 32) = 1;
      return result;
    }
    ((void (*)(char *, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v13])(&v14, v10, v12);
    v11 = v5;
    if (v13 == -1)
    {
      *(_BYTE *)a2 = (_BYTE)v9;
      *(_BYTE *)(a2 + 8) = 0;
      v6 = a2 + 8;
      *(_DWORD *)(a2 + 24) = -1;
    }
    else
    {
      result = (_QWORD *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v13])(&v14, v12);
      v5 = v11;
      *(_BYTE *)a2 = (_BYTE)v9;
      *(_BYTE *)(a2 + 8) = 0;
      v6 = a2 + 8;
      *(_DWORD *)(a2 + 24) = -1;
      if (v5 == -1)
        goto LABEL_7;
    }
    result = (_QWORD *)((uint64_t (*)(_QWORD *, uint64_t, _BYTE *))off_1E335B878[v5])(v12, v6, v10);
    *(_DWORD *)(a2 + 24) = v5;
    v7 = v11;
    *(_DWORD *)(a2 + 32) = 1;
    if ((_DWORD)v7 != -1)
      return (_QWORD *)((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_3[v7])(v12, v10);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyDataENS8_6VectorISC_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE4copyEOSH_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJDnSC_SG_EEEEEEDcSK_DpT0_(unint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  WebCore *v11;
  const WebCore::ContentType *v12;
  double v13;
  double v14;
  float v15;
  uint64_t v16;
  _BYTE v17[16];
  unsigned int v18;
  _QWORD v19[2];
  unsigned int v20;
  char v21;
  char *v22;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v4)
  {
    v16 = a2;
    v5 = v3 + 32 * v4;
    while (1)
    {
      v6 = *(unsigned int *)(v3 + 24);
      if ((_DWORD)v6 == -1)
      {
        v11 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        WebCore::isValidMediaMIMEType(v11, v12, v13, v14, v15);
        return;
      }
      v22 = &v21;
      ((void (*)(_QWORD *__return_ptr, char **, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyData7InvalidENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNSA_4DateENS9_20ThreadSafeDataBufferENSA_3MinENSA_3MaxEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__implIJDnSB_SF_SG_dSH_SI_SJ_SK_EEEEEEDcOSP_DpOT0____fmatrix[v6])(v19, &v22, v3 + 8);
      v17[0] = 0;
      v18 = -1;
      v7 = v20;
      if (v20 == -1)
      {
        v7 = 0xFFFFFFFFLL;
      }
      else
      {
        ((void (*)(char **, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v20])(&v22, v17, v19);
        v18 = v7;
        if (v20 != -1)
        {
          ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v20])(&v22, v19);
          v7 = v18;
        }
      }
      *(_BYTE *)v3 = 0;
      v8 = *(unsigned int *)(v3 + 24);
      if ((_DWORD)v8 != -1)
        break;
      if (v7 != 0xFFFFFFFFLL)
        goto LABEL_12;
LABEL_15:
      v3 += 32;
      if (v3 >= v5)
      {
        v3 = *a1;
        v9 = *((_DWORD *)a1 + 3);
        a2 = v16;
        goto LABEL_18;
      }
    }
    if (v7 == 0xFFFFFFFFLL)
    {
      ((void (*)(_QWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_3[v8])(v19, v3 + 8);
      *(_DWORD *)(v3 + 24) = -1;
    }
    else
    {
LABEL_12:
      v19[0] = v3 + 8;
      ((void (*)(_QWORD *, unint64_t, _BYTE *))off_1E335B8D8[v7])(v19, v3 + 8, v17);
    }
    if (v18 != -1)
      ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_3[v18])(v19, v17);
    goto LABEL_15;
  }
  v9 = 0;
LABEL_18:
  v10 = *((_DWORD *)a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 12) = v9;
  *(_DWORD *)(a2 + 32) = 2;
}

BOOL WebCore::isValidMediaMIMEType(WebCore *this, const WebCore::ContentType *a2, double a3, double a4, float a5)
{
  _BOOL8 v5;
  double v8;
  double v9;
  float v10;
  uint64_t v11;
  const char *v12;
  int v13;
  unint64_t v14;
  char **v16;
  uint64_t v18;
  BOOL v19;
  int64_t v20;
  int v21;
  WTF *v22;
  uint16x8_t v23;
  uint16x8_t v24;
  char **v25;
  WTF *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint16x8_t v29;
  _BOOL4 v30;
  uint16x8_t v31;
  BOOL v32;
  int v33;
  BOOL v34;
  BOOL v35;
  char v36;
  uint8x16_t v37;
  char v38;
  char v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  char **v51;
  char v53;
  char v54;
  char v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  char v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint8x16_t v72;
  BOOL v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint64_t v77;
  WTF *v78;
  WTF::StringImpl *v79;
  WTF *v80;
  int v81;
  unsigned int v82;

  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
    return 0;
  WebCore::ContentType::codecs(this, (uint64_t)&v80, a5);
  WebCore::ContentType::containerType(this, v8, v9, v10);
  if (v79)
  {
    v12 = (const char *)*((_QWORD *)v79 + 1);
    v13 = *((_DWORD *)v79 + 1);
    v14 = ((unint64_t)*((unsigned int *)v79 + 4) >> 2) & 1;
    if (v12 != "application/mp21" && v13 == 16)
    {
      if ((_DWORD)v14)
      {
        if (*v12 == 97 && *(_QWORD *)(v12 + 1) == 0x69746163696C7070)
        {
          if (*((_QWORD *)v12 + 1) == 0x3132706D2F6E6F69)
            v16 = &WebCore::isValidMediaMIMEType(WebCore::ContentType const&)::bucketMIMETypeArray;
          else
          goto LABEL_28;
        }
      }
      else if (*(_WORD *)v12 == 97)
      {
        v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE290);
        v23.i16[0] = vminvq_u16(v23);
        if (v23.i32[0])
        {
          v24 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v12 + 1), (int16x8_t)xmmword_1968DE2A0);
          v24.i16[0] = vminvq_u16(v24);
          v16 = &WebCore::isValidMediaMIMEType(WebCore::ContentType const&)::bucketMIMETypeArray;
          if (v24.i32[0])
            goto LABEL_28;
LABEL_106:
          v20 = (char *)v25 - (char *)&WebCore::isValidMediaMIMEType(WebCore::ContentType const&)::bucketMIMETypeArray;
          goto LABEL_29;
        }
      }
      v21 = 0;
LABEL_30:
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v79 -= 2;
      goto LABEL_32;
    }
    v16 = &WebCore::isValidMediaMIMEType(WebCore::ContentType const&)::bucketMIMETypeArray;
    if (v12 == "application/mp21" && v13 == 16)
      goto LABEL_28;
    v18 = v14 << 32;
    v19 = v13 != 15;
    if (v12 != "application/mp4" && v13 == 15)
    {
      if ((_DWORD)v14)
      {
        if (*v12 == 97 && *(_QWORD *)(v12 + 1) == 0x69746163696C7070 && *(_QWORD *)(v12 + 7) == 0x34706D2F6E6F6974)
        {
LABEL_27:
          v16 = &off_1E335B930;
LABEL_28:
          v20 = (char *)v16 - (char *)&WebCore::isValidMediaMIMEType(WebCore::ContentType const&)::bucketMIMETypeArray;
LABEL_29:
          v21 = v20 != 240;
          goto LABEL_30;
        }
      }
      else if (*(_WORD *)v12 == 97)
      {
        v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE290);
        v29.i16[0] = vminvq_u16(v29);
        v30 = v29.i32[0];
        if (v29.i32[0])
        {
          v31 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 14), (int16x8_t)xmmword_1968DE2B0);
          v31.i16[0] = vminvq_u16(v31);
          v30 = v31.i32[0];
          if (v31.i32[0])
            goto LABEL_27;
        }
        v32 = 0;
        v19 = 0;
        goto LABEL_54;
      }
      v32 = 0;
      v19 = 0;
      v30 = 0;
LABEL_54:
      v33 = 15;
      v34 = 1;
      v35 = 1;
      goto LABEL_55;
    }
    if (v12 == "application/mp4" && v13 == 15)
      goto LABEL_27;
    v30 = v13 == 10;
    v35 = v13 != 10;
    if (v12 != "audio/3gpp" && v13 == 10)
    {
      if ((_DWORD)v14)
      {
        if (*v12 == 97 && *(_QWORD *)(v12 + 1) == 0x7067332F6F696475 && *(_QWORD *)(v12 + 2) == 0x707067332F6F6964)
        {
LABEL_115:
          v16 = &off_1E335B940;
          goto LABEL_28;
        }
        v32 = 0;
        v35 = 0;
        v47 = 0;
        v11 = 0;
        v33 = 10;
        v18 = 0x100000000;
      }
      else
      {
        if (*(_WORD *)v12 == 97)
        {
          v56 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE2C0);
          v56.i16[0] = vminvq_u16(v56);
          v35 = v56.i8[0];
          if (v56.i32[0])
          {
            v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 4), (int16x8_t)xmmword_1968DE2D0);
            v57.i16[0] = vminvq_u16(v57);
            v35 = v57.i8[0];
            if (v57.i32[0])
              goto LABEL_115;
          }
          v32 = 0;
        }
        else
        {
          v32 = 0;
          v35 = 0;
        }
        v47 = 0;
        v11 = 0;
        v33 = 10;
      }
      v34 = 1;
      v48 = 1;
      goto LABEL_121;
    }
    if (v12 == "audio/3gpp" && v13 == 10)
      goto LABEL_115;
    v47 = v13 == 11;
    v48 = v13 != 11;
    if (v12 != "audio/3gpp2" && v13 == 11)
    {
      if ((_DWORD)v14)
      {
        if (*v12 != 97 || *(_QWORD *)(v12 + 1) != 0x7067332F6F696475 || *(_QWORD *)(v12 + 3) != 0x32707067332F6F69)
        {
          v32 = 0;
          v48 = 0;
          v11 = 0;
          v33 = 11;
          v18 = 0x100000000;
LABEL_253:
          v34 = 1;
LABEL_121:
          v49 = 1;
          goto LABEL_122;
        }
      }
      else if (*(_WORD *)v12 != 97
             || (v68 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE2C0),
                 v68.i16[0] = vminvq_u16(v68),
                 !v68.i32[0])
             || (v69 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 6), (int16x8_t)xmmword_1968DE2E0),
                 v69.i16[0] = vminvq_u16(v69),
                 !v69.i32[0]))
      {
        v32 = 0;
        v48 = 0;
        v11 = 0;
        v33 = 11;
        goto LABEL_253;
      }
LABEL_248:
      v16 = &off_1E335B950;
      goto LABEL_28;
    }
    if (v12 == "audio/3gpp2" && v13 == 11)
      goto LABEL_248;
    v11 = v13 == 9;
    v49 = v13 != 9;
    if (v12 == "audio/mp4" || v13 != 9)
    {
      v33 = *((_DWORD *)v79 + 1);
      if (v12 != "audio/mp4" || v13 != 9)
      {
LABEL_255:
        if (v12 == "audio/ogg" || v49)
        {
          if (v12 == "audio/ogg" && v13 == 9)
            goto LABEL_268;
        }
        else
        {
          if (!v33)
            goto LABEL_268;
          if ((v18 & 0x100000000) != 0)
          {
            if (*v12 != 97 || *(_DWORD *)(v12 + 1) != 1869177973 || *(_DWORD *)(v12 + 5) != 1734831919)
            {
              v18 = 0x100000000;
              goto LABEL_269;
            }
LABEL_268:
            v16 = &off_1E335B970;
            goto LABEL_28;
          }
          if (*(_WORD *)v12 == 97)
          {
            v71 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE300);
            v71.i16[0] = vminvq_u16(v71);
            if (v71.i32[0])
              goto LABEL_268;
          }
        }
LABEL_269:
        v32 = v33 == 23;
        v34 = v33 != 23;
        if (v12 == "audio/vnd.apple.mpegurl" || v33 != 23)
        {
          if (v12 == "audio/vnd.apple.mpegurl" && v33 == 23)
            goto LABEL_291;
        }
        else if ((v18 & 0x100000000) != 0)
        {
          if (*v12 == 97)
          {
            v72 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v12 + 7), (int8x16_t)xmmword_1968DE320), vceqq_s8(*(int8x16_t *)(v12 + 1), (int8x16_t)xmmword_1968DE310));
            v72.i8[0] = vminvq_u8(v72);
            if (!v72.i32[0])
            {
              v34 = 0;
              v73 = v12 == "audio/webm" || v13 != 10;
              v50 = v13 == 10 && v12 == "audio/webm";
              v33 = 23;
              if (!v73)
                goto LABEL_129;
              v18 = 0x100000000;
              goto LABEL_282;
            }
LABEL_291:
            v16 = &off_1E335B980;
            goto LABEL_28;
          }
          v34 = 0;
          v33 = 23;
          v18 = 0x100000000;
        }
        else
        {
          if (*(_WORD *)v12 == 97)
          {
            v74 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE330);
            v74.i16[0] = vminvq_u16(v74);
            if (v74.i32[0])
            {
              v75 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 14), (int16x8_t)xmmword_1968DE340);
              v75.i16[0] = vminvq_u16(v75);
              if (v75.i32[0])
              {
                v76 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 30), (int16x8_t)xmmword_1968DE350);
                v76.i16[0] = vminvq_u16(v76);
                if (v76.i32[0])
                  goto LABEL_291;
              }
            }
          }
          v34 = 0;
          v33 = 23;
        }
LABEL_122:
        v50 = v12 == "audio/webm";
        if (v13 != 10)
          v50 = 0;
        if (v12 != "audio/webm" && !v35)
        {
          if (v33)
          {
            if ((v18 & 0x100000000) == 0)
            {
              if (*(_WORD *)v12 == 97)
              {
                v58 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE360);
                v58.i16[0] = vminvq_u16(v58);
                v35 = v58.i8[0];
                if (v58.i32[0])
                {
                  v59 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 4), (int16x8_t)xmmword_1968DE370);
                  v59.i16[0] = vminvq_u16(v59);
                  v35 = v59.i8[0];
                  if (v59.i32[0])
                    goto LABEL_131;
                }
              }
              else
              {
                v35 = 0;
              }
LABEL_138:
              if (v12 == "video/3gpp" || v35)
              {
                if (v12 == "video/3gpp" && v13 == 10)
                  goto LABEL_145;
              }
              else
              {
                if (!v33)
                {
LABEL_145:
                  v51 = &off_1E335B9A0;
                  goto LABEL_179;
                }
                if ((v18 & 0x100000000) != 0)
                {
                  if (*v12 == 118
                    && *(_QWORD *)(v12 + 1) == 0x7067332F6F656469
                    && *(_QWORD *)(v12 + 2) == 0x707067332F6F6564)
                  {
                    goto LABEL_145;
                  }
                  v18 = 0x100000000;
                }
                else if (*(_WORD *)v12 == 118)
                {
                  v60 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE380);
                  v60.i16[0] = vminvq_u16(v60);
                  if (v60.i32[0])
                  {
                    v61 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 4), (int16x8_t)xmmword_1968DE390);
                    v61.i16[0] = vminvq_u16(v61);
                    if (v61.i32[0])
                      goto LABEL_145;
                  }
                }
              }
              v53 = v12 == "video/3gpp2" || v48;
              if ((v53 & 1) != 0)
              {
                if (v12 == "video/3gpp2" && v47)
                  goto LABEL_156;
              }
              else
              {
                if (!v33)
                {
LABEL_156:
                  v51 = &off_1E335B9B0;
                  goto LABEL_179;
                }
                if ((v18 & 0x100000000) != 0)
                {
                  if (*v12 == 118
                    && *(_QWORD *)(v12 + 1) == 0x7067332F6F656469
                    && *(_QWORD *)(v12 + 3) == 0x32707067332F6F65)
                  {
                    goto LABEL_156;
                  }
                  v18 = 0x100000000;
                }
                else if (*(_WORD *)v12 == 118)
                {
                  v62 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE380);
                  v62.i16[0] = vminvq_u16(v62);
                  if (v62.i32[0])
                  {
                    v63 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 6), (int16x8_t)xmmword_1968DE3A0);
                    v63.i16[0] = vminvq_u16(v63);
                    if (v63.i32[0])
                      goto LABEL_156;
                  }
                }
              }
              v54 = v12 == "video/mp4" || v49;
              if ((v54 & 1) != 0)
              {
                if (v12 == "video/mp4")
                  v67 = v11;
                else
                  v67 = 0;
                if ((v67 & 1) != 0)
                  goto LABEL_167;
              }
              else
              {
                if (!v33)
                {
LABEL_167:
                  v51 = &off_1E335B9C0;
                  goto LABEL_179;
                }
                if ((v18 & 0x100000000) != 0)
                {
                  if (*v12 == 118 && *(_DWORD *)(v12 + 1) == 1868915817 && *(_DWORD *)(v12 + 5) == 879783215)
                    goto LABEL_167;
                  v18 = 0x100000000;
                }
                else if (*(_WORD *)v12 == 118)
                {
                  v64 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE3B0);
                  v64.i16[0] = vminvq_u16(v64);
                  if (v64.i32[0])
                    goto LABEL_167;
                }
              }
              v55 = v12 == "video/ogg" || v49;
              if ((v55 & 1) != 0)
              {
                if (v12 == "video/ogg")
                  v11 = v11;
                else
                  v11 = 0;
                if ((v11 & 1) == 0)
                  goto LABEL_55;
              }
              else if (v33)
              {
                if ((v18 & 0x100000000) != 0)
                {
                  if (*v12 != 118
                    || *(_DWORD *)(v12 + 1) != 1868915817
                    || (v11 = 1734831919, *(_DWORD *)(v12 + 5) != 1734831919))
                  {
                    v18 = 0x100000000;
                    goto LABEL_55;
                  }
                  goto LABEL_178;
                }
                v11 = *(unsigned __int16 *)v12;
                if ((_DWORD)v11 != 118
                  || (v65 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE3C0),
                      v65.i16[0] = vminvq_u16(v65),
                      v11 = v65.u32[0],
                      !v65.i32[0]))
                {
LABEL_55:
                  if (v12 == "video/quicktime" || v19)
                  {
                    if (v12 == "video/quicktime" && v13 == 15)
                      goto LABEL_62;
                  }
                  else
                  {
                    if (!v33)
                    {
LABEL_62:
                      v25 = &off_1E335B9E0;
                      goto LABEL_106;
                    }
                    if ((v18 & 0x100000000) != 0)
                    {
                      if (*v12 == 118
                        && *(_QWORD *)(v12 + 1) == 0x6975712F6F656469
                        && *(_QWORD *)(v12 + 7) == 0x656D69746B636975)
                      {
                        goto LABEL_62;
                      }
                      v18 = 0x100000000;
                    }
                    else if (*(_WORD *)v12 == 118)
                    {
                      v40 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE3D0);
                      v40.i16[0] = vminvq_u16(v40);
                      if (v40.i32[0])
                      {
                        v41 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 14), (int16x8_t)xmmword_1968DE3E0);
                        v41.i16[0] = vminvq_u16(v41);
                        if (v41.i32[0])
                          goto LABEL_62;
                      }
                    }
                  }
                  v36 = v12 == "video/vnd.apple.mpegurl" || v34;
                  if ((v36 & 1) != 0)
                  {
                    if (v12 == "video/vnd.apple.mpegurl" && v32)
                      goto LABEL_71;
                  }
                  else if ((v18 & 0x100000000) != 0)
                  {
                    if (*v12 == 118)
                    {
                      v37 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v12 + 7), (int8x16_t)xmmword_1968DE320), vceqq_s8(*(int8x16_t *)(v12 + 1), (int8x16_t)xmmword_1968DE3F0));
                      v37.i8[0] = vminvq_u8(v37);
                      if (v37.i32[0])
                      {
LABEL_71:
                        v25 = &off_1E335B9F0;
                        goto LABEL_106;
                      }
                      v38 = v12 == "video/webm" || v35;
                      if (v12 != "video/webm")
                        v30 = 0;
                      if ((v38 & 1) != 0)
                      {
LABEL_78:
                        if (!v30)
                          goto LABEL_105;
LABEL_92:
                        v25 = &off_1E335BA00;
                        goto LABEL_106;
                      }
LABEL_90:
                      if (*(_QWORD *)(v12 + 1) != 0x6265772F6F656469 || *(_QWORD *)(v12 + 2) != 0x6D6265772F6F6564)
                        goto LABEL_105;
                      goto LABEL_92;
                    }
                    v18 = 0x100000000;
                  }
                  else if (*(_WORD *)v12 == 118)
                  {
                    v42 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE400);
                    v42.i16[0] = vminvq_u16(v42);
                    if (v42.i32[0])
                    {
                      v43 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 14), (int16x8_t)xmmword_1968DE340);
                      v43.i16[0] = vminvq_u16(v43);
                      if (v43.i32[0])
                      {
                        v44 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 30), (int16x8_t)xmmword_1968DE350);
                        v44.i16[0] = vminvq_u16(v44);
                        if (v44.i32[0])
                          goto LABEL_71;
                      }
                    }
                  }
                  v39 = v12 == "video/webm" || v35;
                  if (v12 != "video/webm")
                    v30 = 0;
                  if ((v39 & 1) != 0)
                    goto LABEL_78;
                  if (!v33)
                    goto LABEL_92;
                  if ((v18 & 0x100000000) == 0)
                  {
                    if (*(_WORD *)v12 != 118)
                      goto LABEL_105;
                    v45 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE410);
                    v45.i16[0] = vminvq_u16(v45);
                    if (!v45.i32[0])
                      goto LABEL_105;
                    v46 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 4), (int16x8_t)xmmword_1968DE420);
                    v46.i16[0] = vminvq_u16(v46);
                    if (!v46.i32[0])
                      goto LABEL_105;
                    goto LABEL_92;
                  }
                  if (*v12 != 118)
                  {
LABEL_105:
                    goto LABEL_106;
                  }
                  goto LABEL_90;
                }
              }
LABEL_178:
              v51 = &off_1E335B9D0;
              goto LABEL_179;
            }
            if (*v12 != 97)
            {
LABEL_137:
              v35 = 0;
              v18 = 0x100000000;
              goto LABEL_138;
            }
LABEL_129:
            if (*(_QWORD *)(v12 + 1) == 0x6265772F6F696475 && *(_QWORD *)(v12 + 2) == 0x6D6265772F6F6964)
              goto LABEL_131;
            goto LABEL_137;
          }
LABEL_131:
          v51 = &off_1E335B990;
LABEL_179:
          v20 = (char *)v51 - (char *)&WebCore::isValidMediaMIMEType(WebCore::ContentType const&)::bucketMIMETypeArray;
          goto LABEL_29;
        }
LABEL_282:
        if (!v50)
          goto LABEL_138;
        goto LABEL_131;
      }
    }
    else if ((_DWORD)v14)
    {
      if (*v12 != 97 || *(_DWORD *)(v12 + 1) != 1869177973 || *(_DWORD *)(v12 + 5) != 879783215)
      {
        v49 = 0;
        v33 = 9;
        v18 = 0x100000000;
        goto LABEL_255;
      }
    }
    else if (*(_WORD *)v12 != 97
           || (v70 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968DE2F0),
               v70.i16[0] = vminvq_u16(v70),
               !v70.i32[0]))
    {
      v49 = 0;
      v33 = 9;
      goto LABEL_255;
    }
    v16 = &off_1E335B960;
    goto LABEL_28;
  }
  v21 = 0;
LABEL_32:
  v5 = v82 == v21;
  if (v82)
  {
    v26 = v80;
    v27 = 8 * v82;
    do
    {
      v28 = *(WTF::StringImpl **)v26;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          v77 = v27;
          v78 = v26;
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v11);
          v27 = v77;
          v26 = v78;
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
      v26 = (WTF *)((char *)v26 + 8);
      v27 -= 8;
    }
    while (v27);
  }
  v22 = v80;
  if (v80)
  {
    v80 = 0;
    v81 = 0;
    WTF::fastFree(v22, (void *)v11);
  }
  return v5;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::gatherDecodingInfo(WebCore::Document &,WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesDecodingInfo>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E335BA20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::gatherDecodingInfo(WebCore::Document &,WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesDecodingInfo>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335BA20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::gatherDecodingInfo(WebCore::Document &,WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesDecodingInfo>::call(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint8_t v6[16];

  v4 = qword_1ECE7C4A0;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_INFO, "Finished gathering decoding MediaCapabilities", v6, 2u);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2);
}

unsigned int *std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(unsigned int *result, unsigned int *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;

  v3 = result;
  if (*((unsigned __int8 *)result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*((_BYTE *)result + 16))
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(result, a2);
  }
  else if (*((_BYTE *)result + 16))
  {
    v4 = result[3];
    if ((_DWORD)v4)
    {
      v6 = *(WTF::StringImpl ***)result;
      v7 = 8 * v4;
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    result = *(unsigned int **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      v3[2] = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
    *((_BYTE *)v3 + 16) = 0;
  }
  else
  {
    v5 = a2[3];
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[3] = v5;
    if ((_DWORD)v5)
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v5));
      v3[2] = v5;
      *(_QWORD *)v3 = result;
      v9 = a2[3];
      if ((_DWORD)v9)
      {
        v10 = *(_DWORD ***)a2;
        v11 = 8 * v9;
        do
        {
          v12 = *v10;
          if (*v10)
            *v12 += 2;
          *(_QWORD *)result = v12;
          result += 2;
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
    }
    *((_BYTE *)v3 + 16) = 1;
  }
  return result;
}

_BYTE *WebCore::MediaConfiguration::isolatedCopy(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;
  char v4;
  char v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _BYTE v22[42];

  v3 = result;
  v4 = *(_BYTE *)(a2 + 40);
  if (v4)
  {
    result = (_BYTE *)WTF::String::isolatedCopy();
    *(_QWORD *)&v22[8] = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v22[16] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)&v22[24] = *(_QWORD *)(a2 + 24);
    *(_QWORD *)&v22[32] = *(_QWORD *)(a2 + 32);
    *(_QWORD *)v3 = *(_QWORD *)v22;
    *(_OWORD *)(v3 + 8) = *(_OWORD *)&v22[8];
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v22[24];
    v4 = 1;
  }
  else
  {
    *result = 0;
  }
  v3[40] = v4;
  v5 = *(_BYTE *)(a2 + 96);
  if (v5)
  {
    WTF::String::isolatedCopy();
    result = (_BYTE *)WTF::String::isolatedCopy();
    *(_QWORD *)&v22[16] = *(_QWORD *)(a2 + 64);
    v22[24] = *(_BYTE *)(a2 + 72);
    *(_DWORD *)&v22[32] = *(_DWORD *)(a2 + 80);
    v22[36] = *(_BYTE *)(a2 + 84);
    *(_WORD *)&v22[40] = *(_WORD *)(a2 + 88);
    *((_OWORD *)v3 + 3) = *(_OWORD *)v22;
    *((_OWORD *)v3 + 4) = *(_OWORD *)&v22[16];
    *(_OWORD *)(v3 + 74) = *(_OWORD *)&v22[26];
    v5 = 1;
  }
  else
  {
    v3[48] = 0;
  }
  v3[96] = v5;
  if (!*(_BYTE *)(a2 + 120))
  {
    v13 = 0;
    v3[104] = 0;
    goto LABEL_18;
  }
  v6 = *(unsigned int *)(a2 + 116);
  if ((_DWORD)v6)
  {
    if (v6 >> 29)
      goto LABEL_30;
    result = (_BYTE *)WTF::fastMalloc((WTF *)(8 * v6));
    v7 = result;
    v8 = *(unsigned int *)(a2 + 116);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = *(_QWORD *)(a2 + 104);
      v11 = 8 * v8;
      do
      {
        v12 = v9;
        result = (_BYTE *)WTF::String::isolatedCopy();
        v9 = v12 + 1;
        *(_QWORD *)&v7[8 * v12] = *(_QWORD *)v22;
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
      goto LABEL_17;
    }
  }
  else
  {
    v7 = 0;
  }
  LODWORD(v9) = 0;
LABEL_17:
  *((_QWORD *)v3 + 13) = v7;
  v13 = 1;
  *((_DWORD *)v3 + 28) = v6;
  *((_DWORD *)v3 + 29) = v9;
LABEL_18:
  v3[120] = v13;
  if (*(_BYTE *)(a2 + 144))
  {
    v14 = *(unsigned int *)(a2 + 140);
    if (!(_DWORD)v14)
    {
      v15 = 0;
      goto LABEL_27;
    }
    if (!(v14 >> 29))
    {
      result = (_BYTE *)WTF::fastMalloc((WTF *)(8 * v14));
      v15 = result;
      v16 = *(unsigned int *)(a2 + 140);
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = *(_QWORD *)(a2 + 128);
        v19 = 8 * v16;
        do
        {
          v20 = v17;
          result = (_BYTE *)WTF::String::isolatedCopy();
          v17 = v20 + 1;
          *(_QWORD *)&v15[8 * v20] = *(_QWORD *)v22;
          v18 += 8;
          v19 -= 8;
        }
        while (v19);
        goto LABEL_28;
      }
LABEL_27:
      LODWORD(v17) = 0;
LABEL_28:
      *((_QWORD *)v3 + 16) = v15;
      v21 = 1;
      *((_DWORD *)v3 + 34) = v14;
      *((_DWORD *)v3 + 35) = v17;
      goto LABEL_29;
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x195416A90);
  }
  v21 = 0;
  v3[128] = 0;
LABEL_29:
  v3[144] = v21;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::gatherEncodingInfo(WebCore::Document &,WebCore::MediaEncodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesEncodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesEncodingInfo>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E335BA48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::gatherEncodingInfo(WebCore::Document &,WebCore::MediaEncodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesEncodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesEncodingInfo>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335BA48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::gatherEncodingInfo(WebCore::Document &,WebCore::MediaEncodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesEncodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesEncodingInfo>::call(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint8_t v6[16];

  v4 = qword_1ECE7C4A0;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_INFO, "Finished gathering encoding MediaCapabilities", v6, 2u);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2);
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IndexKey::asOneKey(void)::$_0,WebCore::IndexKey::asOneKey(void)::$_1,WebCore::IndexKey::asOneKey(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IndexKey::asOneKey(void)::$_0,WebCore::IndexKey::asOneKey(void)::$_1,WebCore::IndexKey::asOneKey(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = -1;
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_3[v3])(&v5, a2 + 8, a1 + 8);
    *(_DWORD *)(a2 + 24) = v3;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IndexKey::asOneKey(void)::$_0,WebCore::IndexKey::asOneKey(void)::$_1,WebCore::IndexKey::asOneKey(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__assign_alt[abi:sn180100]<2ul,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a2 + 8, a2 + 8, a1);
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IndexKey::multiEntry(void)::$_0,WebCore::IndexKey::multiEntry(void)::$_1,WebCore::IndexKey::multiEntry(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t **a1, WebCore::IDBKeyData *this)
{
  uint64_t *v3;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  char v16;
  char v17;

  v3 = *a1;
  result = WebCore::IDBKeyData::isValid(this);
  if ((_DWORD)result)
  {
    v5 = *v3;
    v6 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v6 == *(_DWORD *)(v5 + 8))
    {
      result = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v6 + 1, (unint64_t)this);
      v7 = *(_QWORD *)v5 + 32 * *(unsigned int *)(v5 + 12);
      v8 = *(_BYTE *)result;
      *(_BYTE *)(v7 + 8) = 0;
      v9 = v7 + 8;
      *(_BYTE *)v7 = v8;
      *(_DWORD *)(v7 + 24) = -1;
      v10 = (_DWORD *)(v7 + 24);
      v11 = *(unsigned int *)(result + 24);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_3[v11])(&v17, v9, result + 8);
        *v10 = v11;
      }
    }
    else
    {
      v12 = *(_QWORD *)v5 + 32 * v6;
      *(_BYTE *)v12 = *(_BYTE *)this;
      *(_BYTE *)(v12 + 8) = 0;
      v13 = v12 + 8;
      *(_DWORD *)(v12 + 24) = -1;
      v14 = (_DWORD *)(v12 + 24);
      v15 = *((unsigned int *)this + 6);
      if ((_DWORD)v15 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_3[v15])(&v16, v13, (char *)this + 8);
        *v14 = v15;
      }
    }
    ++*(_DWORD *)(v5 + 12);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IndexKey::multiEntry(void)::$_0,WebCore::IndexKey::multiEntry(void)::$_1,WebCore::IndexKey::multiEntry(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)result;
    v4 = *(unsigned int **)a2;
    v5 = *(_QWORD *)a2 + 32 * v2;
    while (1)
    {
      result = WebCore::IDBKeyData::isValid((WebCore::IDBKeyData *)v4);
      if ((_DWORD)result)
        break;
LABEL_17:
      v4 += 8;
      if (v4 == (unsigned int *)v5)
        return result;
    }
    v7 = *(_QWORD *)(v3 + 8);
    v8 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v8)
    {
      v9 = *(unsigned __int8 **)v7;
      v10 = 32 * v8;
      while (1)
      {
        result = WebCore::IDBKeyData::operator==((unsigned __int8 *)v4, v9, v6);
        if ((result & 1) != 0)
          goto LABEL_17;
        v9 += 32;
        v10 -= 32;
        if (!v10)
        {
          v7 = *(_QWORD *)(v3 + 8);
          v11 = *(unsigned int *)(v7 + 12);
          goto LABEL_10;
        }
      }
    }
    v11 = 0;
LABEL_10:
    if (v11 == *(_DWORD *)(v7 + 8))
    {
      result = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v11 + 1, (unint64_t)v4);
      v12 = *(_QWORD *)v7 + 32 * *(unsigned int *)(v7 + 12);
      *(_BYTE *)v12 = *(_BYTE *)result;
      *(_BYTE *)(v12 + 8) = 0;
      v13 = v12 + 8;
      *(_DWORD *)(v12 + 24) = -1;
      v14 = (_DWORD *)(v12 + 24);
      v15 = *(unsigned int *)(result + 24);
      if ((_DWORD)v15 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_3[v15])(&v19, v13, result + 8);
LABEL_15:
        *v14 = v15;
      }
    }
    else
    {
      v16 = *(_QWORD *)v7 + 32 * v11;
      *(_BYTE *)v16 = *(_BYTE *)v4;
      *(_BYTE *)(v16 + 8) = 0;
      v17 = v16 + 8;
      *(_DWORD *)(v16 + 24) = -1;
      v14 = (_DWORD *)(v16 + 24);
      v15 = v4[6];
      if ((_DWORD)v15 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS7_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEdNS7_4DateENS6_20ThreadSafeDataBufferENS7_3MinENS7_3MaxEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal_3[v15])(&v18, v17, v4 + 2);
        goto LABEL_15;
      }
    }
    ++*(_DWORD *)(v7 + 12);
    goto LABEL_17;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaCapabilities::decodingInfo(WebCore::ScriptExecutionContext &,WebCore::MediaDecodingConfiguration &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::MediaCapabilitiesDecodingInfo &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;

  *a1 = &off_1E335BAA0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = *(unsigned __int8 *)(v3 + 274);
    if (*(_BYTE *)(v3 + 274))
    {
      if (v4 == 1)
      {
        if (*(_DWORD *)(v3 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
        else
          --*(_DWORD *)(v3 + 312);
      }
      else if (v4 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 312));
      }
    }
    else if (*(_DWORD *)(v3 - 168) == 2)
    {
      if ((*(_WORD *)(v3 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v3 - 168) -= 2;
    }
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaCapabilities::decodingInfo(WebCore::ScriptExecutionContext &,WebCore::MediaDecodingConfiguration &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::MediaCapabilitiesDecodingInfo &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E335BAA0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = *(unsigned __int8 *)(v3 + 274);
    if (*(_BYTE *)(v3 + 274))
    {
      if (v4 == 1)
      {
        if (*(_DWORD *)(v3 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
        else
          --*(_DWORD *)(v3 + 312);
      }
      else if (v4 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 312));
      }
    }
    else if (*(_DWORD *)(v3 - 168) == 2)
    {
      if ((*(_WORD *)(v3 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v3 - 168) -= 2;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::MediaCapabilities::decodingInfo(WebCore::ScriptExecutionContext &,WebCore::MediaDecodingConfiguration &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::MediaCapabilitiesDecodingInfo &&>::call(uint64_t a1, __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  __int16 v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  char v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  __int16 v49;
  _DWORD *v50;
  __int16 v51;
  char v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[2];
  char v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  __int16 v67;
  uint64_t v68;

  v33 = *a2;
  v34 = *((_BYTE *)a2 + 2);
  LOBYTE(v35) = 0;
  v38 = 0;
  v5 = *((unsigned __int8 *)a2 + 48);
  if (*((_BYTE *)a2 + 48))
  {
    v6 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v35 = v6;
    v7 = *((_OWORD *)a2 + 2);
    v36 = *((_OWORD *)a2 + 1);
    v37 = v7;
    v38 = 1;
  }
  LOBYTE(v39) = 0;
  v42 = 0;
  v8 = *((unsigned __int8 *)a2 + 104);
  if (*((_BYTE *)a2 + 104))
  {
    v9 = *((_QWORD *)a2 + 7);
    v10 = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    v39 = v9;
    v40 = v10;
    v31 = v10;
    v41[0] = *(_OWORD *)(a2 + 36);
    *(_OWORD *)((char *)v41 + 10) = *(_OWORD *)(a2 + 41);
    v42 = 1;
  }
  LOBYTE(v43) = 0;
  v45 = 0;
  v11 = *((unsigned __int8 *)a2 + 128);
  if (*((_BYTE *)a2 + 128))
  {
    v43 = *((_QWORD *)a2 + 14);
    v12 = *((_DWORD *)a2 + 30);
    v13 = *((_DWORD *)a2 + 31);
    *((_QWORD *)a2 + 14) = 0;
    *((_QWORD *)a2 + 15) = 0;
    v29 = v13;
    v30 = v12;
    v44 = __PAIR64__(v13, v12);
    v45 = 1;
  }
  LOBYTE(v46) = 0;
  v48 = 0;
  v14 = *((unsigned __int8 *)a2 + 152);
  if (*((_BYTE *)a2 + 152))
  {
    v46 = *((_QWORD *)a2 + 17);
    v3 = *((_DWORD *)a2 + 36);
    v2 = *((_DWORD *)a2 + 37);
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    v47 = __PAIR64__(v2, v3);
    v48 = 1;
  }
  v15 = a2[80];
  v49 = v15;
  v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
  v16 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v50 = v16;
  v51 = v33;
  v52 = v34;
  LOBYTE(v53) = 0;
  v56 = 0;
  if (v5)
  {
    v17 = v35;
    v35 = 0;
    v53 = v17;
    v54 = v36;
    v55 = v37;
    v56 = 1;
  }
  LOBYTE(v57) = 0;
  v60 = 0;
  if (v8)
  {
    v18 = v39;
    v39 = 0;
    v40 = 0;
    v57 = v18;
    v58 = v31;
    v59[0] = v41[0];
    *(_OWORD *)((char *)v59 + 10) = *(_OWORD *)((char *)v41 + 10);
    v60 = 1;
  }
  LOBYTE(v61) = 0;
  v63 = 0;
  if (v11)
  {
    v19 = v43;
    v43 = 0;
    v44 = 0;
    v61 = v19;
    v62 = __PAIR64__(v29, v30);
    v63 = 1;
  }
  LOBYTE(v64) = 0;
  v66 = 0;
  if (v14)
  {
    v20 = v46;
    v46 = 0;
    v47 = 0;
    v64 = v20;
    v65 = __PAIR64__(v2, v3);
    v66 = 1;
  }
  v67 = v15;
  v21 = WTF::fastMalloc((WTF *)0xB8);
  *(_QWORD *)v21 = off_1E335BAC8;
  *(_QWORD *)(v21 + 8) = v16;
  v50 = 0;
  *(_WORD *)(v21 + 16) = v51;
  *(_BYTE *)(v21 + 18) = v52;
  *(_BYTE *)(v21 + 24) = 0;
  *(_BYTE *)(v21 + 64) = 0;
  if (v5)
  {
    v22 = v53;
    v53 = 0;
    *(_QWORD *)(v21 + 24) = v22;
    v23 = v55;
    *(_OWORD *)(v21 + 32) = v54;
    *(_OWORD *)(v21 + 48) = v23;
    *(_BYTE *)(v21 + 64) = 1;
  }
  *(_BYTE *)(v21 + 72) = 0;
  *(_BYTE *)(v21 + 120) = 0;
  if (v8)
  {
    *(_QWORD *)(v21 + 72) = v57;
    v57 = 0;
    v58 = 0;
    *(_QWORD *)(v21 + 80) = v31;
    v24 = *(_OWORD *)((char *)v59 + 10);
    *(_OWORD *)(v21 + 88) = v59[0];
    *(_OWORD *)(v21 + 98) = v24;
    *(_BYTE *)(v21 + 120) = 1;
  }
  *(_BYTE *)(v21 + 128) = 0;
  *(_BYTE *)(v21 + 144) = 0;
  if (v11)
  {
    *(_QWORD *)(v21 + 128) = v61;
    v61 = 0;
    v62 = 0;
    *(_DWORD *)(v21 + 136) = v30;
    *(_DWORD *)(v21 + 140) = v29;
    *(_BYTE *)(v21 + 144) = 1;
  }
  *(_BYTE *)(v21 + 152) = 0;
  *(_BYTE *)(v21 + 168) = 0;
  if (v14)
  {
    *(_QWORD *)(v21 + 152) = v64;
    v64 = 0;
    v65 = 0;
    *(_DWORD *)(v21 + 160) = v3;
    *(_DWORD *)(v21 + 164) = v2;
    *(_BYTE *)(v21 + 168) = 1;
  }
  *(_WORD *)(v21 + 176) = v15;
  v68 = v21;
  WebCore::EventLoopTaskGroup::queueTask(v32, 9, &v68);
  v26 = v68;
  v68 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v53, v25);
  v28 = v50;
  v50 = 0;
  if (v28)
  {
    if (v28[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
    else
      --v28[4];
  }
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v35, v27);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore17MediaCapabilities12decodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaDecodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINS2_29MediaCapabilitiesDecodingInfoEEEDaT_EUlvE_vJEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;

  *a1 = off_1E335BAC8;
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)(a1 + 3), a2);
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore17MediaCapabilities12decodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaDecodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINS2_29MediaCapabilitiesDecodingInfoEEEDaT_EUlvE_vJEED0Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  _DWORD *v4;

  *a1 = off_1E335BAC8;
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)(a1 + 3), a2);
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore17MediaCapabilities12decodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaDecodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINS2_29MediaCapabilitiesDecodingInfoEEEDaT_EUlvE_vJEE4callEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  objc_class *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v13;
  int v14;
  _BYTE v15[8];

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v3 = result + 16;
    v4 = *(_QWORD *)(v1 + 32);
    if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
      v5 = 0;
    else
      v5 = *(uint64_t **)v4;
    v6 = v5[7];
    MEMORY[0x19AEA3294](v15, v6);
    v7 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)v5, **(WebCore::JSDOMGlobalObject ***)(v1 + 32), v3);
    v8 = *(_QWORD *)(v6 + 16);
    if (!v8)
    {
      WebCore::DeferredPromise::callFunction(v1, v5, 0, v7);
      v8 = *(_QWORD *)(v6 + 16);
      if (!v8)
        return MEMORY[0x19AEA32A0](v15);
    }
    v9 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v5);
    if (!(*(unsigned int (**)(_QWORD *))(*v9 + 64))(v9))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v5, v8, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v15);
    }
    v10 = v9[43];
    if (*(_QWORD *)(v6 + 24) == v8)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v10 + 8) + 93442) = 1;
      *(_BYTE *)(v1 + 44) = 1;
      goto LABEL_12;
    }
    if (!v10)
      goto LABEL_12;
    v11 = (unsigned __int8 *)(v10 + 40);
    if (__ldaxr((unsigned __int8 *)(v10 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v10 + 40);
LABEL_20:
    v13 = *(unsigned __int8 *)(v10 + 41);
    v14 = __ldxr(v11);
    if (v14 == 1)
    {
      if (!__stlxr(0, v11))
      {
LABEL_25:
        if (!v13)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 40));
    goto LABEL_25;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaCapabilities::decodingInfo(WebCore::ScriptExecutionContext &,WebCore::MediaDecodingConfiguration &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,WebCore::Document &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = off_1E335BAF0;
  v3 = (unsigned int *)a1[26];
  a1[26] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)(a1 + 2), (WTF::StringImpl *)a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaCapabilities::decodingInfo(WebCore::ScriptExecutionContext &,WebCore::MediaDecodingConfiguration &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,WebCore::Document &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  *a1 = off_1E335BAF0;
  v3 = (unsigned int *)a1[26];
  a1[26] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)(a1 + 2), (WTF::StringImpl *)a2);
  return WTF::fastFree((WTF *)a1, v6);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaCapabilities::decodingInfo(WebCore::ScriptExecutionContext &,WebCore::MediaDecodingConfiguration &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a1 + 16;
  v10 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)&v11 = *(_QWORD *)(a1 + 192);
  v4 = *(_QWORD *)(a1 + 208);
  v5 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = 0;
  v6 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v6 = &off_1E335BB18;
  v7 = v11;
  *(_OWORD *)(v6 + 16) = v10;
  *(_OWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 48) = v4;
  *(_QWORD *)(v6 + 56) = v5;
  v9 = v6;
  WebCore::gatherDecodingInfo(a2, v3, &v9);
  result = v9;
  if (v9)
    return (*(uint64_t (**)(void))(*(_QWORD *)v9 + 8))();
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore17MediaCapabilities12decodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaDecodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__1clINS2_8DocumentEEEDaRT_EUlONS2_29MediaCapabilitiesDecodingInfoEE_vJSN_EED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335BB18;
  v3 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore17MediaCapabilities12decodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaDecodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__1clINS2_8DocumentEEEDaRT_EUlONS2_29MediaCapabilitiesDecodingInfoEE_vJSN_EED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335BB18;
  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore17MediaCapabilities12decodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaDecodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__1clINS2_8DocumentEEEDaRT_EUlONS2_29MediaCapabilitiesDecodingInfoEE_vJSN_EE4callESN_(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[2];
  char v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unsigned __int16 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[2];
  char v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  unsigned __int16 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  unsigned __int8 v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD v79[2];
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  _OWORD v87[2];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 32);
  v87[0] = *(_OWORD *)(a1 + 16);
  v87[1] = v5;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = 0;
  v42 = v6;
  v41 = v7;
  v8 = *((unsigned __int8 *)a2 + 2);
  v9 = *a2;
  WebCore::MediaConfiguration::isolatedCopy(&v73, (uint64_t)(a2 + 4));
  LOBYTE(v58) = 0;
  v61 = 0;
  v11 = v76;
  if (v76)
  {
    v12 = v73;
    v73 = 0;
    v58 = v12;
    v59 = v74;
    v60 = v75;
    v61 = 1;
  }
  LOBYTE(v62) = 0;
  v65 = 0;
  v13 = v80;
  if (v80)
  {
    v14 = v77;
    v15 = v78;
    v77 = 0;
    v78 = 0;
    v62 = v14;
    v63 = v15;
    v39 = v15;
    v64[0] = v79[0];
    *(_OWORD *)((char *)v64 + 10) = *(_OWORD *)((char *)v79 + 10);
    v65 = 1;
  }
  v16 = v9 | (v8 << 16);
  LOBYTE(v66) = 0;
  v68 = 0;
  v17 = v83;
  if (v83)
  {
    v66 = v81;
    v18 = v82;
    v19 = HIDWORD(v82);
    v81 = 0;
    v82 = 0;
    v2 = v18;
    v67 = __PAIR64__(v19, v18);
    v3 = v19;
    v68 = 1;
  }
  LOBYTE(v69) = 0;
  v71 = 0;
  v20 = v86;
  if (v86)
  {
    v69 = v84;
    v21 = v85;
    v9 = HIDWORD(v85);
    v84 = 0;
    v85 = 0;
    v40 = v21;
    v70 = __PAIR64__(v9, v21);
    v71 = 1;
  }
  v72 = a2[80];
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v73, v10);
  LOBYTE(v43) = 0;
  v46 = 0;
  if (v11)
  {
    v23 = v58;
    v58 = 0;
    v43 = v23;
    v44 = v59;
    v45 = v60;
    v46 = 1;
  }
  LOBYTE(v47) = 0;
  v50 = 0;
  if (v13)
  {
    v24 = v62;
    v62 = 0;
    v63 = 0;
    v47 = v24;
    v48 = v39;
    v49[0] = v64[0];
    *(_OWORD *)((char *)v49 + 10) = *(_OWORD *)((char *)v64 + 10);
    v50 = 1;
  }
  LOBYTE(v51) = 0;
  v53 = 0;
  if (v17)
  {
    v25 = v66;
    v66 = 0;
    v67 = 0;
    v51 = v25;
    v52 = __PAIR64__(v3, v2);
    v53 = 1;
  }
  LOBYTE(v54) = 0;
  v56 = 0;
  if (v20)
  {
    v26 = v69;
    v69 = 0;
    v70 = 0;
    v54 = v26;
    v55 = __PAIR64__(v9, v40);
    v56 = 1;
  }
  v27 = v72;
  v57 = v72;
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v58, v22);
  v28 = WTF::fastMalloc((WTF *)0xC0);
  *(_QWORD *)v28 = off_1E335BB40;
  *(_QWORD *)(v28 + 8) = v42;
  *(_QWORD *)(v28 + 16) = v41;
  *(_WORD *)(v28 + 24) = v16;
  *(_BYTE *)(v28 + 26) = BYTE2(v16);
  *(_BYTE *)(v28 + 32) = 0;
  *(_BYTE *)(v28 + 72) = 0;
  if (v11)
  {
    v29 = v43;
    v43 = 0;
    *(_QWORD *)(v28 + 32) = v29;
    v30 = v45;
    *(_OWORD *)(v28 + 40) = v44;
    *(_OWORD *)(v28 + 56) = v30;
    *(_BYTE *)(v28 + 72) = 1;
  }
  *(_BYTE *)(v28 + 80) = 0;
  *(_BYTE *)(v28 + 128) = 0;
  if (v13)
  {
    *(_QWORD *)(v28 + 80) = v47;
    *(_QWORD *)(v28 + 88) = v39;
    v47 = 0;
    v48 = 0;
    v31 = *(_OWORD *)((char *)v49 + 10);
    *(_OWORD *)(v28 + 96) = v49[0];
    *(_OWORD *)(v28 + 106) = v31;
    *(_BYTE *)(v28 + 128) = 1;
  }
  *(_BYTE *)(v28 + 136) = 0;
  *(_BYTE *)(v28 + 152) = 0;
  if (v17)
  {
    *(_QWORD *)(v28 + 136) = v51;
    v51 = 0;
    v52 = 0;
    *(_DWORD *)(v28 + 144) = v2;
    *(_DWORD *)(v28 + 148) = v3;
    *(_BYTE *)(v28 + 152) = 1;
  }
  *(_BYTE *)(v28 + 160) = 0;
  *(_BYTE *)(v28 + 176) = 0;
  if (v20)
  {
    *(_QWORD *)(v28 + 160) = v54;
    v54 = 0;
    v55 = 0;
    *(_DWORD *)(v28 + 168) = v40;
    *(_DWORD *)(v28 + 172) = v9;
    *(_BYTE *)(v28 + 176) = 1;
  }
  *(_WORD *)(v28 + 184) = v27;
  v58 = v28;
  LOBYTE(v59) = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_29;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_29:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v33 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v87);
  if (v33)
  {
    v35 = v33[4];
    if (v35)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v35 + 336))(v35, &v58);
  }
  v36 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v36 != 1)
  {
    __clrex();
    goto LABEL_38;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_38:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v37 = v58;
  v58 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v43, v34);
  return 0;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore17MediaCapabilities12decodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaDecodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__1clINS2_8DocumentEEEDaRT_ENUlONS2_29MediaCapabilitiesDecodingInfoEE_clESN_EUlSL_E_vJS5_EED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E335BB40;
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)(a1 + 4), a2);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore17MediaCapabilities12decodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaDecodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__1clINS2_8DocumentEEEDaRT_ENUlONS2_29MediaCapabilitiesDecodingInfoEE_clESN_EUlSL_E_vJS5_EED0Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E335BB40;
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)(a1 + 4), a2);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

void _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore17MediaCapabilities12decodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaDecodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__1clINS2_8DocumentEEEDaRT_ENUlONS2_29MediaCapabilitiesDecodingInfoEE_clESN_EUlSL_E_vJS5_EE4callES5_(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      v6 = *(_QWORD *)(v3 + 24);
      v4 = (uint64_t *)(v3 + 24);
      v5 = v6;
      if (v6)
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_DWORD *)(v5 - 8);
        v9 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        v13 = *(_QWORD *)(v5 + 16 * v12);
        if (v13 != v7)
        {
          v14 = 1;
          while (v13)
          {
            v12 = ((_DWORD)v12 + v14) & v8;
            v13 = *(_QWORD *)(v5 + 16 * v12);
            ++v14;
            if (v13 == v7)
              goto LABEL_10;
          }
          v12 = *(unsigned int *)(v5 - 4);
        }
LABEL_10:
        if (v12 != *(_DWORD *)(v5 - 4))
        {
          v15 = (_QWORD *)(v5 + 16 * v12);
          v16 = v15[1];
          v15[1] = 0;
          v17 = *v4;
          if (!*v4 || (v17 += 16 * *(unsigned int *)(v17 - 4), (_QWORD *)v17 != v15))
          {
            if ((_QWORD *)v17 != v15)
            {
              *v15 = -1;
              v15[1] = 0;
              ++*(_DWORD *)(*v4 - 16);
              v18 = *v4;
              v19 = *v4 ? *(_DWORD *)(v18 - 12) - 1 : -1;
              *(_DWORD *)(v18 - 12) = v19;
              v20 = *v4;
              if (*v4)
              {
                v21 = 6 * *(_DWORD *)(v20 - 12);
                v22 = *(_DWORD *)(v20 - 4);
                if (v21 < v22 && v22 >= 9)
                  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v4, v22 >> 1);
              }
            }
          }
          if (v16)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, a1 + 24);
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
        }
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaCapabilities::encodingInfo(WebCore::ScriptExecutionContext &,WebCore::MediaEncodingConfiguration &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::MediaCapabilitiesEncodingInfo &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;

  *a1 = &off_1E335BB68;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = *(unsigned __int8 *)(v3 + 274);
    if (*(_BYTE *)(v3 + 274))
    {
      if (v4 == 1)
      {
        if (*(_DWORD *)(v3 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
        else
          --*(_DWORD *)(v3 + 312);
      }
      else if (v4 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 312));
      }
    }
    else if (*(_DWORD *)(v3 - 168) == 2)
    {
      if ((*(_WORD *)(v3 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v3 - 168) -= 2;
    }
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaCapabilities::encodingInfo(WebCore::ScriptExecutionContext &,WebCore::MediaEncodingConfiguration &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::MediaCapabilitiesEncodingInfo &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E335BB68;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = *(unsigned __int8 *)(v3 + 274);
    if (*(_BYTE *)(v3 + 274))
    {
      if (v4 == 1)
      {
        if (*(_DWORD *)(v3 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
        else
          --*(_DWORD *)(v3 + 312);
      }
      else if (v4 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 312));
      }
    }
    else if (*(_DWORD *)(v3 - 168) == 2)
    {
      if ((*(_WORD *)(v3 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v3 - 168) -= 2;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::MediaCapabilities::encodingInfo(WebCore::ScriptExecutionContext &,WebCore::MediaEncodingConfiguration &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::MediaCapabilitiesEncodingInfo &&>::call(uint64_t a1, __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  char v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  _DWORD *v50;
  __int16 v51;
  char v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[2];
  char v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  uint64_t v68;

  v33 = *a2;
  v34 = *((_BYTE *)a2 + 2);
  LOBYTE(v35) = 0;
  v38 = 0;
  v5 = *((unsigned __int8 *)a2 + 48);
  if (*((_BYTE *)a2 + 48))
  {
    v6 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v35 = v6;
    v7 = *((_OWORD *)a2 + 2);
    v36 = *((_OWORD *)a2 + 1);
    v37 = v7;
    v38 = 1;
  }
  LOBYTE(v39) = 0;
  v42 = 0;
  v8 = *((unsigned __int8 *)a2 + 104);
  if (*((_BYTE *)a2 + 104))
  {
    v9 = *((_QWORD *)a2 + 7);
    v10 = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    v39 = v9;
    v40 = v10;
    v31 = v10;
    v41[0] = *(_OWORD *)(a2 + 36);
    *(_OWORD *)((char *)v41 + 10) = *(_OWORD *)(a2 + 41);
    v42 = 1;
  }
  LOBYTE(v43) = 0;
  v45 = 0;
  v11 = *((unsigned __int8 *)a2 + 128);
  if (*((_BYTE *)a2 + 128))
  {
    v43 = *((_QWORD *)a2 + 14);
    v12 = *((_DWORD *)a2 + 30);
    v13 = *((_DWORD *)a2 + 31);
    *((_QWORD *)a2 + 14) = 0;
    *((_QWORD *)a2 + 15) = 0;
    v29 = v13;
    v30 = v12;
    v44 = __PAIR64__(v13, v12);
    v45 = 1;
  }
  LOBYTE(v46) = 0;
  v48 = 0;
  v14 = *((unsigned __int8 *)a2 + 152);
  if (*((_BYTE *)a2 + 152))
  {
    v46 = *((_QWORD *)a2 + 17);
    v3 = *((_DWORD *)a2 + 36);
    v2 = *((_DWORD *)a2 + 37);
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    v47 = __PAIR64__(v2, v3);
    v48 = 1;
  }
  v15 = *((_BYTE *)a2 + 160);
  v49 = v15;
  v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
  v16 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v50 = v16;
  v51 = v33;
  v52 = v34;
  LOBYTE(v53) = 0;
  v56 = 0;
  if (v5)
  {
    v17 = v35;
    v35 = 0;
    v53 = v17;
    v54 = v36;
    v55 = v37;
    v56 = 1;
  }
  LOBYTE(v57) = 0;
  v60 = 0;
  if (v8)
  {
    v18 = v39;
    v39 = 0;
    v40 = 0;
    v57 = v18;
    v58 = v31;
    v59[0] = v41[0];
    *(_OWORD *)((char *)v59 + 10) = *(_OWORD *)((char *)v41 + 10);
    v60 = 1;
  }
  LOBYTE(v61) = 0;
  v63 = 0;
  if (v11)
  {
    v19 = v43;
    v43 = 0;
    v44 = 0;
    v61 = v19;
    v62 = __PAIR64__(v29, v30);
    v63 = 1;
  }
  LOBYTE(v64) = 0;
  v66 = 0;
  if (v14)
  {
    v20 = v46;
    v46 = 0;
    v47 = 0;
    v64 = v20;
    v65 = __PAIR64__(v2, v3);
    v66 = 1;
  }
  v67 = v15;
  v21 = WTF::fastMalloc((WTF *)0xB8);
  *(_QWORD *)v21 = off_1E335BB90;
  *(_QWORD *)(v21 + 8) = v16;
  v50 = 0;
  *(_WORD *)(v21 + 16) = v51;
  *(_BYTE *)(v21 + 18) = v52;
  *(_BYTE *)(v21 + 24) = 0;
  *(_BYTE *)(v21 + 64) = 0;
  if (v5)
  {
    v22 = v53;
    v53 = 0;
    *(_QWORD *)(v21 + 24) = v22;
    v23 = v55;
    *(_OWORD *)(v21 + 32) = v54;
    *(_OWORD *)(v21 + 48) = v23;
    *(_BYTE *)(v21 + 64) = 1;
  }
  *(_BYTE *)(v21 + 72) = 0;
  *(_BYTE *)(v21 + 120) = 0;
  if (v8)
  {
    *(_QWORD *)(v21 + 72) = v57;
    v57 = 0;
    v58 = 0;
    *(_QWORD *)(v21 + 80) = v31;
    v24 = *(_OWORD *)((char *)v59 + 10);
    *(_OWORD *)(v21 + 88) = v59[0];
    *(_OWORD *)(v21 + 98) = v24;
    *(_BYTE *)(v21 + 120) = 1;
  }
  *(_BYTE *)(v21 + 128) = 0;
  *(_BYTE *)(v21 + 144) = 0;
  if (v11)
  {
    *(_QWORD *)(v21 + 128) = v61;
    v61 = 0;
    v62 = 0;
    *(_DWORD *)(v21 + 136) = v30;
    *(_DWORD *)(v21 + 140) = v29;
    *(_BYTE *)(v21 + 144) = 1;
  }
  *(_BYTE *)(v21 + 152) = 0;
  *(_BYTE *)(v21 + 168) = 0;
  if (v14)
  {
    *(_QWORD *)(v21 + 152) = v64;
    v64 = 0;
    v65 = 0;
    *(_DWORD *)(v21 + 160) = v3;
    *(_DWORD *)(v21 + 164) = v2;
    *(_BYTE *)(v21 + 168) = 1;
  }
  *(_BYTE *)(v21 + 176) = v15;
  v68 = v21;
  WebCore::EventLoopTaskGroup::queueTask(v32, 9, &v68);
  v26 = v68;
  v68 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v53, v25);
  v28 = v50;
  v50 = 0;
  if (v28)
  {
    if (v28[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
    else
      --v28[4];
  }
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v35, v27);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore17MediaCapabilities12encodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaEncodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINS2_29MediaCapabilitiesEncodingInfoEEEDaT_EUlvE_vJEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;

  *a1 = off_1E335BB90;
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)(a1 + 3), a2);
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore17MediaCapabilities12encodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaEncodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINS2_29MediaCapabilitiesEncodingInfoEEEDaT_EUlvE_vJEED0Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  _DWORD *v4;

  *a1 = off_1E335BB90;
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)(a1 + 3), a2);
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore17MediaCapabilities12encodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaEncodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINS2_29MediaCapabilitiesEncodingInfoEEEDaT_EUlvE_vJEE4callEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  objc_class *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v13;
  int v14;
  _BYTE v15[8];

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v3 = (_BYTE *)(result + 16);
    v4 = *(_QWORD *)(v1 + 32);
    if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
      v5 = 0;
    else
      v5 = *(uint64_t **)v4;
    v6 = v5[7];
    MEMORY[0x19AEA3294](v15, v6);
    v7 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)v5, **(WebCore::JSDOMGlobalObject ***)(v1 + 32), v3);
    v8 = *(_QWORD *)(v6 + 16);
    if (!v8)
    {
      WebCore::DeferredPromise::callFunction(v1, v5, 0, v7);
      v8 = *(_QWORD *)(v6 + 16);
      if (!v8)
        return MEMORY[0x19AEA32A0](v15);
    }
    v9 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v5);
    if (!(*(unsigned int (**)(_QWORD *))(*v9 + 64))(v9))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v5, v8, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v15);
    }
    v10 = v9[43];
    if (*(_QWORD *)(v6 + 24) == v8)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v10 + 8) + 93442) = 1;
      *(_BYTE *)(v1 + 44) = 1;
      goto LABEL_12;
    }
    if (!v10)
      goto LABEL_12;
    v11 = (unsigned __int8 *)(v10 + 40);
    if (__ldaxr((unsigned __int8 *)(v10 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v10 + 40);
LABEL_20:
    v13 = *(unsigned __int8 *)(v10 + 41);
    v14 = __ldxr(v11);
    if (v14 == 1)
    {
      if (!__stlxr(0, v11))
      {
LABEL_25:
        if (!v13)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 40));
    goto LABEL_25;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaCapabilities::encodingInfo(WebCore::ScriptExecutionContext &,WebCore::MediaEncodingConfiguration &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,WebCore::Document &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = off_1E335BBB8;
  v3 = (unsigned int *)a1[26];
  a1[26] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)(a1 + 2), (WTF::StringImpl *)a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaCapabilities::encodingInfo(WebCore::ScriptExecutionContext &,WebCore::MediaEncodingConfiguration &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,WebCore::Document &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  *a1 = off_1E335BBB8;
  v3 = (unsigned int *)a1[26];
  a1[26] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)(a1 + 2), (WTF::StringImpl *)a2);
  return WTF::fastFree((WTF *)a1, v6);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaCapabilities::encodingInfo(WebCore::ScriptExecutionContext &,WebCore::MediaEncodingConfiguration &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  WebCore *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = (WebCore *)(a1 + 16);
  v10 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)&v11 = *(_QWORD *)(a1 + 192);
  v4 = *(_QWORD *)(a1 + 208);
  v5 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = 0;
  v6 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v6 = &off_1E335BBE0;
  v7 = v11;
  *(_OWORD *)(v6 + 16) = v10;
  *(_OWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 48) = v4;
  *(_QWORD *)(v6 + 56) = v5;
  v9 = v6;
  WebCore::gatherEncodingInfo(a2, v3, &v9);
  result = v9;
  if (v9)
    return (*(uint64_t (**)(void))(*(_QWORD *)v9 + 8))();
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore17MediaCapabilities12encodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaEncodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__1clINS2_8DocumentEEEDaRT_EUlOSK_E_vJONS2_29MediaCapabilitiesEncodingInfoEEED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E335BBE0;
  v3 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore17MediaCapabilities12encodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaEncodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__1clINS2_8DocumentEEEDaRT_EUlOSK_E_vJONS2_29MediaCapabilitiesEncodingInfoEEED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E335BBE0;
  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore17MediaCapabilities12encodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaEncodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__1clINS2_8DocumentEEEDaRT_EUlOSK_E_vJONS2_29MediaCapabilitiesEncodingInfoEEE4callESP_(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  char v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[2];
  char v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[2];
  char v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  unsigned __int8 v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD v79[2];
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  _OWORD v87[2];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 32);
  v87[0] = *(_OWORD *)(a1 + 16);
  v87[1] = v5;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = 0;
  v42 = v6;
  v41 = v7;
  v8 = *((unsigned __int8 *)a2 + 2);
  v9 = *a2;
  WebCore::MediaConfiguration::isolatedCopy(&v73, (uint64_t)(a2 + 4));
  LOBYTE(v58) = 0;
  v61 = 0;
  v11 = v76;
  if (v76)
  {
    v12 = v73;
    v73 = 0;
    v58 = v12;
    v59 = v74;
    v60 = v75;
    v61 = 1;
  }
  LOBYTE(v62) = 0;
  v65 = 0;
  v13 = v80;
  if (v80)
  {
    v14 = v77;
    v15 = v78;
    v77 = 0;
    v78 = 0;
    v62 = v14;
    v63 = v15;
    v39 = v15;
    v64[0] = v79[0];
    *(_OWORD *)((char *)v64 + 10) = *(_OWORD *)((char *)v79 + 10);
    v65 = 1;
  }
  v16 = v9 | (v8 << 16);
  LOBYTE(v66) = 0;
  v68 = 0;
  v17 = v83;
  if (v83)
  {
    v66 = v81;
    v18 = v82;
    v19 = HIDWORD(v82);
    v81 = 0;
    v82 = 0;
    v2 = v18;
    v67 = __PAIR64__(v19, v18);
    v3 = v19;
    v68 = 1;
  }
  LOBYTE(v69) = 0;
  v71 = 0;
  v20 = v86;
  if (v86)
  {
    v69 = v84;
    v21 = v85;
    v9 = HIDWORD(v85);
    v84 = 0;
    v85 = 0;
    v40 = v21;
    v70 = __PAIR64__(v9, v21);
    v71 = 1;
  }
  v22 = *((_BYTE *)a2 + 160);
  v72 = v22;
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v73, v10);
  LOBYTE(v43) = 0;
  v46 = 0;
  if (v11)
  {
    v24 = v58;
    v58 = 0;
    v43 = v24;
    v44 = v59;
    v45 = v60;
    v46 = 1;
  }
  LOBYTE(v47) = 0;
  v50 = 0;
  if (v13)
  {
    v25 = v62;
    v62 = 0;
    v63 = 0;
    v47 = v25;
    v48 = v39;
    v49[0] = v64[0];
    *(_OWORD *)((char *)v49 + 10) = *(_OWORD *)((char *)v64 + 10);
    v50 = 1;
  }
  LOBYTE(v51) = 0;
  v53 = 0;
  if (v17)
  {
    v26 = v66;
    v66 = 0;
    v67 = 0;
    v51 = v26;
    v52 = __PAIR64__(v3, v2);
    v53 = 1;
  }
  LOBYTE(v54) = 0;
  v56 = 0;
  if (v20)
  {
    v27 = v69;
    v69 = 0;
    v70 = 0;
    v54 = v27;
    v55 = __PAIR64__(v9, v40);
    v56 = 1;
  }
  v57 = v22;
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v58, v23);
  v28 = WTF::fastMalloc((WTF *)0xC0);
  *(_QWORD *)v28 = off_1E335BC08;
  *(_QWORD *)(v28 + 8) = v42;
  *(_QWORD *)(v28 + 16) = v41;
  *(_WORD *)(v28 + 24) = v16;
  *(_BYTE *)(v28 + 26) = BYTE2(v16);
  *(_BYTE *)(v28 + 32) = 0;
  *(_BYTE *)(v28 + 72) = 0;
  if (v11)
  {
    v29 = v43;
    v43 = 0;
    *(_QWORD *)(v28 + 32) = v29;
    v30 = v45;
    *(_OWORD *)(v28 + 40) = v44;
    *(_OWORD *)(v28 + 56) = v30;
    *(_BYTE *)(v28 + 72) = 1;
  }
  *(_BYTE *)(v28 + 80) = 0;
  *(_BYTE *)(v28 + 128) = 0;
  if (v13)
  {
    *(_QWORD *)(v28 + 80) = v47;
    *(_QWORD *)(v28 + 88) = v39;
    v47 = 0;
    v48 = 0;
    v31 = *(_OWORD *)((char *)v49 + 10);
    *(_OWORD *)(v28 + 96) = v49[0];
    *(_OWORD *)(v28 + 106) = v31;
    *(_BYTE *)(v28 + 128) = 1;
  }
  *(_BYTE *)(v28 + 136) = 0;
  *(_BYTE *)(v28 + 152) = 0;
  if (v17)
  {
    *(_QWORD *)(v28 + 136) = v51;
    v51 = 0;
    v52 = 0;
    *(_DWORD *)(v28 + 144) = v2;
    *(_DWORD *)(v28 + 148) = v3;
    *(_BYTE *)(v28 + 152) = 1;
  }
  *(_BYTE *)(v28 + 160) = 0;
  *(_BYTE *)(v28 + 176) = 0;
  if (v20)
  {
    *(_QWORD *)(v28 + 160) = v54;
    v54 = 0;
    v55 = 0;
    *(_DWORD *)(v28 + 168) = v40;
    *(_DWORD *)(v28 + 172) = v9;
    *(_BYTE *)(v28 + 176) = 1;
  }
  *(_BYTE *)(v28 + 184) = v22;
  v58 = v28;
  LOBYTE(v59) = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_29;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_29:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v33 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v87);
  if (v33)
  {
    v35 = v33[4];
    if (v35)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v35 + 336))(v35, &v58);
  }
  v36 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v36 != 1)
  {
    __clrex();
    goto LABEL_38;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_38:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v37 = v58;
  v58 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v43, v34);
  return 0;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore17MediaCapabilities12encodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaEncodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__1clINS2_8DocumentEEEDaRT_ENUlOSK_E_clINS2_29MediaCapabilitiesEncodingInfoEEESJ_SM_EUlSL_E_vJS5_EED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E335BC08;
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)(a1 + 4), a2);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore17MediaCapabilities12encodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaEncodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__1clINS2_8DocumentEEEDaRT_ENUlOSK_E_clINS2_29MediaCapabilitiesEncodingInfoEEESJ_SM_EUlSL_E_vJS5_EED0Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E335BC08;
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)(a1 + 4), a2);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

void _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore17MediaCapabilities12encodingInfoERNS2_22ScriptExecutionContextEONS2_26MediaEncodingConfigurationEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__1clINS2_8DocumentEEEDaRT_ENUlOSK_E_clINS2_29MediaCapabilitiesEncodingInfoEEESJ_SM_EUlSL_E_vJS5_EE4callES5_(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      v6 = *(_QWORD *)(v3 + 32);
      v4 = (uint64_t *)(v3 + 32);
      v5 = v6;
      if (v6)
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_DWORD *)(v5 - 8);
        v9 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        v13 = *(_QWORD *)(v5 + 16 * v12);
        if (v13 != v7)
        {
          v14 = 1;
          while (v13)
          {
            v12 = ((_DWORD)v12 + v14) & v8;
            v13 = *(_QWORD *)(v5 + 16 * v12);
            ++v14;
            if (v13 == v7)
              goto LABEL_10;
          }
          v12 = *(unsigned int *)(v5 - 4);
        }
LABEL_10:
        if (v12 != *(_DWORD *)(v5 - 4))
        {
          v15 = (_QWORD *)(v5 + 16 * v12);
          v16 = v15[1];
          v15[1] = 0;
          v17 = *v4;
          if (!*v4 || (v17 += 16 * *(unsigned int *)(v17 - 4), (_QWORD *)v17 != v15))
          {
            if ((_QWORD *)v17 != v15)
            {
              *v15 = -1;
              v15[1] = 0;
              ++*(_DWORD *)(*v4 - 16);
              v18 = *v4;
              v19 = *v4 ? *(_DWORD *)(v18 - 12) - 1 : -1;
              *(_DWORD *)(v18 - 12) = v19;
              v20 = *v4;
              if (*v4)
              {
                v21 = 6 * *(_DWORD *)(v20 - 12);
                v22 = *(_DWORD *)(v20 - 4);
                if (v21 < v22 && v22 >= 9)
                  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v4, v22 >> 1);
              }
            }
          }
          if (v16)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, a1 + 24);
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
        }
      }
    }
  }
}

uint64_t WebCore::AttachmentLayout::AttachmentLayout(uint64_t a1, int32x2_t *a2)
{
  int32x2_t *v2;
  const __CTFontDescriptor *v4;
  const __CFString *v5;
  CFTypeRef v6;
  void *v7;
  PAL *v8;
  float v9;
  float v10;
  const __CTFontDescriptor *v11;
  CFTypeRef v12;
  void *v13;
  float v14;
  float v15;
  double v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::String *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  float v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  _QWORD *v45;
  _QWORD *v46;
  double v47;
  uint64_t v48;
  __int16 v49;
  float v50;
  float v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  __int16 v55;
  PAL *v56;
  _DWORD *v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  const __CTFontDescriptor *v63;
  CTFontRef v64;
  uint64_t v65;
  void *v66;
  _QWORD *v67;
  const void *v68;
  PAL *v69;
  NSDictionary *v70;
  float v71;
  void *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  const __CTFontDescriptor *v78;
  const __CTFont *v79;
  WTF::StringImpl *v80;
  _BOOL4 v81;
  uint64_t v82;
  const __CTFontDescriptor *v83;
  CTFontRef v84;
  uint64_t v85;
  WebCore::Document *v86;
  int32x2_t *v87;
  const WebCore::RenderStyle *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  void *v101;
  CFTypeRef v102;
  PAL *v103;
  NSDictionary *v104;
  WTF *v105;
  void *v106;
  WTF *v107;
  void *v108;
  const __CTFontDescriptor *v109;
  const __CTFont *v110;
  int v111;
  PAL *v112;
  const __CTFontDescriptor *v113;
  CTFontRef v114;
  WebCore::Document *v115;
  const WebCore::RenderStyle *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  void *v130;
  CFTypeRef v131;
  PAL *v132;
  PAL *v133;
  WTF *v134;
  void *v135;
  WTF *v136;
  void *v137;
  int32x2_t v138;
  const __CTFontDescriptor *v139;
  WTF::StringImpl *v140;
  const __CTFont *v141;
  uint64_t v142;
  uint64_t v143;
  float *v144;
  float v145;
  float v146;
  WTF::StringImpl *v147;
  const __CFAttributedString *v149;
  const __CTLine *v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  _DWORD **v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  const void *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  _QWORD v170[2];
  _QWORD v171[2];
  _QWORD v172[2];
  _QWORD v173[2];
  _QWORD v174[2];
  _QWORD v175[2];
  uint64_t v176;
  uint64_t v177;
  BOOL v178[8];
  int v179;
  _QWORD v180[3];

  v2 = a2;
  v180[1] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  v163 = a1 + 96;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 125) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  *(float32x2_t *)(a1 + 56) = vmul_f32(vcvt_f32_s32(a2[20]), (float32x2_t)vdup_n_s32(0x3C800000u));
  v4 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithTextStyle();
  v5 = (const __CFString *)*MEMORY[0x1E0CA83D8];
  v6 = CTFontDescriptorCopyAttribute(v4, (CFStringRef)*MEMORY[0x1E0CA83D8]);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = (void *)v6;
  else
    v7 = 0;
  v8 = (PAL *)objc_msgSend(v7, "floatValue", v163);
  v10 = v9;
  if (v6)
    CFRelease(v6);
  if (v4)
    CFRelease(v4);
  {
    v8 = (PAL *)WebCore::contentSizeCategoryStorage(void)::contentSizeCategory;
    if (WebCore::contentSizeCategoryStorage(void)::contentSizeCategory)
    {
      WTF::StringImpl::operator NSString *();
      goto LABEL_13;
    }
  }
  else
  {
    WebCore::contentSizeCategoryStorage(void)::contentSizeCategory = 0;
  }
  objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass(v8), "sharedApplication"), "preferredContentSizeCategory");
LABEL_13:
  v11 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithTextStyle();
  v12 = CTFontDescriptorCopyAttribute(v11, v5);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v13 = (void *)v12;
  else
    v13 = 0;
  objc_msgSend(v13, "floatValue");
  v15 = v14;
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  v16 = 1.0;
  if (v15 != 0.0 && v10 != 0.0)
    v16 = fmax(v15 / v10, 1.0);
  *(double *)(a1 + 8) = v16 * 140.0;
  *(_DWORD *)a1 = *(_DWORD *)(a1 + 56);
  v17 = *(_QWORD *)(*(_QWORD *)&v2[3] + 8);
  v18 = *(_WORD *)(v17 + 28);
  if ((v18 & 0x10) == 0
    || (v19 = v18 & 0x110, v19 == 272)
    || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1954196A4);
  }
  v20 = v18 & 0x10;
  v21 = *(_QWORD *)(v17 + 104);
  if (!v21)
    goto LABEL_37;
  v22 = *(_DWORD *)(v21 + 4);
  if ((v22 & 1) == 0)
  {
    v23 = v21 + 32;
    LODWORD(v24) = v22 >> 5;
    if ((_DWORD)v24)
      goto LABEL_29;
LABEL_37:
    v25 = (WTF::String *)MEMORY[0x1E0CBF2F8];
    goto LABEL_38;
  }
  v23 = *(_QWORD *)(v21 + 40);
  LODWORD(v24) = *(_DWORD *)(v21 + 52);
  if (!(_DWORD)v24)
    goto LABEL_37;
LABEL_29:
  v24 = v24;
  v25 = (WTF::String *)(v23 + 8);
  while (1)
  {
    v26 = *((_QWORD *)v25 - 1);
    if (v26 == WebCore::HTMLNames::progressAttr
      || *(_QWORD *)(v26 + 24) == *(_QWORD *)(WebCore::HTMLNames::progressAttr + 24)
      && *(_QWORD *)(v26 + 32) == *(_QWORD *)(WebCore::HTMLNames::progressAttr + 32))
    {
      break;
    }
    v25 = (WTF::String *)((char *)v25 + 16);
    if (!--v24)
    {
      v25 = (WTF::String *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_38:
  if (*(_QWORD *)v25 && *(_DWORD *)(*(_QWORD *)v25 + 4))
  {
    v178[0] = 0;
    WTF::String::toFloat(v25, v178);
    if (v36 > 1.0)
      v36 = 1.0;
    if (v36 < 0.0)
      v36 = 0.0;
    *(float *)(a1 + 84) = v36;
    v27 = v178[0];
    v17 = *(_QWORD *)(*(_QWORD *)&v2[3] + 8);
    v20 = *(_WORD *)(v17 + 28) & 0x10;
    v19 = *(_WORD *)(v17 + 28) & 0x110;
  }
  else
  {
    v27 = 0;
  }
  *(_BYTE *)(a1 + 132) = v27;
  if (!v20
    || v19 == 272
    || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1954196C4);
  }
  WebCore::HTMLAttachmentElement::attachmentTitleForDisplay((char *)v17, &v169);
  v28 = *(_QWORD *)(*(_QWORD *)&v2[3] + 8);
  v29 = *(_WORD *)(v28 + 28);
  if ((v29 & 0x10) == 0
    || (v29 & 0x110) == 0x110
    || *(_QWORD *)(*(_QWORD *)(v28 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1954196E4);
  }
  v30 = *(_QWORD *)(v28 + 104);
  if (!v30)
    goto LABEL_63;
  v31 = *(_DWORD *)(v30 + 4);
  if ((v31 & 1) == 0)
  {
    v32 = v30 + 32;
    LODWORD(v33) = v31 >> 5;
    if (v31 >> 5)
      goto LABEL_49;
LABEL_63:
    v34 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_64;
  }
  v32 = *(_QWORD *)(v30 + 40);
  LODWORD(v33) = *(_DWORD *)(v30 + 52);
  if (!(_DWORD)v33)
    goto LABEL_63;
LABEL_49:
  v33 = v33;
  v34 = (WTF::StringImpl **)(v32 + 8);
  while (1)
  {
    v35 = (uint64_t)*(v34 - 1);
    if (v35 == WebCore::HTMLNames::actionAttr
      || *(_QWORD *)(v35 + 24) == *(_QWORD *)(WebCore::HTMLNames::actionAttr + 24)
      && *(_QWORD *)(v35 + 32) == *(_QWORD *)(WebCore::HTMLNames::actionAttr + 32))
    {
      break;
    }
    v34 += 2;
    if (!--v33)
    {
      v34 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_64:
  v37 = *v34;
  if (v37)
    *(_DWORD *)v37 += 2;
  v168 = v37;
  if (!v30)
    goto LABEL_77;
  v38 = *(_DWORD *)(v30 + 4);
  if ((v38 & 1) == 0)
  {
    v39 = v30 + 32;
    v40 = v38 >> 5;
    if (v38 >> 5)
      goto LABEL_69;
LABEL_77:
    v42 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_78;
  }
  v39 = *(_QWORD *)(v30 + 40);
  v40 = *(_DWORD *)(v30 + 52);
  if (!v40)
    goto LABEL_77;
LABEL_69:
  v41 = v40;
  v42 = (WTF::StringImpl **)(v39 + 8);
  while (1)
  {
    v43 = (uint64_t)*(v42 - 1);
    if (v43 == WebCore::HTMLNames::subtitleAttr
      || *(_QWORD *)(v43 + 24) == *(_QWORD *)(WebCore::HTMLNames::subtitleAttr + 24)
      && *(_QWORD *)(v43 + 32) == *(_QWORD *)(WebCore::HTMLNames::subtitleAttr + 32))
    {
      break;
    }
    v42 += 2;
    if (!--v41)
    {
      v42 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_78:
  v44 = *v42;
  if (*v42)
    *(_DWORD *)v44 += 2;
  v166 = v44;
  v45 = (_QWORD *)MEMORY[0x1E0CA8188];
  v46 = (_QWORD *)MEMORY[0x1E0CA8550];
  if (*(_BYTE *)(a1 + 132))
  {
    *(float *)(a1 + 64) = (float)(*(float *)(a1 + 56) * 0.5) + -18.0;
    *(_QWORD *)(a1 + 68) = 0x4210000000000000;
    *(_DWORD *)(a1 + 76) = 1108344832;
    v47 = 44.0;
    goto LABEL_82;
  }
  if (!v37 || (v47 = 0.0, !*((_DWORD *)v37 + 1)))
  {
    *(_QWORD *)v178 = 0;
    WebCore::HTMLAttachmentElement::requestIconIfNeededWithSize(v28, (const WebCore::FloatSize *)v178);
    v48 = *(_QWORD *)(*(_QWORD *)&v2[3] + 8);
    v49 = *(_WORD *)(v48 + 28);
    if ((v49 & 0x10) == 0
      || (v49 & 0x110) == 0x110
      || *(_QWORD *)(*(_QWORD *)(v48 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x195419704);
    }
    v51 = *(float *)(v48 + 152);
    v50 = *(float *)(v48 + 156);
    v52 = *(_DWORD **)(v48 + 144);
    if (v52)
      ++v52[2];
    v53 = *v164;
    *v164 = v52;
    if (v53)
    {
      if (v53[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 8))(v53);
      else
        --v53[2];
    }
    v54 = *(_QWORD *)(*(_QWORD *)&v2[3] + 8);
    v55 = *(_WORD *)(v54 + 28);
    if ((v55 & 0x10) == 0
      || (v55 & 0x110) == 0x110
      || *(_QWORD *)(*(_QWORD *)(v54 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x195419724);
    }
    v56 = *(PAL **)(v54 + 136);
    if (v56)
      ++*((_DWORD *)v56 + 2);
    v57 = *(_DWORD **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v56;
    if (v57)
    {
      if (v57[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v57 + 8))(v57);
        v56 = *(PAL **)(a1 + 104);
        if (v56)
        {
LABEL_103:
          v58 = (*(float (**)(PAL *, _QWORD))(*(_QWORD *)v56 + 168))(v56, 0);
          v60 = v58 / v59;
          if (v60 <= 1.0)
          {
            v50 = 48.0;
            v51 = (float)((float)((float)(v60 * 48.0) + -48.0) * 0.5)
                + (float)((float)((float)((float)(v60 * 48.0) + -48.0) * 0.5) + 48.0);
          }
          else
          {
            v51 = 48.0;
            v50 = (float)((float)((float)(48.0 / v60) + -48.0) * 0.5)
                + (float)((float)((float)((float)(48.0 / v60) + -48.0) * 0.5) + 48.0);
          }
          if (*(_QWORD *)(a1 + 104))
            goto LABEL_110;
        }
LABEL_109:
        if (!*v164)
        {
          v47 = 0.0;
          goto LABEL_155;
        }
LABEL_110:
        *(float *)(a1 + 16) = (float)(*(float *)(a1 + 56) * 0.5) - (float)(v51 * 0.5);
        *(_DWORD *)(a1 + 20) = 0;
        *(_QWORD *)(a1 + 24) = LODWORD(v51) | ((unint64_t)LODWORD(v50) << 32);
        v47 = v50 + 8.0;
        goto LABEL_155;
      }
      --v57[2];
    }
    if (v56)
      goto LABEL_103;
    goto LABEL_109;
  }
LABEL_82:
  v174[0] = *v45;
  {
    v28 = WebCore::contentSizeCategoryStorage(void)::contentSizeCategory;
    if (WebCore::contentSizeCategoryStorage(void)::contentSizeCategory)
    {
      WTF::StringImpl::operator NSString *();
      goto LABEL_122;
    }
  }
  else
  {
    WebCore::contentSizeCategoryStorage(void)::contentSizeCategory = 0;
  }
  objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass((PAL *)v28), "sharedApplication"), "preferredContentSizeCategory");
LABEL_122:
  v61 = *MEMORY[0x1E0CA8418];
  v180[0] = *MEMORY[0x1E0CA8418];
  v62 = *MEMORY[0x1E0CA8400];
  v176 = *MEMORY[0x1E0CA8400];
  v177 = (uint64_t)&unk_1E349D888;
  *(_QWORD *)v178 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v177, &v176, 1);
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v178, v180, 1);
  v63 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithTextStyleAndAttributes();
  v64 = CTFontCreateWithFontDescriptor(v63, 0.0, 0);
  if (v63)
    CFRelease(v63);
  v174[1] = *v46;
  v175[0] = v64;
  v65 = *(_QWORD *)(*(_QWORD *)&v2[14] + 328);
  if ((v65 & 0x8000000000000) != 0)
  {
    v76 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFLL);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 + 1, v76));
  }
  *(_QWORD *)v178 = v65;
  v179 = 0;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_((uint64_t *)v178, &v177);
  if (v179 != -1)
    ((void (*)(_QWORD *, BOOL *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v179])(v180, v178);
  if ((v2[15].i32[1] & 0xC00) != 0x800 || (*(_BYTE *)(*(_QWORD *)&v2[13] + 239) & 2) != 0)
  {
    v176 = v177;
  }
  else
  {
    WebCore::RenderStyle::colorResolvingCurrentColor(&v2[10], 5, 1, (WebCore::Color *)v178);
    if ((v177 & 0x8000000000000) != 0)
      v71 = *(float *)((v177 & 0xFFFFFFFFFFFFLL) + 0x10);
    else
      v71 = (float)v177 / 255.0;
    WebCore::Color::colorWithAlpha((uint64_t)v178, v71, &v176);
    if ((*(_QWORD *)v178 & 0x8000000000000) != 0)
    {
      v160 = (unsigned int *)(*(_QWORD *)v178 & 0xFFFFFFFFFFFFLL);
      do
      {
        v161 = __ldaxr(v160);
        v162 = v161 - 1;
      }
      while (__stlxr(v162, v160));
      if (!v162)
      {
        atomic_store(1u, v160);
        WTF::fastFree((WTF *)v160, v72);
      }
    }
    if ((v177 & 0x8000000000000) != 0)
    {
      v73 = (unsigned int *)(v177 & 0xFFFFFFFFFFFFLL);
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
      {
        atomic_store(1u, v73);
        WTF::fastFree((WTF *)v73, v72);
      }
    }
  }
  WebCore::cocoaColor((WebCore *)&v176, &v167);
  v67 = v46;
  if ((v176 & 0x8000000000000) != 0)
  {
    v157 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFLL);
    do
    {
      v158 = __ldaxr(v157);
      v159 = v158 - 1;
    }
    while (__stlxr(v159, v157));
    if (!v159)
    {
      atomic_store(1u, v157);
      WTF::fastFree((WTF *)v157, v66);
    }
  }
  v68 = v167;
  v175[1] = v167;
  v69 = (PAL *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v175, v174, 2);
  v70 = (NSDictionary *)v69;
  if (v68)
    CFRelease(v68);
  if (v64)
    CFRelease(v64);
  v46 = v67;
  {
    WebCore::contentSizeCategoryStorage(void)::contentSizeCategory = 0;
    v45 = (_QWORD *)MEMORY[0x1E0CA8188];
    goto LABEL_150;
  }
  v69 = (PAL *)WebCore::contentSizeCategoryStorage(void)::contentSizeCategory;
  v45 = (_QWORD *)MEMORY[0x1E0CA8188];
  if (!WebCore::contentSizeCategoryStorage(void)::contentSizeCategory)
  {
LABEL_150:
    objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass(v69), "sharedApplication"), "preferredContentSizeCategory");
    goto LABEL_151;
  }
  WTF::StringImpl::operator NSString *();
LABEL_151:
  v180[0] = v61;
  v176 = v62;
  v177 = (uint64_t)&unk_1E349D888;
  *(_QWORD *)v178 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v177, &v176, 1);
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v178, v180, 1);
  v78 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithTextStyleAndAttributes();
  v79 = CTFontCreateWithFontDescriptor(v78, 0.0, 0);
  if (v78)
    CFRelease(v78);
  WebCore::AttachmentLayout::buildWrappedLines((WebCore::AttachmentLayout *)a1, (WTF::String *)&v168, v79, v70, 2);
  if (v79)
    CFRelease(v79);
LABEL_155:
  v80 = v168;
  v81 = v168 && *((_DWORD *)v168 + 1) || v166 && *((_DWORD *)v166 + 1) || *(_BYTE *)(a1 + 132) != 0;
  v82 = *v45;
  v172[0] = *v45;
  {
    v56 = (PAL *)WebCore::contentSizeCategoryStorage(void)::contentSizeCategory;
    if (WebCore::contentSizeCategoryStorage(void)::contentSizeCategory)
    {
      WTF::StringImpl::operator NSString *();
      goto LABEL_167;
    }
  }
  else
  {
    WebCore::contentSizeCategoryStorage(void)::contentSizeCategory = 0;
  }
  objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass(v56), "sharedApplication"), "preferredContentSizeCategory");
LABEL_167:
  v83 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithTextStyle();
  v84 = CTFontCreateWithFontDescriptor(v83, 0.0, 0);
  v165 = v80;
  if (v83)
    CFRelease(v83);
  v85 = *v46;
  v172[1] = *v46;
  v173[0] = v84;
  {
    byte_1ECE88AB8 = 0;
    unk_1ECE88AC0 = 0u;
    unk_1ECE88AD0 = 0u;
    WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
    unk_1ECE88AB0 = 0;
  }
  v86 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v2[3] + 8) + 40) + 8);
  v87 = v2;
  if ((v2[5].i8[5] & 2) != 0)
  {
    v87 = (int32x2_t *)v2[4];
    if (v87)
      v87 = (int32x2_t *)v87[1];
  }
  v88 = (const WebCore::RenderStyle *)&v87[10];
  v89 = *((_QWORD *)v86 + 66);
  if (v89
    && (v90 = *(_QWORD *)(v89 + 8)) != 0
    && (v91 = *(_QWORD *)(v90 + 24)) != 0
    && (v92 = *(_QWORD *)(v91 + 8)) != 0)
  {
    v93 = (*(_DWORD *)v92)++;
    v94 = *(unsigned __int8 *)(v92 + 450);
    if (v93)
    {
      *(_DWORD *)v92 = v93;
      if (!v94)
        goto LABEL_180;
      goto LABEL_178;
    }
    WebCore::Page::~Page(v92);
    WTF::fastFree(v105, v106);
    if (v94)
LABEL_178:
      v94 = 2;
  }
  else
  {
    v94 = 0;
  }
LABEL_180:
  if (WebCore::Document::useDarkAppearance(v86, v88))
    v94 |= 4u;
  v95 = *((_QWORD *)v86 + 66);
  if (v95)
  {
    v96 = *(_QWORD *)(v95 + 8);
    if (v96)
    {
      v97 = *(_QWORD *)(v96 + 24);
      if (v97)
      {
        v98 = *(_QWORD *)(v97 + 8);
        if (v98)
        {
          v99 = (*(_DWORD *)v98)++;
          v100 = *(unsigned __int8 *)(v98 + 451);
          if (v99)
          {
            *(_DWORD *)v98 = v99;
            if (!v100)
              goto LABEL_188;
          }
          else
          {
            WebCore::Page::~Page(v98);
            WTF::fastFree(v107, v108);
            if (!v100)
              goto LABEL_188;
          }
          v94 |= 8u;
        }
      }
    }
  }
LABEL_188:
  (*(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t, _QWORD))(WebCore::RenderTheme::singleton(void)::theme
                                                                           + 272))(v180, &WebCore::RenderTheme::singleton(void)::theme, 209, v94);
  WebCore::cocoaColor((WebCore *)v180, v178);
  v102 = (id)CFMakeCollectable(*(CFTypeRef *)v178);
  *(_QWORD *)v178 = 0;
  if ((v180[0] & 0x8000000000000) != 0)
  {
    v151 = (unsigned int *)(v180[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v152 = __ldaxr(v151);
      v153 = v152 - 1;
    }
    while (__stlxr(v153, v151));
    if (!v153)
    {
      atomic_store(1u, v151);
      WTF::fastFree((WTF *)v151, v101);
    }
  }
  v173[1] = v102;
  v103 = (PAL *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v173, v172, 2);
  v104 = (NSDictionary *)v103;
  if (v84)
    CFRelease(v84);
  {
    v103 = (PAL *)WebCore::contentSizeCategoryStorage(void)::contentSizeCategory;
    if (WebCore::contentSizeCategoryStorage(void)::contentSizeCategory)
    {
      WTF::StringImpl::operator NSString *();
      goto LABEL_202;
    }
  }
  else
  {
    WebCore::contentSizeCategoryStorage(void)::contentSizeCategory = 0;
  }
  objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass(v103), "sharedApplication"), "preferredContentSizeCategory");
LABEL_202:
  v109 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithTextStyle();
  v110 = CTFontCreateWithFontDescriptor(v109, 0.0, 0);
  if (v109)
    CFRelease(v109);
  if (v81)
    v111 = 1;
  else
    v111 = 2;
  WebCore::AttachmentLayout::buildWrappedLines((WebCore::AttachmentLayout *)a1, (WTF::String *)&v169, v110, v104, v111);
  if (v110)
    CFRelease(v110);
  v170[0] = v82;
  {
    v112 = (PAL *)WebCore::contentSizeCategoryStorage(void)::contentSizeCategory;
    if (WebCore::contentSizeCategoryStorage(void)::contentSizeCategory)
    {
      WTF::StringImpl::operator NSString *();
      goto LABEL_214;
    }
  }
  else
  {
    WebCore::contentSizeCategoryStorage(void)::contentSizeCategory = 0;
  }
  objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass(v112), "sharedApplication"), "preferredContentSizeCategory");
LABEL_214:
  v113 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithTextStyle();
  v114 = CTFontCreateWithFontDescriptor(v113, 0.0, 0);
  if (v113)
    CFRelease(v113);
  v170[1] = v85;
  v171[0] = v114;
  {
    byte_1ECE88AB8 = 0;
    unk_1ECE88AC0 = 0u;
    unk_1ECE88AD0 = 0u;
    WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
    unk_1ECE88AB0 = 0;
  }
  v115 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v2[3] + 8) + 40) + 8);
  if ((v2[5].i8[5] & 2) != 0)
  {
    v138 = v2[4];
    if (v138)
      v2 = *(int32x2_t **)(*(_QWORD *)&v138 + 8);
    else
      v2 = 0;
  }
  v116 = (const WebCore::RenderStyle *)&v2[10];
  v117 = *((_QWORD *)v115 + 66);
  if (v117
    && (v118 = *(_QWORD *)(v117 + 8)) != 0
    && (v119 = *(_QWORD *)(v118 + 24)) != 0
    && (v120 = *(_QWORD *)(v119 + 8)) != 0)
  {
    v121 = (*(_DWORD *)v120)++;
    v122 = *(unsigned __int8 *)(v120 + 450);
    if (v121)
    {
      *(_DWORD *)v120 = v121;
      if (!v122)
        goto LABEL_227;
      goto LABEL_225;
    }
    WebCore::Page::~Page(v120);
    WTF::fastFree(v134, v135);
    if (v122)
LABEL_225:
      v122 = 2;
  }
  else
  {
    v122 = 0;
  }
LABEL_227:
  if (WebCore::Document::useDarkAppearance(v115, v116))
    v122 |= 4u;
  v123 = *((_QWORD *)v115 + 66);
  if (!v123)
  {
    v125 = v166;
    goto LABEL_235;
  }
  v124 = *(_QWORD *)(v123 + 8);
  v125 = v166;
  if (v124)
  {
    v126 = *(_QWORD *)(v124 + 24);
    if (v126)
    {
      v127 = *(_QWORD *)(v126 + 8);
      if (v127)
      {
        v128 = (*(_DWORD *)v127)++;
        v129 = *(unsigned __int8 *)(v127 + 451);
        if (v128)
        {
          *(_DWORD *)v127 = v128;
          if (!v129)
            goto LABEL_235;
        }
        else
        {
          WebCore::Page::~Page(v127);
          WTF::fastFree(v136, v137);
          if (!v129)
            goto LABEL_235;
        }
        v122 |= 8u;
      }
    }
  }
LABEL_235:
  (*(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t, _QWORD))(WebCore::RenderTheme::singleton(void)::theme
                                                                           + 272))(v180, &WebCore::RenderTheme::singleton(void)::theme, 209, v122);
  WebCore::cocoaColor((WebCore *)v180, v178);
  v131 = (id)CFMakeCollectable(*(CFTypeRef *)v178);
  *(_QWORD *)v178 = 0;
  if ((v180[0] & 0x8000000000000) != 0)
  {
    v154 = (unsigned int *)(v180[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v155 = __ldaxr(v154);
      v156 = v155 - 1;
    }
    while (__stlxr(v156, v154));
    v125 = v166;
    if (!v156)
    {
      atomic_store(1u, v154);
      WTF::fastFree((WTF *)v154, v130);
    }
  }
  v171[1] = v131;
  v132 = (PAL *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v171, v170, 2);
  v133 = v132;
  if (v114)
    CFRelease(v114);
  {
    v132 = (PAL *)WebCore::contentSizeCategoryStorage(void)::contentSizeCategory;
    if (WebCore::contentSizeCategoryStorage(void)::contentSizeCategory)
    {
      WTF::StringImpl::operator NSString *();
      goto LABEL_251;
    }
  }
  else
  {
    WebCore::contentSizeCategoryStorage(void)::contentSizeCategory = 0;
  }
  objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass(v132), "sharedApplication"), "preferredContentSizeCategory");
LABEL_251:
  v139 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithTextStyle();
  v141 = CTFontCreateWithFontDescriptor(v139, 0.0, 0);
  if (v139)
    CFRelease(v139);
  if (v125 && *((_DWORD *)v125 + 1))
  {
    v149 = (const __CFAttributedString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:attributes:", WTF::StringImpl::operator NSString *(), v133);
    v150 = CTLineCreateWithAttributedString(v149);
    WebCore::AttachmentLayout::addLine((WebCore::AttachmentLayout *)a1, v141, v150, 1);
    if (v150)
      CFRelease(v150);
    if (v149)
      CFRelease(v149);
  }
  if (v141)
    CFRelease(v141);
  v142 = *(unsigned int *)(a1 + 164);
  if ((_DWORD)v142)
  {
    v143 = 48 * v142;
    v144 = (float *)(*(_QWORD *)(a1 + 152) + 12);
    do
    {
      v145 = v47;
      *(v144 - 2) = v145;
      v146 = *v144;
      v144 += 12;
      v47 = v47 + v146 + 8.0;
      v143 -= 48;
    }
    while (v143);
  }
  *(double *)(a1 + 168) = (float)(*(float *)(a1 + 60) * 0.5) + (v47 + -8.0) * -0.5;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
      WTF::StringImpl::destroy(v125, v140);
    else
      *(_DWORD *)v125 -= 2;
  }
  if (v165)
  {
    if (*(_DWORD *)v165 == 2)
      WTF::StringImpl::destroy(v165, v140);
    else
      *(_DWORD *)v165 -= 2;
  }
  v147 = v169;
  v169 = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
      WTF::StringImpl::destroy(v147, v140);
    else
      *(_DWORD *)v147 -= 2;
  }
  return a1;
}

void sub_19541A238(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD **a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  const void *v29;
  const void *v30;
  const void *v31;
  uint64_t v33;
  uint64_t v34;
  const void **v35;
  const void *v36;
  const void *v37;
  WTF *v38;
  WTF *v39;
  _DWORD *v40;
  _DWORD *v41;

  if (v31)
  {
    CFRelease(v31);
    if (!v29)
    {
LABEL_3:
      if (!v30)
        goto LABEL_8;
LABEL_7:
      CFRelease(v30);
LABEL_8:
      if (*(_DWORD *)a11 == 2)
        WTF::StringImpl::destroy(a11, a2);
      else
        *(_DWORD *)a11 -= 2;
      if (a14)
      {
        if (*(_DWORD *)a14 == 2)
          WTF::StringImpl::destroy(a14, a2);
        else
          *(_DWORD *)a14 -= 2;
      }
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      v33 = *(unsigned int *)(v28 + 164);
      if ((_DWORD)v33)
      {
        v34 = 48 * v33;
        v35 = (const void **)(*(_QWORD *)(v28 + 152) + 40);
        do
        {
          v36 = *v35;
          *v35 = 0;
          if (v36)
            CFRelease(v36);
          v37 = *(v35 - 1);
          *(v35 - 1) = 0;
          if (v37)
            CFRelease(v37);
          v35 += 6;
          v34 -= 48;
        }
        while (v34);
      }
      v38 = *(WTF **)(v28 + 152);
      if (v38)
      {
        *(_QWORD *)(v28 + 152) = 0;
        *(_DWORD *)(v28 + 160) = 0;
        WTF::fastFree(v38, a2);
      }
      v39 = *(WTF **)(v28 + 112);
      if (v39)
      {
        *(_QWORD *)(v28 + 112) = 0;
        *(_DWORD *)(v28 + 120) = 0;
        WTF::fastFree(v39, a2);
      }
      v40 = *(_DWORD **)(v28 + 104);
      *(_QWORD *)(v28 + 104) = 0;
      if (v40)
      {
        if (v40[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
        else
          --v40[2];
      }
      v41 = *a9;
      *a9 = 0;
      if (v41)
      {
        if (v41[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
        else
          --v41[2];
      }
      _Unwind_Resume(exception_object);
    }
  }
  else if (!v29)
  {
    goto LABEL_3;
  }
  CFRelease(v29);
  if (!v30)
    goto LABEL_8;
  goto LABEL_7;
}

void WebCore::AttachmentLayout::buildWrappedLines(WebCore::AttachmentLayout *this, WTF::String *a2, const __CTFont *a3, NSDictionary *a4, int a5)
{
  id v10;
  const __CFString *v11;
  const __CTFramesetter *v12;
  CGSize v13;
  const __CTFrame *Frame;
  const __CFArray *Lines;
  unint64_t Count;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  CFIndex v26;
  CFIndex i;
  const __CTLine *ValueAtIndex;
  const __CTLine *v29;
  CFIndex location;
  uint64_t v31;
  const CGPath *v32;
  const __CTFrame *v33;
  const __CFAttributedString *v34;
  const __CTLine *v35;
  const __CFArray *v36;
  const __CTLine *v37;
  const __CTLine *TruncatedLine;
  const CGPath *cf;
  const __CTFramesetter *framesetter;
  const __CFAttributedString *v41;
  CFRange fitRange;
  CFRange v43;
  CFRange v44;
  CFRange v45;
  CGSize v46;
  CGRect v47;
  CGRect v48;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return;
  v10 = objc_alloc(MEMORY[0x1E0CB3498]);
  if (*(_QWORD *)a2)
    v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v11 = &stru_1E3487BC0;
  v41 = (const __CFAttributedString *)objc_msgSend(v10, "initWithString:attributes:", v11, a4);
  v12 = CTFramesetterCreateWithAttributedString(v41);
  v46.width = *((CGFloat *)this + 1);
  v46.height = 1.79769313e308;
  v43.location = 0;
  v43.length = 0;
  framesetter = v12;
  v13 = CTFramesetterSuggestFrameSizeWithConstraints(v12, v43, 0, v46, &fitRange);
  v47.size.width = v13.width;
  v47.size.height = v13.height;
  v47.origin.x = 0.0;
  v47.origin.y = 0.0;
  cf = CGPathCreateWithRect(v47, 0);
  Frame = CTFramesetterCreateFrame(v12, fitRange, cf, 0);
  Lines = CTFrameGetLines(Frame);
  Count = CFArrayGetCount(Lines);
  v17 = Count;
  if (Count)
  {
    v18 = *((unsigned int *)this + 31);
    if (Count > v18)
    {
      v19 = *((unsigned int *)this + 30);
      if (Count > v19)
      {
        v20 = v19 + (v19 >> 2);
        if (v20 >= 0x10)
          v21 = v20 + 1;
        else
          v21 = 16;
        if (v21 <= Count)
          v22 = Count;
        else
          v22 = v21;
        if (v22 >> 28)
        {
          __break(0xC471u);
          return;
        }
        v23 = (void *)*((_QWORD *)this + 14);
        v24 = (void *)WTF::fastMalloc((WTF *)(16 * v22));
        *((_DWORD *)this + 30) = v22;
        *((_QWORD *)this + 14) = v24;
        memcpy(v24, v23, 16 * v18);
        if (v23)
        {
          if (*((void **)this + 14) == v23)
          {
            *((_QWORD *)this + 14) = 0;
            *((_DWORD *)this + 30) = 0;
          }
          WTF::fastFree((WTF *)v23, v25);
        }
      }
    }
    *((_DWORD *)this + 31) = v17;
    v44.location = 0;
    v44.length = 0;
    CTFrameGetLineOrigins(Frame, v44, *((CGPoint **)this + 14));
    v26 = v17 >= (a5 - 1) ? (a5 - 1) : v17;
    if (v26 < 1)
    {
      v26 = 0;
    }
    else
    {
      for (i = 0; i != v26; ++i)
      {
        ValueAtIndex = (const __CTLine *)CFArrayGetValueAtIndex(Lines, i);
        WebCore::AttachmentLayout::addLine(this, a3, ValueAtIndex, 0);
      }
    }
    if (v26 != v17)
    {
      v29 = (const __CTLine *)CFArrayGetValueAtIndex(Lines, v26);
      location = CTLineGetStringRange(v29).location;
      v31 = -[__CFAttributedString length](v41, "length");
      v48.size.width = 1.79769313e308;
      v48.origin.x = 0.0;
      v48.origin.y = 0.0;
      v48.size.height = 1.79769313e308;
      v32 = CGPathCreateWithRect(v48, 0);
      v45.length = v31 - location;
      v45.location = location;
      v33 = CTFramesetterCreateFrame(framesetter, v45, v32, 0);
      v34 = (const __CFAttributedString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:attributes:", CFSTR("…"), a4);
      v35 = CTLineCreateWithAttributedString(v34);
      v36 = CTFrameGetLines(v33);
      v37 = (const __CTLine *)CFArrayGetValueAtIndex(v36, 0);
      TruncatedLine = CTLineCreateTruncatedLine(v37, *((double *)this + 1), kCTLineTruncationMiddle, v35);
      if (!TruncatedLine)
      {
        if (v37)
        {
          CFRetain(v37);
          TruncatedLine = v37;
        }
        else
        {
          TruncatedLine = 0;
        }
      }
      WebCore::AttachmentLayout::addLine(this, a3, TruncatedLine, 0);
      if (TruncatedLine)
      {
        CFRelease(TruncatedLine);
        if (!v35)
        {
LABEL_34:
          if (!v34)
          {
LABEL_36:
            if (v33)
              CFRelease(v33);
            if (v32)
              CFRelease(v32);
            goto LABEL_40;
          }
LABEL_35:
          CFRelease(v34);
          goto LABEL_36;
        }
      }
      else if (!v35)
      {
        goto LABEL_34;
      }
      CFRelease(v35);
      if (!v34)
        goto LABEL_36;
      goto LABEL_35;
    }
  }
LABEL_40:
  if (Frame)
    CFRelease(Frame);
  if (cf)
    CFRelease(cf);
  if (framesetter)
    CFRelease(framesetter);
  if (v41)
    CFRelease(v41);
}

void sub_19541A8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, CFTypeRef a11, CFTypeRef a12)
{
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  if (v16)
  {
    CFRelease(v16);
    if (!v14)
    {
LABEL_3:
      if (!v15)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  CFRelease(v14);
  if (!v15)
  {
LABEL_4:
    if (!v12)
    {
LABEL_10:
      if (v13)
        CFRelease(v13);
      if (cf)
        CFRelease(cf);
      if (a11)
        CFRelease(a11);
      if (a12)
        CFRelease(a12);
      _Unwind_Resume(exception_object);
    }
LABEL_9:
    CFRelease(v12);
    goto LABEL_10;
  }
LABEL_8:
  CFRelease(v15);
  if (!v12)
    goto LABEL_10;
  goto LABEL_9;
}

void WebCore::AttachmentLayout::addLine(WebCore::AttachmentLayout *this, const __CTFont *a2, CTLineRef line, int a4)
{
  double y;
  double width;
  double height;
  double TrailingWhitespaceWidth;
  double v12;
  double v13;
  double v14;
  float v15;
  double v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  const void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  CFTypeRef v33;
  CFTypeRef v34;
  __int128 v35;
  __int128 v36;
  CFTypeRef cf[2];
  CGRect BoundsWithOptions;

  BoundsWithOptions = CTLineGetBoundsWithOptions(line, *((unsigned __int8 *)this + 88));
  y = BoundsWithOptions.origin.y;
  width = BoundsWithOptions.size.width;
  height = BoundsWithOptions.size.height;
  TrailingWhitespaceWidth = CTLineGetTrailingWhitespaceWidth(line);
  v12 = 0.0;
  if (*((_BYTE *)this + 88))
    v12 = y;
  v13 = height + v12;
  v14 = ceil(v13);
  v15 = *(float *)this;
  v36 = 0u;
  *(_OWORD *)cf = 0u;
  if (a4)
    v16 = v13;
  else
    v16 = v14;
  v35 = 0uLL;
  if (a2)
    CFRetain(a2);
  cf[1] = a2;
  if (line)
    CFRetain(line);
  cf[0] = line;
  v17 = (uint64_t *)((char *)this + 152);
  v18 = *((_DWORD *)this + 40);
  v19 = *((unsigned int *)this + 41);
  *(float *)&v20 = (float)(v15 * 0.5) + (width - TrailingWhitespaceWidth) * -0.5;
  *(float *)&v21 = width - TrailingWhitespaceWidth;
  *(_QWORD *)&v35 = v20;
  *(float *)&v22 = v16;
  *((_QWORD *)&v35 + 1) = __PAIR64__(v22, v21);
  if ((_DWORD)v19 == v18)
  {
    v23 = WTF::Vector<WebCore::AttachmentLayout::LabelLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, v19 + 1, (unint64_t)&v35);
    v24 = *((_DWORD *)this + 41);
    v25 = *((_QWORD *)this + 19);
    v26 = v25 + 48 * v24;
    v27 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)v26 = *(_OWORD *)v23;
    *(_OWORD *)(v26 + 16) = v27;
    v28 = *(const void **)(v23 + 32);
    *(_QWORD *)(v26 + 32) = v28;
    if (v28)
      CFRetain(v28);
    v29 = *(const void **)(v23 + 40);
    *(_QWORD *)(v25 + 48 * v24 + 40) = v29;
    if (v29)
      CFRetain(v29);
  }
  else
  {
    v30 = *v17;
    v31 = *v17 + 48 * v19;
    v32 = v36;
    *(_OWORD *)v31 = v35;
    *(_OWORD *)(v31 + 16) = v32;
    *(_QWORD *)(v31 + 32) = line;
    if (line)
      CFRetain(line);
    *(_QWORD *)(v30 + 48 * v19 + 40) = a2;
    if (a2)
      CFRetain(a2);
  }
  ++*((_DWORD *)this + 41);
  v33 = cf[1];
  cf[1] = 0;
  if (v33)
    CFRelease(v33);
  v34 = cf[0];
  cf[0] = 0;
  if (v34)
    CFRelease(v34);
}

void sub_19541AB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, CFTypeRef cf)
{
  const void **v14;
  const void *v16;

  v16 = *v14;
  *v14 = 0;
  if (v16)
    CFRelease(v16);
  if (cf)
    CFRelease(cf);
  if (a13)
    CFRelease(a13);
  _Unwind_Resume(exception_object);
}

uint64_t *WebCore::RenderThemeCocoa::singleton(WebCore::RenderThemeCocoa *this)
{
  {
    byte_1ECE88AB8 = 0;
    unk_1ECE88AC0 = 0u;
    unk_1ECE88AD0 = 0u;
    WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
    unk_1ECE88AB0 = 0;
  }
  return &WebCore::RenderTheme::singleton(void)::theme;
}

uint64_t *WebCore::RenderTheme::singleton(WebCore::RenderTheme *this)
{
  {
    byte_1ECE88AB8 = 0;
    unk_1ECE88AC0 = 0u;
    unk_1ECE88AD0 = 0u;
    WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
    unk_1ECE88AB0 = 0;
  }
  return &WebCore::RenderTheme::singleton(void)::theme;
}

uint64_t WebCore::RenderThemeCocoa::purgeCaches(WebCore::RenderThemeCocoa *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  if (v3 && *(_DWORD *)v3 == 2)
  {
    *((_QWORD *)this + 3) = 0;
    WTF::StringImpl::destroy(v3, a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  if (v4 && *(_DWORD *)v4 == 2)
  {
    *((_QWORD *)this + 4) = 0;
    WTF::StringImpl::destroy(v4, a2);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  if (v5 && *(_DWORD *)v5 == 2)
  {
    *((_QWORD *)this + 5) = 0;
    WTF::StringImpl::destroy(v5, a2);
  }
  return WebCore::RenderTheme::purgeCaches(this, a2);
}

BOOL WebCore::RenderThemeCocoa::shouldHaveCapsLockIndicator(WebCore::RenderThemeCocoa *this, const WebCore::HTMLInputElement *a2)
{
  return *(_DWORD *)(*((_QWORD *)a2 + 30) + 12) == 2048;
}

uint64_t WebCore::RenderThemeCocoa::pictureFrameColor(WebCore::RenderThemeCocoa *this, const WebCore::RenderObject *a2)
{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
  if ((*((_BYTE *)a2 + 45) & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    if (v6)
      a2 = *(const WebCore::RenderObject **)(v6 + 8);
    else
      a2 = 0;
  }
  v4 = WebCore::Document::styleColorOptions(v3, (const WebCore::RenderObject *)((char *)a2 + 80));
  return (*(uint64_t (**)(WebCore::RenderThemeCocoa *, uint64_t, uint64_t))(*(_QWORD *)this + 272))(this, 188, v4);
}

uint64_t WebCore::RenderThemeCocoa::paintFileUploadIconDecorations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, id *a6, int a7)
{
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  WebCore::GraphicsContext *v30;
  void *v31;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  __int128 v40;
  int v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v43 = *(_QWORD *)(a4 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 96))(v43, 1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 1088))(&v51, a1, a3);
  v13 = *(_DWORD *)a5;
  v12 = *(_DWORD *)(a5 + 4);
  v14 = *(_QWORD *)(a5 + 8);
  v15 = (v14 & 0xFFFFFFFF00000000) - 0x200000000;
  v16 = v15 & 0xFFFFFFFF00000000 | (v14 - 2);
  v42 = *(_DWORD *)a5 + 1;
  __asm { FMOV            V4.4S, #1.0 }
  if (a7)
  {
    v40 = _Q4;
    if ((*(_BYTE *)(a3 + 45) & 2) != 0)
    {
      v33 = *(_QWORD *)(a3 + 32);
      if (v33)
        a3 = *(_QWORD *)(v33 + 8);
      else
        a3 = 0;
    }
    WebCore::RenderStyle::visitedDependentColor(a3 + 80, 61, 0, &v50);
    v22 = *(_QWORD *)(a4 + 80);
    v44 = (float)v13;
    v45 = (float)v12;
    v46 = (float)(v14 - 2);
    v47 = (float)SHIDWORD(v15);
    v48 = v40;
    v49 = v40;
    (*(void (**)(uint64_t, float *, uint64_t *, uint64_t))(*(_QWORD *)v22 + 264))(v22, &v44, &v51, 1);
    v23 = (v14 & 0xFFFFFFFF00000000) - 0x400000000;
    v24 = *(_QWORD *)(a4 + 80);
    v44 = (float)v42;
    v45 = (float)(v12 + 1);
    v46 = (float)(v14 - 4);
    v47 = (float)SHIDWORD(v23);
    (*(void (**)(uint64_t, float *, uint64_t *))(*(_QWORD *)v24 + 224))(v24, &v44, &v50);
    v26 = (v14 - 4) | v23;
    v27 = v13 + 3;
    v28 = v12 + 3;
    _Q4 = v40;
    if ((v50 & 0x8000000000000) != 0)
    {
      v37 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFLL);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      _Q4 = v40;
      if (!v39)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, v25);
        _Q4 = v40;
      }
    }
    v13 += 2;
    v12 += 2;
  }
  else
  {
    v26 = ((v14 & 0xFFFFFFFF00000000) - 0x200000000) & 0xFFFFFFFF00000000 | (v14 - 2);
    v16 = *(_QWORD *)(a5 + 8);
    v27 = *(_DWORD *)a5 + 1;
    v28 = v12 + 1;
  }
  v29 = *(_QWORD *)(a4 + 80);
  v44 = (float)v13;
  v45 = (float)v12;
  v46 = (float)(int)v16;
  v47 = (float)SHIDWORD(v16);
  v48 = _Q4;
  v49 = _Q4;
  (*(void (**)(uint64_t, float *, uint64_t *, uint64_t))(*(_QWORD *)v29 + 264))(v29, &v44, &v51, 1);
  v30 = *(WebCore::GraphicsContext **)(a4 + 80);
  v44 = (float)v27;
  v45 = (float)v28;
  v46 = (float)(int)v26;
  v47 = (float)SHIDWORD(v26);
  WebCore::Icon::paint(a6, v30, (const WebCore::FloatRect *)&v44);
  if ((v51 & 0x8000000000000) != 0)
  {
    v34 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFLL);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, v31);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 104))(v43, 1);
}

void sub_19541AFF0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  if ((a21 & 0x8000000000000) != 0)
  {
    v23 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  v26 = *(_QWORD *)(v21 - 88);
  if ((v26 & 0x8000000000000) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, a2);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a14 + 104))(a14, 1);
  _Unwind_Resume(a1);
}

double WebCore::RenderThemeCocoa::animationRepeatIntervalForProgressBar(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 528)
                                         + 8)
                             + 24)
                 + 8);
  if ((*(_BYTE *)(v2 + 1168) & 2) != 0)
    return 10.0;
  v3 = *(_QWORD *)(v2 + 316);
  if ((v3 & 0xFF00000000) == 0 || (_DWORD)v3 == 60)
    return dbl_1968DE990[(*(_BYTE *)(v2 + 1168) & 0xD) == 0];
  if ((*(_QWORD *)(*(_QWORD *)(v2 + 112) + 688) & 0x80000000) != 0 && v3 >= 0x3D)
    LODWORD(v3) = (float)((float)v3 / (float)(v3 / 0x3C));
  result = 1.0 / (double)v3;
  if ((*(_BYTE *)(v2 + 1168) & 0xD) != 0)
    return result + result;
  return result;
}

int *WebCore::RenderThemeCocoa::adjustApplePayButtonStyle(WebCore::RenderThemeCocoa *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  int *result;
  unsigned int v5;
  unsigned int v6;
  __int16 v7;
  char v8;
  unsigned int v9;
  __int16 v10;
  char v11;

  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 636) & 0xF0000000) != 0)
    v6 = 140;
  else
    v6 = 100;
  v7 = 4;
  v8 = 0;
  WebCore::RenderStyle::setMinWidth((uint64_t)a2, (WebCore::Length *)&v6);
  if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v6);
  }
  v6 = 30;
  v7 = 4;
  v8 = 0;
  result = WebCore::RenderStyle::setMinHeight((uint64_t)a2, (WebCore::Length *)&v6);
  if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v6);
  }
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 24) + 4) & 0xF) == 0)
  {
    *(float *)&v5 = PAL::get_PassKitCore_PKApplePayButtonDefaultCornerRadius((PAL *)result);
    v6 = v5;
    v7 = 4;
    v8 = 1;
    v9 = v5;
    v10 = 4;
    v11 = 1;
    result = WebCore::RenderStyle::setBorderRadius((uint64_t)a2, (uint64_t)&v6);
    if (v10 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v9);
    }
    if (v7 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v6);
    }
  }
  return result;
}

void sub_19541B33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, char a10, unsigned int a11, char a12)
{
  if (a12 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a11);
  }
  if (a10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a9);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WebCore::RenderStyle::setBorderRadius(uint64_t a1, uint64_t a2)
{
  unsigned int v5;
  unsigned __int8 v6;
  char v7;
  char v8;
  unsigned int v9;
  unsigned __int8 v10;
  char v11;
  char v12;

  v5 = 0;
  v8 = 0;
  v6 = *(_BYTE *)(a2 + 4);
  v7 = *(_BYTE *)(a2 + 5);
  if (v6 - 2 >= 9)
  {
    if (v6 == 11)
    {
      v5 = *(_DWORD *)a2;
      WebCore::Length::ref((int *)&v5);
    }
  }
  else
  {
    v8 = *(_BYTE *)(a2 + 6);
    v5 = *(_DWORD *)a2;
  }
  v9 = 0;
  v12 = 0;
  v10 = *(_BYTE *)(a2 + 12);
  v11 = *(_BYTE *)(a2 + 13);
  if (v10 - 2 >= 9)
  {
    if (v10 == 11)
    {
      v9 = *(_DWORD *)(a2 + 8);
      WebCore::Length::ref((int *)&v9);
    }
  }
  else
  {
    v12 = *(_BYTE *)(a2 + 14);
    v9 = *(_DWORD *)(a2 + 8);
  }
  WebCore::RenderStyle::setBorderTopLeftRadius(a1, (WebCore::Length *)&v5);
  if (v10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v9);
  }
  if (v6 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v5);
  }
  v5 = 0;
  v8 = 0;
  v6 = *(_BYTE *)(a2 + 4);
  v7 = *(_BYTE *)(a2 + 5);
  if (v6 - 2 >= 9)
  {
    if (v6 == 11)
    {
      v5 = *(_DWORD *)a2;
      WebCore::Length::ref((int *)&v5);
    }
  }
  else
  {
    v8 = *(_BYTE *)(a2 + 6);
    v5 = *(_DWORD *)a2;
  }
  v9 = 0;
  v12 = 0;
  v10 = *(_BYTE *)(a2 + 12);
  v11 = *(_BYTE *)(a2 + 13);
  if (v10 - 2 >= 9)
  {
    if (v10 == 11)
    {
      v9 = *(_DWORD *)(a2 + 8);
      WebCore::Length::ref((int *)&v9);
    }
  }
  else
  {
    v12 = *(_BYTE *)(a2 + 14);
    v9 = *(_DWORD *)(a2 + 8);
  }
  WebCore::RenderStyle::setBorderTopRightRadius(a1, (WebCore::Length *)&v5);
  if (v10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v9);
  }
  if (v6 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v5);
  }
  v5 = 0;
  v8 = 0;
  v6 = *(_BYTE *)(a2 + 4);
  v7 = *(_BYTE *)(a2 + 5);
  if (v6 - 2 >= 9)
  {
    if (v6 == 11)
    {
      v5 = *(_DWORD *)a2;
      WebCore::Length::ref((int *)&v5);
    }
  }
  else
  {
    v8 = *(_BYTE *)(a2 + 6);
    v5 = *(_DWORD *)a2;
  }
  v9 = 0;
  v12 = 0;
  v10 = *(_BYTE *)(a2 + 12);
  v11 = *(_BYTE *)(a2 + 13);
  if (v10 - 2 >= 9)
  {
    if (v10 == 11)
    {
      v9 = *(_DWORD *)(a2 + 8);
      WebCore::Length::ref((int *)&v9);
    }
  }
  else
  {
    v12 = *(_BYTE *)(a2 + 14);
    v9 = *(_DWORD *)(a2 + 8);
  }
  WebCore::RenderStyle::setBorderBottomLeftRadius(a1, (WebCore::Length *)&v5);
  if (v10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v9);
  }
  if (v6 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v5);
  }
  return WebCore::RenderStyle::setBorderBottomRightRadius(a1, (WebCore::Length *)a2);
}

void sub_19541B838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, char a10, unsigned int a11, char a12)
{
  if (a12 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a11);
  }
  if (a10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a9);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::RenderThemeCocoa::mediaControlsStyleSheet@<X0>(_QWORD *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  _QWORD *v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v2 = this;
  v4 = (WTF::StringImpl *)this[5];
  if (v4 && *((_DWORD *)v4 + 1))
    goto LABEL_7;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v6;
  this = (_QWORD *)v2[5];
  v2[5] = v6;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)this, v5);
      this = 0;
    }
    else
    {
      *(_DWORD *)this -= 2;
    }
    v4 = (WTF::StringImpl *)v2[5];
  }
  if (v4)
LABEL_7:
    *(_DWORD *)v4 += 2;
  *a2 = v4;
  return this;
}

WTF::StringImpl *WebCore::RenderThemeCocoa::mediaControlsScripts@<X0>(WebCore::RenderThemeCocoa *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  int v16;
  WTF::StringImpl *v17;

  v5 = *((_QWORD *)this + 3);
  if (!v5 || !*(_DWORD *)(v5 + 4))
  {
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithContentsOfFile:encoding:error:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class()), "pathForResource:ofType:", CFSTR("modern-media-controls-localized-strings"), CFSTR("js")), 4, 0);
    MEMORY[0x19AEA5508](&v17, v6);
    v7 = v17;
    v17 = 0;
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v7;
    if (v8)
    {
      v9 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 != 2)
      {
LABEL_4:
        *(_DWORD *)v8 = v9;
        goto LABEL_5;
      }
      WTF::StringImpl::destroy(v8, a2);
      v8 = v17;
      v17 = 0;
      if (v8)
      {
        v9 = *(_DWORD *)v8 - 2;
        if (*(_DWORD *)v8 != 2)
          goto LABEL_4;
        WTF::StringImpl::destroy(v8, a2);
      }
    }
  }
LABEL_5:
  v10 = *((_QWORD *)this + 4);
  if (!v10 || !*(_DWORD *)(v10 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = v17;
    v17 = 0;
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v11;
    if (v12)
    {
      v13 = *(_DWORD *)v12 - 2;
      if (*(_DWORD *)v12 != 2)
      {
LABEL_8:
        *(_DWORD *)v12 = v13;
        goto LABEL_9;
      }
      WTF::StringImpl::destroy(v12, a2);
      v12 = v17;
      v17 = 0;
      if (v12)
      {
        v13 = *(_DWORD *)v12 - 2;
        if (*(_DWORD *)v12 != 2)
          goto LABEL_8;
        WTF::StringImpl::destroy(v12, a2);
      }
    }
  }
LABEL_9:
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  if (v14)
    *(_DWORD *)v14 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 4);
  if (result)
    *(_DWORD *)result += 2;
  *(_QWORD *)a3 = a3 + 16;
  *(_DWORD *)(a3 + 8) = 2;
  if (v14)
    *(_DWORD *)v14 += 2;
  *(_QWORD *)(a3 + 16) = v14;
  if (result)
  {
    v16 = *(_DWORD *)result;
    *(_DWORD *)result += 2;
    *(_QWORD *)(a3 + 24) = result;
    *(_DWORD *)(a3 + 12) = 2;
    if (v16)
      *(_DWORD *)result = v16;
    else
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 12) = 2;
  }
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  return result;
}

void WebCore::RenderThemeCocoa::mediaControlsBase64StringForIconNameAndType(WebCore::RenderThemeCocoa *this, const WTF::String *a2, const WTF::String *a3)
{
  void *v5;
  void *v6;
  const __CFString *v7;
  const __CFString *v8;

  v5 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v6 = (void *)MEMORY[0x1E0C99D50];
  if (*(_QWORD *)a2)
    v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E3487BC0;
  if (*(_QWORD *)a3)
    v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v8 = &stru_1E3487BC0;
  objc_msgSend((id)objc_msgSend(v6, "dataWithContentsOfFile:", objc_msgSend(v5, "pathForResource:ofType:inDirectory:", v7, v8, CFSTR("modern-media-controls/images"))), "base64EncodedStringWithOptions:", 0);
  JUMPOUT(0x19AEA5508);
}

void WebCore::RenderThemeCocoa::mediaControlsFormattedStringForDuration(WebCore::RenderThemeCocoa *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  void *v6;
  void *v7;
  const void *v8;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    WebCore::localizedString(CFSTR("indefinite time"), a3);
  }
  else
  {
    v6 = (void *)*((_QWORD *)this + 6);
    if (!v6)
    {
      v7 = (void *)objc_opt_new();
      v8 = (const void *)*((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = v7;
      if (v8)
      {
        CFRelease(v8);
        v7 = (void *)*((_QWORD *)this + 6);
      }
      objc_msgSend(v7, "setUnitsStyle:", 3);
      objc_msgSend(*((id *)this + 6), "setAllowedUnits:", 224);
      objc_msgSend(*((id *)this + 6), "setFormattingContext:", 2);
      objc_msgSend(*((id *)this + 6), "setMaximumUnitCount:", 2);
      v6 = (void *)*((_QWORD *)this + 6);
    }
    MEMORY[0x19AEA5508](a3, objc_msgSend(v6, "stringFromTimeInterval:", a2));
  }
}

void sub_19541BD24(_Unwind_Exception *exception_object, int a2)
{
  NSException *v2;

  if (a2 == 1)
  {
    v2 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v2);
    objc_end_catch();
    __break(1u);
    JUMPOUT(0x19541BD48);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::RenderThemeCocoa::attachmentBaseline(WebCore::RenderThemeCocoa *this, int32x2_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  const void **v5;
  const void *v6;
  const void *v7;
  WTF *v8;
  WTF *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  WTF *v16;
  int v17;
  unsigned int v18;
  WTF *v19;
  int v20;
  unsigned int v21;

  WebCore::AttachmentLayout::AttachmentLayout((uint64_t)&v13, a2);
  v3 = v18;
  if (v21)
  {
    v4 = 48 * v21;
    v5 = (const void **)((char *)v19 + 40);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        CFRelease(v6);
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
        CFRelease(v7);
      v5 += 6;
      v4 -= 48;
    }
    while (v4);
  }
  v8 = v19;
  if (v19)
  {
    v19 = 0;
    v20 = 0;
    WTF::fastFree(v8, v2);
  }
  v9 = v16;
  if (v16)
  {
    v16 = 0;
    v17 = 0;
    WTF::fastFree(v9, v2);
  }
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  return v3;
}

void WebCore::RenderThemeCocoa::paintAttachmentText(WebCore::RenderThemeCocoa *this, WebCore::GraphicsContext *a2, WebCore::AttachmentLayout *a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CTFont *v8;
  double Size;
  WebCore::GraphicsContext *v10;
  uint64_t v11[2];
  __int16 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CGRect v29;

  v28 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  WebCore::DrawGlyphsRecorder::createInternalContext(v11);
  v11[1] = 0;
  v12 = 1;
  v13 = constinit_4;
  v14 = xmmword_1969F8630;
  v15 = xmmword_1969F8640;
  v16 = 0x11040000000000FFLL;
  v17 = 0;
  v18 = 0x11040000000000FFLL;
  v19 = 0;
  v20 = constinit_4;
  v21 = xmmword_1969F8630;
  v22 = xmmword_1969F8640;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  (*(void (**)(uint64_t, float))(*(_QWORD *)v11[0] + 680))(v11[0], 1.0);
  v5 = *((unsigned int *)a3 + 41);
  if ((_DWORD)v5)
  {
    v6 = *((_QWORD *)a3 + 19);
    v7 = 48 * v5;
    do
    {
      v8 = *(const __CTFont **)(v6 + 40);
      Size = CTFontGetSize(v8);
      v29.origin.x = *(float *)v6;
      v29.origin.y = *(float *)(v6 + 4);
      v29.size.width = *(float *)(v6 + 8);
      v29.size.height = *(float *)(v6 + 12);
      WebCore::DrawGlyphsRecorder::drawNativeText((WebCore::DrawGlyphsRecorder *)&v10, v8, Size, *(const __CTLine **)(v6 + 32), v29);
      v6 += 48;
      v7 -= 48;
    }
    while (v7);
  }
  WebCore::DrawGlyphsRecorder::~DrawGlyphsRecorder((WebCore::DrawGlyphsRecorder *)&v10, v4);
}

void sub_19541BF98(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::DrawGlyphsRecorder::~DrawGlyphsRecorder((WebCore::DrawGlyphsRecorder *)va, a2);
  _Unwind_Resume(a1);
}

void WebCore::RenderThemeCocoa::platformSpellingMarkerColor(char a1@<W1>, uint64_t *a2@<X8>)
{
  unsigned int v2;

  if ((a1 & 4) != 0)
    v2 = -645100289;
  else
    v2 = -1087357953;
  *a2 = bswap32(v2) | 0x1104000000000000;
}

void WebCore::RenderThemeCocoa::platformDictationAlternativesMarkerColor(char a1@<W1>, uint64_t *a2@<X8>)
{
  unsigned int v2;

  if ((a1 & 4) != 0)
    v2 = -637562584;
  else
    v2 = -1073776128;
  *a2 = bswap32(v2) | 0x1104000000000000;
}

void WebCore::RenderThemeCocoa::platformGrammarMarkerColor(char a1@<W1>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  char v12;
  char **v13;
  char *v14;

  v4 = atomic_load(&qword_1ECE81F98);
  if (v4 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&qword_1ECE81F98, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::RenderThemeCocoa::platformGrammarMarkerColor(WTF::OptionSet<WebCore::StyleColorOptions>)::$_0 &&>>);
  }
  if ((a1 & 4) != 0)
    v5 = -654311424;
  else
    v5 = -1090519040;
  if ((a1 & 4) != 0)
    v6 = 4915200;
  else
    v6 = 3276800;
  if ((a1 & 4) != 0)
    v7 = 55040;
  else
    v7 = 44800;
  if ((a1 & 4) != 0)
    v8 = 50;
  else
    v8 = 25;
  v9 = v6 | v8 | v5 | v7;
  if ((a1 & 4) != 0)
    v10 = -637562584;
  else
    v10 = -1073776128;
  if (_MergedGlobals_140)
    v11 = v10;
  else
    v11 = v9;
  *a2 = bswap32(v11) | 0x1104000000000000;
}

void WebCore::RenderThemeIOS::~RenderThemeIOS(WebCore::RenderThemeIOS *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E335C088;
  v3 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)this = off_1E3437478;
  v7 = *((_QWORD *)this + 1);
  if (v7)
    WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,WebCore::RenderTheme::ColorCache,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WebCore::RenderTheme::ColorCache>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::deallocateTable(v7, a2);
}

{
  WebCore::RenderThemeIOS::~RenderThemeIOS(this, a2);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::RenderThemeIOS::canCreateControlPartForRenderer(WebCore::RenderThemeIOS *this, const WebCore::RenderObject *a2)
{
  if ((*((_BYTE *)a2 + 45) & 2) != 0)
    a2 = *(const WebCore::RenderObject **)(*((_QWORD *)a2 + 4) + 8);
  return (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 148) & 0x1FC000) == 0x40000;
}

int *WebCore::RenderThemeIOS::adjustCheckboxStyle(WebCore::RenderThemeIOS *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  int *result;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  float v9;
  unsigned int v10;
  __int16 v11;
  char v12;

  result = WebCore::RenderThemeIOS::adjustMinimumIntrinsicSizeForAppearance(2, (uint64_t)a2);
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
  v6 = *(unsigned __int8 *)(v5 + 8);
  v7 = (v6 - 7) < 4 || v6 == 0;
  if (v7 || (v6 - 5) < 2 || !*(_BYTE *)(v5 + 16))
  {
    v8 = *((_QWORD *)a2 + 4);
    if (*(float *)(v8 + 204) >= 10.0)
      v9 = *(float *)(v8 + 204);
    else
      v9 = 10.0;
    v10 = LODWORD(v9);
    v11 = 4;
    v12 = 1;
    WebCore::RenderStyle::setWidth((uint64_t)a2, (WebCore::Length *)&v10);
    if (v11 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v10);
    }
    v10 = LODWORD(v9);
    v11 = 4;
    v12 = 1;
    result = (int *)WebCore::RenderStyle::setHeight((uint64_t)a2, (WebCore::Length *)&v10);
    if (v11 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v10);
    }
  }
  return result;
}

void sub_19541C344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int a10, char a11)
{
  if (a11 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a10);
  }
  _Unwind_Resume(exception_object);
}

int *WebCore::RenderThemeIOS::adjustMinimumIntrinsicSizeForAppearance(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  unsigned int v13;
  unsigned __int8 v14;
  char v15;
  char v16;
  unsigned int v17;
  unsigned __int8 v18;
  char v19;
  char v20;
  unsigned int v21;
  unsigned __int8 v22;
  char v23;
  char v24;
  unsigned int v25;
  unsigned __int8 v26;
  char v27;
  char v28;
  unsigned int v29;
  char v30;
  char v31;
  unsigned int v32;
  char v33;
  char v34;

  {
    WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
  }
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(v4 + 8);
  v21 = 0;
  v24 = 0;
  v22 = *(_BYTE *)(v5 + 24);
  v23 = *(_BYTE *)(v5 + 25);
  if (v22 - 2 >= 9)
  {
    if (v22 == 11)
    {
      v21 = *(_DWORD *)(v5 + 20);
      WebCore::Length::ref((int *)&v21);
      v4 = *(_QWORD *)(a2 + 8);
      v5 = *(_QWORD *)(v4 + 8);
    }
  }
  else
  {
    v24 = *(_BYTE *)(v5 + 26);
    v21 = *(_DWORD *)(v5 + 20);
  }
  v25 = 0;
  v28 = 0;
  v26 = *(_BYTE *)(v5 + 40);
  v27 = *(_BYTE *)(v5 + 41);
  if (v26 - 2 >= 9)
  {
    if (v26 == 11)
    {
      v25 = *(_DWORD *)(v5 + 36);
      WebCore::Length::ref((int *)&v25);
      v4 = *(_QWORD *)(a2 + 8);
    }
  }
  else
  {
    v28 = *(_BYTE *)(v5 + 42);
    v25 = *(_DWORD *)(v5 + 36);
  }
  v6 = *(_QWORD *)(v4 + 8);
  v13 = 0;
  v16 = 0;
  v14 = *(_BYTE *)(v6 + 8);
  v15 = *(_BYTE *)(v6 + 9);
  if (v14 - 2 >= 9)
  {
    if (v14 == 11)
    {
      v13 = *(_DWORD *)(v6 + 4);
      WebCore::Length::ref((int *)&v13);
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    }
  }
  else
  {
    v16 = *(_BYTE *)(v6 + 10);
    v13 = *(_DWORD *)(v6 + 4);
  }
  v17 = 0;
  v20 = 0;
  v18 = *(_BYTE *)(v6 + 16);
  v19 = *(_BYTE *)(v6 + 17);
  if (v18 - 2 >= 9)
  {
    if (v18 == 11)
    {
      v17 = *(_DWORD *)(v6 + 12);
      WebCore::Length::ref((int *)&v17);
    }
  }
  else
  {
    v20 = *(_BYTE *)(v6 + 18);
    v17 = *(_DWORD *)(v6 + 12);
  }
  result = WebCore::Theme::minimumControlSize((uint64_t)&WebCore::Theme::singleton(void)::theme, a1, (uint64_t)&v21, (uint64_t)&v13, (uint64_t)&v29);
  if (v18 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v17);
  }
  if (v14 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v13);
  }
  if (v26 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v25);
  }
  if (v22 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v21);
  }
  v8 = *(float *)&v29;
  if (!v31)
    v8 = (float)(int)v29;
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  if (*(_BYTE *)(v9 + 26))
    v10 = *(float *)(v9 + 20);
  else
    v10 = (float)*(int *)(v9 + 20);
  if (v8 > v10)
  {
    result = WebCore::RenderStyle::setMinWidth(a2, (WebCore::Length *)&v29);
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  }
  v11 = *(float *)&v32;
  if (!v34)
    v11 = (float)(int)v32;
  if (*(_BYTE *)(v9 + 42))
    v12 = *(float *)(v9 + 36);
  else
    v12 = (float)*(int *)(v9 + 36);
  if (v11 > v12)
    result = WebCore::RenderStyle::setMinHeight(a2, (WebCore::Length *)&v32);
  if (v33 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v32);
  }
  if (v30 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v29);
  }
  return result;
}

void sub_19541C818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, char a14, unsigned int a15, char a16)
{
  if (a16 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a15);
  }
  if (a14 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::RenderThemeIOS::baselinePosition(WebCore::RenderThemeIOS *this, const WebCore::RenderBox *a2)
{
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v3 = *((_DWORD *)a2 + 5);
  if ((v3 & 0x1000) != 0)
  {
    v8 = ((unsigned __int16)*((_DWORD *)a2 + 31) >> 13) - 1;
    if (v8 > 4)
      v9 = 0;
    else
      v9 = qword_1968DEB58[v8];
    result = (int)(float)((float)((float)((float)*((int *)a2 + 40) * 0.015625) * 0.5)
                                      + (float)((float)*((int *)a2 + v9 + 42) * 0.015625));
    if ((v3 & 0x1000) != 0)
      return result;
LABEL_11:
    v10 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 148);
    v11 = (v10 >> 14) & 0x7E;
    if (((v10 >> 14) & 0x7F) == 9)
      v12 = result - 5;
    else
      v12 = result;
    if (v11 == 2)
      return (result - 2);
    else
      return v12;
  }
  v4 = *((_DWORD *)a2 + 41);
  v5 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1080))(a2);
  v6 = v4 + v5;
  if (__OFADD__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  result = (v6 / 64);
  if ((*((_DWORD *)a2 + 5) & 0x1000) == 0)
    goto LABEL_11;
  return result;
}

uint64_t WebCore::RenderThemeIOS::isControlStyled(WebCore::RenderThemeIOS *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t result;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 32);
  v5 = (*(_DWORD *)(v4 + 148) >> 14) & 0x7F;
  if (v5 > 0x17)
    return WebCore::RenderTheme::isControlStyled(this, a2, a3);
  if (((1 << v5) & 0x188000) != 0)
    return WebCore::RenderStyle::borderAndBackgroundEqual(a2, a3) ^ 1;
  if (((1 << v5) & 0x410) == 0)
  {
    if (v5 == 23)
    {
      if (!*(_QWORD *)(v4 + 80))
      {
        v12 = *((_QWORD *)a2 + 2);
        return (v12 & 0x4000000000) != 0 || (v12 & 0xF00000000000) == 0x300000000000;
      }
      return 1;
    }
    return WebCore::RenderTheme::isControlStyled(this, a2, a3);
  }
  WebCore::RenderStyle::visitedDependentColor((uint64_t)a2, 61, 0, &v16);
  if ((v16 & 0x8000000000000) == 0)
  {
    if ((_BYTE)v16)
      goto LABEL_6;
    return 1;
  }
  v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
  if (*(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
  {
    v10 = 1;
    goto LABEL_24;
  }
LABEL_6:
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 16) + 8);
  if (*(_QWORD *)(v7 + 8))
  {
    do
    {
      v15 = *(_QWORD *)(v7 + 16);
      result = v15 != 0;
      if (v15)
        break;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7);
  }
  else
  {
    if (*(_QWORD *)(v7 + 16))
      v8 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v8 = 0;
    result = v8 != 0;
  }
  if ((v16 & 0x8000000000000) != 0)
  {
    v10 = result;
    v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
    {
LABEL_24:
      v13 = __ldaxr(v11);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v11));
    if (!v14)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v6);
    }
    return v10;
  }
  return result;
}

int *WebCore::RenderThemeIOS::adjustRadioStyle(WebCore::RenderThemeIOS *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  int *result;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  float v9;
  unsigned int v10;
  __int16 v11;
  char v12;
  unsigned int v13;
  __int16 v14;
  char v15;

  result = WebCore::RenderThemeIOS::adjustMinimumIntrinsicSizeForAppearance(3, (uint64_t)a2);
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
  v6 = *(unsigned __int8 *)(v5 + 8);
  v7 = (v6 - 7) < 4 || v6 == 0;
  if (v7 || (v6 - 5) < 2 || !*(_BYTE *)(v5 + 16))
  {
    v8 = *((_QWORD *)a2 + 4);
    if (*(float *)(v8 + 204) >= 10.0)
      v9 = *(float *)(v8 + 204);
    else
      v9 = 10.0;
    v10 = LODWORD(v9);
    v11 = 4;
    v12 = 1;
    WebCore::RenderStyle::setWidth((uint64_t)a2, (WebCore::Length *)&v10);
    if (v11 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v10);
    }
    v10 = LODWORD(v9);
    v11 = 4;
    v12 = 1;
    WebCore::RenderStyle::setHeight((uint64_t)a2, (WebCore::Length *)&v10);
    if (v11 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v10);
    }
    v10 = (int)(float)(v9 * 0.5);
    v11 = 4;
    v12 = 0;
    v13 = v10;
    v14 = 4;
    v15 = 0;
    result = WebCore::RenderStyle::setBorderRadius((uint64_t)a2, (uint64_t)&v10);
    if (v14 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v13);
    }
    if (v11 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v10);
    }
  }
  return result;
}

void sub_19541CD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, char a10, unsigned int a11, char a12)
{
  if (a12 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a11);
  }
  if (a10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a9);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::RenderThemeIOS::adjustTextFieldStyle(unsigned int *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  unsigned int *v5;
  int v6;
  int v7;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD v13[3];
  const WebCore::Element *v14;
  char v15;

  v14 = a3;
  if (a3)
  {
    v5 = this;
    if ((*((_WORD *)a3 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)a3 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      v6 = *((_DWORD *)a3 + 6);
      *((_DWORD *)a3 + 6) = v6 + 2;
      v7 = *(_DWORD *)(*((_QWORD *)a3 + 30) + 12);
      v9 = (v7 & 0x2A8C20) != 0 && v7 != 0x8000;
      if (v6)
      {
        *((_DWORD *)a3 + 6) = v6;
      }
      else if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef(a3, a2);
      }
    }
    else
    {
      v9 = 0;
    }
    v13[0] = &v14;
    v13[1] = a2;
    v13[2] = v5;
    v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 5) + 8) + 680);
    if (((*(unsigned int *)(v10 + 720) | ((unint64_t)*(unsigned __int8 *)(v10 + 724) << 32)) & 0x200000000) != 0)
    {
      if (v9)
      {
        v11 = 0x1104000000000000;
        v12 = 0;
        WebCore::RenderStyle::setBackgroundColor((uint64_t)a2, (const WebCore::StyleColor *)&v11);
        if (v12 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v15, &v11);
      }
      else
      {
        WebCore::RenderThemeIOS::adjustTextFieldStyle(WebCore::RenderStyle &,WebCore::Element const*)const::$_0::operator()(v13);
      }
      return WebCore::RenderStyle::resetBorderExceptRadius(a2);
    }
    else if (!v9)
    {
      return (unsigned int *)WebCore::RenderThemeIOS::adjustTextFieldStyle(WebCore::RenderStyle &,WebCore::Element const*)const::$_0::operator()(v13);
    }
  }
  return this;
}

void sub_19541CF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[a12])(v12 - 33, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::RenderThemeIOS::adjustTextFieldStyle(WebCore::RenderStyle &,WebCore::Element const*)const::$_0::operator()(_QWORD *a1)
{
  uint64_t v2;
  const WebCore::RenderStyle *v3;
  WebCore::Document *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t result;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  void *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  char *v41;

  v3 = (const WebCore::RenderStyle *)a1[1];
  v2 = a1[2];
  v4 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)*a1 + 40) + 8);
  v5 = *((_QWORD *)v4 + 66);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0 && (v7 = *(_QWORD *)(v6 + 24)) != 0 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    v9 = (*(_DWORD *)v8)++;
    v10 = *(unsigned __int8 *)(v8 + 450);
    if (v9)
    {
      *(_DWORD *)v8 = v9;
      if (!v10)
        goto LABEL_9;
      goto LABEL_7;
    }
    WebCore::Page::~Page(v8);
    WTF::fastFree(v28, v29);
    if (v10)
LABEL_7:
      LOBYTE(v10) = 2;
  }
  else
  {
    LOBYTE(v10) = 0;
  }
LABEL_9:
  if (WebCore::Document::useDarkAppearance(v4, v3))
    v11 = v10 | 4;
  else
    v11 = v10;
  v12 = *((_QWORD *)v4 + 66);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 24);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          v16 = (*(_DWORD *)v15)++;
          v17 = *(unsigned __int8 *)(v15 + 451);
          if (v16)
          {
            *(_DWORD *)v15 = v16;
            if (!v17)
              goto LABEL_18;
          }
          else
          {
            WebCore::Page::~Page(v15);
            WTF::fastFree(v30, v31);
            if (!v17)
              goto LABEL_18;
          }
          v11 |= 8u;
        }
      }
    }
  }
LABEL_18:
  v18 = *(_QWORD *)(*(_QWORD *)(a1[1] + 8) + 16);
  v19 = v11;
  WebCore::RenderThemeIOS::systemColor(v2, 222, v11, &v37);
  v20 = v37;
  if (v37)
    v37 = 0;
  v38 = v20;
  v39 = 0;
  if (*(_DWORD *)(v18 + 24))
  {
    v21 = 0;
    v22 = 0;
LABEL_23:
    result = ((uint64_t (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(&v41, &v38);
    goto LABEL_24;
  }
  v41 = &v40;
  result = std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>((uint64_t)&v41, (unint64_t *)(v18 + 16), (unint64_t *)&v38);
  v21 = result;
  v22 = v39;
  if (v39 != -1)
    goto LABEL_23;
LABEL_24:
  v39 = -1;
  if ((v37 & 0x8000000000000) != 0)
  {
    result = v37 & 0xFFFFFFFFFFFFLL;
    do
    {
      v32 = __ldaxr((unsigned int *)result);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, (unsigned int *)result));
    if (!v33)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v24);
    }
  }
  if (v21)
  {
    v25 = a1[1];
    WebCore::RenderThemeIOS::systemColor(v2, 225, v19, &v36);
    v26 = v36;
    if (v36)
      v36 = 0;
    v38 = v26;
    v39 = 0;
    result = WebCore::RenderStyle::setBackgroundColor(v25, (const WebCore::StyleColor *)&v38);
    if (v39 != -1)
      result = ((uint64_t (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v39])(&v41, &v38);
    v39 = -1;
    if ((v36 & 0x8000000000000) != 0)
    {
      result = v36 & 0xFFFFFFFFFFFFLL;
      do
      {
        v34 = __ldaxr((unsigned int *)result);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, (unsigned int *)result));
      if (!v35)
      {
        atomic_store(1u, (unsigned int *)result);
        return WTF::fastFree((WTF *)result, v27);
      }
    }
  }
  return result;
}

void sub_19541D1C0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, unsigned int a13, uint64_t a14, char a15)
{
  uint64_t v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  if (a13 != -1)
    (*(void (**)(char *, char *))(v15 + 8 * a13))(&a15, &a11);
  a13 = -1;
  if ((a9 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WebCore::RenderStyle::resetBorderExceptRadius(WebCore::RenderStyle *this)
{
  WebCore::RenderStyle::resetBorderImage(this);
  WebCore::RenderStyle::resetBorderTop(this);
  WebCore::RenderStyle::resetBorderRight(this);
  WebCore::RenderStyle::resetBorderBottom(this);
  return WebCore::RenderStyle::resetBorderLeft(this);
}

uint64_t WebCore::RenderThemeIOS::paintTextFieldDecorations(WebCore::RenderThemeIOS *this, const WebCore::RenderBox *a2, const WebCore::PaintInfo *a3, const WebCore::FloatRect *a4)
{
  WebCore::GraphicsContext *v7;
  double v8;
  int v9;
  int v10;
  double v11;
  int v12;
  float v13;
  double v14;
  int v15;
  int v16;
  double v17;
  int v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  _BOOL4 v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  void *v38;
  void *v39;
  unsigned int v40;
  unsigned int v41;
  void *v42;
  __n128 v48;
  WTF *v50;
  void *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  float32x2_t v61;
  float32x2_t v62;
  __int128 v63;
  __int128 v64;
  _QWORD v65[2];
  __int128 v66;
  __int128 v67;
  float32x2_t v68[3];
  _DWORD v69[2];
  _DWORD v70[14];
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v7 = (WebCore::GraphicsContext *)*((_QWORD *)a3 + 10);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v7 + 96))(v7, 1);
  v8 = *(float *)a4 * 64.0;
  if (v8 > -2147483650.0)
    v9 = (int)v8;
  else
    v9 = 0x80000000;
  if (v8 < 2147483650.0)
    v10 = v9;
  else
    v10 = 0x7FFFFFFF;
  v11 = *((float *)a4 + 1) * 64.0;
  if (v11 > -2147483650.0)
    v12 = (int)v11;
  else
    v12 = 0x80000000;
  if (v11 >= 2147483650.0)
    v12 = 0x7FFFFFFF;
  v69[0] = v10;
  v69[1] = v12;
  v13 = *((float *)a4 + 3);
  v14 = *((float *)a4 + 2) * 64.0;
  if (v14 > -2147483650.0)
    v15 = (int)v14;
  else
    v15 = 0x80000000;
  if (v14 < 2147483650.0)
    v16 = v15;
  else
    v16 = 0x7FFFFFFF;
  v70[0] = v16;
  v17 = v13 * 64.0;
  if (v17 >= 2147483650.0)
  {
    v18 = 0x7FFFFFFF;
  }
  else if (v17 > -2147483650.0)
  {
    v18 = (int)v17;
  }
  else
  {
    v18 = 0x80000000;
  }
  v70[1] = v18;
  WebCore::RenderStyle::getRoundedBorderFor((const WebCore::RenderBox *)((char *)a2 + 80), (const WebCore::LayoutRect *)v69, (const WebCore::LayoutSize *)1, 1, (uint64_t)&v72);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 528);
  v20 = 1.0;
  if (v19)
  {
    v21 = *(_QWORD *)(v19 + 8);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 24);
      if (v22)
      {
        v23 = *(float **)(v22 + 8);
        if (v23)
        {
          v24 = (*(_DWORD *)v23)++;
          v20 = v23[91];
          if (v24)
          {
            *(_DWORD *)v23 = v24;
          }
          else
          {
            WebCore::Page::~Page((uint64_t)v23);
            WTF::fastFree(v50, v51);
          }
        }
      }
    }
  }
  WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v72, v20, (uint64_t)&v61);
  if ((*((_BYTE *)a2 + 45) & 1) != 0)
  {
    v26 = 0;
  }
  else
  {
    v26 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v26 && (*(_WORD *)(v26 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19541D77CLL);
    }
  }
  if ((*(_WORD *)(v26 + 28) & 0x10) != 0)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v26 + 96) + 24);
    if (v27 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      v28 = *(_DWORD *)(v26 + 24);
      *(_DWORD *)(v26 + 24) = v28 + 2;
      v29 = *(_DWORD *)(*(_QWORD *)(v26 + 240) + 12);
      v31 = (v29 & 0x2A8C20) != 0 && v29 != 0x8000;
      if (v28)
      {
        *(_DWORD *)(v26 + 24) = v28;
      }
      else if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v26, v25);
      }
    }
    else
    {
      v31 = v27 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24);
    }
  }
  else
  {
    v31 = 0;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8)
                                                                                          + 40)
                                                                              + 8)
                                                                  + 528)
                                                      + 8)
                                          + 24)
                              + 8)
                  + 112);
  if (((*(unsigned int *)(v32 + 720) | ((unint64_t)*(unsigned __int8 *)(v32 + 724) << 32)) & 0x200000000) != 0
    && v31)
  {
    v71 = 0;
    WebCore::Path::addRoundedRect((WebCore::Path *)v69, (WebCore::FloatRect *)&v61, 0);
    v72 = 0x110400000000000ALL;
    WebCore::GraphicsContext::setFillColor(v7, (const WebCore::Color *)&v72);
    if ((v72 & 0x8000000000000) != 0)
    {
      v52 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFLL);
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        atomic_store(1u, v52);
        WTF::fastFree((WTF *)v52, v33);
      }
    }
    (*(void (**)(WebCore::GraphicsContext *, _DWORD *))(*(_QWORD *)v7 + 192))(v7, v69);
    (*(void (**)(WebCore::GraphicsContext *, _DWORD *, uint64_t))(*(_QWORD *)v7 + 496))(v7, v69, 1);
    v34 = *((_QWORD *)a3 + 10);
    v35 = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)v35 = 1;
    *(_OWORD *)(v35 + 4) = xmmword_1968DE9A0;
    v72 = 0x40A0000000000000;
    v73 = 1092616192;
    v74 = v35 | 0x10C000000000000;
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFLL);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
    v75 = 0x3F80000000000000;
    v76 = 1;
    WebCore::GraphicsContextState::setDropShadow(v34 + 8, (uint64_t)&v72);
    if (v76)
    {
      if ((v74 & 0x8000000000000) != 0)
      {
        v58 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFLL);
        do
        {
          v59 = __ldaxr(v58);
          v60 = v59 - 1;
        }
        while (__stlxr(v60, v58));
        if (!v60)
        {
          atomic_store(1u, v58);
          WTF::fastFree((WTF *)v58, v38);
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 88))(v34, v34 + 8);
    do
    {
      v40 = __ldaxr(v36);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v36));
    if (!v41)
    {
      atomic_store(1u, v36);
      WTF::fastFree((WTF *)v36, v39);
    }
    v72 = 0x11040000000000FFLL;
    WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v34, (const WebCore::Color *)&v72);
    if ((v72 & 0x8000000000000) != 0)
    {
      v55 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFLL);
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, v42);
      }
    }
    v77 = 0;
    __asm
    {
      FMOV            V0.2S, #-15.0
      FMOV            V1.2S, #15.0
    }
    v68[0] = vadd_f32(v61, _D0);
    v68[1] = vadd_f32(vadd_f32(v62, _D1), _D1);
    WebCore::Path::addRect((WebCore::Path *)&v72, (const WebCore::FloatRect *)v68);
    v66 = v63;
    v67 = v64;
    v65[0] = vadd_f32(v61, (float32x2_t)0xBF000000BF000000);
    v65[1] = vadd_f32(vadd_f32(v62, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000);
    v48.n128_f64[0] = WebCore::Path::addRoundedRect((WebCore::Path *)&v72, (WebCore::FloatRect *)v65, 0);
    if (!*(_BYTE *)(v34 + 192))
    {
      *(_BYTE *)(v34 + 192) = 1;
      *(_DWORD *)(v34 + 184) |= 2u;
    }
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v34 + 88))(v34, v34 + 8, v48);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v34 + 176))(v34, &v72);
    if (v77 != -1)
      ((void (*)(_QWORD *, int *))off_1E335C4E8[v77])(v65, &v73);
    if (v71 != -1)
      ((void (*)(uint64_t *, _DWORD *))off_1E335C4E8[v71])(&v72, v70);
  }
  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v7 + 104))(v7, 1);
}

void sub_19541D834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;

  v35 = *(unsigned int *)(v33 - 80);
  if ((_DWORD)v35 != -1)
    ((void (*)(char *, uint64_t))off_1E335C4E8[v35])(&a15, v33 - 136);
  if (a32 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E335C4E8[a32])(v33 - 144, &a25);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 104))(v32, 1);
  _Unwind_Resume(a1);
}

_DWORD *WebCore::RenderThemeIOS::adjustTextAreaStyle(WebCore::RenderThemeIOS *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  uint64_t v3;
  _DWORD *result;
  uint64_t v6;
  int v7;
  char v8;

  if (a3)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 5) + 8) + 680);
    if (((*(unsigned int *)(v3 + 720) | ((unint64_t)*(unsigned __int8 *)(v3 + 724) << 32)) & 0x200000000) != 0)
    {
      v6 = 0x1104000000000000;
      v7 = 0;
      WebCore::RenderStyle::setBackgroundColor((uint64_t)a2, (const WebCore::StyleColor *)&v6);
      if (v7 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v7])(&v8, &v6);
      return WebCore::RenderStyle::resetBorderExceptRadius(a2);
    }
  }
  return result;
}

void sub_19541DA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

WebCore::Node *WebCore::RenderThemeIOS::popupInternalPaddingBox@<X0>(const WebCore::RenderStyle *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5;
  char v6;
  WTF::StringImpl *v7;
  float v8;
  WebCore::Node *result;
  uint64_t v10;
  uint64_t v11;
  float v12;
  int v13;
  int v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  const WebCore::RenderStyle *v18;
  __int128 v19;
  WebCore::Node *v20[2];
  int v21;
  char v22;
  char v23;
  char v24;
  const WebCore::RenderStyle *v25;
  uint64_t v26;

  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 2;
  v6 = *(_BYTE *)(v5 + 6);
  *(_WORD *)(v5 + 4) = 4;
  *(_BYTE *)(v5 + 6) = v6 & 0xFC;
  *(_QWORD *)(v5 + 8) = 0x3FF0000000000000;
  v18 = a1;
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  v21 = 1065353216;
  v22 = 1;
  v23 = 0;
  v24 = 0;
  v25 = a1;
  v26 = 0;
  v8 = WebCore::CSSPrimitiveValue::computeLength<float>(v5, (uint64_t)&v18, (__n128)0);
  result = v20[1];
  v20[1] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  v10 = *((_QWORD *)a1 + 1);
  if ((*(_DWORD *)(*(_QWORD *)(v10 + 32) + 148) & 0x1FC000) == 0x28000)
  {
    v11 = *(_QWORD *)(v10 + 24);
    if ((*((_BYTE *)a1 + 43) & 4) != 0)
    {
      v15 = 0.0;
      if ((*(_BYTE *)(v11 + 172) & 0xE) != 0)
      {
        v17 = *(_QWORD *)(v11 + 200);
        if (*(_BYTE *)(v17 + 5) && *(_BYTE *)(v17 + 52) == 4)
        {
          if (*(_BYTE *)(v17 + 54))
            v15 = *(float *)(v17 + 48);
          else
            v15 = (float)*(int *)(v17 + 48);
        }
        else
        {
          v15 = *(float *)(v11 + 168);
        }
      }
      v14 = 0;
      v13 = (int)(float)(v8 + v15);
    }
    else
    {
      v12 = 0.0;
      if ((*(_BYTE *)(v11 + 172) & 0xE) != 0)
      {
        v16 = *(_QWORD *)(v11 + 200);
        if (*(_BYTE *)(v16 + 5) && *(_BYTE *)(v16 + 52) == 4)
        {
          if (*(_BYTE *)(v16 + 54))
            v12 = *(float *)(v16 + 48);
          else
            v12 = (float)*(int *)(v16 + 48);
        }
        else
        {
          v12 = *(float *)(v11 + 168);
        }
      }
      v13 = 0;
      v14 = (int)(float)(v8 + v12);
    }
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  *(_WORD *)(a2 + 4) = 4;
  *(_BYTE *)(a2 + 6) = 0;
  *(_DWORD *)a2 = 0;
  *(_WORD *)(a2 + 12) = 4;
  *(_BYTE *)(a2 + 14) = 0;
  *(_DWORD *)(a2 + 8) = v14;
  *(_WORD *)(a2 + 20) = 4;
  *(_BYTE *)(a2 + 22) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 28) = 4;
  *(_BYTE *)(a2 + 30) = 0;
  *(_DWORD *)(a2 + 24) = v13;
  if (*(_DWORD *)v5 == 2)
    return (WebCore::Node *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v5, v7);
  *(_DWORD *)v5 -= 2;
  return result;
}

int *WebCore::RenderThemeIOS::adjustRoundBorderRadius(int *this, WebCore::RenderStyle *a2, WebCore::RenderBox *a3)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t (*v7)();
  char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  float v14;
  unsigned int v15;
  __int16 v16;
  char v17;
  unsigned int v18;
  __int16 v19;
  char v20;

  v3 = *((_QWORD *)this + 1);
  v4 = (*(_DWORD *)(*(_QWORD *)(v3 + 32) + 148) >> 14) & 0x7F;
  v5 = (v4 - 15) < 2 || v4 == 0;
  if (!v5 && (v4 != 10 || (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 24) + 4) & 0xF) == 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8);
    if (*(_QWORD *)(v6 + 8))
    {
      while (!*(_QWORD *)(v6 + 16))
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
          goto LABEL_12;
      }
    }
    else
    {
      if (*(_QWORD *)(v6 + 16))
        v7 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
      else
        v7 = 0;
      if (!v7)
      {
LABEL_12:
        v8 = (char *)a2 + 160;
        if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
          v8 = (char *)a2 + 164;
        v9 = *(_DWORD *)v8;
        v10 = *((_DWORD *)a2 + 40);
        if (*((_DWORD *)a2 + 41) < v10)
          v10 = *((_DWORD *)a2 + 41);
        v11 = *((unsigned __int8 *)a2 + 46);
        if ((v11 == 22 || v11 == 2) && v9 >= 2880)
        {
          *(float *)&v15 = (float)((float)v10 * 0.015625) * 0.175;
          v16 = 4;
          v17 = 1;
          v18 = v15;
          v19 = 4;
          v20 = 1;
          this = WebCore::RenderStyle::setBorderRadius((uint64_t)this, (uint64_t)&v15);
        }
        else
        {
          v13 = v10;
          v12 = v10 + (v10 < 0);
          *(float *)&v15 = (float)(v13 / 2) * 0.015625;
          v16 = 4;
          v17 = 1;
          v14 = (float)(v9 / 2);
          *(float *)&v18 = v14 * 0.015625;
          v19 = 4;
          v20 = 1;
          if (((this[11] >> 13) & 6) - 2 <= 3)
          {
            HIBYTE(v16) = 0;
            *(float *)&v15 = v14 * 0.015625;
            HIBYTE(v19) = 0;
            *(float *)&v18 = (float)(v12 >> 1) * 0.015625;
          }
          this = WebCore::RenderStyle::setBorderRadius((uint64_t)this, (uint64_t)&v15);
        }
        if (v19 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          this = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v18);
        }
        if (v16 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v15);
        }
      }
    }
  }
  return this;
}

void sub_19541DE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, char a10, unsigned int a11, char a12)
{
  if (a12 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a11);
  }
  if (a10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a9);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::RenderThemeIOS::adjustMenuListButtonStyle(WebCore::RenderThemeIOS *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  WTF **v5;
  unsigned int v6;
  uint64_t v7;
  const WebCore::Element *v8;
  signed int v9;
  const WebCore::Element *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  void *v24;
  float v25;
  WTF *v26;
  _DWORD *v27;
  unsigned int v28[2];
  unsigned int *v29;
  WebCore::RenderStyle *v30;
  unsigned int v31;
  __int16 v32;
  char v33;

  v5 = (WTF **)((char *)a2 + 8);
  v6 = ((*((_DWORD *)a2 + 11) >> 13) & 6) - 2;
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
  if (v6 <= 3)
  {
    if (*(_BYTE *)(v7 + 8))
    {
      v31 = 15;
      v32 = 4;
      v33 = 0;
      WebCore::RenderStyle::setMinWidth((uint64_t)a2, (WebCore::Length *)&v31);
      goto LABEL_10;
    }
  }
  else if (*(_BYTE *)(v7 + 16))
  {
    v31 = 15;
    v32 = 4;
    v33 = 0;
    WebCore::RenderStyle::setMinHeight((uint64_t)a2, (WebCore::Length *)&v31);
    goto LABEL_10;
  }
  v9 = (int)(float)(*(float *)(*((_QWORD *)a2 + 4) + 204) * 1.8182);
  if (v9 <= 15)
    v9 = 15;
  v31 = v9;
  v32 = 4;
  v33 = 0;
  if (v6 < 4)
    WebCore::RenderStyle::setMinWidth((uint64_t)a2, (WebCore::Length *)&v31);
  else
    WebCore::RenderStyle::setMinHeight((uint64_t)a2, (WebCore::Length *)&v31);
LABEL_10:
  if (v32 != 11)
  {
    if (!a3)
      return;
LABEL_12:
    WebCore::RenderThemeIOS::adjustButtonLikeControlStyle((uint64_t)a2, a3, v8);
    if ((*((_WORD *)a3 + 14) & 0x10) == 0)
      return;
    v11 = *(_QWORD *)(*((_QWORD *)a3 + 12) + 24);
    if (v11 != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
    {
LABEL_14:
      if (v11 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
        return;
      *((_DWORD *)a3 + 6) += 2;
      WebCore::applyCommonButtonPaddingToStyle(a2, *(WebCore::RenderStyle **)(*((_QWORD *)a3 + 5) + 8), v10);
      v13 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
      if (((*((_DWORD *)a2 + 11) >> 13) & 6u) - 2 <= 3)
      {
        if (*(_BYTE *)(v13 + 16) != 4)
          goto LABEL_38;
        v14 = v13 + 12;
      }
      else
      {
        if (*(_BYTE *)(v13 + 8) != 4)
          goto LABEL_38;
        v14 = v13 + 4;
      }
      if (*(_BYTE *)(v14 + 6))
        v15 = *(float *)v14;
      else
        v15 = (float)*(int *)v14;
      if (v15 > 0.0)
      {
LABEL_51:
        if (*((_DWORD *)a3 + 6) == 2)
        {
          if ((*((_WORD *)a3 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(a3, v12);
        }
        else
        {
          *((_DWORD *)a3 + 6) -= 2;
        }
        return;
      }
LABEL_38:
      v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 30) + 912))(*((_QWORD *)a3 + 30));
      if (v21)
        v22 = v21 == 5;
      else
        v22 = 1;
      if (!v22)
      {
        v23 = v21;
        WebCore::FontCascade::FontCascade((WebCore::FontCascade *)&v31, (const WebCore::FontCascade *)(*((_QWORD *)a2 + 4) + 32));
        {
          WebCore::LocalizedDateCache::LocalizedDateCache((WebCore::LocalizedDateCache *)&WebCore::localizedDateCache(void)::cache);
        }
        *(_QWORD *)v28 = &off_1E335C510;
        v29 = &v31;
        v30 = a2;
        v25 = WebCore::LocalizedDateCache::maximumWidthForDateType(&WebCore::localizedDateCache(void)::cache, v23, (const WebCore::FontCascade *)&v31, (float (***)(_QWORD, WTF::StringImpl **))v28);
        if (v25 > 0.0)
        {
          v28[0] = vcvtps_s32_f32(v25);
          LOWORD(v28[1]) = 4;
          BYTE2(v28[1]) = 0;
          if (((*((_DWORD *)a2 + 11) >> 13) & 6u) - 2 < 4)
            WebCore::RenderStyle::setHeight((uint64_t)a2, (WebCore::Length *)v28);
          else
            WebCore::RenderStyle::setWidth((uint64_t)a2, (WebCore::Length *)v28);
          if (LOBYTE(v28[1]) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v28[0]);
          }
          if ((*(_BYTE *)(*((_QWORD *)*v5 + 1) + 68) & 4) != 0)
          {
            v26 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v5);
            v27 = WTF::DataRef<WebCore::StyleBoxData>::access((uint64_t *)v26 + 1);
            *((_BYTE *)v27 + 68) &= ~4u;
          }
        }
        WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)&v31, v24);
      }
      goto LABEL_51;
    }
    v16 = *((_QWORD *)a3 + 13);
    if (!v16)
      goto LABEL_32;
    v17 = *(_DWORD *)(v16 + 4);
    if ((v17 & 1) != 0)
    {
      v18 = *(uint64_t **)(v16 + 40);
      LODWORD(v19) = *(_DWORD *)(v16 + 52);
      if (!(_DWORD)v19)
        goto LABEL_32;
    }
    else
    {
      v18 = (uint64_t *)(v16 + 32);
      LODWORD(v19) = v17 >> 5;
      if (!(_DWORD)v19)
      {
LABEL_32:
        WebCore::applyCommonButtonPaddingToStyle(a2, *(WebCore::RenderStyle **)(*((_QWORD *)a3 + 5) + 8), v10);
        v31 = -1027080192;
        v32 = 3;
        v33 = 1;
        WebCore::RenderStyle::setLineHeight((uint64_t)a2, (WebCore::Length *)&v31);
        if (v32 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
        }
        return;
      }
    }
    v19 = v19;
    while (1)
    {
      v20 = *v18;
      if (*v18 == WebCore::HTMLNames::multipleAttr
        || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 24)
        && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 32))
      {
        goto LABEL_14;
      }
      v18 += 2;
      if (!--v19)
        goto LABEL_32;
    }
  }
  {
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
  }
  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
  if (a3)
    goto LABEL_12;
}

void sub_19541E3A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12)
{
  uint64_t v12;
  void *v14;

  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)&a12, a2);
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v14);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::RenderThemeIOS::adjustButtonLikeControlStyle(uint64_t this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  uint64_t v3;
  const WebCore::RenderStyle *v5;
  unsigned __int8 v6;
  void *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  void *v12;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 680);
  if (((*(unsigned int *)(v3 + 720) | ((unint64_t)*(unsigned __int8 *)(v3 + 724) << 32)) & 0x200000000) != 0)
    return this;
  v5 = (const WebCore::RenderStyle *)this;
  this = (*(uint64_t (**)(WebCore::RenderStyle *))(*(_QWORD *)a2 + 960))(a2);
  if ((this & 1) != 0)
    return this;
  if ((*(_BYTE *)(*((_QWORD *)v5 + 3) + 238) & 0x80) == 0)
  {
    v6 = WebCore::Document::styleColorOptions(*(WebCore::Document **)(*((_QWORD *)a2 + 5) + 8), v5);
    WebCore::RenderStyle::usedAccentColor((uint64_t *)v5, v6, (unint64_t *)&v52);
    if ((*((_WORD *)a2 + 14) & 0x10) == 0)
      goto LABEL_27;
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
    if (v8 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      v9 = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v9 + 2;
      v10 = *(_DWORD *)(*((_QWORD *)a2 + 30) + 12);
      if (v9)
      {
        *((_DWORD *)a2 + 6) = v9;
LABEL_8:
        if (v10 == 256 || v10 == 0x10000)
          goto LABEL_10;
LABEL_27:
        this = (uint64_t)WebCore::RenderStyle::setColor(v5, (const WebCore::Color *)&v52);
LABEL_28:
        if (((unint64_t)v52 & 0x8000000000000) != 0)
        {
          this = (unint64_t)v52 & 0xFFFFFFFFFFFFLL;
          do
          {
            v36 = __ldaxr((unsigned int *)this);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, (unsigned int *)this));
          if (!v37)
          {
            atomic_store(1u, (unsigned int *)this);
            this = WTF::fastFree((WTF *)this, v12);
          }
        }
        goto LABEL_29;
      }
      v14 = v10 == 0x10000 || v10 == 256;
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a2, v7);
        goto LABEL_8;
      }
      v43 = v14;
      goto LABEL_68;
    }
    if (v8 != *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24))
      goto LABEL_27;
    v15 = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v15 + 2;
    if (!*((_DWORD *)a2 + 43)
      && (v27 = *((_QWORD *)a2 + 13)) != 0
      && ((v28 = *(_DWORD *)(v27 + 4), (v28 & 1) != 0)
        ? (v29 = *(uint64_t **)(v27 + 40), LODWORD(v30) = *(_DWORD *)(v27 + 52))
        : (v29 = (uint64_t *)(v27 + 32), LODWORD(v30) = v28 >> 5),
          (_DWORD)v30))
    {
      v30 = v30;
      while (1)
      {
        v33 = *v29;
        if (*v29 == WebCore::HTMLNames::typeAttr
          || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
          && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
        {
          break;
        }
        v43 = 0;
        v29 += 2;
        if (!--v30)
          goto LABEL_24;
      }
      v43 = 1;
    }
    else
    {
      v43 = 0;
    }
LABEL_24:
    if (v15)
    {
      *((_DWORD *)a2 + 6) = v15;
    }
    else
    {
      if ((*((_WORD *)a2 + 15) & 0x400) != 0)
      {
LABEL_68:
        if (!v43)
          goto LABEL_27;
        goto LABEL_10;
      }
      WebCore::Node::removedLastRef(a2, v7);
    }
    if ((v43 & 1) == 0)
      goto LABEL_27;
LABEL_10:
    v11 = v52;
    if (((unint64_t)v52 & 0x8000000000000) != 0)
    {
      v31 = (unsigned int *)((unint64_t)v52 & 0xFFFFFFFFFFFFLL);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
    }
    v48 = (uint64_t)v11;
    LODWORD(v49) = 0;
    this = WebCore::RenderStyle::setBackgroundColor((uint64_t)v5, (const WebCore::StyleColor *)&v48);
    if ((_DWORD)v49 != -1)
      this = ((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v49])(&v47, &v48);
    goto LABEL_28;
  }
LABEL_29:
  if ((*((_BYTE *)a2 + 54) & 2) == 0)
    return this;
  this = WebCore::Element::isUserActionElementActive(a2);
  if (!(_DWORD)this)
    return this;
  v16 = *(_QWORD *)(*((_QWORD *)v5 + 4) + 328);
  v46 = v16;
  if ((v16 & 0x8000000000000) != 0)
  {
    v34 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v16 = v46;
    if ((v46 & 0x4000000000000) == 0)
      goto LABEL_37;
  }
  else if ((v16 & 0x4000000000000) == 0)
  {
    goto LABEL_37;
  }
  if ((v16 & 0x8000000000000) != 0)
    v17 = *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0x10);
  else
    v17 = (float)v16 / 255.0;
  WebCore::Color::colorWithAlpha((uint64_t)&v46, v17 * 0.75, &v48);
  WebCore::RenderStyle::setColor(v5, (const WebCore::Color *)&v48);
  if ((v48 & 0x8000000000000) != 0)
  {
    v40 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFLL);
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v40);
      WTF::fastFree((WTF *)v40, v18);
    }
  }
LABEL_37:
  v19 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 16);
  v47 = *((_QWORD *)v5 + 4) + 328;
  v48 = (uint64_t)&v47;
  v49 = &v47;
  v50 = &v47;
  v51 = &v47;
  v20 = *(unsigned int *)(v19 + 24);
  if ((_DWORD)v20 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v52 = &v48;
    this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v20])(&v45, &v52, v19 + 16);
    v22 = v45;
    if ((v45 & 0x4000000000000) != 0)
    {
      if ((v45 & 0x8000000000000) != 0)
        v23 = *(float *)((v45 & 0xFFFFFFFFFFFFLL) + 0x10);
      else
        v23 = (float)v45 / 255.0;
      WebCore::Color::colorWithAlpha((uint64_t)&v45, v23 * 0.75, &v44);
      v24 = v44;
      v44 = 0;
      v48 = v24;
      LODWORD(v49) = 0;
      this = WebCore::RenderStyle::setBackgroundColor((uint64_t)v5, (const WebCore::StyleColor *)&v48);
      if ((_DWORD)v49 != -1)
        this = ((uint64_t (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v49])(&v52, &v48);
      v22 = v45;
    }
    if ((v22 & 0x8000000000000) == 0)
      goto LABEL_45;
  }
  this = v22 & 0xFFFFFFFFFFFFLL;
  do
  {
    v38 = __ldaxr((unsigned int *)this);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, (unsigned int *)this));
  if (!v39)
  {
    atomic_store(1u, (unsigned int *)this);
    this = WTF::fastFree((WTF *)this, v21);
  }
LABEL_45:
  if ((v46 & 0x8000000000000) != 0)
  {
    this = v46 & 0xFFFFFFFFFFFFLL;
    do
    {
      v25 = __ldaxr((unsigned int *)this);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)this));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)this);
      return WTF::fastFree((WTF *)this, v21);
    }
  }
  return this;
}

void sub_19541E914(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, int a18, int a19)
{
  uint64_t v19;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  if (a19 != -1)
    ((void (*)(uint64_t, __int16 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[a19])(v19 - 40, &a15);
  if ((a11 & 0x8000000000000) != 0)
  {
    v24 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, a2);
    }
  }
  if ((a12 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WebCore::RenderTheme *WebCore::RenderThemeIOS::paintMenuListButtonDecorations(WebCore::RenderTheme *this, const WebCore::RenderBox *a2, const WebCore::PaintInfo *a3, const WebCore::FloatRect *a4)
{
  const WebCore::RenderBox *v5;
  WebCore::RenderTheme *v6;
  uint64_t v7;
  __int16 v8;
  WebCore::GraphicsContext *v9;
  uint64_t v10;
  __int16 v11;
  float v12;
  int v13;
  float v14;
  uint64_t v15;
  char v16;
  void *v17;
  float v18;
  WebCore::Node *v19;
  float v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  float *v24;
  float *v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::Length *v37;
  double v38;
  int v39;
  float v40;
  float v41;
  WebCore::RenderStyle *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::Length *v49;
  double v50;
  int v51;
  float v52;
  int v53;
  float v54;
  double v55;
  float v56;
  float v57;
  int v58;
  float v59;
  double v60;
  float v61;
  float v62;
  double v63;
  WebCore::Document *v64;
  unsigned __int8 v65;
  void *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  char v72;
  int v73;
  float v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  BOOL v78;
  _BYTE v79[24];
  WebCore::Node *v80[2];
  double v81;
  char v82;
  char v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE v88[8];
  uint64_t v89;
  int v90;
  uint64_t v91;

  v5 = a2;
  v6 = this;
  v91 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a2 + 45) & 1) != 0)
    goto LABEL_6;
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if (!v7)
    goto LABEL_6;
  v8 = *(_WORD *)(v7 + 28);
  if ((v8 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19541F514);
  }
  if ((v8 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
LABEL_6:
    v9 = (WebCore::GraphicsContext *)*((_QWORD *)a3 + 10);
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v9 + 96))(v9, 1);
    v90 = 0;
    if (*((_BYTE *)v5 + 46) != 22)
      goto LABEL_12;
    v10 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    v11 = *(_WORD *)(v10 + 28);
    if ((v11 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19541F534);
    }
    if ((v11 & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19541F47CLL);
    }
    if (*(_BYTE *)(v10 + 297))
    {
      *(_OWORD *)v79 = xmmword_1968DE9B0;
      WebCore::Path::addEllipseInRect((WebCore::Path *)v88, (__n128 *)v79);
      *(_QWORD *)v79 = 1106247680;
      WebCore::Path::addEllipseInRect((WebCore::Path *)v88, (__n128 *)v79);
      *(_QWORD *)v79 = 1114636288;
      WebCore::Path::addEllipseInRect((WebCore::Path *)v88, (__n128 *)v79);
      v12 = 18.0;
      v13 = 1117519872;
    }
    else
    {
LABEL_12:
      *(_QWORD *)v79 = 0x3F80000041FEDFD9;
      WebCore::Path::moveTo((WebCore::Path *)v88, (const WebCore::FloatPoint *)v79);
      *(_QWORD *)v79 = 0x3F80000041F453F8;
      v86 = 0x402A3D7141E067D5;
      v87 = 0x3FCB020C41EB5810;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x41B9581040240000;
      WebCore::Path::addLineTo((uint64_t)v88, (const WebCore::FloatPoint *)v79);
      *(_QWORD *)v79 = 0x41BFFBE73FCAFEC5;
      v86 = 0x41D5DC293F800000;
      v87 = 0x41C9C01A3F800000;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x41ECE80A3F800000;
      v86 = 0x41FDB40540BDCFABLL;
      v87 = 0x41FDB405404FBE77;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x41FDB40540E4DFA4;
      v86 = 0x41F1FBE74118B7E9;
      v87 = 0x41F9CBFB41052FECLL;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x4146083141FEDFD9;
      WebCore::Path::addLineTo((uint64_t)v88, (const WebCore::FloatPoint *)v79);
      *(_QWORD *)v79 = 0x41F1FBE74258E3F1;
      WebCore::Path::addLineTo((uint64_t)v88, (const WebCore::FloatPoint *)v79);
      *(_QWORD *)v79 = 0x41F9CBFB425D93F8;
      v86 = 0x41FDB405426725FELL;
      v87 = 0x41FDB405426275F7;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x41FDB4054271E3F1;
      v86 = 0x41D5DC29427ADFF3;
      v87 = 0x41ECE80A427ADFF3;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x41C9C01A427ADFF3;
      v86 = 0x41B9581042749FF3;
      v87 = 0x41BFFC1C427887E3;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x402A40B8420EABEELL;
      WebCore::Path::addLineTo((uint64_t)v88, (const WebCore::FloatPoint *)v79);
      *(_QWORD *)v79 = 0x3FCB020C420965FELL;
      v86 = 0x3F80000041FEDFD9;
      v87 = 0x3F8000004204B5F7;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x4290C5FE41FEDFD9;
      WebCore::Path::moveTo((WebCore::Path *)v88, (const WebCore::FloatPoint *)v79);
      *(_QWORD *)v79 = 0x4290C5FE4204B5F7;
      v86 = 0x428D7405420EABEELL;
      v87 = 0x428F99F5420965FELL;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x4248E00D42749FF3;
      WebCore::Path::addLineTo((uint64_t)v88, (const WebCore::FloatPoint *)v79);
      *(_QWORD *)v79 = 0x42458E22427887FDLL;
      v86 = 0x423A9E01427ADFF3;
      v87 = 0x4240AC08427ADFF3;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x422F1810427ADFF3;
      v86 = 0x4226B213426725FELL;
      v87 = 0x4226B2134271E3F1;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x4226B213426275DDLL;
      v86 = 0x422C5C294258E3F1;
      v87 = 0x4228A5E3425D93F8;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x42740A3D41FEDFD9;
      WebCore::Path::addLineTo((uint64_t)v88, (const WebCore::FloatPoint *)v79);
      *(_QWORD *)v79 = 0x422C5BF54118B852;
      WebCore::Path::addLineTo((uint64_t)v88, (const WebCore::FloatPoint *)v79);
      *(_QWORD *)v79 = 0x4228A5C941053055;
      v86 = 0x4226B1F940BDD07DLL;
      v87 = 0x4226B1F940E4E076;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x4226B213404FBE77;
      v86 = 0x423A9E013F800000;
      v87 = 0x422F18103F800000;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x4240AC083F800000;
      v86 = 0x4248E00D40240000;
      v87 = 0x42458E073FCAFEC5;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      *(_QWORD *)v79 = 0x428D740541E067D5;
      WebCore::Path::addLineTo((uint64_t)v88, (const WebCore::FloatPoint *)v79);
      *(_QWORD *)v79 = 0x428F999A41EB57DCLL;
      v86 = 0x4290C5FE41FEDFD9;
      v87 = 0x4290C5FE41F453F8;
      WebCore::Path::addBezierCurveTo((uint64_t)v88, (const WebCore::FloatPoint *)v79, (const WebCore::FloatPoint *)&v87, (const WebCore::FloatPoint *)&v86);
      v12 = 73.0;
      v13 = 1115422720;
    }
    v14 = *(float *)&v13;
    v15 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v15 = 2;
    v16 = *(_BYTE *)(v15 + 6);
    *(_WORD *)(v15 + 4) = 4;
    *(_BYTE *)(v15 + 6) = v16 & 0xFC;
    *(_QWORD *)(v15 + 8) = 0x3FF0000000000000;
    *(_QWORD *)v79 = (char *)v5 + 80;
    *(_OWORD *)&v79[8] = 0u;
    *(_OWORD *)v80 = 0u;
    LODWORD(v81) = 1065353216;
    BYTE4(v81) = 1;
    v82 = 0;
    v83 = 0;
    v84 = (char *)v5 + 80;
    v85 = 0;
    v18 = WebCore::CSSPrimitiveValue::computeLength<float>(v15, (uint64_t)v79, (__n128)0);
    v19 = v80[1];
    v80[1] = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v17);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    v20 = (float)(v18 * 0.65) / v14;
    v21 = *((_DWORD *)v5 + 31);
    v22 = (v21 >> 13) & 6;
    v23 = v22 - 6;
    if ((v22 - 6) > 0xFFFFFFFB)
    {
      v26 = (float *)((char *)a4 + 8);
      v25 = (float *)((char *)a4 + 12);
      v24 = (float *)a4;
      a4 = (const WebCore::FloatRect *)((char *)a4 + 4);
    }
    else
    {
      v24 = (float *)((char *)a4 + 4);
      v25 = (float *)((char *)a4 + 8);
      v26 = (float *)((char *)a4 + 12);
    }
    v27 = *v25;
    v28 = *(float *)a4;
    v29 = (float)((float)(*v26 * 0.5) + *v24) - (float)((float)(v12 * v20) * 0.5);
    v30 = v22 - 2;
    if ((*((_BYTE *)v5 + 123) & 4) == 0)
    {
      if (v30 >= 4)
      {
        v72 = v21 >> 13;
        v71 = *((_QWORD *)v5 + 11);
        v31 = *(_QWORD *)(v71 + 24);
        if ((*(_BYTE *)(v31 + 148) & 0xE) != 0)
        {
          v68 = *(_QWORD *)(v31 + 200);
          if (*(_BYTE *)(v68 + 5) && *(_BYTE *)(v68 + 60) == 4)
          {
            v73 = *(unsigned __int8 *)(v68 + 62);
            if (*(_BYTE *)(v68 + 62))
            {
              v73 = 0;
              v70 = *(float *)(v68 + 56);
            }
            else
            {
              v70 = (float)*(int *)(v68 + 56);
            }
          }
          else
          {
            v73 = 0;
            v70 = *(float *)(v31 + 144);
          }
        }
        else
        {
          v73 = 0;
          v70 = 0.0;
        }
      }
      else
      {
        v70 = WebCore::RenderStyle::borderBottomWidth((const WebCore::RenderBox *)((char *)v5 + 80));
        v71 = *((_QWORD *)v5 + 11);
        v72 = *((_DWORD *)v5 + 31) >> 13;
        v73 = *((_DWORD *)v5 + 30) & 0x4000000;
      }
      v32 = *(_QWORD *)(v71 + 24);
      v33 = v72 & 7;
      v34 = v73 != 0;
      if ((v33 - 2) >= 2)
      {
        if (v33 == 4)
        {
          v34 = v73 == 0;
        }
        else if (v33 != 5)
        {
          v35 = 3;
          if (!v73)
            v35 = 1;
LABEL_28:
          v36 = v32 + 72;
          v37 = (WebCore::Length *)(v32 + 72 + 8 * v35);
          v38 = v27 * 64.0;
          if (v38 >= 2147483650.0)
          {
            v39 = 0x7FFFFFFF;
          }
          else if (v38 <= -2147483650.0)
          {
            v39 = 0x80000000;
          }
          else
          {
            v39 = (int)v38;
          }
          v40 = (float)((float)(v27 + v28) - (float)(v14 * v20)) - v70;
          if (*((_BYTE *)v37 + 4) == 4)
          {
            v41 = *(float *)v37;
            if (!*(_BYTE *)(v36 + 8 * v35 + 6))
              v41 = (float)*(int *)v37;
LABEL_54:
            v55 = v41 * 64.0;
            if (v55 >= 2147483650.0)
            {
              v53 = 0x7FFFFFFF;
            }
            else if (v55 <= -2147483650.0)
            {
              v53 = 0x80000000;
            }
            else
            {
              v53 = (int)v55;
            }
          }
          else
          {
            v53 = 0;
            switch(*((_BYTE *)v37 + 4))
            {
              case 0:
              case 1:
              case 9:
                v53 = v39;
                break;
              case 3:
                v54 = *(float *)v37;
                if (!*(_BYTE *)(v36 + 8 * v35 + 6))
                  v54 = (float)*(int *)v37;
                v41 = (float)((float)((float)v39 * 0.015625) * v54) / 100.0;
                goto LABEL_54;
              case 0xB:
                WebCore::Length::nonNanCalculatedValue(v37, (float)v39 * 0.015625);
                goto LABEL_54;
              default:
                break;
            }
          }
          v56 = (float)v53;
          v57 = -0.015625;
LABEL_66:
          v61 = v40 + (float)(v56 * v57);
          if (v23 >= 0xFFFFFFFC)
            v62 = v61;
          else
            v62 = v29;
          v63 = v62;
          if (v23 >= 0xFFFFFFFC)
            v61 = v29;
          *(double *)&v80[1] = v61 + 0.0;
          v81 = v63 + 0.0;
          *(double *)v79 = v20;
          *(double *)&v79[8] = v20 * 0.0;
          *(double *)&v79[16] = *(double *)&v79[8];
          *(double *)v80 = v20;
          WebCore::Path::transform((WebCore::Path *)v88, (float64x2_t *)v79);
          if (WebCore::RenderTheme::isEnabled(v6, v5))
          {
            WebCore::GraphicsContext::setFillColor(v9, (const WebCore::Color *)(*((_QWORD *)v5 + 14) + 328));
          }
          else
          {
            v64 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8);
            if ((*((_BYTE *)v5 + 45) & 2) != 0)
            {
              v69 = *((_QWORD *)v5 + 4);
              if (v69)
                v5 = *(const WebCore::RenderBox **)(v69 + 8);
              else
                v5 = 0;
            }
            v65 = WebCore::Document::styleColorOptions(v64, (const WebCore::RenderBox *)((char *)v5 + 80));
            WebCore::RenderThemeIOS::systemColor((uint64_t)v6, 192, v65, &v87);
            WebCore::GraphicsContext::setFillColor(v9, (const WebCore::Color *)&v87);
            if ((v87 & 0x8000000000000) != 0)
            {
              v75 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFLL);
              do
              {
                v76 = __ldaxr(v75);
                v77 = v76 - 1;
              }
              while (__stlxr(v77, v75));
              if (!v77)
              {
                atomic_store(1u, v75);
                WTF::fastFree((WTF *)v75, v66);
              }
            }
          }
          (*(void (**)(WebCore::GraphicsContext *, _BYTE *))(*(_QWORD *)v9 + 176))(v9, v88);
          if (*(_DWORD *)v15 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v15, v67);
          else
            *(_DWORD *)v15 -= 2;
          if (v90 != -1)
            ((void (*)(_BYTE *, uint64_t *))off_1E335C4E8[v90])(v79, &v89);
          return (WebCore::RenderTheme *)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
        }
      }
      v78 = !v34;
      v35 = 2;
      if (!v78)
        v35 = 0;
      goto LABEL_28;
    }
    v42 = (const WebCore::RenderBox *)((char *)v5 + 80);
    if (v30 >= 4)
      v74 = WebCore::RenderStyle::borderLeftWidth(v42);
    else
      v74 = WebCore::RenderStyle::borderTopWidth(v42);
    v43 = *(_QWORD *)(*((_QWORD *)v5 + 11) + 24);
    v44 = *((_DWORD *)v5 + 30);
    v45 = (v44 >> 26) & 1;
    v46 = (unsigned __int16)*((_DWORD *)v5 + 31) >> 13;
    if ((v46 - 2) >= 2)
    {
      if (v46 == 4)
      {
        v45 = (v44 & 0x4000000) == 0;
      }
      else if (v46 != 5)
      {
        v47 = 3;
        if ((v44 & 0x4000000) == 0)
          v47 = 1;
LABEL_43:
        v48 = v43 + 72;
        v49 = (WebCore::Length *)(v43 + 72 + 8 * v47);
        v50 = v27 * 64.0;
        if (v50 >= 2147483650.0)
        {
          v51 = 0x7FFFFFFF;
        }
        else if (v50 <= -2147483650.0)
        {
          v51 = 0x80000000;
        }
        else
        {
          v51 = (int)v50;
        }
        v40 = v28 + v74;
        if (*((_BYTE *)v49 + 4) == 4)
        {
          v52 = *(float *)v49;
          if (!*(_BYTE *)(v48 + 8 * v47 + 6))
            v52 = (float)*(int *)v49;
LABEL_62:
          v60 = v52 * 64.0;
          if (v60 >= 2147483650.0)
          {
            v58 = 0x7FFFFFFF;
          }
          else if (v60 <= -2147483650.0)
          {
            v58 = 0x80000000;
          }
          else
          {
            v58 = (int)v60;
          }
        }
        else
        {
          v58 = 0;
          switch(*((_BYTE *)v49 + 4))
          {
            case 0:
            case 1:
            case 9:
              v58 = v51;
              break;
            case 3:
              v59 = *(float *)v49;
              if (!*(_BYTE *)(v48 + 8 * v47 + 6))
                v59 = (float)*(int *)v49;
              v52 = (float)((float)((float)v51 * 0.015625) * v59) / 100.0;
              goto LABEL_62;
            case 0xB:
              WebCore::Length::nonNanCalculatedValue(v49, (float)v51 * 0.015625);
              goto LABEL_62;
            default:
              break;
          }
        }
        v56 = (float)v58;
        v57 = 0.015625;
        goto LABEL_66;
      }
    }
    v78 = v45 == 0;
    v47 = 2;
    if (!v78)
      v47 = 0;
    goto LABEL_43;
  }
  return this;
}

void sub_19541F640(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29)
{
  uint64_t v29;
  _DWORD *v30;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;

  if ((a20 & 0x8000000000000) != 0)
  {
    v32 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFLL);
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      WTF::fastFree((WTF *)v32, a2);
    }
  }
  if (*v30 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v30, (WTF::StringImpl *)a2);
  else
    *v30 -= 2;
  if (a29 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E335C4E8[a29])(&a9, &a22);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 104))(v29, 1);
  _Unwind_Resume(a1);
}

int *WebCore::RenderThemeIOS::adjustSliderTrackStyle(WebCore::RenderThemeIOS *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  int *result;
  unsigned int v4;
  __int16 v5;
  char v6;
  unsigned int v7;
  __int16 v8;
  char v9;

  v4 = 2;
  v5 = 4;
  v6 = 0;
  v7 = 2;
  v8 = 4;
  v9 = 0;
  result = WebCore::RenderStyle::setBorderRadius((uint64_t)a2, (uint64_t)&v4);
  if (v8 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v7);
  }
  if (v5 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v4);
  }
  return result;
}

void sub_19541F87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, char a10, unsigned int a11, char a12)
{
  if (a12 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a11);
  }
  if (a10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a9);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebCore::RenderThemeIOS::paintSliderTrack(WebCore::RenderThemeIOS *this, const WebCore::RenderObject *a2, const WebCore::PaintInfo *a3, const WebCore::IntRect *a4)
{
  int v4;
  const WebCore::RenderObject *v7;
  uint64_t v9;
  int v10;
  int v11;
  float v12;
  int v13;
  int v14;
  float v15;
  float v16;
  char v17;
  const WebCore::RenderObject *v18;
  int v19;
  int v20;
  float v21;
  int v22;
  int v23;
  float v24;
  WebCore::Document *v25;
  const WebCore::RenderObject *v26;
  const WebCore::RenderStyle *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  float v40;
  float v41;
  float v42;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  unsigned int v53;
  float v54;
  void *v55;
  void *v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  const WebCore::RenderObject *v65;
  int v66;
  double v67;
  unsigned int v68;
  float v69;
  float v70;
  float v71;
  const WebCore::RenderObject *v72;
  void *v73;
  WTF *v75;
  void *v76;
  WTF *v77;
  void *v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  __int128 v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float32x2_t v99;
  float v100;
  float v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;

  v4 = *((unsigned __int8 *)a2 + 46);
  if (v4 != 33)
    return v4 != 33;
  v7 = a2;
  v9 = *((_QWORD *)a3 + 10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 96))(v9, 1);
  v11 = *(_DWORD *)a4;
  v10 = *((_DWORD *)a4 + 1);
  v12 = (float)*(int *)a4;
  *(float *)&v107 = v12;
  *((float *)&v107 + 1) = (float)v10;
  v14 = *((_DWORD *)a4 + 2);
  v13 = *((_DWORD *)a4 + 3);
  v15 = (float)v14;
  v16 = (float)v13;
  *((float *)&v107 + 2) = (float)v14;
  *((float *)&v107 + 3) = (float)v13;
  v17 = *((_BYTE *)v7 + 45);
  v18 = v7;
  if ((v17 & 2) != 0)
    v18 = *(const WebCore::RenderObject **)(*((_QWORD *)v7 + 4) + 8);
  v19 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 11) + 32) + 148) >> 14) & 0x7F;
  if (v19 == 14)
  {
    if (v13 >= 3)
    {
      v16 = v16 + -2.0;
      *((float *)&v107 + 3) = v16;
      *((float *)&v107 + 1) = (float)v10 + 1.0;
    }
    v22 = 0;
    if (v14 >= 0)
      v23 = v14;
    else
      v23 = v14 + 1;
    DWORD2(v107) = 1082130432;
    v24 = (double)(v11 + (v23 >> 1)) + -2.0;
    *(float *)&v107 = v24;
    v15 = 4.0;
  }
  else if (v19 == 13)
  {
    if (v14 >= 3)
    {
      v15 = v15 + -2.0;
      *((float *)&v107 + 2) = v15;
      *(float *)&v107 = v12 + 1.0;
    }
    HIDWORD(v107) = 1082130432;
    if (v13 >= 0)
      v20 = v13;
    else
      v20 = v13 + 1;
    v21 = (double)(v10 + (v20 >> 1)) + -2.0;
    *((float *)&v107 + 1) = v21;
    v22 = 1;
    v16 = 4.0;
  }
  else
  {
    v22 = 1;
  }
  v25 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 3) + 8) + 40) + 8);
  v26 = v7;
  if ((v17 & 2) != 0)
  {
    v79 = *((_QWORD *)v7 + 4);
    if (v79)
      v26 = *(const WebCore::RenderObject **)(v79 + 8);
    else
      v26 = 0;
  }
  v27 = (const WebCore::RenderObject *)((char *)v26 + 80);
  v28 = *((_QWORD *)v25 + 66);
  if (v28
    && (v29 = *(_QWORD *)(v28 + 8)) != 0
    && (v30 = *(_QWORD *)(v29 + 24)) != 0
    && (v31 = *(_QWORD *)(v30 + 8)) != 0)
  {
    v32 = (*(_DWORD *)v31)++;
    v33 = *(unsigned __int8 *)(v31 + 450);
    if (v32)
    {
      *(_DWORD *)v31 = v32;
      if (!v33)
        goto LABEL_28;
      goto LABEL_26;
    }
    WebCore::Page::~Page(v31);
    WTF::fastFree(v75, v76);
    if (v33)
LABEL_26:
      LOBYTE(v33) = 2;
  }
  else
  {
    LOBYTE(v33) = 0;
  }
LABEL_28:
  if (WebCore::Document::useDarkAppearance(v25, v27))
    LOBYTE(v33) = v33 | 4;
  v34 = *((_QWORD *)v25 + 66);
  if (v34)
  {
    v35 = *(_QWORD *)(v34 + 8);
    if (v35)
    {
      v36 = *(_QWORD *)(v35 + 24);
      if (v36)
      {
        v37 = *(_QWORD *)(v36 + 8);
        if (v37)
        {
          v38 = (*(_DWORD *)v37)++;
          v39 = *(unsigned __int8 *)(v37 + 451);
          if (v38)
          {
            *(_DWORD *)v37 = v38;
            if (!v39)
              goto LABEL_36;
          }
          else
          {
            WebCore::Page::~Page(v37);
            WTF::fastFree(v77, v78);
            if (!v39)
              goto LABEL_36;
          }
          LOBYTE(v33) = v33 | 8;
        }
      }
    }
  }
LABEL_36:
  if (v15 >= 4.0)
    v40 = 2.0;
  else
    v40 = v15 * 0.5;
  if (v16 >= 4.0)
    v41 = 2.0;
  else
    v41 = v16 * 0.5;
  *(_QWORD *)&v105 = __PAIR64__(LODWORD(v41), LODWORD(v40));
  *((_QWORD *)&v105 + 1) = __PAIR64__(LODWORD(v41), LODWORD(v40));
  *(_QWORD *)&v106 = __PAIR64__(LODWORD(v41), LODWORD(v40));
  *((_QWORD *)&v106 + 1) = __PAIR64__(LODWORD(v41), LODWORD(v40));
  v103 = v106;
  v104 = v107;
  v102 = v105;
  v42 = (float)(*((float *)&v107 + 2) + 1.0) + 1.0;
  __asm { FMOV            V5.2S, #-1.0 }
  v99 = vadd_f32(*(float32x2_t *)&v107, _D5);
  v48 = (float)(*((float *)&v107 + 3) + 1.0) + 1.0;
  v100 = v42;
  v101 = v48;
  if (v42 >= v48)
  {
    if (*((float *)&v107 + 3) != 0.0)
    {
      v49 = v48 / *((float *)&v107 + 3);
LABEL_47:
      if (v49 == 1.0)
        goto LABEL_62;
      goto LABEL_50;
    }
  }
  else if (*((float *)&v107 + 2) != 0.0)
  {
    v49 = v42 / *((float *)&v107 + 2);
    goto LABEL_47;
  }
  v49 = 0.0;
LABEL_50:
  v50 = v49 * *((float *)&v102 + 1);
  *(float *)&v102 = v49 * *(float *)&v102;
  *((float *)&v102 + 1) = v49 * *((float *)&v102 + 1);
  if (*(float *)&v102 == 0.0 || v50 == 0.0)
    *(_QWORD *)&v102 = 0;
  v51 = v49 * *((float *)&v102 + 3);
  *((float *)&v102 + 2) = v49 * *((float *)&v102 + 2);
  *((float *)&v102 + 3) = v49 * *((float *)&v102 + 3);
  if (*((float *)&v102 + 2) == 0.0 || v51 == 0.0)
    *((_QWORD *)&v102 + 1) = 0;
  v52 = v49 * *((float *)&v103 + 1);
  *(float *)&v103 = v49 * *(float *)&v103;
  *((float *)&v103 + 1) = v49 * *((float *)&v103 + 1);
  if (*(float *)&v103 == 0.0 || v52 == 0.0)
    *(_QWORD *)&v103 = 0;
  *(float *)&v53 = v49 * *((float *)&v103 + 2);
  v54 = v49 * *((float *)&v103 + 3);
  *((_QWORD *)&v103 + 1) = __PAIR64__(LODWORD(v54), v53);
  if (*(float *)&v53 == 0.0 || v54 == 0.0)
    *((_QWORD *)&v103 + 1) = 0;
LABEL_62:
  WebCore::RenderThemeIOS::systemColor((uint64_t)this, 225, v33, (uint64_t *)&v90);
  (*(void (**)(uint64_t, float32x2_t *, __int128 *, uint64_t))(*(_QWORD *)v9 + 264))(v9, &v99, &v90, 1);
  if ((v90 & 0x8000000000000) != 0)
  {
    v80 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFLL);
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v80));
    if (!v82)
    {
      atomic_store(1u, v80);
      WTF::fastFree((WTF *)v80, v55);
    }
  }
  WebCore::RenderThemeIOS::systemColor((uint64_t)this, 219, v33, (uint64_t *)&v90);
  (*(void (**)(uint64_t, __int128 *, __int128 *, uint64_t))(*(_QWORD *)v9 + 264))(v9, &v104, &v90, 1);
  if ((v90 & 0x8000000000000) != 0)
  {
    v83 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFLL);
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v83);
      WTF::fastFree((WTF *)v83, v56);
    }
  }
  WebCore::RenderThemeIOS::paintSliderTicks((unsigned int *)this, v7, a3, (const WebCore::FloatRect *)&v107);
  v57 = *(_QWORD *)(*((_QWORD *)v7 + 3) + 8);
  if ((*(_WORD *)(v57 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v57 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19541FEC4);
  }
  WebCore::HTMLInputElement::minimum(*(WebCore::HTMLInputElement **)(*((_QWORD *)v7 + 3) + 8));
  v59 = v58;
  WebCore::HTMLInputElement::maximum((WebCore::HTMLInputElement *)v57);
  v61 = v60;
  (*(void (**)(_QWORD))(**(_QWORD **)(v57 + 240) + 104))(*(_QWORD *)(v57 + 240));
  v63 = 0.0;
  if (v61 > v59)
    v63 = (v62 - v59) / (v61 - v59);
  if (v22)
  {
    v64 = *((float *)&v107 + 2);
    v65 = v7;
    if ((*((_BYTE *)v7 + 45) & 2) != 0)
      v65 = *(const WebCore::RenderObject **)(*((_QWORD *)v7 + 4) + 8);
    v66 = *((_BYTE *)v7 + 45) & 2;
    v67 = v63 * v64;
    if ((*((_BYTE *)v65 + 123) & 4) != 0)
    {
      *(float *)&v68 = v64 - v67;
      *(float32x2_t *)&v107 = vadd_f32(*(float32x2_t *)&v107, (float32x2_t)v68);
    }
    v69 = v67;
    *((float *)&v107 + 2) = v69;
    goto LABEL_77;
  }
  v70 = *((float *)&v107 + 3);
  v71 = v63 * *((float *)&v107 + 3);
  *((float *)&v107 + 3) = v71;
  v66 = *((_BYTE *)v7 + 45) & 2;
  if ((*((_BYTE *)v7 + 45) & 2) != 0)
  {
    v72 = *(const WebCore::RenderObject **)(*((_QWORD *)v7 + 4) + 8);
    if (((*((_DWORD *)v72 + 31) >> 13) & 6u) - 2 > 3)
      goto LABEL_76;
LABEL_93:
    if ((*((_BYTE *)v72 + 123) & 4) == 0)
      goto LABEL_77;
    goto LABEL_76;
  }
  v72 = v7;
  if (((*((_DWORD *)v7 + 31) >> 13) & 6u) - 2 < 4)
    goto LABEL_93;
LABEL_76:
  *((float *)&v107 + 1) = (float)(v70 + *((float *)&v107 + 1)) - v71;
LABEL_77:
  v90 = v107;
  v91 = v40;
  v92 = v41;
  v93 = v40;
  v94 = v41;
  v95 = v40;
  v96 = v41;
  v97 = v40;
  v98 = v41;
  if (v66)
    v7 = *(const WebCore::RenderObject **)(*((_QWORD *)v7 + 4) + 8);
  if ((*(_BYTE *)(*((_QWORD *)v7 + 13) + 238) & 0x80) != 0)
    WebCore::RenderThemeIOS::systemColor((uint64_t)this, 207, v33, &v89);
  else
    WebCore::RenderStyle::usedAccentColor((uint64_t *)v7 + 10, v33, (unint64_t *)&v89);
  (*(void (**)(uint64_t, __int128 *, uint64_t *, uint64_t))(*(_QWORD *)v9 + 264))(v9, &v90, &v89, 1);
  if ((v89 & 0x8000000000000) != 0)
  {
    v86 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFLL);
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v86);
      WTF::fastFree((WTF *)v86, v73);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
  return v4 != 33;
}

void sub_19541FFD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 104))(v1, 1);
  _Unwind_Resume(a1);
}

unsigned int *WebCore::RenderThemeIOS::paintSliderTicks(unsigned int *this, const WebCore::RenderObject *a2, const WebCore::PaintInfo *a3, const WebCore::FloatRect *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v9;
  WebCore::Node *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  const WebCore::RenderObject *v15;
  int v16;
  float v17;
  float v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  int v27;
  WebCore::Document *v28;
  const WebCore::RenderObject *v29;
  WTF::StringImpl *v30;
  unsigned __int8 v31;
  const WebCore::RenderObject *v32;
  int v33;
  const WebCore::RenderObject *v34;
  uint64_t v35;
  float64x2_t v36;
  int8x8_t v37;
  int8x8_t v38;
  double v43;
  void *v44;
  double v45;
  double v46;
  double v47;
  int v48;
  double v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  const WebCore::RenderObject *v55;
  uint64_t v56;
  __int16 v57;
  BOOL v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  WTF *v66;
  void *v67;
  int v68;
  __int128 v69;
  double v70;
  float32x2_t v71;
  uint64_t v72[2];
  WTF::StringImpl *v73;
  int v74;
  int v75;
  __int128 v76;
  __int128 v77;
  WebCore::Node *v78;
  WebCore::Node *v79;

  if ((*((_BYTE *)a2 + 45) & 1) == 0)
  {
    v5 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v5)
    {
      if ((*(_WORD *)(v5 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        v6 = *(_DWORD *)(v5 + 24);
        *(_DWORD *)(v5 + 24) = v6 + 2;
        if (*(_DWORD *)(*(_QWORD *)(v5 + 240) + 12) != 0x2000)
          goto LABEL_95;
        v9 = (uint64_t)this;
        this = (unsigned int *)WebCore::HTMLInputElement::dataList(v5, &v79);
        v10 = v79;
        if (!v79)
          goto LABEL_94;
        WebCore::HTMLInputElement::minimum((WebCore::HTMLInputElement *)v5);
        v12 = v11;
        this = (unsigned int *)WebCore::HTMLInputElement::maximum((WebCore::HTMLInputElement *)v5);
        if (v12 >= v13)
          goto LABEL_92;
        v14 = v13;
        v15 = a2;
        if ((*((_BYTE *)a2 + 45) & 2) != 0)
          v15 = *(const WebCore::RenderObject **)(*((_QWORD *)a2 + 4) + 8);
        v16 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 11) + 32) + 148) & 0x1FC000;
        if (v16 == 212992)
        {
          v17 = (float)(*((float *)a4 + 1) + (float)(*((float *)a4 + 3) * 0.5)) + -4.0;
          v71 = (float32x2_t)0x4100000040000000;
          v18 = 0.0;
        }
        else
        {
          v18 = (float)(*(float *)a4 + (float)(*((float *)a4 + 2) * 0.5)) + -4.0;
          v71 = (float32x2_t)0x4000000041000000;
          v17 = 0.0;
        }
        v19 = *((_QWORD *)a3 + 10);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 96))(v19, 1);
        v20 = (*(double (**)(_QWORD))(**(_QWORD **)(v5 + 240) + 104))(*(_QWORD *)(v5 + 240));
        v21 = *((_QWORD *)a2 + 3);
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 40) + 8) + 528);
        v23 = 1.0;
        if (v22)
        {
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
          {
            v25 = *(_QWORD *)(v24 + 24);
            if (v25)
            {
              v26 = *(float **)(v25 + 8);
              if (v26)
              {
                v27 = (*(_DWORD *)v26)++;
                v23 = v26[91];
                if (v27)
                {
                  *(_DWORD *)v26 = v27;
                }
                else
                {
                  WebCore::Page::~Page((uint64_t)v26);
                  WTF::fastFree(v66, v67);
                  v21 = *((_QWORD *)a2 + 3);
                }
              }
            }
          }
        }
        v28 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 40) + 8);
        v29 = a2;
        if ((*((_BYTE *)a2 + 45) & 2) != 0)
        {
          v29 = (const WebCore::RenderObject *)*((_QWORD *)a2 + 4);
          if (v29)
            v29 = (const WebCore::RenderObject *)*((_QWORD *)v29 + 1);
        }
        v31 = WebCore::Document::styleColorOptions(v28, (const WebCore::RenderObject *)((char *)v29 + 80));
        if (v16 == 212992)
          goto LABEL_21;
        v34 = a2;
        if ((*((_BYTE *)a2 + 45) & 2) != 0)
          v34 = *(const WebCore::RenderObject **)(*((_QWORD *)a2 + 4) + 8);
        if (((*((_DWORD *)v34 + 31) >> 13) & 6u) - 2 <= 3)
        {
LABEL_21:
          v32 = a2;
          if ((*((_BYTE *)a2 + 45) & 2) != 0)
            v32 = *(const WebCore::RenderObject **)(*((_QWORD *)a2 + 4) + 8);
          v33 = (*((unsigned __int8 *)v32 + 123) >> 2) & 1;
        }
        else
        {
          v33 = 1;
        }
        v78 = v10;
        v35 = WebCore::FilteredElementDescendantRange<WebCore::HTMLOptionElement,&WebCore::HTMLDataListElement::isSuggestion>::first((uint64_t *)&v78, v30);
        if (!v35)
        {
LABEL_91:
          this = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 104))(v19, 1);
          v10 = v79;
          if (v79)
          {
LABEL_92:
            if (*((_DWORD *)v10 + 6) == 2)
            {
              if ((*((_WORD *)v10 + 15) & 0x400) == 0)
                this = WebCore::Node::removedLastRef(v10, a2);
            }
            else
            {
              *((_DWORD *)v10 + 6) -= 2;
            }
          }
LABEL_94:
          v6 = *(_DWORD *)(v5 + 24) - 2;
LABEL_95:
          if (v6)
          {
            *(_DWORD *)(v5 + 24) = v6;
          }
          else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          {
            return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
          }
          return this;
        }
        v70 = v14 - v12;
        v36 = vmulq_f64(vcvtq_f64_f32(v71), (float64x2_t)vdupq_n_s64(0x4050000000000000uLL));
        v37 = (int8x8_t)vmovn_s64(vcgeq_f64(v36, (float64x2_t)vdupq_n_s64(0x41DFFFFFFFC00000uLL)));
        v38 = vorr_s8((int8x8_t)(*(_QWORD *)&v37 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8((int8x8_t)vmovn_s64(vcvtq_s64_f64(vmaxnmq_f64(v36, (float64x2_t)vdupq_n_s64(0xC1E0000000000000)))), v37));
        __asm { FMOV            V0.4S, #1.0 }
        v69 = _Q0;
LABEL_30:
        v43 = COERCE_DOUBLE(WebCore::HTMLInputElement::listOptionValueAsDouble((WebCore::InputType **)v5, (const WebCore::HTMLOptionElement *)v35));
        if (!(_BYTE)v44)
          goto LABEL_52;
        v45 = v43;
        v46 = (v43 - v12) / v70;
        if (v33)
          v46 = 1.0 - v46;
        if (v16 == 212992)
          v18 = *(float *)a4 + v46 * (float)(*((float *)a4 + 2) - v71.f32[0]);
        else
          v17 = *((float *)a4 + 1) + v46 * (float)(*((float *)a4 + 3) - v71.f32[1]);
        v47 = v18 * 64.0;
        v48 = (int)v47;
        if (v47 <= -2147483650.0)
          v48 = 0x80000000;
        if (v47 >= 2147483650.0)
          v48 = 0x7FFFFFFF;
        LODWORD(v72[0]) = v48;
        v49 = v17 * 64.0;
        if (v49 >= 2147483650.0)
        {
          v50 = 0x7FFFFFFF;
        }
        else if (v49 <= -2147483650.0)
        {
          v50 = 0x80000000;
        }
        else
        {
          v50 = (int)v49;
        }
        HIDWORD(v72[0]) = v50;
        v72[1] = (uint64_t)v38;
        LODWORD(v73) = WebCore::snapRectToDevicePixels((int *)v72, v23);
        HIDWORD(v73) = v51;
        v74 = v52;
        v75 = v53;
        v76 = v69;
        v77 = v69;
        if (v20 >= v45)
        {
          v55 = a2;
          if ((*((_BYTE *)a2 + 45) & 2) != 0)
            v55 = *(const WebCore::RenderObject **)(*((_QWORD *)a2 + 4) + 8);
          if ((*(_BYTE *)(*((_QWORD *)v55 + 13) + 238) & 0x80) == 0)
          {
            WebCore::RenderStyle::usedAccentColor((uint64_t *)v55 + 10, v31, (unint64_t *)v72);
            goto LABEL_51;
          }
          v54 = 207;
        }
        else
        {
          v54 = 224;
        }
        WebCore::RenderThemeIOS::systemColor(v9, v54, v31, v72);
LABEL_51:
        (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *, uint64_t))(*(_QWORD *)v19 + 264))(v19, &v73, v72, 1);
        if ((v72[0] & 0x8000000000000) != 0)
        {
          v63 = (unsigned int *)(v72[0] & 0xFFFFFFFFFFFFLL);
          do
          {
            v64 = __ldaxr(v63);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v63));
          if (!v65)
          {
            atomic_store(1u, v63);
            WTF::fastFree((WTF *)v63, v44);
          }
        }
LABEL_52:
        while (1)
        {
          v56 = *(_QWORD *)(v35 + 80);
          if (!v56)
            break;
LABEL_53:
          while (1)
          {
            v35 = v56;
            v57 = *(_WORD *)(v56 + 28);
            if ((v57 & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(v35 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
            {
              break;
            }
            if ((v57 & 4) != 0)
            {
              v56 = *(_QWORD *)(v35 + 80);
              if (v56)
                continue;
            }
            if ((WebCore::Node *)v35 == v10)
              goto LABEL_91;
            while (1)
            {
              v56 = *(_QWORD *)(v35 + 56);
              if (v56)
                break;
              v35 = *(_QWORD *)(v35 + 32);
              if (v35)
                _ZF = v35 == (_QWORD)v10;
              else
                _ZF = 1;
              if (_ZF)
                goto LABEL_91;
            }
          }
          if (!*(_BYTE *)(v35 + 112))
          {
            v60 = *(_QWORD *)(v35 + 32);
            if (!v60
              || (*(_WORD *)(v60 + 28) & 0x10) == 0
              || *(_QWORD *)(*(_QWORD *)(v60 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
              || !*(_BYTE *)(v60 + 112))
            {
              WebCore::HTMLOptionElement::value((WTF::StringImpl *)v35, (WTF::StringImpl *)v44, &v73);
              v61 = v73;
              if (v73)
              {
                v62 = *((_DWORD *)v73 + 1);
                v73 = 0;
                if (*(_DWORD *)v61 == 2)
                {
                  v68 = v62;
                  WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v44);
                  if (v68)
                    goto LABEL_30;
                }
                else
                {
                  *(_DWORD *)v61 -= 2;
                  if (v62)
                    goto LABEL_30;
                }
              }
            }
          }
        }
        if ((WebCore::Node *)v35 != v10)
        {
          do
          {
            v56 = *(_QWORD *)(v35 + 56);
            if (v56)
              goto LABEL_53;
            v35 = *(_QWORD *)(v35 + 32);
            if (v35)
              v59 = v35 == (_QWORD)v10;
            else
              v59 = 1;
          }
          while (!v59);
        }
        goto LABEL_91;
      }
    }
  }
  return this;
}

void sub_1954206D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WebCore::Node *a27)
{
  uint64_t v27;
  uint64_t v28;
  void *v30;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 104))(v28, 1);
  if (a27)
  {
    if (*((_DWORD *)a27 + 6) == 2)
    {
      if ((*((_WORD *)a27 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a27, v30);
    }
    else
    {
      *((_DWORD *)a27 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v27 + 24) == 2)
  {
    if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v27, v30);
  }
  else
  {
    *(_DWORD *)(v27 + 24) -= 2;
  }
  _Unwind_Resume(a1);
}

int *WebCore::RenderThemeIOS::adjustSliderThumbSize(WebCore::RenderThemeIOS *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  int *result;
  uint64_t v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  __int16 v9;
  char v10;
  unsigned int v11;
  __int16 v12;
  char v13;

  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 148) & 0x1F8000) == 0x70000)
  {
    v8 = 50;
    v9 = 3;
    v10 = 0;
    v11 = 50;
    v12 = 3;
    v13 = 0;
    result = WebCore::RenderStyle::setBorderRadius((uint64_t)a2, (uint64_t)&v8);
    if (v12 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v11);
    }
    if (v9 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v8);
    }
    v5 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
    v6 = *(unsigned __int8 *)(v5 + 8);
    v7 = (v6 - 7) < 4 || v6 == 0;
    if (v7 || (v6 - 5) < 2 || !*(_BYTE *)(v5 + 16))
    {
      v8 = 16;
      v9 = 4;
      v10 = 0;
      WebCore::RenderStyle::setWidth((uint64_t)a2, (WebCore::Length *)&v8);
      if (v9 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v8);
      }
      v8 = 16;
      v9 = 4;
      v10 = 0;
      result = (int *)WebCore::RenderStyle::setHeight((uint64_t)a2, (WebCore::Length *)&v8);
      if (v9 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v8);
      }
    }
  }
  return result;
}

void sub_195420984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, char a10, unsigned int a11, char a12)
{
  if (a10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a9);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::RenderThemeIOS::adjustSwitchStyle(WebCore::RenderThemeIOS *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  WTF **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  unsigned int v10;
  __int16 v11;
  char v12;

  v4 = (WTF **)((char *)a2 + 8);
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
  if (!*(_BYTE *)(v5 + 8) || !*(_BYTE *)(v5 + 16))
  {
    *(float *)&v10 = *(float *)(*((_QWORD *)a2 + 3) + 184) * 51.0;
    v11 = 4;
    v12 = 1;
    if (((*((_DWORD *)a2 + 11) >> 13) & 6u) - 2 < 4)
      WebCore::RenderStyle::setHeight((uint64_t)a2, (WebCore::Length *)&v10);
    else
      WebCore::RenderStyle::setWidth((uint64_t)a2, (WebCore::Length *)&v10);
    if (v11 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v10);
    }
    *(float *)&v10 = *(float *)(*((_QWORD *)a2 + 3) + 184) * 31.0;
    v11 = 4;
    v12 = 1;
    if (((*((_DWORD *)a2 + 11) >> 13) & 6u) - 2 < 4)
      WebCore::RenderStyle::setWidth((uint64_t)a2, (WebCore::Length *)&v10);
    else
      WebCore::RenderStyle::setHeight((uint64_t)a2, (WebCore::Length *)&v10);
    if (v11 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v10);
    }
  }
  v6 = *((_QWORD *)a2 + 2) & 0x1FLL;
  if ((_DWORD)v6 == 3)
  {
    v7 = 20;
  }
  else
  {
    if ((_DWORD)v6 != 1)
      goto LABEL_14;
    v7 = 19;
  }
  *((_QWORD *)a2 + 2) = v7 | *((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFFFE0;
LABEL_14:
  if ((*(_BYTE *)(*((_QWORD *)*v4 + 2) + 52) & 0x10) != 0 && (*(_BYTE *)(*((_QWORD *)*v4 + 2) + 52) & 0xF) != 0)
  {
    v8 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v4);
    WTF::DataRef<WebCore::StyleBackgroundData>::access((uint64_t *)v8 + 2);
    *(_BYTE *)(v9 + 52) &= 0xF0u;
  }
}

void sub_195420C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int a10, char a11)
{
  if (a11 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::RenderThemeIOS::paintSwitchThumb(WebCore::RenderThemeIOS *this, const WebCore::RenderObject *a2, const WebCore::PaintInfo *a3, const WebCore::FloatRect *a4)
{
  WebCore *ControlStyleStatesForRendererInternal;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  void (**v17)(WebCore::RenderThemeIOS *__hidden);
  WTF::MonotonicTime *v18;
  double v19;
  double v20;
  double v21;
  float v22;
  float v23;
  void (**v24)(WebCore::RenderThemeIOS *__hidden);
  double v25;
  double v26;
  double v27;
  __double2 v28;
  double v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  void (**v35)(WebCore::RenderThemeIOS *__hidden);
  WTF::MonotonicTime *v36;
  double v37;
  double v38;
  double v39;
  float v40;
  void (**v41)(WebCore::RenderThemeIOS *__hidden);
  double v42;
  double v43;
  double v44;
  __double2 v45;
  double v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  int32x2_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  void *v74;
  void *v75;
  void *v76;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  int32x2_t v87;
  uint64_t v88;
  _DWORD v89[4];
  int32x4_t v90;
  int32x4_t v91;
  char v92;
  _BYTE v93[12];
  float v94;
  int32x4_t v95;
  int32x4_t v96;
  int v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  ControlStyleStatesForRendererInternal = WebCore::effectiveRendererForAppearance(a2, a2);
  if (ControlStyleStatesForRendererInternal)
  {
    ControlStyleStatesForRendererInternal = (WebCore *)WebCore::RenderTheme::extractControlStyleStatesForRendererInternal(this, ControlStyleStatesForRendererInternal);
    v9 = (int)ControlStyleStatesForRendererInternal;
  }
  else
  {
    v9 = 0;
  }
  WebCore::RenderThemeIOS::systemFocusRingColor(ControlStyleStatesForRendererInternal, &v88);
  v10 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40);
  if (v10)
    v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0;
  else
    v11 = 1;
  if (!v11 && (v12 = *(_QWORD *)(v10 + 200)) != 0)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  if ((*(_WORD *)(v13 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1954212BCLL);
  }
  *(_DWORD *)(v13 + 24) += 2;
  if ((byte_1ECE81F92 & 1) == 0)
  {
    qword_1ECE81FA8 = 0x4034F1A6C638D03FLL;
    qword_1ECE81FB0 = 0x3FE8000000000000;
    qword_1ECE81FB8 = 0x402BB4CC565B46E7;
    qword_1ECE81FC0 = 0x3FF0000000000000;
    qword_1ECE81FC8 = 0x3FF2246D6CFDF9ECLL;
    byte_1ECE81F92 = 1;
  }
  if ((byte_1ECE81F93 & 1) == 0)
  {
    qword_1ECE81FD0 = 0x4031F3B3855544C8;
    qword_1ECE81FD8 = 0x3FEBD70A3D70A3D7;
    qword_1ECE81FE0 = 0x4021B3D63A5E74ADLL;
    qword_1ECE81FE8 = 0x3FF0000000000000;
    qword_1ECE81FF0 = 0x3FFC3B7A1FCEC9DDLL;
    byte_1ECE81F93 = 1;
  }
  v14 = *(_QWORD *)(v13 + 240);
  if (*(_DWORD *)(v14 + 12) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1954212F0);
  }
  if (*(_BYTE *)(v14 + 36))
    v15 = *(_BYTE *)(v14 + 41) != 0;
  else
    v15 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 8) + 230) & 1;
  v16 = *(unsigned __int8 *)(v14 + 42);
  if (*(double *)(v14 + 48) == 0.0)
  {
    v23 = 1.0;
  }
  else
  {
    {
      v17 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      byte_1ECE88AB8 = 0;
      unk_1ECE88AC0 = 0u;
      unk_1ECE88AD0 = 0u;
      v17 = &off_1E335BC30;
      WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
      unk_1ECE88AB0 = 0;
    }
    v18 = (WTF::MonotonicTime *)((uint64_t (*)(uint64_t *))v17[63])(&WebCore::RenderTheme::singleton(void)::theme);
    v20 = v19;
    WTF::MonotonicTime::now(v18);
    v22 = (v21 - *(double *)(v14 + 48)) / v20;
    if (v22 <= 1.0)
      v23 = v22;
    else
      v23 = 1.0;
  }
  {
    v24 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    byte_1ECE88AB8 = 0;
    unk_1ECE88AC0 = 0u;
    unk_1ECE88AD0 = 0u;
    v24 = &off_1E335BC30;
    WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
    unk_1ECE88AB0 = 0;
  }
  v25 = ((double (*)(uint64_t *))v24[63])(&WebCore::RenderTheme::singleton(void)::theme) * v23;
  if (*(double *)&qword_1ECE81FB0 >= 1.0)
  {
    v26 = *(double *)&qword_1ECE81FC0 + *(double *)&qword_1ECE81FC8 * v25;
    v29 = exp(-(v25 * *(double *)&qword_1ECE81FA8));
  }
  else
  {
    v26 = exp(-(v25 * *(double *)&qword_1ECE81FB0) * *(double *)&qword_1ECE81FA8);
    v27 = *(double *)&qword_1ECE81FC0;
    v28 = __sincos_stret(v25 * *(double *)&qword_1ECE81FB8);
    v29 = *(double *)&qword_1ECE81FC8 * v28.__sinval + v27 * v28.__cosval;
  }
  v30 = 1.0 - v26 * v29;
  v31 = 1.0;
  if (v30 <= 1.0)
    v32 = v30;
  else
    v32 = 1.0;
  if (v30 >= 0.0)
    v33 = v32;
  else
    v33 = 0.0;
  v34 = *(_QWORD *)(v13 + 240);
  if (*(_DWORD *)(v34 + 12) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x195421310);
  }
  if (*(double *)(v34 + 56) != 0.0)
  {
    {
      v35 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      byte_1ECE88AB8 = 0;
      unk_1ECE88AC0 = 0u;
      unk_1ECE88AD0 = 0u;
      v35 = &off_1E335BC30;
      WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
      unk_1ECE88AB0 = 0;
    }
    v36 = (WTF::MonotonicTime *)((uint64_t (*)(uint64_t *))v35[64])(&WebCore::RenderTheme::singleton(void)::theme);
    v38 = v37;
    WTF::MonotonicTime::now(v36);
    v40 = (v39 - *(double *)(v34 + 56)) / v38;
    if (v40 <= 1.0)
      v31 = v40;
    else
      v31 = 1.0;
  }
  {
    v41 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    byte_1ECE88AB8 = 0;
    unk_1ECE88AC0 = 0u;
    unk_1ECE88AD0 = 0u;
    v41 = &off_1E335BC30;
    WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
    unk_1ECE88AB0 = 0;
  }
  v42 = ((double (*)(uint64_t *))v41[64])(&WebCore::RenderTheme::singleton(void)::theme) * v31;
  if (*(double *)&qword_1ECE81FD8 >= 1.0)
  {
    v43 = *(double *)&qword_1ECE81FE8 + *(double *)&qword_1ECE81FF0 * v42;
    v46 = exp(-(v42 * *(double *)&qword_1ECE81FD0));
  }
  else
  {
    v43 = exp(-(v42 * *(double *)&qword_1ECE81FD8) * *(double *)&qword_1ECE81FD0);
    v44 = *(double *)&qword_1ECE81FE8;
    v45 = __sincos_stret(v42 * *(double *)&qword_1ECE81FE0);
    v46 = *(double *)&qword_1ECE81FF0 * v45.__sinval + v44 * v45.__cosval;
  }
  v47 = 1.0 - v43 * v46;
  v48 = 1.0;
  if (v47 <= 1.0)
    v48 = v47;
  if (v47 >= 0.0)
    v49 = v48;
  else
    v49 = 0.0;
  v50 = *((_QWORD *)a3 + 10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 96))(v50, 1);
  v52 = *((float *)a4 + 2);
  v53 = *((float *)a4 + 3);
  if ((v9 & 0x20000) != 0)
    v54 = 31.0;
  else
    v54 = 51.0;
  if ((v9 & 0x20000) != 0)
    v55 = 51.0;
  else
    v55 = 31.0;
  v56 = v52 / v54;
  v57 = v53 / v55;
  if (v57 < v56)
    v56 = v57;
  *(float *)v51.i32 = v56 * 31.0;
  if ((v9 & 0x20000) != 0)
  {
    v58 = *((float *)a4 + 1);
    v60 = (float)((float)(v52 - *(float *)v51.i32) * 0.5) + *(float *)a4;
    v59 = v58;
    v61 = v56 * 31.0;
    v62 = v56 * 51.0;
  }
  else
  {
    v58 = *(float *)a4;
    v59 = (float)((float)(v53 - *(float *)v51.i32) * 0.5) + *((float *)a4 + 1);
    v60 = *(float *)a4;
    v61 = v56 * 51.0;
    v62 = v56 * 31.0;
  }
  v63 = v56 + v56;
  v64 = *(float *)v51.i32 + (float)((float)(v56 + v56) * -2.0);
  v65 = 1.0 - v49;
  if (v16)
    v65 = v49;
  v66 = (float)((float)(v56 * 51.0) - (float)(v64 + (float)((float)((float)(v56 + v56) * 4.0) * v65)))
      + (float)(v63 * -2.0);
  v67 = v33 * v66;
  *(float *)v51.i32 = *(float *)v51.i32 * 0.5;
  v87 = v51;
  *(float *)v51.i32 = *(float *)v51.i32 - v63;
  v68 = v63 + v58;
  v69 = v66 - (float)(v33 * v66);
  if (((v9 & 0x1000) == 0) == v15)
    v69 = v67;
  v70 = v69 + v68;
  v71 = v63 + v60;
  if ((v9 & 0x20000) != 0)
  {
    v72 = v64;
  }
  else
  {
    v71 = v70;
    v70 = v63 + v59;
    v72 = v64 + (float)((float)((float)(v56 + v56) * 4.0) * v65);
  }
  if ((v9 & 0x20000) != 0)
    v73 = v64 + (float)((float)((float)(v56 + v56) * 4.0) * v65);
  else
    v73 = v64;
  *(float *)v89 = v71;
  *(float *)&v89[1] = v70;
  *(float *)&v89[2] = v72;
  *(float *)&v89[3] = v73;
  v90 = vdupq_lane_s32(v51, 0);
  v91 = v90;
  *(_DWORD *)v93 = 0;
  *(float32x2_t *)&v93[4] = vmul_n_f32((float32x2_t)0x40C0000040200000, v56);
  v95.i64[0] = 0x110400000000001FLL;
  v95.i64[1] = 0x3F80000000000000;
  v96.i8[0] = 1;
  WebCore::GraphicsContextState::setDropShadow(v50 + 8, (uint64_t)v93);
  if (v96.i8[0])
  {
    if ((v95.i64[0] & 0x8000000000000) != 0)
    {
      v84 = (unsigned int *)(v95.i64[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        atomic_store(1u, v84);
        WTF::fastFree((WTF *)v84, v74);
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 88))(v50, v50 + 8);
  *(float *)v93 = v60;
  *(float *)&v93[4] = v59;
  *(float *)&v93[8] = v61;
  v94 = v62;
  v95 = vdupq_lane_s32(v87, 0);
  v96 = v95;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v50 + 464))(v50, v93);
  *(_QWORD *)v93 = 0x11040000FFFFFFFFLL;
  (*(void (**)(uint64_t, _DWORD *, _BYTE *, uint64_t))(*(_QWORD *)v50 + 264))(v50, v89, v93, 1);
  if ((*(_QWORD *)v93 & 0x8000000000000) != 0)
  {
    v78 = (unsigned int *)(*(_QWORD *)v93 & 0xFFFFFFFFFFFFLL);
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
    {
      atomic_store(1u, v78);
      WTF::fastFree((WTF *)v78, v75);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v50 + 448))(v50);
  if ((v9 & 4) != 0)
  {
    v97 = 0;
    WebCore::Path::addRoundedRect((WebCore::Path *)v93, (WebCore::FloatRect *)v89, 0);
    (*(void (**)(uint64_t, _BYTE *, uint64_t *, float))(*(_QWORD *)v50 + 616))(v50, v93, &v88, 0.0);
    if (v97 != -1)
      ((void (*)(char *, _BYTE *))off_1E335C4E8[v97])(&v92, &v93[8]);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 104))(v50, 1);
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13, v76);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  if ((v88 & 0x8000000000000) != 0)
  {
    v81 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFLL);
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      atomic_store(1u, v81);
      WTF::fastFree((WTF *)v81, v76);
    }
  }
  return 0;
}

void sub_19542150C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31)
{
  uint64_t v31;
  uint64_t v32;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;

  if (a31 != -1)
    ((void (*)(char *, uint64_t *))off_1E335C4E8[a31])(&a22, &a24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 104))(v32, 1);
  if (*(_DWORD *)(v31 + 24) == 2)
  {
    if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v31, v34);
  }
  else
  {
    *(_DWORD *)(v31 + 24) -= 2;
  }
  if ((a12 & 0x8000000000000) != 0)
  {
    v35 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      WTF::fastFree((WTF *)v35, v34);
    }
  }
  _Unwind_Resume(a1);
}

void sub_195421628()
{
  JUMPOUT(0x1954215E4);
}

uint64_t WebCore::RenderThemeIOS::paintSwitchTrack(WebCore::RenderThemeIOS *this, const WebCore::RenderObject **a2, const WebCore::PaintInfo *a3, const WebCore::FloatRect *a4)
{
  WebCore *v8;
  int ControlStyleStatesForRendererInternal;
  const WebCore::RenderObject *v10;
  unsigned __int8 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WebCore::Document *v19;
  const WebCore::RenderObject *v20;
  const WebCore::RenderObject *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t (**v28)();
  int v29;
  uint64_t v30;
  int v31;
  void (**v32)(WebCore::RenderThemeIOS *__hidden);
  WTF::MonotonicTime *v33;
  double v34;
  double v35;
  double v36;
  float v37;
  float v38;
  float v39;
  int v40;
  int v41;
  unsigned int v42;
  const WebCore::RenderObject *v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  float v50;
  void *v51;
  int32x2_t v52;
  int v53;
  uint64_t *v54;
  float v55;
  void *v56;
  unint64_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  uint64_t (**v69)();
  void *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t (**v77)();
  int v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  unint64_t v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  int32x2_t v92;
  float v93;
  float v94;
  float v95;
  double v96;
  void *v97;
  void *v98;
  const WebCore::RenderObject *v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int v144;
  const WebCore::PaintInfo *v145;
  int v146;
  float v147;
  uint64_t v148;
  int v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  float v157;
  int32x4_t v158;
  int32x4_t v159;
  unint64_t *v160;
  int v161;
  float v162;
  double v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  int32x4_t v167;
  int32x4_t v168;
  int v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v8 = WebCore::effectiveRendererForAppearance((WebCore *)a2, (const WebCore::RenderObject *)a2);
  if (v8)
    ControlStyleStatesForRendererInternal = WebCore::RenderTheme::extractControlStyleStatesForRendererInternal(this, v8);
  else
    ControlStyleStatesForRendererInternal = 0;
  v10 = (const WebCore::RenderObject *)a2;
  if ((*((_BYTE *)a2 + 45) & 2) != 0)
  {
    v10 = a2[4];
    if (v10)
      v10 = (const WebCore::RenderObject *)*((_QWORD *)v10 + 1);
  }
  v11 = WebCore::Document::styleColorOptions(*(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)a2[3] + 1) + 40) + 8), (const WebCore::RenderObject *)((char *)v10 + 80));
  WebCore::RenderThemeIOS::systemColor((uint64_t)this, 210, v11, (uint64_t *)&v150);
  v12 = **(_QWORD **)(*((_QWORD *)a2[3] + 1) + 40);
  if (v12)
    v13 = (*(_WORD *)(v12 + 28) & 0x80) == 0;
  else
    v13 = 1;
  if (!v13 && (v14 = *(_QWORD *)(v12 + 200)) != 0)
    v15 = *(_QWORD *)(v14 + 8);
  else
    v15 = 0;
  if ((*(_WORD *)(v15 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195421C08);
  }
  *(_DWORD *)(v15 + 24) += 2;
  v16 = *(_QWORD *)(v15 + 240);
  if (*(_DWORD *)(v16 + 12) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x19542209CLL);
  }
  v17 = *(unsigned __int8 *)(v16 + 42);
  v18 = *((_QWORD *)a3 + 10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 96))(v18, 1);
  v149 = ControlStyleStatesForRendererInternal;
  v145 = a3;
  if ((*((_BYTE *)a2 + 45) & 2) != 0)
  {
    v100 = a2[4];
    if (v100)
      v20 = (const WebCore::RenderObject *)*((_QWORD *)v100 + 1);
    else
      v20 = 0;
    v21 = a2[4];
    v19 = *(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)a2[3] + 1) + 40) + 8);
    if (v21)
      v21 = (const WebCore::RenderObject *)*((_QWORD *)v21 + 1);
  }
  else
  {
    v19 = *(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)a2[3] + 1) + 40) + 8);
    v20 = (const WebCore::RenderObject *)a2;
    v21 = (const WebCore::RenderObject *)a2;
  }
  v22 = WebCore::Document::styleColorOptions(v19, (const WebCore::RenderObject *)((char *)v21 + 80));
  v23 = 0;
  v24 = **(_QWORD **)(*((_QWORD *)a2[3] + 1) + 40);
  if (v24 && (*(_WORD *)(v24 + 28) & 0x80) != 0)
  {
    v25 = *(_QWORD *)(v24 + 200);
    if (v25)
      v23 = *(_QWORD *)(v25 + 8);
    else
      v23 = 0;
  }
  if ((*(_WORD *)(v23 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v23 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195421C28);
  }
  *(_DWORD *)(v23 + 24) += 2;
  v26 = *(_QWORD *)(v23 + 240);
  if (*(_DWORD *)(v26 + 12) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1954220BCLL);
  }
  if (*(_BYTE *)(v26 + 36))
    LOBYTE(v27) = *(_BYTE *)(v26 + 41) != 0;
  else
    v27 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8) + 230) & 1;
  v148 = v18;
  v146 = v17;
  {
    v28 = (uint64_t (**)())WebCore::Theme::singleton(void)::theme;
  }
  else
  {
    v28 = &off_1E3354DA0;
    WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
  }
  v29 = ((uint64_t (*)(uint64_t *))v28[6])(&WebCore::Theme::singleton(void)::theme);
  v30 = *(_QWORD *)(v23 + 240);
  if (*(_DWORD *)(v30 + 12) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1954220DCLL);
  }
  v31 = v29;
  if (*(double *)(v30 + 48) == 0.0)
  {
    v38 = 1.0;
  }
  else
  {
    {
      v32 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      byte_1ECE88AB8 = 0;
      unk_1ECE88AC0 = 0u;
      unk_1ECE88AD0 = 0u;
      v32 = &off_1E335BC30;
      WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
      unk_1ECE88AB0 = 0;
    }
    v33 = (WTF::MonotonicTime *)((uint64_t (*)(uint64_t *))v32[63])(&WebCore::RenderTheme::singleton(void)::theme);
    v35 = v34;
    WTF::MonotonicTime::now(v33);
    v37 = (v36 - *(double *)(v30 + 48)) / v35;
    if (v37 <= 1.0)
      v38 = v37;
    else
      v38 = 1.0;
  }
  v39 = powf(v38, 3.0);
  v40 = 1384151160;
  if (v31)
    v40 = -427788168;
  v41 = 696285304;
  if (v31)
    v41 = -947881864;
  if ((v22 & 4) != 0)
    v42 = v40;
  else
    v42 = v41;
  if ((*(_DWORD *)(*((_QWORD *)v20 + 13) + 236) & 0x800000) != 0)
  {
    v154 = v150;
    if ((v150 & 0x8000000000000) != 0)
    {
      v111 = (unsigned int *)(v150 & 0xFFFFFFFFFFFFLL);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 + 1, v111));
    }
  }
  else
  {
    v43 = (const WebCore::RenderObject *)a2;
    if ((*((_BYTE *)a2 + 45) & 2) != 0)
    {
      v43 = a2[4];
      if (v43)
        v43 = (const WebCore::RenderObject *)*((_QWORD *)v43 + 1);
    }
    v44 = WebCore::Document::styleColorOptions(*(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)a2[3] + 1) + 40) + 8), (const WebCore::RenderObject *)((char *)v43 + 80));
    WebCore::RenderStyle::usedAccentColor((uint64_t *)v20 + 10, v44, &v154);
  }
  if ((v27 & 1) != 0)
  {
    v45 = bswap32(v42) | 0x1104000000000000;
    v46 = v154;
    if ((v154 & 0x8000000000000) != 0)
    {
      v47 = (unsigned int *)(v154 & 0xFFFFFFFFFFFFLL);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 + 1, v47));
    }
  }
  else
  {
    v45 = v154;
    if ((v154 & 0x8000000000000) != 0)
    {
      v113 = (unsigned int *)(v154 & 0xFFFFFFFFFFFFLL);
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 + 1, v113));
    }
    v46 = bswap32(v42) | 0x1104000000000000;
  }
  v49 = v148;
  v153 = v45;
  if ((v45 & 0x8000000000000) != 0)
  {
    v107 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFLL);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 + 1, v107));
  }
  v50 = (float)((float)(v38 * v38) * 3.0) + (float)(v39 * -2.0);
  v152 = v46;
  if ((v46 & 0x8000000000000) != 0)
  {
    v109 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 + 1, v109));
  }
  v155 = 0x600000000;
  v156 = 1;
  v163 = v50;
  *(double *)&v164 = (float)(1.0 - v50);
  *(double *)&v165 = COERCE_DOUBLE(&v155);
  v166 = &v153;
  v167.i64[0] = (uint64_t)&v164;
  v167.i64[1] = (uint64_t)&v152;
  v168.i64[0] = (uint64_t)&v163;
  v160 = &v165;
  std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>((uint64_t *)&v160, (uint64_t *)&v151);
  if ((v152 & 0x8000000000000) != 0)
  {
    v115 = (unsigned int *)(v152 & 0xFFFFFFFFFFFFLL);
    do
    {
      v116 = __ldaxr(v115);
      v117 = v116 - 1;
    }
    while (__stlxr(v117, v115));
    v49 = v148;
    if (!v117)
    {
      atomic_store(1u, v115);
      WTF::fastFree((WTF *)v115, v51);
    }
  }
  if ((v153 & 0x8000000000000) != 0)
  {
    v118 = (unsigned int *)(v153 & 0xFFFFFFFFFFFFLL);
    do
    {
      v119 = __ldaxr(v118);
      v120 = v119 - 1;
    }
    while (__stlxr(v120, v118));
    v49 = v148;
    if (!v120)
    {
      atomic_store(1u, v118);
      WTF::fastFree((WTF *)v118, v51);
    }
  }
  if ((v46 & 0x8000000000000) != 0)
  {
    v121 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
    do
    {
      v122 = __ldaxr(v121);
      v123 = v122 - 1;
    }
    while (__stlxr(v123, v121));
    v49 = v148;
    if (!v123)
    {
      atomic_store(1u, v121);
      WTF::fastFree((WTF *)v121, v51);
    }
  }
  if ((v45 & 0x8000000000000) != 0)
  {
    v124 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFLL);
    do
    {
      v125 = __ldaxr(v124);
      v126 = v125 - 1;
    }
    while (__stlxr(v126, v124));
    v49 = v148;
    if (!v126)
    {
      atomic_store(1u, v124);
      WTF::fastFree((WTF *)v124, v51);
    }
  }
  v53 = v149;
  if ((v154 & 0x8000000000000) != 0)
  {
    v127 = (unsigned int *)(v154 & 0xFFFFFFFFFFFFLL);
    do
    {
      v128 = __ldaxr(v127);
      v129 = v128 - 1;
    }
    while (__stlxr(v129, v127));
    v49 = v148;
    v53 = v149;
    if (!v129)
    {
      atomic_store(1u, v127);
      WTF::fastFree((WTF *)v127, v51);
    }
  }
  v54 = &WebCore::MathMLNames::rspaceAttr;
  if (*(_DWORD *)(v23 + 24) == 2)
  {
    if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v23, v51);
  }
  else
  {
    *(_DWORD *)(v23 + 24) -= 2;
  }
  if ((v53 & 8) == 0)
  {
    if ((v151 & 0x8000000000000) != 0)
      v55 = *(float *)((v151 & 0xFFFFFFFFFFFFLL) + 0x10);
    else
      v55 = (float)v151 / 255.0;
    WebCore::Color::colorWithAlpha((uint64_t)&v151, v55 * 0.4, (uint64_t *)&v165);
    v57 = v165;
    if ((v151 & 0x8000000000000) != 0)
    {
      if ((v165 & 0x8000000000000) == 0
        || *(float *)((v151 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v165 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v151 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v165 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v151 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v165 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v151 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v165 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v151) != HIBYTE(v165)
        || BYTE6(v151) != BYTE6(v165))
      {
        v139 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFLL);
        do
        {
          v140 = __ldaxr(v139);
          v141 = v140 - 1;
        }
        while (__stlxr(v141, v139));
        v49 = v148;
        v53 = v149;
        v54 = &WebCore::MathMLNames::rspaceAttr;
        if (!v141)
        {
          atomic_store(1u, v139);
          WTF::fastFree((WTF *)v139, v56);
        }
        goto LABEL_71;
      }
    }
    else
    {
      if (v151 != v165 || (v165 & 0x8000000000000) != 0)
      {
LABEL_71:
        v151 = v165;
        goto LABEL_72;
      }
      v57 = v151;
    }
    if ((v57 & 0x8000000000000) != 0)
    {
      v101 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFLL);
      do
      {
        v102 = __ldaxr(v101);
        v103 = v102 - 1;
      }
      while (__stlxr(v103, v101));
      v49 = v148;
      v53 = v149;
      v54 = &WebCore::MathMLNames::rspaceAttr;
      if (!v103)
      {
        atomic_store(1u, v101);
        WTF::fastFree((WTF *)v101, v56);
      }
    }
  }
LABEL_72:
  v58 = *((float *)a4 + 2);
  v59 = *((float *)a4 + 3);
  if ((v53 & 0x20000) != 0)
    v60 = 31.0;
  else
    v60 = 51.0;
  if ((v53 & 0x20000) != 0)
    v61 = 51.0;
  else
    v61 = 31.0;
  v62 = v58 / v60;
  v63 = v59 / v61;
  if (v63 >= v62)
    v64 = v62;
  else
    v64 = v63;
  *(float *)v52.i32 = v64 * 31.0;
  v65 = v64 * 51.0;
  if ((v53 & 0x20000) != 0)
  {
    v67 = *((float *)a4 + 1);
    v66 = (float)((float)(v58 - *(float *)v52.i32) * 0.5) + *(float *)a4;
    v68 = v64 * 31.0;
  }
  else
  {
    v66 = *(float *)a4;
    v67 = (float)((float)(v59 - *(float *)v52.i32) * 0.5) + *((float *)a4 + 1);
    v68 = v64 * 51.0;
    v65 = v64 * 31.0;
  }
  *(float *)v52.i32 = *(float *)v52.i32 * 0.5;
  *(double *)&v165 = COERCE_DOUBLE(__PAIR64__(LODWORD(v67), LODWORD(v66)));
  v166 = (uint64_t *)__PAIR64__(LODWORD(v65), LODWORD(v68));
  v167 = vdupq_lane_s32(v52, 0);
  v168 = v167;
  (*(void (**)(uint64_t, unint64_t *, unint64_t *, uint64_t))(*(_QWORD *)v49 + 264))(v49, &v165, &v151, 1);
  if (*((_BYTE *)v54 + 2704) == 1)
  {
    v69 = (uint64_t (**)())WebCore::Theme::singleton(void)::theme;
  }
  else
  {
    v69 = &off_1E3354DA0;
    WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
    *((_BYTE *)v54 + 2704) = 1;
  }
  v71 = ((uint64_t (*)(uint64_t *))v69[8])(&WebCore::Theme::singleton(void)::theme) ^ 1;
  if (v146)
    LOBYTE(v71) = 1;
  if ((v71 & 1) == 0)
  {
    v72 = 0;
    v73 = **(_QWORD **)(*((_QWORD *)a2[3] + 1) + 40);
    if (v73 && (*(_WORD *)(v73 + 28) & 0x80) != 0)
    {
      v74 = *(_QWORD *)(v73 + 200);
      if (v74)
        v72 = *(_QWORD *)(v74 + 8);
      else
        v72 = 0;
    }
    if ((*(_WORD *)(v72 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v72 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x195421F84);
    }
    *(_DWORD *)(v72 + 24) += 2;
    v75 = *(_QWORD *)(v72 + 240);
    if (*(_DWORD *)(v75 + 12) != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x195422104);
    }
    if (*(_BYTE *)(v75 + 36))
      v76 = *(unsigned __int8 *)(v75 + 41) != 0;
    else
      v76 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v75 + 24) + 8) + 230) & 1;
    if (*((_BYTE *)v54 + 2704) == 1)
    {
      v77 = (uint64_t (**)())WebCore::Theme::singleton(void)::theme;
    }
    else
    {
      v77 = &off_1E3354DA0;
      WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
      *((_BYTE *)v54 + 2704) = 1;
    }
    v78 = ((uint64_t (*)(uint64_t *))v77[6])(&WebCore::Theme::singleton(void)::theme);
    v79 = *((_QWORD *)v145 + 10);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 96))(v79, 1);
    *(double *)&v164 = 1.05531856e-226;
    if ((v76 & v78) == 1)
    {
      v80 = 3874613759;
    }
    else if (((v76 | v78) & 1) != 0)
    {
      if (((v76 | v78 ^ 1) & 1) != 0)
        goto LABEL_111;
      v80 = 4092851199;
    }
    else
    {
      v80 = 3099113727;
    }
    v164 = v80 & 0xFFFFFFFFFFFFLL | 0x1104000000000000;
LABEL_111:
    v147 = v66;
    if ((v53 & 8) != 0)
    {
LABEL_116:
      WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v79, (const WebCore::Color *)&v164);
      v83 = v64 * 11.0;
      v84 = v64 * 7.5;
      v85 = v64 * 10.0;
      v86 = (float)(v68 - (float)(v64 * 11.0)) - v64;
      if ((v53 & 0x1000) == 0)
        v86 = v64 * 11.0;
      v87 = v83 + v67;
      v88 = (float)(v65 - v85) - v84;
      if ((v53 & 0x1000) == 0)
        v88 = v64 * 7.5;
      v89 = v67 + v88;
      v90 = (float)(v68 - v64) * 0.5;
      if ((v53 & 0x20000) != 0)
      {
        v91 = v89;
      }
      else
      {
        v90 = v86;
        v91 = v83 + v67;
      }
      if ((v53 & 0x20000) == 0)
      {
        v67 = v147;
        v65 = v68;
      }
      *(float *)&v160 = v147 + v90;
      *((float *)&v160 + 1) = v91;
      v161 = 0;
      v162 = v64 * 10.0;
      if (*(float *)(v79 + 188) != v64)
      {
        *(float *)(v79 + 188) = v64;
        *(_DWORD *)(v79 + 184) |= 8u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 88))(v79, v79 + 8);
      (*(void (**)(uint64_t, unint64_t **, float))(*(_QWORD *)v79 + 288))(v79, &v160, v64);
      v93 = (float)(v65 - v85) - v84;
      if ((v53 & 0x1000) != 0)
        v93 = v64 * 7.5;
      v94 = v67 + v93;
      v95 = v83 + v147;
      if ((v53 & 0x20000) == 0)
      {
        v95 = v94;
        v94 = v87;
      }
      *(float *)v92.i32 = v64 * 5.0;
      v155 = __PAIR64__(LODWORD(v94), LODWORD(v95));
      *(float *)&v156 = v64 * 10.0;
      v157 = v64 * 10.0;
      v158 = vdupq_lane_s32(v92, 0);
      v159 = v158;
      v169 = 0;
      v96 = WebCore::Path::addRoundedRect((WebCore::Path *)&v165, (WebCore::FloatRect *)&v155, 0);
      (*(void (**)(uint64_t, unint64_t *, double))(*(_QWORD *)v79 + 184))(v79, &v165, v96);
      if (v169 != -1)
        ((void (*)(double *, uint64_t **))off_1E335C4E8[v169])(&v163, &v166);
      if ((v164 & 0x8000000000000) != 0)
      {
        v136 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFLL);
        do
        {
          v137 = __ldaxr(v136);
          v138 = v137 - 1;
        }
        while (__stlxr(v138, v136));
        v49 = v148;
        if (!v138)
        {
          atomic_store(1u, v136);
          WTF::fastFree((WTF *)v136, v97);
        }
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 104))(v79, 1);
      if (*(_DWORD *)(v72 + 24) == 2)
      {
        if ((*(_WORD *)(v72 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v72, v70);
      }
      else
      {
        *(_DWORD *)(v72 + 24) -= 2;
      }
      goto LABEL_136;
    }
    WebCore::Color::colorWithAlpha((uint64_t)&v164, 0.4, (uint64_t *)&v165);
    v82 = v165;
    if ((v164 & 0x8000000000000) != 0)
    {
      if ((v165 & 0x8000000000000) == 0
        || *(float *)((v164 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v165 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v164 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v165 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v164 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v165 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v164 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v165 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v164) != HIBYTE(v165)
        || BYTE6(v164) != BYTE6(v165))
      {
        v142 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFLL);
        do
        {
          v143 = __ldaxr(v142);
          v144 = v143 - 1;
        }
        while (__stlxr(v144, v142));
        v49 = v148;
        v53 = v149;
        if (!v144)
        {
          atomic_store(1u, v142);
          WTF::fastFree((WTF *)v142, v81);
        }
        goto LABEL_115;
      }
    }
    else
    {
      if (v164 != v165 || (v165 & 0x8000000000000) != 0)
      {
LABEL_115:
        v164 = v165;
        goto LABEL_116;
      }
      v82 = v164;
    }
    if ((v82 & 0x8000000000000) != 0)
    {
      v104 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFLL);
      do
      {
        v105 = __ldaxr(v104);
        v106 = v105 - 1;
      }
      while (__stlxr(v106, v104));
      v49 = v148;
      v53 = v149;
      if (!v106)
      {
        atomic_store(1u, v104);
        WTF::fastFree((WTF *)v104, v81);
      }
    }
    goto LABEL_116;
  }
LABEL_136:
  if ((v151 & 0x8000000000000) != 0)
  {
    v130 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFLL);
    do
    {
      v131 = __ldaxr(v130);
      v132 = v131 - 1;
    }
    while (__stlxr(v132, v130));
    v49 = v148;
    if (!v132)
    {
      atomic_store(1u, v130);
      WTF::fastFree((WTF *)v130, v70);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 104))(v49, 1);
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15, v98);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  if ((v150 & 0x8000000000000) != 0)
  {
    v133 = (unsigned int *)(v150 & 0xFFFFFFFFFFFFLL);
    do
    {
      v134 = __ldaxr(v133);
      v135 = v134 - 1;
    }
    while (__stlxr(v135, v133));
    if (!v135)
    {
      atomic_store(1u, v133);
      WTF::fastFree((WTF *)v133, v98);
    }
  }
  return 0;
}

void sub_195422500(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  void *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;

  if (a36 != -1)
    ((void (*)(char *, uint64_t *))off_1E335C4E8[a36])(&a26, &a29);
  if ((a27 & 0x8000000000000) != 0)
  {
    v41 = (unsigned int *)(a27 & 0xFFFFFFFFFFFFLL);
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, a2);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 104))(v37, 1);
  if (*(_DWORD *)(v38 + 24) == 2)
  {
    if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v38, v40);
  }
  else
  {
    *(_DWORD *)(v38 + 24) -= 2;
  }
  if ((a14 & 0x8000000000000) != 0)
  {
    v48 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFLL);
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v48);
      WTF::fastFree((WTF *)v48, v40);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a11 + 104))(a11, 1);
  if (*(_DWORD *)(v36 + 24) == 2)
  {
    if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v36, v44);
  }
  else
  {
    *(_DWORD *)(v36 + 24) -= 2;
  }
  if ((a13 & 0x8000000000000) != 0)
  {
    v45 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      WTF::fastFree((WTF *)v45, v44);
    }
  }
  _Unwind_Resume(a1);
}

void sub_195422658(uint64_t a1, void *a2)
{
  uint64_t v2;

  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  JUMPOUT(0x1954225C0);
}

void sub_195422684()
{
  JUMPOUT(0x1954225D4);
}

void sub_19542268C()
{
  JUMPOUT(0x1954225ECLL);
}

BOOL WebCore::RenderThemeIOS::paintProgressBar(WebCore::RenderThemeIOS *this, const WebCore::RenderObject *a2, const WebCore::PaintInfo *a3, const WebCore::IntRect *a4)
{
  int v4;
  const WebCore::RenderObject *v6;
  uint64_t v8;
  WebCore::Document *v9;
  const WebCore::RenderObject *v10;
  const WebCore::RenderStyle *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  const WebCore::RenderObject *v25;
  unsigned int v26;
  int v27;
  int v28;
  float v29;
  float v30;
  unint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  unsigned int v50;
  float v51;
  unsigned __int8 v52;
  uint64_t v53;
  void *v54;
  unsigned int *v55;
  void *v56;
  double v57;
  double v59;
  double v60;
  float v61;
  uint64_t (**v62)();
  int v63;
  int v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  void *v77;
  WTF *v79;
  void *v80;
  WTF *v81;
  void *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  WebCore::RenderThemeIOS *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float32x2_t v108;
  float v109;
  float v110;
  __int128 v111;
  float v112[6];
  float32x2_t v113;
  float v114;
  float v115;
  __int128 v116;
  __int128 v117;

  v4 = *((unsigned __int8 *)a2 + 46);
  if (v4 != 28)
    return v4 != 28;
  v6 = a2;
  v8 = *((_QWORD *)a3 + 10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 96))(v8, 1);
  v9 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 8) + 40) + 8);
  v10 = v6;
  if ((*((_BYTE *)v6 + 45) & 2) != 0)
  {
    v10 = (const WebCore::RenderObject *)*((_QWORD *)v6 + 4);
    if (v10)
      v10 = (const WebCore::RenderObject *)*((_QWORD *)v10 + 1);
  }
  v11 = (const WebCore::RenderObject *)((char *)v10 + 80);
  v12 = *((_QWORD *)v9 + 66);
  v94 = this;
  if (!v12)
    goto LABEL_9;
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
    goto LABEL_9;
  v14 = *(_QWORD *)(v13 + 24);
  if (!v14)
    goto LABEL_9;
  v15 = *(_QWORD *)(v14 + 8);
  if (!v15)
    goto LABEL_9;
  v16 = (*(_DWORD *)v15)++;
  v17 = *(unsigned __int8 *)(v15 + 450);
  if (v16)
  {
    *(_DWORD *)v15 = v16;
    if (!v17)
    {
LABEL_9:
      v18 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    WebCore::Page::~Page(v15);
    WTF::fastFree(v79, v80);
    if (!v17)
      goto LABEL_9;
  }
  v18 = 2;
LABEL_10:
  if (WebCore::Document::useDarkAppearance(v9, v11))
    v18 |= 4u;
  v19 = *((_QWORD *)v9 + 66);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 8);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 24);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 8);
        if (v22)
        {
          v23 = (*(_DWORD *)v22)++;
          v24 = *(unsigned __int8 *)(v22 + 451);
          if (v23)
          {
            *(_DWORD *)v22 = v23;
            if (!v24)
              goto LABEL_18;
          }
          else
          {
            WebCore::Page::~Page(v22);
            WTF::fastFree(v81, v82);
            if (!v24)
              goto LABEL_18;
          }
          v18 |= 8u;
        }
      }
    }
  }
LABEL_18:
  v25 = v6;
  if ((*((_BYTE *)v6 + 45) & 2) != 0)
    v25 = *(const WebCore::RenderObject **)(*((_QWORD *)v6 + 4) + 8);
  v26 = ((*((_DWORD *)v25 + 31) >> 13) & 6) - 2;
  if (v26 < 4)
  {
    v28 = *(_DWORD *)a4;
    v27 = *((_DWORD *)a4 + 1);
    v31 = *((unsigned int *)a4 + 3) | ((unint64_t)*((unsigned int *)a4 + 2) << 32);
    v29 = 1.5;
    v30 = 2.5;
  }
  else
  {
    v27 = *(_DWORD *)a4;
    v28 = *((_DWORD *)a4 + 1);
    v29 = 2.5;
    v30 = 1.5;
    v31 = *((_QWORD *)a4 + 1);
  }
  if (SHIDWORD(v31) <= 3)
  {
    v32 = (float)*((int *)a4 + 1);
    v113.f32[0] = (float)*(int *)a4;
    v113.f32[1] = v32;
    v33 = (float)*((int *)a4 + 3);
    v114 = (float)*((int *)a4 + 2);
    v115 = v33;
    (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v8 + 456))(v8, &v113);
  }
  v34 = (float)v27 + 1.0;
  v35 = (float)(int)v31 + -2.0;
  v36 = 4.0;
  if (v26 <= 3)
    v37 = (float)(int)v31 + -2.0;
  else
    v37 = 4.0;
  if (v26 <= 3)
  {
    v38 = (float)v27 + 1.0;
  }
  else
  {
    v36 = (float)(int)v31 + -2.0;
    v38 = (float)((float)((float)SHIDWORD(v31) + -4.0) * 0.5) + (float)v28;
  }
  if (v26 <= 3)
    v39 = (float)((float)((float)SHIDWORD(v31) + -4.0) * 0.5) + (float)v28;
  else
    v39 = (float)v27 + 1.0;
  v113 = (float32x2_t)__PAIR64__(LODWORD(v38), LODWORD(v39));
  v114 = v36;
  v115 = v37;
  *(_QWORD *)&v116 = __PAIR64__(LODWORD(v30), LODWORD(v29));
  *((_QWORD *)&v116 + 1) = __PAIR64__(LODWORD(v30), LODWORD(v29));
  *(_QWORD *)&v117 = __PAIR64__(LODWORD(v30), LODWORD(v29));
  *((_QWORD *)&v117 + 1) = __PAIR64__(LODWORD(v30), LODWORD(v29));
  v111 = v116;
  *(_OWORD *)v112 = v117;
  v40 = (float)(v36 + 1.0) + 1.0;
  __asm { FMOV            V5.2S, #-1.0 }
  v108 = vadd_f32(v113, _D5);
  v45 = (float)(v37 + 1.0) + 1.0;
  v109 = v40;
  v110 = v45;
  if (v40 < v45)
  {
    if (v114 != 0.0)
    {
      v46 = v40 / v114;
      goto LABEL_38;
    }
LABEL_40:
    v46 = 0.0;
    goto LABEL_41;
  }
  if (v115 == 0.0)
    goto LABEL_40;
  v46 = v45 / v115;
LABEL_38:
  if (v46 != 1.0)
  {
LABEL_41:
    v47 = v46 * *((float *)&v111 + 1);
    *(float *)&v111 = v46 * *(float *)&v111;
    *((float *)&v111 + 1) = v46 * *((float *)&v111 + 1);
    if (*(float *)&v111 == 0.0 || v47 == 0.0)
      *(_QWORD *)&v111 = 0;
    v48 = v46 * *((float *)&v111 + 3);
    *((float *)&v111 + 2) = v46 * *((float *)&v111 + 2);
    *((float *)&v111 + 3) = v46 * *((float *)&v111 + 3);
    if (*((float *)&v111 + 2) == 0.0 || v48 == 0.0)
      *((_QWORD *)&v111 + 1) = 0;
    v49 = v46 * v112[1];
    v112[0] = v46 * v112[0];
    v112[1] = v46 * v112[1];
    if (v112[0] == 0.0 || v49 == 0.0)
      *(_QWORD *)v112 = 0;
    *(float *)&v50 = v46 * v112[2];
    v51 = v46 * v112[3];
    *(_QWORD *)&v112[2] = __PAIR64__(LODWORD(v51), v50);
    if (*(float *)&v50 == 0.0 || v51 == 0.0)
      *(_QWORD *)&v112[2] = 0;
  }
  v52 = v18;
  v53 = (uint64_t)v94;
  WebCore::RenderThemeIOS::systemColor((uint64_t)v94, 225, v52, (uint64_t *)&v97);
  (*(void (**)(uint64_t, float32x2_t *, unint64_t *, uint64_t))(*(_QWORD *)v8 + 264))(v8, &v108, &v97, 1);
  if ((v97 & 0x8000000000000) != 0)
  {
    v83 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFLL);
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    v53 = (uint64_t)v94;
    if (!v85)
    {
      atomic_store(1u, v83);
      WTF::fastFree((WTF *)v83, v54);
    }
  }
  WebCore::RenderThemeIOS::systemColor(v53, 219, v52, (uint64_t *)&v97);
  v55 = (unsigned int *)(*(uint64_t (**)(uint64_t, float32x2_t *, unint64_t *, uint64_t))(*(_QWORD *)v8 + 264))(v8, &v113, &v97, 1);
  if ((v97 & 0x8000000000000) != 0)
  {
    v55 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFLL);
    do
    {
      v86 = __ldaxr(v55);
      v87 = v86 - 1;
    }
    while (__stlxr(v87, v55));
    v53 = (uint64_t)v94;
    if (!v87)
    {
      atomic_store(1u, v55);
      v55 = (unsigned int *)WTF::fastFree((WTF *)v55, v56);
    }
  }
  v57 = *((double *)v6 + 31);
  if (v57 == -1.0 || v57 == -2.0)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v55);
    v60 = v59 - *((double *)v6 + 32);
    *(float *)&v59 = v60;
    v61 = fmodf(*(float *)&v59, 1.0);
    {
      v62 = (uint64_t (**)())WebCore::Theme::singleton(void)::theme;
    }
    else
    {
      v62 = &off_1E3354DA0;
      WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
    }
    v63 = ((uint64_t (*)(uint64_t *))v62[7])(&WebCore::Theme::singleton(void)::theme);
    v64 = (int)v60;
    if (v63)
    {
      if ((v64 & 1) != 0)
        v65 = 0.6 - (float)(v61 * 0.3);
      else
        v65 = (float)(v61 * 0.3) + 0.3;
    }
    else
    {
      v69 = (float)(v35 + (float)(v35 * 0.25)) * v61;
      v70 = (float)(v34 + v35) - v69;
      v71 = v34 + (float)(v69 - (float)(v35 * 0.25));
      if ((v64 & 1) != 0)
        v34 = v70;
      else
        v34 = v71;
      v65 = 1.0;
      (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v8 + 464))(v8, &v113);
      v35 = v35 * 0.25;
    }
  }
  else
  {
    v65 = 1.0;
    v66 = 1.0;
    if (v57 < 1.0)
    {
      if (v57 <= 0.0)
        v66 = 0.0;
      else
        v66 = v57;
    }
    v67 = v34 + v35;
    v35 = v35 * v66;
    v68 = v67 - v35;
    if ((*((_BYTE *)v6 + 123) & 4) != 0)
      v34 = v68;
  }
  if (v26 <= 3)
    v72 = v34;
  else
    v72 = (float)((float)((float)SHIDWORD(v31) + -4.0) * 0.5) + (float)v28;
  if (v26 <= 3)
    v73 = (float)((float)((float)SHIDWORD(v31) + -4.0) * 0.5) + (float)v28;
  else
    v73 = v34;
  v97 = __PAIR64__(LODWORD(v72), LODWORD(v73));
  v74 = 4.0;
  if (v26 <= 3)
    v75 = v35;
  else
    v75 = 4.0;
  if (v26 > 3)
    v74 = v35;
  v98 = v74;
  v99 = v75;
  v100 = v29;
  v101 = v30;
  v102 = v29;
  v103 = v30;
  v104 = v29;
  v105 = v30;
  v106 = v29;
  v107 = v30;
  if ((*((_BYTE *)v6 + 45) & 2) != 0)
    v6 = *(const WebCore::RenderObject **)(*((_QWORD *)v6 + 4) + 8);
  if ((*(_BYTE *)(*((_QWORD *)v6 + 13) + 238) & 0x80) != 0)
    WebCore::RenderThemeIOS::systemColor(v53, 207, v52, &v95);
  else
    WebCore::RenderStyle::usedAccentColor((uint64_t *)v6 + 10, v52, (unint64_t *)&v95);
  if ((v95 & 0x8000000000000) != 0)
    v76 = *(float *)((v95 & 0xFFFFFFFFFFFFLL) + 0x10);
  else
    v76 = (float)v95 / 255.0;
  WebCore::Color::colorWithAlpha((uint64_t)&v95, v65 * v76, &v96);
  (*(void (**)(uint64_t, unint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v8 + 264))(v8, &v97, &v96, 1);
  if ((v96 & 0x8000000000000) != 0)
  {
    v88 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFLL);
    do
    {
      v89 = __ldaxr(v88);
      v90 = v89 - 1;
    }
    while (__stlxr(v90, v88));
    if (!v90)
    {
      atomic_store(1u, v88);
      WTF::fastFree((WTF *)v88, v77);
    }
  }
  if ((v95 & 0x8000000000000) != 0)
  {
    v91 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFLL);
    do
    {
      v92 = __ldaxr(v91);
      v93 = v92 - 1;
    }
    while (__stlxr(v93, v91));
    if (!v93)
    {
      atomic_store(1u, v91);
      WTF::fastFree((WTF *)v91, v77);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, 1);
  return v4 != 28;
}

void sub_195422D64(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 104))(v1, 1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::RenderThemeIOS::sliderTickSize(WebCore::RenderThemeIOS *this)
{
  return 0x300000001;
}

uint64_t WebCore::RenderThemeIOS::sliderTickOffsetFromTrackCenter(WebCore::RenderThemeIOS *this)
{
  return 4294967287;
}

int *WebCore::RenderThemeIOS::adjustSearchFieldStyle(WebCore::RenderThemeIOS *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  uint64_t v3;
  int *result;

  if (a3)
  {
    if ((v3 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 24), *(float *)(v3 + 120) != 0.0)
      && (*(_BYTE *)(v3 + 124) & 0xF) != 0
      || *(float *)(v3 + 144) != 0.0 && (*(_BYTE *)(v3 + 148) & 0xF) != 0
      || *(float *)(v3 + 168) != 0.0 && (*(_BYTE *)(v3 + 172) & 0xF) != 0
      || *(float *)(v3 + 192) != 0.0 && (*(_BYTE *)(v3 + 196) & 0xF) != 0)
    {
      if ((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) != 0
        && (*(_BYTE *)((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      {
        return WebCore::RenderThemeIOS::adjustRoundBorderRadius((int *)a2, (WebCore::RenderStyle *)(*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL), a3);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderThemeIOS::paintSearchFieldDecorations(WebCore::RenderThemeIOS *this, const WebCore::RenderBox *a2, const WebCore::PaintInfo *a3, const WebCore::IntRect *a4)
{
  float v4;
  float v5;
  float v7[4];

  v4 = (float)*((int *)a4 + 1);
  v7[0] = (float)*(int *)a4;
  v7[1] = v4;
  v5 = (float)*((int *)a4 + 3);
  v7[2] = (float)*((int *)a4 + 2);
  v7[3] = v5;
  return WebCore::RenderThemeIOS::paintTextFieldDecorations(this, a2, a3, (const WebCore::FloatRect *)v7);
}

void WebCore::RenderThemeIOS::adjustButtonStyle(WebCore::RenderThemeIOS *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  WTF *v5;
  WTF **v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  __n128 v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  void *v24;
  double v25;
  double v26;
  int v28;
  WebCore::Node *v29;
  WebCore::RenderStyle *v30;
  const WebCore::Element *v31;
  WTF *v32;
  _DWORD *v33;
  WebCore::RenderBox *v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  double v38;
  BOOL v40;
  unsigned int v41;
  __int16 v42;
  char v43;
  unsigned int v44;
  __int16 v45;
  char v46;
  unsigned int v47;
  __int16 v48;
  char v49;
  unsigned int v50;
  __int16 v51;
  char v52;
  unsigned int v53[2];
  unsigned int v54[4];
  WebCore::Node *v55[2];
  int v56;
  char v57;
  char v58;
  char v59;
  WebCore::RenderStyle *v60;
  uint64_t v61;

  v6 = (WTF **)((char *)a2 + 8);
  v5 = (WTF *)*((_QWORD *)a2 + 1);
  v7 = ((*((_DWORD *)a2 + 11) >> 13) & 6) - 2;
  v8 = *((_QWORD *)v5 + 1);
  v9 = v8 + 12;
  if (v7 >= 4)
    v9 = v8 + 4;
  v10 = *(unsigned __int8 *)(v9 + 4);
  v11 = (v10 - 7) < 4 || v10 == 0;
  if (v11 || (v10 - 5) < 2)
    goto LABEL_8;
  v15 = v8 + 4;
  if (v7 >= 4)
    v15 = v8 + 12;
  if (!*(_BYTE *)(v15 + 4))
  {
LABEL_8:
    v12 = *(float *)(*((_QWORD *)a2 + 4) + 204) * 1.8182;
    if (v7 <= 3)
    {
      if (*(_BYTE *)(v8 + 24) != 4)
      {
        *(float *)v53 = *(float *)(*((_QWORD *)a2 + 4) + 204) * 1.8182;
        LOWORD(v53[1]) = 4;
        BYTE2(v53[1]) = 1;
        goto LABEL_102;
      }
      v13 = v8 + 20;
    }
    else
    {
      if (*(_BYTE *)(v8 + 40) != 4)
      {
        *(float *)v53 = *(float *)(*((_QWORD *)a2 + 4) + 204) * 1.8182;
        LOWORD(v53[1]) = 4;
        BYTE2(v53[1]) = 1;
LABEL_23:
        WebCore::RenderStyle::setMinHeight((uint64_t)a2, (WebCore::Length *)v53);
LABEL_24:
        if (LOBYTE(v53[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v53[0]);
        }
        v5 = *v6;
        goto LABEL_26;
      }
      v13 = v8 + 36;
    }
    if (*(_BYTE *)(v13 + 6))
      v14 = *(float *)v13;
    else
      v14 = (float)*(int *)v13;
    if (v12 < v14)
      v12 = v14;
    *(float *)v53 = v12;
    LOWORD(v53[1]) = 4;
    BYTE2(v53[1]) = 1;
    if (v7 >= 4)
      goto LABEL_23;
LABEL_102:
    WebCore::RenderStyle::setMinWidth((uint64_t)a2, (WebCore::Length *)v53);
    goto LABEL_24;
  }
LABEL_26:
  if ((*(_DWORD *)(*((_QWORD *)v5 + 4) + 148) & 0x1FC000) != 0x54000)
  {
    v16 = WTF::fastCompactMalloc((WTF *)0x10);
    v17 = (_DWORD *)v16;
    *(_DWORD *)v16 = 2;
    *(_WORD *)(v16 + 4) = 4;
    *(_BYTE *)(v16 + 6) &= 0xFCu;
    *(_QWORD *)(v16 + 8) = 0x3FF0000000000000;
    *(_QWORD *)v53 = a2;
    v18.n128_u64[1] = 0;
    *(_OWORD *)v54 = 0u;
    *(_OWORD *)v55 = 0u;
    v56 = 1065353216;
    v57 = 1;
    v58 = 0;
    v59 = 0;
    v60 = a2;
    v61 = 0;
    v19 = *(_WORD *)(v16 + 4) & 0x7F;
    if (v19 == 73)
    {
      v35 = *(_QWORD *)(v16 + 8);
      v36 = *(_DWORD **)(v35 + 8);
      ++v36[2];
      v25 = (*(double (**)(_DWORD *, unsigned int *))(*(_QWORD *)v36 + 48))(v36, v53);
      v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 8) + 72))(*(_QWORD *)(v35 + 8));
      v38 = fabs(v25);
      if (v37 == 12 && v38 == INFINITY)
      {
        v25 = 0.0;
      }
      else
      {
        if (*(_BYTE *)(v35 + 16))
          v40 = v25 < 0.0;
        else
          v40 = 0;
        if (v40)
          v25 = 0.0;
      }
      if (v36[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
      else
        --v36[2];
    }
    else
    {
      v20 = v19 - 79;
      if (v19 == 63)
        v21 = 22;
      else
        v21 = *(_WORD *)(v16 + 4) & 0x7F;
      if (v19 == 77)
        v22 = 20;
      else
        v22 = v21;
      if (v20 >= 2)
        v23 = v22;
      else
        v23 = 22;
      v18.n128_u64[0] = *(_QWORD *)(v16 + 8);
      v25 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)v53, (void *)v23, v18);
    }
    v26 = v25 + dbl_1968DE9C0[v25 < 0.0];
    if (v26 >= -2147483650.0 && v26 <= 2147483650.0)
      v28 = (int)v26;
    else
      v28 = 0;
    v29 = v55[1];
    v55[1] = 0;
    if (v29)
    {
      if (*((_DWORD *)v29 + 6) == 2)
      {
        if ((*((_WORD *)v29 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v29, v24);
      }
      else
      {
        *((_DWORD *)v29 + 6) -= 2;
      }
    }
    LOWORD(v53[1]) = 4;
    BYTE2(v53[1]) = 0;
    v53[0] = 0;
    LOWORD(v54[1]) = 4;
    BYTE2(v54[1]) = 0;
    v54[0] = v28;
    LOWORD(v54[3]) = 4;
    BYTE2(v54[3]) = 0;
    v54[2] = 0;
    WORD2(v55[0]) = 4;
    BYTE6(v55[0]) = 0;
    LODWORD(v55[0]) = v28;
    if (((*((_DWORD *)a2 + 11) >> 13) & 6u) - 2 <= 3)
    {
      v42 = 4;
      v43 = 0;
      v41 = (int)(float)v28;
      v45 = 4;
      v46 = 0;
      v44 = 0;
      v48 = 4;
      v49 = 0;
      v47 = v41;
      v51 = 4;
      v52 = 0;
      v50 = 0;
      std::array<WebCore::Length,4ul>::operator=((WebCore::Length *)v53, (uint64_t)&v41);
      if (v51 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v50);
      }
      if (v48 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v47);
      }
      if (v45 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v44);
      }
      if (v42 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v41);
      }
    }
    if ((WebCore::operator==((unsigned __int8 *)(*((_QWORD *)*v6 + 3) + 72), (unsigned __int8 *)v53) & 1) == 0)
    {
      v32 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v6);
      v33 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v32 + 3);
      std::array<WebCore::Length,4ul>::operator=((WebCore::Length *)(v33 + 18), (uint64_t)v53);
    }
    if (a3)
    {
      WebCore::RenderThemeIOS::adjustButtonLikeControlStyle((uint64_t)a2, a3, v31);
      v30 = (WebCore::RenderStyle *)(*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL);
      if (v30)
      {
        if ((*(_BYTE *)((*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
          WebCore::RenderThemeIOS::adjustRoundBorderRadius((int *)a2, v30, v34);
      }
    }
    if (BYTE4(v55[0]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v55[0]));
    }
    if (LOBYTE(v54[3]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v54[2]);
    }
    if (LOBYTE(v54[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v54[0]);
    }
    if (LOBYTE(v53[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v53[0]);
    }
    if (*v17 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v30);
    else
      *v17 -= 2;
  }
}

void sub_1954235FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int a10, char a11, unsigned int a12, char a13, unsigned int a14, char a15, unsigned int a16, char a17, unsigned int a18, char a19, unsigned int a20,char a21,unsigned int a22,char a23,unsigned int a24,char a25)
{
  _DWORD *v25;

  if (a17 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a16);
  }
  if (a15 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a14);
  }
  if (a13 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a12);
  }
  if (a11 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a10);
  }
  if (a25 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a24);
  }
  if (a23 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a22);
  }
  if (a21 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a20);
  }
  if (a19 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a18);
  }
  if (*v25 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, a2);
  else
    *v25 -= 2;
  _Unwind_Resume(exception_object);
}

void WebCore::RenderThemeIOS::platformActiveSelectionBackgroundColor(_QWORD *a1@<X8>)
{
  *a1 = 0x1104000000000000;
}

void WebCore::RenderThemeIOS::autocorrectionReplacementMarkerColor(const WebCore::RenderText *a1@<X1>, uint64_t *a2@<X8>)
{
  const WebCore::RenderText *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  void *v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  float v17;
  WebCore::Document *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t *v43;
  uint64_t *v44;

  v3 = a1;
  v5 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v5)
    v5 = (_QWORD *)v5[1];
  if ((*((_BYTE *)a1 + 45) & 1) == 0)
  {
    v6 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
    if (v6)
    {
      if ((*(_WORD *)(v6 + 28) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195423A40);
      }
    }
  }
  v7 = v5[13];
  if ((*(_BYTE *)(v7 + 238) & 0x20) != 0)
  {
    v9 = 0;
    v39 = 0;
    goto LABEL_12;
  }
  v41 = v5[14] + 328;
  *(_QWORD *)&v42 = &v41;
  *((_QWORD *)&v42 + 1) = &v41;
  v43 = &v41;
  v44 = &v41;
  v8 = *(unsigned int *)(v7 + 120);
  if ((_DWORD)v8 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_45:
    v30 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, v11);
    }
    return;
  }
  *(_QWORD *)&v40 = &v42;
  ((void (*)(unint64_t *__return_ptr, __int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v8])(&v39, &v40, v7 + 112);
  v9 = v39;
  if ((v39 & 0x4000000000000) == 0)
  {
LABEL_12:
    if ((byte_1ECE81F95 & 1) != 0)
    {
      if (byte_1ECE82020)
      {
        v13 = qword_1ECE82018;
        if ((qword_1ECE82018 & 0x8000000000000) != 0)
        {
          v14 = qword_1ECE82018;
          v15 = qword_1ECE82018 & 0xFFFFFFFFFFFFLL;
          do
            v16 = __ldaxr((unsigned int *)v15);
          while (__stlxr(v16 + 1, (unsigned int *)v15));
          v9 = v39;
          if ((v39 & 0x8000000000000) == 0)
          {
            v13 = v14;
LABEL_25:
            v39 = v13;
            goto LABEL_26;
          }
          if (*(float *)((v39 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)(v15 + 4)
            && *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)(v15 + 8)
            && *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)(v15 + 12)
            && *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)(v15 + 16)
            && HIBYTE(v39) == HIBYTE(v14))
          {
            v13 = v14;
            if (BYTE6(v39) == BYTE6(v14))
            {
              do
              {
                v33 = __ldaxr((unsigned int *)v15);
                v34 = v33 - 1;
              }
              while (__stlxr(v34, (unsigned int *)v15));
              if (!v34)
              {
                atomic_store(1u, (unsigned int *)v15);
                WTF::fastFree((WTF *)v15, a1);
              }
LABEL_26:
              v9 = v39;
              if ((v39 & 0x8000000000000) == 0)
                goto LABEL_10;
              goto LABEL_27;
            }
          }
          else
          {
            v13 = v14;
          }
LABEL_59:
          v38 = v13;
          v35 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
          do
          {
            v36 = __ldaxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
          {
            atomic_store(1u, v35);
            WTF::fastFree((WTF *)v35, a1);
          }
          v13 = v38;
          goto LABEL_25;
        }
LABEL_22:
        if (v9 == v13 && ((v9 | v13) & 0x8000000000000) == 0)
          goto LABEL_26;
        if ((v9 & 0x8000000000000) == 0)
          goto LABEL_25;
        goto LABEL_59;
      }
    }
    else
    {
      byte_1ECE81F95 = 1;
    }
    v13 = 0x1104000000000000;
    qword_1ECE82018 = 0x1104000000000000;
    byte_1ECE82020 = 1;
    goto LABEL_22;
  }
  if ((v39 & 0x8000000000000) == 0)
  {
LABEL_10:
    v10 = bswap32(v9);
    *(float *)&v42 = (float)v10 / 255.0;
    *(float32x2_t *)((char *)&v42 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v10), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v42 + 3) = (float)HIBYTE(v10) / 255.0;
    v12 = WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v42);
    goto LABEL_28;
  }
LABEL_27:
  v40 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
  *(_QWORD *)&v42 = &v41;
  *((_QWORD *)&v42 + 1) = &v40;
  _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4HSLAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v9), (uint64_t)&v42);
LABEL_28:
  v17 = v12;
  if (v12 == 0.0)
  {
    if ((v39 & 0x8000000000000) != 0)
    {
      v23 = *(_DWORD *)((v39 & 0xFFFFFFFFFFFFLL) + 0xC);
      if (HIBYTE(v39) >= 0x14)
        v24 = 0x110C000000000000;
      else
        v24 = v39 & 0xFF00000000000000 | 0xC000000000000;
      v25 = v39 & 0x1000000000000;
      v26 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFLL) + 4);
      v27 = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 4) = v26;
      *(_DWORD *)(v27 + 12) = v23;
      *(_DWORD *)(v27 + 16) = 1050253722;
      v21 = v24 | v25 | v27;
    }
    else
    {
      v22 = llroundf(76.5);
      if (v22 >= 255)
        v22 = 255;
      v21 = v22 & ~(v22 >> 63) | v39 & 0x10000FFFFFF00 | 0x1104000000000000;
    }
  }
  else
  {
    v18 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 8) + 40) + 8);
    if ((*((_BYTE *)v3 + 45) & 2) != 0)
    {
      v29 = *((_QWORD *)v3 + 4);
      if (v29)
        v3 = *(const WebCore::RenderText **)(v29 + 8);
      else
        v3 = 0;
    }
    v19 = WebCore::Document::styleColorOptions(v18, (const WebCore::RenderText *)((char *)v3 + 80));
    *a2 = 0;
    v20 = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)v20 = 1;
    *(float *)(v20 + 4) = v17;
    *(_DWORD *)(v20 + 8) = 1120403456;
    *(int8x8_t *)(v20 + 12) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32((v19 & 4) == 0), 0x1FuLL)), (int8x8_t)0x3E99999A42240000, (int8x8_t)0x3F00000042480000);
    v21 = v20 | 0x80C000000000000;
  }
  *a2 = v21;
  v28 = v39;
  if ((v39 & 0x8000000000000) != 0)
    goto LABEL_45;
}

void sub_195423D14(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::RenderThemeIOS::platformAnnotationHighlightColor(_QWORD *a1@<X8>)
{
  *a1 = 0x11040000FFEEBEFFLL;
}

uint64_t WebCore::RenderThemeIOS::shouldHaveSpinButton(WebCore::RenderThemeIOS *this, const WebCore::HTMLInputElement *a2)
{
  return 0;
}

uint64_t WebCore::RenderThemeIOS::supportsFocusRing(WebCore::RenderThemeIOS *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

BOOL WebCore::RenderThemeIOS::supportsBoxShadow(WebCore::RenderThemeIOS *this, const WebCore::RenderStyle *a2)
{
  return (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 148) & 0x1F8000) == 458752;
}

unsigned int *WebCore::RenderThemeIOS::pictureFrameColor@<X0>(const WebCore::RenderObject *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  if ((*((_BYTE *)a1 + 45) & 2) != 0)
  {
    v4 = *((_QWORD *)a1 + 4);
    if (v4)
      a1 = *(const WebCore::RenderObject **)(v4 + 8);
    else
      a1 = 0;
  }
  return WebCore::RenderStyle::visitedDependentColor((uint64_t)a1 + 80, 382, 0, a2);
}

void WebCore::RenderThemeIOS::iconForAttachment(WebCore::RenderThemeIOS *this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  void *v9;
  const __CFString *v10;
  const WTF::String *v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t j;
  void *v23;
  double v24;
  double v25;
  double v26;
  const WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  double v29;
  uint64_t i;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float v38;
  float v39;
  float v40;
  _QWORD *v42;
  int v43;
  const __CFString *v44;
  char v45;
  WTF::StringImpl *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  WTF::StringImpl *v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v9 = (void *)objc_msgSend(objc_alloc((Class)PAL::getUIDocumentInteractionControllerClass[0](this)), "init");
  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4) || *(_QWORD *)a3)
    v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v10 = &stru_1E3487BC0;
  objc_msgSend(v9, "setName:", v10);
  if (!*a2 || !*((_DWORD *)*a2 + 1))
    goto LABEL_5;
  if (!WebCore::isDeclaredUTI((WebCore *)a2, v11))
  {
    if (__ldaxr(WebCore::cacheUTIFromMIMETypeLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::cacheUTIFromMIMETypeLock))
    {
      goto LABEL_60;
    }
    MEMORY[0x19AEA534C](WebCore::cacheUTIFromMIMETypeLock);
LABEL_60:
    {
      qword_1EE2F5420 = 0;
      xmmword_1EE2F5400 = 0u;
      unk_1EE2F5410 = 0u;
      xmmword_1EE2F53E0 = 0u;
      unk_1EE2F53F0 = 0u;
      xmmword_1EE2F53C0 = 0u;
      unk_1EE2F53D0 = 0u;
      xmmword_1EE2F53A0 = 0u;
      unk_1EE2F53B0 = 0u;
      xmmword_1EE2F5380 = 0u;
      unk_1EE2F5390 = 0u;
      xmmword_1EE2F5360 = 0u;
      unk_1EE2F5370 = 0u;
      xmmword_1EE2F5340 = 0u;
      unk_1EE2F5350 = 0u;
      WebCore::cacheUTIFromMIMEType(void)::cache = 0u;
      *(_OWORD *)algn_1EE2F5330 = 0u;
    }
    v42 = (_QWORD *)WTF::TinyLRUCache<WTF::String,WTF::RetainPtr<NSString>,16ul,WebCore::UTIFromMIMETypeCachePolicy>::get((uint64_t)&WebCore::cacheUTIFromMIMEType(void)::cache, a2, v27);
    MEMORY[0x19AEA5508](&v51, *v42);
    v43 = __ldxr(WebCore::cacheUTIFromMIMETypeLock);
    if (v43 == 1)
    {
      if (!__stlxr(0, WebCore::cacheUTIFromMIMETypeLock))
      {
LABEL_67:
        v28 = v51;
        if (v51)
          goto LABEL_68;
        goto LABEL_73;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::cacheUTIFromMIMETypeLock);
    goto LABEL_67;
  }
  v28 = *a2;
  if (v28)
  {
    *(_DWORD *)v28 += 2;
LABEL_68:
    v44 = (const __CFString *)WTF::StringImpl::operator NSString *();
    v45 = 0;
    goto LABEL_69;
  }
LABEL_73:
  v44 = &stru_1E3487BC0;
  v45 = 1;
LABEL_69:
  objc_msgSend(v9, "setUTI:", v44);
  if ((v45 & 1) == 0)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v46);
    else
      *(_DWORD *)v28 -= 2;
  }
LABEL_5:
  v12 = (void *)objc_msgSend(v9, "icons");
  if (!objc_msgSend(v12, "count"))
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (!v9)
      return;
    goto LABEL_52;
  }
  v13 = (void *)objc_msgSend(v12, "lastObject");
  v14 = v13;
  if (v13)
    CFRetain(v13);
  objc_msgSend(v14, "size");
  v16 = v15;
  objc_msgSend(v14, "size");
  v18 = v17;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v19 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
  if (v19)
  {
    v20 = *(_QWORD *)v48;
    if (v16 <= v18)
    {
      v29 = -1.0;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v48 != v20)
            objc_enumerationMutation(v12);
          v31 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
          objc_msgSend(v31, "size");
          v33 = 48.0 / v32 + -1.0;
          if (v33 < 0.300000012)
          {
            v34 = fabs(v33);
            if (v29 == -1.0 || v34 < v29)
            {
              if (v31)
                CFRetain(v31);
              if (v14)
                CFRelease(v14);
              v14 = v31;
              v29 = v34;
            }
          }
        }
        v19 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
      }
      while (v19);
    }
    else
    {
      v21 = -1.0;
      do
      {
        for (j = 0; j != v19; ++j)
        {
          if (*(_QWORD *)v48 != v20)
            objc_enumerationMutation(v12);
          v23 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * j);
          objc_msgSend(v23, "size");
          v25 = 48.0 / v24 + -1.0;
          if (v25 < 0.300000012)
          {
            v26 = fabs(v25);
            if (v21 == -1.0 || v26 < v21)
            {
              if (v23)
                CFRetain(v23);
              if (v14)
                CFRelease(v14);
              v14 = v23;
              v21 = v26;
            }
          }
        }
        v19 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
      }
      while (v19);
    }
  }
  objc_msgSend(v14, "size");
  v36 = v35;
  objc_msgSend(v14, "size");
  v38 = v36 / v37;
  if (v38 <= 1.0)
  {
    v40 = 48.0;
    v39 = (float)((float)((float)(v38 * 48.0) + -48.0) * 0.5)
        + (float)((float)((float)((float)(v38 * 48.0) + -48.0) * 0.5) + 48.0);
  }
  else
  {
    v39 = 48.0;
    v40 = (float)((float)((float)(48.0 / v38) + -48.0) * 0.5)
        + (float)((float)((float)((float)(48.0 / v38) + -48.0) * 0.5) + 48.0);
  }
  *(_QWORD *)a4 = v14;
  if (v14)
  {
    CFRetain(v14);
    *(float *)(a4 + 8) = v39;
    *(float *)(a4 + 12) = v40;
    CFRelease(v14);
    if (!v9)
      return;
    goto LABEL_52;
  }
  *(float *)(a4 + 8) = v39;
  *(float *)(a4 + 12) = v40;
  if (v9)
LABEL_52:
    CFRelease(v9);
}

void sub_19542427C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

unint64_t WebCore::RenderThemeIOS::attachmentIntrinsicSize(WebCore::RenderThemeIOS *this, const __CFString *a2)
{
  PAL *v2;
  double v3;
  WebCore *v4;
  const __CFString *v5;
  double v6;
  float v7;
  float v8;
  float v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  unint64_t v14;

  v3 = WebCore::shortCaptionPointSizeWithContentSizeCategory((WebCore *)*MEMORY[0x1E0CA8208], a2);
  {
    WebCore::contentSizeCategoryStorage(void)::contentSizeCategory = 0;
    goto LABEL_5;
  }
  v2 = (PAL *)WebCore::contentSizeCategoryStorage(void)::contentSizeCategory;
  if (!WebCore::contentSizeCategoryStorage(void)::contentSizeCategory)
  {
LABEL_5:
    v4 = (WebCore *)objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass(v2), "sharedApplication"), "preferredContentSizeCategory");
    goto LABEL_6;
  }
  v4 = (WebCore *)WTF::StringImpl::operator NSString *();
LABEL_6:
  v6 = WebCore::shortCaptionPointSizeWithContentSizeCategory(v4, v5);
  v7 = 1.0;
  if (v6 != 0.0 && v3 != 0.0)
    v7 = fmax(v6 / v3, 1.0);
  v8 = v7 * 160.0;
  v9 = v7 * 119.0;
  v10 = v8 * 64.0;
  v11 = 0x7FFFFFFFLL;
  v12 = 0x80000000;
  if (v10 > -2147483650.0)
    v12 = (int)v10;
  if (v10 < 2147483650.0)
    v11 = v12;
  v13 = v9 * 64.0;
  if (v13 >= 2147483650.0)
  {
    v14 = 0x7FFFFFFF00000000;
  }
  else if (v13 <= -2147483650.0)
  {
    v14 = 0x8000000000000000;
  }
  else
  {
    v14 = (unint64_t)(int)v13 << 32;
  }
  return v14 | v11;
}

BOOL WebCore::RenderThemeIOS::paintAttachment(WebCore::RenderThemeIOS *this, int32x2_t *a2, WebCore::GraphicsContext **a3, int32x2_t *a4)
{
  int v4;
  int8x8_t v8;
  WebCore::GraphicsContext *v9;
  void *v15;
  float v16;
  void *v17;
  void *v18;
  float v19;
  int v20;
  _DWORD *v21;
  int v22;
  float v23;
  int v24;
  uint64_t v25;
  const void *v26;
  CGContext *v27;
  uint64_t v28;
  void *v29;
  WTF *v30;
  uint64_t v31;
  const __CTFont *v32;
  double Size;
  CFTypeRef v34;
  CFTypeRef v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  const void **v39;
  const void *v40;
  const void *v41;
  WTF *v42;
  WTF *v43;
  _DWORD *v44;
  _DWORD *v45;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  char v65[16];
  uint64_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float v71;
  _DWORD *v72;
  _DWORD *v73;
  WTF *v74;
  int v75;
  char v76;
  WTF *v77;
  int v78;
  unsigned int v79;
  double v80;
  float32x2_t v81;
  _BYTE v82[32];
  __int128 v83;
  int v84;
  int8x8_t v85;
  _BYTE v86[56];
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  char v97;
  uint64_t v98;
  char v99;
  char v100;
  CFTypeRef v101;
  CFTypeRef cf;
  uint64_t v103;
  CGRect v104;

  v103 = *MEMORY[0x1E0C80C00];
  v4 = a2[5].u8[6];
  if (a2[5].i8[6])
    return v4 == 0;
  v8 = (int8x8_t)vcgt_s32(*a4, (int32x2_t)0xFE000000FE000000);
  v85 = vorr_s8((int8x8_t)(*(_QWORD *)&v8 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a4), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a4, 6uLL)), v8));
  if ((WebCore::RenderAttachment::paintWideLayoutAttachmentOnly((WebCore::RenderAttachment *)a2, (const WebCore::PaintInfo *)a3, (const WebCore::LayoutPoint *)&v85) & 1) != 0)return v4 == 0;
  WebCore::AttachmentLayout::AttachmentLayout((uint64_t)v65, a2);
  v9 = a3[10];
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v9 + 96))(v9, 1);
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)v9 + 648))(v9, (float)a4->i32[0], (float)a4->i32[1]);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a2[11] + 32) + 148) & 0x1FC000) != 0x48000 && a2[27].i8[4])
  {
    *(float32x2_t *)&_Q0.n128_i8[8] = v68;
    *(float32x2_t *)v82 = vadd_f32(v67, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)&v82[8] = vadd_f32(vadd_f32(v68, (float32x2_t)0xBF000000BF000000), (float32x2_t)0xBF000000BF000000);
    LODWORD(v87) = 0;
    __asm { FMOV            V0.2S, #16.0 }
    v81 = (float32x2_t)_Q0.n128_u64[0];
    WebCore::Path::addRoundedRect((WebCore::Path *)&v85, (__n128 *)v82, (float *)&v81, 0, _Q0);
    *(_QWORD *)v82 = 0x11040000CCCCCCFFLL;
    WebCore::GraphicsContext::setStrokeColor(v9, (const WebCore::Color *)v82);
    if ((*(_QWORD *)v82 & 0x8000000000000) != 0)
    {
      v62 = (unsigned int *)(*(_QWORD *)v82 & 0xFFFFFFFFFFFFLL);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (!v64)
      {
        atomic_store(1u, v62);
        WTF::fastFree((WTF *)v62, v15);
      }
    }
    if (*((float *)v9 + 47) != 1.0)
    {
      *((_DWORD *)v9 + 46) |= 8u;
      *((_DWORD *)v9 + 47) = 1065353216;
    }
    (*(void (**)(WebCore::GraphicsContext *, _DWORD *))(*(_QWORD *)v9 + 88))(v9, (_DWORD *)v9 + 2);
    (*(void (**)(WebCore::GraphicsContext *, int8x8_t *))(*(_QWORD *)v9 + 184))(v9, &v85);
    (*(void (**)(WebCore::GraphicsContext *, int8x8_t *, uint64_t))(*(_QWORD *)v9 + 496))(v9, &v85, 1);
    if ((_DWORD)v87 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E335C4E8[v87])(v82, v86);
  }
  v16 = v80;
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)v9 + 648))(v9, 0.0, v16);
  if (v76)
  {
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v9 + 96))(v9, 1);
    if (*((float *)v9 + 47) != 3.0)
    {
      *((_DWORD *)v9 + 46) |= 8u;
      *((_DWORD *)v9 + 47) = 1077936128;
    }
    (*(void (**)(WebCore::GraphicsContext *, _DWORD *))(*(_QWORD *)v9 + 88))(v9, (_DWORD *)v9 + 2);
    v85 = (int8x8_t)0x11040000DEDEDEFFLL;
    WebCore::GraphicsContext::setStrokeColor(v9, (const WebCore::Color *)&v85);
    if ((*(_QWORD *)&v85 & 0x8000000000000) != 0)
    {
      v53 = (unsigned int *)(*(_QWORD *)&v85 & 0xFFFFFFFFFFFFLL);
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        WTF::fastFree((WTF *)v53, v17);
      }
    }
    v85 = (int8x8_t)0x11040000DEDEDEFFLL;
    WebCore::GraphicsContext::setFillColor(v9, (const WebCore::Color *)&v85);
    if ((*(_QWORD *)&v85 & 0x8000000000000) != 0)
    {
      v56 = (unsigned int *)(*(_QWORD *)&v85 & 0xFFFFFFFFFFFFLL);
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        atomic_store(1u, v56);
        WTF::fastFree((WTF *)v56, v18);
      }
    }
    (*(void (**)(WebCore::GraphicsContext *, float32x2_t *))(*(_QWORD *)v9 + 208))(v9, &v69);
    v81 = vadd_f32(v69, vmul_f32(v70, (float32x2_t)0x3F0000003F000000));
    LODWORD(v87) = 0;
    WebCore::Path::moveTo((WebCore::Path *)&v85, (const WebCore::FloatPoint *)&v81);
    *(_DWORD *)v82 = v81.i32[0];
    *(_DWORD *)&v82[4] = v69.i32[1];
    WebCore::Path::addLineTo((uint64_t)&v85, (const WebCore::FloatPoint *)v82);
    v19 = (float)(v71 + v71) * 3.14159265 + -1.57079633;
    WebCore::Path::addArc((uint64_t)&v85, (uint64_t *)&v81, 0, v70.f32[0] * 0.5, -1.5708, v19);
    v20 = v87;
    if ((_DWORD)v87 == 2)
    {
      if (!*(_QWORD *)v86)
        goto LABEL_39;
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v86 + 200))(*(_QWORD *)v86) & 1) != 0)
        goto LABEL_40;
      v20 = v87;
    }
    else if (!(_DWORD)v87)
    {
      goto LABEL_40;
    }
    if (v20 != 2)
    {
      if (v20 != 1)
        goto LABEL_39;
      v22 = *(_DWORD *)&v86[52];
      if (*(_DWORD *)&v86[52] == 6 || *(_DWORD *)&v86[52] == 15)
        goto LABEL_40;
      goto LABEL_37;
    }
    if (!*(_QWORD *)v86)
      goto LABEL_39;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v86 + 208))(*(_QWORD *)v86) & 1) == 0)
    {
      if ((_DWORD)v87 != 1)
        goto LABEL_39;
      v22 = *(_DWORD *)&v86[52];
LABEL_37:
      if (v22 == 5)
      {
        *(_OWORD *)v82 = *(_OWORD *)v86;
        *(_QWORD *)&v82[13] = *(_QWORD *)&v86[13];
        *(_OWORD *)&v86[16] = *(_OWORD *)&v82[16];
        *(_OWORD *)&v86[32] = v83;
        *(_OWORD *)v86 = *(_OWORD *)v82;
        *(_DWORD *)&v86[48] = v84;
        *(_DWORD *)&v86[52] = 6;
        goto LABEL_40;
      }
LABEL_39:
      v25 = WebCore::Path::ensureImpl((WebCore::Path *)&v85);
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 120))(v25);
    }
LABEL_40:
    (*(void (**)(WebCore::GraphicsContext *, int8x8_t *))(*(_QWORD *)v9 + 176))(v9, &v85);
    if ((_DWORD)v87 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E335C4E8[v87])(v82, v86);
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
    goto LABEL_43;
  }
  v21 = v73;
  if (v72)
  {
    if (!v73)
      v21 = v72;
    goto LABEL_31;
  }
  if (v73)
  {
LABEL_31:
    ++v21[2];
    v23 = (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v21 + 168))(v21, 0);
    v85 = 0;
    *(float *)v86 = v23;
    *(_DWORD *)&v86[4] = v24;
    (*(void (**)(WebCore::GraphicsContext *, _DWORD *, uint64_t *, int8x8_t *, uint64_t))(*(_QWORD *)v9 + 360))(v9, v21, &v66, &v85, 545);
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
LABEL_43:
  v85 = (int8x8_t)v9;
  v26 = (const void *)CGContextDelegateCreate();
  CGContextDelegateSetCallback();
  CGContextDelegateSetCallback();
  CGContextDelegateSetCallback();
  CGContextDelegateSetCallback();
  CGContextDelegateSetCallback();
  v27 = (CGContext *)CGContextCreateWithDelegate();
  v28 = WTF::fastMalloc((WTF *)0x2F0);
  *(_QWORD *)v86 = WebCore::GraphicsContextCG::GraphicsContextCG(v28, v27, 0, 0);
  if (v27)
    CFRelease(v27);
  if (v26)
    CFRelease(v26);
  *(_QWORD *)&v86[8] = 0;
  *(_WORD *)&v86[16] = 1;
  *(_OWORD *)&v86[24] = constinit_4;
  *(_OWORD *)&v86[40] = xmmword_1969F8630;
  v87 = xmmword_1969F8640;
  v88 = 0x11040000000000FFLL;
  v90 = 0;
  v91 = 0x11040000000000FFLL;
  v93 = 0;
  v96 = xmmword_1969F8640;
  v95 = xmmword_1969F8630;
  v94 = constinit_4;
  v97 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  cf = 0;
  (*(void (**)(_QWORD, float))(**(_QWORD **)v86 + 680))(*(_QWORD *)v86, 1.0);
  if (v79)
  {
    v30 = v77;
    v31 = 48 * v79;
    do
    {
      v32 = (const __CTFont *)*((_QWORD *)v30 + 5);
      Size = CTFontGetSize(v32);
      v104.origin.x = *(float *)v30;
      v104.origin.y = *((float *)v30 + 1);
      v104.size.width = *((float *)v30 + 2);
      v104.size.height = *((float *)v30 + 3);
      WebCore::DrawGlyphsRecorder::drawNativeText((WebCore::DrawGlyphsRecorder *)&v85, v32, Size, *((const __CTLine **)v30 + 4), v104);
      v30 = (WTF *)((char *)v30 + 48);
      v31 -= 48;
    }
    while (v31);
  }
  v34 = cf;
  cf = 0;
  if (v34)
    CFRelease(v34);
  v35 = v101;
  v101 = 0;
  if (v35)
    CFRelease(v35);
  if (v99)
  {
    if ((v98 & 0x8000000000000) != 0)
    {
      v59 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFLL);
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
      {
        atomic_store(1u, v59);
        WTF::fastFree((WTF *)v59, v29);
      }
    }
  }
  if (v93 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_1E335C4D0[v93])(v82, &v92);
  v93 = -1;
  if ((v91 & 0x8000000000000) != 0)
  {
    v47 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFLL);
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, v47);
      WTF::fastFree((WTF *)v47, v29);
    }
  }
  if (v90 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_1E335C4D0[v90])(v82, &v89);
  v90 = -1;
  if ((v88 & 0x8000000000000) != 0)
  {
    v50 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFLL);
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v50);
      WTF::fastFree((WTF *)v50, v29);
    }
  }
  v36 = *(_QWORD *)v86;
  *(_QWORD *)v86 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v9 + 104))(v9, 1);
  if (v79)
  {
    v38 = 48 * v79;
    v39 = (const void **)((char *)v77 + 40);
    do
    {
      v40 = *v39;
      *v39 = 0;
      if (v40)
        CFRelease(v40);
      v41 = *(v39 - 1);
      *(v39 - 1) = 0;
      if (v41)
        CFRelease(v41);
      v39 += 6;
      v38 -= 48;
    }
    while (v38);
  }
  v42 = v77;
  if (v77)
  {
    v77 = 0;
    v78 = 0;
    WTF::fastFree(v42, v37);
  }
  v43 = v74;
  if (v74)
  {
    v74 = 0;
    v75 = 0;
    WTF::fastFree(v43, v37);
  }
  v44 = v73;
  v73 = 0;
  if (v44)
  {
    if (v44[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
    else
      --v44[2];
  }
  v45 = v72;
  v72 = 0;
  if (v45)
  {
    if (v45[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
    else
      --v45[2];
  }
  return v4 == 0;
}

void sub_195424DA0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_DWORD *a22,_DWORD *a23,WTF *a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF *a29,int a30,unsigned int a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49)
{
  uint64_t v49;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  void *v54;
  uint64_t v55;
  const void **v56;
  const void *v57;
  const void *v58;

  if ((a34 & 0x8000000000000) != 0)
  {
    v51 = (unsigned int *)(a34 & 0xFFFFFFFFFFFFLL);
    do
    {
      v52 = __ldaxr(v51);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, v51));
    if (!v53)
    {
      atomic_store(1u, v51);
      WTF::fastFree((WTF *)v51, a2);
    }
  }
  if (a49 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E335C4E8[a49])(&a34, &a42);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 104))(v49, 1);
  if (a31)
  {
    v55 = 48 * a31;
    v56 = (const void **)((char *)a29 + 40);
    do
    {
      v57 = *v56;
      *v56 = 0;
      if (v57)
        CFRelease(v57);
      v58 = *(v56 - 1);
      *(v56 - 1) = 0;
      if (v58)
        CFRelease(v58);
      v56 += 6;
      v55 -= 48;
    }
    while (v55);
  }
  if (a29)
    WTF::fastFree(a29, v54);
  if (a24)
    WTF::fastFree(a24, v54);
  if (a23)
  {
    if (a23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a23 + 8))(a23);
    else
      --a23[2];
  }
  if (a22)
  {
    if (a22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a22 + 8))(a22);
    else
      --a22[2];
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::RenderThemeIOS::attachmentStyleSheet@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a1 = v4;
  return result;
}

uint64_t WebCore::RenderThemeIOS::paintSystemPreviewBadge(WebCore::RenderThemeIOS *this, WebCore::Image *a2, const WebCore::PaintInfo *a3, const WebCore::FloatRect *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;

  v6 = *((_QWORD *)a3 + 10);
  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  *(_BYTE *)(v7 + 12) = 1;
  *(_QWORD *)v7 = &unk_1E3232F40;
  ++*((_DWORD *)a2 + 2);
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = 0;
  *(float *)(v7 + 32) = (*(float (**)(WebCore::Image *, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0);
  *(_DWORD *)(v7 + 36) = v8;
  result = (*(uint64_t (**)(uint64_t, uint64_t, const WebCore::FloatRect *))(*(_QWORD *)v6 + 352))(v6, v7, a4);
  if (*(_DWORD *)(v7 + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  --*(_DWORD *)(v7 + 8);
  return result;
}

void sub_1954250E4(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

void WebCore::RenderThemeIOS::checkboxRadioBorderColor(uint64_t *a1, uint64_t a2, char a3, unsigned __int8 a4)
{
  float v6;
  float v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  WebCore::RenderThemeIOS::systemColor(a2, 191, a4, &v12);
  if ((a3 & 8) != 0)
  {
    if ((a3 & 2) == 0)
    {
      *a1 = v12;
      return;
    }
    if ((v12 & 0x8000000000000) != 0)
      v6 = *(float *)((v12 & 0xFFFFFFFFFFFFLL) + 0x10);
    else
      v6 = (float)v12 / 255.0;
    v7 = 0.75;
  }
  else
  {
    if ((v12 & 0x8000000000000) != 0)
      v6 = *(float *)((v12 & 0xFFFFFFFFFFFFLL) + 0x10);
    else
      v6 = (float)v12 / 255.0;
    v7 = 0.3;
  }
  WebCore::Color::colorWithAlpha((uint64_t)&v12, v6 * v7, a1);
  if ((v12 & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
}

void WebCore::RenderThemeIOS::checkboxRadioBackgroundColor(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4, char a5, unsigned __int8 a6)
{
  int v8;
  unsigned __int8 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  float v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v8 = a5 & 0x90;
  if (a3)
  {
    if ((a5 & 8) == 0)
    {
      v9 = a6;
LABEL_5:
      if ((a5 & 0x90) != 0)
        v10 = 222;
      else
        v10 = 225;
      WebCore::RenderThemeIOS::systemColor(a2, v10, v9, a1);
      return;
    }
    *a1 = 0;
    v11 = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)v11 = 1;
    v12 = v11 | 0x10C000000000000;
    if ((a5 & 2) != 0)
    {
      if (v8)
        v13 = xmmword_1968DE9E0;
      else
        v13 = xmmword_1968DE9F0;
    }
    else if (v8)
    {
      v13 = xmmword_1968DEA00;
    }
    else
    {
      v13 = xmmword_1968DEA10;
    }
    *(_OWORD *)(v11 + 4) = v13;
LABEL_31:
    *a1 = v12;
    return;
  }
  v9 = a6;
  if ((a5 & 8) == 0)
    goto LABEL_5;
  if ((a5 & 0x90) != 0)
  {
    if ((*(_BYTE *)(a4[3] + 238) & 0x80) == 0)
    {
      WebCore::RenderStyle::usedAccentColor(a4, a6, (unint64_t *)&v21);
      if ((a5 & 2) != 0)
        goto LABEL_15;
LABEL_27:
      v12 = v21;
      goto LABEL_31;
    }
    v19 = a2;
    v20 = 207;
  }
  else
  {
    v19 = a2;
    v20 = 225;
  }
  WebCore::RenderThemeIOS::systemColor(v19, v20, a6, &v21);
  if ((a5 & 2) == 0)
    goto LABEL_27;
LABEL_15:
  if ((v21 & 0x8000000000000) != 0)
    v14 = *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0x10);
  else
    v14 = (float)v21 / 255.0;
  WebCore::Color::colorWithAlpha((uint64_t)&v21, v14 * 0.75, a1);
  if ((v21 & 0x8000000000000) != 0)
  {
    v16 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v15);
    }
  }
}

void WebCore::RenderThemeIOS::checkboxRadioIndicatorColor(uint64_t *a1, uint64_t a2, char a3, unsigned __int8 a4)
{
  float v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  if ((a3 & 8) != 0)
  {
    WebCore::RenderThemeIOS::systemColor(a2, 190, a4 | 4, &v11);
    if ((a3 & 2) != 0)
    {
      if ((v11 & 0x8000000000000) != 0)
        v6 = *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10);
      else
        v6 = (float)v11 / 255.0;
      WebCore::Color::colorWithAlpha((uint64_t)&v11, v6 * 0.75, a1);
      if ((v11 & 0x8000000000000) != 0)
      {
        v8 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v7);
        }
      }
    }
    else
    {
      *a1 = v11;
    }
  }
  else
  {
    WebCore::RenderThemeIOS::systemColor(a2, 192, a4, a1);
  }
}

uint64_t WebCore::RenderThemeIOS::paintCheckboxRadioInnerShadow(WebCore::GraphicsContext *a1, __int128 *a2, char a3)
{
  float32x2_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  float v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  double v33;
  void *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  void *v46;
  void *v47;
  unsigned int v48;
  unsigned int v49;
  void *v50;
  __int128 v56;
  __n128 v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  void *v61;
  void *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  float32x2_t v86[3];
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  WTF *v92[2];
  __int128 v93;
  __int128 v94;
  char v95;
  int v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a1 + 96))(a1, 1);
  if ((a3 & 2) != 0)
    goto LABEL_64;
  v6 = vadd_f32(*(float32x2_t *)a2, *(float32x2_t *)((char *)a2 + 8));
  *(_QWORD *)&v83 = *(_QWORD *)a2;
  *((float32x2_t *)&v83 + 1) = v6;
  HIDWORD(v84) = 0;
  v92[0] = (WTF *)&v93;
  v92[1] = (WTF *)2;
  v95 = 1;
  v7 = WTF::fastMalloc((WTF *)0xC8);
  WebCore::Gradient::Gradient(v7, &v83, 0x600000000, 1, 0, (uint64_t *)v92, 0, 0);
  v9 = v92[0];
  if (HIDWORD(v92[1]))
  {
    v10 = (WTF *)((char *)v92[0] + 16 * HIDWORD(v92[1]));
    do
    {
      v11 = *((_QWORD *)v9 + 1);
      if ((v11 & 0x8000000000000) != 0)
      {
        v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v8);
        }
      }
      v9 = (WTF *)((char *)v9 + 16);
    }
    while (v9 != v10);
    v9 = v92[0];
  }
  if (&v93 != (__int128 *)v9 && v9 != 0)
  {
    v92[0] = 0;
    LODWORD(v92[1]) = 0;
    WTF::fastFree(v9, v8);
  }
  LODWORD(v92[0]) = 0;
  v16 = WTF::fastMalloc((WTF *)0x14);
  v17 = 0.05;
  if ((a3 & 0x90) != 0)
    v17 = 0.125;
  *(_DWORD *)v16 = 1;
  *(_DWORD *)(v16 + 4) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  *(float *)(v16 + 16) = v17;
  v92[1] = (WTF *)(v16 | 0x10C000000000000);
  WebCore::Gradient::addColorStop(v7, (float *)v92);
  if (((unint64_t)v92[1] & 0x8000000000000) != 0)
  {
    v77 = (unsigned int *)((unint64_t)v92[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v78 = __ldaxr(v77);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, v77));
    if (!v79)
    {
      atomic_store(1u, v77);
      WTF::fastFree((WTF *)v77, v18);
    }
  }
  LODWORD(v92[0]) = 1065353216;
  v19 = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 12) = 0;
  *(_QWORD *)(v19 + 4) = 0;
  v92[1] = (WTF *)(v19 | 0x10C000000000000);
  WebCore::Gradient::addColorStop(v7, (float *)v92);
  if (((unint64_t)v92[1] & 0x8000000000000) != 0)
  {
    v80 = (unsigned int *)((unint64_t)v92[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v80));
    if (!v82)
    {
      atomic_store(1u, v80);
      WTF::fastFree((WTF *)v80, v20);
    }
  }
  v21 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v21))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEA534C](v21);
LABEL_24:
  ++*(_QWORD *)(v21 + 8);
  v23 = __ldxr((unsigned __int8 *)v21);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, (unsigned __int8 *)v21))
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
  *(_QWORD *)&v83 = v7;
  *(_OWORD *)v92 = xmmword_1968DEB28;
  v93 = unk_1968DEB38;
  v94 = xmmword_1968DEB48;
  WebCore::SourceBrush::setGradient((uint64_t)a1 + 8, (uint64_t *)&v83, (__int128 *)v92);
  *((_DWORD *)a1 + 46) |= 1u;
  (*(void (**)(WebCore::GraphicsContext *, _DWORD *))(*(_QWORD *)a1 + 88))(a1, (_DWORD *)a1 + 2);
  v25 = v83;
  *(_QWORD *)&v83 = 0;
  if (!v25)
    goto LABEL_46;
  v26 = *(_QWORD *)(v25 + 8);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_34;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_34:
  v28 = *(_QWORD *)(v26 + 8);
  v29 = v28 - 1;
  *(_QWORD *)(v26 + 8) = v28 - 1;
  if (v28 == 1)
  {
    v67 = *(_QWORD *)(v26 + 16);
    v30 = *(_QWORD *)(v26 + 24);
    *(_QWORD *)(v26 + 24) = 0;
    v31 = v67 != 0;
  }
  else
  {
    v30 = 0;
    v31 = 1;
  }
  v32 = __ldxr((unsigned __int8 *)v26);
  if (v32 != 1)
  {
    __clrex();
LABEL_41:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
    if (v29)
      goto LABEL_46;
    goto LABEL_42;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
    goto LABEL_41;
  if (v29)
    goto LABEL_46;
LABEL_42:
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (!v31)
    WTF::fastFree((WTF *)v26, v24);
LABEL_46:
  v96 = 0;
  v33 = WebCore::Path::addRoundedRect((WebCore::Path *)v92, (WebCore::FloatRect *)a2, 0);
  (*(void (**)(WebCore::GraphicsContext *, WTF **, double))(*(_QWORD *)a1 + 176))(a1, v92, v33);
  if (v96 != -1)
    ((void (*)(__int128 *, WTF **))off_1E335C4E8[v96])(&v83, &v92[1]);
  v35 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v35))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v35))
  {
    goto LABEL_52;
  }
  MEMORY[0x19AEA534C](v35);
LABEL_52:
  v37 = *(_QWORD *)(v35 + 8);
  v38 = v37 - 1;
  *(_QWORD *)(v35 + 8) = v37 - 1;
  if (v37 == 1)
  {
    v66 = *(_QWORD *)(v35 + 16);
    v39 = *(_QWORD *)(v35 + 24);
    *(_QWORD *)(v35 + 24) = 0;
    v40 = v66 != 0;
  }
  else
  {
    v39 = 0;
    v40 = 1;
  }
  v41 = __ldxr((unsigned __int8 *)v35);
  if (v41 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v35))
    {
      if (v38)
        goto LABEL_64;
      goto LABEL_60;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v35);
  if (v38)
    goto LABEL_64;
LABEL_60:
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (!v40)
    WTF::fastFree((WTF *)v35, v34);
LABEL_64:
  v42 = WTF::fastMalloc((WTF *)0x14);
  v43 = dword_1968DE670[(a3 & 0x90) == 0];
  *(_DWORD *)v42 = 1;
  *(_DWORD *)(v42 + 4) = 0;
  *(_QWORD *)(v42 + 8) = 0;
  *(_DWORD *)(v42 + 16) = v43;
  v92[0] = (WTF *)0x4000000040000000;
  LODWORD(v92[1]) = 1077936128;
  *(_QWORD *)&v93 = v42 | 0x10C000000000000;
  v44 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFLL);
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 + 1, v44));
  *((_QWORD *)&v93 + 1) = 0x3F80000000000000;
  LOBYTE(v94) = 1;
  WebCore::GraphicsContextState::setDropShadow((uint64_t)a1 + 8, (uint64_t)v92);
  if ((_BYTE)v94)
  {
    if ((v93 & 0x8000000000000) != 0)
    {
      v71 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFLL);
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
      {
        atomic_store(1u, v71);
        WTF::fastFree((WTF *)v71, v46);
      }
    }
  }
  (*(void (**)(WebCore::GraphicsContext *, _DWORD *))(*(_QWORD *)a1 + 88))(a1, (_DWORD *)a1 + 2);
  do
  {
    v48 = __ldaxr(v44);
    v49 = v48 - 1;
  }
  while (__stlxr(v49, v44));
  if (!v49)
  {
    atomic_store(1u, v44);
    WTF::fastFree((WTF *)v44, v47);
  }
  v92[0] = (WTF *)0x11040000000000FFLL;
  WebCore::GraphicsContext::setFillColor(a1, (const WebCore::Color *)v92);
  if (((unint64_t)v92[0] & 0x8000000000000) != 0)
  {
    v68 = (unsigned int *)((unint64_t)v92[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, v68);
      WTF::fastFree((WTF *)v68, v50);
    }
  }
  v96 = 0;
  *(_OWORD *)v86[0].f32 = *a2;
  __asm
  {
    FMOV            V0.2S, #-5.0
    FMOV            V1.2S, #5.0
  }
  v86[0] = vadd_f32(v86[0], _D0);
  v86[1] = vadd_f32(vadd_f32(v86[1], _D1), _D1);
  WebCore::Path::addRect((WebCore::Path *)v92, (const WebCore::FloatRect *)v86);
  v56 = a2[1];
  v83 = *a2;
  v84 = v56;
  v85 = a2[2];
  *(float32x2_t *)&v83 = vadd_f32(*(float32x2_t *)&v83, (float32x2_t)0xBF000000BF000000);
  *((float32x2_t *)&v83 + 1) = vadd_f32(vadd_f32(*(float32x2_t *)((char *)&v83 + 8), (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000);
  v57.n128_f64[0] = WebCore::Path::addRoundedRect((WebCore::Path *)v92, (WebCore::FloatRect *)&v83, 0);
  if (!*((_BYTE *)a1 + 192))
  {
    *((_BYTE *)a1 + 192) = 1;
    *((_DWORD *)a1 + 46) |= 2u;
  }
  (*(void (**)(WebCore::GraphicsContext *, _DWORD *, __n128))(*(_QWORD *)a1 + 88))(a1, (_DWORD *)a1 + 2, v57);
  (*(void (**)(WebCore::GraphicsContext *, WTF **))(*(_QWORD *)a1 + 176))(a1, v92);
  v58 = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)v58 = 1;
  *(_OWORD *)(v58 + 4) = xmmword_1968DEA20;
  v87 = 0;
  v88 = 1065353216;
  v89 = v58 | 0x10C000000000000;
  v59 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFLL);
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v60 + 1, v59));
  v90 = 0x3F80000000000000;
  v91 = 1;
  WebCore::GraphicsContextState::setDropShadow((uint64_t)a1 + 8, (uint64_t)&v87);
  if (v91)
  {
    if ((v89 & 0x8000000000000) != 0)
    {
      v74 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFLL);
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
      {
        atomic_store(1u, v74);
        WTF::fastFree((WTF *)v74, v61);
      }
    }
  }
  (*(void (**)(WebCore::GraphicsContext *, _DWORD *))(*(_QWORD *)a1 + 88))(a1, (_DWORD *)a1 + 2);
  do
  {
    v63 = __ldaxr(v59);
    v64 = v63 - 1;
  }
  while (__stlxr(v64, v59));
  if (!v64)
  {
    atomic_store(1u, v59);
    WTF::fastFree((WTF *)v59, v62);
  }
  (*(void (**)(WebCore::GraphicsContext *, WTF **))(*(_QWORD *)a1 + 176))(a1, v92);
  if (v96 != -1)
    ((void (*)(__int128 *, WTF **))off_1E335C4E8[v96])(&v83, &v92[1]);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a1 + 104))(a1, 1);
}

void sub_195425C94(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;

  v5 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
LABEL_6:
    v7 = *(_QWORD *)(v5 + 8);
    v8 = v7 - 1;
    *(_QWORD *)(v5 + 8) = v7 - 1;
    if (v7 == 1)
    {
      v12 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      v10 = v12 != 0;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
LABEL_13:
        if (!v8)
        {
          if (v9)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          if (!v10)
            WTF::fastFree((WTF *)v5, a2);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 104))(v2, 1);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v5);
  goto LABEL_6;
}

uint64_t WebCore::RenderThemeIOS::paintCheckbox(WebCore::RenderThemeIOS *this, const WebCore::RenderObject *a2, const WebCore::PaintInfo *a3, float32x2_t *a4)
{
  const WebCore::RenderObject *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  const WebCore::RenderObject *v13;
  WebCore *v14;
  char ControlStyleStatesForRendererInternal;
  WebCore::Document *v16;
  const WebCore::RenderObject *v17;
  const WebCore::RenderStyle *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  float32x2_t v33;
  float v34;
  void *v35;
  void *v36;
  float v41;
  unsigned int v42;
  unsigned int v43;
  void *v44;
  WTF *v46;
  void *v47;
  WTF *v48;
  void *v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  WebCore::RenderThemeIOS *v60;
  __n128 v61;
  double v62;
  double v63;
  float64x2_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  int32x4_t v69;
  int32x4_t v70;
  _BYTE v71[8];
  uint64_t v72;
  int v73;
  uint64_t v74;

  v6 = a2;
  v74 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8)
                                                                                         + 40)
                                                                             + 8)
                                                                 + 528)
                                                     + 8)
                                         + 24)
                             + 8)
                 + 112);
  v9 = *(unsigned __int8 *)(v8 + 724);
  v10 = *(unsigned int *)(v8 + 720);
  v11 = *((_QWORD *)a3 + 10);
  v12 = ((__n128 (*)(uint64_t, uint64_t))*(_QWORD *)(*(_QWORD *)v11 + 96))(v11, 1);
  v12.n128_f32[0] = (float)(a4[1].f32[1] * 5.0) * 0.0625;
  v68 = *(_OWORD *)a4->f32;
  v69 = vdupq_lane_s32((int32x2_t)v12.n128_u64[0], 0);
  v70 = v69;
  v14 = WebCore::effectiveRendererForAppearance(v6, v13);
  v60 = this;
  if (v14)
    ControlStyleStatesForRendererInternal = WebCore::RenderTheme::extractControlStyleStatesForRendererInternal(this, v14);
  else
    ControlStyleStatesForRendererInternal = 0;
  v16 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 8) + 40) + 8);
  v17 = v6;
  if ((*((_BYTE *)v6 + 45) & 2) != 0)
  {
    v17 = (const WebCore::RenderObject *)*((_QWORD *)v6 + 4);
    if (v17)
      v17 = (const WebCore::RenderObject *)*((_QWORD *)v17 + 1);
  }
  v18 = (const WebCore::RenderObject *)((char *)v17 + 80);
  v19 = *((_QWORD *)v16 + 66);
  if (v19
    && (v20 = *(_QWORD *)(v19 + 8)) != 0
    && (v21 = *(_QWORD *)(v20 + 24)) != 0
    && (v22 = *(_QWORD *)(v21 + 8)) != 0)
  {
    v23 = (*(_DWORD *)v22)++;
    v24 = *(unsigned __int8 *)(v22 + 450);
    if (v23)
    {
      *(_DWORD *)v22 = v23;
      if (!v24)
        goto LABEL_13;
      goto LABEL_11;
    }
    WebCore::Page::~Page(v22);
    WTF::fastFree(v46, v47);
    if (v24)
LABEL_11:
      LOBYTE(v24) = 2;
  }
  else
  {
    LOBYTE(v24) = 0;
  }
LABEL_13:
  if (WebCore::Document::useDarkAppearance(v16, v18))
    LOBYTE(v24) = v24 | 4;
  v25 = *((_QWORD *)v16 + 66);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 8);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 24);
      if (v27)
      {
        v28 = *(_QWORD *)(v27 + 8);
        if (v28)
        {
          v29 = (*(_DWORD *)v28)++;
          v30 = *(unsigned __int8 *)(v28 + 451);
          if (v29)
          {
            *(_DWORD *)v28 = v29;
            if (!v30)
              goto LABEL_21;
          }
          else
          {
            WebCore::Page::~Page(v28);
            WTF::fastFree(v48, v49);
            if (!v30)
              goto LABEL_21;
          }
          LOBYTE(v24) = v24 | 8;
        }
      }
    }
  }
LABEL_21:
  v31 = v10 | (v9 << 32);
  if ((*((_BYTE *)v6 + 45) & 2) != 0)
  {
    v50 = *((_QWORD *)v6 + 4);
    if (v50)
      v6 = *(const WebCore::RenderObject **)(v50 + 8);
    else
      v6 = 0;
  }
  WebCore::RenderThemeIOS::checkboxRadioBackgroundColor(&v67, (uint64_t)v60, (v31 >> 33) & 1, (uint64_t *)v6 + 10, ControlStyleStatesForRendererInternal, v24);
  if ((ControlStyleStatesForRendererInternal & 0x90) != 0)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t *, uint64_t))(*(_QWORD *)v11 + 264))(v11, &v68, &v67, 1);
    if ((v31 & 0x200000000) != 0)
    {
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 464))(v11, &v68);
      WebCore::RenderThemeIOS::paintCheckboxRadioInnerShadow(*((WebCore::GraphicsContext **)a3 + 10), &v68, ControlStyleStatesForRendererInternal);
    }
    v73 = 0;
    if (ControlStyleStatesForRendererInternal < 0)
    {
      __asm { FMOV            V0.2S, #1.25 }
      v66 = _Q0.n128_u64[0];
      v41 = a4[1].f32[1];
      _Q0.n128_f32[0] = v41 * 0.12;
      *(float *)&v42 = (float)((float)(v41 * 0.5) + a4->f32[1]) - (float)((float)(v41 * 0.12) * 0.5);
      *(float *)&v43 = a4[1].f32[0] + -5.0;
      v61.n128_f32[0] = a4->f32[0] + 2.5;
      *(unint64_t *)((char *)v61.n128_u64 + 4) = __PAIR64__(v43, v42);
      v61.n128_u32[3] = _Q0.n128_u32[0];
      WebCore::Path::addRoundedRect((WebCore::Path *)v71, &v61, (float *)&v66, 0, _Q0);
    }
    else
    {
      v61.n128_u64[0] = 0x42894DD341E1645ALL;
      WebCore::Path::moveTo((WebCore::Path *)v71, (const WebCore::FloatPoint *)&v61);
      v61.n128_u64[0] = 0x42894DD341F80C4ALL;
      v65 = 0x4282A9FC420AAC08;
      v66 = 0x428727F042049DB2;
      WebCore::Path::addBezierCurveTo((uint64_t)v71, (const WebCore::FloatPoint *)&v61, (const WebCore::FloatPoint *)&v66, (const WebCore::FloatPoint *)&v65);
      v61.n128_u64[0] = 0x41347AE1428C0A3DLL;
      WebCore::Path::addLineTo((uint64_t)v71, (const WebCore::FloatPoint *)&v61);
      v61.n128_u64[0] = 0x4119EB85428E3021;
      v65 = 0x40D48B44428F29FCLL;
      v66 = 0x4101B646428F29FCLL;
      WebCore::Path::addBezierCurveTo((uint64_t)v71, (const WebCore::FloatPoint *)&v61, (const WebCore::FloatPoint *)&v66, (const WebCore::FloatPoint *)&v65);
      v61.n128_u64[0] = 0x40322D0E428F29FCLL;
      v65 = 0x3A83126F428164DDLL;
      v66 = 0x3A83126F42894DD3;
      WebCore::Path::addBezierCurveTo((uint64_t)v71, (const WebCore::FloatPoint *)&v61, (const WebCore::FloatPoint *)&v66, (const WebCore::FloatPoint *)&v65);
      v61.n128_u64[0] = 0x3A83126F42780C4ALL;
      v65 = 0x406428F6426AC396;
      v66 = 0x3F7A5E3542716873;
      WebCore::Path::addBezierCurveTo((uint64_t)v71, (const WebCore::FloatPoint *)&v61, (const WebCore::FloatPoint *)&v66, (const WebCore::FloatPoint *)&v65);
      v61.n128_u64[0] = 0x4250666641E0374CLL;
      WebCore::Path::addLineTo((uint64_t)v71, (const WebCore::FloatPoint *)&v61);
      v61.n128_u64[0] = 0x4202147B4145A9FCLL;
      WebCore::Path::addLineTo((uint64_t)v71, (const WebCore::FloatPoint *)&v61);
      v61.n128_u64[0] = 0x41F54FDF412D70A4;
      v65 = 0x41EEAC0840DC49BALL;
      v66 = 0x41EEAC084112E148;
      WebCore::Path::addBezierCurveTo((uint64_t)v71, (const WebCore::FloatPoint *)&v61, (const WebCore::FloatPoint *)&v66, (const WebCore::FloatPoint *)&v65);
      v61.n128_u64[0] = 0x41EEAC08403872B0;
      v65 = 0x421249BA00000000;
      v66 = 0x4202A9FC00000000;
      WebCore::Path::addBezierCurveTo((uint64_t)v71, (const WebCore::FloatPoint *)&v61, (const WebCore::FloatPoint *)&v66, (const WebCore::FloatPoint *)&v65);
      v61.n128_u64[0] = 0x421920C500000000;
      v65 = 0x42260419400020C5;
      v66 = 0x421F2E143F0978D5;
      WebCore::Path::addBezierCurveTo((uint64_t)v71, (const WebCore::FloatPoint *)&v61, (const WebCore::FloatPoint *)&v66, (const WebCore::FloatPoint *)&v65);
      v61.n128_u64[0] = 0x4283400041AE9BA6;
      WebCore::Path::addLineTo((uint64_t)v71, (const WebCore::FloatPoint *)&v61);
      v61.n128_u64[0] = 0x4287599A41BC49BALL;
      v65 = 0x42894DD341E1645ALL;
      v66 = 0x42894DD341CC49BALL;
      WebCore::Path::addBezierCurveTo((uint64_t)v71, (const WebCore::FloatPoint *)&v61, (const WebCore::FloatPoint *)&v66, (const WebCore::FloatPoint *)&v65);
      v33 = a4[1];
      v34 = (float)(0.65 * v33.f32[0]) / 72.0;
      v64 = vaddq_f64(vcvtq_f64_f32(vadd_f32(vadd_f32(vmul_f32(v33, (float32x2_t)0x3F0000003F000000), *a4), vmul_f32(vmul_n_f32((float32x2_t)0xC28A0000C2900000, v34), (float32x2_t)0x3F0000003F000000))), (float64x2_t)0);
      v61.n128_f64[0] = v34;
      v61.n128_f64[1] = v34 * 0.0;
      v62 = v61.n128_f64[1];
      v63 = v34;
      WebCore::Path::transform((WebCore::Path *)v71, (float64x2_t *)&v61);
    }
    WebCore::RenderThemeIOS::checkboxRadioIndicatorColor((uint64_t *)&v61, (uint64_t)v60, ControlStyleStatesForRendererInternal, v24);
    WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v11, (const WebCore::Color *)&v61);
    if ((v61.n128_u64[0] & 0x8000000000000) != 0)
    {
      v54 = (unsigned int *)(v61.n128_u64[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        atomic_store(1u, v54);
        WTF::fastFree((WTF *)v54, v44);
      }
    }
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 176))(v11, v71);
  }
  else
  {
    v73 = 0;
    WebCore::Path::addRoundedRect((WebCore::Path *)v71, (WebCore::FloatRect *)&v68, 0);
    if ((v31 & 0x200000000) == 0)
    {
      WebCore::RenderThemeIOS::checkboxRadioBorderColor((uint64_t *)&v61, (uint64_t)v60, ControlStyleStatesForRendererInternal, v24);
      WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v11, (const WebCore::Color *)&v61);
      if ((v61.n128_u64[0] & 0x8000000000000) != 0)
      {
        v57 = (unsigned int *)(v61.n128_u64[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v58 = __ldaxr(v57);
          v59 = v58 - 1;
        }
        while (__stlxr(v59, v57));
        if (!v59)
        {
          atomic_store(1u, v57);
          WTF::fastFree((WTF *)v57, v35);
        }
      }
      if (*(float *)(v11 + 188) != 3.0)
      {
        *(_DWORD *)(v11 + 184) |= 8u;
        *(_DWORD *)(v11 + 188) = 1077936128;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 88))(v11, v11 + 8);
      if (*(_BYTE *)(v11 + 193) != 1)
      {
        *(_BYTE *)(v11 + 193) = 1;
        *(_DWORD *)(v11 + 184) |= 0x10u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 88))(v11, v11 + 8);
    }
    WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v11, (const WebCore::Color *)&v67);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v11 + 496))(v11, v71, 1);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 192))(v11, v71);
    if ((v31 & 0x200000000) != 0)
      WebCore::RenderThemeIOS::paintCheckboxRadioInnerShadow(*((WebCore::GraphicsContext **)a3 + 10), &v68, ControlStyleStatesForRendererInternal);
  }
  if (v73 != -1)
    ((void (*)(__n128 *, uint64_t *))off_1E335C4E8[v73])(&v61, &v72);
  if ((v67 & 0x8000000000000) != 0)
  {
    v51 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFLL);
    do
    {
      v52 = __ldaxr(v51);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, v51));
    if (!v53)
    {
      atomic_store(1u, v51);
      WTF::fastFree((WTF *)v51, v36);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 104))(v11, 1);
  return 0;
}

void sub_1954266FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  uint64_t v34;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;

  if ((a10 & 0x8000000000000) != 0)
  {
    v36 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v36);
      WTF::fastFree((WTF *)v36, a2);
    }
  }
  if (a34 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E335C4E8[a34])(&a10, &a27);
  if ((a18 & 0x8000000000000) != 0)
  {
    v39 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFLL);
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v39);
      WTF::fastFree((WTF *)v39, a2);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 104))(v34, 1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::RenderThemeIOS::paintRadio(WebCore::RenderThemeIOS *this, const WebCore::RenderObject *a2, const WebCore::PaintInfo *a3, const WebCore::FloatRect *a4)
{
  const WebCore::RenderObject *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WebCore::RenderObject *v11;
  WebCore *v12;
  char ControlStyleStatesForRendererInternal;
  WebCore::Document *v14;
  const WebCore::RenderObject *v15;
  const WebCore::RenderStyle *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  __int128 v30;
  void *v31;
  void *v32;
  float32x2_t v33;
  float v34;
  void *v35;
  void *v36;
  WTF *v38;
  void *v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v56;
  __int128 v57[3];
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[48];
  uint64_t v61;
  uint64_t v62;

  v5 = a2;
  v62 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8)
                                                                                         + 40)
                                                                             + 8)
                                                                 + 528)
                                                     + 8)
                                         + 24)
                             + 8)
                 + 112);
  v8 = *(unsigned __int8 *)(v7 + 724);
  v9 = *(unsigned int *)(v7 + 720);
  v10 = *((_QWORD *)a3 + 10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 96))(v10, 1);
  v12 = WebCore::effectiveRendererForAppearance(v5, v11);
  if (v12)
    ControlStyleStatesForRendererInternal = WebCore::RenderTheme::extractControlStyleStatesForRendererInternal(this, v12);
  else
    ControlStyleStatesForRendererInternal = 0;
  v14 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8);
  v15 = v5;
  if ((*((_BYTE *)v5 + 45) & 2) != 0)
  {
    v15 = (const WebCore::RenderObject *)*((_QWORD *)v5 + 4);
    if (v15)
      v15 = (const WebCore::RenderObject *)*((_QWORD *)v15 + 1);
  }
  v16 = (const WebCore::RenderObject *)((char *)v15 + 80);
  v17 = *((_QWORD *)v14 + 66);
  if (v17
    && (v18 = *(_QWORD *)(v17 + 8)) != 0
    && (v19 = *(_QWORD *)(v18 + 24)) != 0
    && (v20 = *(_QWORD *)(v19 + 8)) != 0)
  {
    v21 = (*(_DWORD *)v20)++;
    v22 = *(unsigned __int8 *)(v20 + 450);
    if (v21)
    {
      *(_DWORD *)v20 = v21;
      if (!v22)
        goto LABEL_13;
      goto LABEL_11;
    }
    WebCore::Page::~Page(v20);
    WTF::fastFree(v38, v39);
    if (v22)
LABEL_11:
      LOBYTE(v22) = 2;
  }
  else
  {
    LOBYTE(v22) = 0;
  }
LABEL_13:
  if (WebCore::Document::useDarkAppearance(v14, v16))
    LOBYTE(v22) = v22 | 4;
  v23 = *((_QWORD *)v14 + 66);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 8);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 24);
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 8);
        if (v26)
        {
          v27 = (*(_DWORD *)v26)++;
          v28 = *(unsigned __int8 *)(v26 + 451);
          if (v27)
          {
            *(_DWORD *)v26 = v27;
            if (!v28)
              goto LABEL_21;
          }
          else
          {
            WebCore::Page::~Page(v26);
            WTF::fastFree(v40, v41);
            if (!v28)
              goto LABEL_21;
          }
          LOBYTE(v22) = v22 | 8;
        }
      }
    }
  }
LABEL_21:
  v29 = v9 | (v8 << 32);
  if ((*((_BYTE *)v5 + 45) & 2) != 0)
  {
    v42 = *((_QWORD *)v5 + 4);
    if (v42)
      v5 = *(const WebCore::RenderObject **)(v42 + 8);
    else
      v5 = 0;
  }
  WebCore::RenderThemeIOS::checkboxRadioBackgroundColor(&v58, (uint64_t)this, (v29 >> 33) & 1, (uint64_t *)v5 + 10, ControlStyleStatesForRendererInternal, v22);
  *(float32x2_t *)&v30 = vmul_f32(*(float32x2_t *)((char *)a4 + 8), (float32x2_t)0x3F0000003F000000);
  *((_QWORD *)&v30 + 1) = v30;
  v57[0] = *(_OWORD *)a4;
  v57[1] = v30;
  v57[2] = v30;
  if ((ControlStyleStatesForRendererInternal & 0x10) != 0)
  {
    WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v10, (const WebCore::Color *)&v58);
    (*(void (**)(uint64_t, const WebCore::FloatRect *))(*(_QWORD *)v10 + 200))(v10, a4);
    if ((v29 & 0x200000000) != 0)
    {
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v10 + 464))(v10, v57);
      WebCore::RenderThemeIOS::paintCheckboxRadioInnerShadow(*((WebCore::GraphicsContext **)a3 + 10), v57, ControlStyleStatesForRendererInternal);
    }
    *(_OWORD *)v60 = *(_OWORD *)a4;
    v33 = vmul_f32(*(float32x2_t *)&v60[8], (float32x2_t)vdup_n_s32(0xBE924925));
    *(float *)v60 = *(float *)v60 - v33.f32[0];
    *(float *)&v60[4] = *(float *)&v60[4] - v33.f32[1];
    *(float32x2_t *)&v60[8] = vadd_f32(v33, vadd_f32(*(float32x2_t *)&v60[8], v33));
    if ((ControlStyleStatesForRendererInternal & 8) != 0)
    {
      WebCore::RenderThemeIOS::systemColor((uint64_t)this, 190, v22 | 4, &v59);
      if ((ControlStyleStatesForRendererInternal & 2) != 0)
      {
        if ((v59 & 0x8000000000000) != 0)
          v34 = *(float *)((v59 & 0xFFFFFFFFFFFFLL) + 0x10);
        else
          v34 = (float)v59 / 255.0;
        WebCore::Color::colorWithAlpha((uint64_t)&v59, v34 * 0.75, &v56);
        if ((v59 & 0x8000000000000) != 0)
        {
          v52 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFLL);
          do
          {
            v53 = __ldaxr(v52);
            v54 = v53 - 1;
          }
          while (__stlxr(v54, v52));
          if (!v54)
          {
            atomic_store(1u, v52);
            WTF::fastFree((WTF *)v52, v35);
          }
        }
      }
      else
      {
        v56 = v59;
      }
    }
    else
    {
      WebCore::RenderThemeIOS::systemColor((uint64_t)this, 192, v22, &v56);
    }
    WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v10, (const WebCore::Color *)&v56);
    if ((v56 & 0x8000000000000) != 0)
    {
      v46 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFLL);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        atomic_store(1u, v46);
        WTF::fastFree((WTF *)v46, v36);
      }
    }
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 200))(v10, v60);
  }
  else
  {
    *(_OWORD *)&v60[8] = *(_OWORD *)a4;
    v61 = 0x100000008;
    if ((v29 & 0x200000000) == 0)
    {
      WebCore::RenderThemeIOS::checkboxRadioBorderColor(&v59, (uint64_t)this, ControlStyleStatesForRendererInternal, v22);
      WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v10, (const WebCore::Color *)&v59);
      if ((v59 & 0x8000000000000) != 0)
      {
        v49 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFLL);
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
        {
          atomic_store(1u, v49);
          WTF::fastFree((WTF *)v49, v31);
        }
      }
      if (*(float *)(v10 + 188) != 3.0)
      {
        *(_DWORD *)(v10 + 184) |= 8u;
        *(_DWORD *)(v10 + 188) = 1077936128;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, v10 + 8);
      if (*(_BYTE *)(v10 + 193) != 1)
      {
        *(_BYTE *)(v10 + 193) = 1;
        *(_DWORD *)(v10 + 184) |= 0x10u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, v10 + 8);
    }
    WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v10, (const WebCore::Color *)&v58);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v10 + 496))(v10, v60, 1);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 192))(v10, v60);
    if ((v29 & 0x200000000) != 0)
      WebCore::RenderThemeIOS::paintCheckboxRadioInnerShadow(*((WebCore::GraphicsContext **)a3 + 10), v57, ControlStyleStatesForRendererInternal);
    if (HIDWORD(v61) != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E335C4E8[HIDWORD(v61)])(&v59, &v60[8]);
  }
  if ((v58 & 0x8000000000000) != 0)
  {
    v43 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFLL);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v43);
      WTF::fastFree((WTF *)v43, v32);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(v10, 1);
  return 0;
}

void sub_195426D80(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  uint64_t v27;
  uint64_t v28;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if ((a18 & 0x8000000000000) != 0)
  {
    v30 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFLL);
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, a2);
    }
  }
  if (a27 != -1)
    ((void (*)(uint64_t *, uint64_t))off_1E335C4E8[a27])(&a18, v28);
  if ((a17 & 0x8000000000000) != 0)
  {
    v33 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFLL);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, a2);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 104))(v27, 1);
  _Unwind_Resume(a1);
}

BOOL WebCore::RenderThemeIOS::supportsMeter(uint64_t a1, int a2)
{
  return a2 == 11;
}

BOOL WebCore::RenderThemeIOS::paintMeter(WebCore::RenderThemeIOS *this, const WebCore::RenderObject *a2, const WebCore::PaintInfo *a3, const WebCore::IntRect *a4)
{
  int v4;
  const WebCore::RenderObject *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WebCore::RenderObject *v12;
  unsigned __int8 v13;
  int32x2_t v14;
  const WebCore::RenderObject *v15;
  int v16;
  char v17;
  int v18;
  float v19;
  float v20;
  float v21;
  unsigned __int8 v22;
  void *v23;
  float v24;
  float v25;
  float v26;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  void *v38;
  int v39;
  float32x2_t v40;
  float v41;
  float v42;
  double v43;
  float v44;
  double v45;
  float v46;
  float v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  void *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v59;
  void *v60;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  float32x2_t v70;
  float v71;
  float v72;
  int32x4_t v73;
  int32x4_t v74;

  v4 = *((unsigned __int8 *)a2 + 46);
  if (v4 != 23)
    return v4 != 23;
  v7 = a2;
  v9 = WebCore::RenderMeter::meterElement(a2);
  v10 = v9;
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v11 = *((_QWORD *)a3 + 10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 96))(v11, 1);
  v12 = v7;
  if ((*((_BYTE *)v7 + 45) & 2) != 0)
  {
    v12 = (const WebCore::RenderObject *)*((_QWORD *)v7 + 4);
    if (v12)
      v12 = (const WebCore::RenderObject *)*((_QWORD *)v12 + 1);
  }
  v13 = WebCore::Document::styleColorOptions(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 3) + 8) + 40) + 8), (const WebCore::RenderObject *)((char *)v12 + 80));
  v15 = v7;
  if ((*((_BYTE *)v7 + 45) & 2) != 0)
    v15 = *(const WebCore::RenderObject **)(*((_QWORD *)v7 + 4) + 8);
  v16 = (unsigned __int16)*((_DWORD *)v15 + 31) >> 13;
  v17 = 2;
  switch(v16)
  {
    case 1:
    case 2:
      goto LABEL_9;
    case 3:
    case 5:
      LOBYTE(v16) = 3;
      goto LABEL_9;
    case 4:
      goto LABEL_10;
    default:
      LOBYTE(v16) = 0;
LABEL_9:
      v17 = v16;
LABEL_10:
      v18 = *((_DWORD *)a4 + 2);
      v19 = (float)*((int *)a4 + 1);
      v20 = (float)v18;
      if (*((_DWORD *)a4 + 3) < v18)
        v18 = *((_DWORD *)a4 + 3);
      v21 = (float)*((int *)a4 + 3);
      *(float *)v14.i32 = (float)v18 * 0.5;
      v70.f32[0] = (float)*(int *)a4;
      v70.f32[1] = v19;
      v71 = v20;
      v72 = v21;
      v73 = vdupq_lane_s32(v14, 0);
      v74 = v73;
      v22 = v13;
      WebCore::RenderThemeIOS::systemColor((uint64_t)this, 225, v13, &v69);
      (*(void (**)(uint64_t, float32x2_t *, uint64_t *, uint64_t))(*(_QWORD *)v11 + 264))(v11, &v70, &v69, 1);
      if ((v69 & 0x8000000000000) != 0)
      {
        v62 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFLL);
        do
        {
          v63 = __ldaxr(v62);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, v62));
        if (!v64)
        {
          atomic_store(1u, v62);
          WTF::fastFree((WTF *)v62, v23);
        }
      }
      v24 = v71;
      v25 = v72;
      v26 = (float)(v71 + -1.0) + -1.0;
      __asm { FMOV            V5.2S, #1.0 }
      v70 = vadd_f32(v70, _D5);
      v31 = (float)(v72 + -1.0) + -1.0;
      v71 = v26;
      v72 = v31;
      if (v26 < v31)
      {
        if (v24 != 0.0)
        {
          v32 = v26 / v24;
          goto LABEL_18;
        }
LABEL_20:
        v32 = 0.0;
        goto LABEL_21;
      }
      if (v25 == 0.0)
        goto LABEL_20;
      v32 = v31 / v25;
LABEL_18:
      if (v32 == 1.0)
        goto LABEL_33;
LABEL_21:
      v33 = v32 * *(float *)&v73.i32[1];
      *(float *)v73.i32 = v32 * *(float *)v73.i32;
      *(float *)&v73.i32[1] = v32 * *(float *)&v73.i32[1];
      if (*(float *)v73.i32 == 0.0 || v33 == 0.0)
        v73.i64[0] = 0;
      v34 = v32 * *(float *)&v73.i32[3];
      *(float *)&v73.i32[2] = v32 * *(float *)&v73.i32[2];
      *(float *)&v73.i32[3] = v32 * *(float *)&v73.i32[3];
      if (*(float *)&v73.i32[2] == 0.0 || v34 == 0.0)
        v73.i64[1] = 0;
      v35 = v32 * *(float *)&v74.i32[1];
      *(float *)v74.i32 = v32 * *(float *)v74.i32;
      *(float *)&v74.i32[1] = v32 * *(float *)&v74.i32[1];
      if (*(float *)v74.i32 == 0.0 || v35 == 0.0)
        v74.i64[0] = 0;
      *(float *)&v36 = v32 * *(float *)&v74.i32[2];
      v37 = v32 * *(float *)&v74.i32[3];
      v74.i64[1] = __PAIR64__(LODWORD(v37), v36);
      if (*(float *)&v36 == 0.0 || v37 == 0.0)
        v74.i64[1] = 0;
LABEL_33:
      WebCore::RenderThemeIOS::systemColor((uint64_t)this, 222, v22, &v69);
      (*(void (**)(uint64_t, float32x2_t *, uint64_t *, uint64_t))(*(_QWORD *)v11 + 264))(v11, &v70, &v69, 1);
      if ((v69 & 0x8000000000000) != 0)
      {
        v65 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFLL);
        do
        {
          v66 = __ldaxr(v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v65));
        if (!v67)
        {
          atomic_store(1u, v65);
          WTF::fastFree((WTF *)v65, v38);
        }
      }
      (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v11 + 464))(v11, &v70);
      v39 = v17 & 6;
      v40 = v70;
      v41 = v71;
      v42 = v72;
      v43 = WebCore::HTMLMeterElement::valueRatio((WebCore::HTMLMeterElement *)v10);
      if (v39 == 2)
        v44 = v42;
      else
        v44 = v41;
      v45 = (v43 + -1.0) * v44;
      v46 = v45;
      if (v39 == 2)
        v47 = v45;
      else
        v47 = 0.0;
      if (v39 == 2)
        v46 = 0.0;
      if ((*((_BYTE *)v7 + 45) & 2) != 0)
        v7 = *(const WebCore::RenderObject **)(*((_QWORD *)v7 + 4) + 8);
      if ((*((_DWORD *)v7 + 30) & 0x4000000) != 0)
      {
        v47 = -v47;
        v46 = -v46;
      }
      v70.f32[0] = v40.f32[0] + v46;
      v70.f32[1] = v40.f32[1] + v47;
      v71 = v41;
      v72 = v42;
      WebCore::HTMLMeterElement::low((WebCore::HTMLMeterElement *)v10);
      v49 = v48;
      WebCore::HTMLMeterElement::high((WebCore::HTMLMeterElement *)v10);
      v51 = v50;
      WebCore::HTMLMeterElement::value((WebCore::HTMLMeterElement *)v10);
      v53 = v52;
      WebCore::HTMLMeterElement::optimum((WebCore::HTMLMeterElement *)v10);
      if (v54 < v49)
      {
        if (v53 > v49)
        {
          if (v53 <= v51)
            goto LABEL_63;
          goto LABEL_53;
        }
        goto LABEL_59;
      }
      if (v51 < v54)
      {
        if (v51 > v53)
        {
          if (v49 <= v53)
            goto LABEL_63;
LABEL_53:
          WebCore::RenderThemeIOS::systemColor((uint64_t)this, 214, v22, &v69);
          (*(void (**)(uint64_t, float32x2_t *, uint64_t *, uint64_t))(*(_QWORD *)v11 + 264))(v11, &v70, &v69, 1);
          if ((v69 & 0x8000000000000) == 0)
            goto LABEL_64;
          v56 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFLL);
          do
          {
            v57 = __ldaxr(v56);
            _ZF = --v57 == 0;
          }
          while (__stlxr(v57, v56));
          goto LABEL_84;
        }
LABEL_59:
        WebCore::RenderThemeIOS::systemColor((uint64_t)this, 210, v22, &v69);
        (*(void (**)(uint64_t, float32x2_t *, uint64_t *, uint64_t))(*(_QWORD *)v11 + 264))(v11, &v70, &v69, 1);
        if ((v69 & 0x8000000000000) == 0)
          goto LABEL_64;
        v56 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFLL);
        do
        {
          v59 = __ldaxr(v56);
          _ZF = --v59 == 0;
        }
        while (__stlxr(v59, v56));
LABEL_84:
        if (_ZF)
        {
          atomic_store(1u, v56);
          WTF::fastFree((WTF *)v56, v55);
        }
        goto LABEL_64;
      }
      if (v49 <= v53 && v53 <= v51)
        goto LABEL_59;
LABEL_63:
      WebCore::RenderThemeIOS::systemColor((uint64_t)this, 215, v22, &v69);
      (*(void (**)(uint64_t, float32x2_t *, uint64_t *, uint64_t))(*(_QWORD *)v11 + 264))(v11, &v70, &v69, 1);
      if ((v69 & 0x8000000000000) != 0)
      {
        v56 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFLL);
        do
        {
          v68 = __ldaxr(v56);
          _ZF = --v68 == 0;
        }
        while (__stlxr(v68, v56));
        goto LABEL_84;
      }
LABEL_64:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 104))(v11, 1);
      if (v10)
      {
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10, v60);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
      return v4 != 23;
  }
}

void sub_1954273E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;

  if ((a10 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 104))(v11, 1);
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v16);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_195427500()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1954274E4);
  JUMPOUT(0x1954274D4);
}

uint64_t WebCore::RenderThemeIOS::paintListButton(WebCore::RenderThemeIOS *this, const WebCore::RenderObject *a2, const WebCore::PaintInfo *a3, float32x2_t *a4)
{
  WebCore::GraphicsContext *v7;
  uint64_t *v8;
  float *v9;
  WebCore::Length *v10;
  float v11;
  float v12;
  float v13;
  WebCore::Length *v14;
  float v15;
  float v16;
  float v17;
  WebCore::Document *v18;
  unsigned __int8 v19;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  float64x2_t v29;
  double v30;
  double v31;
  float64x2_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[8];
  uint64_t v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = (WebCore::GraphicsContext *)*((_QWORD *)a3 + 10);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v7 + 96))(v7, 1);
  v8 = (uint64_t *)a2;
  if ((*((_BYTE *)a2 + 45) & 2) != 0)
  {
    v22 = *((_QWORD *)a2 + 4);
    if (v22)
      v8 = *(uint64_t **)(v22 + 8);
    else
      v8 = 0;
  }
  v9 = *(float **)(v8[11] + 24);
  if (*((_BYTE *)v9 + 76) == 11)
  {
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v9 + 18), a4[1].f32[1]);
    v9 = *(float **)(v8[11] + 24);
  }
  v10 = (WebCore::Length *)(v9 + 20);
  v11 = a4[1].f32[0];
  switch(*((_BYTE *)v9 + 84))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v12 = v9[20];
      if (!*((_BYTE *)v9 + 86))
        v12 = (float)SLODWORD(v12);
      v11 = (float)(v11 * v12) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)v9 + 86))
        v11 = *(float *)v10;
      else
        v11 = (float)*(int *)v10;
      break;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue(v10, a4[1].f32[0]);
      v11 = v24;
      v9 = *(float **)(v8[11] + 24);
      break;
    default:
      v11 = 0.0;
      break;
  }
  if (*((_BYTE *)v9 + 92) == 11)
  {
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v9 + 22), a4[1].f32[1]);
    v9 = *(float **)(v8[11] + 24);
  }
  v13 = a4[1].f32[0];
  v14 = (WebCore::Length *)(v9 + 24);
  v15 = v13;
  switch(*((_BYTE *)v9 + 100))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v16 = v9[24];
      if (!*((_BYTE *)v9 + 102))
        v16 = (float)SLODWORD(v16);
      v15 = (float)(v13 * v16) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)v9 + 102))
        v15 = *(float *)v14;
      else
        v15 = (float)*(int *)v14;
      break;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue(v14, a4[1].f32[0]);
      v15 = v25;
      v13 = a4[1].f32[0];
      break;
    default:
      v15 = 0.0;
      break;
  }
  v37 = 0;
  v29.f64[0] = 2.58943592e10;
  WebCore::Path::moveTo((WebCore::Path *)v35, (const WebCore::FloatPoint *)&v29);
  v29.f64[0] = 2.58943592e10;
  v33 = 0x421171AA421CE45ALL;
  v34 = 0x4216000042188000;
  WebCore::Path::addBezierCurveTo((uint64_t)v35, (const WebCore::FloatPoint *)&v29, (const WebCore::FloatPoint *)&v34, (const WebCore::FloatPoint *)&v33);
  v29.f64[0] = 2083521.26;
  WebCore::Path::addLineTo((uint64_t)v35, (const WebCore::FloatPoint *)&v29);
  v29.f64[0] = 1145045.26;
  v33 = 0x410B0E56428163D7;
  v34 = 0x411FE354428163D7;
  WebCore::Path::addBezierCurveTo((uint64_t)v35, (const WebCore::FloatPoint *)&v29, (const WebCore::FloatPoint *)&v34, (const WebCore::FloatPoint *)&v33);
  v29.f64[0] = 8945.66609;
  v33 = 0x407E24DD426FE666;
  v34 = 0x407E24DD427A50E5;
  WebCore::Path::addBezierCurveTo((uint64_t)v35, (const WebCore::FloatPoint *)&v29, (const WebCore::FloatPoint *)&v34, (const WebCore::FloatPoint *)&v33);
  v29.f64[0] = 482.304018;
  v33 = 0x40ADF3B642623A5ELL;
  v34 = 0x409000004265F8D5;
  WebCore::Path::addBezierCurveTo((uint64_t)v35, (const WebCore::FloatPoint *)&v29, (const WebCore::FloatPoint *)&v34, (const WebCore::FloatPoint *)&v33);
  v29.f64[0] = 1524177160.0;
  WebCore::Path::addLineTo((uint64_t)v35, (const WebCore::FloatPoint *)&v29);
  v29.f64[0] = 3833.85597;
  WebCore::Path::addLineTo((uint64_t)v35, (const WebCore::FloatPoint *)&v29);
  v29.f64[0] = 1024.00025;
  v33 = 0x407E24DD412FBE77;
  v34 = 0x407E24DD41453B64;
  WebCore::Path::addBezierCurveTo((uint64_t)v35, (const WebCore::FloatPoint *)&v29, (const WebCore::FloatPoint *)&v34, (const WebCore::FloatPoint *)&v33);
  v29.f64[0] = 482.304017;
  v33 = 0x410B0E5640C9C28FLL;
  v34 = 0x40C178D540C9C28FLL;
  WebCore::Path::addBezierCurveTo((uint64_t)v35, (const WebCore::FloatPoint *)&v29, (const WebCore::FloatPoint *)&v34, (const WebCore::FloatPoint *)&v33);
  v29.f64[0] = 522453.063;
  v33 = 0x413FCAC140F4BC6ALL;
  v34 = 0x413178D540D81893;
  WebCore::Path::addBezierCurveTo((uint64_t)v35, (const WebCore::FloatPoint *)&v29, (const WebCore::FloatPoint *)&v34, (const WebCore::FloatPoint *)&v33);
  v29.f64[0] = 1.87260643e10;
  WebCore::Path::addLineTo((uint64_t)v35, (const WebCore::FloatPoint *)&v29);
  v29.f64[0] = 2.36180317e10;
  v33 = 0x42181CAC420DEB85;
  v34 = 0x42181CAC4208624ELL;
  WebCore::Path::addBezierCurveTo((uint64_t)v35, (const WebCore::FloatPoint *)&v29, (const WebCore::FloatPoint *)&v34, (const WebCore::FloatPoint *)&v33);
  v17 = (float)(v13 - (float)(v11 + v15)) / 71.0;
  v32 = vaddq_f64(vcvtq_f64_f32(vadd_f32(vadd_f32(*a4, vmul_f32(a4[1], (float32x2_t)0x3F0000003F000000)), vmul_f32(vmul_n_f32((float32x2_t)0xC2280000C28E0000, v17), (float32x2_t)0x3F0000003F000000))), (float64x2_t)0);
  v29.f64[0] = v17;
  v29.f64[1] = v17 * 0.0;
  v30 = v29.f64[1];
  v31 = v17;
  WebCore::Path::transform((WebCore::Path *)v35, &v29);
  v18 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
  if ((*((_BYTE *)a2 + 45) & 2) != 0)
  {
    v23 = *((_QWORD *)a2 + 4);
    if (v23)
      a2 = *(const WebCore::RenderObject **)(v23 + 8);
    else
      a2 = 0;
  }
  v19 = WebCore::Document::styleColorOptions(v18, (const WebCore::RenderObject *)((char *)a2 + 80));
  if ((*(_BYTE *)(v8[13] + 238) & 0x80) != 0)
    WebCore::RenderThemeIOS::systemColor((uint64_t)this, 207, v19, &v34);
  else
    WebCore::RenderStyle::usedAccentColor(v8 + 10, v19, (unint64_t *)&v34);
  WebCore::GraphicsContext::setFillColor(v7, (const WebCore::Color *)&v34);
  if ((v34 & 0x8000000000000) != 0)
  {
    v26 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, v20);
    }
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)v7 + 176))(v7, v35);
  if (v37 != -1)
    ((void (*)(float64x2_t *, uint64_t *))off_1E335C4E8[v37])(&v29, &v36);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v7 + 104))(v7, 1);
  return 0;
}

void sub_195427AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  uint64_t v25;

  if (a25 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E335C4E8[a25])(&a9, &a18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 104))(v25, 1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::RenderThemeIOS::colorInputStyleSheet@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a1 = v4;
  return result;
}

uint64_t WebCore::RenderThemeIOS::paintColorWellDecorations(WebCore::RenderThemeIOS *this, const WebCore::RenderObject *a2, const WebCore::PaintInfo *a3, float32x2_t *a4)
{
  uint64_t v6;
  void *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t i;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  float *v25;
  uint64_t result;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  WTF *v43[2];
  _OWORD v44[2];
  char v45;
  float32x2_t v46[3];
  int v47;
  uint64_t v48;

  v46[0] = vadd_f32(*a4, vmul_f32(a4[1], (float32x2_t)0x3F0000003F000000));
  v46[1].i32[0] = 0;
  v47 = 2;
  v43[0] = (WTF *)v44;
  v43[1] = (WTF *)2;
  v45 = 1;
  v6 = WTF::fastMalloc((WTF *)0xC8);
  v48 = WebCore::Gradient::Gradient(v6, v46, 0x600000000, 1, 0, (uint64_t *)v43, 0, 0);
  v8 = v43[0];
  if (HIDWORD(v43[1]))
  {
    v9 = (WTF *)((char *)v43[0] + 16 * HIDWORD(v43[1]));
    do
    {
      v10 = *((_QWORD *)v8 + 1);
      if ((v10 & 0x8000000000000) != 0)
      {
        v11 = v8;
        v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v7);
          v8 = v11;
        }
      }
      v8 = (WTF *)((char *)v8 + 16);
    }
    while (v8 != v9);
    v8 = v43[0];
  }
  if (v44 != (_OWORD *)v8 && v8)
  {
    v43[0] = 0;
    LODWORD(v43[1]) = 0;
    WTF::fastFree(v8, v7);
  }
  for (i = 0; i != 9; ++i)
  {
    v16 = v48;
    *(float *)v43 = (float)(int)i * 0.125;
    v17 = (char *)&unk_1968DEA94 + 16 * i;
    v43[1] = 0;
    v18 = *(_QWORD *)v17;
    v19 = *((_DWORD *)v17 + 2);
    v20 = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 4) = v18;
    *(_DWORD *)(v20 + 12) = v19;
    *(_DWORD *)(v20 + 16) = 1065353216;
    v43[1] = (WTF *)(v20 | 0x10C000000000000);
    WebCore::Gradient::addColorStop(v16, (float *)v43);
    if (((unint64_t)v43[1] & 0x8000000000000) != 0)
    {
      v22 = (unsigned int *)((unint64_t)v43[1] & 0xFFFFFFFFFFFFLL);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
    }
  }
  v25 = (float *)*((_QWORD *)a3 + 10);
  (*(void (**)(float *, uint64_t))(*(_QWORD *)v25 + 96))(v25, 1);
  *(_OWORD *)v46[0].f32 = *(_OWORD *)a4->f32;
  __asm
  {
    FMOV            V0.2S, #1.5
    FMOV            V1.2S, #-1.5
  }
  v46[0] = vadd_f32(v46[0], _D0);
  v46[1] = vadd_f32(vadd_f32(v46[1], _D1), _D1);
  if (v25[47] != 3.0)
  {
    *((_DWORD *)v25 + 46) |= 8u;
    v25[47] = 3.0;
  }
  (*(void (**)(float *, _DWORD *))(*(_QWORD *)v25 + 88))(v25, (_DWORD *)v25 + 2);
  if (*((_BYTE *)v25 + 193) != 1)
  {
    *((_BYTE *)v25 + 193) = 1;
    *((_DWORD *)v25 + 46) |= 0x10u;
  }
  (*(void (**)(float *, _DWORD *))(*(_QWORD *)v25 + 88))(v25, (_DWORD *)v25 + 2);
  *(_OWORD *)v43 = xmmword_1968DEB28;
  v44[0] = unk_1968DEB38;
  v44[1] = xmmword_1968DEB48;
  WebCore::SourceBrush::setGradient((uint64_t)(v25 + 24), &v48, (__int128 *)v43);
  *((_DWORD *)v25 + 46) |= 4u;
  (*(void (**)(float *, _DWORD *))(*(_QWORD *)v25 + 88))(v25, (_DWORD *)v25 + 2);
  (*(void (**)(float *, float32x2_t *))(*(_QWORD *)v25 + 208))(v25, v46);
  result = (*(uint64_t (**)(float *, uint64_t))(*(_QWORD *)v25 + 104))(v25, 1);
  v34 = v48;
  v48 = 0;
  if (v34)
  {
    v35 = *(_QWORD *)(v34 + 8);
    if (__ldaxr((unsigned __int8 *)v35))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v35))
    {
      goto LABEL_30;
    }
    result = MEMORY[0x19AEA534C](v35);
LABEL_30:
    v37 = *(_QWORD *)(v35 + 8);
    v38 = v37 - 1;
    *(_QWORD *)(v35 + 8) = v37 - 1;
    if (v37 == 1)
    {
      v42 = *(_QWORD *)(v35 + 16);
      v39 = *(_QWORD *)(v35 + 24);
      *(_QWORD *)(v35 + 24) = 0;
      v40 = v42 != 0;
    }
    else
    {
      v39 = 0;
      v40 = 1;
    }
    v41 = __ldxr((unsigned __int8 *)v35);
    if (v41 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v35))
      {
        if (v38)
          return result;
LABEL_38:
        if (v39)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        if (!v40)
          return WTF::fastFree((WTF *)v35, v33);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v35);
    if (v38)
      return result;
    goto LABEL_38;
  }
  return result;
}

void sub_195427F40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;

  if (!a22)
    goto LABEL_19;
  v23 = *(_QWORD *)(a22 + 8);
  if (__ldaxr((unsigned __int8 *)v23))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v23))
  {
LABEL_7:
    v25 = *(_QWORD *)(v23 + 8);
    v26 = v25 - 1;
    *(_QWORD *)(v23 + 8) = v25 - 1;
    if (v25 == 1)
    {
      v30 = *(_QWORD *)(v23 + 16);
      v27 = *(_QWORD *)(v23 + 24);
      *(_QWORD *)(v23 + 24) = 0;
      v28 = v30 != 0;
    }
    else
    {
      v27 = 0;
      v28 = 1;
    }
    v29 = __ldxr((unsigned __int8 *)v23);
    if (v29 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
      {
LABEL_14:
        if (!v26)
        {
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          if (!v28)
            WTF::fastFree((WTF *)v23, a2);
        }
LABEL_19:
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v23);
  goto LABEL_7;
}

void WebCore::RenderThemeIOS::adjustSearchFieldDecorationPartStyle(WebCore::RenderThemeIOS *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  uint64_t v4;
  char v5;
  __n128 v6;
  float v7;
  int v8;
  WTF::StringImpl *v9;
  WebCore::Node *v10;
  unsigned int v11;
  __int16 v12;
  char v13;
  WebCore::RenderStyle *v14;
  __int128 v15;
  WebCore::Node *v16[2];
  int v17;
  char v18;
  char v19;
  char v20;
  WebCore::RenderStyle *v21;
  uint64_t v22;

  if (a3)
  {
    v14 = a2;
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    v17 = 1065353216;
    v18 = 1;
    v19 = 0;
    v20 = 0;
    v21 = a2;
    v22 = 0;
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 2;
    v5 = *(_BYTE *)(v4 + 6);
    *(_WORD *)(v4 + 4) = 4;
    *(_BYTE *)(v4 + 6) = v5 & 0xFC;
    *(_QWORD *)(v4 + 8) = 0x3FF0000000000000;
    v7 = WebCore::CSSPrimitiveValue::computeLength<float>(v4, (uint64_t)&v14, v6);
    v11 = LODWORD(v7);
    v12 = 4;
    v13 = 1;
    WebCore::RenderStyle::setWidth((uint64_t)a2, (WebCore::Length *)&v11);
    if (v12 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v11);
    }
    v11 = LODWORD(v7);
    v12 = 4;
    v13 = 1;
    WebCore::RenderStyle::setHeight((uint64_t)a2, (WebCore::Length *)&v11);
    if (v12 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v11);
    }
    v11 = 4;
    v12 = 4;
    v13 = 0;
    v8 = *((_DWORD *)a2 + 10);
    if (((*((_DWORD *)a2 + 11) >> 13) & 6u) - 2 < 4)
    {
      if ((v8 & 0x4000000) != 0)
        WebCore::RenderStyle::setMarginTop((uint64_t)a2, (WebCore::Length *)&v11);
      else
        WebCore::RenderStyle::setMarginBottom((uint64_t)a2, (WebCore::Length *)&v11);
    }
    else if ((v8 & 0x4000000) != 0)
    {
      WebCore::RenderStyle::setMarginLeft((uint64_t)a2, (WebCore::Length *)&v11);
    }
    else
    {
      WebCore::RenderStyle::setMarginRight((uint64_t)a2, (WebCore::Length *)&v11);
    }
    if (v12 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v11);
    }
    if (*(_DWORD *)v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v4, v9);
    else
      *(_DWORD *)v4 -= 2;
    v10 = v16[1];
    v16[1] = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v9);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
  }
}

void sub_195428260(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebCore::Node *a15)
{
  _DWORD *v15;

  if (a10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a9);
  }
  if (*v15 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, a2);
  else
    *v15 -= 2;
  if (a15)
  {
    if (*((_DWORD *)a15 + 6) == 2)
    {
      if ((*((_WORD *)a15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a15, a2);
    }
    else
    {
      *((_DWORD *)a15 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::RenderThemeIOS::paintSearchFieldDecorationPart(WebCore::RenderThemeIOS *this, const WebCore::RenderObject *a2, const WebCore::PaintInfo *a3, const WebCore::IntRect *a4)
{
  WebCore::GraphicsContext *v7;
  float v8;
  float v9;
  double v10;
  WebCore::Document *v11;
  unsigned __int8 v12;
  void *v13;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  float64x2_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[8];
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = (WebCore::GraphicsContext *)*((_QWORD *)a3 + 10);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v7 + 96))(v7, 1);
  v28 = 0;
  v19.f64[0] = 1.01361242e12;
  WebCore::Path::moveTo((WebCore::Path *)v26, (const WebCore::FloatPoint *)&v19);
  v19.f64[0] = 1.01361242e12;
  v24 = 0x42583611423A860BLL;
  v25 = 0x4265B02142273007;
  WebCore::Path::addBezierCurveTo((uint64_t)v26, (const WebCore::FloatPoint *)&v19, (const WebCore::FloatPoint *)&v25, (const WebCore::FloatPoint *)&v24);
  v19.f64[0] = 4.22949266e12;
  WebCore::Path::addLineTo((uint64_t)v26, (const WebCore::FloatPoint *)&v19);
  v19.f64[0] = 4.5709452e12;
  v24 = 0x4291820C4286C40BLL;
  v25 = 0x4291820C42843A02;
  WebCore::Path::addBezierCurveTo((uint64_t)v26, (const WebCore::FloatPoint *)&v19, (const WebCore::FloatPoint *)&v25, (const WebCore::FloatPoint *)&v24);
  v19.f64[0] = 4.81256228e12;
  v24 = 0x4287F00742903CFBLL;
  v25 = 0x428D4F0E42903CFBLL;
  WebCore::Path::addBezierCurveTo((uint64_t)v26, (const WebCore::FloatPoint *)&v19, (const WebCore::FloatPoint *)&v25, (const WebCore::FloatPoint *)&v24);
  v19.f64[0] = 2.94100247e12;
  v24 = 0x42811A02428D80F9;
  v25 = 0x4282F50B428F5C02;
  WebCore::Path::addBezierCurveTo((uint64_t)v26, (const WebCore::FloatPoint *)&v19, (const WebCore::FloatPoint *)&v25, (const WebCore::FloatPoint *)&v24);
  v19.f64[0] = 1.25662151e11;
  WebCore::Path::addLineTo((uint64_t)v26, (const WebCore::FloatPoint *)&v19);
  v19.f64[0] = 5.48287041e10;
  v24 = 0x41ED8000426D8000;
  v25 = 0x42111E01426D8000;
  WebCore::Path::addBezierCurveTo((uint64_t)v26, (const WebCore::FloatPoint *)&v19, (const WebCore::FloatPoint *)&v25, (const WebCore::FloatPoint *)&v24);
  v19.f64[0] = 5578845.04;
  v24 = 1106083840;
  v25 = 1110978068;
  WebCore::Path::addBezierCurveTo((uint64_t)v26, (const WebCore::FloatPoint *)&v19, (const WebCore::FloatPoint *)&v25, (const WebCore::FloatPoint *)&v24);
  *(_QWORD *)&v19.f64[0] = 1096108055;
  v24 = 0x41ED800000000000;
  v25 = 0x4155481700000000;
  WebCore::Path::addBezierCurveTo((uint64_t)v26, (const WebCore::FloatPoint *)&v19, (const WebCore::FloatPoint *)&v25, (const WebCore::FloatPoint *)&v24);
  v19.f64[0] = 1.03852278e11;
  v24 = 0x426D800041ED8000;
  v25 = 0x426D8000415547AELL;
  WebCore::Path::addBezierCurveTo((uint64_t)v26, (const WebCore::FloatPoint *)&v19, (const WebCore::FloatPoint *)&v25, (const WebCore::FloatPoint *)&v24);
  v19.f64[0] = 2.8172937e11;
  WebCore::Path::moveTo((WebCore::Path *)v26, (const WebCore::FloatPoint *)&v19);
  v19.f64[0] = 2.8172937e11;
  v24 = 0x41ED800040E8D014;
  v25 = 0x4227C60B40E8D014;
  WebCore::Path::addBezierCurveTo((uint64_t)v26, (const WebCore::FloatPoint *)&v19, (const WebCore::FloatPoint *)&v25, (const WebCore::FloatPoint *)&v24);
  v19.f64[0] = 56755656.1;
  v24 = 0x40E8D01441ED8000;
  v25 = 0x40E8D014418B73EBLL;
  WebCore::Path::addBezierCurveTo((uint64_t)v26, (const WebCore::FloatPoint *)&v19, (const WebCore::FloatPoint *)&v25, (const WebCore::FloatPoint *)&v24);
  v19.f64[0] = 50816.6331;
  v24 = 0x41ED800042506666;
  v25 = 0x418B102E42506666;
  WebCore::Path::addBezierCurveTo((uint64_t)v26, (const WebCore::FloatPoint *)&v19, (const WebCore::FloatPoint *)&v25, (const WebCore::FloatPoint *)&v24);
  v19.f64[0] = 5.10542892e10;
  v24 = 0x4250661841ED8000;
  v25 = 0x425066184227F803;
  WebCore::Path::addBezierCurveTo((uint64_t)v26, (const WebCore::FloatPoint *)&v19, (const WebCore::FloatPoint *)&v25, (const WebCore::FloatPoint *)&v24);
  v8 = (float)*((int *)a4 + 2);
  v9 = (float)((float)(v8 / 73.0) * 73.0) * 0.5;
  v10 = (float)((float)((float)((float)*((int *)a4 + 3) * 0.5) + (float)*((int *)a4 + 1)) - v9);
  v22 = (float)((float)((float)(v8 * 0.5) + (float)*(int *)a4) - v9);
  v23 = v10;
  v19.f64[0] = (float)(v8 / 73.0);
  v19.f64[1] = v19.f64[0] * 0.0;
  v20 = v19.f64[0] * 0.0;
  v21 = v19.f64[0];
  WebCore::Path::transform((WebCore::Path *)v26, &v19);
  v11 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
  if ((*((_BYTE *)a2 + 45) & 2) != 0)
  {
    v15 = *((_QWORD *)a2 + 4);
    if (v15)
      a2 = *(const WebCore::RenderObject **)(v15 + 8);
    else
      a2 = 0;
  }
  v12 = WebCore::Document::styleColorOptions(v11, (const WebCore::RenderObject *)((char *)a2 + 80));
  WebCore::RenderThemeIOS::systemColor((uint64_t)this, 191, v12, &v25);
  WebCore::GraphicsContext::setFillColor(v7, (const WebCore::Color *)&v25);
  if ((v25 & 0x8000000000000) != 0)
  {
    v16 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v13);
    }
  }
  (*(void (**)(WebCore::GraphicsContext *, _BYTE *))(*(_QWORD *)v7 + 176))(v7, v26);
  if (v28 != -1)
    ((void (*)(float64x2_t *, uint64_t *))off_1E335C4E8[v28])(&v19, &v27);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v7 + 104))(v7, 1);
  return 0;
}

void sub_195428794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  uint64_t v25;

  if (a25 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E335C4E8[a25])(&a9, &a18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 104))(v25, 1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::RenderThemeIOS::paintSearchFieldResultsDecorationPart(WebCore::RenderThemeIOS *this, const WebCore::RenderBox *a2, const WebCore::PaintInfo *a3, const WebCore::IntRect *a4)
{
  WebCore::RenderThemeIOS::paintSearchFieldDecorationPart(this, a2, a3, a4);
  return 0;
}

uint64_t WebCore::RenderThemeIOS::paintSearchFieldResultsButton(WebCore::RenderThemeIOS *this, const WebCore::RenderBox *a2, const WebCore::PaintInfo *a3, const WebCore::IntRect *a4)
{
  WebCore::RenderThemeIOS::paintSearchFieldDecorationPart(this, a2, a3, a4);
  return 0;
}

uint64_t WebCore::RenderTheme::canCreateControlPartForRenderer(WebCore::RenderTheme *this, const WebCore::RenderObject *a2)
{
  return 0;
}

uint64_t WebCore::RenderTheme::canCreateControlPartForBorderOnly(WebCore::RenderTheme *this, const WebCore::RenderObject *a2)
{
  return 0;
}

uint64_t WebCore::RenderTheme::canCreateControlPartForDecorations(WebCore::RenderTheme *this, const WebCore::RenderObject *a2)
{
  return 0;
}

void WebCore::RenderTheme::extraPlugInsStyleSheet(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::RenderTheme::extraMediaControlsStyleSheet(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::RenderTheme::adjustedPaintRect(WebCore::RenderTheme *this, const WebCore::RenderBox *a2, const WebCore::LayoutRect *a3)
{
  return *(_QWORD *)a3;
}

uint64_t WebCore::RenderTheme::controlSupportsTints(WebCore::RenderTheme *this, const WebCore::RenderObject *a2)
{
  return 0;
}

uint64_t WebCore::RenderTheme::supportsControlTints(WebCore::RenderTheme *this)
{
  return 0;
}

uint64_t WebCore::RenderTheme::supportsHover(WebCore::RenderTheme *this)
{
  return 0;
}

uint64_t WebCore::RenderTheme::supportsDataListUI()
{
  return 0;
}

uint64_t WebCore::RenderTheme::supportsBoxShadow(WebCore::RenderTheme *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

uint64_t WebCore::RenderTheme::supportsLargeFormControls(WebCore::RenderTheme *this)
{
  return 0;
}

uint64_t WebCore::RenderTheme::searchFieldShouldAppearAsTextField(WebCore::RenderTheme *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

void WebCore::RenderTheme::platformFocusRingColor(_QWORD *a1@<X8>)
{
  *a1 = 0x11040000000000FFLL;
}

uint64_t WebCore::RenderTheme::caretBlinkInterval(WebCore::RenderTheme *this)
{
  return 0x3FE0000000000000;
}

uint64_t WebCore::RenderTheme::minimumMenuListSize(WebCore::RenderTheme *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

void WebCore::RenderTheme::popupInternalPaddingBox(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 4) = 4;
  *(_BYTE *)(a1 + 6) = 0;
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 12) = 4;
  *(_BYTE *)(a1 + 14) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 20) = 4;
  *(_BYTE *)(a1 + 22) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 28) = 4;
  *(_BYTE *)(a1 + 30) = 0;
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t WebCore::RenderTheme::popupOptionSupportsTextIndent(WebCore::RenderTheme *this)
{
  return 0;
}

uint64_t WebCore::RenderTheme::popupMenuSize(WebCore::RenderTheme *this, const WebCore::RenderStyle *a2, WebCore::IntRect *a3)
{
  return 0;
}

uint64_t WebCore::RenderTheme::scrollbarWidthStyleForPart()
{
  return 0;
}

double WebCore::RenderTheme::animationDurationForProgressBar(WebCore::RenderTheme *this)
{
  return 0.0;
}

uint64_t WebCore::RenderTheme::progressBarRectForBounds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)a3;
}

uint64_t WebCore::RenderTheme::supportsMeter()
{
  return 0;
}

uint64_t WebCore::RenderTheme::sliderTickSnappingThreshold(WebCore::RenderTheme *this)
{
  return 0;
}

uint64_t WebCore::RenderTheme::delegatesMenuListRendering(WebCore::RenderTheme *this)
{
  return 0;
}

uint64_t WebCore::RenderTheme::popsMenuByArrowKeys(WebCore::RenderTheme *this)
{
  return 0;
}

uint64_t WebCore::RenderTheme::popsMenuBySpaceOrReturn(WebCore::RenderTheme *this)
{
  return 0;
}

uint64_t WebCore::RenderTheme::attachmentIntrinsicSize()
{
  return 0;
}

uint64_t WebCore::RenderTheme::attachmentShouldAllowWidthToShrink()
{
  return 0;
}

uint64_t WebCore::RenderTheme::innerSpinButtonLayout(WebCore::RenderTheme *this, const WebCore::RenderObject *a2)
{
  return 0;
}

double WebCore::RenderTheme::switchAnimationVisuallyOnDuration(WebCore::RenderTheme *this)
{
  return 0.0;
}

double WebCore::RenderTheme::switchAnimationHeldDuration(WebCore::RenderTheme *this)
{
  return 0.0;
}

uint64_t WebCore::RenderTheme::hasSwitchHapticFeedback()
{
  return 0;
}

uint64_t WebCore::RenderTheme::canPaint()
{
  return 1;
}

uint64_t WebCore::RenderTheme::supportsListBoxSelectionForegroundColors()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintCheckbox()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintRadio()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintButton()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintColorWell()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintTextField()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintTextArea()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintMenuList()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintMeter()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintAttachment()
{
  return 0;
}

uint64_t WebCore::RenderTheme::paintListButton()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintProgressBar()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintSliderTrack()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintSliderThumb()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintSearchField()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintSearchFieldCancelButton()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintSearchFieldDecorationPart()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintSearchFieldResultsDecorationPart()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintSearchFieldResultsButton()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintSwitchThumb()
{
  return 1;
}

uint64_t WebCore::RenderTheme::paintSwitchTrack()
{
  return 1;
}

uint64_t WebCore::RenderThemeIOS::attachmentShouldAllowWidthToShrink()
{
  return 1;
}

double WebCore::RenderThemeIOS::switchAnimationVisuallyOnDuration(WebCore::RenderThemeIOS *this)
{
  return 0.488013841;
}

double WebCore::RenderThemeIOS::switchAnimationHeldDuration(WebCore::RenderThemeIOS *this)
{
  return 0.507396551;
}

uint64_t WebCore::RenderThemeIOS::hasSwitchHapticFeedback()
{
  return 1;
}

double WebCore::shortCaptionPointSizeWithContentSizeCategory(WebCore *this, const __CFString *a2)
{
  const __CTFontDescriptor *v2;
  CFTypeRef v3;
  void *v4;
  float v5;
  float v6;

  v2 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithTextStyle();
  v3 = CTFontDescriptorCopyAttribute(v2, (CFStringRef)*MEMORY[0x1E0CA83D8]);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = (void *)v3;
  else
    v4 = 0;
  objc_msgSend(v4, "floatValue");
  v6 = v5;
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  return v6;
}

void sub_195428B98(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::DrawGlyphsRecorder::~DrawGlyphsRecorder(WebCore::DrawGlyphsRecorder *this, void *a2)
{
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  char v21;

  v3 = (const void *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v4)
    CFRelease(v4);
  if (*((_BYTE *)this + 336))
  {
    v5 = *((_QWORD *)this + 40);
    if ((v5 & 0x8000000000000) != 0)
    {
      v17 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, a2);
      }
    }
  }
  v6 = *((unsigned int *)this + 62);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E335C4D0[v6])(&v20, (char *)this + 184);
  *((_DWORD *)this + 62) = -1;
  v7 = *((_QWORD *)this + 21);
  if ((v7 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  v8 = *((unsigned int *)this + 40);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, char *))off_1E335C4D0[v8])(&v21, (char *)this + 96);
  *((_DWORD *)this + 40) = -1;
  v9 = *((_QWORD *)this + 10);
  if ((v9 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

void WebCore::NinePieceImage::~NinePieceImage(WebCore::NinePieceImage::Data **this)
{
  WebCore::NinePieceImage::Data *v2;
  WTF *v3;
  void *v4;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::NinePieceImage::Data::~Data(v2);
      WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

void WebCore::RenderStyle::resetBorderImage(WebCore::RenderStyle *this)
{
  WTF **v1;
  uint64_t v2;
  WebCore::NinePieceImage::Data *v3;
  char v4;
  WTF *v5;
  WebCore::NinePieceImage::Data **v6;
  WebCore::NinePieceImage::Data *v7;

  v1 = (WTF **)((char *)this + 8);
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  WebCore::NinePieceImage::NinePieceImage((WebCore::NinePieceImage *)&v7, 0);
  v3 = *(WebCore::NinePieceImage::Data **)(v2 + 200);
  if (v3 == v7)
    goto LABEL_2;
  v4 = WebCore::NinePieceImage::Data::operator==((uint64_t)v3, (uint64_t)v7);
  WebCore::NinePieceImage::~NinePieceImage(&v7);
  if ((v4 & 1) == 0)
  {
    WebCore::NinePieceImage::NinePieceImage((WebCore::NinePieceImage *)&v7, 0);
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v1);
    v6 = (WebCore::NinePieceImage::Data **)WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    WTF::Ref<WebCore::NinePieceImage::Data,WTF::RawPtrTraits<WebCore::NinePieceImage::Data>,WTF::DefaultRefDerefTraits<WebCore::NinePieceImage::Data>>::operator=(v6 + 25, &v7);
LABEL_2:
    WebCore::NinePieceImage::~NinePieceImage(&v7);
  }
}

void sub_195428DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WebCore::NinePieceImage::~NinePieceImage((WebCore::NinePieceImage::Data **)va);
  _Unwind_Resume(a1);
}

_DWORD *WebCore::RenderStyle::resetBorderTop(WebCore::RenderStyle *this)
{
  WTF **v1;
  uint64_t v2;
  char v3;
  _DWORD *result;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  unsigned int v10;
  float v11;
  char v12;
  char v13;
  char *v14;

  v1 = (WTF **)((char *)this + 8);
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  v10 = 1;
  v11 = 3.0;
  v12 = 0;
  if (*(_DWORD *)(v2 + 160) == 1
    && (v14 = &v13,
        std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>())
    && *(float *)(v2 + 168) == v11
    && (v3 = v12 ^ *(_BYTE *)(v2 + 172), (v3 & 0xF) == 0))
  {
    result = (_DWORD *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v10])(&v14, v9);
    if ((v3 & 0x10) == 0)
      return result;
  }
  else
  {
    ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v10])(&v14, v9);
  }
  v10 = 1;
  v11 = 3.0;
  v12 = 0;
  v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v1);
  result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
  v6 = (uint64_t)result;
  v7 = result[40];
  if ((_DWORD)v7 == -1)
  {
    if (v10 == -1)
    {
      *((float *)result + 42) = v11;
      *((_BYTE *)result + 172) = v12;
      return result;
    }
    goto LABEL_8;
  }
  if (v10 != -1)
  {
LABEL_8:
    v14 = (char *)(result + 38);
    result = (_DWORD *)((uint64_t (*)(char **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                         + v10))(&v14);
    goto LABEL_9;
  }
  result = (_DWORD *)((uint64_t (*)(char **, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v7])(&v14, result + 38);
  *(_DWORD *)(v6 + 160) = -1;
LABEL_9:
  v8 = v10;
  *(float *)(v6 + 168) = v11;
  *(_BYTE *)(v6 + 172) = v12;
  if ((_DWORD)v8 != -1)
    return (_DWORD *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v8])(&v14, v9);
  return result;
}

void sub_195428FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[a12])(v12 - 24, &a10);
  _Unwind_Resume(exception_object);
}

_DWORD *WebCore::RenderStyle::resetBorderBottom(WebCore::RenderStyle *this)
{
  WTF **v1;
  uint64_t v2;
  char v3;
  _DWORD *result;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  unsigned int v10;
  float v11;
  char v12;
  char v13;
  char *v14;

  v1 = (WTF **)((char *)this + 8);
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  v10 = 1;
  v11 = 3.0;
  v12 = 0;
  if (*(_DWORD *)(v2 + 184) == 1
    && (v14 = &v13,
        std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>())
    && *(float *)(v2 + 192) == v11
    && (v3 = v12 ^ *(_BYTE *)(v2 + 196), (v3 & 0xF) == 0))
  {
    result = (_DWORD *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v10])(&v14, v9);
    if ((v3 & 0x10) == 0)
      return result;
  }
  else
  {
    ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v10])(&v14, v9);
  }
  v10 = 1;
  v11 = 3.0;
  v12 = 0;
  v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v1);
  result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
  v6 = (uint64_t)result;
  v7 = result[46];
  if ((_DWORD)v7 == -1)
  {
    if (v10 == -1)
    {
      *((float *)result + 48) = v11;
      *((_BYTE *)result + 196) = v12;
      return result;
    }
    goto LABEL_8;
  }
  if (v10 != -1)
  {
LABEL_8:
    v14 = (char *)(result + 44);
    result = (_DWORD *)((uint64_t (*)(char **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                         + v10))(&v14);
    goto LABEL_9;
  }
  result = (_DWORD *)((uint64_t (*)(char **, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v7])(&v14, result + 44);
  *(_DWORD *)(v6 + 184) = -1;
LABEL_9:
  v8 = v10;
  *(float *)(v6 + 192) = v11;
  *(_BYTE *)(v6 + 196) = v12;
  if ((_DWORD)v8 != -1)
    return (_DWORD *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v8])(&v14, v9);
  return result;
}

void sub_1954291A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[a12])(v12 - 24, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::applyCommonButtonPaddingToStyle(WebCore *this, WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  uint64_t v5;
  __n128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  double v11;
  WebCore::Node *v12;
  double v13;
  int v15;
  WTF **v16;
  uint64_t v17;
  uint64_t result;
  WTF::StringImpl *v19;
  WTF *v20;
  _DWORD *v21;
  unsigned int v22;
  __int16 v23;
  char v24;
  unsigned int v25;
  __int16 v26;
  char v27;
  unsigned int v28;
  __int16 v29;
  char v30;
  unsigned int v31;
  __int16 v32;
  char v33;
  unsigned int v34[2];
  unsigned int v35[2];
  unsigned int v36[2];
  unsigned int v37[2];
  WebCore::Node *v38;
  int v39;
  char v40;
  char v41;
  char v42;
  WebCore *v43;
  uint64_t v44;

  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 2;
  v7 = *(_BYTE *)(v5 + 6);
  *(_WORD *)(v5 + 4) = 4;
  *(_BYTE *)(v5 + 6) = v7 & 0xFC;
  *(_QWORD *)(v5 + 8) = 0x3FE0000000000000;
  v8 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      v8 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
      if (v8)
        v8 = *(_QWORD *)(v8 + 8);
    }
    v8 += 80;
  }
  v9 = *((_QWORD *)a2 + 243);
  *(_QWORD *)v34 = this;
  *(_QWORD *)v35 = v8;
  *(_QWORD *)v36 = 0;
  *(_QWORD *)v37 = v9;
  v38 = 0;
  v39 = 1065353216;
  v40 = 1;
  v41 = 0;
  v42 = 0;
  v43 = this;
  v44 = 0;
  v6.n128_u64[0] = 0.5;
  v11 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)v34, (void *)4, v6);
  v12 = v38;
  v13 = v11 + dbl_1968DE9C0[v11 < 0.0];
  if (v13 >= -2147483650.0 && v13 <= 2147483650.0)
    v15 = (int)v13;
  else
    v15 = 0;
  v38 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, v10);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  LOWORD(v34[1]) = 4;
  BYTE2(v34[1]) = 0;
  v34[0] = 0;
  LOWORD(v35[1]) = 4;
  BYTE2(v35[1]) = 0;
  v35[0] = v15;
  LOWORD(v36[1]) = 4;
  BYTE2(v36[1]) = 0;
  v36[0] = 0;
  LOWORD(v37[1]) = 4;
  BYTE2(v37[1]) = 0;
  v37[0] = v15;
  if (((*((_DWORD *)this + 11) >> 13) & 6u) - 2 <= 3)
  {
    v23 = 4;
    v24 = 0;
    v22 = (int)(float)v15;
    v26 = 4;
    v27 = 0;
    v25 = 0;
    v29 = 4;
    v30 = 0;
    v28 = v22;
    v32 = 4;
    v33 = 0;
    v31 = 0;
    std::array<WebCore::Length,4ul>::operator=((WebCore::Length *)v34, (uint64_t)&v22);
    if (v32 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
    }
    if (v29 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v28);
    }
    if (v26 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v25);
    }
    if (v23 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22);
    }
  }
  v17 = *((_QWORD *)this + 1);
  v16 = (WTF **)((char *)this + 8);
  result = WebCore::operator==((unsigned __int8 *)(*(_QWORD *)(v17 + 24) + 72), (unsigned __int8 *)v34);
  if ((result & 1) == 0)
  {
    v20 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v16);
    v21 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v20 + 3);
    result = (uint64_t)std::array<WebCore::Length,4ul>::operator=((WebCore::Length *)(v21 + 18), (uint64_t)v34);
  }
  if (LOBYTE(v37[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v37[0]);
  }
  if (LOBYTE(v36[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v36[0]);
  }
  if (LOBYTE(v35[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v35[0]);
  }
  if (LOBYTE(v34[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v34[0]);
  }
  if (*(_DWORD *)v5 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v5, v19);
  *(_DWORD *)v5 -= 2;
  return result;
}

void sub_19542961C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int a10, char a11, unsigned int a12, char a13, unsigned int a14, char a15, unsigned int a16, char a17, unsigned int a18, char a19, unsigned int a20,char a21,unsigned int a22,char a23,unsigned int a24,char a25)
{
  _DWORD *v25;

  if (a17 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a16);
  }
  if (a15 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a14);
  }
  if (a13 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a12);
  }
  if (a11 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a10);
  }
  if (a25 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a24);
  }
  if (a23 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a22);
  }
  if (a21 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a20);
  }
  if (a19 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a18);
  }
  if (*v25 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, a2);
  else
    *v25 -= 2;
  _Unwind_Resume(exception_object);
}

float WebCore::RenderThemeMeasureTextClient::measureText(WebCore::RenderThemeMeasureTextClient *this, const WTF::String *a2)
{
  unint64_t v3;
  WTF::StringImpl *v4;
  float v5;
  WTF::StringImpl *v6;
  _BYTE v8[8];
  WTF::StringImpl *v9;

  if (*(_QWORD *)a2)
    v3 = *(unsigned int *)(*(_QWORD *)a2 + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)a2 + 16) >> 2) & 1) << 32);
  else
    v3 = 0x100000000;
  WebCore::RenderBlock::constructTextRun(v3, *((_QWORD *)this + 2), 4, 0, (uint64_t)v8);
  v5 = WebCore::FontCascade::width(*((_QWORD *)this + 1), (uint64_t)v8);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v5;
}

void sub_195429934(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::RenderThemeMeasureTextClient::~RenderThemeMeasureTextClient(WebCore::RenderThemeMeasureTextClient *this)
{
  JUMPOUT(0x19AEA7644);
}

double std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cssValueSystemColorInformationList(void)::$_0 &&>>()
{
  void *v0;
  uint64_t v1;
  WTF *v2;
  double result;
  __int16 v4;
  char v5;
  int v6;
  __int16 v7;
  __int16 v8;
  char v9;
  int v10;
  __int16 v11;
  __int16 v12;
  char v13;
  int v14;
  __int16 v15;
  __int16 v16;
  char v17;
  int v18;
  __int16 v19;
  __int16 v20;
  char v21;
  int v22;
  __int16 v23;
  __int16 v24;
  char v25;
  int v26;
  __int16 v27;
  __int16 v28;
  char v29;
  int v30;
  __int16 v31;
  __int16 v32;
  char v33;
  int v34;
  __int16 v35;
  __int16 v36;
  char v37;
  int v38;
  __int16 v39;
  __int16 v40;
  char v41;
  int v42;
  __int16 v43;
  __int16 v44;
  char v45;
  int v46;
  __int16 v47;
  __int16 v48;
  char v49;
  int v50;
  __int16 v51;
  __int16 v52;
  char v53;
  int v54;
  __int16 v55;
  __int16 v56;
  char v57;
  int v58;
  __int16 v59;
  __int16 v60;
  char v61;
  int v62;
  __int16 v63;
  __int16 v64;
  char v65;
  int v66;
  __int16 v67;
  __int16 v68;
  char v69;
  int v70;
  __int16 v71;
  __int16 v72;
  char v73;
  int v74;
  __int16 v75;
  __int16 v76;
  char v77;
  int v78;
  __int16 v79;
  __int16 v80;
  char v81;
  int v82;
  __int16 v83;
  __int16 v84;
  char v85;
  int v86;
  __int16 v87;
  __int16 v88;
  char v89;
  int v90;
  __int16 v91;
  __int16 v92;
  char v93;
  int v94;
  __int16 v95;
  __int16 v96;
  char v97;
  int v98;
  __int16 v99;
  __int16 v100;
  char v101;
  int v102;
  __int16 v103;
  __int16 v104;
  char v105;
  int v106;
  __int16 v107;
  __int16 v108;
  char v109;
  int v110;
  __int16 v111;
  __int16 v112;
  char v113;
  int v114;
  __int16 v115;
  __int16 v116;
  char v117;
  int v118;
  __int16 v119;
  __int16 v120;
  char v121;
  int v122;
  __int16 v123;
  __int16 v124;
  char v125;
  int v126;
  __int16 v127;
  __int16 v128;
  char v129;
  int v130;
  __int16 v131;
  __int16 v132;
  char v133;
  int v134;
  __int16 v135;
  __int16 v136;
  char v137;
  int v138;
  __int16 v139;
  __int16 v140;
  char v141;

  v1 = WTF::fastMalloc((WTF *)0x3F0);
  *(_WORD *)(v1 + 257) = v128;
  *(_DWORD *)(v1 + 266) = v126;
  *(_WORD *)(v1 + 281) = v124;
  *(_DWORD *)(v1 + 290) = v122;
  *(_WORD *)(v1 + 305) = v120;
  *(_DWORD *)(v1 + 314) = v118;
  *(_WORD *)(v1 + 329) = v116;
  *(_DWORD *)(v1 + 338) = v114;
  *(_WORD *)(v1 + 353) = v112;
  *(_DWORD *)(v1 + 362) = v110;
  *(_WORD *)(v1 + 377) = v108;
  *(_DWORD *)(v1 + 386) = v106;
  *(_WORD *)(v1 + 401) = v104;
  *(_DWORD *)(v1 + 410) = v102;
  *(_WORD *)(v1 + 425) = v100;
  *(_DWORD *)(v1 + 434) = v98;
  *(_WORD *)(v1 + 449) = v96;
  *(_DWORD *)(v1 + 458) = v94;
  *(_WORD *)(v1 + 473) = v92;
  *(_DWORD *)(v1 + 482) = v90;
  *(_WORD *)(v1 + 497) = v88;
  *(_DWORD *)(v1 + 506) = v86;
  *(_WORD *)(v1 + 521) = v84;
  *(_DWORD *)(v1 + 530) = v82;
  *(_WORD *)(v1 + 545) = v80;
  *(_DWORD *)(v1 + 554) = v78;
  *(_WORD *)(v1 + 569) = v76;
  *(_DWORD *)(v1 + 578) = v74;
  *(_WORD *)(v1 + 593) = v72;
  *(_DWORD *)(v1 + 602) = v70;
  *(_WORD *)(v1 + 617) = v68;
  *(_DWORD *)(v1 + 626) = v66;
  *(_WORD *)(v1 + 641) = v64;
  *(_DWORD *)(v1 + 650) = v62;
  *(_WORD *)(v1 + 665) = v60;
  *(_DWORD *)(v1 + 674) = v58;
  *(_WORD *)(v1 + 689) = v56;
  *(_DWORD *)(v1 + 698) = v54;
  *(_WORD *)(v1 + 713) = v52;
  *(_DWORD *)(v1 + 722) = v50;
  *(_WORD *)(v1 + 737) = v48;
  *(_DWORD *)(v1 + 746) = v46;
  *(_WORD *)(v1 + 761) = v44;
  *(_DWORD *)(v1 + 770) = v42;
  *(_WORD *)(v1 + 785) = v40;
  *(_DWORD *)(v1 + 794) = v38;
  *(_WORD *)(v1 + 809) = v36;
  *(_DWORD *)(v1 + 818) = v34;
  *(_WORD *)(v1 + 833) = v32;
  *(_DWORD *)(v1 + 842) = v30;
  *(_WORD *)(v1 + 857) = v28;
  *(_DWORD *)(v1 + 866) = v26;
  *(_WORD *)(v1 + 881) = v24;
  *(_DWORD *)(v1 + 890) = v22;
  *(_WORD *)(v1 + 905) = v20;
  *(_DWORD *)(v1 + 914) = v18;
  *(_WORD *)(v1 + 929) = v16;
  *(_DWORD *)(v1 + 938) = v14;
  *(_WORD *)(v1 + 953) = v12;
  *(_DWORD *)(v1 + 962) = v10;
  *(_WORD *)(v1 + 977) = v8;
  *(_DWORD *)(v1 + 986) = v6;
  *(_WORD *)(v1 + 1001) = v4;
  *(_WORD *)v1 = 167;
  *(_WORD *)(v1 + 24) = 168;
  *(_WORD *)(v1 + 48) = 403;
  *(_WORD *)(v1 + 72) = 225;
  *(_WORD *)(v1 + 96) = 207;
  *(_WORD *)(v1 + 120) = 208;
  *(_QWORD *)(v1 + 128) = sel_systemBrownColor;
  *(_WORD *)(v1 + 144) = 209;
  *(_QWORD *)(v1 + 152) = sel_systemGrayColor;
  *(_WORD *)(v1 + 168) = 210;
  *(_QWORD *)(v1 + 176) = sel_systemGreenColor;
  *(_WORD *)(v1 + 185) = v140;
  *(_BYTE *)(v1 + 187) = v141;
  *(_WORD *)(v1 + 192) = 217;
  *(_DWORD *)(v1 + 194) = v138;
  *(_WORD *)(v1 + 198) = v139;
  *(_QWORD *)(v1 + 200) = sel_systemIndigoColor;
  *(_WORD *)(v1 + 209) = v136;
  *(_BYTE *)(v1 + 211) = v137;
  *(_WORD *)(v1 + 216) = 211;
  *(_WORD *)(v1 + 222) = v135;
  *(_DWORD *)(v1 + 218) = v134;
  *(_QWORD *)(v1 + 224) = sel_systemOrangeColor;
  *(_BYTE *)(v1 + 235) = v133;
  *(_WORD *)(v1 + 233) = v132;
  *(_WORD *)(v1 + 240) = 212;
  *(_WORD *)(v1 + 246) = v131;
  *(_DWORD *)(v1 + 242) = v130;
  *(_QWORD *)(v1 + 248) = sel_systemPinkColor;
  *(_BYTE *)(v1 + 259) = v129;
  *(_WORD *)(v1 + 264) = 213;
  *(_WORD *)(v1 + 270) = v127;
  *(_QWORD *)(v1 + 272) = sel_systemPurpleColor;
  *(_BYTE *)(v1 + 283) = v125;
  *(_WORD *)(v1 + 288) = 214;
  *(_WORD *)(v1 + 294) = v123;
  *(_QWORD *)(v1 + 296) = sel_systemRedColor;
  *(_BYTE *)(v1 + 307) = v121;
  *(_WORD *)(v1 + 312) = 218;
  *(_WORD *)(v1 + 318) = v119;
  *(_QWORD *)(v1 + 320) = sel_systemTealColor;
  *(_BYTE *)(v1 + 331) = v117;
  *(_WORD *)(v1 + 336) = 215;
  *(_WORD *)(v1 + 342) = v115;
  *(_QWORD *)(v1 + 344) = sel_systemYellowColor;
  *(_BYTE *)(v1 + 355) = v113;
  *(_WORD *)(v1 + 360) = 198;
  *(_WORD *)(v1 + 366) = v111;
  *(_BYTE *)(v1 + 379) = v109;
  *(_WORD *)(v1 + 384) = 199;
  *(_WORD *)(v1 + 390) = v107;
  *(_QWORD *)(v1 + 392) = sel_secondarySystemBackgroundColor;
  *(_BYTE *)(v1 + 403) = v105;
  *(_WORD *)(v1 + 408) = 200;
  *(_WORD *)(v1 + 414) = v103;
  *(_QWORD *)(v1 + 416) = sel_tertiarySystemBackgroundColor;
  *(_BYTE *)(v1 + 427) = v101;
  *(_WORD *)(v1 + 432) = 219;
  *(_WORD *)(v1 + 438) = v99;
  *(_QWORD *)(v1 + 440) = sel_systemFillColor;
  *(_BYTE *)(v1 + 451) = v97;
  *(_WORD *)(v1 + 456) = 220;
  *(_WORD *)(v1 + 462) = v95;
  *(_BYTE *)(v1 + 475) = v93;
  *(_WORD *)(v1 + 480) = 221;
  *(_WORD *)(v1 + 486) = v91;
  *(_QWORD *)(v1 + 464) = sel_secondarySystemFillColor;
  *(_QWORD *)(v1 + 488) = sel_secondarySystemFillColor;
  *(_BYTE *)(v1 + 499) = v89;
  *(_DWORD *)(v1 + 500) = 1061158912;
  *(_WORD *)(v1 + 504) = 222;
  *(_WORD *)(v1 + 510) = v87;
  *(_BYTE *)(v1 + 523) = v85;
  *(_WORD *)(v1 + 528) = 193;
  *(_WORD *)(v1 + 534) = v83;
  *(_QWORD *)(v1 + 512) = sel_tertiarySystemFillColor;
  *(_QWORD *)(v1 + 536) = sel_tertiarySystemFillColor;
  *(_BYTE *)(v1 + 547) = v81;
  *(_WORD *)(v1 + 552) = 223;
  *(_WORD *)(v1 + 558) = v79;
  *(_QWORD *)(v1 + 560) = sel_quaternarySystemFillColor;
  *(_BYTE *)(v1 + 571) = v77;
  *(_WORD *)(v1 + 576) = 201;
  *(_WORD *)(v1 + 582) = v75;
  *(_QWORD *)(v1 + 584) = sel_systemGroupedBackgroundColor;
  *(_BYTE *)(v1 + 595) = v73;
  *(_WORD *)(v1 + 600) = 202;
  *(_WORD *)(v1 + 606) = v71;
  *(_QWORD *)(v1 + 608) = sel_secondarySystemGroupedBackgroundColor;
  *(_BYTE *)(v1 + 619) = v69;
  *(_WORD *)(v1 + 624) = 203;
  *(_WORD *)(v1 + 630) = v67;
  *(_QWORD *)(v1 + 632) = sel_tertiarySystemGroupedBackgroundColor;
  *(_BYTE *)(v1 + 643) = v65;
  *(_WORD *)(v1 + 648) = 190;
  *(_WORD *)(v1 + 654) = v63;
  *(_BYTE *)(v1 + 667) = v61;
  *(_WORD *)(v1 + 672) = 191;
  *(_WORD *)(v1 + 678) = v59;
  *(_QWORD *)(v1 + 680) = sel_secondaryLabelColor;
  *(_BYTE *)(v1 + 691) = v57;
  *(_WORD *)(v1 + 696) = 192;
  *(_WORD *)(v1 + 702) = v55;
  *(_QWORD *)(v1 + 704) = sel_tertiaryLabelColor;
  *(_BYTE *)(v1 + 715) = v53;
  *(_WORD *)(v1 + 720) = 194;
  *(_WORD *)(v1 + 726) = v51;
  *(_QWORD *)(v1 + 728) = sel_quaternaryLabelColor;
  *(_BYTE *)(v1 + 739) = v49;
  *(_WORD *)(v1 + 744) = 189;
  *(_WORD *)(v1 + 750) = v47;
  *(_QWORD *)(v1 + 752) = sel_placeholderTextColor;
  *(_BYTE *)(v1 + 763) = v45;
  *(_WORD *)(v1 + 768) = 196;
  *(_WORD *)(v1 + 774) = v43;
  *(_BYTE *)(v1 + 787) = v41;
  *(_WORD *)(v1 + 792) = 224;
  *(_WORD *)(v1 + 798) = v39;
  *(_BYTE *)(v1 + 448) = 1;
  *(_BYTE *)(v1 + 472) = 1;
  *(_BYTE *)(v1 + 496) = 1;
  *(_BYTE *)(v1 + 520) = 1;
  *(_BYTE *)(v1 + 808) = 1;
  *(_BYTE *)(v1 + 811) = v37;
  *(_WORD *)(v1 + 816) = 197;
  *(_WORD *)(v1 + 822) = v35;
  *(_BYTE *)(v1 + 835) = v33;
  *(_WORD *)(v1 + 840) = 188;
  *(_WORD *)(v1 + 846) = v31;
  *(_BYTE *)(v1 + 859) = v29;
  *(_WORD *)(v1 + 864) = 195;
  *(_WORD *)(v1 + 870) = v27;
  *(_QWORD *)(v1 + 776) = sel_separatorColor;
  *(_QWORD *)(v1 + 800) = sel_separatorColor;
  *(_QWORD *)(v1 + 824) = sel_separatorColor;
  *(_QWORD *)(v1 + 872) = sel_separatorColor;
  *(_BYTE *)(v1 + 883) = v25;
  *(_WORD *)(v1 + 888) = 186;
  *(_WORD *)(v1 + 894) = v23;
  *(_QWORD *)(v1 + 32) = sel_labelColor;
  *(_QWORD *)(v1 + 56) = sel_labelColor;
  *(_QWORD *)(v1 + 656) = sel_labelColor;
  *(_QWORD *)(v1 + 896) = sel_labelColor;
  *(_BYTE *)(v1 + 907) = v21;
  *(_WORD *)(v1 + 912) = 204;
  *(_WORD *)(v1 + 918) = v19;
  *(_BYTE *)(v1 + 931) = v17;
  *(_WORD *)(v1 + 936) = 187;
  *(_WORD *)(v1 + 942) = v15;
  *(_QWORD *)(v1 + 8) = sel_systemBackgroundColor;
  *(_QWORD *)(v1 + 80) = sel_systemBackgroundColor;
  *(_QWORD *)(v1 + 368) = sel_systemBackgroundColor;
  *(_QWORD *)(v1 + 848) = sel_systemBackgroundColor;
  *(_QWORD *)(v1 + 944) = sel_systemBackgroundColor;
  *(_BYTE *)(v1 + 955) = v13;
  *(_WORD *)(v1 + 960) = 205;
  *(_WORD *)(v1 + 966) = v11;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 920) = sel_tableCellDefaultSelectionTintColor;
  *(_QWORD *)(v1 + 968) = sel_tableCellDefaultSelectionTintColor;
  *(_BYTE *)(v1 + 979) = v9;
  *(_WORD *)(v1 + 984) = 206;
  *(_WORD *)(v1 + 990) = v7;
  *(_DWORD *)(v1 + 20) = 1065353216;
  *(_BYTE *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 44) = 1065353216;
  *(_BYTE *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 68) = 1065353216;
  *(_BYTE *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 92) = 1065353216;
  *(_QWORD *)(v1 + 104) = sel_systemBlueColor;
  *(_BYTE *)(v1 + 112) = 0;
  *(_DWORD *)(v1 + 116) = 1065353216;
  *(_BYTE *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 140) = 1065353216;
  *(_BYTE *)(v1 + 160) = 0;
  *(_DWORD *)(v1 + 164) = 1065353216;
  *(_BYTE *)(v1 + 184) = 0;
  *(_DWORD *)(v1 + 188) = 1065353216;
  *(_BYTE *)(v1 + 208) = 0;
  *(_DWORD *)(v1 + 212) = 1065353216;
  *(_BYTE *)(v1 + 232) = 0;
  *(_DWORD *)(v1 + 236) = 1065353216;
  *(_BYTE *)(v1 + 256) = 0;
  *(_DWORD *)(v1 + 260) = 1065353216;
  *(_BYTE *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 284) = 1065353216;
  *(_BYTE *)(v1 + 304) = 0;
  *(_DWORD *)(v1 + 308) = 1065353216;
  *(_BYTE *)(v1 + 328) = 0;
  *(_DWORD *)(v1 + 332) = 1065353216;
  *(_BYTE *)(v1 + 352) = 0;
  *(_DWORD *)(v1 + 356) = 1065353216;
  *(_BYTE *)(v1 + 376) = 0;
  *(_DWORD *)(v1 + 380) = 1065353216;
  *(_BYTE *)(v1 + 400) = 0;
  *(_DWORD *)(v1 + 404) = 1065353216;
  *(_BYTE *)(v1 + 424) = 0;
  *(_DWORD *)(v1 + 428) = 1065353216;
  *(_DWORD *)(v1 + 452) = 1065353216;
  *(_DWORD *)(v1 + 476) = 1065353216;
  *(_DWORD *)(v1 + 524) = 1065353216;
  *(_BYTE *)(v1 + 544) = 0;
  *(_DWORD *)(v1 + 548) = 1065353216;
  *(_BYTE *)(v1 + 568) = 0;
  *(_DWORD *)(v1 + 572) = 1065353216;
  *(_BYTE *)(v1 + 592) = 0;
  *(_DWORD *)(v1 + 596) = 1065353216;
  *(_BYTE *)(v1 + 616) = 0;
  *(_DWORD *)(v1 + 620) = 1065353216;
  *(_BYTE *)(v1 + 640) = 0;
  *(_DWORD *)(v1 + 644) = 1065353216;
  *(_BYTE *)(v1 + 664) = 0;
  *(_DWORD *)(v1 + 668) = 1065353216;
  *(_BYTE *)(v1 + 688) = 0;
  *(_DWORD *)(v1 + 692) = 1065353216;
  *(_BYTE *)(v1 + 712) = 0;
  *(_DWORD *)(v1 + 716) = 1065353216;
  *(_BYTE *)(v1 + 736) = 0;
  *(_DWORD *)(v1 + 740) = 1065353216;
  *(_BYTE *)(v1 + 760) = 0;
  *(_DWORD *)(v1 + 764) = 1065353216;
  *(_BYTE *)(v1 + 784) = 0;
  *(_DWORD *)(v1 + 788) = 1065353216;
  *(_DWORD *)(v1 + 812) = 1065353216;
  *(_BYTE *)(v1 + 832) = 0;
  *(_DWORD *)(v1 + 836) = 1065353216;
  *(_BYTE *)(v1 + 856) = 0;
  *(_DWORD *)(v1 + 860) = 1065353216;
  *(_DWORD *)(v1 + 884) = 1065353216;
  *(_DWORD *)(v1 + 908) = 1065353216;
  *(_DWORD *)(v1 + 932) = 1065353216;
  *(_DWORD *)(v1 + 956) = 1065353216;
  *(_DWORD *)(v1 + 980) = 1065353216;
  *(_QWORD *)(v1 + 992) = sel_systemBlueColor;
  *(_BYTE *)(v1 + 1003) = v5;
  *(_DWORD *)(v1 + 1004) = 1065353216;
  v2 = (WTF *)qword_1ECE82028;
  *(_BYTE *)(v1 + 880) = 0;
  *(_BYTE *)(v1 + 904) = 0;
  *(_BYTE *)(v1 + 928) = 0;
  *(_BYTE *)(v1 + 952) = 0;
  *(_BYTE *)(v1 + 976) = 0;
  *(_BYTE *)(v1 + 1000) = 0;
  if (v2)
  {
    qword_1ECE82028 = 0;
    LODWORD(qword_1ECE82030) = 0;
    WTF::fastFree(v2, v0);
  }
  qword_1ECE82028 = v1;
  *(_QWORD *)&result = 0x2A0000002ALL;
  qword_1ECE82030 = 0x2A0000002ALL;
  return result;
}

void sub_19542A410(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WebCore::AttachmentLayout::LabelLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::AttachmentLayout::LabelLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::AttachmentLayout::LabelLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebCore::AttachmentLayout::LabelLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(WTF **)a1;
      v4 = *(_DWORD *)(a1 + 12);
      v5 = 48 * a2;
      v6 = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v6;
      if (v4)
      {
        v8 = v6;
        v9 = (WTF *)((char *)v3 + 48 * v4);
        v10 = v3;
        do
        {
          v11 = *((_OWORD *)v10 + 1);
          *(_OWORD *)v8 = *(_OWORD *)v10;
          *(_OWORD *)(v8 + 16) = v11;
          v12 = *((_QWORD *)v10 + 4);
          *((_QWORD *)v10 + 4) = 0;
          *(_QWORD *)(v8 + 32) = v12;
          v13 = *((_QWORD *)v10 + 5);
          *((_QWORD *)v10 + 5) = 0;
          *(_QWORD *)(v8 + 40) = v13;
          v14 = (const void *)*((_QWORD *)v10 + 5);
          *((_QWORD *)v10 + 5) = 0;
          if (v14)
            CFRelease(v14);
          v15 = (const void *)*((_QWORD *)v10 + 4);
          *((_QWORD *)v10 + 4) = 0;
          if (v15)
            CFRelease(v15);
          v10 = (WTF *)((char *)v10 + 48);
          v8 += 48;
        }
        while (v10 != v9);
      }
      if (v3)
      {
        if (*(WTF **)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7);
      }
    }
  }
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::RenderThemeCocoa::platformGrammarMarkerColor(WTF::OptionSet<WebCore::StyleColorOptions>)::$_0 &&>>()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
    result = _os_feature_enabled_impl();
  _MergedGlobals_140 = result;
  return result;
}

uint64_t WTF::KeyValuePair<int,WebCore::Color>::~KeyValuePair(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  BOOL v7;

  v2 = a1;
  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = --v6 == 0;
    }
    while (__stlxr(v6, v5));
    v2 = a1;
    if (v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      return a1;
    }
  }
  return v2;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::Color>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::reinsert(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;

  v3 = WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::Color>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<int>>,int>(a1, *(_DWORD *)a2);
  result = WTF::KeyValuePair<int,WebCore::Color>::~KeyValuePair(v3, v4);
  *(_DWORD *)result = *(_DWORD *)a2;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    *(_QWORD *)(result + 8) = v6;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::Color>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<int>>,int>(uint64_t a1, int a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = 0;
  v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v5 = ((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16);
  do
  {
    v6 = v5 & v2;
    v5 = ++v3 + v6;
  }
  while (*(_DWORD *)(a1 + 16 * v6));
  return a1 + 16 * v6;
}

uint64_t WebCore::FilteredElementDescendantRange<WebCore::HTMLOptionElement,&WebCore::HTMLDataListElement::isSuggestion>::first(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  BOOL v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  BOOL v14;
  BOOL v15;
  WTF::StringImpl *v17;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 80);
  if (v3)
  {
    while (1)
    {
      v5 = v3;
      v6 = *(_WORD *)(v3 + 28);
      if ((v6 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      {
        break;
      }
      if ((v6 & 4) != 0)
      {
        v3 = *(_QWORD *)(v5 + 80);
        if (v3)
          continue;
      }
      if (v5 == v2)
        return 0;
      while (1)
      {
        v3 = *(_QWORD *)(v5 + 56);
        if (v3)
          break;
        v5 = *(_QWORD *)(v5 + 32);
        if (v5)
          v7 = v5 == v2;
        else
          v7 = 1;
        if (v7)
          return 0;
      }
    }
    while (1)
    {
      if (!*(_BYTE *)(v5 + 112))
      {
        v8 = *(_QWORD *)(v5 + 32);
        if (!v8
          || (*(_WORD *)(v8 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
          || !*(_BYTE *)(v8 + 112))
        {
          WebCore::HTMLOptionElement::value((WTF::StringImpl *)v5, a2, &v17);
          v9 = v17;
          if (v17)
          {
            v17 = 0;
            v10 = *((_DWORD *)v9 + 1);
            if (*(_DWORD *)v9 == 2)
            {
              WTF::StringImpl::destroy(v9, a2);
              if (v10)
                return v5;
            }
            else
            {
              *(_DWORD *)v9 -= 2;
              if (v10)
                return v5;
            }
          }
        }
      }
      v11 = *a1;
      v12 = *(_QWORD *)(v5 + 80);
      if (!v12)
        break;
LABEL_22:
      while (1)
      {
        v5 = v12;
        v13 = *(_WORD *)(v12 + 28);
        if ((v13 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
        {
          break;
        }
        if ((v13 & 4) != 0)
        {
          v12 = *(_QWORD *)(v5 + 80);
          if (v12)
            continue;
        }
        if (v5 == v11)
          return 0;
        while (1)
        {
          v12 = *(_QWORD *)(v5 + 56);
          if (v12)
            break;
          v5 = *(_QWORD *)(v5 + 32);
          if (v5)
            v14 = v5 == v11;
          else
            v14 = 1;
          if (v14)
            return 0;
        }
      }
    }
    if (v5 != v11)
    {
      do
      {
        v12 = *(_QWORD *)(v5 + 56);
        if (v12)
          goto LABEL_22;
        v5 = *(_QWORD *)(v5 + 32);
        if (v5)
          v15 = v5 == v11;
        else
          v15 = 1;
      }
      while (!v15);
    }
  }
  return 0;
}

void WebCore::MediaControlsHost::~MediaControlsHost(WebCore::MediaControlsHost *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 40))(v3);
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
    v4 = (_DWORD *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v4)
    {
      if (v4[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
      else
        --v4[4];
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::MediaControlsHost::sortedTrackListForMenu@<X0>(uint64_t this@<X0>, WebCore::TextTrackList *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Page *v9;
  uint64_t v11;
  WebCore::PageGroup *v12;
  WebCore::CaptionUserPreferencesMediaAF *v13;
  _DWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(this + 16);
  if (v4
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && (v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 528)) != 0
    && (v7 = *(_QWORD *)(v6 + 8)) != 0
    && (v8 = *(_QWORD *)(v7 + 24)) != 0
    && (v9 = *(WebCore::Page **)(v8 + 8)) != 0)
  {
    v11 = *((_QWORD *)v9 + 66);
    if (!v11 || (v12 = *(WebCore::PageGroup **)(v11 + 8)) == 0)
    {
      WebCore::Page::initGroup(v9);
      v16 = *((_QWORD *)v9 + 66);
      if (v16)
        v12 = *(WebCore::PageGroup **)(v16 + 8);
      else
        v12 = 0;
    }
    v13 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v12 + 5);
    if (!v13)
    {
      v13 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
      WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v13, v12);
      v14 = (_DWORD *)*((_QWORD *)v12 + 5);
      *((_QWORD *)v12 + 5) = v13;
      if (v14)
      {
        if (v14[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
          v13 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v12 + 5);
        }
        else
        {
          --v14[2];
        }
      }
    }
    v19 = 0x100000000;
    v20 = 2;
    v17 = 0;
    WTF::HashTable<WebCore::TextTrack::Kind,WebCore::TextTrack::Kind,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>>::add(&v17, (int *)&v19, (uint64_t)v18);
    WTF::HashTable<WebCore::TextTrack::Kind,WebCore::TextTrack::Kind,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>>::add(&v17, (int *)&v19 + 1, (uint64_t)v18);
    WTF::HashTable<WebCore::TextTrack::Kind,WebCore::TextTrack::Kind,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>>::add(&v17, &v20, (uint64_t)v18);
    this = (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *, WebCore::TextTrackList *, uint64_t *))(*(_QWORD *)v13 + 184))(v13, a2, &v17);
    if (v17)
      return WTF::fastFree((WTF *)(v17 - 16), v15);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

uint64_t WebCore::MediaControlsHost::sortedTrackListForMenu@<X0>(uint64_t this@<X0>, WebCore::AudioTrackList *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Page *v9;
  uint64_t v11;
  WebCore::PageGroup *v12;
  WebCore::CaptionUserPreferencesMediaAF *v13;
  WebCore::CaptionUserPreferencesMediaAF *v14;
  _DWORD *v15;
  WebCore::Page *v16;
  uint64_t v17;

  v4 = *(_QWORD *)(this + 16);
  if (v4
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && (v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 528)) != 0
    && (v7 = *(_QWORD *)(v6 + 8)) != 0
    && (v8 = *(_QWORD *)(v7 + 24)) != 0
    && (v9 = *(WebCore::Page **)(v8 + 8)) != 0)
  {
    v11 = *((_QWORD *)v9 + 66);
    if (!v11 || (v12 = *(WebCore::PageGroup **)(v11 + 8)) == 0)
    {
      v16 = v9;
      WebCore::Page::initGroup(v9);
      v17 = *((_QWORD *)v16 + 66);
      if (v17)
        v12 = *(WebCore::PageGroup **)(v17 + 8);
      else
        v12 = 0;
    }
    v13 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v12 + 5);
    if (!v13)
    {
      v14 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
      v13 = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v14, v12);
      v15 = (_DWORD *)*((_QWORD *)v12 + 5);
      *((_QWORD *)v12 + 5) = v13;
      if (v15)
      {
        if (v15[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
          v13 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v12 + 5);
        }
        else
        {
          --v15[2];
        }
      }
    }
    return (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *, WebCore::AudioTrackList *))(*(_QWORD *)v13 + 200))(v13, a2);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

uint64_t WebCore::MediaControlsHost::captionDisplayMode@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Page *v8;
  uint64_t v9;
  WebCore::PageGroup *v10;
  WebCore::CaptionUserPreferencesMediaAF *v11;
  WebCore::CaptionUserPreferencesMediaAF *v12;
  _DWORD *v13;
  _DWORD *v14;
  WebCore::Page *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v3 = *(_QWORD *)(this + 16);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 528)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD *)(v6 + 24)) != 0
    && (v8 = *(WebCore::Page **)(v7 + 8)) != 0)
  {
    v9 = *((_QWORD *)v8 + 66);
    if (!v9 || (v10 = *(WebCore::PageGroup **)(v9 + 8)) == 0)
    {
      v15 = v8;
      WebCore::Page::initGroup(v8);
      v16 = *((_QWORD *)v15 + 66);
      if (v16)
        v10 = *(WebCore::PageGroup **)(v16 + 8);
      else
        v10 = 0;
    }
    v11 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v10 + 5);
    if (!v11)
    {
      v12 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
      v11 = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v12, v10);
      v13 = (_DWORD *)*((_QWORD *)v10 + 5);
      *((_QWORD *)v10 + 5) = v11;
      if (v13)
      {
        if (v13[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
          v11 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v10 + 5);
        }
        else
        {
          --v13[2];
        }
      }
    }
    this = (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v11 + 16))(v11);
    switch((int)this)
    {
      case 0:
        {
          v14 = (_DWORD *)WebCore::MediaControlsHost::automaticKeyword(void)::automatic;
        }
        else
        {
          this = WTF::AtomStringImpl::add();
          v14 = (_DWORD *)v18;
          WebCore::MediaControlsHost::automaticKeyword(void)::automatic = v18;
        }
        break;
      case 1:
        {
          v14 = (_DWORD *)WebCore::MediaControlsHost::forcedOnlyKeyword(void)::forcedOnly;
        }
        else
        {
          this = WTF::AtomStringImpl::add();
          v14 = (_DWORD *)v18;
          WebCore::MediaControlsHost::forcedOnlyKeyword(void)::forcedOnly = v18;
        }
        break;
      case 2:
        if ((_MergedGlobals_141 & 1) != 0)
        {
          v14 = (_DWORD *)qword_1ECE82040;
          break;
        }
        this = WTF::AtomStringImpl::add();
        v14 = (_DWORD *)v18;
        v17 = &_MergedGlobals_141;
        qword_1ECE82040 = v18;
        goto LABEL_32;
      case 3:
        if ((byte_1ECE82039 & 1) != 0)
        {
          v14 = (_DWORD *)qword_1ECE82048;
        }
        else
        {
          this = WTF::AtomStringImpl::add();
          v14 = (_DWORD *)v18;
          v17 = &byte_1ECE82039;
          qword_1ECE82048 = v18;
LABEL_32:
          *v17 = 1;
        }
        break;
      default:
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    v14 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  }
  if (v14)
    *v14 += 2;
  *a2 = v14;
  return this;
}

uint64_t WebCore::MediaControlsHost::shouldForceControlsDisplay(WebCore::MediaControlsHost *this)
{
  uint64_t v1;
  WebCore::HTMLMediaElement *v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v2 = *(WebCore::HTMLMediaElement **)(v1 + 8);
  if (!v2)
    return 0;
  (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v2 + 1800))(v2);
  result = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v2 + 1264))(v2);
  if (!(_DWORD)result)
    return result;
  v4 = *((_QWORD *)v2 + 13);
  if (!v4)
    return 0;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = (uint64_t *)(v4 + 32);
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_7;
    return 0;
  }
  v6 = *(uint64_t **)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    return 0;
LABEL_7:
  v7 = v7;
  while (1)
  {
    v8 = *v6;
    if (*v6 == WebCore::HTMLNames::autoplayAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 32))
    {
      break;
    }
    result = 0;
    v6 += 2;
    if (!--v7)
      return result;
  }
  v9 = *((_QWORD *)v2 + 200);
  if (!v9)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(v2);
    v9 = *((_QWORD *)v2 + 200);
  }
  return *(unsigned __int8 *)(v9 + 89) >> 7;
}

unsigned __int8 *WebCore::MediaControlsHost::externalDeviceDisplayName@<X0>(unsigned __int8 *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  _DWORD *v8;
  int v9;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 1136);
      if (v5)
      {
        v6 = *(unsigned __int8 **)v5;
        if (__ldaxr(*(unsigned __int8 **)v5))
        {
          __clrex();
        }
        else if (!__stxr(1u, v6))
        {
          goto LABEL_11;
        }
        MEMORY[0x19AEA534C](v6);
LABEL_11:
        ++*((_QWORD *)v6 + 1);
        v9 = __ldxr(v6);
        if (v9 == 1)
        {
          if (!__stlxr(0, v6))
            goto LABEL_16;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_16:
        (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 72) + 720))(*(_QWORD *)(v5 + 72));
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
      }
    }
  }
  v8 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v8 += 2;
  *a2 = v8;
  return this;
}

uint64_t WebCore::MediaControlsHost::showMediaControlsContextMenu(_QWORD *a1, WebCore::Element *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Page *v11;
  WTF::JSONImpl::ObjectBase *v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  unsigned int Boolean;
  char v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  int v22;
  WTF *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  char v34;
  WTF::StringImpl *v35;
  _DWORD *v36;
  uint64_t v37;
  WebCore::PageGroup *v38;
  WebCore::CaptionUserPreferencesMediaAF *v39;
  _DWORD *v40;
  void *v41;
  int v42;
  WTF *v43;
  uint64_t v44;
  unint64_t v45;
  _DWORD **v46;
  WTF::StringImpl *v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  char *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  void *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  unsigned int v74;
  char v75;
  WTF::StringImpl *v76;
  WebCore::MediaControlsContextMenuItem *v77;
  int v78;
  uint64_t v79;
  WebCore::PageGroup *v80;
  WebCore::CaptionUserPreferencesMediaAF *v81;
  _DWORD *v82;
  void *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  BOOL v89;
  _BOOL4 v90;
  WTF::StringImpl *v91;
  _BOOL4 v92;
  int v93;
  WebCore::TextTrack *v94;
  void *v95;
  WTF *v96;
  uint64_t v97;
  unint64_t v98;
  WTF::StringImpl *v99;
  WebCore::TextTrack *v100;
  uint64_t v101;
  _DWORD *v102;
  char v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  char *v106;
  _DWORD *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  void *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  _DWORD *v125;
  WTF::StringImpl *v126;
  int v127;
  WTF::StringImpl *v128;
  unsigned int v129;
  char v130;
  WTF::StringImpl *v131;
  WebCore::MediaControlsContextMenuItem *v132;
  int v133;
  uint64_t v134;
  WebCore::PageGroup *v135;
  WebCore::CaptionUserPreferencesMediaAF *v136;
  _DWORD *v137;
  void *v138;
  WTF *v139;
  uint64_t v140;
  uint64_t v141;
  WebCore::TextTrackCueList *v142;
  int v143;
  unint64_t v144;
  WTF::StringImpl *v145;
  unsigned int v146;
  unint64_t i;
  uint64_t v148;
  void *v149;
  unint64_t v150;
  int v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  _DWORD *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF *v161;
  void *v162;
  WTF *v163;
  void *v164;
  void *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  unsigned int v168;
  int v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  uint64_t v179;
  _DWORD *v180;
  int v181;
  WTF::StringImpl *v182;
  unsigned int v183;
  char v184;
  WTF::StringImpl *v185;
  double v186;
  WTF::StringImpl *v187;
  _DWORD **v188;
  uint64_t v189;
  uint64_t v190;
  _DWORD *v191;
  WTF::StringImpl *v192;
  _DWORD *v193;
  _DWORD *v194;
  _DWORD *v195;
  _DWORD *v196;
  _DWORD *v197;
  _DWORD *v198;
  _DWORD *v199;
  _DWORD *v200;
  void *v201;
  WTF::StringImpl *v202;
  int v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  WTF::StringImpl *v210;
  uint64_t v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  unsigned int v223;
  char v224;
  WTF::StringImpl *v225;
  _DWORD *v226;
  int v227;
  int v228;
  unint64_t v229;
  WTF *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  uint64_t v238;
  char v239;
  WTF::StringImpl *v240;
  void *v241;
  unint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  _DWORD *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  uint64_t v252;
  _DWORD *v253;
  uint64_t v254;
  void *v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  WTF *v267;
  uint64_t v268;
  uint64_t v269;
  WTF *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _DWORD *v278;
  WTF *v279;
  unsigned int v280;
  WebCore::CaptionUserPreferencesMediaAF *v281;
  unsigned int v282;
  WebCore::MediaControlsContextMenuItem *v283;
  WebCore::MediaControlsContextMenuItem *v284;
  WTF::JSONImpl::ObjectBase *v285;
  unsigned int v286;
  _BOOL4 v287;
  WebCore::MediaControlsContextMenuItem *v288;
  WebCore::Page *v289;
  int v290;
  int v291;
  WTF::StringImpl *v292;
  int v293;
  int v294;
  WTF::StringImpl *v295;
  int v296;
  int v297;
  WTF::StringImpl *v298;
  int v299;
  int v300;
  WTF::StringImpl *v301;
  int v302;
  int v303;
  int v304;
  int v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  WTF::StringImpl *v310;
  uint64_t v311;
  int v312;
  int v313;
  WTF *v314;
  uint64_t v315;
  uint64_t v316;
  WTF::JSONImpl::ObjectBase *v317;
  WTF::StringImpl *v318;
  WTF::StringImpl *v319;
  _DWORD *v320;
  WTF::StringImpl *v321;
  char v322;
  WTF::StringImpl *v323;
  unint64_t v324;
  uint64_t v325;
  _DWORD *v326;
  _DWORD *v327;
  char v328;
  uint64_t v329;
  uint64_t v330;
  _DWORD *v331;
  _DWORD *v332;
  char v333;
  uint64_t v334;
  uint64_t v335;
  _DWORD *v336;
  _DWORD *v337;
  char v338;
  uint64_t v339;
  uint64_t v340;
  _DWORD *v341;
  _DWORD *v342;
  char v343;
  uint64_t v344;
  uint64_t v345;
  WTF::StringImpl *v346;
  WTF::StringImpl *v347;
  char v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;

  v351 = *MEMORY[0x1E0C80C00];
  if (a1[5])
    return 0;
  v7 = a1[2];
  if (!v7)
    return 0;
  v4 = *(_QWORD *)(v7 + 8);
  if (!v4)
    return v4;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 528);
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    return 0;
  v10 = *(_QWORD *)(v9 + 24);
  if (!v10)
    return 0;
  v11 = *(WebCore::Page **)(v10 + 8);
  if (!v11)
    return 0;
  WTF::JSONImpl::Value::parseJSON();
  v14 = v317;
  if (!v317)
    return 0;
  v15 = *((_DWORD *)v317 + 1);
  if (v15 < 5)
  {
LABEL_12:
    v4 = 0;
    v317 = 0;
    goto LABEL_13;
  }
  if (v15 != 5)
  {
    if (v15 != 6)
    {
      __break(0xC471u);
      JUMPOUT(0x19542B1FCLL);
    }
    goto LABEL_12;
  }
  ++*(_DWORD *)v317;
  v315 = 0;
  v316 = 0;
  v314 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v345 = (uint64_t)v319;
  Boolean = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v14, (const WTF::String *)&v345);
  if (Boolean <= 0x100)
    v18 = 0;
  else
    v18 = Boolean;
  v19 = (WTF::StringImpl *)v345;
  v345 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (v18)
  {
    v312 = 0;
    v313 = 0;
    WebCore::localizedString(CFSTR("Picture in Picture (Media Controls Menu)"), (uint64_t)&v345);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = v319;
    v310 = v319;
    WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_3::operator()((uint64_t)&v319, &v316, (uint64_t)&v312, (_DWORD **)&v345, 0, (_DWORD **)&v310);
    v21 = WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v314, 1uLL, (unint64_t)&v319);
    v22 = HIDWORD(v315);
    v23 = v314;
    v24 = (char *)v314 + 48 * HIDWORD(v315);
    *(_QWORD *)v24 = *(_QWORD *)v21;
    v25 = *(_QWORD *)(v21 + 8);
    *(_QWORD *)(v21 + 8) = 0;
    *((_QWORD *)v24 + 1) = v25;
    v26 = *(_QWORD *)(v21 + 16);
    *(_QWORD *)(v21 + 16) = 0;
    *((_QWORD *)v24 + 2) = v26;
    v24[24] = *(_BYTE *)(v21 + 24);
    *((_QWORD *)v24 + 4) = 0;
    *((_QWORD *)v24 + 5) = 0;
    v27 = *(_QWORD *)(v21 + 32);
    *(_QWORD *)(v21 + 32) = 0;
    *((_QWORD *)v24 + 4) = v27;
    LODWORD(v27) = *(_DWORD *)(v21 + 40);
    *(_DWORD *)(v21 + 40) = 0;
    *((_DWORD *)v24 + 10) = v27;
    LODWORD(v27) = *(_DWORD *)(v21 + 44);
    *(_DWORD *)(v21 + 44) = 0;
    *((_DWORD *)v24 + 11) = v27;
    v28 = v22 + 1;
    HIDWORD(v315) = v22 + 1;
    WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v319, v29);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v30);
      else
        *(_DWORD *)v20 -= 2;
    }
    v31 = (WTF::StringImpl *)v345;
    v345 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
    if (v313 != -1)
      ((void (*)(uint64_t *, int *))off_1E335C6A8[v313])(&v345, &v312);
    v313 = -1;
  }
  else
  {
    v23 = 0;
    v28 = 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v345 = (uint64_t)v319;
  v33 = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v14, (const WTF::String *)&v345);
  if (v33 <= 0x100)
    v34 = 0;
  else
    v34 = v33;
  v35 = (WTF::StringImpl *)v345;
  v345 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v32);
    else
      *(_DWORD *)v35 -= 2;
  }
  v285 = v14;
  v289 = v11;
  if (v34)
  {
    v36 = *(_DWORD **)(v4 + 1344);
    if (v36)
    {
      ++v36[6];
      if (v36[17] >= 2u)
      {
        v286 = v28;
        v37 = *((_QWORD *)v11 + 66);
        if (!v37 || (v38 = *(WebCore::PageGroup **)(v37 + 8)) == 0)
        {
          WebCore::Page::initGroup(v11);
          v275 = *((_QWORD *)v11 + 66);
          if (v275)
            v38 = *(WebCore::PageGroup **)(v275 + 8);
          else
            v38 = 0;
        }
        v39 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v38 + 5);
        if (!v39)
        {
          v39 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
          WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v39, v38);
          v40 = (_DWORD *)*((_QWORD *)v38 + 5);
          *((_QWORD *)v38 + 5) = v39;
          if (v40)
          {
            if (v40[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
              v39 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v38 + 5);
            }
            else
            {
              --v40[2];
            }
          }
        }
        (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::CaptionUserPreferencesMediaAF *, _DWORD *))(*(_QWORD *)v39 + 200))(&v310, v39, v36);
        if (HIDWORD(v311))
        {
          v279 = v23;
          if (HIDWORD(v311) >= 0x5555556)
          {
            __break(0xC471u);
            JUMPOUT(0x19542D130);
          }
          v42 = 48 * HIDWORD(v311);
          v43 = (WTF *)WTF::fastMalloc((WTF *)(48 * HIDWORD(v311)));
          v282 = (v42 & 0xFFFFFFF0) / 0x30;
          if (HIDWORD(v311))
          {
            v278 = v36;
            v44 = 0;
            v45 = 0;
            v46 = (_DWORD **)MEMORY[0x1E0CBF6F0];
            do
            {
              v47 = v310;
              v48 = (_DWORD *)*((_QWORD *)v310 + v45);
              if (v48)
                ++v48[4];
              v345 = (uint64_t)v48;
              LODWORD(v346) = 1;
              (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v39 + 192))(&v318, v39);
              WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_3::operator()((uint64_t)&v319, &v316, (uint64_t)&v345, (_DWORD **)&v318, *(_BYTE *)(*((_QWORD *)v47 + v45) + 176), v46);
              v50 = v318;
              v318 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, v49);
                else
                  *(_DWORD *)v50 -= 2;
              }
              if ((_DWORD)v346 != -1)
                ((void (*)(WTF::StringImpl **, uint64_t *))off_1E335C6A8[v346])(&v318, &v345);
              v51 = (char *)v43 + v44;
              *(_QWORD *)v51 = v319;
              v52 = v320;
              v320 = 0;
              *((_QWORD *)v51 + 1) = v52;
              v53 = v321;
              v321 = 0;
              *((_QWORD *)v51 + 2) = v53;
              v51[24] = v322;
              *((_QWORD *)v51 + 5) = 0;
              v54 = v323;
              v323 = 0;
              *((_QWORD *)v51 + 4) = v54;
              LODWORD(v54) = v324;
              LODWORD(v324) = 0;
              *((_DWORD *)v51 + 10) = (_DWORD)v54;
              LODWORD(v54) = HIDWORD(v324);
              HIDWORD(v324) = 0;
              *((_DWORD *)v51 + 11) = (_DWORD)v54;
              ++v45;
              WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v319, v49);
              v44 += 48;
            }
            while (v45 < HIDWORD(v311));
            v23 = v279;
            if (HIDWORD(v311))
            {
              v55 = v310;
              v56 = 8 * HIDWORD(v311);
              do
              {
                v57 = *(_DWORD **)v55;
                *(_QWORD *)v55 = 0;
                if (v57)
                {
                  if (v57[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v57 + 16))(v57);
                  else
                    --v57[4];
                }
                v55 = (WTF::StringImpl *)((char *)v55 + 8);
                v56 -= 8;
              }
              while (v56);
            }
            v36 = v278;
          }
          else
          {
            LODWORD(v45) = 0;
            v23 = v279;
          }
        }
        else
        {
          v43 = 0;
          v282 = 0;
          LODWORD(v45) = 0;
        }
        v58 = v310;
        if (v310)
        {
          v310 = 0;
          LODWORD(v311) = 0;
          WTF::fastFree(v58, v41);
        }
        if ((_DWORD)v45)
        {
          WebCore::localizedString(CFSTR("Languages (Media Controls Menu)"), (uint64_t)&v345);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v60 = v319;
          v61 = v345;
          v319 = 0;
          if (v345)
            *(_DWORD *)v345 += 2;
          v320 = (_DWORD *)v61;
          if (v60)
            *(_DWORD *)v60 += 2;
          v321 = v60;
          v322 = 0;
          v323 = v43;
          v324 = __PAIR64__(v45, v282);
          if (v286 == (_DWORD)v315)
          {
            v62 = WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v314, v286 + 1, (unint64_t)&v319);
            v63 = HIDWORD(v315);
            v64 = (char *)v314 + 48 * HIDWORD(v315);
            *(_QWORD *)v64 = *(_QWORD *)v62;
            v65 = *(_QWORD *)(v62 + 8);
            *(_QWORD *)(v62 + 8) = 0;
            *((_QWORD *)v64 + 1) = v65;
            v66 = *(_QWORD *)(v62 + 16);
            *(_QWORD *)(v62 + 16) = 0;
            *((_QWORD *)v64 + 2) = v66;
            v64[24] = *(_BYTE *)(v62 + 24);
            *((_QWORD *)v64 + 4) = 0;
            *((_QWORD *)v64 + 5) = 0;
            v67 = *(_QWORD *)(v62 + 32);
            *(_QWORD *)(v62 + 32) = 0;
            *((_QWORD *)v64 + 4) = v67;
            LODWORD(v67) = *(_DWORD *)(v62 + 40);
            *(_DWORD *)(v62 + 40) = 0;
            *((_DWORD *)v64 + 10) = v67;
            LODWORD(v67) = *(_DWORD *)(v62 + 44);
            *(_DWORD *)(v62 + 44) = 0;
            *((_DWORD *)v64 + 11) = v67;
          }
          else
          {
            v68 = (char *)v23 + 48 * v286;
            *(_QWORD *)v68 = 0;
            v320 = 0;
            *((_QWORD *)v68 + 1) = v61;
            v69 = v321;
            v321 = 0;
            *((_QWORD *)v68 + 2) = v69;
            v68[24] = 0;
            *((_QWORD *)v68 + 4) = 0;
            *((_QWORD *)v68 + 5) = 0;
            v70 = v323;
            v323 = 0;
            *((_QWORD *)v68 + 4) = v70;
            LODWORD(v70) = v324;
            LODWORD(v324) = 0;
            *((_DWORD *)v68 + 10) = (_DWORD)v70;
            LODWORD(v70) = HIDWORD(v324);
            HIDWORD(v324) = 0;
            *((_DWORD *)v68 + 11) = (_DWORD)v70;
            v63 = HIDWORD(v315);
          }
          v11 = v289;
          HIDWORD(v315) = v63 + 1;
          WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v319, v59);
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
              WTF::StringImpl::destroy(v60, v71);
            else
              *(_DWORD *)v60 -= 2;
          }
          v72 = (WTF::StringImpl *)v345;
          v345 = 0;
          v14 = v285;
          if (v72)
          {
            if (*(_DWORD *)v72 == 2)
              WTF::StringImpl::destroy(v72, v71);
            else
              *(_DWORD *)v72 -= 2;
          }
        }
        else
        {
          v14 = v285;
          v11 = v289;
          if (v43)
            WTF::fastFree(v43, v41);
        }
      }
      if (v36[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 72))(v36);
      else
        --v36[6];
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v345 = (uint64_t)v319;
  v74 = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v14, (const WTF::String *)&v345);
  if (v74 <= 0x100)
    v75 = 0;
  else
    v75 = v74;
  v76 = (WTF::StringImpl *)v345;
  v345 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v73);
    else
      *(_DWORD *)v76 -= 2;
  }
  if (!v75)
    goto LABEL_184;
  v77 = *(WebCore::MediaControlsContextMenuItem **)(v4 + 1352);
  if (!v77)
    goto LABEL_184;
  v78 = *((_DWORD *)v77 + 6) + 1;
  *((_DWORD *)v77 + 6) = v78;
  if (!(*((_DWORD *)v77 + 31) + *((_DWORD *)v77 + 27) + *((_DWORD *)v77 + 17)))
    goto LABEL_182;
  v79 = *((_QWORD *)v11 + 66);
  if (!v79 || (v80 = *(WebCore::PageGroup **)(v79 + 8)) == 0)
  {
    WebCore::Page::initGroup(v11);
    v276 = *((_QWORD *)v11 + 66);
    if (v276)
      v80 = *(WebCore::PageGroup **)(v276 + 8);
    else
      v80 = 0;
  }
  v81 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v80 + 5);
  if (!v81)
  {
    v81 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
    WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v81, v80);
    v82 = (_DWORD *)*((_QWORD *)v80 + 5);
    *((_QWORD *)v80 + 5) = v81;
    if (v82)
    {
      if (v82[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v82 + 8))(v82);
        v81 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v80 + 5);
      }
      else
      {
        --v82[2];
      }
    }
  }
  v345 = 0x100000000;
  LODWORD(v346) = 2;
  v309 = 0;
  WTF::HashTable<WebCore::TextTrack::Kind,WebCore::TextTrack::Kind,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>>::add(&v309, (int *)&v345, (uint64_t)&v319);
  WTF::HashTable<WebCore::TextTrack::Kind,WebCore::TextTrack::Kind,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>>::add(&v309, (int *)&v345 + 1, (uint64_t)&v319);
  WTF::HashTable<WebCore::TextTrack::Kind,WebCore::TextTrack::Kind,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>>::add(&v309, (int *)&v346, (uint64_t)&v319);
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::CaptionUserPreferencesMediaAF *, WebCore::MediaControlsContextMenuItem *, uint64_t *))(*(_QWORD *)v81 + 184))(&v310, v81, v77, &v309);
  if (v309)
    WTF::fastFree((WTF *)(v309 - 16), v83);
  if (HIDWORD(v311))
  {
    v84 = v310;
    v85 = HIDWORD(v311) - 1;
    v14 = v285;
    do
    {
      v86 = *(_QWORD *)v84;
      v84 = (WTF::StringImpl *)((char *)v84 + 8);
      v87 = *(_DWORD *)(v86 + 224);
      v89 = v85-- != 0;
      v90 = v87 != 2;
    }
    while (v87 != 2 && v89);
  }
  else
  {
    v90 = 1;
    v14 = v285;
  }
  if ((*(unsigned int (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v81 + 16))(v81))
    v92 = 0;
  else
    v92 = v90;
  v287 = v92;
  if (!HIDWORD(v311))
    goto LABEL_179;
  if (HIDWORD(v311) >= 0x5555556)
  {
    __break(0xC471u);
    JUMPOUT(0x19542D138);
  }
  v93 = 48 * HIDWORD(v311);
  v94 = (WebCore::TextTrack *)WTF::fastMalloc((WTF *)(48 * HIDWORD(v311)));
  v96 = v94;
  if (!HIDWORD(v311))
  {
LABEL_157:
    WTF::fastFree(v96, v95);
    v14 = v285;
    goto LABEL_171;
  }
  v283 = v77;
  v97 = 0;
  v98 = 0;
  v280 = (v93 & 0xFFFFFFF0) / 0x30;
  do
  {
    v99 = v310;
    if (!v90)
    {
LABEL_134:
      v102 = (_DWORD *)*((_QWORD *)v99 + v98);
      v103 = v102[56] == 2;
      goto LABEL_141;
    }
    v100 = (WebCore::TextTrack *)WebCore::TextTrack::captionMenuOffItem(v94);
    if (*((WebCore::TextTrack **)v99 + v98) != v100
      || (*(unsigned int (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v81 + 16))(v81) != 1
      && (v100 = (WebCore::TextTrack *)(*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v81 + 16))(v81),
          (_DWORD)v100 != 3))
    {
      if (!v287)
        goto LABEL_134;
      v101 = WebCore::TextTrack::captionMenuAutomaticItem(v100);
      v102 = (_DWORD *)*((_QWORD *)v99 + v98);
      if (v102 != (_DWORD *)v101)
      {
        v103 = 0;
        goto LABEL_138;
      }
      v103 = 1;
      v102 = (_DWORD *)v101;
LABEL_141:
      ++v102[4];
      goto LABEL_142;
    }
    v102 = (_DWORD *)*((_QWORD *)v99 + v98);
    v103 = 1;
LABEL_138:
    if (v102)
      goto LABEL_141;
LABEL_142:
    v345 = (uint64_t)v102;
    LODWORD(v346) = 2;
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v81 + 176))(&v318, v81);
    WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_3::operator()((uint64_t)&v319, &v316, (uint64_t)&v345, (_DWORD **)&v318, v103, MEMORY[0x1E0CBF6F0]);
    v105 = v318;
    v318 = 0;
    if (v105)
    {
      if (*(_DWORD *)v105 == 2)
        WTF::StringImpl::destroy(v105, v104);
      else
        *(_DWORD *)v105 -= 2;
    }
    if ((_DWORD)v346 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E335C6A8[v346])(&v318, &v345);
    v106 = (char *)v96 + v97;
    *(_QWORD *)v106 = v319;
    v107 = v320;
    v320 = 0;
    *((_QWORD *)v106 + 1) = v107;
    v108 = v321;
    v321 = 0;
    *((_QWORD *)v106 + 2) = v108;
    v106[24] = v322;
    *((_QWORD *)v106 + 5) = 0;
    v109 = v323;
    v323 = 0;
    *((_QWORD *)v106 + 4) = v109;
    LODWORD(v109) = v324;
    LODWORD(v324) = 0;
    *((_DWORD *)v106 + 10) = (_DWORD)v109;
    LODWORD(v109) = HIDWORD(v324);
    HIDWORD(v324) = 0;
    *((_DWORD *)v106 + 11) = (_DWORD)v109;
    ++v98;
    WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v319, v104);
    v97 += 48;
  }
  while (v98 < HIDWORD(v311));
  v77 = v283;
  if (!(_DWORD)v98)
    goto LABEL_157;
  WebCore::localizedString(CFSTR("Subtitles (Media Controls Menu)"), (uint64_t)&v345);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v111 = v319;
  v112 = v345;
  v319 = 0;
  if (v345)
    *(_DWORD *)v345 += 2;
  v320 = (_DWORD *)v112;
  if (v111)
    *(_DWORD *)v111 += 2;
  v321 = v111;
  v322 = 0;
  v323 = v96;
  v324 = __PAIR64__(v98, v280);
  v113 = HIDWORD(v315);
  if (HIDWORD(v315) == (_DWORD)v315)
  {
    v114 = WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v314, HIDWORD(v315) + 1, (unint64_t)&v319);
    v113 = HIDWORD(v315);
    v115 = (char *)v314 + 48 * HIDWORD(v315);
    *(_QWORD *)v115 = *(_QWORD *)v114;
    v116 = *(_QWORD *)(v114 + 8);
    *(_QWORD *)(v114 + 8) = 0;
    *((_QWORD *)v115 + 1) = v116;
    v117 = *(_QWORD *)(v114 + 16);
    *(_QWORD *)(v114 + 16) = 0;
    *((_QWORD *)v115 + 2) = v117;
    v115[24] = *(_BYTE *)(v114 + 24);
    *((_QWORD *)v115 + 4) = 0;
    *((_QWORD *)v115 + 5) = 0;
    v118 = *(_QWORD *)(v114 + 32);
    *(_QWORD *)(v114 + 32) = 0;
    *((_QWORD *)v115 + 4) = v118;
    LODWORD(v118) = *(_DWORD *)(v114 + 40);
    *(_DWORD *)(v114 + 40) = 0;
    *((_DWORD *)v115 + 10) = v118;
    LODWORD(v118) = *(_DWORD *)(v114 + 44);
    *(_DWORD *)(v114 + 44) = 0;
    *((_DWORD *)v115 + 11) = v118;
  }
  else
  {
    v119 = (char *)v314 + 48 * HIDWORD(v315);
    *(_QWORD *)v119 = 0;
    v320 = 0;
    *((_QWORD *)v119 + 1) = v112;
    v120 = v321;
    v321 = 0;
    *((_QWORD *)v119 + 2) = v120;
    v119[24] = 0;
    *((_QWORD *)v119 + 4) = 0;
    *((_QWORD *)v119 + 5) = 0;
    v121 = v323;
    v323 = 0;
    *((_QWORD *)v119 + 4) = v121;
    LODWORD(v121) = v324;
    LODWORD(v324) = 0;
    *((_DWORD *)v119 + 10) = (_DWORD)v121;
    LODWORD(v121) = HIDWORD(v324);
    HIDWORD(v324) = 0;
    *((_DWORD *)v119 + 11) = (_DWORD)v121;
  }
  v14 = v285;
  HIDWORD(v315) = v113 + 1;
  WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v319, v110);
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, v91);
    else
      *(_DWORD *)v111 -= 2;
  }
  v122 = (WTF::StringImpl *)v345;
  v345 = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
      WTF::StringImpl::destroy(v122, v91);
    else
      *(_DWORD *)v122 -= 2;
  }
LABEL_171:
  if (HIDWORD(v311))
  {
    v123 = v310;
    v124 = 8 * HIDWORD(v311);
    do
    {
      v125 = *(_DWORD **)v123;
      *(_QWORD *)v123 = 0;
      if (v125)
      {
        if (v125[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v125 + 16))(v125);
        else
          --v125[4];
      }
      v123 = (WTF::StringImpl *)((char *)v123 + 8);
      v124 -= 8;
    }
    while (v124);
  }
LABEL_179:
  v126 = v310;
  if (v310)
  {
    v310 = 0;
    LODWORD(v311) = 0;
    WTF::fastFree(v126, v91);
  }
  v78 = *((_DWORD *)v77 + 6);
  v11 = v289;
LABEL_182:
  v127 = v78 - 1;
  if (v127)
    *((_DWORD *)v77 + 6) = v127;
  else
    (*(void (**)(WebCore::MediaControlsContextMenuItem *))(*(_QWORD *)v77 + 72))(v77);
LABEL_184:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v345 = (uint64_t)v319;
  v129 = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v14, (const WTF::String *)&v345);
  if (v129 <= 0x100)
    v130 = 0;
  else
    v130 = v129;
  v131 = (WTF::StringImpl *)v345;
  v345 = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
      WTF::StringImpl::destroy(v131, v128);
    else
      *(_DWORD *)v131 -= 2;
  }
  if (!v130)
    goto LABEL_265;
  v132 = *(WebCore::MediaControlsContextMenuItem **)(v4 + 1352);
  if (!v132)
    goto LABEL_265;
  v133 = *((_DWORD *)v132 + 6) + 1;
  *((_DWORD *)v132 + 6) = v133;
  if (!(*((_DWORD *)v132 + 31) + *((_DWORD *)v132 + 27) + *((_DWORD *)v132 + 17)))
    goto LABEL_263;
  v134 = *((_QWORD *)v11 + 66);
  v284 = v132;
  if (!v134 || (v135 = *(WebCore::PageGroup **)(v134 + 8)) == 0)
  {
    WebCore::Page::initGroup(v11);
    v277 = *((_QWORD *)v11 + 66);
    if (v277)
      v135 = *(WebCore::PageGroup **)(v277 + 8);
    else
      v135 = 0;
    v11 = v289;
  }
  v136 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v135 + 5);
  if (!v136)
  {
    v136 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
    WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v136, v135);
    v137 = (_DWORD *)*((_QWORD *)v135 + 5);
    *((_QWORD *)v135 + 5) = v136;
    if (v137)
    {
      if (v137[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v137 + 8))(v137);
        v136 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v135 + 5);
      }
      else
      {
        --v137[2];
      }
    }
  }
  LODWORD(v310) = 3;
  v308 = 0;
  WTF::HashTable<WebCore::TextTrack::Kind,WebCore::TextTrack::Kind,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>>::add(&v308, (int *)&v310, (uint64_t)&v319);
  (*(void (**)(uint64_t *__return_ptr, WebCore::CaptionUserPreferencesMediaAF *, WebCore::MediaControlsContextMenuItem *, uint64_t *))(*(_QWORD *)v136 + 184))(&v345, v136, v284, &v308);
  if (v308)
    WTF::fastFree((WTF *)(v308 - 16), v138);
  v139 = (WTF *)v345;
  if (!HIDWORD(v346))
    goto LABEL_260;
  v281 = v136;
  v288 = (WebCore::MediaControlsContextMenuItem *)(v345 + 8 * HIDWORD(v346));
  while (2)
  {
    v310 = 0;
    v311 = 0;
    v140 = *(_QWORD *)v139;
    if (!*(_DWORD *)(*(_QWORD *)v139 + 224))
    {
      v160 = 0;
      goto LABEL_229;
    }
    v141 = *(_QWORD *)(v140 + 168);
    if (!v141)
    {
      v141 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)v141 = 1;
      *(_QWORD *)(v141 + 16) = 0;
      *(_QWORD *)(v141 + 24) = 0;
      *(_QWORD *)(v141 + 8) = 0;
      v142 = *(WebCore::TextTrackCueList **)(v140 + 168);
      *(_QWORD *)(v140 + 168) = v141;
      if (v142)
      {
        if (*(_DWORD *)v142 != 1)
        {
          --*(_DWORD *)v142;
          break;
        }
        WebCore::TextTrackCueList::~TextTrackCueList(v142, v138);
        WTF::fastFree(v163, v164);
        v141 = *(_QWORD *)(v140 + 168);
        if (!v141)
        {
LABEL_228:
          v160 = v310;
LABEL_229:
          if (v160)
            WTF::fastFree(v160, v138);
          v139 = (WTF *)((char *)v139 + 8);
          if (v139 == v288)
            goto LABEL_252;
          continue;
        }
      }
    }
    break;
  }
  v143 = *(_DWORD *)v141 + 1;
  *(_DWORD *)v141 = v143;
  v144 = *(unsigned int *)(v141 + 20);
  if ((_DWORD)v144)
  {
    v145 = 0;
    v146 = 0;
    for (i = 0; i < v144; ++i)
    {
      if (i < v144)
      {
        v148 = *(_QWORD *)(*(_QWORD *)(v141 + 8) + 8 * i);
        if (v148)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v148 + 128))(v148) == 3
            || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v148 + 128))(v148) == 2)
          {
            *(_DWORD *)(v148 + 24) += 2;
            v306 = v148;
            v307 = 3;
            WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_3::operator()((uint64_t)&v319, &v316, (uint64_t)&v306, (_DWORD **)(v148 + 144), 0, MEMORY[0x1E0CBF6F0]);
            if (v146 == (_DWORD)v311)
            {
              v150 = WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v310, v146 + 1, (unint64_t)&v319);
              v151 = HIDWORD(v311);
              v145 = v310;
              v152 = (char *)v310 + 48 * HIDWORD(v311);
              *(_QWORD *)v152 = *(_QWORD *)v150;
              v153 = *(_QWORD *)(v150 + 8);
              *(_QWORD *)(v150 + 8) = 0;
              *((_QWORD *)v152 + 1) = v153;
              v154 = *(_QWORD *)(v150 + 16);
              *(_QWORD *)(v150 + 16) = 0;
              *((_QWORD *)v152 + 2) = v154;
              v152[24] = *(_BYTE *)(v150 + 24);
              *((_QWORD *)v152 + 4) = 0;
              *((_QWORD *)v152 + 5) = 0;
              v155 = *(_QWORD *)(v150 + 32);
              *(_QWORD *)(v150 + 32) = 0;
              *((_QWORD *)v152 + 4) = v155;
              LODWORD(v155) = *(_DWORD *)(v150 + 40);
              *(_DWORD *)(v150 + 40) = 0;
              *((_DWORD *)v152 + 10) = v155;
              LODWORD(v155) = *(_DWORD *)(v150 + 44);
              *(_DWORD *)(v150 + 44) = 0;
              *((_DWORD *)v152 + 11) = v155;
            }
            else
            {
              v156 = (char *)v145 + 48 * v146;
              *(_QWORD *)v156 = v319;
              v157 = v320;
              v320 = 0;
              *((_QWORD *)v156 + 1) = v157;
              v158 = v321;
              v321 = 0;
              *((_QWORD *)v156 + 2) = v158;
              v156[24] = v322;
              *((_QWORD *)v156 + 4) = 0;
              *((_QWORD *)v156 + 5) = 0;
              v159 = v323;
              v323 = 0;
              *((_QWORD *)v156 + 4) = v159;
              LODWORD(v159) = v324;
              LODWORD(v324) = 0;
              *((_DWORD *)v156 + 10) = (_DWORD)v159;
              LODWORD(v159) = HIDWORD(v324);
              HIDWORD(v324) = 0;
              *((_DWORD *)v156 + 11) = (_DWORD)v159;
              v151 = HIDWORD(v311);
            }
            v146 = v151 + 1;
            HIDWORD(v311) = v151 + 1;
            WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v319, v149);
            if (v307 != -1)
              ((void (*)(WTF::StringImpl **, uint64_t *))off_1E335C6A8[v307])(&v318, &v306);
            v307 = -1;
            if (*(_DWORD *)(v148 + 24) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v148 + 72))(v148);
            else
              --*(_DWORD *)(v148 + 24);
          }
        }
      }
      v144 = *(unsigned int *)(v141 + 20);
    }
    v143 = *(_DWORD *)v141;
    v11 = v289;
  }
  else
  {
    v146 = 0;
  }
  if (v143 != 1)
  {
    *(_DWORD *)v141 = v143 - 1;
    if (v146)
      goto LABEL_237;
    goto LABEL_228;
  }
  WebCore::TextTrackCueList::~TextTrackCueList((WebCore::TextTrackCueList *)v141, v138);
  WTF::fastFree(v161, v162);
  if (!v146)
    goto LABEL_228;
LABEL_237:
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::CaptionUserPreferencesMediaAF *, _QWORD))(*(_QWORD *)v281 + 176))(&v318, v281, *(_QWORD *)v139);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v166 = v318;
  v167 = v319;
  v319 = 0;
  if (v318)
    *(_DWORD *)v318 += 2;
  v320 = v166;
  if (v167)
    *(_DWORD *)v167 += 2;
  v321 = v167;
  v322 = 0;
  v323 = v310;
  v168 = v311;
  v310 = 0;
  v311 = 0;
  v324 = __PAIR64__(v146, v168);
  v169 = HIDWORD(v315);
  if (HIDWORD(v315) == (_DWORD)v315)
  {
    v170 = WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v314, HIDWORD(v315) + 1, (unint64_t)&v319);
    v169 = HIDWORD(v315);
    v171 = (char *)v314 + 48 * HIDWORD(v315);
    *(_QWORD *)v171 = *(_QWORD *)v170;
    v172 = *(_QWORD *)(v170 + 8);
    *(_QWORD *)(v170 + 8) = 0;
    *((_QWORD *)v171 + 1) = v172;
    v173 = *(_QWORD *)(v170 + 16);
    *(_QWORD *)(v170 + 16) = 0;
    *((_QWORD *)v171 + 2) = v173;
    v171[24] = *(_BYTE *)(v170 + 24);
    *((_QWORD *)v171 + 4) = 0;
    *((_QWORD *)v171 + 5) = 0;
    v174 = *(_QWORD *)(v170 + 32);
    *(_QWORD *)(v170 + 32) = 0;
    *((_QWORD *)v171 + 4) = v174;
    LODWORD(v174) = *(_DWORD *)(v170 + 40);
    *(_DWORD *)(v170 + 40) = 0;
    *((_DWORD *)v171 + 10) = v174;
    LODWORD(v174) = *(_DWORD *)(v170 + 44);
    *(_DWORD *)(v170 + 44) = 0;
    *((_DWORD *)v171 + 11) = v174;
  }
  else
  {
    v175 = (char *)v314 + 48 * HIDWORD(v315);
    *(_QWORD *)v175 = 0;
    v320 = 0;
    *((_QWORD *)v175 + 1) = v166;
    v176 = v321;
    v321 = 0;
    *((_QWORD *)v175 + 2) = v176;
    v175[24] = 0;
    *((_QWORD *)v175 + 4) = 0;
    *((_QWORD *)v175 + 5) = 0;
    v177 = v323;
    v323 = 0;
    *((_QWORD *)v175 + 4) = v177;
    LODWORD(v177) = v324;
    LODWORD(v324) = 0;
    *((_DWORD *)v175 + 10) = (_DWORD)v177;
    LODWORD(v177) = HIDWORD(v324);
    HIDWORD(v324) = 0;
    *((_DWORD *)v175 + 11) = (_DWORD)v177;
  }
  HIDWORD(v315) = v169 + 1;
  WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v319, v165);
  if (v167)
  {
    if (*(_DWORD *)v167 == 2)
      WTF::StringImpl::destroy(v167, (WTF::StringImpl *)v138);
    else
      *(_DWORD *)v167 -= 2;
  }
  v178 = v318;
  v318 = 0;
  if (v178)
  {
    if (*(_DWORD *)v178 == 2)
      WTF::StringImpl::destroy(v178, (WTF::StringImpl *)v138);
    else
      *(_DWORD *)v178 -= 2;
  }
LABEL_252:
  v139 = (WTF *)v345;
  if (HIDWORD(v346))
  {
    v179 = 8 * HIDWORD(v346);
    do
    {
      v180 = *(_DWORD **)v139;
      *(_QWORD *)v139 = 0;
      if (v180)
      {
        if (v180[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v180 + 16))(v180);
        else
          --v180[4];
      }
      v139 = (WTF *)((char *)v139 + 8);
      v179 -= 8;
    }
    while (v179);
    v139 = (WTF *)v345;
  }
LABEL_260:
  if (v139)
  {
    v345 = 0;
    LODWORD(v346) = 0;
    WTF::fastFree(v139, v138);
  }
  v132 = v284;
  v14 = v285;
  v133 = *((_DWORD *)v284 + 6);
LABEL_263:
  v181 = v133 - 1;
  if (v181)
    *((_DWORD *)v132 + 6) = v181;
  else
    (*(void (**)(WebCore::MediaControlsContextMenuItem *))(*(_QWORD *)v132 + 72))(v132);
LABEL_265:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v345 = (uint64_t)v319;
  v183 = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v14, (const WTF::String *)&v345);
  if (v183 <= 0x100)
    v184 = 0;
  else
    v184 = v183;
  v185 = (WTF::StringImpl *)v345;
  v345 = 0;
  if (v185)
  {
    if (*(_DWORD *)v185 == 2)
      WTF::StringImpl::destroy(v185, v182);
    else
      *(_DWORD *)v185 -= 2;
  }
  if (v184)
  {
    v186 = (*(double (**)(uint64_t))(*(_QWORD *)v4 + 1408))(v4);
    WebCore::localizedString(CFSTR("Playback Speed (Media Controls Menu)"), (uint64_t)&v310);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v187 = v319;
    v304 = 0;
    v305 = 4;
    WebCore::localizedString(CFSTR("0.5× (Media Controls Menu Playback Speed)"), (uint64_t)&v318);
    v188 = (_DWORD **)MEMORY[0x1E0CBF6F0];
    WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_3::operator()((uint64_t)&v319, &v316, (uint64_t)&v304, (_DWORD **)&v318, v186 == 0.5, MEMORY[0x1E0CBF6F0]);
    v302 = 1;
    v303 = 4;
    WebCore::localizedString(CFSTR("1× (Media Controls Menu Playback Speed)"), (uint64_t)&v301);
    WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_3::operator()((uint64_t)&v325, &v316, (uint64_t)&v302, (_DWORD **)&v301, v186 == 1.0, v188);
    v299 = 2;
    v300 = 4;
    WebCore::localizedString(CFSTR("1.25× (Media Controls Menu Playback Speed)"), (uint64_t)&v298);
    WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_3::operator()((uint64_t)&v330, &v316, (uint64_t)&v299, (_DWORD **)&v298, v186 == 1.25, v188);
    v296 = 3;
    v297 = 4;
    WebCore::localizedString(CFSTR("1.5× (Media Controls Menu Playback Speed)"), (uint64_t)&v295);
    WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_3::operator()((uint64_t)&v335, &v316, (uint64_t)&v296, (_DWORD **)&v295, v186 == 1.5, v188);
    v293 = 4;
    v294 = 4;
    WebCore::localizedString(CFSTR("2× (Media Controls Menu Playback Speed)"), (uint64_t)&v292);
    WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_3::operator()((uint64_t)&v340, &v316, (uint64_t)&v293, (_DWORD **)&v292, v186 == 2.0, v188);
    v189 = WTF::fastMalloc((WTF *)0xF0);
    v190 = v189;
    *(_QWORD *)v189 = v319;
    v191 = v320;
    if (v320)
      *v320 += 2;
    *(_QWORD *)(v189 + 8) = v191;
    v192 = v321;
    if (v321)
      *(_DWORD *)v321 += 2;
    *(_QWORD *)(v189 + 16) = v192;
    *(_BYTE *)(v189 + 24) = v322;
    WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v189 + 32, (uint64_t)&v323);
    *(_QWORD *)(v190 + 48) = v325;
    v193 = v326;
    v11 = v289;
    if (v326)
      *v326 += 2;
    *(_QWORD *)(v190 + 56) = v193;
    v194 = v327;
    if (v327)
      *v327 += 2;
    *(_QWORD *)(v190 + 64) = v194;
    *(_BYTE *)(v190 + 72) = v328;
    WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v190 + 80, (uint64_t)&v329);
    *(_QWORD *)(v190 + 96) = v330;
    v195 = v331;
    if (v331)
      *v331 += 2;
    *(_QWORD *)(v190 + 104) = v195;
    v196 = v332;
    if (v332)
      *v332 += 2;
    *(_QWORD *)(v190 + 112) = v196;
    *(_BYTE *)(v190 + 120) = v333;
    WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v190 + 128, (uint64_t)&v334);
    *(_QWORD *)(v190 + 144) = v335;
    v197 = v336;
    if (v336)
      *v336 += 2;
    *(_QWORD *)(v190 + 152) = v197;
    v198 = v337;
    if (v337)
      *v337 += 2;
    *(_QWORD *)(v190 + 160) = v198;
    *(_BYTE *)(v190 + 168) = v338;
    WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v190 + 176, (uint64_t)&v339);
    *(_QWORD *)(v190 + 192) = v340;
    v199 = v341;
    if (v341)
      *v341 += 2;
    *(_QWORD *)(v190 + 200) = v199;
    v200 = v342;
    if (v342)
      *v342 += 2;
    *(_QWORD *)(v190 + 208) = v200;
    *(_BYTE *)(v190 + 216) = v343;
    WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v190 + 224, (uint64_t)&v344);
    v202 = v310;
    v345 = 0;
    if (v310)
      *(_DWORD *)v310 += 2;
    v346 = v202;
    if (v187)
      *(_DWORD *)v187 += 2;
    v347 = v187;
    v348 = 0;
    v349 = v190;
    v350 = 0x500000005;
    v203 = HIDWORD(v315);
    if (HIDWORD(v315) == (_DWORD)v315)
    {
      v204 = WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v314, HIDWORD(v315) + 1, (unint64_t)&v345);
      v203 = HIDWORD(v315);
      v205 = (char *)v314 + 48 * HIDWORD(v315);
      *(_QWORD *)v205 = *(_QWORD *)v204;
      v206 = *(_QWORD *)(v204 + 8);
      *(_QWORD *)(v204 + 8) = 0;
      *((_QWORD *)v205 + 1) = v206;
      v207 = *(_QWORD *)(v204 + 16);
      *(_QWORD *)(v204 + 16) = 0;
      *((_QWORD *)v205 + 2) = v207;
      v205[24] = *(_BYTE *)(v204 + 24);
      *((_QWORD *)v205 + 4) = 0;
      *((_QWORD *)v205 + 5) = 0;
      v208 = *(_QWORD *)(v204 + 32);
      *(_QWORD *)(v204 + 32) = 0;
      *((_QWORD *)v205 + 4) = v208;
      LODWORD(v208) = *(_DWORD *)(v204 + 40);
      *(_DWORD *)(v204 + 40) = 0;
      *((_DWORD *)v205 + 10) = v208;
      LODWORD(v208) = *(_DWORD *)(v204 + 44);
      *(_DWORD *)(v204 + 44) = 0;
      *((_DWORD *)v205 + 11) = v208;
    }
    else
    {
      v209 = (char *)v314 + 48 * HIDWORD(v315);
      *(_QWORD *)v209 = 0;
      v346 = 0;
      *((_QWORD *)v209 + 1) = v202;
      v210 = v347;
      v347 = 0;
      *((_QWORD *)v209 + 2) = v210;
      v209[24] = 0;
      *((_QWORD *)v209 + 4) = 0;
      *((_QWORD *)v209 + 5) = 0;
      v211 = v349;
      v349 = 0;
      *((_QWORD *)v209 + 4) = v211;
      LODWORD(v211) = v350;
      LODWORD(v350) = 0;
      *((_DWORD *)v209 + 10) = v211;
      LODWORD(v211) = HIDWORD(v350);
      HIDWORD(v350) = 0;
      *((_DWORD *)v209 + 11) = v211;
    }
    v14 = v285;
    HIDWORD(v315) = v203 + 1;
    WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v345, v201);
    WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v340, v212);
    WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v335, v213);
    WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v330, v214);
    WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v325, v215);
    WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v319, v216);
    v217 = v292;
    v292 = 0;
    if (v217)
    {
      if (*(_DWORD *)v217 == 2)
        WTF::StringImpl::destroy(v217, v182);
      else
        *(_DWORD *)v217 -= 2;
    }
    if (v294 != -1)
      ((void (*)(WTF::StringImpl **, int *))off_1E335C6A8[v294])(&v292, &v293);
    v294 = -1;
    v218 = v295;
    v295 = 0;
    if (v218)
    {
      if (*(_DWORD *)v218 == 2)
        WTF::StringImpl::destroy(v218, v182);
      else
        *(_DWORD *)v218 -= 2;
    }
    if (v297 != -1)
      ((void (*)(WTF::StringImpl **, int *))off_1E335C6A8[v297])(&v295, &v296);
    v297 = -1;
    v219 = v298;
    v298 = 0;
    if (v219)
    {
      if (*(_DWORD *)v219 == 2)
        WTF::StringImpl::destroy(v219, v182);
      else
        *(_DWORD *)v219 -= 2;
    }
    if (v300 != -1)
      ((void (*)(WTF::StringImpl **, int *))off_1E335C6A8[v300])(&v298, &v299);
    v300 = -1;
    v220 = v301;
    v301 = 0;
    if (v220)
    {
      if (*(_DWORD *)v220 == 2)
        WTF::StringImpl::destroy(v220, v182);
      else
        *(_DWORD *)v220 -= 2;
    }
    if (v303 != -1)
      ((void (*)(WTF::StringImpl **, int *))off_1E335C6A8[v303])(&v301, &v302);
    v303 = -1;
    v221 = v318;
    v318 = 0;
    if (v221)
    {
      if (*(_DWORD *)v221 == 2)
        WTF::StringImpl::destroy(v221, v182);
      else
        *(_DWORD *)v221 -= 2;
    }
    if (v305 != -1)
      ((void (*)(WTF::StringImpl **, int *))off_1E335C6A8[v305])(&v318, &v304);
    v305 = -1;
    if (v187)
    {
      if (*(_DWORD *)v187 == 2)
        WTF::StringImpl::destroy(v187, v182);
      else
        *(_DWORD *)v187 -= 2;
    }
    v222 = v310;
    v310 = 0;
    if (v222)
    {
      if (*(_DWORD *)v222 == 2)
        WTF::StringImpl::destroy(v222, v182);
      else
        *(_DWORD *)v222 -= 2;
    }
  }
  if (!(~*(_DWORD *)(*((_QWORD *)v11 + 14) + 696) & 0x20000000 | ~*(_QWORD *)(*((_QWORD *)v11 + 14) + 672) & 0x400000000000))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v345 = (uint64_t)v319;
    v223 = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v14, (const WTF::String *)&v345);
    if (v223 <= 0x100)
      v224 = 0;
    else
      v224 = v223;
    v225 = (WTF::StringImpl *)v345;
    v345 = 0;
    if (v225)
    {
      if (*(_DWORD *)v225 == 2)
        WTF::StringImpl::destroy(v225, v182);
      else
        *(_DWORD *)v225 -= 2;
    }
    if (v224)
    {
      v319 = 0;
      v226 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
      if (*MEMORY[0x1E0CBF6F0])
        *v226 += 4;
      v320 = v226;
      v321 = (WTF::StringImpl *)v226;
      v322 = 0;
      v323 = 0;
      v324 = 0;
      v227 = HIDWORD(v315);
      v228 = v315;
      if (HIDWORD(v315) == (_DWORD)v315)
      {
        v229 = WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v314, HIDWORD(v315) + 1, (unint64_t)&v319);
        v227 = HIDWORD(v315);
        v230 = v314;
        v231 = (char *)v314 + 48 * HIDWORD(v315);
        *(_QWORD *)v231 = *(_QWORD *)v229;
        v232 = *(_QWORD *)(v229 + 8);
        *(_QWORD *)(v229 + 8) = 0;
        *((_QWORD *)v231 + 1) = v232;
        v233 = *(_QWORD *)(v229 + 16);
        *(_QWORD *)(v229 + 16) = 0;
        *((_QWORD *)v231 + 2) = v233;
        v231[24] = *(_BYTE *)(v229 + 24);
        *((_QWORD *)v231 + 4) = 0;
        *((_QWORD *)v231 + 5) = 0;
        v234 = *(_QWORD *)(v229 + 32);
        *(_QWORD *)(v229 + 32) = 0;
        *((_QWORD *)v231 + 4) = v234;
        LODWORD(v234) = *(_DWORD *)(v229 + 40);
        *(_DWORD *)(v229 + 40) = 0;
        *((_DWORD *)v231 + 10) = v234;
        LODWORD(v234) = *(_DWORD *)(v229 + 44);
        *(_DWORD *)(v229 + 44) = 0;
        *((_DWORD *)v231 + 11) = v234;
        v228 = v315;
      }
      else
      {
        v230 = v314;
        v235 = (char *)v314 + 48 * HIDWORD(v315);
        *(_QWORD *)v235 = 0;
        v320 = 0;
        *((_QWORD *)v235 + 1) = v226;
        v236 = v321;
        v321 = 0;
        *((_QWORD *)v235 + 2) = v236;
        v235[24] = 0;
        *((_QWORD *)v235 + 4) = 0;
        *((_QWORD *)v235 + 5) = 0;
        v237 = v323;
        v323 = 0;
        *((_QWORD *)v235 + 4) = v237;
        LODWORD(v237) = v324;
        LODWORD(v324) = 0;
        *((_DWORD *)v235 + 10) = (_DWORD)v237;
        LODWORD(v237) = HIDWORD(v324);
        HIDWORD(v324) = 0;
        *((_DWORD *)v235 + 11) = (_DWORD)v237;
      }
      v238 = (v227 + 1);
      HIDWORD(v315) = v227 + 1;
      WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v319, v182);
      v290 = 0;
      v291 = 5;
      WebCore::contextMenuItemTagShowMediaStats((uint64_t)&v345);
      v239 = *(_BYTE *)(v4 + 1731);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v240 = v319;
      v310 = v319;
      WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_3::operator()((uint64_t)&v319, &v316, (uint64_t)&v290, (_DWORD **)&v345, v239, (_DWORD **)&v310);
      if ((_DWORD)v238 == v228)
      {
        v242 = WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v314, v238 + 1, (unint64_t)&v319);
        LODWORD(v238) = HIDWORD(v315);
        v243 = (char *)v314 + 48 * HIDWORD(v315);
        *(_QWORD *)v243 = *(_QWORD *)v242;
        v244 = *(_QWORD *)(v242 + 8);
        *(_QWORD *)(v242 + 8) = 0;
        *((_QWORD *)v243 + 1) = v244;
        v245 = *(_QWORD *)(v242 + 16);
        *(_QWORD *)(v242 + 16) = 0;
        *((_QWORD *)v243 + 2) = v245;
        v243[24] = *(_BYTE *)(v242 + 24);
        *((_QWORD *)v243 + 4) = 0;
        *((_QWORD *)v243 + 5) = 0;
        v246 = *(_QWORD *)(v242 + 32);
        *(_QWORD *)(v242 + 32) = 0;
        *((_QWORD *)v243 + 4) = v246;
        LODWORD(v246) = *(_DWORD *)(v242 + 40);
        *(_DWORD *)(v242 + 40) = 0;
        *((_DWORD *)v243 + 10) = v246;
        v247 = *(_DWORD *)(v242 + 44);
        *(_DWORD *)(v242 + 44) = 0;
      }
      else
      {
        v243 = (char *)v230 + 48 * v238;
        *(_QWORD *)v243 = v319;
        v248 = v320;
        v320 = 0;
        *((_QWORD *)v243 + 1) = v248;
        v249 = v321;
        v321 = 0;
        *((_QWORD *)v243 + 2) = v249;
        v243[24] = v322;
        *((_QWORD *)v243 + 4) = 0;
        *((_QWORD *)v243 + 5) = 0;
        v250 = v323;
        v323 = 0;
        *((_QWORD *)v243 + 4) = v250;
        LODWORD(v250) = v324;
        LODWORD(v324) = 0;
        *((_DWORD *)v243 + 10) = (_DWORD)v250;
        v247 = HIDWORD(v324);
        HIDWORD(v324) = 0;
      }
      *((_DWORD *)v243 + 11) = v247;
      v11 = v289;
      HIDWORD(v315) = v238 + 1;
      WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)&v319, v241);
      if (v240)
      {
        if (*(_DWORD *)v240 == 2)
          WTF::StringImpl::destroy(v240, v182);
        else
          *(_DWORD *)v240 -= 2;
      }
      v251 = (WTF::StringImpl *)v345;
      v345 = 0;
      if (v251)
      {
        if (*(_DWORD *)v251 == 2)
          WTF::StringImpl::destroy(v251, v182);
        else
          *(_DWORD *)v251 -= 2;
      }
      if (v291 != -1)
        ((void (*)(uint64_t *, int *))off_1E335C6A8[v291])(&v345, &v290);
      v291 = -1;
    }
  }
  v4 = HIDWORD(v315) != 0;
  if (HIDWORD(v315))
  {
    v252 = *a4;
    *a4 = 0;
    v253 = (_DWORD *)a1[5];
    a1[5] = v252;
    if (v253)
    {
      if (v253[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v253 + 16))(v253);
      else
        --v253[4];
    }
    v254 = a1[1];
    if (v254)
      goto LABEL_426;
    v254 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v254 = 1;
    *(_QWORD *)(v254 + 8) = a1;
    v256 = (unsigned int *)a1[1];
    a1[1] = v254;
    if (!v256)
      goto LABEL_426;
    do
    {
      v257 = __ldaxr(v256);
      v258 = v257 - 1;
    }
    while (__stlxr(v258, v256));
    if (!v258)
    {
      atomic_store(1u, v256);
      WTF::fastFree((WTF *)v256, v255);
    }
    v254 = a1[1];
    if (v254)
    {
LABEL_426:
      do
        v259 = __ldaxr((unsigned int *)v254);
      while (__stlxr(v259 + 1, (unsigned int *)v254));
    }
    v260 = v316;
    v316 = 0;
    v261 = WebCore::Element::boundsInRootViewSpace(a2);
    v262 = *(_QWORD *)(*((_QWORD *)v11 + 6) + 16);
    *(float *)&v319 = (float)(int)v261;
    *((float *)&v319 + 1) = (float)SHIDWORD(v261);
    *(float *)&v320 = (float)v263;
    *((float *)&v320 + 1) = (float)v264;
    v265 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v265 = &off_1E335C790;
    *(_QWORD *)(v265 + 8) = v254;
    *(_QWORD *)(v265 + 16) = v260;
    v345 = v265;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF **, uint64_t *))(*(_QWORD *)v262 + 1704))(v262, &v319, &v314, &v345);
    v266 = v345;
    v345 = 0;
    if (v266)
      (*(void (**)(uint64_t))(*(_QWORD *)v266 + 8))(v266);
    if (HIDWORD(v315))
    {
      v267 = v314;
      v268 = 48 * HIDWORD(v315);
      do
      {
        WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem(v267, v182);
        v267 = (WTF *)(v269 + 48);
        v268 -= 48;
      }
      while (v268);
    }
  }
  v270 = v314;
  if (v314)
  {
    v314 = 0;
    LODWORD(v315) = 0;
    WTF::fastFree(v270, v182);
  }
  v271 = v316;
  if (v316)
  {
    v272 = *(unsigned int *)(v316 - 4);
    if ((_DWORD)v272)
    {
      v273 = v316 + 8;
      do
      {
        if (*(_QWORD *)(v273 - 8) != -1)
        {
          v274 = *(unsigned int *)(v273 + 8);
          if ((_DWORD)v274 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t))off_1E335C6A8[v274])(&v319, v273);
          *(_DWORD *)(v273 + 8) = -1;
        }
        v273 += 24;
        --v272;
      }
      while (v272);
    }
    WTF::fastFree((WTF *)(v271 - 16), v182);
  }
  if (*(_DWORD *)v14 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*(_DWORD *)v14;
  v14 = v317;
  v317 = 0;
  if (v14)
  {
LABEL_13:
    if (*(_DWORD *)v14 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v14;
  }
  return v4;
}

uint64_t WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_3::operator()(uint64_t result, uint64_t *a2, uint64_t a3, _DWORD **a4, char a5, _DWORD **a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  char v34;

  v11 = result;
  v12 = *a2;
  if (*a2)
  {
    v13 = (*(_DWORD *)(v12 - 12) + 1);
LABEL_4:
    v14 = *(_DWORD *)(v12 - 8);
    goto LABEL_5;
  }
  result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::variant<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag,WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&<WebCore::TextTrack,WebCore::VoidCallback<WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>,WTF::RawPtrTraits<WTF::Ref><WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>>,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&<WebCore::VTTCue,WebCore::VoidCallback<WTF::RawPtrTraits<WTF::Ref><WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>>,WTF::RawPtrTraits<WTF::Ref><WTF::RawPtrTraits<WTF::Ref><WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>>>,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag>>,WTF::KeyValuePairKeyExtractor<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed,WTF::KeyValuePairKeyExtractor<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag>,WTF::HashTraits<unsigned long long>,WTF::DefaultHash<unsigned long long><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashMap>::expand(a2);
  v12 = *a2;
  v13 = 1;
  if (*a2)
    goto LABEL_4;
  v14 = 0;
LABEL_5:
  v15 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = v12 + 24 * v18;
  v20 = *(_QWORD *)v19;
  if (!*(_QWORD *)v19)
  {
LABEL_13:
    *(_QWORD *)v19 = v13;
    v23 = *(unsigned int *)(v19 + 16);
    v24 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v23 == -1)
    {
      if ((_DWORD)v24 == -1)
        goto LABEL_18;
    }
    else if ((_DWORD)v24 == -1)
    {
      result = ((uint64_t (*)(char *, uint64_t))off_1E335C6A8[v23])(&v34, v19 + 8);
      *(_DWORD *)(v19 + 16) = -1;
      goto LABEL_18;
    }
    v33 = v19 + 8;
    result = ((uint64_t (*)(uint64_t *))off_1E335C708[v24])(&v33);
LABEL_18:
    v25 = *a2;
    if (*a2)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *a2;
    if (*a2)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        goto LABEL_27;
    }
    else if (3 * v30 > 4 * v29)
    {
      goto LABEL_27;
    }
    result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::variant<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag,WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&<WebCore::TextTrack,WebCore::VoidCallback<WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>,WTF::RawPtrTraits<WTF::Ref><WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>>,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&<WebCore::VTTCue,WebCore::VoidCallback<WTF::RawPtrTraits<WTF::Ref><WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>>,WTF::RawPtrTraits<WTF::Ref><WTF::RawPtrTraits<WTF::Ref><WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>>>,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag>>,WTF::KeyValuePairKeyExtractor<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed,WTF::KeyValuePairKeyExtractor<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag>,WTF::HashTraits<unsigned long long>,WTF::DefaultHash<unsigned long long><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashMap>::expand(a2);
    goto LABEL_27;
  }
  v21 = 0;
  v22 = 1;
  while (v20 != v13)
  {
    if (v20 == -1)
      v21 = v19;
    v18 = (v18 + v22) & v14;
    v19 = v12 + 24 * v18;
    v20 = *(_QWORD *)v19;
    ++v22;
    if (!*(_QWORD *)v19)
    {
      if (v21)
      {
        *(_QWORD *)v21 = 0;
        *(_DWORD *)(v21 + 8) = 0;
        *(_DWORD *)(v21 + 16) = 0;
        --*(_DWORD *)(*a2 - 16);
        v19 = v21;
      }
      goto LABEL_13;
    }
  }
LABEL_27:
  *(_QWORD *)v11 = v13;
  v31 = *a4;
  if (*a4)
    *v31 += 2;
  *(_QWORD *)(v11 + 8) = v31;
  v32 = *a6;
  if (*a6)
    *v32 += 2;
  *(_QWORD *)(v11 + 16) = v32;
  *(_BYTE *)(v11 + 24) = a5;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  return result;
}

void WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem(WebCore::MediaControlsContextMenuItem *this, void *a2)
{
  uint64_t v3;
  WebCore::MediaControlsContextMenuItem *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = *((unsigned int *)this + 11);
  v4 = (WebCore::MediaControlsContextMenuItem *)*((_QWORD *)this + 4);
  if ((_DWORD)v3)
  {
    v5 = 48 * v3;
    do
    {
      WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem(v4);
      v4 = (WebCore::MediaControlsContextMenuItem *)(v6 + 48);
      v5 -= 48;
    }
    while (v5);
    v4 = (WebCore::MediaControlsContextMenuItem *)*((_QWORD *)this + 4);
  }
  if (v4)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v4, a2);
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

unsigned int *WebCore::MediaControlsHost::restorePreviouslySelectedTextTrackIfNecessary(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t i;
  _DWORD *v8;
  void *v9;
  WebCore::Node *v10;
  unsigned int *v11;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24)
        || *(_DWORD *)(v2 + 1080) != 4)
      {
        if (*((_QWORD *)this + 4))
        {
          v10 = (WebCore::Node *)v2;
          v11 = this;
          *(_DWORD *)(v2 + 24) += 2;
          v3 = *(_QWORD *)(v2 + 1352);
          if (v3)
          {
            ++*(_DWORD *)(v3 + 24);
            v4 = *(_DWORD *)(v3 + 108);
            v5 = *(_DWORD *)(v3 + 124);
            v6 = *(_DWORD *)(v3 + 68);
            if (v5 + v4 + v6)
            {
              for (i = 0; i < v5 + v4 + v6; ++i)
              {
                if (i >= v5)
                {
                  if (v4 <= i - v5)
                  {
                    if (v6 > (_DWORD)i - v4 - v5)
                    {
                      v8 = *(_DWORD **)(*(_QWORD *)(v3 + 56) + 8 * ((_DWORD)i - v4 - v5));
                      if (v8)
                      {
                        if (v8[10] != 1)
                        {
LABEL_37:
                          __break(0xC471u);
                          JUMPOUT(0x19542D640);
                        }
                        goto LABEL_21;
                      }
                    }
                  }
                  else
                  {
                    v8 = *(_DWORD **)(*(_QWORD *)(v3 + 96) + 8 * (i - v5));
                    if (v8)
                    {
                      if (v8[10] != 1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19542D660);
                      }
LABEL_21:
                      if (*((_DWORD **)v11 + 4) != v8)
                      {
                        (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v8 + 120))(v8, 0);
                        v4 = *(_DWORD *)(v3 + 108);
                        v5 = *(_DWORD *)(v3 + 124);
                        v6 = *(_DWORD *)(v3 + 68);
                      }
                    }
                  }
                }
                else
                {
                  v8 = *(_DWORD **)(*(_QWORD *)(v3 + 112) + 8 * i);
                  if (v8)
                  {
                    if (v8[10] != 1)
                      goto LABEL_37;
                    goto LABEL_21;
                  }
                }
              }
            }
          }
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 4) + 120))(*((_QWORD *)v11 + 4), 2);
          this = (unsigned int *)*((_QWORD *)v11 + 4);
          *((_QWORD *)v11 + 4) = 0;
          if (this)
          {
            if (this[4] == 1)
            {
              this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
              if (!v3)
                goto LABEL_30;
              goto LABEL_28;
            }
            --this[4];
          }
          if (!v3)
            goto LABEL_30;
LABEL_28:
          if (*(_DWORD *)(v3 + 24) == 1)
            this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
          else
            --*(_DWORD *)(v3 + 24);
LABEL_30:
          if (*((_DWORD *)v10 + 6) == 2)
          {
            this = (unsigned int *)v10;
            if ((*((_WORD *)v10 + 15) & 0x400) == 0)
              return WebCore::Node::removedLastRef(v10, v9);
          }
          else
          {
            *((_DWORD *)v10 + 6) -= 2;
          }
        }
      }
    }
  }
  return this;
}

void *WebCore::MediaRecorder::setCustomPrivateRecorderCreator(void *result)
{
  WebCore::MediaRecorder::m_customCreator = result;
  return result;
}

WebCore::ContextDestructionObserver *WebCore::MediaRecorder::MediaRecorder(WebCore::ContextDestructionObserver *this, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  WTF **v13;
  void *v14;
  _QWORD *v15;
  unint64_t StatusReg;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  WebCore::MediaStreamTrackPrivate *v36;
  WTF *v37;
  void *v38;
  WTF *v39;
  WebCore::ContextDestructionObserver *v41;
  _BYTE v42[24];

  v6 = a2;
  v8 = *(_QWORD *)(a2 + 704);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v6 = v9;
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, (WebCore::ScriptExecutionContext *)(v6 + 192));
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*(_BYTE *)(v6 + 470))
  {
    __break(0xC471u);
    goto LABEL_51;
  }
  v41 = this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v6 + 320), (uint64_t *)&v41, (uint64_t)v42);
  *((_DWORD *)this + 6) = 1;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = &unk_1E335CD70;
  *(_QWORD *)this = &off_1E335CC50;
  *((_QWORD *)this + 4) = &unk_1E335CCF8;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = &unk_1E335CDB0;
  *((_QWORD *)this + 10) = 0;
  v10 = *a4;
  *a4 = 0;
  *((_QWORD *)this + 11) = v10;
  v11 = *(_OWORD *)(a4 + 1);
  *(_QWORD *)((char *)this + 109) = *(uint64_t *)((char *)a4 + 21);
  *((_OWORD *)this + 6) = v11;
  v12 = *a3;
  *a3 = 0;
  *((_QWORD *)this + 15) = v12;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_QWORD *)this + 18) = 0;
  v13 = (WTF **)((char *)this + 144);
  *((_BYTE *)this + 164) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_BYTE *)this + 160) = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = off_1E335C838;
  v15[1] = this;
  *((_QWORD *)this + 21) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  v17 = *(unsigned int **)(StatusReg + 736);
  if (!v17)
    v17 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 21) = off_1E31F7378;
  *((_QWORD *)this + 26) = v17;
  *((_QWORD *)this + 27) = v15;
  *((_WORD *)this + 112) = 1;
  *((_BYTE *)this + 280) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 257) = 0u;
  if (*((_BYTE *)this + 116))
  {
    v19 = *((_DWORD *)this + 28);
    v20 = v19 / 0xA;
    if (v19 / 0xA >= 0x2EE00)
      v20 = 192000;
    if (v19 <= 0x13889)
      v20 = 8000;
    v21 = v19 >= v20;
    v22 = v19 - v20;
    if (!v21)
      v22 = 0;
    if (v22 <= 0x13880)
      v22 = 80000;
  }
  else
  {
    if (*((_BYTE *)this + 100))
      v20 = *((_DWORD *)this + 24);
    else
      v20 = 192000;
    if (*((_BYTE *)this + 108))
      v22 = *((_DWORD *)this + 26);
    else
      v22 = 10000000;
  }
  *((_DWORD *)this + 66) = v20;
  *((_DWORD *)this + 67) = v22;
  v23 = *(_QWORD *)(*((_QWORD *)this + 15) + 96);
  v24 = *(unsigned int *)(v23 + 76);
  if (!(_DWORD)v24)
  {
    v30 = 0;
    v24 = 0;
    goto LABEL_38;
  }
  v25 = *(_QWORD **)(v23 + 64);
  v26 = *(unsigned int *)(v23 + 72);
  v27 = &v25[2 * v26];
  if ((_DWORD)v26)
  {
    v28 = 16 * v26;
    while (!*v25)
    {
      v25 += 2;
      v28 -= 16;
      if (!v28)
      {
        v25 = v27;
        break;
      }
    }
  }
  if (v24 >> 29)
  {
    __break(0xC471u);
LABEL_51:
    JUMPOUT(0x19542D9FCLL);
  }
  v29 = WTF::fastMalloc((WTF *)(8 * v24));
  v30 = v29;
  if (v25 != v27)
  {
    LODWORD(v31) = 0;
LABEL_32:
    v32 = v25[1];
    ++*(_DWORD *)(v32 + 8);
    *(_QWORD *)(v29 + 8 * v31) = v32;
    v31 = (v31 + 1);
    while (1)
    {
      v25 += 2;
      if (v25 == v27)
        break;
      if (*v25)
      {
        if (v25 != v27)
          goto LABEL_32;
        break;
      }
    }
    v24 |= v31 << 32;
  }
LABEL_38:
  v33 = *((unsigned int *)this + 39);
  if ((_DWORD)v33)
  {
    v34 = *v13;
    v35 = 8 * v33;
    do
    {
      v36 = *(WebCore::MediaStreamTrackPrivate **)v34;
      *(_QWORD *)v34 = 0;
      if (v36)
      {
        if (*((_DWORD *)v36 + 2) == 1)
        {
          WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v36, v14);
          WTF::fastFree(v37, v38);
        }
        else
        {
          --*((_DWORD *)v36 + 2);
        }
      }
      v34 = (WTF *)((char *)v34 + 8);
      v35 -= 8;
    }
    while (v35);
  }
  v39 = *v13;
  if (*v13)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v39, v14);
  }
  *((_QWORD *)this + 18) = v30;
  *((_QWORD *)this + 19) = v24;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*(_QWORD *)(*((_QWORD *)this + 15) + 96) + 32, (_QWORD *)this + 7, (uint64_t)v42);
  return this;
}

void WebCore::MediaRecorder::~MediaRecorder(WebCore::MediaRecorder *this)
{
  WTF *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  unint64_t v10;
  unint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  WebCore::MediaStreamTrackPrivate **v25;
  uint64_t v26;
  WebCore::MediaStreamTrackPrivate *v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  uint64_t v31;
  WebCore::MediaStream *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  void *v42;
  bmalloc::api *v43;
  void *v44;
  WTF *v45;

  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*(_QWORD *)(*((_QWORD *)this + 15) + 96) + 32, (_QWORD *)this + 7);
  v2 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E335C860;
  v45 = v2;
  if (*((_DWORD *)this + 34))
  {
    v4 = *((unsigned int *)this + 39);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)*((_QWORD *)this + 18);
      v6 = 8 * v4;
      do
      {
        v7 = *v5++;
        WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v7 + 24, (_QWORD *)this + 9);
        v6 -= 8;
      }
      while (v6);
    }
    *((_DWORD *)this + 34) = 0;
    WebCore::MediaRecorderPrivate::stop(*((_QWORD **)this + 16), (uint64_t)&v45);
    v9 = v45;
    v45 = 0;
    if (v9)
      (*(void (**)(WTF *))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    WTF::fastFree(v2, v3);
  }
  v10 = *((_QWORD *)this + 29);
  v11 = *((_QWORD *)this + 30);
  v12 = (WTF *)*((_QWORD *)this + 31);
  if (v10 <= v11)
  {
    if (v10 == v11)
      goto LABEL_27;
    v19 = (uint64_t *)((char *)v12 + 8 * v10);
    v20 = 8 * v11 - 8 * v10;
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  else
  {
    if (v11)
    {
      v13 = 8 * v11;
      do
      {
        v14 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        v12 = (WTF *)((char *)v12 + 8);
        v13 -= 8;
      }
      while (v13);
      v12 = (WTF *)*((_QWORD *)this + 31);
      v10 = *((_QWORD *)this + 29);
    }
    v15 = *((unsigned int *)this + 64);
    if (v10 != v15)
    {
      v16 = (uint64_t *)((char *)v12 + 8 * v10);
      v17 = 8 * v15 - 8 * v10;
      do
      {
        v18 = *v16;
        *v16 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
  }
  v12 = (WTF *)*((_QWORD *)this + 31);
LABEL_27:
  if (v12)
  {
    *((_QWORD *)this + 31) = 0;
    *((_DWORD *)this + 64) = 0;
    WTF::fastFree(v12, v8);
  }
  *((_QWORD *)this + 21) = off_1E31F7378;
  v22 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  WebCore::TimerBase::~TimerBase((WebCore::MediaRecorder *)((char *)this + 168));
  v24 = *((unsigned int *)this + 39);
  if ((_DWORD)v24)
  {
    v25 = (WebCore::MediaStreamTrackPrivate **)*((_QWORD *)this + 18);
    v26 = 8 * v24;
    do
    {
      v27 = *v25;
      *v25 = 0;
      if (v27)
      {
        if (*((_DWORD *)v27 + 2) == 1)
        {
          WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v27, v23);
          WTF::fastFree(v28, v29);
        }
        else
        {
          --*((_DWORD *)v27 + 2);
        }
      }
      ++v25;
      v26 -= 8;
    }
    while (v26);
  }
  v30 = (WTF *)*((_QWORD *)this + 18);
  if (v30)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v30, v23);
  }
  v31 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = (WebCore::MediaStream *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v32)
  {
    if (*((_DWORD *)v32 + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(v32);
      bmalloc::api::isoDeallocate(v43, v44);
    }
    else
    {
      --*((_DWORD *)v32 + 22);
    }
  }
  v33 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = *((_QWORD *)this + 10);
  if (v34)
  {
    *(_QWORD *)(v34 + 8) = 0;
    v35 = (unsigned int *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v35)
    {
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v35);
        WTF::fastFree((WTF *)v35, v23);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 10) = 0;
  }
  v38 = *((_QWORD *)this + 8);
  if (v38)
  {
    *(_QWORD *)(v38 + 8) = 0;
    v39 = (unsigned int *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v39)
    {
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        atomic_store(1u, v39);
        WTF::fastFree((WTF *)v39, v23);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 8) = 0;
  }
  WebCore::EventTarget::~EventTarget((WebCore::MediaRecorder *)((char *)this + 32), v23);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v42);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaRecorder::~MediaRecorder(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

