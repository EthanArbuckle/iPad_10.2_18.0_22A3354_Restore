uint64_t WebCore::WebAssemblyScriptSourceCode::WebAssemblyScriptSourceCode(uint64_t a1, unsigned int **a2, WTF::StringImpl **a3, _QWORD *a4)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  uint64_t v20;

  v8 = WTF::fastMalloc((WTF *)0xA0);
  v9 = *a3;
  if (*a3)
    *(_DWORD *)v9 += 2;
  v18 = v9;
  v10 = (_DWORD *)*a4;
  *a4 = 0;
  v19 = v10;
  v11 = *a3;
  if (*a3)
    *(_DWORD *)v11 += 2;
  v17 = v11;
  JSC::BaseWebAssemblySourceProvider::BaseWebAssemblySourceProvider();
  *(_QWORD *)v8 = off_1E3393D90;
  *(_QWORD *)(v8 + 120) = &unk_1E3393E10;
  *(_QWORD *)(v8 + 128) = 0;
  v12 = *a2;
  if (*a2)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  *(_QWORD *)(v8 + 136) = v12;
  *(_QWORD *)(v8 + 144) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(v8 + 152) = v20;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v14);
    else
      *(_DWORD *)v18 -= 2;
  }
  *(_QWORD *)a1 = v8;
  ++*(_DWORD *)(v8 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  *(_DWORD *)(a1 + 20) = v15;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t WebCore::CloneSerializer::write(uint64_t this, int a2)
{
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;

  v3 = this;
  v4 = *(unsigned int *)(this + 8);
  v5 = *(unsigned int *)(this + 12);
  v6 = v5 + 4;
  if (v5 + 4 > v4)
  {
    v8 = v4 + (v4 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= v6)
      v10 = v5 + 4;
    else
      v10 = v9;
    if (HIDWORD(v10))
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x1956DF330);
    }
    v11 = *(void **)this;
    v12 = (void *)WTF::fastMalloc((WTF *)v10);
    *(_DWORD *)(v3 + 8) = v10;
    *(_QWORD *)v3 = v12;
    this = (uint64_t)memcpy(v12, v11, v5);
    if (v11)
    {
      if (*(void **)v3 == v11)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      this = WTF::fastFree((WTF *)v11, v13);
    }
  }
  v7 = *(unsigned int *)(v3 + 12);
  if (v6 < v7)
    goto LABEL_15;
  *(_DWORD *)(*(_QWORD *)v3 + v7) = a2;
  *(_DWORD *)(v3 + 12) = v6;
  return this;
}

void JSC::PropertyNameArray::~PropertyNameArray(JSC::PropertyNameArray *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;

  v3 = *((_QWORD *)this + 1);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v5 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v5)
      {
        v6 = *(WTF::StringImpl ***)(v4 + 8);
        v7 = 8 * v5;
        do
        {
          v8 = *v6;
          *v6 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v8 -= 2;
          }
          ++v6;
          v7 -= 8;
        }
        while (v7);
      }
      v9 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v9 && v9 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        WTF::fastFree(v9, a2);
      }
      WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
}

uint64_t WebCore::CloneSerializer::endObject(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v1 = this;
  v2 = *(unsigned int *)(this + 8);
  v3 = *(unsigned int *)(this + 12);
  v4 = v3 + 4;
  if (v3 + 4 > v2)
  {
    v6 = v2 + (v2 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= v4)
      v8 = v3 + 4;
    else
      v8 = v7;
    if (HIDWORD(v8))
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x1956DF4CCLL);
    }
    v9 = *(void **)this;
    v10 = (void *)WTF::fastMalloc((WTF *)v8);
    *(_DWORD *)(v1 + 8) = v8;
    *(_QWORD *)v1 = v10;
    this = (uint64_t)memcpy(v10, v9, v3);
    if (v9)
    {
      if (*(void **)v1 == v9)
      {
        *(_QWORD *)v1 = 0;
        *(_DWORD *)(v1 + 8) = 0;
      }
      this = WTF::fastFree((WTF *)v9, v11);
    }
  }
  v5 = *(unsigned int *)(v1 + 12);
  if (v4 < v5)
    goto LABEL_15;
  *(_DWORD *)(*(_QWORD *)v1 + v5) = -1;
  *(_DWORD *)(v1 + 12) = v4;
  return this;
}

uint64_t WebCore::CloneSerializer::addToObjectPoolIfNotDupe<(WebCore::SerializationTag)30,(WebCore::SerializationTag)255,(WebCore::SerializationTag)255>(uint64_t a1, objc_class *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int32 v8;
  uint64_t result;
  JSC::MarkedVectorBase *v10;
  uint64_t v11;
  uint64_t v12;
  JSValue v13;
  _BYTE v14[28];
  unsigned __int32 v15;
  objc_class *v16;

  v4 = (uint64_t *)(a1 + 232);
  v5 = *(_QWORD *)(a1 + 232);
  v6 = WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::find(v5, (uint64_t)a2);
  v7 = v6;
  if (v5)
  {
    if (v5 + 16 * *(unsigned int *)(v5 - 4) == v6)
    {
      v16 = a2;
      v8 = *(_DWORD *)(v5 - 12);
      goto LABEL_7;
    }
LABEL_5:
    WebCore::CloneSerializer::write(*(char **)(a1 + 216), 19);
    WebCore::CloneSerializer::writeConstantPoolIndex<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>((char *)a1, *(_QWORD *)(a1 + 232), *(_DWORD *)(v7 + 8));
    return 0;
  }
  if (v6)
    goto LABEL_5;
  v8 = 0;
  v16 = a2;
LABEL_7:
  v15 = v8;
  WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>((uint64_t)v14, v4, (unint64_t *)&v16, &v15);
  v11 = *(unsigned int *)(a1 + 120);
  v10 = (JSC::MarkedVectorBase *)(a1 + 120);
  if ((_DWORD)v11 == *(_DWORD *)(a1 + 124) || (v12 = *(_QWORD *)(a1 + 128), v12 != a1 + 144) && v12)
  {
    v13.super.isa = a2;
    if (JSC::MarkedVectorBase::slowAppend(v10, v13) == 1)
    {
      *(_BYTE *)(a1 + 112) = 1;
      goto LABEL_16;
    }
  }
  else
  {
    *(_QWORD *)(v12 + 8 * v11) = a2;
    *(_DWORD *)v10 = v11 + 1;
  }
  if (*(_BYTE *)(a1 + 112))
  {
LABEL_16:
    result = 184;
    __break(0xC471u);
    return result;
  }
  return 1;
}

unint64_t JSC::JSMapIterator::create(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t SlowCase;
  int v6;
  unint64_t v8;

  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD **)(v3 + 40656);
  if (!v4)
    v4 = (_QWORD *)JSC::GCClient::Heap::mapIteratorSpaceSlow((JSC::GCClient::Heap *)(v3 + 37552));
  SlowCase = v4[3];
  if (SlowCase >= v4[4])
  {
    SlowCase = v4[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_5;
    }
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[6];
    v4[4] = SlowCase + HIDWORD(v8);
    v4[5] = SlowCase + (int)v8;
  }
  v4[3] = SlowCase + 48;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v6 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v6;
  *(_QWORD *)(SlowCase + 40) = 0;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 8) = 0u;
  JSC::JSMapIterator::finishCreation();
  return SlowCase;
}

uint64_t JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::appendWithCrashOnOverflow(uint64_t a1, JSValue a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  result = a1 + 8;
  if ((_DWORD)v4 != v5 && ((v6 = *(_QWORD *)(a1 + 16), v6 != a1 + 32) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    *(JSValue *)(v6 + 8 * v4) = a2;
    *(_DWORD *)result = v4 + 1;
  }
  else
  {
    result = JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)result, a2);
    if ((_DWORD)result == 1)
    {
      *(_BYTE *)a1 = 1;
      goto LABEL_12;
    }
  }
  if (*(_BYTE *)a1)
  {
LABEL_12:
    result = 184;
    __break(0xC471u);
  }
  return result;
}

unint64_t JSC::JSSetIterator::create(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t SlowCase;
  int v6;
  unint64_t v8;

  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD **)(v3 + 40736);
  if (!v4)
    v4 = (_QWORD *)JSC::GCClient::Heap::setIteratorSpaceSlow((JSC::GCClient::Heap *)(v3 + 37552));
  SlowCase = v4[3];
  if (SlowCase >= v4[4])
  {
    SlowCase = v4[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_5;
    }
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[6];
    v4[4] = SlowCase + HIDWORD(v8);
    v4[5] = SlowCase + (int)v8;
  }
  v4[3] = SlowCase + 48;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v6 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v6;
  *(_QWORD *)(SlowCase + 40) = 0;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 8) = 0u;
  JSC::JSSetIterator::finishCreation();
  return SlowCase;
}

JSC::MarkedVectorBase *JSC::MarkedVector<JSC::JSObject *,32ul,WTF::CrashOnOverflow>::append(JSC::MarkedVectorBase *result, JSValue a2)
{
  uint64_t v2;
  unsigned int *v3;
  BOOL v4;

  v2 = *(unsigned int *)result;
  if ((_DWORD)v2 != *((_DWORD *)result + 1)
    && ((v3 = (unsigned int *)*((_QWORD *)result + 1), v3 != (unsigned int *)((char *)result + 24))
      ? (v4 = v3 == 0)
      : (v4 = 1),
        v4))
  {
    *(JSValue *)&v3[2 * v2] = a2;
    *(_DWORD *)result = v2 + 1;
  }
  else
  {
    result = (JSC::MarkedVectorBase *)JSC::MarkedVectorBase::slowAppend(result, a2);
    if ((_DWORD)result == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1956DF93CLL);
    }
  }
  return result;
}

JSC::MarkedVectorBase *JSC::MarkedVector<JSC::JSValue,4ul,WTF::CrashOnOverflow>::append(JSC::MarkedVectorBase *result, JSValue a2)
{
  uint64_t v2;
  unsigned int *v3;
  BOOL v4;

  v2 = *(unsigned int *)result;
  if ((_DWORD)v2 != *((_DWORD *)result + 1)
    && ((v3 = (unsigned int *)*((_QWORD *)result + 1), v3 != (unsigned int *)((char *)result + 24))
      ? (v4 = v3 == 0)
      : (v4 = 1),
        v4))
  {
    *(JSValue *)&v3[2 * v2] = a2;
    *(_DWORD *)result = v2 + 1;
  }
  else
  {
    result = (JSC::MarkedVectorBase *)JSC::MarkedVectorBase::slowAppend(result, a2);
    if ((_DWORD)result == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1956DFB5CLL);
    }
  }
  return result;
}

uint64_t WebCore::SerializedScriptValue::SerializedScriptValue(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 8) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 16) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 20) = v11;
  v12 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v13;
  LODWORD(v13) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(a1 + 40) = v13;
  LODWORD(v13) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(a1 + 44) = v13;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v14 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 48) = v14;
  LODWORD(v14) = *((_DWORD *)a6 + 2);
  *((_DWORD *)a6 + 2) = 0;
  *(_DWORD *)(a1 + 56) = v14;
  LODWORD(v14) = *((_DWORD *)a6 + 3);
  *((_DWORD *)a6 + 3) = 0;
  *(_DWORD *)(a1 + 60) = v14;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v15 = *a8;
  *a8 = 0;
  *(_QWORD *)(a1 + 64) = v15;
  LODWORD(v15) = *((_DWORD *)a8 + 2);
  *((_DWORD *)a8 + 2) = 0;
  *(_DWORD *)(a1 + 72) = v15;
  LODWORD(v15) = *((_DWORD *)a8 + 3);
  *((_DWORD *)a8 + 3) = 0;
  *(_DWORD *)(a1 + 76) = v15;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v16 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 80) = v16;
  LODWORD(v16) = *((_DWORD *)a7 + 2);
  *((_DWORD *)a7 + 2) = 0;
  *(_DWORD *)(a1 + 88) = v16;
  LODWORD(v16) = *((_DWORD *)a7 + 3);
  *((_DWORD *)a7 + 3) = 0;
  *(_DWORD *)(a1 + 92) = v16;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v17 = *a9;
  *a9 = 0;
  *(_QWORD *)(a1 + 96) = v17;
  LODWORD(v17) = *((_DWORD *)a9 + 2);
  *((_DWORD *)a9 + 2) = 0;
  *(_DWORD *)(a1 + 104) = v17;
  LODWORD(v17) = *((_DWORD *)a9 + 3);
  *((_DWORD *)a9 + 3) = 0;
  *(_DWORD *)(a1 + 108) = v17;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v18 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 112) = v18;
  LODWORD(v18) = *((_DWORD *)a5 + 2);
  *((_DWORD *)a5 + 2) = 0;
  *(_DWORD *)(a1 + 120) = v18;
  LODWORD(v18) = *((_DWORD *)a5 + 3);
  *((_DWORD *)a5 + 3) = 0;
  *(_DWORD *)(a1 + 124) = v18;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v19 = *a10;
  *a10 = 0;
  *(_QWORD *)(a1 + 128) = v19;
  LODWORD(v19) = *((_DWORD *)a10 + 2);
  *((_DWORD *)a10 + 2) = 0;
  *(_DWORD *)(a1 + 136) = v19;
  LODWORD(v19) = *((_DWORD *)a10 + 3);
  *((_DWORD *)a10 + 3) = 0;
  *(_DWORD *)(a1 + 140) = v19;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 248) = WebCore::SerializedScriptValue::computeMemoryCost((WebCore::SerializedScriptValue *)a1);
  return a1;
}

{
  return WebCore::SerializedScriptValue::SerializedScriptValue(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t WebCore::SerializedScriptValue::SerializedScriptValue(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, uint64_t *a17, uint64_t *a18)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::URLKeepingBlobAlive *v37;
  unsigned int v38;
  unint64_t v40;
  WebCore::URLKeepingBlobAlive *v41;
  WTF::StringImpl *v42[10];

  v42[9] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v20 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  LODWORD(v20) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 16) = v20;
  LODWORD(v20) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 20) = v20;
  v21 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v21;
  v22 = *a10;
  *a10 = 0;
  *(_QWORD *)(a1 + 32) = v22;
  LODWORD(v22) = *((_DWORD *)a10 + 2);
  *((_DWORD *)a10 + 2) = 0;
  *(_DWORD *)(a1 + 40) = v22;
  LODWORD(v22) = *((_DWORD *)a10 + 3);
  *((_DWORD *)a10 + 3) = 0;
  *(_DWORD *)(a1 + 44) = v22;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v23 = *a14;
  *a14 = 0;
  *(_QWORD *)(a1 + 48) = v23;
  LODWORD(v23) = *((_DWORD *)a14 + 2);
  *((_DWORD *)a14 + 2) = 0;
  *(_DWORD *)(a1 + 56) = v23;
  LODWORD(v23) = *((_DWORD *)a14 + 3);
  *((_DWORD *)a14 + 3) = 0;
  *(_DWORD *)(a1 + 60) = v23;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v24 = *a16;
  *a16 = 0;
  *(_QWORD *)(a1 + 64) = v24;
  LODWORD(v24) = *((_DWORD *)a16 + 2);
  *((_DWORD *)a16 + 2) = 0;
  *(_DWORD *)(a1 + 72) = v24;
  LODWORD(v24) = *((_DWORD *)a16 + 3);
  *((_DWORD *)a16 + 3) = 0;
  *(_DWORD *)(a1 + 76) = v24;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v25 = *a15;
  *a15 = 0;
  *(_QWORD *)(a1 + 80) = v25;
  LODWORD(v25) = *((_DWORD *)a15 + 2);
  *((_DWORD *)a15 + 2) = 0;
  *(_DWORD *)(a1 + 88) = v25;
  LODWORD(v25) = *((_DWORD *)a15 + 3);
  *((_DWORD *)a15 + 3) = 0;
  *(_DWORD *)(a1 + 92) = v25;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v26 = *a17;
  *a17 = 0;
  *(_QWORD *)(a1 + 96) = v26;
  LODWORD(v26) = *((_DWORD *)a17 + 2);
  *((_DWORD *)a17 + 2) = 0;
  *(_DWORD *)(a1 + 104) = v26;
  LODWORD(v26) = *((_DWORD *)a17 + 3);
  *((_DWORD *)a17 + 3) = 0;
  *(_DWORD *)(a1 + 108) = v26;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v27 = *a11;
  *a11 = 0;
  *(_QWORD *)(a1 + 112) = v27;
  LODWORD(v27) = *((_DWORD *)a11 + 2);
  *((_DWORD *)a11 + 2) = 0;
  *(_DWORD *)(a1 + 120) = v27;
  LODWORD(v27) = *((_DWORD *)a11 + 3);
  *((_DWORD *)a11 + 3) = 0;
  *(_DWORD *)(a1 + 124) = v27;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v28 = *a18;
  *a18 = 0;
  *(_QWORD *)(a1 + 128) = v28;
  LODWORD(v28) = *((_DWORD *)a18 + 2);
  *((_DWORD *)a18 + 2) = 0;
  *(_DWORD *)(a1 + 136) = v28;
  LODWORD(v28) = *((_DWORD *)a18 + 3);
  *((_DWORD *)a18 + 3) = 0;
  *(_DWORD *)(a1 + 140) = v28;
  v29 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = v29;
  v30 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 152) = v30;
  LODWORD(v30) = *((_DWORD *)a6 + 2);
  *((_DWORD *)a6 + 2) = 0;
  *(_DWORD *)(a1 + 160) = v30;
  LODWORD(v30) = *((_DWORD *)a6 + 3);
  *((_DWORD *)a6 + 3) = 0;
  *(_DWORD *)(a1 + 164) = v30;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v31 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 168) = v31;
  LODWORD(v31) = *((_DWORD *)a7 + 2);
  *((_DWORD *)a7 + 2) = 0;
  *(_DWORD *)(a1 + 176) = v31;
  LODWORD(v31) = *((_DWORD *)a7 + 3);
  *((_DWORD *)a7 + 3) = 0;
  *(_DWORD *)(a1 + 180) = v31;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v32 = *a8;
  *a8 = 0;
  *(_QWORD *)(a1 + 184) = v32;
  LODWORD(v32) = *((_DWORD *)a8 + 2);
  *((_DWORD *)a8 + 2) = 0;
  *(_DWORD *)(a1 + 192) = v32;
  LODWORD(v32) = *((_DWORD *)a8 + 3);
  *((_DWORD *)a8 + 3) = 0;
  *(_DWORD *)(a1 + 196) = v32;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v33 = *a9;
  *a9 = 0;
  *(_QWORD *)(a1 + 200) = v33;
  LODWORD(v33) = *((_DWORD *)a9 + 2);
  *((_DWORD *)a9 + 2) = 0;
  *(_DWORD *)(a1 + 208) = v33;
  LODWORD(v33) = *((_DWORD *)a9 + 3);
  *((_DWORD *)a9 + 3) = 0;
  *(_DWORD *)(a1 + 212) = v33;
  if (*((_DWORD *)a12 + 3))
  {
    v34 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v34 = 0;
    *(_QWORD *)(v34 + 8) = 0;
    v35 = *a12;
    *a12 = 0;
    *(_QWORD *)v34 = v35;
    LODWORD(v35) = *((_DWORD *)a12 + 2);
    *((_DWORD *)a12 + 2) = 0;
    *(_DWORD *)(v34 + 8) = v35;
    LODWORD(v35) = *((_DWORD *)a12 + 3);
    *((_DWORD *)a12 + 3) = 0;
    *(_DWORD *)(v34 + 12) = v35;
  }
  else
  {
    v34 = 0;
  }
  *(_QWORD *)(a1 + 216) = v34;
  v36 = *a13;
  *a13 = 0;
  *(_QWORD *)(a1 + 224) = v36;
  v37 = *(WebCore::URLKeepingBlobAlive **)a3;
  v38 = *(_DWORD *)(a3 + 12);
  if (v38)
  {
    v40 = (unint64_t)v37 + 72 * v38;
    do
    {
      v41 = v37;
      WebCore::URLKeepingBlobAlive::isolatedCopy(v37, (uint64_t)v42);
      WebCore::URLKeepingBlobAlive::operator=((uint64_t)v41, v42);
      WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)v42);
      v37 = (WebCore::URLKeepingBlobAlive *)((char *)v41 + 72);
    }
    while ((unint64_t)v41 + 72 < v40);
    v37 = *(WebCore::URLKeepingBlobAlive **)a3;
    v38 = *(_DWORD *)(a3 + 12);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a1 + 232) = v37;
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a1 + 244) = v38;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 248) = WebCore::SerializedScriptValue::computeMemoryCost((WebCore::SerializedScriptValue *)a1);
  return a1;
}

_DWORD *WebCore::SerializedScriptValue::SerializedScriptValue(_DWORD *a1, uint64_t *a2)
{
  *a1 = 1;
  WebCore::SerializedScriptValue::Internals::Internals((uint64_t)(a1 + 2), a2);
  return a1;
}

{
  *a1 = 1;
  WebCore::SerializedScriptValue::Internals::Internals((uint64_t)(a1 + 2), a2);
  return a1;
}

uint64_t WebCore::SerializedScriptValue::create@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v13;
  WebCore::OffscreenCanvas **v14;
  WebCore::RTCDataChannel **v15;
  WebCore::MediaSourceHandle **v16;
  WTF *v17;
  uint64_t v18;
  uint64_t **v19;
  unsigned int v20;
  int v21;
  _QWORD *v22;
  __n128 v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  int v56;
  unsigned int v57;
  BOOL v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  unsigned __int32 v69;
  int v70;
  int v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unsigned __int32 v80;
  int v81;
  int v82;
  WebCore::CloneSerializer *v83;
  unint64_t v84;
  size_t v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  void *v93;
  void *v94;
  void *v95;
  int v96;
  unint64_t DirectIndex;
  WebCore::CloneSerializer *v98;
  unint64_t v99;
  size_t v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  _DWORD *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  uint64_t v112;
  char *v113;
  char v114;
  unsigned int v115;
  _DWORD *v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  WTF *v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t *v130;
  int v131;
  __n128 v132;
  int v133;
  WebCore::CloneSerializer *v134;
  unint64_t v135;
  size_t v136;
  unint64_t v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  WTF *v141;
  WTF *v143;
  WTF *v145;
  WTF *v146;
  WTF *v147;
  WTF *v148;
  WTF *v149;
  WTF *v150;
  JSC::ArrayBuffer *v151;
  WTF *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  WTF *v156;
  WTF *v157;
  uint64_t v158;
  WTF *v159;
  WTF *v160;
  uint64_t v161;
  WTF *v162;
  WTF *v163;
  uint64_t v164;
  WTF *v165;
  WTF *v166;
  WTF *v167;
  WTF *v168;
  uint64_t v169;
  WTF *v170;
  WTF *v171;
  WTF *v172;
  int v173;
  WTF *v174;
  WTF *v175;
  WTF *v176;
  WTF *v177;
  WTF *v178;
  uint64_t v179;
  WTF *v180;
  WTF *v181;
  WTF *v182;
  WTF *v183;
  WTF *v184;
  WTF *v185;
  uint64_t result;
  WTF *v187;
  WTF *v188;
  WTF *v189;
  WTF *v190;
  WTF *v191;
  WTF *v192;
  WTF *v193;
  WTF *v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  unint64_t v212;
  BOOL v213;
  int v214;
  objc_class *v215;
  JSValue v216;
  uint64_t v217;
  uint64_t *v218;
  WTF *v219;
  uint64_t v220;
  uint64_t v221;
  WTF::StringImpl **v222;
  uint64_t v223;
  WTF::StringImpl *v224;
  WTF *v225;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  void *v230;
  void *v231;
  void *v232;
  uint64_t v233;
  WTF::StringImpl **v234;
  uint64_t v235;
  WTF::StringImpl *v236;
  WTF *v237;
  uint64_t v239;
  WTF::StringImpl **v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  WTF *v243;
  uint64_t v245;
  JSC::VM *v246;
  WTF *v247;
  uint64_t *v248;
  WTF *v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  void *v254;
  void *v255;
  void *v256;
  JSC::VM *v257;
  JSValue v258;
  unsigned int v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  WTF *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  JSValue v273;
  JSValue v274;
  int v275;
  int v276;
  unint64_t v277;
  objc_class *v278;
  JSValue v279;
  int v280;
  _QWORD *v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  WTF *v286;
  WTF *v287;
  uint64_t *v288;
  JSC::VM *v289;
  JSC::JSGlobalObject *v290;
  uint64_t *v291;
  WTF *v292;
  uint64_t v293;
  JSC::VM *v294;
  void *v295;
  uint64_t v296;
  JSC::VM *v297;
  uint64_t v298;
  JSC::VM *v299;
  uint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  JSC::JSGlobalObject *v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t (*v310)();
  char v311;
  int v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  WTF *v320;
  int v321;
  BOOL v322;
  char v323;
  uint64_t v324;
  WTF *v325;
  uint64_t v326;
  WTF *v327;
  uint64_t v328;
  WTF *v329;
  uint64_t v330;
  WTF *v331;
  uint64_t v332;
  WTF *v333;
  bmalloc::api *v334;
  void *v335;
  char v336;
  WTF *v337;
  WTF *v338;
  unsigned int *v339;
  unsigned int v340;
  unsigned int v341;
  WTF *v342;
  WTF *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  WTF *v348;
  JSC::JSGlobalObject *v349;
  void *v350;
  int v351;
  WTF *v352;
  uint64_t v353;
  int v354;
  WTF *v355;
  uint64_t v356;
  WTF *v357;
  _BYTE *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  WTF *v362;
  uint64_t v363;
  uint64_t v364;
  void *v365;
  int v366;
  uint64_t v367;
  WebCore::RTCDataChannel **v368;
  uint64_t v369;
  WTF::StringImpl *v370;
  int v371;
  uint64_t v372;
  WebCore::MediaSourceHandle **v373;
  uint64_t v374;
  int v375;
  uint64_t v376;
  _DWORD *v377;
  int v378;
  WTF *v379;
  unsigned int v380;
  WTF *v381;
  WTF *v382;
  _OWORD *v383;
  uint64_t v384;
  unsigned int *v385;
  unsigned int v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  char *v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  WTF *v395;
  uint64_t v396;
  WebCore::WebCodecsVideoFrame *v397;
  uint64_t v398;
  unsigned int v399;
  WTF *v400;
  WTF *v401;
  uint64_t v402;
  unsigned int *v403;
  unsigned int v404;
  WTF *v405;
  uint64_t v406;
  WebCore::WebCodecsAudioData *v407;
  uint64_t v408;
  uint64_t v409;
  WTF *v410;
  uint64_t v411;
  WTF *v412;
  uint64_t v413;
  WTF *v414;
  uint64_t v415;
  WTF *v416;
  int v417;
  BOOL v418;
  WTF *v419;
  WTF *v420;
  unsigned int *v421;
  unsigned int v422;
  unsigned int v423;
  uint64_t v424;
  WTF *v425;
  uint64_t v426;
  WTF *v427;
  bmalloc::api *v428;
  void *v429;
  WTF *v430;
  uint64_t v431;
  _DWORD *v432;
  WTF *v433;
  uint64_t v434;
  _DWORD *v435;
  WTF *v436;
  uint64_t v437;
  _DWORD *v438;
  WTF *v439;
  uint64_t v440;
  uint64_t v441;
  WTF *v442;
  WTF *v443;
  unsigned int *v444;
  unsigned int *v445;
  unsigned int v446;
  unsigned int v447;
  uint64_t v448;
  WTF *v449;
  uint64_t v450;
  JSC::ArrayBufferContents *v451;
  uint64_t v452;
  uint64_t v453;
  JSC::ArrayBufferContents *v454;
  uint64_t v455;
  uint64_t v456;
  JSC::ArrayBufferContents *v457;
  uint64_t v458;
  uint64_t v459;
  unsigned int **v460;
  uint64_t v461;
  unsigned int *v462;
  unsigned int v463;
  unsigned int v464;
  WTF *v465;
  WTF *v466;
  uint64_t v467;
  unsigned int v468;
  unsigned int v469;
  WTF *v470;
  WTF *v471;
  uint64_t v472;
  unsigned int v473;
  unsigned int v474;
  uint64_t v475;
  unsigned int *v476;
  unsigned int *v477;
  unsigned int v478;
  unsigned int v479;
  uint64_t v480;
  WTF *v481;
  WTF *v482;
  WTF::StringImpl *v483;
  WTF::StringImpl *v484;
  uint64_t v485;
  WTF *v486;
  WebCore::MediaStreamTrackDataHolder *v487;
  WTF *v488;
  void *v489;
  WTF *v490;
  unsigned int *v491;
  unsigned int *v492;
  unsigned int v493;
  unsigned int v494;
  uint64_t v495;
  _DWORD **v496;
  _DWORD *v497;
  int v498;
  unint64_t v499;
  objc_class *v500;
  JSValue v501;
  int v502;
  int v503;
  _QWORD *v504;
  uint64_t v505;
  WTF *v506;
  bmalloc::api *v507;
  void *v508;
  WTF *v509;
  uint64_t v510;
  WebCore::OffscreenCanvas *v511;
  bmalloc::api *v512;
  void *v513;
  uint64_t *v514;
  uint64_t v515;
  uint64_t **v516;
  WTF *v517;
  uint64_t *v518;
  JSC::JSGlobalObject *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  unint64_t v524;
  unint64_t v525;
  WTF *v526;
  WTF *v527;
  uint64_t *v528;
  JSValue v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  void *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  _QWORD *v538;
  WTF *v539;
  WTF *v540;
  void *v541;
  WTF *v542;
  WTF *v543;
  void *v544;
  WTF *v545;
  WTF *v546;
  void *v547;
  WTF *v548;
  WTF *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  WTF *v553;
  uint64_t v554;
  uint64_t v555;
  WTF *v556;
  uint64_t v557;
  uint64_t v558;
  WTF *v559;
  uint64_t v560;
  uint64_t v561;
  WTF *v562;
  WTF *v563;
  JSC::ArrayBufferContents *v564;
  uint64_t v565;
  uint64_t v566;
  unsigned int **v567;
  uint64_t v568;
  unsigned int *v569;
  unsigned int v570;
  unsigned int v571;
  WTF *v572;
  void *v573;
  uint64_t **v574;
  uint64_t *v575;
  JSC::VM *v576;
  JSC::VM *v577;
  JSC::JSGlobalObject *v578;
  JSC::VM *v579;
  JSC::JSGlobalObject *v580;
  WTF *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  unsigned int v585;
  unsigned int v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  JSC::JSGlobalObject *v591;
  int v594;
  _QWORD *v595;
  WTF *v596;
  WTF *v597;
  WTF *v598;
  WTF *v599;
  uint64_t v600;
  WTF *v601;
  uint64_t v602;
  WTF *v603;
  uint64_t v604;
  WTF *v605;
  uint64_t v606;
  WTF *v607;
  uint64_t v608;
  WTF *v609;
  uint64_t v610;
  WTF *v611;
  uint64_t v612;
  WTF *v613;
  uint64_t v614;
  WTF *v615;
  uint64_t v616;
  WTF *v617;
  uint64_t v618;
  WTF *v619;
  uint64_t v620;
  uint64_t v621;
  WTF *v622;
  uint64_t v623;
  WTF *v624;
  uint64_t v625;
  WTF *v626;
  uint64_t v627;
  WTF *v628;
  uint64_t v629;
  WTF *v630;
  uint64_t v631;
  WTF *v632;
  uint64_t v633;
  WTF *v634;
  uint64_t v635;
  WTF *v636;
  uint64_t v637;
  JSC::JSGlobalObject *v638;
  uint64_t v639;
  int v640;
  _DWORD v641[2];
  uint64_t *v642;
  uint64_t v643;
  char v644;
  int v645;
  int v646;
  _BYTE *v647;
  _BYTE v648[72];
  WebCore::CloneSerializer *v649;
  uint64_t v650[22];
  int v651;
  _DWORD *v652;
  WTF *v653;
  uint64_t v654;
  _BYTE v655[64];
  WTF *v656;
  uint64_t v657;
  _BYTE v658[32];
  WTF *v659;
  uint64_t v660;
  _BYTE v661[32];
  WTF *v662;
  uint64_t v663;
  _BYTE v664[32];
  WTF *v665;
  uint64_t v666;
  _BYTE v667[256];
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  WTF *v674;
  uint64_t v675;
  _BYTE v676[64];
  WTF *v677;
  uint64_t v678;
  _BYTE v679[68];
  unsigned __int32 v680;
  uint64_t v681;
  int v682;
  WTF *v683;
  uint64_t v684;
  WTF *v685;
  uint64_t *v686;
  _QWORD v687[3];
  uint64_t v688;
  char v689;
  uint64_t v690;
  uint64_t v691;

  v8 = a7;
  v591 = (JSC::JSGlobalObject *)*((_QWORD *)a1 + 7);
  v637 = 0;
  v636 = 0;
  v635 = 0;
  v634 = 0;
  v633 = 0;
  v632 = 0;
  v631 = 0;
  v630 = 0;
  v629 = 0;
  v628 = 0;
  v627 = 0;
  v626 = 0;
  v625 = 0;
  v624 = 0;
  v623 = 0;
  v622 = 0;
  v621 = 0;
  v13 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v13)
    goto LABEL_2;
  v301 = *(uint64_t ***)a3;
  v302 = a8;
  v303 = 8 * v13;
  v304 = MEMORY[0x1E0CC10F8];
  do
  {
    v305 = (JSC::JSGlobalObject *)*v301;
    if (*v301)
      v305 = *(JSC::JSGlobalObject **)v305;
    v638 = v305;
    WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::add((uint64_t)&v668, &v621, (uint64_t *)&v638);
    if (!(_BYTE)v669)
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)v302 = 21;
LABEL_1004:
      *(_DWORD *)(v302 + 16) = 1;
      goto LABEL_323;
    }
    v306 = (unint64_t *)*v301;
    if (*v301)
      v307 = *v306;
    else
      v307 = 0;
    if ((v307 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v307 + 5) == 38)
    {
      result = *(_QWORD *)(v307 + 16);
      *(_QWORD *)&v668 = result;
      if (result)
      {
        v308 = *(_QWORD *)(result + 16);
        if (!v308)
          goto LABEL_579;
        v309 = *(_QWORD *)(v304 + 56);
        if (v309 && (*(_BYTE *)(v304 + 34) || !*MEMORY[0x1E0CC10F0]) && !((v308 & 0x3FFFFFFFFLL) + v309))
          goto LABEL_579;
        v310 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
        if (!*(_QWORD *)(result + 32))
          v310 = 0;
        if (v310)
          goto LABEL_579;
        if (!*(_DWORD *)(result + 88) && !*(_BYTE *)(result + 93))
        {
          v530 = HIDWORD(v637);
          if (HIDWORD(v637) == (_DWORD)v637)
          {
            result = WTF::Vector<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ArrayBuffer*>((uint64_t)&v636, (_DWORD **)&v668);
          }
          else
          {
            v545 = v636;
            *(_DWORD *)result += 2;
            *((_QWORD *)v545 + v530) = result;
            HIDWORD(v637) = v530 + 1;
          }
          goto LABEL_1013;
        }
        v638 = v591;
        JSC::errorMessageForTransfer((JSC *)result, v151);
        result = JSC::throwTypeError();
        v311 = 37;
        goto LABEL_580;
      }
    }
    if (v306)
      v313 = *v306;
    else
      v313 = 0;
    v314 = WebCore::JSMessagePort::toWrapped((uint64_t)v591, v313);
    if (v314)
    {
      if (*(_BYTE *)(v314 + 57))
      {
        result = WTF::StringImpl::createWithoutCopyingNonEmpty();
        v552 = v668;
        *(_BYTE *)v302 = 21;
        *(_QWORD *)(v302 + 8) = v552;
        goto LABEL_1004;
      }
      v315 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v315 == *(_DWORD *)(a4 + 8))
      {
        WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MessagePort&>(a4, v314);
      }
      else
      {
        WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::Ref((_QWORD *)(*(_QWORD *)a4 + 8 * v315), v314);
        ++*(_DWORD *)(a4 + 12);
      }
    }
    else
    {
      if (*v301)
        v520 = **v301;
      else
        v520 = 0;
      result = WebCore::JSImageBitmap::toWrapped((uint64_t)v591, v520);
      *(_QWORD *)&v668 = result;
      if (result)
      {
        if (*(_QWORD *)(result + 16) && (*(_BYTE *)(result + 32) & 1) != 0)
        {
          v521 = HIDWORD(v635);
          if (HIDWORD(v635) == (_DWORD)v635)
          {
            result = WTF::Vector<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ImageBitmap*>((uint64_t)&v634, (uint64_t *)&v668);
          }
          else
          {
            v542 = v634;
            ++*(_DWORD *)(result + 8);
            *((_QWORD *)v542 + v521) = result;
            HIDWORD(v635) = v521 + 1;
          }
LABEL_1013:
          v312 = 3;
LABEL_581:
          if (v312 != 3)
            goto LABEL_323;
          goto LABEL_582;
        }
LABEL_579:
        v311 = 21;
LABEL_580:
        *(_BYTE *)v302 = v311;
        *(_QWORD *)(v302 + 8) = 0;
        v312 = 1;
        *(_DWORD *)(v302 + 16) = 1;
        goto LABEL_581;
      }
      if (*v301)
        v531 = **v301;
      else
        v531 = 0;
      v532 = WebCore::JSOffscreenCanvas::toWrapped((uint64_t)v591, v531);
      *(_QWORD *)&v668 = v532;
      if (v532)
      {
        v533 = HIDWORD(v633);
        if (HIDWORD(v633) == (_DWORD)v633)
        {
          WTF::Vector<WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::OffscreenCanvas*>((uint64_t)&v632, (uint64_t *)&v668);
        }
        else
        {
          v539 = v632;
          ++*(_DWORD *)(v532 + 24);
          *((_QWORD *)v539 + v533) = v532;
          HIDWORD(v633) = v533 + 1;
        }
      }
      else
      {
        if (*v301)
          v535 = **v301;
        else
          v535 = 0;
        v536 = WebCore::JSRTCDataChannel::toWrapped((uint64_t)v591, v535);
        if (v536)
        {
          v537 = HIDWORD(v631);
          if (HIDWORD(v631) == (_DWORD)v631)
          {
            WTF::Vector<WTF::Ref<WebCore::RTCDataChannel,WTF::RawPtrTraits<WebCore::RTCDataChannel>,WTF::DefaultRefDerefTraits<WebCore::RTCDataChannel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RTCDataChannel&>((uint64_t)&v630, v536);
          }
          else
          {
            v553 = v630;
            ++*(_DWORD *)(v536 + 24);
            *((_QWORD *)v553 + v537) = v536;
            HIDWORD(v631) = v537 + 1;
          }
        }
        else
        {
          if (*v301)
            v550 = **v301;
          else
            v550 = 0;
          result = WebCore::JSMediaSourceHandle::toWrapped((uint64_t)v591, v550);
          if (result)
          {
            v151 = (JSC::ArrayBuffer *)result;
            if (*(_BYTE *)(result + 12))
              goto LABEL_1060;
            v551 = HIDWORD(v629);
            if (HIDWORD(v629) == (_DWORD)v629)
            {
              WTF::Vector<WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaSourceHandle&>((uint64_t)&v628, result);
            }
            else
            {
              v556 = v628;
              ++*(_DWORD *)(result + 8);
              *((_QWORD *)v556 + v551) = result;
              HIDWORD(v629) = v551 + 1;
            }
          }
          else
          {
            if (*v301)
              v554 = **v301;
            else
              v554 = 0;
            result = WebCore::JSWebCodecsVideoFrame::toWrapped((uint64_t)v591, v554);
            if (result)
            {
              v151 = (JSC::ArrayBuffer *)result;
              if (*(_BYTE *)(result + 152))
                goto LABEL_1060;
              v555 = HIDWORD(v627);
              if (HIDWORD(v627) == (_DWORD)v627)
              {
                WTF::Vector<WTF::Ref<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WebCodecsVideoFrame&>((uint64_t)&v626, result);
              }
              else
              {
                v559 = v626;
                ++*(_DWORD *)(result + 16);
                *((_QWORD *)v559 + v555) = result;
                HIDWORD(v627) = v555 + 1;
              }
            }
            else
            {
              if (*v301)
                v557 = **v301;
              else
                v557 = 0;
              result = WebCore::JSWebCodecsAudioData::toWrapped((uint64_t)v591, v557);
              if (result)
              {
                v151 = (JSC::ArrayBuffer *)result;
                if (*(_BYTE *)(result + 32))
                  goto LABEL_1060;
                v558 = HIDWORD(v625);
                if (HIDWORD(v625) == (_DWORD)v625)
                {
                  WTF::Vector<WTF::Ref<WebCore::WebCodecsAudioData,WTF::RawPtrTraits<WebCore::WebCodecsAudioData>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsAudioData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WebCodecsAudioData&>((uint64_t)&v624, result);
                }
                else
                {
                  v562 = v624;
                  ++*(_DWORD *)(result + 16);
                  *((_QWORD *)v562 + v558) = result;
                  HIDWORD(v625) = v558 + 1;
                }
              }
              else
              {
                if (*v301)
                  v560 = **v301;
                else
                  v560 = 0;
                result = WebCore::JSMediaStreamTrack::toWrapped((uint64_t)v591, v560);
                if (!result || (v151 = (JSC::ArrayBuffer *)result, *(_BYTE *)(result + 1209)))
                {
LABEL_1060:
                  *(_BYTE *)v302 = 21;
                  *(_QWORD *)(v302 + 8) = 0;
                  goto LABEL_1004;
                }
                v561 = HIDWORD(v623);
                if (HIDWORD(v623) == (_DWORD)v623)
                {
                  WTF::Vector<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaStreamTrack&>((uint64_t)&v622, result);
                }
                else
                {
                  v563 = v622;
                  ++*(_DWORD *)(result + 24);
                  *((_QWORD *)v563 + v561) = result;
                  HIDWORD(v623) = v561 + 1;
                }
              }
            }
          }
        }
      }
    }
LABEL_582:
    ++v301;
    v303 -= 8;
  }
  while (v303);
  v414 = v634;
  v638 = 0;
  a8 = v302;
  v8 = a7;
  if (HIDWORD(v635))
  {
    v415 = 8 * HIDWORD(v635) - 8;
    do
    {
      v416 = *(WTF **)v414;
      v414 = (WTF *)((char *)v414 + 8);
      v665 = v416;
      result = (uint64_t)WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add((uint64_t *)&v668, (uint64_t *)&v638, (uint64_t *)&v665);
      v417 = v669;
      if ((_BYTE)v669)
        v418 = v415 == 0;
      else
        v418 = 1;
      v415 -= 8;
    }
    while (!v418);
    if (v638)
      result = WTF::fastFree((JSC::JSGlobalObject *)((char *)v638 - 16), v151);
    a8 = v302;
    v8 = a7;
    if (!v417)
      goto LABEL_617;
  }
LABEL_2:
  v14 = (WebCore::OffscreenCanvas **)v632;
  v638 = 0;
  if (HIDWORD(v633))
  {
    v316 = 8 * HIDWORD(v633);
    while (1)
    {
      result = WebCore::OffscreenCanvas::canDetach(*v14);
      if (!(_DWORD)result)
        break;
      v665 = *v14;
      result = (uint64_t)WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add((uint64_t *)&v668, (uint64_t *)&v638, (uint64_t *)&v665);
      if (!(_BYTE)v669)
        break;
      ++v14;
      v316 -= 8;
      if (!v316)
      {
        if (v638)
          WTF::fastFree((JSC::JSGlobalObject *)((char *)v638 - 16), v151);
        goto LABEL_3;
      }
    }
    if (v638)
      result = WTF::fastFree((JSC::JSGlobalObject *)((char *)v638 - 16), v151);
    v323 = 8;
LABEL_618:
    *(_BYTE *)a8 = v323;
    *(_QWORD *)(a8 + 8) = 0;
    *(_DWORD *)(a8 + 16) = 1;
    goto LABEL_323;
  }
LABEL_3:
  v15 = (WebCore::RTCDataChannel **)v630;
  v638 = 0;
  if (!HIDWORD(v631))
    goto LABEL_4;
  v317 = 8 * HIDWORD(v631);
  do
  {
    result = WebCore::RTCDataChannel::canDetach(*v15);
    if (!(_DWORD)result
      || (v665 = *v15,
          result = (uint64_t)WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add((uint64_t *)&v668, (uint64_t *)&v638, (uint64_t *)&v665), !(_BYTE)v669))
    {
LABEL_962:
      if (v638)
        result = WTF::fastFree((JSC::JSGlobalObject *)((char *)v638 - 16), v151);
      goto LABEL_617;
    }
    ++v15;
    v317 -= 8;
  }
  while (v317);
  if (v638)
    WTF::fastFree((JSC::JSGlobalObject *)((char *)v638 - 16), v151);
LABEL_4:
  v16 = (WebCore::MediaSourceHandle **)v628;
  v638 = 0;
  if (HIDWORD(v629))
  {
    v318 = 8 * HIDWORD(v629);
    do
    {
      result = WebCore::MediaSourceHandle::canDetach(*v16);
      if (!(_DWORD)result)
        goto LABEL_962;
      v665 = *v16;
      result = (uint64_t)WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add((uint64_t *)&v668, (uint64_t *)&v638, (uint64_t *)&v665);
      if (!(_BYTE)v669)
        goto LABEL_962;
      ++v16;
      v318 -= 8;
    }
    while (v318);
    if (v638)
      WTF::fastFree((JSC::JSGlobalObject *)((char *)v638 - 16), v151);
  }
  v17 = v622;
  v638 = 0;
  if (HIDWORD(v623))
  {
    v319 = 8 * HIDWORD(v623) - 8;
    do
    {
      v320 = *(WTF **)v17;
      v17 = (WTF *)((char *)v17 + 8);
      v665 = v320;
      result = (uint64_t)WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add((uint64_t *)&v668, (uint64_t *)&v638, (uint64_t *)&v665);
      v321 = v669;
      if ((_BYTE)v669)
        v322 = v319 == 0;
      else
        v322 = 1;
      v319 -= 8;
    }
    while (!v322);
    if (v638)
      result = WTF::fastFree((JSC::JSGlobalObject *)((char *)v638 - 16), v151);
    if (!v321)
    {
LABEL_617:
      v323 = 21;
      goto LABEL_618;
    }
  }
  v620 = 0;
  v618 = 0;
  v619 = 0;
  v616 = 0;
  v617 = 0;
  v614 = 0;
  v615 = 0;
  v612 = 0;
  v613 = 0;
  v610 = 0;
  v611 = 0;
  v609 = 0;
  v18 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  v607 = 0;
  v608 = 0;
  v605 = 0;
  v606 = 0;
  v603 = 0;
  v604 = 0;
  v601 = 0;
  v602 = 0;
  v599 = 0;
  v600 = 0;
  WebCore::CloneSerializer::CloneSerializer((uint64_t)&v638, (uint64_t)a1, a4, (unsigned int *)&v636, (uint64_t)&v634, (uint64_t)&v632, (uint64_t)&v615, (uint64_t)&v613, (uint64_t)&v630, (uint64_t)&v628, (uint64_t)&v607, (uint64_t)&v605, (uint64_t)&v603, (uint64_t)&v601, (uint64_t)&v599, (uint64_t)&v611, (uint64_t)&v609, (uint64_t)&v617, (uint64_t)&v619,
    v8,
    v18,
    a5);
  v20 = 0;
  v21 = 0;
  v22 = (_QWORD *)*((_QWORD *)v638 + 7);
  v677 = (WTF *)v679;
  v678 = 16;
  v674 = (WTF *)v676;
  v675 = 16;
  *(_QWORD *)&v668 = &v669;
  *((_QWORD *)&v668 + 1) = 16;
  v665 = (WTF *)v667;
  v666 = 32;
  v662 = (WTF *)v664;
  v23.n128_u64[0] = 4;
  v663 = 4;
  v659 = (WTF *)v661;
  v660 = 4;
  v656 = (WTF *)v658;
  v657 = 4;
  v653 = (WTF *)v655;
  LODWORD(v654) = 16;
  v24 = (WTF *)v655;
  v25 = a2;
  v595 = v22;
  while (2)
  {
    HIDWORD(v654) = v20;
    if (v21)
    {
      switch(v21)
      {
        case 1:
          goto LABEL_472;
        case 2:
          goto LABEL_124;
        case 3:
          if (!HIDWORD(v678))
          {
            __break(0xC471u);
            JUMPOUT(0x1956E3D20);
          }
          ++*((_DWORD *)v677 + HIDWORD(v678) - 1);
          goto LABEL_124;
        case 4:
        case 5:
          __break(0xC471u);
          JUMPOUT(0x1956E20C0);
        case 6:
          goto LABEL_483;
        case 7:
          goto LABEL_177;
        case 8:
          goto LABEL_362;
        case 9:
        case 11:
          goto LABEL_1000;
        case 10:
          if (!HIDWORD(v657))
          {
            __break(0xC471u);
            JUMPOUT(0x1956E3D18);
          }
          v25 = *((_QWORD *)v656 + HIDWORD(v657) - 1);
          --HIDWORD(v657);
          LODWORD(v683) = 11;
          if (v20 == (_DWORD)v654)
          {
            WTF::Vector<WebCore::WalkerState,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WalkerState>((uint64_t)&v653, (unint64_t)&v683);
          }
          else
          {
            *((_DWORD *)v24 + v20) = 11;
            HIDWORD(v654) = v20 + 1;
          }
          v22 = v595;
          break;
        case 12:
        case 13:
          goto LABEL_557;
        default:
          goto LABEL_11;
      }
    }
LABEL_8:
    LODWORD(v683) = 0;
    if (WebCore::CloneSerializer::dumpIfTerminal((WebCore::CloneSerializer *)&v638, (JSC::Structure *)v25, (int *)&v683, v23))
    {
      v26 = (int)v683;
      if (!(_DWORD)v683)
        goto LABEL_10;
      goto LABEL_213;
    }
    if ((v25 & 0xFFFE000000000002) != 0)
      goto LABEL_483;
    v259 = *(unsigned __int8 *)(v25 + 5);
    if (v259 >= 0x17 && (*(_BYTE *)(v25 + 5) & 0xFE) == 0x24)
    {
LABEL_472:
      if (HIDWORD(v666) > 0x9C40)
        goto LABEL_915;
      v78 = 0;
      v652 = (_DWORD *)v25;
      v651 = 0;
      if ((*(_BYTE *)(v25 + 4) & 0xE) != 0)
        v78 = *(_DWORD *)(*(_QWORD *)(v25 + 8) - 8);
      v651 = v78;
      v79 = v650[0];
      if (!v650[0])
      {
        v80 = 0;
        v681 = v25;
LABEL_101:
        v680 = v80;
        WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>((uint64_t)&v683, v650, (unint64_t *)&v681, &v680);
        v81 = v645;
        if (v645 == v646 || v647 != v648 && v647)
        {
          v274.super.isa = (Class)v25;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v645, v274) == 1)
          {
            v644 = 1;
            goto LABEL_519;
          }
        }
        else
        {
          *(_QWORD *)&v647[8 * v645] = v25;
          v645 = v81 + 1;
        }
        if (v644)
        {
LABEL_519:
          __break(0xC471u);
          JUMPOUT(0x1956E1D74);
        }
        WebCore::CloneSerializer::write((char *)v649, 1);
        v82 = v651;
        v83 = v649;
        v84 = *((unsigned int *)v649 + 2);
        v85 = *((unsigned int *)v649 + 3);
        v86 = v85 + 4;
        if (v85 + 4 > v84)
        {
          v227 = v84 + (v84 >> 2);
          if (v227 >= 0x10)
            v228 = v227 + 1;
          else
            v228 = 16;
          if (v228 <= v86)
            v229 = v85 + 4;
          else
            v229 = v228;
          if (HIDWORD(v229))
          {
            __break(0xC471u);
            JUMPOUT(0x1956E3CB4);
          }
          v230 = *(void **)v649;
          v231 = (void *)WTF::fastMalloc((WTF *)v229);
          *((_DWORD *)v83 + 2) = v229;
          *(_QWORD *)v83 = v231;
          memcpy(v231, v230, v85);
          if (v230)
          {
            if (*(void **)v83 == v230)
            {
              *(_QWORD *)v83 = 0;
              *((_DWORD *)v83 + 2) = 0;
            }
            WTF::fastFree((WTF *)v230, v232);
          }
        }
        v87 = *((unsigned int *)v83 + 3);
        if (v86 < v87)
        {
          __break(0xC471u);
          JUMPOUT(0x1956E3D28);
        }
        *(_DWORD *)(*(_QWORD *)v83 + v87) = v82;
        *((_DWORD *)v83 + 3) = v86;
        v88 = HIDWORD(v666);
        if (HIDWORD(v666) == (_DWORD)v666)
        {
          WTF::Vector<JSC::JSObject *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSArray *&>((uint64_t)&v665, &v652);
        }
        else
        {
          *((_QWORD *)v665 + HIDWORD(v666)) = v25;
          HIDWORD(v666) = v88 + 1;
        }
        v22 = v595;
        LODWORD(v683) = 0;
        if (HIDWORD(v678) == (_DWORD)v678)
        {
          WTF::Vector<unsigned int,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)&v677, &v683);
        }
        else
        {
          *((_DWORD *)v677 + HIDWORD(v678)) = 0;
          ++HIDWORD(v678);
        }
        if (HIDWORD(v675) == (_DWORD)v675)
        {
          WTF::Vector<unsigned int,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v674, (unint64_t)&v651);
        }
        else
        {
          *((_DWORD *)v674 + HIDWORD(v675)) = v651;
          ++HIDWORD(v675);
        }
LABEL_124:
        while (2)
        {
          if (!HIDWORD(v666))
          {
            __break(0xC471u);
            JUMPOUT(0x1956E3C4CLL);
          }
          if (!HIDWORD(v678))
          {
            __break(0xC471u);
            JUMPOUT(0x1956E3C54);
          }
          if (!HIDWORD(v675))
          {
            __break(0xC471u);
            JUMPOUT(0x1956E3C5CLL);
          }
          v96 = *((_DWORD *)v677 + HIDWORD(v678) - 1);
          if (v96 == *((_DWORD *)v674 + HIDWORD(v675) - 1))
          {
            --HIDWORD(v678);
            --HIDWORD(v675);
            WebCore::CloneSerializer::write((uint64_t)v649, -1);
            v262 = WTF::fastMalloc((WTF *)0xB8);
            *(_DWORD *)v262 = 1;
            *(_QWORD *)(v262 + 8) = v262 + 24;
            *(_QWORD *)(v262 + 16) = 20;
            v683 = (WTF *)v262;
            v684 = 0;
            v685 = (WTF *)v22;
            LOWORD(v686) = 258;
            if (HIDWORD(v668) == DWORD2(v668))
            {
              WTF::Vector<JSC::PropertyNameArray,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PropertyNameArray>((uint64_t)&v668, (unint64_t)&v683);
            }
            else
            {
              v264 = v668 + 32 * HIDWORD(v668);
              v683 = 0;
              *(_QWORD *)v264 = v262;
              *(_QWORD *)(v264 + 8) = 0;
              v265 = v684;
              v684 = 0;
              *(_QWORD *)(v264 + 8) = v265;
              v266 = v685;
              *(_WORD *)(v264 + 24) = (_WORD)v686;
              *(_QWORD *)(v264 + 16) = v266;
              ++HIDWORD(v668);
            }
            JSC::PropertyNameArray::~PropertyNameArray((JSC::PropertyNameArray *)&v683, v263);
            if (!HIDWORD(v668))
            {
              __break(0xC471u);
              JUMPOUT(0x1956E3D70);
            }
            JSC::JSObject::getOwnNonIndexPropertyNames();
            if (v22[2])
              goto LABEL_363;
            if (!HIDWORD(v668))
            {
              __break(0xC471u);
              JUMPOUT(0x1956E3D78);
            }
            v267 = HIDWORD(v668) - 1;
            if (!*(_DWORD *)(*(_QWORD *)(v668 + 32 * v267) + 20))
            {
              WTF::VectorDestructor<true,JSC::PropertyNameArray>::destruct(v668 + 32 * v267, (uint64_t *)(v668 + 32 * HIDWORD(v668)));
              HIDWORD(v668) = v267;
              WebCore::CloneSerializer::endObject((uint64_t)v649);
              if (!HIDWORD(v666))
              {
                __break(0xC471u);
                JUMPOUT(0x1956E3D80);
              }
              --HIDWORD(v666);
              goto LABEL_10;
            }
            WebCore::CloneSerializer::write((uint64_t)v649, -3);
            LODWORD(v683) = 0;
            if (HIDWORD(v678) == (_DWORD)v678)
            {
              WTF::Vector<unsigned int,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)&v677, &v683);
            }
            else
            {
              *((_DWORD *)v677 + HIDWORD(v678)) = 0;
              ++HIDWORD(v678);
            }
            v103 = 7;
          }
          else
          {
            DirectIndex = JSC::JSObject::getDirectIndex(*((JSC::JSObject **)v665 + HIDWORD(v666) - 1), v638, *((unsigned int *)v677 + HIDWORD(v678) - 1));
            if (v22[2])
              goto LABEL_363;
            v25 = DirectIndex;
            if (DirectIndex)
            {
              v98 = v649;
              v99 = *((unsigned int *)v649 + 2);
              v100 = *((unsigned int *)v649 + 3);
              v101 = v100 + 4;
              if (v100 + 4 > v99)
              {
                v89 = DirectIndex;
                v90 = v99 + (v99 >> 2);
                if (v90 >= 0x10)
                  v91 = v90 + 1;
                else
                  v91 = 16;
                if (v91 <= v101)
                  v92 = v100 + 4;
                else
                  v92 = v91;
                if (HIDWORD(v92))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1956E3C74);
                }
                v93 = *(void **)v649;
                v94 = (void *)WTF::fastMalloc((WTF *)v92);
                *((_DWORD *)v98 + 2) = v92;
                *(_QWORD *)v98 = v94;
                memcpy(v94, v93, v100);
                v25 = v89;
                v22 = v595;
                if (v93)
                {
                  if (*(void **)v98 == v93)
                  {
                    *(_QWORD *)v98 = 0;
                    *((_DWORD *)v98 + 2) = 0;
                  }
                  WTF::fastFree((WTF *)v93, v95);
                }
              }
              v102 = *((unsigned int *)v98 + 3);
              if (v101 < v102)
              {
                __break(0xC471u);
                JUMPOUT(0x1956E3C3CLL);
              }
              *(_DWORD *)(*(_QWORD *)v98 + v102) = v96;
              *((_DWORD *)v98 + 3) = v101;
              LODWORD(v683) = 0;
              if (WebCore::CloneSerializer::dumpIfTerminal((WebCore::CloneSerializer *)&v638, (JSC::Structure *)v25, (int *)&v683, v23))
              {
                if ((_DWORD)v683)
                {
                  v103 = 1;
                  v594 = (int)v683;
                }
                else
                {
                  if (!HIDWORD(v678))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1956E3C44);
                  }
                  ++*((_DWORD *)v677 + HIDWORD(v678) - 1);
                  v103 = 6;
                }
              }
              else
              {
                LODWORD(v681) = 3;
                v272 = HIDWORD(v654);
                if (HIDWORD(v654) == (_DWORD)v654)
                {
                  WTF::Vector<WebCore::WalkerState,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WalkerState>((uint64_t)&v653, (unint64_t)&v681);
                }
                else
                {
                  *((_DWORD *)v653 + HIDWORD(v654)) = 3;
                  HIDWORD(v654) = v272 + 1;
                }
                v103 = 8;
              }
LABEL_136:
              if (v103 != 6)
                goto LABEL_171;
              continue;
            }
            if (!HIDWORD(v678))
            {
              __break(0xC471u);
              JUMPOUT(0x1956E3CC4);
            }
            v25 = 0;
            ++*((_DWORD *)v677 + HIDWORD(v678) - 1);
            v103 = 6;
          }
          break;
        }
        v22 = v595;
        goto LABEL_136;
      }
      v205 = *(_DWORD *)(v650[0] - 8);
      v206 = (v25 + ~(v25 << 32)) ^ ((unint64_t)(v25 + ~(v25 << 32)) >> 22);
      v207 = 9 * ((v206 + ~(v206 << 13)) ^ ((v206 + ~(v206 << 13)) >> 8));
      v208 = (v207 ^ (v207 >> 15)) + ~((v207 ^ (v207 >> 15)) << 27);
      v140 = v205 & ((v208 >> 31) ^ v208);
      v209 = *(_QWORD *)(v650[0] + 16 * v140);
      if (v209 != v25)
      {
        v210 = 1;
        while (v209)
        {
          v140 = ((_DWORD)v140 + v210) & v205;
          v209 = *(_QWORD *)(v650[0] + 16 * v140);
          ++v210;
          if (v209 == v25)
            goto LABEL_208;
        }
        v140 = *(unsigned int *)(v650[0] - 4);
      }
LABEL_208:
      if (v140 == *(_DWORD *)(v650[0] - 4))
      {
        v681 = v25;
        v80 = *(_DWORD *)(v650[0] - 12);
        goto LABEL_101;
      }
      WebCore::CloneSerializer::write((char *)v649, 19);
      WebCore::CloneSerializer::writeConstantPoolIndex<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>((char *)&v638, v650[0], *(_DWORD *)(v79 + 16 * v140 + 8));
LABEL_506:
      v22 = v595;
LABEL_10:
      v20 = HIDWORD(v654);
LABEL_11:
      if (v20)
      {
        v24 = v653;
        v21 = *((_DWORD *)v653 + --v20);
        continue;
      }
      if ((_BYTE)v639)
        v26 = 6;
      else
        v26 = 0;
      goto LABEL_213;
    }
    break;
  }
  if (v259 == 70)
  {
    if (HIDWORD(v666) > 0x9C40)
      goto LABEL_915;
    v268 = v650[0];
    v269 = WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::find(v650[0], v25);
    v270 = v269;
    if (v268)
    {
      if (v268 + 16 * *(unsigned int *)(v268 - 4) != v269)
      {
LABEL_499:
        WebCore::CloneSerializer::write((char *)v649, 19);
        WebCore::CloneSerializer::writeConstantPoolIndex<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>((char *)&v638, v650[0], *(_DWORD *)(v270 + 8));
        goto LABEL_10;
      }
      v681 = v25;
      v271 = *(_DWORD *)(v268 - 12);
    }
    else
    {
      if (v269)
        goto LABEL_499;
      v271 = 0;
      v681 = v25;
    }
    LODWORD(v652) = v271;
    WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>((uint64_t)&v683, v650, (unint64_t *)&v681, (unsigned __int32 *)&v652);
    v275 = v645;
    if (v645 == v646 || v647 != v648 && v647)
    {
      v529.super.isa = (Class)v25;
      if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v645, v529) == 1)
      {
        v644 = 1;
LABEL_983:
        __break(0xC471u);
        JUMPOUT(0x1956E36A0);
      }
    }
    else
    {
      *(_QWORD *)&v647[8 * v645] = v25;
      v645 = v275 + 1;
    }
    if (v644)
      goto LABEL_983;
    WebCore::CloneSerializer::write((char *)v649, 29);
    v683 = 0;
    v276 = *((_DWORD *)v638 + 252);
    if (v276)
      v277 = 16 * (v276 & 0xFFFFFFFE);
    else
      v277 = 0;
    v278 = (objc_class *)JSC::JSSetIterator::create((uint64_t)v638, v277);
    v683 = v278;
    if (v22[2])
      goto LABEL_363;
    v279.super.isa = v278;
    JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::appendWithCrashOnOverflow((uint64_t)&v640, v279);
    v280 = HIDWORD(v660);
    if (HIDWORD(v660) == (_DWORD)v660)
    {
      v281 = (_QWORD *)WTF::Vector<JSC::JSMapIterator *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v659, HIDWORD(v660) + 1, (unint64_t)&v683);
      v280 = HIDWORD(v660);
      *((_QWORD *)v659 + HIDWORD(v660)) = *v281;
    }
    else
    {
      *((_QWORD *)v659 + HIDWORD(v660)) = v683;
    }
    HIDWORD(v660) = v280 + 1;
    v282 = HIDWORD(v666);
    if (HIDWORD(v666) == (_DWORD)v666)
    {
      v283 = HIDWORD(v666) + ((unint64_t)HIDWORD(v666) >> 2);
      if (v283 >= 0x10)
        v284 = v283 + 1;
      else
        v284 = 16;
      if (v284 <= (unint64_t)HIDWORD(v666) + 1)
        v285 = HIDWORD(v666) + 1;
      else
        v285 = v284;
      v286 = v665;
      if (v285 < 0x21)
      {
        v665 = (WTF *)v667;
        LODWORD(v666) = 32;
        v287 = (WTF *)v667;
      }
      else
      {
        if (v285 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1956E3CBCLL);
        }
        v287 = (WTF *)WTF::fastMalloc((WTF *)(8 * v285));
        LODWORD(v666) = v285;
        v665 = v287;
      }
      memcpy(v287, v286, 8 * v282);
      if (v667 != (_BYTE *)v286 && v286)
      {
        if (v665 == v286)
        {
          v665 = 0;
          LODWORD(v666) = 0;
        }
        WTF::fastFree(v286, v295);
      }
      LODWORD(v282) = HIDWORD(v666);
      v288 = (uint64_t *)((char *)v665 + 8 * HIDWORD(v666));
    }
    else
    {
      v288 = (uint64_t *)((char *)v665 + 8 * HIDWORD(v666));
    }
    *v288 = v25;
    HIDWORD(v666) = v282 + 1;
LABEL_557:
    v587 = v18;
    v589 = a8;
    v585 = v8;
    v583 = v25;
    if (!HIDWORD(v660))
    {
      __break(0xC471u);
      JUMPOUT(0x1956E2010);
    }
    v291 = &v684;
    v292 = (WTF *)v687;
    v19 = &v686;
    v47 = *((_QWORD *)v659 + HIDWORD(v660) - 1);
    v290 = v638;
    v289 = (JSC::VM *)*((_QWORD *)v638 + 7);
    v48 = (uint64_t *)((char *)v289 + 41840);
    v49 = *(_QWORD *)(v47 + 32);
    v50 = *((_QWORD *)v289 + 5231);
    if (!v50)
    {
      v580 = v638;
      v577 = (JSC::VM *)*((_QWORD *)v638 + 7);
      v50 = JSC::VM::orderedHashTableSentinelSlow(v577);
      v289 = v577;
      v290 = v580;
      v19 = &v686;
      v291 = &v684;
      v292 = (WTF *)v687;
    }
    if (v50 != v49)
    {
      v42 = *(_DWORD *)(v47 + 16);
      v51 = *(_QWORD *)(v49 + 16);
      v52 = v51 & 0xFFFE000000000002;
      v53 = v51 == 0;
      v54 = v49;
      while (!v53 && v52 == 0)
      {
        if (v42)
        {
          v56 = *(_DWORD *)(v54 + 24);
          if (v56 == -1)
          {
            v42 = 0;
          }
          else
          {
            v57 = v56 + 2;
            if (v56)
              v58 = v57 >= 3;
            else
              v58 = 0;
            if (v58)
            {
              v59 = 0;
              v60 = v42 - v56;
              v61 = (unsigned int *)(v54 + 32);
              v62 = 2 - v57;
              while (1)
              {
                v63 = *v61;
                v61 += 2;
                if (v42 <= v63)
                  break;
                if (v62 == --v59)
                {
                  v42 = v60;
                  goto LABEL_53;
                }
              }
              v42 += v59;
            }
          }
        }
LABEL_53:
        v54 = v51;
        v51 = *(_QWORD *)(v51 + 16);
        v52 = v51 & 0xFFFE000000000002;
        v53 = v51 == 0;
      }
      v104 = *(_DWORD *)(v54 + 24) + v51;
      if (v42 < v104)
      {
        v43 = *(_DWORD *)(v54 + 32) + 2 * v42 + 4;
        while (1)
        {
          v40 = *(_QWORD *)(v54 + 16 + 8 * v43);
          if ((v40 & 0xFFFE000000000002) != 0)
            break;
          v41 = *v48;
          if (!*v48)
          {
            v578 = v290;
            v581 = v292;
            v574 = v19;
            v575 = v291;
            v576 = v289;
            v41 = JSC::VM::orderedHashTableDeletedValueSlow(v289);
            v289 = v576;
            v290 = v578;
            v19 = v574;
            v291 = v575;
            v292 = v581;
          }
          if (v41 != v40)
            break;
          ++v42;
          v43 += 2;
          if (v104 == v42)
            goto LABEL_139;
        }
        *(_QWORD *)(v47 + 16) = (v42 + 1) | 0xFFFE000000000000;
        if (v54 != v49)
        {
          *(_QWORD *)(v47 + 32) = v54;
          if ((v54 & 0xFFFE000000000002) == 0
            && *((_DWORD *)v289 + 190) >= *(unsigned __int8 *)(v47 + 7))
          {
            v516 = v19;
            v517 = v292;
            v518 = v291;
            v519 = v290;
            JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)v289 + 192), (const JSCell *)v47);
            v19 = v516;
            v290 = v519;
            v291 = v518;
            v292 = v517;
          }
        }
        v18 = v587;
        v8 = v585;
        v25 = v583;
        if (v40)
        {
          v212 = *(_QWORD *)(v47 + 40);
          v213 = (int)v212 > -1 && v212 > 0xFFFDFFFFFFFFFFFFLL;
          v23.n128_u64[0] = v212 - 0x2000000000000;
          if (!v213)
            LODWORD(v212) = COERCE_DOUBLE(v212 - 0x2000000000000);
          if (v212 >= 2)
          {
            v25 = 0;
            a8 = v589;
            if ((_DWORD)v212 == 2)
            {
              v245 = (uint64_t)v291;
              LOBYTE(v683) = 0;
              v19[8] = 0;
              *((_OWORD *)v19 + 2) = 0u;
              *((_OWORD *)v19 + 3) = 0u;
              *(_OWORD *)v19 = 0u;
              *((_OWORD *)v19 + 1) = 0u;
              v685 = v292;
              v687[0] = v40;
              v687[1] = v40;
              v684 = 0x800000002;
              v246 = (JSC::VM *)*((_QWORD *)v290 + 7);
              v247 = v292;
              v681 = (uint64_t)v292;
              v682 = 2;
              if (!*((_DWORD *)v246 + 20) || (v25 = 0, (JSC::VM::hasExceptionsAfterHandlingTraps(v246) & 1) == 0))
                v25 = JSC::constructArray();
              v248 = v686;
              v249 = v247;
              if (v686)
              {
                v681 = v245;
                v538 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v686, &v681);
                WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v248, v538);
                v249 = v247;
              }
              if (v685 != v249 && v685)
                WTF::fastFree(v685, v19);
            }
          }
          else
          {
            v25 = v40;
            a8 = v589;
          }
          LODWORD(v683) = 13;
          v214 = HIDWORD(v654);
          if (HIDWORD(v654) == (_DWORD)v654)
          {
            WTF::Vector<WebCore::WalkerState,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WalkerState>((uint64_t)&v653, (unint64_t)&v683);
          }
          else
          {
            *((_DWORD *)v653 + HIDWORD(v654)) = 13;
            HIDWORD(v654) = v214 + 1;
          }
          v22 = v595;
          v103 = 8;
LABEL_171:
          if (v103 == 7)
            goto LABEL_177;
          if (v103 != 8)
            goto LABEL_214;
          goto LABEL_8;
        }
      }
      else
      {
LABEL_139:
        v105 = v48[1];
        if (!v105)
        {
          v299 = v289;
          v105 = JSC::VM::orderedHashTableSentinelSlow(v289);
          v289 = v299;
        }
        *(_QWORD *)(v47 + 32) = v105;
        v18 = v587;
        v8 = v585;
        v25 = v583;
        if (v105
          && (v105 & 0xFFFE000000000002) == 0
          && *((_DWORD *)v289 + 190) >= *(unsigned __int8 *)(v47 + 7))
        {
          JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)v289 + 192), (const JSCell *)v47);
        }
      }
    }
    if (!HIDWORD(v660))
    {
      __break(0xC471u);
      JUMPOUT(0x1956E3C7CLL);
    }
    --HIDWORD(v660);
    a8 = v589;
    v22 = v595;
    if (!HIDWORD(v666))
    {
      __break(0xC471u);
      JUMPOUT(0x1956E3C84);
    }
    v106 = (_DWORD *)*((_QWORD *)v665 + HIDWORD(v666) - 1);
    v107 = WTF::fastMalloc((WTF *)0xB8);
    *(_DWORD *)v107 = 1;
    *(_QWORD *)(v107 + 8) = v107 + 24;
    *(_QWORD *)(v107 + 16) = 20;
    v683 = (WTF *)v107;
    v684 = 0;
    v685 = (WTF *)v595;
    LOWORD(v686) = 258;
    if (HIDWORD(v668) == DWORD2(v668))
    {
      WTF::Vector<JSC::PropertyNameArray,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PropertyNameArray>((uint64_t)&v668, (unint64_t)&v683);
    }
    else
    {
      v109 = v668 + 32 * HIDWORD(v668);
      v683 = 0;
      *(_QWORD *)v109 = v107;
      *(_QWORD *)(v109 + 8) = 0;
      v110 = v684;
      v684 = 0;
      *(_QWORD *)(v109 + 8) = v110;
      v111 = v685;
      *(_WORD *)(v109 + 24) = (_WORD)v686;
      *(_QWORD *)(v109 + 16) = v111;
      ++HIDWORD(v668);
    }
    if (v684)
      WTF::fastFree((WTF *)(v684 - 16), v108);
    v112 = (uint64_t)v683;
    v683 = 0;
    if (v112)
    {
      if (*(_DWORD *)v112 == 1)
      {
        v239 = *(unsigned int *)(v112 + 20);
        if ((_DWORD)v239)
        {
          v240 = *(WTF::StringImpl ***)(v112 + 8);
          v241 = 8 * v239;
          do
          {
            v242 = *v240;
            *v240 = 0;
            if (v242)
            {
              if (*(_DWORD *)v242 == 2)
                WTF::StringImpl::destroy(v242, (WTF::StringImpl *)v108);
              else
                *(_DWORD *)v242 -= 2;
            }
            ++v240;
            v241 -= 8;
          }
          while (v241);
        }
        v243 = *(WTF **)(v112 + 8);
        if ((WTF *)(v112 + 24) != v243 && v243 != 0)
        {
          *(_QWORD *)(v112 + 8) = 0;
          *(_DWORD *)(v112 + 16) = 0;
          WTF::fastFree(v243, v108);
        }
        WTF::fastFree((WTF *)v112, v108);
      }
      else
      {
        --*(_DWORD *)v112;
      }
    }
    if (!HIDWORD(v668))
    {
      __break(0xC471u);
      JUMPOUT(0x1956E3C8CLL);
    }
    (*(void (**)(_DWORD *, JSC::JSGlobalObject *, uint64_t, uint64_t))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*v106 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0x78))(v106, v638, v668 + 32 * HIDWORD(v668) - 32, 1);
    if (v595[2])
      goto LABEL_363;
    v113 = (char *)v649;
    v114 = 32;
LABEL_168:
    WebCore::CloneSerializer::write(v113, v114);
    LODWORD(v683) = 0;
    if (HIDWORD(v678) == (_DWORD)v678)
    {
      WTF::Vector<unsigned int,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)&v677, &v683);
    }
    else
    {
      *((_DWORD *)v677 + HIDWORD(v678)) = 0;
      ++HIDWORD(v678);
    }
    v103 = 7;
    goto LABEL_171;
  }
  if (v259 == 69)
  {
    if (HIDWORD(v666) > 0x9C40)
      goto LABEL_915;
    if (!WebCore::CloneSerializer::addToObjectPoolIfNotDupe<(WebCore::SerializationTag)30,(WebCore::SerializationTag)255,(WebCore::SerializationTag)255>((uint64_t)&v638, (objc_class *)v25))
    {
      v22 = v595;
      goto LABEL_10;
    }
    WebCore::CloneSerializer::write((char *)v649, 30);
    v683 = 0;
    v498 = *((_DWORD *)v638 + 251);
    if (v498)
      v499 = 16 * (v498 & 0xFFFFFFFE);
    else
      v499 = 0;
    v500 = (objc_class *)JSC::JSMapIterator::create((uint64_t)v638, v499);
    v683 = v500;
    if (v595[2])
      goto LABEL_363;
    v501.super.isa = v500;
    v502 = v641[0];
    if (v641[0] == v641[1] || v642 != &v643 && v642)
    {
      if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)v641, v501) == 1)
      {
        LOBYTE(v640) = 1;
LABEL_1051:
        __break(0xC471u);
        JUMPOUT(0x1956E3B1CLL);
      }
    }
    else
    {
      v642[v641[0]] = (uint64_t)v500;
      v641[0] = v502 + 1;
    }
    if ((_BYTE)v640)
      goto LABEL_1051;
    v503 = HIDWORD(v663);
    if (HIDWORD(v663) == (_DWORD)v663)
    {
      v504 = (_QWORD *)WTF::Vector<JSC::JSMapIterator *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v662, HIDWORD(v663) + 1, (unint64_t)&v683);
      v503 = HIDWORD(v663);
      *((_QWORD *)v662 + HIDWORD(v663)) = *v504;
    }
    else
    {
      *((_QWORD *)v662 + HIDWORD(v663)) = v683;
    }
    HIDWORD(v663) = v503 + 1;
    v522 = HIDWORD(v666);
    if (HIDWORD(v666) == (_DWORD)v666)
    {
      v523 = HIDWORD(v666) + ((unint64_t)HIDWORD(v666) >> 2);
      if (v523 >= 0x10)
        v524 = v523 + 1;
      else
        v524 = 16;
      if (v524 <= (unint64_t)HIDWORD(v666) + 1)
        v525 = HIDWORD(v666) + 1;
      else
        v525 = v524;
      v526 = v665;
      if (v525 < 0x21)
      {
        v527 = (WTF *)v667;
        v665 = (WTF *)v667;
        LODWORD(v666) = 32;
      }
      else
      {
        if (v525 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1956E3CCCLL);
        }
        v527 = (WTF *)WTF::fastMalloc((WTF *)(8 * v525));
        LODWORD(v666) = v525;
        v665 = v527;
      }
      memcpy(v527, v526, 8 * v522);
      if (v667 != (_BYTE *)v526 && v526)
      {
        if (v665 == v526)
        {
          v665 = 0;
          LODWORD(v666) = 0;
        }
        WTF::fastFree(v526, v534);
      }
      LODWORD(v522) = HIDWORD(v666);
      v528 = (uint64_t *)((char *)v665 + 8 * HIDWORD(v666));
    }
    else
    {
      v528 = (uint64_t *)((char *)v665 + 8 * HIDWORD(v666));
    }
    *v528 = v25;
    HIDWORD(v666) = v522 + 1;
    v22 = v595;
LABEL_1000:
    v588 = v18;
    v590 = a8;
    v586 = v8;
    v584 = v25;
    if (!HIDWORD(v663))
    {
      __break(0xC471u);
      JUMPOUT(0x1956E378CLL);
    }
    v293 = *((_QWORD *)v662 + HIDWORD(v663) - 1);
    v681 = 0;
    v294 = (JSC::VM *)*((_QWORD *)v638 + 7);
    v64 = (uint64_t *)((char *)v294 + 41840);
    v65 = *(_QWORD *)(v293 + 32);
    v66 = *((_QWORD *)v294 + 5231);
    if (!v66)
    {
      v296 = v293;
      v297 = (JSC::VM *)*((_QWORD *)v638 + 7);
      v298 = JSC::VM::orderedHashTableSentinelSlow(v297);
      v294 = v297;
      v293 = v296;
      v66 = v298;
    }
    if (v66 != v65)
    {
      v39 = *(_DWORD *)(v293 + 16);
      v211 = v65 + 16;
      v28 = *(_QWORD *)(v65 + 16);
      if (v28)
        v67 = (v28 & 0xFFFE000000000002) == 0;
      else
        v67 = 0;
      if (v67)
      {
        v30 = v65;
        do
        {
          v27 = v28;
          if (v39)
          {
            v31 = *(_DWORD *)(v30 + 24);
            if (v31 == -1)
            {
              v39 = 0;
            }
            else
            {
              v32 = v31 + 2;
              if (v31)
                v33 = v32 >= 3;
              else
                v33 = 0;
              if (v33)
              {
                v34 = 0;
                v35 = v39 - v31;
                v36 = (unsigned int *)(v30 + 32);
                v37 = 2 - v32;
                while (1)
                {
                  v38 = *v36;
                  v36 += 2;
                  if (v39 <= v38)
                    break;
                  if (v37 == --v34)
                  {
                    v39 = v35;
                    goto LABEL_14;
                  }
                }
                v39 += v34;
              }
            }
          }
LABEL_14:
          v28 = *(_QWORD *)(v27 + 16);
          if (v28)
            v29 = (v28 & 0xFFFE000000000002) == 0;
          else
            v29 = 0;
          v30 = v27;
        }
        while (v29);
        v211 = v27 + 16;
      }
      else
      {
        v27 = v65;
      }
      v115 = *(_DWORD *)(v27 + 24) + v28;
      if (v39 >= v115)
        goto LABEL_155;
      v46 = 3 * v39 + *(_DWORD *)(v27 + 32) + 5;
      while (1)
      {
        v44 = *(_QWORD *)(v211 + 8 * (v46 - 1));
        if ((v44 & 0xFFFE000000000002) != 0)
          goto LABEL_384;
        v45 = *v64;
        if (!*v64)
        {
          v579 = v294;
          v582 = v293;
          v45 = JSC::VM::orderedHashTableDeletedValueSlow(v294);
          v294 = v579;
          v293 = v582;
        }
        if (v45 != v44)
          break;
        ++v39;
        v46 += 3;
        if (v115 == v39)
          goto LABEL_155;
      }
      if (v27)
      {
LABEL_384:
        v215 = *(objc_class **)(v211 + 8 * v46);
        *(_QWORD *)(v293 + 16) = (v39 + 1) | 0xFFFE000000000000;
        if (v27 != v65)
        {
          *(_QWORD *)(v293 + 32) = v27;
          if ((v27 & 0xFFFE000000000002) == 0
            && *((_DWORD *)v294 + 190) >= *(unsigned __int8 *)(v293 + 7))
          {
            JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)v294 + 192), (const JSCell *)v293);
          }
        }
        v8 = v586;
        v25 = v584;
        v22 = v595;
        if (v44)
        {
          v681 = (uint64_t)v215;
          v216.super.isa = v215;
          JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::appendWithCrashOnOverflow((uint64_t)&v640, v216);
          v217 = HIDWORD(v657);
          if (HIDWORD(v657) == (_DWORD)v657)
          {
            v218 = (uint64_t *)WTF::Vector<JSC::JSValue,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v656, (void *)(HIDWORD(v657) + 1), (unint64_t)&v681);
            v217 = HIDWORD(v657);
            v219 = v656;
            v220 = *v218;
          }
          else
          {
            v219 = v656;
            v220 = v681;
          }
          *((_QWORD *)v219 + v217) = v220;
          a8 = v590;
          ++HIDWORD(v657);
          LODWORD(v683) = 10;
          v260 = HIDWORD(v654);
          if (HIDWORD(v654) == (_DWORD)v654)
          {
            WTF::Vector<WebCore::WalkerState,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WalkerState>((uint64_t)&v653, (unint64_t)&v683);
          }
          else
          {
            *((_DWORD *)v653 + HIDWORD(v654)) = 10;
            HIDWORD(v654) = v260 + 1;
          }
          v103 = 8;
          v25 = v44;
          v18 = v588;
          goto LABEL_171;
        }
      }
      else
      {
LABEL_155:
        *(_QWORD *)(v293 + 32) = v66;
        v8 = v586;
        v25 = v584;
        v22 = v595;
        if (v66
          && (v66 & 0xFFFE000000000002) == 0
          && *((_DWORD *)v294 + 190) >= *(unsigned __int8 *)(v293 + 7))
        {
          JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)v294 + 192), (const JSCell *)v293);
        }
      }
    }
    if (!HIDWORD(v663))
    {
      __break(0xC471u);
      JUMPOUT(0x1956E3C94);
    }
    --HIDWORD(v663);
    v18 = v588;
    a8 = v590;
    if (!HIDWORD(v666))
    {
      __break(0xC471u);
      JUMPOUT(0x1956E3C9CLL);
    }
    v116 = (_DWORD *)*((_QWORD *)v665 + HIDWORD(v666) - 1);
    v117 = WTF::fastMalloc((WTF *)0xB8);
    *(_DWORD *)v117 = 1;
    *(_QWORD *)(v117 + 8) = v117 + 24;
    *(_QWORD *)(v117 + 16) = 20;
    v683 = (WTF *)v117;
    v684 = 0;
    v685 = (WTF *)v22;
    LOWORD(v686) = 258;
    if (HIDWORD(v668) == DWORD2(v668))
    {
      WTF::Vector<JSC::PropertyNameArray,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PropertyNameArray>((uint64_t)&v668, (unint64_t)&v683);
    }
    else
    {
      v119 = v668 + 32 * HIDWORD(v668);
      v683 = 0;
      *(_QWORD *)v119 = v117;
      *(_QWORD *)(v119 + 8) = 0;
      v120 = v684;
      v684 = 0;
      *(_QWORD *)(v119 + 8) = v120;
      v121 = v685;
      *(_WORD *)(v119 + 24) = (_WORD)v686;
      *(_QWORD *)(v119 + 16) = v121;
      ++HIDWORD(v668);
    }
    if (v684)
      WTF::fastFree((WTF *)(v684 - 16), v118);
    v122 = (uint64_t)v683;
    v683 = 0;
    if (v122)
    {
      if (*(_DWORD *)v122 == 1)
      {
        v233 = *(unsigned int *)(v122 + 20);
        if ((_DWORD)v233)
        {
          v234 = *(WTF::StringImpl ***)(v122 + 8);
          v235 = 8 * v233;
          do
          {
            v236 = *v234;
            *v234 = 0;
            if (v236)
            {
              if (*(_DWORD *)v236 == 2)
                WTF::StringImpl::destroy(v236, (WTF::StringImpl *)v118);
              else
                *(_DWORD *)v236 -= 2;
            }
            ++v234;
            v235 -= 8;
          }
          while (v235);
        }
        v237 = *(WTF **)(v122 + 8);
        if ((WTF *)(v122 + 24) != v237 && v237 != 0)
        {
          *(_QWORD *)(v122 + 8) = 0;
          *(_DWORD *)(v122 + 16) = 0;
          WTF::fastFree(v237, v118);
        }
        WTF::fastFree((WTF *)v122, v118);
      }
      else
      {
        --*(_DWORD *)v122;
      }
    }
    if (!HIDWORD(v668))
    {
      __break(0xC471u);
      JUMPOUT(0x1956E3CA4);
    }
    (*(void (**)(_DWORD *, JSC::JSGlobalObject *, uint64_t, uint64_t))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*v116 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0x78))(v116, v638, v668 + 32 * HIDWORD(v668) - 32, 1);
    if (v22[2])
      goto LABEL_363;
    v113 = (char *)v649;
    v114 = 31;
    goto LABEL_168;
  }
LABEL_483:
  if (HIDWORD(v666) > 0x9C40)
  {
LABEL_915:
    v26 = 1;
    goto LABEL_213;
  }
  v652 = (_DWORD *)v25;
  v68 = v650[0];
  if (v650[0])
  {
    v195 = v25;
    v196 = v8;
    v197 = *(_DWORD *)(v650[0] - 8);
    v198 = (v195 + ~(v195 << 32)) ^ ((unint64_t)(v195 + ~(v195 << 32)) >> 22);
    v199 = 9 * ((v198 + ~(v198 << 13)) ^ ((v198 + ~(v198 << 13)) >> 8));
    v200 = (v199 ^ (v199 >> 15)) + ~((v199 ^ (v199 >> 15)) << 27);
    v201 = v197 & ((v200 >> 31) ^ v200);
    v202 = *(_QWORD *)(v650[0] + 16 * v201);
    v203 = v195;
    if (v202 != v195)
    {
      v204 = 1;
      while (v202)
      {
        v201 = ((_DWORD)v201 + v204) & v197;
        v202 = *(_QWORD *)(v650[0] + 16 * v201);
        ++v204;
        if (v202 == v195)
          goto LABEL_355;
      }
      v201 = *(unsigned int *)(v650[0] - 4);
    }
LABEL_355:
    if (v201 != *(_DWORD *)(v650[0] - 4))
    {
      WebCore::CloneSerializer::write((char *)v649, 19);
      WebCore::CloneSerializer::writeConstantPoolIndex<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>((char *)&v638, v650[0], *(_DWORD *)(v68 + 16 * v201 + 8));
      v8 = v196;
      v25 = v203;
      goto LABEL_506;
    }
    v681 = v195;
    v69 = *(_DWORD *)(v650[0] - 12);
    v8 = v196;
    v25 = v195;
  }
  else
  {
    v69 = 0;
    v681 = v25;
  }
  v680 = v69;
  WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>((uint64_t)&v683, v650, (unint64_t *)&v681, &v680);
  v70 = v645;
  v22 = v595;
  if (v645 == v646 || v647 != v648 && v647)
  {
    v273.super.isa = (Class)v25;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v645, v273) == 1)
    {
      v644 = 1;
      goto LABEL_515;
    }
  }
  else
  {
    *(_QWORD *)&v647[8 * v645] = v25;
    v645 = v70 + 1;
  }
  if (v644)
  {
LABEL_515:
    __break(0xC471u);
    JUMPOUT(0x1956E1D34);
  }
  WebCore::CloneSerializer::write((char *)v649, 2);
  if (MEMORY[0x1E0CBE3A8] == 16 * *(unsigned int *)(16 * (*v652 & 0xFFFFFFFE) + 0x4C))
  {
    v71 = HIDWORD(v666);
    if (HIDWORD(v666) == (_DWORD)v666)
    {
      WTF::Vector<JSC::JSObject *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSObject *&>((uint64_t)&v665, (unint64_t)&v652);
    }
    else
    {
      *((_QWORD *)v665 + HIDWORD(v666)) = v652;
      HIDWORD(v666) = v71 + 1;
    }
    LODWORD(v683) = 0;
    if (HIDWORD(v678) == (_DWORD)v678)
    {
      WTF::Vector<unsigned int,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)&v677, &v683);
    }
    else
    {
      *((_DWORD *)v677 + HIDWORD(v678)) = 0;
      ++HIDWORD(v678);
    }
    v72 = WTF::fastMalloc((WTF *)0xB8);
    *(_DWORD *)v72 = 1;
    *(_QWORD *)(v72 + 8) = v72 + 24;
    *(_QWORD *)(v72 + 16) = 20;
    v683 = (WTF *)v72;
    v684 = 0;
    v685 = (WTF *)v595;
    LOWORD(v686) = 258;
    if (HIDWORD(v668) == DWORD2(v668))
    {
      WTF::Vector<JSC::PropertyNameArray,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PropertyNameArray>((uint64_t)&v668, (unint64_t)&v683);
    }
    else
    {
      v74 = v668 + 32 * HIDWORD(v668);
      v683 = 0;
      *(_QWORD *)v74 = v72;
      *(_QWORD *)(v74 + 8) = 0;
      v75 = v684;
      v684 = 0;
      *(_QWORD *)(v74 + 8) = v75;
      v76 = v685;
      *(_WORD *)(v74 + 24) = (_WORD)v686;
      *(_QWORD *)(v74 + 16) = v76;
      ++HIDWORD(v668);
    }
    if (v684)
      WTF::fastFree((WTF *)(v684 - 16), v73);
    v77 = (uint64_t)v683;
    v683 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 1)
      {
        v221 = *(unsigned int *)(v77 + 20);
        if ((_DWORD)v221)
        {
          v222 = *(WTF::StringImpl ***)(v77 + 8);
          v223 = 8 * v221;
          do
          {
            v224 = *v222;
            *v222 = 0;
            if (v224)
            {
              if (*(_DWORD *)v224 == 2)
                WTF::StringImpl::destroy(v224, (WTF::StringImpl *)v73);
              else
                *(_DWORD *)v224 -= 2;
            }
            ++v222;
            v223 -= 8;
          }
          while (v223);
        }
        v225 = *(WTF **)(v77 + 8);
        if ((WTF *)(v77 + 24) != v225 && v225 != 0)
        {
          *(_QWORD *)(v77 + 8) = 0;
          *(_DWORD *)(v77 + 16) = 0;
          WTF::fastFree(v225, v73);
        }
        WTF::fastFree((WTF *)v77, v73);
      }
      else
      {
        --*(_DWORD *)v77;
      }
    }
    if (!HIDWORD(v668))
    {
      __break(0xC471u);
      JUMPOUT(0x1956E3C6CLL);
    }
    (*(void (**)(void))(16 * *(unsigned int *)(16 * (*v652 & 0xFFFFFFFE) + 0x4C) + 0x78))();
    if (!v595[2])
    {
      while (1)
      {
LABEL_177:
        if (!HIDWORD(v666))
        {
          __break(0xC471u);
          JUMPOUT(0x1956E3D30);
        }
        if (!HIDWORD(v678))
        {
          __break(0xC471u);
          JUMPOUT(0x1956E3D38);
        }
        if (!HIDWORD(v668))
        {
          __break(0xC471u);
          JUMPOUT(0x1956E3D40);
        }
        v125 = *((unsigned int *)v677 + HIDWORD(v678) - 1);
        v126 = v668 + 32 * HIDWORD(v668);
        v128 = *(_QWORD *)(v126 - 32);
        v127 = v126 - 32;
        v129 = *(_DWORD *)(v128 + 20);
        if (v129 == (_DWORD)v125)
          break;
        if (v129 <= v125)
        {
          __break(0xC471u);
          JUMPOUT(0x1956E3CACLL);
        }
        v130 = (uint64_t *)*((_QWORD *)v665 + HIDWORD(v666) - 1);
        v685 = (WTF *)0xFFFFFFFF00000000;
        v686 = v130;
        LOBYTE(v688) = 0;
        v689 = 0;
        v690 = 0;
        v691 = 0;
        memset(v687, 0, 21);
        if ((*(unsigned int (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v130 & 0xFFFFFFFE) + 0x4C) + 0x68))())
        {
          if (BYTE1(v687[2]) == 1)
          {
            v25 = (uint64_t)v683;
          }
          else
          {
            if (BYTE1(v687[2]) == 2)
              v261 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v683, v638);
            else
              v261 = JSC::PropertySlot::customGetter();
            v25 = v261;
          }
        }
        else
        {
          v25 = 0;
        }
        v22 = v595;
        if (v689)
        {
          v131 = *(_DWORD *)(v688 + 4);
          if (!v131)
          {
            __break(0xC471u);
            JUMPOUT(0x1956E2030);
          }
          *(_DWORD *)(v688 + 4) = v131 - 1;
        }
        if (v595[2])
          goto LABEL_363;
        if (v25)
        {
          if (*(_DWORD *)(*(_QWORD *)v127 + 20) <= v125)
          {
            __break(0xC471u);
            JUMPOUT(0x1956E3CD4);
          }
          WebCore::CloneSerializer::write((uint64_t)&v638, (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v127 + 8) + 8 * v125));
          if (v595[2])
            goto LABEL_363;
          LODWORD(v683) = 0;
          if (WebCore::CloneSerializer::dumpIfTerminal((WebCore::CloneSerializer *)&v638, (JSC::Structure *)v25, (int *)&v683, v132))
          {
            v124 = (_DWORD)v683 != 0;
            v133 = v594;
            if ((_DWORD)v683)
              v133 = (int)v683;
            v594 = v133;
          }
          else
          {
            LODWORD(v681) = 8;
            v123 = HIDWORD(v654);
            if (HIDWORD(v654) == (_DWORD)v654)
            {
              WTF::Vector<WebCore::WalkerState,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WalkerState>((uint64_t)&v653, (unint64_t)&v681);
            }
            else
            {
              *((_DWORD *)v653 + HIDWORD(v654)) = 8;
              HIDWORD(v654) = v123 + 1;
            }
            v124 = 8;
          }
        }
        else
        {
          if (!HIDWORD(v678))
          {
            __break(0xC471u);
            JUMPOUT(0x1956E3CE4);
          }
          ++*((_DWORD *)v677 + HIDWORD(v678) - 1);
          v124 = 7;
        }
        if (v124 != 7)
        {
          if (v124 == 8)
            goto LABEL_8;
          if (v124)
            goto LABEL_214;
LABEL_362:
          if (v22[2])
            goto LABEL_363;
          if (!HIDWORD(v678))
          {
            __break(0xC471u);
            JUMPOUT(0x1956E3CDCLL);
          }
          ++*((_DWORD *)v677 + HIDWORD(v678) - 1);
        }
      }
      v134 = v649;
      v135 = *((unsigned int *)v649 + 2);
      v136 = *((unsigned int *)v649 + 3);
      v137 = v136 + 4;
      if (v136 + 4 > v135)
      {
        v250 = v25;
        v251 = v135 + (v135 >> 2);
        if (v251 >= 0x10)
          v252 = v251 + 1;
        else
          v252 = 16;
        if (v252 <= v137)
          v253 = v136 + 4;
        else
          v253 = v252;
        if (HIDWORD(v253))
        {
          __break(0xC471u);
          JUMPOUT(0x1956E3D68);
        }
        v254 = *(void **)v649;
        v255 = (void *)WTF::fastMalloc((WTF *)v253);
        *((_DWORD *)v134 + 2) = v253;
        *(_QWORD *)v134 = v255;
        memcpy(v255, v254, v136);
        v25 = v250;
        v22 = v595;
        if (v254)
        {
          if (*(void **)v134 == v254)
          {
            *(_QWORD *)v134 = 0;
            *((_DWORD *)v134 + 2) = 0;
          }
          WTF::fastFree((WTF *)v254, v256);
        }
      }
      v138 = *((unsigned int *)v134 + 3);
      if (v137 < v138)
      {
        __break(0xC471u);
        JUMPOUT(0x1956E3D48);
      }
      *(_DWORD *)(*(_QWORD *)v134 + v138) = -1;
      *((_DWORD *)v134 + 3) = v137;
      if (!HIDWORD(v666))
      {
        __break(0xC471u);
        JUMPOUT(0x1956E3D50);
      }
      --HIDWORD(v666);
      if (!HIDWORD(v678))
      {
        __break(0xC471u);
        JUMPOUT(0x1956E3D58);
      }
      --HIDWORD(v678);
      if (!HIDWORD(v668))
      {
        __break(0xC471u);
        JUMPOUT(0x1956E3D60);
      }
      v139 = HIDWORD(v668) - 1;
      WTF::VectorDestructor<true,JSC::PropertyNameArray>::destruct(v668 + 32 * (HIDWORD(v668) - 1), (uint64_t *)(v668 + 32 * HIDWORD(v668)));
      HIDWORD(v668) = v139;
      goto LABEL_10;
    }
LABEL_363:
    v26 = 4;
  }
  else
  {
    v26 = 5;
  }
LABEL_213:
  v594 = v26;
LABEL_214:
  v141 = v653;
  if (v655 != (_BYTE *)v653 && v653 != 0)
  {
    v653 = 0;
    LODWORD(v654) = 0;
    WTF::fastFree(v141, v19);
  }
  v143 = v656;
  if (v658 != (_BYTE *)v656 && v656 != 0)
  {
    v656 = 0;
    LODWORD(v657) = 0;
    WTF::fastFree(v143, v19);
  }
  v145 = v659;
  if (v661 != (_BYTE *)v659 && v659)
  {
    v659 = 0;
    LODWORD(v660) = 0;
    WTF::fastFree(v145, v19);
  }
  v146 = v662;
  if (v664 != (_BYTE *)v662 && v662)
  {
    v662 = 0;
    LODWORD(v663) = 0;
    WTF::fastFree(v146, v19);
  }
  v147 = v665;
  if (v667 != (_BYTE *)v665 && v665)
  {
    v665 = 0;
    LODWORD(v666) = 0;
    WTF::fastFree(v147, v19);
  }
  v148 = (WTF *)v668;
  if (HIDWORD(v668))
  {
    WTF::VectorDestructor<true,JSC::PropertyNameArray>::destruct(v668, (uint64_t *)(v668 + 32 * HIDWORD(v668)));
    v148 = (WTF *)v668;
  }
  if (&v669 != (__int128 *)v148 && v148)
  {
    *(_QWORD *)&v668 = 0;
    DWORD2(v668) = 0;
    WTF::fastFree(v148, v19);
  }
  v149 = v674;
  if (v676 != (_BYTE *)v674 && v674)
  {
    v674 = 0;
    LODWORD(v675) = 0;
    WTF::fastFree(v149, v19);
  }
  v150 = v677;
  if (v679 != (_BYTE *)v677 && v677)
  {
    v677 = 0;
    LODWORD(v678) = 0;
    WTF::fastFree(v150, v19);
  }
  WebCore::CloneSerializer::~CloneSerializer((WebCore::CloneSerializer *)&v638, (WTF::StringImpl *)v19);
  if (a6 == 1)
  {
    v257 = (JSC::VM *)*((_QWORD *)a1 + 7);
    *(_QWORD *)&v668 = v257;
    switch(v594)
    {
      case 5:
        WebCore::throwDataCloneError(a1, (JSC::VM **)&v668);
        break;
      case 3:
        JSC::throwTypeError();
        break;
      case 1:
        v258.super.isa = (Class)JSC::createStackOverflowError(a1, v151);
        JSC::VM::throwException(v257, a1, v258);
        break;
    }
  }
  if (v594)
  {
    v336 = 35;
    switch(v594)
    {
      case 1:
        break;
      case 4:
        v336 = 37;
        break;
      case 5:
        v336 = 21;
        break;
      default:
        v336 = 33;
        break;
    }
    *(_BYTE *)a8 = v336;
    *(_QWORD *)(a8 + 8) = 0;
    *(_DWORD *)(a8 + 16) = 1;
  }
  else
  {
    v152 = (WTF *)HIDWORD(v637);
    if (!HIDWORD(v637))
    {
      v638 = 0;
      v640 = 0;
      goto LABEL_236;
    }
    *(_QWORD *)&v668 = HIDWORD(v637);
    std::make_unique[abi:sn180100]<WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned long>((uint64_t *)&v665, (unint64_t *)&v668);
    v347 = 0;
    v683 = 0;
    v348 = v636;
    while (1)
    {
      v349 = (JSC::JSGlobalObject *)*((_QWORD *)v348 + v347);
      if ((WTF::HashSet<JSC::ArrayBuffer *,WTF::DefaultHash<JSC::ArrayBuffer *>,WTF::HashTraits<JSC::ArrayBuffer *>,WTF::HashTableTraits>::contains((uint64_t)v683, (uint64_t)v349) & 1) == 0)
      {
        v638 = v349;
        WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add((uint64_t *)&v668, (uint64_t *)&v683, (uint64_t *)&v638);
        if (v347 >= *((unsigned int *)v665 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1956E3DECLL);
        }
        if ((JSC::ArrayBuffer::transferTo() & 1) == 0)
          break;
      }
      if ((WTF *)++v347 == v152)
      {
        v351 = 0;
        v352 = v665;
        v665 = 0;
        v638 = v352;
        goto LABEL_683;
      }
    }
    LOBYTE(v638) = 33;
    v639 = 0;
    v351 = 1;
LABEL_683:
    v640 = v351;
    if (v683)
      WTF::fastFree((WTF *)((char *)v683 - 16), v350);
    std::unique_ptr<WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~unique_ptr[abi:sn180100](&v665, v350);
    if (v640 == 1)
    {
      v353 = v639;
      v639 = 0;
      *(_BYTE *)a8 = (_BYTE)v638;
      *(_QWORD *)(a8 + 8) = v353;
      v173 = 1;
      *(_DWORD *)(a8 + 16) = 1;
      goto LABEL_285;
    }
    if (v640)
    {
LABEL_895:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_896;
    }
LABEL_236:
    v666 = 0;
    v665 = 0;
    if (HIDWORD(v635))
    {
      if (HIDWORD(v635) >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x1956E3DF4);
      }
      v354 = 24 * HIDWORD(v635);
      v355 = (WTF *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v635)));
      LODWORD(v666) = (v354 & 0xFFFFFFF8) / 0x18;
      v665 = v355;
      if (HIDWORD(v635))
      {
        v356 = 0;
        v357 = v634;
        v358 = (char *)v355 + 16;
        v359 = 8 * HIDWORD(v635);
        do
        {
          WebCore::ImageBitmap::detach(*((_QWORD **)v357 + v356), &v668);
          *(v358 - 16) = 0;
          *v358 = 0;
          if ((_BYTE)v669)
          {
            v360 = v668;
            *(_QWORD *)&v668 = 0;
            *((_QWORD *)v358 - 2) = v360;
            *(v358 - 8) = BYTE8(v668);
            *v358 = 1;
            if ((_BYTE)v669)
            {
              v361 = v668;
              *(_QWORD *)&v668 = 0;
              if (v361)
                (*(void (**)(uint64_t))(*(_QWORD *)v361 + 8))(v361);
            }
          }
          ++v356;
          v358 += 24;
          v359 -= 8;
        }
        while (v359);
        HIDWORD(v666) = v356;
      }
    }
    v683 = 0;
    v684 = 0;
    if (HIDWORD(v633))
    {
      v362 = v632;
      v363 = 8 * HIDWORD(v633);
      do
      {
        v364 = *(_QWORD *)v362;
        if (*(_QWORD *)v362)
          ++*(_DWORD *)(v364 + 24);
        WebCore::OffscreenCanvas::detach((_QWORD *)v364, (uint64_t *)&v668);
        v366 = HIDWORD(v684);
        if (HIDWORD(v684) == (_DWORD)v684)
        {
          WTF::Vector<std::unique_ptr<WebCore::DetachedOffscreenCanvas>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::DetachedOffscreenCanvas>>((uint64_t)&v683, (unint64_t)&v668);
        }
        else
        {
          v367 = v668;
          *(_QWORD *)&v668 = 0;
          *((_QWORD *)v683 + HIDWORD(v684)) = v367;
          HIDWORD(v684) = v366 + 1;
        }
        std::unique_ptr<WebCore::DetachedOffscreenCanvas>::~unique_ptr[abi:sn180100]((WTF **)&v668, v365);
        if (v364)
          WebCore::OffscreenCanvas::deref((WebCore::OffscreenCanvas *)v364);
        v362 = (WTF *)((char *)v362 + 8);
        v363 -= 8;
      }
      while (v363);
    }
    v678 = 0;
    v677 = 0;
    if (HIDWORD(v631))
    {
      v368 = (WebCore::RTCDataChannel **)v630;
      v369 = 8 * HIDWORD(v631);
      do
      {
        WebCore::RTCDataChannel::detach(*v368, (uint64_t *)&v668);
        v371 = HIDWORD(v678);
        if (HIDWORD(v678) == (_DWORD)v678)
        {
          WTF::Vector<std::unique_ptr<WebCore::DetachedOffscreenCanvas>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::DetachedOffscreenCanvas>>((uint64_t)&v677, (unint64_t)&v668);
        }
        else
        {
          v372 = v668;
          *(_QWORD *)&v668 = 0;
          *((_QWORD *)v677 + HIDWORD(v678)) = v372;
          HIDWORD(v678) = v371 + 1;
        }
        std::unique_ptr<WebCore::DetachedRTCDataChannel>::~unique_ptr[abi:sn180100]((WTF **)&v668, v370);
        ++v368;
        v369 -= 8;
      }
      while (v369);
    }
    v675 = 0;
    v674 = 0;
    if (HIDWORD(v629))
    {
      v373 = (WebCore::MediaSourceHandle **)v628;
      v374 = 8 * HIDWORD(v629);
      do
      {
        WebCore::MediaSourceHandle::detach(*v373, &v668);
        v375 = HIDWORD(v675);
        if (HIDWORD(v675) == (_DWORD)v675)
        {
          WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>>((uint64_t)&v674, (uint64_t *)&v668);
        }
        else
        {
          v376 = v668;
          *(_QWORD *)&v668 = 0;
          *((_QWORD *)v674 + HIDWORD(v675)) = v376;
          HIDWORD(v675) = v375 + 1;
        }
        v377 = (_DWORD *)v668;
        *(_QWORD *)&v668 = 0;
        if (v377)
        {
          if (v377[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v377 + 8))(v377);
          else
            --v377[2];
        }
        ++v373;
        v374 -= 8;
      }
      while (v374);
    }
    v654 = 0;
    v653 = 0;
    if (HIDWORD(v606))
    {
      if (HIDWORD(v606) >= 0x2762763)
      {
        __break(0xC471u);
        JUMPOUT(0x1956E3DFCLL);
      }
      v378 = 104 * HIDWORD(v606);
      v379 = (WTF *)WTF::fastMalloc((WTF *)(104 * HIDWORD(v606)));
      LODWORD(v654) = (v378 & 0xFFFFFFF8) / 0x68;
      v653 = v379;
      if (HIDWORD(v606))
      {
        v380 = 0;
        v381 = v605;
        v382 = (WTF *)((char *)v605 + 8 * HIDWORD(v606));
        do
        {
          v383 = *(_OWORD **)v381;
          v384 = *(_QWORD *)(*(_QWORD *)v381 + 24);
          if (v384)
          {
            v385 = (unsigned int *)(v384 + 8);
            do
              v386 = __ldaxr(v385);
            while (__stlxr(v386 + 1, v385));
            v380 = HIDWORD(v654);
            v379 = v653;
          }
          v387 = v383[5];
          v670 = v383[4];
          v671 = v387;
          v388 = v383[7];
          v672 = v383[6];
          v673 = v388;
          v389 = v383[3];
          v668 = v383[2];
          v669 = v389;
          v390 = (char *)v379 + 104 * v380;
          *(_QWORD *)v390 = v384;
          v391 = v668;
          *(_OWORD *)(v390 + 24) = v669;
          *(_OWORD *)(v390 + 8) = v391;
          v392 = v670;
          v393 = v671;
          v394 = v672;
          *(_OWORD *)(v390 + 88) = v673;
          *(_OWORD *)(v390 + 72) = v394;
          *(_OWORD *)(v390 + 56) = v393;
          *(_OWORD *)(v390 + 40) = v392;
          HIDWORD(v654) = ++v380;
          v381 = (WTF *)((char *)v381 + 8);
        }
        while (v381 != v382);
      }
    }
    if (HIDWORD(v627))
    {
      v395 = v626;
      v396 = 8 * HIDWORD(v627);
      do
      {
        v397 = *(WebCore::WebCodecsVideoFrame **)v395;
        v395 = (WTF *)((char *)v395 + 8);
        WebCore::WebCodecsVideoFrame::close(v397, v151);
        v396 -= 8;
      }
      while (v396);
    }
    v668 = 0uLL;
    v153 = HIDWORD(v602);
    if (HIDWORD(v602))
    {
      if (HIDWORD(v602) >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1956E3E04);
      }
      v398 = WTF::fastMalloc((WTF *)(8 * HIDWORD(v602)));
      DWORD2(v668) = v153;
      *(_QWORD *)&v668 = v398;
      if (HIDWORD(v602))
      {
        v399 = 0;
        v400 = v601;
        v401 = (WTF *)((char *)v601 + 8 * HIDWORD(v602));
        do
        {
          v402 = *(_QWORD *)(*(_QWORD *)v400 + 24);
          if (v402)
          {
            v403 = (unsigned int *)(v402 + 8);
            do
              v404 = __ldaxr(v403);
            while (__stlxr(v404 + 1, v403));
            v399 = HIDWORD(v668);
            v398 = v668;
          }
          *(_QWORD *)(v398 + 8 * v399++) = v402;
          HIDWORD(v668) = v399;
          v400 = (WTF *)((char *)v400 + 8);
        }
        while (v400 != v401);
      }
    }
    if (HIDWORD(v625))
    {
      v405 = v624;
      v406 = 8 * HIDWORD(v625);
      do
      {
        v407 = *(WebCore::WebCodecsAudioData **)v405;
        v405 = (WTF *)((char *)v405 + 8);
        WebCore::WebCodecsAudioData::close(v407);
        v406 -= 8;
      }
      while (v406);
    }
    v663 = 0;
    v662 = 0;
    v152 = (WTF *)HIDWORD(v600);
    if (HIDWORD(v600))
    {
      if (HIDWORD(v600) >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1956E3DE4);
      }
      v342 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v600)));
      LODWORD(v663) = (_DWORD)v152;
      v662 = v342;
      if (HIDWORD(v600))
      {
        v343 = v342;
        v344 = 0;
        v152 = v599;
        v345 = 8 * HIDWORD(v600);
        do
        {
          v346 = v344;
          WebCore::MediaStreamTrack::detach(*((WebCore::MediaStreamTrack **)v152 + v344), (uint64_t *)&v659);
          v344 = v346 + 1;
          *((_QWORD *)v343 + v346) = v659;
          v345 -= 8;
        }
        while (v345);
        HIDWORD(v663) = v346 + 1;
      }
    }
    if (HIDWORD(v623))
    {
      v152 = v622;
      v408 = 8 * HIDWORD(v623);
      do
      {
        v409 = *(_QWORD *)v152;
        v152 = (WTF *)((char *)v152 + 8);
        WebCore::MediaStreamTrack::stopTrack(v409, 0);
        v408 -= 8;
      }
      while (v408);
    }
    v154 = WTF::fastMalloc((WTF *)0x100);
    if (v640)
      goto LABEL_895;
    v155 = v154;
    v156 = v638;
    v638 = 0;
    v598 = v156;
    if ((_DWORD)v8 == 1)
    {
      v597 = (WTF *)v18;
      std::make_unique[abi:sn180100]<WTF::Vector<WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>((uint64_t *)&v596, (uint64_t)&v609);
      WebCore::SerializedScriptValue::SerializedScriptValue(v155, (uint64_t *)&v619, (uint64_t)&v617, (uint64_t *)&v598, (uint64_t *)&v597, (uint64_t *)&v665, (uint64_t *)&v683, (uint64_t *)&v615, (uint64_t *)&v613, (uint64_t *)&v677, (uint64_t *)&v674, (uint64_t *)&v611, (uint64_t *)&v596, (uint64_t *)&v607, (uint64_t *)&v653, (uint64_t *)&v603, (uint64_t *)&v668, (uint64_t *)&v662);
      *(_QWORD *)a8 = v155;
      *(_DWORD *)(a8 + 16) = 0;
      v410 = v596;
      v596 = 0;
      if (v410)
      {
        v411 = *((unsigned int *)v410 + 3);
        if ((_DWORD)v411)
        {
          v567 = *(unsigned int ***)v410;
          v568 = *(_QWORD *)v410 + 8 * v411;
          do
          {
            v569 = *v567;
            *v567 = 0;
            if (v569)
            {
              do
              {
                v570 = __ldaxr(v569);
                v571 = v570 - 1;
              }
              while (__stlxr(v571, v569));
              if (!v571)
              {
                atomic_store(1u, v569);
                v572 = (WTF *)MEMORY[0x19AEA39B4]();
                WTF::fastFree(v572, v573);
              }
            }
            ++v567;
          }
          while (v567 != (unsigned int **)v568);
        }
        v412 = *(WTF **)v410;
        if (*(_QWORD *)v410)
        {
          *(_QWORD *)v410 = 0;
          *((_DWORD *)v410 + 2) = 0;
          WTF::fastFree(v412, v151);
        }
        WTF::fastFree(v410, v151);
      }
      v160 = v597;
      v597 = 0;
      if (v160)
      {
        v413 = *((unsigned int *)v160 + 3);
        if ((_DWORD)v413)
        {
          v564 = *(JSC::ArrayBufferContents **)v160;
          v565 = 56 * v413;
          do
          {
            JSC::ArrayBufferContents::~ArrayBufferContents(v564);
            v564 = (JSC::ArrayBufferContents *)(v566 + 56);
            v565 -= 56;
          }
          while (v565);
        }
        v18 = 0;
LABEL_255:
        v162 = *(WTF **)v160;
        if (*(_QWORD *)v160)
        {
          *(_QWORD *)v160 = 0;
          *((_DWORD *)v160 + 2) = 0;
          WTF::fastFree(v162, v151);
        }
        WTF::fastFree(v160, v151);
      }
      else
      {
        v18 = 0;
      }
    }
    else
    {
      v596 = 0;
      v597 = 0;
      WebCore::SerializedScriptValue::SerializedScriptValue(v154, (uint64_t *)&v619, (uint64_t)&v617, (uint64_t *)&v598, (uint64_t *)&v597, (uint64_t *)&v665, (uint64_t *)&v683, (uint64_t *)&v615, (uint64_t *)&v613, (uint64_t *)&v677, (uint64_t *)&v674, (uint64_t *)&v611, (uint64_t *)&v596, (uint64_t *)&v607, (uint64_t *)&v653, (uint64_t *)&v603, (uint64_t *)&v668, (uint64_t *)&v662);
      *(_QWORD *)a8 = v155;
      *(_DWORD *)(a8 + 16) = 0;
      v157 = v596;
      v596 = 0;
      if (v157)
      {
        v158 = *((unsigned int *)v157 + 3);
        if ((_DWORD)v158)
        {
          v460 = *(unsigned int ***)v157;
          v461 = *(_QWORD *)v157 + 8 * v158;
          do
          {
            v462 = *v460;
            *v460 = 0;
            if (v462)
            {
              do
              {
                v463 = __ldaxr(v462);
                v464 = v463 - 1;
              }
              while (__stlxr(v464, v462));
              if (!v464)
              {
                atomic_store(1u, v462);
                v546 = (WTF *)MEMORY[0x19AEA39B4]();
                WTF::fastFree(v546, v547);
              }
            }
            ++v460;
          }
          while (v460 != (unsigned int **)v461);
        }
        v159 = *(WTF **)v157;
        if (*(_QWORD *)v157)
        {
          *(_QWORD *)v157 = 0;
          *((_DWORD *)v157 + 2) = 0;
          WTF::fastFree(v159, v151);
        }
        WTF::fastFree(v157, v151);
      }
      v160 = v597;
      v597 = 0;
      if (v160)
      {
        v161 = *((unsigned int *)v160 + 3);
        if ((_DWORD)v161)
        {
          v457 = *(JSC::ArrayBufferContents **)v160;
          v458 = 56 * v161;
          do
          {
            JSC::ArrayBufferContents::~ArrayBufferContents(v457);
            v457 = (JSC::ArrayBufferContents *)(v459 + 56);
            v458 -= 56;
          }
          while (v458);
        }
        goto LABEL_255;
      }
    }
    v163 = v598;
    v598 = 0;
    if (v163)
    {
      v164 = *((unsigned int *)v163 + 3);
      if ((_DWORD)v164)
      {
        v454 = *(JSC::ArrayBufferContents **)v163;
        v455 = 56 * v164;
        do
        {
          JSC::ArrayBufferContents::~ArrayBufferContents(v454);
          v454 = (JSC::ArrayBufferContents *)(v456 + 56);
          v455 -= 56;
        }
        while (v455);
      }
      v165 = *(WTF **)v163;
      if (*(_QWORD *)v163)
      {
        *(_QWORD *)v163 = 0;
        *((_DWORD *)v163 + 2) = 0;
        WTF::fastFree(v165, v151);
      }
      WTF::fastFree(v163, v151);
    }
    v166 = v662;
    if (HIDWORD(v663))
    {
      v485 = 8 * HIDWORD(v663);
      v486 = v662;
      do
      {
        v487 = *(WebCore::MediaStreamTrackDataHolder **)v486;
        *(_QWORD *)v486 = 0;
        if (v487)
        {
          WebCore::MediaStreamTrackDataHolder::~MediaStreamTrackDataHolder(v487, v151);
          WTF::fastFree(v488, v489);
        }
        v486 = (WTF *)((char *)v486 + 8);
        v485 -= 8;
      }
      while (v485);
    }
    if (v166)
      WTF::fastFree(v166, v151);
    v167 = (WTF *)v668;
    if (HIDWORD(v668))
    {
      v475 = v668 + 8 * HIDWORD(v668);
      do
      {
        v476 = *(unsigned int **)v167;
        *(_QWORD *)v167 = 0;
        if (v476)
        {
          v477 = v476 + 2;
          do
          {
            v478 = __ldaxr(v477);
            v479 = v478 - 1;
          }
          while (__stlxr(v479, v477));
          if (!v479)
          {
            atomic_store(1u, v476 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v476 + 8))(v476);
          }
        }
        v167 = (WTF *)((char *)v167 + 8);
      }
      while (v167 != (WTF *)v475);
      v167 = (WTF *)v668;
    }
    if (v167)
      WTF::fastFree(v167, v151);
    v168 = v653;
    if (HIDWORD(v654))
    {
      v490 = (WTF *)((char *)v653 + 104 * HIDWORD(v654));
      do
      {
        v491 = *(unsigned int **)v168;
        *(_QWORD *)v168 = 0;
        if (v491)
        {
          v492 = v491 + 2;
          do
          {
            v493 = __ldaxr(v492);
            v494 = v493 - 1;
          }
          while (__stlxr(v494, v492));
          if (!v494)
          {
            atomic_store(1u, v491 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v491 + 8))(v491);
          }
        }
        v168 = (WTF *)((char *)v168 + 104);
      }
      while (v168 != v490);
      v168 = v653;
    }
    if (v168)
      WTF::fastFree(v168, v151);
    v169 = HIDWORD(v675);
    v152 = v674;
    if (HIDWORD(v675))
    {
LABEL_896:
      v495 = 8 * v169;
      v496 = (_DWORD **)v152;
      do
      {
        v497 = *v496;
        *v496 = 0;
        if (v497)
        {
          if (v497[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v497 + 8))(v497);
          else
            --v497[2];
        }
        ++v496;
        v495 -= 8;
      }
      while (v495);
    }
    if (v152)
      WTF::fastFree(v152, v151);
    v170 = v677;
    if (HIDWORD(v678))
    {
      v480 = 8 * HIDWORD(v678);
      v481 = v677;
      do
      {
        v482 = *(WTF **)v481;
        *(_QWORD *)v481 = 0;
        if (v482)
        {
          v483 = (WTF::StringImpl *)*((_QWORD *)v482 + 5);
          *((_QWORD *)v482 + 5) = 0;
          if (v483)
          {
            if (*(_DWORD *)v483 == 2)
              WTF::StringImpl::destroy(v483, v151);
            else
              *(_DWORD *)v483 -= 2;
          }
          v484 = (WTF::StringImpl *)*((_QWORD *)v482 + 2);
          *((_QWORD *)v482 + 2) = 0;
          if (v484)
          {
            if (*(_DWORD *)v484 == 2)
              WTF::StringImpl::destroy(v484, v151);
            else
              *(_DWORD *)v484 -= 2;
          }
          WTF::fastFree(v482, v151);
        }
        v481 = (WTF *)((char *)v481 + 8);
        v480 -= 8;
      }
      while (v480);
    }
    if (v170)
      WTF::fastFree(v170, v151);
    v171 = v683;
    if (HIDWORD(v684))
    {
      v442 = (WTF *)((char *)v683 + 8 * HIDWORD(v684));
      do
      {
        v443 = *(WTF **)v171;
        *(_QWORD *)v171 = 0;
        if (v443)
        {
          v444 = *(unsigned int **)v443;
          *(_QWORD *)v443 = 0;
          if (v444)
          {
            v445 = v444 + 2;
            do
            {
              v446 = __ldaxr(v445);
              v447 = v446 - 1;
            }
            while (__stlxr(v447, v445));
            if (!v447)
            {
              atomic_store(1u, v444 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v444 + 8))(v444);
            }
          }
          WTF::fastFree(v443, v151);
        }
        v171 = (WTF *)((char *)v171 + 8);
      }
      while (v171 != v442);
      v171 = v683;
    }
    if (v171)
      WTF::fastFree(v171, v151);
    v172 = v665;
    if (HIDWORD(v666))
    {
      v448 = 24 * HIDWORD(v666);
      v449 = v665;
      do
      {
        if (*((_BYTE *)v449 + 16))
        {
          v450 = *(_QWORD *)v449;
          *(_QWORD *)v449 = 0;
          if (v450)
            (*(void (**)(uint64_t))(*(_QWORD *)v450 + 8))(v450);
        }
        v449 = (WTF *)((char *)v449 + 24);
        v448 -= 24;
      }
      while (v448);
    }
    if (v172)
      WTF::fastFree(v172, v151);
    v173 = v640;
    if (v640 != -1)
LABEL_285:
      ((void (*)(__int128 *, JSC::JSGlobalObject **))off_1E3393E88[v173])(&v668, &v638);
  }
  if (HIDWORD(v600))
  {
    v430 = v599;
    v431 = 8 * HIDWORD(v600);
    do
    {
      v432 = *(_DWORD **)v430;
      *(_QWORD *)v430 = 0;
      if (v432)
      {
        if (v432[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v432 + 16))(v432);
        else
          --v432[6];
      }
      v430 = (WTF *)((char *)v430 + 8);
      v431 -= 8;
    }
    while (v431);
  }
  v174 = v599;
  if (v599)
  {
    v599 = 0;
    LODWORD(v600) = 0;
    WTF::fastFree(v174, v151);
  }
  if (HIDWORD(v602))
  {
    v433 = v601;
    v434 = 8 * HIDWORD(v602);
    do
    {
      v435 = *(_DWORD **)v433;
      *(_QWORD *)v433 = 0;
      if (v435)
      {
        if (v435[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v435 + 16))(v435);
        else
          --v435[4];
      }
      v433 = (WTF *)((char *)v433 + 8);
      v434 -= 8;
    }
    while (v434);
  }
  v175 = v601;
  if (v601)
  {
    v601 = 0;
    LODWORD(v602) = 0;
    WTF::fastFree(v175, v151);
  }
  if (HIDWORD(v604))
  {
    v465 = v603;
    v466 = (WTF *)((char *)v603 + 8 * HIDWORD(v604));
    do
    {
      v467 = *(_QWORD *)v465;
      *(_QWORD *)v465 = 0;
      if (v467)
      {
        do
        {
          v468 = __ldaxr((unsigned int *)v467);
          v469 = v468 - 1;
        }
        while (__stlxr(v469, (unsigned int *)v467));
        if (!v469)
        {
          atomic_store(1u, (unsigned int *)v467);
          v548 = *(WTF **)(v467 + 40);
          if (v548)
          {
            *(_QWORD *)(v467 + 40) = 0;
            *(_DWORD *)(v467 + 48) = 0;
            WTF::fastFree(v548, v151);
          }
          WTF::fastFree((WTF *)v467, v151);
        }
      }
      v465 = (WTF *)((char *)v465 + 8);
    }
    while (v465 != v466);
  }
  v176 = v603;
  if (v603)
  {
    v603 = 0;
    LODWORD(v604) = 0;
    WTF::fastFree(v176, v151);
  }
  if (HIDWORD(v606))
  {
    v436 = v605;
    v437 = 8 * HIDWORD(v606);
    do
    {
      v438 = *(_DWORD **)v436;
      *(_QWORD *)v436 = 0;
      if (v438)
      {
        if (v438[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v438 + 16))(v438);
        else
          --v438[4];
      }
      v436 = (WTF *)((char *)v436 + 8);
      v437 -= 8;
    }
    while (v437);
  }
  v177 = v605;
  if (v605)
  {
    v605 = 0;
    LODWORD(v606) = 0;
    WTF::fastFree(v177, v151);
  }
  if (HIDWORD(v608))
  {
    v470 = v607;
    v471 = (WTF *)((char *)v607 + 8 * HIDWORD(v608));
    do
    {
      v472 = *(_QWORD *)v470;
      *(_QWORD *)v470 = 0;
      if (v472)
      {
        do
        {
          v473 = __ldaxr((unsigned int *)v472);
          v474 = v473 - 1;
        }
        while (__stlxr(v474, (unsigned int *)v472));
        if (!v474)
        {
          atomic_store(1u, (unsigned int *)v472);
          v549 = *(WTF **)(v472 + 40);
          if (v549)
          {
            *(_QWORD *)(v472 + 40) = 0;
            *(_DWORD *)(v472 + 48) = 0;
            WTF::fastFree(v549, v151);
          }
          WTF::fastFree((WTF *)v472, v151);
        }
      }
      v470 = (WTF *)((char *)v470 + 8);
    }
    while (v470 != v471);
  }
  v178 = v607;
  if (v607)
  {
    v607 = 0;
    LODWORD(v608) = 0;
    WTF::fastFree(v178, v151);
  }
  if (v18)
  {
    v179 = *(unsigned int *)(v18 + 12);
    if ((_DWORD)v179)
    {
      v451 = *(JSC::ArrayBufferContents **)v18;
      v452 = 56 * v179;
      do
      {
        JSC::ArrayBufferContents::~ArrayBufferContents(v451);
        v451 = (JSC::ArrayBufferContents *)(v453 + 56);
        v452 -= 56;
      }
      while (v452);
    }
    v180 = *(WTF **)v18;
    if (*(_QWORD *)v18)
    {
      *(_QWORD *)v18 = 0;
      *(_DWORD *)(v18 + 8) = 0;
      WTF::fastFree(v180, v151);
    }
    WTF::fastFree((WTF *)v18, v151);
  }
  if (HIDWORD(v610))
  {
    v419 = v609;
    v420 = (WTF *)((char *)v609 + 8 * HIDWORD(v610));
    do
    {
      v421 = *(unsigned int **)v419;
      *(_QWORD *)v419 = 0;
      if (v421)
      {
        do
        {
          v422 = __ldaxr(v421);
          v423 = v422 - 1;
        }
        while (__stlxr(v423, v421));
        if (!v423)
        {
          atomic_store(1u, v421);
          v543 = (WTF *)MEMORY[0x19AEA39B4]();
          WTF::fastFree(v543, v544);
        }
      }
      v419 = (WTF *)((char *)v419 + 8);
    }
    while (v419 != v420);
  }
  v181 = v609;
  if (v609)
  {
    v609 = 0;
    LODWORD(v610) = 0;
    WTF::fastFree(v181, v151);
  }
  if (HIDWORD(v612))
  {
    v337 = v611;
    v338 = (WTF *)((char *)v611 + 8 * HIDWORD(v612));
    do
    {
      v339 = *(unsigned int **)v337;
      *(_QWORD *)v337 = 0;
      if (v339)
      {
        do
        {
          v340 = __ldaxr(v339);
          v341 = v340 - 1;
        }
        while (__stlxr(v341, v339));
        if (!v341)
        {
          atomic_store(1u, v339);
          v540 = (WTF *)MEMORY[0x19AEA3D2C]();
          WTF::fastFree(v540, v541);
        }
      }
      v337 = (WTF *)((char *)v337 + 8);
    }
    while (v337 != v338);
  }
  v182 = v611;
  if (v611)
  {
    v611 = 0;
    LODWORD(v612) = 0;
    WTF::fastFree(v182, v151);
  }
  if (HIDWORD(v614))
  {
    v514 = (uint64_t *)v613;
    v515 = 8 * HIDWORD(v614);
    do
    {
      v514 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v514, v151)+ 1;
      v515 -= 8;
    }
    while (v515);
  }
  v183 = v613;
  if (v613)
  {
    v613 = 0;
    LODWORD(v614) = 0;
    WTF::fastFree(v183, v151);
  }
  if (HIDWORD(v616))
  {
    v509 = v615;
    v510 = 8 * HIDWORD(v616);
    do
    {
      v511 = *(WebCore::OffscreenCanvas **)v509;
      *(_QWORD *)v509 = 0;
      if (v511)
      {
        if (*((_DWORD *)v511 + 6) == 1)
        {
          WebCore::OffscreenCanvas::~OffscreenCanvas(v511);
          bmalloc::api::isoDeallocate(v512, v513);
        }
        else
        {
          --*((_DWORD *)v511 + 6);
        }
      }
      v509 = (WTF *)((char *)v509 + 8);
      v510 -= 8;
    }
    while (v510);
  }
  v184 = v615;
  if (v615)
  {
    v615 = 0;
    LODWORD(v616) = 0;
    WTF::fastFree(v184, v151);
  }
  if (HIDWORD(v618))
  {
    v439 = v617;
    v440 = 72 * HIDWORD(v618);
    do
    {
      WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive(v439);
      v439 = (WTF *)(v441 + 72);
      v440 -= 72;
    }
    while (v440);
  }
  v185 = v617;
  if (v617)
  {
    v617 = 0;
    LODWORD(v618) = 0;
    WTF::fastFree(v185, v151);
  }
  result = (uint64_t)v619;
  if (v619)
  {
    v619 = 0;
    LODWORD(v620) = 0;
    result = WTF::fastFree((WTF *)result, v151);
  }
LABEL_323:
  if (v621)
    result = WTF::fastFree((WTF *)(v621 - 16), v151);
  v187 = v622;
  if (HIDWORD(v623))
  {
    v328 = 8 * HIDWORD(v623);
    v329 = v622;
    do
    {
      result = *(_QWORD *)v329;
      *(_QWORD *)v329 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        else
          --*(_DWORD *)(result + 24);
      }
      v329 = (WTF *)((char *)v329 + 8);
      v328 -= 8;
    }
    while (v328);
  }
  if (v187)
    result = WTF::fastFree(v187, v151);
  v188 = v624;
  if (HIDWORD(v625))
  {
    v324 = 8 * HIDWORD(v625);
    v325 = v624;
    do
    {
      result = *(_QWORD *)v325;
      *(_QWORD *)v325 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 16) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        else
          --*(_DWORD *)(result + 16);
      }
      v325 = (WTF *)((char *)v325 + 8);
      v324 -= 8;
    }
    while (v324);
  }
  if (v188)
    result = WTF::fastFree(v188, v151);
  v189 = v626;
  if (HIDWORD(v627))
  {
    v330 = 8 * HIDWORD(v627);
    v331 = v626;
    do
    {
      result = *(_QWORD *)v331;
      *(_QWORD *)v331 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 16) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        else
          --*(_DWORD *)(result + 16);
      }
      v331 = (WTF *)((char *)v331 + 8);
      v330 -= 8;
    }
    while (v330);
  }
  if (v189)
    result = WTF::fastFree(v189, v151);
  v190 = v628;
  if (HIDWORD(v629))
  {
    v326 = 8 * HIDWORD(v629);
    v327 = v628;
    do
    {
      result = *(_QWORD *)v327;
      *(_QWORD *)v327 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 8) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 8);
      }
      v327 = (WTF *)((char *)v327 + 8);
      v326 -= 8;
    }
    while (v326);
  }
  if (v190)
    result = WTF::fastFree(v190, v151);
  v191 = v630;
  if (HIDWORD(v631))
  {
    v332 = 8 * HIDWORD(v631);
    v333 = v630;
    do
    {
      result = *(_QWORD *)v333;
      *(_QWORD *)v333 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 1)
        {
          WebCore::RTCDataChannel::~RTCDataChannel((WebCore::RTCDataChannel *)result, v151);
          result = bmalloc::api::isoDeallocate(v334, v335);
        }
        else
        {
          --*(_DWORD *)(result + 24);
        }
      }
      v333 = (WTF *)((char *)v333 + 8);
      v332 -= 8;
    }
    while (v332);
  }
  if (v191)
    result = WTF::fastFree(v191, v151);
  v192 = v632;
  if (HIDWORD(v633))
  {
    v505 = 8 * HIDWORD(v633);
    v506 = v632;
    do
    {
      result = *(_QWORD *)v506;
      *(_QWORD *)v506 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 1)
        {
          WebCore::OffscreenCanvas::~OffscreenCanvas((WebCore::OffscreenCanvas *)result);
          result = bmalloc::api::isoDeallocate(v507, v508);
        }
        else
        {
          --*(_DWORD *)(result + 24);
        }
      }
      v506 = (WTF *)((char *)v506 + 8);
      v505 -= 8;
    }
    while (v505);
  }
  if (v192)
    result = WTF::fastFree(v192, v151);
  v193 = v634;
  if (HIDWORD(v635))
  {
    v426 = 8 * HIDWORD(v635);
    v427 = v634;
    do
    {
      result = *(_QWORD *)v427;
      *(_QWORD *)v427 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 8) == 1)
        {
          WebCore::ImageBitmap::~ImageBitmap((WebCore::ImageBitmap *)result, v151);
          result = bmalloc::api::isoDeallocate(v428, v429);
        }
        else
        {
          --*(_DWORD *)(result + 8);
        }
      }
      v427 = (WTF *)((char *)v427 + 8);
      v426 -= 8;
    }
    while (v426);
  }
  if (v193)
    result = WTF::fastFree(v193, v151);
  v194 = v636;
  if (HIDWORD(v637))
  {
    v424 = 8 * HIDWORD(v637);
    v425 = v636;
    do
    {
      result = *(_QWORD *)v425;
      *(_QWORD *)v425 = 0;
      if (result)
        result = WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)result);
      v425 = (WTF *)((char *)v425 + 8);
      v424 -= 8;
    }
    while (v424);
  }
  if (v194)
    return WTF::fastFree(v194, v151);
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t *v6;
  uint64_t v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)a1;
    v7 = 8 * v3;
    do
    {
      v6 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v6, a2)+ 1;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebCore::SerializedScriptValue::create@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return WebCore::SerializedScriptValue::create(a1, a2, a3, a4, a5, 0, a6, a7);
}

WTF **std::unique_ptr<WebCore::DetachedOffscreenCanvas>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *(unsigned int **)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

WTF **std::unique_ptr<WebCore::DetachedRTCDataChannel>::~unique_ptr[abi:sn180100](WTF **a1, WTF::StringImpl *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 5);
    *((_QWORD *)v3 + 5) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

WTF **std::unique_ptr<WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  JSC::ArrayBufferContents *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *((unsigned int *)v3 + 3);
    if ((_DWORD)v4)
    {
      v7 = *(JSC::ArrayBufferContents **)v3;
      v8 = 56 * v4;
      do
      {
        JSC::ArrayBufferContents::~ArrayBufferContents(v7);
        v7 = (JSC::ArrayBufferContents *)(v9 + 56);
        v8 -= 56;
      }
      while (v8);
    }
    v5 = *(WTF **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      *((_DWORD *)v3 + 2) = 0;
      WTF::fastFree(v5, a2);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WTF::Vector<std::unique_ptr<WebCore::MediaStreamTrackDataHolder>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::MediaStreamTrackDataHolder **v6;
  uint64_t v7;
  WebCore::MediaStreamTrackDataHolder *v8;
  WTF *v9;
  void *v10;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WebCore::MediaStreamTrackDataHolder ***)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        WebCore::MediaStreamTrackDataHolder::~MediaStreamTrackDataHolder(v8, a2);
        WTF::fastFree(v9, v10);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::WebCodecsAudioInternalData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = *(unsigned int ***)result;
    v5 = *(_QWORD *)result + 8 * v2;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v6 + 2);
          v12 = v4;
          v13 = result;
          v11 = v5;
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
          v5 = v11;
          v4 = v12;
          result = v13;
        }
      }
      ++v4;
    }
    while (v4 != (unsigned int **)v5);
  }
  v3 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    v10 = result;
    WTF::fastFree(v3, a2);
    return v10;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::WebCodecsVideoFrameData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t result, void *a2)
{
  unsigned int v2;
  WTF *v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;

  v2 = *(_DWORD *)(result + 12);
  if (v2)
  {
    v4 = *(unsigned int ***)result;
    v5 = *(_QWORD *)result + 104 * v2;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v6 + 2);
          v12 = v4;
          v13 = result;
          v11 = v5;
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
          v5 = v11;
          v4 = v12;
          result = v13;
        }
      }
      v4 += 13;
    }
    while (v4 != (unsigned int **)v5);
  }
  v3 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    v10 = result;
    WTF::fastFree(v3, a2);
    return v10;
  }
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = *(WTF **)result;
    v5 = 8 * v2;
    v9 = result;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
        {
          v7 = v5;
          v8 = v4;
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          v5 = v7;
          v4 = v8;
          result = v9;
        }
        else
        {
          --v6[2];
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v3 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    v10 = result;
    WTF::fastFree(v3, a2);
    return v10;
  }
  return result;
}

uint64_t WTF::Vector<std::unique_ptr<WebCore::DetachedOffscreenCanvas>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF **v6;
  uint64_t v7;
  WTF *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF ***)a1;
    v7 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        v9 = *(unsigned int **)v8;
        *(_QWORD *)v8 = 0;
        if (v9)
        {
          v10 = v9 + 2;
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            atomic_store(1u, v9 + 2);
            v13 = v8;
            (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
            v8 = v13;
          }
        }
        WTF::fastFree(v8, a2);
      }
      ++v6;
    }
    while (v6 != (WTF **)v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF **WTF::Vector<std::optional<WebCore::DetachedImageBitmap>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF **result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WTF **v6;
  WTF **v7;

  v2 = *((unsigned int *)result + 3);
  v3 = *result;
  if (!(_DWORD)v2)
  {
    if (!v3)
      return result;
LABEL_10:
    *result = 0;
    *((_DWORD *)result + 2) = 0;
    v6 = result;
    WTF::fastFree(v3, a2);
    return v6;
  }
  v7 = result;
  v4 = 24 * v2;
  do
  {
    if (*((_BYTE *)v3 + 16))
    {
      v5 = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    v3 = (WTF *)((char *)v3 + 24);
    v4 -= 24;
  }
  while (v4);
  result = v7;
  v3 = *v7;
  if (*v7)
    goto LABEL_10;
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  _DWORD *v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_DWORD **)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (v8[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
        else
          --v8[6];
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::WebCodecsAudioData,WTF::RawPtrTraits<WebCore::WebCodecsAudioData>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsAudioData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  _DWORD *v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_DWORD **)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (v8[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
        else
          --v8[4];
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedAudioChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedAudioChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedAudioChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = *(WTF **)result;
    v5 = *(_QWORD *)result + 8 * v2;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr((unsigned int *)v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)v6));
        if (!v8)
        {
          v12 = v4;
          v13 = v5;
          v11 = result;
          atomic_store(1u, (unsigned int *)v6);
          v14 = (WTF *)v6;
          v9 = *(WTF **)(v6 + 40);
          if (v9)
          {
            *(_QWORD *)(v6 + 40) = 0;
            *(_DWORD *)(v6 + 48) = 0;
            WTF::fastFree(v9, a2);
          }
          WTF::fastFree(v14, a2);
          result = v11;
          v4 = v12;
          v5 = v13;
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
    }
    while (v4 != (WTF *)v5);
  }
  v3 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    v10 = result;
    WTF::fastFree(v3, a2);
    return v10;
  }
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  uint64_t v14;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = *(unsigned int ***)result;
    v5 = *(_QWORD *)result + 8 * v2;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          v13 = v4;
          v14 = result;
          v12 = v5;
          v9 = (WTF *)MEMORY[0x19AEA39B4](v6);
          WTF::fastFree(v9, v10);
          v5 = v12;
          v4 = v13;
          result = v14;
        }
      }
      ++v4;
    }
    while (v4 != (unsigned int **)v5);
  }
  v3 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    v11 = result;
    WTF::fastFree(v3, a2);
    return v11;
  }
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  uint64_t v14;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = *(unsigned int ***)result;
    v5 = *(_QWORD *)result + 8 * v2;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          v13 = v4;
          v14 = result;
          v12 = v5;
          v9 = (WTF *)MEMORY[0x19AEA3D2C](v6);
          WTF::fastFree(v9, v10);
          v5 = v12;
          v4 = v13;
          result = v14;
        }
      }
      ++v4;
    }
    while (v4 != (unsigned int **)v5);
  }
  v3 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    v11 = result;
    WTF::fastFree(v3, a2);
    return v11;
  }
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  WebCore::OffscreenCanvas *v8;
  bmalloc::api *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(WebCore::OffscreenCanvas **)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 1)
        {
          v11 = v7;
          v12 = v6;
          WebCore::OffscreenCanvas::~OffscreenCanvas(v8);
          bmalloc::api::isoDeallocate(v9, v10);
          v7 = v11;
          v6 = v12;
        }
        else
        {
          --*((_DWORD *)v8 + 6);
        }
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::URLKeepingBlobAlive,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::URLKeepingBlobAlive *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WebCore::URLKeepingBlobAlive **)a1;
    v7 = 72 * v3;
    do
    {
      WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive(v6);
      v6 = (WebCore::URLKeepingBlobAlive *)(v8 + 72);
      v7 -= 72;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  WTF *v10;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_DWORD **)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (v8[2] == 1)
        {
          v9 = v7;
          v10 = v6;
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
          v7 = v9;
          v6 = v10;
        }
        else
        {
          --v8[2];
        }
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::RTCDataChannel,WTF::RawPtrTraits<WebCore::RTCDataChannel>,WTF::DefaultRefDerefTraits<WebCore::RTCDataChannel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  WebCore::RTCDataChannel *v8;
  bmalloc::api *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(WebCore::RTCDataChannel **)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 1)
        {
          v11 = v7;
          v12 = v6;
          WebCore::RTCDataChannel::~RTCDataChannel(v8, a2);
          bmalloc::api::isoDeallocate(v9, v10);
          v7 = v11;
          v6 = v12;
        }
        else
        {
          --*((_DWORD *)v8 + 6);
        }
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t i;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    for (i = 8 * v3; i; i -= 8)
    {
      v8 = *(_DWORD **)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (v8[2] == 1)
        {
          v9 = *((_QWORD *)v8 + 2);
          *((_QWORD *)v8 + 2) = 0;
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 8);
            if (__ldaxr((unsigned __int8 *)v10))
            {
              __clrex();
              goto LABEL_15;
            }
            if (__stxr(1u, (unsigned __int8 *)v10))
LABEL_15:
              MEMORY[0x19AEA534C](v10);
            v12 = *(_QWORD *)(v10 + 8);
            v13 = v12 - 1;
            *(_QWORD *)(v10 + 8) = v12 - 1;
            if (v12 == 1)
            {
              v17 = *(_QWORD *)(v10 + 16);
              v14 = *(_QWORD *)(v10 + 24);
              *(_QWORD *)(v10 + 24) = 0;
              v15 = v17 != 0;
            }
            else
            {
              v14 = 0;
              v15 = 1;
            }
            v16 = __ldxr((unsigned __int8 *)v10);
            if (v16 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v10))
                goto LABEL_23;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_23:
            if (!v13)
            {
              if (v14)
                (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
              if (!v15)
                WTF::fastFree((WTF *)v10, a2);
            }
          }
          if (*(_QWORD *)v8)
          {
            *(_QWORD *)(*(_QWORD *)v8 + 8) = 3;
            *(_QWORD *)v8 = 0;
          }
          bmalloc::api::isoDeallocate((bmalloc::api *)v8, a2);
          goto LABEL_9;
        }
        --v8[2];
      }
LABEL_9:
      v6 = (WTF *)((char *)v6 + 8);
    }
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::DeferrableRefCountedBase **v6;
  uint64_t v7;
  WTF::DeferrableRefCountedBase *v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF::DeferrableRefCountedBase ***)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v8);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WebCore::SerializedScriptValue::create@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  WTF *v16;
  WTF *v17;
  void *v18;
  WTF *v19;
  uint64_t v20;

  v19 = 0;
  v20 = 0;
  WebCore::CloneSerializer::write((uint64_t)&v19, 15);
  if (!(_DWORD)a2)
  {
    WebCore::CloneSerializer::write((char *)&v19, 17);
    goto LABEL_9;
  }
  WebCore::CloneSerializer::write((char *)&v19, 16);
  if ((a2 & 0xFF00000000) != 0)
  {
    WebCore::CloneSerializer::write((uint64_t)&v19, a2 | 0x80000000);
    WebCore::writeLittleEndian<unsigned char>((void **)&v19, a1, a2);
LABEL_9:
    v10 = WTF::fastMalloc((WTF *)0x100);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = v19;
    v11 = v20;
    v19 = 0;
    v20 = 0;
    *(_QWORD *)(v10 + 16) = v11;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 184) = 0u;
    *(_OWORD *)(v10 + 200) = 0u;
    *(_OWORD *)(v10 + 216) = 0u;
    *(_OWORD *)(v10 + 232) = 0u;
    *(_QWORD *)(v10 + 248) = 0;
    *(_QWORD *)(v10 + 248) = WebCore::SerializedScriptValue::computeMemoryCost((WebCore::SerializedScriptValue *)v10);
    goto LABEL_10;
  }
  WebCore::CloneSerializer::write((uint64_t)&v19, a2);
  if (((a2 >> 31) & 1) == 0)
  {
    v7 = a2;
    v8 = HIDWORD(v20);
    v9 = HIDWORD(v20) + 2 * v7;
    if (v9 > v20)
    {
      v13 = v20 + ((unint64_t)v20 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= v9)
        v15 = HIDWORD(v20) + 2 * v7;
      else
        v15 = v14;
      if (HIDWORD(v15))
        goto LABEL_25;
      v16 = v19;
      v17 = (WTF *)WTF::fastMalloc((WTF *)v15);
      LODWORD(v20) = v15;
      v19 = v17;
      memcpy(v17, v16, v8);
      if (v16)
      {
        if (v19 == v16)
        {
          v19 = 0;
          LODWORD(v20) = 0;
        }
        WTF::fastFree(v16, v18);
      }
    }
    if (v9 >= HIDWORD(v20))
    {
      memcpy((char *)v19 + HIDWORD(v20), a1, 2 * v7);
      HIDWORD(v20) = v9;
      goto LABEL_9;
    }
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x1956E4CF0);
  }
  v10 = 0;
LABEL_10:
  *a3 = v10;
  result = v19;
  if (v19)
  {
    v19 = 0;
    LODWORD(v20) = 0;
    return (WTF *)WTF::fastFree(result, v6);
  }
  return result;
}

uint64_t WebCore::SerializedScriptValue::toString@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  v3 = *(unsigned int *)(this + 20);
  if (v3 < 4
    || (v4 = *(_QWORD *)(this + 8), (*(_DWORD *)v4 & 0xFFFFF0) != 0)
    || v3 < 5
    || *(_BYTE *)(v4 + 4) != 16
    || v3 <= 8)
  {
    *a2 = 0;
  }
  else
  {
    v5 = v4 + v3;
    v6 = *(_DWORD *)(v4 + 5);
    v8 = 0;
    v9 = v4 + 9;
    this = WebCore::CloneDeserializer::readString(&v9, v5, (uint64_t *)&v8, v6 & 0x7FFFFFFF, v6 >> 31, 0);
    if ((_DWORD)this)
    {
      *a2 = v8;
    }
    else
    {
      *a2 = 0;
      this = (uint64_t)v8;
      v8 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::SerializedScriptValue::deserialize(uint64_t a1, WTF::StringImpl *a2, _DWORD *a3, uint64_t a4, int a5, BOOL *a6)
{
  uint64_t v7[2];
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  v7[0] = 0;
  v7[1] = 0;
  return WebCore::SerializedScriptValue::deserialize(a1, a2, a3, a4, (uint64_t)v8, v7, a5, a6);
}

uint64_t WebCore::SerializedScriptValue::deserialize(uint64_t a1, WTF::StringImpl *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, BOOL *a8)
{
  JSC::JSGlobalObject *v11;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  void *v31;
  JSValue v32;
  JSC::ArrayBuffer *v33;
  unint64_t v34;
  int v35;
  JSC::VM *v37;
  JSValue v38;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  WTF::StringImpl *v66;
  void *v67;
  void *v68;
  WTF::StringImpl *v69;
  void *v70;
  JSValue v71;
  JSC::ArrayBuffer *v72;
  void *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL *v88;
  int v89;
  uint64_t v90;
  WTF *v91;
  WTF *v92;
  int v93;
  int v94;
  uint64_t v95[2];
  uint64_t v96[2];
  uint64_t v97[2];
  uint64_t v98[2];
  uint64_t v99[2];
  uint64_t v100[2];
  uint64_t v101[2];
  uint64_t v102[2];
  WTF *v103[2];
  _BYTE v104[16];
  _BYTE v105[248];
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  JSC::VM *v111[31];
  unsigned int v112;
  unsigned int v113;
  WTF *v114;
  WTF *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v11 = a2;
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *((unsigned int *)a6 + 3);
  v92 = 0;
  v93 = 0;
  v94 = v15;
  v87 = v14;
  if ((_DWORD)v15)
  {
    if (v15 >> 29)
      goto LABEL_66;
    v40 = a3;
    v41 = a4;
    v42 = a5;
    v43 = WTF::fastMalloc((WTF *)(8 * v15));
    v13 = (WTF *)v43;
    v93 = v15;
    v92 = (WTF *)v43;
    v44 = *((unsigned int *)a6 + 3);
    if ((_DWORD)v44)
    {
      v56 = 0;
      v57 = *a6;
      v58 = 8 * v44;
      a5 = v42;
      a4 = v41;
      a3 = v40;
      v14 = v87;
      do
      {
        v59 = *(_DWORD **)(v57 + v56);
        if (v59)
          *v59 += 2;
        *(_QWORD *)(v43 + v56) = v59;
        v56 += 8;
      }
      while (v58 != v56);
    }
    else
    {
      a5 = v42;
      a4 = v41;
      a3 = v40;
      v14 = v87;
    }
  }
  if (*(_DWORD *)(a1 + 20))
  {
    v90 = (uint64_t)v11;
    v91 = v13;
    v88 = a8;
    v89 = a7;
    v16 = a1 + 8;
    v17 = (uint64_t *)(a1 + 152);
    v18 = (uint64_t *)(a1 + 168);
    v19 = a1 + 184;
    v20 = *(_QWORD *)(a1 + 144);
    v21 = a1 + 200;
    v22 = (uint64_t *)(a1 + 32);
    v23 = *(_QWORD *)(a1 + 216);
    v24 = *(_QWORD *)(a1 + 224);
    v25 = (uint64_t *)(a1 + 112);
    v26 = (uint64_t *)(a1 + 48);
    v27 = (uint64_t *)(a1 + 80);
    v28 = (uint64_t *)(a1 + 64);
    v109 = 0;
    v108 = 0;
    v29 = (uint64_t *)(a1 + 96);
    v30 = (uint64_t *)(a1 + 128);
    v110 = v15;
    v85 = a4;
    v86 = a5;
    v83 = v16;
    v84 = a3;
    v81 = v20;
    v82 = v19;
    v79 = v23;
    v80 = v21;
    v78 = v24;
    if (!(_DWORD)v15)
    {
      v75 = v26;
      v11 = (JSC::JSGlobalObject *)v90;
      WebCore::CloneDeserializer::CloneDeserializer((uint64_t)v111, v90, a3, a4, v14, v16, a5, (uint64_t)&v108, v20, v17, v18, v19, v21, v22, v25, v23, v24, v75, v27,
        v28,
        v29,
        v30);
      a7 = v89;
      a8 = v88;
      v13 = v91;
      goto LABEL_5;
    }
    if (!(v15 >> 29))
    {
      v77 = 8 * v15;
      v45 = WTF::fastMalloc((WTF *)(8 * v15));
      v46 = 0;
      v109 = v15;
      v108 = v45;
      do
      {
        v47 = *(_DWORD **)((char *)v91 + v46);
        if (v47)
          *v47 += 2;
        *(_QWORD *)(v45 + v46) = v47;
        v46 += 8;
      }
      while (v77 != v46);
      v76 = v26;
      v74 = v18;
      v11 = (JSC::JSGlobalObject *)v90;
      v48 = (WTF *)v45;
      WebCore::CloneDeserializer::CloneDeserializer((uint64_t)v111, v90, v84, v85, v87, v83, v86, (uint64_t)&v108, v81, v17, v74, v82, v80, v22, v25, v79, v78, v76, v27,
        v28,
        v29,
        v30);
      v50 = v48;
      v51 = 0;
      a7 = v89;
      a8 = v88;
      v13 = v91;
      do
      {
        v52 = *(WTF::StringImpl **)((char *)v50 + v51);
        *(_QWORD *)((char *)v50 + v51) = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
          {
            WTF::StringImpl::destroy(v52, v49);
            v50 = v48;
          }
          else
          {
            *(_DWORD *)v52 -= 2;
          }
        }
        v51 += 8;
      }
      while (v77 != v51);
      WTF::fastFree(v50, v49);
LABEL_5:
      if (v112 <= 0xF)
      {
        if (v112 == 12)
        {
          if (v113 < 2)
          {
LABEL_8:
            v34 = WebCore::CloneDeserializer::deserialize((WebCore::CloneDeserializer *)v111, v31, v32, v33);
            v35 = (int)v31;
            if ((_DWORD)v31)
            {
              if ((v112 == 12 || v112 == 14) && !v113)
              {
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v104, (uint64_t)&v92);
                v103[0] = v114;
                v103[1] = v115;
                v115 = 0;
                v114 = 0;
                v102[0] = v116;
                v102[1] = v117;
                v117 = 0;
                v116 = 0;
                v101[0] = v118;
                v101[1] = v119;
                v118 = 0;
                v119 = 0;
                v100[0] = v120;
                v100[1] = v121;
                v120 = 0;
                v121 = 0;
                v99[0] = v122;
                v99[1] = v123;
                v122 = 0;
                v123 = 0;
                v98[0] = v124;
                v98[1] = v125;
                v124 = 0;
                v125 = 0;
                v97[0] = v126;
                v97[1] = v127;
                v126 = 0;
                v127 = 0;
                v96[0] = v128;
                v96[1] = v129;
                v128 = 0;
                v129 = 0;
                v95[0] = v130;
                v95[1] = v131;
                v130 = 0;
                v131 = 0;
                WebCore::CloneDeserializer::CloneDeserializer((uint64_t)v105, (uint64_t)v11, v84, v85, v87, v83, v86, (uint64_t)v104, v81, (uint64_t *)v103, v102, v82, v80, v101, v100, v79, v78, v99, v98,
                  v97,
                  v96,
                  v95);
                WTF::Vector<std::unique_ptr<WebCore::MediaStreamTrackDataHolder>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v95, v60);
                WTF::Vector<WebCore::WebCodecsAudioInternalData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v96, v61);
                WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedAudioChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedAudioChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedAudioChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v97, v62);
                WTF::Vector<WebCore::WebCodecsVideoFrameData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v98, v63);
                WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedAudioChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedAudioChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedAudioChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v99, v64);
                WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v100, v65);
                WTF::Vector<std::unique_ptr<WebCore::DetachedRTCDataChannel>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v101, v66);
                WTF::Vector<std::unique_ptr<WebCore::DetachedOffscreenCanvas>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v102, v67);
                WTF::Vector<std::optional<WebCore::DetachedImageBitmap>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v103, v68);
                WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v104, v69);
                if (v106 == 12)
                {
                  if (!v107)
                    v107 = 1;
                }
                else if (v106 == 14 && !v107)
                {
                  v106 = 15;
                }
                v34 = WebCore::CloneDeserializer::deserialize((WebCore::CloneDeserializer *)v105, v70, v71, v72);
                v35 = (int)v73;
                WebCore::CloneDeserializer::~CloneDeserializer((WebCore::CloneDeserializer *)v105, v73);
                LODWORD(v15) = v94;
                v13 = v92;
                v11 = (JSC::JSGlobalObject *)v90;
                a7 = v89;
                a8 = v88;
              }
            }
            else
            {
              v35 = 0;
            }
            goto LABEL_10;
          }
        }
        else if (!v113)
        {
          goto LABEL_8;
        }
      }
      v34 = 0;
      v35 = 3;
LABEL_10:
      WebCore::CloneDeserializer::~CloneDeserializer((WebCore::CloneDeserializer *)v111, v31);
      goto LABEL_11;
    }
LABEL_66:
    __break(0xC471u);
    JUMPOUT(0x1956E540CLL);
  }
  v35 = 6;
  v34 = 2;
LABEL_11:
  if ((_DWORD)v15)
  {
    v53 = 8 * v15;
    v54 = (WTF::StringImpl **)v13;
    do
    {
      v55 = *v54;
      *v54 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, a2);
        else
          *(_DWORD *)v55 -= 2;
      }
      ++v54;
      v53 -= 8;
    }
    while (v53);
  }
  if (v13)
  {
    v92 = 0;
    v93 = 0;
    WTF::fastFree(v13, a2);
  }
  if (a8)
    *a8 = v35 != 0;
  if (a7 == 1)
  {
    v37 = (JSC::VM *)*((_QWORD *)v11 + 7);
    v111[0] = v37;
    switch(v35)
    {
      case 5:
        WebCore::throwDataCloneError(v11, v111);
        break;
      case 3:
        JSC::throwTypeError();
        break;
      case 1:
        v38.super.isa = (Class)JSC::createStackOverflowError(v11, a2);
        JSC::VM::throwException(v37, v11, v38);
        break;
    }
  }
  if (v34)
    return v34;
  else
    return 2;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_DWORD ***)a2;
      v8 = 8 * v6;
      do
      {
        v9 = *v7;
        if (*v7)
          *v9 += 2;
        *v5++ = v9;
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

WTF *WebCore::SerializedScriptValue::writeBlobsToDiskForIndexedDB(WTF *result, uint64_t *a2)
{
  unsigned int *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  WTF *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = (unsigned int *)result;
  v4 = WebCore::s_platformStrategies;
  v5 = *(WTF **)(WebCore::s_platformStrategies + 40);
  if (!v5)
  {
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
    v5 = result;
    *(_QWORD *)(v4 + 40) = result;
  }
  v20 = 0;
  v21 = 0;
  v6 = v3[61];
  if ((_DWORD)v6)
  {
    if (v6 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
    LODWORD(v21) = v6;
    v20 = v7;
    if (v3[61])
    {
      v8 = v7;
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = v10;
        WTF::String::isolatedCopy();
        v10 = v11 + 1;
        *((_QWORD *)v8 + v11) = v22;
        v9 += 72;
      }
      while (v11 + 1 < (unint64_t)v3[61]);
      HIDWORD(v21) = v11 + 1;
    }
  }
  v12 = *a2;
  *a2 = 0;
  do
    v13 = __ldaxr(v3);
  while (__stlxr(v13 + 1, v3));
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v14 = &off_1E33944B0;
  v14[1] = v12;
  v14[2] = v3;
  v14[3] = v3;
  v22 = v14;
  (*(void (**)(WTF *, WTF **, _QWORD **))(*(_QWORD *)v5 + 80))(v5, &v20, &v22);
  v16 = v22;
  v22 = 0;
  if (v16)
    (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  if (HIDWORD(v21))
  {
    v17 = v20;
    v18 = 8 * HIDWORD(v21);
    do
    {
      v19 = *(WTF::StringImpl **)v17;
      *(_QWORD *)v17 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v15);
        else
          *(_DWORD *)v19 -= 2;
      }
      v17 = (WTF *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  result = v20;
  if (v20)
  {
    v20 = 0;
    LODWORD(v21) = 0;
    return (WTF *)WTF::fastFree(result, v15);
  }
  return result;
}

uint64_t WebCore::cloneArrayBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  JSC::ArrayBuffer *v5;
  uint64_t v6;
  uint64_t (*v8)();
  JSC::VM *v9;
  unint64_t v10;
  double v11;
  int v12;
  JSC::VM *v13;
  unint64_t v14;
  double v15;
  int v16;
  WTF::DeferrableRefCountedBase *v17;
  JSC::JSGlobalObject *v18;
  JSC::JSGlobalObject *v20;
  JSC::VM *v21;

  v3 = this;
  v4 = *((_QWORD *)a2 + 6);
  if ((v4 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v4 + 5) != 38
    || (v5 = *(JSC::ArrayBuffer **)(v4 + 16)) == 0
    || (*((_QWORD *)v5 + 4)
      ? (v8 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance)
      : (v8 = 0),
        v8))
  {
    v21 = (JSC::VM *)*((_QWORD *)this + 7);
    WebCore::throwDataCloneError(this, &v21);
    return 0;
  }
  else
  {
    v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v21 = v9;
    if ((unint64_t)v9 >= 0xFFFE000000000000)
    {
      v11 = (double)(int)v9;
    }
    else
    {
      v10 = (unint64_t)v9 - 0x2000000000000;
      if (v10 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v18 = a2;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v21, this);
        a2 = v18;
        v3 = this;
      }
      else
      {
        v11 = *(double *)&v10;
      }
    }
    v12 = (int)v11;
    v13 = (JSC::VM *)*((_QWORD *)a2 + 8);
    v21 = v13;
    if ((unint64_t)v13 >= 0xFFFE000000000000)
    {
      v15 = (double)(int)v13;
    }
    else
    {
      v14 = (unint64_t)v13 - 0x2000000000000;
      if (v14 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v20 = v3;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v21, v3);
        v3 = v20;
      }
      else
      {
        v15 = *(double *)&v14;
      }
    }
    v16 = (int)v15;
    JSC::JSGlobalObject::arrayBufferStructure((uint64_t)v3, 0);
    JSC::ArrayBuffer::slice(v5, (double)v12, (double)(v16 + v12));
    v6 = JSC::JSArrayBuffer::create();
    v17 = v21;
    v21 = 0;
    if (v17)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v17);
  }
  return v6;
}

uint64_t WebCore::structuredCloneForStream(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  JSC::JSGlobalObject *v15;
  uint64_t v17;
  uint64_t v18;
  WTF::DeferrableRefCountedBase *v19;
  JSC::JSGlobalObject *v20;
  JSC::ArrayBufferView *v21;
  JSC::ArrayBufferView *v22;
  WTF::DeferrableRefCountedBase *v23;
  unint64_t v24;
  char v25;
  WTF::DeferrableRefCountedBase *v26;
  WTF::DeferrableRefCountedBase *v27;
  _QWORD v28[2];
  JSC::VM *v29;
  WebCore *v30;
  JSC::ArrayBufferView *v31;
  char v32;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v3;
  v30 = this;
  v4 = *((_QWORD *)a2 + 6);
  v28[0] = v3;
  v28[1] = &v30;
  if ((v4 & 0xFFFE000000000002) != 0)
    goto LABEL_2;
  v5 = *(unsigned __int8 *)(v4 + 5);
  if (v5 != 38)
  {
    if ((v5 - 39) > 0xB)
    {
LABEL_2:
      JSC::throwTypeError();
      return 0;
    }
    v9 = JSC::JSArrayBufferView::unsharedBuffer((JSC::JSArrayBufferView *)v4);
    if (!v9
      || (v10 = *(_QWORD *)(v9 + 16)) == 0
      || (v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) != 0
      && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
      && !((v10 & 0x3FFFFFFFFLL) + v11))
    {
      this = v30;
LABEL_5:
      WebCore::throwDataCloneError(this, &v29);
      return 0;
    }
    WebCore::structuredCloneForStream(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(&v27, (uint64_t)v28, v9);
    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    {
      v23 = v27;
      if (!v27)
        return 0;
LABEL_63:
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v23);
      return 0;
    }
    if ((*(_BYTE *)(v4 + 40) & 6) != 0)
    {
      v12 = *(_QWORD *)(v4 + 32);
      if ((*(_BYTE *)(v4 + 40) & 1) != 0)
      {
        v13 = 0;
        v14 = 0;
LABEL_22:
        switch(*(_BYTE *)(v4 + 5))
        {
          case '\'':
            v15 = v30;
            v26 = v27;
            JSC::GenericTypedArrayView<JSC::Int8Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)&v31, &v26, v12, v13, v14);
            goto LABEL_49;
          case '(':
            v15 = v30;
            v26 = v27;
            JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)&v31, &v26, v12, v13, v14);
            goto LABEL_49;
          case ')':
            v15 = v30;
            v26 = v27;
            JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)&v31, &v26, v12, v13, v14);
            goto LABEL_49;
          case '*':
            v15 = v30;
            v26 = v27;
            JSC::GenericTypedArrayView<JSC::Int16Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)&v31, &v26, v12, v13, v14);
            goto LABEL_49;
          case '+':
            v15 = v30;
            v26 = v27;
            JSC::GenericTypedArrayView<JSC::Uint16Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)&v31, &v26, v12, v13, v14);
            goto LABEL_49;
          case ',':
            v15 = v30;
            v26 = v27;
            JSC::GenericTypedArrayView<JSC::Int32Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)&v31, &v26, v12, v13, v14);
            goto LABEL_49;
          case '-':
            v15 = v30;
            v26 = v27;
            JSC::GenericTypedArrayView<JSC::Uint32Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)&v31, &v26, v12, v13, v14);
            goto LABEL_49;
          case '.':
            v15 = v30;
            v26 = v27;
            JSC::GenericTypedArrayView<JSC::Float32Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)&v31, &v26, v12, v13, v14);
            goto LABEL_49;
          case '/':
            v15 = v30;
            v26 = v27;
            JSC::GenericTypedArrayView<JSC::Float64Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)&v31, &v26, v12, v13, v14);
            goto LABEL_49;
          case '0':
            v15 = v30;
            v26 = v27;
            JSC::GenericTypedArrayView<JSC::BigInt64Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)&v31, &v26, v12, v13, v14);
            goto LABEL_49;
          case '1':
            v15 = v30;
            v26 = v27;
            JSC::GenericTypedArrayView<JSC::BigUint64Adaptor>::wrappedAs((WTF::DeferrableRefCountedBase *)&v31, &v26, v12, v13, v14);
LABEL_49:
            v22 = v31;
            if (v31)
            {
              v7 = JSC::ArrayBufferView::wrap(v31, v15, v15);
              if (*(_DWORD *)v22 == 1)
                JSC::ArrayBufferView::operator delete();
              else
                --*(_DWORD *)v22;
            }
            else
            {
              v7 = 2;
            }
            v19 = v26;
            if (v26)
              goto LABEL_54;
            return v7;
          case '2':
            v20 = v30;
            v26 = v27;
            JSC::DataView::wrappedAs();
            if (v31)
            {
              v7 = JSC::ArrayBufferView::wrap(v31, v20, v20);
              v21 = v31;
              v31 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 1)
                  JSC::ArrayBufferView::operator delete();
                else
                  --*(_DWORD *)v21;
              }
            }
            else
            {
              v31 = 0;
              v7 = 2;
            }
            v19 = v26;
            v26 = 0;
            if (!v19)
              return v7;
            goto LABEL_54;
          default:
            __break(0xC471u);
            JUMPOUT(0x1956E5C88);
        }
      }
    }
    else if ((*(_BYTE *)(v4 + 40) & 7u) > 2)
    {
      LOBYTE(v31) = 0;
      v32 = 0;
      if ((JSC::isArrayBufferViewOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v4, (WTF *)&v31) & 1) != 0)v12 = 0;
      else
        v12 = *(_QWORD *)(v4 + 32);
      if ((*(_BYTE *)(v4 + 40) & 7u) > 2)
      {
        LOBYTE(v31) = 0;
        v32 = 0;
        v24 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v4, (WTF *)&v31);
        if (v25)
          v13 = v24;
        else
          v13 = 0;
        goto LABEL_21;
      }
    }
    else
    {
      v12 = *(_QWORD *)(v4 + 32);
    }
    v13 = *(_QWORD *)(v4 + 24);
LABEL_21:
    v14 = 1;
    goto LABEL_22;
  }
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
    goto LABEL_5;
  if (*(_QWORD *)(v6 + 32)
     ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
     : 0)
  {
    goto LABEL_5;
  }
  v17 = *(_QWORD *)(v6 + 16);
  if (!v17)
    goto LABEL_5;
  v18 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v18 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v17 & 0x3FFFFFFFFLL) + v18))
    goto LABEL_5;
  WebCore::structuredCloneForStream(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(&v31, (uint64_t)v28, v6);
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
  {
    v23 = v31;
    if (!v31)
      return 0;
    goto LABEL_63;
  }
  JSC::JSGlobalObject::arrayBufferStructure((uint64_t)v30, 0);
  v27 = v31;
  v7 = JSC::JSArrayBuffer::create();
  v19 = v27;
  v27 = 0;
  if (v19)
LABEL_54:
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v19);
  return v7;
}

void *WebCore::structuredCloneForStream(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  size_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  uint64_t v12;

  if (*(_BYTE *)(a3 + 64))
  {
    v11 = *(_QWORD *)(a3 + 32);
    if (v11)
      v5 = *(_QWORD *)(v11 + 32);
    else
      v5 = *(_QWORD *)(a3 + 48);
  }
  else
  {
    v5 = *(_QWORD *)(a3 + 48);
  }
  JSC::ArrayBuffer::tryCreate();
  if (v12)
  {
    v6 = *(_QWORD *)(v12 + 16);
    if (v6)
    {
      v7 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v7)
      {
        if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
          v6 = (v6 & 0x3FFFFFFFFLL) + v7;
      }
    }
    v8 = *(_QWORD *)(a3 + 16);
    if (v8)
    {
      v9 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v9)
      {
        if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
          v8 = (v8 & 0x3FFFFFFFFLL) + v9;
      }
    }
    result = memcpy((void *)v6, (const void *)v8, v5);
    *a1 = v12;
  }
  else
  {
    JSC::throwOutOfMemoryError();
    *a1 = 0;
    return 0;
  }
  return result;
}

uint64_t JSC::JSGlobalObject::arrayBufferStructure(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t (*v4)(_QWORD *);
  _QWORD *v5;
  _QWORD v6[3];

  if ((a2 & 1) != 0)
    return JSC::LazyClassStructure::get((uint64_t *)(a1 + 1144), a1);
  result = *(_QWORD *)(a1 + 1600);
  if ((result & 1) != 0)
  {
    v4 = *(uint64_t (**)(_QWORD *))(result & 0xFFFFFFFFFFFFFFFCLL);
    v5 = (_QWORD *)(a1 - 16);
    if ((a1 & 8) == 0)
      v5 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v6[0] = *v5;
    v6[1] = a1;
    v6[2] = a1 + 1600;
    return v4(v6);
  }
  return result;
}

WTF::DeferrableRefCountedBase *JSC::GenericTypedArrayView<JSC::Int8Adaptor>::wrappedAs(WTF::DeferrableRefCountedBase *result, WTF::DeferrableRefCountedBase **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v6;
  WTF::DeferrableRefCountedBase *v7;
  uint64_t (*v8)();
  unint64_t v9;
  BOOL v10;
  char v11;
  WTF::DeferrableRefCountedBase *v12;
  WTF::DeferrableRefCountedBase *v13;

  v6 = (uint64_t *)result;
  v7 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v7 + 4))
      v8 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_16;
    v9 = *((_QWORD *)v7 + 7);
  }
  else
  {
    v9 = *((_QWORD *)v7 + 6);
  }
  if (a5)
    v10 = a4 > v9 - a3;
  else
    v10 = 0;
  v11 = !v10;
  if (v9 < a3 || (v11 & 1) == 0)
  {
    *(_QWORD *)result = 0;
    return result;
  }
LABEL_16:
  WTF::fastMalloc((WTF *)0x28);
  v12 = *a2;
  *a2 = 0;
  v13 = v12;
  *v6 = JSC::ArrayBufferView::ArrayBufferView();
  result = v13;
  if (v13)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
  return result;
}

WTF::DeferrableRefCountedBase *JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::wrappedAs(WTF::DeferrableRefCountedBase *result, WTF::DeferrableRefCountedBase **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v6;
  WTF::DeferrableRefCountedBase *v7;
  uint64_t (*v8)();
  unint64_t v9;
  BOOL v10;
  char v11;
  WTF::DeferrableRefCountedBase *v12;
  WTF::DeferrableRefCountedBase *v13;

  v6 = (uint64_t *)result;
  v7 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v7 + 4))
      v8 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_16;
    v9 = *((_QWORD *)v7 + 7);
  }
  else
  {
    v9 = *((_QWORD *)v7 + 6);
  }
  if (a5)
    v10 = a4 > v9 - a3;
  else
    v10 = 0;
  v11 = !v10;
  if (v9 < a3 || (v11 & 1) == 0)
  {
    *(_QWORD *)result = 0;
    return result;
  }
LABEL_16:
  WTF::fastMalloc((WTF *)0x28);
  v12 = *a2;
  *a2 = 0;
  v13 = v12;
  *v6 = JSC::ArrayBufferView::ArrayBufferView();
  result = v13;
  if (v13)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
  return result;
}

WTF::DeferrableRefCountedBase *JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::wrappedAs(WTF::DeferrableRefCountedBase *result, WTF::DeferrableRefCountedBase **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v6;
  WTF::DeferrableRefCountedBase *v7;
  uint64_t (*v8)();
  unint64_t v9;
  BOOL v10;
  char v11;
  WTF::DeferrableRefCountedBase *v12;
  WTF::DeferrableRefCountedBase *v13;

  v6 = (uint64_t *)result;
  v7 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v7 + 4))
      v8 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_16;
    v9 = *((_QWORD *)v7 + 7);
  }
  else
  {
    v9 = *((_QWORD *)v7 + 6);
  }
  if (a5)
    v10 = a4 > v9 - a3;
  else
    v10 = 0;
  v11 = !v10;
  if (v9 < a3 || (v11 & 1) == 0)
  {
    *(_QWORD *)result = 0;
    return result;
  }
LABEL_16:
  WTF::fastMalloc((WTF *)0x28);
  v12 = *a2;
  *a2 = 0;
  v13 = v12;
  *v6 = JSC::ArrayBufferView::ArrayBufferView();
  result = v13;
  if (v13)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
  return result;
}

WTF::DeferrableRefCountedBase *JSC::GenericTypedArrayView<JSC::Int16Adaptor>::wrappedAs(WTF::DeferrableRefCountedBase *result, WTF::DeferrableRefCountedBase **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v6;
  WTF::DeferrableRefCountedBase *v7;
  uint64_t (*v8)();
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  WTF::DeferrableRefCountedBase *v12;
  WTF::DeferrableRefCountedBase *v13;

  v6 = (uint64_t *)result;
  v7 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v7 + 4))
      v8 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_12;
    v9 = *((_QWORD *)v7 + 7);
  }
  else
  {
    v9 = *((_QWORD *)v7 + 6);
  }
  v10 = v9 >= a3;
  v11 = v9 - a3;
  if (!v10 || a5 && a4 > v11 >> 1)
    goto LABEL_15;
LABEL_12:
  if ((a3 & 1) != 0)
  {
LABEL_15:
    *(_QWORD *)result = 0;
    return result;
  }
  WTF::fastMalloc((WTF *)0x28);
  v12 = *a2;
  *a2 = 0;
  v13 = v12;
  *v6 = JSC::ArrayBufferView::ArrayBufferView();
  result = v13;
  if (v13)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
  return result;
}

WTF::DeferrableRefCountedBase *JSC::GenericTypedArrayView<JSC::Uint16Adaptor>::wrappedAs(WTF::DeferrableRefCountedBase *result, WTF::DeferrableRefCountedBase **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v6;
  WTF::DeferrableRefCountedBase *v7;
  uint64_t (*v8)();
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  WTF::DeferrableRefCountedBase *v12;
  WTF::DeferrableRefCountedBase *v13;

  v6 = (uint64_t *)result;
  v7 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v7 + 4))
      v8 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_12;
    v9 = *((_QWORD *)v7 + 7);
  }
  else
  {
    v9 = *((_QWORD *)v7 + 6);
  }
  v10 = v9 >= a3;
  v11 = v9 - a3;
  if (!v10 || a5 && a4 > v11 >> 1)
    goto LABEL_15;
LABEL_12:
  if ((a3 & 1) != 0)
  {
LABEL_15:
    *(_QWORD *)result = 0;
    return result;
  }
  WTF::fastMalloc((WTF *)0x28);
  v12 = *a2;
  *a2 = 0;
  v13 = v12;
  *v6 = JSC::ArrayBufferView::ArrayBufferView();
  result = v13;
  if (v13)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
  return result;
}

WTF::DeferrableRefCountedBase *JSC::GenericTypedArrayView<JSC::Int32Adaptor>::wrappedAs(WTF::DeferrableRefCountedBase *result, WTF::DeferrableRefCountedBase **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v6;
  WTF::DeferrableRefCountedBase *v7;
  uint64_t (*v8)();
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  WTF::DeferrableRefCountedBase *v12;
  WTF::DeferrableRefCountedBase *v13;

  v6 = (uint64_t *)result;
  v7 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v7 + 4))
      v8 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_12;
    v9 = *((_QWORD *)v7 + 7);
  }
  else
  {
    v9 = *((_QWORD *)v7 + 6);
  }
  v10 = v9 >= a3;
  v11 = v9 - a3;
  if (!v10 || a5 && a4 > v11 >> 2)
    goto LABEL_13;
LABEL_12:
  if ((a3 & 3) != 0)
  {
LABEL_13:
    *(_QWORD *)result = 0;
    return result;
  }
  WTF::fastMalloc((WTF *)0x28);
  v12 = *a2;
  *a2 = 0;
  v13 = v12;
  *v6 = JSC::ArrayBufferView::ArrayBufferView();
  result = v13;
  if (v13)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
  return result;
}

WTF::DeferrableRefCountedBase *JSC::GenericTypedArrayView<JSC::Uint32Adaptor>::wrappedAs(WTF::DeferrableRefCountedBase *result, WTF::DeferrableRefCountedBase **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v6;
  WTF::DeferrableRefCountedBase *v7;
  uint64_t (*v8)();
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  WTF::DeferrableRefCountedBase *v12;
  WTF::DeferrableRefCountedBase *v13;

  v6 = (uint64_t *)result;
  v7 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v7 + 4))
      v8 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_12;
    v9 = *((_QWORD *)v7 + 7);
  }
  else
  {
    v9 = *((_QWORD *)v7 + 6);
  }
  v10 = v9 >= a3;
  v11 = v9 - a3;
  if (!v10 || a5 && a4 > v11 >> 2)
    goto LABEL_13;
LABEL_12:
  if ((a3 & 3) != 0)
  {
LABEL_13:
    *(_QWORD *)result = 0;
    return result;
  }
  WTF::fastMalloc((WTF *)0x28);
  v12 = *a2;
  *a2 = 0;
  v13 = v12;
  *v6 = JSC::ArrayBufferView::ArrayBufferView();
  result = v13;
  if (v13)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
  return result;
}

WTF::DeferrableRefCountedBase *JSC::GenericTypedArrayView<JSC::Float32Adaptor>::wrappedAs(WTF::DeferrableRefCountedBase *result, WTF::DeferrableRefCountedBase **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v6;
  WTF::DeferrableRefCountedBase *v7;
  uint64_t (*v8)();
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  WTF::DeferrableRefCountedBase *v12;
  WTF::DeferrableRefCountedBase *v13;

  v6 = (uint64_t *)result;
  v7 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v7 + 4))
      v8 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_12;
    v9 = *((_QWORD *)v7 + 7);
  }
  else
  {
    v9 = *((_QWORD *)v7 + 6);
  }
  v10 = v9 >= a3;
  v11 = v9 - a3;
  if (!v10 || a5 && a4 > v11 >> 2)
    goto LABEL_13;
LABEL_12:
  if ((a3 & 3) != 0)
  {
LABEL_13:
    *(_QWORD *)result = 0;
    return result;
  }
  WTF::fastMalloc((WTF *)0x28);
  v12 = *a2;
  *a2 = 0;
  v13 = v12;
  *v6 = JSC::ArrayBufferView::ArrayBufferView();
  result = v13;
  if (v13)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
  return result;
}

WTF::DeferrableRefCountedBase *JSC::GenericTypedArrayView<JSC::Float64Adaptor>::wrappedAs(WTF::DeferrableRefCountedBase *result, WTF::DeferrableRefCountedBase **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v6;
  WTF::DeferrableRefCountedBase *v7;
  uint64_t (*v8)();
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  WTF::DeferrableRefCountedBase *v12;
  WTF::DeferrableRefCountedBase *v13;

  v6 = (uint64_t *)result;
  v7 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v7 + 4))
      v8 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_12;
    v9 = *((_QWORD *)v7 + 7);
  }
  else
  {
    v9 = *((_QWORD *)v7 + 6);
  }
  v10 = v9 >= a3;
  v11 = v9 - a3;
  if (!v10 || a5 && a4 > v11 >> 3)
    goto LABEL_13;
LABEL_12:
  if ((a3 & 7) != 0)
  {
LABEL_13:
    *(_QWORD *)result = 0;
    return result;
  }
  WTF::fastMalloc((WTF *)0x28);
  v12 = *a2;
  *a2 = 0;
  v13 = v12;
  *v6 = JSC::ArrayBufferView::ArrayBufferView();
  result = v13;
  if (v13)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
  return result;
}

WTF::DeferrableRefCountedBase *JSC::GenericTypedArrayView<JSC::BigInt64Adaptor>::wrappedAs(WTF::DeferrableRefCountedBase *result, WTF::DeferrableRefCountedBase **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v6;
  WTF::DeferrableRefCountedBase *v7;
  uint64_t (*v8)();
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  WTF::DeferrableRefCountedBase *v12;
  WTF::DeferrableRefCountedBase *v13;

  v6 = (uint64_t *)result;
  v7 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v7 + 4))
      v8 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_12;
    v9 = *((_QWORD *)v7 + 7);
  }
  else
  {
    v9 = *((_QWORD *)v7 + 6);
  }
  v10 = v9 >= a3;
  v11 = v9 - a3;
  if (!v10 || a5 && a4 > v11 >> 3)
    goto LABEL_13;
LABEL_12:
  if ((a3 & 7) != 0)
  {
LABEL_13:
    *(_QWORD *)result = 0;
    return result;
  }
  WTF::fastMalloc((WTF *)0x28);
  v12 = *a2;
  *a2 = 0;
  v13 = v12;
  *v6 = JSC::ArrayBufferView::ArrayBufferView();
  result = v13;
  if (v13)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
  return result;
}

WTF::DeferrableRefCountedBase *JSC::GenericTypedArrayView<JSC::BigUint64Adaptor>::wrappedAs(WTF::DeferrableRefCountedBase *result, WTF::DeferrableRefCountedBase **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v6;
  WTF::DeferrableRefCountedBase *v7;
  uint64_t (*v8)();
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  WTF::DeferrableRefCountedBase *v12;
  WTF::DeferrableRefCountedBase *v13;

  v6 = (uint64_t *)result;
  v7 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v7 + 4))
      v8 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_12;
    v9 = *((_QWORD *)v7 + 7);
  }
  else
  {
    v9 = *((_QWORD *)v7 + 6);
  }
  v10 = v9 >= a3;
  v11 = v9 - a3;
  if (!v10 || a5 && a4 > v11 >> 3)
    goto LABEL_13;
LABEL_12:
  if ((a3 & 7) != 0)
  {
LABEL_13:
    *(_QWORD *)result = 0;
    return result;
  }
  WTF::fastMalloc((WTF *)0x28);
  v12 = *a2;
  *a2 = 0;
  v13 = v12;
  *v6 = JSC::ArrayBufferView::ArrayBufferView();
  result = v13;
  if (v13)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
  return result;
}

void std::call_once[abi:sn180100]<WebCore::JSHeapData::ensureHeapData(JSC::Heap &)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::JSHeapData::ensureHeapData(JSC::Heap &)::onceFlag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::JSHeapData::ensureHeapData(JSC::Heap &)::onceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::JSHeapData::ensureHeapData(JSC::Heap &)::$_0 &&>>);
  }
}

WebCore::JSVMClientData *WebCore::JSVMClientData::JSVMClientData(WebCore::JSVMClientData *this, JSC::VM *a2)
{
  JSC::Heap *v4;
  WebCore::JSHeapData *v5;
  WebCore::JSHeapData *v6;
  void *v7;
  JSC::Heap *v9;

  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E3393AF8;
  *((_QWORD *)this + 1) = 0;
  WebCore::JSBuiltinFunctions::JSBuiltinFunctions((int32x2_t *)this + 3, a2);
  WebCore::WebCoreBuiltinNames::WebCoreBuiltinNames((WebCore::JSVMClientData *)((char *)this + 11600), a2);
  v4 = (JSC::VM *)((char *)a2 + 192);
  if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 1486))
  {
    v9 = v4;
    std::call_once[abi:sn180100]<WebCore::JSHeapData::ensureHeapData(JSC::Heap &)::$_0>((uint64_t)&v9);
    v6 = (WebCore::JSHeapData *)WebCore::JSHeapData::ensureHeapData(JSC::Heap &)::singleton;
  }
  else
  {
    v5 = (WebCore::JSHeapData *)WTF::fastMalloc((WTF *)0xB20);
    v6 = WebCore::JSHeapData::JSHeapData(v5, v4);
  }
  *((_QWORD *)this + 2831) = v6;
  JSC::GCClient::IsoSubspace::IsoSubspace();
  JSC::GCClient::IsoSubspace::IsoSubspace();
  JSC::GCClient::IsoSubspace::IsoSubspace();
  JSC::GCClient::IsoSubspace::IsoSubspace();
  JSC::GCClient::IsoSubspace::IsoSubspace();
  JSC::GCClient::IsoSubspace::IsoSubspace();
  JSC::GCClient::IsoSubspace::IsoSubspace();
  JSC::GCClient::IsoSubspace::IsoSubspace();
  JSC::GCClient::IsoSubspace::IsoSubspace();
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v7 = (void *)WTF::fastMalloc((WTF *)0x1D70);
  bzero(v7, 0x1D70uLL);
  *((_QWORD *)this + 2942) = v7;
  *(_OWORD *)((char *)this + 23544) = 0u;
  return this;
}

void WebCore::JSVMClientData::~JSVMClientData(WebCore::JSVMClientData *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t (**v4)();
  uint64_t v5;
  WTF::StringImpl *v6;
  WebCore::DOMWrapperWorld *v7;
  uint64_t v8;
  WebCore::DOMClientIsoSubspaces *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WebCore::DOMWrapperWorld *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  uint64_t i;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  unsigned int *v60;
  int v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;

  *(_QWORD *)this = off_1E3393AF8;
  v2 = (uint64_t *)((char *)this + 23544);
  v3 = WTF::fastMalloc((WTF *)0x10);
  v4 = off_1E3394528;
  *(_QWORD *)v3 = off_1E3394528;
  v5 = *((_QWORD *)this + 2943);
  if (v5)
  {
    v43 = *(unsigned int *)(v5 - 12);
    if ((_DWORD)v43)
    {
      if (v43 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v53 = (WTF *)WTF::fastMalloc((WTF *)(8 * v43));
      v55 = *v2;
      if (*v2 && *(_DWORD *)(v55 - 12))
      {
        v56 = *(unsigned int *)(v55 - 4);
        if ((_DWORD)v56)
        {
          v57 = 8 * v56;
          v58 = (uint64_t *)*v2;
          while ((unint64_t)(*v58 + 1) <= 1)
          {
            ++v58;
            v57 -= 8;
            if (!v57)
              goto LABEL_51;
          }
        }
        else
        {
          v58 = (uint64_t *)*v2;
        }
        v59 = (uint64_t *)(v55 + 8 * v56);
        if (v58 != v59)
        {
          v60 = (unsigned int *)v53;
          v61 = 0;
          v62 = *v58;
          v63 = 1;
LABEL_55:
          v64 = v63;
          v65 = *(_QWORD *)(v62 + 8);
          if (v65)
          {
            WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v65 + 8), *(_QWORD *)(v62 + 8));
            v66 = *(unsigned int **)(v65 + 8);
            if (v66)
            {
              do
                v68 = __ldaxr(v66);
              while (__stlxr(v68 + 1, v66));
            }
          }
          else
          {
            v66 = 0;
          }
          v67 = v61 + 1;
          *(_QWORD *)&v60[2 * v61] = v66;
          while (++v58 != v59)
          {
            v62 = *v58;
            if ((unint64_t)(*v58 + 1) > 1)
            {
              v63 = v64 + 1;
              ++v61;
              if (v58 != v59)
                goto LABEL_55;
              break;
            }
          }
          v53 = (WTF *)v60;
          if (v67)
          {
            v69 = 0;
            v70 = &v60[2 * v67];
            do
            {
              v71 = *(_QWORD *)&v60[v69];
              if (v71
                && *(_QWORD *)(v71 + 8)
                && WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::contains<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(v2, v71))
              {
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, *(_QWORD *)(*(_QWORD *)&v60[v69] + 8));
              }
              v69 += 2;
            }
            while (2 * v64 != v69);
            WTF::VectorDestructor<true,WTF::WeakPtr<WebCore::JSVMClientDataClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(v60, v70);
            v53 = (WTF *)v60;
          }
        }
      }
LABEL_51:
      WTF::fastFree(v53, v54);
      v4 = *(uint64_t (***)())v3;
    }
    else
    {
      v4 = off_1E3394528;
    }
  }
  ((void (*)(uint64_t))v4[1])(v3);
  v7 = (WebCore::DOMWrapperWorld *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(v7, v6);
      WTF::fastFree(v44, v45);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  v8 = *v2;
  if (v8)
  {
    v48 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v48)
    {
      for (i = 0; i != v48; ++i)
      {
        v50 = *(unsigned int **)(v8 + 8 * i);
        if (v50 != (unsigned int *)-1)
        {
          *(_QWORD *)(v8 + 8 * i) = 0;
          if (v50)
          {
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              atomic_store(1u, v50);
              WTF::fastFree((WTF *)v50, v6);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v8 - 16), v6);
  }
  v9 = (WebCore::DOMClientIsoSubspaces *)*((_QWORD *)this + 2942);
  *((_QWORD *)this + 2942) = 0;
  if (v9)
  {
    v10 = *((_QWORD *)v9 + 941);
    *((_QWORD *)v9 + 941) = 0;
    if (v10)
    {
      v11 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v11, v12);
    }
    WebCore::DOMClientIsoSubspaces::~DOMClientIsoSubspaces(v9);
    WTF::fastFree(v13, v14);
  }
  MEMORY[0x19AEA3528]((char *)this + 23448);
  MEMORY[0x19AEA3528]((char *)this + 23360);
  MEMORY[0x19AEA3528]((char *)this + 23272);
  MEMORY[0x19AEA3528]((char *)this + 23184);
  MEMORY[0x19AEA3528]((char *)this + 23096);
  MEMORY[0x19AEA3528]((char *)this + 23008);
  MEMORY[0x19AEA3528]((char *)this + 22920);
  MEMORY[0x19AEA3528]((char *)this + 22832);
  MEMORY[0x19AEA3528]((char *)this + 22744);
  MEMORY[0x19AEA3528]((char *)this + 22656);
  WebCore::WebCoreBuiltinNames::~WebCoreBuiltinNames((WebCore::JSVMClientData *)((char *)this + 11600));
  *((_QWORD *)this + 1442) = &off_1E3394268;
  v16 = *((_QWORD *)this + 1449);
  if (v16)
  {
    *(_QWORD *)(v16 + 8) = 3;
    *((_QWORD *)this + 1449) = 0;
  }
  v17 = (_DWORD *)*((_QWORD *)this + 1446);
  *((_QWORD *)this + 1446) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 1445);
  *((_QWORD *)this + 1445) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 1444);
  *((_QWORD *)this + 1444) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner((WebCore::JSVMClientData *)((char *)this + 11536));
  WebCore::TextEncoderStreamBuiltinsWrapper::~TextEncoderStreamBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 11328), v20);
  WebCore::TextDecoderStreamBuiltinsWrapper::~TextDecoderStreamBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 11024), v21);
  WebCore::JSDOMBindingInternalsBuiltinsWrapper::~JSDOMBindingInternalsBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 10912), v22);
  WebCore::WritableStreamInternalsBuiltinsWrapper::~WritableStreamInternalsBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 8544), v23);
  WebCore::WritableStreamDefaultWriterBuiltinsWrapper::~WritableStreamDefaultWriterBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 8144), v24);
  WebCore::WritableStreamDefaultControllerBuiltinsWrapper::~WritableStreamDefaultControllerBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 7984), v25);
  WebCore::TransformStreamInternalsBuiltinsWrapper::~TransformStreamInternalsBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 7056), v26);
  WebCore::TransformStreamDefaultControllerBuiltinsWrapper::~TransformStreamDefaultControllerBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 6800), v27);
  WebCore::StreamInternalsBuiltinsWrapper::~StreamInternalsBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 5920), v28);
  WebCore::ReadableStreamInternalsBuiltinsWrapper::~ReadableStreamInternalsBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 3600), v29);
  WebCore::ReadableStreamDefaultReaderBuiltinsWrapper::~ReadableStreamDefaultReaderBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 3344), v30);
  WebCore::ReadableStreamDefaultControllerBuiltinsWrapper::~ReadableStreamDefaultControllerBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 3088), v31);
  WebCore::ReadableStreamBYOBRequestBuiltinsWrapper::~ReadableStreamBYOBRequestBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 2880), v32);
  WebCore::ReadableStreamBYOBReaderBuiltinsWrapper::~ReadableStreamBYOBReaderBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 2624), v33);
  WebCore::ReadableByteStreamInternalsBuiltinsWrapper::~ReadableByteStreamInternalsBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 976), v34);
  WebCore::ReadableByteStreamControllerBuiltinsWrapper::~ReadableByteStreamControllerBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 672), v35);
  WebCore::CountQueuingStrategyBuiltinsWrapper::~CountQueuingStrategyBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 512), v36);
  WebCore::ByteLengthQueuingStrategyBuiltinsWrapper::~ByteLengthQueuingStrategyBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 352), v37);
  WebCore::DecompressionStreamBuiltinsWrapper::~DecompressionStreamBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 192), v38);
  WebCore::CompressionStreamBuiltinsWrapper::~CompressionStreamBuiltinsWrapper((WebCore::JSVMClientData *)((char *)this + 32), v39);
  v41 = (WebCore::DOMWrapperWorld *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(v41, v40);
      WTF::fastFree(v46, v47);
    }
    else
    {
      --*(_DWORD *)v41;
    }
  }
  v42 = *((_QWORD *)this + 1);
  if (v42)
    WTF::fastFree((WTF *)(v42 - 16), v40);
}

{
  WTF *v1;
  void *v2;

  WebCore::JSVMClientData::~JSVMClientData(this);
  WTF::fastFree(v1, v2);
}

void WebCore::WebCoreTypedArrayController::~WebCoreTypedArrayController(WebCore::WebCoreTypedArrayController *this)
{
  *(_QWORD *)this = off_1E3393B20;
  JSC::WeakHandleOwner::~WeakHandleOwner((WebCore::WebCoreTypedArrayController *)((char *)this + 16));
  JSC::TypedArrayController::~TypedArrayController(this);
}

{
  WTF *v2;
  void *v3;

  *(_QWORD *)this = off_1E3393B20;
  JSC::WeakHandleOwner::~WeakHandleOwner((WebCore::WebCoreTypedArrayController *)((char *)this + 16));
  JSC::TypedArrayController::~TypedArrayController(this);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::WebCoreTypedArrayController::toJS(WebCore::WebCoreTypedArrayController *this, JSC::JSGlobalObject *a2, JSC::JSGlobalObject *a3, JSC::ArrayBuffer *a4)
{
  if (a4)
    return WebCore::toJS(a2, (uint64_t)a3, a4, a4);
  else
    return 2;
}

_QWORD *WebCore::WebCoreTypedArrayController::registerWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 3320);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 93024) + 16;
  if (*(_DWORD *)(v4 + 48))
  {
    v8 = (uint64_t *)(v4 + 32);
    v16 = a3;
    JSC::Weak<JSC::JSObject>::Weak(&v15, a4, v5, v4);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v8, &v16, &v15);
    v7 = v15;
    if (!v15)
      return result;
LABEL_7:
    *(_QWORD *)(v7 + 8) = 3;
    return result;
  }
  if (a4)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 93024) + 16;
    v13 = *(_QWORD *)(a2 + 3320);
    v14 = a3;
    if ((a4 & 8) != 0)
      v9 = (a4 - 112) | 1;
    else
      v9 = a4 & 0xFFFFFFFFFFFFC000;
    if ((v9 & 1) != 0)
      v10 = v9 + 47;
    else
      v10 = *(_QWORD *)v9 + 32;
    result = *(_QWORD **)(v10 + 16);
    if (!result)
      result = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v10 + 16) = *result;
    *result = a4;
    result[1] = v12;
    a3 = v14;
    result[2] = v13;
  }
  else
  {
    result = 0;
  }
  v7 = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 80) = result;
  if (v7)
    goto LABEL_7;
  return result;
}

uint64_t WebCore::WebCoreTypedArrayController::isAtomicsWaitAllowedOnCurrentThread(WebCore::WebCoreTypedArrayController *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t WebCore::WebCoreTypedArrayController::JSArrayBufferOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  if (a5)
  {
    *a5 = "ArrayBuffer is opaque root";
    a5[1] = 27;
  }
  v5 = *(void **)(*(_QWORD *)a2 + 16);
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1956E7144);
      }
    }
  }
  return result;
}

uint64_t *WebCore::WebCoreTypedArrayController::JSArrayBufferOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *result;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (*(_DWORD *)(a3 + 48))
    return JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSBlob *>((uint64_t *)(a3 + 32), v3);
  v4 = *(_QWORD *)(v3 + 80);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *(_QWORD *)(v3 + 80) = 0;
  }
  return result;
}

void WebCore::WindowProxy::~WindowProxy(WebCore::WindowProxy *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (uint64_t *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3)
      WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v3, a2);
    WTF::fastFree((WTF *)v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (uint64_t *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3)
      WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v3, a2);
    WTF::fastFree((WTF *)v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

uint64_t WebCore::WindowProxy::frame(WebCore::WindowProxy *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

double WebCore::WindowProxy::detachFromFrame(WebCore::WindowProxy *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  WebCore::DOMWrapperWorld *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  WebCore::DOMWrapperWorld *v18;
  uint64_t v19;
  int v20;
  _BOOL4 v22;
  int v23;
  double result;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v3 = (unsigned int *)WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_QWORD *)**((_QWORD **)this + 2);
  if (v6 && *((_DWORD *)v6 - 3))
  {
    do
    {
      if (!*((_DWORD *)v6 - 3))
        break;
      v7 = *((unsigned int *)v6 - 1);
      if ((_DWORD)v7)
      {
        v8 = 16 * v7;
        v9 = &v6[2 * v7];
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v8 -= 16;
          if (!v8)
          {
            v6 = v9;
            break;
          }
        }
      }
      JSC::JSGlobalObject::setConsoleClient();
      v10 = (WebCore::DOMWrapperWorld *)*v6;
      v11 = (uint64_t *)*((_QWORD *)this + 2);
      v12 = *v11;
      if (*v11)
      {
        v13 = *(_DWORD *)(v12 - 8);
        v14 = ((unint64_t)v10 + ~((_QWORD)v10 << 32)) ^ (((unint64_t)v10 + ~((_QWORD)v10 << 32)) >> 22);
        v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
        v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
        v17 = v13 & ((v16 >> 31) ^ v16);
        v18 = *(WebCore::DOMWrapperWorld **)(v12 + 16 * v17);
        if (v18 != v10)
        {
          v23 = 1;
          while (v18)
          {
            v17 = ((_DWORD)v17 + v23) & v13;
            v18 = *(WebCore::DOMWrapperWorld **)(v12 + 16 * v17);
            ++v23;
            if (v18 == v10)
              goto LABEL_15;
          }
          v17 = *(unsigned int *)(v12 - 4);
        }
LABEL_15:
        if (v17 != *(_DWORD *)(v12 - 4))
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::remove(v11, v12 + 16 * v17);
      }
      v3 = (unsigned int *)WebCore::DOMWrapperWorld::didDestroyWindowProxy(v10, this);
      v6 = (_QWORD *)**((_QWORD **)this + 2);
    }
    while (v6);
    v19 = WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)v3);
    v20 = atomic_load((unsigned __int8 *)(v19 + 4));
    v22 = v20 == 2 || *(_BYTE *)(v19 + 7) != 0;
    {
      WebCore::GCController::GCController((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
    }
    if (v22)
      return WebCore::GCController::garbageCollectOnNextRunLoop((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
    else
      WebCore::GCController::garbageCollectSoon((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
  }
  return result;
}

uint64_t *WebCore::WindowProxy::destroyJSWindowProxy(WebCore::WindowProxy *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::DOMWrapperWorld *v11;
  int v13;

  v4 = (uint64_t *)*((_QWORD *)this + 2);
  v5 = *v4;
  if (*v4)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WebCore::DOMWrapperWorld **)(v5 + 16 * v10);
    if (v11 != a2)
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(WebCore::DOMWrapperWorld **)(v5 + 16 * v10);
        ++v13;
        if (v11 == a2)
          goto LABEL_3;
      }
      v10 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v10 != *(_DWORD *)(v5 - 4))
      WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::remove(v4, v5 + 16 * v10);
  }
  return WebCore::DOMWrapperWorld::didDestroyWindowProxy(a2, this);
}

_QWORD **WebCore::WindowProxy::replaceFrame(WebCore::WindowProxy *this, WebCore::Frame *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WebCore::DOMWindow *v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v4 = *((_QWORD *)a2 + 2);
  if (v4)
    goto LABEL_16;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v11 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  if (!v11)
    goto LABEL_16;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, a2);
  }
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
LABEL_16:
    do
      v5 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v5 + 1, (unsigned int *)v4));
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (WebCore::DOMWindow *)(*(uint64_t (**)(WebCore::Frame *))(*(_QWORD *)a2 + 128))(a2);
  return WebCore::WindowProxy::setDOMWindow((_QWORD **)this, v9);
}

uint64_t *WebCore::DOMWrapperWorld::didDestroyWindowProxy(WebCore::DOMWrapperWorld *this, WebCore::WindowProxy *a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::WindowProxy *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v17;

  v4 = *((_QWORD *)this + 3);
  result = (uint64_t *)((char *)this + 24);
  v3 = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebCore::WindowProxy **)(v3 + 8 * v9);
    if (v10 != a2)
    {
      v17 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v17) & v5;
        v10 = *(WebCore::WindowProxy **)(v3 + 8 * v9);
        ++v17;
        if (v10 == a2)
          goto LABEL_3;
      }
      v9 = *(unsigned int *)(v3 - 4);
    }
LABEL_3:
    if (v9 != *(_DWORD *)(v3 - 4))
    {
      *(_QWORD *)(v3 + 8 * v9) = -1;
      ++*(_DWORD *)(*result - 16);
      v11 = *result;
      v12 = *result ? *(_DWORD *)(v11 - 12) - 1 : -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *result;
      if (*result)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          return (uint64_t *)WTF::HashTable<WebCore::WindowProxy *,WebCore::WindowProxy *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::WindowProxy *>,WTF::HashTraits<WebCore::WindowProxy *>,WTF::HashTraits<WebCore::WindowProxy *>>::rehash(result, v15 >> 1);
      }
    }
  }
  return result;
}

WebCore::JSWindowProxy *WebCore::WindowProxy::globalObject(WebCore::WindowProxy *this, WebCore::DOMWrapperWorld *a2)
{
  WebCore::JSWindowProxy *result;

  result = WebCore::WindowProxy::jsWindowProxy(this, a2);
  if (result)
    return (WebCore::JSWindowProxy *)*((_QWORD *)result + 2);
  return result;
}

uint64_t WebCore::WindowProxy::window(WebCore::WindowProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2);
  else
    return 0;
}

uint64_t WebCore::WindowProxy::releaseJSWindowProxies@<X0>(WebCore::WindowProxy *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  WebCore::DOMWrapperWorld *v22;
  WebCore::DOMWrapperWorld **v23;
  WTF::StringImpl *v24;
  WebCore::DOMWrapperWorld **v25;
  WebCore::DOMWrapperWorld *v26;
  WTF *v27;
  void *v28;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v4 = 0;
  v6 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v4;
  *a2 = 0;
  v7 = *(_QWORD *)v6;
  if (!*(_QWORD *)v6)
    return WTF::fastFree(v6, v5);
  v8 = *(unsigned int *)(v7 - 12);
  if (!(_DWORD)v8)
  {
LABEL_31:
    WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(v7, (WTF::StringImpl *)v5);
    return WTF::fastFree(v6, v5);
  }
  v9 = (v8 - 1) | ((v8 - 1) >> 1) | ((((_DWORD)v8 - 1) | ((v8 - 1) >> 1)) >> 2);
  v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
  v11 = (v10 | HIWORD(v10)) + 1;
  if (v11 > 0x400)
  {
    if (v11 > 2 * v8)
      goto LABEL_8;
  }
  else if (3 * v11 > 4 * v8)
  {
LABEL_6:
    v12 = (double)v8;
    v13 = (double)v11;
    v14 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v11) = 2 * v11;
  if (v11 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v12 = (double)v8;
  v13 = (double)v11;
  v14 = 0.416666667;
LABEL_9:
  if (v13 * v14 <= v12)
    LODWORD(v11) = 2 * v11;
  if (v11 <= 8)
    v15 = 8;
  else
    v15 = v11;
  v16 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v15 + 16));
  v17 = (uint64_t)(v16 + 4);
  *a2 = v16 + 4;
  v16[2] = v15 - 1;
  v16[3] = v15;
  *v16 = 0;
  v16[1] = v8;
  v7 = *(_QWORD *)v6;
  v18 = WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::begin(*(_QWORD **)v6);
  v19 = v18;
  v20 = (uint64_t *)v5;
  if (v7)
    v21 = (uint64_t *)(v7 + 16 * *(unsigned int *)(v7 - 4));
  else
    v21 = 0;
  if (v21 != v18)
  {
    do
    {
      v22 = (WebCore::DOMWrapperWorld *)*v19;
      v23 = (WebCore::DOMWrapperWorld **)WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>(v17, *v19);
      v25 = v23;
      if (v22)
        ++*(_DWORD *)v22;
      v26 = *v23;
      *v25 = v22;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
        {
          WebCore::DOMWrapperWorld::~DOMWrapperWorld(v26, v24);
          WTF::fastFree(v27, v28);
        }
        else
        {
          --*(_DWORD *)v26;
        }
      }
      JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((uint64_t *)v25 + 1, (uint64_t *)v19[1]);
      while (1)
      {
        v19 += 2;
        if (v19 == v20)
          break;
        if ((unint64_t)(*v19 + 1) > 1)
          goto LABEL_27;
      }
      v19 = v20;
LABEL_27:
      ;
    }
    while (v19 != v21);
    v7 = *(_QWORD *)v6;
  }
  if (v7)
    goto LABEL_31;
  return WTF::fastFree(v6, v5);
}

_QWORD *WebCore::WindowProxy::setJSWindowProxies(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t *v7;

  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *result = 0;
  v6 = *a2;
  *a2 = 0;
  *result = v6;
  v7 = *(uint64_t **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = result;
  if (v7)
  {
    if (*v7)
      WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v7, v5);
    return (_QWORD *)WTF::fastFree((WTF *)v7, v5);
  }
  return result;
}

void WebCore::WorkerModuleScriptLoader::~WorkerModuleScriptLoader(WebCore::WorkerModuleScriptLoader *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v3 = *((_QWORD *)this + 8);
  ++*(_DWORD *)(v3 + 20);
  if (*(_QWORD *)(v3 + 32))
  {
    v4 = *(unsigned int **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 32) + 8))(*(_QWORD *)(v3 + 32));
    v7 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)(v3 + 32) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  if (*(_DWORD *)(v3 + 20) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  else
    --*(_DWORD *)(v3 + 20);
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v22 = *(unsigned int *)(v10 + 20);
      if ((_DWORD)v22)
      {
        v23 = *(_QWORD *)(v10 + 8);
        v24 = v23 + 16 * v22;
        do
        {
          v25 = *(unsigned int **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v33 = v24;
              v34 = v23;
              v32 = v10;
              atomic_store(1u, v25);
              v28 = v25[6];
              if ((_DWORD)v28 != -1)
                ((void (*)(char *, unsigned int *))off_1E3393D60[v28])(&v35, v25 + 2);
              v25[6] = -1;
              WTF::fastFree((WTF *)v25, a2);
              v10 = v32;
              v24 = v33;
              v23 = v34;
            }
          }
          v23 += 16;
        }
        while (v23 != v24);
      }
      v29 = *(WTF **)(v10 + 8);
      if ((WTF *)(v10 + 24) != v29 && v29 != 0)
      {
        *(_QWORD *)(v10 + 8) = 0;
        *(_DWORD *)(v10 + 16) = 0;
        v31 = v10;
        WTF::fastFree(v29, a2);
        v10 = v31;
      }
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
  {
    if (v14[5] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 64))(v14);
    else
      --v14[5];
  }
  v15 = *((_QWORD *)this + 7);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 0;
    v16 = (unsigned int *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  *(_QWORD *)this = off_1E3392C00;
  v19 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v20 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  v21 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v21)
  {
    if (v21[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
    else
      --v21[4];
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WorkerModuleScriptLoader::~WorkerModuleScriptLoader(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::WorkerModuleScriptLoader::~WorkerModuleScriptLoader(WebCore::WorkerModuleScriptLoader *this, void *a2)
{
  WebCore::WorkerModuleScriptLoader::~WorkerModuleScriptLoader((WebCore::WorkerModuleScriptLoader *)((char *)this - 48), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::WorkerModuleScriptLoader::~WorkerModuleScriptLoader((WebCore::WorkerModuleScriptLoader *)((char *)this - 48), a2);
  WTF::fastFree(v2, v3);
}

_DWORD *WebCore::WorkerModuleScriptLoader::notifyFinished(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  __int128 v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  _DWORD *result;
  _DWORD *v12;

  v2 = *(_QWORD *)(a1 + 64);
  if (*(_BYTE *)(v2 + 224))
  {
    *(_BYTE *)(a1 + 168) = 1;
  }
  else
  {
    WebCore::SharedBufferBuilder::operator=((unsigned int **)(a1 + 112), (unsigned int **)(v2 + 48));
    v4 = *(_QWORD *)(a1 + 64);
    v5 = *(_DWORD **)(v4 + 96);
    if (v5)
      *v5 += 2;
    v6 = *(WTF::StringImpl **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v5;
    v7 = v4;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v3);
        v7 = *(_QWORD *)(a1 + 64);
      }
      else
      {
        *(_DWORD *)v6 -= 2;
        v7 = v4;
      }
    }
    v8 = *(_OWORD *)(v4 + 120);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(v4 + 104);
    *(_OWORD *)(a1 + 144) = v8;
    v9 = *(_DWORD **)(v7 + 144);
    if (v9)
      *v9 += 2;
    v10 = *(WTF::StringImpl **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v3);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  ++*(_DWORD *)(a1 + 8);
  result = *(_DWORD **)(a1 + 16);
  if (result)
  {
    v12 = *(_DWORD **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(_DWORD *, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)result + 16))(result, a1, a1 + 72, &v12);
    result = v12;
    v12 = 0;
    if (result)
    {
      if (result[4] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
        --result[4];
    }
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  --*(_DWORD *)(a1 + 8);
  return result;
}

_DWORD *`non-virtual thunk to'WebCore::WorkerModuleScriptLoader::notifyFinished(uint64_t a1)
{
  return WebCore::WorkerModuleScriptLoader::notifyFinished(a1 - 48);
}

void WebCore::JSTextTrackCueOwner::~JSTextTrackCueOwner(WebCore::JSTextTrackCueOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSUndoItemOwner::~JSUndoItemOwner(WebCore::JSUndoItemOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::WebCoreTypedArrayController::JSArrayBufferOwner::~JSArrayBufferOwner(WebCore::WebCoreTypedArrayController::JSArrayBufferOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

uint64_t *WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E31FE290;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t *std::__optional_destruct_base<WebCore::FrameInfo,false>::~__optional_destruct_base[abi:sn180100](uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  if (*((_BYTE *)a1 + 16))
  {
    v2 = a1[1];
    a1[1] = 0;
    if (v2)
    {
      v3 = (unsigned int *)(v2 + 8);
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v11 = off_1E31FE290;
        v11[1] = v3;
        v13 = v11;
        WTF::ensureOnMainThread();
        if (v13)
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
      }
    }
    v6 = *a1;
    *a1 = 0;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v12 = off_1E31FE290;
        v12[1] = v7;
        v14 = v12;
        WTF::ensureOnMainThread();
        if (v14)
          (*(void (**)(_QWORD *))(*v14 + 8))(v14);
      }
    }
  }
  return a1;
}

void JSC::StringSourceProvider::~StringSourceProvider(JSC::StringSourceProvider *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E33948F0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  JSC::SourceProvider::~SourceProvider(this);
}

{
  WTF::StringImpl *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E33948F0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  JSC::SourceProvider::~SourceProvider(this);
  WTF::fastFree(v4, v5);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::DOMWrapperWorld *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WebCore::DOMWrapperWorld **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(_QWORD *)(v4 + 8);
        if (v6)
        {
          v7 = (uint64_t *)(v6 - 16);
          v8 = *(_QWORD *)(((v6 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v9 = *(uint64_t **)(v6 - 8);
          if (v9)
          {
            v10 = *v7;
            *v9 = *v7;
            *(_QWORD *)(v10 + 8) = v9;
            *v7 = 0;
            v7[1] = 0;
          }
          *v7 = *(_QWORD *)(v8 + 40);
          *(_QWORD *)(v8 + 40) = v7;
          *(_QWORD *)(v4 + 8) = 0;
          v5 = *(WebCore::DOMWrapperWorld **)v4;
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::DOMWrapperWorld::~DOMWrapperWorld(v5, a2);
            WTF::fastFree(v11, v12);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::default_delete<OpaqueJSClassContextData>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v26;
  void *v27;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = *(WTF::StringImpl ***)v4;
    if (*(_QWORD *)v4)
    {
      v6 = *((unsigned int *)v5 - 1);
      if ((_DWORD)v6)
      {
        v7 = *(WTF::StringImpl ***)v4;
        do
        {
          v8 = *v7;
          if (*v7 != (WTF::StringImpl *)-1)
          {
            v9 = v7[1];
            v7[1] = 0;
            if (v9)
            {
              WTF::fastFree(v9, a2);
              v8 = *v7;
            }
            *v7 = 0;
            if (v8)
            {
              if (*(_DWORD *)v8 == 2)
                WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v8 -= 2;
            }
          }
          v7 += 2;
          --v6;
        }
        while (v6);
      }
      WTF::fastFree((WTF *)(v5 - 2), a2);
    }
    WTF::fastFree(v4, a2);
  }
  v10 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    v11 = *(_QWORD *)v10;
    if (*(_QWORD *)v10)
    {
      v12 = *(unsigned int *)(v11 - 4);
      if ((_DWORD)v12)
      {
        for (i = 0; i != v12; ++i)
        {
          v14 = (WTF::StringImpl **)(v11 + 16 * i);
          v15 = *v14;
          if (*v14 != (WTF::StringImpl *)-1)
          {
            v16 = v14[1];
            v14[1] = 0;
            if (v16)
            {
              v17 = (unsigned int *)*((_QWORD *)v16 + 3);
              *((_QWORD *)v16 + 3) = 0;
              if (v17)
              {
                do
                {
                  v18 = __ldaxr(v17);
                  v19 = v18 - 1;
                }
                while (__stlxr(v19, v17));
                if (!v19)
                {
                  atomic_store(1u, v17);
                  OpaqueJSString::~OpaqueJSString((OpaqueJSString *)v17);
                  WTF::fastFree(v20, v21);
                }
              }
              WTF::fastFree(v16, a2);
              v15 = *v14;
            }
            *v14 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v15 -= 2;
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v11 - 16), a2);
    }
    WTF::fastFree(v10, a2);
  }
  v22 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v22)
  {
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      v26 = (WTF *)MEMORY[0x19AEA30CC]();
      WTF::fastFree(v26, v27);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (_DWORD *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (v5[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
          else
            --v5[2];
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t JSC::JSScriptFetchParameters::create(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *ParametersSpaceSlow;
  unint64_t result;
  int v8;
  uint64_t v9;
  unint64_t v10;

  ParametersSpaceSlow = *(_QWORD **)(a1 + 40720);
  if (!ParametersSpaceSlow)
    ParametersSpaceSlow = (_QWORD *)JSC::GCClient::Heap::scriptFetchParametersSpaceSlow((JSC::GCClient::Heap *)(a1 + 37552));
  result = ParametersSpaceSlow[3];
  if (result < ParametersSpaceSlow[4])
    goto LABEL_4;
  result = ParametersSpaceSlow[5];
  if ((result & 1) == 0)
  {
    v10 = *(_QWORD *)(result + 8) ^ ParametersSpaceSlow[6];
    ParametersSpaceSlow[4] = result + HIDWORD(v10);
    ParametersSpaceSlow[5] = result + (int)v10;
LABEL_4:
    ParametersSpaceSlow[3] = result + 16;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM();
  result = JSC::LocalAllocator::allocateSlowCase();
LABEL_5:
  *(_DWORD *)result = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v8;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v9;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::JSScriptFetcher::create(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  unint64_t result;
  int v8;
  uint64_t v9;
  unint64_t v10;

  v6 = *(_QWORD **)(a1 + 40728);
  if (!v6)
    v6 = (_QWORD *)JSC::GCClient::Heap::scriptFetcherSpaceSlow((JSC::GCClient::Heap *)(a1 + 37552));
  result = v6[3];
  if (result < v6[4])
    goto LABEL_4;
  result = v6[5];
  if ((result & 1) == 0)
  {
    v10 = *(_QWORD *)(result + 8) ^ v6[6];
    v6[4] = result + HIDWORD(v10);
    v6[5] = result + (int)v10;
LABEL_4:
    v6[3] = result + 16;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM();
  result = JSC::LocalAllocator::allocateSlowCase();
LABEL_5:
  *(_DWORD *)result = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v8;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v9;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::RunJavaScriptParameters::~RunJavaScriptParameters(WebCore::RunJavaScriptParameters *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  if (*((_BYTE *)this + 72))
  {
    v3 = *((_QWORD *)this + 8);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = *((_QWORD *)this + 8);
        do
        {
          v6 = *(WTF::StringImpl **)v5;
          if (*(_QWORD *)v5 != -1)
          {
            v7 = *(WTF **)(v5 + 8);
            if (v7)
            {
              *(_QWORD *)(v5 + 8) = 0;
              *(_DWORD *)(v5 + 16) = 0;
              WTF::fastFree(v7, a2);
              v6 = *(WTF::StringImpl **)v5;
            }
            *(_QWORD *)v5 = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v6 -= 2;
            }
          }
          v5 += 24;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

int32x2_t *WebCore::ScriptSourceCode::ScriptSourceCode(int32x2_t *a1, _DWORD **a2, uint64_t a3, WTF::StringImpl **a4, int32x2_t *a5, uint64_t a6, _QWORD *a7)
{
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  _DWORD *v16;
  int32x2_t v17;
  __int32 v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _DWORD *v22;

  v10 = *a4;
  if (*a4)
    *(_DWORD *)v10 += 2;
  v21 = v10;
  v11 = (_DWORD *)*a7;
  *a7 = 0;
  v22 = v11;
  v12 = *a4;
  if (*a4)
    *(_DWORD *)v12 += 2;
  v20 = v12;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  JSC::SourceProvider::SourceProvider();
  *v13 = off_1E33948F0;
  v15 = *a2;
  if (!*a2)
    v15 = (_DWORD *)MEMORY[0x1E0CBEF70];
  *v15 += 2;
  v13[15] = v15;
  *a1 = (int32x2_t)v13;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v14);
    else
      *(_DWORD *)v21 -= 2;
  }
  v16 = (_DWORD *)*a1;
  v16[2] = *(_DWORD *)(*(_QWORD *)a1 + 8) + 1;
  a1[1] = (int32x2_t)v16;
  a1[2].i32[0] = 0;
  v17 = *a5;
  (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 24))(v16);
  a1[2].i32[1] = v18;
  a1[3] = vmax_s32(v17, 0);
  a1[4] = 0;
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::ExceptionDetails,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ExceptionDetails,false>>(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  if (*(unsigned __int8 *)(result + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(_BYTE *)(result + 32))
    {
      v4 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v5 = *(WTF::StringImpl **)result;
      *(_QWORD *)v3 = v4;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *((_QWORD *)a2 + 1);
      *(_BYTE *)(v3 + 16) = *((_BYTE *)a2 + 16);
      *(_QWORD *)(v3 + 8) = v6;
      v7 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = 0;
      result = *(_QWORD *)(v3 + 24);
      *(_QWORD *)(v3 + 24) = v7;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else if (*(_BYTE *)(result + 32))
  {
    v8 = *(WTF::StringImpl **)(result + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, a2);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v3 + 32) = 0;
  }
  else
  {
    v9 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)result = v9;
    v10 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(result + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(result + 8) = v10;
    v11 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)(result + 24) = v11;
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  v4 = *(_QWORD *)(a3 + 8);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a3 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_DWORD **)(a3 + 24);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a2 + 24) = v5;
}

uint64_t JSC::JSString::getIndex(JSC::JSString *this, JSC::JSGlobalObject *a2, unsigned int a3)
{
  JSC::VM *v4;
  uint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v20;
  unsigned __int16 v21;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 1) == 0)
  {
    if (v5)
    {
LABEL_3:
      v6 = *(const char **)(v5 + 8);
      v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
      goto LABEL_18;
    }
LABEL_6:
    v6 = 0;
    v7 = 0x100000000;
    goto LABEL_18;
  }
  if ((v5 & 2) == 0)
  {
    v5 = *(_QWORD *)JSC::JSRopeString::resolveRope(this, a2);
    if (v5)
      goto LABEL_3;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)((*(_QWORD *)((_BYTE *)this + 20) & 0xFFFFFFFFFLL) + 8);
  if (v8)
  {
    v6 = *(const char **)(v8 + 8);
    v9 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v9 = 0x100000000;
  }
  v10 = *((_QWORD *)this + 3);
  v11 = v10 >> 16;
  if (v9 <= (v10 >> 16))
    goto LABEL_34;
  v12 = *((_DWORD *)this + 4);
  if (v9 - (v10 >> 16) <= v12)
  {
    if (!(_DWORD)v11)
    {
      v7 = v9;
      goto LABEL_18;
    }
    v12 = v9 - (v10 >> 16);
  }
  v13 = (v10 >> 16);
  v7 = v12;
  v14 = v9 - (unint64_t)v11;
  if ((v9 & 0x100000000) != 0)
  {
    if (v14 < v12)
      goto LABEL_33;
    v6 += v13;
    v7 = v12 | 0x100000000;
  }
  else
  {
    if (v14 < v12)
      goto LABEL_33;
    v6 += 2 * v13;
  }
  while (1)
  {
LABEL_18:
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      return 0;
    if ((v7 & 0x100000000) == 0)
      break;
    if (v7 > a3)
    {
      v15 = v6[a3];
      return *((_QWORD *)v4 + v15 + 5277);
    }
LABEL_33:
    __break(1u);
LABEL_34:
    v6 = "";
    v7 = 0x100000000;
  }
  if (v7 <= a3)
    goto LABEL_33;
  v21 = *(_WORD *)&v6[2 * a3];
  if (v21 <= 0xFFu)
  {
    v15 = v21;
    return *((_QWORD *)v4 + v15 + 5277);
  }
  WTF::StringImpl::create();
  v16 = JSC::JSString::create((uint64_t)v4, &v20);
  v18 = v20;
  v20 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  return v16;
}

void WebCore::ImportMapWarningReporter::~ImportMapWarningReporter(WebCore::ImportMapWarningReporter *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::ImportMapWarningReporter::reportWarning(WebCore::JSDOMGlobalObject **this, const WTF::String *a2)
{
  uint64_t v3;

  v3 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this[1]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const WTF::String *, _QWORD))(*(_QWORD *)v3 + 248))(v3, 1, 1, a2, 0);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3URLENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3URLENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::rejectWithFetchError(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WebCore::ExceptionCode,WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *a1 = &off_1E3393C70;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::rejectWithFetchError(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WebCore::ExceptionCode,WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E3393C70;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::rejectWithFetchError(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WebCore::ExceptionCode,WTF::String &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  JSC::JSGlobalObject *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  JSC **v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  unsigned __int8 *DOMException;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v18;
  int v19;
  _BYTE v20[8];
  _QWORD v21[2];
  int v22;
  int v23;
  uint64_t v24;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v3 = result;
    v4 = (JSC::JSGlobalObject *)(result + 24);
    v5 = *(_QWORD *)(v1 + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v20, v7);
    v8 = *(JSC ***)(v1 + 32);
    v9 = (JSC::JSGlobalObject *)*(unsigned __int8 *)(v3 + 16);
    v10 = (JSC::VM *)*((_QWORD *)*v8 + 7);
    DOMException = (unsigned __int8 *)WebCore::createDOMException(*v8, v9, v4);
    v12 = *(_QWORD *)(*((_QWORD *)v10 + 5182) + 19776);
    v21[0] = 0;
    v21[1] = DOMException;
    v22 = -1;
    v23 = 0x1000000;
    v24 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(DOMException, v10, v12, 0xFFFE000000000002, 0, (uint64_t)v21);
    v13 = *(_QWORD *)(v7 + 16);
    if (!v13)
    {
      WebCore::DeferredPromise::callFunction(v1, v6, 1, (objc_class *)DOMException);
      return MEMORY[0x19AEA32A0](v20);
    }
    v14 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v14 + 64))(v14))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v13, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v20);
    }
    v15 = v14[43];
    if (*(_QWORD *)(v7 + 24) == v13)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v15 + 8) + 93442) = 1;
      *(_BYTE *)(v1 + 44) = 1;
      goto LABEL_12;
    }
    if (!v15)
      goto LABEL_12;
    v16 = (unsigned __int8 *)(v15 + 40);
    if (__ldaxr((unsigned __int8 *)(v15 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v16))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v15 + 40);
LABEL_20:
    v18 = *(unsigned __int8 *)(v15 + 41);
    v19 = __ldxr(v16);
    if (v19 == 1)
    {
      if (!__stlxr(0, v16))
      {
LABEL_25:
        if (!v18)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v15 + 40));
    goto LABEL_25;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::rejectToPropagateNetworkError(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WebCore::ModuleFetchFailureKind,WTF::ASCIILiteral)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3393C98;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::rejectToPropagateNetworkError(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WebCore::ModuleFetchFailureKind,WTF::ASCIILiteral)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3393C98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::rejectToPropagateNetworkError(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WebCore::ModuleFetchFailureKind,WTF::ASCIILiteral)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  const WTF::String *v7;
  uint64_t v8;
  JSC *v9;
  JSC::VM *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned __int8 *TypeError;
  WTF::StringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _QWORD v27[2];
  int v28;
  int v29;
  uint64_t v30;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v3 = result;
    v4 = *(_QWORD *)(v1 + 32);
    if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
      v5 = 0;
    else
      v5 = *(uint64_t **)v4;
    v6 = v5[7];
    MEMORY[0x19AEA3294](&v25, v6);
    v8 = *(_QWORD *)(v1 + 32);
    if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
      v9 = 0;
    else
      v9 = *(JSC **)v8;
    v10 = (JSC::VM *)*((_QWORD *)v9 + 7);
    v11 = *(_QWORD *)(v3 + 32);
    if (v11)
    {
      if (v11 == 1)
      {
        v12 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = (WTF::StringImpl *)v27[0];
      }
      v26 = v12;
    }
    else
    {
      v26 = 0;
    }
    TypeError = (unsigned __int8 *)JSC::createTypeError(v9, (JSC::JSGlobalObject *)&v26, v7);
    v15 = v26;
    v26 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = *(_QWORD *)(*((_QWORD *)v10 + 5182) + 19776);
    v17 = *(unsigned int *)(v3 + 16) | 0xFFFE000000000000;
    v27[0] = 0;
    v27[1] = TypeError;
    v28 = -1;
    v29 = 0x1000000;
    v30 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(TypeError, v10, v16, v17, 0, (uint64_t)v27);
    v18 = *(_QWORD *)(v6 + 16);
    if (!v18)
    {
      WebCore::DeferredPromise::callFunction(v1, v5, 1, (objc_class *)TypeError);
      return MEMORY[0x19AEA32A0](&v25);
    }
    v19 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v5);
    if (!(*(unsigned int (**)(_QWORD *))(*v19 + 64))(v19))
    {
LABEL_23:
      WebCore::reportException((JSC::JSGlobalObject *)v5, v18, 0, 0, 0);
      return MEMORY[0x19AEA32A0](&v25);
    }
    v20 = v19[43];
    if (*(_QWORD *)(v6 + 24) == v18)
    {
LABEL_38:
      *(_BYTE *)(*(_QWORD *)(v20 + 8) + 93442) = 1;
      *(_BYTE *)(v1 + 44) = 1;
      goto LABEL_23;
    }
    if (!v20)
      goto LABEL_23;
    v21 = (unsigned __int8 *)(v20 + 40);
    if (__ldaxr((unsigned __int8 *)(v20 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v21))
    {
      goto LABEL_32;
    }
    MEMORY[0x19AEA534C](v20 + 40);
LABEL_32:
    v23 = *(unsigned __int8 *)(v20 + 41);
    v24 = __ldxr(v21);
    if (v24 == 1)
    {
      if (!__stlxr(0, v21))
      {
LABEL_37:
        if (!v23)
          goto LABEL_23;
        goto LABEL_38;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v20 + 40));
    goto LABEL_37;
  }
  return result;
}

void WebCore::ModuleFetchParameters::~ModuleFetchParameters(WebCore::ModuleFetchParameters *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E33948A0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E33948A0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ModuleFetchParameters::integrity(WebCore::ModuleFetchParameters *this)
{
  return (uint64_t)this + 16;
}

uint64_t WebCore::ModuleFetchParameters::isTopLevelModule(WebCore::ModuleFetchParameters *this)
{
  return *((unsigned __int8 *)this + 24);
}

void WebCore::WorkerScriptFetcher::~WorkerScriptFetcher(WebCore::WorkerScriptFetcher *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;

  if (*((_BYTE *)this + 72))
  {
    v3 = *((_QWORD *)this + 8);
    if (v3)
    {
      v4 = (uint64_t *)(v3 - 16);
      v5 = *(_QWORD *)(((v3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v6 = *(uint64_t **)(v3 - 8);
      if (v6)
      {
        v7 = *v4;
        *v6 = *v4;
        *(_QWORD *)(v7 + 8) = v6;
        *v4 = 0;
        v4[1] = 0;
      }
      *v4 = *(_QWORD *)(v5 + 40);
      *(_QWORD *)(v5 + 40) = v4;
      *((_QWORD *)this + 8) = 0;
    }
    if (*((_BYTE *)this + 56))
    {
      v8 = (WTF::StringImpl *)*((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  v9 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;

  if (*((_BYTE *)this + 72))
  {
    v3 = *((_QWORD *)this + 8);
    if (v3)
    {
      v4 = (uint64_t *)(v3 - 16);
      v5 = *(_QWORD *)(((v3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v6 = *(uint64_t **)(v3 - 8);
      if (v6)
      {
        v7 = *v4;
        *v6 = *v4;
        *(_QWORD *)(v7 + 8) = v6;
        *v4 = 0;
        v4[1] = 0;
      }
      *v4 = *(_QWORD *)(v5 + 40);
      *(_QWORD *)(v5 + 40) = v4;
      *((_QWORD *)this + 8) = 0;
    }
    if (*((_BYTE *)this + 56))
    {
      v8 = (WTF::StringImpl *)*((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  v9 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  WTF::fastFree(this, a2);
}

_QWORD *WebCore::CachedScriptSourceProvider::CachedScriptSourceProvider(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  __int128 v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WebCore::CachedResource *v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  _DWORD *v30;
  char v31;
  WTF::StringImpl ***v32;
  WTF::StringImpl **v33;

  v7 = (uint64_t *)a2[50];
  if (!v7)
  {
    v23 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v23 != -1)
    {
      v27 = (WTF::StringImpl *)&v32;
      v33 = &v27;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v33, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v7 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v7, 1);
  v8 = (_DWORD *)*a4;
  *a4 = 0;
  v9 = (WTF::StringImpl *)*v7;
  if (*v7)
    *(_DWORD *)v9 += 2;
  v27 = v9;
  v10 = *(_OWORD *)(v7 + 3);
  v28 = *(_OWORD *)(v7 + 1);
  v29 = v10;
  v30 = v8;
  v11 = (uint64_t *)a2[50];
  if (!v11)
  {
    v24 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v24 != -1)
    {
      v33 = &v26;
      v32 = &v33;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v11 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v11, 1);
  v12 = (WTF::StringImpl *)*v11;
  if (*v11)
    *(_DWORD *)v12 += 2;
  v26 = v12;
  v13 = (uint64_t *)a2[50];
  if (!v13)
  {
    v25 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v25 != -1)
    {
      v33 = (WTF::StringImpl **)&v31;
      v32 = &v33;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v13 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  if ((v13[29] & 0x40) != 0)
  {
    v14 = *(WTF::StringImpl ***)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 20));
    if (v14)
      *(_DWORD *)v14 += 2;
  }
  else
  {
    v14 = 0;
  }
  v33 = v14;
  v32 = 0;
  JSC::SourceProvider::SourceProvider();
  v16 = (WTF::StringImpl *)v33;
  v33 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v26;
  v26 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v30;
  v30 = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = v27;
  v27 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  a1[15] = &unk_1E33946A0;
  a1[16] = 0;
  *a1 = off_1E3394650;
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)(a1 + 17), (WebCore::CachedResource *)a2);
  v20 = a1[17];
  if (v20)
    v21 = *(WebCore::CachedResource **)(v20 + 8);
  else
    v21 = 0;
  if (WebCore::CachedResource::addClientToSet(v21, (WebCore::CachedResourceClient *)(a1 + 15)))
    (*(void (**)(WebCore::CachedResource *, _QWORD *))(*(_QWORD *)v21 + 88))(v21, a1 + 15);
  return a1;
}

void WebCore::CachedScriptSourceProvider::~CachedScriptSourceProvider(WebCore::CachedScriptSourceProvider *this)
{
  unsigned int **v2;
  uint64_t v3;
  unsigned int **v4;
  WebCore::CachedResource *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;

  *(_QWORD *)this = off_1E3394650;
  *((_QWORD *)this + 15) = &unk_1E33946A0;
  v2 = (unsigned int **)((char *)this + 120);
  v4 = (unsigned int **)((char *)this + 136);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    v5 = *(WebCore::CachedResource **)(v3 + 8);
  else
    v5 = 0;
  WebCore::CachedResource::removeClient(v5, v2);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v4, v6);
  *((_QWORD *)this + 15) = &off_1E33F87C8;
  v8 = *((_QWORD *)this + 16);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (WTF *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v7);
      else
        --*(_DWORD *)v9;
    }
  }
  else
  {
    *((_QWORD *)this + 16) = 0;
  }
  JSC::SourceProvider::~SourceProvider(this);
}

{
  unsigned int **v2;
  uint64_t v3;
  unsigned int **v4;
  WebCore::CachedResource *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  void *v11;

  *(_QWORD *)this = off_1E3394650;
  *((_QWORD *)this + 15) = &unk_1E33946A0;
  v2 = (unsigned int **)((char *)this + 120);
  v4 = (unsigned int **)((char *)this + 136);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    v5 = *(WebCore::CachedResource **)(v3 + 8);
  else
    v5 = 0;
  WebCore::CachedResource::removeClient(v5, v2);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v4, v6);
  *((_QWORD *)this + 15) = &off_1E33F87C8;
  v8 = *((_QWORD *)this + 16);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (WTF *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v7);
      else
        --*(_DWORD *)v9;
    }
  }
  else
  {
    *((_QWORD *)this + 16) = 0;
  }
  JSC::SourceProvider::~SourceProvider(this);
  WTF::fastFree(v10, v11);
}

void `non-virtual thunk to'WebCore::CachedScriptSourceProvider::~CachedScriptSourceProvider(WebCore::CachedScriptSourceProvider *this)
{
  JSC::SourceProvider *v2;
  uint64_t v3;
  unsigned int **v4;
  WebCore::CachedResource *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;

  *((_QWORD *)this - 15) = off_1E3394650;
  v2 = (WebCore::CachedScriptSourceProvider *)((char *)this - 120);
  *(_QWORD *)this = &unk_1E33946A0;
  v4 = (unsigned int **)((char *)this + 16);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    v5 = *(WebCore::CachedResource **)(v3 + 8);
  else
    v5 = 0;
  WebCore::CachedResource::removeClient(v5, (unsigned int **)this);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v4, v6);
  *(_QWORD *)this = &off_1E33F87C8;
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v7);
      else
        --*(_DWORD *)v9;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JSC::SourceProvider::~SourceProvider(v2);
}

{
  JSC::SourceProvider *v2;
  uint64_t v3;
  unsigned int **v4;
  WebCore::CachedResource *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  void *v11;

  *((_QWORD *)this - 15) = off_1E3394650;
  v2 = (WebCore::CachedScriptSourceProvider *)((char *)this - 120);
  *(_QWORD *)this = &unk_1E33946A0;
  v4 = (unsigned int **)((char *)this + 16);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    v5 = *(WebCore::CachedResource **)(v3 + 8);
  else
    v5 = 0;
  WebCore::CachedResource::removeClient(v5, (unsigned int **)this);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v4, v6);
  *(_QWORD *)this = &off_1E33F87C8;
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v7);
      else
        --*(_DWORD *)v9;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JSC::SourceProvider::~SourceProvider(v2);
  WTF::fastFree(v10, v11);
}

void WebCore::WebAssemblyCachedScriptSourceProvider::~WebAssemblyCachedScriptSourceProvider(WebCore::WebAssemblyCachedScriptSourceProvider *this)
{
  WTF *v1;
  void *v2;

  WebCore::WebAssemblyCachedScriptSourceProvider::~WebAssemblyCachedScriptSourceProvider(this);
  WTF::fastFree(v1, v2);
}

{
  uint64_t v2;
  unsigned int **v3;
  WebCore::CachedResource *v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v3 = (unsigned int **)((char *)this + 136);
  v2 = *((_QWORD *)this + 17);
  if (v2)
    v4 = *(WebCore::CachedResource **)(v2 + 8);
  else
    v4 = 0;
  WebCore::CachedResource::removeClient(v4, (unsigned int **)this + 15);
  v6 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v12 = *(unsigned int *)(v6 + 20);
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD *)(v6 + 8);
        v14 = v13 + 16 * v12;
        do
        {
          v15 = *(unsigned int **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v15)
          {
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              v21 = v14;
              v22 = v13;
              v23 = (WTF *)v15;
              v24 = v6;
              atomic_store(1u, v15);
              v18 = v15[6];
              if ((_DWORD)v18 != -1)
                ((void (*)(char *, unsigned int *))off_1E3393D60[v18])(&v26, v15 + 2);
              *((_DWORD *)v23 + 6) = -1;
              WTF::fastFree(v23, v5);
              v6 = v24;
              v14 = v21;
              v13 = v22;
            }
          }
          v13 += 16;
        }
        while (v13 != v14);
      }
      v19 = *(WTF **)(v6 + 8);
      if ((WTF *)(v6 + 24) != v19 && v19 != 0)
      {
        *(_QWORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 16) = 0;
        v25 = v6;
        WTF::fastFree(v19, v5);
        v6 = v25;
      }
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v3, v5);
  *((_QWORD *)this + 15) = &off_1E33F87C8;
  v10 = *((_QWORD *)this + 16);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (WTF *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, v9);
      else
        --*(_DWORD *)v11;
    }
  }
  else
  {
    *((_QWORD *)this + 16) = 0;
  }
  JSC::SourceProvider::~SourceProvider(this);
}

uint64_t WebCore::WebAssemblyCachedScriptSourceProvider::hash(WebCore::WebAssemblyCachedScriptSourceProvider *this)
{
  uint64_t v1;
  WebCore::CachedResource *v2;

  v1 = *((_QWORD *)this + 17);
  if (v1)
    v2 = *(WebCore::CachedResource **)(v1 + 8);
  else
    v2 = 0;
  return WebCore::CachedScript::scriptHash(v2, 0);
}

uint64_t WebCore::WebAssemblyCachedScriptSourceProvider::source(WebCore::WebAssemblyCachedScriptSourceProvider *this)
{
  uint64_t v1;
  WebCore::CachedResource *v2;

  v1 = *((_QWORD *)this + 17);
  if (v1)
    v2 = *(WebCore::CachedResource **)(v1 + 8);
  else
    v2 = 0;
  return WebCore::CachedScript::script(v2, 0);
}

uint64_t WebCore::WebAssemblyCachedScriptSourceProvider::data(WebCore::WebAssemblyCachedScriptSourceProvider *this)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  WebCore::WebAssemblyCachedScriptSourceProvider *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  char v25;
  char *v26;

  result = *((_QWORD *)this + 18);
  if (result)
  {
    if (!*(_BYTE *)(result + 40))
    {
      WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)result, &v26);
      v4 = (uint64_t)v26;
      v26 = 0;
      v5 = *((_QWORD *)this + 18);
      *((_QWORD *)this + 18) = v4;
      if (v5)
      {
        do
        {
          v6 = __ldaxr((unsigned int *)v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, (unsigned int *)v5));
        if (!v7)
        {
          atomic_store(1u, (unsigned int *)v5);
          v10 = *(unsigned int *)(v5 + 20);
          if ((_DWORD)v10)
          {
            v11 = *(_QWORD *)(v5 + 8);
            v12 = v11 + 16 * v10;
            do
            {
              v13 = *(unsigned int **)(v11 + 8);
              *(_QWORD *)(v11 + 8) = 0;
              if (v13)
              {
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                {
                  v22 = v11;
                  v23 = v12;
                  v21 = v5;
                  atomic_store(1u, v13);
                  v24 = (WTF *)v13;
                  v16 = v13[6];
                  if ((_DWORD)v16 != -1)
                    ((void (*)(char *, unsigned int *))off_1E3393D60[v16])(&v25, v13 + 2);
                  *((_DWORD *)v24 + 6) = -1;
                  WTF::fastFree(v24, v3);
                  v5 = v21;
                  v11 = v22;
                  v12 = v23;
                }
              }
              v11 += 16;
            }
            while (v11 != v12);
          }
          v17 = *(WTF **)(v5 + 8);
          if ((WTF *)(v5 + 24) != v17 && v17 != 0)
          {
            *(_QWORD *)(v5 + 8) = 0;
            *(_DWORD *)(v5 + 16) = 0;
            v19 = v5;
            WTF::fastFree(v17, v3);
            v5 = v19;
          }
          WTF::fastFree((WTF *)v5, v3);
        }
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v26, v3);
      result = *((_QWORD *)this + 18);
      if (!*(_BYTE *)(result + 40))
      {
        __break(0xC471u);
        JUMPOUT(0x1956E9C20);
      }
    }
    if (*(_DWORD *)(result + 20))
    {
      v8 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
      v9 = *(unsigned int *)(v8 + 24);
      if ((_DWORD)v9 == -1)
      {
        v20 = (WebCore::WebAssemblyCachedScriptSourceProvider *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::WebAssemblyCachedScriptSourceProvider::size(v20);
      }
      else
      {
        v26 = &v25;
        return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v26, v8 + 8);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::WebAssemblyCachedScriptSourceProvider::size(WebCore::WebAssemblyCachedScriptSourceProvider *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 18);
  if (v1)
    return *(_QWORD *)(v1 + 48);
  else
    return 0;
}

uint64_t WebCore::WebAssemblyCachedScriptSourceProvider::lockUnderlyingBuffer(WebCore::WebAssemblyCachedScriptSourceProvider *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)this + 17) + 8) + 392);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  result = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v3;
  if (result)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)result));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)result);
      v8 = *(unsigned int *)(result + 20);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD *)(result + 8);
        v10 = v9 + 16 * v8;
        do
        {
          v11 = *(unsigned int **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              v17 = v10;
              v18 = v9;
              v20 = result;
              atomic_store(1u, v11);
              v19 = (WTF *)v11;
              v14 = v11[6];
              if ((_DWORD)v14 != -1)
                ((void (*)(char *, unsigned int *))off_1E3393D60[v14])(&v22, v11 + 2);
              *((_DWORD *)v19 + 6) = -1;
              WTF::fastFree(v19, a2);
              result = v20;
              v10 = v17;
              v9 = v18;
            }
          }
          v9 += 16;
        }
        while (v9 != v10);
      }
      v15 = *(WTF **)(result + 8);
      if ((WTF *)(result + 24) != v15 && v15 != 0)
      {
        *(_QWORD *)(result + 8) = 0;
        *(_DWORD *)(result + 16) = 0;
        v21 = result;
        WTF::fastFree(v15, a2);
        result = v21;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::WebAssemblyCachedScriptSourceProvider::unlockUnderlyingBuffer(WebCore::WebAssemblyCachedScriptSourceProvider *this, void *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  result = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      v6 = *(unsigned int *)(result + 20);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(result + 8);
        v8 = v7 + 16 * v6;
        do
        {
          v9 = *(unsigned int **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v15 = v8;
              v16 = v7;
              v18 = result;
              atomic_store(1u, v9);
              v17 = (WTF *)v9;
              v12 = v9[6];
              if ((_DWORD)v12 != -1)
                ((void (*)(char *, unsigned int *))off_1E3393D60[v12])(&v20, v9 + 2);
              *((_DWORD *)v17 + 6) = -1;
              WTF::fastFree(v17, a2);
              result = v18;
              v8 = v15;
              v7 = v16;
            }
          }
          v7 += 16;
        }
        while (v7 != v8);
      }
      v13 = *(WTF **)(result + 8);
      if ((WTF *)(result + 24) != v13 && v13 != 0)
      {
        *(_QWORD *)(result + 8) = 0;
        *(_DWORD *)(result + 16) = 0;
        v19 = result;
        WTF::fastFree(v13, a2);
        result = v19;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void `non-virtual thunk to'WebCore::WebAssemblyCachedScriptSourceProvider::~WebAssemblyCachedScriptSourceProvider(WebCore::WebAssemblyCachedScriptSourceProvider *this)
{
  WebCore::WebAssemblyCachedScriptSourceProvider::~WebAssemblyCachedScriptSourceProvider((WebCore::WebAssemblyCachedScriptSourceProvider *)((char *)this - 120));
}

{
  WTF *v1;
  void *v2;

  WebCore::WebAssemblyCachedScriptSourceProvider::~WebAssemblyCachedScriptSourceProvider((WebCore::WebAssemblyCachedScriptSourceProvider *)((char *)this - 120));
  WTF::fastFree(v1, v2);
}

void WebCore::ServiceWorkerImportedScript::~ServiceWorkerImportedScript(WebCore::ServiceWorkerImportedScript *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v8 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD *)(v5 + 8);
        v10 = v9 + 16 * v8;
        do
        {
          v11 = *(unsigned int **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              v17 = v10;
              v18 = v9;
              v19 = (WTF *)v11;
              v20 = v5;
              atomic_store(1u, v11);
              v14 = v11[6];
              if ((_DWORD)v14 != -1)
                ((void (*)(char *, unsigned int *))off_1E3393D60[v14])(&v22, v11 + 2);
              *((_DWORD *)v19 + 6) = -1;
              WTF::fastFree(v19, a2);
              v5 = v20;
              v10 = v17;
              v9 = v18;
            }
          }
          v9 += 16;
        }
        while (v9 != v10);
      }
      v15 = *(WTF **)(v5 + 8);
      if ((WTF *)(v5 + 24) != v15 && v15 != 0)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        v21 = v5;
        WTF::fastFree(v15, a2);
        v5 = v21;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

int32x2_t *WebCore::ScriptSourceCode::ScriptSourceCode(int32x2_t *a1, unsigned int **a2, WTF::StringImpl **a3, WTF::StringImpl **a4, int32x2_t *a5, uint64_t a6, _QWORD *a7)
{
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unsigned int *v16;
  unsigned int v17;
  _DWORD *v18;
  int32x2_t v19;
  __int32 v20;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;

  v10 = *a3;
  if (*a3)
    *(_DWORD *)v10 += 2;
  v24 = v10;
  v11 = (_DWORD *)*a7;
  *a7 = 0;
  v25 = v11;
  v12 = *a3;
  if (*a3)
    *(_DWORD *)v12 += 2;
  v23 = v12;
  v13 = *a4;
  if (*a4)
    *(_DWORD *)v13 += 2;
  v22 = v13;
  WTF::fastMalloc((WTF *)0xB0);
  v14 = JSC::SourceProvider::SourceProvider();
  *(_QWORD *)v14 = off_1E3394810;
  *(_QWORD *)(v14 + 120) = &unk_1E3394870;
  *(_QWORD *)(v14 + 128) = 0;
  v16 = *a2;
  if (*a2)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  *(_QWORD *)(v14 + 136) = v16;
  *(_QWORD *)(v14 + 144) = 0;
  *(_DWORD *)(v14 + 152) = 0;
  *(_QWORD *)(v14 + 160) = 0;
  *(_WORD *)(v14 + 168) = 0;
  *a1 = (int32x2_t)v14;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v15);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v15);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (v25)
  {
    if (v25[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
    else
      --v25[2];
  }
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v15);
    else
      *(_DWORD *)v24 -= 2;
  }
  v18 = (_DWORD *)*a1;
  v18[2] = *(_DWORD *)(*(_QWORD *)a1 + 8) + 1;
  a1[1] = (int32x2_t)v18;
  a1[2].i32[0] = 0;
  v19 = *a5;
  (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18);
  a1[2].i32[1] = v20;
  a1[3] = vmax_s32(v19, 0);
  a1[4] = 0;
  return a1;
}

void WebCore::ScriptBufferSourceProvider::~ScriptBufferSourceProvider(WebCore::ScriptBufferSourceProvider *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScriptBufferSourceProvider::~ScriptBufferSourceProvider(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  WTF *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v14 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v14)
      {
        v15 = *(_QWORD *)(v4 + 8);
        v16 = v15 + 16 * v14;
        do
        {
          v17 = *(unsigned int **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              v32 = v16;
              v34 = v15;
              v36 = (WTF *)v17;
              v38 = v4;
              atomic_store(1u, v17);
              v20 = v17[6];
              if ((_DWORD)v20 != -1)
                ((void (*)(char *, unsigned int *))off_1E3393D60[v20])(&v42, v17 + 2);
              *((_DWORD *)v36 + 6) = -1;
              WTF::fastFree(v36, a2);
              v4 = v38;
              v16 = v32;
              v15 = v34;
            }
          }
          v15 += 16;
        }
        while (v15 != v16);
      }
      v28 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v28 && v28 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v40 = v4;
        WTF::fastFree(v28, a2);
        v4 = v40;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v21 = *(unsigned int *)(v7 + 20);
      if ((_DWORD)v21)
      {
        v22 = *(_QWORD *)(v7 + 8);
        v23 = v22 + 16 * v21;
        do
        {
          v24 = *(unsigned int **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              v33 = v23;
              v35 = v22;
              v37 = (WTF *)v24;
              v39 = v7;
              atomic_store(1u, v24);
              v27 = v24[6];
              if ((_DWORD)v27 != -1)
                ((void (*)(char *, unsigned int *))off_1E3393D60[v27])(&v43, v24 + 2);
              *((_DWORD *)v37 + 6) = -1;
              WTF::fastFree(v37, a2);
              v7 = v39;
              v23 = v33;
              v22 = v35;
            }
          }
          v22 += 16;
        }
        while (v22 != v23);
      }
      v30 = *(WTF **)(v7 + 8);
      if ((WTF *)(v7 + 24) != v30 && v30 != 0)
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 16) = 0;
        v41 = v7;
        WTF::fastFree(v30, a2);
        v7 = v41;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = *((_QWORD *)this + 16);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 16) = 0;
  }
  JSC::SourceProvider::~SourceProvider(this);
}

uint64_t WebCore::ScriptBufferSourceProvider::hash(WebCore::ScriptBufferSourceProvider *this, void *a2)
{
  uint64_t result;

  result = *((unsigned int *)this + 38);
  if (!(_DWORD)result)
  {
    WebCore::ScriptBufferSourceProvider::source(this, a2);
    return *((unsigned int *)this + 38);
  }
  return result;
}

uint64_t WebCore::ScriptBufferSourceProvider::source(WebCore::ScriptBufferSourceProvider *this, void *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WebCore::ScriptBufferSourceProvider *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  WTF::StringImpl *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  unsigned int v45;
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  WTF *v54;
  uint64_t v56;
  WTF *v57;
  WTF *v58;
  char v59;
  WTF::StringImpl *v60;

  v3 = (WebCore::ScriptBufferSourceProvider *)((char *)this + 136);
  v2 = *((_QWORD *)this + 17);
  if (!v2 || !*(_QWORD *)(v2 + 48))
  {
    v34 = *MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
      return 0;
    return *(_QWORD *)(v34 + 8);
  }
  v4 = this;
  if (!*((_QWORD *)this + 18) && (!*((_BYTE *)this + 169) || *((_BYTE *)this + 168)))
  {
    v35 = (WTF *)WebCore::ScriptBuffer::buffer((WebCore::ScriptBufferSourceProvider *)((char *)this + 136), a2);
    WebCore::FragmentedSharedBuffer::makeContiguous(v35, &v60);
    v37 = v60;
    v60 = 0;
    v38 = (unsigned int *)*((_QWORD *)v4 + 18);
    *((_QWORD *)v4 + 18) = v37;
    if (v38)
    {
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        atomic_store(1u, v38);
        v58 = (WTF *)v38;
        v48 = v38[5];
        if ((_DWORD)v48)
        {
          v49 = *((_QWORD *)v58 + 1);
          v50 = v49 + 16 * v48;
          do
          {
            v51 = *(unsigned int **)(v49 + 8);
            *(_QWORD *)(v49 + 8) = 0;
            if (v51)
            {
              do
              {
                v52 = __ldaxr(v51);
                v53 = v52 - 1;
              }
              while (__stlxr(v53, v51));
              if (!v53)
              {
                atomic_store(1u, v51);
                v57 = (WTF *)v51;
                v56 = v51[6];
                if ((_DWORD)v56 != -1)
                  ((void (*)(char *, char *))off_1E3393D60[v56])(&v59, (char *)v57 + 8);
                *((_DWORD *)v57 + 6) = -1;
                WTF::fastFree(v57, v36);
              }
            }
            v49 += 16;
          }
          while (v49 != v50);
        }
        v54 = (WTF *)*((_QWORD *)v58 + 1);
        if ((WTF *)((char *)v58 + 24) != v54 && v54 != 0)
          goto LABEL_74;
        goto LABEL_70;
      }
    }
    goto LABEL_40;
  }
  while (1)
  {
    if (!*((_BYTE *)v4 + 169))
    {
      v8 = *((_QWORD *)v4 + 18);
      if (*(_DWORD *)(v8 + 20))
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
        v10 = *(unsigned int *)(v9 + 24);
        if ((_DWORD)v10 == -1)
          goto LABEL_73;
        v60 = (WTF::StringImpl *)&v59;
        v11 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v10])(&v60, v9 + 8);
      }
      else
      {
        v11 = 0;
      }
      v12 = 0;
      v13 = *(_QWORD *)(v8 + 48);
      v14 = v11 + v13;
      if ((v11 & 7) != 0 && v13)
      {
        v12 = 0;
        v15 = v13 - 1;
        v16 = v11 + 1;
        do
        {
          v17 = *(unsigned __int8 *)v11++;
          v12 |= v17;
          if ((v16 & 7) == 0)
            break;
          v18 = v15--;
          ++v16;
        }
        while (v18);
      }
      while (v11 < (v14 & 0xFFFFFFFFFFFFFFF8))
      {
        v19 = *(_QWORD *)v11;
        v11 += 8;
        v12 |= v19;
      }
      while (v11 != v14)
      {
        v20 = *(unsigned __int8 *)v11++;
        v12 |= v20;
      }
      v21 = v12 & 0x8080808080808080;
      *((_WORD *)v4 + 84) = (v21 == 0) | 0x100;
      if (v21)
        goto LABEL_34;
      v22 = *((_QWORD *)v4 + 18);
      if (*(_DWORD *)(v22 + 20))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8);
        v24 = *(unsigned int *)(v23 + 24);
        if ((_DWORD)v24 == -1)
          goto LABEL_73;
        v60 = (WTF::StringImpl *)&v59;
        v25 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v24])(&v60, v23 + 8);
      }
      else
      {
        v25 = 0;
      }
      v26 = -1640531527;
      v27 = *(_QWORD *)(v22 + 48);
      if (v27 >= 2)
      {
        v28 = 0;
        do
        {
          v29 = (*(unsigned __int8 *)(v25 + v28 + 1) << 11) ^ ((v26 + *(unsigned __int8 *)(v25 + v28)) << 16) ^ (v26 + *(unsigned __int8 *)(v25 + v28));
          v26 = v29 + (v29 >> 11);
          v30 = v28 + 3;
          v28 += 2;
        }
        while (v30 < v27);
      }
      if ((v27 & 1) != 0)
        v26 = ((v26 + *(unsigned __int8 *)(v27 + v25 - 1)) ^ ((v26 + *(unsigned __int8 *)(v27 + v25 - 1)) << 11))
            + (((v26 + *(unsigned __int8 *)(v27 + v25 - 1)) ^ ((v26 + *(unsigned __int8 *)(v27 + v25 - 1)) << 11)) >> 17);
      v31 = (v26 ^ (8 * v26)) + ((v26 ^ (8 * v26)) >> 5);
      v32 = (v31 ^ (4 * v31)) + ((v31 ^ (4 * v31)) >> 15);
      v33 = (v32 ^ (v32 << 10)) & 0xFFFFFF;
      if (!v33)
        v33 = 0x800000;
      *((_DWORD *)v4 + 38) = v33;
      if (!*((_BYTE *)v4 + 169))
        break;
    }
    if (!*((_BYTE *)v4 + 168))
      goto LABEL_34;
    v4 = (WebCore::ScriptBufferSourceProvider *)*((_QWORD *)v4 + 18);
    if (!*((_DWORD *)v4 + 5))
      return 0;
    v5 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 8);
    v6 = *(unsigned int *)(v5 + 24);
    if ((_DWORD)v6 != -1)
    {
      v60 = (WTF::StringImpl *)&v59;
      return ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v60, v5 + 8);
    }
LABEL_73:
    v54 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_74:
    *((_QWORD *)v58 + 1) = 0;
    *((_DWORD *)v58 + 4) = 0;
    WTF::fastFree(v54, v36);
LABEL_70:
    WTF::fastFree(v58, v36);
LABEL_40:
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v60, v36);
  }
  __break(1u);
LABEL_34:
  v34 = *((_QWORD *)v4 + 20);
  if (v34)
    return *(_QWORD *)(v34 + 8);
  WebCore::ScriptBuffer::toString(v3, &v60);
  v42 = v60;
  v60 = 0;
  v43 = (WTF::StringImpl *)*((_QWORD *)v4 + 20);
  *((_QWORD *)v4 + 20) = v42;
  if (v43)
  {
    v44 = *(_DWORD *)v43 - 2;
    if (*(_DWORD *)v43 != 2)
      goto LABEL_43;
    WTF::StringImpl::destroy(v43, v41);
    v43 = v60;
    v60 = 0;
    if (v43)
    {
      v44 = *(_DWORD *)v43 - 2;
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v47);
      else
LABEL_43:
        *(_DWORD *)v43 = v44;
    }
  }
  v34 = *((_QWORD *)v4 + 20);
  if (!*((_DWORD *)v4 + 38))
  {
    v45 = *(_DWORD *)(v34 + 16);
    if (v45 < 0x100)
    {
      v46 = WTF::StringImpl::hashSlowCase(*((WTF::StringImpl **)v4 + 20));
      v34 = *((_QWORD *)v4 + 20);
    }
    else
    {
      v46 = v45 >> 8;
    }
    *((_DWORD *)v4 + 38) = v46;
  }
  if (v34)
    return *(_QWORD *)(v34 + 8);
  return 0;
}

WTF::StringImpl *WebCore::ScriptBufferSourceProvider::clearDecodedData(WebCore::ScriptBufferSourceProvider *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ScriptBufferSourceProvider::tryReplaceScriptBuffer(WebCore::ScriptBufferSourceProvider *this, const WebCore::ScriptBuffer *a2)
{
  unsigned int **v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v4 = (unsigned int **)((char *)this + 136);
  v5 = WebCore::ScriptBuffer::buffer((WebCore::ScriptBufferSourceProvider *)((char *)this + 136), a2);
  if (v5 == WebCore::ScriptBuffer::buffer(a2, v6)
    || WebCore::ScriptBuffer::buffer((WebCore::ScriptBuffer *)v4, v7)
    && WebCore::ScriptBuffer::buffer(a2, v8)
    && (v10 = WebCore::ScriptBuffer::buffer((WebCore::ScriptBuffer *)v4, v9),
        v12 = WebCore::ScriptBuffer::buffer(a2, v11),
        WebCore::FragmentedSharedBuffer::operator==(v10, v12),
        v13))
  {
    WebCore::SharedBufferBuilder::operator=(v4, (unsigned int **)a2);
    v15 = *((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v15));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)v15);
        v18 = *(unsigned int *)(v15 + 20);
        if ((_DWORD)v18)
        {
          v19 = *(_QWORD *)(v15 + 8);
          v20 = v19 + 16 * v18;
          do
          {
            v21 = *(unsigned int **)(v19 + 8);
            *(_QWORD *)(v19 + 8) = 0;
            if (v21)
            {
              do
              {
                v22 = __ldaxr(v21);
                v23 = v22 - 1;
              }
              while (__stlxr(v23, v21));
              if (!v23)
              {
                v28 = v15;
                atomic_store(1u, v21);
                v24 = v21[6];
                if ((_DWORD)v24 != -1)
                  ((void (*)(char *, unsigned int *))off_1E3393D60[v24])(&v29, v21 + 2);
                v21[6] = -1;
                WTF::fastFree((WTF *)v21, v14);
                v15 = v28;
              }
            }
            v19 += 16;
          }
          while (v19 != v20);
        }
        v25 = *(WTF **)(v15 + 8);
        if ((WTF *)(v15 + 24) != v25 && v25 != 0)
        {
          *(_QWORD *)(v15 + 8) = 0;
          *(_DWORD *)(v15 + 16) = 0;
          v27 = v15;
          WTF::fastFree(v25, v14);
          v15 = v27;
        }
        WTF::fastFree((WTF *)v15, v14);
      }
    }
  }
}

WTF::StringImpl *`non-virtual thunk to'WebCore::ScriptBufferSourceProvider::clearDecodedData(WebCore::ScriptBufferSourceProvider *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void `non-virtual thunk to'WebCore::ScriptBufferSourceProvider::tryReplaceScriptBuffer(WebCore::ScriptBufferSourceProvider *this, const WebCore::ScriptBuffer *a2)
{
  WebCore::ScriptBufferSourceProvider::tryReplaceScriptBuffer((WebCore::ScriptBufferSourceProvider *)((char *)this - 120), a2);
}

void `non-virtual thunk to'WebCore::ScriptBufferSourceProvider::~ScriptBufferSourceProvider(WebCore::ScriptBufferSourceProvider *this, WTF::StringImpl *a2)
{
  WebCore::ScriptBufferSourceProvider::~ScriptBufferSourceProvider((WebCore::ScriptBufferSourceProvider *)((char *)this - 120), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::ScriptBufferSourceProvider::~ScriptBufferSourceProvider((WebCore::ScriptBufferSourceProvider *)((char *)this - 120), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::ScriptBuffer::buffer(WebCore::ScriptBuffer *this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  char v19;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    do
      v3 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v3 + 1, (unsigned int *)v2));
    do
    {
      v4 = __ldaxr((unsigned int *)v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v2));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v2);
      v7 = *(unsigned int *)(v2 + 20);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(v2 + 8);
        v9 = v8 + 16 * v7;
        do
        {
          v10 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v16 = v8;
              v17 = v9;
              atomic_store(1u, v10);
              v18 = (WTF *)v10;
              v15 = v10[6];
              if ((_DWORD)v15 != -1)
                ((void (*)(char *, unsigned int *))off_1E3393D60[v15])(&v19, v10 + 2);
              *((_DWORD *)v18 + 6) = -1;
              WTF::fastFree(v18, a2);
              v8 = v16;
              v9 = v17;
            }
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      v13 = *(WTF **)(v2 + 8);
      if ((WTF *)(v2 + 24) != v13 && v13 != 0)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v13, a2);
      }
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  return v2;
}

void WebCore::WebAssemblyScriptBufferSourceProvider::~WebAssemblyScriptBufferSourceProvider(WebCore::WebAssemblyScriptBufferSourceProvider *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::WebAssemblyScriptBufferSourceProvider::~WebAssemblyScriptBufferSourceProvider(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  WTF *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v14 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v14)
      {
        v15 = *(_QWORD *)(v4 + 8);
        v16 = v15 + 16 * v14;
        do
        {
          v17 = *(unsigned int **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              v32 = v16;
              v34 = v15;
              v36 = (WTF *)v17;
              v38 = v4;
              atomic_store(1u, v17);
              v20 = v17[6];
              if ((_DWORD)v20 != -1)
                ((void (*)(char *, unsigned int *))off_1E3393D60[v20])(&v42, v17 + 2);
              *((_DWORD *)v36 + 6) = -1;
              WTF::fastFree(v36, a2);
              v4 = v38;
              v16 = v32;
              v15 = v34;
            }
          }
          v15 += 16;
        }
        while (v15 != v16);
      }
      v28 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v28 && v28 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v40 = v4;
        WTF::fastFree(v28, a2);
        v4 = v40;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v21 = *(unsigned int *)(v7 + 20);
      if ((_DWORD)v21)
      {
        v22 = *(_QWORD *)(v7 + 8);
        v23 = v22 + 16 * v21;
        do
        {
          v24 = *(unsigned int **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              v33 = v23;
              v35 = v22;
              v37 = (WTF *)v24;
              v39 = v7;
              atomic_store(1u, v24);
              v27 = v24[6];
              if ((_DWORD)v27 != -1)
                ((void (*)(char *, unsigned int *))off_1E3393D60[v27])(&v43, v24 + 2);
              *((_DWORD *)v37 + 6) = -1;
              WTF::fastFree(v37, a2);
              v7 = v39;
              v23 = v33;
              v22 = v35;
            }
          }
          v22 += 16;
        }
        while (v22 != v23);
      }
      v30 = *(WTF **)(v7 + 8);
      if ((WTF *)(v7 + 24) != v30 && v30 != 0)
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 16) = 0;
        v41 = v7;
        WTF::fastFree(v30, a2);
        v7 = v41;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = *((_QWORD *)this + 16);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 16) = 0;
  }
  JSC::SourceProvider::~SourceProvider(this);
}

uint64_t WebCore::WebAssemblyScriptBufferSourceProvider::hash(WebCore::WebAssemblyScriptBufferSourceProvider *this)
{
  WTF::StringImpl *v1;
  unsigned int v2;

  v1 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  v2 = *((_DWORD *)v1 + 4);
  if (v2 < 0x100)
    return WTF::StringImpl::hashSlowCase(v1);
  else
    return v2 >> 8;
}

uint64_t WebCore::WebAssemblyScriptBufferSourceProvider::source(WebCore::WebAssemblyScriptBufferSourceProvider *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 19);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::WebAssemblyScriptBufferSourceProvider::data(WebCore::WebAssemblyScriptBufferSourceProvider *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::WebAssemblyScriptBufferSourceProvider *v5;
  char v6;
  char *v7;

  v1 = *((_QWORD *)this + 18);
  if (!v1)
    return 0;
  if (!*(_BYTE *)(v1 + 40))
  {
    __break(0xC471u);
    JUMPOUT(0x1956EAF44);
  }
  if (!*(_DWORD *)(v1 + 20))
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8);
  v3 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 == -1)
  {
    v5 = (WebCore::WebAssemblyScriptBufferSourceProvider *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::WebAssemblyScriptBufferSourceProvider::size(v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v7, v2 + 8);
  }
}

uint64_t WebCore::WebAssemblyScriptBufferSourceProvider::size(WebCore::WebAssemblyScriptBufferSourceProvider *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 18);
  if (v1)
    return *(_QWORD *)(v1 + 48);
  else
    return 0;
}

uint64_t *WebCore::WebAssemblyScriptBufferSourceProvider::lockUnderlyingBuffer(WebCore::WebAssemblyScriptBufferSourceProvider *this, void *a2)
{
  unsigned int *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t *result;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;

  v3 = (unsigned int *)WebCore::ScriptBuffer::buffer((WebCore::WebAssemblyScriptBufferSourceProvider *)((char *)this + 136), a2);
  v5 = v3;
  if (v3)
  {
    do
      v6 = __ldaxr(v3);
    while (__stlxr(v6 + 1, v3));
  }
  result = (uint64_t *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v5;
  if (result)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)result));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)result);
      v15 = *((unsigned int *)result + 5);
      if ((_DWORD)v15)
      {
        v16 = result[1];
        v17 = v16 + 16 * v15;
        do
        {
          v18 = *(unsigned int **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v37 = result;
              v39 = v17;
              atomic_store(1u, v18);
              v21 = v18;
              v22 = v18[6];
              if ((_DWORD)v22 != -1)
                ((void (*)(char *, unsigned int *))off_1E3393D60[v22])(&v42, v18 + 2);
              v21[6] = -1;
              WTF::fastFree((WTF *)v21, v4);
              result = v37;
              v17 = v39;
            }
          }
          v16 += 16;
        }
        while (v16 != v17);
      }
      v23 = (WTF *)result[1];
      if (result + 3 != (uint64_t *)v23 && v23 != 0)
      {
        result[1] = 0;
        *((_DWORD *)result + 4) = 0;
        v34 = result;
        WTF::fastFree(v23, v4);
        result = v34;
      }
      result = (uint64_t *)WTF::fastFree((WTF *)result, v4);
    }
    v5 = (unsigned int *)*((_QWORD *)this + 18);
  }
  if (v5 && !*((_BYTE *)v5 + 40))
  {
    WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v5, &v41);
    v11 = v41;
    v41 = 0;
    v12 = *((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = v11;
    if (v12)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v12);
        v25 = *(unsigned int *)(v12 + 20);
        if ((_DWORD)v25)
        {
          v26 = *(_QWORD *)(v12 + 8);
          v27 = v26 + 16 * v25;
          do
          {
            v28 = *(unsigned int **)(v26 + 8);
            *(_QWORD *)(v26 + 8) = 0;
            if (v28)
            {
              do
              {
                v29 = __ldaxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
              {
                v38 = v26;
                v40 = v27;
                v36 = v12;
                atomic_store(1u, v28);
                v31 = v28[6];
                if ((_DWORD)v31 != -1)
                  ((void (*)(char *, unsigned int *))off_1E3393D60[v31])(&v43, v28 + 2);
                v28[6] = -1;
                WTF::fastFree((WTF *)v28, v10);
                v12 = v36;
                v26 = v38;
                v27 = v40;
              }
            }
            v26 += 16;
          }
          while (v26 != v27);
        }
        v32 = *(WTF **)(v12 + 8);
        if ((WTF *)(v12 + 24) != v32 && v32 != 0)
        {
          *(_QWORD *)(v12 + 8) = 0;
          *(_DWORD *)(v12 + 16) = 0;
          v35 = v12;
          WTF::fastFree(v32, v10);
          v12 = v35;
        }
        WTF::fastFree((WTF *)v12, v10);
      }
    }
    return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v41, v10);
  }
  return result;
}

uint64_t WebCore::WebAssemblyScriptBufferSourceProvider::unlockUnderlyingBuffer(WebCore::WebAssemblyScriptBufferSourceProvider *this, void *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  result = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      v6 = *(unsigned int *)(result + 20);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(result + 8);
        v8 = v7 + 16 * v6;
        do
        {
          v9 = *(unsigned int **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v15 = v8;
              v16 = v7;
              v18 = result;
              atomic_store(1u, v9);
              v17 = (WTF *)v9;
              v12 = v9[6];
              if ((_DWORD)v12 != -1)
                ((void (*)(char *, unsigned int *))off_1E3393D60[v12])(&v20, v9 + 2);
              *((_DWORD *)v17 + 6) = -1;
              WTF::fastFree(v17, a2);
              result = v18;
              v8 = v15;
              v7 = v16;
            }
          }
          v7 += 16;
        }
        while (v7 != v8);
      }
      v13 = *(WTF **)(result + 8);
      if ((WTF *)(result + 24) != v13 && v13 != 0)
      {
        *(_QWORD *)(result + 8) = 0;
        *(_DWORD *)(result + 16) = 0;
        v19 = result;
        WTF::fastFree(v13, a2);
        result = v19;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebCore::WebAssemblyScriptBufferSourceProvider::tryReplaceScriptBuffer(WebCore::WebAssemblyScriptBufferSourceProvider *this, const WebCore::ScriptBuffer *a2)
{
  unsigned int **v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;

  v3 = (unsigned int **)((char *)this + 136);
  v4 = WebCore::ScriptBuffer::buffer((WebCore::WebAssemblyScriptBufferSourceProvider *)((char *)this + 136), a2);
  if (v4 == WebCore::ScriptBuffer::buffer(a2, v5)
    || WebCore::ScriptBuffer::buffer((WebCore::ScriptBuffer *)v3, v6)
    && WebCore::ScriptBuffer::buffer(a2, v7)
    && (v9 = WebCore::ScriptBuffer::buffer((WebCore::ScriptBuffer *)v3, v8),
        v11 = WebCore::ScriptBuffer::buffer(a2, v10),
        WebCore::FragmentedSharedBuffer::operator==(v9, v11),
        v12))
  {
    WebCore::SharedBufferBuilder::operator=(v3, (unsigned int **)a2);
  }
}

void `non-virtual thunk to'WebCore::WebAssemblyScriptBufferSourceProvider::tryReplaceScriptBuffer(WebCore::WebAssemblyScriptBufferSourceProvider *this, const WebCore::ScriptBuffer *a2)
{
  unsigned int **v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;

  v3 = (unsigned int **)((char *)this + 16);
  v4 = WebCore::ScriptBuffer::buffer((WebCore::WebAssemblyScriptBufferSourceProvider *)((char *)this + 16), a2);
  if (v4 == WebCore::ScriptBuffer::buffer(a2, v5)
    || WebCore::ScriptBuffer::buffer((WebCore::ScriptBuffer *)v3, v6)
    && WebCore::ScriptBuffer::buffer(a2, v7)
    && (v9 = WebCore::ScriptBuffer::buffer((WebCore::ScriptBuffer *)v3, v8),
        v11 = WebCore::ScriptBuffer::buffer(a2, v10),
        WebCore::FragmentedSharedBuffer::operator==(v9, v11),
        v12))
  {
    WebCore::SharedBufferBuilder::operator=(v3, (unsigned int **)a2);
  }
}

void `non-virtual thunk to'WebCore::WebAssemblyScriptBufferSourceProvider::~WebAssemblyScriptBufferSourceProvider(WebCore::WebAssemblyScriptBufferSourceProvider *this, WTF::StringImpl *a2)
{
  WebCore::WebAssemblyScriptBufferSourceProvider::~WebAssemblyScriptBufferSourceProvider((WebCore::WebAssemblyScriptBufferSourceProvider *)((char *)this - 120), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::WebAssemblyScriptBufferSourceProvider::~WebAssemblyScriptBufferSourceProvider((WebCore::WebAssemblyScriptBufferSourceProvider *)((char *)this - 120), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CloneSerializer::write(uint64_t this, double a2)
{
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;

  v3 = this;
  v4 = *(unsigned int *)(this + 8);
  v5 = *(unsigned int *)(this + 12);
  v6 = v5 + 8;
  if (v5 + 8 > v4)
  {
    v8 = v4 + (v4 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= v6)
      v10 = v5 + 8;
    else
      v10 = v9;
    if (HIDWORD(v10))
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x1956EB768);
    }
    v11 = *(void **)this;
    v12 = (void *)WTF::fastMalloc((WTF *)v10);
    *(_DWORD *)(v3 + 8) = v10;
    *(_QWORD *)v3 = v12;
    this = (uint64_t)memcpy(v12, v11, v5);
    if (v11)
    {
      if (*(void **)v3 == v11)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      this = WTF::fastFree((WTF *)v11, v13);
    }
  }
  v7 = *(unsigned int *)(v3 + 12);
  if (v6 < v7)
    goto LABEL_15;
  *(double *)(*(_QWORD *)v3 + v7) = a2;
  *(_DWORD *)(v3 + 12) = v6;
  return this;
}

uint64_t WebCore::CloneSerializer::addToObjectPoolIfNotDupe<(WebCore::SerializationTag)24,(WebCore::SerializationTag)25,(WebCore::SerializationTag)255>(uint64_t a1, objc_class *a2)
{
  uint64_t v4;
  unsigned __int32 v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  objc_class *v11;
  int v12;
  JSC::MarkedVectorBase *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  JSValue v20;
  _BYTE v21[28];
  unsigned __int32 v22;
  objc_class *v23;

  v4 = *(_QWORD *)(a1 + 232);
  if (v4)
  {
    v6 = *(_DWORD *)(v4 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(objc_class **)(v4 + 16 * v10);
    if (v11 != a2)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(objc_class **)(v4 + 16 * v10);
        ++v12;
        if (v11 == a2)
          goto LABEL_9;
      }
      v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_9:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      v18 = *(_QWORD *)(a1 + 216);
      v21[0] = 19;
      v19 = *(unsigned int *)(v18 + 12);
      if ((_DWORD)v19 == *(_DWORD *)(v18 + 8))
        *(_BYTE *)(*(_QWORD *)v18 + *(unsigned int *)(v18 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v18, (WTF *)(v19 + 1), (unint64_t)v21);
      else
        *(_BYTE *)(*(_QWORD *)v18 + v19) = 19;
      ++*(_DWORD *)(v18 + 12);
      WebCore::CloneSerializer::writeConstantPoolIndex<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>((char *)a1, *(_QWORD *)(a1 + 232), *(_DWORD *)(v4 + 16 * v10 + 8));
      return 0;
    }
    v23 = a2;
    v5 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v23 = a2;
  }
  v22 = v5;
  WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>((uint64_t)v21, (uint64_t *)(a1 + 232), (unint64_t *)&v23, &v22);
  v14 = *(unsigned int *)(a1 + 120);
  v13 = (JSC::MarkedVectorBase *)(a1 + 120);
  if ((_DWORD)v14 != *(_DWORD *)(a1 + 124)
    && ((v15 = *(_QWORD *)(a1 + 128), v15 != a1 + 144) ? (v16 = v15 == 0) : (v16 = 1), v16))
  {
    *(_QWORD *)(v15 + 8 * v14) = a2;
    *(_DWORD *)v13 = v14 + 1;
  }
  else
  {
    v20.super.isa = a2;
    if (JSC::MarkedVectorBase::slowAppend(v13, v20) == 1)
    {
      *(_BYTE *)(a1 + 112) = 1;
      goto LABEL_27;
    }
  }
  if (*(_BYTE *)(a1 + 112))
  {
LABEL_27:
    result = 184;
    __break(0xC471u);
    return result;
  }
  return 1;
}

uint64_t JSC::JSValue::toBoolean(unint64_t a1, uint64_t a2)
{
  double v2;

  if (a1 >= 0xFFFE000000000000)
    return (_DWORD)a1 != 0;
  *(_QWORD *)&v2 = a1 - 0x2000000000000;
  if (a1 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    return v2 > 0.0 || v2 < 0.0;
  }
  else if ((a1 & 0xFFFE000000000002) != 0)
  {
    return a1 == 7;
  }
  else
  {
    return JSC::JSCell::toBoolean(a1, a2);
  }
}

char *WebCore::CloneSerializer::dumpStringObject(char *this, const WTF::String **a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v2 = (WTF::StringImpl **)this;
  if (*a2 && *((_DWORD *)*a2 + 1))
  {
    v6 = *((_QWORD *)this + 27);
    v9 = 26;
    v7 = *(unsigned int *)(v6 + 12);
    if ((_DWORD)v7 == *(_DWORD *)(v6 + 8))
      *(_BYTE *)(*(_QWORD *)v6 + *(unsigned int *)(v6 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v6, (WTF *)(v7 + 1), (unint64_t)&v9);
    else
      *(_BYTE *)(*(_QWORD *)v6 + v7) = 26;
    ++*(_DWORD *)(v6 + 12);
    return (char *)WebCore::CloneSerializer::write(v2, *a2);
  }
  else
  {
    v3 = *((_QWORD *)this + 27);
    v8 = 27;
    v4 = *(unsigned int *)(v3 + 12);
    if ((_DWORD)v4 == *(_DWORD *)(v3 + 8))
    {
      this = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v3, (WTF *)(v4 + 1), (unint64_t)&v8);
      *(_BYTE *)(*(_QWORD *)v3 + *(unsigned int *)(v3 + 12)) = *this;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)v3 + v4) = 27;
    }
    ++*(_DWORD *)(v3 + 12);
  }
  return this;
}

uint64_t WebCore::CloneSerializer::write(WebCore::CloneSerializer *this, const WTF::String **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  double v10;
  char v12;
  _BYTE v13[72];
  _BYTE v14[24];
  int v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 28);
  v14[0] = 0;
  v16 = 0;
  WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive((uint64_t)v13, (uint64_t)(a2 + 10), (uint64_t)v14);
  if (v16 && v15 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_6[v15])(&v12, v14);
  WebCore::URLKeepingBlobAlive::isolatedCopy((WebCore::URLKeepingBlobAlive *)v13, (uint64_t)v14);
  v5 = *(unsigned int *)(v4 + 12);
  if ((_DWORD)v5 == *(_DWORD *)(v4 + 8))
  {
    v6 = (uint64_t *)WTF::Vector<WebCore::URLKeepingBlobAlive,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v5 + 1, (unint64_t)v14);
    v7 = *(_QWORD *)v4 + 72 * *(unsigned int *)(v4 + 12);
  }
  else
  {
    v7 = *(_QWORD *)v4 + 72 * v5;
    v6 = (uint64_t *)v14;
  }
  WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(v7, v6);
  ++*(_DWORD *)(v4 + 12);
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)v14);
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)v13);
  WebCore::CloneSerializer::write((WTF::StringImpl **)this, a2[16]);
  v8 = a2[10];
  if (v8)
  {
    *(_DWORD *)v8 += 2;
    WebCore::CloneSerializer::write((WTF::StringImpl **)this, v8);
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v9);
    else
      *(_DWORD *)v8 -= 2;
  }
  else
  {
    WebCore::CloneSerializer::write((WTF::StringImpl **)this, 0);
  }
  WebCore::CloneSerializer::write((WTF::StringImpl **)this, a2[6]);
  WebCore::CloneSerializer::write((WTF::StringImpl **)this, a2[18]);
  v10 = (double)(uint64_t)a2[19];
  if (!*((_BYTE *)a2 + 160))
    v10 = -1.0;
  return WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v10);
}

uint64_t WebCore::CloneSerializer::write(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;

  v3 = this;
  v4 = *(unsigned int *)(this + 8);
  v5 = *(unsigned int *)(this + 12);
  v6 = v5 + 8;
  if (v5 + 8 > v4)
  {
    v8 = v4 + (v4 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= v6)
      v10 = v5 + 8;
    else
      v10 = v9;
    if (HIDWORD(v10))
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x1956EBCF0);
    }
    v11 = *(void **)this;
    v12 = (void *)WTF::fastMalloc((WTF *)v10);
    *(_DWORD *)(v3 + 8) = v10;
    *(_QWORD *)v3 = v12;
    this = (uint64_t)memcpy(v12, v11, v5);
    if (v11)
    {
      if (*(void **)v3 == v11)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      this = WTF::fastFree((WTF *)v11, v13);
    }
  }
  v7 = *(unsigned int *)(v3 + 12);
  if (v6 < v7)
    goto LABEL_15;
  *(_QWORD *)(*(_QWORD *)v3 + v7) = a2;
  *(_DWORD *)(v3 + 12) = v6;
  return this;
}

uint64_t WTF::HashMap<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,unsigned int,WTF::DefaultHash<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>,WTF::HashTraits<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>(uint64_t result, uint64_t *a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  WTF **v11;
  WTF *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  unsigned int v18;
  WTF **v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  _DWORD *v32;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::KeyValuePair<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>,WTF::HashMap<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,unsigned int,WTF::DefaultHash<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>,WTF::HashTraits<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = (WTF *)*a3;
  v13 = ~(*a3 << 32) + *a3;
  v14 = 9
      * (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) ^ (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = (v15 >> 31) ^ v15;
  for (i = 1; ; ++i)
  {
    v18 = v16 & v10;
    v19 = (WTF **)(v8 + 16 * v18);
    v20 = *v19;
    if (*v19 != (WTF *)-1)
      break;
    v11 = (WTF **)(v8 + 16 * v18);
LABEL_10:
    v16 = i + v18;
  }
  if (!v20)
  {
    if (v11)
    {
      *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = (WTF *)*a3;
      v19 = v11;
    }
    *a3 = 0;
    v21 = *v19;
    *v19 = v12;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
      {
        v32 = (_DWORD *)*((_QWORD *)v21 + 2);
        *((_QWORD *)v21 + 2) = 0;
        if (v32)
        {
          if (*v32 == 1)
            JSC::ArrayBufferView::operator delete();
          else
            --*v32;
        }
        result = WTF::fastFree(v21, a2);
      }
      else
      {
        --*(_DWORD *)v21;
      }
    }
    *((_DWORD *)v19 + 2) = *a4;
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v27 = *a2;
    if (*a2)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29)
        goto LABEL_29;
    }
    else if (3 * v30 <= 4 * v29)
    {
      if (!(_DWORD)v30)
      {
        v31 = 8;
LABEL_32:
        result = WTF::HashTable<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::KeyValuePair<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>,WTF::HashMap<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,unsigned int,WTF::DefaultHash<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>,WTF::HashTraits<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>>::rehash(a2, v31, v19);
        v19 = (WTF **)result;
        v27 = *a2;
        if (*a2)
          v30 = *(unsigned int *)(v27 - 4);
        else
          v30 = 0;
        goto LABEL_36;
      }
LABEL_29:
      v31 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
      goto LABEL_32;
    }
LABEL_36:
    v26 = v27 + 16 * v30;
    v25 = 1;
    goto LABEL_37;
  }
  if (v20 != v12)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v8 - 4);
  v25 = 0;
  v26 = v8 + 16 * v24;
LABEL_37:
  *(_QWORD *)v7 = v19;
  *(_QWORD *)(v7 + 8) = v26;
  *(_BYTE *)(v7 + 16) = v25;
  return result;
}

WTF **WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>::~Ref(WTF **a1, void *a2)
{
  WTF *v3;
  _DWORD *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = (_DWORD *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v5)
      {
        if (*v5 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v5;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::length(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v3 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v2 & 0x3FFFFFFFFLL) + v3))
    return 0;
  v4 = *(_BYTE *)(a1 + 6);
  if ((v4 & 3) == 0)
    return *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v1 + 64) && (v11 = *(_QWORD *)(v1 + 32)) != 0)
  {
    v6 = atomic_load((unint64_t *)(v11 + 32));
    v4 = *(_BYTE *)(a1 + 6);
  }
  else
  {
    v6 = *(_QWORD *)(v1 + 48);
  }
  v7 = *(_QWORD *)(a1 + 8);
  if ((v4 & 4) == 0)
  {
    v8 = *(_QWORD *)(a1 + 16) + v7 <= v6 && v6 >= v7;
    if (v8)
      return 0;
    else
      return *(_QWORD *)(a1 + 16);
  }
  v8 = v6 >= v7;
  v9 = v6 - v7;
  if (v8)
    return 0;
  if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
    LOBYTE(v10) = 0;
  else
    v10 = qword_1968DFB88[(char)(*(_BYTE *)(a1 + 4) - 4)];
  return (-1 << v10) & v9;
}

void **WebCore::CloneSerializer::write(void **result, void *__src, size_t __n)
{
  uint64_t v5;
  size_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;

  if (__n)
  {
    v5 = (uint64_t)result;
    v6 = *((unsigned int *)result + 2);
    v7 = *((unsigned int *)result + 3);
    v8 = __n + v7;
    if (__n + v7 > v6)
    {
      v10 = v6 + (v6 >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= v8)
        v12 = __n + v7;
      else
        v12 = v11;
      if (HIDWORD(v12))
        goto LABEL_17;
      v13 = *result;
      v14 = (void *)WTF::fastMalloc((WTF *)v12);
      *(_DWORD *)(v5 + 8) = v12;
      *(_QWORD *)v5 = v14;
      memcpy(v14, v13, v7);
      if (v13)
      {
        if (*(void **)v5 == v13)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        WTF::fastFree((WTF *)v13, v15);
      }
    }
    v9 = *(unsigned int *)(v5 + 12);
    if (v8 >= v9)
    {
      result = (void **)memcpy((void *)(*(_QWORD *)v5 + v9), __src, __n);
      *(_DWORD *)(v5 + 12) = v8;
      return result;
    }
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x1956EC158);
  }
  return result;
}

uint64_t WebCore::errorNameToSerializableErrorType(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  if (this)
  {
    v2 = this;
    this = 0;
    switch(*(_DWORD *)(v2 + 4))
    {
      case 8:
        v12 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v12 & 0xDF) != 0x55
            || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x52
            || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x49
            || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x45
            || (*(_BYTE *)(v12 + 4) & 0xDF) != 0x52
            || (*(_BYTE *)(v12 + 5) & 0xDF) != 0x52
            || (*(_BYTE *)(v12 + 6) & 0xDF) != 0x4F)
          {
            return 0;
          }
          v13 = *(unsigned __int8 *)(v12 + 7);
        }
        else
        {
          if ((*(_WORD *)v12 & 0xFFDF) != 0x55
            || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x52
            || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x49
            || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x45
            || (*(_WORD *)(v12 + 8) & 0xFFDF) != 0x52
            || (*(_WORD *)(v12 + 10) & 0xFFDF) != 0x52
            || (*(_WORD *)(v12 + 12) & 0xFFDF) != 0x4F)
          {
            return 0;
          }
          v13 = *(unsigned __int16 *)(v12 + 14);
        }
        if ((v13 & 0xFFFFFFDF) != 0x52)
          return 0;
        return 6;
      case 9:
        v3 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        {
          v4 = *(_BYTE *)v3 & 0xDF;
          if (v4 == 69)
          {
            if ((*(_BYTE *)(v3 + 1) & 0xDF) != 0x56
              || (*(_BYTE *)(v3 + 2) & 0xDF) != 0x41
              || (*(_BYTE *)(v3 + 3) & 0xDF) != 0x4C
              || (*(_BYTE *)(v3 + 4) & 0xDF) != 0x45
              || (*(_BYTE *)(v3 + 5) & 0xDF) != 0x52
              || (*(_BYTE *)(v3 + 6) & 0xDF) != 0x52
              || (*(_BYTE *)(v3 + 7) & 0xDF) != 0x4F)
            {
              return 0;
            }
            v5 = *(unsigned __int8 *)(v3 + 8);
            return (v5 & 0xFFFFFFDF) == 0x52;
          }
          if (v4 != 84
            || (*(_BYTE *)(v3 + 1) & 0xDF) != 0x59
            || (*(_BYTE *)(v3 + 2) & 0xDF) != 0x50
            || (*(_BYTE *)(v3 + 3) & 0xDF) != 0x45
            || (*(_BYTE *)(v3 + 4) & 0xDF) != 0x45
            || (*(_BYTE *)(v3 + 5) & 0xDF) != 0x52
            || (*(_BYTE *)(v3 + 6) & 0xDF) != 0x52
            || (*(_BYTE *)(v3 + 7) & 0xDF) != 0x4F)
          {
            return 0;
          }
          v14 = *(unsigned __int8 *)(v3 + 8);
        }
        else
        {
          v15 = *(_WORD *)v3 & 0xFFDF;
          if (v15 == 69)
          {
            if ((*(_WORD *)(v3 + 2) & 0xFFDF) != 0x56
              || (*(_WORD *)(v3 + 4) & 0xFFDF) != 0x41
              || (*(_WORD *)(v3 + 6) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v3 + 8) & 0xFFDF) != 0x45
              || (*(_WORD *)(v3 + 10) & 0xFFDF) != 0x52
              || (*(_WORD *)(v3 + 12) & 0xFFDF) != 0x52
              || (*(_WORD *)(v3 + 14) & 0xFFDF) != 0x4F)
            {
              return 0;
            }
            v5 = *(unsigned __int16 *)(v3 + 16);
            return (v5 & 0xFFFFFFDF) == 0x52;
          }
          if (v15 != 84
            || (*(_WORD *)(v3 + 2) & 0xFFDF) != 0x59
            || (*(_WORD *)(v3 + 4) & 0xFFDF) != 0x50
            || (*(_WORD *)(v3 + 6) & 0xFFDF) != 0x45
            || (*(_WORD *)(v3 + 8) & 0xFFDF) != 0x45
            || (*(_WORD *)(v3 + 10) & 0xFFDF) != 0x52
            || (*(_WORD *)(v3 + 12) & 0xFFDF) != 0x52
            || (*(_WORD *)(v3 + 14) & 0xFFDF) != 0x4F)
          {
            return 0;
          }
          v14 = *(unsigned __int16 *)(v3 + 16);
        }
        if ((v14 & 0xFFFFFFDF) != 0x52)
          return 0;
        return 5;
      case 0xA:
        v6 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v6 & 0xDF) != 0x52
            || (*(_BYTE *)(v6 + 1) & 0xDF) != 0x41
            || (*(_BYTE *)(v6 + 2) & 0xDF) != 0x4E
            || (*(_BYTE *)(v6 + 3) & 0xDF) != 0x47
            || (*(_BYTE *)(v6 + 4) & 0xDF) != 0x45
            || (*(_BYTE *)(v6 + 5) & 0xDF) != 0x45
            || (*(_BYTE *)(v6 + 6) & 0xDF) != 0x52
            || (*(_BYTE *)(v6 + 7) & 0xDF) != 0x52
            || (*(_BYTE *)(v6 + 8) & 0xDF) != 0x4F)
          {
            return 0;
          }
          v7 = *(unsigned __int8 *)(v6 + 9);
        }
        else
        {
          if ((*(_WORD *)v6 & 0xFFDF) != 0x52
            || (*(_WORD *)(v6 + 2) & 0xFFDF) != 0x41
            || (*(_WORD *)(v6 + 4) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v6 + 6) & 0xFFDF) != 0x47
            || (*(_WORD *)(v6 + 8) & 0xFFDF) != 0x45
            || (*(_WORD *)(v6 + 10) & 0xFFDF) != 0x45
            || (*(_WORD *)(v6 + 12) & 0xFFDF) != 0x52
            || (*(_WORD *)(v6 + 14) & 0xFFDF) != 0x52
            || (*(_WORD *)(v6 + 16) & 0xFFDF) != 0x4F)
          {
            return 0;
          }
          v7 = *(unsigned __int16 *)(v6 + 18);
        }
        if ((v7 & 0xFFFFFFDF) != 0x52)
          return 0;
        return 2;
      case 0xB:
        v10 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v10 & 0xDF) != 0x53
            || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x59
            || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x4E
            || (*(_BYTE *)(v10 + 3) & 0xDF) != 0x54
            || (*(_BYTE *)(v10 + 4) & 0xDF) != 0x41
            || (*(_BYTE *)(v10 + 5) & 0xDF) != 0x58
            || (*(_BYTE *)(v10 + 6) & 0xDF) != 0x45
            || (*(_BYTE *)(v10 + 7) & 0xDF) != 0x52
            || (*(_BYTE *)(v10 + 8) & 0xDF) != 0x52
            || (*(_BYTE *)(v10 + 9) & 0xDF) != 0x4F)
          {
            return 0;
          }
          v11 = *(unsigned __int8 *)(v10 + 10);
        }
        else
        {
          if ((*(_WORD *)v10 & 0xFFDF) != 0x53
            || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x59
            || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v10 + 6) & 0xFFDF) != 0x54
            || (*(_WORD *)(v10 + 8) & 0xFFDF) != 0x41
            || (*(_WORD *)(v10 + 10) & 0xFFDF) != 0x58
            || (*(_WORD *)(v10 + 12) & 0xFFDF) != 0x45
            || (*(_WORD *)(v10 + 14) & 0xFFDF) != 0x52
            || (*(_WORD *)(v10 + 16) & 0xFFDF) != 0x52
            || (*(_WORD *)(v10 + 18) & 0xFFDF) != 0x4F)
          {
            return 0;
          }
          v11 = *(unsigned __int16 *)(v10 + 20);
        }
        if ((v11 & 0xFFFFFFDF) != 0x52)
          return 0;
        return 4;
      case 0xE:
        v8 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v8 & 0xDF) == 0x52
            && (*(_BYTE *)(v8 + 1) & 0xDF) == 0x45
            && (*(_BYTE *)(v8 + 2) & 0xDF) == 0x46
            && (*(_BYTE *)(v8 + 3) & 0xDF) == 0x45
            && (*(_BYTE *)(v8 + 4) & 0xDF) == 0x52
            && (*(_BYTE *)(v8 + 5) & 0xDF) == 0x45
            && (*(_BYTE *)(v8 + 6) & 0xDF) == 0x4E
            && (*(_BYTE *)(v8 + 7) & 0xDF) == 0x43
            && (*(_BYTE *)(v8 + 8) & 0xDF) == 0x45
            && (*(_BYTE *)(v8 + 9) & 0xDF) == 0x45
            && (*(_BYTE *)(v8 + 10) & 0xDF) == 0x52
            && (*(_BYTE *)(v8 + 11) & 0xDF) == 0x52
            && (*(_BYTE *)(v8 + 12) & 0xDF) == 0x4F)
          {
            v9 = *(unsigned __int8 *)(v8 + 13);
            goto LABEL_43;
          }
        }
        else if ((*(_WORD *)v8 & 0xFFDF) == 0x52
               && (*(_WORD *)(v8 + 2) & 0xFFDF) == 0x45
               && (*(_WORD *)(v8 + 4) & 0xFFDF) == 0x46
               && (*(_WORD *)(v8 + 6) & 0xFFDF) == 0x45
               && (*(_WORD *)(v8 + 8) & 0xFFDF) == 0x52
               && (*(_WORD *)(v8 + 10) & 0xFFDF) == 0x45
               && (*(_WORD *)(v8 + 12) & 0xFFDF) == 0x4E
               && (*(_WORD *)(v8 + 14) & 0xFFDF) == 0x43
               && (*(_WORD *)(v8 + 16) & 0xFFDF) == 0x45
               && (*(_WORD *)(v8 + 18) & 0xFFDF) == 0x45
               && (*(_WORD *)(v8 + 20) & 0xFFDF) == 0x52
               && (*(_WORD *)(v8 + 22) & 0xFFDF) == 0x52
               && (*(_WORD *)(v8 + 24) & 0xFFDF) == 0x4F)
        {
          v9 = *(unsigned __int16 *)(v8 + 26);
LABEL_43:
          if ((v9 & 0xFFFFFFDF) == 0x52)
            return 3;
        }
        return 0;
      default:
        return this;
    }
  }
  return this;
}

WTF::StringImpl *WebCore::CloneSerializer::writeNullableString(char **this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v4 = *a2;
  result = (WTF::StringImpl *)WebCore::CloneSerializer::write(this[27], *a2 == 0);
  if (v4)
  {
    JSC::Identifier::fromString(a2, &v7);
    WebCore::CloneSerializer::write((uint64_t)this, &v7);
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::find(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 16 * v6);
    if (v7 == a2)
    {
LABEL_7:
      result += 16 * v6;
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 16 * v6);
        ++v8;
        if (v7 == a2)
          goto LABEL_7;
      }
      result += 16 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

uint64_t WebCore::CloneSerializer::writeObjectReferenceIfDupe<(WebCore::SerializationTag)22,(WebCore::SerializationTag)255,(WebCore::SerializationTag)255>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = *(_QWORD *)(a1 + 232);
  if (!v2)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v2 + 16 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v2 + 16 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = *(_QWORD *)(a1 + 216);
  v14 = 19;
  v13 = *(unsigned int *)(v12 + 12);
  if ((_DWORD)v13 == *(_DWORD *)(v12 + 8))
    *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v12, (WTF *)(v13 + 1), (unint64_t)&v14);
  else
    *(_BYTE *)(*(_QWORD *)v12 + v13) = 19;
  ++*(_DWORD *)(v12 + 12);
  WebCore::CloneSerializer::writeConstantPoolIndex<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>((char *)a1, *(_QWORD *)(a1 + 232), *(_DWORD *)(v2 + 16 * v8 + 8));
  return 1;
}

uint64_t WebCore::CloneSerializer::dumpArrayBufferView(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::ArrayBuffer *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  size_t v39;
  _DWORD *v40;
  WebCore::JSDOMGlobalObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  unint64_t v69;
  unint64_t v70;
  BOOL v71;
  unint64_t v72;
  uint64_t v73;
  WebCore *v74;
  uint64_t v75;
  _BOOL4 v76;
  uint64_t v77;
  JSC::Structure *v79;
  uint64_t v80;
  uint64_t (*v81)();
  WTF::DeferrableRefCountedBase *v82;
  uint64_t v84;
  uint64_t v85;
  WTF::DeferrableRefCountedBase *v86;
  char v87;

  v6 = *(_QWORD *)(a1 + 216);
  LOBYTE(v86) = 22;
  v7 = *(unsigned int *)(v6 + 12);
  if ((_DWORD)v7 == *(_DWORD *)(v6 + 8))
    *(_BYTE *)(*(_QWORD *)v6 + *(unsigned int *)(v6 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v6, (WTF *)(v7 + 1), (unint64_t)&v86);
  else
    *(_BYTE *)(*(_QWORD *)v6 + v7) = 22;
  ++*(_DWORD *)(v6 + 12);
  v8 = *(unsigned __int8 *)(a2 + 5) - 39;
  if (v8 >= 0xC
    || (WebCore::CloneSerializer::write(*(char **)(a1 + 216), asc_196ACE510[(char)v8]),
        v9 = MEMORY[0x1E0CC10F8],
        (*(_BYTE *)(a2 + 40) & 8) != 0)
    && ((v10 = *(_QWORD *)(a2 + 16)) == 0
     || (v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) != 0
     && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
     && !((v10 & 0x3FFFFFFFFLL) + v11))
    || (*(_BYTE *)(a2 + 40) & 4) != 0
    && (LOBYTE(v86) = 0,
        v87 = 0,
        JSC::isArrayBufferViewOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, (WTF *)&v86)))
  {
    *a3 = 5;
    return 1;
  }
  JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)a2);
  if ((*(_BYTE *)(v85 + 6) & 3) != 0)
  {
    v13 = *(_QWORD *)(v85 + 8);
    v14 = *(_QWORD *)(a1 + 216);
    v15 = *(unsigned int *)(v14 + 8);
    v16 = *(unsigned int *)(v14 + 12);
    v17 = v16 + 8;
    if (v16 + 8 > v15)
    {
      v45 = v15 + (v15 >> 2);
      if (v45 >= 0x10)
        v46 = v45 + 1;
      else
        v46 = 16;
      if (v46 <= v17)
        v47 = v16 + 8;
      else
        v47 = v46;
      if (HIDWORD(v47))
      {
        __break(0xC471u);
        JUMPOUT(0x1956ED220);
      }
      v48 = *(void **)v14;
      v49 = (void *)WTF::fastMalloc((WTF *)v47);
      *(_DWORD *)(v14 + 8) = v47;
      *(_QWORD *)v14 = v49;
      memcpy(v49, v48, v16);
      if (v48)
      {
        if (*(void **)v14 == v48)
        {
          *(_QWORD *)v14 = 0;
          *(_DWORD *)(v14 + 8) = 0;
        }
        WTF::fastFree((WTF *)v48, v50);
      }
    }
    v18 = *(unsigned int *)(v14 + 12);
    if (v17 < v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1956ED208);
    }
    *(_QWORD *)(*(_QWORD *)v14 + v18) = v13;
    *(_DWORD *)(v14 + 12) = v17;
    if ((*(_BYTE *)(v85 + 6) & 4) != 0)
      v19 = -1;
    else
      v19 = *(_QWORD *)(v85 + 16);
    v20 = *(_QWORD *)(a1 + 216);
    v21 = *(unsigned int *)(v20 + 8);
    v22 = *(unsigned int *)(v20 + 12);
    v23 = v22 + 8;
    if (v22 + 8 > v21)
    {
      v51 = v21 + (v21 >> 2);
      if (v51 >= 0x10)
        v52 = v51 + 1;
      else
        v52 = 16;
      if (v52 <= v23)
        v53 = v22 + 8;
      else
        v53 = v52;
      if (HIDWORD(v53))
      {
        __break(0xC471u);
        JUMPOUT(0x1956ED228);
      }
      v54 = *(void **)v20;
      v55 = (void *)WTF::fastMalloc((WTF *)v53);
      *(_DWORD *)(v20 + 8) = v53;
      *(_QWORD *)v20 = v55;
      memcpy(v55, v54, v22);
      if (v54)
      {
        if (*(void **)v20 == v54)
        {
          *(_QWORD *)v20 = 0;
          *(_DWORD *)(v20 + 8) = 0;
        }
        WTF::fastFree((WTF *)v54, v56);
      }
    }
    v24 = *(unsigned int *)(v20 + 12);
    if (v23 < v24)
    {
LABEL_142:
      __break(0xC471u);
      JUMPOUT(0x1956ECCECLL);
    }
    goto LABEL_36;
  }
  v25 = *(_QWORD *)(v85 + 32);
  if (v25
    && (v26 = *(_QWORD *)(v25 + 16)) != 0
    && ((v27 = *(_QWORD *)(v9 + 56)) == 0 || !*(_BYTE *)(v9 + 34) && *MEMORY[0x1E0CC10F0] || (v26 & 0x3FFFFFFFFLL) + v27))
  {
    v28 = *(_QWORD *)(v85 + 8);
  }
  else
  {
    v28 = 0;
  }
  v29 = *(_QWORD *)(a1 + 216);
  v30 = *(unsigned int *)(v29 + 8);
  v31 = *(unsigned int *)(v29 + 12);
  v32 = v31 + 8;
  if (v31 + 8 > v30)
  {
    v57 = v30 + (v30 >> 2);
    if (v57 >= 0x10)
      v58 = v57 + 1;
    else
      v58 = 16;
    if (v58 <= v32)
      v59 = v31 + 8;
    else
      v59 = v58;
    if (HIDWORD(v59))
    {
      __break(0xC471u);
      JUMPOUT(0x1956ED230);
    }
    v60 = *(void **)v29;
    v61 = (void *)WTF::fastMalloc((WTF *)v59);
    *(_DWORD *)(v29 + 8) = v59;
    *(_QWORD *)v29 = v61;
    memcpy(v61, v60, v31);
    if (v60)
    {
      if (*(void **)v29 == v60)
      {
        *(_QWORD *)v29 = 0;
        *(_DWORD *)(v29 + 8) = 0;
      }
      WTF::fastFree((WTF *)v60, v62);
    }
  }
  v33 = *(unsigned int *)(v29 + 12);
  if (v32 < v33)
  {
    __break(0xC471u);
    JUMPOUT(0x1956ED210);
  }
  *(_QWORD *)(*(_QWORD *)v29 + v33) = v28;
  *(_DWORD *)(v29 + 12) = v32;
  v34 = *(_QWORD *)(v85 + 32);
  if (!v34
    || (v35 = *(_QWORD *)(v34 + 16)) == 0
    || (v36 = *(_QWORD *)(v9 + 56)) != 0
    && (*(_BYTE *)(v9 + 34) || !*MEMORY[0x1E0CC10F0])
    && !((v35 & 0x3FFFFFFFFLL) + v36))
  {
LABEL_102:
    v19 = 0;
    goto LABEL_34;
  }
  v37 = *(_BYTE *)(v85 + 6);
  if ((v37 & 3) != 0)
  {
    if (*(_BYTE *)(v34 + 64) && (v84 = *(_QWORD *)(v34 + 32)) != 0)
    {
      v69 = atomic_load((unint64_t *)(v84 + 32));
      v37 = *(_BYTE *)(v85 + 6);
    }
    else
    {
      v69 = *(_QWORD *)(v34 + 48);
    }
    v70 = *(_QWORD *)(v85 + 8);
    if ((v37 & 4) == 0)
    {
      v71 = *(_QWORD *)(v85 + 16) + v70 <= v69 && v69 >= v70;
      if (v71)
        v19 = 0;
      else
        v19 = *(_QWORD *)(v85 + 16);
      goto LABEL_34;
    }
    v71 = v69 >= v70;
    v72 = v69 - v70;
    if (!v71)
    {
      if ((*(_BYTE *)(v85 + 4) - 4) > 7u)
        LOBYTE(v73) = 0;
      else
        v73 = qword_1968DFB88[(char)(*(_BYTE *)(v85 + 4) - 4)];
      v19 = (-1 << v73) & v72;
      goto LABEL_34;
    }
    goto LABEL_102;
  }
  v19 = *(_QWORD *)(v85 + 16);
LABEL_34:
  v20 = *(_QWORD *)(a1 + 216);
  v38 = *(unsigned int *)(v20 + 8);
  v39 = *(unsigned int *)(v20 + 12);
  v23 = v39 + 8;
  if (v39 + 8 > v38)
  {
    v63 = v38 + (v38 >> 2);
    if (v63 >= 0x10)
      v64 = v63 + 1;
    else
      v64 = 16;
    if (v64 <= v23)
      v65 = v39 + 8;
    else
      v65 = v64;
    if (HIDWORD(v65))
      goto LABEL_142;
    v66 = *(void **)v20;
    v67 = (void *)WTF::fastMalloc((WTF *)v65);
    *(_DWORD *)(v20 + 8) = v65;
    *(_QWORD *)v20 = v67;
    memcpy(v67, v66, v39);
    if (v66)
    {
      if (*(void **)v20 == v66)
      {
        *(_QWORD *)v20 = 0;
        *(_DWORD *)(v20 + 8) = 0;
      }
      WTF::fastFree((WTF *)v66, v68);
    }
  }
  v24 = *(unsigned int *)(v20 + 12);
  if (v23 < v24)
  {
    __break(0xC471u);
    JUMPOUT(0x1956ED218);
  }
LABEL_36:
  *(_QWORD *)(*(_QWORD *)v20 + v24) = v19;
  *(_DWORD *)(v20 + 12) = v23;
  v40 = (_DWORD *)v85;
  v41 = *(WebCore::JSDOMGlobalObject **)(v85 + 32);
  if (!v41
    || (v42 = *((_QWORD *)v41 + 2)) == 0
    || (v43 = *(_QWORD *)(v9 + 56)) != 0
    && (*(_BYTE *)(v9 + 34) || !*MEMORY[0x1E0CC10F0])
    && !((v42 & 0x3FFFFFFFFLL) + v43))
  {
    *a3 = 3;
    v44 = 1;
LABEL_124:
    if (*v40 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v40;
    return v44;
  }
  *(_DWORD *)v41 += 2;
  v74 = *(WebCore **)a1;
  v75 = *(unsigned int *)(16 * (**(_DWORD **)a1 & 0xFFFFFFFE) + 0x4C);
  v76 = *(_DWORD *)(16 * (**(_DWORD **)a1 & 0xFFFFFFFE) + 0x4C) != 0;
  if ((_DWORD)v75)
  {
    v77 = 16 * v75;
    if ((char **)v77 != &WebCore::JSDOMGlobalObject::s_info)
    {
      do
      {
        v77 = *(_QWORD *)(v77 + 16);
        v76 = v77 != 0;
      }
      while ((char **)v77 != &WebCore::JSDOMGlobalObject::s_info && v77 != 0);
    }
  }
  if (v76)
  {
    v79 = (JSC::Structure *)WebCore::toJS(v74, *(_QWORD *)a1, v41, v12);
  }
  else
  {
    v80 = *((_QWORD *)v41 + 10);
    if (!v80 || (*(_BYTE *)(v80 + 8) & 3) != 0 || (v79 = *(JSC::Structure **)v80) == 0)
    {
      if (*((_QWORD *)v41 + 4))
        v81 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
      else
        v81 = 0;
      JSC::JSGlobalObject::arrayBufferStructure((uint64_t)v74, v81 != 0);
      *(_DWORD *)v41 += 2;
      v86 = v41;
      v79 = (JSC::Structure *)JSC::JSArrayBuffer::create();
      v82 = v86;
      v86 = 0;
      if (v82)
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v82);
    }
  }
  v44 = WebCore::CloneSerializer::dumpIfTerminal((WebCore::CloneSerializer *)a1, v79);
  WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v41);
  v40 = (_DWORD *)v85;
  if (v85)
    goto LABEL_124;
  return v44;
}

uint64_t WebCore::CloneSerializer::addToObjectPool<(WebCore::SerializationTag)22,(WebCore::SerializationTag)255,(WebCore::SerializationTag)255>(uint64_t a1, objc_class *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  JSValue v9;
  _BYTE v10[28];
  unsigned __int32 v11;
  objc_class *v12;

  v12 = a2;
  v4 = *(_QWORD *)(a1 + 232);
  if (v4)
    LODWORD(v4) = *(_DWORD *)(v4 - 12);
  v11 = v4;
  WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>((uint64_t)v10, (uint64_t *)(a1 + 232), (unint64_t *)&v12, &v11);
  v6 = *(unsigned int *)(a1 + 120);
  result = a1 + 120;
  if ((_DWORD)v6 != *(_DWORD *)(a1 + 124)
    && ((v7 = *(_QWORD *)(a1 + 128), v7 != a1 + 144) ? (v8 = v7 == 0) : (v8 = 1), v8))
  {
    *(_QWORD *)(v7 + 8 * v6) = a2;
    *(_DWORD *)result = v6 + 1;
  }
  else
  {
    v9.super.isa = a2;
    result = JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)result, v9);
    if ((_DWORD)result == 1)
    {
      *(_BYTE *)(a1 + 112) = 1;
      goto LABEL_14;
    }
  }
  if (*(_BYTE *)(a1 + 112))
  {
LABEL_14:
    result = 184;
    __break(0xC471u);
  }
  return result;
}

void **WebCore::CloneSerializer::write(WebCore::CloneSerializer *this, const WebCore::CryptoKey *a2)
{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint8x8_t v10;
  __int32 v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  void **result;
  unsigned int v18;
  unsigned int v19;
  char v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  JSC::JSGlobalObject *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  unint64_t v55;
  WTF *v56;
  WTF::StringImpl *v57;
  void *v58;
  void *v59;
  WTF *v60;
  JSC::JSGlobalObject *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  WTF *i;
  WTF::StringImpl *v70;
  int v71;
  int v72;

  v4 = *((_QWORD *)this + 27);
  v5 = *(unsigned int *)(v4 + 8);
  v6 = *(unsigned int *)(v4 + 12);
  v7 = v6 + 4;
  if (v6 + 4 > v5)
  {
    v37 = v5 + (v5 >> 2);
    if (v37 >= 0x10)
      v38 = v37 + 1;
    else
      v38 = 16;
    if (v38 <= v7)
      v39 = v6 + 4;
    else
      v39 = v38;
    if (HIDWORD(v39))
    {
      __break(0xC471u);
      JUMPOUT(0x1956EDD88);
    }
    v40 = *(void **)v4;
    v41 = (void *)WTF::fastMalloc((WTF *)v39);
    *(_DWORD *)(v4 + 8) = v39;
    *(_QWORD *)v4 = v41;
    memcpy(v41, v40, v6);
    if (v40)
    {
      if (*(void **)v4 == v40)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v40, v42);
    }
  }
  v8 = *(unsigned int *)(v4 + 12);
  if (v7 < v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1956EDD58);
  }
  *(_DWORD *)(*(_QWORD *)v4 + v8) = 1;
  *(_DWORD *)(v4 + 12) = v7;
  WebCore::CloneSerializer::write(*((char **)this + 27), *((_BYTE *)a2 + 14));
  v9 = *((_DWORD *)a2 + 4);
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v9)
    v11 = v10.i32[0];
  else
    v11 = 0;
  v12 = *((_QWORD *)this + 27);
  v13 = *(unsigned int *)(v12 + 8);
  v14 = *(unsigned int *)(v12 + 12);
  v15 = v14 + 4;
  if (v14 + 4 > v13)
  {
    v43 = v13 + (v13 >> 2);
    if (v43 >= 0x10)
      v44 = v43 + 1;
    else
      v44 = 16;
    if (v44 <= v15)
      v45 = v14 + 4;
    else
      v45 = v44;
    if (HIDWORD(v45))
    {
      __break(0xC471u);
      JUMPOUT(0x1956EDD90);
    }
    v46 = *(void **)v12;
    v47 = (void *)WTF::fastMalloc((WTF *)v45);
    *(_DWORD *)(v12 + 8) = v45;
    *(_QWORD *)v12 = v47;
    memcpy(v47, v46, v14);
    if (v46)
    {
      if (*(void **)v12 == v46)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
      }
      WTF::fastFree((WTF *)v46, v48);
    }
  }
  v16 = *(unsigned int *)(v12 + 12);
  if (v15 < v16)
  {
    __break(0xC471u);
    JUMPOUT(0x1956EDD60);
  }
  *(_DWORD *)(*(_QWORD *)v12 + v16) = v11;
  *(_DWORD *)(v12 + 12) = v15;
  if ((v9 & 1) != 0)
  {
    WebCore::CloneSerializer::write(*((char **)this + 27), 0);
    if ((v9 & 2) == 0)
    {
LABEL_10:
      if ((v9 & 4) == 0)
        goto LABEL_11;
      goto LABEL_24;
    }
  }
  else if ((v9 & 2) == 0)
  {
    goto LABEL_10;
  }
  WebCore::CloneSerializer::write(*((char **)this + 27), 1);
  if ((v9 & 4) == 0)
  {
LABEL_11:
    if ((v9 & 8) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  WebCore::CloneSerializer::write(*((char **)this + 27), 2);
  if ((v9 & 8) == 0)
  {
LABEL_12:
    if ((v9 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  WebCore::CloneSerializer::write(*((char **)this + 27), 3);
  if ((v9 & 0x10) == 0)
  {
LABEL_13:
    if ((v9 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  WebCore::CloneSerializer::write(*((char **)this + 27), 4);
  if ((v9 & 0x20) == 0)
  {
LABEL_14:
    if ((v9 & 0x40) == 0)
      goto LABEL_15;
LABEL_28:
    WebCore::CloneSerializer::write(*((char **)this + 27), 6);
    if ((v9 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_27:
  WebCore::CloneSerializer::write(*((char **)this + 27), 5);
  if ((v9 & 0x40) != 0)
    goto LABEL_28;
LABEL_15:
  if ((v9 & 0x80) != 0)
LABEL_16:
    WebCore::CloneSerializer::write(*((char **)this + 27), 7);
LABEL_17:
  result = (void **)(*(uint64_t (**)(const WebCore::CryptoKey *))(*(_QWORD *)a2 + 24))(a2);
  switch((int)result)
  {
    case 0:
      WebCore::CloneSerializer::write(*((char **)this + 27), 1);
      v18 = *((unsigned __int8 *)a2 + 12) - 1;
      if (v18 <= 0x14)
        WebCore::CloneSerializer::write(*((char **)this + 27), byte_1968DFB70[(char)v18]);
      if ((*(unsigned int (**)(const WebCore::CryptoKey *))(*(_QWORD *)a2 + 24))(a2))
      {
        __break(0xC471u);
        JUMPOUT(0x1956ED46CLL);
      }
      return WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)a2 + 24);
    case 1:
      WebCore::CloneSerializer::write(*((char **)this + 27), 3);
      v35 = *((unsigned __int8 *)a2 + 12) - 1;
      if (v35 <= 0x14)
        WebCore::CloneSerializer::write(*((char **)this + 27), byte_1968DFB70[(char)v35]);
      if ((*(unsigned int (**)(const WebCore::CryptoKey *))(*(_QWORD *)a2 + 24))(a2) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1956EDC90);
      }
      if (*((_DWORD *)a2 + 8) > 2u)
      {
        v49 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v49 += 2;
        v70 = v49;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      WebCore::CloneSerializer::write((WTF::StringImpl **)this, v70);
      result = (void **)v70;
      v70 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (void **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v50);
        else
          *(_DWORD *)result -= 2;
      }
      if (*((_BYTE *)a2 + 13) != 1)
      {
        if (*((_BYTE *)a2 + 13))
          return result;
        WebCore::CloneSerializer::write(*((char **)this + 27), 0);
        if ((*(unsigned int (**)(const WebCore::CryptoKey *))(*(_QWORD *)a2 + 24))(a2) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1956EDD10);
        }
        v52 = WebCore::executionContext(*(WebCore **)this, v51);
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 136))(v52);
        if (*((_BYTE *)a2 + 13))
          goto LABEL_144;
        v53 = *((int *)a2 + 8);
        v54 = 0.0;
        if (v53 <= 2)
          v54 = dbl_1968DFB58[v53];
        v55 = vcvtpd_u64_f64(v54);
        if ((v55 >> 31))
        {
          __break(0xC471u);
          JUMPOUT(0x1956EDD98);
        }
        v56 = (WTF *)((2 * v55) | 1);
        v57 = (WTF::StringImpl *)WTF::fastMalloc(v56);
        v70 = v56;
        if (CCECCryptorExportKey() || v70 != v56)
        {
          for (i = v57; ; i = a2)
          {
            WTF::fastFree(i, v58);
            do
            {
LABEL_144:
              std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
              ;
            }
            while (!a2);
            v70 = 0;
            v71 = 0;
          }
        }
        v70 = v57;
        v71 = (int)v56;
        v72 = (int)v56;
        WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)&v70);
        v60 = v57;
        return (void **)WTF::fastFree(v60, v59);
      }
      WebCore::CloneSerializer::write(*((char **)this + 27), 1);
      if ((*(unsigned int (**)(const WebCore::CryptoKey *))(*(_QWORD *)a2 + 24))(a2) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1956EDD30);
      }
      v62 = WebCore::executionContext(*(WebCore **)this, v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 136))(v62);
      if (*((_BYTE *)a2 + 13) != 1)
        goto LABEL_144;
      WebCore::CryptoKeyEC::platformExportPkcs8((uint64_t)a2, (uint64_t)&v70);
      a2 = v70;
      if (!v72)
        goto LABEL_145;
      result = WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)&v70);
      if (a2)
      {
        v60 = a2;
        return (void **)WTF::fastFree(v60, v59);
      }
      return result;
    case 2:
      WebCore::CloneSerializer::write(*((char **)this + 27), 0);
      if ((*(unsigned int (**)(const WebCore::CryptoKey *))(*(_QWORD *)a2 + 24))(a2) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1956EDC50);
      }
      WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)a2 + 24);
      result = (void **)(*(uint64_t (**)(const WebCore::CryptoKey *))(*(_QWORD *)a2 + 24))(a2);
      if ((_DWORD)result != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1956EDCD0);
      }
      v31 = *((unsigned __int8 *)a2 + 20) - 1;
      if (v31 <= 0x14)
        return (void **)WebCore::CloneSerializer::write(*((char **)this + 27), byte_1968DFB70[(char)v31]);
      return result;
    case 3:
      WebCore::CloneSerializer::write(*((char **)this + 27), 5);
      v32 = *((unsigned __int8 *)a2 + 12) - 1;
      if (v32 <= 0x14)
        WebCore::CloneSerializer::write(*((char **)this + 27), byte_1968DFB70[(char)v32]);
      if ((*(unsigned int (**)(const WebCore::CryptoKey *))(*(_QWORD *)a2 + 24))(a2) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1956EDC70);
      }
      v33 = *((_DWORD *)a2 + 5);
      if (v33)
      {
        if (v33 != 1)
          goto LABEL_96;
        v34 = 1;
      }
      else
      {
        v34 = 0;
      }
      WebCore::CloneSerializer::write(*((char **)this + 27), v34);
LABEL_96:
      if ((*(unsigned int (**)(const WebCore::CryptoKey *))(*(_QWORD *)a2 + 24))(a2) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1956EDCF0);
      }
      return WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)a2 + 24);
    case 4:
      WebCore::CloneSerializer::write(*((char **)this + 27), 2);
      v19 = *((unsigned __int8 *)a2 + 12) - 1;
      if (v19 <= 0x14)
        WebCore::CloneSerializer::write(*((char **)this + 27), byte_1968DFB70[(char)v19]);
      if ((*(unsigned int (**)(const WebCore::CryptoKey *))(*(_QWORD *)a2 + 24))(a2) != 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1956EDC30);
      }
      v20 = *((_BYTE *)a2 + 32);
      if (!v20)
        goto LABEL_36;
      v21 = *((unsigned __int8 *)a2 + 33);
      WebCore::CloneSerializer::write(*((char **)this + 27), v20);
      if ((v21 - 1) <= 0x14)
      {
        v20 = byte_1968DFB70[(char)(v21 - 1)];
LABEL_36:
        WebCore::CloneSerializer::write(*((char **)this + 27), v20);
      }
      if ((*(unsigned int (**)(const WebCore::CryptoKey *))(*(_QWORD *)a2 + 24))(a2) != 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1956EDCB0);
      }
      WebCore::CryptoKeyRSA::exportData(a2, (uint64_t *)&v70);
      v22 = v70;
      WebCore::CloneSerializer::write(*((char **)this + 27), *((_BYTE *)v70 + 8));
      WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)v22 + 16);
      WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)v22 + 32);
      if (*((_BYTE *)v22 + 8))
      {
        WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)v22 + 48);
        if (*((_BYTE *)v22 + 64))
          v23 = (*((_DWORD *)v22 + 45) + 2);
        else
          v23 = 0;
        v24 = *((_QWORD *)this + 27);
        v25 = *(unsigned int *)(v24 + 8);
        v26 = *(unsigned int *)(v24 + 12);
        v27 = v26 + 4;
        if (v26 + 4 > v25)
        {
          v63 = v25 + (v25 >> 2);
          if (v63 >= 0x10)
            v64 = v63 + 1;
          else
            v64 = 16;
          if (v64 <= v27)
            v65 = v26 + 4;
          else
            v65 = v64;
          if (HIDWORD(v65))
          {
            __break(0xC471u);
            JUMPOUT(0x1956EDDA0);
          }
          v66 = *(void **)v24;
          v67 = (void *)WTF::fastMalloc((WTF *)v65);
          *(_DWORD *)(v24 + 8) = v65;
          *(_QWORD *)v24 = v67;
          memcpy(v67, v66, v26);
          if (v66)
          {
            if (*(void **)v24 == v66)
            {
              *(_QWORD *)v24 = 0;
              *(_DWORD *)(v24 + 8) = 0;
            }
            WTF::fastFree((WTF *)v66, v68);
          }
        }
        v28 = *(unsigned int *)(v24 + 12);
        if (v27 < v28)
        {
          __break(0xC471u);
          JUMPOUT(0x1956EDD80);
        }
        *(_DWORD *)(*(_QWORD *)v24 + v28) = v23;
        *(_DWORD *)(v24 + 12) = v27;
        if ((_DWORD)v23)
        {
          WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)v22 + 72);
          WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)v22 + 88);
          WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)v22 + 120);
          WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)v22 + 136);
          WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)v22 + 152);
          if (v23 >= 3)
          {
            v29 = 2;
            v30 = 128;
            do
            {
              if (v29 >= *((unsigned int *)v22 + 45))
              {
                __break(0xC471u);
                JUMPOUT(0x1956EDD68);
              }
              WebCore::CloneSerializer::write((uint64_t)this, *((_QWORD *)v22 + 21) + v30 - 32);
              if (v29 >= *((unsigned int *)v22 + 45))
              {
                __break(0xC471u);
                JUMPOUT(0x1956EDD70);
              }
              WebCore::CloneSerializer::write((uint64_t)this, *((_QWORD *)v22 + 21) + v30 - 16);
              if (v29 >= *((unsigned int *)v22 + 45))
              {
                __break(0xC471u);
                JUMPOUT(0x1956EDD78);
              }
              WebCore::CloneSerializer::write((uint64_t)this, *((_QWORD *)v22 + 21) + v30);
              ++v29;
              v30 += 48;
            }
            while (v23 != v29);
          }
        }
      }
      result = (void **)v70;
      v70 = 0;
      if (result)
        return (void **)(*((uint64_t (**)(void **))*result + 1))(result);
      return result;
    case 5:
      WebCore::CloneSerializer::write(*((char **)this + 27), 4);
      v36 = *((unsigned __int8 *)a2 + 12) - 1;
      if (v36 <= 0x14)
        WebCore::CloneSerializer::write(*((char **)this + 27), byte_1968DFB70[(char)v36]);
      if ((*(unsigned int (**)(const WebCore::CryptoKey *))(*(_QWORD *)a2 + 24))(a2) != 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1956ED8A8);
      }
      return WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)a2 + 24);
    default:
      return result;
  }
}

void **WebCore::CloneSerializer::write(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;

  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_QWORD *)(a1 + 216);
  v6 = *(unsigned int *)(v5 + 8);
  v7 = *(unsigned int *)(v5 + 12);
  v8 = v7 + 4;
  if (v7 + 4 > v6)
  {
    v11 = v6 + (v6 >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 <= v8)
      v13 = v7 + 4;
    else
      v13 = v12;
    if (HIDWORD(v13))
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x1956EDE98);
    }
    v14 = *(void **)v5;
    v15 = (void *)WTF::fastMalloc((WTF *)v13);
    *(_DWORD *)(v5 + 8) = v13;
    *(_QWORD *)v5 = v15;
    memcpy(v15, v14, v7);
    if (v14)
    {
      if (*(void **)v5 == v14)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree((WTF *)v14, v16);
    }
  }
  v9 = *(unsigned int *)(v5 + 12);
  if (v8 < v9)
    goto LABEL_15;
  *(_DWORD *)(*(_QWORD *)v5 + v9) = v4;
  *(_DWORD *)(v5 + 12) = v8;
  return WebCore::writeLittleEndian<unsigned char>(*(void ***)(a1 + 216), *(void **)a2, *(unsigned int *)(a2 + 12));
}

uint64_t WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  JSC::ArrayBufferContents *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(JSC::ArrayBufferContents **)a1;
    v7 = 56 * v3;
    do
    {
      JSC::ArrayBufferContents::~ArrayBufferContents(v6);
      v6 = (JSC::ArrayBufferContents *)(v8 + 56);
      v7 -= 56;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebCore::agentClusterIDFromGlobalObject(WebCore *this, JSC::JSGlobalObject *a2)
{
  uint64_t v2;
  BOOL v3;
  char **v4;
  BOOL v5;

  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSDOMGlobalObject::s_info && v4 != 0);
  }
  if (v3)
    WebCore::JSDOMGlobalObject::agentClusterID(a2, this);
  else
    WebCore::JSDOMGlobalObject::defaultAgentClusterID(this);
}

uint64_t WebCore::CloneSerializer::dumpDOMPoint(WebCore::CloneSerializer *this, JSC::JSObject *a2)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  WTF *v12;
  char *v13;
  double *v14;
  char v16;
  char v17;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMPoint::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMPoint::s_info && v6 != 0);
  }
  v9 = *((_QWORD *)this + 27);
  if (v5)
  {
    v10 = 37;
    v16 = 37;
    v11 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v9 + 8))
    {
      v12 = (WTF *)(v11 + 1);
      v13 = &v16;
LABEL_17:
      *(_BYTE *)(*(_QWORD *)v9 + *(unsigned int *)(v9 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v9, v12, (unint64_t)v13);
      goto LABEL_15;
    }
  }
  else
  {
    v10 = 36;
    v17 = 36;
    v11 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v9 + 8))
    {
      v12 = (WTF *)(v11 + 1);
      v13 = &v17;
      goto LABEL_17;
    }
  }
  *(_BYTE *)(*(_QWORD *)v9 + v11) = v10;
LABEL_15:
  ++*(_DWORD *)(v9 + 12);
  v14 = (double *)*((_QWORD *)a2 + 3);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v14[2]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v14[3]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v14[4]);
  return WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v14[5]);
}

uint64_t WebCore::CloneSerializer::dumpDOMRect(WebCore::CloneSerializer *this, JSC::JSObject *a2)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  WTF *v12;
  char *v13;
  double *v14;
  char v16;
  char v17;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMRect::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMRect::s_info && v6 != 0);
  }
  v9 = *((_QWORD *)this + 27);
  if (v5)
  {
    v10 = 39;
    v16 = 39;
    v11 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v9 + 8))
    {
      v12 = (WTF *)(v11 + 1);
      v13 = &v16;
LABEL_17:
      *(_BYTE *)(*(_QWORD *)v9 + *(unsigned int *)(v9 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v9, v12, (unint64_t)v13);
      goto LABEL_15;
    }
  }
  else
  {
    v10 = 38;
    v17 = 38;
    v11 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v9 + 8))
    {
      v12 = (WTF *)(v11 + 1);
      v13 = &v17;
      goto LABEL_17;
    }
  }
  *(_BYTE *)(*(_QWORD *)v9 + v11) = v10;
LABEL_15:
  ++*(_DWORD *)(v9 + 12);
  v14 = (double *)*((_QWORD *)a2 + 3);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v14[2]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v14[3]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v14[4]);
  return WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v14[5]);
}

uint64_t WebCore::CloneSerializer::dumpDOMMatrix(WebCore::CloneSerializer *this, JSC::JSObject *a2)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  WTF *v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  double *v17;
  char v19;
  char v20;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMMatrix::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMMatrix::s_info && v6 != 0);
  }
  v9 = *((_QWORD *)this + 27);
  if (!v5)
  {
    v10 = 40;
    v20 = 40;
    v11 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v9 + 8))
    {
      v12 = (WTF *)(v11 + 1);
      v13 = &v20;
      goto LABEL_20;
    }
LABEL_14:
    *(_BYTE *)(*(_QWORD *)v9 + v11) = v10;
    goto LABEL_15;
  }
  v10 = 41;
  v19 = 41;
  v11 = *(unsigned int *)(v9 + 12);
  if ((_DWORD)v11 != *(_DWORD *)(v9 + 8))
    goto LABEL_14;
  v12 = (WTF *)(v11 + 1);
  v13 = &v19;
LABEL_20:
  *(_BYTE *)(*(_QWORD *)v9 + *(unsigned int *)(v9 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v9, v12, (unint64_t)v13);
LABEL_15:
  ++*(_DWORD *)(v9 + 12);
  v14 = *((_QWORD *)a2 + 3);
  v15 = *(unsigned __int8 *)(v14 + 144);
  WebCore::CloneSerializer::write(*((char **)this + 27), *(_BYTE *)(v14 + 144));
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 16));
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 24));
  v16 = *((_QWORD *)this + 27);
  if (v15)
  {
    WebCore::CloneSerializer::write(v16, *(double *)(v14 + 48));
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 56));
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 112));
    v17 = (double *)(v14 + 120);
  }
  else
  {
    WebCore::CloneSerializer::write(v16, *(double *)(v14 + 32));
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 40));
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 48));
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 56));
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 64));
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 72));
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 80));
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 88));
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 96));
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 104));
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 112));
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 120));
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v14 + 128));
    v17 = (double *)(v14 + 136);
  }
  return WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *v17);
}

uint64_t WebCore::CloneSerializer::dumpDOMQuad(WebCore::CloneSerializer *this, JSC::JSObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  char v12;

  v4 = *((_QWORD *)this + 27);
  v12 = 42;
  v5 = *(unsigned int *)(v4 + 12);
  if ((_DWORD)v5 == *(_DWORD *)(v4 + 8))
    *(_BYTE *)(*(_QWORD *)v4 + *(unsigned int *)(v4 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v4, (WTF *)(v5 + 1), (unint64_t)&v12);
  else
    *(_BYTE *)(*(_QWORD *)v4 + v5) = 42;
  ++*(_DWORD *)(v4 + 12);
  v6 = (_QWORD *)*((_QWORD *)a2 + 3);
  v7 = (double *)v6[2];
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v7[2]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v7[3]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v7[4]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v7[5]);
  v8 = (double *)v6[3];
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v8[2]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v8[3]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v8[4]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v8[5]);
  v9 = (double *)v6[4];
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v9[2]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v9[3]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v9[4]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v9[5]);
  v10 = (double *)v6[5];
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v10[2]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v10[3]);
  WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v10[4]);
  return WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v10[5]);
}

void WebCore::CloneSerializer::dumpImageBitmap(uint64_t a1, uint64_t a2, int *a3, __n128 a4)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const void *v17;
  float v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  size_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  unint64_t v57;
  char *v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  size_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  size_t v70;
  uint64_t v71;
  size_t v72;
  size_t v73;
  unint64_t v74;
  unint64_t v75;
  CFTypeRef v76;
  const __CFString *Name;
  const __CFData *ExternalRepresentation;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void *v82;
  void *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  void *v87;
  void *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  void *v98;
  void *v99;
  void *v100;
  const __CFData *v101;
  const __CFData *Data;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  void *__src;
  void *__srca;
  _QWORD v109[2];
  uint64_t v110;
  __int16 v111;
  CFTypeRef cf;
  char v113;
  void (**v114)(WebCore::ImageBufferAllocator *__hidden);

  v6 = *(_QWORD *)(a1 + 256);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v6 + 16 * v11);
    if (v12 != a2)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v6 + 16 * v11);
        ++v13;
        if (v12 == a2)
          goto LABEL_8;
      }
      v11 = *(unsigned int *)(v6 - 4);
    }
LABEL_8:
    if (v11 != *(_DWORD *)(v6 - 4))
    {
      v29 = *(_QWORD *)(a1 + 216);
      LOBYTE(v111) = 43;
      v30 = *(unsigned int *)(v29 + 12);
      if ((_DWORD)v30 == *(_DWORD *)(v29 + 8))
        *(_BYTE *)(*(_QWORD *)v29 + *(unsigned int *)(v29 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v29, (WTF *)(v30 + 1), (unint64_t)&v111);
      else
        *(_BYTE *)(*(_QWORD *)v29 + v30) = 43;
      ++*(_DWORD *)(v29 + 12);
      v31 = *(_DWORD *)(v6 + 16 * v11 + 8);
      v32 = *(_QWORD *)(a1 + 216);
      v33 = *(unsigned int *)(v32 + 8);
      v34 = *(unsigned int *)(v32 + 12);
      v35 = v34 + 4;
      if (v34 + 4 > v33)
      {
        v37 = v33 + (v33 >> 2);
        if (v37 >= 0x10)
          v38 = v37 + 1;
        else
          v38 = 16;
        if (v38 <= v35)
          v39 = v34 + 4;
        else
          v39 = v38;
        if (HIDWORD(v39))
        {
          __break(0xC471u);
          JUMPOUT(0x1956EEDC4);
        }
        v40 = *(void **)v32;
        v41 = (void *)WTF::fastMalloc((WTF *)v39);
        *(_DWORD *)(v32 + 8) = v39;
        *(_QWORD *)v32 = v41;
        memcpy(v41, v40, v34);
        if (v40)
        {
          if (*(void **)v32 == v40)
          {
            *(_QWORD *)v32 = 0;
            *(_DWORD *)(v32 + 8) = 0;
          }
          WTF::fastFree((WTF *)v40, v42);
        }
      }
      v36 = *(unsigned int *)(v32 + 12);
      if (v35 >= v36)
      {
        *(_DWORD *)(*(_QWORD *)v32 + v36) = v31;
        *(_DWORD *)(v32 + 12) = v35;
        return;
      }
      __break(0xC471u);
      goto LABEL_177;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(v14 + 32) & 1) == 0)
  {
    v15 = 5;
LABEL_41:
    *a3 = v15;
    return;
  }
  v16 = *(_QWORD *)(v14 + 16);
  if (!v16)
  {
    v15 = 3;
    goto LABEL_41;
  }
  v111 = 0;
  v17 = *(const void **)(v16 + 32);
  cf = v17;
  if (v17)
    CFRetain(v17);
  v18 = *(float *)(v16 + 16);
  v19 = *(float *)(v16 + 20);
  a4.n128_u64[0] = 0x4F0000004F000000;
  if (v18 > -2147500000.0)
    v20 = (int)v18;
  else
    v20 = 0x80000000;
  if (v18 < 2147500000.0)
    v21 = v20;
  else
    v21 = 0x7FFFFFFFLL;
  if (v19 > -2147500000.0)
    v22 = (int)v19;
  else
    v22 = 0x80000000;
  if (v19 < 2147500000.0)
    v23 = v22;
  else
    v23 = 0x7FFFFFFFLL;
  v109[0] = 0;
  v109[1] = v21 | (v23 << 32);
  v114 = off_1E340D360;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __int16 *, _QWORD *, void (***)(WebCore::ImageBufferAllocator *__hidden), __n128))(*(_QWORD *)v16 + 88))(&v110, v16, &v111, v109, &v114, a4);
  if (v110)
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 16))(v110);
    v25 = v110;
    v110 = 0;
    if ((v24 & 1) != 0)
    {
      if (v25)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 32);
        if (!v26
          || (v27 = *(_QWORD *)(v26 + 16)) == 0
          || (v28 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) != 0
          && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
          && !((v27 & 0x3FFFFFFFFLL) + v28))
        {
          *a3 = 3;
          goto LABEL_95;
        }
        *(_DWORD *)v26 += 2;
        v43 = *(_BYTE *)(v14 + 32) & 6 | 1;
        v44 = *(_QWORD *)(a1 + 216);
        LOBYTE(v109[0]) = 45;
        v45 = *(unsigned int *)(v44 + 12);
        if ((_DWORD)v45 == *(_DWORD *)(v44 + 8))
          *(_BYTE *)(*(_QWORD *)v44 + *(unsigned int *)(v44 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v44, (WTF *)(v45 + 1), (unint64_t)v109);
        else
          *(_BYTE *)(*(_QWORD *)v44 + v45) = 45;
        ++*(_DWORD *)(v44 + 12);
        WebCore::CloneSerializer::write(*(char **)(a1 + 216), v43);
        v46 = *(_QWORD *)(a1 + 216);
        v47 = *(unsigned int *)(v46 + 8);
        v48 = *(unsigned int *)(v46 + 12);
        v49 = v48 + 4;
        if (v48 + 4 > v47)
        {
          v79 = v47 + (v47 >> 2);
          if (v79 >= 0x10)
            v80 = v79 + 1;
          else
            v80 = 16;
          if (v80 <= v49)
            v81 = v48 + 4;
          else
            v81 = v80;
          if (HIDWORD(v81))
          {
            __break(0xC471u);
            JUMPOUT(0x1956EEDCCLL);
          }
          v106 = v81;
          __src = *(void **)v46;
          v82 = (void *)WTF::fastMalloc((WTF *)v81);
          *(_DWORD *)(v46 + 8) = v106;
          *(_QWORD *)v46 = v82;
          memcpy(v82, __src, v48);
          if (__src)
          {
            if (*(void **)v46 == __src)
            {
              *(_QWORD *)v46 = 0;
              *(_DWORD *)(v46 + 8) = 0;
            }
            WTF::fastFree((WTF *)__src, v83);
          }
        }
        v50 = *(unsigned int *)(v46 + 12);
        if (v49 < v50)
        {
          __break(0xC471u);
          JUMPOUT(0x1956EED90);
        }
        *(_DWORD *)(*(_QWORD *)v46 + v50) = v21;
        *(_DWORD *)(v46 + 12) = v49;
        v51 = *(_QWORD *)(a1 + 216);
        v52 = *(unsigned int *)(v51 + 8);
        v53 = *(unsigned int *)(v51 + 12);
        v54 = v53 + 4;
        if (v53 + 4 > v52)
        {
          v84 = v52 + (v52 >> 2);
          if (v84 >= 0x10)
            v85 = v84 + 1;
          else
            v85 = 16;
          if (v85 <= v54)
            v86 = v53 + 4;
          else
            v86 = v85;
          if (HIDWORD(v86))
          {
            __break(0xC471u);
            JUMPOUT(0x1956EEDD4);
          }
          __srca = *(void **)v51;
          v87 = (void *)WTF::fastMalloc((WTF *)v86);
          *(_DWORD *)(v51 + 8) = v86;
          *(_QWORD *)v51 = v87;
          memcpy(v87, __srca, v53);
          if (__srca)
          {
            if (*(void **)v51 == __srca)
            {
              *(_QWORD *)v51 = 0;
              *(_DWORD *)(v51 + 8) = 0;
            }
            WTF::fastFree((WTF *)__srca, v88);
          }
        }
        v55 = *(unsigned int *)(v51 + 12);
        if (v54 < v55)
        {
          __break(0xC471u);
          JUMPOUT(0x1956EED98);
        }
        *(_DWORD *)(*(_QWORD *)v51 + v55) = v23;
        *(_DWORD *)(v51 + 12) = v54;
        WebCore::CloneSerializer::write(*(_QWORD *)(a1 + 216), *(float *)(v16 + 24));
        v56 = *(void **)(v16 + 32);
        if (v56)
          CFRetain(v56);
        v57 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
        if (v57 != -1)
        {
          v109[0] = &v113;
          v114 = (void (**)(WebCore::ImageBufferAllocator *__hidden))v109;
          std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v114, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
        }
        if (CGColorSpaceEqualToColorSpace())
          goto LABEL_68;
        v60 = atomic_load(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag);
        if (v60 != -1)
        {
          v109[0] = &v113;
          v114 = (void (**)(WebCore::ImageBufferAllocator *__hidden))v109;
          std::__call_once(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag, &v114, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
        }
        if (CGColorSpaceEqualToColorSpace())
        {
          v58 = *(char **)(a1 + 216);
          v59 = 1;
        }
        else
        {
          v61 = atomic_load(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag);
          if (v61 != -1)
          {
            v109[0] = &v113;
            v114 = (void (**)(WebCore::ImageBufferAllocator *__hidden))v109;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag, &v114, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          if (!CGColorSpaceEqualToColorSpace())
          {
            Name = CGColorSpaceGetName((CGColorSpaceRef)v56);
            if (Name)
            {
              ExternalRepresentation = CFStringCreateExternalRepresentation(0, Name, 0x8000100u, 0);
              v58 = *(char **)(a1 + 216);
              if (!ExternalRepresentation)
                goto LABEL_69;
              WebCore::CloneSerializer::write(v58, 3);
              WebCore::CloneSerializer::write(a1, ExternalRepresentation);
            }
            else
            {
              v101 = (const __CFData *)CGColorSpaceCopyPropertyList((CGColorSpaceRef)v56);
              if (!v101)
              {
LABEL_68:
                v58 = *(char **)(a1 + 216);
LABEL_69:
                v59 = 0;
                goto LABEL_78;
              }
              ExternalRepresentation = v101;
              Data = CFPropertyListCreateData(0, v101, kCFPropertyListBinaryFormat_v1_0, 0, 0);
              v103 = *(char **)(a1 + 216);
              if (Data)
              {
                WebCore::CloneSerializer::write(v103, 4);
                WebCore::CloneSerializer::write(a1, Data);
                CFRelease(Data);
              }
              else
              {
                WebCore::CloneSerializer::write(v103, 0);
              }
            }
            CFRelease(ExternalRepresentation);
            if (!v56)
              goto LABEL_80;
            goto LABEL_79;
          }
          v58 = *(char **)(a1 + 216);
          v59 = 2;
        }
LABEL_78:
        WebCore::CloneSerializer::write(v58, v59);
        if (!v56)
        {
LABEL_80:
          if (*(_BYTE *)(v26 + 64) && (v104 = *(_QWORD *)(v26 + 32)) != 0)
            v62 = *(_QWORD *)(v104 + 32);
          else
            v62 = *(_QWORD *)(v26 + 48);
          if (HIDWORD(v62))
          {
            *a3 = 3;
          }
          else
          {
            v63 = *(_QWORD *)(a1 + 216);
            v64 = *(unsigned int *)(v63 + 8);
            v65 = *(unsigned int *)(v63 + 12);
            v66 = v65 + 4;
            if (v65 + 4 > v64)
            {
              v89 = v64 + (v64 >> 2);
              if (v89 >= 0x10)
                v90 = v89 + 1;
              else
                v90 = 16;
              if (v90 <= v66)
                v91 = v65 + 4;
              else
                v91 = v90;
              if (HIDWORD(v91))
              {
                __break(0xC471u);
                JUMPOUT(0x1956EEDDCLL);
              }
              v92 = *(void **)v63;
              v93 = (void *)WTF::fastMalloc((WTF *)v91);
              *(_DWORD *)(v63 + 8) = v91;
              *(_QWORD *)v63 = v93;
              memcpy(v93, v92, v65);
              if (v92)
              {
                if (*(void **)v63 == v92)
                {
                  *(_QWORD *)v63 = 0;
                  *(_DWORD *)(v63 + 8) = 0;
                }
                WTF::fastFree((WTF *)v92, v94);
              }
            }
            v67 = *(unsigned int *)(v63 + 12);
            if (v66 < v67)
            {
              __break(0xC471u);
              JUMPOUT(0x1956EEDA0);
            }
            *(_DWORD *)(*(_QWORD *)v63 + v67) = v62;
            *(_DWORD *)(v63 + 12) = v66;
            v68 = *(_QWORD *)(v26 + 16);
            if (v68)
            {
              v69 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
              if (v69)
              {
                if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
                  v68 = (v68 & 0x3FFFFFFFFLL) + v69;
              }
            }
            if (*(_BYTE *)(v26 + 64))
            {
              v105 = *(_QWORD *)(v26 + 32);
              if (v105)
              {
                v70 = *(_QWORD *)(v105 + 32);
                if (!v70)
                  goto LABEL_94;
                goto LABEL_91;
              }
            }
            v70 = *(_QWORD *)(v26 + 48);
            if (v70)
            {
LABEL_91:
              v71 = *(_QWORD *)(a1 + 216);
              v72 = *(unsigned int *)(v71 + 8);
              v73 = *(unsigned int *)(v71 + 12);
              v74 = v70 + v73;
              if (v70 + v73 <= v72)
              {
LABEL_92:
                v75 = *(unsigned int *)(v71 + 12);
                if (v74 < v75)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1956EEDA8);
                }
                memcpy((void *)(*(_QWORD *)v71 + v75), (const void *)v68, v70);
                *(_DWORD *)(v71 + 12) = v74;
                goto LABEL_94;
              }
              v95 = v72 + (v72 >> 2);
              if (v95 >= 0x10)
                v96 = v95 + 1;
              else
                v96 = 16;
              if (v96 <= v74)
                v97 = v70 + v73;
              else
                v97 = v96;
              if (!HIDWORD(v97))
              {
                v98 = *(void **)v71;
                v99 = (void *)WTF::fastMalloc((WTF *)v97);
                *(_DWORD *)(v71 + 8) = v97;
                *(_QWORD *)v71 = v99;
                memcpy(v99, v98, v73);
                if (v98)
                {
                  if (*(void **)v71 == v98)
                  {
                    *(_QWORD *)v71 = 0;
                    *(_DWORD *)(v71 + 8) = 0;
                  }
                  WTF::fastFree((WTF *)v98, v100);
                }
                goto LABEL_92;
              }
              __break(0xC471u);
LABEL_177:
              JUMPOUT(0x1956EED88);
            }
          }
LABEL_94:
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)v26);
LABEL_95:
          if (*(_DWORD *)(v25 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          else
            --*(_DWORD *)(v25 + 8);
          goto LABEL_97;
        }
LABEL_79:
        CFRelease(v56);
        goto LABEL_80;
      }
    }
    else if (v25)
    {
      if (*(_DWORD *)(v25 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      else
        --*(_DWORD *)(v25 + 8);
    }
  }
  else
  {
    v110 = 0;
  }
  *a3 = 3;
LABEL_97:
  v76 = cf;
  cf = 0;
  if (v76)
    CFRelease(v76);
}

uint64_t WebCore::CloneSerializer::dumpOffscreenCanvas(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  size_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  char v54;
  char v55;

  v4 = result;
  v5 = *(_QWORD *)(result + 264);
  if (!v5)
    goto LABEL_9;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(_QWORD *)(v5 + 16 * v10);
  if (v11 != a2)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 16 * v10);
      ++v12;
      if (v11 == a2)
        goto LABEL_8;
    }
    v10 = *(unsigned int *)(v5 - 4);
  }
LABEL_8:
  if (v10 == *(_DWORD *)(v5 - 4))
  {
LABEL_9:
    if (*(_DWORD *)(result + 312) != 3)
    {
      *a3 = 5;
      return result;
    }
    v13 = *(_QWORD *)(result + 216);
    v55 = 56;
    v14 = *(unsigned int *)(v13 + 12);
    if ((_DWORD)v14 == *(_DWORD *)(v13 + 8))
    {
      result = (uint64_t)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v13, (WTF *)(v14 + 1), (unint64_t)&v55);
      *(_BYTE *)(*(_QWORD *)v13 + *(unsigned int *)(v13 + 12)) = *(_BYTE *)result;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)v13 + v14) = 56;
    }
    ++*(_DWORD *)(v13 + 12);
    v15 = *(_DWORD *)(*(_QWORD *)(v4 + 328) + 12);
    v16 = *(_QWORD *)(v4 + 216);
    v17 = *(unsigned int *)(v16 + 8);
    v18 = *(unsigned int *)(v16 + 12);
    v19 = v18 + 4;
    if (v18 + 4 > v17)
    {
      v42 = v17 + (v17 >> 2);
      if (v42 >= 0x10)
        v43 = v42 + 1;
      else
        v43 = 16;
      if (v43 <= v19)
        v44 = v18 + 4;
      else
        v44 = v43;
      if (HIDWORD(v44))
      {
        __break(0xC471u);
        JUMPOUT(0x1956EF17CLL);
      }
      v45 = *(void **)v16;
      v46 = (void *)WTF::fastMalloc((WTF *)v44);
      *(_DWORD *)(v16 + 8) = v44;
      *(_QWORD *)v16 = v46;
      result = (uint64_t)memcpy(v46, v45, v18);
      if (v45)
      {
        if (*(void **)v16 == v45)
        {
          *(_QWORD *)v16 = 0;
          *(_DWORD *)(v16 + 8) = 0;
        }
        result = WTF::fastFree((WTF *)v45, v47);
      }
    }
    v20 = *(unsigned int *)(v16 + 12);
    if (v19 >= v20)
    {
      *(_DWORD *)(*(_QWORD *)v16 + v20) = v15;
      *(_DWORD *)(v16 + 12) = v19;
      v21 = *(_QWORD *)(v4 + 328);
      v22 = *(_QWORD *)(a2 + 24);
      v23 = v22 - 144;
      v24 = *(unsigned int *)(v21 + 12);
      if ((_DWORD)v24 == *(_DWORD *)(v21 + 8))
      {
        v25 = v24 + (v24 >> 2);
        if (v25 >= 0x10)
          v26 = v25 + 1;
        else
          v26 = 16;
        if (v26 <= v24 + 1)
          v27 = v24 + 1;
        else
          v27 = v26;
        if (v27 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1956EF160);
        }
        v28 = *(_QWORD **)v21;
        v29 = (void *)WTF::fastMalloc((WTF *)(8 * v27));
        *(_DWORD *)(v21 + 8) = v27;
        *(_QWORD *)v21 = v29;
        result = (uint64_t)memcpy(v29, v28, 8 * v24);
        if (v28)
        {
          if (*(_QWORD **)v21 == v28)
          {
            *(_QWORD *)v21 = 0;
            *(_DWORD *)(v21 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v28, v30);
        }
        v31 = *(unsigned int *)(v21 + 12);
        v32 = *(_QWORD **)v21;
        ++*(_DWORD *)(v22 - 120);
        v32[v31] = v23;
        *(_DWORD *)(v21 + 12) = v31 + 1;
      }
      else
      {
        v33 = *(_QWORD **)v21;
        ++*(_DWORD *)(v22 - 120);
        v33[v24] = v23;
        *(_DWORD *)(v21 + 12) = v24 + 1;
      }
      return result;
    }
    __break(0xC471u);
LABEL_63:
    JUMPOUT(0x1956EF158);
  }
  v34 = *(_QWORD *)(result + 216);
  v54 = 46;
  v35 = *(unsigned int *)(v34 + 12);
  if ((_DWORD)v35 == *(_DWORD *)(v34 + 8))
  {
    result = (uint64_t)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v34, (WTF *)(v35 + 1), (unint64_t)&v54);
    *(_BYTE *)(*(_QWORD *)v34 + *(unsigned int *)(v34 + 12)) = *(_BYTE *)result;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)v34 + v35) = 46;
  }
  ++*(_DWORD *)(v34 + 12);
  v36 = *(_DWORD *)(v5 + 16 * v10 + 8);
  v37 = *(_QWORD *)(v4 + 216);
  v38 = *(unsigned int *)(v37 + 8);
  v39 = *(unsigned int *)(v37 + 12);
  v40 = v39 + 4;
  if (v39 + 4 > v38)
  {
    v48 = v38 + (v38 >> 2);
    if (v48 >= 0x10)
      v49 = v48 + 1;
    else
      v49 = 16;
    if (v49 <= v40)
      v50 = v39 + 4;
    else
      v50 = v49;
    if (HIDWORD(v50))
    {
      __break(0xC471u);
      goto LABEL_63;
    }
    v51 = *(void **)v37;
    v52 = (void *)WTF::fastMalloc((WTF *)v50);
    *(_DWORD *)(v37 + 8) = v50;
    *(_QWORD *)v37 = v52;
    result = (uint64_t)memcpy(v52, v51, v39);
    if (v51)
    {
      if (*(void **)v37 == v51)
      {
        *(_QWORD *)v37 = 0;
        *(_DWORD *)(v37 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v51, v53);
    }
  }
  v41 = *(unsigned int *)(v37 + 12);
  if (v40 < v41)
  {
    __break(0xC471u);
    JUMPOUT(0x1956EF174);
  }
  *(_DWORD *)(*(_QWORD *)v37 + v41) = v36;
  *(_DWORD *)(v37 + 12) = v40;
  return result;
}

uint64_t WebCore::CloneSerializer::dumpRTCDataChannel(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;

  v3 = *(_QWORD *)(result + 272);
  if (!v3)
    goto LABEL_9;
  v4 = result;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = *(_QWORD *)(v3 + 16 * v9);
  if (v10 != a2)
  {
    v11 = 1;
    while (v10)
    {
      v9 = ((_DWORD)v9 + v11) & v5;
      v10 = *(_QWORD *)(v3 + 16 * v9);
      ++v11;
      if (v10 == a2)
        goto LABEL_8;
    }
    v9 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v9 == *(_DWORD *)(v3 - 4))
  {
LABEL_9:
    *a3 = 5;
    return result;
  }
  v12 = *(_QWORD *)(result + 216);
  v26 = 50;
  v13 = *(unsigned int *)(v12 + 12);
  if ((_DWORD)v13 == *(_DWORD *)(v12 + 8))
  {
    result = (uint64_t)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v12, (WTF *)(v13 + 1), (unint64_t)&v26);
    *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)v12 + v13) = 50;
  }
  ++*(_DWORD *)(v12 + 12);
  v14 = *(_DWORD *)(v3 + 16 * v9 + 8);
  v15 = *(_QWORD *)(v4 + 216);
  v16 = *(unsigned int *)(v15 + 8);
  v17 = *(unsigned int *)(v15 + 12);
  v18 = v17 + 4;
  if (v17 + 4 > v16)
  {
    v20 = v16 + (v16 >> 2);
    if (v20 >= 0x10)
      v21 = v20 + 1;
    else
      v21 = 16;
    if (v21 <= v18)
      v22 = v17 + 4;
    else
      v22 = v21;
    if (HIDWORD(v22))
    {
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x1956EF340);
    }
    v23 = *(void **)v15;
    v24 = (void *)WTF::fastMalloc((WTF *)v22);
    *(_DWORD *)(v15 + 8) = v22;
    *(_QWORD *)v15 = v24;
    result = (uint64_t)memcpy(v24, v23, v17);
    if (v23)
    {
      if (*(void **)v15 == v23)
      {
        *(_QWORD *)v15 = 0;
        *(_DWORD *)(v15 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v23, v25);
    }
  }
  v19 = *(unsigned int *)(v15 + 12);
  if (v18 < v19)
    goto LABEL_27;
  *(_DWORD *)(*(_QWORD *)v15 + v19) = v14;
  *(_DWORD *)(v15 + 12) = v18;
  return result;
}

uint64_t WebCore::CloneSerializer::dumpDOMException(uint64_t this, uint64_t a2, _DWORD *a3)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WTF::String *v12;
  WTF::StringImpl *v13;
  const WTF::String *v14;
  WTF::StringImpl *v15;
  char v16;

  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_21;
  v3 = (WTF::StringImpl **)this;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMException::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMException::s_info && v6 != 0);
  }
  if (v5 && (v9 = *(_QWORD *)(a2 + 24)) != 0)
  {
    v10 = *(_QWORD *)(this + 216);
    v16 = 51;
    v11 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v10 + 8))
      *(_BYTE *)(*(_QWORD *)v10 + *(unsigned int *)(v10 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v10, (WTF *)(v11 + 1), (unint64_t)&v16);
    else
      *(_BYTE *)(*(_QWORD *)v10 + v11) = 51;
    ++*(_DWORD *)(v10 + 12);
    v12 = *(const WTF::String **)(v9 + 24);
    if (v12)
    {
      *(_DWORD *)v12 += 2;
      WebCore::CloneSerializer::write(v3, v12);
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
    else
    {
      WebCore::CloneSerializer::write(v3, 0);
    }
    v14 = *(const WTF::String **)(v9 + 16);
    if (v14)
    {
      *(_DWORD *)v14 += 2;
      this = WebCore::CloneSerializer::write(v3, v14);
      if (*(_DWORD *)v14 == 2)
        return WTF::StringImpl::destroy(v14, v15);
      else
        *(_DWORD *)v14 -= 2;
    }
    else
    {
      return WebCore::CloneSerializer::write(v3, 0);
    }
  }
  else
  {
LABEL_21:
    *a3 = 5;
  }
  return this;
}

uint64_t WebCore::CloneSerializer::dumpWebCodecsEncodedVideoChunk(uint64_t this, JSC::JSObject *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  char v32;

  v3 = this;
  v4 = *(uint64_t **)(this + 360);
  v5 = *((unsigned int *)v4 + 3);
  if ((_DWORD)v5)
  {
    v6 = 0;
    while (*(JSC::JSObject **)(*v4 + 8 * v6) != a2)
    {
      if (v5 == ++v6)
        goto LABEL_5;
    }
    LODWORD(v5) = v6;
  }
  else
  {
LABEL_5:
    if ((_DWORD)v5 == *((_DWORD *)v4 + 2))
    {
      v7 = v5 + (v5 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v5 + 1)
        v9 = v5 + 1;
      else
        v9 = v8;
      if (v9 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1956EF700);
      }
      v10 = (void *)*v4;
      v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
      *((_DWORD *)v4 + 2) = v9;
      *v4 = (uint64_t)v11;
      this = (uint64_t)memcpy(v11, v10, 8 * v5);
      if (v10)
      {
        if ((void *)*v4 == v10)
        {
          *v4 = 0;
          *((_DWORD *)v4 + 2) = 0;
        }
        this = WTF::fastFree((WTF *)v10, v12);
      }
      v13 = *((unsigned int *)v4 + 3);
      v14 = *v4;
      if (a2)
      {
        do
          v15 = __ldaxr((unsigned int *)a2);
        while (__stlxr(v15 + 1, (unsigned int *)a2));
        v16 = *((_DWORD *)v4 + 3);
      }
      else
      {
        v16 = *((_DWORD *)v4 + 3);
      }
      v17 = (_QWORD *)(v14 + 8 * v13);
    }
    else
    {
      v17 = (_QWORD *)(*v4 + 8 * v5);
      if (a2)
      {
        do
          v18 = __ldaxr((unsigned int *)a2);
        while (__stlxr(v18 + 1, (unsigned int *)a2));
        v16 = *((_DWORD *)v4 + 3);
      }
      else
      {
        v16 = *((_DWORD *)v4 + 3);
      }
    }
    *v17 = a2;
    *((_DWORD *)v4 + 3) = v16 + 1;
  }
  v19 = *(_QWORD *)(v3 + 216);
  v32 = 52;
  v20 = *(unsigned int *)(v19 + 12);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 8))
  {
    this = (uint64_t)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v19, (WTF *)(v20 + 1), (unint64_t)&v32);
    *(_BYTE *)(*(_QWORD *)v19 + *(unsigned int *)(v19 + 12)) = *(_BYTE *)this;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)v19 + v20) = 52;
  }
  ++*(_DWORD *)(v19 + 12);
  v21 = *(_QWORD *)(v3 + 216);
  v22 = *(unsigned int *)(v21 + 8);
  v23 = *(unsigned int *)(v21 + 12);
  v24 = v23 + 4;
  if (v23 + 4 > v22)
  {
    v26 = v22 + (v22 >> 2);
    if (v26 >= 0x10)
      v27 = v26 + 1;
    else
      v27 = 16;
    if (v27 <= v24)
      v28 = v23 + 4;
    else
      v28 = v27;
    if (HIDWORD(v28))
    {
LABEL_47:
      __break(0xC471u);
      JUMPOUT(0x1956EF6F8);
    }
    v29 = *(void **)v21;
    v30 = (void *)WTF::fastMalloc((WTF *)v28);
    *(_DWORD *)(v21 + 8) = v28;
    *(_QWORD *)v21 = v30;
    this = (uint64_t)memcpy(v30, v29, v23);
    if (v29)
    {
      if (*(void **)v21 == v29)
      {
        *(_QWORD *)v21 = 0;
        *(_DWORD *)(v21 + 8) = 0;
      }
      this = WTF::fastFree((WTF *)v29, v31);
    }
  }
  v25 = *(unsigned int *)(v21 + 12);
  if (v24 < v25)
    goto LABEL_47;
  *(_DWORD *)(*(_QWORD *)v21 + v25) = v5;
  *(_DWORD *)(v21 + 12) = v24;
  return this;
}

BOOL WebCore::CloneSerializer::dumpWebCodecsVideoFrame(WebCore::CloneSerializer *this, JSC::JSObject *a2)
{
  JSC::JSObject *v2;
  int v3;
  _BOOL8 v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  JSC::JSObject **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  char v31;

  v2 = a2;
  v3 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3 + 1;
  v4 = *((_BYTE *)a2 + 152) == 0;
  if (!*((_BYTE *)a2 + 152))
  {
    v7 = *((_QWORD *)this + 46);
    v8 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v8)
    {
      v9 = 0;
      while (*(JSC::JSObject **)(*(_QWORD *)v7 + 8 * v9) != a2)
      {
        if (v8 == ++v9)
          goto LABEL_9;
      }
      LODWORD(v8) = v9;
    }
    else
    {
LABEL_9:
      if ((_DWORD)v8 == *(_DWORD *)(v7 + 8))
      {
        v10 = v8 + (v8 >> 2);
        if (v10 >= 0x10)
          v11 = v10 + 1;
        else
          v11 = 16;
        if (v11 <= v8 + 1)
          v12 = v8 + 1;
        else
          v12 = v11;
        if (v12 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1956EF960);
        }
        v13 = *(void **)v7;
        v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
        *(_DWORD *)(v7 + 8) = v12;
        *(_QWORD *)v7 = v14;
        memcpy(v14, v13, 8 * v8);
        if (v13)
        {
          if (*(void **)v7 == v13)
          {
            *(_QWORD *)v7 = 0;
            *(_DWORD *)(v7 + 8) = 0;
          }
          WTF::fastFree((WTF *)v13, v15);
        }
        v16 = *(unsigned int *)(v7 + 12);
        v17 = (JSC::JSObject **)(*(_QWORD *)v7 + 8 * v16);
      }
      else
      {
        v17 = (JSC::JSObject **)(*(_QWORD *)v7 + 8 * v8);
        LODWORD(v16) = *(_DWORD *)(v7 + 12);
      }
      *v17 = v2;
      *(_DWORD *)(v7 + 12) = v16 + 1;
      v2 = 0;
    }
    v18 = *((_QWORD *)this + 27);
    v31 = 53;
    v19 = *(unsigned int *)(v18 + 12);
    if ((_DWORD)v19 == *(_DWORD *)(v18 + 8))
      *(_BYTE *)(*(_QWORD *)v18 + *(unsigned int *)(v18 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v18, (WTF *)(v19 + 1), (unint64_t)&v31);
    else
      *(_BYTE *)(*(_QWORD *)v18 + v19) = 53;
    ++*(_DWORD *)(v18 + 12);
    v20 = *((_QWORD *)this + 27);
    v21 = *(unsigned int *)(v20 + 8);
    v22 = *(unsigned int *)(v20 + 12);
    v23 = v22 + 4;
    if (v22 + 4 > v21)
    {
      v25 = v21 + (v21 >> 2);
      if (v25 >= 0x10)
        v26 = v25 + 1;
      else
        v26 = 16;
      if (v26 <= v23)
        v27 = v22 + 4;
      else
        v27 = v26;
      if (HIDWORD(v27))
        goto LABEL_47;
      v28 = *(void **)v20;
      v29 = (void *)WTF::fastMalloc((WTF *)v27);
      *(_DWORD *)(v20 + 8) = v27;
      *(_QWORD *)v20 = v29;
      memcpy(v29, v28, v22);
      if (v28)
      {
        if (*(void **)v20 == v28)
        {
          *(_QWORD *)v20 = 0;
          *(_DWORD *)(v20 + 8) = 0;
        }
        WTF::fastFree((WTF *)v28, v30);
      }
    }
    v24 = *(unsigned int *)(v20 + 12);
    if (v23 >= v24)
    {
      *(_DWORD *)(*(_QWORD *)v20 + v24) = v8;
      *(_DWORD *)(v20 + 12) = v23;
      if (!v2)
        return 1;
      v3 = *((_DWORD *)v2 + 4) - 1;
      if (*((_DWORD *)v2 + 4) != 1)
        goto LABEL_3;
LABEL_28:
      (*(void (**)(JSC::JSObject *))(*(_QWORD *)v2 + 16))(v2);
      return v4;
    }
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x1956EF958);
  }
  if (!v3)
    goto LABEL_28;
LABEL_3:
  *((_DWORD *)v2 + 4) = v3;
  return v4;
}

uint64_t WebCore::CloneSerializer::dumpWebCodecsEncodedAudioChunk(uint64_t this, JSC::JSObject *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  char v32;

  v3 = this;
  v4 = *(uint64_t **)(this + 376);
  v5 = *((unsigned int *)v4 + 3);
  if ((_DWORD)v5)
  {
    v6 = 0;
    while (*(JSC::JSObject **)(*v4 + 8 * v6) != a2)
    {
      if (v5 == ++v6)
        goto LABEL_5;
    }
    LODWORD(v5) = v6;
  }
  else
  {
LABEL_5:
    if ((_DWORD)v5 == *((_DWORD *)v4 + 2))
    {
      v7 = v5 + (v5 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v5 + 1)
        v9 = v5 + 1;
      else
        v9 = v8;
      if (v9 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1956EFB9CLL);
      }
      v10 = (void *)*v4;
      v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
      *((_DWORD *)v4 + 2) = v9;
      *v4 = (uint64_t)v11;
      this = (uint64_t)memcpy(v11, v10, 8 * v5);
      if (v10)
      {
        if ((void *)*v4 == v10)
        {
          *v4 = 0;
          *((_DWORD *)v4 + 2) = 0;
        }
        this = WTF::fastFree((WTF *)v10, v12);
      }
      v13 = *((unsigned int *)v4 + 3);
      v14 = *v4;
      if (a2)
      {
        do
          v15 = __ldaxr((unsigned int *)a2);
        while (__stlxr(v15 + 1, (unsigned int *)a2));
        v16 = *((_DWORD *)v4 + 3);
      }
      else
      {
        v16 = *((_DWORD *)v4 + 3);
      }
      v17 = (_QWORD *)(v14 + 8 * v13);
    }
    else
    {
      v17 = (_QWORD *)(*v4 + 8 * v5);
      if (a2)
      {
        do
          v18 = __ldaxr((unsigned int *)a2);
        while (__stlxr(v18 + 1, (unsigned int *)a2));
        v16 = *((_DWORD *)v4 + 3);
      }
      else
      {
        v16 = *((_DWORD *)v4 + 3);
      }
    }
    *v17 = a2;
    *((_DWORD *)v4 + 3) = v16 + 1;
  }
  v19 = *(_QWORD *)(v3 + 216);
  v32 = 58;
  v20 = *(unsigned int *)(v19 + 12);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 8))
  {
    this = (uint64_t)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v19, (WTF *)(v20 + 1), (unint64_t)&v32);
    *(_BYTE *)(*(_QWORD *)v19 + *(unsigned int *)(v19 + 12)) = *(_BYTE *)this;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)v19 + v20) = 58;
  }
  ++*(_DWORD *)(v19 + 12);
  v21 = *(_QWORD *)(v3 + 216);
  v22 = *(unsigned int *)(v21 + 8);
  v23 = *(unsigned int *)(v21 + 12);
  v24 = v23 + 4;
  if (v23 + 4 > v22)
  {
    v26 = v22 + (v22 >> 2);
    if (v26 >= 0x10)
      v27 = v26 + 1;
    else
      v27 = 16;
    if (v27 <= v24)
      v28 = v23 + 4;
    else
      v28 = v27;
    if (HIDWORD(v28))
    {
LABEL_47:
      __break(0xC471u);
      JUMPOUT(0x1956EFB94);
    }
    v29 = *(void **)v21;
    v30 = (void *)WTF::fastMalloc((WTF *)v28);
    *(_DWORD *)(v21 + 8) = v28;
    *(_QWORD *)v21 = v30;
    this = (uint64_t)memcpy(v30, v29, v23);
    if (v29)
    {
      if (*(void **)v21 == v29)
      {
        *(_QWORD *)v21 = 0;
        *(_DWORD *)(v21 + 8) = 0;
      }
      this = WTF::fastFree((WTF *)v29, v31);
    }
  }
  v25 = *(unsigned int *)(v21 + 12);
  if (v24 < v25)
    goto LABEL_47;
  *(_DWORD *)(*(_QWORD *)v21 + v25) = v5;
  *(_DWORD *)(v21 + 12) = v24;
  return this;
}

BOOL WebCore::CloneSerializer::dumpWebCodecsAudioData(WebCore::CloneSerializer *this, JSC::JSObject *a2)
{
  JSC::JSObject *v2;
  int v3;
  _BOOL8 v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  JSC::JSObject **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  char v31;

  v2 = a2;
  v3 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3 + 1;
  v4 = *((_BYTE *)a2 + 32) == 0;
  if (!*((_BYTE *)a2 + 32))
  {
    v7 = *((_QWORD *)this + 48);
    v8 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v8)
    {
      v9 = 0;
      while (*(JSC::JSObject **)(*(_QWORD *)v7 + 8 * v9) != a2)
      {
        if (v8 == ++v9)
          goto LABEL_9;
      }
      LODWORD(v8) = v9;
    }
    else
    {
LABEL_9:
      if ((_DWORD)v8 == *(_DWORD *)(v7 + 8))
      {
        v10 = v8 + (v8 >> 2);
        if (v10 >= 0x10)
          v11 = v10 + 1;
        else
          v11 = 16;
        if (v11 <= v8 + 1)
          v12 = v8 + 1;
        else
          v12 = v11;
        if (v12 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1956EFDFCLL);
        }
        v13 = *(void **)v7;
        v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
        *(_DWORD *)(v7 + 8) = v12;
        *(_QWORD *)v7 = v14;
        memcpy(v14, v13, 8 * v8);
        if (v13)
        {
          if (*(void **)v7 == v13)
          {
            *(_QWORD *)v7 = 0;
            *(_DWORD *)(v7 + 8) = 0;
          }
          WTF::fastFree((WTF *)v13, v15);
        }
        v16 = *(unsigned int *)(v7 + 12);
        v17 = (JSC::JSObject **)(*(_QWORD *)v7 + 8 * v16);
      }
      else
      {
        v17 = (JSC::JSObject **)(*(_QWORD *)v7 + 8 * v8);
        LODWORD(v16) = *(_DWORD *)(v7 + 12);
      }
      *v17 = v2;
      *(_DWORD *)(v7 + 12) = v16 + 1;
      v2 = 0;
    }
    v18 = *((_QWORD *)this + 27);
    v31 = 59;
    v19 = *(unsigned int *)(v18 + 12);
    if ((_DWORD)v19 == *(_DWORD *)(v18 + 8))
      *(_BYTE *)(*(_QWORD *)v18 + *(unsigned int *)(v18 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v18, (WTF *)(v19 + 1), (unint64_t)&v31);
    else
      *(_BYTE *)(*(_QWORD *)v18 + v19) = 59;
    ++*(_DWORD *)(v18 + 12);
    v20 = *((_QWORD *)this + 27);
    v21 = *(unsigned int *)(v20 + 8);
    v22 = *(unsigned int *)(v20 + 12);
    v23 = v22 + 4;
    if (v22 + 4 > v21)
    {
      v25 = v21 + (v21 >> 2);
      if (v25 >= 0x10)
        v26 = v25 + 1;
      else
        v26 = 16;
      if (v26 <= v23)
        v27 = v22 + 4;
      else
        v27 = v26;
      if (HIDWORD(v27))
        goto LABEL_47;
      v28 = *(void **)v20;
      v29 = (void *)WTF::fastMalloc((WTF *)v27);
      *(_DWORD *)(v20 + 8) = v27;
      *(_QWORD *)v20 = v29;
      memcpy(v29, v28, v22);
      if (v28)
      {
        if (*(void **)v20 == v28)
        {
          *(_QWORD *)v20 = 0;
          *(_DWORD *)(v20 + 8) = 0;
        }
        WTF::fastFree((WTF *)v28, v30);
      }
    }
    v24 = *(unsigned int *)(v20 + 12);
    if (v23 >= v24)
    {
      *(_DWORD *)(*(_QWORD *)v20 + v24) = v8;
      *(_DWORD *)(v20 + 12) = v23;
      if (!v2)
        return 1;
      v3 = *((_DWORD *)v2 + 4) - 1;
      if (*((_DWORD *)v2 + 4) != 1)
        goto LABEL_3;
LABEL_28:
      (*(void (**)(JSC::JSObject *))(*(_QWORD *)v2 + 16))(v2);
      return v4;
    }
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x1956EFDF4);
  }
  if (!v3)
    goto LABEL_28;
LABEL_3:
  *((_DWORD *)v2 + 4) = v3;
  return v4;
}

uint64_t WebCore::CloneSerializer::dumpMediaStreamTrack(uint64_t this, JSC::JSObject *a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  char v28;

  v2 = this;
  v3 = (_DWORD *)((char *)a2 - 32);
  ++*((_DWORD *)a2 - 2);
  v4 = *(_QWORD *)(this + 392);
  v5 = *(unsigned int *)(v4 + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    while (*(_DWORD **)(*(_QWORD *)v4 + 8 * v6) != v3)
    {
      if (v5 == ++v6)
        goto LABEL_5;
    }
    LODWORD(v5) = v6;
  }
  else
  {
LABEL_5:
    if ((_DWORD)v5 == *(_DWORD *)(v4 + 8))
    {
      v7 = v5 + (v5 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v5 + 1)
        v9 = v5 + 1;
      else
        v9 = v8;
      if (v9 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1956F003CLL);
      }
      v10 = *(void **)v4;
      v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
      *(_DWORD *)(v4 + 8) = v9;
      *(_QWORD *)v4 = v11;
      this = (uint64_t)memcpy(v11, v10, 8 * v5);
      if (v10)
      {
        if (*(void **)v4 == v10)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
        }
        this = WTF::fastFree((WTF *)v10, v12);
      }
      v13 = *(unsigned int *)(v4 + 12);
      v14 = (_QWORD *)(*(_QWORD *)v4 + 8 * v13);
    }
    else
    {
      v14 = (_QWORD *)(*(_QWORD *)v4 + 8 * v5);
      LODWORD(v13) = *(_DWORD *)(v4 + 12);
    }
    *v14 = v3;
    *(_DWORD *)(v4 + 12) = v13 + 1;
    v3 = 0;
  }
  v15 = *(_QWORD *)(v2 + 216);
  v28 = 60;
  v16 = *(unsigned int *)(v15 + 12);
  if ((_DWORD)v16 == *(_DWORD *)(v15 + 8))
  {
    this = (uint64_t)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v15, (WTF *)(v16 + 1), (unint64_t)&v28);
    *(_BYTE *)(*(_QWORD *)v15 + *(unsigned int *)(v15 + 12)) = *(_BYTE *)this;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)v15 + v16) = 60;
  }
  ++*(_DWORD *)(v15 + 12);
  v17 = *(_QWORD *)(v2 + 216);
  v18 = *(unsigned int *)(v17 + 8);
  v19 = *(unsigned int *)(v17 + 12);
  v20 = v19 + 4;
  if (v19 + 4 > v18)
  {
    v22 = v18 + (v18 >> 2);
    if (v22 >= 0x10)
      v23 = v22 + 1;
    else
      v23 = 16;
    if (v23 <= v20)
      v24 = v19 + 4;
    else
      v24 = v23;
    if (HIDWORD(v24))
    {
LABEL_44:
      __break(0xC471u);
      JUMPOUT(0x1956F0034);
    }
    v25 = *(void **)v17;
    v26 = (void *)WTF::fastMalloc((WTF *)v24);
    *(_DWORD *)(v17 + 8) = v24;
    *(_QWORD *)v17 = v26;
    this = (uint64_t)memcpy(v26, v25, v19);
    if (v25)
    {
      if (*(void **)v17 == v25)
      {
        *(_QWORD *)v17 = 0;
        *(_DWORD *)(v17 + 8) = 0;
      }
      this = WTF::fastFree((WTF *)v25, v27);
    }
  }
  v21 = *(unsigned int *)(v17 + 12);
  if (v20 < v21)
    goto LABEL_44;
  *(_DWORD *)(*(_QWORD *)v17 + v21) = v5;
  *(_DWORD *)(v17 + 12) = v20;
  if (v3)
  {
    if (v3[6] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  return this;
}

uint64_t WebCore::CloneSerializer::dumpMediaSourceHandle(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;

  v3 = *(_QWORD *)(result + 280);
  if (!v3)
    goto LABEL_9;
  v4 = result;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = *(_QWORD *)(v3 + 16 * v9);
  if (v10 != a2)
  {
    v11 = 1;
    while (v10)
    {
      v9 = ((_DWORD)v9 + v11) & v5;
      v10 = *(_QWORD *)(v3 + 16 * v9);
      ++v11;
      if (v10 == a2)
        goto LABEL_8;
    }
    v9 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v9 == *(_DWORD *)(v3 - 4))
  {
LABEL_9:
    *a3 = 5;
    return result;
  }
  v12 = *(_QWORD *)(result + 216);
  v26 = 61;
  v13 = *(unsigned int *)(v12 + 12);
  if ((_DWORD)v13 == *(_DWORD *)(v12 + 8))
  {
    result = (uint64_t)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v12, (WTF *)(v13 + 1), (unint64_t)&v26);
    *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)v12 + v13) = 61;
  }
  ++*(_DWORD *)(v12 + 12);
  v14 = *(_DWORD *)(v3 + 16 * v9 + 8);
  v15 = *(_QWORD *)(v4 + 216);
  v16 = *(unsigned int *)(v15 + 8);
  v17 = *(unsigned int *)(v15 + 12);
  v18 = v17 + 4;
  if (v17 + 4 > v16)
  {
    v20 = v16 + (v16 >> 2);
    if (v20 >= 0x10)
      v21 = v20 + 1;
    else
      v21 = 16;
    if (v21 <= v18)
      v22 = v17 + 4;
    else
      v22 = v21;
    if (HIDWORD(v22))
    {
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x1956F0200);
    }
    v23 = *(void **)v15;
    v24 = (void *)WTF::fastMalloc((WTF *)v22);
    *(_DWORD *)(v15 + 8) = v22;
    *(_QWORD *)v15 = v24;
    result = (uint64_t)memcpy(v24, v23, v17);
    if (v23)
    {
      if (*(void **)v15 == v23)
      {
        *(_QWORD *)v15 = 0;
        *(_DWORD *)(v15 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v23, v25);
    }
  }
  v19 = *(unsigned int *)(v15 + 12);
  if (v18 < v19)
    goto LABEL_27;
  *(_DWORD *)(*(_QWORD *)v15 + v19) = v14;
  *(_DWORD *)(v15 + 12) = v18;
  return result;
}

uint64_t WebCore::CloneSerializer::dumpHeapBigIntData(char **this, JSC::JSBigInt *a2)
{
  uint64_t result;
  int v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;
  void *v32;

  result = (uint64_t)WebCore::CloneSerializer::write(this[27], *((_BYTE *)a2 + 16) != 0);
  v5 = *((_DWORD *)a2 + 2);
  v6 = this[27];
  v7 = *((unsigned int *)v6 + 2);
  v8 = *((unsigned int *)v6 + 3);
  v9 = v8 + 4;
  if (v8 + 4 > v7)
  {
    v27 = v7 + (v7 >> 2);
    if (v27 >= 0x10)
      v28 = v27 + 1;
    else
      v28 = 16;
    if (v28 <= v9)
      v29 = v8 + 4;
    else
      v29 = v28;
    if (HIDWORD(v29))
      goto LABEL_40;
    v30 = *(void **)v6;
    v31 = (void *)WTF::fastMalloc((WTF *)v29);
    *((_DWORD *)v6 + 2) = v29;
    *(_QWORD *)v6 = v31;
    result = (uint64_t)memcpy(v31, v30, v8);
    if (v30)
    {
      if (*(void **)v6 == v30)
      {
        *(_QWORD *)v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      result = WTF::fastFree((WTF *)v30, v32);
    }
  }
  v10 = *((unsigned int *)v6 + 3);
  if (v9 < v10)
  {
    __break(0xC471u);
    JUMPOUT(0x1956F03F4);
  }
  *(_DWORD *)(*(_QWORD *)v6 + v10) = v5;
  *((_DWORD *)v6 + 3) = v9;
  if (*((_DWORD *)a2 + 2))
  {
    v11 = 0;
    v12 = MEMORY[0x1E0CC10F8];
    while (1)
    {
      v13 = *((_QWORD *)a2 + 3);
      v14 = *(_QWORD *)(v12 + 56);
      if (v14 && (*(_BYTE *)(v12 + 34) || !*MEMORY[0x1E0CC10F0]))
        v13 = (v13 & 0x3FFFFFFFFLL) + v14;
      v15 = *(_QWORD *)(v13 + 8 * v11);
      v16 = this[27];
      v17 = *((unsigned int *)v16 + 2);
      v18 = *((unsigned int *)v16 + 3);
      v19 = v18 + 8;
      if (v18 + 8 > v17)
      {
        v21 = v17 + (v17 >> 2);
        if (v21 >= 0x10)
          v22 = v21 + 1;
        else
          v22 = 16;
        if (v22 <= v19)
          v23 = v18 + 8;
        else
          v23 = v22;
        if (HIDWORD(v23))
        {
          __break(0xC471u);
          JUMPOUT(0x1956F03ECLL);
        }
        v24 = *(void **)v16;
        v25 = (void *)WTF::fastMalloc((WTF *)v23);
        *((_DWORD *)v16 + 2) = v23;
        *(_QWORD *)v16 = v25;
        result = (uint64_t)memcpy(v25, v24, v18);
        if (v24)
        {
          if (*(void **)v16 == v24)
          {
            *(_QWORD *)v16 = 0;
            *((_DWORD *)v16 + 2) = 0;
          }
          result = WTF::fastFree((WTF *)v24, v26);
        }
      }
      v20 = *((unsigned int *)v16 + 3);
      if (v19 < v20)
        break;
      *(_QWORD *)(*(_QWORD *)v16 + v20) = v15;
      *((_DWORD *)v16 + 3) = v19;
      if (++v11 >= (unint64_t)*((unsigned int *)a2 + 2))
        return result;
    }
LABEL_40:
    __break(0xC471u);
    JUMPOUT(0x1956F03E4);
  }
  return result;
}

char *WebCore::CloneSerializer::writeConstantPoolIndex<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>(char *result, uint64_t a2, int a3)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;

  if (!a2)
    return WebCore::CloneSerializer::write(*((char **)result + 27), a3);
  v4 = *(_DWORD *)(a2 - 12);
  if (v4 <= 0xFF)
    return WebCore::CloneSerializer::write(*((char **)result + 27), a3);
  if (HIWORD(v4))
  {
    v5 = *((_QWORD *)result + 27);
    v10 = *(unsigned int *)(v5 + 8);
    v11 = *(unsigned int *)(v5 + 12);
    v8 = v11 + 4;
    if (v11 + 4 > v10)
    {
      v19 = v10 + (v10 >> 2);
      if (v19 >= 0x10)
        v20 = v19 + 1;
      else
        v20 = 16;
      if (v20 <= v8)
        v21 = v11 + 4;
      else
        v21 = v20;
      if (HIDWORD(v21))
        goto LABEL_37;
      v22 = *(void **)v5;
      v23 = (void *)WTF::fastMalloc((WTF *)v21);
      *(_DWORD *)(v5 + 8) = v21;
      *(_QWORD *)v5 = v23;
      result = (char *)memcpy(v23, v22, v11);
      if (v22)
      {
        if (*(void **)v5 == v22)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        result = (char *)WTF::fastFree((WTF *)v22, v24);
      }
    }
    v12 = *(unsigned int *)(v5 + 12);
    if (v8 < v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1956F058CLL);
    }
    *(_DWORD *)(*(_QWORD *)v5 + v12) = a3;
    goto LABEL_11;
  }
  v5 = *((_QWORD *)result + 27);
  v6 = *(unsigned int *)(v5 + 8);
  v7 = *(unsigned int *)(v5 + 12);
  v8 = v7 + 2;
  if (v7 + 2 > v6)
  {
    v13 = v6 + (v6 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= v8)
      v15 = v7 + 2;
    else
      v15 = v14;
    if (HIDWORD(v15))
    {
      __break(0xC471u);
      JUMPOUT(0x1956F0594);
    }
    v16 = *(void **)v5;
    v17 = (void *)WTF::fastMalloc((WTF *)v15);
    *(_DWORD *)(v5 + 8) = v15;
    *(_QWORD *)v5 = v17;
    result = (char *)memcpy(v17, v16, v7);
    if (v16)
    {
      if (*(void **)v5 == v16)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      result = (char *)WTF::fastFree((WTF *)v16, v18);
    }
  }
  v9 = *(unsigned int *)(v5 + 12);
  if (v8 < v9)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x1956F0584);
  }
  *(_WORD *)(*(_QWORD *)v5 + v9) = a3;
LABEL_11:
  *(_DWORD *)(v5 + 12) = v8;
  return result;
}

uint64_t WTF::HashTable<JSC::JSObject *,WTF::KeyValuePair<JSC::JSObject *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject *,unsigned int>>,WTF::DefaultHash<JSC::JSObject *>,WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject *>>::expand(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
    goto LABEL_3;
  v7 = v5 << (6 * v6 >= 2 * v5);
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v10 = 0;
  if (v5)
  {
    v12 = v5;
    v13 = (__n128 *)v4;
    do
    {
      if (v13->n128_u64[0] + 1 >= 2)
      {
        WTF::HashTable<JSC::JSObject *,WTF::KeyValuePair<JSC::JSObject *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject *,unsigned int>>,WTF::DefaultHash<JSC::JSObject *>,WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject *>>::reinsert(a1, v13);
        if (v13 == a2)
          v10 = v14;
      }
      ++v13;
      --v12;
    }
    while (v12);
    goto LABEL_14;
  }
  result = 0;
  if (v4)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v10;
  }
  return result;
}

__n128 WTF::HashTable<JSC::JSObject *,WTF::KeyValuePair<JSC::JSObject *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject *,unsigned int>>,WTF::DefaultHash<JSC::JSObject *>,WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject *>>::reinsert(uint64_t *a1, __n128 *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  __n128 result;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 8);
  else
    v4 = 0;
  v5 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::JSObject *>>::hash<JSC::JSObject *>(a2);
  v6 = 0;
  do
  {
    v7 = v5 & v4;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(v3 + 16 * v7));
  result = *a2;
  *(__n128 *)(v3 + 16 * v7) = *a2;
  return result;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::JSObject *>>::hash<JSC::JSObject *>(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = ~(*a1 << 32) + *a1;
  v2 = 9 * (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) ^ (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) >> 8));
  v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return (v3 >> 31) ^ v3;
}

uint64_t WTF::Vector<WebCore::URLKeepingBlobAlive,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::URLKeepingBlobAlive>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t result;

  v3 = (uint64_t *)WTF::Vector<WebCore::URLKeepingBlobAlive,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(*(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::URLKeepingBlobAlive,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::URLKeepingBlobAlive,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::URLKeepingBlobAlive,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::URLKeepingBlobAlive,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 <= v2)
    return 1;
  if (v4 < 0x38E38E4)
  {
    v5 = result;
    v6 = *(WTF **)result;
    v7 = *(unsigned int *)(result + 12);
    v8 = 72 * v4;
    v9 = WTF::fastMalloc((WTF *)(72 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)v5 = v9;
    if ((_DWORD)v7)
    {
      v11 = v9;
      v12 = 72 * v7;
      v13 = (uint64_t *)v6;
      do
      {
        WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(v11, v13);
        WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)v13);
        v11 += 72;
        v13 += 9;
        v12 -= 72;
      }
      while (v12);
    }
    if (v6)
    {
      if (*(WTF **)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree(v6, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::KeyValuePair<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>,WTF::HashMap<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,unsigned int,WTF::DefaultHash<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>,WTF::HashTraits<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  _DWORD *v27;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = v15 + 16 * v22;
          *(_QWORD *)v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *(_QWORD *)v24 = v25;
          *(_DWORD *)(v24 + 8) = *(_DWORD *)(v6 + 16 * v11 + 8);
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
            {
              v27 = (_DWORD *)*((_QWORD *)v26 + 2);
              *((_QWORD *)v26 + 2) = 0;
              if (v27)
              {
                if (*v27 == 1)
                  JSC::ArrayBufferView::operator delete();
                else
                  --*v27;
              }
              WTF::fastFree(v26, v10);
            }
            else
            {
              --*(_DWORD *)v26;
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

double WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ArrayBufferContents>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 12);
  *(_BYTE *)(v4 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_QWORD *)v4 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  v6 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v6;
  v7 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v4 + 32) = v9;
  *(_QWORD *)(v3 + 24) = v8;
  *(_QWORD *)(v3 + 32) = 0;
  v10 = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v10;
  *(_BYTE *)(v4 + 48) = *(_BYTE *)(v3 + 48);
  *(_BYTE *)(v3 + 48) = 0;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 56 * a2;
      result = WTF::fastMalloc((WTF *)(56 * a2));
      *(_DWORD *)(v2 + 8) = v5 / 0x38;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t)v3;
        do
        {
          *(_BYTE *)(v7 + 48) = 0;
          *(_OWORD *)(v7 + 16) = 0u;
          *(_OWORD *)(v7 + 32) = 0u;
          *(_OWORD *)v7 = 0u;
          *(_QWORD *)v7 = *(_QWORD *)result;
          *(_QWORD *)result = 0;
          v8 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(result + 8);
          *(_QWORD *)(result + 8) = v8;
          v9 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(result + 16);
          *(_QWORD *)(result + 16) = v9;
          v10 = *(_QWORD *)(v7 + 24);
          v11 = *(_QWORD *)(result + 32);
          *(_QWORD *)(v7 + 24) = *(_QWORD *)(result + 24);
          *(_QWORD *)(v7 + 32) = v11;
          *(_QWORD *)(result + 24) = v10;
          *(_QWORD *)(result + 32) = 0;
          v12 = *(_QWORD *)(v7 + 40);
          *(_QWORD *)(v7 + 40) = *(_QWORD *)(result + 40);
          *(_QWORD *)(result + 40) = v12;
          *(_BYTE *)(v7 + 48) = *(_BYTE *)(result + 48);
          *(_BYTE *)(result + 48) = 0;
          JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)result);
          result = v13 + 56;
          v7 += 56;
        }
        while ((WTF *)result != (WTF *)((char *)v3 + 56 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WebCore::CloneSerializer::CloneSerializer(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,char a22)
{
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  JSC::VM *v49;
  unint64_t v50;
  unint64_t v51;
  WebCore *v52;
  WebCore::JSDOMGlobalObject *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  WTF *v57;
  unint64_t v58;
  unint64_t v59;
  JSC::VM *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _BYTE v66[24];
  uint64_t Object;
  unint64_t v68;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x800000000;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  v29 = 0uLL;
  *(_OWORD *)(a1 + 97) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 120) = 0x800000000;
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  v30 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v30)
  {
    v30 = WTF::Thread::initializeCurrentTLS(0);
    v29 = 0uLL;
  }
  v31 = *(_QWORD *)(v30 + 24) + 0x10000;
  *(_OWORD *)(a1 + 248) = v29;
  *(_QWORD *)(a1 + 208) = v31;
  *(_QWORD *)(a1 + 216) = a19;
  *(_QWORD *)(a1 + 224) = a18;
  *(_OWORD *)(a1 + 232) = v29;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 264) = v29;
  *(_OWORD *)(a1 + 280) = v29;
  v32 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v32 += 2;
  *(_QWORD *)(a1 + 304) = v32;
  *(_DWORD *)(a1 + 312) = a20;
  *(_QWORD *)(a1 + 320) = a21;
  *(_QWORD *)(a1 + 328) = a7;
  *(_QWORD *)(a1 + 336) = a8;
  *(_QWORD *)(a1 + 344) = a16;
  *(_QWORD *)(a1 + 352) = a17;
  *(_QWORD *)(a1 + 360) = a11;
  *(_QWORD *)(a1 + 368) = a12;
  *(_QWORD *)(a1 + 376) = a13;
  *(_QWORD *)(a1 + 384) = a14;
  *(_QWORD *)(a1 + 392) = a15;
  *(_BYTE *)(a1 + 400) = a22;
  v33 = *(unsigned int *)(a19 + 8);
  v34 = *(unsigned int *)(a19 + 12);
  v35 = v34 + 4;
  if (v34 + 4 > v33)
  {
    v65 = a6;
    v38 = v33 + (v33 >> 2);
    if (v38 >= 0x10)
      v39 = v38 + 1;
    else
      v39 = 16;
    if (v39 <= v35)
      v40 = v34 + 4;
    else
      v40 = v39;
    if (HIDWORD(v40))
    {
LABEL_64:
      __break(0xC471u);
      JUMPOUT(0x1956F1204);
    }
    v41 = *(void **)a19;
    v42 = (void *)WTF::fastMalloc((WTF *)v40);
    *(_DWORD *)(a19 + 8) = v40;
    *(_QWORD *)a19 = v42;
    memcpy(v42, v41, v34);
    a6 = v65;
    if (v41)
    {
      if (*(void **)a19 == v41)
      {
        *(_QWORD *)a19 = 0;
        *(_DWORD *)(a19 + 8) = 0;
      }
      WTF::fastFree((WTF *)v41, v43);
    }
  }
  v36 = *(unsigned int *)(a19 + 12);
  if (v35 < v36)
    goto LABEL_64;
  *(_DWORD *)(*(_QWORD *)a19 + v36) = 15;
  *(_DWORD *)(a19 + 12) = v35;
  if (*(_DWORD *)(a3 + 12))
  {
    v48 = 0;
    v49 = *(JSC::VM **)a1;
    v68 = 0;
    do
    {
      v50 = WebCore::wrap<WebCore::MessagePort>((uint64_t)v49, v49, *(_QWORD *)(*(_QWORD *)a3 + 8 * v48));
      if ((v50 & 0xFFFE000000000002) == 0)
      {
        Object = JSC::JSCell::getObject((JSC::JSCell *)v50);
        if (Object)
          WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>((uint64_t)v66, (uint64_t *)(a1 + 240), &Object, &v68);
      }
      v68 = ++v48;
    }
    while (v48 < *(unsigned int *)(a3 + 12));
  }
  if (a4[3])
  {
    v51 = 0;
    v52 = *(WebCore **)a1;
    v68 = 0;
    do
    {
      v53 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)a4 + 8 * v51);
      if (v53)
      {
        v54 = WebCore::toJS(v52, (uint64_t)v52, v53, (JSC::ArrayBuffer *)a4);
        if ((v54 & 0xFFFE000000000002) == 0)
        {
          Object = JSC::JSCell::getObject((JSC::JSCell *)v54);
          if (Object)
            WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>((uint64_t)v66, (uint64_t *)(a1 + 248), &Object, &v68);
        }
      }
      v68 = ++v51;
    }
    while (v51 < a4[3]);
  }
  if (*(_DWORD *)(a5 + 12))
  {
    v55 = 0;
    v56 = *(_QWORD *)a1;
    v68 = 0;
    do
    {
      v57 = *(WTF **)(*(_QWORD *)a5 + 8 * v55);
      if (v57)
      {
        v58 = WebCore::wrap<WebCore::ImageBitmap>(v56, v56, v57);
        if ((v58 & 0xFFFE000000000002) == 0)
        {
          Object = JSC::JSCell::getObject((JSC::JSCell *)v58);
          if (Object)
            WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>((uint64_t)v66, (uint64_t *)(a1 + 256), &Object, &v68);
        }
      }
      v68 = ++v55;
    }
    while (v55 < *(unsigned int *)(a5 + 12));
  }
  if (*(_DWORD *)(a6 + 12))
  {
    v44 = 0;
    v45 = *(_QWORD *)a1;
    v68 = 0;
    do
    {
      v46 = *(_QWORD *)(*(_QWORD *)a6 + 8 * v44);
      if (v46)
      {
        v47 = WebCore::wrap<WebCore::OffscreenCanvas>(v45, v45, v46);
        if ((v47 & 0xFFFE000000000002) == 0)
        {
          Object = JSC::JSCell::getObject((JSC::JSCell *)v47);
          if (Object)
            WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>((uint64_t)v66, (uint64_t *)(a1 + 264), &Object, &v68);
        }
      }
      v68 = ++v44;
    }
    while (v44 < *(unsigned int *)(a6 + 12));
  }
  if (*(_DWORD *)(a9 + 12))
  {
    v59 = 0;
    v60 = *(JSC::VM **)a1;
    v68 = 0;
    do
    {
      v61 = WebCore::wrap<WebCore::RTCDataChannel>((int)v60, v60, *(_QWORD *)(*(_QWORD *)a9 + 8 * v59));
      if ((v61 & 0xFFFE000000000002) == 0)
      {
        Object = JSC::JSCell::getObject((JSC::JSCell *)v61);
        if (Object)
          WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>((uint64_t)v66, (uint64_t *)(a1 + 272), &Object, &v68);
      }
      v68 = ++v59;
    }
    while (v59 < *(unsigned int *)(a9 + 12));
  }
  if (*(_DWORD *)(a10 + 12))
  {
    v62 = 0;
    v63 = *(_QWORD *)a1;
    v68 = 0;
    do
    {
      v64 = WebCore::wrap<WebCore::MediaSourceHandle>(v63, v63, *(WTF **)(*(_QWORD *)a10 + 8 * v62));
      if ((v64 & 0xFFFE000000000002) == 0)
      {
        Object = JSC::JSCell::getObject((JSC::JSCell *)v64);
        if (Object)
          WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>((uint64_t)v66, (uint64_t *)(a1 + 280), &Object, &v68);
      }
      v68 = ++v62;
    }
    while (v62 < *(unsigned int *)(a10 + 12));
  }
  return a1;
}

uint64_t WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  __n128 *v13;
  unint64_t v14;
  __n128 *v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::JSObject *,WTF::KeyValuePair<JSC::JSObject *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject *,unsigned int>>,WTF::DefaultHash<JSC::JSObject *>,WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject *>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *a3;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v12 = result & v9;
  v13 = (__n128 *)(v8 + 16 * (result & v9));
  v14 = v13->n128_u64[0];
  if (v13->n128_u64[0])
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v10)
      {
        v19 = 0;
        v20 = v8 + 16 * *(unsigned int *)(v8 - 4);
        goto LABEL_24;
      }
      if (v14 == -1)
        v15 = v13;
      v12 = (v12 + v16) & v9;
      v13 = (__n128 *)(v8 + 16 * v12);
      v14 = v13->n128_u64[0];
      ++v16;
    }
    while (v13->n128_u64[0]);
    if (v15)
    {
      v15->n128_u64[0] = 0;
      v15->n128_u64[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v10 = *a3;
      v13 = v15;
    }
  }
  v13->n128_u64[0] = v10;
  v13->n128_u32[2] = *a4;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_21:
      result = WTF::HashTable<JSC::JSObject *,WTF::KeyValuePair<JSC::JSObject *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject *,unsigned int>>,WTF::DefaultHash<JSC::JSObject *>,WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject *>>::expand(a2, v13);
      v13 = (__n128 *)result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_21;
  }
  v20 = v21 + 16 * v24;
  v19 = 1;
LABEL_24:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 16) = v19;
  return result;
}

void **WebCore::writeLittleEndian<unsigned char>(void **result, void *__src, size_t __n)
{
  uint64_t v5;
  size_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;

  if (__n)
  {
    v5 = (uint64_t)result;
    v6 = *((unsigned int *)result + 2);
    v7 = *((unsigned int *)result + 3);
    v8 = __n + v7;
    if (__n + v7 > v6)
    {
      v10 = v6 + (v6 >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= v8)
        v12 = __n + v7;
      else
        v12 = v11;
      if (HIDWORD(v12))
        goto LABEL_17;
      v13 = *result;
      v14 = (void *)WTF::fastMalloc((WTF *)v12);
      *(_DWORD *)(v5 + 8) = v12;
      *(_QWORD *)v5 = v14;
      memcpy(v14, v13, v7);
      if (v13)
      {
        if (*(void **)v5 == v13)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        WTF::fastFree((WTF *)v13, v15);
      }
    }
    v9 = *(unsigned int *)(v5 + 12);
    if (v8 >= v9)
    {
      result = (void **)memcpy((void *)(*(_QWORD *)v5 + v9), __src, __n);
      *(_DWORD *)(v5 + 12) = v8;
      return result;
    }
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x1956F146CLL);
  }
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Module*>(uint64_t result, unsigned int **a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  v13 = *(_QWORD *)v3;
  v14 = *a2;
  if (*a2)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v16 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v16 = *(_DWORD *)(v3 + 12);
  }
  *(_QWORD *)(v13 + 8 * v12) = v14;
  *(_DWORD *)(v3 + 12) = v16 + 1;
  return result;
}

size_t WebCore::CloneSerializer::write(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  size_t result;
  size_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;

  BytePtr = CFDataGetBytePtr(theData);
  result = CFDataGetLength(theData);
  if ((result & 0x8000000000000000) != 0)
    goto LABEL_35;
  v6 = result;
  v7 = *(_QWORD *)(a1 + 216);
  v8 = *(unsigned int *)(v7 + 8);
  v9 = *(unsigned int *)(v7 + 12);
  v10 = v9 + 4;
  if (v9 + 4 > v8)
  {
    v17 = v8 + (v8 >> 2);
    if (v17 >= 0x10)
      v18 = v17 + 1;
    else
      v18 = 16;
    if (v18 <= v10)
      v19 = v9 + 4;
    else
      v19 = v18;
    if (HIDWORD(v19))
    {
      __break(0xC471u);
      JUMPOUT(0x1956F16FCLL);
    }
    v20 = *(void **)v7;
    v21 = (void *)WTF::fastMalloc((WTF *)v19);
    *(_DWORD *)(v7 + 8) = v19;
    *(_QWORD *)v7 = v21;
    result = (size_t)memcpy(v21, v20, v9);
    if (v20)
    {
      if (*(void **)v7 == v20)
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v20, v22);
    }
  }
  v11 = *(unsigned int *)(v7 + 12);
  if (v10 < v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1956F16ECLL);
  }
  *(_DWORD *)(*(_QWORD *)v7 + v11) = v6;
  *(_DWORD *)(v7 + 12) = v10;
  if (v6)
  {
    v12 = *(_QWORD *)(a1 + 216);
    v13 = *(unsigned int *)(v12 + 8);
    v14 = *(unsigned int *)(v12 + 12);
    v15 = v6 + v14;
    if (v6 + v14 <= v13)
    {
LABEL_6:
      v16 = *(unsigned int *)(v12 + 12);
      if (v15 < v16)
      {
        __break(0xC471u);
        JUMPOUT(0x1956F16F4);
      }
      result = (size_t)memcpy((void *)(*(_QWORD *)v12 + v16), BytePtr, v6);
      *(_DWORD *)(v12 + 12) = v15;
      return result;
    }
    v23 = v13 + (v13 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v15)
      v25 = v6 + v14;
    else
      v25 = v24;
    if (!HIDWORD(v25))
    {
      v26 = *(void **)v12;
      v27 = (void *)WTF::fastMalloc((WTF *)v25);
      *(_DWORD *)(v12 + 8) = v25;
      *(_QWORD *)v12 = v27;
      memcpy(v27, v26, v14);
      if (v26)
      {
        if (*(void **)v12 == v26)
        {
          *(_QWORD *)v12 = 0;
          *(_DWORD *)(v12 + 8) = 0;
        }
        WTF::fastFree((WTF *)v26, v28);
      }
      goto LABEL_6;
    }
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x1956F16E4);
  }
  return result;
}

BOOL WebCore::writeLittleEndian<char16_t>(uint64_t a1, void *__src, unint64_t a3)
{
  unint64_t v3;
  size_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;

  v3 = a3 >> 31;
  if (!(a3 >> 31) && a3)
  {
    v6 = 2 * a3;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 12);
    v9 = 2 * a3 + v8;
    if (v9 > v7)
    {
      v12 = v7 + (v7 >> 2);
      if (v12 >= 0x10)
        v13 = v12 + 1;
      else
        v13 = 16;
      if (v13 <= v9)
        v14 = 2 * a3 + v8;
      else
        v14 = v13;
      if (HIDWORD(v14))
        goto LABEL_18;
      v15 = *(void **)a1;
      v16 = (void *)WTF::fastMalloc((WTF *)v14);
      *(_DWORD *)(a1 + 8) = v14;
      *(_QWORD *)a1 = v16;
      memcpy(v16, v15, v8);
      if (v15)
      {
        if (*(void **)a1 == v15)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v15, v17);
      }
    }
    v10 = *(unsigned int *)(a1 + 12);
    if (v9 >= v10)
    {
      memcpy((void *)(*(_QWORD *)a1 + v10), __src, v6);
      *(_DWORD *)(a1 + 12) = v9;
      return v3 == 0;
    }
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1956F17F4);
  }
  return v3 == 0;
}

uint64_t JSC::BooleanObject::create(JSC::BooleanObject *this, JSC::VM *a2, JSC::Structure *a3)
{
  _QWORD *v4;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v7;

  v4 = (_QWORD *)*((_QWORD *)this + 5046);
  if (!v4)
    v4 = (_QWORD *)JSC::GCClient::Heap::BOOLeanObjectSpaceSlow((JSC::BooleanObject *)((char *)this + 37552));
  SlowCase = v4[3];
  if (SlowCase < v4[4])
    goto LABEL_4;
  SlowCase = v4[5];
  if ((SlowCase & 1) == 0)
  {
    v7 = *(_QWORD *)(SlowCase + 8) ^ v4[6];
    v4[4] = SlowCase + HIDWORD(v7);
    v4[5] = SlowCase + (int)v7;
LABEL_4:
    v4[3] = SlowCase + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  result = JSC::BooleanObject::BooleanObject();
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::CloneDeserializer::readBigInt(WebCore::CloneDeserializer *this, JSC::VM *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  JSC::VM *v7;
  JSC::JSBigInt *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (*((_BYTE *)this + 8))
    goto LABEL_3;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 29);
  v4 = *((_QWORD *)this + 30);
  if ((unint64_t)v3 > v4 - 1)
    goto LABEL_3;
  *((_QWORD *)this + 29) = v3 + 1;
  v6 = *v3;
  if (v6 > 1)
    return 0;
  if ((unint64_t)(v3 + 1) > v4 - 4)
    goto LABEL_3;
  v7 = (JSC::VM *)*(unsigned int *)(v3 + 1);
  *((_QWORD *)this + 29) = v3 + 5;
  v8 = *(JSC::JSBigInt **)(*(_QWORD *)this + 56);
  if ((_DWORD)v7)
  {
    result = JSC::JSBigInt::tryCreateWithLength(v8, v7);
    if (!result)
      goto LABEL_4;
    if (!*((_BYTE *)this + 8))
    {
      v9 = *((_QWORD *)this + 29);
      v10 = *((_QWORD *)this + 30) - 8;
      if (*MEMORY[0x1E0CC10F0])
      {
        v11 = 0;
        v12 = MEMORY[0x1E0CC10F8];
        while (1)
        {
          v13 = (uint64_t *)(v9 + v11);
          if (v9 + v11 > v10)
            break;
          v14 = *v13;
          *((_QWORD *)this + 29) = v13 + 1;
          v15 = *(_QWORD *)(result + 24);
          v16 = *(_QWORD *)(v12 + 56);
          if (v16)
          {
            v17 = (v15 & 0x3FFFFFFFFLL) + v16;
            if (*(_BYTE *)(v12 + 34))
              v15 = v17;
          }
          *(_QWORD *)(v15 + v11) = v14;
          v11 += 8;
          if (8 * (_QWORD)v7 == v11)
            goto LABEL_27;
        }
      }
      else
      {
        v18 = 0;
        v19 = MEMORY[0x1E0CC10F8];
        while (1)
        {
          v20 = (uint64_t *)(v9 + v18);
          if (v9 + v18 > v10)
            break;
          v21 = *v20;
          *((_QWORD *)this + 29) = v20 + 1;
          v22 = *(_QWORD *)(result + 24);
          v23 = *(_QWORD *)(v19 + 56);
          if (v23)
            v22 = (v22 & 0x3FFFFFFFFLL) + v23;
          *(_QWORD *)(v22 + v18) = v21;
          v18 += 8;
          if (8 * (_QWORD)v7 == v18)
          {
LABEL_27:
            *(_BYTE *)(result + 16) = v6 != 0;
            result = JSC::JSBigInt::tryRightTrim((JSC::JSBigInt *)result, *(JSC::VM **)(*(_QWORD *)this + 56));
            if (result)
              return result;
            goto LABEL_4;
          }
        }
      }
    }
LABEL_3:
    result = 0;
LABEL_4:
    *((_BYTE *)this + 8) = 1;
    return result;
  }
  result = JSC::JSBigInt::tryCreateZero(v8, a2);
  if (!result)
    goto LABEL_4;
  return result;
}

uint64_t WebCore::CloneDeserializer::readFile(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t result;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  int v10;
  double *v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  WTF **v16;
  unint64_t v17;
  unint64_t v18;
  const WTF::StringImpl **v19;
  int v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WebCore::ScriptExecutionContext *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::String *v30;
  _DWORD **v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40[5];
  WTF::StringImpl *v41;
  WTF **v42;
  unint64_t v43;
  WTF **v44;
  unint64_t v45;
  WTF **v46;
  unint64_t v47;
  WTF **v48;
  unint64_t v49;
  WTF::StringImpl *v50;

  v48 = 0;
  v49 = 0;
  v4 = WebCore::CloneDeserializer::readStringData((WebCore::CloneDeserializer *)a1, &v48, v40, 0);
  result = 0;
  if (!v4)
    return result;
  v46 = 0;
  v47 = 0;
  v6 = WebCore::CloneDeserializer::readStringData((WebCore::CloneDeserializer *)a1, &v46, v40, 0);
  result = 0;
  if (!v6)
    return result;
  v44 = 0;
  v45 = 0;
  v7 = WebCore::CloneDeserializer::readStringData((WebCore::CloneDeserializer *)a1, &v44, v40, 0);
  result = 0;
  if (!v7)
    return result;
  v42 = 0;
  v43 = 0;
  v10 = WebCore::CloneDeserializer::readStringData((WebCore::CloneDeserializer *)a1, &v42, v40, 0);
  result = 0;
  if (!v10)
    return result;
  if (*(_DWORD *)(a1 + 248) < 7u)
  {
    v13 = 0;
    LOBYTE(v14) = 0;
    v15 = 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 8) || (v11 = *(double **)(a1 + 232), (unint64_t)v11 > *(_QWORD *)(a1 + 240) - 8))
    {
      result = 0;
      *(_BYTE *)(a1 + 8) = 1;
      return result;
    }
    v12 = *v11;
    *(_QWORD *)(a1 + 232) = v11 + 1;
    if (v12 >= 0.0)
      v13 = (uint64_t)v12 & 0xFFFFFFFFFFFFFF00;
    else
      v13 = 0;
    if (v12 >= 0.0)
      v14 = (uint64_t)v12;
    else
      LOBYTE(v14) = 0;
    v15 = v12 >= 0.0;
  }
  v16 = v46;
  v17 = v47;
  if (v47 >= *((unsigned int *)v46 + 3))
    goto LABEL_70;
  if (!*(_DWORD *)(a1 + 332))
    goto LABEL_26;
  v18 = 0;
  v19 = (const WTF::StringImpl **)((char *)*v46 + 16 * v47);
  do
  {
    v20 = WTF::equal(*(WTF **)(*(_QWORD *)(a1 + 320) + 8 * v18), *v19, v9);
    v21 = *(unsigned int *)(a1 + 332);
    if (v20)
      break;
    ++v18;
  }
  while (v18 < v21);
  if (v18 >= v21)
  {
LABEL_26:
    v22 = 0;
    goto LABEL_27;
  }
  if (v18 >= *(unsigned int *)(a1 + 348))
  {
LABEL_70:
    __break(0xC471u);
    JUMPOUT(0x1956F1E18);
  }
  v22 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 336) + 8 * v18);
  if (!v22)
  {
LABEL_27:
    LOBYTE(v23) = 1;
    goto LABEL_28;
  }
  *(_DWORD *)v22 += 2;
  v41 = v22;
  v23 = *((_DWORD *)v22 + 1);
  if (!v23)
  {
LABEL_28:
    if (v49 >= *((unsigned int *)v48 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1956F1E20);
    }
    v24 = (WTF::StringImpl *)*((_QWORD *)*v48 + 2 * v49);
    if (v24)
      *(_DWORD *)v24 += 2;
    v41 = v24;
    if ((v23 & 1) == 0)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v8);
      else
        *(_DWORD *)v22 -= 2;
    }
    goto LABEL_34;
  }
  v24 = v22;
LABEL_34:
  if (*(_BYTE *)(a1 + 225))
  {
    v25 = WebCore::executionContext(*(WebCore **)a1, v8);
    if (v17 >= *((unsigned int *)v16 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1956F1E28);
    }
    v26 = (WebCore::ScriptExecutionContext *)v25;
    v27 = (WTF::StringImpl *)*((_QWORD *)*v16 + 2 * v17);
    if (v27)
      *(_DWORD *)v27 += 2;
    v50 = v27;
    MEMORY[0x19AEA52D4](v40, &v50, 0);
    v29 = v50;
    v50 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
    if (v45 >= *((unsigned int *)v44 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1956F1E30);
    }
    if (v43 >= *((unsigned int *)v42 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1956F1E38);
    }
    v30 = (WTF *)((char *)*v44 + 16 * v45);
    v31 = (_DWORD **)((char *)*v42 + 16 * v43);
    v32 = bmalloc::api::isoAllocate();
    v34 = (_QWORD *)WebCore::Blob::Blob(v32, v33, v26, (const WTF::URL *)v40, v30, 0, 0, 0, (const WTF::URL *)&v41);
    *v34 = off_1E33AE6D8;
    v34[3] = &unk_1E33AE718;
    v35 = v34 + 3;
    v36 = v41;
    if (v41)
      *(_DWORD *)v41 += 2;
    *(_QWORD *)(v32 + 128) = v36;
    *(_QWORD *)(v32 + 136) = 0;
    v37 = *v31;
    if (*v31)
      *v37 += 2;
    *(_QWORD *)(v32 + 144) = v37;
    *(_QWORD *)(v32 + 152) = v14 | v13;
    *(_BYTE *)(v32 + 160) = v15;
    *(_BYTE *)(v32 + 168) = 0;
    *(_BYTE *)(v32 + 176) = 0;
    *(_WORD *)(v32 + 184) = 0;
    WebCore::ActiveDOMObject::suspendIfNeeded(v35);
    v38 = (_DWORD *)*a2;
    *a2 = v32;
    if (v38)
    {
      if (v38[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
      else
        --v38[4];
    }
    v39 = v40[0];
    v40[0] = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v8);
      else
        *(_DWORD *)v39 -= 2;
    }
    v24 = v41;
  }
  v41 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v8);
    else
      *(_DWORD *)v24 -= 2;
  }
  return 1;
}

BOOL JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::zeroFill(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  size_t v5;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    goto LABEL_21;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    goto LABEL_21;
  v3 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v3 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v2 & 0x3FFFFFFFFLL) + v3))
    goto LABEL_21;
  v4 = *(_BYTE *)(a1 + 6);
  if ((v4 & 3) == 0)
  {
    v5 = *(_QWORD *)(a1 + 16);
    return JSC::ArrayBufferView::zeroRangeImpl((JSC::ArrayBufferView *)a1, 0, v5);
  }
  if (*(_BYTE *)(v1 + 64) && (v12 = *(_QWORD *)(v1 + 32)) != 0)
  {
    v7 = atomic_load((unint64_t *)(v12 + 32));
    v4 = *(_BYTE *)(a1 + 6);
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 48);
  }
  v8 = *(_QWORD *)(a1 + 8);
  if ((v4 & 4) == 0)
  {
    v9 = *(_QWORD *)(a1 + 16) + v8 <= v7 && v7 >= v8;
    if (v9)
      v5 = 0;
    else
      v5 = *(_QWORD *)(a1 + 16);
    return JSC::ArrayBufferView::zeroRangeImpl((JSC::ArrayBufferView *)a1, 0, v5);
  }
  v9 = v7 >= v8;
  v10 = v7 - v8;
  if (v9)
  {
LABEL_21:
    v5 = 0;
    return JSC::ArrayBufferView::zeroRangeImpl((JSC::ArrayBufferView *)a1, 0, v5);
  }
  if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
    LOBYTE(v11) = 0;
  else
    v11 = qword_1968DFB88[(char)(*(_BYTE *)(a1 + 4) - 4)];
  v5 = (-1 << v11) & v10;
  return JSC::ArrayBufferView::zeroRangeImpl((JSC::ArrayBufferView *)a1, 0, v5);
}

uint64_t WebCore::CloneDeserializer::readNullableString(uint64_t a1, WTF::StringImpl **a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  int *v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF **v13;
  unint64_t v14;
  char v15;

  if (*(_DWORD *)(a1 + 248) < 0xEu)
  {
    if (*(_BYTE *)(a1 + 8))
      goto LABEL_4;
    v5 = *(int **)(a1 + 232);
    if ((unint64_t)v5 > *(_QWORD *)(a1 + 240) - 4)
      goto LABEL_4;
    v7 = *v5;
    v6 = *v5;
    *(_QWORD *)(a1 + 232) = v5 + 1;
    if (v7 <= 1)
    {
      if (!v6)
        goto LABEL_12;
      return 1;
    }
    return 0;
  }
  if (*(_BYTE *)(a1 + 8) || (v3 = *(unsigned __int8 **)(a1 + 232), (unint64_t)v3 > *(_QWORD *)(a1 + 240) - 1))
  {
LABEL_4:
    v4 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    return v4;
  }
  *(_QWORD *)(a1 + 232) = v3 + 1;
  v8 = *v3;
  if (v8 > 1)
    return 0;
  if (v8)
    return 1;
LABEL_12:
  v13 = 0;
  v14 = 0;
  result = WebCore::CloneDeserializer::readStringData((WebCore::CloneDeserializer *)a1, &v13, &v15, 0);
  v4 = result;
  if (!(_DWORD)result)
    return v4;
  if (v14 < *((unsigned int *)v13 + 3))
  {
    v11 = (WTF::StringImpl *)*((_QWORD *)*v13 + 2 * v14);
    if (v11)
      *(_DWORD *)v11 += 2;
    v12 = *a2;
    *a2 = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    return v4;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CloneDeserializer::readStringIndex(WebCore::CloneDeserializer *this)
{
  unsigned int v1;
  _BYTE *v2;
  unsigned int v3;
  __int16 *v4;
  uint64_t v5;
  int *v6;
  int v7;
  __int16 v9;

  v1 = *((_DWORD *)this + 67);
  if (v1 > 0xFF)
  {
    if (HIWORD(v1))
    {
      if (!*((_BYTE *)this + 8))
      {
        v6 = (int *)*((_QWORD *)this + 29);
        if ((unint64_t)v6 <= *((_QWORD *)this + 30) - 4)
        {
          v7 = *v6;
          LODWORD(v2) = *v6;
          *((_QWORD *)this + 29) = v6 + 1;
          v3 = v7 & 0xFFFFFF00;
          goto LABEL_12;
        }
      }
    }
    else if (!*((_BYTE *)this + 8))
    {
      v4 = (__int16 *)*((_QWORD *)this + 29);
      if ((unint64_t)v4 <= *((_QWORD *)this + 30) - 2)
      {
        v9 = *v4;
        LOWORD(v2) = *v4;
        *((_QWORD *)this + 29) = v4 + 1;
        v3 = v9 & 0xFF00;
        goto LABEL_12;
      }
    }
  }
  else if (!*((_BYTE *)this + 8))
  {
    v2 = (_BYTE *)*((_QWORD *)this + 29);
    if ((unint64_t)v2 <= *((_QWORD *)this + 30) - 1)
    {
      v3 = 0;
      *((_QWORD *)this + 29) = v2 + 1;
      LOBYTE(v2) = *v2;
LABEL_12:
      v5 = 0x100000000;
      return v5 | v3 | v2;
    }
  }
  LOBYTE(v2) = 0;
  v3 = 0;
  v5 = 0;
  *((_BYTE *)this + 8) = 1;
  return v5 | v3 | v2;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CloneDeserializer::readTerminal(void)::{lambda(JSC::Wasm::Memory::GrowSuccess,JSC::PageCount,JSC::PageCount)#1},void,JSC::Wasm::Memory::GrowSuccess,JSC::PageCount,JSC::PageCount>::call()
{
  return JSC::JSWebAssemblyMemory::growSuccessCallback();
}

WebCore::OffscreenCanvas *WebCore::OffscreenCanvas::deref(WebCore::OffscreenCanvas *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::OffscreenCanvas::~OffscreenCanvas(this);
    return (WebCore::OffscreenCanvas *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

unsigned int *WTF::Vector<JSC::Identifier,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast(unsigned int *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result[3];
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = v2 - 1;
    v5 = *(_QWORD *)result;
    result = *(unsigned int **)(*(_QWORD *)result + 8 * v4);
    *(_QWORD *)(v5 + 8 * v4) = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *result -= 2;
    }
    v3[3] = v4;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unint64_t JSC::tryAllocateCell<JSC::JSImmutableButterfly>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  unint64_t v5;

  if (((a2 + 15) & 0xFFFFFFFFFFFFFFF0) > 0x1F60
    || (v2 = *(_QWORD *)(a1 + 8 * ((unint64_t)(a2 + 15) >> 4) + 10880)) == 0)
  {
    result = JSC::CompleteSubspace::allocateSlow();
    goto LABEL_5;
  }
  v3 = *(unsigned int *)(v2 + 60);
  result = *(_QWORD *)(v2 + 24);
  if (result < *(_QWORD *)(v2 + 32))
  {
    *(_QWORD *)(v2 + 24) = result + v3;
    goto LABEL_5;
  }
  result = *(_QWORD *)(v2 + 40);
  if ((result & 1) != 0)
  {
    JSC::sanitizeStackForVM();
    result = JSC::LocalAllocator::allocateSlowCase();
LABEL_5:
    if (!result)
      return result;
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 32) = result + HIDWORD(v5);
  *(_QWORD *)(v2 + 40) = result + (int)v5;
  *(_QWORD *)(v2 + 24) = result + v3;
LABEL_6:
  *(_DWORD *)result = 0;
  return result;
}

_DWORD *JSC::JSImmutableButterfly::JSImmutableButterfly(_DWORD *a1, unint64_t a2, unsigned int a3)
{
  int v4;

  v4 = *(_DWORD *)(a2 + 8);
  *a1 = a2 >> 4;
  a1[1] = v4;
  a1[2] = a3;
  a1[3] = a3;
  if (a3 && (a1[1] & 0xE) == 8)
    bzero(a1 + 4, 8 * a3);
  return a1;
}

uint64_t JSC::JSValue::strictEqual(uint64_t a1, unint64_t a2, unint64_t a3)
{
  double v3;
  double v4;
  int v6;
  WTF *v7;

  if (a2 < 0xFFFE000000000000)
  {
    if (a2 >> 49 && a3 >> 49)
    {
      *(_QWORD *)&v3 = a2 - 0x2000000000000;
      if (a3 >= 0xFFFE000000000000)
      {
        v4 = (double)(int)a3;
        return v3 == v4;
      }
LABEL_8:
      *(_QWORD *)&v4 = a3 - 0x2000000000000;
      return v3 == v4;
    }
  }
  else
  {
    if (a3 >= 0xFFFE000000000000)
      return a2 == a3;
    if (a3 >> 49)
    {
      v3 = (double)(int)a2;
      goto LABEL_8;
    }
  }
  if (((a2 | a3) & 0xFFFE000000000002) != 0)
    return a2 == a3;
  v6 = *(unsigned __int8 *)(a2 + 5);
  if (v6 == 3)
  {
    if (*(_BYTE *)(a3 + 5) == 3)
      return JSC::JSBigInt::equals((JSC::JSBigInt *)a2, (JSC::JSBigInt *)a3, (JSC::JSBigInt *)a3);
    return a2 == a3;
  }
  if (v6 != 2 || *(_BYTE *)(a3 + 5) != 2)
    return a2 == a3;
  v7 = *(WTF **)(a2 + 8);
  if ((v7 & 1) != 0 || (*(_QWORD *)(a3 + 8) & 1) != 0)
    return JSC::JSString::equalSlowCase();
  else
    return WTF::equal(v7, *(const WTF::StringImpl **)(a3 + 8), (const WTF::StringImpl *)a3);
}

uint64_t WebCore::SerializedScriptValue::Internals::Internals(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v2;
  v3 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = v3;
  v4 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(result + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(result + 32) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(result + 36) = v4;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  v5 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = 0;
  *(_DWORD *)(result + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(result + 52) = v5;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  v6 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(result + 56) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = 0;
  *(_DWORD *)(result + 64) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = 0;
  *(_DWORD *)(result + 68) = v6;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  v7 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(result + 72) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = 0;
  *(_DWORD *)(result + 80) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = 0;
  *(_DWORD *)(result + 84) = v7;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  v8 = a2[11];
  a2[11] = 0;
  *(_QWORD *)(result + 88) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = 0;
  *(_DWORD *)(result + 96) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = 0;
  *(_DWORD *)(result + 100) = v8;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  v9 = a2[13];
  a2[13] = 0;
  *(_QWORD *)(result + 104) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = 0;
  *(_DWORD *)(result + 112) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = 0;
  *(_DWORD *)(result + 116) = v9;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  v10 = a2[15];
  a2[15] = 0;
  *(_QWORD *)(result + 120) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = 0;
  *(_DWORD *)(result + 128) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = 0;
  *(_DWORD *)(result + 132) = v10;
  v11 = a2[17];
  a2[17] = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 136) = v11;
  v12 = a2[18];
  a2[18] = 0;
  *(_QWORD *)(result + 144) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = 0;
  *(_DWORD *)(result + 152) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = 0;
  *(_DWORD *)(result + 156) = v12;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 168) = 0;
  v13 = a2[20];
  a2[20] = 0;
  *(_QWORD *)(result + 160) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = 0;
  *(_DWORD *)(result + 168) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = 0;
  *(_DWORD *)(result + 172) = v13;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  v14 = a2[22];
  a2[22] = 0;
  *(_QWORD *)(result + 176) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = 0;
  *(_DWORD *)(result + 184) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = 0;
  *(_DWORD *)(result + 188) = v14;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = 0;
  v15 = a2[24];
  a2[24] = 0;
  *(_QWORD *)(result + 192) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = 0;
  *(_DWORD *)(result + 200) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = 0;
  *(_DWORD *)(result + 204) = v15;
  v16 = a2[26];
  a2[26] = 0;
  *(_QWORD *)(result + 208) = v16;
  v17 = a2[27];
  a2[27] = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 216) = v17;
  v18 = a2[28];
  a2[28] = 0;
  *(_QWORD *)(result + 224) = v18;
  LODWORD(v18) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = 0;
  *(_DWORD *)(result + 232) = v18;
  LODWORD(v18) = *((_DWORD *)a2 + 59);
  *((_DWORD *)a2 + 59) = 0;
  *(_DWORD *)(result + 236) = v18;
  *(_QWORD *)(result + 240) = a2[30];
  return result;
}

uint64_t WTF::HashSet<JSC::ArrayBuffer *,WTF::DefaultHash<JSC::ArrayBuffer *>,WTF::HashTraits<JSC::ArrayBuffer *>,WTF::HashTableTraits>::contains(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  _BOOL8 v9;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = *(_QWORD *)(a1 + 8 * v6);
  if (v7 == a2)
    return 1;
  v8 = 1;
  do
  {
    v9 = v7 != 0;
    if (!v7)
      break;
    v6 = (v6 + v8) & v2;
    v7 = *(_QWORD *)(a1 + 8 * v6);
    ++v8;
  }
  while (v7 != a2);
  return v9;
}

void std::make_unique[abi:sn180100]<WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned long>(uint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x10);
  v5 = *a2;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  if (!v5)
    goto LABEL_5;
  if (v5 < 0x4924925)
  {
    v6 = 56 * v5;
    v7 = (void *)WTF::fastMalloc((WTF *)(56 * v5));
    *(_DWORD *)(v4 + 8) = v6 / 0x38;
    *(_QWORD *)v4 = v7;
    v8 = *(_DWORD *)(v4 + 12);
    if (v8)
      bzero(v7, 56 * ((56 * (unint64_t)v8 - 56) / 0x38) + 56);
LABEL_5:
    *a1 = v4;
    return;
  }
  __break(0xC471u);
}

uint64_t std::make_unique[abi:sn180100]<WTF::Vector<WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int **v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  result = WTF::fastMalloc((WTF *)0x10);
  v5 = result;
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v6;
  if (!(_DWORD)v6)
  {
LABEL_2:
    *a1 = v5;
    return result;
  }
  if (!(v6 >> 29))
  {
    result = WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(v5 + 8) = v6;
    *(_QWORD *)v5 = result;
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7)
    {
      v8 = *(unsigned int ***)a2;
      v9 = *(_QWORD *)a2 + 8 * v7;
      do
      {
        v10 = *v8;
        if (*v8)
        {
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
        *(_QWORD *)result = v10;
        result += 8;
        ++v8;
      }
      while (v8 != (unsigned int **)v9);
    }
    goto LABEL_2;
  }
  __break(0xC471u);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN3WTF6VectorIN3JSC19ArrayBufferContentsELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS_14default_deleteISF_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSI_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  uint64_t v3;
  WTF *v4;
  JSC::ArrayBufferContents *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = *((unsigned int *)v2 + 3);
    if ((_DWORD)v3)
    {
      v5 = *(JSC::ArrayBufferContents **)v2;
      v6 = 56 * v3;
      do
      {
        JSC::ArrayBufferContents::~ArrayBufferContents(v5);
        v5 = (JSC::ArrayBufferContents *)(v7 + 56);
        v6 -= 56;
      }
      while (v6);
    }
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      WTF::fastFree(v4, a2);
    }
    WTF::fastFree(v2, a2);
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN3WTF6VectorIN3JSC19ArrayBufferContentsELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS_14default_deleteISF_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSI_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CloneDeserializer::CloneDeserializer(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t *a19, uint64_t *a20,uint64_t *a21,uint64_t *a22)
{
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  char **v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v61;
  _QWORD *v63;
  uint64_t v64;
  _DWORD **v65;
  uint64_t v66;
  _DWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _DWORD **v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x800000000;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_OWORD *)(a1 + 97) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 120) = 0x800000000;
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  v29 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v29)
    v29 = WTF::Thread::initializeCurrentTLS(0);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(v29 + 24) + 0x10000;
  *(_QWORD *)(a1 + 216) = a3;
  v30 = *(unsigned int *)(16 * (*a3 & 0xFFFFFFFE) + 0x4C);
  v31 = *(_DWORD *)(16 * (*a3 & 0xFFFFFFFE) + 0x4C) != 0;
  v32 = (char **)(16 * v30);
  if ((_DWORD)v30 && v32 != &WebCore::JSDOMGlobalObject::s_info)
  {
    v61 = 16 * v30;
    do
    {
      v61 = *(_QWORD *)(v61 + 16);
      v31 = v61 != 0;
    }
    while ((char **)v61 != &WebCore::JSDOMGlobalObject::s_info && v61 != 0);
  }
  *(_BYTE *)(a1 + 224) = v31;
  v33 = v32 != &WebCore::JSIDBSerializationGlobalObject::s_info;
  if (!v31)
    v33 = 0;
  *(_BYTE *)(a1 + 225) = v33;
  v34 = *(_QWORD *)a6 + *(unsigned int *)(a6 + 12);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)a6;
  *(_QWORD *)(a1 + 240) = v34;
  *(_QWORD *)(a1 + 248) = -1;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = a4;
  *(_QWORD *)(a1 + 296) = a5;
  v35 = (_QWORD *)(a1 + 304);
  if (a5)
  {
    v73 = *(unsigned int *)(a5 + 12);
    *v35 = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 316) = v73;
    if ((_DWORD)v73)
    {
      if (v73 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1956F2F0CLL);
      }
      v74 = (void *)WTF::fastMalloc((WTF *)(8 * v73));
      *(_DWORD *)(a1 + 312) = v73;
      *(_QWORD *)(a1 + 304) = v74;
      bzero(v74, 8 * *(unsigned int *)(a1 + 316));
    }
  }
  else
  {
    *v35 = 0;
    *(_QWORD *)(a1 + 312) = 0;
  }
  v36 = *(unsigned int *)(a7 + 12);
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 332) = v36;
  if ((_DWORD)v36)
  {
    if (v36 >> 29)
      goto LABEL_77;
    v63 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v36));
    *(_DWORD *)(a1 + 328) = v36;
    *(_QWORD *)(a1 + 320) = v63;
    v64 = *(unsigned int *)(a7 + 12);
    if ((_DWORD)v64)
    {
      v65 = *(_DWORD ***)a7;
      v66 = 8 * v64;
      do
      {
        v67 = *v65;
        if (*v65)
          *v67 += 2;
        *v63++ = v67;
        ++v65;
        v66 -= 8;
      }
      while (v66);
    }
  }
  v37 = *(unsigned int *)(a8 + 12);
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 348) = v37;
  if ((_DWORD)v37)
  {
    if (v37 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1956F2F04);
    }
    v68 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v37));
    *(_DWORD *)(a1 + 344) = v37;
    *(_QWORD *)(a1 + 336) = v68;
    v69 = *(unsigned int *)(a8 + 12);
    if ((_DWORD)v69)
    {
      v70 = *(_DWORD ***)a8;
      v71 = 8 * v69;
      do
      {
        v72 = *v70;
        if (*v70)
          *v72 += 2;
        *v68++ = v72;
        ++v70;
        v71 -= 8;
      }
      while (v71);
    }
  }
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = a9;
  v38 = *a10;
  *a10 = 0;
  *(_QWORD *)(a1 + 360) = v38;
  LODWORD(v38) = *((_DWORD *)a10 + 2);
  *((_DWORD *)a10 + 2) = 0;
  *(_DWORD *)(a1 + 368) = v38;
  v39 = *((unsigned int *)a10 + 3);
  *((_DWORD *)a10 + 3) = 0;
  *(_DWORD *)(a1 + 372) = v39;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 388) = v39;
  if ((_DWORD)v39)
  {
    if (v39 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1956F2F14);
    }
    v75 = (void *)WTF::fastMalloc((WTF *)(8 * v39));
    *(_DWORD *)(a1 + 384) = v39;
    *(_QWORD *)(a1 + 376) = v75;
    bzero(v75, 8 * *(unsigned int *)(a1 + 388));
  }
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  v40 = *a11;
  *a11 = 0;
  *(_QWORD *)(a1 + 392) = v40;
  LODWORD(v40) = *((_DWORD *)a11 + 2);
  *((_DWORD *)a11 + 2) = 0;
  *(_DWORD *)(a1 + 400) = v40;
  v41 = *((unsigned int *)a11 + 3);
  *((_DWORD *)a11 + 3) = 0;
  *(_DWORD *)(a1 + 404) = v41;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 420) = v41;
  if ((_DWORD)v41)
  {
    if (v41 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1956F2F1CLL);
    }
    v76 = (void *)WTF::fastMalloc((WTF *)(8 * v41));
    *(_DWORD *)(a1 + 416) = v41;
    *(_QWORD *)(a1 + 408) = v76;
    bzero(v76, 8 * *(unsigned int *)(a1 + 420));
  }
  *(_QWORD *)(a1 + 424) = a12;
  *(_QWORD *)(a1 + 432) = a13;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  v42 = *a14;
  *a14 = 0;
  *(_QWORD *)(a1 + 440) = v42;
  LODWORD(v42) = *((_DWORD *)a14 + 2);
  *((_DWORD *)a14 + 2) = 0;
  *(_DWORD *)(a1 + 448) = v42;
  v43 = *((unsigned int *)a14 + 3);
  *((_DWORD *)a14 + 3) = 0;
  *(_DWORD *)(a1 + 452) = v43;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 468) = v43;
  if ((_DWORD)v43)
  {
    if (v43 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1956F2F24);
    }
    v77 = (void *)WTF::fastMalloc((WTF *)(8 * v43));
    *(_DWORD *)(a1 + 464) = v43;
    *(_QWORD *)(a1 + 456) = v77;
    bzero(v77, 8 * *(unsigned int *)(a1 + 468));
  }
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  v44 = *a15;
  *a15 = 0;
  *(_QWORD *)(a1 + 472) = v44;
  LODWORD(v44) = *((_DWORD *)a15 + 2);
  *((_DWORD *)a15 + 2) = 0;
  *(_DWORD *)(a1 + 480) = v44;
  v45 = *((unsigned int *)a15 + 3);
  *((_DWORD *)a15 + 3) = 0;
  *(_DWORD *)(a1 + 484) = v45;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 500) = v45;
  if ((_DWORD)v45)
  {
    if (v45 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1956F2F2CLL);
    }
    v78 = (void *)WTF::fastMalloc((WTF *)(8 * v45));
    *(_DWORD *)(a1 + 496) = v45;
    *(_QWORD *)(a1 + 488) = v78;
    bzero(v78, 8 * *(unsigned int *)(a1 + 500));
  }
  *(_QWORD *)(a1 + 504) = a16;
  *(_QWORD *)(a1 + 512) = a17;
  v46 = 0uLL;
  *(_OWORD *)(a1 + 520) = 0u;
  v47 = *a18;
  *a18 = 0;
  *(_QWORD *)(a1 + 520) = v47;
  LODWORD(v47) = *((_DWORD *)a18 + 2);
  *((_DWORD *)a18 + 2) = 0;
  *(_DWORD *)(a1 + 528) = v47;
  v48 = *((unsigned int *)a18 + 3);
  *((_DWORD *)a18 + 3) = 0;
  *(_DWORD *)(a1 + 532) = v48;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_DWORD *)(a1 + 548) = v48;
  if ((_DWORD)v48)
  {
    if (v48 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1956F2F34);
    }
    v79 = (void *)WTF::fastMalloc((WTF *)(8 * v48));
    *(_DWORD *)(a1 + 544) = v48;
    *(_QWORD *)(a1 + 536) = v79;
    bzero(v79, 8 * *(unsigned int *)(a1 + 548));
    v46 = 0uLL;
  }
  *(_OWORD *)(a1 + 552) = v46;
  v49 = *a19;
  *a19 = 0;
  *(_QWORD *)(a1 + 552) = v49;
  LODWORD(v49) = *((_DWORD *)a19 + 2);
  *((_DWORD *)a19 + 2) = 0;
  *(_DWORD *)(a1 + 560) = v49;
  v50 = *((unsigned int *)a19 + 3);
  *((_DWORD *)a19 + 3) = 0;
  *(_DWORD *)(a1 + 564) = v50;
  *(_OWORD *)(a1 + 568) = v46;
  *(_DWORD *)(a1 + 580) = v50;
  if ((_DWORD)v50)
  {
    if (v50 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1956F2F3CLL);
    }
    v80 = (void *)WTF::fastMalloc((WTF *)(8 * v50));
    *(_DWORD *)(a1 + 576) = v50;
    *(_QWORD *)(a1 + 568) = v80;
    bzero(v80, 8 * *(unsigned int *)(a1 + 580));
  }
  v51 = 0uLL;
  *(_OWORD *)(a1 + 584) = 0u;
  v52 = *a20;
  *a20 = 0;
  *(_QWORD *)(a1 + 584) = v52;
  LODWORD(v52) = *((_DWORD *)a20 + 2);
  *((_DWORD *)a20 + 2) = 0;
  *(_DWORD *)(a1 + 592) = v52;
  v53 = *((unsigned int *)a20 + 3);
  *((_DWORD *)a20 + 3) = 0;
  *(_DWORD *)(a1 + 596) = v53;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_DWORD *)(a1 + 612) = v53;
  if ((_DWORD)v53)
  {
    if (v53 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1956F2F44);
    }
    v81 = (void *)WTF::fastMalloc((WTF *)(8 * v53));
    *(_DWORD *)(a1 + 608) = v53;
    *(_QWORD *)(a1 + 600) = v81;
    bzero(v81, 8 * *(unsigned int *)(a1 + 612));
    v51 = 0uLL;
  }
  *(_OWORD *)(a1 + 616) = v51;
  v54 = *a21;
  *a21 = 0;
  *(_QWORD *)(a1 + 616) = v54;
  LODWORD(v54) = *((_DWORD *)a21 + 2);
  *((_DWORD *)a21 + 2) = 0;
  *(_DWORD *)(a1 + 624) = v54;
  v55 = *((unsigned int *)a21 + 3);
  *((_DWORD *)a21 + 3) = 0;
  *(_DWORD *)(a1 + 628) = v55;
  *(_OWORD *)(a1 + 632) = v51;
  *(_DWORD *)(a1 + 644) = v55;
  if ((_DWORD)v55)
  {
    if (v55 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1956F2F4CLL);
    }
    v82 = (void *)WTF::fastMalloc((WTF *)(8 * v55));
    *(_DWORD *)(a1 + 640) = v55;
    *(_QWORD *)(a1 + 632) = v82;
    bzero(v82, 8 * *(unsigned int *)(a1 + 644));
  }
  *(_OWORD *)(a1 + 648) = 0u;
  v56 = *a22;
  *a22 = 0;
  *(_QWORD *)(a1 + 648) = v56;
  LODWORD(v56) = *((_DWORD *)a22 + 2);
  *((_DWORD *)a22 + 2) = 0;
  *(_DWORD *)(a1 + 656) = v56;
  v57 = *((unsigned int *)a22 + 3);
  *((_DWORD *)a22 + 3) = 0;
  *(_DWORD *)(a1 + 660) = v57;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 676) = v57;
  if ((_DWORD)v57)
  {
    if (!(v57 >> 29))
    {
      v83 = (void *)WTF::fastMalloc((WTF *)(8 * v57));
      *(_DWORD *)(a1 + 672) = v57;
      *(_QWORD *)(a1 + 664) = v83;
      bzero(v83, 8 * *(unsigned int *)(a1 + 676));
      goto LABEL_20;
    }
LABEL_77:
    __break(0xC471u);
    JUMPOUT(0x1956F2EFCLL);
  }
LABEL_20:
  if (*(_BYTE *)(a1 + 8) || (v58 = *(unsigned int **)(a1 + 232), (unint64_t)v58 > *(_QWORD *)(a1 + 240) - 4))
  {
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    v59 = *v58;
    *(_QWORD *)(a1 + 232) = v58 + 1;
    *(_DWORD *)(a1 + 248) = v59 & 0xFFFFFF;
    *(_DWORD *)(a1 + 252) = HIBYTE(v59);
  }
  return a1;
}

void WebCore::CompressionStreamBuiltinsWrapper::~CompressionStreamBuiltinsWrapper(WebCore::CompressionStreamBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::CompressionStreamBuiltinsWrapper::~CompressionStreamBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  *(_QWORD *)this = &off_1E3393EA8;
  v3 = *((_QWORD *)this + 19);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 19) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 15);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 15) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 11);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 11) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::DecompressionStreamBuiltinsWrapper::~DecompressionStreamBuiltinsWrapper(WebCore::DecompressionStreamBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::DecompressionStreamBuiltinsWrapper::~DecompressionStreamBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  *(_QWORD *)this = &off_1E3393ED8;
  v3 = *((_QWORD *)this + 19);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 19) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 15);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 15) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 11);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 11) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::ByteLengthQueuingStrategyBuiltinsWrapper::~ByteLengthQueuingStrategyBuiltinsWrapper(WebCore::ByteLengthQueuingStrategyBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::ByteLengthQueuingStrategyBuiltinsWrapper::~ByteLengthQueuingStrategyBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  *(_QWORD *)this = &off_1E3393F08;
  v3 = *((_QWORD *)this + 19);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 19) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 15);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 15) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 11);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 11) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::CountQueuingStrategyBuiltinsWrapper::~CountQueuingStrategyBuiltinsWrapper(WebCore::CountQueuingStrategyBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::CountQueuingStrategyBuiltinsWrapper::~CountQueuingStrategyBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  *(_QWORD *)this = &off_1E3393F38;
  v3 = *((_QWORD *)this + 19);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 19) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 15);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 15) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 11);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 11) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::ReadableByteStreamControllerBuiltinsWrapper::~ReadableByteStreamControllerBuiltinsWrapper(WebCore::ReadableByteStreamControllerBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::ReadableByteStreamControllerBuiltinsWrapper::~ReadableByteStreamControllerBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  *(_QWORD *)this = &off_1E3393F68;
  v3 = *((_QWORD *)this + 37);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 37) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 33);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 33) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 29);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 29) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 25);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 25) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 21);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 3;
    *((_QWORD *)this + 21) = 0;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = *((_QWORD *)this + 17);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 3;
    *((_QWORD *)this + 17) = 0;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, a2);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::ReadableByteStreamInternalsBuiltinsWrapper::~ReadableByteStreamInternalsBuiltinsWrapper(WebCore::ReadableByteStreamInternalsBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::ReadableByteStreamInternalsBuiltinsWrapper::~ReadableByteStreamInternalsBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  _DWORD *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;

  *(_QWORD *)this = &off_1E3393F98;
  v3 = *((_QWORD *)this + 205);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 205) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 201);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 201) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 197);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 197) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 193);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 193) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 190);
  *((_QWORD *)this + 190) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 189);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 3;
    *((_QWORD *)this + 189) = 0;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = *((_QWORD *)this + 185);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 3;
    *((_QWORD *)this + 185) = 0;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = *((_QWORD *)this + 181);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 3;
    *((_QWORD *)this + 181) = 0;
  }
  v16 = (_DWORD *)*((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = *((_QWORD *)this + 177);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 3;
    *((_QWORD *)this + 177) = 0;
  }
  v18 = (_DWORD *)*((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = *((_QWORD *)this + 173);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 3;
    *((_QWORD *)this + 173) = 0;
  }
  v20 = (_DWORD *)*((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = 0;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  v21 = *((_QWORD *)this + 169);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 3;
    *((_QWORD *)this + 169) = 0;
  }
  v22 = (_DWORD *)*((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  v23 = *((_QWORD *)this + 165);
  if (v23)
  {
    *(_QWORD *)(v23 + 8) = 3;
    *((_QWORD *)this + 165) = 0;
  }
  v24 = (_DWORD *)*((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  v25 = *((_QWORD *)this + 161);
  if (v25)
  {
    *(_QWORD *)(v25 + 8) = 3;
    *((_QWORD *)this + 161) = 0;
  }
  v26 = (_DWORD *)*((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = 0;
  if (v26)
  {
    if (v26[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
    else
      --v26[2];
  }
  v27 = *((_QWORD *)this + 157);
  if (v27)
  {
    *(_QWORD *)(v27 + 8) = 3;
    *((_QWORD *)this + 157) = 0;
  }
  v28 = (_DWORD *)*((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v28)
  {
    if (v28[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
    else
      --v28[2];
  }
  v29 = *((_QWORD *)this + 153);
  if (v29)
  {
    *(_QWORD *)(v29 + 8) = 3;
    *((_QWORD *)this + 153) = 0;
  }
  v30 = (_DWORD *)*((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v30)
  {
    if (v30[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
    else
      --v30[2];
  }
  v31 = *((_QWORD *)this + 149);
  if (v31)
  {
    *(_QWORD *)(v31 + 8) = 3;
    *((_QWORD *)this + 149) = 0;
  }
  v32 = (_DWORD *)*((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = 0;
  if (v32)
  {
    if (v32[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
    else
      --v32[2];
  }
  v33 = *((_QWORD *)this + 145);
  if (v33)
  {
    *(_QWORD *)(v33 + 8) = 3;
    *((_QWORD *)this + 145) = 0;
  }
  v34 = (_DWORD *)*((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v34)
  {
    if (v34[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
    else
      --v34[2];
  }
  v35 = *((_QWORD *)this + 141);
  if (v35)
  {
    *(_QWORD *)(v35 + 8) = 3;
    *((_QWORD *)this + 141) = 0;
  }
  v36 = (_DWORD *)*((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v36)
  {
    if (v36[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
    else
      --v36[2];
  }
  v37 = *((_QWORD *)this + 137);
  if (v37)
  {
    *(_QWORD *)(v37 + 8) = 3;
    *((_QWORD *)this + 137) = 0;
  }
  v38 = (_DWORD *)*((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v38)
  {
    if (v38[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
    else
      --v38[2];
  }
  v39 = *((_QWORD *)this + 133);
  if (v39)
  {
    *(_QWORD *)(v39 + 8) = 3;
    *((_QWORD *)this + 133) = 0;
  }
  v40 = (_DWORD *)*((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v40)
  {
    if (v40[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
    else
      --v40[2];
  }
  v41 = *((_QWORD *)this + 129);
  if (v41)
  {
    *(_QWORD *)(v41 + 8) = 3;
    *((_QWORD *)this + 129) = 0;
  }
  v42 = (_DWORD *)*((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v42)
  {
    if (v42[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
    else
      --v42[2];
  }
  v43 = *((_QWORD *)this + 125);
  if (v43)
  {
    *(_QWORD *)(v43 + 8) = 3;
    *((_QWORD *)this + 125) = 0;
  }
  v44 = (_DWORD *)*((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v44)
  {
    if (v44[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
    else
      --v44[2];
  }
  v45 = *((_QWORD *)this + 121);
  if (v45)
  {
    *(_QWORD *)(v45 + 8) = 3;
    *((_QWORD *)this + 121) = 0;
  }
  v46 = (_DWORD *)*((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v46)
  {
    if (v46[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
    else
      --v46[2];
  }
  v47 = *((_QWORD *)this + 117);
  if (v47)
  {
    *(_QWORD *)(v47 + 8) = 3;
    *((_QWORD *)this + 117) = 0;
  }
  v48 = (_DWORD *)*((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v48)
  {
    if (v48[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
    else
      --v48[2];
  }
  v49 = *((_QWORD *)this + 113);
  if (v49)
  {
    *(_QWORD *)(v49 + 8) = 3;
    *((_QWORD *)this + 113) = 0;
  }
  v50 = (_DWORD *)*((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = 0;
  if (v50)
  {
    if (v50[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
    else
      --v50[2];
  }
  v51 = *((_QWORD *)this + 109);
  if (v51)
  {
    *(_QWORD *)(v51 + 8) = 3;
    *((_QWORD *)this + 109) = 0;
  }
  v52 = (_DWORD *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  v53 = *((_QWORD *)this + 105);
  if (v53)
  {
    *(_QWORD *)(v53 + 8) = 3;
    *((_QWORD *)this + 105) = 0;
  }
  v54 = (_DWORD *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v54)
  {
    if (v54[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
    else
      --v54[2];
  }
  v55 = *((_QWORD *)this + 101);
  if (v55)
  {
    *(_QWORD *)(v55 + 8) = 3;
    *((_QWORD *)this + 101) = 0;
  }
  v56 = (_DWORD *)*((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v56)
  {
    if (v56[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v56 + 8))(v56);
    else
      --v56[2];
  }
  v57 = *((_QWORD *)this + 97);
  if (v57)
  {
    *(_QWORD *)(v57 + 8) = 3;
    *((_QWORD *)this + 97) = 0;
  }
  v58 = (_DWORD *)*((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v58)
  {
    if (v58[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 8))(v58);
    else
      --v58[2];
  }
  v59 = *((_QWORD *)this + 93);
  if (v59)
  {
    *(_QWORD *)(v59 + 8) = 3;
    *((_QWORD *)this + 93) = 0;
  }
  v60 = (_DWORD *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v60)
  {
    if (v60[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v60 + 8))(v60);
    else
      --v60[2];
  }
  v61 = *((_QWORD *)this + 89);
  if (v61)
  {
    *(_QWORD *)(v61 + 8) = 3;
    *((_QWORD *)this + 89) = 0;
  }
  v62 = (_DWORD *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v62)
  {
    if (v62[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
    else
      --v62[2];
  }
  v63 = *((_QWORD *)this + 85);
  if (v63)
  {
    *(_QWORD *)(v63 + 8) = 3;
    *((_QWORD *)this + 85) = 0;
  }
  v64 = (_DWORD *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v64)
  {
    if (v64[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 8))(v64);
    else
      --v64[2];
  }
  v65 = *((_QWORD *)this + 81);
  if (v65)
  {
    *(_QWORD *)(v65 + 8) = 3;
    *((_QWORD *)this + 81) = 0;
  }
  v66 = (_DWORD *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v66)
  {
    if (v66[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v66 + 8))(v66);
    else
      --v66[2];
  }
  v67 = *((_QWORD *)this + 77);
  if (v67)
  {
    *(_QWORD *)(v67 + 8) = 3;
    *((_QWORD *)this + 77) = 0;
  }
  v68 = (_DWORD *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v68)
  {
    if (v68[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 8))(v68);
    else
      --v68[2];
  }
  v69 = *((_QWORD *)this + 73);
  if (v69)
  {
    *(_QWORD *)(v69 + 8) = 3;
    *((_QWORD *)this + 73) = 0;
  }
  v70 = (_DWORD *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v70)
  {
    if (v70[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v70 + 8))(v70);
    else
      --v70[2];
  }
  v71 = (WTF::StringImpl *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, a2);
    else
      *(_DWORD *)v71 -= 2;
  }
  v72 = (WTF::StringImpl *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, a2);
    else
      *(_DWORD *)v72 -= 2;
  }
  v73 = (WTF::StringImpl *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, a2);
    else
      *(_DWORD *)v73 -= 2;
  }
  v74 = (WTF::StringImpl *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, a2);
    else
      *(_DWORD *)v74 -= 2;
  }
  v75 = (WTF::StringImpl *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, a2);
    else
      *(_DWORD *)v75 -= 2;
  }
  v76 = (WTF::StringImpl *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, a2);
    else
      *(_DWORD *)v76 -= 2;
  }
  v77 = (WTF::StringImpl *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, a2);
    else
      *(_DWORD *)v77 -= 2;
  }
  v78 = (WTF::StringImpl *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, a2);
    else
      *(_DWORD *)v78 -= 2;
  }
  v79 = (WTF::StringImpl *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, a2);
    else
      *(_DWORD *)v79 -= 2;
  }
  v80 = (WTF::StringImpl *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, a2);
    else
      *(_DWORD *)v80 -= 2;
  }
  v81 = (WTF::StringImpl *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy(v81, a2);
    else
      *(_DWORD *)v81 -= 2;
  }
  v82 = (WTF::StringImpl *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
      WTF::StringImpl::destroy(v82, a2);
    else
      *(_DWORD *)v82 -= 2;
  }
  v83 = (WTF::StringImpl *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, a2);
    else
      *(_DWORD *)v83 -= 2;
  }
  v84 = (WTF::StringImpl *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
      WTF::StringImpl::destroy(v84, a2);
    else
      *(_DWORD *)v84 -= 2;
  }
  v85 = (WTF::StringImpl *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, a2);
    else
      *(_DWORD *)v85 -= 2;
  }
  v86 = (WTF::StringImpl *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, a2);
    else
      *(_DWORD *)v86 -= 2;
  }
  v87 = (WTF::StringImpl *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, a2);
    else
      *(_DWORD *)v87 -= 2;
  }
  v88 = (WTF::StringImpl *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
      WTF::StringImpl::destroy(v88, a2);
    else
      *(_DWORD *)v88 -= 2;
  }
  v89 = (WTF::StringImpl *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
      WTF::StringImpl::destroy(v89, a2);
    else
      *(_DWORD *)v89 -= 2;
  }
  v90 = (WTF::StringImpl *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
      WTF::StringImpl::destroy(v90, a2);
    else
      *(_DWORD *)v90 -= 2;
  }
  v91 = (WTF::StringImpl *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
      WTF::StringImpl::destroy(v91, a2);
    else
      *(_DWORD *)v91 -= 2;
  }
  v92 = (WTF::StringImpl *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
      WTF::StringImpl::destroy(v92, a2);
    else
      *(_DWORD *)v92 -= 2;
  }
  v93 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
      WTF::StringImpl::destroy(v93, a2);
    else
      *(_DWORD *)v93 -= 2;
  }
  v94 = (WTF::StringImpl *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
      WTF::StringImpl::destroy(v94, a2);
    else
      *(_DWORD *)v94 -= 2;
  }
  v95 = (WTF::StringImpl *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
      WTF::StringImpl::destroy(v95, a2);
    else
      *(_DWORD *)v95 -= 2;
  }
  v96 = (WTF::StringImpl *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
      WTF::StringImpl::destroy(v96, a2);
    else
      *(_DWORD *)v96 -= 2;
  }
  v97 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
      WTF::StringImpl::destroy(v97, a2);
    else
      *(_DWORD *)v97 -= 2;
  }
  v98 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
      WTF::StringImpl::destroy(v98, a2);
    else
      *(_DWORD *)v98 -= 2;
  }
  v99 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
      WTF::StringImpl::destroy(v99, a2);
    else
      *(_DWORD *)v99 -= 2;
  }
  v100 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
      WTF::StringImpl::destroy(v100, a2);
    else
      *(_DWORD *)v100 -= 2;
  }
  v101 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy(v101, a2);
    else
      *(_DWORD *)v101 -= 2;
  }
  v102 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
      WTF::StringImpl::destroy(v102, a2);
    else
      *(_DWORD *)v102 -= 2;
  }
  v103 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
      WTF::StringImpl::destroy(v103, a2);
    else
      *(_DWORD *)v103 -= 2;
  }
  v104 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
      WTF::StringImpl::destroy(v104, a2);
    else
      *(_DWORD *)v104 -= 2;
  }
  v105 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
      WTF::StringImpl::destroy(v105, a2);
    else
      *(_DWORD *)v105 -= 2;
  }
  v106 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
      WTF::StringImpl::destroy(v106, a2);
    else
      *(_DWORD *)v106 -= 2;
  }
  v107 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
      WTF::StringImpl::destroy(v107, a2);
    else
      *(_DWORD *)v107 -= 2;
  }
  v108 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
      WTF::StringImpl::destroy(v108, a2);
    else
      *(_DWORD *)v108 -= 2;
  }
  v109 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
      WTF::StringImpl::destroy(v109, a2);
    else
      *(_DWORD *)v109 -= 2;
  }
  v110 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
      WTF::StringImpl::destroy(v110, a2);
    else
      *(_DWORD *)v110 -= 2;
  }
  v111 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, a2);
    else
      *(_DWORD *)v111 -= 2;
  }
  v112 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
      WTF::StringImpl::destroy(v112, a2);
    else
      *(_DWORD *)v112 -= 2;
  }
  v113 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, a2);
    else
      *(_DWORD *)v113 -= 2;
  }
  v114 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
      WTF::StringImpl::destroy(v114, a2);
    else
      *(_DWORD *)v114 -= 2;
  }
  v115 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
      WTF::StringImpl::destroy(v115, a2);
    else
      *(_DWORD *)v115 -= 2;
  }
  v116 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
      WTF::StringImpl::destroy(v116, a2);
    else
      *(_DWORD *)v116 -= 2;
  }
  v117 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
      WTF::StringImpl::destroy(v117, a2);
    else
      *(_DWORD *)v117 -= 2;
  }
  v118 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
      WTF::StringImpl::destroy(v118, a2);
    else
      *(_DWORD *)v118 -= 2;
  }
  v119 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
      WTF::StringImpl::destroy(v119, a2);
    else
      *(_DWORD *)v119 -= 2;
  }
  v120 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
      WTF::StringImpl::destroy(v120, a2);
    else
      *(_DWORD *)v120 -= 2;
  }
  v121 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      WTF::StringImpl::destroy(v121, a2);
    else
      *(_DWORD *)v121 -= 2;
  }
  v122 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
      WTF::StringImpl::destroy(v122, a2);
    else
      *(_DWORD *)v122 -= 2;
  }
  v123 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
      WTF::StringImpl::destroy(v123, a2);
    else
      *(_DWORD *)v123 -= 2;
  }
  v124 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
      WTF::StringImpl::destroy(v124, a2);
    else
      *(_DWORD *)v124 -= 2;
  }
  v125 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
      WTF::StringImpl::destroy(v125, a2);
    else
      *(_DWORD *)v125 -= 2;
  }
  v126 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
      WTF::StringImpl::destroy(v126, a2);
    else
      *(_DWORD *)v126 -= 2;
  }
  v127 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
      WTF::StringImpl::destroy(v127, a2);
    else
      *(_DWORD *)v127 -= 2;
  }
  v128 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
      WTF::StringImpl::destroy(v128, a2);
    else
      *(_DWORD *)v128 -= 2;
  }
  v129 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
      WTF::StringImpl::destroy(v129, a2);
    else
      *(_DWORD *)v129 -= 2;
  }
  v130 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
      WTF::StringImpl::destroy(v130, a2);
    else
      *(_DWORD *)v130 -= 2;
  }
  v131 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
      WTF::StringImpl::destroy(v131, a2);
    else
      *(_DWORD *)v131 -= 2;
  }
  v132 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2)
      WTF::StringImpl::destroy(v132, a2);
    else
      *(_DWORD *)v132 -= 2;
  }
  v133 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
      WTF::StringImpl::destroy(v133, a2);
    else
      *(_DWORD *)v133 -= 2;
  }
  v134 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
      WTF::StringImpl::destroy(v134, a2);
    else
      *(_DWORD *)v134 -= 2;
  }
  v135 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
      WTF::StringImpl::destroy(v135, a2);
    else
      *(_DWORD *)v135 -= 2;
  }
  v136 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
      WTF::StringImpl::destroy(v136, a2);
    else
      *(_DWORD *)v136 -= 2;
  }
  v137 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
      WTF::StringImpl::destroy(v137, a2);
    else
      *(_DWORD *)v137 -= 2;
  }
  v138 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
      WTF::StringImpl::destroy(v138, a2);
    else
      *(_DWORD *)v138 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::ReadableStreamBYOBReaderBuiltinsWrapper::~ReadableStreamBYOBReaderBuiltinsWrapper(WebCore::ReadableStreamBYOBReaderBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::ReadableStreamBYOBReaderBuiltinsWrapper::~ReadableStreamBYOBReaderBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  *(_QWORD *)this = &off_1E3393FC8;
  v3 = *((_QWORD *)this + 31);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 31) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 27);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 27) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 23);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 23) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 19);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 19) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 15);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 3;
    *((_QWORD *)this + 15) = 0;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::ReadableStreamBYOBRequestBuiltinsWrapper::~ReadableStreamBYOBRequestBuiltinsWrapper(WebCore::ReadableStreamBYOBRequestBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::ReadableStreamBYOBRequestBuiltinsWrapper::~ReadableStreamBYOBRequestBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  *(_QWORD *)this = &off_1E3393FF8;
  v3 = *((_QWORD *)this + 25);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 25) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 21);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 21) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 17);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 17) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 13);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 13) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::ReadableStreamDefaultControllerBuiltinsWrapper::~ReadableStreamDefaultControllerBuiltinsWrapper(WebCore::ReadableStreamDefaultControllerBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::ReadableStreamDefaultControllerBuiltinsWrapper::~ReadableStreamDefaultControllerBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  *(_QWORD *)this = &off_1E3394028;
  v3 = *((_QWORD *)this + 31);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 31) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 27);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 27) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 23);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 23) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 19);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 19) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 15);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 3;
    *((_QWORD *)this + 15) = 0;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::ReadableStreamDefaultReaderBuiltinsWrapper::~ReadableStreamDefaultReaderBuiltinsWrapper(WebCore::ReadableStreamDefaultReaderBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::ReadableStreamDefaultReaderBuiltinsWrapper::~ReadableStreamDefaultReaderBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  *(_QWORD *)this = &off_1E3394058;
  v3 = *((_QWORD *)this + 31);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 31) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 27);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 27) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 23);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 23) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 19);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 19) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 15);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 3;
    *((_QWORD *)this + 15) = 0;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::ReadableStreamInternalsBuiltinsWrapper::~ReadableStreamInternalsBuiltinsWrapper(WebCore::ReadableStreamInternalsBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::ReadableStreamInternalsBuiltinsWrapper::~ReadableStreamInternalsBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  _DWORD *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;

  *(_QWORD *)this = &off_1E3394088;
  v3 = *((_QWORD *)this + 289);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 289) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 286);
  *((_QWORD *)this + 286) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 285);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 285) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 282);
  *((_QWORD *)this + 282) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 281);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 281) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 277);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 277) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 274);
  *((_QWORD *)this + 274) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 273);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 3;
    *((_QWORD *)this + 273) = 0;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 270);
  *((_QWORD *)this + 270) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = *((_QWORD *)this + 269);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 3;
    *((_QWORD *)this + 269) = 0;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 266);
  *((_QWORD *)this + 266) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = *((_QWORD *)this + 265);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 3;
    *((_QWORD *)this + 265) = 0;
  }
  v16 = (_DWORD *)*((_QWORD *)this + 262);
  *((_QWORD *)this + 262) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = *((_QWORD *)this + 261);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 3;
    *((_QWORD *)this + 261) = 0;
  }
  v18 = (_DWORD *)*((_QWORD *)this + 258);
  *((_QWORD *)this + 258) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = *((_QWORD *)this + 257);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 3;
    *((_QWORD *)this + 257) = 0;
  }
  v20 = (_DWORD *)*((_QWORD *)this + 254);
  *((_QWORD *)this + 254) = 0;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  v21 = *((_QWORD *)this + 253);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 3;
    *((_QWORD *)this + 253) = 0;
  }
  v22 = (_DWORD *)*((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  v23 = *((_QWORD *)this + 249);
  if (v23)
  {
    *(_QWORD *)(v23 + 8) = 3;
    *((_QWORD *)this + 249) = 0;
  }
  v24 = (_DWORD *)*((_QWORD *)this + 246);
  *((_QWORD *)this + 246) = 0;
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  v25 = *((_QWORD *)this + 245);
  if (v25)
  {
    *(_QWORD *)(v25 + 8) = 3;
    *((_QWORD *)this + 245) = 0;
  }
  v26 = (_DWORD *)*((_QWORD *)this + 242);
  *((_QWORD *)this + 242) = 0;
  if (v26)
  {
    if (v26[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
    else
      --v26[2];
  }
  v27 = *((_QWORD *)this + 241);
  if (v27)
  {
    *(_QWORD *)(v27 + 8) = 3;
    *((_QWORD *)this + 241) = 0;
  }
  v28 = (_DWORD *)*((_QWORD *)this + 238);
  *((_QWORD *)this + 238) = 0;
  if (v28)
  {
    if (v28[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
    else
      --v28[2];
  }
  v29 = *((_QWORD *)this + 237);
  if (v29)
  {
    *(_QWORD *)(v29 + 8) = 3;
    *((_QWORD *)this + 237) = 0;
  }
  v30 = (_DWORD *)*((_QWORD *)this + 234);
  *((_QWORD *)this + 234) = 0;
  if (v30)
  {
    if (v30[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
    else
      --v30[2];
  }
  v31 = *((_QWORD *)this + 233);
  if (v31)
  {
    *(_QWORD *)(v31 + 8) = 3;
    *((_QWORD *)this + 233) = 0;
  }
  v32 = (_DWORD *)*((_QWORD *)this + 230);
  *((_QWORD *)this + 230) = 0;
  if (v32)
  {
    if (v32[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
    else
      --v32[2];
  }
  v33 = *((_QWORD *)this + 229);
  if (v33)
  {
    *(_QWORD *)(v33 + 8) = 3;
    *((_QWORD *)this + 229) = 0;
  }
  v34 = (_DWORD *)*((_QWORD *)this + 226);
  *((_QWORD *)this + 226) = 0;
  if (v34)
  {
    if (v34[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
    else
      --v34[2];
  }
  v35 = *((_QWORD *)this + 225);
  if (v35)
  {
    *(_QWORD *)(v35 + 8) = 3;
    *((_QWORD *)this + 225) = 0;
  }
  v36 = (_DWORD *)*((_QWORD *)this + 222);
  *((_QWORD *)this + 222) = 0;
  if (v36)
  {
    if (v36[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
    else
      --v36[2];
  }
  v37 = *((_QWORD *)this + 221);
  if (v37)
  {
    *(_QWORD *)(v37 + 8) = 3;
    *((_QWORD *)this + 221) = 0;
  }
  v38 = (_DWORD *)*((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = 0;
  if (v38)
  {
    if (v38[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
    else
      --v38[2];
  }
  v39 = *((_QWORD *)this + 217);
  if (v39)
  {
    *(_QWORD *)(v39 + 8) = 3;
    *((_QWORD *)this + 217) = 0;
  }
  v40 = (_DWORD *)*((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = 0;
  if (v40)
  {
    if (v40[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
    else
      --v40[2];
  }
  v41 = *((_QWORD *)this + 213);
  if (v41)
  {
    *(_QWORD *)(v41 + 8) = 3;
    *((_QWORD *)this + 213) = 0;
  }
  v42 = (_DWORD *)*((_QWORD *)this + 210);
  *((_QWORD *)this + 210) = 0;
  if (v42)
  {
    if (v42[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
    else
      --v42[2];
  }
  v43 = *((_QWORD *)this + 209);
  if (v43)
  {
    *(_QWORD *)(v43 + 8) = 3;
    *((_QWORD *)this + 209) = 0;
  }
  v44 = (_DWORD *)*((_QWORD *)this + 206);
  *((_QWORD *)this + 206) = 0;
  if (v44)
  {
    if (v44[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
    else
      --v44[2];
  }
  v45 = *((_QWORD *)this + 205);
  if (v45)
  {
    *(_QWORD *)(v45 + 8) = 3;
    *((_QWORD *)this + 205) = 0;
  }
  v46 = (_DWORD *)*((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = 0;
  if (v46)
  {
    if (v46[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
    else
      --v46[2];
  }
  v47 = *((_QWORD *)this + 201);
  if (v47)
  {
    *(_QWORD *)(v47 + 8) = 3;
    *((_QWORD *)this + 201) = 0;
  }
  v48 = (_DWORD *)*((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = 0;
  if (v48)
  {
    if (v48[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
    else
      --v48[2];
  }
  v49 = *((_QWORD *)this + 197);
  if (v49)
  {
    *(_QWORD *)(v49 + 8) = 3;
    *((_QWORD *)this + 197) = 0;
  }
  v50 = (_DWORD *)*((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = 0;
  if (v50)
  {
    if (v50[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
    else
      --v50[2];
  }
  v51 = *((_QWORD *)this + 193);
  if (v51)
  {
    *(_QWORD *)(v51 + 8) = 3;
    *((_QWORD *)this + 193) = 0;
  }
  v52 = (_DWORD *)*((_QWORD *)this + 190);
  *((_QWORD *)this + 190) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  v53 = *((_QWORD *)this + 189);
  if (v53)
  {
    *(_QWORD *)(v53 + 8) = 3;
    *((_QWORD *)this + 189) = 0;
  }
  v54 = (_DWORD *)*((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = 0;
  if (v54)
  {
    if (v54[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
    else
      --v54[2];
  }
  v55 = *((_QWORD *)this + 185);
  if (v55)
  {
    *(_QWORD *)(v55 + 8) = 3;
    *((_QWORD *)this + 185) = 0;
  }
  v56 = (_DWORD *)*((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = 0;
  if (v56)
  {
    if (v56[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v56 + 8))(v56);
    else
      --v56[2];
  }
  v57 = *((_QWORD *)this + 181);
  if (v57)
  {
    *(_QWORD *)(v57 + 8) = 3;
    *((_QWORD *)this + 181) = 0;
  }
  v58 = (_DWORD *)*((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = 0;
  if (v58)
  {
    if (v58[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 8))(v58);
    else
      --v58[2];
  }
  v59 = *((_QWORD *)this + 177);
  if (v59)
  {
    *(_QWORD *)(v59 + 8) = 3;
    *((_QWORD *)this + 177) = 0;
  }
  v60 = (_DWORD *)*((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = 0;
  if (v60)
  {
    if (v60[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v60 + 8))(v60);
    else
      --v60[2];
  }
  v61 = *((_QWORD *)this + 173);
  if (v61)
  {
    *(_QWORD *)(v61 + 8) = 3;
    *((_QWORD *)this + 173) = 0;
  }
  v62 = (_DWORD *)*((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = 0;
  if (v62)
  {
    if (v62[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
    else
      --v62[2];
  }
  v63 = *((_QWORD *)this + 169);
  if (v63)
  {
    *(_QWORD *)(v63 + 8) = 3;
    *((_QWORD *)this + 169) = 0;
  }
  v64 = (_DWORD *)*((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v64)
  {
    if (v64[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 8))(v64);
    else
      --v64[2];
  }
  v65 = *((_QWORD *)this + 165);
  if (v65)
  {
    *(_QWORD *)(v65 + 8) = 3;
    *((_QWORD *)this + 165) = 0;
  }
  v66 = (_DWORD *)*((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v66)
  {
    if (v66[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v66 + 8))(v66);
    else
      --v66[2];
  }
  v67 = *((_QWORD *)this + 161);
  if (v67)
  {
    *(_QWORD *)(v67 + 8) = 3;
    *((_QWORD *)this + 161) = 0;
  }
  v68 = (_DWORD *)*((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = 0;
  if (v68)
  {
    if (v68[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 8))(v68);
    else
      --v68[2];
  }
  v69 = *((_QWORD *)this + 157);
  if (v69)
  {
    *(_QWORD *)(v69 + 8) = 3;
    *((_QWORD *)this + 157) = 0;
  }
  v70 = (_DWORD *)*((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v70)
  {
    if (v70[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v70 + 8))(v70);
    else
      --v70[2];
  }
  v71 = *((_QWORD *)this + 153);
  if (v71)
  {
    *(_QWORD *)(v71 + 8) = 3;
    *((_QWORD *)this + 153) = 0;
  }
  v72 = (_DWORD *)*((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v72)
  {
    if (v72[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v72 + 8))(v72);
    else
      --v72[2];
  }
  v73 = *((_QWORD *)this + 149);
  if (v73)
  {
    *(_QWORD *)(v73 + 8) = 3;
    *((_QWORD *)this + 149) = 0;
  }
  v74 = (_DWORD *)*((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = 0;
  if (v74)
  {
    if (v74[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v74 + 8))(v74);
    else
      --v74[2];
  }
  v75 = *((_QWORD *)this + 145);
  if (v75)
  {
    *(_QWORD *)(v75 + 8) = 3;
    *((_QWORD *)this + 145) = 0;
  }
  v76 = (_DWORD *)*((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v76)
  {
    if (v76[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v76 + 8))(v76);
    else
      --v76[2];
  }
  v77 = *((_QWORD *)this + 141);
  if (v77)
  {
    *(_QWORD *)(v77 + 8) = 3;
    *((_QWORD *)this + 141) = 0;
  }
  v78 = (_DWORD *)*((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v78)
  {
    if (v78[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v78 + 8))(v78);
    else
      --v78[2];
  }
  v79 = *((_QWORD *)this + 137);
  if (v79)
  {
    *(_QWORD *)(v79 + 8) = 3;
    *((_QWORD *)this + 137) = 0;
  }
  v80 = (_DWORD *)*((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v80)
  {
    if (v80[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v80 + 8))(v80);
    else
      --v80[2];
  }
  v81 = *((_QWORD *)this + 133);
  if (v81)
  {
    *(_QWORD *)(v81 + 8) = 3;
    *((_QWORD *)this + 133) = 0;
  }
  v82 = (_DWORD *)*((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v82)
  {
    if (v82[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v82 + 8))(v82);
    else
      --v82[2];
  }
  v83 = *((_QWORD *)this + 129);
  if (v83)
  {
    *(_QWORD *)(v83 + 8) = 3;
    *((_QWORD *)this + 129) = 0;
  }
  v84 = (_DWORD *)*((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v84)
  {
    if (v84[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v84 + 8))(v84);
    else
      --v84[2];
  }
  v85 = *((_QWORD *)this + 125);
  if (v85)
  {
    *(_QWORD *)(v85 + 8) = 3;
    *((_QWORD *)this + 125) = 0;
  }
  v86 = (_DWORD *)*((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v86)
  {
    if (v86[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v86 + 8))(v86);
    else
      --v86[2];
  }
  v87 = *((_QWORD *)this + 121);
  if (v87)
  {
    *(_QWORD *)(v87 + 8) = 3;
    *((_QWORD *)this + 121) = 0;
  }
  v88 = (_DWORD *)*((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v88)
  {
    if (v88[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v88 + 8))(v88);
    else
      --v88[2];
  }
  v89 = *((_QWORD *)this + 117);
  if (v89)
  {
    *(_QWORD *)(v89 + 8) = 3;
    *((_QWORD *)this + 117) = 0;
  }
  v90 = (_DWORD *)*((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v90)
  {
    if (v90[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v90 + 8))(v90);
    else
      --v90[2];
  }
  v91 = *((_QWORD *)this + 113);
  if (v91)
  {
    *(_QWORD *)(v91 + 8) = 3;
    *((_QWORD *)this + 113) = 0;
  }
  v92 = (_DWORD *)*((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = 0;
  if (v92)
  {
    if (v92[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v92 + 8))(v92);
    else
      --v92[2];
  }
  v93 = *((_QWORD *)this + 109);
  if (v93)
  {
    *(_QWORD *)(v93 + 8) = 3;
    *((_QWORD *)this + 109) = 0;
  }
  v94 = (_DWORD *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v94)
  {
    if (v94[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v94 + 8))(v94);
    else
      --v94[2];
  }
  v95 = *((_QWORD *)this + 105);
  if (v95)
  {
    *(_QWORD *)(v95 + 8) = 3;
    *((_QWORD *)this + 105) = 0;
  }
  v96 = (_DWORD *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v96)
  {
    if (v96[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v96 + 8))(v96);
    else
      --v96[2];
  }
  v97 = *((_QWORD *)this + 101);
  if (v97)
  {
    *(_QWORD *)(v97 + 8) = 3;
    *((_QWORD *)this + 101) = 0;
  }
  v98 = (_DWORD *)*((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v98)
  {
    if (v98[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v98 + 8))(v98);
    else
      --v98[2];
  }
  v99 = (WTF::StringImpl *)*((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
      WTF::StringImpl::destroy(v99, a2);
    else
      *(_DWORD *)v99 -= 2;
  }
  v100 = (WTF::StringImpl *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
      WTF::StringImpl::destroy(v100, a2);
    else
      *(_DWORD *)v100 -= 2;
  }
  v101 = (WTF::StringImpl *)*((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy(v101, a2);
    else
      *(_DWORD *)v101 -= 2;
  }
  v102 = (WTF::StringImpl *)*((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
      WTF::StringImpl::destroy(v102, a2);
    else
      *(_DWORD *)v102 -= 2;
  }
  v103 = (WTF::StringImpl *)*((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
      WTF::StringImpl::destroy(v103, a2);
    else
      *(_DWORD *)v103 -= 2;
  }
  v104 = (WTF::StringImpl *)*((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
      WTF::StringImpl::destroy(v104, a2);
    else
      *(_DWORD *)v104 -= 2;
  }
  v105 = (WTF::StringImpl *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
      WTF::StringImpl::destroy(v105, a2);
    else
      *(_DWORD *)v105 -= 2;
  }
  v106 = (WTF::StringImpl *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
      WTF::StringImpl::destroy(v106, a2);
    else
      *(_DWORD *)v106 -= 2;
  }
  v107 = (WTF::StringImpl *)*((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
      WTF::StringImpl::destroy(v107, a2);
    else
      *(_DWORD *)v107 -= 2;
  }
  v108 = (WTF::StringImpl *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
      WTF::StringImpl::destroy(v108, a2);
    else
      *(_DWORD *)v108 -= 2;
  }
  v109 = (WTF::StringImpl *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
      WTF::StringImpl::destroy(v109, a2);
    else
      *(_DWORD *)v109 -= 2;
  }
  v110 = (WTF::StringImpl *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
      WTF::StringImpl::destroy(v110, a2);
    else
      *(_DWORD *)v110 -= 2;
  }
  v111 = (WTF::StringImpl *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, a2);
    else
      *(_DWORD *)v111 -= 2;
  }
  v112 = (WTF::StringImpl *)*((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
      WTF::StringImpl::destroy(v112, a2);
    else
      *(_DWORD *)v112 -= 2;
  }
  v113 = (WTF::StringImpl *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, a2);
    else
      *(_DWORD *)v113 -= 2;
  }
  v114 = (WTF::StringImpl *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
      WTF::StringImpl::destroy(v114, a2);
    else
      *(_DWORD *)v114 -= 2;
  }
  v115 = (WTF::StringImpl *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
      WTF::StringImpl::destroy(v115, a2);
    else
      *(_DWORD *)v115 -= 2;
  }
  v116 = (WTF::StringImpl *)*((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
      WTF::StringImpl::destroy(v116, a2);
    else
      *(_DWORD *)v116 -= 2;
  }
  v117 = (WTF::StringImpl *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
      WTF::StringImpl::destroy(v117, a2);
    else
      *(_DWORD *)v117 -= 2;
  }
  v118 = (WTF::StringImpl *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
      WTF::StringImpl::destroy(v118, a2);
    else
      *(_DWORD *)v118 -= 2;
  }
  v119 = (WTF::StringImpl *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
      WTF::StringImpl::destroy(v119, a2);
    else
      *(_DWORD *)v119 -= 2;
  }
  v120 = (WTF::StringImpl *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
      WTF::StringImpl::destroy(v120, a2);
    else
      *(_DWORD *)v120 -= 2;
  }
  v121 = (WTF::StringImpl *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      WTF::StringImpl::destroy(v121, a2);
    else
      *(_DWORD *)v121 -= 2;
  }
  v122 = (WTF::StringImpl *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
      WTF::StringImpl::destroy(v122, a2);
    else
      *(_DWORD *)v122 -= 2;
  }
  v123 = (WTF::StringImpl *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
      WTF::StringImpl::destroy(v123, a2);
    else
      *(_DWORD *)v123 -= 2;
  }
  v124 = (WTF::StringImpl *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
      WTF::StringImpl::destroy(v124, a2);
    else
      *(_DWORD *)v124 -= 2;
  }
  v125 = (WTF::StringImpl *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
      WTF::StringImpl::destroy(v125, a2);
    else
      *(_DWORD *)v125 -= 2;
  }
  v126 = (WTF::StringImpl *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
      WTF::StringImpl::destroy(v126, a2);
    else
      *(_DWORD *)v126 -= 2;
  }
  v127 = (WTF::StringImpl *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
      WTF::StringImpl::destroy(v127, a2);
    else
      *(_DWORD *)v127 -= 2;
  }
  v128 = (WTF::StringImpl *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
      WTF::StringImpl::destroy(v128, a2);
    else
      *(_DWORD *)v128 -= 2;
  }
  v129 = (WTF::StringImpl *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
      WTF::StringImpl::destroy(v129, a2);
    else
      *(_DWORD *)v129 -= 2;
  }
  v130 = (WTF::StringImpl *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
      WTF::StringImpl::destroy(v130, a2);
    else
      *(_DWORD *)v130 -= 2;
  }
  v131 = (WTF::StringImpl *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
      WTF::StringImpl::destroy(v131, a2);
    else
      *(_DWORD *)v131 -= 2;
  }
  v132 = (WTF::StringImpl *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2)
      WTF::StringImpl::destroy(v132, a2);
    else
      *(_DWORD *)v132 -= 2;
  }
  v133 = (WTF::StringImpl *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
      WTF::StringImpl::destroy(v133, a2);
    else
      *(_DWORD *)v133 -= 2;
  }
  v134 = (WTF::StringImpl *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
      WTF::StringImpl::destroy(v134, a2);
    else
      *(_DWORD *)v134 -= 2;
  }
  v135 = (WTF::StringImpl *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
      WTF::StringImpl::destroy(v135, a2);
    else
      *(_DWORD *)v135 -= 2;
  }
  v136 = (WTF::StringImpl *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
      WTF::StringImpl::destroy(v136, a2);
    else
      *(_DWORD *)v136 -= 2;
  }
  v137 = (WTF::StringImpl *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
      WTF::StringImpl::destroy(v137, a2);
    else
      *(_DWORD *)v137 -= 2;
  }
  v138 = (WTF::StringImpl *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
      WTF::StringImpl::destroy(v138, a2);
    else
      *(_DWORD *)v138 -= 2;
  }
  v139 = (WTF::StringImpl *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
      WTF::StringImpl::destroy(v139, a2);
    else
      *(_DWORD *)v139 -= 2;
  }
  v140 = (WTF::StringImpl *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
      WTF::StringImpl::destroy(v140, a2);
    else
      *(_DWORD *)v140 -= 2;
  }
  v141 = (WTF::StringImpl *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
      WTF::StringImpl::destroy(v141, a2);
    else
      *(_DWORD *)v141 -= 2;
  }
  v142 = (WTF::StringImpl *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
      WTF::StringImpl::destroy(v142, a2);
    else
      *(_DWORD *)v142 -= 2;
  }
  v143 = (WTF::StringImpl *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
      WTF::StringImpl::destroy(v143, a2);
    else
      *(_DWORD *)v143 -= 2;
  }
  v144 = (WTF::StringImpl *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
      WTF::StringImpl::destroy(v144, a2);
    else
      *(_DWORD *)v144 -= 2;
  }
  v145 = (WTF::StringImpl *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
      WTF::StringImpl::destroy(v145, a2);
    else
      *(_DWORD *)v145 -= 2;
  }
  v146 = (WTF::StringImpl *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
      WTF::StringImpl::destroy(v146, a2);
    else
      *(_DWORD *)v146 -= 2;
  }
  v147 = (WTF::StringImpl *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
      WTF::StringImpl::destroy(v147, a2);
    else
      *(_DWORD *)v147 -= 2;
  }
  v148 = (WTF::StringImpl *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
      WTF::StringImpl::destroy(v148, a2);
    else
      *(_DWORD *)v148 -= 2;
  }
  v149 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
      WTF::StringImpl::destroy(v149, a2);
    else
      *(_DWORD *)v149 -= 2;
  }
  v150 = (WTF::StringImpl *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v150)
  {
    if (*(_DWORD *)v150 == 2)
      WTF::StringImpl::destroy(v150, a2);
    else
      *(_DWORD *)v150 -= 2;
  }
  v151 = (WTF::StringImpl *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
      WTF::StringImpl::destroy(v151, a2);
    else
      *(_DWORD *)v151 -= 2;
  }
  v152 = (WTF::StringImpl *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v152)
  {
    if (*(_DWORD *)v152 == 2)
      WTF::StringImpl::destroy(v152, a2);
    else
      *(_DWORD *)v152 -= 2;
  }
  v153 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v153)
  {
    if (*(_DWORD *)v153 == 2)
      WTF::StringImpl::destroy(v153, a2);
    else
      *(_DWORD *)v153 -= 2;
  }
  v154 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v154)
  {
    if (*(_DWORD *)v154 == 2)
      WTF::StringImpl::destroy(v154, a2);
    else
      *(_DWORD *)v154 -= 2;
  }
  v155 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v155)
  {
    if (*(_DWORD *)v155 == 2)
      WTF::StringImpl::destroy(v155, a2);
    else
      *(_DWORD *)v155 -= 2;
  }
  v156 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
      WTF::StringImpl::destroy(v156, a2);
    else
      *(_DWORD *)v156 -= 2;
  }
  v157 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v157)
  {
    if (*(_DWORD *)v157 == 2)
      WTF::StringImpl::destroy(v157, a2);
    else
      *(_DWORD *)v157 -= 2;
  }
  v158 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v158)
  {
    if (*(_DWORD *)v158 == 2)
      WTF::StringImpl::destroy(v158, a2);
    else
      *(_DWORD *)v158 -= 2;
  }
  v159 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v159)
  {
    if (*(_DWORD *)v159 == 2)
      WTF::StringImpl::destroy(v159, a2);
    else
      *(_DWORD *)v159 -= 2;
  }
  v160 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
      WTF::StringImpl::destroy(v160, a2);
    else
      *(_DWORD *)v160 -= 2;
  }
  v161 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v161)
  {
    if (*(_DWORD *)v161 == 2)
      WTF::StringImpl::destroy(v161, a2);
    else
      *(_DWORD *)v161 -= 2;
  }
  v162 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v162)
  {
    if (*(_DWORD *)v162 == 2)
      WTF::StringImpl::destroy(v162, a2);
    else
      *(_DWORD *)v162 -= 2;
  }
  v163 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v163)
  {
    if (*(_DWORD *)v163 == 2)
      WTF::StringImpl::destroy(v163, a2);
    else
      *(_DWORD *)v163 -= 2;
  }
  v164 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v164)
  {
    if (*(_DWORD *)v164 == 2)
      WTF::StringImpl::destroy(v164, a2);
    else
      *(_DWORD *)v164 -= 2;
  }
  v165 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v165)
  {
    if (*(_DWORD *)v165 == 2)
      WTF::StringImpl::destroy(v165, a2);
    else
      *(_DWORD *)v165 -= 2;
  }
  v166 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v166)
  {
    if (*(_DWORD *)v166 == 2)
      WTF::StringImpl::destroy(v166, a2);
    else
      *(_DWORD *)v166 -= 2;
  }
  v167 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v167)
  {
    if (*(_DWORD *)v167 == 2)
      WTF::StringImpl::destroy(v167, a2);
    else
      *(_DWORD *)v167 -= 2;
  }
  v168 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v168)
  {
    if (*(_DWORD *)v168 == 2)
      WTF::StringImpl::destroy(v168, a2);
    else
      *(_DWORD *)v168 -= 2;
  }
  v169 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v169)
  {
    if (*(_DWORD *)v169 == 2)
      WTF::StringImpl::destroy(v169, a2);
    else
      *(_DWORD *)v169 -= 2;
  }
  v170 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
      WTF::StringImpl::destroy(v170, a2);
    else
      *(_DWORD *)v170 -= 2;
  }
  v171 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
      WTF::StringImpl::destroy(v171, a2);
    else
      *(_DWORD *)v171 -= 2;
  }
  v172 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
      WTF::StringImpl::destroy(v172, a2);
    else
      *(_DWORD *)v172 -= 2;
  }
  v173 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
      WTF::StringImpl::destroy(v173, a2);
    else
      *(_DWORD *)v173 -= 2;
  }
  v174 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 2)
      WTF::StringImpl::destroy(v174, a2);
    else
      *(_DWORD *)v174 -= 2;
  }
  v175 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v175)
  {
    if (*(_DWORD *)v175 == 2)
      WTF::StringImpl::destroy(v175, a2);
    else
      *(_DWORD *)v175 -= 2;
  }
  v176 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
      WTF::StringImpl::destroy(v176, a2);
    else
      *(_DWORD *)v176 -= 2;
  }
  v177 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v177)
  {
    if (*(_DWORD *)v177 == 2)
      WTF::StringImpl::destroy(v177, a2);
    else
      *(_DWORD *)v177 -= 2;
  }
  v178 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v178)
  {
    if (*(_DWORD *)v178 == 2)
      WTF::StringImpl::destroy(v178, a2);
    else
      *(_DWORD *)v178 -= 2;
  }
  v179 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v179)
  {
    if (*(_DWORD *)v179 == 2)
      WTF::StringImpl::destroy(v179, a2);
    else
      *(_DWORD *)v179 -= 2;
  }
  v180 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v180)
  {
    if (*(_DWORD *)v180 == 2)
      WTF::StringImpl::destroy(v180, a2);
    else
      *(_DWORD *)v180 -= 2;
  }
  v181 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v181)
  {
    if (*(_DWORD *)v181 == 2)
      WTF::StringImpl::destroy(v181, a2);
    else
      *(_DWORD *)v181 -= 2;
  }
  v182 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
      WTF::StringImpl::destroy(v182, a2);
    else
      *(_DWORD *)v182 -= 2;
  }
  v183 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v183)
  {
    if (*(_DWORD *)v183 == 2)
      WTF::StringImpl::destroy(v183, a2);
    else
      *(_DWORD *)v183 -= 2;
  }
  v184 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v184)
  {
    if (*(_DWORD *)v184 == 2)
      WTF::StringImpl::destroy(v184, a2);
    else
      *(_DWORD *)v184 -= 2;
  }
  v185 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v185)
  {
    if (*(_DWORD *)v185 == 2)
      WTF::StringImpl::destroy(v185, a2);
    else
      *(_DWORD *)v185 -= 2;
  }
  v186 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v186)
  {
    if (*(_DWORD *)v186 == 2)
      WTF::StringImpl::destroy(v186, a2);
    else
      *(_DWORD *)v186 -= 2;
  }
  v187 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
      WTF::StringImpl::destroy(v187, a2);
    else
      *(_DWORD *)v187 -= 2;
  }
  v188 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v188)
  {
    if (*(_DWORD *)v188 == 2)
      WTF::StringImpl::destroy(v188, a2);
    else
      *(_DWORD *)v188 -= 2;
  }
  v189 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v189)
  {
    if (*(_DWORD *)v189 == 2)
      WTF::StringImpl::destroy(v189, a2);
    else
      *(_DWORD *)v189 -= 2;
  }
  v190 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v190)
  {
    if (*(_DWORD *)v190 == 2)
      WTF::StringImpl::destroy(v190, a2);
    else
      *(_DWORD *)v190 -= 2;
  }
  v191 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v191)
  {
    if (*(_DWORD *)v191 == 2)
      WTF::StringImpl::destroy(v191, a2);
    else
      *(_DWORD *)v191 -= 2;
  }
  v192 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v192)
  {
    if (*(_DWORD *)v192 == 2)
      WTF::StringImpl::destroy(v192, a2);
    else
      *(_DWORD *)v192 -= 2;
  }
  v193 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v193)
  {
    if (*(_DWORD *)v193 == 2)
      WTF::StringImpl::destroy(v193, a2);
    else
      *(_DWORD *)v193 -= 2;
  }
  v194 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v194)
  {
    if (*(_DWORD *)v194 == 2)
      WTF::StringImpl::destroy(v194, a2);
    else
      *(_DWORD *)v194 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::StreamInternalsBuiltinsWrapper::~StreamInternalsBuiltinsWrapper(WebCore::StreamInternalsBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::StreamInternalsBuiltinsWrapper::~StreamInternalsBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  *(_QWORD *)this = &off_1E33940B8;
  v3 = *((_QWORD *)this + 109);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 109) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 105);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 105) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 101);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 101) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 97);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 97) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 93);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 3;
    *((_QWORD *)this + 93) = 0;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = *((_QWORD *)this + 89);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 3;
    *((_QWORD *)this + 89) = 0;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = *((_QWORD *)this + 85);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 3;
    *((_QWORD *)this + 85) = 0;
  }
  v16 = (_DWORD *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = *((_QWORD *)this + 81);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 3;
    *((_QWORD *)this + 81) = 0;
  }
  v18 = (_DWORD *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = *((_QWORD *)this + 77);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 3;
    *((_QWORD *)this + 77) = 0;
  }
  v20 = (_DWORD *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  v21 = *((_QWORD *)this + 73);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 3;
    *((_QWORD *)this + 73) = 0;
  }
  v22 = (_DWORD *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  v23 = *((_QWORD *)this + 69);
  if (v23)
  {
    *(_QWORD *)(v23 + 8) = 3;
    *((_QWORD *)this + 69) = 0;
  }
  v24 = (_DWORD *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  v25 = *((_QWORD *)this + 65);
  if (v25)
  {
    *(_QWORD *)(v25 + 8) = 3;
    *((_QWORD *)this + 65) = 0;
  }
  v26 = (_DWORD *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v26)
  {
    if (v26[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
    else
      --v26[2];
  }
  v27 = *((_QWORD *)this + 61);
  if (v27)
  {
    *(_QWORD *)(v27 + 8) = 3;
    *((_QWORD *)this + 61) = 0;
  }
  v28 = (_DWORD *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v28)
  {
    if (v28[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
    else
      --v28[2];
  }
  v29 = *((_QWORD *)this + 57);
  if (v29)
  {
    *(_QWORD *)(v29 + 8) = 3;
    *((_QWORD *)this + 57) = 0;
  }
  v30 = (_DWORD *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v30)
  {
    if (v30[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
    else
      --v30[2];
  }
  v31 = *((_QWORD *)this + 53);
  if (v31)
  {
    *(_QWORD *)(v31 + 8) = 3;
    *((_QWORD *)this + 53) = 0;
  }
  v32 = (_DWORD *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v32)
  {
    if (v32[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
    else
      --v32[2];
  }
  v33 = *((_QWORD *)this + 49);
  if (v33)
  {
    *(_QWORD *)(v33 + 8) = 3;
    *((_QWORD *)this + 49) = 0;
  }
  v34 = (_DWORD *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v34)
  {
    if (v34[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
    else
      --v34[2];
  }
  v35 = *((_QWORD *)this + 45);
  if (v35)
  {
    *(_QWORD *)(v35 + 8) = 3;
    *((_QWORD *)this + 45) = 0;
  }
  v36 = (_DWORD *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v36)
  {
    if (v36[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
    else
      --v36[2];
  }
  v37 = *((_QWORD *)this + 41);
  if (v37)
  {
    *(_QWORD *)(v37 + 8) = 3;
    *((_QWORD *)this + 41) = 0;
  }
  v38 = (_DWORD *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v38)
  {
    if (v38[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
    else
      --v38[2];
  }
  v39 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, a2);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, a2);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, a2);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, a2);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, a2);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, a2);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, a2);
    else
      *(_DWORD *)v45 -= 2;
  }
  v46 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, a2);
    else
      *(_DWORD *)v46 -= 2;
  }
  v47 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, a2);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, a2);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, a2);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, a2);
    else
      *(_DWORD *)v50 -= 2;
  }
  v51 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, a2);
    else
      *(_DWORD *)v51 -= 2;
  }
  v52 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, a2);
    else
      *(_DWORD *)v52 -= 2;
  }
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, a2);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, a2);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, a2);
    else
      *(_DWORD *)v55 -= 2;
  }
  v56 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, a2);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, a2);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, a2);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, a2);
    else
      *(_DWORD *)v59 -= 2;
  }
  v60 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, a2);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, a2);
    else
      *(_DWORD *)v61 -= 2;
  }
  v62 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, a2);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, a2);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, a2);
    else
      *(_DWORD *)v64 -= 2;
  }
  v65 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, a2);
    else
      *(_DWORD *)v65 -= 2;
  }
  v66 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, a2);
    else
      *(_DWORD *)v66 -= 2;
  }
  v67 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, a2);
    else
      *(_DWORD *)v67 -= 2;
  }
  v68 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, a2);
    else
      *(_DWORD *)v68 -= 2;
  }
  v69 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, a2);
    else
      *(_DWORD *)v69 -= 2;
  }
  v70 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, a2);
    else
      *(_DWORD *)v70 -= 2;
  }
  v71 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, a2);
    else
      *(_DWORD *)v71 -= 2;
  }
  v72 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, a2);
    else
      *(_DWORD *)v72 -= 2;
  }
  v73 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, a2);
    else
      *(_DWORD *)v73 -= 2;
  }
  v74 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, a2);
    else
      *(_DWORD *)v74 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::TransformStreamDefaultControllerBuiltinsWrapper::~TransformStreamDefaultControllerBuiltinsWrapper(WebCore::TransformStreamDefaultControllerBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::TransformStreamDefaultControllerBuiltinsWrapper::~TransformStreamDefaultControllerBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  *(_QWORD *)this = &off_1E33940E8;
  v3 = *((_QWORD *)this + 31);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 31) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 27);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 27) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 23);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 23) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 19);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 19) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 15);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 3;
    *((_QWORD *)this + 15) = 0;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::TransformStreamInternalsBuiltinsWrapper::~TransformStreamInternalsBuiltinsWrapper(WebCore::TransformStreamInternalsBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::TransformStreamInternalsBuiltinsWrapper::~TransformStreamInternalsBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;

  *(_QWORD *)this = &off_1E3394118;
  v3 = *((_QWORD *)this + 115);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 115) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 111);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 111) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 107);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 107) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 103);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 103) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 99);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 3;
    *((_QWORD *)this + 99) = 0;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = *((_QWORD *)this + 95);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 3;
    *((_QWORD *)this + 95) = 0;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = *((_QWORD *)this + 91);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 3;
    *((_QWORD *)this + 91) = 0;
  }
  v16 = (_DWORD *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = *((_QWORD *)this + 87);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 3;
    *((_QWORD *)this + 87) = 0;
  }
  v18 = (_DWORD *)*((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = *((_QWORD *)this + 83);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 3;
    *((_QWORD *)this + 83) = 0;
  }
  v20 = (_DWORD *)*((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  v21 = *((_QWORD *)this + 79);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 3;
    *((_QWORD *)this + 79) = 0;
  }
  v22 = (_DWORD *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  v23 = *((_QWORD *)this + 75);
  if (v23)
  {
    *(_QWORD *)(v23 + 8) = 3;
    *((_QWORD *)this + 75) = 0;
  }
  v24 = (_DWORD *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  v25 = *((_QWORD *)this + 71);
  if (v25)
  {
    *(_QWORD *)(v25 + 8) = 3;
    *((_QWORD *)this + 71) = 0;
  }
  v26 = (_DWORD *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v26)
  {
    if (v26[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
    else
      --v26[2];
  }
  v27 = *((_QWORD *)this + 67);
  if (v27)
  {
    *(_QWORD *)(v27 + 8) = 3;
    *((_QWORD *)this + 67) = 0;
  }
  v28 = (_DWORD *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v28)
  {
    if (v28[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
    else
      --v28[2];
  }
  v29 = *((_QWORD *)this + 63);
  if (v29)
  {
    *(_QWORD *)(v29 + 8) = 3;
    *((_QWORD *)this + 63) = 0;
  }
  v30 = (_DWORD *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v30)
  {
    if (v30[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
    else
      --v30[2];
  }
  v31 = *((_QWORD *)this + 59);
  if (v31)
  {
    *(_QWORD *)(v31 + 8) = 3;
    *((_QWORD *)this + 59) = 0;
  }
  v32 = (_DWORD *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v32)
  {
    if (v32[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
    else
      --v32[2];
  }
  v33 = *((_QWORD *)this + 55);
  if (v33)
  {
    *(_QWORD *)(v33 + 8) = 3;
    *((_QWORD *)this + 55) = 0;
  }
  v34 = (_DWORD *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v34)
  {
    if (v34[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
    else
      --v34[2];
  }
  v35 = *((_QWORD *)this + 51);
  if (v35)
  {
    *(_QWORD *)(v35 + 8) = 3;
    *((_QWORD *)this + 51) = 0;
  }
  v36 = (_DWORD *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v36)
  {
    if (v36[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
    else
      --v36[2];
  }
  v37 = *((_QWORD *)this + 47);
  if (v37)
  {
    *(_QWORD *)(v37 + 8) = 3;
    *((_QWORD *)this + 47) = 0;
  }
  v38 = (_DWORD *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v38)
  {
    if (v38[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
    else
      --v38[2];
  }
  v39 = *((_QWORD *)this + 43);
  if (v39)
  {
    *(_QWORD *)(v39 + 8) = 3;
    *((_QWORD *)this + 43) = 0;
  }
  v40 = (_DWORD *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v40)
  {
    if (v40[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
    else
      --v40[2];
  }
  v41 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, a2);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, a2);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, a2);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, a2);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, a2);
    else
      *(_DWORD *)v45 -= 2;
  }
  v46 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, a2);
    else
      *(_DWORD *)v46 -= 2;
  }
  v47 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, a2);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, a2);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, a2);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, a2);
    else
      *(_DWORD *)v50 -= 2;
  }
  v51 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, a2);
    else
      *(_DWORD *)v51 -= 2;
  }
  v52 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, a2);
    else
      *(_DWORD *)v52 -= 2;
  }
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, a2);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, a2);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, a2);
    else
      *(_DWORD *)v55 -= 2;
  }
  v56 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, a2);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, a2);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, a2);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, a2);
    else
      *(_DWORD *)v59 -= 2;
  }
  v60 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, a2);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, a2);
    else
      *(_DWORD *)v61 -= 2;
  }
  v62 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, a2);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, a2);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, a2);
    else
      *(_DWORD *)v64 -= 2;
  }
  v65 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, a2);
    else
      *(_DWORD *)v65 -= 2;
  }
  v66 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, a2);
    else
      *(_DWORD *)v66 -= 2;
  }
  v67 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, a2);
    else
      *(_DWORD *)v67 -= 2;
  }
  v68 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, a2);
    else
      *(_DWORD *)v68 -= 2;
  }
  v69 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, a2);
    else
      *(_DWORD *)v69 -= 2;
  }
  v70 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, a2);
    else
      *(_DWORD *)v70 -= 2;
  }
  v71 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, a2);
    else
      *(_DWORD *)v71 -= 2;
  }
  v72 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, a2);
    else
      *(_DWORD *)v72 -= 2;
  }
  v73 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, a2);
    else
      *(_DWORD *)v73 -= 2;
  }
  v74 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, a2);
    else
      *(_DWORD *)v74 -= 2;
  }
  v75 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, a2);
    else
      *(_DWORD *)v75 -= 2;
  }
  v76 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, a2);
    else
      *(_DWORD *)v76 -= 2;
  }
  v77 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, a2);
    else
      *(_DWORD *)v77 -= 2;
  }
  v78 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, a2);
    else
      *(_DWORD *)v78 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::WritableStreamDefaultControllerBuiltinsWrapper::~WritableStreamDefaultControllerBuiltinsWrapper(WebCore::WritableStreamDefaultControllerBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::WritableStreamDefaultControllerBuiltinsWrapper::~WritableStreamDefaultControllerBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  *(_QWORD *)this = &off_1E3394148;
  v3 = *((_QWORD *)this + 19);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 19) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 15);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 15) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 11);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 11) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::WritableStreamDefaultWriterBuiltinsWrapper::~WritableStreamDefaultWriterBuiltinsWrapper(WebCore::WritableStreamDefaultWriterBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::WritableStreamDefaultWriterBuiltinsWrapper::~WritableStreamDefaultWriterBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;

  *(_QWORD *)this = &off_1E3394178;
  v3 = *((_QWORD *)this + 49);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 49) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 45);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 45) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 41);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 41) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 37);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 37) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 33);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 3;
    *((_QWORD *)this + 33) = 0;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = *((_QWORD *)this + 29);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 3;
    *((_QWORD *)this + 29) = 0;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = *((_QWORD *)this + 25);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 3;
    *((_QWORD *)this + 25) = 0;
  }
  v16 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = *((_QWORD *)this + 21);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 3;
    *((_QWORD *)this + 21) = 0;
  }
  v18 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, a2);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, a2);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, a2);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, a2);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, a2);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, a2);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, a2);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, a2);
    else
      *(_DWORD *)v34 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::WritableStreamInternalsBuiltinsWrapper::~WritableStreamInternalsBuiltinsWrapper(WebCore::WritableStreamInternalsBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::WritableStreamInternalsBuiltinsWrapper::~WritableStreamInternalsBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;

  *(_QWORD *)this = &off_1E33941A8;
  v3 = *((_QWORD *)this + 295);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 295) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 292);
  *((_QWORD *)this + 292) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 291);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 291) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 288);
  *((_QWORD *)this + 288) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 287);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 287) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 284);
  *((_QWORD *)this + 284) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 283);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 283) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 280);
  *((_QWORD *)this + 280) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 279);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 3;
    *((_QWORD *)this + 279) = 0;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = *((_QWORD *)this + 275);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 3;
    *((_QWORD *)this + 275) = 0;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 272);
  *((_QWORD *)this + 272) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = *((_QWORD *)this + 271);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 3;
    *((_QWORD *)this + 271) = 0;
  }
  v16 = (_DWORD *)*((_QWORD *)this + 268);
  *((_QWORD *)this + 268) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = *((_QWORD *)this + 267);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 3;
    *((_QWORD *)this + 267) = 0;
  }
  v18 = (_DWORD *)*((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = *((_QWORD *)this + 263);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 3;
    *((_QWORD *)this + 263) = 0;
  }
  v20 = (_DWORD *)*((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = 0;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  v21 = *((_QWORD *)this + 259);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 3;
    *((_QWORD *)this + 259) = 0;
  }
  v22 = (_DWORD *)*((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  v23 = *((_QWORD *)this + 255);
  if (v23)
  {
    *(_QWORD *)(v23 + 8) = 3;
    *((_QWORD *)this + 255) = 0;
  }
  v24 = (_DWORD *)*((_QWORD *)this + 252);
  *((_QWORD *)this + 252) = 0;
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  v25 = *((_QWORD *)this + 251);
  if (v25)
  {
    *(_QWORD *)(v25 + 8) = 3;
    *((_QWORD *)this + 251) = 0;
  }
  v26 = (_DWORD *)*((_QWORD *)this + 248);
  *((_QWORD *)this + 248) = 0;
  if (v26)
  {
    if (v26[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
    else
      --v26[2];
  }
  v27 = *((_QWORD *)this + 247);
  if (v27)
  {
    *(_QWORD *)(v27 + 8) = 3;
    *((_QWORD *)this + 247) = 0;
  }
  v28 = (_DWORD *)*((_QWORD *)this + 244);
  *((_QWORD *)this + 244) = 0;
  if (v28)
  {
    if (v28[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
    else
      --v28[2];
  }
  v29 = *((_QWORD *)this + 243);
  if (v29)
  {
    *(_QWORD *)(v29 + 8) = 3;
    *((_QWORD *)this + 243) = 0;
  }
  v30 = (_DWORD *)*((_QWORD *)this + 240);
  *((_QWORD *)this + 240) = 0;
  if (v30)
  {
    if (v30[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
    else
      --v30[2];
  }
  v31 = *((_QWORD *)this + 239);
  if (v31)
  {
    *(_QWORD *)(v31 + 8) = 3;
    *((_QWORD *)this + 239) = 0;
  }
  v32 = (_DWORD *)*((_QWORD *)this + 236);
  *((_QWORD *)this + 236) = 0;
  if (v32)
  {
    if (v32[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
    else
      --v32[2];
  }
  v33 = *((_QWORD *)this + 235);
  if (v33)
  {
    *(_QWORD *)(v33 + 8) = 3;
    *((_QWORD *)this + 235) = 0;
  }
  v34 = (_DWORD *)*((_QWORD *)this + 232);
  *((_QWORD *)this + 232) = 0;
  if (v34)
  {
    if (v34[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
    else
      --v34[2];
  }
  v35 = *((_QWORD *)this + 231);
  if (v35)
  {
    *(_QWORD *)(v35 + 8) = 3;
    *((_QWORD *)this + 231) = 0;
  }
  v36 = (_DWORD *)*((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = 0;
  if (v36)
  {
    if (v36[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
    else
      --v36[2];
  }
  v37 = *((_QWORD *)this + 227);
  if (v37)
  {
    *(_QWORD *)(v37 + 8) = 3;
    *((_QWORD *)this + 227) = 0;
  }
  v38 = (_DWORD *)*((_QWORD *)this + 224);
  *((_QWORD *)this + 224) = 0;
  if (v38)
  {
    if (v38[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
    else
      --v38[2];
  }
  v39 = *((_QWORD *)this + 223);
  if (v39)
  {
    *(_QWORD *)(v39 + 8) = 3;
    *((_QWORD *)this + 223) = 0;
  }
  v40 = (_DWORD *)*((_QWORD *)this + 220);
  *((_QWORD *)this + 220) = 0;
  if (v40)
  {
    if (v40[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
    else
      --v40[2];
  }
  v41 = *((_QWORD *)this + 219);
  if (v41)
  {
    *(_QWORD *)(v41 + 8) = 3;
    *((_QWORD *)this + 219) = 0;
  }
  v42 = (_DWORD *)*((_QWORD *)this + 216);
  *((_QWORD *)this + 216) = 0;
  if (v42)
  {
    if (v42[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
    else
      --v42[2];
  }
  v43 = *((_QWORD *)this + 215);
  if (v43)
  {
    *(_QWORD *)(v43 + 8) = 3;
    *((_QWORD *)this + 215) = 0;
  }
  v44 = (_DWORD *)*((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v44)
  {
    if (v44[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
    else
      --v44[2];
  }
  v45 = *((_QWORD *)this + 211);
  if (v45)
  {
    *(_QWORD *)(v45 + 8) = 3;
    *((_QWORD *)this + 211) = 0;
  }
  v46 = (_DWORD *)*((_QWORD *)this + 208);
  *((_QWORD *)this + 208) = 0;
  if (v46)
  {
    if (v46[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
    else
      --v46[2];
  }
  v47 = *((_QWORD *)this + 207);
  if (v47)
  {
    *(_QWORD *)(v47 + 8) = 3;
    *((_QWORD *)this + 207) = 0;
  }
  v48 = (_DWORD *)*((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = 0;
  if (v48)
  {
    if (v48[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
    else
      --v48[2];
  }
  v49 = *((_QWORD *)this + 203);
  if (v49)
  {
    *(_QWORD *)(v49 + 8) = 3;
    *((_QWORD *)this + 203) = 0;
  }
  v50 = (_DWORD *)*((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = 0;
  if (v50)
  {
    if (v50[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
    else
      --v50[2];
  }
  v51 = *((_QWORD *)this + 199);
  if (v51)
  {
    *(_QWORD *)(v51 + 8) = 3;
    *((_QWORD *)this + 199) = 0;
  }
  v52 = (_DWORD *)*((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  v53 = *((_QWORD *)this + 195);
  if (v53)
  {
    *(_QWORD *)(v53 + 8) = 3;
    *((_QWORD *)this + 195) = 0;
  }
  v54 = (_DWORD *)*((_QWORD *)this + 192);
  *((_QWORD *)this + 192) = 0;
  if (v54)
  {
    if (v54[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
    else
      --v54[2];
  }
  v55 = *((_QWORD *)this + 191);
  if (v55)
  {
    *(_QWORD *)(v55 + 8) = 3;
    *((_QWORD *)this + 191) = 0;
  }
  v56 = (_DWORD *)*((_QWORD *)this + 188);
  *((_QWORD *)this + 188) = 0;
  if (v56)
  {
    if (v56[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v56 + 8))(v56);
    else
      --v56[2];
  }
  v57 = *((_QWORD *)this + 187);
  if (v57)
  {
    *(_QWORD *)(v57 + 8) = 3;
    *((_QWORD *)this + 187) = 0;
  }
  v58 = (_DWORD *)*((_QWORD *)this + 184);
  *((_QWORD *)this + 184) = 0;
  if (v58)
  {
    if (v58[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 8))(v58);
    else
      --v58[2];
  }
  v59 = *((_QWORD *)this + 183);
  if (v59)
  {
    *(_QWORD *)(v59 + 8) = 3;
    *((_QWORD *)this + 183) = 0;
  }
  v60 = (_DWORD *)*((_QWORD *)this + 180);
  *((_QWORD *)this + 180) = 0;
  if (v60)
  {
    if (v60[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v60 + 8))(v60);
    else
      --v60[2];
  }
  v61 = *((_QWORD *)this + 179);
  if (v61)
  {
    *(_QWORD *)(v61 + 8) = 3;
    *((_QWORD *)this + 179) = 0;
  }
  v62 = (_DWORD *)*((_QWORD *)this + 176);
  *((_QWORD *)this + 176) = 0;
  if (v62)
  {
    if (v62[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
    else
      --v62[2];
  }
  v63 = *((_QWORD *)this + 175);
  if (v63)
  {
    *(_QWORD *)(v63 + 8) = 3;
    *((_QWORD *)this + 175) = 0;
  }
  v64 = (_DWORD *)*((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = 0;
  if (v64)
  {
    if (v64[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 8))(v64);
    else
      --v64[2];
  }
  v65 = *((_QWORD *)this + 171);
  if (v65)
  {
    *(_QWORD *)(v65 + 8) = 3;
    *((_QWORD *)this + 171) = 0;
  }
  v66 = (_DWORD *)*((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v66)
  {
    if (v66[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v66 + 8))(v66);
    else
      --v66[2];
  }
  v67 = *((_QWORD *)this + 167);
  if (v67)
  {
    *(_QWORD *)(v67 + 8) = 3;
    *((_QWORD *)this + 167) = 0;
  }
  v68 = (_DWORD *)*((_QWORD *)this + 164);
  *((_QWORD *)this + 164) = 0;
  if (v68)
  {
    if (v68[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 8))(v68);
    else
      --v68[2];
  }
  v69 = *((_QWORD *)this + 163);
  if (v69)
  {
    *(_QWORD *)(v69 + 8) = 3;
    *((_QWORD *)this + 163) = 0;
  }
  v70 = (_DWORD *)*((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = 0;
  if (v70)
  {
    if (v70[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v70 + 8))(v70);
    else
      --v70[2];
  }
  v71 = *((_QWORD *)this + 159);
  if (v71)
  {
    *(_QWORD *)(v71 + 8) = 3;
    *((_QWORD *)this + 159) = 0;
  }
  v72 = (_DWORD *)*((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = 0;
  if (v72)
  {
    if (v72[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v72 + 8))(v72);
    else
      --v72[2];
  }
  v73 = *((_QWORD *)this + 155);
  if (v73)
  {
    *(_QWORD *)(v73 + 8) = 3;
    *((_QWORD *)this + 155) = 0;
  }
  v74 = (_DWORD *)*((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = 0;
  if (v74)
  {
    if (v74[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v74 + 8))(v74);
    else
      --v74[2];
  }
  v75 = *((_QWORD *)this + 151);
  if (v75)
  {
    *(_QWORD *)(v75 + 8) = 3;
    *((_QWORD *)this + 151) = 0;
  }
  v76 = (_DWORD *)*((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v76)
  {
    if (v76[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v76 + 8))(v76);
    else
      --v76[2];
  }
  v77 = *((_QWORD *)this + 147);
  if (v77)
  {
    *(_QWORD *)(v77 + 8) = 3;
    *((_QWORD *)this + 147) = 0;
  }
  v78 = (_DWORD *)*((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v78)
  {
    if (v78[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v78 + 8))(v78);
    else
      --v78[2];
  }
  v79 = *((_QWORD *)this + 143);
  if (v79)
  {
    *(_QWORD *)(v79 + 8) = 3;
    *((_QWORD *)this + 143) = 0;
  }
  v80 = (_DWORD *)*((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v80)
  {
    if (v80[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v80 + 8))(v80);
    else
      --v80[2];
  }
  v81 = *((_QWORD *)this + 139);
  if (v81)
  {
    *(_QWORD *)(v81 + 8) = 3;
    *((_QWORD *)this + 139) = 0;
  }
  v82 = (_DWORD *)*((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v82)
  {
    if (v82[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v82 + 8))(v82);
    else
      --v82[2];
  }
  v83 = *((_QWORD *)this + 135);
  if (v83)
  {
    *(_QWORD *)(v83 + 8) = 3;
    *((_QWORD *)this + 135) = 0;
  }
  v84 = (_DWORD *)*((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = 0;
  if (v84)
  {
    if (v84[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v84 + 8))(v84);
    else
      --v84[2];
  }
  v85 = *((_QWORD *)this + 131);
  if (v85)
  {
    *(_QWORD *)(v85 + 8) = 3;
    *((_QWORD *)this + 131) = 0;
  }
  v86 = (_DWORD *)*((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = 0;
  if (v86)
  {
    if (v86[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v86 + 8))(v86);
    else
      --v86[2];
  }
  v87 = *((_QWORD *)this + 127);
  if (v87)
  {
    *(_QWORD *)(v87 + 8) = 3;
    *((_QWORD *)this + 127) = 0;
  }
  v88 = (_DWORD *)*((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v88)
  {
    if (v88[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v88 + 8))(v88);
    else
      --v88[2];
  }
  v89 = *((_QWORD *)this + 123);
  if (v89)
  {
    *(_QWORD *)(v89 + 8) = 3;
    *((_QWORD *)this + 123) = 0;
  }
  v90 = (_DWORD *)*((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v90)
  {
    if (v90[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v90 + 8))(v90);
    else
      --v90[2];
  }
  v91 = *((_QWORD *)this + 119);
  if (v91)
  {
    *(_QWORD *)(v91 + 8) = 3;
    *((_QWORD *)this + 119) = 0;
  }
  v92 = (_DWORD *)*((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v92)
  {
    if (v92[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v92 + 8))(v92);
    else
      --v92[2];
  }
  v93 = *((_QWORD *)this + 115);
  if (v93)
  {
    *(_QWORD *)(v93 + 8) = 3;
    *((_QWORD *)this + 115) = 0;
  }
  v94 = (_DWORD *)*((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v94)
  {
    if (v94[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v94 + 8))(v94);
    else
      --v94[2];
  }
  v95 = *((_QWORD *)this + 111);
  if (v95)
  {
    *(_QWORD *)(v95 + 8) = 3;
    *((_QWORD *)this + 111) = 0;
  }
  v96 = (_DWORD *)*((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v96)
  {
    if (v96[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v96 + 8))(v96);
    else
      --v96[2];
  }
  v97 = *((_QWORD *)this + 107);
  if (v97)
  {
    *(_QWORD *)(v97 + 8) = 3;
    *((_QWORD *)this + 107) = 0;
  }
  v98 = (_DWORD *)*((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v98)
  {
    if (v98[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v98 + 8))(v98);
    else
      --v98[2];
  }
  v99 = *((_QWORD *)this + 103);
  if (v99)
  {
    *(_QWORD *)(v99 + 8) = 3;
    *((_QWORD *)this + 103) = 0;
  }
  v100 = (_DWORD *)*((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v100)
  {
    if (v100[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v100 + 8))(v100);
    else
      --v100[2];
  }
  v101 = (WTF::StringImpl *)*((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy(v101, a2);
    else
      *(_DWORD *)v101 -= 2;
  }
  v102 = (WTF::StringImpl *)*((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
      WTF::StringImpl::destroy(v102, a2);
    else
      *(_DWORD *)v102 -= 2;
  }
  v103 = (WTF::StringImpl *)*((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
      WTF::StringImpl::destroy(v103, a2);
    else
      *(_DWORD *)v103 -= 2;
  }
  v104 = (WTF::StringImpl *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
      WTF::StringImpl::destroy(v104, a2);
    else
      *(_DWORD *)v104 -= 2;
  }
  v105 = (WTF::StringImpl *)*((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
      WTF::StringImpl::destroy(v105, a2);
    else
      *(_DWORD *)v105 -= 2;
  }
  v106 = (WTF::StringImpl *)*((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
      WTF::StringImpl::destroy(v106, a2);
    else
      *(_DWORD *)v106 -= 2;
  }
  v107 = (WTF::StringImpl *)*((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
      WTF::StringImpl::destroy(v107, a2);
    else
      *(_DWORD *)v107 -= 2;
  }
  v108 = (WTF::StringImpl *)*((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
      WTF::StringImpl::destroy(v108, a2);
    else
      *(_DWORD *)v108 -= 2;
  }
  v109 = (WTF::StringImpl *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
      WTF::StringImpl::destroy(v109, a2);
    else
      *(_DWORD *)v109 -= 2;
  }
  v110 = (WTF::StringImpl *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
      WTF::StringImpl::destroy(v110, a2);
    else
      *(_DWORD *)v110 -= 2;
  }
  v111 = (WTF::StringImpl *)*((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, a2);
    else
      *(_DWORD *)v111 -= 2;
  }
  v112 = (WTF::StringImpl *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
      WTF::StringImpl::destroy(v112, a2);
    else
      *(_DWORD *)v112 -= 2;
  }
  v113 = (WTF::StringImpl *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, a2);
    else
      *(_DWORD *)v113 -= 2;
  }
  v114 = (WTF::StringImpl *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
      WTF::StringImpl::destroy(v114, a2);
    else
      *(_DWORD *)v114 -= 2;
  }
  v115 = (WTF::StringImpl *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
      WTF::StringImpl::destroy(v115, a2);
    else
      *(_DWORD *)v115 -= 2;
  }
  v116 = (WTF::StringImpl *)*((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
      WTF::StringImpl::destroy(v116, a2);
    else
      *(_DWORD *)v116 -= 2;
  }
  v117 = (WTF::StringImpl *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
      WTF::StringImpl::destroy(v117, a2);
    else
      *(_DWORD *)v117 -= 2;
  }
  v118 = (WTF::StringImpl *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
      WTF::StringImpl::destroy(v118, a2);
    else
      *(_DWORD *)v118 -= 2;
  }
  v119 = (WTF::StringImpl *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
      WTF::StringImpl::destroy(v119, a2);
    else
      *(_DWORD *)v119 -= 2;
  }
  v120 = (WTF::StringImpl *)*((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
      WTF::StringImpl::destroy(v120, a2);
    else
      *(_DWORD *)v120 -= 2;
  }
  v121 = (WTF::StringImpl *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      WTF::StringImpl::destroy(v121, a2);
    else
      *(_DWORD *)v121 -= 2;
  }
  v122 = (WTF::StringImpl *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
      WTF::StringImpl::destroy(v122, a2);
    else
      *(_DWORD *)v122 -= 2;
  }
  v123 = (WTF::StringImpl *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
      WTF::StringImpl::destroy(v123, a2);
    else
      *(_DWORD *)v123 -= 2;
  }
  v124 = (WTF::StringImpl *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
      WTF::StringImpl::destroy(v124, a2);
    else
      *(_DWORD *)v124 -= 2;
  }
  v125 = (WTF::StringImpl *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
      WTF::StringImpl::destroy(v125, a2);
    else
      *(_DWORD *)v125 -= 2;
  }
  v126 = (WTF::StringImpl *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
      WTF::StringImpl::destroy(v126, a2);
    else
      *(_DWORD *)v126 -= 2;
  }
  v127 = (WTF::StringImpl *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
      WTF::StringImpl::destroy(v127, a2);
    else
      *(_DWORD *)v127 -= 2;
  }
  v128 = (WTF::StringImpl *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
      WTF::StringImpl::destroy(v128, a2);
    else
      *(_DWORD *)v128 -= 2;
  }
  v129 = (WTF::StringImpl *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
      WTF::StringImpl::destroy(v129, a2);
    else
      *(_DWORD *)v129 -= 2;
  }
  v130 = (WTF::StringImpl *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
      WTF::StringImpl::destroy(v130, a2);
    else
      *(_DWORD *)v130 -= 2;
  }
  v131 = (WTF::StringImpl *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
      WTF::StringImpl::destroy(v131, a2);
    else
      *(_DWORD *)v131 -= 2;
  }
  v132 = (WTF::StringImpl *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2)
      WTF::StringImpl::destroy(v132, a2);
    else
      *(_DWORD *)v132 -= 2;
  }
  v133 = (WTF::StringImpl *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
      WTF::StringImpl::destroy(v133, a2);
    else
      *(_DWORD *)v133 -= 2;
  }
  v134 = (WTF::StringImpl *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
      WTF::StringImpl::destroy(v134, a2);
    else
      *(_DWORD *)v134 -= 2;
  }
  v135 = (WTF::StringImpl *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
      WTF::StringImpl::destroy(v135, a2);
    else
      *(_DWORD *)v135 -= 2;
  }
  v136 = (WTF::StringImpl *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
      WTF::StringImpl::destroy(v136, a2);
    else
      *(_DWORD *)v136 -= 2;
  }
  v137 = (WTF::StringImpl *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
      WTF::StringImpl::destroy(v137, a2);
    else
      *(_DWORD *)v137 -= 2;
  }
  v138 = (WTF::StringImpl *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
      WTF::StringImpl::destroy(v138, a2);
    else
      *(_DWORD *)v138 -= 2;
  }
  v139 = (WTF::StringImpl *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
      WTF::StringImpl::destroy(v139, a2);
    else
      *(_DWORD *)v139 -= 2;
  }
  v140 = (WTF::StringImpl *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
      WTF::StringImpl::destroy(v140, a2);
    else
      *(_DWORD *)v140 -= 2;
  }
  v141 = (WTF::StringImpl *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
      WTF::StringImpl::destroy(v141, a2);
    else
      *(_DWORD *)v141 -= 2;
  }
  v142 = (WTF::StringImpl *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
      WTF::StringImpl::destroy(v142, a2);
    else
      *(_DWORD *)v142 -= 2;
  }
  v143 = (WTF::StringImpl *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
      WTF::StringImpl::destroy(v143, a2);
    else
      *(_DWORD *)v143 -= 2;
  }
  v144 = (WTF::StringImpl *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
      WTF::StringImpl::destroy(v144, a2);
    else
      *(_DWORD *)v144 -= 2;
  }
  v145 = (WTF::StringImpl *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
      WTF::StringImpl::destroy(v145, a2);
    else
      *(_DWORD *)v145 -= 2;
  }
  v146 = (WTF::StringImpl *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
      WTF::StringImpl::destroy(v146, a2);
    else
      *(_DWORD *)v146 -= 2;
  }
  v147 = (WTF::StringImpl *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
      WTF::StringImpl::destroy(v147, a2);
    else
      *(_DWORD *)v147 -= 2;
  }
  v148 = (WTF::StringImpl *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
      WTF::StringImpl::destroy(v148, a2);
    else
      *(_DWORD *)v148 -= 2;
  }
  v149 = (WTF::StringImpl *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
      WTF::StringImpl::destroy(v149, a2);
    else
      *(_DWORD *)v149 -= 2;
  }
  v150 = (WTF::StringImpl *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v150)
  {
    if (*(_DWORD *)v150 == 2)
      WTF::StringImpl::destroy(v150, a2);
    else
      *(_DWORD *)v150 -= 2;
  }
  v151 = (WTF::StringImpl *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
      WTF::StringImpl::destroy(v151, a2);
    else
      *(_DWORD *)v151 -= 2;
  }
  v152 = (WTF::StringImpl *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v152)
  {
    if (*(_DWORD *)v152 == 2)
      WTF::StringImpl::destroy(v152, a2);
    else
      *(_DWORD *)v152 -= 2;
  }
  v153 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v153)
  {
    if (*(_DWORD *)v153 == 2)
      WTF::StringImpl::destroy(v153, a2);
    else
      *(_DWORD *)v153 -= 2;
  }
  v154 = (WTF::StringImpl *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v154)
  {
    if (*(_DWORD *)v154 == 2)
      WTF::StringImpl::destroy(v154, a2);
    else
      *(_DWORD *)v154 -= 2;
  }
  v155 = (WTF::StringImpl *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v155)
  {
    if (*(_DWORD *)v155 == 2)
      WTF::StringImpl::destroy(v155, a2);
    else
      *(_DWORD *)v155 -= 2;
  }
  v156 = (WTF::StringImpl *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
      WTF::StringImpl::destroy(v156, a2);
    else
      *(_DWORD *)v156 -= 2;
  }
  v157 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v157)
  {
    if (*(_DWORD *)v157 == 2)
      WTF::StringImpl::destroy(v157, a2);
    else
      *(_DWORD *)v157 -= 2;
  }
  v158 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v158)
  {
    if (*(_DWORD *)v158 == 2)
      WTF::StringImpl::destroy(v158, a2);
    else
      *(_DWORD *)v158 -= 2;
  }
  v159 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v159)
  {
    if (*(_DWORD *)v159 == 2)
      WTF::StringImpl::destroy(v159, a2);
    else
      *(_DWORD *)v159 -= 2;
  }
  v160 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
      WTF::StringImpl::destroy(v160, a2);
    else
      *(_DWORD *)v160 -= 2;
  }
  v161 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v161)
  {
    if (*(_DWORD *)v161 == 2)
      WTF::StringImpl::destroy(v161, a2);
    else
      *(_DWORD *)v161 -= 2;
  }
  v162 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v162)
  {
    if (*(_DWORD *)v162 == 2)
      WTF::StringImpl::destroy(v162, a2);
    else
      *(_DWORD *)v162 -= 2;
  }
  v163 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v163)
  {
    if (*(_DWORD *)v163 == 2)
      WTF::StringImpl::destroy(v163, a2);
    else
      *(_DWORD *)v163 -= 2;
  }
  v164 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v164)
  {
    if (*(_DWORD *)v164 == 2)
      WTF::StringImpl::destroy(v164, a2);
    else
      *(_DWORD *)v164 -= 2;
  }
  v165 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v165)
  {
    if (*(_DWORD *)v165 == 2)
      WTF::StringImpl::destroy(v165, a2);
    else
      *(_DWORD *)v165 -= 2;
  }
  v166 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v166)
  {
    if (*(_DWORD *)v166 == 2)
      WTF::StringImpl::destroy(v166, a2);
    else
      *(_DWORD *)v166 -= 2;
  }
  v167 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v167)
  {
    if (*(_DWORD *)v167 == 2)
      WTF::StringImpl::destroy(v167, a2);
    else
      *(_DWORD *)v167 -= 2;
  }
  v168 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v168)
  {
    if (*(_DWORD *)v168 == 2)
      WTF::StringImpl::destroy(v168, a2);
    else
      *(_DWORD *)v168 -= 2;
  }
  v169 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v169)
  {
    if (*(_DWORD *)v169 == 2)
      WTF::StringImpl::destroy(v169, a2);
    else
      *(_DWORD *)v169 -= 2;
  }
  v170 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
      WTF::StringImpl::destroy(v170, a2);
    else
      *(_DWORD *)v170 -= 2;
  }
  v171 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
      WTF::StringImpl::destroy(v171, a2);
    else
      *(_DWORD *)v171 -= 2;
  }
  v172 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
      WTF::StringImpl::destroy(v172, a2);
    else
      *(_DWORD *)v172 -= 2;
  }
  v173 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
      WTF::StringImpl::destroy(v173, a2);
    else
      *(_DWORD *)v173 -= 2;
  }
  v174 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 2)
      WTF::StringImpl::destroy(v174, a2);
    else
      *(_DWORD *)v174 -= 2;
  }
  v175 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v175)
  {
    if (*(_DWORD *)v175 == 2)
      WTF::StringImpl::destroy(v175, a2);
    else
      *(_DWORD *)v175 -= 2;
  }
  v176 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
      WTF::StringImpl::destroy(v176, a2);
    else
      *(_DWORD *)v176 -= 2;
  }
  v177 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v177)
  {
    if (*(_DWORD *)v177 == 2)
      WTF::StringImpl::destroy(v177, a2);
    else
      *(_DWORD *)v177 -= 2;
  }
  v178 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v178)
  {
    if (*(_DWORD *)v178 == 2)
      WTF::StringImpl::destroy(v178, a2);
    else
      *(_DWORD *)v178 -= 2;
  }
  v179 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v179)
  {
    if (*(_DWORD *)v179 == 2)
      WTF::StringImpl::destroy(v179, a2);
    else
      *(_DWORD *)v179 -= 2;
  }
  v180 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v180)
  {
    if (*(_DWORD *)v180 == 2)
      WTF::StringImpl::destroy(v180, a2);
    else
      *(_DWORD *)v180 -= 2;
  }
  v181 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v181)
  {
    if (*(_DWORD *)v181 == 2)
      WTF::StringImpl::destroy(v181, a2);
    else
      *(_DWORD *)v181 -= 2;
  }
  v182 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
      WTF::StringImpl::destroy(v182, a2);
    else
      *(_DWORD *)v182 -= 2;
  }
  v183 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v183)
  {
    if (*(_DWORD *)v183 == 2)
      WTF::StringImpl::destroy(v183, a2);
    else
      *(_DWORD *)v183 -= 2;
  }
  v184 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v184)
  {
    if (*(_DWORD *)v184 == 2)
      WTF::StringImpl::destroy(v184, a2);
    else
      *(_DWORD *)v184 -= 2;
  }
  v185 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v185)
  {
    if (*(_DWORD *)v185 == 2)
      WTF::StringImpl::destroy(v185, a2);
    else
      *(_DWORD *)v185 -= 2;
  }
  v186 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v186)
  {
    if (*(_DWORD *)v186 == 2)
      WTF::StringImpl::destroy(v186, a2);
    else
      *(_DWORD *)v186 -= 2;
  }
  v187 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
      WTF::StringImpl::destroy(v187, a2);
    else
      *(_DWORD *)v187 -= 2;
  }
  v188 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v188)
  {
    if (*(_DWORD *)v188 == 2)
      WTF::StringImpl::destroy(v188, a2);
    else
      *(_DWORD *)v188 -= 2;
  }
  v189 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v189)
  {
    if (*(_DWORD *)v189 == 2)
      WTF::StringImpl::destroy(v189, a2);
    else
      *(_DWORD *)v189 -= 2;
  }
  v190 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v190)
  {
    if (*(_DWORD *)v190 == 2)
      WTF::StringImpl::destroy(v190, a2);
    else
      *(_DWORD *)v190 -= 2;
  }
  v191 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v191)
  {
    if (*(_DWORD *)v191 == 2)
      WTF::StringImpl::destroy(v191, a2);
    else
      *(_DWORD *)v191 -= 2;
  }
  v192 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v192)
  {
    if (*(_DWORD *)v192 == 2)
      WTF::StringImpl::destroy(v192, a2);
    else
      *(_DWORD *)v192 -= 2;
  }
  v193 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v193)
  {
    if (*(_DWORD *)v193 == 2)
      WTF::StringImpl::destroy(v193, a2);
    else
      *(_DWORD *)v193 -= 2;
  }
  v194 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v194)
  {
    if (*(_DWORD *)v194 == 2)
      WTF::StringImpl::destroy(v194, a2);
    else
      *(_DWORD *)v194 -= 2;
  }
  v195 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v195)
  {
    if (*(_DWORD *)v195 == 2)
      WTF::StringImpl::destroy(v195, a2);
    else
      *(_DWORD *)v195 -= 2;
  }
  v196 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v196)
  {
    if (*(_DWORD *)v196 == 2)
      WTF::StringImpl::destroy(v196, a2);
    else
      *(_DWORD *)v196 -= 2;
  }
  v197 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v197)
  {
    if (*(_DWORD *)v197 == 2)
      WTF::StringImpl::destroy(v197, a2);
    else
      *(_DWORD *)v197 -= 2;
  }
  v198 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v198)
  {
    if (*(_DWORD *)v198 == 2)
      WTF::StringImpl::destroy(v198, a2);
    else
      *(_DWORD *)v198 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::JSDOMBindingInternalsBuiltinsWrapper::~JSDOMBindingInternalsBuiltinsWrapper(WebCore::JSDOMBindingInternalsBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::JSDOMBindingInternalsBuiltinsWrapper::~JSDOMBindingInternalsBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  *(_QWORD *)this = &off_1E33941D8;
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 13) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 9) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::TextDecoderStreamBuiltinsWrapper::~TextDecoderStreamBuiltinsWrapper(WebCore::TextDecoderStreamBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::TextDecoderStreamBuiltinsWrapper::~TextDecoderStreamBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  *(_QWORD *)this = &off_1E3394208;
  v3 = *((_QWORD *)this + 37);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 37) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 33);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 33) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 29);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 29) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 25);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 25) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 21);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 3;
    *((_QWORD *)this + 21) = 0;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = *((_QWORD *)this + 17);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 3;
    *((_QWORD *)this + 17) = 0;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, a2);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::TextEncoderStreamBuiltinsWrapper::~TextEncoderStreamBuiltinsWrapper(WebCore::TextEncoderStreamBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  WebCore::TextEncoderStreamBuiltinsWrapper::~TextEncoderStreamBuiltinsWrapper(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  *(_QWORD *)this = &off_1E3394238;
  v3 = *((_QWORD *)this + 25);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 25) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 21);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 21) = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)this + 17);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 17) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 13);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 13) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

void WebCore::CommandLineAPIModuleSourceBuiltinsWrapper::~CommandLineAPIModuleSourceBuiltinsWrapper(WebCore::CommandLineAPIModuleSourceBuiltinsWrapper *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E3394268;
  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 7) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E3394268;
  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 7) = 0;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::DOMClientIsoSubspaces::~DOMClientIsoSubspaces(WebCore::DOMClientIsoSubspaces *this)
{
  uint64_t v2;
  WTF *v3;
  void *v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  uint64_t v50;
  WTF *v51;
  void *v52;
  uint64_t v53;
  WTF *v54;
  void *v55;
  uint64_t v56;
  WTF *v57;
  void *v58;
  uint64_t v59;
  WTF *v60;
  void *v61;
  uint64_t v62;
  WTF *v63;
  void *v64;
  uint64_t v65;
  WTF *v66;
  void *v67;
  uint64_t v68;
  WTF *v69;
  void *v70;
  uint64_t v71;
  WTF *v72;
  void *v73;
  uint64_t v74;
  WTF *v75;
  void *v76;
  uint64_t v77;
  WTF *v78;
  void *v79;
  uint64_t v80;
  WTF *v81;
  void *v82;
  uint64_t v83;
  WTF *v84;
  void *v85;
  uint64_t v86;
  WTF *v87;
  void *v88;
  uint64_t v89;
  WTF *v90;
  void *v91;
  uint64_t v92;
  WTF *v93;
  void *v94;
  uint64_t v95;
  WTF *v96;
  void *v97;
  uint64_t v98;
  WTF *v99;
  void *v100;
  uint64_t v101;
  WTF *v102;
  void *v103;
  uint64_t v104;
  WTF *v105;
  void *v106;
  uint64_t v107;
  WTF *v108;
  void *v109;
  uint64_t v110;
  WTF *v111;
  void *v112;
  uint64_t v113;
  WTF *v114;
  void *v115;
  uint64_t v116;
  WTF *v117;
  void *v118;
  uint64_t v119;
  WTF *v120;
  void *v121;
  uint64_t v122;
  WTF *v123;
  void *v124;
  uint64_t v125;
  WTF *v126;
  void *v127;
  uint64_t v128;
  WTF *v129;
  void *v130;
  uint64_t v131;
  WTF *v132;
  void *v133;
  uint64_t v134;
  WTF *v135;
  void *v136;
  uint64_t v137;
  WTF *v138;
  void *v139;
  uint64_t v140;
  WTF *v141;
  void *v142;
  uint64_t v143;
  WTF *v144;
  void *v145;
  uint64_t v146;
  WTF *v147;
  void *v148;
  uint64_t v149;
  WTF *v150;
  void *v151;
  uint64_t v152;
  WTF *v153;
  void *v154;
  uint64_t v155;
  WTF *v156;
  void *v157;
  uint64_t v158;
  WTF *v159;
  void *v160;
  uint64_t v161;
  WTF *v162;
  void *v163;
  uint64_t v164;
  WTF *v165;
  void *v166;
  uint64_t v167;
  WTF *v168;
  void *v169;
  uint64_t v170;
  WTF *v171;
  void *v172;
  uint64_t v173;
  WTF *v174;
  void *v175;
  uint64_t v176;
  WTF *v177;
  void *v178;
  uint64_t v179;
  WTF *v180;
  void *v181;
  uint64_t v182;
  WTF *v183;
  void *v184;
  uint64_t v185;
  WTF *v186;
  void *v187;
  uint64_t v188;
  WTF *v189;
  void *v190;
  uint64_t v191;
  WTF *v192;
  void *v193;
  uint64_t v194;
  WTF *v195;
  void *v196;
  uint64_t v197;
  WTF *v198;
  void *v199;
  uint64_t v200;
  WTF *v201;
  void *v202;
  uint64_t v203;
  WTF *v204;
  void *v205;
  uint64_t v206;
  WTF *v207;
  void *v208;
  uint64_t v209;
  WTF *v210;
  void *v211;
  uint64_t v212;
  WTF *v213;
  void *v214;
  uint64_t v215;
  WTF *v216;
  void *v217;
  uint64_t v218;
  WTF *v219;
  void *v220;
  uint64_t v221;
  WTF *v222;
  void *v223;
  uint64_t v224;
  WTF *v225;
  void *v226;
  uint64_t v227;
  WTF *v228;
  void *v229;
  uint64_t v230;
  WTF *v231;
  void *v232;
  uint64_t v233;
  WTF *v234;
  void *v235;
  uint64_t v236;
  WTF *v237;
  void *v238;
  uint64_t v239;
  WTF *v240;
  void *v241;
  uint64_t v242;
  WTF *v243;
  void *v244;
  uint64_t v245;
  WTF *v246;
  void *v247;
  uint64_t v248;
  WTF *v249;
  void *v250;
  uint64_t v251;
  WTF *v252;
  void *v253;
  uint64_t v254;
  WTF *v255;
  void *v256;
  uint64_t v257;
  WTF *v258;
  void *v259;
  uint64_t v260;
  WTF *v261;
  void *v262;
  uint64_t v263;
  WTF *v264;
  void *v265;
  uint64_t v266;
  WTF *v267;
  void *v268;
  uint64_t v269;
  WTF *v270;
  void *v271;
  uint64_t v272;
  WTF *v273;
  void *v274;
  uint64_t v275;
  WTF *v276;
  void *v277;
  uint64_t v278;
  WTF *v279;
  void *v280;
  uint64_t v281;
  WTF *v282;
  void *v283;
  uint64_t v284;
  WTF *v285;
  void *v286;
  uint64_t v287;
  WTF *v288;
  void *v289;
  uint64_t v290;
  WTF *v291;
  void *v292;
  uint64_t v293;
  WTF *v294;
  void *v295;
  uint64_t v296;
  WTF *v297;
  void *v298;
  uint64_t v299;
  WTF *v300;
  void *v301;
  uint64_t v302;
  WTF *v303;
  void *v304;
  uint64_t v305;
  WTF *v306;
  void *v307;
  uint64_t v308;
  WTF *v309;
  void *v310;
  uint64_t v311;
  WTF *v312;
  void *v313;
  uint64_t v314;
  WTF *v315;
  void *v316;
  uint64_t v317;
  WTF *v318;
  void *v319;
  uint64_t v320;
  WTF *v321;
  void *v322;
  uint64_t v323;
  WTF *v324;
  void *v325;
  uint64_t v326;
  WTF *v327;
  void *v328;
  uint64_t v329;
  WTF *v330;
  void *v331;
  uint64_t v332;
  WTF *v333;
  void *v334;
  uint64_t v335;
  WTF *v336;
  void *v337;
  uint64_t v338;
  WTF *v339;
  void *v340;
  uint64_t v341;
  WTF *v342;
  void *v343;
  uint64_t v344;
  WTF *v345;
  void *v346;
  uint64_t v347;
  WTF *v348;
  void *v349;
  uint64_t v350;
  WTF *v351;
  void *v352;
  uint64_t v353;
  WTF *v354;
  void *v355;
  uint64_t v356;
  WTF *v357;
  void *v358;
  uint64_t v359;
  WTF *v360;
  void *v361;
  uint64_t v362;
  WTF *v363;
  void *v364;
  uint64_t v365;
  WTF *v366;
  void *v367;
  uint64_t v368;
  WTF *v369;
  void *v370;
  uint64_t v371;
  WTF *v372;
  void *v373;
  uint64_t v374;
  WTF *v375;
  void *v376;
  uint64_t v377;
  WTF *v378;
  void *v379;
  uint64_t v380;
  WTF *v381;
  void *v382;
  uint64_t v383;
  WTF *v384;
  void *v385;
  uint64_t v386;
  WTF *v387;
  void *v388;
  uint64_t v389;
  WTF *v390;
  void *v391;
  uint64_t v392;
  WTF *v393;
  void *v394;
  uint64_t v395;
  WTF *v396;
  void *v397;
  uint64_t v398;
  WTF *v399;
  void *v400;
  uint64_t v401;
  WTF *v402;
  void *v403;
  uint64_t v404;
  WTF *v405;
  void *v406;
  uint64_t v407;
  WTF *v408;
  void *v409;
  uint64_t v410;
  WTF *v411;
  void *v412;
  uint64_t v413;
  WTF *v414;
  void *v415;
  uint64_t v416;
  WTF *v417;
  void *v418;
  uint64_t v419;
  WTF *v420;
  void *v421;
  uint64_t v422;
  WTF *v423;
  void *v424;
  uint64_t v425;
  WTF *v426;
  void *v427;
  uint64_t v428;
  WTF *v429;
  void *v430;
  uint64_t v431;
  WTF *v432;
  void *v433;
  uint64_t v434;
  WTF *v435;
  void *v436;
  uint64_t v437;
  WTF *v438;
  void *v439;
  uint64_t v440;
  WTF *v441;
  void *v442;
  uint64_t v443;
  WTF *v444;
  void *v445;
  uint64_t v446;
  WTF *v447;
  void *v448;
  uint64_t v449;
  WTF *v450;
  void *v451;
  uint64_t v452;
  WTF *v453;
  void *v454;
  uint64_t v455;
  WTF *v456;
  void *v457;
  uint64_t v458;
  WTF *v459;
  void *v460;
  uint64_t v461;
  WTF *v462;
  void *v463;
  uint64_t v464;
  WTF *v465;
  void *v466;
  uint64_t v467;
  WTF *v468;
  void *v469;
  uint64_t v470;
  WTF *v471;
  void *v472;
  uint64_t v473;
  WTF *v474;
  void *v475;
  uint64_t v476;
  WTF *v477;
  void *v478;
  uint64_t v479;
  WTF *v480;
  void *v481;
  uint64_t v482;
  WTF *v483;
  void *v484;
  uint64_t v485;
  WTF *v486;
  void *v487;
  uint64_t v488;
  WTF *v489;
  void *v490;
  uint64_t v491;
  WTF *v492;
  void *v493;
  uint64_t v494;
  WTF *v495;
  void *v496;
  uint64_t v497;
  WTF *v498;
  void *v499;
  uint64_t v500;
  WTF *v501;
  void *v502;
  uint64_t v503;
  WTF *v504;
  void *v505;
  uint64_t v506;
  WTF *v507;
  void *v508;
  uint64_t v509;
  WTF *v510;
  void *v511;
  uint64_t v512;
  WTF *v513;
  void *v514;
  uint64_t v515;
  WTF *v516;
  void *v517;
  uint64_t v518;
  WTF *v519;
  void *v520;
  uint64_t v521;
  WTF *v522;
  void *v523;
  uint64_t v524;
  WTF *v525;
  void *v526;
  uint64_t v527;
  WTF *v528;
  void *v529;
  uint64_t v530;
  WTF *v531;
  void *v532;
  uint64_t v533;
  WTF *v534;
  void *v535;
  uint64_t v536;
  WTF *v537;
  void *v538;
  uint64_t v539;
  WTF *v540;
  void *v541;
  uint64_t v542;
  WTF *v543;
  void *v544;
  uint64_t v545;
  WTF *v546;
  void *v547;
  uint64_t v548;
  WTF *v549;
  void *v550;
  uint64_t v551;
  WTF *v552;
  void *v553;
  uint64_t v554;
  WTF *v555;
  void *v556;
  uint64_t v557;
  WTF *v558;
  void *v559;
  uint64_t v560;
  WTF *v561;
  void *v562;
  uint64_t v563;
  WTF *v564;
  void *v565;
  uint64_t v566;
  WTF *v567;
  void *v568;
  uint64_t v569;
  WTF *v570;
  void *v571;
  uint64_t v572;
  WTF *v573;
  void *v574;
  uint64_t v575;
  WTF *v576;
  void *v577;
  uint64_t v578;
  WTF *v579;
  void *v580;
  uint64_t v581;
  WTF *v582;
  void *v583;
  uint64_t v584;
  WTF *v585;
  void *v586;
  uint64_t v587;
  WTF *v588;
  void *v589;
  uint64_t v590;
  WTF *v591;
  void *v592;
  uint64_t v593;
  WTF *v594;
  void *v595;
  uint64_t v596;
  WTF *v597;
  void *v598;
  uint64_t v599;
  WTF *v600;
  void *v601;
  uint64_t v602;
  WTF *v603;
  void *v604;
  uint64_t v605;
  WTF *v606;
  void *v607;
  uint64_t v608;
  WTF *v609;
  void *v610;
  uint64_t v611;
  WTF *v612;
  void *v613;
  uint64_t v614;
  WTF *v615;
  void *v616;
  uint64_t v617;
  WTF *v618;
  void *v619;
  uint64_t v620;
  WTF *v621;
  void *v622;
  uint64_t v623;
  WTF *v624;
  void *v625;
  uint64_t v626;
  WTF *v627;
  void *v628;
  uint64_t v629;
  WTF *v630;
  void *v631;
  uint64_t v632;
  WTF *v633;
  void *v634;
  uint64_t v635;
  WTF *v636;
  void *v637;
  uint64_t v638;
  WTF *v639;
  void *v640;
  uint64_t v641;
  WTF *v642;
  void *v643;
  uint64_t v644;
  WTF *v645;
  void *v646;
  uint64_t v647;
  WTF *v648;
  void *v649;
  uint64_t v650;
  WTF *v651;
  void *v652;
  uint64_t v653;
  WTF *v654;
  void *v655;
  uint64_t v656;
  WTF *v657;
  void *v658;
  uint64_t v659;
  WTF *v660;
  void *v661;
  uint64_t v662;
  WTF *v663;
  void *v664;
  uint64_t v665;
  WTF *v666;
  void *v667;
  uint64_t v668;
  WTF *v669;
  void *v670;
  uint64_t v671;
  WTF *v672;
  void *v673;
  uint64_t v674;
  WTF *v675;
  void *v676;
  uint64_t v677;
  WTF *v678;
  void *v679;
  uint64_t v680;
  WTF *v681;
  void *v682;
  uint64_t v683;
  WTF *v684;
  void *v685;
  uint64_t v686;
  WTF *v687;
  void *v688;
  uint64_t v689;
  WTF *v690;
  void *v691;
  uint64_t v692;
  WTF *v693;
  void *v694;
  uint64_t v695;
  WTF *v696;
  void *v697;
  uint64_t v698;
  WTF *v699;
  void *v700;
  uint64_t v701;
  WTF *v702;
  void *v703;
  uint64_t v704;
  WTF *v705;
  void *v706;
  uint64_t v707;
  WTF *v708;
  void *v709;
  uint64_t v710;
  WTF *v711;
  void *v712;
  uint64_t v713;
  WTF *v714;
  void *v715;
  uint64_t v716;
  WTF *v717;
  void *v718;
  uint64_t v719;
  WTF *v720;
  void *v721;
  uint64_t v722;
  WTF *v723;
  void *v724;
  uint64_t v725;
  WTF *v726;
  void *v727;
  uint64_t v728;
  WTF *v729;
  void *v730;
  uint64_t v731;
  WTF *v732;
  void *v733;
  uint64_t v734;
  WTF *v735;
  void *v736;
  uint64_t v737;
  WTF *v738;
  void *v739;
  uint64_t v740;
  WTF *v741;
  void *v742;
  uint64_t v743;
  WTF *v744;
  void *v745;
  uint64_t v746;
  WTF *v747;
  void *v748;
  uint64_t v749;
  WTF *v750;
  void *v751;
  uint64_t v752;
  WTF *v753;
  void *v754;
  uint64_t v755;
  WTF *v756;
  void *v757;
  uint64_t v758;
  WTF *v759;
  void *v760;
  uint64_t v761;
  WTF *v762;
  void *v763;
  uint64_t v764;
  WTF *v765;
  void *v766;
  uint64_t v767;
  WTF *v768;
  void *v769;
  uint64_t v770;
  WTF *v771;
  void *v772;
  uint64_t v773;
  WTF *v774;
  void *v775;
  uint64_t v776;
  WTF *v777;
  void *v778;
  uint64_t v779;
  WTF *v780;
  void *v781;
  uint64_t v782;
  WTF *v783;
  void *v784;
  uint64_t v785;
  WTF *v786;
  void *v787;
  uint64_t v788;
  WTF *v789;
  void *v790;
  uint64_t v791;
  WTF *v792;
  void *v793;
  uint64_t v794;
  WTF *v795;
  void *v796;
  uint64_t v797;
  WTF *v798;
  void *v799;
  uint64_t v800;
  WTF *v801;
  void *v802;
  uint64_t v803;
  WTF *v804;
  void *v805;
  uint64_t v806;
  WTF *v807;
  void *v808;
  uint64_t v809;
  WTF *v810;
  void *v811;
  uint64_t v812;
  WTF *v813;
  void *v814;
  uint64_t v815;
  WTF *v816;
  void *v817;
  uint64_t v818;
  WTF *v819;
  void *v820;
  uint64_t v821;
  WTF *v822;
  void *v823;
  uint64_t v824;
  WTF *v825;
  void *v826;
  uint64_t v827;
  WTF *v828;
  void *v829;
  uint64_t v830;
  WTF *v831;
  void *v832;
  uint64_t v833;
  WTF *v834;
  void *v835;
  uint64_t v836;
  WTF *v837;
  void *v838;
  uint64_t v839;
  WTF *v840;
  void *v841;
  uint64_t v842;
  WTF *v843;
  void *v844;
  uint64_t v845;
  WTF *v846;
  void *v847;
  uint64_t v848;
  WTF *v849;
  void *v850;
  uint64_t v851;
  WTF *v852;
  void *v853;
  uint64_t v854;
  WTF *v855;
  void *v856;
  uint64_t v857;
  WTF *v858;
  void *v859;
  uint64_t v860;
  WTF *v861;
  void *v862;
  uint64_t v863;
  WTF *v864;
  void *v865;
  uint64_t v866;
  WTF *v867;
  void *v868;
  uint64_t v869;
  WTF *v870;
  void *v871;
  uint64_t v872;
  WTF *v873;
  void *v874;
  uint64_t v875;
  WTF *v876;
  void *v877;
  uint64_t v878;
  WTF *v879;
  void *v880;
  uint64_t v881;
  WTF *v882;
  void *v883;
  uint64_t v884;
  WTF *v885;
  void *v886;
  uint64_t v887;
  WTF *v888;
  void *v889;
  uint64_t v890;
  WTF *v891;
  void *v892;
  uint64_t v893;
  WTF *v894;
  void *v895;
  uint64_t v896;
  WTF *v897;
  void *v898;
  uint64_t v899;
  WTF *v900;
  void *v901;
  uint64_t v902;
  WTF *v903;
  void *v904;
  uint64_t v905;
  WTF *v906;
  void *v907;
  uint64_t v908;
  WTF *v909;
  void *v910;
  uint64_t v911;
  WTF *v912;
  void *v913;
  uint64_t v914;
  WTF *v915;
  void *v916;
  uint64_t v917;
  WTF *v918;
  void *v919;
  uint64_t v920;
  WTF *v921;
  void *v922;
  uint64_t v923;
  WTF *v924;
  void *v925;
  uint64_t v926;
  WTF *v927;
  void *v928;
  uint64_t v929;
  WTF *v930;
  void *v931;
  uint64_t v932;
  WTF *v933;
  void *v934;
  uint64_t v935;
  WTF *v936;
  void *v937;
  uint64_t v938;
  WTF *v939;
  void *v940;
  uint64_t v941;
  WTF *v942;
  void *v943;
  uint64_t v944;
  WTF *v945;
  void *v946;
  uint64_t v947;
  WTF *v948;
  void *v949;
  uint64_t v950;
  WTF *v951;
  void *v952;
  uint64_t v953;
  WTF *v954;
  void *v955;
  uint64_t v956;
  WTF *v957;
  void *v958;
  uint64_t v959;
  WTF *v960;
  void *v961;
  uint64_t v962;
  WTF *v963;
  void *v964;
  uint64_t v965;
  WTF *v966;
  void *v967;
  uint64_t v968;
  WTF *v969;
  void *v970;
  uint64_t v971;
  WTF *v972;
  void *v973;
  uint64_t v974;
  WTF *v975;
  void *v976;
  uint64_t v977;
  WTF *v978;
  void *v979;
  uint64_t v980;
  WTF *v981;
  void *v982;
  uint64_t v983;
  WTF *v984;
  void *v985;
  uint64_t v986;
  WTF *v987;
  void *v988;
  uint64_t v989;
  WTF *v990;
  void *v991;
  uint64_t v992;
  WTF *v993;
  void *v994;
  uint64_t v995;
  WTF *v996;
  void *v997;
  uint64_t v998;
  WTF *v999;
  void *v1000;
  uint64_t v1001;
  WTF *v1002;
  void *v1003;
  uint64_t v1004;
  WTF *v1005;
  void *v1006;
  uint64_t v1007;
  WTF *v1008;
  void *v1009;
  uint64_t v1010;
  WTF *v1011;
  void *v1012;
  uint64_t v1013;
  WTF *v1014;
  void *v1015;
  uint64_t v1016;
  WTF *v1017;
  void *v1018;
  uint64_t v1019;
  WTF *v1020;
  void *v1021;
  uint64_t v1022;
  WTF *v1023;
  void *v1024;
  uint64_t v1025;
  WTF *v1026;
  void *v1027;
  uint64_t v1028;
  WTF *v1029;
  void *v1030;
  uint64_t v1031;
  WTF *v1032;
  void *v1033;
  uint64_t v1034;
  WTF *v1035;
  void *v1036;
  uint64_t v1037;
  WTF *v1038;
  void *v1039;
  uint64_t v1040;
  WTF *v1041;
  void *v1042;
  uint64_t v1043;
  WTF *v1044;
  void *v1045;
  uint64_t v1046;
  WTF *v1047;
  void *v1048;
  uint64_t v1049;
  WTF *v1050;
  void *v1051;
  uint64_t v1052;
  WTF *v1053;
  void *v1054;
  uint64_t v1055;
  WTF *v1056;
  void *v1057;
  uint64_t v1058;
  WTF *v1059;
  void *v1060;
  uint64_t v1061;
  WTF *v1062;
  void *v1063;
  uint64_t v1064;
  WTF *v1065;
  void *v1066;
  uint64_t v1067;
  WTF *v1068;
  void *v1069;
  uint64_t v1070;
  WTF *v1071;
  void *v1072;
  uint64_t v1073;
  WTF *v1074;
  void *v1075;
  uint64_t v1076;
  WTF *v1077;
  void *v1078;
  uint64_t v1079;
  WTF *v1080;
  void *v1081;
  uint64_t v1082;
  WTF *v1083;
  void *v1084;
  uint64_t v1085;
  WTF *v1086;
  void *v1087;
  uint64_t v1088;
  WTF *v1089;
  void *v1090;
  uint64_t v1091;
  WTF *v1092;
  void *v1093;
  uint64_t v1094;
  WTF *v1095;
  void *v1096;
  uint64_t v1097;
  WTF *v1098;
  void *v1099;
  uint64_t v1100;
  WTF *v1101;
  void *v1102;
  uint64_t v1103;
  WTF *v1104;
  void *v1105;
  uint64_t v1106;
  WTF *v1107;
  void *v1108;
  uint64_t v1109;
  WTF *v1110;
  void *v1111;
  uint64_t v1112;
  WTF *v1113;
  void *v1114;
  uint64_t v1115;
  WTF *v1116;
  void *v1117;
  uint64_t v1118;
  WTF *v1119;
  void *v1120;
  uint64_t v1121;
  WTF *v1122;
  void *v1123;
  uint64_t v1124;
  WTF *v1125;
  void *v1126;
  uint64_t v1127;
  WTF *v1128;
  void *v1129;
  uint64_t v1130;
  WTF *v1131;
  void *v1132;
  uint64_t v1133;
  WTF *v1134;
  void *v1135;
  uint64_t v1136;
  WTF *v1137;
  void *v1138;
  uint64_t v1139;
  WTF *v1140;
  void *v1141;
  uint64_t v1142;
  WTF *v1143;
  void *v1144;
  uint64_t v1145;
  WTF *v1146;
  void *v1147;
  uint64_t v1148;
  WTF *v1149;
  void *v1150;
  uint64_t v1151;
  WTF *v1152;
  void *v1153;
  uint64_t v1154;
  WTF *v1155;
  void *v1156;
  uint64_t v1157;
  WTF *v1158;
  void *v1159;
  uint64_t v1160;
  WTF *v1161;
  void *v1162;
  uint64_t v1163;
  WTF *v1164;
  void *v1165;
  uint64_t v1166;
  WTF *v1167;
  void *v1168;
  uint64_t v1169;
  WTF *v1170;
  void *v1171;
  uint64_t v1172;
  WTF *v1173;
  void *v1174;
  uint64_t v1175;
  WTF *v1176;
  void *v1177;
  uint64_t v1178;
  WTF *v1179;
  void *v1180;
  uint64_t v1181;
  WTF *v1182;
  void *v1183;
  uint64_t v1184;
  WTF *v1185;
  void *v1186;
  uint64_t v1187;
  WTF *v1188;
  void *v1189;
  uint64_t v1190;
  WTF *v1191;
  void *v1192;
  uint64_t v1193;
  WTF *v1194;
  void *v1195;
  uint64_t v1196;
  WTF *v1197;
  void *v1198;
  uint64_t v1199;
  WTF *v1200;
  void *v1201;
  uint64_t v1202;
  WTF *v1203;
  void *v1204;
  uint64_t v1205;
  WTF *v1206;
  void *v1207;
  uint64_t v1208;
  WTF *v1209;
  void *v1210;
  uint64_t v1211;
  WTF *v1212;
  void *v1213;
  uint64_t v1214;
  WTF *v1215;
  void *v1216;
  uint64_t v1217;
  WTF *v1218;
  void *v1219;
  uint64_t v1220;
  WTF *v1221;
  void *v1222;
  uint64_t v1223;
  WTF *v1224;
  void *v1225;
  uint64_t v1226;
  WTF *v1227;
  void *v1228;
  uint64_t v1229;
  WTF *v1230;
  void *v1231;
  uint64_t v1232;
  WTF *v1233;
  void *v1234;
  uint64_t v1235;
  WTF *v1236;
  void *v1237;
  uint64_t v1238;
  WTF *v1239;
  void *v1240;
  uint64_t v1241;
  WTF *v1242;
  void *v1243;
  uint64_t v1244;
  WTF *v1245;
  void *v1246;
  uint64_t v1247;
  WTF *v1248;
  void *v1249;
  uint64_t v1250;
  WTF *v1251;
  void *v1252;
  uint64_t v1253;
  WTF *v1254;
  void *v1255;
  uint64_t v1256;
  WTF *v1257;
  void *v1258;
  uint64_t v1259;
  WTF *v1260;
  void *v1261;
  uint64_t v1262;
  WTF *v1263;
  void *v1264;
  uint64_t v1265;
  WTF *v1266;
  void *v1267;
  uint64_t v1268;
  WTF *v1269;
  void *v1270;
  uint64_t v1271;
  WTF *v1272;
  void *v1273;
  uint64_t v1274;
  WTF *v1275;
  void *v1276;
  uint64_t v1277;
  WTF *v1278;
  void *v1279;
  uint64_t v1280;
  WTF *v1281;
  void *v1282;
  uint64_t v1283;
  WTF *v1284;
  void *v1285;
  uint64_t v1286;
  WTF *v1287;
  void *v1288;
  uint64_t v1289;
  WTF *v1290;
  void *v1291;
  uint64_t v1292;
  WTF *v1293;
  void *v1294;
  uint64_t v1295;
  WTF *v1296;
  void *v1297;
  uint64_t v1298;
  WTF *v1299;
  void *v1300;
  uint64_t v1301;
  WTF *v1302;
  void *v1303;
  uint64_t v1304;
  WTF *v1305;
  void *v1306;
  uint64_t v1307;
  WTF *v1308;
  void *v1309;
  uint64_t v1310;
  WTF *v1311;
  void *v1312;
  uint64_t v1313;
  WTF *v1314;
  void *v1315;
  uint64_t v1316;
  WTF *v1317;
  void *v1318;
  uint64_t v1319;
  WTF *v1320;
  void *v1321;
  uint64_t v1322;
  WTF *v1323;
  void *v1324;
  uint64_t v1325;
  WTF *v1326;
  void *v1327;
  uint64_t v1328;
  WTF *v1329;
  void *v1330;
  uint64_t v1331;
  WTF *v1332;
  void *v1333;
  uint64_t v1334;
  WTF *v1335;
  void *v1336;
  uint64_t v1337;
  WTF *v1338;
  void *v1339;
  uint64_t v1340;
  WTF *v1341;
  void *v1342;
  uint64_t v1343;
  WTF *v1344;
  void *v1345;
  uint64_t v1346;
  WTF *v1347;
  void *v1348;
  uint64_t v1349;
  WTF *v1350;
  void *v1351;
  uint64_t v1352;
  WTF *v1353;
  void *v1354;
  uint64_t v1355;
  WTF *v1356;
  void *v1357;
  uint64_t v1358;
  WTF *v1359;
  void *v1360;
  uint64_t v1361;
  WTF *v1362;
  void *v1363;
  uint64_t v1364;
  WTF *v1365;
  void *v1366;
  uint64_t v1367;
  WTF *v1368;
  void *v1369;
  uint64_t v1370;
  WTF *v1371;
  void *v1372;
  uint64_t v1373;
  WTF *v1374;
  void *v1375;
  uint64_t v1376;
  WTF *v1377;
  void *v1378;
  uint64_t v1379;
  WTF *v1380;
  void *v1381;
  uint64_t v1382;
  WTF *v1383;
  void *v1384;
  uint64_t v1385;
  WTF *v1386;
  void *v1387;
  uint64_t v1388;
  WTF *v1389;
  void *v1390;
  uint64_t v1391;
  WTF *v1392;
  void *v1393;
  uint64_t v1394;
  WTF *v1395;
  void *v1396;
  uint64_t v1397;
  WTF *v1398;
  void *v1399;
  uint64_t v1400;
  WTF *v1401;
  void *v1402;
  uint64_t v1403;
  WTF *v1404;
  void *v1405;
  uint64_t v1406;
  WTF *v1407;
  void *v1408;
  uint64_t v1409;
  WTF *v1410;
  void *v1411;
  uint64_t v1412;
  WTF *v1413;
  void *v1414;
  uint64_t v1415;
  WTF *v1416;
  void *v1417;
  uint64_t v1418;
  WTF *v1419;
  void *v1420;
  uint64_t v1421;
  WTF *v1422;
  void *v1423;
  uint64_t v1424;
  WTF *v1425;
  void *v1426;
  uint64_t v1427;
  WTF *v1428;
  void *v1429;
  uint64_t v1430;
  WTF *v1431;
  void *v1432;
  uint64_t v1433;
  WTF *v1434;
  void *v1435;
  uint64_t v1436;
  WTF *v1437;
  void *v1438;
  uint64_t v1439;
  WTF *v1440;
  void *v1441;
  uint64_t v1442;
  WTF *v1443;
  void *v1444;
  uint64_t v1445;
  WTF *v1446;
  void *v1447;
  uint64_t v1448;
  WTF *v1449;
  void *v1450;
  uint64_t v1451;
  WTF *v1452;
  void *v1453;
  uint64_t v1454;
  WTF *v1455;
  void *v1456;
  uint64_t v1457;
  WTF *v1458;
  void *v1459;
  uint64_t v1460;
  WTF *v1461;
  void *v1462;
  uint64_t v1463;
  WTF *v1464;
  void *v1465;
  uint64_t v1466;
  WTF *v1467;
  void *v1468;
  uint64_t v1469;
  WTF *v1470;
  void *v1471;
  uint64_t v1472;
  WTF *v1473;
  void *v1474;
  uint64_t v1475;
  WTF *v1476;
  void *v1477;
  uint64_t v1478;
  WTF *v1479;
  void *v1480;
  uint64_t v1481;
  WTF *v1482;
  void *v1483;
  uint64_t v1484;
  WTF *v1485;
  void *v1486;
  uint64_t v1487;
  WTF *v1488;
  void *v1489;
  uint64_t v1490;
  WTF *v1491;
  void *v1492;
  uint64_t v1493;
  WTF *v1494;
  void *v1495;
  uint64_t v1496;
  WTF *v1497;
  void *v1498;
  uint64_t v1499;
  WTF *v1500;
  void *v1501;
  uint64_t v1502;
  WTF *v1503;
  void *v1504;
  uint64_t v1505;
  WTF *v1506;
  void *v1507;
  uint64_t v1508;
  WTF *v1509;
  void *v1510;
  uint64_t v1511;
  WTF *v1512;
  void *v1513;
  uint64_t v1514;
  WTF *v1515;
  void *v1516;
  uint64_t v1517;
  WTF *v1518;
  void *v1519;
  uint64_t v1520;
  WTF *v1521;
  void *v1522;
  uint64_t v1523;
  WTF *v1524;
  void *v1525;
  uint64_t v1526;
  WTF *v1527;
  void *v1528;
  uint64_t v1529;
  WTF *v1530;
  void *v1531;
  uint64_t v1532;
  WTF *v1533;
  void *v1534;
  uint64_t v1535;
  WTF *v1536;
  void *v1537;
  uint64_t v1538;
  WTF *v1539;
  void *v1540;
  uint64_t v1541;
  WTF *v1542;
  void *v1543;
  uint64_t v1544;
  WTF *v1545;
  void *v1546;
  uint64_t v1547;
  WTF *v1548;
  void *v1549;
  uint64_t v1550;
  WTF *v1551;
  void *v1552;
  uint64_t v1553;
  WTF *v1554;
  void *v1555;
  uint64_t v1556;
  WTF *v1557;
  void *v1558;
  uint64_t v1559;
  WTF *v1560;
  void *v1561;
  uint64_t v1562;
  WTF *v1563;
  void *v1564;
  uint64_t v1565;
  WTF *v1566;
  void *v1567;
  uint64_t v1568;
  WTF *v1569;
  void *v1570;
  uint64_t v1571;
  WTF *v1572;
  void *v1573;
  uint64_t v1574;
  WTF *v1575;
  void *v1576;
  uint64_t v1577;
  WTF *v1578;
  void *v1579;
  uint64_t v1580;
  WTF *v1581;
  void *v1582;
  uint64_t v1583;
  WTF *v1584;
  void *v1585;
  uint64_t v1586;
  WTF *v1587;
  void *v1588;
  uint64_t v1589;
  WTF *v1590;
  void *v1591;
  uint64_t v1592;
  WTF *v1593;
  void *v1594;
  uint64_t v1595;
  WTF *v1596;
  void *v1597;
  uint64_t v1598;
  WTF *v1599;
  void *v1600;
  uint64_t v1601;
  WTF *v1602;
  void *v1603;
  uint64_t v1604;
  WTF *v1605;
  void *v1606;
  uint64_t v1607;
  WTF *v1608;
  void *v1609;
  uint64_t v1610;
  WTF *v1611;
  void *v1612;
  uint64_t v1613;
  WTF *v1614;
  void *v1615;
  uint64_t v1616;
  WTF *v1617;
  void *v1618;
  uint64_t v1619;
  WTF *v1620;
  void *v1621;
  uint64_t v1622;
  WTF *v1623;
  void *v1624;
  uint64_t v1625;
  WTF *v1626;
  void *v1627;
  uint64_t v1628;
  WTF *v1629;
  void *v1630;
  uint64_t v1631;
  WTF *v1632;
  void *v1633;
  uint64_t v1634;
  WTF *v1635;
  void *v1636;
  uint64_t v1637;
  WTF *v1638;
  void *v1639;
  uint64_t v1640;
  WTF *v1641;
  void *v1642;
  uint64_t v1643;
  WTF *v1644;
  void *v1645;
  uint64_t v1646;
  WTF *v1647;
  void *v1648;
  uint64_t v1649;
  WTF *v1650;
  void *v1651;
  uint64_t v1652;
  WTF *v1653;
  void *v1654;
  uint64_t v1655;
  WTF *v1656;
  void *v1657;
  uint64_t v1658;
  WTF *v1659;
  void *v1660;
  uint64_t v1661;
  WTF *v1662;
  void *v1663;
  uint64_t v1664;
  WTF *v1665;
  void *v1666;
  uint64_t v1667;
  WTF *v1668;
  void *v1669;
  uint64_t v1670;
  WTF *v1671;
  void *v1672;
  uint64_t v1673;
  WTF *v1674;
  void *v1675;
  uint64_t v1676;
  WTF *v1677;
  void *v1678;
  uint64_t v1679;
  WTF *v1680;
  void *v1681;
  uint64_t v1682;
  WTF *v1683;
  void *v1684;
  uint64_t v1685;
  WTF *v1686;
  void *v1687;
  uint64_t v1688;
  WTF *v1689;
  void *v1690;
  uint64_t v1691;
  WTF *v1692;
  void *v1693;
  uint64_t v1694;
  WTF *v1695;
  void *v1696;
  uint64_t v1697;
  WTF *v1698;
  void *v1699;
  uint64_t v1700;
  WTF *v1701;
  void *v1702;
  uint64_t v1703;
  WTF *v1704;
  void *v1705;
  uint64_t v1706;
  WTF *v1707;
  void *v1708;
  uint64_t v1709;
  WTF *v1710;
  void *v1711;
  uint64_t v1712;
  WTF *v1713;
  void *v1714;
  uint64_t v1715;
  WTF *v1716;
  void *v1717;
  uint64_t v1718;
  WTF *v1719;
  void *v1720;
  uint64_t v1721;
  WTF *v1722;
  void *v1723;
  uint64_t v1724;
  WTF *v1725;
  void *v1726;
  uint64_t v1727;
  WTF *v1728;
  void *v1729;
  uint64_t v1730;
  WTF *v1731;
  void *v1732;
  uint64_t v1733;
  WTF *v1734;
  void *v1735;
  uint64_t v1736;
  WTF *v1737;
  void *v1738;
  uint64_t v1739;
  WTF *v1740;
  void *v1741;
  uint64_t v1742;
  WTF *v1743;
  void *v1744;
  uint64_t v1745;
  WTF *v1746;
  void *v1747;
  uint64_t v1748;
  WTF *v1749;
  void *v1750;
  uint64_t v1751;
  WTF *v1752;
  void *v1753;
  uint64_t v1754;
  WTF *v1755;
  void *v1756;
  uint64_t v1757;
  WTF *v1758;
  void *v1759;
  uint64_t v1760;
  WTF *v1761;
  void *v1762;
  uint64_t v1763;
  WTF *v1764;
  void *v1765;
  uint64_t v1766;
  WTF *v1767;
  void *v1768;
  uint64_t v1769;
  WTF *v1770;
  void *v1771;
  uint64_t v1772;
  WTF *v1773;
  void *v1774;
  uint64_t v1775;
  WTF *v1776;
  void *v1777;
  uint64_t v1778;
  WTF *v1779;
  void *v1780;
  uint64_t v1781;
  WTF *v1782;
  void *v1783;
  uint64_t v1784;
  WTF *v1785;
  void *v1786;
  uint64_t v1787;
  WTF *v1788;
  void *v1789;
  uint64_t v1790;
  WTF *v1791;
  void *v1792;
  uint64_t v1793;
  WTF *v1794;
  void *v1795;
  uint64_t v1796;
  WTF *v1797;
  void *v1798;
  uint64_t v1799;
  WTF *v1800;
  void *v1801;
  uint64_t v1802;
  WTF *v1803;
  void *v1804;
  uint64_t v1805;
  WTF *v1806;
  void *v1807;
  uint64_t v1808;
  WTF *v1809;
  void *v1810;
  uint64_t v1811;
  WTF *v1812;
  void *v1813;
  uint64_t v1814;
  WTF *v1815;
  void *v1816;
  uint64_t v1817;
  WTF *v1818;
  void *v1819;
  uint64_t v1820;
  WTF *v1821;
  void *v1822;
  uint64_t v1823;
  WTF *v1824;
  void *v1825;
  uint64_t v1826;
  WTF *v1827;
  void *v1828;
  uint64_t v1829;
  WTF *v1830;
  void *v1831;
  uint64_t v1832;
  WTF *v1833;
  void *v1834;
  uint64_t v1835;
  WTF *v1836;
  void *v1837;
  uint64_t v1838;
  WTF *v1839;
  void *v1840;
  uint64_t v1841;
  WTF *v1842;
  void *v1843;
  uint64_t v1844;
  WTF *v1845;
  void *v1846;
  uint64_t v1847;
  WTF *v1848;
  void *v1849;
  uint64_t v1850;
  WTF *v1851;
  void *v1852;
  uint64_t v1853;
  WTF *v1854;
  void *v1855;
  uint64_t v1856;
  WTF *v1857;
  void *v1858;
  uint64_t v1859;
  WTF *v1860;
  void *v1861;
  uint64_t v1862;
  WTF *v1863;
  void *v1864;
  uint64_t v1865;
  WTF *v1866;
  void *v1867;
  uint64_t v1868;
  WTF *v1869;
  void *v1870;
  uint64_t v1871;
  WTF *v1872;
  void *v1873;
  uint64_t v1874;
  WTF *v1875;
  void *v1876;
  uint64_t v1877;
  WTF *v1878;
  void *v1879;
  uint64_t v1880;
  WTF *v1881;
  void *v1882;
  uint64_t v1883;
  WTF *v1884;
  void *v1885;
  uint64_t v1886;
  WTF *v1887;
  void *v1888;
  uint64_t v1889;
  WTF *v1890;
  void *v1891;
  uint64_t v1892;
  WTF *v1893;
  void *v1894;
  uint64_t v1895;
  WTF *v1896;
  void *v1897;
  uint64_t v1898;
  WTF *v1899;
  void *v1900;
  uint64_t v1901;
  WTF *v1902;
  void *v1903;
  uint64_t v1904;
  WTF *v1905;
  void *v1906;
  uint64_t v1907;
  WTF *v1908;
  void *v1909;
  uint64_t v1910;
  WTF *v1911;
  void *v1912;
  uint64_t v1913;
  WTF *v1914;
  void *v1915;
  uint64_t v1916;
  WTF *v1917;
  void *v1918;
  uint64_t v1919;
  WTF *v1920;
  void *v1921;
  uint64_t v1922;
  WTF *v1923;
  void *v1924;
  uint64_t v1925;
  WTF *v1926;
  void *v1927;
  uint64_t v1928;
  WTF *v1929;
  void *v1930;
  uint64_t v1931;
  WTF *v1932;
  void *v1933;
  uint64_t v1934;
  WTF *v1935;
  void *v1936;
  uint64_t v1937;
  WTF *v1938;
  void *v1939;
  uint64_t v1940;
  WTF *v1941;
  void *v1942;
  uint64_t v1943;
  WTF *v1944;
  void *v1945;
  uint64_t v1946;
  WTF *v1947;
  void *v1948;
  uint64_t v1949;
  WTF *v1950;
  void *v1951;
  uint64_t v1952;
  WTF *v1953;
  void *v1954;
  uint64_t v1955;
  WTF *v1956;
  void *v1957;
  uint64_t v1958;
  WTF *v1959;
  void *v1960;
  uint64_t v1961;
  WTF *v1962;
  void *v1963;
  uint64_t v1964;
  WTF *v1965;
  void *v1966;
  uint64_t v1967;
  WTF *v1968;
  void *v1969;
  uint64_t v1970;
  WTF *v1971;
  void *v1972;
  uint64_t v1973;
  WTF *v1974;
  void *v1975;
  uint64_t v1976;
  WTF *v1977;
  void *v1978;
  uint64_t v1979;
  WTF *v1980;
  void *v1981;
  uint64_t v1982;
  WTF *v1983;
  void *v1984;
  uint64_t v1985;
  WTF *v1986;
  void *v1987;
  uint64_t v1988;
  WTF *v1989;
  void *v1990;
  uint64_t v1991;
  WTF *v1992;
  void *v1993;
  uint64_t v1994;
  WTF *v1995;
  void *v1996;
  uint64_t v1997;
  WTF *v1998;
  void *v1999;
  uint64_t v2000;
  WTF *v2001;
  void *v2002;
  uint64_t v2003;
  WTF *v2004;
  void *v2005;
  uint64_t v2006;
  WTF *v2007;
  void *v2008;
  uint64_t v2009;
  WTF *v2010;
  void *v2011;
  uint64_t v2012;
  WTF *v2013;
  void *v2014;
  uint64_t v2015;
  WTF *v2016;
  void *v2017;
  uint64_t v2018;
  WTF *v2019;
  void *v2020;
  uint64_t v2021;
  WTF *v2022;
  void *v2023;
  uint64_t v2024;
  WTF *v2025;
  void *v2026;
  uint64_t v2027;
  WTF *v2028;
  void *v2029;
  uint64_t v2030;
  WTF *v2031;
  void *v2032;
  uint64_t v2033;
  WTF *v2034;
  void *v2035;
  uint64_t v2036;
  WTF *v2037;
  void *v2038;
  uint64_t v2039;
  WTF *v2040;
  void *v2041;
  uint64_t v2042;
  WTF *v2043;
  void *v2044;
  uint64_t v2045;
  WTF *v2046;
  void *v2047;
  uint64_t v2048;
  WTF *v2049;
  void *v2050;
  uint64_t v2051;
  WTF *v2052;
  void *v2053;
  uint64_t v2054;
  WTF *v2055;
  void *v2056;
  uint64_t v2057;
  WTF *v2058;
  void *v2059;
  uint64_t v2060;
  WTF *v2061;
  void *v2062;
  uint64_t v2063;
  WTF *v2064;
  void *v2065;
  uint64_t v2066;
  WTF *v2067;
  void *v2068;
  uint64_t v2069;
  WTF *v2070;
  void *v2071;
  uint64_t v2072;
  WTF *v2073;
  void *v2074;
  uint64_t v2075;
  WTF *v2076;
  void *v2077;
  uint64_t v2078;
  WTF *v2079;
  void *v2080;
  uint64_t v2081;
  WTF *v2082;
  void *v2083;
  uint64_t v2084;
  WTF *v2085;
  void *v2086;
  uint64_t v2087;
  WTF *v2088;
  void *v2089;
  uint64_t v2090;
  WTF *v2091;
  void *v2092;
  uint64_t v2093;
  WTF *v2094;
  void *v2095;
  uint64_t v2096;
  WTF *v2097;
  void *v2098;
  uint64_t v2099;
  WTF *v2100;
  void *v2101;
  uint64_t v2102;
  WTF *v2103;
  void *v2104;
  uint64_t v2105;
  WTF *v2106;
  void *v2107;
  uint64_t v2108;
  WTF *v2109;
  void *v2110;
  uint64_t v2111;
  WTF *v2112;
  void *v2113;
  uint64_t v2114;
  WTF *v2115;
  void *v2116;
  uint64_t v2117;
  WTF *v2118;
  void *v2119;
  uint64_t v2120;
  WTF *v2121;
  void *v2122;
  uint64_t v2123;
  WTF *v2124;
  void *v2125;
  uint64_t v2126;
  WTF *v2127;
  void *v2128;
  uint64_t v2129;
  WTF *v2130;
  void *v2131;
  uint64_t v2132;
  WTF *v2133;
  void *v2134;
  uint64_t v2135;
  WTF *v2136;
  void *v2137;
  uint64_t v2138;
  WTF *v2139;
  void *v2140;
  uint64_t v2141;
  WTF *v2142;
  void *v2143;
  uint64_t v2144;
  WTF *v2145;
  void *v2146;
  uint64_t v2147;
  WTF *v2148;
  void *v2149;
  uint64_t v2150;
  WTF *v2151;
  void *v2152;
  uint64_t v2153;
  WTF *v2154;
  void *v2155;
  uint64_t v2156;
  WTF *v2157;
  void *v2158;
  uint64_t v2159;
  WTF *v2160;
  void *v2161;
  uint64_t v2162;
  WTF *v2163;
  void *v2164;
  uint64_t v2165;
  WTF *v2166;
  void *v2167;
  uint64_t v2168;
  WTF *v2169;
  void *v2170;
  uint64_t v2171;
  WTF *v2172;
  void *v2173;
  uint64_t v2174;
  WTF *v2175;
  void *v2176;
  uint64_t v2177;
  WTF *v2178;
  void *v2179;
  uint64_t v2180;
  WTF *v2181;
  void *v2182;
  uint64_t v2183;
  WTF *v2184;
  void *v2185;
  uint64_t v2186;
  WTF *v2187;
  void *v2188;
  uint64_t v2189;
  WTF *v2190;
  void *v2191;
  uint64_t v2192;
  WTF *v2193;
  void *v2194;
  uint64_t v2195;
  WTF *v2196;
  void *v2197;
  uint64_t v2198;
  WTF *v2199;
  void *v2200;
  uint64_t v2201;
  WTF *v2202;
  void *v2203;
  uint64_t v2204;
  WTF *v2205;
  void *v2206;
  uint64_t v2207;
  WTF *v2208;
  void *v2209;
  uint64_t v2210;
  WTF *v2211;
  void *v2212;
  uint64_t v2213;
  WTF *v2214;
  void *v2215;
  uint64_t v2216;
  WTF *v2217;
  void *v2218;
  uint64_t v2219;
  WTF *v2220;
  void *v2221;
  uint64_t v2222;
  WTF *v2223;
  void *v2224;
  uint64_t v2225;
  WTF *v2226;
  void *v2227;
  uint64_t v2228;
  WTF *v2229;
  void *v2230;
  uint64_t v2231;
  WTF *v2232;
  void *v2233;
  uint64_t v2234;
  WTF *v2235;
  void *v2236;
  uint64_t v2237;
  WTF *v2238;
  void *v2239;
  uint64_t v2240;
  WTF *v2241;
  void *v2242;
  uint64_t v2243;
  WTF *v2244;
  void *v2245;
  uint64_t v2246;
  WTF *v2247;
  void *v2248;
  uint64_t v2249;
  WTF *v2250;
  void *v2251;
  uint64_t v2252;
  WTF *v2253;
  void *v2254;
  uint64_t v2255;
  WTF *v2256;
  void *v2257;
  uint64_t v2258;
  WTF *v2259;
  void *v2260;
  uint64_t v2261;
  WTF *v2262;
  void *v2263;
  uint64_t v2264;
  WTF *v2265;
  void *v2266;
  uint64_t v2267;
  WTF *v2268;
  void *v2269;
  uint64_t v2270;
  WTF *v2271;
  void *v2272;
  uint64_t v2273;
  WTF *v2274;
  void *v2275;
  uint64_t v2276;
  WTF *v2277;
  void *v2278;
  uint64_t v2279;
  WTF *v2280;
  void *v2281;
  uint64_t v2282;
  WTF *v2283;
  void *v2284;
  uint64_t v2285;
  WTF *v2286;
  void *v2287;
  uint64_t v2288;
  WTF *v2289;
  void *v2290;
  uint64_t v2291;
  WTF *v2292;
  void *v2293;
  uint64_t v2294;
  WTF *v2295;
  void *v2296;
  uint64_t v2297;
  WTF *v2298;
  void *v2299;
  uint64_t v2300;
  WTF *v2301;
  void *v2302;
  uint64_t v2303;
  WTF *v2304;
  void *v2305;
  uint64_t v2306;
  WTF *v2307;
  void *v2308;
  uint64_t v2309;
  WTF *v2310;
  void *v2311;
  uint64_t v2312;
  WTF *v2313;
  void *v2314;
  uint64_t v2315;
  WTF *v2316;
  void *v2317;
  uint64_t v2318;
  WTF *v2319;
  void *v2320;
  uint64_t v2321;
  WTF *v2322;
  void *v2323;
  uint64_t v2324;
  WTF *v2325;
  void *v2326;
  uint64_t v2327;
  WTF *v2328;
  void *v2329;
  uint64_t v2330;
  WTF *v2331;
  void *v2332;
  uint64_t v2333;
  WTF *v2334;
  void *v2335;
  uint64_t v2336;
  WTF *v2337;
  void *v2338;
  uint64_t v2339;
  WTF *v2340;
  void *v2341;
  uint64_t v2342;
  WTF *v2343;
  void *v2344;
  uint64_t v2345;
  WTF *v2346;
  void *v2347;
  uint64_t v2348;
  WTF *v2349;
  void *v2350;
  uint64_t v2351;
  WTF *v2352;
  void *v2353;
  uint64_t v2354;
  WTF *v2355;
  void *v2356;
  uint64_t v2357;
  WTF *v2358;
  void *v2359;
  uint64_t v2360;
  WTF *v2361;
  void *v2362;
  uint64_t v2363;
  WTF *v2364;
  void *v2365;
  uint64_t v2366;
  WTF *v2367;
  void *v2368;
  uint64_t v2369;
  WTF *v2370;
  void *v2371;
  uint64_t v2372;
  WTF *v2373;
  void *v2374;
  uint64_t v2375;
  WTF *v2376;
  void *v2377;
  uint64_t v2378;
  WTF *v2379;
  void *v2380;
  uint64_t v2381;
  WTF *v2382;
  void *v2383;
  uint64_t v2384;
  WTF *v2385;
  void *v2386;
  uint64_t v2387;
  WTF *v2388;
  void *v2389;
  uint64_t v2390;
  WTF *v2391;
  void *v2392;
  uint64_t v2393;
  WTF *v2394;
  void *v2395;
  uint64_t v2396;
  WTF *v2397;
  void *v2398;
  uint64_t v2399;
  WTF *v2400;
  void *v2401;
  uint64_t v2402;
  WTF *v2403;
  void *v2404;
  uint64_t v2405;
  WTF *v2406;
  void *v2407;
  uint64_t v2408;
  WTF *v2409;
  void *v2410;
  uint64_t v2411;
  WTF *v2412;
  void *v2413;
  uint64_t v2414;
  WTF *v2415;
  void *v2416;
  uint64_t v2417;
  WTF *v2418;
  void *v2419;
  uint64_t v2420;
  WTF *v2421;
  void *v2422;
  uint64_t v2423;
  WTF *v2424;
  void *v2425;
  uint64_t v2426;
  WTF *v2427;
  void *v2428;
  uint64_t v2429;
  WTF *v2430;
  void *v2431;
  uint64_t v2432;
  WTF *v2433;
  void *v2434;
  uint64_t v2435;
  WTF *v2436;
  void *v2437;
  uint64_t v2438;
  WTF *v2439;
  void *v2440;
  uint64_t v2441;
  WTF *v2442;
  void *v2443;
  uint64_t v2444;
  WTF *v2445;
  void *v2446;
  uint64_t v2447;
  WTF *v2448;
  void *v2449;
  uint64_t v2450;
  WTF *v2451;
  void *v2452;
  uint64_t v2453;
  WTF *v2454;
  void *v2455;
  uint64_t v2456;
  WTF *v2457;
  void *v2458;
  uint64_t v2459;
  WTF *v2460;
  void *v2461;
  uint64_t v2462;
  WTF *v2463;
  void *v2464;
  uint64_t v2465;
  WTF *v2466;
  void *v2467;
  uint64_t v2468;
  WTF *v2469;
  void *v2470;
  uint64_t v2471;
  WTF *v2472;
  void *v2473;
  uint64_t v2474;
  WTF *v2475;
  void *v2476;
  uint64_t v2477;
  WTF *v2478;
  void *v2479;
  uint64_t v2480;
  WTF *v2481;
  void *v2482;
  uint64_t v2483;
  WTF *v2484;
  void *v2485;
  uint64_t v2486;
  WTF *v2487;
  void *v2488;
  uint64_t v2489;
  WTF *v2490;
  void *v2491;
  uint64_t v2492;
  WTF *v2493;
  void *v2494;
  uint64_t v2495;
  WTF *v2496;
  void *v2497;
  uint64_t v2498;
  WTF *v2499;
  void *v2500;
  uint64_t v2501;
  WTF *v2502;
  void *v2503;
  uint64_t v2504;
  WTF *v2505;
  void *v2506;
  uint64_t v2507;
  WTF *v2508;
  void *v2509;
  uint64_t v2510;
  WTF *v2511;
  void *v2512;
  uint64_t v2513;
  WTF *v2514;
  void *v2515;
  uint64_t v2516;
  WTF *v2517;
  void *v2518;
  uint64_t v2519;
  WTF *v2520;
  void *v2521;
  uint64_t v2522;
  WTF *v2523;
  void *v2524;
  uint64_t v2525;
  WTF *v2526;
  void *v2527;
  uint64_t v2528;
  WTF *v2529;
  void *v2530;
  uint64_t v2531;
  WTF *v2532;
  void *v2533;
  uint64_t v2534;
  WTF *v2535;
  void *v2536;
  uint64_t v2537;
  WTF *v2538;
  void *v2539;
  uint64_t v2540;
  WTF *v2541;
  void *v2542;
  uint64_t v2543;
  WTF *v2544;
  void *v2545;
  uint64_t v2546;
  WTF *v2547;
  void *v2548;
  uint64_t v2549;
  WTF *v2550;
  void *v2551;
  uint64_t v2552;
  WTF *v2553;
  void *v2554;
  uint64_t v2555;
  WTF *v2556;
  void *v2557;
  uint64_t v2558;
  WTF *v2559;
  void *v2560;
  uint64_t v2561;
  WTF *v2562;
  void *v2563;
  uint64_t v2564;
  WTF *v2565;
  void *v2566;
  uint64_t v2567;
  WTF *v2568;
  void *v2569;
  uint64_t v2570;
  WTF *v2571;
  void *v2572;
  uint64_t v2573;
  WTF *v2574;
  void *v2575;
  uint64_t v2576;
  WTF *v2577;
  void *v2578;
  uint64_t v2579;
  WTF *v2580;
  void *v2581;
  uint64_t v2582;
  WTF *v2583;
  void *v2584;
  uint64_t v2585;
  WTF *v2586;
  void *v2587;
  uint64_t v2588;
  WTF *v2589;
  void *v2590;
  uint64_t v2591;
  WTF *v2592;
  void *v2593;
  uint64_t v2594;
  WTF *v2595;
  void *v2596;
  uint64_t v2597;
  WTF *v2598;
  void *v2599;
  uint64_t v2600;
  WTF *v2601;
  void *v2602;
  uint64_t v2603;
  WTF *v2604;
  void *v2605;
  uint64_t v2606;
  WTF *v2607;
  void *v2608;
  uint64_t v2609;
  WTF *v2610;
  void *v2611;
  uint64_t v2612;
  WTF *v2613;
  void *v2614;
  uint64_t v2615;
  WTF *v2616;
  void *v2617;
  uint64_t v2618;
  WTF *v2619;
  void *v2620;
  uint64_t v2621;
  WTF *v2622;
  void *v2623;
  uint64_t v2624;
  WTF *v2625;
  void *v2626;
  uint64_t v2627;
  WTF *v2628;
  void *v2629;
  uint64_t v2630;
  WTF *v2631;
  void *v2632;
  uint64_t v2633;
  WTF *v2634;
  void *v2635;
  uint64_t v2636;
  WTF *v2637;
  void *v2638;
  uint64_t v2639;
  WTF *v2640;
  void *v2641;
  uint64_t v2642;
  WTF *v2643;
  void *v2644;
  uint64_t v2645;
  WTF *v2646;
  void *v2647;
  uint64_t v2648;
  WTF *v2649;
  void *v2650;
  uint64_t v2651;
  WTF *v2652;
  void *v2653;
  uint64_t v2654;
  WTF *v2655;
  void *v2656;
  uint64_t v2657;
  WTF *v2658;
  void *v2659;
  uint64_t v2660;
  WTF *v2661;
  void *v2662;
  uint64_t v2663;
  WTF *v2664;
  void *v2665;
  uint64_t v2666;
  WTF *v2667;
  void *v2668;
  uint64_t v2669;
  WTF *v2670;
  void *v2671;
  uint64_t v2672;
  WTF *v2673;
  void *v2674;
  uint64_t v2675;
  WTF *v2676;
  void *v2677;
  uint64_t v2678;
  WTF *v2679;
  void *v2680;
  uint64_t v2681;
  WTF *v2682;
  void *v2683;
  uint64_t v2684;
  WTF *v2685;
  void *v2686;
  uint64_t v2687;
  WTF *v2688;
  void *v2689;
  uint64_t v2690;
  WTF *v2691;
  void *v2692;
  uint64_t v2693;
  WTF *v2694;
  void *v2695;
  uint64_t v2696;
  WTF *v2697;
  void *v2698;
  uint64_t v2699;
  WTF *v2700;
  void *v2701;
  uint64_t v2702;
  WTF *v2703;
  void *v2704;
  uint64_t v2705;
  WTF *v2706;
  void *v2707;
  uint64_t v2708;
  WTF *v2709;
  void *v2710;
  uint64_t v2711;
  WTF *v2712;
  void *v2713;
  uint64_t v2714;
  WTF *v2715;
  void *v2716;
  uint64_t v2717;
  WTF *v2718;
  void *v2719;
  uint64_t v2720;
  WTF *v2721;
  void *v2722;
  uint64_t v2723;
  WTF *v2724;
  void *v2725;
  uint64_t v2726;
  WTF *v2727;
  void *v2728;
  uint64_t v2729;
  WTF *v2730;
  void *v2731;
  uint64_t v2732;
  WTF *v2733;
  void *v2734;
  uint64_t v2735;
  WTF *v2736;
  void *v2737;
  uint64_t v2738;
  WTF *v2739;
  void *v2740;
  uint64_t v2741;
  WTF *v2742;
  void *v2743;
  uint64_t v2744;
  WTF *v2745;
  void *v2746;
  uint64_t v2747;
  WTF *v2748;
  void *v2749;
  uint64_t v2750;
  WTF *v2751;
  void *v2752;
  uint64_t v2753;
  WTF *v2754;
  void *v2755;
  uint64_t v2756;
  WTF *v2757;
  void *v2758;
  uint64_t v2759;
  WTF *v2760;
  void *v2761;
  uint64_t v2762;
  WTF *v2763;
  void *v2764;
  uint64_t v2765;
  WTF *v2766;
  void *v2767;
  uint64_t v2768;
  WTF *v2769;
  void *v2770;
  uint64_t v2771;
  WTF *v2772;
  void *v2773;
  uint64_t v2774;
  WTF *v2775;
  void *v2776;
  uint64_t v2777;
  WTF *v2778;
  void *v2779;
  uint64_t v2780;
  WTF *v2781;
  void *v2782;
  uint64_t v2783;
  WTF *v2784;
  void *v2785;
  uint64_t v2786;
  WTF *v2787;
  void *v2788;
  uint64_t v2789;
  WTF *v2790;
  void *v2791;
  uint64_t v2792;
  WTF *v2793;
  void *v2794;
  uint64_t v2795;
  WTF *v2796;
  void *v2797;
  uint64_t v2798;
  WTF *v2799;
  void *v2800;
  uint64_t v2801;
  WTF *v2802;
  void *v2803;
  uint64_t v2804;
  WTF *v2805;
  void *v2806;
  uint64_t v2807;
  WTF *v2808;
  void *v2809;
  uint64_t v2810;
  WTF *v2811;
  void *v2812;
  uint64_t v2813;
  WTF *v2814;
  void *v2815;
  uint64_t v2816;
  WTF *v2817;
  void *v2818;
  uint64_t v2819;
  WTF *v2820;
  void *v2821;
  uint64_t v2822;
  WTF *v2823;
  void *v2824;

  v2 = *((_QWORD *)this + 940);
  *((_QWORD *)this + 940) = 0;
  if (v2)
  {
    v3 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v3, v4);
  }
  v5 = *((_QWORD *)this + 939);
  *((_QWORD *)this + 939) = 0;
  if (v5)
  {
    v6 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v6, v7);
  }
  v8 = *((_QWORD *)this + 938);
  *((_QWORD *)this + 938) = 0;
  if (v8)
  {
    v9 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v9, v10);
  }
  v11 = *((_QWORD *)this + 937);
  *((_QWORD *)this + 937) = 0;
  if (v11)
  {
    v12 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v12, v13);
  }
  v14 = *((_QWORD *)this + 936);
  *((_QWORD *)this + 936) = 0;
  if (v14)
  {
    v15 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v15, v16);
  }
  v17 = *((_QWORD *)this + 935);
  *((_QWORD *)this + 935) = 0;
  if (v17)
  {
    v18 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v18, v19);
  }
  v20 = *((_QWORD *)this + 934);
  *((_QWORD *)this + 934) = 0;
  if (v20)
  {
    v21 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v21, v22);
  }
  v23 = *((_QWORD *)this + 933);
  *((_QWORD *)this + 933) = 0;
  if (v23)
  {
    v24 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v24, v25);
  }
  v26 = *((_QWORD *)this + 932);
  *((_QWORD *)this + 932) = 0;
  if (v26)
  {
    v27 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v27, v28);
  }
  v29 = *((_QWORD *)this + 931);
  *((_QWORD *)this + 931) = 0;
  if (v29)
  {
    v30 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v30, v31);
  }
  v32 = *((_QWORD *)this + 930);
  *((_QWORD *)this + 930) = 0;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = *((_QWORD *)this + 929);
  *((_QWORD *)this + 929) = 0;
  if (v35)
  {
    v36 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v36, v37);
  }
  v38 = *((_QWORD *)this + 928);
  *((_QWORD *)this + 928) = 0;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = *((_QWORD *)this + 927);
  *((_QWORD *)this + 927) = 0;
  if (v41)
  {
    v42 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v42, v43);
  }
  v44 = *((_QWORD *)this + 926);
  *((_QWORD *)this + 926) = 0;
  if (v44)
  {
    v45 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v45, v46);
  }
  v47 = *((_QWORD *)this + 925);
  *((_QWORD *)this + 925) = 0;
  if (v47)
  {
    v48 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v48, v49);
  }
  v50 = *((_QWORD *)this + 924);
  *((_QWORD *)this + 924) = 0;
  if (v50)
  {
    v51 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v51, v52);
  }
  v53 = *((_QWORD *)this + 923);
  *((_QWORD *)this + 923) = 0;
  if (v53)
  {
    v54 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v54, v55);
  }
  v56 = *((_QWORD *)this + 922);
  *((_QWORD *)this + 922) = 0;
  if (v56)
  {
    v57 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v57, v58);
  }
  v59 = *((_QWORD *)this + 921);
  *((_QWORD *)this + 921) = 0;
  if (v59)
  {
    v60 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v60, v61);
  }
  v62 = *((_QWORD *)this + 920);
  *((_QWORD *)this + 920) = 0;
  if (v62)
  {
    v63 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v63, v64);
  }
  v65 = *((_QWORD *)this + 919);
  *((_QWORD *)this + 919) = 0;
  if (v65)
  {
    v66 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v66, v67);
  }
  v68 = *((_QWORD *)this + 918);
  *((_QWORD *)this + 918) = 0;
  if (v68)
  {
    v69 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v69, v70);
  }
  v71 = *((_QWORD *)this + 917);
  *((_QWORD *)this + 917) = 0;
  if (v71)
  {
    v72 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v72, v73);
  }
  v74 = *((_QWORD *)this + 916);
  *((_QWORD *)this + 916) = 0;
  if (v74)
  {
    v75 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v75, v76);
  }
  v77 = *((_QWORD *)this + 915);
  *((_QWORD *)this + 915) = 0;
  if (v77)
  {
    v78 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v78, v79);
  }
  v80 = *((_QWORD *)this + 914);
  *((_QWORD *)this + 914) = 0;
  if (v80)
  {
    v81 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v81, v82);
  }
  v83 = *((_QWORD *)this + 913);
  *((_QWORD *)this + 913) = 0;
  if (v83)
  {
    v84 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v84, v85);
  }
  v86 = *((_QWORD *)this + 912);
  *((_QWORD *)this + 912) = 0;
  if (v86)
  {
    v87 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v87, v88);
  }
  v89 = *((_QWORD *)this + 911);
  *((_QWORD *)this + 911) = 0;
  if (v89)
  {
    v90 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v90, v91);
  }
  v92 = *((_QWORD *)this + 910);
  *((_QWORD *)this + 910) = 0;
  if (v92)
  {
    v93 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v93, v94);
  }
  v95 = *((_QWORD *)this + 909);
  *((_QWORD *)this + 909) = 0;
  if (v95)
  {
    v96 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v96, v97);
  }
  v98 = *((_QWORD *)this + 908);
  *((_QWORD *)this + 908) = 0;
  if (v98)
  {
    v99 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v99, v100);
  }
  v101 = *((_QWORD *)this + 907);
  *((_QWORD *)this + 907) = 0;
  if (v101)
  {
    v102 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v102, v103);
  }
  v104 = *((_QWORD *)this + 906);
  *((_QWORD *)this + 906) = 0;
  if (v104)
  {
    v105 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v105, v106);
  }
  v107 = *((_QWORD *)this + 905);
  *((_QWORD *)this + 905) = 0;
  if (v107)
  {
    v108 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v108, v109);
  }
  v110 = *((_QWORD *)this + 904);
  *((_QWORD *)this + 904) = 0;
  if (v110)
  {
    v111 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v111, v112);
  }
  v113 = *((_QWORD *)this + 903);
  *((_QWORD *)this + 903) = 0;
  if (v113)
  {
    v114 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v114, v115);
  }
  v116 = *((_QWORD *)this + 902);
  *((_QWORD *)this + 902) = 0;
  if (v116)
  {
    v117 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v117, v118);
  }
  v119 = *((_QWORD *)this + 901);
  *((_QWORD *)this + 901) = 0;
  if (v119)
  {
    v120 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v120, v121);
  }
  v122 = *((_QWORD *)this + 900);
  *((_QWORD *)this + 900) = 0;
  if (v122)
  {
    v123 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v123, v124);
  }
  v125 = *((_QWORD *)this + 899);
  *((_QWORD *)this + 899) = 0;
  if (v125)
  {
    v126 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v126, v127);
  }
  v128 = *((_QWORD *)this + 898);
  *((_QWORD *)this + 898) = 0;
  if (v128)
  {
    v129 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v129, v130);
  }
  v131 = *((_QWORD *)this + 897);
  *((_QWORD *)this + 897) = 0;
  if (v131)
  {
    v132 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v132, v133);
  }
  v134 = *((_QWORD *)this + 896);
  *((_QWORD *)this + 896) = 0;
  if (v134)
  {
    v135 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v135, v136);
  }
  v137 = *((_QWORD *)this + 895);
  *((_QWORD *)this + 895) = 0;
  if (v137)
  {
    v138 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v138, v139);
  }
  v140 = *((_QWORD *)this + 894);
  *((_QWORD *)this + 894) = 0;
  if (v140)
  {
    v141 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v141, v142);
  }
  v143 = *((_QWORD *)this + 893);
  *((_QWORD *)this + 893) = 0;
  if (v143)
  {
    v144 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v144, v145);
  }
  v146 = *((_QWORD *)this + 892);
  *((_QWORD *)this + 892) = 0;
  if (v146)
  {
    v147 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v147, v148);
  }
  v149 = *((_QWORD *)this + 891);
  *((_QWORD *)this + 891) = 0;
  if (v149)
  {
    v150 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v150, v151);
  }
  v152 = *((_QWORD *)this + 890);
  *((_QWORD *)this + 890) = 0;
  if (v152)
  {
    v153 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v153, v154);
  }
  v155 = *((_QWORD *)this + 889);
  *((_QWORD *)this + 889) = 0;
  if (v155)
  {
    v156 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v156, v157);
  }
  v158 = *((_QWORD *)this + 888);
  *((_QWORD *)this + 888) = 0;
  if (v158)
  {
    v159 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v159, v160);
  }
  v161 = *((_QWORD *)this + 887);
  *((_QWORD *)this + 887) = 0;
  if (v161)
  {
    v162 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v162, v163);
  }
  v164 = *((_QWORD *)this + 886);
  *((_QWORD *)this + 886) = 0;
  if (v164)
  {
    v165 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v165, v166);
  }
  v167 = *((_QWORD *)this + 885);
  *((_QWORD *)this + 885) = 0;
  if (v167)
  {
    v168 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v168, v169);
  }
  v170 = *((_QWORD *)this + 884);
  *((_QWORD *)this + 884) = 0;
  if (v170)
  {
    v171 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v171, v172);
  }
  v173 = *((_QWORD *)this + 883);
  *((_QWORD *)this + 883) = 0;
  if (v173)
  {
    v174 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v174, v175);
  }
  v176 = *((_QWORD *)this + 882);
  *((_QWORD *)this + 882) = 0;
  if (v176)
  {
    v177 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v177, v178);
  }
  v179 = *((_QWORD *)this + 881);
  *((_QWORD *)this + 881) = 0;
  if (v179)
  {
    v180 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v180, v181);
  }
  v182 = *((_QWORD *)this + 880);
  *((_QWORD *)this + 880) = 0;
  if (v182)
  {
    v183 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v183, v184);
  }
  v185 = *((_QWORD *)this + 879);
  *((_QWORD *)this + 879) = 0;
  if (v185)
  {
    v186 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v186, v187);
  }
  v188 = *((_QWORD *)this + 878);
  *((_QWORD *)this + 878) = 0;
  if (v188)
  {
    v189 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v189, v190);
  }
  v191 = *((_QWORD *)this + 877);
  *((_QWORD *)this + 877) = 0;
  if (v191)
  {
    v192 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v192, v193);
  }
  v194 = *((_QWORD *)this + 876);
  *((_QWORD *)this + 876) = 0;
  if (v194)
  {
    v195 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v195, v196);
  }
  v197 = *((_QWORD *)this + 875);
  *((_QWORD *)this + 875) = 0;
  if (v197)
  {
    v198 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v198, v199);
  }
  v200 = *((_QWORD *)this + 874);
  *((_QWORD *)this + 874) = 0;
  if (v200)
  {
    v201 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v201, v202);
  }
  v203 = *((_QWORD *)this + 873);
  *((_QWORD *)this + 873) = 0;
  if (v203)
  {
    v204 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v204, v205);
  }
  v206 = *((_QWORD *)this + 872);
  *((_QWORD *)this + 872) = 0;
  if (v206)
  {
    v207 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v207, v208);
  }
  v209 = *((_QWORD *)this + 871);
  *((_QWORD *)this + 871) = 0;
  if (v209)
  {
    v210 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v210, v211);
  }
  v212 = *((_QWORD *)this + 870);
  *((_QWORD *)this + 870) = 0;
  if (v212)
  {
    v213 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v213, v214);
  }
  v215 = *((_QWORD *)this + 869);
  *((_QWORD *)this + 869) = 0;
  if (v215)
  {
    v216 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v216, v217);
  }
  v218 = *((_QWORD *)this + 868);
  *((_QWORD *)this + 868) = 0;
  if (v218)
  {
    v219 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v219, v220);
  }
  v221 = *((_QWORD *)this + 867);
  *((_QWORD *)this + 867) = 0;
  if (v221)
  {
    v222 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v222, v223);
  }
  v224 = *((_QWORD *)this + 866);
  *((_QWORD *)this + 866) = 0;
  if (v224)
  {
    v225 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v225, v226);
  }
  v227 = *((_QWORD *)this + 865);
  *((_QWORD *)this + 865) = 0;
  if (v227)
  {
    v228 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v228, v229);
  }
  v230 = *((_QWORD *)this + 864);
  *((_QWORD *)this + 864) = 0;
  if (v230)
  {
    v231 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v231, v232);
  }
  v233 = *((_QWORD *)this + 863);
  *((_QWORD *)this + 863) = 0;
  if (v233)
  {
    v234 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v234, v235);
  }
  v236 = *((_QWORD *)this + 862);
  *((_QWORD *)this + 862) = 0;
  if (v236)
  {
    v237 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v237, v238);
  }
  v239 = *((_QWORD *)this + 861);
  *((_QWORD *)this + 861) = 0;
  if (v239)
  {
    v240 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v240, v241);
  }
  v242 = *((_QWORD *)this + 860);
  *((_QWORD *)this + 860) = 0;
  if (v242)
  {
    v243 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v243, v244);
  }
  v245 = *((_QWORD *)this + 859);
  *((_QWORD *)this + 859) = 0;
  if (v245)
  {
    v246 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v246, v247);
  }
  v248 = *((_QWORD *)this + 858);
  *((_QWORD *)this + 858) = 0;
  if (v248)
  {
    v249 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v249, v250);
  }
  v251 = *((_QWORD *)this + 857);
  *((_QWORD *)this + 857) = 0;
  if (v251)
  {
    v252 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v252, v253);
  }
  v254 = *((_QWORD *)this + 856);
  *((_QWORD *)this + 856) = 0;
  if (v254)
  {
    v255 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v255, v256);
  }
  v257 = *((_QWORD *)this + 855);
  *((_QWORD *)this + 855) = 0;
  if (v257)
  {
    v258 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v258, v259);
  }
  v260 = *((_QWORD *)this + 854);
  *((_QWORD *)this + 854) = 0;
  if (v260)
  {
    v261 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v261, v262);
  }
  v263 = *((_QWORD *)this + 853);
  *((_QWORD *)this + 853) = 0;
  if (v263)
  {
    v264 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v264, v265);
  }
  v266 = *((_QWORD *)this + 852);
  *((_QWORD *)this + 852) = 0;
  if (v266)
  {
    v267 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v267, v268);
  }
  v269 = *((_QWORD *)this + 851);
  *((_QWORD *)this + 851) = 0;
  if (v269)
  {
    v270 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v270, v271);
  }
  v272 = *((_QWORD *)this + 850);
  *((_QWORD *)this + 850) = 0;
  if (v272)
  {
    v273 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v273, v274);
  }
  v275 = *((_QWORD *)this + 849);
  *((_QWORD *)this + 849) = 0;
  if (v275)
  {
    v276 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v276, v277);
  }
  v278 = *((_QWORD *)this + 848);
  *((_QWORD *)this + 848) = 0;
  if (v278)
  {
    v279 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v279, v280);
  }
  v281 = *((_QWORD *)this + 847);
  *((_QWORD *)this + 847) = 0;
  if (v281)
  {
    v282 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v282, v283);
  }
  v284 = *((_QWORD *)this + 846);
  *((_QWORD *)this + 846) = 0;
  if (v284)
  {
    v285 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v285, v286);
  }
  v287 = *((_QWORD *)this + 845);
  *((_QWORD *)this + 845) = 0;
  if (v287)
  {
    v288 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v288, v289);
  }
  v290 = *((_QWORD *)this + 844);
  *((_QWORD *)this + 844) = 0;
  if (v290)
  {
    v291 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v291, v292);
  }
  v293 = *((_QWORD *)this + 843);
  *((_QWORD *)this + 843) = 0;
  if (v293)
  {
    v294 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v294, v295);
  }
  v296 = *((_QWORD *)this + 842);
  *((_QWORD *)this + 842) = 0;
  if (v296)
  {
    v297 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v297, v298);
  }
  v299 = *((_QWORD *)this + 841);
  *((_QWORD *)this + 841) = 0;
  if (v299)
  {
    v300 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v300, v301);
  }
  v302 = *((_QWORD *)this + 840);
  *((_QWORD *)this + 840) = 0;
  if (v302)
  {
    v303 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v303, v304);
  }
  v305 = *((_QWORD *)this + 839);
  *((_QWORD *)this + 839) = 0;
  if (v305)
  {
    v306 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v306, v307);
  }
  v308 = *((_QWORD *)this + 838);
  *((_QWORD *)this + 838) = 0;
  if (v308)
  {
    v309 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v309, v310);
  }
  v311 = *((_QWORD *)this + 837);
  *((_QWORD *)this + 837) = 0;
  if (v311)
  {
    v312 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v312, v313);
  }
  v314 = *((_QWORD *)this + 836);
  *((_QWORD *)this + 836) = 0;
  if (v314)
  {
    v315 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v315, v316);
  }
  v317 = *((_QWORD *)this + 835);
  *((_QWORD *)this + 835) = 0;
  if (v317)
  {
    v318 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v318, v319);
  }
  v320 = *((_QWORD *)this + 834);
  *((_QWORD *)this + 834) = 0;
  if (v320)
  {
    v321 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v321, v322);
  }
  v323 = *((_QWORD *)this + 833);
  *((_QWORD *)this + 833) = 0;
  if (v323)
  {
    v324 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v324, v325);
  }
  v326 = *((_QWORD *)this + 832);
  *((_QWORD *)this + 832) = 0;
  if (v326)
  {
    v327 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v327, v328);
  }
  v329 = *((_QWORD *)this + 831);
  *((_QWORD *)this + 831) = 0;
  if (v329)
  {
    v330 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v330, v331);
  }
  v332 = *((_QWORD *)this + 830);
  *((_QWORD *)this + 830) = 0;
  if (v332)
  {
    v333 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v333, v334);
  }
  v335 = *((_QWORD *)this + 829);
  *((_QWORD *)this + 829) = 0;
  if (v335)
  {
    v336 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v336, v337);
  }
  v338 = *((_QWORD *)this + 828);
  *((_QWORD *)this + 828) = 0;
  if (v338)
  {
    v339 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v339, v340);
  }
  v341 = *((_QWORD *)this + 827);
  *((_QWORD *)this + 827) = 0;
  if (v341)
  {
    v342 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v342, v343);
  }
  v344 = *((_QWORD *)this + 826);
  *((_QWORD *)this + 826) = 0;
  if (v344)
  {
    v345 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v345, v346);
  }
  v347 = *((_QWORD *)this + 825);
  *((_QWORD *)this + 825) = 0;
  if (v347)
  {
    v348 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v348, v349);
  }
  v350 = *((_QWORD *)this + 824);
  *((_QWORD *)this + 824) = 0;
  if (v350)
  {
    v351 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v351, v352);
  }
  v353 = *((_QWORD *)this + 823);
  *((_QWORD *)this + 823) = 0;
  if (v353)
  {
    v354 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v354, v355);
  }
  v356 = *((_QWORD *)this + 822);
  *((_QWORD *)this + 822) = 0;
  if (v356)
  {
    v357 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v357, v358);
  }
  v359 = *((_QWORD *)this + 821);
  *((_QWORD *)this + 821) = 0;
  if (v359)
  {
    v360 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v360, v361);
  }
  v362 = *((_QWORD *)this + 820);
  *((_QWORD *)this + 820) = 0;
  if (v362)
  {
    v363 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v363, v364);
  }
  v365 = *((_QWORD *)this + 819);
  *((_QWORD *)this + 819) = 0;
  if (v365)
  {
    v366 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v366, v367);
  }
  v368 = *((_QWORD *)this + 818);
  *((_QWORD *)this + 818) = 0;
  if (v368)
  {
    v369 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v369, v370);
  }
  v371 = *((_QWORD *)this + 817);
  *((_QWORD *)this + 817) = 0;
  if (v371)
  {
    v372 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v372, v373);
  }
  v374 = *((_QWORD *)this + 816);
  *((_QWORD *)this + 816) = 0;
  if (v374)
  {
    v375 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v375, v376);
  }
  v377 = *((_QWORD *)this + 815);
  *((_QWORD *)this + 815) = 0;
  if (v377)
  {
    v378 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v378, v379);
  }
  v380 = *((_QWORD *)this + 814);
  *((_QWORD *)this + 814) = 0;
  if (v380)
  {
    v381 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v381, v382);
  }
  v383 = *((_QWORD *)this + 813);
  *((_QWORD *)this + 813) = 0;
  if (v383)
  {
    v384 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v384, v385);
  }
  v386 = *((_QWORD *)this + 812);
  *((_QWORD *)this + 812) = 0;
  if (v386)
  {
    v387 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v387, v388);
  }
  v389 = *((_QWORD *)this + 811);
  *((_QWORD *)this + 811) = 0;
  if (v389)
  {
    v390 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v390, v391);
  }
  v392 = *((_QWORD *)this + 810);
  *((_QWORD *)this + 810) = 0;
  if (v392)
  {
    v393 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v393, v394);
  }
  v395 = *((_QWORD *)this + 809);
  *((_QWORD *)this + 809) = 0;
  if (v395)
  {
    v396 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v396, v397);
  }
  v398 = *((_QWORD *)this + 808);
  *((_QWORD *)this + 808) = 0;
  if (v398)
  {
    v399 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v399, v400);
  }
  v401 = *((_QWORD *)this + 807);
  *((_QWORD *)this + 807) = 0;
  if (v401)
  {
    v402 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v402, v403);
  }
  v404 = *((_QWORD *)this + 806);
  *((_QWORD *)this + 806) = 0;
  if (v404)
  {
    v405 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v405, v406);
  }
  v407 = *((_QWORD *)this + 805);
  *((_QWORD *)this + 805) = 0;
  if (v407)
  {
    v408 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v408, v409);
  }
  v410 = *((_QWORD *)this + 804);
  *((_QWORD *)this + 804) = 0;
  if (v410)
  {
    v411 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v411, v412);
  }
  v413 = *((_QWORD *)this + 803);
  *((_QWORD *)this + 803) = 0;
  if (v413)
  {
    v414 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v414, v415);
  }
  v416 = *((_QWORD *)this + 802);
  *((_QWORD *)this + 802) = 0;
  if (v416)
  {
    v417 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v417, v418);
  }
  v419 = *((_QWORD *)this + 801);
  *((_QWORD *)this + 801) = 0;
  if (v419)
  {
    v420 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v420, v421);
  }
  v422 = *((_QWORD *)this + 800);
  *((_QWORD *)this + 800) = 0;
  if (v422)
  {
    v423 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v423, v424);
  }
  v425 = *((_QWORD *)this + 799);
  *((_QWORD *)this + 799) = 0;
  if (v425)
  {
    v426 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v426, v427);
  }
  v428 = *((_QWORD *)this + 798);
  *((_QWORD *)this + 798) = 0;
  if (v428)
  {
    v429 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v429, v430);
  }
  v431 = *((_QWORD *)this + 797);
  *((_QWORD *)this + 797) = 0;
  if (v431)
  {
    v432 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v432, v433);
  }
  v434 = *((_QWORD *)this + 796);
  *((_QWORD *)this + 796) = 0;
  if (v434)
  {
    v435 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v435, v436);
  }
  v437 = *((_QWORD *)this + 795);
  *((_QWORD *)this + 795) = 0;
  if (v437)
  {
    v438 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v438, v439);
  }
  v440 = *((_QWORD *)this + 794);
  *((_QWORD *)this + 794) = 0;
  if (v440)
  {
    v441 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v441, v442);
  }
  v443 = *((_QWORD *)this + 793);
  *((_QWORD *)this + 793) = 0;
  if (v443)
  {
    v444 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v444, v445);
  }
  v446 = *((_QWORD *)this + 792);
  *((_QWORD *)this + 792) = 0;
  if (v446)
  {
    v447 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v447, v448);
  }
  v449 = *((_QWORD *)this + 791);
  *((_QWORD *)this + 791) = 0;
  if (v449)
  {
    v450 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v450, v451);
  }
  v452 = *((_QWORD *)this + 790);
  *((_QWORD *)this + 790) = 0;
  if (v452)
  {
    v453 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v453, v454);
  }
  v455 = *((_QWORD *)this + 789);
  *((_QWORD *)this + 789) = 0;
  if (v455)
  {
    v456 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v456, v457);
  }
  v458 = *((_QWORD *)this + 788);
  *((_QWORD *)this + 788) = 0;
  if (v458)
  {
    v459 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v459, v460);
  }
  v461 = *((_QWORD *)this + 787);
  *((_QWORD *)this + 787) = 0;
  if (v461)
  {
    v462 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v462, v463);
  }
  v464 = *((_QWORD *)this + 786);
  *((_QWORD *)this + 786) = 0;
  if (v464)
  {
    v465 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v465, v466);
  }
  v467 = *((_QWORD *)this + 785);
  *((_QWORD *)this + 785) = 0;
  if (v467)
  {
    v468 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v468, v469);
  }
  v470 = *((_QWORD *)this + 784);
  *((_QWORD *)this + 784) = 0;
  if (v470)
  {
    v471 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v471, v472);
  }
  v473 = *((_QWORD *)this + 783);
  *((_QWORD *)this + 783) = 0;
  if (v473)
  {
    v474 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v474, v475);
  }
  v476 = *((_QWORD *)this + 782);
  *((_QWORD *)this + 782) = 0;
  if (v476)
  {
    v477 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v477, v478);
  }
  v479 = *((_QWORD *)this + 781);
  *((_QWORD *)this + 781) = 0;
  if (v479)
  {
    v480 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v480, v481);
  }
  v482 = *((_QWORD *)this + 780);
  *((_QWORD *)this + 780) = 0;
  if (v482)
  {
    v483 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v483, v484);
  }
  v485 = *((_QWORD *)this + 779);
  *((_QWORD *)this + 779) = 0;
  if (v485)
  {
    v486 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v486, v487);
  }
  v488 = *((_QWORD *)this + 778);
  *((_QWORD *)this + 778) = 0;
  if (v488)
  {
    v489 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v489, v490);
  }
  v491 = *((_QWORD *)this + 777);
  *((_QWORD *)this + 777) = 0;
  if (v491)
  {
    v492 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v492, v493);
  }
  v494 = *((_QWORD *)this + 776);
  *((_QWORD *)this + 776) = 0;
  if (v494)
  {
    v495 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v495, v496);
  }
  v497 = *((_QWORD *)this + 775);
  *((_QWORD *)this + 775) = 0;
  if (v497)
  {
    v498 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v498, v499);
  }
  v500 = *((_QWORD *)this + 774);
  *((_QWORD *)this + 774) = 0;
  if (v500)
  {
    v501 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v501, v502);
  }
  v503 = *((_QWORD *)this + 773);
  *((_QWORD *)this + 773) = 0;
  if (v503)
  {
    v504 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v504, v505);
  }
  v506 = *((_QWORD *)this + 772);
  *((_QWORD *)this + 772) = 0;
  if (v506)
  {
    v507 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v507, v508);
  }
  v509 = *((_QWORD *)this + 771);
  *((_QWORD *)this + 771) = 0;
  if (v509)
  {
    v510 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v510, v511);
  }
  v512 = *((_QWORD *)this + 770);
  *((_QWORD *)this + 770) = 0;
  if (v512)
  {
    v513 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v513, v514);
  }
  v515 = *((_QWORD *)this + 769);
  *((_QWORD *)this + 769) = 0;
  if (v515)
  {
    v516 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v516, v517);
  }
  v518 = *((_QWORD *)this + 768);
  *((_QWORD *)this + 768) = 0;
  if (v518)
  {
    v519 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v519, v520);
  }
  v521 = *((_QWORD *)this + 767);
  *((_QWORD *)this + 767) = 0;
  if (v521)
  {
    v522 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v522, v523);
  }
  v524 = *((_QWORD *)this + 766);
  *((_QWORD *)this + 766) = 0;
  if (v524)
  {
    v525 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v525, v526);
  }
  v527 = *((_QWORD *)this + 765);
  *((_QWORD *)this + 765) = 0;
  if (v527)
  {
    v528 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v528, v529);
  }
  v530 = *((_QWORD *)this + 764);
  *((_QWORD *)this + 764) = 0;
  if (v530)
  {
    v531 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v531, v532);
  }
  v533 = *((_QWORD *)this + 763);
  *((_QWORD *)this + 763) = 0;
  if (v533)
  {
    v534 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v534, v535);
  }
  v536 = *((_QWORD *)this + 762);
  *((_QWORD *)this + 762) = 0;
  if (v536)
  {
    v537 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v537, v538);
  }
  v539 = *((_QWORD *)this + 761);
  *((_QWORD *)this + 761) = 0;
  if (v539)
  {
    v540 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v540, v541);
  }
  v542 = *((_QWORD *)this + 760);
  *((_QWORD *)this + 760) = 0;
  if (v542)
  {
    v543 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v543, v544);
  }
  v545 = *((_QWORD *)this + 759);
  *((_QWORD *)this + 759) = 0;
  if (v545)
  {
    v546 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v546, v547);
  }
  v548 = *((_QWORD *)this + 758);
  *((_QWORD *)this + 758) = 0;
  if (v548)
  {
    v549 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v549, v550);
  }
  v551 = *((_QWORD *)this + 757);
  *((_QWORD *)this + 757) = 0;
  if (v551)
  {
    v552 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v552, v553);
  }
  v554 = *((_QWORD *)this + 756);
  *((_QWORD *)this + 756) = 0;
  if (v554)
  {
    v555 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v555, v556);
  }
  v557 = *((_QWORD *)this + 755);
  *((_QWORD *)this + 755) = 0;
  if (v557)
  {
    v558 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v558, v559);
  }
  v560 = *((_QWORD *)this + 754);
  *((_QWORD *)this + 754) = 0;
  if (v560)
  {
    v561 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v561, v562);
  }
  v563 = *((_QWORD *)this + 753);
  *((_QWORD *)this + 753) = 0;
  if (v563)
  {
    v564 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v564, v565);
  }
  v566 = *((_QWORD *)this + 752);
  *((_QWORD *)this + 752) = 0;
  if (v566)
  {
    v567 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v567, v568);
  }
  v569 = *((_QWORD *)this + 751);
  *((_QWORD *)this + 751) = 0;
  if (v569)
  {
    v570 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v570, v571);
  }
  v572 = *((_QWORD *)this + 750);
  *((_QWORD *)this + 750) = 0;
  if (v572)
  {
    v573 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v573, v574);
  }
  v575 = *((_QWORD *)this + 749);
  *((_QWORD *)this + 749) = 0;
  if (v575)
  {
    v576 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v576, v577);
  }
  v578 = *((_QWORD *)this + 748);
  *((_QWORD *)this + 748) = 0;
  if (v578)
  {
    v579 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v579, v580);
  }
  v581 = *((_QWORD *)this + 747);
  *((_QWORD *)this + 747) = 0;
  if (v581)
  {
    v582 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v582, v583);
  }
  v584 = *((_QWORD *)this + 746);
  *((_QWORD *)this + 746) = 0;
  if (v584)
  {
    v585 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v585, v586);
  }
  v587 = *((_QWORD *)this + 745);
  *((_QWORD *)this + 745) = 0;
  if (v587)
  {
    v588 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v588, v589);
  }
  v590 = *((_QWORD *)this + 744);
  *((_QWORD *)this + 744) = 0;
  if (v590)
  {
    v591 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v591, v592);
  }
  v593 = *((_QWORD *)this + 743);
  *((_QWORD *)this + 743) = 0;
  if (v593)
  {
    v594 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v594, v595);
  }
  v596 = *((_QWORD *)this + 742);
  *((_QWORD *)this + 742) = 0;
  if (v596)
  {
    v597 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v597, v598);
  }
  v599 = *((_QWORD *)this + 741);
  *((_QWORD *)this + 741) = 0;
  if (v599)
  {
    v600 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v600, v601);
  }
  v602 = *((_QWORD *)this + 740);
  *((_QWORD *)this + 740) = 0;
  if (v602)
  {
    v603 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v603, v604);
  }
  v605 = *((_QWORD *)this + 739);
  *((_QWORD *)this + 739) = 0;
  if (v605)
  {
    v606 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v606, v607);
  }
  v608 = *((_QWORD *)this + 738);
  *((_QWORD *)this + 738) = 0;
  if (v608)
  {
    v609 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v609, v610);
  }
  v611 = *((_QWORD *)this + 737);
  *((_QWORD *)this + 737) = 0;
  if (v611)
  {
    v612 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v612, v613);
  }
  v614 = *((_QWORD *)this + 736);
  *((_QWORD *)this + 736) = 0;
  if (v614)
  {
    v615 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v615, v616);
  }
  v617 = *((_QWORD *)this + 735);
  *((_QWORD *)this + 735) = 0;
  if (v617)
  {
    v618 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v618, v619);
  }
  v620 = *((_QWORD *)this + 734);
  *((_QWORD *)this + 734) = 0;
  if (v620)
  {
    v621 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v621, v622);
  }
  v623 = *((_QWORD *)this + 733);
  *((_QWORD *)this + 733) = 0;
  if (v623)
  {
    v624 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v624, v625);
  }
  v626 = *((_QWORD *)this + 732);
  *((_QWORD *)this + 732) = 0;
  if (v626)
  {
    v627 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v627, v628);
  }
  v629 = *((_QWORD *)this + 731);
  *((_QWORD *)this + 731) = 0;
  if (v629)
  {
    v630 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v630, v631);
  }
  v632 = *((_QWORD *)this + 730);
  *((_QWORD *)this + 730) = 0;
  if (v632)
  {
    v633 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v633, v634);
  }
  v635 = *((_QWORD *)this + 729);
  *((_QWORD *)this + 729) = 0;
  if (v635)
  {
    v636 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v636, v637);
  }
  v638 = *((_QWORD *)this + 728);
  *((_QWORD *)this + 728) = 0;
  if (v638)
  {
    v639 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v639, v640);
  }
  v641 = *((_QWORD *)this + 727);
  *((_QWORD *)this + 727) = 0;
  if (v641)
  {
    v642 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v642, v643);
  }
  v644 = *((_QWORD *)this + 726);
  *((_QWORD *)this + 726) = 0;
  if (v644)
  {
    v645 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v645, v646);
  }
  v647 = *((_QWORD *)this + 725);
  *((_QWORD *)this + 725) = 0;
  if (v647)
  {
    v648 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v648, v649);
  }
  v650 = *((_QWORD *)this + 724);
  *((_QWORD *)this + 724) = 0;
  if (v650)
  {
    v651 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v651, v652);
  }
  v653 = *((_QWORD *)this + 723);
  *((_QWORD *)this + 723) = 0;
  if (v653)
  {
    v654 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v654, v655);
  }
  v656 = *((_QWORD *)this + 722);
  *((_QWORD *)this + 722) = 0;
  if (v656)
  {
    v657 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v657, v658);
  }
  v659 = *((_QWORD *)this + 721);
  *((_QWORD *)this + 721) = 0;
  if (v659)
  {
    v660 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v660, v661);
  }
  v662 = *((_QWORD *)this + 720);
  *((_QWORD *)this + 720) = 0;
  if (v662)
  {
    v663 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v663, v664);
  }
  v665 = *((_QWORD *)this + 719);
  *((_QWORD *)this + 719) = 0;
  if (v665)
  {
    v666 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v666, v667);
  }
  v668 = *((_QWORD *)this + 718);
  *((_QWORD *)this + 718) = 0;
  if (v668)
  {
    v669 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v669, v670);
  }
  v671 = *((_QWORD *)this + 717);
  *((_QWORD *)this + 717) = 0;
  if (v671)
  {
    v672 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v672, v673);
  }
  v674 = *((_QWORD *)this + 716);
  *((_QWORD *)this + 716) = 0;
  if (v674)
  {
    v675 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v675, v676);
  }
  v677 = *((_QWORD *)this + 715);
  *((_QWORD *)this + 715) = 0;
  if (v677)
  {
    v678 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v678, v679);
  }
  v680 = *((_QWORD *)this + 714);
  *((_QWORD *)this + 714) = 0;
  if (v680)
  {
    v681 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v681, v682);
  }
  v683 = *((_QWORD *)this + 713);
  *((_QWORD *)this + 713) = 0;
  if (v683)
  {
    v684 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v684, v685);
  }
  v686 = *((_QWORD *)this + 712);
  *((_QWORD *)this + 712) = 0;
  if (v686)
  {
    v687 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v687, v688);
  }
  v689 = *((_QWORD *)this + 711);
  *((_QWORD *)this + 711) = 0;
  if (v689)
  {
    v690 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v690, v691);
  }
  v692 = *((_QWORD *)this + 710);
  *((_QWORD *)this + 710) = 0;
  if (v692)
  {
    v693 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v693, v694);
  }
  v695 = *((_QWORD *)this + 709);
  *((_QWORD *)this + 709) = 0;
  if (v695)
  {
    v696 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v696, v697);
  }
  v698 = *((_QWORD *)this + 708);
  *((_QWORD *)this + 708) = 0;
  if (v698)
  {
    v699 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v699, v700);
  }
  v701 = *((_QWORD *)this + 707);
  *((_QWORD *)this + 707) = 0;
  if (v701)
  {
    v702 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v702, v703);
  }
  v704 = *((_QWORD *)this + 706);
  *((_QWORD *)this + 706) = 0;
  if (v704)
  {
    v705 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v705, v706);
  }
  v707 = *((_QWORD *)this + 705);
  *((_QWORD *)this + 705) = 0;
  if (v707)
  {
    v708 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v708, v709);
  }
  v710 = *((_QWORD *)this + 704);
  *((_QWORD *)this + 704) = 0;
  if (v710)
  {
    v711 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v711, v712);
  }
  v713 = *((_QWORD *)this + 703);
  *((_QWORD *)this + 703) = 0;
  if (v713)
  {
    v714 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v714, v715);
  }
  v716 = *((_QWORD *)this + 702);
  *((_QWORD *)this + 702) = 0;
  if (v716)
  {
    v717 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v717, v718);
  }
  v719 = *((_QWORD *)this + 701);
  *((_QWORD *)this + 701) = 0;
  if (v719)
  {
    v720 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v720, v721);
  }
  v722 = *((_QWORD *)this + 700);
  *((_QWORD *)this + 700) = 0;
  if (v722)
  {
    v723 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v723, v724);
  }
  v725 = *((_QWORD *)this + 699);
  *((_QWORD *)this + 699) = 0;
  if (v725)
  {
    v726 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v726, v727);
  }
  v728 = *((_QWORD *)this + 698);
  *((_QWORD *)this + 698) = 0;
  if (v728)
  {
    v729 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v729, v730);
  }
  v731 = *((_QWORD *)this + 697);
  *((_QWORD *)this + 697) = 0;
  if (v731)
  {
    v732 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v732, v733);
  }
  v734 = *((_QWORD *)this + 696);
  *((_QWORD *)this + 696) = 0;
  if (v734)
  {
    v735 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v735, v736);
  }
  v737 = *((_QWORD *)this + 695);
  *((_QWORD *)this + 695) = 0;
  if (v737)
  {
    v738 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v738, v739);
  }
  v740 = *((_QWORD *)this + 694);
  *((_QWORD *)this + 694) = 0;
  if (v740)
  {
    v741 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v741, v742);
  }
  v743 = *((_QWORD *)this + 693);
  *((_QWORD *)this + 693) = 0;
  if (v743)
  {
    v744 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v744, v745);
  }
  v746 = *((_QWORD *)this + 692);
  *((_QWORD *)this + 692) = 0;
  if (v746)
  {
    v747 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v747, v748);
  }
  v749 = *((_QWORD *)this + 691);
  *((_QWORD *)this + 691) = 0;
  if (v749)
  {
    v750 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v750, v751);
  }
  v752 = *((_QWORD *)this + 690);
  *((_QWORD *)this + 690) = 0;
  if (v752)
  {
    v753 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v753, v754);
  }
  v755 = *((_QWORD *)this + 689);
  *((_QWORD *)this + 689) = 0;
  if (v755)
  {
    v756 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v756, v757);
  }
  v758 = *((_QWORD *)this + 688);
  *((_QWORD *)this + 688) = 0;
  if (v758)
  {
    v759 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v759, v760);
  }
  v761 = *((_QWORD *)this + 687);
  *((_QWORD *)this + 687) = 0;
  if (v761)
  {
    v762 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v762, v763);
  }
  v764 = *((_QWORD *)this + 686);
  *((_QWORD *)this + 686) = 0;
  if (v764)
  {
    v765 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v765, v766);
  }
  v767 = *((_QWORD *)this + 685);
  *((_QWORD *)this + 685) = 0;
  if (v767)
  {
    v768 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v768, v769);
  }
  v770 = *((_QWORD *)this + 684);
  *((_QWORD *)this + 684) = 0;
  if (v770)
  {
    v771 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v771, v772);
  }
  v773 = *((_QWORD *)this + 683);
  *((_QWORD *)this + 683) = 0;
  if (v773)
  {
    v774 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v774, v775);
  }
  v776 = *((_QWORD *)this + 682);
  *((_QWORD *)this + 682) = 0;
  if (v776)
  {
    v777 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v777, v778);
  }
  v779 = *((_QWORD *)this + 681);
  *((_QWORD *)this + 681) = 0;
  if (v779)
  {
    v780 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v780, v781);
  }
  v782 = *((_QWORD *)this + 680);
  *((_QWORD *)this + 680) = 0;
  if (v782)
  {
    v783 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v783, v784);
  }
  v785 = *((_QWORD *)this + 679);
  *((_QWORD *)this + 679) = 0;
  if (v785)
  {
    v786 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v786, v787);
  }
  v788 = *((_QWORD *)this + 678);
  *((_QWORD *)this + 678) = 0;
  if (v788)
  {
    v789 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v789, v790);
  }
  v791 = *((_QWORD *)this + 677);
  *((_QWORD *)this + 677) = 0;
  if (v791)
  {
    v792 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v792, v793);
  }
  v794 = *((_QWORD *)this + 676);
  *((_QWORD *)this + 676) = 0;
  if (v794)
  {
    v795 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v795, v796);
  }
  v797 = *((_QWORD *)this + 675);
  *((_QWORD *)this + 675) = 0;
  if (v797)
  {
    v798 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v798, v799);
  }
  v800 = *((_QWORD *)this + 674);
  *((_QWORD *)this + 674) = 0;
  if (v800)
  {
    v801 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v801, v802);
  }
  v803 = *((_QWORD *)this + 673);
  *((_QWORD *)this + 673) = 0;
  if (v803)
  {
    v804 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v804, v805);
  }
  v806 = *((_QWORD *)this + 672);
  *((_QWORD *)this + 672) = 0;
  if (v806)
  {
    v807 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v807, v808);
  }
  v809 = *((_QWORD *)this + 671);
  *((_QWORD *)this + 671) = 0;
  if (v809)
  {
    v810 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v810, v811);
  }
  v812 = *((_QWORD *)this + 670);
  *((_QWORD *)this + 670) = 0;
  if (v812)
  {
    v813 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v813, v814);
  }
  v815 = *((_QWORD *)this + 669);
  *((_QWORD *)this + 669) = 0;
  if (v815)
  {
    v816 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v816, v817);
  }
  v818 = *((_QWORD *)this + 668);
  *((_QWORD *)this + 668) = 0;
  if (v818)
  {
    v819 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v819, v820);
  }
  v821 = *((_QWORD *)this + 667);
  *((_QWORD *)this + 667) = 0;
  if (v821)
  {
    v822 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v822, v823);
  }
  v824 = *((_QWORD *)this + 666);
  *((_QWORD *)this + 666) = 0;
  if (v824)
  {
    v825 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v825, v826);
  }
  v827 = *((_QWORD *)this + 665);
  *((_QWORD *)this + 665) = 0;
  if (v827)
  {
    v828 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v828, v829);
  }
  v830 = *((_QWORD *)this + 664);
  *((_QWORD *)this + 664) = 0;
  if (v830)
  {
    v831 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v831, v832);
  }
  v833 = *((_QWORD *)this + 663);
  *((_QWORD *)this + 663) = 0;
  if (v833)
  {
    v834 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v834, v835);
  }
  v836 = *((_QWORD *)this + 662);
  *((_QWORD *)this + 662) = 0;
  if (v836)
  {
    v837 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v837, v838);
  }
  v839 = *((_QWORD *)this + 661);
  *((_QWORD *)this + 661) = 0;
  if (v839)
  {
    v840 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v840, v841);
  }
  v842 = *((_QWORD *)this + 660);
  *((_QWORD *)this + 660) = 0;
  if (v842)
  {
    v843 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v843, v844);
  }
  v845 = *((_QWORD *)this + 659);
  *((_QWORD *)this + 659) = 0;
  if (v845)
  {
    v846 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v846, v847);
  }
  v848 = *((_QWORD *)this + 658);
  *((_QWORD *)this + 658) = 0;
  if (v848)
  {
    v849 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v849, v850);
  }
  v851 = *((_QWORD *)this + 657);
  *((_QWORD *)this + 657) = 0;
  if (v851)
  {
    v852 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v852, v853);
  }
  v854 = *((_QWORD *)this + 656);
  *((_QWORD *)this + 656) = 0;
  if (v854)
  {
    v855 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v855, v856);
  }
  v857 = *((_QWORD *)this + 655);
  *((_QWORD *)this + 655) = 0;
  if (v857)
  {
    v858 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v858, v859);
  }
  v860 = *((_QWORD *)this + 654);
  *((_QWORD *)this + 654) = 0;
  if (v860)
  {
    v861 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v861, v862);
  }
  v863 = *((_QWORD *)this + 653);
  *((_QWORD *)this + 653) = 0;
  if (v863)
  {
    v864 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v864, v865);
  }
  v866 = *((_QWORD *)this + 652);
  *((_QWORD *)this + 652) = 0;
  if (v866)
  {
    v867 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v867, v868);
  }
  v869 = *((_QWORD *)this + 651);
  *((_QWORD *)this + 651) = 0;
  if (v869)
  {
    v870 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v870, v871);
  }
  v872 = *((_QWORD *)this + 650);
  *((_QWORD *)this + 650) = 0;
  if (v872)
  {
    v873 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v873, v874);
  }
  v875 = *((_QWORD *)this + 649);
  *((_QWORD *)this + 649) = 0;
  if (v875)
  {
    v876 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v876, v877);
  }
  v878 = *((_QWORD *)this + 648);
  *((_QWORD *)this + 648) = 0;
  if (v878)
  {
    v879 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v879, v880);
  }
  v881 = *((_QWORD *)this + 647);
  *((_QWORD *)this + 647) = 0;
  if (v881)
  {
    v882 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v882, v883);
  }
  v884 = *((_QWORD *)this + 646);
  *((_QWORD *)this + 646) = 0;
  if (v884)
  {
    v885 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v885, v886);
  }
  v887 = *((_QWORD *)this + 645);
  *((_QWORD *)this + 645) = 0;
  if (v887)
  {
    v888 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v888, v889);
  }
  v890 = *((_QWORD *)this + 644);
  *((_QWORD *)this + 644) = 0;
  if (v890)
  {
    v891 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v891, v892);
  }
  v893 = *((_QWORD *)this + 643);
  *((_QWORD *)this + 643) = 0;
  if (v893)
  {
    v894 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v894, v895);
  }
  v896 = *((_QWORD *)this + 642);
  *((_QWORD *)this + 642) = 0;
  if (v896)
  {
    v897 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v897, v898);
  }
  v899 = *((_QWORD *)this + 641);
  *((_QWORD *)this + 641) = 0;
  if (v899)
  {
    v900 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v900, v901);
  }
  v902 = *((_QWORD *)this + 640);
  *((_QWORD *)this + 640) = 0;
  if (v902)
  {
    v903 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v903, v904);
  }
  v905 = *((_QWORD *)this + 639);
  *((_QWORD *)this + 639) = 0;
  if (v905)
  {
    v906 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v906, v907);
  }
  v908 = *((_QWORD *)this + 638);
  *((_QWORD *)this + 638) = 0;
  if (v908)
  {
    v909 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v909, v910);
  }
  v911 = *((_QWORD *)this + 637);
  *((_QWORD *)this + 637) = 0;
  if (v911)
  {
    v912 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v912, v913);
  }
  v914 = *((_QWORD *)this + 636);
  *((_QWORD *)this + 636) = 0;
  if (v914)
  {
    v915 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v915, v916);
  }
  v917 = *((_QWORD *)this + 635);
  *((_QWORD *)this + 635) = 0;
  if (v917)
  {
    v918 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v918, v919);
  }
  v920 = *((_QWORD *)this + 634);
  *((_QWORD *)this + 634) = 0;
  if (v920)
  {
    v921 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v921, v922);
  }
  v923 = *((_QWORD *)this + 633);
  *((_QWORD *)this + 633) = 0;
  if (v923)
  {
    v924 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v924, v925);
  }
  v926 = *((_QWORD *)this + 632);
  *((_QWORD *)this + 632) = 0;
  if (v926)
  {
    v927 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v927, v928);
  }
  v929 = *((_QWORD *)this + 631);
  *((_QWORD *)this + 631) = 0;
  if (v929)
  {
    v930 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v930, v931);
  }
  v932 = *((_QWORD *)this + 630);
  *((_QWORD *)this + 630) = 0;
  if (v932)
  {
    v933 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v933, v934);
  }
  v935 = *((_QWORD *)this + 629);
  *((_QWORD *)this + 629) = 0;
  if (v935)
  {
    v936 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v936, v937);
  }
  v938 = *((_QWORD *)this + 628);
  *((_QWORD *)this + 628) = 0;
  if (v938)
  {
    v939 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v939, v940);
  }
  v941 = *((_QWORD *)this + 627);
  *((_QWORD *)this + 627) = 0;
  if (v941)
  {
    v942 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v942, v943);
  }
  v944 = *((_QWORD *)this + 626);
  *((_QWORD *)this + 626) = 0;
  if (v944)
  {
    v945 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v945, v946);
  }
  v947 = *((_QWORD *)this + 625);
  *((_QWORD *)this + 625) = 0;
  if (v947)
  {
    v948 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v948, v949);
  }
  v950 = *((_QWORD *)this + 624);
  *((_QWORD *)this + 624) = 0;
  if (v950)
  {
    v951 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v951, v952);
  }
  v953 = *((_QWORD *)this + 623);
  *((_QWORD *)this + 623) = 0;
  if (v953)
  {
    v954 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v954, v955);
  }
  v956 = *((_QWORD *)this + 622);
  *((_QWORD *)this + 622) = 0;
  if (v956)
  {
    v957 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v957, v958);
  }
  v959 = *((_QWORD *)this + 621);
  *((_QWORD *)this + 621) = 0;
  if (v959)
  {
    v960 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v960, v961);
  }
  v962 = *((_QWORD *)this + 620);
  *((_QWORD *)this + 620) = 0;
  if (v962)
  {
    v963 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v963, v964);
  }
  v965 = *((_QWORD *)this + 619);
  *((_QWORD *)this + 619) = 0;
  if (v965)
  {
    v966 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v966, v967);
  }
  v968 = *((_QWORD *)this + 618);
  *((_QWORD *)this + 618) = 0;
  if (v968)
  {
    v969 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v969, v970);
  }
  v971 = *((_QWORD *)this + 617);
  *((_QWORD *)this + 617) = 0;
  if (v971)
  {
    v972 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v972, v973);
  }
  v974 = *((_QWORD *)this + 616);
  *((_QWORD *)this + 616) = 0;
  if (v974)
  {
    v975 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v975, v976);
  }
  v977 = *((_QWORD *)this + 615);
  *((_QWORD *)this + 615) = 0;
  if (v977)
  {
    v978 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v978, v979);
  }
  v980 = *((_QWORD *)this + 614);
  *((_QWORD *)this + 614) = 0;
  if (v980)
  {
    v981 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v981, v982);
  }
  v983 = *((_QWORD *)this + 613);
  *((_QWORD *)this + 613) = 0;
  if (v983)
  {
    v984 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v984, v985);
  }
  v986 = *((_QWORD *)this + 612);
  *((_QWORD *)this + 612) = 0;
  if (v986)
  {
    v987 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v987, v988);
  }
  v989 = *((_QWORD *)this + 611);
  *((_QWORD *)this + 611) = 0;
  if (v989)
  {
    v990 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v990, v991);
  }
  v992 = *((_QWORD *)this + 610);
  *((_QWORD *)this + 610) = 0;
  if (v992)
  {
    v993 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v993, v994);
  }
  v995 = *((_QWORD *)this + 609);
  *((_QWORD *)this + 609) = 0;
  if (v995)
  {
    v996 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v996, v997);
  }
  v998 = *((_QWORD *)this + 608);
  *((_QWORD *)this + 608) = 0;
  if (v998)
  {
    v999 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v999, v1000);
  }
  v1001 = *((_QWORD *)this + 607);
  *((_QWORD *)this + 607) = 0;
  if (v1001)
  {
    v1002 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1002, v1003);
  }
  v1004 = *((_QWORD *)this + 606);
  *((_QWORD *)this + 606) = 0;
  if (v1004)
  {
    v1005 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1005, v1006);
  }
  v1007 = *((_QWORD *)this + 605);
  *((_QWORD *)this + 605) = 0;
  if (v1007)
  {
    v1008 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1008, v1009);
  }
  v1010 = *((_QWORD *)this + 604);
  *((_QWORD *)this + 604) = 0;
  if (v1010)
  {
    v1011 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1011, v1012);
  }
  v1013 = *((_QWORD *)this + 603);
  *((_QWORD *)this + 603) = 0;
  if (v1013)
  {
    v1014 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1014, v1015);
  }
  v1016 = *((_QWORD *)this + 602);
  *((_QWORD *)this + 602) = 0;
  if (v1016)
  {
    v1017 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1017, v1018);
  }
  v1019 = *((_QWORD *)this + 601);
  *((_QWORD *)this + 601) = 0;
  if (v1019)
  {
    v1020 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1020, v1021);
  }
  v1022 = *((_QWORD *)this + 600);
  *((_QWORD *)this + 600) = 0;
  if (v1022)
  {
    v1023 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1023, v1024);
  }
  v1025 = *((_QWORD *)this + 599);
  *((_QWORD *)this + 599) = 0;
  if (v1025)
  {
    v1026 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1026, v1027);
  }
  v1028 = *((_QWORD *)this + 598);
  *((_QWORD *)this + 598) = 0;
  if (v1028)
  {
    v1029 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1029, v1030);
  }
  v1031 = *((_QWORD *)this + 597);
  *((_QWORD *)this + 597) = 0;
  if (v1031)
  {
    v1032 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1032, v1033);
  }
  v1034 = *((_QWORD *)this + 596);
  *((_QWORD *)this + 596) = 0;
  if (v1034)
  {
    v1035 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1035, v1036);
  }
  v1037 = *((_QWORD *)this + 595);
  *((_QWORD *)this + 595) = 0;
  if (v1037)
  {
    v1038 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1038, v1039);
  }
  v1040 = *((_QWORD *)this + 594);
  *((_QWORD *)this + 594) = 0;
  if (v1040)
  {
    v1041 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1041, v1042);
  }
  v1043 = *((_QWORD *)this + 593);
  *((_QWORD *)this + 593) = 0;
  if (v1043)
  {
    v1044 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1044, v1045);
  }
  v1046 = *((_QWORD *)this + 592);
  *((_QWORD *)this + 592) = 0;
  if (v1046)
  {
    v1047 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1047, v1048);
  }
  v1049 = *((_QWORD *)this + 591);
  *((_QWORD *)this + 591) = 0;
  if (v1049)
  {
    v1050 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1050, v1051);
  }
  v1052 = *((_QWORD *)this + 590);
  *((_QWORD *)this + 590) = 0;
  if (v1052)
  {
    v1053 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1053, v1054);
  }
  v1055 = *((_QWORD *)this + 589);
  *((_QWORD *)this + 589) = 0;
  if (v1055)
  {
    v1056 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1056, v1057);
  }
  v1058 = *((_QWORD *)this + 588);
  *((_QWORD *)this + 588) = 0;
  if (v1058)
  {
    v1059 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1059, v1060);
  }
  v1061 = *((_QWORD *)this + 587);
  *((_QWORD *)this + 587) = 0;
  if (v1061)
  {
    v1062 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1062, v1063);
  }
  v1064 = *((_QWORD *)this + 586);
  *((_QWORD *)this + 586) = 0;
  if (v1064)
  {
    v1065 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1065, v1066);
  }
  v1067 = *((_QWORD *)this + 585);
  *((_QWORD *)this + 585) = 0;
  if (v1067)
  {
    v1068 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1068, v1069);
  }
  v1070 = *((_QWORD *)this + 584);
  *((_QWORD *)this + 584) = 0;
  if (v1070)
  {
    v1071 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1071, v1072);
  }
  v1073 = *((_QWORD *)this + 583);
  *((_QWORD *)this + 583) = 0;
  if (v1073)
  {
    v1074 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1074, v1075);
  }
  v1076 = *((_QWORD *)this + 582);
  *((_QWORD *)this + 582) = 0;
  if (v1076)
  {
    v1077 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1077, v1078);
  }
  v1079 = *((_QWORD *)this + 581);
  *((_QWORD *)this + 581) = 0;
  if (v1079)
  {
    v1080 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1080, v1081);
  }
  v1082 = *((_QWORD *)this + 580);
  *((_QWORD *)this + 580) = 0;
  if (v1082)
  {
    v1083 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1083, v1084);
  }
  v1085 = *((_QWORD *)this + 579);
  *((_QWORD *)this + 579) = 0;
  if (v1085)
  {
    v1086 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1086, v1087);
  }
  v1088 = *((_QWORD *)this + 578);
  *((_QWORD *)this + 578) = 0;
  if (v1088)
  {
    v1089 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1089, v1090);
  }
  v1091 = *((_QWORD *)this + 577);
  *((_QWORD *)this + 577) = 0;
  if (v1091)
  {
    v1092 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1092, v1093);
  }
  v1094 = *((_QWORD *)this + 576);
  *((_QWORD *)this + 576) = 0;
  if (v1094)
  {
    v1095 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1095, v1096);
  }
  v1097 = *((_QWORD *)this + 575);
  *((_QWORD *)this + 575) = 0;
  if (v1097)
  {
    v1098 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1098, v1099);
  }
  v1100 = *((_QWORD *)this + 574);
  *((_QWORD *)this + 574) = 0;
  if (v1100)
  {
    v1101 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1101, v1102);
  }
  v1103 = *((_QWORD *)this + 573);
  *((_QWORD *)this + 573) = 0;
  if (v1103)
  {
    v1104 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1104, v1105);
  }
  v1106 = *((_QWORD *)this + 572);
  *((_QWORD *)this + 572) = 0;
  if (v1106)
  {
    v1107 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1107, v1108);
  }
  v1109 = *((_QWORD *)this + 571);
  *((_QWORD *)this + 571) = 0;
  if (v1109)
  {
    v1110 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1110, v1111);
  }
  v1112 = *((_QWORD *)this + 570);
  *((_QWORD *)this + 570) = 0;
  if (v1112)
  {
    v1113 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1113, v1114);
  }
  v1115 = *((_QWORD *)this + 569);
  *((_QWORD *)this + 569) = 0;
  if (v1115)
  {
    v1116 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1116, v1117);
  }
  v1118 = *((_QWORD *)this + 568);
  *((_QWORD *)this + 568) = 0;
  if (v1118)
  {
    v1119 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1119, v1120);
  }
  v1121 = *((_QWORD *)this + 567);
  *((_QWORD *)this + 567) = 0;
  if (v1121)
  {
    v1122 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1122, v1123);
  }
  v1124 = *((_QWORD *)this + 566);
  *((_QWORD *)this + 566) = 0;
  if (v1124)
  {
    v1125 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1125, v1126);
  }
  v1127 = *((_QWORD *)this + 565);
  *((_QWORD *)this + 565) = 0;
  if (v1127)
  {
    v1128 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1128, v1129);
  }
  v1130 = *((_QWORD *)this + 564);
  *((_QWORD *)this + 564) = 0;
  if (v1130)
  {
    v1131 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1131, v1132);
  }
  v1133 = *((_QWORD *)this + 563);
  *((_QWORD *)this + 563) = 0;
  if (v1133)
  {
    v1134 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1134, v1135);
  }
  v1136 = *((_QWORD *)this + 562);
  *((_QWORD *)this + 562) = 0;
  if (v1136)
  {
    v1137 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1137, v1138);
  }
  v1139 = *((_QWORD *)this + 561);
  *((_QWORD *)this + 561) = 0;
  if (v1139)
  {
    v1140 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1140, v1141);
  }
  v1142 = *((_QWORD *)this + 560);
  *((_QWORD *)this + 560) = 0;
  if (v1142)
  {
    v1143 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1143, v1144);
  }
  v1145 = *((_QWORD *)this + 559);
  *((_QWORD *)this + 559) = 0;
  if (v1145)
  {
    v1146 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1146, v1147);
  }
  v1148 = *((_QWORD *)this + 558);
  *((_QWORD *)this + 558) = 0;
  if (v1148)
  {
    v1149 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1149, v1150);
  }
  v1151 = *((_QWORD *)this + 557);
  *((_QWORD *)this + 557) = 0;
  if (v1151)
  {
    v1152 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1152, v1153);
  }
  v1154 = *((_QWORD *)this + 556);
  *((_QWORD *)this + 556) = 0;
  if (v1154)
  {
    v1155 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1155, v1156);
  }
  v1157 = *((_QWORD *)this + 555);
  *((_QWORD *)this + 555) = 0;
  if (v1157)
  {
    v1158 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1158, v1159);
  }
  v1160 = *((_QWORD *)this + 554);
  *((_QWORD *)this + 554) = 0;
  if (v1160)
  {
    v1161 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1161, v1162);
  }
  v1163 = *((_QWORD *)this + 553);
  *((_QWORD *)this + 553) = 0;
  if (v1163)
  {
    v1164 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1164, v1165);
  }
  v1166 = *((_QWORD *)this + 552);
  *((_QWORD *)this + 552) = 0;
  if (v1166)
  {
    v1167 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1167, v1168);
  }
  v1169 = *((_QWORD *)this + 551);
  *((_QWORD *)this + 551) = 0;
  if (v1169)
  {
    v1170 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1170, v1171);
  }
  v1172 = *((_QWORD *)this + 550);
  *((_QWORD *)this + 550) = 0;
  if (v1172)
  {
    v1173 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1173, v1174);
  }
  v1175 = *((_QWORD *)this + 549);
  *((_QWORD *)this + 549) = 0;
  if (v1175)
  {
    v1176 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1176, v1177);
  }
  v1178 = *((_QWORD *)this + 548);
  *((_QWORD *)this + 548) = 0;
  if (v1178)
  {
    v1179 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1179, v1180);
  }
  v1181 = *((_QWORD *)this + 547);
  *((_QWORD *)this + 547) = 0;
  if (v1181)
  {
    v1182 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1182, v1183);
  }
  v1184 = *((_QWORD *)this + 546);
  *((_QWORD *)this + 546) = 0;
  if (v1184)
  {
    v1185 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1185, v1186);
  }
  v1187 = *((_QWORD *)this + 545);
  *((_QWORD *)this + 545) = 0;
  if (v1187)
  {
    v1188 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1188, v1189);
  }
  v1190 = *((_QWORD *)this + 544);
  *((_QWORD *)this + 544) = 0;
  if (v1190)
  {
    v1191 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1191, v1192);
  }
  v1193 = *((_QWORD *)this + 543);
  *((_QWORD *)this + 543) = 0;
  if (v1193)
  {
    v1194 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1194, v1195);
  }
  v1196 = *((_QWORD *)this + 542);
  *((_QWORD *)this + 542) = 0;
  if (v1196)
  {
    v1197 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1197, v1198);
  }
  v1199 = *((_QWORD *)this + 541);
  *((_QWORD *)this + 541) = 0;
  if (v1199)
  {
    v1200 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1200, v1201);
  }
  v1202 = *((_QWORD *)this + 540);
  *((_QWORD *)this + 540) = 0;
  if (v1202)
  {
    v1203 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1203, v1204);
  }
  v1205 = *((_QWORD *)this + 539);
  *((_QWORD *)this + 539) = 0;
  if (v1205)
  {
    v1206 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1206, v1207);
  }
  v1208 = *((_QWORD *)this + 538);
  *((_QWORD *)this + 538) = 0;
  if (v1208)
  {
    v1209 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1209, v1210);
  }
  v1211 = *((_QWORD *)this + 537);
  *((_QWORD *)this + 537) = 0;
  if (v1211)
  {
    v1212 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1212, v1213);
  }
  v1214 = *((_QWORD *)this + 536);
  *((_QWORD *)this + 536) = 0;
  if (v1214)
  {
    v1215 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1215, v1216);
  }
  v1217 = *((_QWORD *)this + 535);
  *((_QWORD *)this + 535) = 0;
  if (v1217)
  {
    v1218 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1218, v1219);
  }
  v1220 = *((_QWORD *)this + 534);
  *((_QWORD *)this + 534) = 0;
  if (v1220)
  {
    v1221 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1221, v1222);
  }
  v1223 = *((_QWORD *)this + 533);
  *((_QWORD *)this + 533) = 0;
  if (v1223)
  {
    v1224 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1224, v1225);
  }
  v1226 = *((_QWORD *)this + 532);
  *((_QWORD *)this + 532) = 0;
  if (v1226)
  {
    v1227 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1227, v1228);
  }
  v1229 = *((_QWORD *)this + 531);
  *((_QWORD *)this + 531) = 0;
  if (v1229)
  {
    v1230 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1230, v1231);
  }
  v1232 = *((_QWORD *)this + 530);
  *((_QWORD *)this + 530) = 0;
  if (v1232)
  {
    v1233 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1233, v1234);
  }
  v1235 = *((_QWORD *)this + 529);
  *((_QWORD *)this + 529) = 0;
  if (v1235)
  {
    v1236 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1236, v1237);
  }
  v1238 = *((_QWORD *)this + 528);
  *((_QWORD *)this + 528) = 0;
  if (v1238)
  {
    v1239 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1239, v1240);
  }
  v1241 = *((_QWORD *)this + 527);
  *((_QWORD *)this + 527) = 0;
  if (v1241)
  {
    v1242 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1242, v1243);
  }
  v1244 = *((_QWORD *)this + 526);
  *((_QWORD *)this + 526) = 0;
  if (v1244)
  {
    v1245 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1245, v1246);
  }
  v1247 = *((_QWORD *)this + 525);
  *((_QWORD *)this + 525) = 0;
  if (v1247)
  {
    v1248 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1248, v1249);
  }
  v1250 = *((_QWORD *)this + 524);
  *((_QWORD *)this + 524) = 0;
  if (v1250)
  {
    v1251 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1251, v1252);
  }
  v1253 = *((_QWORD *)this + 523);
  *((_QWORD *)this + 523) = 0;
  if (v1253)
  {
    v1254 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1254, v1255);
  }
  v1256 = *((_QWORD *)this + 522);
  *((_QWORD *)this + 522) = 0;
  if (v1256)
  {
    v1257 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1257, v1258);
  }
  v1259 = *((_QWORD *)this + 521);
  *((_QWORD *)this + 521) = 0;
  if (v1259)
  {
    v1260 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1260, v1261);
  }
  v1262 = *((_QWORD *)this + 520);
  *((_QWORD *)this + 520) = 0;
  if (v1262)
  {
    v1263 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1263, v1264);
  }
  v1265 = *((_QWORD *)this + 519);
  *((_QWORD *)this + 519) = 0;
  if (v1265)
  {
    v1266 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1266, v1267);
  }
  v1268 = *((_QWORD *)this + 518);
  *((_QWORD *)this + 518) = 0;
  if (v1268)
  {
    v1269 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1269, v1270);
  }
  v1271 = *((_QWORD *)this + 517);
  *((_QWORD *)this + 517) = 0;
  if (v1271)
  {
    v1272 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1272, v1273);
  }
  v1274 = *((_QWORD *)this + 516);
  *((_QWORD *)this + 516) = 0;
  if (v1274)
  {
    v1275 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1275, v1276);
  }
  v1277 = *((_QWORD *)this + 515);
  *((_QWORD *)this + 515) = 0;
  if (v1277)
  {
    v1278 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1278, v1279);
  }
  v1280 = *((_QWORD *)this + 514);
  *((_QWORD *)this + 514) = 0;
  if (v1280)
  {
    v1281 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1281, v1282);
  }
  v1283 = *((_QWORD *)this + 513);
  *((_QWORD *)this + 513) = 0;
  if (v1283)
  {
    v1284 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1284, v1285);
  }
  v1286 = *((_QWORD *)this + 512);
  *((_QWORD *)this + 512) = 0;
  if (v1286)
  {
    v1287 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1287, v1288);
  }
  v1289 = *((_QWORD *)this + 511);
  *((_QWORD *)this + 511) = 0;
  if (v1289)
  {
    v1290 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1290, v1291);
  }
  v1292 = *((_QWORD *)this + 510);
  *((_QWORD *)this + 510) = 0;
  if (v1292)
  {
    v1293 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1293, v1294);
  }
  v1295 = *((_QWORD *)this + 509);
  *((_QWORD *)this + 509) = 0;
  if (v1295)
  {
    v1296 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1296, v1297);
  }
  v1298 = *((_QWORD *)this + 508);
  *((_QWORD *)this + 508) = 0;
  if (v1298)
  {
    v1299 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1299, v1300);
  }
  v1301 = *((_QWORD *)this + 507);
  *((_QWORD *)this + 507) = 0;
  if (v1301)
  {
    v1302 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1302, v1303);
  }
  v1304 = *((_QWORD *)this + 506);
  *((_QWORD *)this + 506) = 0;
  if (v1304)
  {
    v1305 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1305, v1306);
  }
  v1307 = *((_QWORD *)this + 505);
  *((_QWORD *)this + 505) = 0;
  if (v1307)
  {
    v1308 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1308, v1309);
  }
  v1310 = *((_QWORD *)this + 504);
  *((_QWORD *)this + 504) = 0;
  if (v1310)
  {
    v1311 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1311, v1312);
  }
  v1313 = *((_QWORD *)this + 503);
  *((_QWORD *)this + 503) = 0;
  if (v1313)
  {
    v1314 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1314, v1315);
  }
  v1316 = *((_QWORD *)this + 502);
  *((_QWORD *)this + 502) = 0;
  if (v1316)
  {
    v1317 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1317, v1318);
  }
  v1319 = *((_QWORD *)this + 501);
  *((_QWORD *)this + 501) = 0;
  if (v1319)
  {
    v1320 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1320, v1321);
  }
  v1322 = *((_QWORD *)this + 500);
  *((_QWORD *)this + 500) = 0;
  if (v1322)
  {
    v1323 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1323, v1324);
  }
  v1325 = *((_QWORD *)this + 499);
  *((_QWORD *)this + 499) = 0;
  if (v1325)
  {
    v1326 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1326, v1327);
  }
  v1328 = *((_QWORD *)this + 498);
  *((_QWORD *)this + 498) = 0;
  if (v1328)
  {
    v1329 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1329, v1330);
  }
  v1331 = *((_QWORD *)this + 497);
  *((_QWORD *)this + 497) = 0;
  if (v1331)
  {
    v1332 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1332, v1333);
  }
  v1334 = *((_QWORD *)this + 496);
  *((_QWORD *)this + 496) = 0;
  if (v1334)
  {
    v1335 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1335, v1336);
  }
  v1337 = *((_QWORD *)this + 495);
  *((_QWORD *)this + 495) = 0;
  if (v1337)
  {
    v1338 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1338, v1339);
  }
  v1340 = *((_QWORD *)this + 494);
  *((_QWORD *)this + 494) = 0;
  if (v1340)
  {
    v1341 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1341, v1342);
  }
  v1343 = *((_QWORD *)this + 493);
  *((_QWORD *)this + 493) = 0;
  if (v1343)
  {
    v1344 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1344, v1345);
  }
  v1346 = *((_QWORD *)this + 492);
  *((_QWORD *)this + 492) = 0;
  if (v1346)
  {
    v1347 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1347, v1348);
  }
  v1349 = *((_QWORD *)this + 491);
  *((_QWORD *)this + 491) = 0;
  if (v1349)
  {
    v1350 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1350, v1351);
  }
  v1352 = *((_QWORD *)this + 490);
  *((_QWORD *)this + 490) = 0;
  if (v1352)
  {
    v1353 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1353, v1354);
  }
  v1355 = *((_QWORD *)this + 489);
  *((_QWORD *)this + 489) = 0;
  if (v1355)
  {
    v1356 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1356, v1357);
  }
  v1358 = *((_QWORD *)this + 488);
  *((_QWORD *)this + 488) = 0;
  if (v1358)
  {
    v1359 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1359, v1360);
  }
  v1361 = *((_QWORD *)this + 487);
  *((_QWORD *)this + 487) = 0;
  if (v1361)
  {
    v1362 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1362, v1363);
  }
  v1364 = *((_QWORD *)this + 486);
  *((_QWORD *)this + 486) = 0;
  if (v1364)
  {
    v1365 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1365, v1366);
  }
  v1367 = *((_QWORD *)this + 485);
  *((_QWORD *)this + 485) = 0;
  if (v1367)
  {
    v1368 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1368, v1369);
  }
  v1370 = *((_QWORD *)this + 484);
  *((_QWORD *)this + 484) = 0;
  if (v1370)
  {
    v1371 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1371, v1372);
  }
  v1373 = *((_QWORD *)this + 483);
  *((_QWORD *)this + 483) = 0;
  if (v1373)
  {
    v1374 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1374, v1375);
  }
  v1376 = *((_QWORD *)this + 482);
  *((_QWORD *)this + 482) = 0;
  if (v1376)
  {
    v1377 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1377, v1378);
  }
  v1379 = *((_QWORD *)this + 481);
  *((_QWORD *)this + 481) = 0;
  if (v1379)
  {
    v1380 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1380, v1381);
  }
  v1382 = *((_QWORD *)this + 480);
  *((_QWORD *)this + 480) = 0;
  if (v1382)
  {
    v1383 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1383, v1384);
  }
  v1385 = *((_QWORD *)this + 479);
  *((_QWORD *)this + 479) = 0;
  if (v1385)
  {
    v1386 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1386, v1387);
  }
  v1388 = *((_QWORD *)this + 478);
  *((_QWORD *)this + 478) = 0;
  if (v1388)
  {
    v1389 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1389, v1390);
  }
  v1391 = *((_QWORD *)this + 477);
  *((_QWORD *)this + 477) = 0;
  if (v1391)
  {
    v1392 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1392, v1393);
  }
  v1394 = *((_QWORD *)this + 476);
  *((_QWORD *)this + 476) = 0;
  if (v1394)
  {
    v1395 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1395, v1396);
  }
  v1397 = *((_QWORD *)this + 475);
  *((_QWORD *)this + 475) = 0;
  if (v1397)
  {
    v1398 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1398, v1399);
  }
  v1400 = *((_QWORD *)this + 474);
  *((_QWORD *)this + 474) = 0;
  if (v1400)
  {
    v1401 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1401, v1402);
  }
  v1403 = *((_QWORD *)this + 473);
  *((_QWORD *)this + 473) = 0;
  if (v1403)
  {
    v1404 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1404, v1405);
  }
  v1406 = *((_QWORD *)this + 472);
  *((_QWORD *)this + 472) = 0;
  if (v1406)
  {
    v1407 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1407, v1408);
  }
  v1409 = *((_QWORD *)this + 471);
  *((_QWORD *)this + 471) = 0;
  if (v1409)
  {
    v1410 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1410, v1411);
  }
  v1412 = *((_QWORD *)this + 470);
  *((_QWORD *)this + 470) = 0;
  if (v1412)
  {
    v1413 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1413, v1414);
  }
  v1415 = *((_QWORD *)this + 469);
  *((_QWORD *)this + 469) = 0;
  if (v1415)
  {
    v1416 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1416, v1417);
  }
  v1418 = *((_QWORD *)this + 468);
  *((_QWORD *)this + 468) = 0;
  if (v1418)
  {
    v1419 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1419, v1420);
  }
  v1421 = *((_QWORD *)this + 467);
  *((_QWORD *)this + 467) = 0;
  if (v1421)
  {
    v1422 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1422, v1423);
  }
  v1424 = *((_QWORD *)this + 466);
  *((_QWORD *)this + 466) = 0;
  if (v1424)
  {
    v1425 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1425, v1426);
  }
  v1427 = *((_QWORD *)this + 465);
  *((_QWORD *)this + 465) = 0;
  if (v1427)
  {
    v1428 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1428, v1429);
  }
  v1430 = *((_QWORD *)this + 464);
  *((_QWORD *)this + 464) = 0;
  if (v1430)
  {
    v1431 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1431, v1432);
  }
  v1433 = *((_QWORD *)this + 463);
  *((_QWORD *)this + 463) = 0;
  if (v1433)
  {
    v1434 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1434, v1435);
  }
  v1436 = *((_QWORD *)this + 462);
  *((_QWORD *)this + 462) = 0;
  if (v1436)
  {
    v1437 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1437, v1438);
  }
  v1439 = *((_QWORD *)this + 461);
  *((_QWORD *)this + 461) = 0;
  if (v1439)
  {
    v1440 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1440, v1441);
  }
  v1442 = *((_QWORD *)this + 460);
  *((_QWORD *)this + 460) = 0;
  if (v1442)
  {
    v1443 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1443, v1444);
  }
  v1445 = *((_QWORD *)this + 459);
  *((_QWORD *)this + 459) = 0;
  if (v1445)
  {
    v1446 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1446, v1447);
  }
  v1448 = *((_QWORD *)this + 458);
  *((_QWORD *)this + 458) = 0;
  if (v1448)
  {
    v1449 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1449, v1450);
  }
  v1451 = *((_QWORD *)this + 457);
  *((_QWORD *)this + 457) = 0;
  if (v1451)
  {
    v1452 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1452, v1453);
  }
  v1454 = *((_QWORD *)this + 456);
  *((_QWORD *)this + 456) = 0;
  if (v1454)
  {
    v1455 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1455, v1456);
  }
  v1457 = *((_QWORD *)this + 455);
  *((_QWORD *)this + 455) = 0;
  if (v1457)
  {
    v1458 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1458, v1459);
  }
  v1460 = *((_QWORD *)this + 454);
  *((_QWORD *)this + 454) = 0;
  if (v1460)
  {
    v1461 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1461, v1462);
  }
  v1463 = *((_QWORD *)this + 453);
  *((_QWORD *)this + 453) = 0;
  if (v1463)
  {
    v1464 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1464, v1465);
  }
  v1466 = *((_QWORD *)this + 452);
  *((_QWORD *)this + 452) = 0;
  if (v1466)
  {
    v1467 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1467, v1468);
  }
  v1469 = *((_QWORD *)this + 451);
  *((_QWORD *)this + 451) = 0;
  if (v1469)
  {
    v1470 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1470, v1471);
  }
  v1472 = *((_QWORD *)this + 450);
  *((_QWORD *)this + 450) = 0;
  if (v1472)
  {
    v1473 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1473, v1474);
  }
  v1475 = *((_QWORD *)this + 449);
  *((_QWORD *)this + 449) = 0;
  if (v1475)
  {
    v1476 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1476, v1477);
  }
  v1478 = *((_QWORD *)this + 448);
  *((_QWORD *)this + 448) = 0;
  if (v1478)
  {
    v1479 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1479, v1480);
  }
  v1481 = *((_QWORD *)this + 447);
  *((_QWORD *)this + 447) = 0;
  if (v1481)
  {
    v1482 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1482, v1483);
  }
  v1484 = *((_QWORD *)this + 446);
  *((_QWORD *)this + 446) = 0;
  if (v1484)
  {
    v1485 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1485, v1486);
  }
  v1487 = *((_QWORD *)this + 445);
  *((_QWORD *)this + 445) = 0;
  if (v1487)
  {
    v1488 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1488, v1489);
  }
  v1490 = *((_QWORD *)this + 444);
  *((_QWORD *)this + 444) = 0;
  if (v1490)
  {
    v1491 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1491, v1492);
  }
  v1493 = *((_QWORD *)this + 443);
  *((_QWORD *)this + 443) = 0;
  if (v1493)
  {
    v1494 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1494, v1495);
  }
  v1496 = *((_QWORD *)this + 442);
  *((_QWORD *)this + 442) = 0;
  if (v1496)
  {
    v1497 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1497, v1498);
  }
  v1499 = *((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v1499)
  {
    v1500 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1500, v1501);
  }
  v1502 = *((_QWORD *)this + 440);
  *((_QWORD *)this + 440) = 0;
  if (v1502)
  {
    v1503 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1503, v1504);
  }
  v1505 = *((_QWORD *)this + 439);
  *((_QWORD *)this + 439) = 0;
  if (v1505)
  {
    v1506 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1506, v1507);
  }
  v1508 = *((_QWORD *)this + 438);
  *((_QWORD *)this + 438) = 0;
  if (v1508)
  {
    v1509 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1509, v1510);
  }
  v1511 = *((_QWORD *)this + 437);
  *((_QWORD *)this + 437) = 0;
  if (v1511)
  {
    v1512 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1512, v1513);
  }
  v1514 = *((_QWORD *)this + 436);
  *((_QWORD *)this + 436) = 0;
  if (v1514)
  {
    v1515 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1515, v1516);
  }
  v1517 = *((_QWORD *)this + 435);
  *((_QWORD *)this + 435) = 0;
  if (v1517)
  {
    v1518 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1518, v1519);
  }
  v1520 = *((_QWORD *)this + 434);
  *((_QWORD *)this + 434) = 0;
  if (v1520)
  {
    v1521 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1521, v1522);
  }
  v1523 = *((_QWORD *)this + 433);
  *((_QWORD *)this + 433) = 0;
  if (v1523)
  {
    v1524 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1524, v1525);
  }
  v1526 = *((_QWORD *)this + 432);
  *((_QWORD *)this + 432) = 0;
  if (v1526)
  {
    v1527 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1527, v1528);
  }
  v1529 = *((_QWORD *)this + 431);
  *((_QWORD *)this + 431) = 0;
  if (v1529)
  {
    v1530 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1530, v1531);
  }
  v1532 = *((_QWORD *)this + 430);
  *((_QWORD *)this + 430) = 0;
  if (v1532)
  {
    v1533 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1533, v1534);
  }
  v1535 = *((_QWORD *)this + 429);
  *((_QWORD *)this + 429) = 0;
  if (v1535)
  {
    v1536 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1536, v1537);
  }
  v1538 = *((_QWORD *)this + 428);
  *((_QWORD *)this + 428) = 0;
  if (v1538)
  {
    v1539 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1539, v1540);
  }
  v1541 = *((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = 0;
  if (v1541)
  {
    v1542 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1542, v1543);
  }
  v1544 = *((_QWORD *)this + 426);
  *((_QWORD *)this + 426) = 0;
  if (v1544)
  {
    v1545 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1545, v1546);
  }
  v1547 = *((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v1547)
  {
    v1548 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1548, v1549);
  }
  v1550 = *((_QWORD *)this + 424);
  *((_QWORD *)this + 424) = 0;
  if (v1550)
  {
    v1551 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1551, v1552);
  }
  v1553 = *((_QWORD *)this + 423);
  *((_QWORD *)this + 423) = 0;
  if (v1553)
  {
    v1554 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1554, v1555);
  }
  v1556 = *((_QWORD *)this + 422);
  *((_QWORD *)this + 422) = 0;
  if (v1556)
  {
    v1557 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1557, v1558);
  }
  v1559 = *((_QWORD *)this + 421);
  *((_QWORD *)this + 421) = 0;
  if (v1559)
  {
    v1560 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1560, v1561);
  }
  v1562 = *((_QWORD *)this + 420);
  *((_QWORD *)this + 420) = 0;
  if (v1562)
  {
    v1563 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1563, v1564);
  }
  v1565 = *((_QWORD *)this + 419);
  *((_QWORD *)this + 419) = 0;
  if (v1565)
  {
    v1566 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1566, v1567);
  }
  v1568 = *((_QWORD *)this + 418);
  *((_QWORD *)this + 418) = 0;
  if (v1568)
  {
    v1569 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1569, v1570);
  }
  v1571 = *((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v1571)
  {
    v1572 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1572, v1573);
  }
  v1574 = *((_QWORD *)this + 416);
  *((_QWORD *)this + 416) = 0;
  if (v1574)
  {
    v1575 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1575, v1576);
  }
  v1577 = *((_QWORD *)this + 415);
  *((_QWORD *)this + 415) = 0;
  if (v1577)
  {
    v1578 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1578, v1579);
  }
  v1580 = *((_QWORD *)this + 414);
  *((_QWORD *)this + 414) = 0;
  if (v1580)
  {
    v1581 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1581, v1582);
  }
  v1583 = *((_QWORD *)this + 413);
  *((_QWORD *)this + 413) = 0;
  if (v1583)
  {
    v1584 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1584, v1585);
  }
  v1586 = *((_QWORD *)this + 412);
  *((_QWORD *)this + 412) = 0;
  if (v1586)
  {
    v1587 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1587, v1588);
  }
  v1589 = *((_QWORD *)this + 411);
  *((_QWORD *)this + 411) = 0;
  if (v1589)
  {
    v1590 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1590, v1591);
  }
  v1592 = *((_QWORD *)this + 410);
  *((_QWORD *)this + 410) = 0;
  if (v1592)
  {
    v1593 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1593, v1594);
  }
  v1595 = *((_QWORD *)this + 409);
  *((_QWORD *)this + 409) = 0;
  if (v1595)
  {
    v1596 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1596, v1597);
  }
  v1598 = *((_QWORD *)this + 408);
  *((_QWORD *)this + 408) = 0;
  if (v1598)
  {
    v1599 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1599, v1600);
  }
  v1601 = *((_QWORD *)this + 407);
  *((_QWORD *)this + 407) = 0;
  if (v1601)
  {
    v1602 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1602, v1603);
  }
  v1604 = *((_QWORD *)this + 406);
  *((_QWORD *)this + 406) = 0;
  if (v1604)
  {
    v1605 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1605, v1606);
  }
  v1607 = *((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v1607)
  {
    v1608 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1608, v1609);
  }
  v1610 = *((_QWORD *)this + 404);
  *((_QWORD *)this + 404) = 0;
  if (v1610)
  {
    v1611 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1611, v1612);
  }
  v1613 = *((_QWORD *)this + 403);
  *((_QWORD *)this + 403) = 0;
  if (v1613)
  {
    v1614 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1614, v1615);
  }
  v1616 = *((_QWORD *)this + 402);
  *((_QWORD *)this + 402) = 0;
  if (v1616)
  {
    v1617 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1617, v1618);
  }
  v1619 = *((_QWORD *)this + 401);
  *((_QWORD *)this + 401) = 0;
  if (v1619)
  {
    v1620 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1620, v1621);
  }
  v1622 = *((_QWORD *)this + 400);
  *((_QWORD *)this + 400) = 0;
  if (v1622)
  {
    v1623 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1623, v1624);
  }
  v1625 = *((_QWORD *)this + 399);
  *((_QWORD *)this + 399) = 0;
  if (v1625)
  {
    v1626 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1626, v1627);
  }
  v1628 = *((_QWORD *)this + 398);
  *((_QWORD *)this + 398) = 0;
  if (v1628)
  {
    v1629 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1629, v1630);
  }
  v1631 = *((_QWORD *)this + 397);
  *((_QWORD *)this + 397) = 0;
  if (v1631)
  {
    v1632 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1632, v1633);
  }
  v1634 = *((_QWORD *)this + 396);
  *((_QWORD *)this + 396) = 0;
  if (v1634)
  {
    v1635 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1635, v1636);
  }
  v1637 = *((_QWORD *)this + 395);
  *((_QWORD *)this + 395) = 0;
  if (v1637)
  {
    v1638 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1638, v1639);
  }
  v1640 = *((_QWORD *)this + 394);
  *((_QWORD *)this + 394) = 0;
  if (v1640)
  {
    v1641 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1641, v1642);
  }
  v1643 = *((_QWORD *)this + 393);
  *((_QWORD *)this + 393) = 0;
  if (v1643)
  {
    v1644 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1644, v1645);
  }
  v1646 = *((_QWORD *)this + 392);
  *((_QWORD *)this + 392) = 0;
  if (v1646)
  {
    v1647 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1647, v1648);
  }
  v1649 = *((_QWORD *)this + 391);
  *((_QWORD *)this + 391) = 0;
  if (v1649)
  {
    v1650 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1650, v1651);
  }
  v1652 = *((_QWORD *)this + 390);
  *((_QWORD *)this + 390) = 0;
  if (v1652)
  {
    v1653 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1653, v1654);
  }
  v1655 = *((_QWORD *)this + 389);
  *((_QWORD *)this + 389) = 0;
  if (v1655)
  {
    v1656 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1656, v1657);
  }
  v1658 = *((_QWORD *)this + 388);
  *((_QWORD *)this + 388) = 0;
  if (v1658)
  {
    v1659 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1659, v1660);
  }
  v1661 = *((_QWORD *)this + 387);
  *((_QWORD *)this + 387) = 0;
  if (v1661)
  {
    v1662 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1662, v1663);
  }
  v1664 = *((_QWORD *)this + 386);
  *((_QWORD *)this + 386) = 0;
  if (v1664)
  {
    v1665 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1665, v1666);
  }
  v1667 = *((_QWORD *)this + 385);
  *((_QWORD *)this + 385) = 0;
  if (v1667)
  {
    v1668 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1668, v1669);
  }
  v1670 = *((_QWORD *)this + 384);
  *((_QWORD *)this + 384) = 0;
  if (v1670)
  {
    v1671 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1671, v1672);
  }
  v1673 = *((_QWORD *)this + 383);
  *((_QWORD *)this + 383) = 0;
  if (v1673)
  {
    v1674 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1674, v1675);
  }
  v1676 = *((_QWORD *)this + 382);
  *((_QWORD *)this + 382) = 0;
  if (v1676)
  {
    v1677 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1677, v1678);
  }
  v1679 = *((_QWORD *)this + 381);
  *((_QWORD *)this + 381) = 0;
  if (v1679)
  {
    v1680 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1680, v1681);
  }
  v1682 = *((_QWORD *)this + 380);
  *((_QWORD *)this + 380) = 0;
  if (v1682)
  {
    v1683 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1683, v1684);
  }
  v1685 = *((_QWORD *)this + 379);
  *((_QWORD *)this + 379) = 0;
  if (v1685)
  {
    v1686 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1686, v1687);
  }
  v1688 = *((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v1688)
  {
    v1689 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1689, v1690);
  }
  v1691 = *((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v1691)
  {
    v1692 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1692, v1693);
  }
  v1694 = *((_QWORD *)this + 376);
  *((_QWORD *)this + 376) = 0;
  if (v1694)
  {
    v1695 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1695, v1696);
  }
  v1697 = *((_QWORD *)this + 375);
  *((_QWORD *)this + 375) = 0;
  if (v1697)
  {
    v1698 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1698, v1699);
  }
  v1700 = *((_QWORD *)this + 374);
  *((_QWORD *)this + 374) = 0;
  if (v1700)
  {
    v1701 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1701, v1702);
  }
  v1703 = *((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v1703)
  {
    v1704 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1704, v1705);
  }
  v1706 = *((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v1706)
  {
    v1707 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1707, v1708);
  }
  v1709 = *((_QWORD *)this + 371);
  *((_QWORD *)this + 371) = 0;
  if (v1709)
  {
    v1710 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1710, v1711);
  }
  v1712 = *((_QWORD *)this + 370);
  *((_QWORD *)this + 370) = 0;
  if (v1712)
  {
    v1713 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1713, v1714);
  }
  v1715 = *((_QWORD *)this + 369);
  *((_QWORD *)this + 369) = 0;
  if (v1715)
  {
    v1716 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1716, v1717);
  }
  v1718 = *((_QWORD *)this + 368);
  *((_QWORD *)this + 368) = 0;
  if (v1718)
  {
    v1719 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1719, v1720);
  }
  v1721 = *((_QWORD *)this + 367);
  *((_QWORD *)this + 367) = 0;
  if (v1721)
  {
    v1722 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1722, v1723);
  }
  v1724 = *((_QWORD *)this + 366);
  *((_QWORD *)this + 366) = 0;
  if (v1724)
  {
    v1725 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1725, v1726);
  }
  v1727 = *((_QWORD *)this + 365);
  *((_QWORD *)this + 365) = 0;
  if (v1727)
  {
    v1728 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1728, v1729);
  }
  v1730 = *((_QWORD *)this + 364);
  *((_QWORD *)this + 364) = 0;
  if (v1730)
  {
    v1731 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1731, v1732);
  }
  v1733 = *((_QWORD *)this + 363);
  *((_QWORD *)this + 363) = 0;
  if (v1733)
  {
    v1734 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1734, v1735);
  }
  v1736 = *((_QWORD *)this + 362);
  *((_QWORD *)this + 362) = 0;
  if (v1736)
  {
    v1737 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1737, v1738);
  }
  v1739 = *((_QWORD *)this + 361);
  *((_QWORD *)this + 361) = 0;
  if (v1739)
  {
    v1740 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1740, v1741);
  }
  v1742 = *((_QWORD *)this + 360);
  *((_QWORD *)this + 360) = 0;
  if (v1742)
  {
    v1743 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1743, v1744);
  }
  v1745 = *((_QWORD *)this + 359);
  *((_QWORD *)this + 359) = 0;
  if (v1745)
  {
    v1746 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1746, v1747);
  }
  v1748 = *((_QWORD *)this + 358);
  *((_QWORD *)this + 358) = 0;
  if (v1748)
  {
    v1749 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1749, v1750);
  }
  v1751 = *((_QWORD *)this + 357);
  *((_QWORD *)this + 357) = 0;
  if (v1751)
  {
    v1752 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1752, v1753);
  }
  v1754 = *((_QWORD *)this + 356);
  *((_QWORD *)this + 356) = 0;
  if (v1754)
  {
    v1755 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1755, v1756);
  }
  v1757 = *((_QWORD *)this + 355);
  *((_QWORD *)this + 355) = 0;
  if (v1757)
  {
    v1758 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1758, v1759);
  }
  v1760 = *((_QWORD *)this + 354);
  *((_QWORD *)this + 354) = 0;
  if (v1760)
  {
    v1761 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1761, v1762);
  }
  v1763 = *((_QWORD *)this + 353);
  *((_QWORD *)this + 353) = 0;
  if (v1763)
  {
    v1764 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1764, v1765);
  }
  v1766 = *((_QWORD *)this + 352);
  *((_QWORD *)this + 352) = 0;
  if (v1766)
  {
    v1767 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1767, v1768);
  }
  v1769 = *((_QWORD *)this + 351);
  *((_QWORD *)this + 351) = 0;
  if (v1769)
  {
    v1770 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1770, v1771);
  }
  v1772 = *((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = 0;
  if (v1772)
  {
    v1773 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1773, v1774);
  }
  v1775 = *((_QWORD *)this + 349);
  *((_QWORD *)this + 349) = 0;
  if (v1775)
  {
    v1776 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1776, v1777);
  }
  v1778 = *((_QWORD *)this + 348);
  *((_QWORD *)this + 348) = 0;
  if (v1778)
  {
    v1779 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1779, v1780);
  }
  v1781 = *((_QWORD *)this + 347);
  *((_QWORD *)this + 347) = 0;
  if (v1781)
  {
    v1782 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1782, v1783);
  }
  v1784 = *((_QWORD *)this + 346);
  *((_QWORD *)this + 346) = 0;
  if (v1784)
  {
    v1785 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1785, v1786);
  }
  v1787 = *((_QWORD *)this + 345);
  *((_QWORD *)this + 345) = 0;
  if (v1787)
  {
    v1788 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1788, v1789);
  }
  v1790 = *((_QWORD *)this + 344);
  *((_QWORD *)this + 344) = 0;
  if (v1790)
  {
    v1791 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1791, v1792);
  }
  v1793 = *((_QWORD *)this + 343);
  *((_QWORD *)this + 343) = 0;
  if (v1793)
  {
    v1794 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1794, v1795);
  }
  v1796 = *((_QWORD *)this + 342);
  *((_QWORD *)this + 342) = 0;
  if (v1796)
  {
    v1797 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1797, v1798);
  }
  v1799 = *((_QWORD *)this + 341);
  *((_QWORD *)this + 341) = 0;
  if (v1799)
  {
    v1800 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1800, v1801);
  }
  v1802 = *((_QWORD *)this + 340);
  *((_QWORD *)this + 340) = 0;
  if (v1802)
  {
    v1803 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1803, v1804);
  }
  v1805 = *((_QWORD *)this + 339);
  *((_QWORD *)this + 339) = 0;
  if (v1805)
  {
    v1806 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1806, v1807);
  }
  v1808 = *((_QWORD *)this + 338);
  *((_QWORD *)this + 338) = 0;
  if (v1808)
  {
    v1809 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1809, v1810);
  }
  v1811 = *((_QWORD *)this + 337);
  *((_QWORD *)this + 337) = 0;
  if (v1811)
  {
    v1812 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1812, v1813);
  }
  v1814 = *((_QWORD *)this + 336);
  *((_QWORD *)this + 336) = 0;
  if (v1814)
  {
    v1815 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1815, v1816);
  }
  v1817 = *((_QWORD *)this + 335);
  *((_QWORD *)this + 335) = 0;
  if (v1817)
  {
    v1818 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1818, v1819);
  }
  v1820 = *((_QWORD *)this + 334);
  *((_QWORD *)this + 334) = 0;
  if (v1820)
  {
    v1821 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1821, v1822);
  }
  v1823 = *((_QWORD *)this + 333);
  *((_QWORD *)this + 333) = 0;
  if (v1823)
  {
    v1824 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1824, v1825);
  }
  v1826 = *((_QWORD *)this + 332);
  *((_QWORD *)this + 332) = 0;
  if (v1826)
  {
    v1827 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1827, v1828);
  }
  v1829 = *((_QWORD *)this + 331);
  *((_QWORD *)this + 331) = 0;
  if (v1829)
  {
    v1830 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1830, v1831);
  }
  v1832 = *((_QWORD *)this + 330);
  *((_QWORD *)this + 330) = 0;
  if (v1832)
  {
    v1833 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1833, v1834);
  }
  v1835 = *((_QWORD *)this + 329);
  *((_QWORD *)this + 329) = 0;
  if (v1835)
  {
    v1836 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1836, v1837);
  }
  v1838 = *((_QWORD *)this + 328);
  *((_QWORD *)this + 328) = 0;
  if (v1838)
  {
    v1839 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1839, v1840);
  }
  v1841 = *((_QWORD *)this + 327);
  *((_QWORD *)this + 327) = 0;
  if (v1841)
  {
    v1842 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1842, v1843);
  }
  v1844 = *((_QWORD *)this + 326);
  *((_QWORD *)this + 326) = 0;
  if (v1844)
  {
    v1845 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1845, v1846);
  }
  v1847 = *((_QWORD *)this + 325);
  *((_QWORD *)this + 325) = 0;
  if (v1847)
  {
    v1848 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1848, v1849);
  }
  v1850 = *((_QWORD *)this + 324);
  *((_QWORD *)this + 324) = 0;
  if (v1850)
  {
    v1851 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1851, v1852);
  }
  v1853 = *((_QWORD *)this + 323);
  *((_QWORD *)this + 323) = 0;
  if (v1853)
  {
    v1854 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1854, v1855);
  }
  v1856 = *((_QWORD *)this + 322);
  *((_QWORD *)this + 322) = 0;
  if (v1856)
  {
    v1857 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1857, v1858);
  }
  v1859 = *((_QWORD *)this + 321);
  *((_QWORD *)this + 321) = 0;
  if (v1859)
  {
    v1860 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1860, v1861);
  }
  v1862 = *((_QWORD *)this + 320);
  *((_QWORD *)this + 320) = 0;
  if (v1862)
  {
    v1863 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1863, v1864);
  }
  v1865 = *((_QWORD *)this + 319);
  *((_QWORD *)this + 319) = 0;
  if (v1865)
  {
    v1866 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1866, v1867);
  }
  v1868 = *((_QWORD *)this + 318);
  *((_QWORD *)this + 318) = 0;
  if (v1868)
  {
    v1869 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1869, v1870);
  }
  v1871 = *((_QWORD *)this + 317);
  *((_QWORD *)this + 317) = 0;
  if (v1871)
  {
    v1872 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1872, v1873);
  }
  v1874 = *((_QWORD *)this + 316);
  *((_QWORD *)this + 316) = 0;
  if (v1874)
  {
    v1875 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1875, v1876);
  }
  v1877 = *((_QWORD *)this + 315);
  *((_QWORD *)this + 315) = 0;
  if (v1877)
  {
    v1878 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1878, v1879);
  }
  v1880 = *((_QWORD *)this + 314);
  *((_QWORD *)this + 314) = 0;
  if (v1880)
  {
    v1881 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1881, v1882);
  }
  v1883 = *((_QWORD *)this + 313);
  *((_QWORD *)this + 313) = 0;
  if (v1883)
  {
    v1884 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1884, v1885);
  }
  v1886 = *((_QWORD *)this + 312);
  *((_QWORD *)this + 312) = 0;
  if (v1886)
  {
    v1887 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1887, v1888);
  }
  v1889 = *((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = 0;
  if (v1889)
  {
    v1890 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1890, v1891);
  }
  v1892 = *((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = 0;
  if (v1892)
  {
    v1893 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1893, v1894);
  }
  v1895 = *((_QWORD *)this + 309);
  *((_QWORD *)this + 309) = 0;
  if (v1895)
  {
    v1896 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1896, v1897);
  }
  v1898 = *((_QWORD *)this + 308);
  *((_QWORD *)this + 308) = 0;
  if (v1898)
  {
    v1899 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1899, v1900);
  }
  v1901 = *((_QWORD *)this + 307);
  *((_QWORD *)this + 307) = 0;
  if (v1901)
  {
    v1902 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1902, v1903);
  }
  v1904 = *((_QWORD *)this + 306);
  *((_QWORD *)this + 306) = 0;
  if (v1904)
  {
    v1905 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1905, v1906);
  }
  v1907 = *((_QWORD *)this + 305);
  *((_QWORD *)this + 305) = 0;
  if (v1907)
  {
    v1908 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1908, v1909);
  }
  v1910 = *((_QWORD *)this + 304);
  *((_QWORD *)this + 304) = 0;
  if (v1910)
  {
    v1911 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1911, v1912);
  }
  v1913 = *((_QWORD *)this + 303);
  *((_QWORD *)this + 303) = 0;
  if (v1913)
  {
    v1914 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1914, v1915);
  }
  v1916 = *((_QWORD *)this + 302);
  *((_QWORD *)this + 302) = 0;
  if (v1916)
  {
    v1917 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1917, v1918);
  }
  v1919 = *((_QWORD *)this + 301);
  *((_QWORD *)this + 301) = 0;
  if (v1919)
  {
    v1920 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1920, v1921);
  }
  v1922 = *((_QWORD *)this + 300);
  *((_QWORD *)this + 300) = 0;
  if (v1922)
  {
    v1923 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1923, v1924);
  }
  v1925 = *((_QWORD *)this + 299);
  *((_QWORD *)this + 299) = 0;
  if (v1925)
  {
    v1926 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1926, v1927);
  }
  v1928 = *((_QWORD *)this + 298);
  *((_QWORD *)this + 298) = 0;
  if (v1928)
  {
    v1929 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1929, v1930);
  }
  v1931 = *((_QWORD *)this + 297);
  *((_QWORD *)this + 297) = 0;
  if (v1931)
  {
    v1932 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1932, v1933);
  }
  v1934 = *((_QWORD *)this + 296);
  *((_QWORD *)this + 296) = 0;
  if (v1934)
  {
    v1935 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1935, v1936);
  }
  v1937 = *((_QWORD *)this + 295);
  *((_QWORD *)this + 295) = 0;
  if (v1937)
  {
    v1938 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1938, v1939);
  }
  v1940 = *((_QWORD *)this + 294);
  *((_QWORD *)this + 294) = 0;
  if (v1940)
  {
    v1941 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1941, v1942);
  }
  v1943 = *((_QWORD *)this + 293);
  *((_QWORD *)this + 293) = 0;
  if (v1943)
  {
    v1944 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1944, v1945);
  }
  v1946 = *((_QWORD *)this + 292);
  *((_QWORD *)this + 292) = 0;
  if (v1946)
  {
    v1947 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1947, v1948);
  }
  v1949 = *((_QWORD *)this + 291);
  *((_QWORD *)this + 291) = 0;
  if (v1949)
  {
    v1950 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1950, v1951);
  }
  v1952 = *((_QWORD *)this + 290);
  *((_QWORD *)this + 290) = 0;
  if (v1952)
  {
    v1953 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1953, v1954);
  }
  v1955 = *((_QWORD *)this + 289);
  *((_QWORD *)this + 289) = 0;
  if (v1955)
  {
    v1956 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1956, v1957);
  }
  v1958 = *((_QWORD *)this + 288);
  *((_QWORD *)this + 288) = 0;
  if (v1958)
  {
    v1959 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1959, v1960);
  }
  v1961 = *((_QWORD *)this + 287);
  *((_QWORD *)this + 287) = 0;
  if (v1961)
  {
    v1962 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1962, v1963);
  }
  v1964 = *((_QWORD *)this + 286);
  *((_QWORD *)this + 286) = 0;
  if (v1964)
  {
    v1965 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1965, v1966);
  }
  v1967 = *((_QWORD *)this + 285);
  *((_QWORD *)this + 285) = 0;
  if (v1967)
  {
    v1968 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1968, v1969);
  }
  v1970 = *((_QWORD *)this + 284);
  *((_QWORD *)this + 284) = 0;
  if (v1970)
  {
    v1971 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1971, v1972);
  }
  v1973 = *((_QWORD *)this + 283);
  *((_QWORD *)this + 283) = 0;
  if (v1973)
  {
    v1974 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1974, v1975);
  }
  v1976 = *((_QWORD *)this + 282);
  *((_QWORD *)this + 282) = 0;
  if (v1976)
  {
    v1977 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1977, v1978);
  }
  v1979 = *((_QWORD *)this + 281);
  *((_QWORD *)this + 281) = 0;
  if (v1979)
  {
    v1980 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1980, v1981);
  }
  v1982 = *((_QWORD *)this + 280);
  *((_QWORD *)this + 280) = 0;
  if (v1982)
  {
    v1983 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1983, v1984);
  }
  v1985 = *((_QWORD *)this + 279);
  *((_QWORD *)this + 279) = 0;
  if (v1985)
  {
    v1986 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1986, v1987);
  }
  v1988 = *((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = 0;
  if (v1988)
  {
    v1989 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1989, v1990);
  }
  v1991 = *((_QWORD *)this + 277);
  *((_QWORD *)this + 277) = 0;
  if (v1991)
  {
    v1992 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1992, v1993);
  }
  v1994 = *((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = 0;
  if (v1994)
  {
    v1995 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1995, v1996);
  }
  v1997 = *((_QWORD *)this + 275);
  *((_QWORD *)this + 275) = 0;
  if (v1997)
  {
    v1998 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v1998, v1999);
  }
  v2000 = *((_QWORD *)this + 274);
  *((_QWORD *)this + 274) = 0;
  if (v2000)
  {
    v2001 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2001, v2002);
  }
  v2003 = *((_QWORD *)this + 273);
  *((_QWORD *)this + 273) = 0;
  if (v2003)
  {
    v2004 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2004, v2005);
  }
  v2006 = *((_QWORD *)this + 272);
  *((_QWORD *)this + 272) = 0;
  if (v2006)
  {
    v2007 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2007, v2008);
  }
  v2009 = *((_QWORD *)this + 271);
  *((_QWORD *)this + 271) = 0;
  if (v2009)
  {
    v2010 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2010, v2011);
  }
  v2012 = *((_QWORD *)this + 270);
  *((_QWORD *)this + 270) = 0;
  if (v2012)
  {
    v2013 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2013, v2014);
  }
  v2015 = *((_QWORD *)this + 269);
  *((_QWORD *)this + 269) = 0;
  if (v2015)
  {
    v2016 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2016, v2017);
  }
  v2018 = *((_QWORD *)this + 268);
  *((_QWORD *)this + 268) = 0;
  if (v2018)
  {
    v2019 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2019, v2020);
  }
  v2021 = *((_QWORD *)this + 267);
  *((_QWORD *)this + 267) = 0;
  if (v2021)
  {
    v2022 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2022, v2023);
  }
  v2024 = *((_QWORD *)this + 266);
  *((_QWORD *)this + 266) = 0;
  if (v2024)
  {
    v2025 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2025, v2026);
  }
  v2027 = *((_QWORD *)this + 265);
  *((_QWORD *)this + 265) = 0;
  if (v2027)
  {
    v2028 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2028, v2029);
  }
  v2030 = *((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = 0;
  if (v2030)
  {
    v2031 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2031, v2032);
  }
  v2033 = *((_QWORD *)this + 263);
  *((_QWORD *)this + 263) = 0;
  if (v2033)
  {
    v2034 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2034, v2035);
  }
  v2036 = *((_QWORD *)this + 262);
  *((_QWORD *)this + 262) = 0;
  if (v2036)
  {
    v2037 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2037, v2038);
  }
  v2039 = *((_QWORD *)this + 261);
  *((_QWORD *)this + 261) = 0;
  if (v2039)
  {
    v2040 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2040, v2041);
  }
  v2042 = *((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = 0;
  if (v2042)
  {
    v2043 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2043, v2044);
  }
  v2045 = *((_QWORD *)this + 259);
  *((_QWORD *)this + 259) = 0;
  if (v2045)
  {
    v2046 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2046, v2047);
  }
  v2048 = *((_QWORD *)this + 258);
  *((_QWORD *)this + 258) = 0;
  if (v2048)
  {
    v2049 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2049, v2050);
  }
  v2051 = *((_QWORD *)this + 257);
  *((_QWORD *)this + 257) = 0;
  if (v2051)
  {
    v2052 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2052, v2053);
  }
  v2054 = *((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = 0;
  if (v2054)
  {
    v2055 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2055, v2056);
  }
  v2057 = *((_QWORD *)this + 255);
  *((_QWORD *)this + 255) = 0;
  if (v2057)
  {
    v2058 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2058, v2059);
  }
  v2060 = *((_QWORD *)this + 254);
  *((_QWORD *)this + 254) = 0;
  if (v2060)
  {
    v2061 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2061, v2062);
  }
  v2063 = *((_QWORD *)this + 253);
  *((_QWORD *)this + 253) = 0;
  if (v2063)
  {
    v2064 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2064, v2065);
  }
  v2066 = *((_QWORD *)this + 252);
  *((_QWORD *)this + 252) = 0;
  if (v2066)
  {
    v2067 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2067, v2068);
  }
  v2069 = *((_QWORD *)this + 251);
  *((_QWORD *)this + 251) = 0;
  if (v2069)
  {
    v2070 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2070, v2071);
  }
  v2072 = *((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = 0;
  if (v2072)
  {
    v2073 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2073, v2074);
  }
  v2075 = *((_QWORD *)this + 249);
  *((_QWORD *)this + 249) = 0;
  if (v2075)
  {
    v2076 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2076, v2077);
  }
  v2078 = *((_QWORD *)this + 248);
  *((_QWORD *)this + 248) = 0;
  if (v2078)
  {
    v2079 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2079, v2080);
  }
  v2081 = *((_QWORD *)this + 247);
  *((_QWORD *)this + 247) = 0;
  if (v2081)
  {
    v2082 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2082, v2083);
  }
  v2084 = *((_QWORD *)this + 246);
  *((_QWORD *)this + 246) = 0;
  if (v2084)
  {
    v2085 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2085, v2086);
  }
  v2087 = *((_QWORD *)this + 245);
  *((_QWORD *)this + 245) = 0;
  if (v2087)
  {
    v2088 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2088, v2089);
  }
  v2090 = *((_QWORD *)this + 244);
  *((_QWORD *)this + 244) = 0;
  if (v2090)
  {
    v2091 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2091, v2092);
  }
  v2093 = *((_QWORD *)this + 243);
  *((_QWORD *)this + 243) = 0;
  if (v2093)
  {
    v2094 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2094, v2095);
  }
  v2096 = *((_QWORD *)this + 242);
  *((_QWORD *)this + 242) = 0;
  if (v2096)
  {
    v2097 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2097, v2098);
  }
  v2099 = *((_QWORD *)this + 241);
  *((_QWORD *)this + 241) = 0;
  if (v2099)
  {
    v2100 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2100, v2101);
  }
  v2102 = *((_QWORD *)this + 240);
  *((_QWORD *)this + 240) = 0;
  if (v2102)
  {
    v2103 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2103, v2104);
  }
  v2105 = *((_QWORD *)this + 239);
  *((_QWORD *)this + 239) = 0;
  if (v2105)
  {
    v2106 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2106, v2107);
  }
  v2108 = *((_QWORD *)this + 238);
  *((_QWORD *)this + 238) = 0;
  if (v2108)
  {
    v2109 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2109, v2110);
  }
  v2111 = *((_QWORD *)this + 237);
  *((_QWORD *)this + 237) = 0;
  if (v2111)
  {
    v2112 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2112, v2113);
  }
  v2114 = *((_QWORD *)this + 236);
  *((_QWORD *)this + 236) = 0;
  if (v2114)
  {
    v2115 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2115, v2116);
  }
  v2117 = *((_QWORD *)this + 235);
  *((_QWORD *)this + 235) = 0;
  if (v2117)
  {
    v2118 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2118, v2119);
  }
  v2120 = *((_QWORD *)this + 234);
  *((_QWORD *)this + 234) = 0;
  if (v2120)
  {
    v2121 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2121, v2122);
  }
  v2123 = *((_QWORD *)this + 233);
  *((_QWORD *)this + 233) = 0;
  if (v2123)
  {
    v2124 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2124, v2125);
  }
  v2126 = *((_QWORD *)this + 232);
  *((_QWORD *)this + 232) = 0;
  if (v2126)
  {
    v2127 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2127, v2128);
  }
  v2129 = *((_QWORD *)this + 231);
  *((_QWORD *)this + 231) = 0;
  if (v2129)
  {
    v2130 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2130, v2131);
  }
  v2132 = *((_QWORD *)this + 230);
  *((_QWORD *)this + 230) = 0;
  if (v2132)
  {
    v2133 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2133, v2134);
  }
  v2135 = *((_QWORD *)this + 229);
  *((_QWORD *)this + 229) = 0;
  if (v2135)
  {
    v2136 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2136, v2137);
  }
  v2138 = *((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = 0;
  if (v2138)
  {
    v2139 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2139, v2140);
  }
  v2141 = *((_QWORD *)this + 227);
  *((_QWORD *)this + 227) = 0;
  if (v2141)
  {
    v2142 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2142, v2143);
  }
  v2144 = *((_QWORD *)this + 226);
  *((_QWORD *)this + 226) = 0;
  if (v2144)
  {
    v2145 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2145, v2146);
  }
  v2147 = *((_QWORD *)this + 225);
  *((_QWORD *)this + 225) = 0;
  if (v2147)
  {
    v2148 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2148, v2149);
  }
  v2150 = *((_QWORD *)this + 224);
  *((_QWORD *)this + 224) = 0;
  if (v2150)
  {
    v2151 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2151, v2152);
  }
  v2153 = *((_QWORD *)this + 223);
  *((_QWORD *)this + 223) = 0;
  if (v2153)
  {
    v2154 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2154, v2155);
  }
  v2156 = *((_QWORD *)this + 222);
  *((_QWORD *)this + 222) = 0;
  if (v2156)
  {
    v2157 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2157, v2158);
  }
  v2159 = *((_QWORD *)this + 221);
  *((_QWORD *)this + 221) = 0;
  if (v2159)
  {
    v2160 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2160, v2161);
  }
  v2162 = *((_QWORD *)this + 220);
  *((_QWORD *)this + 220) = 0;
  if (v2162)
  {
    v2163 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2163, v2164);
  }
  v2165 = *((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = 0;
  if (v2165)
  {
    v2166 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2166, v2167);
  }
  v2168 = *((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = 0;
  if (v2168)
  {
    v2169 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2169, v2170);
  }
  v2171 = *((_QWORD *)this + 217);
  *((_QWORD *)this + 217) = 0;
  if (v2171)
  {
    v2172 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2172, v2173);
  }
  v2174 = *((_QWORD *)this + 216);
  *((_QWORD *)this + 216) = 0;
  if (v2174)
  {
    v2175 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2175, v2176);
  }
  v2177 = *((_QWORD *)this + 215);
  *((_QWORD *)this + 215) = 0;
  if (v2177)
  {
    v2178 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2178, v2179);
  }
  v2180 = *((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = 0;
  if (v2180)
  {
    v2181 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2181, v2182);
  }
  v2183 = *((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = 0;
  if (v2183)
  {
    v2184 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2184, v2185);
  }
  v2186 = *((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v2186)
  {
    v2187 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2187, v2188);
  }
  v2189 = *((_QWORD *)this + 211);
  *((_QWORD *)this + 211) = 0;
  if (v2189)
  {
    v2190 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2190, v2191);
  }
  v2192 = *((_QWORD *)this + 210);
  *((_QWORD *)this + 210) = 0;
  if (v2192)
  {
    v2193 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2193, v2194);
  }
  v2195 = *((_QWORD *)this + 209);
  *((_QWORD *)this + 209) = 0;
  if (v2195)
  {
    v2196 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2196, v2197);
  }
  v2198 = *((_QWORD *)this + 208);
  *((_QWORD *)this + 208) = 0;
  if (v2198)
  {
    v2199 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2199, v2200);
  }
  v2201 = *((_QWORD *)this + 207);
  *((_QWORD *)this + 207) = 0;
  if (v2201)
  {
    v2202 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2202, v2203);
  }
  v2204 = *((_QWORD *)this + 206);
  *((_QWORD *)this + 206) = 0;
  if (v2204)
  {
    v2205 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2205, v2206);
  }
  v2207 = *((_QWORD *)this + 205);
  *((_QWORD *)this + 205) = 0;
  if (v2207)
  {
    v2208 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2208, v2209);
  }
  v2210 = *((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = 0;
  if (v2210)
  {
    v2211 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2211, v2212);
  }
  v2213 = *((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = 0;
  if (v2213)
  {
    v2214 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2214, v2215);
  }
  v2216 = *((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = 0;
  if (v2216)
  {
    v2217 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2217, v2218);
  }
  v2219 = *((_QWORD *)this + 201);
  *((_QWORD *)this + 201) = 0;
  if (v2219)
  {
    v2220 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2220, v2221);
  }
  v2222 = *((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = 0;
  if (v2222)
  {
    v2223 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2223, v2224);
  }
  v2225 = *((_QWORD *)this + 199);
  *((_QWORD *)this + 199) = 0;
  if (v2225)
  {
    v2226 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2226, v2227);
  }
  v2228 = *((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = 0;
  if (v2228)
  {
    v2229 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2229, v2230);
  }
  v2231 = *((_QWORD *)this + 197);
  *((_QWORD *)this + 197) = 0;
  if (v2231)
  {
    v2232 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2232, v2233);
  }
  v2234 = *((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = 0;
  if (v2234)
  {
    v2235 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2235, v2236);
  }
  v2237 = *((_QWORD *)this + 195);
  *((_QWORD *)this + 195) = 0;
  if (v2237)
  {
    v2238 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2238, v2239);
  }
  v2240 = *((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = 0;
  if (v2240)
  {
    v2241 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2241, v2242);
  }
  v2243 = *((_QWORD *)this + 193);
  *((_QWORD *)this + 193) = 0;
  if (v2243)
  {
    v2244 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2244, v2245);
  }
  v2246 = *((_QWORD *)this + 192);
  *((_QWORD *)this + 192) = 0;
  if (v2246)
  {
    v2247 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2247, v2248);
  }
  v2249 = *((_QWORD *)this + 191);
  *((_QWORD *)this + 191) = 0;
  if (v2249)
  {
    v2250 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2250, v2251);
  }
  v2252 = *((_QWORD *)this + 190);
  *((_QWORD *)this + 190) = 0;
  if (v2252)
  {
    v2253 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2253, v2254);
  }
  v2255 = *((_QWORD *)this + 189);
  *((_QWORD *)this + 189) = 0;
  if (v2255)
  {
    v2256 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2256, v2257);
  }
  v2258 = *((_QWORD *)this + 188);
  *((_QWORD *)this + 188) = 0;
  if (v2258)
  {
    v2259 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2259, v2260);
  }
  v2261 = *((_QWORD *)this + 187);
  *((_QWORD *)this + 187) = 0;
  if (v2261)
  {
    v2262 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2262, v2263);
  }
  v2264 = *((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = 0;
  if (v2264)
  {
    v2265 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2265, v2266);
  }
  v2267 = *((_QWORD *)this + 185);
  *((_QWORD *)this + 185) = 0;
  if (v2267)
  {
    v2268 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2268, v2269);
  }
  v2270 = *((_QWORD *)this + 184);
  *((_QWORD *)this + 184) = 0;
  if (v2270)
  {
    v2271 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2271, v2272);
  }
  v2273 = *((_QWORD *)this + 183);
  *((_QWORD *)this + 183) = 0;
  if (v2273)
  {
    v2274 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2274, v2275);
  }
  v2276 = *((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = 0;
  if (v2276)
  {
    v2277 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2277, v2278);
  }
  v2279 = *((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v2279)
  {
    v2280 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2280, v2281);
  }
  v2282 = *((_QWORD *)this + 180);
  *((_QWORD *)this + 180) = 0;
  if (v2282)
  {
    v2283 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2283, v2284);
  }
  v2285 = *((_QWORD *)this + 179);
  *((_QWORD *)this + 179) = 0;
  if (v2285)
  {
    v2286 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2286, v2287);
  }
  v2288 = *((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = 0;
  if (v2288)
  {
    v2289 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2289, v2290);
  }
  v2291 = *((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = 0;
  if (v2291)
  {
    v2292 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2292, v2293);
  }
  v2294 = *((_QWORD *)this + 176);
  *((_QWORD *)this + 176) = 0;
  if (v2294)
  {
    v2295 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2295, v2296);
  }
  v2297 = *((_QWORD *)this + 175);
  *((_QWORD *)this + 175) = 0;
  if (v2297)
  {
    v2298 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2298, v2299);
  }
  v2300 = *((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = 0;
  if (v2300)
  {
    v2301 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2301, v2302);
  }
  v2303 = *((_QWORD *)this + 173);
  *((_QWORD *)this + 173) = 0;
  if (v2303)
  {
    v2304 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2304, v2305);
  }
  v2306 = *((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = 0;
  if (v2306)
  {
    v2307 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2307, v2308);
  }
  v2309 = *((_QWORD *)this + 171);
  *((_QWORD *)this + 171) = 0;
  if (v2309)
  {
    v2310 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2310, v2311);
  }
  v2312 = *((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = 0;
  if (v2312)
  {
    v2313 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2313, v2314);
  }
  v2315 = *((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = 0;
  if (v2315)
  {
    v2316 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2316, v2317);
  }
  v2318 = *((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v2318)
  {
    v2319 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2319, v2320);
  }
  v2321 = *((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = 0;
  if (v2321)
  {
    v2322 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2322, v2323);
  }
  v2324 = *((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v2324)
  {
    v2325 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2325, v2326);
  }
  v2327 = *((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = 0;
  if (v2327)
  {
    v2328 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2328, v2329);
  }
  v2330 = *((_QWORD *)this + 164);
  *((_QWORD *)this + 164) = 0;
  if (v2330)
  {
    v2331 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2331, v2332);
  }
  v2333 = *((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = 0;
  if (v2333)
  {
    v2334 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2334, v2335);
  }
  v2336 = *((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v2336)
  {
    v2337 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2337, v2338);
  }
  v2339 = *((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = 0;
  if (v2339)
  {
    v2340 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2340, v2341);
  }
  v2342 = *((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = 0;
  if (v2342)
  {
    v2343 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2343, v2344);
  }
  v2345 = *((_QWORD *)this + 159);
  *((_QWORD *)this + 159) = 0;
  if (v2345)
  {
    v2346 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2346, v2347);
  }
  v2348 = *((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = 0;
  if (v2348)
  {
    v2349 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2349, v2350);
  }
  v2351 = *((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = 0;
  if (v2351)
  {
    v2352 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2352, v2353);
  }
  v2354 = *((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = 0;
  if (v2354)
  {
    v2355 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2355, v2356);
  }
  v2357 = *((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = 0;
  if (v2357)
  {
    v2358 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2358, v2359);
  }
  v2360 = *((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v2360)
  {
    v2361 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2361, v2362);
  }
  v2363 = *((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = 0;
  if (v2363)
  {
    v2364 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2364, v2365);
  }
  v2366 = *((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = 0;
  if (v2366)
  {
    v2367 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2367, v2368);
  }
  v2369 = *((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = 0;
  if (v2369)
  {
    v2370 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2370, v2371);
  }
  v2372 = *((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v2372)
  {
    v2373 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2373, v2374);
  }
  v2375 = *((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = 0;
  if (v2375)
  {
    v2376 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2376, v2377);
  }
  v2378 = *((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v2378)
  {
    v2379 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2379, v2380);
  }
  v2381 = *((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = 0;
  if (v2381)
  {
    v2382 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2382, v2383);
  }
  v2384 = *((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = 0;
  if (v2384)
  {
    v2385 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2385, v2386);
  }
  v2387 = *((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = 0;
  if (v2387)
  {
    v2388 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2388, v2389);
  }
  v2390 = *((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v2390)
  {
    v2391 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2391, v2392);
  }
  v2393 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v2393)
  {
    v2394 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2394, v2395);
  }
  v2396 = *((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v2396)
  {
    v2397 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2397, v2398);
  }
  v2399 = *((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v2399)
  {
    v2400 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2400, v2401);
  }
  v2402 = *((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v2402)
  {
    v2403 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2403, v2404);
  }
  v2405 = *((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v2405)
  {
    v2406 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2406, v2407);
  }
  v2408 = *((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v2408)
  {
    v2409 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2409, v2410);
  }
  v2411 = *((_QWORD *)this + 137);
  *((_QWORD *)this + 137) = 0;
  if (v2411)
  {
    v2412 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2412, v2413);
  }
  v2414 = *((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v2414)
  {
    v2415 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2415, v2416);
  }
  v2417 = *((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = 0;
  if (v2417)
  {
    v2418 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2418, v2419);
  }
  v2420 = *((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v2420)
  {
    v2421 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2421, v2422);
  }
  v2423 = *((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = 0;
  if (v2423)
  {
    v2424 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2424, v2425);
  }
  v2426 = *((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = 0;
  if (v2426)
  {
    v2427 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2427, v2428);
  }
  v2429 = *((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  if (v2429)
  {
    v2430 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2430, v2431);
  }
  v2432 = *((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v2432)
  {
    v2433 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2433, v2434);
  }
  v2435 = *((_QWORD *)this + 129);
  *((_QWORD *)this + 129) = 0;
  if (v2435)
  {
    v2436 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2436, v2437);
  }
  v2438 = *((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = 0;
  if (v2438)
  {
    v2439 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2439, v2440);
  }
  v2441 = *((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v2441)
  {
    v2442 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2442, v2443);
  }
  v2444 = *((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v2444)
  {
    v2445 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2445, v2446);
  }
  v2447 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0;
  if (v2447)
  {
    v2448 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2448, v2449);
  }
  v2450 = *((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v2450)
  {
    v2451 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2451, v2452);
  }
  v2453 = *((_QWORD *)this + 123);
  *((_QWORD *)this + 123) = 0;
  if (v2453)
  {
    v2454 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2454, v2455);
  }
  v2456 = *((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v2456)
  {
    v2457 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2457, v2458);
  }
  v2459 = *((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v2459)
  {
    v2460 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2460, v2461);
  }
  v2462 = *((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v2462)
  {
    v2463 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2463, v2464);
  }
  v2465 = *((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v2465)
  {
    v2466 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2466, v2467);
  }
  v2468 = *((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v2468)
  {
    v2469 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2469, v2470);
  }
  v2471 = *((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = 0;
  if (v2471)
  {
    v2472 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2472, v2473);
  }
  v2474 = *((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v2474)
  {
    v2475 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2475, v2476);
  }
  v2477 = *((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  if (v2477)
  {
    v2478 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2478, v2479);
  }
  v2480 = *((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v2480)
  {
    v2481 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2481, v2482);
  }
  v2483 = *((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = 0;
  if (v2483)
  {
    v2484 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2484, v2485);
  }
  v2486 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v2486)
  {
    v2487 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2487, v2488);
  }
  v2489 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v2489)
  {
    v2490 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2490, v2491);
  }
  v2492 = *((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = 0;
  if (v2492)
  {
    v2493 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2493, v2494);
  }
  v2495 = *((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v2495)
  {
    v2496 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2496, v2497);
  }
  v2498 = *((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v2498)
  {
    v2499 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2499, v2500);
  }
  v2501 = *((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = 0;
  if (v2501)
  {
    v2502 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2502, v2503);
  }
  v2504 = *((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v2504)
  {
    v2505 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2505, v2506);
  }
  v2507 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v2507)
  {
    v2508 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2508, v2509);
  }
  v2510 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v2510)
  {
    v2511 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2511, v2512);
  }
  v2513 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v2513)
  {
    v2514 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2514, v2515);
  }
  v2516 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v2516)
  {
    v2517 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2517, v2518);
  }
  v2519 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v2519)
  {
    v2520 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2520, v2521);
  }
  v2522 = *((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v2522)
  {
    v2523 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2523, v2524);
  }
  v2525 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v2525)
  {
    v2526 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2526, v2527);
  }
  v2528 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v2528)
  {
    v2529 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2529, v2530);
  }
  v2531 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v2531)
  {
    v2532 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2532, v2533);
  }
  v2534 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v2534)
  {
    v2535 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2535, v2536);
  }
  v2537 = *((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v2537)
  {
    v2538 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2538, v2539);
  }
  v2540 = *((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v2540)
  {
    v2541 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2541, v2542);
  }
  v2543 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v2543)
  {
    v2544 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2544, v2545);
  }
  v2546 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v2546)
  {
    v2547 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2547, v2548);
  }
  v2549 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v2549)
  {
    v2550 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2550, v2551);
  }
  v2552 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v2552)
  {
    v2553 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2553, v2554);
  }
  v2555 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v2555)
  {
    v2556 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2556, v2557);
  }
  v2558 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v2558)
  {
    v2559 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2559, v2560);
  }
  v2561 = *((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v2561)
  {
    v2562 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2562, v2563);
  }
  v2564 = *((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v2564)
  {
    v2565 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2565, v2566);
  }
  v2567 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v2567)
  {
    v2568 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2568, v2569);
  }
  v2570 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v2570)
  {
    v2571 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2571, v2572);
  }
  v2573 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v2573)
  {
    v2574 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2574, v2575);
  }
  v2576 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v2576)
  {
    v2577 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2577, v2578);
  }
  v2579 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v2579)
  {
    v2580 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2580, v2581);
  }
  v2582 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v2582)
  {
    v2583 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2583, v2584);
  }
  v2585 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v2585)
  {
    v2586 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2586, v2587);
  }
  v2588 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v2588)
  {
    v2589 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2589, v2590);
  }
  v2591 = *((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v2591)
  {
    v2592 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2592, v2593);
  }
  v2594 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v2594)
  {
    v2595 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2595, v2596);
  }
  v2597 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v2597)
  {
    v2598 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2598, v2599);
  }
  v2600 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v2600)
  {
    v2601 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2601, v2602);
  }
  v2603 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v2603)
  {
    v2604 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2604, v2605);
  }
  v2606 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v2606)
  {
    v2607 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2607, v2608);
  }
  v2609 = *((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v2609)
  {
    v2610 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2610, v2611);
  }
  v2612 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v2612)
  {
    v2613 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2613, v2614);
  }
  v2615 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v2615)
  {
    v2616 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2616, v2617);
  }
  v2618 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v2618)
  {
    v2619 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2619, v2620);
  }
  v2621 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v2621)
  {
    v2622 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2622, v2623);
  }
  v2624 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v2624)
  {
    v2625 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2625, v2626);
  }
  v2627 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v2627)
  {
    v2628 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2628, v2629);
  }
  v2630 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v2630)
  {
    v2631 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2631, v2632);
  }
  v2633 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v2633)
  {
    v2634 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2634, v2635);
  }
  v2636 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v2636)
  {
    v2637 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2637, v2638);
  }
  v2639 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v2639)
  {
    v2640 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2640, v2641);
  }
  v2642 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v2642)
  {
    v2643 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2643, v2644);
  }
  v2645 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v2645)
  {
    v2646 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2646, v2647);
  }
  v2648 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v2648)
  {
    v2649 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2649, v2650);
  }
  v2651 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v2651)
  {
    v2652 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2652, v2653);
  }
  v2654 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v2654)
  {
    v2655 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2655, v2656);
  }
  v2657 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v2657)
  {
    v2658 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2658, v2659);
  }
  v2660 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v2660)
  {
    v2661 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2661, v2662);
  }
  v2663 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v2663)
  {
    v2664 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2664, v2665);
  }
  v2666 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v2666)
  {
    v2667 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2667, v2668);
  }
  v2669 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v2669)
  {
    v2670 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2670, v2671);
  }
  v2672 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v2672)
  {
    v2673 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2673, v2674);
  }
  v2675 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v2675)
  {
    v2676 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2676, v2677);
  }
  v2678 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v2678)
  {
    v2679 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2679, v2680);
  }
  v2681 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v2681)
  {
    v2682 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2682, v2683);
  }
  v2684 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v2684)
  {
    v2685 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2685, v2686);
  }
  v2687 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v2687)
  {
    v2688 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2688, v2689);
  }
  v2690 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v2690)
  {
    v2691 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2691, v2692);
  }
  v2693 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v2693)
  {
    v2694 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2694, v2695);
  }
  v2696 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v2696)
  {
    v2697 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2697, v2698);
  }
  v2699 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v2699)
  {
    v2700 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2700, v2701);
  }
  v2702 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v2702)
  {
    v2703 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2703, v2704);
  }
  v2705 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v2705)
  {
    v2706 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2706, v2707);
  }
  v2708 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v2708)
  {
    v2709 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2709, v2710);
  }
  v2711 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2711)
  {
    v2712 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2712, v2713);
  }
  v2714 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v2714)
  {
    v2715 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2715, v2716);
  }
  v2717 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v2717)
  {
    v2718 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2718, v2719);
  }
  v2720 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v2720)
  {
    v2721 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2721, v2722);
  }
  v2723 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v2723)
  {
    v2724 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2724, v2725);
  }
  v2726 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v2726)
  {
    v2727 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2727, v2728);
  }
  v2729 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v2729)
  {
    v2730 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2730, v2731);
  }
  v2732 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v2732)
  {
    v2733 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2733, v2734);
  }
  v2735 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v2735)
  {
    v2736 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2736, v2737);
  }
  v2738 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v2738)
  {
    v2739 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2739, v2740);
  }
  v2741 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v2741)
  {
    v2742 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2742, v2743);
  }
  v2744 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v2744)
  {
    v2745 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2745, v2746);
  }
  v2747 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v2747)
  {
    v2748 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2748, v2749);
  }
  v2750 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v2750)
  {
    v2751 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2751, v2752);
  }
  v2753 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v2753)
  {
    v2754 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2754, v2755);
  }
  v2756 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v2756)
  {
    v2757 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2757, v2758);
  }
  v2759 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v2759)
  {
    v2760 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2760, v2761);
  }
  v2762 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v2762)
  {
    v2763 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2763, v2764);
  }
  v2765 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v2765)
  {
    v2766 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2766, v2767);
  }
  v2768 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v2768)
  {
    v2769 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2769, v2770);
  }
  v2771 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v2771)
  {
    v2772 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2772, v2773);
  }
  v2774 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2774)
  {
    v2775 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2775, v2776);
  }
  v2777 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2777)
  {
    v2778 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2778, v2779);
  }
  v2780 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2780)
  {
    v2781 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2781, v2782);
  }
  v2783 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2783)
  {
    v2784 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2784, v2785);
  }
  v2786 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2786)
  {
    v2787 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2787, v2788);
  }
  v2789 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2789)
  {
    v2790 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2790, v2791);
  }
  v2792 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2792)
  {
    v2793 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2793, v2794);
  }
  v2795 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2795)
  {
    v2796 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2796, v2797);
  }
  v2798 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2798)
  {
    v2799 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2799, v2800);
  }
  v2801 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2801)
  {
    v2802 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2802, v2803);
  }
  v2804 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2804)
  {
    v2805 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2805, v2806);
  }
  v2807 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2807)
  {
    v2808 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2808, v2809);
  }
  v2810 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2810)
  {
    v2811 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2811, v2812);
  }
  v2813 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2813)
  {
    v2814 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2814, v2815);
  }
  v2816 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2816)
  {
    v2817 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2817, v2818);
  }
  v2819 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2819)
  {
    v2820 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2820, v2821);
  }
  v2822 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2822)
  {
    v2823 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v2823, v2824);
  }
}

#error "1956FFCD0: too complex function (funcsize=12428)"

uint64_t WTF::HashTable<WebCore::WindowProxy *,WebCore::WindowProxy *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::WindowProxy *>,WTF::HashTraits<WebCore::WindowProxy *>,WTF::HashTraits<WebCore::WindowProxy *>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::WindowProxy *,WebCore::WindowProxy *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::WindowProxy *>,WTF::HashTraits<WebCore::WindowProxy *>,WTF::HashTraits<WebCore::WindowProxy *>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v8;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  if (*(_QWORD *)(a1 + 16 * v6))
  {
    v8 = 1;
    do
      v6 = ((_DWORD)v6 + v8++) & v2;
    while (*(_QWORD *)(a1 + 16 * v6));
  }
  return a1 + 16 * v6;
}

uint64_t *JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2)
  {
    v5 = *a2;
    v3 = (unint64_t)(a2 - 2);
    v4 = v5;
    v6 = (_QWORD *)*a1;
    if (!*a1)
    {
      v7 = **(_QWORD **)((v3 & 0xFFFFFFFFFFFFF000) + 0x10);
      v8 = *(_QWORD **)(v7 + 712);
      if (!v8)
      {
        v15 = **(_QWORD **)((v3 & 0xFFFFFFFFFFFFF000) + 0x10);
        v16 = v4;
        JSC::HandleSet::grow((JSC::HandleSet *)(v7 + 672));
        v7 = v15;
        v4 = v16;
        v8 = *(_QWORD **)(v15 + 712);
      }
      *(_QWORD *)(v7 + 712) = *v8;
      v8[2] = 0;
      v6 = v8 + 2;
      *v8 = 0;
      v8[1] = 0;
      *a1 = (uint64_t)(v8 + 2);
    }
    v9 = (unint64_t)(v6 - 2);
    if ((v4 != 0) != (*v6 != 0))
    {
      if (v4)
      {
        v10 = *(unint64_t **)((v9 & 0xFFFFFFFFFFFFF000) + 0x10);
        v11 = v10[3];
        v10 += 3;
        *(_QWORD *)v9 = v11;
        *(v6 - 1) = v10;
        *v10 = v9;
        *(_QWORD *)(v11 + 8) = v9;
      }
      else
      {
        v14 = *(_QWORD *)v9;
        v13 = (_QWORD *)*(v6 - 1);
        *v13 = *(_QWORD *)v9;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        v6 = (_QWORD *)*a1;
      }
    }
    *v6 = v4;
  }
  else
  {
    JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::clear(a1);
  }
  return a1;
}

uint64_t WebCore::JSTextTrackCue::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSTextTrackCue *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSTextTrackCue *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSTextTrackCue::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::JSWorkerGlobalScopeBase::queueMicrotaskToEventLoop(JSC::JSGlobalObject &,WTF::Ref<JSC::Microtask,WTF::RawPtrTraits<JSC::Microtask>,WTF::DefaultRefDerefTraits<JSC::Microtask>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = (WTF *)a1[1];
  *a1 = &off_1E3394298;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = (_DWORD *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v5)
      {
        if (v5[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        else
          --v5[2];
      }
      v6 = *((_QWORD *)v3 + 1);
      if (v6)
      {
        v7 = (uint64_t *)(v6 - 16);
        v8 = *(_QWORD *)(((v6 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v9 = *(uint64_t **)(v6 - 8);
        if (v9)
        {
          v10 = *v7;
          *v9 = *v7;
          *(_QWORD *)(v10 + 8) = v9;
          *v7 = 0;
          v7[1] = 0;
        }
        *v7 = *(_QWORD *)(v8 + 40);
        *(_QWORD *)(v8 + 40) = v7;
        *((_QWORD *)v3 + 1) = 0;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::JSWorkerGlobalScopeBase::queueMicrotaskToEventLoop(JSC::JSGlobalObject &,WTF::Ref<JSC::Microtask,WTF::RawPtrTraits<JSC::Microtask>,WTF::DefaultRefDerefTraits<JSC::Microtask>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3394298;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = (_DWORD *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v5)
      {
        if (v5[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        else
          --v5[2];
      }
      v6 = *((_QWORD *)v3 + 1);
      if (v6)
      {
        v7 = (uint64_t *)(v6 - 16);
        v8 = *(_QWORD *)(((v6 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v9 = *(uint64_t **)(v6 - 8);
        if (v9)
        {
          v10 = *v7;
          *v9 = *v7;
          *(_QWORD *)(v10 + 8) = v9;
          *v7 = 0;
          v7[1] = 0;
        }
        *v7 = *(_QWORD *)(v8 + 40);
        *(_QWORD *)(v8 + 40) = v7;
        *((_QWORD *)v3 + 1) = 0;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::JSWorkerGlobalScopeBase::queueMicrotaskToEventLoop(JSC::JSGlobalObject &,WTF::Ref<JSC::Microtask,WTF::RawPtrTraits<JSC::Microtask>,WTF::DefaultRefDerefTraits<JSC::Microtask>> &&)::$_0,void>::call(uint64_t a1)
{
  return WebCore::JSMicrotaskCallback::call(*(WebCore::JSMicrotaskCallback **)(a1 + 8));
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::DOMWrapperWorld **v11;
  WebCore::DOMWrapperWorld *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WebCore::DOMWrapperWorld *v33;
  WebCore::DOMWrapperWorld *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  WTF *v52;
  void *v53;
  WTF *v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = (WebCore::DOMWrapperWorld **)(v4 + 16 * v9);
      v12 = *v11;
      if (*v11 != (WebCore::DOMWrapperWorld *)-1)
      {
        if (v12)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)v12);
          v24 = 0;
          do
          {
            v25 = v23 & v22;
            v23 = ++v24 + v25;
          }
          while (*(_QWORD *)(v21 + 16 * v25));
          v26 = v21 + 16 * v25;
          v28 = (_QWORD *)(v26 + 8);
          v27 = *(_QWORD *)(v26 + 8);
          if (v27)
          {
            v29 = (uint64_t *)(v27 - 16);
            v30 = *(_QWORD *)(((v27 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v31 = *(uint64_t **)(v27 - 8);
            if (v31)
            {
              v32 = *v29;
              *v31 = *v29;
              *(_QWORD *)(v32 + 8) = v31;
              *v29 = 0;
              v29[1] = 0;
            }
            *v29 = *(_QWORD *)(v30 + 40);
            *(_QWORD *)(v30 + 40) = v29;
            v33 = *(WebCore::DOMWrapperWorld **)v26;
            *(_QWORD *)v26 = 0;
            *(_QWORD *)(v26 + 8) = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 1)
              {
                WebCore::DOMWrapperWorld::~DOMWrapperWorld(v33, v8);
                WTF::fastFree(v54, v55);
              }
              else
              {
                --*(_DWORD *)v33;
              }
            }
          }
          else
          {
            *(_QWORD *)v26 = 0;
          }
          v34 = *v11;
          *v11 = 0;
          *(_QWORD *)v26 = v34;
          v35 = v4 + 16 * v9;
          *v28 = 0;
          v38 = *(_QWORD *)(v35 + 8);
          v37 = (_QWORD **)(v35 + 8);
          v36 = v38;
          if (v38)
          {
            v39 = (v36 - 16) & 0xFFFFFFFFFFFFF000;
            v40 = *(_QWORD *)(v39 + 16);
            v41 = *(_QWORD **)(v40 + 40);
            if (!v41)
            {
              JSC::HandleSet::grow(*(JSC::HandleSet **)(v39 + 16));
              v41 = *(_QWORD **)(v40 + 40);
            }
            *(_QWORD *)(v40 + 40) = *v41;
            v41[2] = 0;
            v42 = v41 + 2;
            *v41 = 0;
            v41[1] = 0;
            *v28 = v41 + 2;
            v43 = *v37;
            if (*v37)
              v43 = (_QWORD *)*v43;
            v44 = (unint64_t)(v42 - 2);
            if ((v43 != 0) != (*v42 != 0))
            {
              if (v43)
              {
                v45 = *(unint64_t **)((v44 & 0xFFFFFFFFFFFFF000) + 0x10);
                v46 = v45[3];
                v45 += 3;
                *(_QWORD *)v44 = v46;
                *(v42 - 1) = v45;
                *v45 = v44;
                *(_QWORD *)(v46 + 8) = v44;
              }
              else
              {
                v57 = *(_QWORD *)v44;
                v56 = (_QWORD *)*(v42 - 1);
                *v56 = *(_QWORD *)v44;
                *(_QWORD *)(v57 + 8) = v56;
                *(_QWORD *)v44 = 0;
                *(_QWORD *)(v44 + 8) = 0;
                v42 = (_QWORD *)*v28;
              }
            }
            *v42 = v43;
            v47 = *v37;
            if (*v37)
            {
              v48 = v47 - 2;
              v49 = *(_QWORD *)(((unint64_t)(v47 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v50 = (uint64_t *)*(v47 - 1);
              if (v50)
              {
                v51 = *v48;
                *v50 = *v48;
                *(_QWORD *)(v51 + 8) = v50;
                *v48 = 0;
                v48[1] = 0;
              }
              *v48 = *(_QWORD *)(v49 + 40);
              *(_QWORD *)(v49 + 40) = v48;
              *v37 = 0;
            }
          }
          v12 = *v11;
          *v11 = 0;
          if (!v12)
            goto LABEL_42;
          if (*(_DWORD *)v12 == 1)
            goto LABEL_44;
          --*(_DWORD *)v12;
        }
        else
        {
          v13 = v4 + 16 * v9;
          v16 = *(_QWORD *)(v13 + 8);
          v14 = (_QWORD *)(v13 + 8);
          v15 = v16;
          if (v16)
          {
            v17 = (uint64_t *)(v15 - 16);
            v18 = *(_QWORD *)(((v15 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v19 = *(uint64_t **)(v15 - 8);
            if (v19)
            {
              v20 = *v17;
              *v19 = *v17;
              *(_QWORD *)(v20 + 8) = v19;
              *v17 = 0;
              v17[1] = 0;
            }
            *v17 = *(_QWORD *)(v18 + 40);
            *(_QWORD *)(v18 + 40) = v17;
            *v14 = 0;
            v12 = *v11;
          }
          *v11 = 0;
          if (!v12)
            goto LABEL_42;
          if (*(_DWORD *)v12 == 1)
          {
LABEL_44:
            WebCore::DOMWrapperWorld::~DOMWrapperWorld(v12, v8);
            WTF::fastFree(v52, v53);
            goto LABEL_42;
          }
          --*(_DWORD *)v12;
        }
      }
LABEL_42:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

WebCore::DOMWrapperWorld *WTF::GenericHashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>::assignToEmpty<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>(WebCore::DOMWrapperWorld **a1, WTF::StringImpl *a2)
{
  WebCore::DOMWrapperWorld *v3;
  WebCore::DOMWrapperWorld *result;
  WTF *v5;
  void *v6;

  v3 = *(WebCore::DOMWrapperWorld **)a2;
  *(_QWORD *)a2 = 0;
  result = *a1;
  *a1 = v3;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(result, a2);
      return (WebCore::DOMWrapperWorld *)WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptController::setupModuleScriptHandlers(WebCore::LoadableModuleScript &,JSC::JSInternalPromise &,WebCore::DOMWrapperWorld &)::$_0,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33942C0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptController::setupModuleScriptHandlers(WebCore::LoadableModuleScript &,JSC::JSInternalPromise &,WebCore::DOMWrapperWorld &)::$_0,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33942C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptController::setupModuleScriptHandlers(WebCore::LoadableModuleScript &,JSC::JSInternalPromise &,WebCore::DOMWrapperWorld &)::$_0,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::call(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v4 = *((_QWORD *)a2 + 7);
  if (*(_DWORD *)(a3 + 32) == 1)
  {
    v5 = 10;
  }
  else
  {
    v5 = *(_QWORD *)(a3 + 48);
    if ((v5 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v5 + 5) == 4)
    {
      v6 = *(WTF::StringImpl **)(v5 + 8);
      v7 = *(_DWORD *)v6;
      *(_DWORD *)v6 += 4;
      v8 = v7 + 2;
      if (!v8)
      {
        v9 = v6;
LABEL_42:
        WTF::StringImpl::destroy(v9, a2);
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  v6 = *(WTF::StringImpl **)(v5 + 8);
  if ((v6 & 1) == 0)
  {
    if ((*((_BYTE *)v6 + 16) & 0x10) == 0)
    {
      v14 = *(WTF::StringImpl **)(v4 + 64768);
      if (v14 != v6)
      {
        *(_DWORD *)v6 += 2;
        *(_QWORD *)(v4 + 64768) = v6;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
          {
            v25 = v5;
            WTF::StringImpl::destroy(v14, a2);
            v5 = v25;
          }
          else
          {
            *(_DWORD *)v14 -= 2;
          }
        }
        v15 = *(WTF::StringImpl **)(v5 + 8);
        if (v15)
        {
          if ((*((_BYTE *)v15 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v15 += 2;
          }
          else
          {
            v24 = v5;
            WTF::AtomStringImpl::addSlowCase(*(WTF::AtomStringImpl **)(v5 + 8), a2);
            v5 = v24;
            v15 = v27;
          }
        }
        v16 = *(WTF::StringImpl **)(v4 + 64776);
        *(_QWORD *)(v4 + 64776) = v15;
        if (v16)
        {
          v26 = v5;
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, a2);
          else
            *(_DWORD *)v16 -= 2;
          v5 = v26;
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v5 + 8) + 16) & 0x10) == 0)
      {
        v17 = *(_DWORD **)(v4 + 64776);
        *v17 += 2;
        __dmb(0xAu);
        v18 = *(WTF::StringImpl **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = v17;
        v27 = v18;
        v19 = (_QWORD *)(v4 + 808);
        v20 = *(unsigned int *)(v4 + 820);
        if ((_DWORD)v20 == *(_DWORD *)(v4 + 816))
        {
          v22 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v27);
          v20 = *(unsigned int *)(v4 + 820);
          v21 = (WTF::StringImpl **)(*(_QWORD *)(v4 + 808) + 8 * v20);
          v18 = *v22;
        }
        else
        {
          v21 = (WTF::StringImpl **)(*v19 + 8 * v20);
          v22 = &v27;
        }
        *v22 = 0;
        *v21 = v18;
        *(_DWORD *)(v4 + 820) = v20 + 1;
        v23 = v27;
        v27 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, a2);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
      v6 = *(WTF::StringImpl **)(v4 + 64776);
    }
    v8 = *(_DWORD *)v6 + 2;
LABEL_10:
    *(_DWORD *)v6 = v8;
    goto LABEL_11;
  }
  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v5, a2);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
  {
    v6 = 0;
    v9 = v27;
    v27 = 0;
    if (!v9)
      goto LABEL_11;
  }
  else
  {
    v6 = v27;
    if (!v27)
      goto LABEL_11;
    *(_DWORD *)v27 += 2;
    v27 = 0;
    v9 = v6;
  }
  if (*(_DWORD *)v9 == 2)
    goto LABEL_42;
  *(_DWORD *)v9 -= 2;
LABEL_11:
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
  {
    v12 = 0;
    if (!v6)
      return v12;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)v6 += 2;
    v11 = *(WTF::StringImpl **)(v10 + 80);
    *(_QWORD *)(v10 + 80) = v6;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    *(_BYTE *)(v10 + 137) = 1;
    WebCore::LoadableScript::notifyClientFinished((WebCore::LoadableScript *)v10, a2);
    v12 = 10;
  }
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, a2);
  else
    *(_DWORD *)v6 -= 2;
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptController::setupModuleScriptHandlers(WebCore::LoadableModuleScript &,JSC::JSInternalPromise &,WebCore::DOMWrapperWorld &)::$_1,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33942E8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptController::setupModuleScriptHandlers(WebCore::LoadableModuleScript &,JSC::JSInternalPromise &,WebCore::DOMWrapperWorld &)::$_1,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33942E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptController::setupModuleScriptHandlers(WebCore::LoadableModuleScript &,JSC::JSInternalPromise &,WebCore::DOMWrapperWorld &)::$_1,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::call(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  char v11;
  WebCore::LoadableScript *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  unint64_t *v15;
  char v16;
  _QWORD *v17;
  unint64_t v18;
  void *v19;
  WTF::StringImpl *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::LoadableScript *v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  WebCore::LoadableScript *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  _QWORD *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  __int16 v43;
  WTF::StringImpl *v44;
  char v45;
  _QWORD *v46;
  JSC::VM *v47;

  v5 = (_QWORD *)*((_QWORD *)a2 + 7);
  if (*(_DWORD *)(a3 + 32) == 1)
  {
    v11 = 0;
    v47 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v6 = 10;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 48);
    v47 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v6 & 0xFFFE000000000002) != 0)
    {
      v11 = 0;
    }
    else
    {
      if (*(unsigned __int8 *)(v6 + 5) >= 0x17u)
      {
        v7 = *(_QWORD *)(v5[5182] + 19776);
        if ((v7 >> 4))
        {
          if (((v7 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x20)) == 0)
          {
            v8 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE)), (JSC::VM *)v5);
            if (v8)
            {
              v42 = v7;
              v9 = JSC::PropertyTable::get(v8, (uint64_t *)&v42);
              if ((_DWORD)v9 != -1)
              {
                if ((int)v9 > 63)
                {
                  v28 = *(_QWORD *)(v6 + 8) - 8;
                  v29 = 0x3F00000000 - (v9 << 32);
                }
                else
                {
                  v28 = v6 + 16;
                  v29 = v9 << 32;
                }
                v30 = *(_QWORD *)(v28 + (v29 >> 29));
                if (v30)
                {
                  switch((int)v30)
                  {
                    case 0:
                      v31 = *(WebCore::LoadableScript **)(a1 + 8);
                      LOBYTE(v42) = 0;
                      LOBYTE(v43) = 0;
                      v45 = 0;
                      v46 = 0;
                      std::optional<WebCore::LoadableScriptError>::operator=[abi:sn180100]<WebCore::LoadableScriptError,void>((uint64_t)v31 + 88, (uint64_t)&v42);
                      *((_BYTE *)v31 + 137) = 1;
                      WebCore::LoadableScript::notifyClientFinished(v31, v32);
                      if (v46)
                      {
                        v33 = v46 - 2;
                        v34 = *(_QWORD *)(((unint64_t)(v46 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                        v35 = (uint64_t *)*(v46 - 1);
                        if (v35)
                        {
                          v36 = *v33;
                          *v35 = *v33;
                          *(_QWORD *)(v36 + 8) = v35;
                          *v33 = 0;
                          v33[1] = 0;
                        }
                        *v33 = *(_QWORD *)(v34 + 40);
                        *(_QWORD *)(v34 + 40) = v33;
                        v46 = 0;
                      }
                      if (v45)
                      {
                        v26 = v44;
                        v44 = 0;
                        if (v26)
                          goto LABEL_26;
                      }
                      break;
                    case 1:
                      v37 = *(WebCore::LoadableScript **)(a1 + 8);
                      *((_WORD *)v37 + 68) = 257;
                      WebCore::LoadableScript::notifyClientFinished(v37, v10);
                      break;
                    case 2:
                      v12 = *(WebCore::LoadableScript **)(a1 + 8);
                      LOBYTE(v42) = 0;
                      WebCore::retrieveErrorMessage(a2, v6, (uint64_t)v5, &v47, &v41);
                      v43 = 513;
                      v38 = v41;
                      v41 = 0;
                      v44 = v38;
                      v45 = 1;
                      v46 = 0;
                      std::optional<WebCore::LoadableScriptError>::operator=[abi:sn180100]<WebCore::LoadableScriptError,void>((uint64_t)v12 + 88, (uint64_t)&v42);
                      *((_BYTE *)v12 + 137) = 1;
                      goto LABEL_17;
                    case 3:
                      v12 = *(WebCore::LoadableScript **)(a1 + 8);
                      LOBYTE(v42) = 5;
                      WebCore::retrieveErrorMessage(a2, v6, (uint64_t)v5, &v47, &v41);
                      v43 = 513;
                      v39 = v41;
                      v41 = 0;
                      v44 = v39;
                      v45 = 1;
                      v40 = (_QWORD *)v5[89];
                      if (!v40)
                      {
                        JSC::HandleSet::grow((JSC::HandleSet *)(v5 + 84));
                        v40 = (_QWORD *)v5[89];
                      }
                      v5[89] = *v40;
                      v40[2] = 0;
                      v15 = v40 + 2;
                      *v40 = 0;
                      v40[1] = 0;
                      v46 = v40 + 2;
                      if (!v6)
                        goto LABEL_16;
                      goto LABEL_15;
                    default:
                      return 10;
                  }
                  return 10;
                }
              }
            }
          }
        }
      }
      v11 = 1;
    }
  }
  v12 = *(WebCore::LoadableScript **)(a1 + 8);
  LOBYTE(v42) = 6;
  WebCore::retrieveErrorMessage(a2, v6, (uint64_t)v5, &v47, &v41);
  v43 = 513;
  v13 = v41;
  v41 = 0;
  v44 = v13;
  v45 = 1;
  v14 = (_QWORD *)v5[89];
  if (!v14)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v5 + 84));
    v14 = (_QWORD *)v5[89];
  }
  v5[89] = *v14;
  v14[2] = 0;
  v15 = v14 + 2;
  *v14 = 0;
  v14[1] = 0;
  v46 = v14 + 2;
  v16 = v11 ^ 1;
  if (!v6)
    v16 = 1;
  if ((v16 & 1) == 0)
  {
LABEL_15:
    v17 = *(_QWORD **)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v18 = v17[3];
    v17 += 3;
    *(v15 - 2) = v18;
    *(v15 - 1) = (unint64_t)v17;
    *v17 = v15 - 2;
    *(_QWORD *)(v18 + 8) = v15 - 2;
  }
LABEL_16:
  *v15 = v6;
  std::optional<WebCore::LoadableScriptError>::operator=[abi:sn180100]<WebCore::LoadableScriptError,void>((uint64_t)v12 + 88, (uint64_t)&v42);
  *((_BYTE *)v12 + 137) = 1;
LABEL_17:
  WebCore::LoadableScript::notifyClientFinished(v12, v19);
  if (v46)
  {
    v21 = v46 - 2;
    v22 = *(_QWORD *)(((unint64_t)(v46 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v23 = (uint64_t *)*(v46 - 1);
    if (v23)
    {
      v24 = *v21;
      *v23 = *v21;
      *(_QWORD *)(v24 + 8) = v23;
      *v21 = 0;
      v21[1] = 0;
    }
    *v21 = *(_QWORD *)(v22 + 40);
    *(_QWORD *)(v22 + 40) = v21;
    v46 = 0;
  }
  if (v45)
  {
    v25 = v44;
    v44 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v20);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  v26 = v41;
  v41 = 0;
  if (v26)
  {
LABEL_26:
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v20);
    else
      *(_DWORD *)v26 -= 2;
  }
  return 10;
}

uint64_t WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v11);
          v17 = 0;
          do
          {
            v18 = v16 & v15;
            v16 = ++v17 + v18;
          }
          while (*(_QWORD *)(v14 + 16 * v18));
          v19 = (uint64_t *)(v14 + 16 * v18);
          v20 = (_DWORD *)v19[1];
          v19[1] = 0;
          if (v20)
          {
            if (v20[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
            else
              --v20[2];
          }
          *v19 = *v10;
          v21 = v4 + 16 * v9;
          v22 = *(_QWORD *)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          v19[1] = v22;
          v13 = *(_DWORD **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (!v13)
            goto LABEL_21;
          if (v13[2] == 1)
          {
LABEL_23:
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
            goto LABEL_21;
          }
          --v13[2];
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(_DWORD **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            if (v13[2] == 1)
              goto LABEL_23;
            --v13[2];
          }
        }
      }
LABEL_21:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptController::executeScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&)::$_0,void,WebCore::UserGestureToken &>::call(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E3394338;
  v5 = v3;
  WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(a2 + 48), &v5);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WebCore::LocalDOMWindow *WTF::Detail::CallableWrapper<WebCore::ScriptController::executeScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&)::$_0::operator() const(WebCore::UserGestureToken &)::{lambda(WebCore::Document &)#1},void,WebCore::Document>::call(uint64_t a1, uint64_t a2)
{
  WebCore::LocalDOMWindow *result;

  result = *(WebCore::LocalDOMWindow **)(a2 + 696);
  if (result)
    return (WebCore::LocalDOMWindow *)WebCore::LocalDOMWindow::consumeTransientActivation(result);
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int8x16_t **a2, uint64_t *a3, int8x16_t **a4)
{
  uint64_t v7;
  uint64_t v8;
  char *result;
  int8x16_t *v10;
  int8x16_t *v11;
  uint64_t v12;
  int8x16_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  char *v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int16 v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;

  v7 = *a3;
  v8 = *((_QWORD *)a1 + 1);
  if ((v8 || (v8 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v8 + 16) & 4) == 0 || v7 && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v10 = *a2;
      v11 = a2[1];
      v12 = *a3;
      v13 = *a4;
      v14 = *((unsigned int *)a4 + 2);
      v15 = &result[2 * v11];
      v16 = v11 & 0xFFFFFFC0;
      if (v16)
      {
        v17 = &result[2 * v16];
        v18 = 0uLL;
        do
        {
          v51.val[0] = *v10;
          v19 = v10[1];
          v54.val[0] = v10[2];
          v20 = v10[3];
          v10 += 4;
          v21 = v20;
          v54.val[1] = 0uLL;
          v57.val[0] = v19;
          v51.val[1] = 0uLL;
          v22 = result;
          vst2q_s8(v22, v51);
          v22 += 32;
          v57.val[1] = 0uLL;
          vst2q_s8(v22, v57);
          v23 = result + 64;
          vst2q_s8(v23, v54);
          v24 = result + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
          result += 128;
        }
        while (result != v17);
        result = v17;
      }
      while (result != v15)
      {
        v25 = v10->u8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)result = v25;
        result += 2;
      }
      if (v12)
      {
        v26 = *(int8x16_t **)(v12 + 8);
        v27 = *(unsigned int *)(v12 + 4);
        if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        {
          v28 = &v15[2 * v27];
          if (v27 >= 0x40)
          {
            v29 = &v15[2 * (v27 & 0xFFFFFFC0)];
            v31 = 0uLL;
            v32 = v15;
            do
            {
              v52.val[0] = *v26;
              v33 = v26[1];
              v55.val[0] = v26[2];
              v34 = v26[3];
              v26 += 4;
              v35 = v34;
              v55.val[1] = 0uLL;
              v58.val[0] = v33;
              v52.val[1] = 0uLL;
              v36 = v32;
              vst2q_s8(v36, v52);
              v36 += 32;
              v58.val[1] = 0uLL;
              vst2q_s8(v36, v58);
              v37 = v32 + 64;
              vst2q_s8(v37, v55);
              v38 = v32 + 96;
              vst2q_s8(v38, *(int8x16x2_t *)(&v31 - 1));
              v32 += 128;
            }
            while (v32 != v29);
          }
          else
          {
            v29 = v15;
          }
          while (v29 != v28)
          {
            v39 = v26->u8[0];
            v26 = (int8x16_t *)((char *)v26 + 1);
            *(_WORD *)v29 = v39;
            v29 += 2;
          }
        }
        else if ((_DWORD)v27 == 1)
        {
          *(_WORD *)v15 = v26->i16[0];
        }
        else if ((_DWORD)v27)
        {
          result = (char *)memcpy(v15, v26, 2 * v27);
        }
        v30 = *(unsigned int *)(v12 + 4);
      }
      else
      {
        v30 = 0;
      }
      v40 = &v15[2 * v30];
      v41 = &v40[2 * v14];
      if ((v14 & 0xFFFFFFC0) != 0)
      {
        v42 = &v40[2 * (v14 & 0xFFFFFFC0)];
        v43 = 0uLL;
        do
        {
          v53.val[0] = *v13;
          v44 = v13[1];
          v56.val[0] = v13[2];
          v45 = v13[3];
          v13 += 4;
          v46 = v45;
          v56.val[1] = 0uLL;
          v59.val[0] = v44;
          v53.val[1] = 0uLL;
          v47 = v40;
          vst2q_s8(v47, v53);
          v47 += 32;
          v59.val[1] = 0uLL;
          vst2q_s8(v47, v59);
          v48 = v40 + 64;
          vst2q_s8(v48, v56);
          v49 = v40 + 96;
          vst2q_s8(v49, *(int8x16x2_t *)(&v43 - 1));
          v40 += 128;
        }
        while (v40 != v42);
        v40 = v42;
      }
      while (v40 != v41)
      {
        v50 = v13->u8[0];
        v13 = (int8x16_t *)((char *)v13 + 1);
        *(_WORD *)v40 = v50;
        v40 += 2;
      }
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
      return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, *a2, a2[1], *a3, *a4, a4[1]);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a3 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(a2 + 24) = v5;
}

uint64_t WTF::SharedTaskFunctor<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>),WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_0>::~SharedTaskFunctor(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>),WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_0>::~SharedTaskFunctor(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::SharedTaskFunctor<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>),WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_0>::run(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BYTE v4[32];
  int v5;
  _BYTE v6[32];
  int v7;
  char v8;

  v2 = (uint64_t *)(result + 16);
  v4[0] = 0;
  v5 = -1;
  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 == -1)
  {
    if (*v2)
    {
      v6[0] = 0;
      v7 = -1;
      goto LABEL_6;
    }
LABEL_10:
    *v2 = 0;
    goto LABEL_11;
  }
  result = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))off_1E3394350[v3])(v6, v4, a2);
  v5 = v3;
  if (!*v2)
    goto LABEL_10;
  v6[0] = 0;
  v7 = -1;
  ((void (*)(char *, _BYTE *, _BYTE *))off_1E3393C08[v3])(&v8, v6, v4);
  v7 = v3;
LABEL_6:
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)>::operator()(v2, (uint64_t)v6);
  if (v7 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v7])(&v8, v6);
  v7 = -1;
  result = *v2;
  *v2 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
LABEL_11:
  if (v5 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5])(v6, v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_1,long long,std::experimental::fundamentals_v3::expected::JSGlobalObject *,std::experimental::fundamentals_v3::expected::CallFrame *>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3394398;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_1,long long,std::experimental::fundamentals_v3::expected::JSGlobalObject *,std::experimental::fundamentals_v3::expected::CallFrame *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3394398;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_1,long long,std::experimental::fundamentals_v3::expected::JSGlobalObject *,std::experimental::fundamentals_v3::expected::CallFrame *>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  int v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a3 + 32) == 1)
    v4 = 10;
  else
    v4 = *(_QWORD *)(a3 + 48);
  v6[0] = v4;
  v7 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v6);
  if (v7 != -1)
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v7])(&v8, v6);
  return 10;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_2,long long,std::experimental::fundamentals_v3::expected::JSGlobalObject *,std::experimental::fundamentals_v3::expected::CallFrame *>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E33943C0;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_2,long long,std::experimental::fundamentals_v3::expected::JSGlobalObject *,std::experimental::fundamentals_v3::expected::CallFrame *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33943C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_2,long long,std::experimental::fundamentals_v3::expected::JSGlobalObject *,std::experimental::fundamentals_v3::expected::CallFrame *>::call(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  char v13;
  WTF::StringImpl *v14;
  _QWORD v15[2];
  char v16;
  uint64_t v17;
  int v18;
  char v19;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a3 + 32) == 1)
  {
    v10 = 10;
LABEL_9:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v10, a2);
    v5 = v11;
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(a3 + 48);
  v10 = v4;
  if ((v4 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v4 + 5) != 2)
    goto LABEL_9;
  v5 = *(WTF::StringImpl **)(v4 + 8);
  if ((v5 & 1) == 0)
  {
    if (!v5)
      goto LABEL_10;
    goto LABEL_6;
  }
  v5 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v4, a2);
  if (v5)
LABEL_6:
    *(_DWORD *)v5 += 2;
LABEL_10:
  v13 = 0;
  v11 = 0;
  v12 = 0;
  v16 = 0;
  v14 = 0;
  v15[0] = v5;
  v15[1] = 0;
  v17 = 0;
  v18 = 1;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v15);
  if (v18 != -1)
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v18])(&v19, v15);
  v18 = -1;
  v7 = v14;
  v14 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return 10;
}

uint64_t WTF::SharedTaskFunctor<void ()(void),WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_3>::~SharedTaskFunctor(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    MEMORY[0x19AEA7644](v2, 0x1000C4052888210);
  v3 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(void),WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_3>::~SharedTaskFunctor(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    MEMORY[0x19AEA7644](v3, 0x1000C4052888210);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::SharedTaskFunctor<void ()(void),WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_3>::run(uint64_t result)
{
  int *v1;
  int v2;
  uint64_t v3;
  _QWORD v4[2];
  char v5;
  uint64_t v6;
  int v7;
  char v8;

  v1 = *(int **)(result + 24);
  v2 = *v1 + 1;
  *v1 = v2;
  if (v2 == 2)
  {
    v3 = *(_QWORD *)(result + 16);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 0;
    v4[1] = 0;
    v5 = 0;
    v7 = 1;
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v4);
    if (v7 != -1)
      return ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v7])(&v8, v4);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_4,void,std::experimental::fundamentals_v3::expected::JSCell *>::~CallableWrapper(_QWORD *result)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;

  v1 = (unsigned int *)result[1];
  *result = off_1E3394410;
  result[1] = 0;
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v1 + 2);
      v5 = result;
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
      return v5;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_4,void,std::experimental::fundamentals_v3::expected::JSCell *>::~CallableWrapper(WTF *a1, void *a2)
{
  unsigned int *v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;

  v2 = (unsigned int *)*((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = off_1E3394410;
  *((_QWORD *)a1 + 1) = 0;
  if (v2)
  {
    v4 = v2 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v2 + 2);
      v7 = a1;
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      a1 = v7;
    }
  }
  return WTF::fastFree(a1, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_4,void,std::experimental::fundamentals_v3::expected::JSCell *>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_5,void,std::experimental::fundamentals_v3::expected::JSCell *>::~CallableWrapper(_QWORD *result)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;

  v1 = (unsigned int *)result[1];
  *result = off_1E3394438;
  result[1] = 0;
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v1 + 2);
      v5 = result;
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
      return v5;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_5,void,std::experimental::fundamentals_v3::expected::JSCell *>::~CallableWrapper(WTF *a1, void *a2)
{
  unsigned int *v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;

  v2 = (unsigned int *)*((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = off_1E3394438;
  *((_QWORD *)a1 + 1) = 0;
  if (v2)
  {
    v4 = v2 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v2 + 2);
      v7 = a1;
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      a1 = v7;
    }
  }
  return WTF::fastFree(a1, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_5,void,std::experimental::fundamentals_v3::expected::JSCell *>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

_DWORD *WTF::HashTable<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>>::add(_DWORD *result, uint64_t *a2, _QWORD *a3)
{
  _DWORD *v5;
  uint64_t v6;
  char v7;
  int v8;
  _QWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  _QWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = (_DWORD *)*a3;
  v11 = ~(*a3 << 32) + *a3;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (_QWORD *)(v6 + 8 * v16);
    v18 = (_DWORD *)*v17;
    if (!*v17)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*a2 - 16);
        v10 = (_DWORD *)*a3;
        v17 = v9;
      }
      *a3 = 0;
      result = (_DWORD *)*v17;
      *v17 = v10;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      v19 = *a2;
      if (*a2)
        v20 = *(_DWORD *)(v19 - 12) + 1;
      else
        v20 = 1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *a2;
      if (*a2)
        v22 = *(_DWORD *)(v21 - 12);
      else
        v22 = 0;
      v23 = (*(_DWORD *)(v21 - 16) + v22);
      v24 = *(unsigned int *)(v21 - 4);
      if (v24 > 0x400)
      {
        if (v24 > 2 * v23)
          goto LABEL_17;
      }
      else
      {
        if (3 * v24 > 4 * v23)
        {
LABEL_17:
          v25 = v21 + 8 * v24;
          v26 = 1;
          goto LABEL_18;
        }
        if (!(_DWORD)v24)
        {
          v27 = 8;
LABEL_30:
          result = WTF::HashTable<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>>::rehash(a2, v27, v17);
          v17 = result;
          v21 = *a2;
          if (*a2)
            v24 = *(unsigned int *)(v21 - 4);
          else
            v24 = 0;
          goto LABEL_17;
        }
      }
      v27 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
      goto LABEL_30;
    }
    if (v18 != (_DWORD *)-1)
      break;
    v9 = (_QWORD *)(v6 + 8 * v16);
LABEL_7:
    v14 = i + v16;
  }
  if (v18 != v10)
    goto LABEL_7;
  if ((v7 & 1) != 0)
    v28 = 0;
  else
    v28 = *(unsigned int *)(v6 - 4);
  v26 = 0;
  v25 = v6 + 8 * v28;
LABEL_18:
  *(_QWORD *)v5 = v17;
  *((_QWORD *)v5 + 1) = v25;
  *((_BYTE *)v5 + 16) = v26;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 8 * v11);
      v14 = (_DWORD *)*v13;
      if (*v13)
      {
        if (v14 != (_DWORD *)-1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = (_DWORD *)*v13;
          *v13 = 0;
          *v24 = v25;
          v26 = (_DWORD *)*v13;
          *v13 = 0;
          if (v26)
          {
            if (v26[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
            else
              --v26[2];
          }
          if (v13 == a3)
            v12 = v24;
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashSet<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::DefaultHash<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTableTraits>::remove(uint64_t *result, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v3 = result;
  if (*result)
  {
    v4 = *result + 8 * *(unsigned int *)(*result - 4);
    if ((uint64_t **)v4 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v4 = 0;
  }
  if ((uint64_t **)v4 != a2)
  {
    result = *a2;
    *a2 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
    *a2 = (uint64_t *)-1;
    ++*(_DWORD *)(*v3 - 16);
    v5 = *v3;
    if (*v3)
      v6 = *(_DWORD *)(v5 - 12) - 1;
    else
      v6 = -1;
    *(_DWORD *)(v5 - 12) = v6;
    v7 = *v3;
    if (*v3)
    {
      v8 = 6 * *(_DWORD *)(v7 - 12);
      v9 = *(_DWORD *)(v7 - 4);
      if (v8 < v9 && v9 >= 9)
        return WTF::HashTable<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>>::rehash(v3, v9 >> 1, 0);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptModuleLoader::createImportMetaProperties(JSC::JSGlobalObject *,JSC::JSModuleLoader *,JSC::JSValue,JSC::JSModuleRecord *,JSC::JSValue)::$_0,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E3394460;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptModuleLoader::createImportMetaProperties(JSC::JSGlobalObject *,JSC::JSModuleLoader *,JSC::JSValue,JSC::JSModuleRecord *,JSC::JSValue)::$_0,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E3394460;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebCore::ScriptModuleLoader::createImportMetaProperties(JSC::JSGlobalObject *,JSC::JSModuleLoader *,JSC::JSValue,JSC::JSModuleRecord *,JSC::JSValue)::$_0,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::call(uint64_t a1, WebCore::JSDOMGlobalObject *this, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  WTF::StringImpl *v14;
  double result;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _QWORD v23[5];
  int v24;
  WTF::StringImpl *v25[2];
  WTF::StringImpl *v26;

  v5 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  v25[1] = v5;
  if (*(_DWORD *)(a3 + 32) == 1)
  {
    v23[0] = 10;
LABEL_9:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v23, this);
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(a3 + 48);
  v23[0] = v6;
  if ((v6 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v6 + 5) != 2)
    goto LABEL_9;
  v7 = *(WTF::StringImpl **)(v6 + 8);
  if ((v7 & 1) != 0)
  {
    v7 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v6, this);
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v7)
LABEL_6:
    *(_DWORD *)v7 += 2;
LABEL_7:
  v25[0] = v7;
LABEL_10:
  if (!*((_DWORD *)v5 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) == 0)
  {
    v8 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
    v9 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
    v10 = (char **)(16 * v8);
    if ((_DWORD)v8)
      v11 = v10 == &WebCore::JSDOMGlobalObject::s_info;
    else
      v11 = 1;
    if (!v11)
    {
      do
      {
        v10 = (char **)v10[2];
        v9 = v10 != 0;
      }
      while (v10 != &WebCore::JSDOMGlobalObject::s_info && v10 != 0);
    }
    if (!v9 || (v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this)) == 0)
    {
      JSC::throwTypeError();
      goto LABEL_29;
    }
    WebCore::resolveModuleSpecifier((uint64_t)v23, v13, *(unsigned __int8 *)(a1 + 8), *((JSC::ImportMap **)this + 409), (WTF::String *)v25, (WTF::URL *)(a1 + 16));
    if (v24)
    {
      if (v24 != 1)
      {
        v20 = (WTF::StringImpl **)std::__throw_bad_variant_access[abi:sn180100]();
        return WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::URL>,WTF::String const&,WTF::URL>(v20, v21, v22);
      }
      JSC::throwTypeError();
      goto LABEL_27;
    }
    v16 = (WTF::StringImpl *)v23[0];
    if (v23[0])
    {
      v17 = *(_DWORD *)(v23[0] + 4);
      if (v17 == 1)
      {
        if ((*(_BYTE *)(v23[0] + 16) & 4) == 0 && **(unsigned __int16 **)(v23[0] + 8) > 0xFFu)
        {
LABEL_26:
          *(_DWORD *)v23[0] += 2;
          v26 = v16;
          JSC::JSString::create((uint64_t)v5, &v26);
          v18 = v26;
          v26 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v14);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
      }
      else if (v17)
      {
        goto LABEL_26;
      }
    }
LABEL_27:
    if (v24 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E3393C50[v24])(&v26, v23);
  }
LABEL_29:
  v19 = v25[0];
  v25[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v14);
    else
      *(_DWORD *)v19 -= 2;
  }
  return result;
}

double WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::URL>,WTF::String const&,WTF::URL>(WTF::StringImpl **a1, WTF::StringImpl *a2, WTF::StringImpl *a3)
{
  WTF::StringImpl *v5;

  if (a2)
    *(_DWORD *)a2 += 2;
  v5 = *a1;
  *a1 = a2;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::GenericHashTraits<WTF::URL>::assignToEmpty<WTF::URL,WTF::URL>((uint64_t)(a1 + 1), (uint64_t *)a3);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::URL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t *v21;
  WTF::StringImpl *v22;
  char *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  char *v34;
  WTF::StringImpl *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  unsigned int v39;
  int v40;
  WTF *v41;
  uint64_t v42;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  result = WTF::fastZeroedMalloc((WTF *)(48 * a2));
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v10 >> 31) ^ v10;
  *(_BYTE *)(a1 + 20) = 0;
  v42 = v4;
  if ((_DWORD)v4)
  {
    v11 = 0;
    v41 = v5;
    do
    {
      v12 = (uint64_t *)((char *)v5 + 48 * v11);
      v13 = (WTF::StringImpl *)*v12;
      if (*v12)
      {
        v14 = *(_DWORD *)(a1 + 8);
        v15 = *(_DWORD *)(a1 + 16);
        v16 = *((_DWORD *)v13 + 4);
        if (v16 < 0x100)
          v17 = WTF::StringImpl::hashSlowCase(v13);
        else
          v17 = v16 >> 8;
        v18 = v14 - 1;
        v19 = (v17 ^ v15) & (v14 - 1);
        v20 = *(WTF **)a1;
        v21 = (uint64_t *)(*(_QWORD *)a1 + 48 * v19);
        v22 = (WTF::StringImpl *)*v21;
        if (*v21)
        {
          v40 = v14;
          v26 = 0;
          do
          {
            v27 = *((_DWORD *)v22 + 4);
            if (v27 < 0x100)
              v28 = WTF::StringImpl::hashSlowCase(v22);
            else
              v28 = v27 >> 8;
            if (v26 > (((_DWORD)v19 + v40 - ((v28 ^ v15) & v18)) & v18))
            {
              v39 = (v19 + v40 - ((v28 ^ v15) & v18)) & v18;
              v29 = (char *)v41 + 48 * v11;
              v30 = *v12;
              v31 = *((_QWORD *)v29 + 1);
              *v12 = 0;
              v12[1] = 0;
              v37 = *((_OWORD *)v29 + 2);
              v38 = *((_OWORD *)v29 + 1);
              *((_DWORD *)v29 + 4) = v38 & 0xFFFFFFFE;
              WTF::KeyValuePair<WTF::String,WTF::URL>::operator=((uint64_t)v12, v21);
              v33 = (WTF::StringImpl *)*v21;
              *v21 = v30;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, v32);
                else
                  *(_DWORD *)v33 -= 2;
              }
              v34 = (char *)v20 + 48 * v19;
              v35 = (WTF::StringImpl *)*((_QWORD *)v34 + 1);
              *((_QWORD *)v34 + 1) = v31;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, v32);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (char *)v20 + 48 * v19;
              *((_OWORD *)v36 + 1) = v38;
              *((_OWORD *)v36 + 2) = v37;
              v26 = v39;
            }
            v19 = ((_DWORD)v19 + 1) & v18;
            ++v26;
            v20 = *(WTF **)a1;
            v21 = (uint64_t *)(*(_QWORD *)a1 + 48 * v19);
            v22 = (WTF::StringImpl *)*v21;
          }
          while (*v21);
        }
        WTF::KeyValuePair<WTF::String,WTF::URL>::operator=((uint64_t)v21, v12);
        v5 = v41;
      }
      v23 = (char *)v5 + 48 * v11;
      v24 = (WTF::StringImpl *)*((_QWORD *)v23 + 1);
      *((_QWORD *)v23 + 1) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v7);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = (WTF::StringImpl *)*v12;
      *v12 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v7);
        else
          *(_DWORD *)v25 -= 2;
      }
      ++v11;
    }
    while (v11 != v42);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::URL>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v4 = *a2;
  *a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a2[1];
  a2[1] = 0;
  v7 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 16) & 0xFFFFFFFE | a2[2] & 1;
  v8 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8 & 0xFFFFFFFE;
  v9 = *(_DWORD *)(a1 + 16) & 0xFFFFFFFD | (2 * ((v8 >> 1) & 1));
  *(_DWORD *)(a1 + 16) = v9;
  v10 = v9 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 4) >> 2) & 1));
  *(_DWORD *)(a1 + 16) = v10;
  v11 = v10 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 4) >> 3) & 7));
  *(_DWORD *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 16) = a2[2] & 0xFFFFFFC0 | v11 & 0x3F;
  *(_OWORD *)(a1 + 20) = *(_OWORD *)((char *)a2 + 20);
  *(_QWORD *)(a1 + 36) = *(uint64_t *)((char *)a2 + 36);
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
  return a1;
}

double WTF::GenericHashTraits<WTF::URL>::assignToEmpty<WTF::URL,WTF::URL>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  double result;

  v4 = *a2;
  *a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  v6 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6 & 0xFFFFFFFE;
  v7 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((v6 >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v7;
  v8 = v7 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v8;
  v9 = v8 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v9 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  result = *(double *)((char *)a2 + 28);
  *(double *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptModuleLoader::notifyFinished(WebCore::ModuleScriptLoader &,WTF::URL &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E3394488;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptModuleLoader::notifyFinished(WebCore::ModuleScriptLoader &,WTF::URL &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E3394488;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptModuleLoader::notifyFinished(WebCore::ModuleScriptLoader &,WTF::URL &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::$_1,void>::call(_QWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t SlowCase;
  int v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v21;
  int v22;
  _BYTE v23[8];

  v2 = result[1];
  v1 = (_DWORD *)result[2];
  if (v1)
    ++v1[2];
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
  {
    v4 = *(_QWORD *)(v2 + 32);
    if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
      v5 = 0;
    else
      v5 = *(uint64_t **)v4;
    v7 = result[3];
    v6 = result[4];
    v8 = v5[7];
    MEMORY[0x19AEA3294](v23, v8);
    v9 = *(_QWORD *)(**(_QWORD **)(v2 + 32) + 56);
    v10 = (_QWORD *)(v9 + 40776);
    if (v1)
      ++v1[2];
    v11 = *(_QWORD *)(v9 + 41664);
    v12 = (_QWORD *)*v10;
    if (!*v10)
      v12 = (_QWORD *)JSC::GCClient::Heap::sourceCodeSpaceSlow((JSC::GCClient::Heap *)(v9 + 37552));
    SlowCase = v12[3];
    if (SlowCase >= v12[4])
    {
      SlowCase = v12[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_15:
        *(_DWORD *)SlowCase = 0;
        v14 = *(_DWORD *)(v11 + 8);
        *(_DWORD *)SlowCase = v11 >> 4;
        *(_DWORD *)(SlowCase + 4) = v14;
        *(_QWORD *)(SlowCase + 8) = v1;
        *(_QWORD *)(SlowCase + 16) = v7;
        *(_QWORD *)(SlowCase + 24) = v6;
        if (*(_BYTE *)(v9 + 755))
          __dmb(0xAu);
        v15 = *(_QWORD *)(v8 + 16);
        if (!v15)
        {
          WebCore::DeferredPromise::callFunction(v2, v5, 0, (objc_class *)SlowCase);
LABEL_19:
          result = (_QWORD *)MEMORY[0x19AEA32A0](v23);
          goto LABEL_20;
        }
        v17 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v5);
        if (!(*(unsigned int (**)(_QWORD *))(*v17 + 64))(v17))
        {
LABEL_28:
          WebCore::reportException((JSC::JSGlobalObject *)v5, v15, 0, 0, 0);
          goto LABEL_19;
        }
        v18 = v17[43];
        if (*(_QWORD *)(v8 + 24) == v15)
        {
LABEL_42:
          *(_BYTE *)(*(_QWORD *)(v18 + 8) + 93442) = 1;
          *(_BYTE *)(v2 + 44) = 1;
          goto LABEL_28;
        }
        if (!v18)
          goto LABEL_28;
        v19 = (unsigned __int8 *)(v18 + 40);
        if (__ldaxr((unsigned __int8 *)(v18 + 40)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v19))
        {
          goto LABEL_36;
        }
        MEMORY[0x19AEA534C](v18 + 40);
LABEL_36:
        v21 = *(unsigned __int8 *)(v18 + 41);
        v22 = __ldxr(v19);
        if (v22 == 1)
        {
          if (!__stlxr(0, v19))
          {
LABEL_41:
            if (!v21)
              goto LABEL_28;
            goto LABEL_42;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v18 + 40));
        goto LABEL_41;
      }
      v16 = *(_QWORD *)(SlowCase + 8) ^ v12[6];
      v12[4] = SlowCase + HIDWORD(v16);
      v12[5] = SlowCase + (int)v16;
    }
    v12[3] = SlowCase + 32;
    goto LABEL_15;
  }
LABEL_20:
  if (v1)
  {
    if (v1[2] == 1)
      return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::OffscreenCanvas*>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19570ECA0);
    }
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  v13 = *(_QWORD *)v3;
  v14 = *a2;
  if (*a2)
    ++*(_DWORD *)(v14 + 24);
  *(_QWORD *)(v13 + 8 * v12) = v14;
  *(_DWORD *)(v3 + 12) = v12 + 1;
  return result;
}

_QWORD *WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::Ref(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v6;

  v4 = *(_QWORD *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *a1 = a2;
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MessagePort&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
    goto LABEL_10;
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
LABEL_10:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD *)v3;
    v14 = *(_QWORD *)(a2 + 48);
    if (__ldaxr((unsigned __int8 *)v14))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v14))
    {
      goto LABEL_14;
    }
    result = MEMORY[0x19AEA534C](v14);
LABEL_14:
    ++*(_QWORD *)(v14 + 8);
    v16 = __ldxr((unsigned __int8 *)v14);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        goto LABEL_19;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v14);
LABEL_19:
    *(_QWORD *)(v13 + 8 * v12) = a2;
    ++*(_DWORD *)(v3 + 12);
    return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::JSObject *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSArray *&>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    v12 = *(unsigned int *)(v3 + 12);
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v12) = *a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  v9 = *(void **)result;
  if (v8 < 0x21)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 32;
    goto LABEL_12;
  }
  if (!(v8 >> 29))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_12:
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<unsigned int,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    *(_DWORD *)(*(_QWORD *)v3 + 4 * (*(_DWORD *)(v3 + 12))++) = *a2;
    return result;
  }
  v9 = *(void **)result;
  if (v8 < 0x11)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 16;
    goto LABEL_12;
  }
  if (!(v8 >> 30))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(4 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_12:
    result = (uint64_t)memcpy(v10, v9, 4 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

_DWORD *WTF::Vector<unsigned int,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<unsigned int,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<unsigned int,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 4 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      if (v10 < 0x11)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
        goto LABEL_30;
      }
      if (!(v10 >> 30))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(4 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 4 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x19570F208);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x11)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (v15 >> 30)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(4 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 4 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

uint64_t WTF::Vector<JSC::PropertyNameArray,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PropertyNameArray>(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = WTF::Vector<JSC::PropertyNameArray,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v4 = v5;
  *(_QWORD *)(v4 + 8) = 0;
  v6 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6;
  LOWORD(v6) = *(_WORD *)(result + 24);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(result + 16);
  *(_WORD *)(v4 + 24) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::PropertyNameArray,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (_QWORD *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v12 = *(unsigned int *)(a1 + 8);
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= a2)
      v15 = a2;
    else
      v15 = v14;
    if (v15 > v12)
    {
      v16 = *(unsigned int *)(a1 + 12);
      if (v15 < 0x11)
      {
        v17 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
      }
      else
      {
        if (v15 >> 27)
        {
          __break(0xC471u);
          JUMPOUT(0x19570F418);
        }
        v17 = WTF::fastMalloc((WTF *)(32 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v17;
      }
      WTF::VectorMover<false,JSC::PropertyNameArray>::move((uint64_t)v5, (_QWORD *)v5 + 4 * v16, v17);
      if ((WTF *)(a1 + 16) != v5 && v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v18);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 > v7)
    {
      if (v10 < 0x11)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
      }
      else
      {
        if (v10 >> 27)
        {
          __break(0xC471u);
          JUMPOUT(0x19570F420);
        }
        v11 = WTF::fastMalloc((WTF *)(32 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
      }
      WTF::VectorMover<false,JSC::PropertyNameArray>::move((uint64_t)v5, v6, v11);
      if ((WTF *)(a1 + 16) != v5 && v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v19);
      }
    }
    return *(_QWORD *)a1 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
  }
  return v3;
}

uint64_t WTF::VectorMover<false,JSC::PropertyNameArray>::move(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;

  if ((_QWORD *)result != a2)
  {
    v5 = (_QWORD *)result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = 0;
      v7 = v5[1];
      v5[1] = 0;
      *(_QWORD *)(a3 + 8) = v7;
      v8 = v5[2];
      *(_WORD *)(a3 + 24) = *((_WORD *)v5 + 12);
      *(_QWORD *)(a3 + 16) = v8;
      v9 = v5[1];
      if (v9)
        result = WTF::fastFree((WTF *)(v9 - 16), a2);
      v10 = *v5;
      *v5 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          v11 = *(unsigned int *)(v10 + 20);
          if ((_DWORD)v11)
          {
            v12 = *(WTF::StringImpl ***)(v10 + 8);
            v13 = 8 * v11;
            do
            {
              v14 = *v12;
              *v12 = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 2)
                  WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v14 -= 2;
              }
              ++v12;
              v13 -= 8;
            }
            while (v13);
          }
          v15 = *(WTF **)(v10 + 8);
          if ((WTF *)(v10 + 24) != v15 && v15 != 0)
          {
            *(_QWORD *)(v10 + 8) = 0;
            *(_DWORD *)(v10 + 16) = 0;
            WTF::fastFree(v15, a2);
          }
          result = WTF::fastFree((WTF *)v10, a2);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
      a3 += 32;
      v5 += 4;
    }
    while (v5 != a2);
  }
  return result;
}

_DWORD *WTF::Vector<WebCore::WalkerState,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WalkerState>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;
  uint64_t v4;

  result = (_DWORD *)WTF::Vector<unsigned int,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

_QWORD *WTF::Vector<JSC::JSObject *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSObject *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::JSObject *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::JSObject *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 0x21)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 32;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x19570F758);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x21)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 32;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

uint64_t WTF::Vector<JSC::JSMapIterator *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 5)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x19570F8F4);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 5)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

uint64_t WTF::Vector<JSC::JSValue,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 5)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
        goto LABEL_33;
      }
      if (!(v10 >> 29))
      {
        v11 = WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_33:
        v21 = 0;
        do
        {
          *(_QWORD *)(v11 + v21) = *(_QWORD *)((char *)v5 + v21);
          v21 += 8;
        }
        while (8 * v6 != v21);
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (*(WTF **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x19570FAB4);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 5)
    {
      v17 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_42;
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v18 = 8 * v16;
    v19 = v5;
    do
    {
      v20 = *(_QWORD *)v19;
      v19 = (WTF *)((char *)v19 + 8);
      *v17++ = v20;
      v18 -= 8;
    }
    while (v18);
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return v3;
}

_DWORD **WTF::Vector<JSC::Identifier,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier&>(uint64_t a1, unint64_t a2)
{
  _DWORD **result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  result = (_DWORD **)WTF::Vector<JSC::Identifier,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  if (*result)
    *v6 += 2;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::Identifier,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 0x11)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x19570FCA4);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x11)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

uint64_t WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *a3;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v10 = result & v7;
  v11 = (uint64_t *)(v6 + 8 * (result & v7));
  v12 = *v11;
  if (*v11)
  {
    v13 = 0;
    v14 = 1;
    do
    {
      if (v12 == v8)
      {
        v17 = 0;
        v18 = v6 + 8 * *(unsigned int *)(v6 - 4);
        goto LABEL_30;
      }
      if (v12 == -1)
        v13 = v11;
      v10 = (v10 + v14) & v7;
      v11 = (uint64_t *)(v6 + 8 * v10);
      v12 = *v11;
      ++v14;
    }
    while (*v11);
    if (v13)
    {
      *v13 = 0;
      --*(_DWORD *)(*a2 - 16);
      v8 = *a3;
      v11 = v13;
    }
  }
  *v11 = v8;
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
      goto LABEL_25;
  }
  else if (3 * v22 <= 4 * v21)
  {
    if (!(_DWORD)v22)
    {
      v23 = 8;
      goto LABEL_26;
    }
LABEL_25:
    v23 = (_DWORD)v22 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v22));
LABEL_26:
    result = WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::rehash(a2, v23, v11);
    v11 = (uint64_t *)result;
    v19 = *a2;
    if (*a2)
      v22 = *(unsigned int *)(v19 - 4);
    else
      v22 = 0;
  }
  v18 = v19 + 8 * v22;
  v17 = 1;
LABEL_30:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 16) = v17;
  return result;
}

uint64_t WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*v13);
        v18 = 0;
        do
        {
          v19 = v17 & v16;
          v17 = ++v18 + v19;
        }
        while (*(_QWORD *)(v15 + 8 * v19));
        *(_QWORD *)(v15 + 8 * v19) = v14;
        if (v13 == a3)
          v12 = v15 + 8 * v19;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Vector<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ArrayBuffer*>(uint64_t result, _DWORD **a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  v13 = *(_QWORD *)v3;
  v14 = *a2;
  if (*a2)
    *v14 += 2;
  *(_QWORD *)(v13 + 8 * v12) = v14;
  *(_DWORD *)(v3 + 12) = v12 + 1;
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ImageBitmap*>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1957100F8);
    }
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  v13 = *(_QWORD *)v3;
  v14 = *a2;
  if (*a2)
    ++*(_DWORD *)(v14 + 8);
  *(_QWORD *)(v13 + 8 * v12) = v14;
  *(_DWORD *)(v3 + 12) = v12 + 1;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::RTCDataChannel,WTF::RawPtrTraits<WebCore::RTCDataChannel>,WTF::DefaultRefDerefTraits<WebCore::RTCDataChannel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RTCDataChannel&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    ++*(_DWORD *)(a2 + 24);
    v13[v12] = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaSourceHandle&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    ++*(_DWORD *)(a2 + 8);
    v13[v12] = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WebCodecsVideoFrame&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    ++*(_DWORD *)(a2 + 16);
    v13[v12] = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::WebCodecsAudioData,WTF::RawPtrTraits<WebCore::WebCodecsAudioData>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsAudioData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WebCodecsAudioData&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195710428);
    }
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  v13 = *(_QWORD *)v3;
  ++*(_DWORD *)(a2 + 16);
  *(_QWORD *)(v13 + 8 * v12) = a2;
  *(_DWORD *)(v3 + 12) = v12 + 1;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaStreamTrack&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1957104F4);
    }
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  v13 = *(_QWORD *)v3;
  ++*(_DWORD *)(a2 + 24);
  *(_QWORD *)(v13 + 8 * v12) = a2;
  *(_DWORD *)(v3 + 12) = v12 + 1;
  return result;
}

char *WTF::Vector<std::unique_ptr<WebCore::DetachedOffscreenCanvas>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::DetachedOffscreenCanvas>>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  result = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(char **)a1;
  v6 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)&v5[8 * v4] = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    v14 = *a2;
    *a2 = 0;
    v13[v12] = v14;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SerializedScriptValue::writeBlobsToDiskForIndexedDB(WTF::CompletionHandler<void ()(WebCore::IDBValue &&)> &&)::$_0,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  void *v8;

  *a1 = &off_1E33944B0;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v6 = __ldaxr(v3);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v3));
    if (!v7)
    {
      atomic_store(1u, v3);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v3 + 2), a2);
      WTF::fastFree((WTF *)v3, v8);
    }
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SerializedScriptValue::writeBlobsToDiskForIndexedDB(WTF::CompletionHandler<void ()(WebCore::IDBValue &&)> &&)::$_0,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  void *v8;

  *(_QWORD *)this = &off_1E33944B0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v6 = __ldaxr(v3);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v3));
    if (!v7)
    {
      atomic_store(1u, v3);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v3 + 2), a2);
      WTF::fastFree((WTF *)v3, v8);
    }
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::SerializedScriptValue::writeBlobsToDiskForIndexedDB(WTF::CompletionHandler<void ()(WebCore::IDBValue &&)> &&)::$_0,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  WTF *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF *v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  if (!*(_DWORD *)(a2 + 12))
  {
    v20 = 0;
    memset(v19, 0, sizeof(v19));
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v9 + 16))(v9, v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v19, v10);
    return;
  }
  v4 = *(_QWORD *)(a1 + 16);
  v17 = 0;
  v18 = 0;
  v5 = *(unsigned int *)(v4 + 244);
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
    LODWORD(v18) = v5;
    v17 = v6;
    if (*(_DWORD *)(v4 + 244))
    {
      v7 = 0;
      v5 = 0;
      do
      {
        v8 = v5;
        WTF::String::isolatedCopy();
        ++v5;
        *((_QWORD *)v6 + v8) = *(_QWORD *)&v19[0];
        v7 += 72;
      }
      while (v5 < *(unsigned int *)(v4 + 244));
      HIDWORD(v18) = v5;
    }
    else
    {
      LODWORD(v5) = 0;
    }
  }
  else
  {
    v6 = 0;
  }
  WebCore::IDBValue::IDBValue((uint64_t)v19, v4, (uint64_t)&v17, a2);
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v11 + 16))(v11, v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v19, v12);
  if ((_DWORD)v5)
  {
    v14 = 8 * v5;
    v15 = (WTF::StringImpl **)v6;
    do
    {
      v16 = *v15;
      *v15 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v13);
        else
          *(_DWORD *)v16 -= 2;
      }
      ++v15;
      v14 -= 8;
    }
    while (v14);
  }
  if (v6)
    WTF::fastFree(v6, v13);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SerializedScriptValue::writeBlobsToDiskForIndexedDBSynchronously(void)::$_0,void>::call(uint64_t a1)
{
  WTF *v1;
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;

  v1 = *(WTF **)(a1 + 8);
  v4 = *(_OWORD *)(a1 + 16);
  v2 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v2 = off_1E3394500;
  *(_OWORD *)(v2 + 8) = v4;
  v5 = v2;
  WebCore::SerializedScriptValue::writeBlobsToDiskForIndexedDB(v1, &v5);
  result = v5;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SerializedScriptValue::writeBlobsToDiskForIndexedDBSynchronously(void)::$_0::operator() const(void)::{lambda(WebCore::IDBValue &&)#1},void,WebCore::IDBValue &>::call(uint64_t a1, unsigned int **a2)
{
  WebCore::IDBValue::setAsIsolatedCopy(*(WebCore::IDBValue **)(a1 + 16), a2);
  return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 8));
}

WebCore::JSHeapData *std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::JSHeapData::ensureHeapData(JSC::Heap &)::$_0 &&>>(JSC::Heap ****a1)
{
  JSC::Heap **v1;
  WebCore::JSHeapData *v2;
  WebCore::JSHeapData *result;

  v1 = **a1;
  v2 = (WebCore::JSHeapData *)WTF::fastMalloc((WTF *)0xB20);
  result = WebCore::JSHeapData::JSHeapData(v2, *v1);
  WebCore::JSHeapData::ensureHeapData(JSC::Heap &)::singleton = (uint64_t)result;
  return result;
}

uint64_t WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::contains<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; ++i)
  {
    v9 = *(_QWORD *)(v2 + 8 * v7);
    if (v9 != -1)
    {
      if (!v9)
        return 0;
      if (v9 == a2)
        break;
    }
    v7 = (v7 + i) & v3;
  }
  return 1;
}

unsigned int *WTF::VectorDestructor<true,WTF::WeakPtr<WebCore::JSVMClientDataClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(unsigned int *result, void *a2)
{
  unsigned int **v3;
  unsigned int v4;
  unsigned int v5;

  if (result != a2)
  {
    v3 = (unsigned int **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        do
        {
          v4 = __ldaxr(result);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, result));
        if (!v5)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::JSVMClientData::~JSVMClientData()::$_0,void,WebCore::JSVMClientDataClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DOMWrapperWorld&>(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    ++*a2;
    v13[v12] = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

WebCore::DOMWrapperWorld *WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::remove(uint64_t *a1, uint64_t a2)
{
  WebCore::DOMWrapperWorld *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v16;
  void *v17;

  result = *(WebCore::DOMWrapperWorld **)a2;
  *(_QWORD *)a2 = -1;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(result);
      result = (WebCore::DOMWrapperWorld *)WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(v5 - 16);
    v7 = *(_QWORD *)(((v5 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v8 = *(uint64_t **)(v5 - 8);
    if (v8)
    {
      v9 = *v6;
      *v8 = *v6;
      *(_QWORD *)(v9 + 8) = v8;
      *v6 = 0;
      v6[1] = 0;
    }
    *v6 = *(_QWORD *)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;
    *(_QWORD *)(a2 + 8) = 0;
  }
  ++*(_DWORD *)(*a1 - 16);
  v10 = *a1;
  if (*a1)
    v11 = *(_DWORD *)(v10 - 12) - 1;
  else
    v11 = -1;
  *(_DWORD *)(v10 - 12) = v11;
  v12 = *a1;
  if (*a1)
  {
    v13 = 6 * *(_DWORD *)(v12 - 12);
    v14 = *(_DWORD *)(v12 - 4);
    if (v13 < v14 && v14 >= 9)
      return (WebCore::DOMWrapperWorld *)WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash(a1, v14 >> 1);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash(a1, v3);
}

uint64_t WebCore::IdentifierRep::get(WebCore::IdentifierRep *this)
{
  int v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE v19[24];

  v1 = (int)this;
  v2 = ((_DWORD)this + 1);
  if (v2 > 1)
  {
    if ((_MergedGlobals_157[0] & 1) != 0)
    {
      v4 = qword_1ECE828A8;
      if (qword_1ECE828A8)
        goto LABEL_7;
    }
    else
    {
      qword_1ECE828A8 = 0;
      _MergedGlobals_157[0] = 1;
    }
    WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::IdentifierRep *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::IdentifierRep *>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::IdentifierRep *,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::IdentifierRep *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(8u, 0);
    v4 = qword_1ECE828A8;
    if (!qword_1ECE828A8)
    {
      v5 = 0;
LABEL_8:
      v6 = 9 * ((~(v1 << 15) + v1) ^ ((~(v1 << 15) + v1) >> 10));
      v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
      v8 = v5 & (v7 ^ HIWORD(v7));
      v9 = v4 + 16 * v8;
      v10 = *(_DWORD *)v9;
      if (*(_DWORD *)v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != v1)
        {
          if (v10 == -1)
            v11 = (_QWORD *)v9;
          v8 = (v8 + v12) & v5;
          v9 = v4 + 16 * v8;
          v10 = *(_DWORD *)v9;
          ++v12;
          if (!*(_DWORD *)v9)
          {
            if (v11)
            {
              *v11 = 0;
              v11[1] = 0;
              --*(_DWORD *)(v4 - 16);
              v9 = (uint64_t)v11;
            }
            goto LABEL_16;
          }
        }
        return *(_QWORD *)(v9 + 8);
      }
LABEL_16:
      *(_DWORD *)v9 = v1;
      *(_QWORD *)(v9 + 8) = 0;
      if (qword_1ECE828A8)
        v13 = *(_DWORD *)(qword_1ECE828A8 - 12) + 1;
      else
        v13 = 1;
      *(_DWORD *)(qword_1ECE828A8 - 12) = v13;
      if (qword_1ECE828A8)
        v14 = *(_DWORD *)(qword_1ECE828A8 - 12);
      else
        v14 = 0;
      v15 = (*(_DWORD *)(qword_1ECE828A8 - 16) + v14);
      v16 = *(unsigned int *)(qword_1ECE828A8 - 4);
      if (v16 > 0x400)
      {
        if (v16 > 2 * v15)
          goto LABEL_29;
      }
      else
      {
        if (3 * v16 > 4 * v15)
        {
LABEL_29:
          v18 = WTF::fastMalloc((WTF *)0x10);
          *(_BYTE *)(v18 + 8) = 0;
          *(_DWORD *)v18 = v1;
          *(_QWORD *)(v9 + 8) = v18;
          if ((byte_1ECE828A1 & 1) == 0)
          {
            qword_1ECE828B0 = 0;
            byte_1ECE828A1 = 1;
          }
          WTF::HashTable<WebCore::IdentifierRep *,WebCore::IdentifierRep *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IdentifierRep *>,WTF::HashTraits<WebCore::IdentifierRep *>,WTF::HashTraits<WebCore::IdentifierRep *>>::add((uint64_t)v19, (uint64_t *)(v9 + 8));
          return *(_QWORD *)(v9 + 8);
        }
        if (!(_DWORD)v16)
        {
          v17 = 8;
          goto LABEL_28;
        }
      }
      v17 = (_DWORD)v16 << (6 * *(_DWORD *)(qword_1ECE828A8 - 12) >= (2 * v16));
LABEL_28:
      v9 = WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::IdentifierRep *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::IdentifierRep *>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::IdentifierRep *,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::IdentifierRep *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v17, (_DWORD *)v9);
      goto LABEL_29;
    }
LABEL_7:
    v5 = *(_DWORD *)(v4 - 8);
    goto LABEL_8;
  }
  result = *(_QWORD *)&_MergedGlobals_157[8 * v2 + 32];
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x10);
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = v1;
    *(_QWORD *)&_MergedGlobals_157[8 * v2 + 32] = result;
  }
  return result;
}

WTF *WebCore::IdentifierRep::get(WebCore::IdentifierRep *this, const char *a2)
{
  WTF *v2;
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl **v9;
  int i;
  unsigned int v11;
  _QWORD *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  WTF::StringImpl *v22;
  uint64_t v24;
  WTF::StringImpl *v25;

  v2 = this;
  if (!this)
    return v2;
  strlen((const char *)this);
  WTF::String::fromUTF8WithLatin1Fallback();
  if ((byte_1ECE828A2 & 1) == 0)
  {
    qword_1ECE828B8 = 0;
    byte_1ECE828A2 = 1;
  }
  v4 = v25;
  if (v25)
    *(_DWORD *)v25 += 2;
  v5 = qword_1ECE828B8;
  if (qword_1ECE828B8
    || (WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WebCore::IdentifierRep *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WebCore::IdentifierRep *>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WebCore::IdentifierRep *,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WebCore::IdentifierRep *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(8u, 0), (v5 = qword_1ECE828B8) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *((_DWORD *)v4 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(v4);
  else
    v8 = v7 >> 8;
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = v8 & v6;
    v12 = (_QWORD *)(v5 + 16 * (v8 & v6));
    v13 = (WTF *)*v12;
    if (*v12 == -1)
    {
      v9 = (WTF::StringImpl **)(v5 + 16 * v11);
      goto LABEL_18;
    }
    if (!v13)
      break;
    if (WTF::equal(v13, v4, v3))
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v14);
      else
        *(_DWORD *)v4 -= 2;
      goto LABEL_41;
    }
LABEL_18:
    v8 = i + v11;
  }
  if (v9)
  {
    *v9 = 0;
    v9[1] = 0;
    --*(_DWORD *)(qword_1ECE828B8 - 16);
    *v9 = v4;
  }
  else
  {
    *v12 = v4;
    v9 = (WTF::StringImpl **)(v5 + 16 * v11);
  }
  v9[1] = 0;
  if (qword_1ECE828B8)
    v15 = *(_DWORD *)(qword_1ECE828B8 - 12) + 1;
  else
    v15 = 1;
  *(_DWORD *)(qword_1ECE828B8 - 12) = v15;
  if (qword_1ECE828B8)
    v16 = *(_DWORD *)(qword_1ECE828B8 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(qword_1ECE828B8 - 16) + v16);
  v18 = *(unsigned int *)(qword_1ECE828B8 - 4);
  if (v18 > 0x400)
  {
    if (v18 <= 2 * v17)
      goto LABEL_34;
LABEL_32:
    v12 = v9;
  }
  else
  {
    if (3 * v18 > 4 * v17)
      goto LABEL_32;
    if ((_DWORD)v18)
LABEL_34:
      v19 = (_DWORD)v18 << (6 * *(_DWORD *)(qword_1ECE828B8 - 12) >= (2 * v18));
    else
      v19 = 8;
    v12 = WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WebCore::IdentifierRep *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WebCore::IdentifierRep *>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WebCore::IdentifierRep *,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WebCore::IdentifierRep *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(v19, v9);
  }
  v20 = WTF::fastMalloc((WTF *)0x10);
  *(_BYTE *)(v20 + 8) = 1;
  *(_QWORD *)v20 = WTF::fastStrDup(v2, v21);
  v12[1] = v20;
  if ((byte_1ECE828A1 & 1) == 0)
  {
    qword_1ECE828B0 = 0;
    byte_1ECE828A1 = 1;
  }
  WTF::HashTable<WebCore::IdentifierRep *,WebCore::IdentifierRep *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IdentifierRep *>,WTF::HashTraits<WebCore::IdentifierRep *>,WTF::HashTraits<WebCore::IdentifierRep *>>::add((uint64_t)&v24, v12 + 1);
LABEL_41:
  v2 = (WTF *)v12[1];
  v22 = v25;
  v25 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v14);
    else
      *(_DWORD *)v22 -= 2;
  }
  return v2;
}

uint64_t WebCore::IdentifierRep::isValid(uint64_t a1)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  _BOOL8 v8;

  if ((byte_1ECE828A1 & 1) != 0)
  {
    if (qword_1ECE828B0)
    {
      v1 = *(_DWORD *)(qword_1ECE828B0 - 8);
      v2 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
      v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
      v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
      v5 = v1 & ((v4 >> 31) ^ v4);
      v6 = *(_QWORD *)(qword_1ECE828B0 + 8 * v5);
      if (v6 == a1)
      {
        return 1;
      }
      else
      {
        v7 = 1;
        do
        {
          v8 = v6 != 0;
          if (!v6)
            break;
          v5 = (v5 + v7) & v1;
          v6 = *(_QWORD *)(qword_1ECE828B0 + 8 * v5);
          ++v7;
        }
        while (v6 != a1);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v8 = 0;
    qword_1ECE828B0 = 0;
    byte_1ECE828A1 = 1;
  }
  return v8;
}

uint64_t JSC::RuntimeArray::destroy(JSC::RuntimeArray *this, JSCell *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t JSC::RuntimeArray::put(uint64_t a1, JSC *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  _WORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  const WTF::String *v11;
  JSValue v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v29;
  void *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  WTF::StringImpl *v34;

  v4 = *((_QWORD *)a2 + 7);
  do
    v5 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v5 + 1, (unsigned int *)v4));
  if (*(_QWORD *)(*(_QWORD *)(v4 + 41952) + 1768) != a3)
  {
    if (!a3)
      goto LABEL_37;
    v6 = *(_DWORD *)(a3 + 16);
    if ((v6 & 0x20) != 0)
      goto LABEL_37;
    v7 = *(_WORD **)(a3 + 8);
    v8 = *(unsigned int *)(a3 + 4);
    if ((v6 & 4) == 0)
    {
      if (!(_DWORD)v8)
      {
        v10 = 0;
        v9 = 0;
        goto LABEL_19;
      }
      v9 = (unsigned __int16)*v7 - 48;
      if (v9 <= 9)
      {
        if (v8 < 2 || *v7 != 48)
        {
          v18 = v7 + 1;
          v19 = v8 - 1;
          while (v19)
          {
            if (v9 <= 0x19999999)
            {
              v20 = *v18 - 48;
              if (v20 <= 9)
              {
                v21 = __CFADD__(v20, 10 * v9);
                v9 = v20 + 10 * v9;
                ++v18;
                --v19;
                if (!v21)
                  continue;
              }
            }
            goto LABEL_9;
          }
          v22 = v9 == -1;
          LODWORD(v8) = v9 & 0xFFFFFF00;
          v9 = v9;
          v10 = 0x100000000;
          if (v22)
          {
            v10 = 0;
            v9 = 0;
            LODWORD(v8) = 0;
          }
LABEL_19:
          v16 = v8 | v9;
          if ((v10 & 0x100000000) != 0)
          {
LABEL_20:
            v17 = (*(uint64_t (**)(_QWORD, JSC *, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a2, v16);
            goto LABEL_38;
          }
LABEL_37:
          v17 = JSC::JSObject::put();
LABEL_38:
          v15 = v17;
          if (!v4)
            return v15;
          goto LABEL_39;
        }
        v10 = 0;
      }
      else
      {
LABEL_9:
        v10 = 0;
        v9 = 0;
      }
      LODWORD(v8) = 0;
      goto LABEL_19;
    }
    if ((_DWORD)v8)
    {
      v23 = *(unsigned __int8 *)v7 - 48;
      if (v23 <= 9 && (v8 < 2 || *(_BYTE *)v7 != 48))
      {
        v31 = v8 - 1;
        v32 = (unsigned __int8 *)v7 + 1;
        while (v31)
        {
          if (v23 > 0x19999999)
            goto LABEL_34;
          v33 = *v32 - 48;
          if (v33 > 9)
            goto LABEL_34;
          LODWORD(v8) = 0;
          v24 = 0;
          v25 = 0;
          v21 = __CFADD__(v33, 10 * v23);
          v23 = v33 + 10 * v23;
          --v31;
          ++v32;
          if (v21)
            goto LABEL_36;
        }
        if (v23 == -1)
          LODWORD(v8) = 0;
        else
          LODWORD(v8) = v23;
        if (v23 == -1)
          v24 = 0;
        else
          v24 = v23 & 0xFFFFFF00;
        if (v23 == -1)
          v25 = 0;
        else
          v25 = 0x100000000;
LABEL_36:
        v16 = v24 | v8;
        if ((v25 & 0x100000000) != 0)
          goto LABEL_20;
        goto LABEL_37;
      }
LABEL_34:
      LODWORD(v8) = 0;
    }
    v24 = 0;
    v25 = 0;
    goto LABEL_36;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12.super.isa = (Class)JSC::createRangeError(a2, (JSC::JSGlobalObject *)&v34, v11);
  JSC::VM::throwException((JSC::VM *)v4, a2, v12);
  v14 = v34;
  v34 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = 0;
  do
  {
LABEL_39:
    v26 = __ldaxr((unsigned int *)v4);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, (unsigned int *)v4));
  if (!v27)
  {
    atomic_store(1u, (unsigned int *)v4);
    v29 = (WTF *)MEMORY[0x19AEA3AF8](v4);
    WTF::fastFree(v29, v30);
  }
  return v15;
}

uint64_t JSC::RuntimeArray::putByIndex(uint64_t a1, JSC *a2, uint64_t a3, uint64_t a4)
{
  JSC::VM *v8;
  const WTF::String *v10;
  JSValue v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16)) > a3)
    return (*(uint64_t (**)(_QWORD, JSC *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a2, a3, a4);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11.super.isa = (Class)JSC::createRangeError(a2, (JSC::JSGlobalObject *)&v14, v10);
  JSC::VM::throwException(v8, a2, v11);
  v13 = v14;
  v14 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  return 0;
}

uint64_t JSC::RuntimeArray::deleteProperty()
{
  return 0;
}

uint64_t JSC::RuntimeArray::deletePropertyByIndex()
{
  return 0;
}

uint64_t JSC::RuntimeArray::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t OwnPropertySlotByIndex;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int16 *v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  int v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  void *v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unsigned int v69;

  v8 = *(_QWORD *)(a2 + 56);
  do
    v9 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v9 + 1, (unsigned int *)v8));
  if (*(_QWORD *)(*(_QWORD *)(v8 + 41952) + 1768) == a3)
  {
    *(_QWORD *)a4 = JSC::arrayLengthGetter;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 14;
    *(_QWORD *)(a4 + 32) = a1;
    *(_WORD *)(a4 + 48) = 769;
    OwnPropertySlotByIndex = 1;
  }
  else
  {
    if (a3)
    {
      v10 = *(_DWORD *)(a3 + 16);
      if ((v10 & 0x20) != 0)
        goto LABEL_11;
      v11 = *(_BYTE **)(a3 + 8);
      v12 = *(unsigned int *)(a3 + 4);
      if ((v10 & 4) != 0)
      {
        if (!(_DWORD)v12)
          goto LABEL_11;
        v13 = *v11 - 48;
        if (v13 > 9 || v12 >= 2 && *v11 == 48)
          goto LABEL_11;
        v62 = v12 - 1;
        v63 = v11 + 1;
        while (v62)
        {
          if (v13 <= 0x19999999)
          {
            v64 = *v63 - 48;
            if (v64 <= 9)
            {
              v30 = __CFADD__(v64, 10 * v13);
              v13 = v64 + 10 * (_DWORD)v13;
              --v62;
              ++v63;
              if (!v30)
                continue;
            }
          }
          goto LABEL_11;
        }
      }
      else
      {
        if (!(_DWORD)v12)
          goto LABEL_11;
        v13 = *(unsigned __int16 *)v11 - 48;
        if (v13 > 9 || v12 >= 2 && *(_WORD *)v11 == 48)
          goto LABEL_11;
        v27 = v12 - 1;
        v28 = (unsigned __int16 *)(v11 + 2);
        while (v27)
        {
          if (v13 <= 0x19999999)
          {
            v29 = *v28 - 48;
            if (v29 <= 9)
            {
              v30 = __CFADD__(v29, 10 * v13);
              v13 = v29 + 10 * (_DWORD)v13;
              --v27;
              ++v28;
              if (!v30)
                continue;
            }
          }
          goto LABEL_11;
        }
      }
      if ((_DWORD)v13 != -1
        && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16)) > v13)
      {
        *(_QWORD *)a4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a2, v13);
        *(_DWORD *)(a4 + 16) = 8;
        *(_QWORD *)(a4 + 32) = a1;
        OwnPropertySlotByIndex = 1;
        *(_BYTE *)(a4 + 49) = 1;
        goto LABEL_43;
      }
LABEL_11:
      if (!(a3 >> 4))
        goto LABEL_32;
      v14 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
      if (((a3 >> 4) & ~*(_DWORD *)(v14 + 0x20)) != 0)
        goto LABEL_32;
      v15 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
      if (!v15)
      {
        v31 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
        if (!v31 || *(_BYTE *)(v31 + 5) != 1 && *(_DWORD *)(v31 + 80) < 2u)
          goto LABEL_32;
        v15 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56));
        if (!v15)
          goto LABEL_32;
      }
      if (!*(_DWORD *)(v15 + 24))
        goto LABEL_32;
      v16 = *(_QWORD *)(v15 + 16);
      v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
      v18 = *(unsigned int *)(v15 + 8);
      v19 = *(_DWORD *)(a3 + 16);
      if ((v16 & 1) != 0)
      {
        if ((v19 & 0x20) != 0)
          v19 = *(_DWORD *)(a3 + 32);
        v20 = *(_DWORD *)(v15 + 12);
        v21 = (v19 >> 8) & *(_QWORD *)&v20;
        v22 = *(unsigned __int8 *)(v17 + v21);
        if (!*(_BYTE *)(v17 + v21))
          goto LABEL_32;
        v23 = v17 + v18;
        v24 = 1;
        while (1)
        {
          v25 = *(_QWORD *)(v23 + 8 * (v22 - 1));
          if (a3 == (v25 & 0xFFFFFFFFFFFFLL))
            break;
          v21 = ((_DWORD)v21 + v24) & v20;
          v22 = *(unsigned __int8 *)(v17 + v21);
          ++v24;
          if (!*(_BYTE *)(v17 + v21))
            goto LABEL_32;
        }
        v43 = (v25 >> 16) & 0xFF00000000 | HIBYTE(v25);
      }
      else
      {
        if ((v19 & 0x20) != 0)
          v19 = *(_DWORD *)(a3 + 32);
        v49 = *(_DWORD *)(v15 + 12);
        v50 = v49 & (v19 >> 8);
        v51 = *(_DWORD *)(v17 + 4 * v50);
        if (!v51)
          goto LABEL_32;
        v52 = v17 + 4 * v18;
        v53 = 1;
        while (1)
        {
          v54 = (v51 - 1);
          if (*(_QWORD *)(v52 + 16 * v54) == a3)
            break;
          v50 = (v50 + v53) & v49;
          v51 = *(_DWORD *)(v17 + 4 * v50);
          ++v53;
          if (!v51)
            goto LABEL_32;
        }
        v43 = *(unsigned int *)(v52 + 16 * v54 + 8) | ((unint64_t)*(unsigned __int8 *)(v52 + 16 * v54 + 12) << 32);
      }
      if ((_DWORD)v43 != -1)
      {
        if ((int)v43 > 63)
        {
          v44 = *(_QWORD *)(a1 + 8) - 8;
          v45 = 0x3F00000000 - (v43 << 32);
        }
        else
        {
          v44 = a1 + 16;
          v45 = v43 << 32;
        }
        v46 = *(_QWORD *)(v44 + (v45 >> 29));
        if ((v46 & 0xFFFE000000000002) != 0)
          goto LABEL_62;
        v47 = *(unsigned __int8 *)(v46 + 5);
        if (v47 != 6)
        {
          if (v47 != 5)
          {
LABEL_62:
            *(_QWORD *)a4 = v46;
            *(_QWORD *)(a4 + 32) = a1;
            *(_DWORD *)(a4 + 16) = HIDWORD(v43);
            *(_DWORD *)(a4 + 20) = v43;
            OwnPropertySlotByIndex = 1;
            *(_WORD *)(a4 + 48) = 257;
            goto LABEL_43;
          }
          JSC::JSObject::fillGetterPropertySlot();
          goto LABEL_86;
        }
        v55 = *(_DWORD *)(v14 + 16) & 3;
        v57 = *(_QWORD *)(v46 + 8);
        v56 = *(_QWORD *)(v46 + 16);
        if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C))
        {
          v59 = *(_QWORD *)(v46 + 24);
          v58 = *(_QWORD *)(v46 + 32);
          *(_QWORD *)a4 = v57;
          *(_QWORD *)(a4 + 8) = v56;
          *(_DWORD *)(a4 + 16) = HIDWORD(v43);
          *(_QWORD *)(a4 + 32) = a1;
          *(_BYTE *)(a4 + 49) = 3;
          OwnPropertySlotByIndex = 1;
          if (v55 != 2)
            *(_BYTE *)(a4 + 48) = 1;
          *(_BYTE *)(a4 + 51) = 1;
          *(_QWORD *)(a4 + 72) = v59;
          *(_QWORD *)(a4 + 80) = v58;
        }
        else
        {
          *(_QWORD *)a4 = v57;
          *(_QWORD *)(a4 + 8) = v56;
          *(_DWORD *)(a4 + 16) = HIDWORD(v43);
          *(_QWORD *)(a4 + 32) = a1;
          OwnPropertySlotByIndex = 1;
          *(_BYTE *)(a4 + 49) = 3;
          if (v55 != 2)
            *(_BYTE *)(a4 + 48) = 1;
        }
LABEL_43:
        if (!v8)
          return OwnPropertySlotByIndex;
        goto LABEL_44;
      }
LABEL_32:
      if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      {
LABEL_86:
        OwnPropertySlotByIndex = 1;
        goto LABEL_43;
      }
      v32 = *(_DWORD *)(a3 + 16);
      if ((v32 & 0x20) == 0)
      {
        v33 = *(_BYTE **)(a3 + 8);
        v34 = *(unsigned int *)(a3 + 4);
        if ((v32 & 4) != 0)
        {
          if ((_DWORD)v34)
          {
            v65 = *v33 - 48;
            if (v65 > 9 || v34 >= 2 && *v33 == 48)
            {
LABEL_107:
              v66 = 0;
            }
            else
            {
              v67 = v33 + 1;
              v68 = v34 - 1;
              while (v68)
              {
                if (v65 > 0x19999999)
                  goto LABEL_107;
                v69 = *v67 - 48;
                if (v69 > 9)
                  goto LABEL_107;
                v66 = 0;
                v30 = __CFADD__(v69, 10 * v65);
                v65 = v69 + 10 * v65;
                ++v67;
                --v68;
                if (v30)
                  goto LABEL_108;
              }
              v66 = 0x100000000;
              if (v65 == -1)
                v66 = 0;
            }
          }
          else
          {
            v66 = 0;
          }
LABEL_108:
          if ((v66 & 0x100000000) == 0)
            goto LABEL_42;
        }
        else
        {
          if ((_DWORD)v34)
          {
            v35 = *(unsigned __int16 *)v33 - 48;
            if (v35 > 9 || v34 >= 2 && *(_WORD *)v33 == 48)
            {
LABEL_39:
              v36 = 0;
            }
            else
            {
              v40 = (unsigned __int16 *)(v33 + 2);
              v41 = v34 - 1;
              while (v41)
              {
                if (v35 <= 0x19999999)
                {
                  v42 = *v40 - 48;
                  if (v42 <= 9)
                  {
                    v30 = __CFADD__(v42, 10 * v35);
                    v35 = v42 + 10 * v35;
                    ++v40;
                    --v41;
                    if (!v30)
                      continue;
                  }
                }
                goto LABEL_39;
              }
              v48 = v35 == -1;
              v36 = 0x100000000;
              if (v48)
                v36 = 0;
            }
          }
          else
          {
            v36 = 0;
          }
          if ((v36 & 0x100000000) == 0)
            goto LABEL_42;
        }
        OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex();
        goto LABEL_43;
      }
LABEL_42:
      OwnPropertySlotByIndex = 0;
      goto LABEL_43;
    }
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      OwnPropertySlotByIndex = JSC::JSObject::getOwnStaticPropertySlot();
    else
      OwnPropertySlotByIndex = 0;
  }
  do
  {
LABEL_44:
    v37 = __ldaxr((unsigned int *)v8);
    v38 = v37 - 1;
  }
  while (__stlxr(v38, (unsigned int *)v8));
  if (!v38)
  {
    atomic_store(1u, (unsigned int *)v8);
    v60 = (WTF *)MEMORY[0x19AEA3AF8](v8);
    WTF::fastFree(v60, v61);
  }
  return OwnPropertySlotByIndex;
}

uint64_t JSC::RuntimeArray::getOwnPropertySlotByIndex(JSC::RuntimeArray *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  if ((*(unsigned int (**)(_QWORD, JSC::JSObject *, JSC::JSGlobalObject *, uint64_t, JSC::PropertySlot *))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2), a2, a3, a4, a5) <= a3)return JSC::JSObject::getOwnPropertySlotByIndex();
  *(_QWORD *)a4 = (*(uint64_t (**)(_QWORD, JSC::JSObject *, JSC::JSGlobalObject *))(**((_QWORD **)this + 2)
                                                                                            + 24))(*((_QWORD *)this + 2), a2, a3);
  *(_DWORD *)(a4 + 16) = 8;
  *(_QWORD *)(a4 + 32) = this;
  *(_BYTE *)(a4 + 49) = 1;
  return 1;
}

uint64_t JSC::RuntimeArray::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t result;
  unsigned int v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  int v58;
  uint64_t v59;
  uint64_t *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF *v66;
  void *v67;
  WTF::StringImpl *v69[2];
  char v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;

  v5 = *(_QWORD *)(a2 + 56);
  do
    v6 = __ldaxr((unsigned int *)v5);
  while (__stlxr(v6 + 1, (unsigned int *)v5));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  if (v7)
  {
    v9 = v7;
    v10 = 0;
    v11 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v12 = v71;
      v72 = v71;
      v13 = *((_DWORD *)v71 + 4);
      if ((v13 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v71 + 36) & 4) != 0)
          goto LABEL_62;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_62;
      }
      v14 = *a3;
      v15 = *(unsigned int *)(*a3 + 20);
      if (v15 <= 0x13)
      {
        if ((_DWORD)v15)
        {
          v16 = *(WTF::StringImpl ***)(v14 + 8);
          while (*v16 != v71)
          {
            ++v16;
            if (!--v15)
              goto LABEL_21;
          }
          goto LABEL_62;
        }
LABEL_21:
        if ((v13 & 0x20) != 0)
        {
          v37 = *(_DWORD *)v12 + 2;
        }
        else
        {
          if ((v13 & 0x10) != 0)
          {
            *(_DWORD *)v12 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v12 = v69[0];
          }
          v37 = *(_DWORD *)v12;
          *(_DWORD *)v12 += 2;
          if (!v37)
          {
            WTF::StringImpl::destroy(v12, v8);
LABEL_56:
            v38 = (uint64_t *)(v14 + 8);
            v69[0] = v12;
            v39 = *(unsigned int *)(v14 + 20);
            if ((_DWORD)v39 == *(_DWORD *)(v14 + 16))
            {
              v40 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)v69);
              v39 = *(unsigned int *)(v14 + 20);
              v41 = *(_QWORD *)(v14 + 8);
              v42 = *v40;
              *v40 = 0;
              *(_QWORD *)(v41 + 8 * v39) = v42;
            }
            else
            {
              v43 = *v38;
              v69[0] = 0;
              *(_QWORD *)(v43 + 8 * v39) = v12;
            }
            *(_DWORD *)(v14 + 20) = v39 + 1;
            v44 = v69[0];
            v69[0] = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
                WTF::StringImpl::destroy(v44, v8);
              else
                *(_DWORD *)v44 -= 2;
            }
            goto LABEL_62;
          }
        }
        *(_DWORD *)v12 = v37;
        goto LABEL_56;
      }
      if (!*v11 || !*(_DWORD *)(*v11 - 12))
        break;
LABEL_19:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v72, (uint64_t)v69);
      if (v70)
      {
        v12 = v72;
        v14 = *a3;
        v13 = *((_DWORD *)v72 + 4);
        goto LABEL_21;
      }
LABEL_62:
      v45 = v71;
      v71 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v8);
        else
          *(_DWORD *)v45 -= 2;
      }
      if (++v10 == v9)
        goto LABEL_71;
    }
    v17 = *(uint64_t **)(v14 + 8);
    v18 = &v17[v15];
    while (1)
    {
      v19 = *v17;
      v20 = *v11;
      if (*v11
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v20 = *v11) != 0))
      {
        v21 = *(_DWORD *)(v20 - 8);
      }
      else
      {
        v21 = 0;
      }
      v22 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
      v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      v25 = v21 & ((v24 >> 31) ^ v24);
      v26 = (uint64_t *)(v20 + 8 * v25);
      v27 = *v26;
      if (*v26)
      {
        v28 = 0;
        v29 = 1;
        while (v27 != v19)
        {
          if (v27 == -1)
            v28 = v26;
          v25 = (v25 + v29) & v21;
          v26 = (uint64_t *)(v20 + 8 * v25);
          v27 = *v26;
          ++v29;
          if (!*v26)
          {
            if (v28)
            {
              *v28 = 0;
              --*(_DWORD *)(*v11 - 16);
              v26 = v28;
            }
            goto LABEL_36;
          }
        }
        goto LABEL_49;
      }
LABEL_36:
      *v26 = v19;
      v30 = *v11;
      v31 = *v11 ? *(_DWORD *)(v30 - 12) + 1 : 1;
      *(_DWORD *)(v30 - 12) = v31;
      v32 = *v11;
      v33 = *v11 ? *(_DWORD *)(v32 - 12) : 0;
      v34 = (*(_DWORD *)(v32 - 16) + v33);
      v35 = *(unsigned int *)(v32 - 4);
      if (v35 > 0x400)
        break;
      if (3 * v35 <= 4 * v34)
      {
        if ((_DWORD)v35)
          goto LABEL_45;
        v36 = 8;
        goto LABEL_48;
      }
LABEL_49:
      if (++v17 == v18)
        goto LABEL_19;
    }
    if (v35 > 2 * v34)
      goto LABEL_49;
LABEL_45:
    v36 = (_DWORD)v35 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v35));
LABEL_48:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v36, v26);
    goto LABEL_49;
  }
LABEL_71:
  if (!a4)
  {
    v49 = *(WTF::StringImpl **)(*(_QWORD *)(v5 + 41952) + 1768);
    v72 = v49;
    v50 = *((_DWORD *)v49 + 4);
    if ((v50 & 0x20) != 0)
    {
      if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v49 + 36) & 4) != 0)
        goto LABEL_72;
    }
    else if ((a3[3] & 2) == 0)
    {
      goto LABEL_72;
    }
    v51 = *a3;
    v52 = *(unsigned int *)(*a3 + 20);
    if (v52 > 0x13)
    {
      v54 = a3[1];
      if (!v54 || !*(_DWORD *)(v54 - 12))
      {
        v55 = *(WTF::StringImpl ***)(v51 + 8);
        v56 = 8 * v52;
        do
        {
          v57 = *v55++;
          v71 = v57;
          WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v71, (uint64_t)v69);
          v56 -= 8;
        }
        while (v56);
      }
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v72, (uint64_t)v69);
      if (!v70)
        goto LABEL_72;
      v49 = v72;
      v51 = *a3;
      v50 = *((_DWORD *)v72 + 4);
    }
    else if ((_DWORD)v52)
    {
      v53 = *(WTF::StringImpl ***)(v51 + 8);
      while (*v53 != v49)
      {
        ++v53;
        if (!--v52)
          goto LABEL_95;
      }
      goto LABEL_72;
    }
LABEL_95:
    if ((v50 & 0x20) != 0)
    {
      v58 = *(_DWORD *)v49 + 2;
    }
    else
    {
      if ((v50 & 0x10) != 0)
      {
        *(_DWORD *)v49 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase();
        v49 = v69[0];
      }
      v58 = *(_DWORD *)v49;
      *(_DWORD *)v49 += 2;
      if (!v58)
      {
        WTF::StringImpl::destroy(v49, v8);
LABEL_101:
        v69[0] = v49;
        v59 = *(unsigned int *)(v51 + 20);
        if ((_DWORD)v59 == *(_DWORD *)(v51 + 16))
        {
          v60 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v51 + 8, v59 + 1, (unint64_t)v69);
          v62 = *(unsigned int *)(v51 + 20);
          v63 = *(_QWORD *)(v51 + 8);
          v64 = *v60;
          *v60 = 0;
          *(_QWORD *)(v63 + 8 * v62) = v64;
          v65 = v69[0];
          *(_DWORD *)(v51 + 20) = v62 + 1;
          v69[0] = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
              WTF::StringImpl::destroy(v65, v61);
            else
              *(_DWORD *)v65 -= 2;
          }
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v51 + 8) + 8 * v59) = v49;
          *(_DWORD *)(v51 + 20) = v59 + 1;
        }
        goto LABEL_72;
      }
    }
    *(_DWORD *)v49 = v58;
    goto LABEL_101;
  }
LABEL_72:
  result = JSC::JSObject::getOwnNonIndexPropertyNames();
  if (v5)
  {
    do
    {
      v47 = __ldaxr((unsigned int *)v5);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, (unsigned int *)v5));
    if (!v48)
    {
      atomic_store(1u, (unsigned int *)v5);
      v66 = (WTF *)MEMORY[0x19AEA3AF8](v5);
      return WTF::fastFree(v66, v67);
    }
  }
  return result;
}

uint64_t JSC::RuntimeArray::finishCreation(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  *(_QWORD *)(result + 16) = a3;
  return result;
}

uint64_t JSC::RuntimeMethod::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t OwnPropertySlotByIndex;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  void *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;

  v7 = *(_QWORD *)(a2 + 56);
  do
    v8 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v8 + 1, (unsigned int *)v7));
  if (*(_QWORD *)(*(_QWORD *)(v7 + 41952) + 1768) != a3)
  {
    if (!(a3 >> 4))
      goto LABEL_18;
    v9 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if (((a3 >> 4) & ~*(_DWORD *)(v9 + 0x20)) != 0)
      goto LABEL_18;
    v10 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
    if (!v10)
    {
      v22 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
      if (!v22 || *(_BYTE *)(v22 + 5) != 1 && *(_DWORD *)(v22 + 80) < 2u)
        goto LABEL_18;
      v10 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56));
      if (!v10)
        goto LABEL_18;
    }
    if (!*(_DWORD *)(v10 + 24))
      goto LABEL_18;
    v11 = *(_QWORD *)(v10 + 16);
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(unsigned int *)(v10 + 8);
    v14 = *(_DWORD *)(a3 + 16);
    if ((v11 & 1) != 0)
    {
      if ((v14 & 0x20) != 0)
        v14 = *(_DWORD *)(a3 + 32);
      v15 = *(_DWORD *)(v10 + 12);
      v16 = (v14 >> 8) & *(_QWORD *)&v15;
      v17 = *(unsigned __int8 *)(v12 + v16);
      if (!*(_BYTE *)(v12 + v16))
        goto LABEL_18;
      v18 = v12 + v13;
      v19 = 1;
      while (1)
      {
        v20 = *(_QWORD *)(v18 + 8 * (v17 - 1));
        if (a3 == (v20 & 0xFFFFFFFFFFFFLL))
          break;
        v16 = ((_DWORD)v16 + v19) & v15;
        v17 = *(unsigned __int8 *)(v12 + v16);
        ++v19;
        if (!*(_BYTE *)(v12 + v16))
          goto LABEL_18;
      }
      v35 = (v20 >> 16) & 0xFF00000000 | HIBYTE(v20);
    }
    else
    {
      if ((v14 & 0x20) != 0)
        v14 = *(_DWORD *)(a3 + 32);
      v41 = *(_DWORD *)(v10 + 12);
      v42 = v41 & (v14 >> 8);
      v43 = *(_DWORD *)(v12 + 4 * v42);
      if (!v43)
        goto LABEL_18;
      v44 = v12 + 4 * v13;
      v45 = 1;
      while (1)
      {
        v46 = (v43 - 1);
        if (*(_QWORD *)(v44 + 16 * v46) == a3)
          break;
        v42 = (v42 + v45) & v41;
        v43 = *(_DWORD *)(v12 + 4 * v42);
        ++v45;
        if (!v43)
          goto LABEL_18;
      }
      v35 = *(unsigned int *)(v44 + 16 * v46 + 8) | ((unint64_t)*(unsigned __int8 *)(v44 + 16 * v46 + 12) << 32);
    }
    if ((_DWORD)v35 != -1)
    {
      if ((int)v35 > 63)
      {
        v36 = *(_QWORD *)(a1 + 8) - 8;
        v37 = 0x3F00000000 - (v35 << 32);
      }
      else
      {
        v36 = a1 + 16;
        v37 = v35 << 32;
      }
      v38 = *(_QWORD *)(v36 + (v37 >> 29));
      if ((v38 & 0xFFFE000000000002) != 0)
        goto LABEL_48;
      v39 = *(unsigned __int8 *)(v38 + 5);
      if (v39 != 6)
      {
        if (v39 != 5)
        {
LABEL_48:
          *(_QWORD *)a4 = v38;
          *(_QWORD *)(a4 + 32) = a1;
          *(_DWORD *)(a4 + 16) = HIDWORD(v35);
          *(_DWORD *)(a4 + 20) = v35;
          OwnPropertySlotByIndex = 1;
          *(_WORD *)(a4 + 48) = 257;
          goto LABEL_29;
        }
        JSC::JSObject::fillGetterPropertySlot();
        goto LABEL_72;
      }
      v47 = *(_DWORD *)(v9 + 16) & 3;
      v49 = *(_QWORD *)(v38 + 8);
      v48 = *(_QWORD *)(v38 + 16);
      if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x4C))
      {
        v51 = *(_QWORD *)(v38 + 24);
        v50 = *(_QWORD *)(v38 + 32);
        *(_QWORD *)a4 = v49;
        *(_QWORD *)(a4 + 8) = v48;
        *(_DWORD *)(a4 + 16) = HIDWORD(v35);
        *(_QWORD *)(a4 + 32) = a1;
        *(_BYTE *)(a4 + 49) = 3;
        OwnPropertySlotByIndex = 1;
        if (v47 != 2)
          *(_BYTE *)(a4 + 48) = 1;
        *(_BYTE *)(a4 + 51) = 1;
        *(_QWORD *)(a4 + 72) = v51;
        *(_QWORD *)(a4 + 80) = v50;
      }
      else
      {
        *(_QWORD *)a4 = v49;
        *(_QWORD *)(a4 + 8) = v48;
        *(_DWORD *)(a4 + 16) = HIDWORD(v35);
        *(_QWORD *)(a4 + 32) = a1;
        OwnPropertySlotByIndex = 1;
        *(_BYTE *)(a4 + 49) = 3;
        if (v47 != 2)
          *(_BYTE *)(a4 + 48) = 1;
      }
LABEL_29:
      if (!v7)
        return OwnPropertySlotByIndex;
      goto LABEL_30;
    }
LABEL_18:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
    {
LABEL_72:
      OwnPropertySlotByIndex = 1;
      goto LABEL_29;
    }
    if (a3)
    {
      v23 = *(_DWORD *)(a3 + 16);
      if ((v23 & 0x20) == 0)
      {
        v24 = *(_BYTE **)(a3 + 8);
        v25 = *(unsigned int *)(a3 + 4);
        if ((v23 & 4) != 0)
        {
          if (!(_DWORD)v25 || (v54 = *v24 - 48, v54 > 9) || v25 >= 2 && *v24 == 48)
          {
LABEL_77:
            v55 = 0;
          }
          else
          {
            v56 = v25 - 1;
            v57 = v24 + 1;
            while (v56)
            {
              if (v54 > 0x19999999)
                goto LABEL_77;
              v58 = *v57 - 48;
              if (v58 > 9)
                goto LABEL_77;
              v55 = 0;
              v34 = __CFADD__(v58, 10 * v54);
              v54 = v58 + 10 * v54;
              --v56;
              ++v57;
              if (v34)
                goto LABEL_78;
            }
            if (v54 == -1)
              v55 = 0;
            else
              v55 = 0x100000000;
          }
LABEL_78:
          if ((v55 & 0x100000000) == 0)
            goto LABEL_28;
        }
        else
        {
          if ((_DWORD)v25
            && (v26 = *(unsigned __int16 *)v24 - 48, v26 <= 9)
            && (v25 < 2 || *(_WORD *)v24 != 48))
          {
            v31 = (unsigned __int16 *)(v24 + 2);
            v32 = v25 - 1;
            while (v32)
            {
              if (v26 <= 0x19999999)
              {
                v33 = *v31 - 48;
                if (v33 <= 9)
                {
                  v34 = __CFADD__(v33, 10 * v26);
                  v26 = v33 + 10 * v26;
                  ++v31;
                  --v32;
                  if (!v34)
                    continue;
                }
              }
              goto LABEL_26;
            }
            v40 = v26 == -1;
            v27 = 0x100000000;
            if (v40)
              v27 = 0;
          }
          else
          {
LABEL_26:
            v27 = 0;
          }
          if ((v27 & 0x100000000) == 0)
            goto LABEL_28;
        }
        OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex();
        goto LABEL_29;
      }
    }
LABEL_28:
    OwnPropertySlotByIndex = 0;
    goto LABEL_29;
  }
  *(_QWORD *)a4 = JSC::methodLengthGetter;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 14;
  *(_QWORD *)(a4 + 32) = a1;
  *(_WORD *)(a4 + 48) = 769;
  OwnPropertySlotByIndex = 1;
  do
  {
LABEL_30:
    v28 = __ldaxr((unsigned int *)v7);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, (unsigned int *)v7));
  if (!v29)
  {
    atomic_store(1u, (unsigned int *)v7);
    v52 = (WTF *)MEMORY[0x19AEA3AF8](v7);
    WTF::fastFree(v52, v53);
  }
  return OwnPropertySlotByIndex;
}

uint64_t JSC::RuntimeMethod::RuntimeMethod(JSC::RuntimeMethod *this, JSC::VM *a2, JSC::Structure *a3, Method *a4)
{
  uint64_t result;

  result = JSC::InternalFunction::InternalFunction();
  *(_QWORD *)(result + 48) = a4;
  return result;
}

{
  uint64_t result;

  result = JSC::InternalFunction::InternalFunction();
  *(_QWORD *)(result + 48) = a4;
  return result;
}

uint64_t JSC::callRuntimeMethod(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  BOOL v10;
  uint64_t v11;
  _DWORD *v13;
  WebCore::HTMLPlugInElement *v16;
  uint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  const WTF::String *v20;
  JSValue v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v3 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(v3 + 48))
    return 10;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError();
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v10 = v9 == &JSC::Bindings::RuntimeObject::s_info;
  else
    v10 = 1;
  if (v10)
  {
    if ((_DWORD)v8)
      goto LABEL_18;
    return JSC::throwTypeError();
  }
  v11 = 16 * v8;
  do
    v11 = *(_QWORD *)(v11 + 16);
  while ((char **)v11 != &JSC::Bindings::RuntimeObject::s_info && v11 != 0);
  if (!v11)
  {
    if (v9 == &WebCore::JSHTMLElement::s_info)
      goto LABEL_41;
    do
      v9 = (char **)v9[2];
    while (v9 != &WebCore::JSHTMLElement::s_info && v9 != 0);
    if (v9)
    {
LABEL_41:
      v16 = *(WebCore::HTMLPlugInElement **)(v6 + 24);
      if ((*(unsigned int (**)(WebCore::HTMLPlugInElement *))(*(_QWORD *)v16 + 200))(v16))
      {
        v17 = WebCore::HTMLPlugInElement::bindingsInstance(v16);
        if (v17)
        {
          v13 = (_DWORD *)v17;
          v18 = *(_QWORD *)(v17 + 16);
          if (v18)
          {
            if (*(_BYTE *)(v18 + 12))
              goto LABEL_19;
          }
        }
      }
    }
    return JSC::throwTypeError();
  }
LABEL_18:
  v13 = *(_DWORD **)(v6 + 16);
  if (v13)
  {
LABEL_19:
    ++v13[2];
    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 120))(v13);
    v7 = (*(uint64_t (**)(_DWORD *, JSC *, JSC::JSGlobalObject *, uint64_t))(*(_QWORD *)v13 + 24))(v13, this, a2, v3);
    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 128))(v13);
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 96))(v13);
    else
      --v13[2];
    return v7;
  }
  v19 = (JSC::VM *)*((_QWORD *)this + 7);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21.super.isa = (Class)JSC::createReferenceError(this, (JSC::JSGlobalObject *)&v24, v20);
  v7 = JSC::VM::throwException(v19, this, v21);
  v23 = v24;
  v24 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  return v7;
}

uint64_t JSC::RuntimeMethod::finishCreation(JSC::RuntimeMethod *this, JSC::VM *a2, const WTF::String *a3)
{
  return JSC::InternalFunction::finishCreation();
}

unint64_t JSC::methodLengthGetter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError();
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &JSC::RuntimeMethod::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &JSC::RuntimeMethod::s_info && v4 != 0);
  }
  if (v3)
    return (***(unsigned int (****)(_QWORD))(a2 + 48))(*(_QWORD *)(a2 + 48)) | 0xFFFE000000000000;
  else
    return JSC::throwTypeError();
}

uint64_t JSC::RuntimeMethod::subspaceForImpl(uint64_t a1)
{
  return *(_QWORD *)(a1 + 41456) + 23184;
}

_DWORD *JSC::Bindings::RuntimeObject::destroy(JSC::Bindings::RuntimeObject *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 96))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t JSC::Bindings::RuntimeObject::getCallData@<X0>(JSC::Bindings::RuntimeObject *this@<X0>, JSCell *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  *(_BYTE *)a3 = 0;
  result = *((_QWORD *)this + 2);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, JSCell *))(*(_QWORD *)result + 32))(result, a2);
    if ((_DWORD)result)
    {
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 8) = JSC::Bindings::callRuntimeObject;
      *(_BYTE *)(a3 + 16) = 0;
    }
  }
  return result;
}

uint64_t JSC::Bindings::RuntimeObject::getConstructData@<X0>(JSC::Bindings::RuntimeObject *this@<X0>, JSCell *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  *(_BYTE *)a3 = 0;
  result = *((_QWORD *)this + 2);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, JSCell *))(*(_QWORD *)result + 48))(result, a2);
    if ((_DWORD)result)
    {
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 8) = JSC::Bindings::callRuntimeConstructor;
      *(_BYTE *)(a3 + 16) = 0;
    }
  }
  return result;
}

uint64_t JSC::Bindings::RuntimeObject::put(uint64_t a1, JSC *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::VM *v14;
  const WTF::String *v15;
  JSValue v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v21;

  v6 = *(_DWORD **)(a1 + 16);
  if (v6)
  {
    ++v6[2];
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 120))(v6);
    v11 = (**(uint64_t (***)(_DWORD *))v6)(v6);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v11 + 8))(v11, a3, v6);
    if (v12)
    {
      v13 = (*(uint64_t (**)(uint64_t, JSC *, _DWORD *, uint64_t))(*(_QWORD *)v12 + 8))(v12, a2, v6, a4);
    }
    else
    {
      if (((*(uint64_t (**)(_DWORD *, JSC *, uint64_t, uint64_t))(*(_QWORD *)v6 + 8))(v6, a2, a3, a4) & 1) != 0)
      {
        v19 = 0;
        goto LABEL_12;
      }
      v13 = (*(uint64_t (**)(_DWORD *, uint64_t, JSC *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 112))(v6, a1, a2, a3, a4, a5);
    }
    v19 = v13;
LABEL_12:
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 128))(v6);
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 96))(v6);
    else
      --v6[2];
    return v19;
  }
  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16.super.isa = (Class)JSC::createReferenceError(a2, (JSC::JSGlobalObject *)&v21, v15);
  JSC::VM::throwException(v14, a2, v16);
  v18 = v21;
  v21 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  return 0;
}

uint64_t JSC::Bindings::RuntimeObject::deleteProperty()
{
  return 0;
}

uint64_t JSC::Bindings::RuntimeObject::getOwnPropertySlot(uint64_t a1, JSC::VM **a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const WTF::String *v15;
  JSValue v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t OwnPropertySlotByIndex;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v49;
  int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  void *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned int v67;
  WTF::StringImpl *v68;

  v8 = a2[7];
  do
    v9 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v9 + 1, (unsigned int *)v8));
  v11 = a1 + 16;
  v10 = *(_DWORD **)(a1 + 16);
  if (!v10)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16.super.isa = (Class)JSC::createReferenceError((JSC *)a2, (JSC::JSGlobalObject *)&v68, v15);
    JSC::VM::throwException(v8, (JSC::JSGlobalObject *)a2, v16);
    v18 = v68;
    v68 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    goto LABEL_39;
  }
  if (*(_QWORD *)(*((_QWORD *)v8 + 5244) + 2768) == a3)
  {
    if (!(a3 >> 4))
      goto LABEL_28;
    v19 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if (((a3 >> 4) & ~*(_DWORD *)(v19 + 0x20)) != 0)
      goto LABEL_28;
    v20 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
    if (!v20)
    {
      v32 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
      if (!v32 || *(_BYTE *)(v32 + 5) != 1 && *(_DWORD *)(v32 + 80) < 2u)
        goto LABEL_28;
      v20 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), a2[7]);
      if (!v20)
        goto LABEL_28;
    }
    if (!*(_DWORD *)(v20 + 24))
      goto LABEL_28;
    v21 = *(_QWORD *)(v20 + 16);
    v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
    v23 = *(unsigned int *)(v20 + 8);
    v24 = *(_DWORD *)(a3 + 16);
    if ((v21 & 1) != 0)
    {
      if ((v24 & 0x20) != 0)
        v24 = *(_DWORD *)(a3 + 32);
      v25 = *(_DWORD *)(v20 + 12);
      v26 = (v24 >> 8) & *(_QWORD *)&v25;
      v27 = *(unsigned __int8 *)(v22 + v26);
      if (!*(_BYTE *)(v22 + v26))
        goto LABEL_28;
      v28 = v22 + v23;
      v29 = 1;
      while (1)
      {
        v30 = *(_QWORD *)(v28 + 8 * (v27 - 1));
        if (a3 == (v30 & 0xFFFFFFFFFFFFLL))
          break;
        v26 = ((_DWORD)v26 + v29) & v25;
        v27 = *(unsigned __int8 *)(v22 + v26);
        ++v29;
        if (!*(_BYTE *)(v22 + v26))
          goto LABEL_28;
      }
      v42 = (v30 >> 16) & 0xFF00000000 | HIBYTE(v30);
    }
    else
    {
      if ((v24 & 0x20) != 0)
        v24 = *(_DWORD *)(a3 + 32);
      v50 = *(_DWORD *)(v20 + 12);
      v51 = v50 & (v24 >> 8);
      v52 = *(_DWORD *)(v22 + 4 * v51);
      if (!v52)
        goto LABEL_28;
      v53 = v22 + 4 * v23;
      v54 = 1;
      while (1)
      {
        v55 = (v52 - 1);
        if (*(_QWORD *)(v53 + 16 * v55) == a3)
          break;
        v51 = (v51 + v54) & v50;
        v52 = *(_DWORD *)(v22 + 4 * v51);
        ++v54;
        if (!v52)
          goto LABEL_28;
      }
      v42 = *(unsigned int *)(v53 + 16 * v55 + 8) | ((unint64_t)*(unsigned __int8 *)(v53 + 16 * v55 + 12) << 32);
    }
    if ((_DWORD)v42 != -1)
    {
      if ((int)v42 > 63)
      {
        v11 = *(_QWORD *)(a1 + 8) - 8;
        v43 = 0x3F00000000 - (v42 << 32);
      }
      else
      {
        v43 = v42 << 32;
      }
      v44 = *(_QWORD *)(v11 + (v43 >> 29));
      if ((v44 & 0xFFFE000000000002) != 0)
        goto LABEL_57;
      v45 = *(unsigned __int8 *)(v44 + 5);
      if (v45 != 6)
      {
        if (v45 != 5)
        {
LABEL_57:
          *(_QWORD *)a4 = v44;
          *(_QWORD *)(a4 + 32) = a1;
          *(_DWORD *)(a4 + 16) = HIDWORD(v42);
          *(_DWORD *)(a4 + 20) = v42;
          OwnPropertySlotByIndex = 1;
          *(_WORD *)(a4 + 48) = 257;
          goto LABEL_40;
        }
        JSC::JSObject::fillGetterPropertySlot();
        goto LABEL_90;
      }
      v56 = *(_DWORD *)(v19 + 16) & 3;
      v58 = *(_QWORD *)(v44 + 8);
      v57 = *(_QWORD *)(v44 + 16);
      if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x4C))
      {
        v60 = *(_QWORD *)(v44 + 24);
        v59 = *(_QWORD *)(v44 + 32);
        *(_QWORD *)a4 = v58;
        *(_QWORD *)(a4 + 8) = v57;
        *(_DWORD *)(a4 + 16) = HIDWORD(v42);
        *(_QWORD *)(a4 + 32) = a1;
        *(_BYTE *)(a4 + 49) = 3;
        OwnPropertySlotByIndex = 1;
        if (v56 != 2)
          *(_BYTE *)(a4 + 48) = 1;
        *(_BYTE *)(a4 + 51) = 1;
        *(_QWORD *)(a4 + 72) = v60;
        *(_QWORD *)(a4 + 80) = v59;
      }
      else
      {
        *(_QWORD *)a4 = v58;
        *(_QWORD *)(a4 + 8) = v57;
        *(_DWORD *)(a4 + 16) = HIDWORD(v42);
        *(_QWORD *)(a4 + 32) = a1;
        OwnPropertySlotByIndex = 1;
        *(_BYTE *)(a4 + 49) = 3;
        if (v56 != 2)
          *(_BYTE *)(a4 + 48) = 1;
      }
LABEL_40:
      if (!v8)
        return OwnPropertySlotByIndex;
      goto LABEL_62;
    }
LABEL_28:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
    {
LABEL_90:
      OwnPropertySlotByIndex = 1;
      goto LABEL_40;
    }
    if (a3)
    {
      v33 = *(_DWORD *)(a3 + 16);
      if ((v33 & 0x20) == 0)
      {
        v34 = *(_BYTE **)(a3 + 8);
        v35 = *(unsigned int *)(a3 + 4);
        if ((v33 & 4) != 0)
        {
          if ((_DWORD)v35)
          {
            v63 = *v34 - 48;
            if (v63 > 9 || v35 >= 2 && *v34 == 48)
            {
LABEL_95:
              v64 = 0;
            }
            else
            {
              v65 = v34 + 1;
              v66 = v35 - 1;
              while (v66)
              {
                if (v63 > 0x19999999)
                  goto LABEL_95;
                v67 = *v65 - 48;
                if (v67 > 9)
                  goto LABEL_95;
                v64 = 0;
                v41 = __CFADD__(v67, 10 * v63);
                v63 = v67 + 10 * v63;
                ++v65;
                --v66;
                if (v41)
                  goto LABEL_96;
              }
              v64 = 0x100000000;
              if (v63 == -1)
                v64 = 0;
            }
          }
          else
          {
            v64 = 0;
          }
LABEL_96:
          if ((v64 & 0x100000000) == 0)
            goto LABEL_39;
        }
        else
        {
          if ((_DWORD)v35)
          {
            v36 = *(unsigned __int16 *)v34 - 48;
            if (v36 > 9 || v35 >= 2 && *(_WORD *)v34 == 48)
            {
LABEL_36:
              v37 = 0;
            }
            else
            {
              v38 = (unsigned __int16 *)(v34 + 2);
              v39 = v35 - 1;
              while (v39)
              {
                if (v36 <= 0x19999999)
                {
                  v40 = *v38 - 48;
                  if (v40 <= 9)
                  {
                    v41 = __CFADD__(v40, 10 * v36);
                    v36 = v40 + 10 * v36;
                    ++v38;
                    --v39;
                    if (!v41)
                      continue;
                  }
                }
                goto LABEL_36;
              }
              v49 = v36 == -1;
              v37 = 0x100000000;
              if (v49)
                v37 = 0;
            }
          }
          else
          {
            v37 = 0;
          }
          if ((v37 & 0x100000000) == 0)
            goto LABEL_39;
        }
        OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex();
        goto LABEL_40;
      }
    }
LABEL_39:
    OwnPropertySlotByIndex = 0;
    goto LABEL_40;
  }
  ++v10[2];
  (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 120))(v10);
  v12 = (**(uint64_t (***)(_DWORD *))v10)(v10);
  if (!v12)
    goto LABEL_26;
  v13 = v12;
  if (!(*(uint64_t (**)(uint64_t, unint64_t, _DWORD *))(*(_QWORD *)v12 + 8))(v12, a3, v10))
  {
    if ((**(uint64_t (***)(uint64_t, unint64_t, _DWORD *))v13)(v13, a3, v10))
    {
      *(_QWORD *)a4 = JSC::Bindings::methodGetter;
      *(_QWORD *)(a4 + 8) = 0;
      v14 = 10;
      goto LABEL_59;
    }
    if ((*(uint64_t (**)(uint64_t, JSC::VM **, _DWORD *, unint64_t))(*(_QWORD *)v13 + 16))(v13, a2, v10, a3) != 10)
    {
      *(_QWORD *)a4 = JSC::Bindings::fallbackObjectGetter;
      *(_QWORD *)(a4 + 8) = 0;
      v14 = 14;
      goto LABEL_59;
    }
LABEL_26:
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 128))(v10);
    OwnPropertySlotByIndex = (*(uint64_t (**)(_DWORD *, uint64_t, JSC::VM **, unint64_t, uint64_t))(*(_QWORD *)v10 + 104))(v10, a1, a2, a3, a4);
    goto LABEL_60;
  }
  *(_QWORD *)a4 = JSC::Bindings::fieldGetter;
  *(_QWORD *)(a4 + 8) = 0;
  v14 = 8;
LABEL_59:
  *(_DWORD *)(a4 + 16) = v14;
  *(_QWORD *)(a4 + 32) = a1;
  *(_BYTE *)(a4 + 49) = 3;
  (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 128))(v10);
  OwnPropertySlotByIndex = 1;
LABEL_60:
  if (v10[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 96))(v10);
  else
    --v10[2];
  do
  {
LABEL_62:
    v46 = __ldaxr((unsigned int *)v8);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, (unsigned int *)v8));
  if (!v47)
  {
    atomic_store(1u, (unsigned int *)v8);
    v61 = (WTF *)MEMORY[0x19AEA3AF8](v8);
    WTF::fastFree(v61, v62);
  }
  return OwnPropertySlotByIndex;
}

WTF::StringImpl *JSC::Bindings::RuntimeObject::getOwnPropertyNames(uint64_t a1, JSC *a2, uint64_t a3)
{
  _DWORD *v4;
  WTF::StringImpl *result;
  JSC::VM *v7;
  const WTF::String *v8;
  JSValue v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v4 = *(_DWORD **)(a1 + 16);
  if (v4)
  {
    ++v4[2];
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 120))(v4);
    (*(void (**)(_DWORD *, JSC *, uint64_t))(*(_QWORD *)v4 + 64))(v4, a2, a3);
    result = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 128))(v4);
    if (v4[2] == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 96))(v4);
    else
      --v4[2];
  }
  else
  {
    v7 = (JSC::VM *)*((_QWORD *)a2 + 7);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9.super.isa = (Class)JSC::createReferenceError(a2, (JSC::JSGlobalObject *)&v11, v8);
    JSC::VM::throwException(v7, a2, v9);
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t JSC::Bindings::RuntimeObject::RuntimeObject(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  int v4;
  uint64_t v5;

  v4 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v4;
  *(_QWORD *)(result + 8) = 0;
  v5 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 16) = v5;
  return result;
}

{
  int v4;
  uint64_t v5;

  v4 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v4;
  *(_QWORD *)(result + 8) = 0;
  v5 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 16) = v5;
  return result;
}

WTF::StringImpl *JSC::Bindings::RuntimeObject::finishCreation(JSC::Bindings::RuntimeObject *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  _QWORD v9[2];
  int v10;
  int v11;
  uint64_t v12;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2768);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::JSFunction::create();
  v9[0] = 0;
  v9[1] = this;
  v10 = -1;
  v11 = 0x1000000;
  v12 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)this, a2, v4, v5, 4, (uint64_t)v9);
  result = v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

JSC *JSC::Bindings::convertRuntimeObjectToPrimitive(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC *v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int16x8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  const WTF::String *v25;
  JSValue v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v3 = this;
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (JSC *)JSC::throwTypeError();
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &JSC::Bindings::RuntimeObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &JSC::Bindings::RuntimeObject::s_info && v8 != 0);
  }
  if (!v7)
    return (JSC *)JSC::throwTypeError();
  v12 = *(_DWORD **)(v5 + 16);
  if (!v12)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v26.super.isa = (Class)JSC::createReferenceError(v3, (JSC::JSGlobalObject *)&v29, v25);
    v11 = JSC::VM::throwException(v4, v3, v26);
    v28 = v29;
    v29 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    return (JSC *)v11;
  }
  ++v12[2];
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v29 = v4;
LABEL_25:
    JSC::throwTypeError();
    v17 = 0;
    goto LABEL_40;
  }
  v13 = *((_QWORD *)a2 + 6);
  v29 = v4;
  if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 2)
    goto LABEL_25;
  v14 = *(_QWORD *)(v13 + 8);
  if ((v14 & 1) == 0)
  {
    if (v14)
    {
LABEL_19:
      v15 = *(int16x8_t **)(v14 + 8);
      v16 = *(unsigned int *)(v14 + 4) | ((unint64_t)((*(_DWORD *)(v14 + 16) >> 2) & 1) << 32);
      goto LABEL_20;
    }
    goto LABEL_28;
  }
  if ((v14 & 2) == 0)
  {
    v14 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
    if (v14)
      goto LABEL_19;
LABEL_28:
    v15 = 0;
    v16 = 0x100000000;
    goto LABEL_20;
  }
  v18 = *(_QWORD *)((*(_QWORD *)(v13 + 20) & 0xFFFFFFFFFLL) + 8);
  if (v18)
  {
    v15 = *(int16x8_t **)(v18 + 8);
    v19 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v15 = 0;
    v19 = 0x100000000;
  }
  v20 = *(_QWORD *)(v13 + 24);
  v21 = v20 >> 16;
  if (v19 <= (v20 >> 16))
  {
    v16 = 0x100000000;
    v15 = (int16x8_t *)"";
    goto LABEL_20;
  }
  v22 = *(_DWORD *)(v13 + 16);
  if (v19 - (v20 >> 16) <= v22)
  {
    if (!(_DWORD)v21)
    {
      v16 = v19;
      goto LABEL_20;
    }
    v22 = v19 - (v20 >> 16);
  }
  v23 = (v20 >> 16);
  v16 = v22;
  v24 = v19 - (unint64_t)v21;
  if ((v19 & 0x100000000) == 0)
  {
    if (v24 < v22)
      goto LABEL_61;
    v15 = (int16x8_t *)((char *)v15 + 2 * v23);
LABEL_20:
    if ((!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
      && (WTF::equal(v15, v16, (uint8x8_t *)"default") & 1) == 0)
    {
      if ((WTF::equal(v15, v16, (uint8x8_t *)"number") & 1) != 0)
      {
        v17 = 1;
        goto LABEL_40;
      }
      if ((WTF::equal(v15, v16, (uint8x8_t *)"string") & 1) != 0)
      {
        v17 = 2;
        goto LABEL_40;
      }
      JSC::throwTypeError();
    }
    v17 = 0;
LABEL_40:
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    {
      v11 = 0;
    }
    else
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 120))(v12);
      v11 = (*(uint64_t (**)(_DWORD *, JSC *, uint64_t))(*(_QWORD *)v12 + 72))(v12, v3, v17);
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 128))(v12);
    }
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 96))(v12);
    else
      --v12[2];
    return (JSC *)v11;
  }
  if (v24 >= v22)
  {
    v15 = (int16x8_t *)((char *)v15 + v23);
    v16 = v22 | 0x100000000;
    goto LABEL_20;
  }
LABEL_61:
  __break(1u);
  return this;
}

uint64_t JSC::Bindings::RuntimeObject::invalidate(JSC::Bindings::RuntimeObject *this)
{
  uint64_t result;
  uint64_t v3;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    *((_QWORD *)this + 2) = 0;
    return result;
  }
  v3 = *(_QWORD *)(result + 24);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *(_QWORD *)(result + 24) = 0;
    result = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!result)
      return result;
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  if (*(_DWORD *)(result + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  --*(_DWORD *)(result + 8);
  return result;
}

uint64_t JSC::Bindings::fallbackObjectGetter(JSC *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  uint64_t v6;
  uint64_t v7;
  JSC::VM *v9;
  const WTF::String *v10;
  JSValue v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v4 = *(_DWORD **)(a2 + 16);
  if (v4)
  {
    ++v4[2];
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 120))(v4);
    v6 = (**(uint64_t (***)(_DWORD *))v4)(v4);
    v7 = (*(uint64_t (**)(uint64_t, JSC *, _DWORD *, uint64_t))(*(_QWORD *)v6 + 16))(v6, a1, v4, a3);
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 128))(v4);
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 96))(v4);
    else
      --v4[2];
  }
  else
  {
    v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11.super.isa = (Class)JSC::createReferenceError(a1, (JSC::JSGlobalObject *)&v14, v10);
    v7 = JSC::VM::throwException(v9, a1, v11);
    v13 = v14;
    v14 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return v7;
}

uint64_t JSC::Bindings::fieldGetter(JSC *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  uint64_t v6;
  uint64_t (***v7)(_QWORD, JSC *, _DWORD *);
  uint64_t v8;
  JSC::VM *v10;
  const WTF::String *v11;
  JSValue v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = *(_DWORD **)(a2 + 16);
  if (v4)
  {
    ++v4[2];
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 120))(v4);
    v6 = (**(uint64_t (***)(_DWORD *))v4)(v4);
    v7 = (uint64_t (***)(_QWORD, JSC *, _DWORD *))(*(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v6 + 8))(v6, a3, v4);
    v8 = (**v7)(v7, a1, v4);
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 128))(v4);
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 96))(v4);
    else
      --v4[2];
  }
  else
  {
    v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12.super.isa = (Class)JSC::createReferenceError(a1, (JSC::JSGlobalObject *)&v15, v11);
    v8 = JSC::VM::throwException(v10, a1, v12);
    v14 = v15;
    v15 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  return v8;
}

uint64_t JSC::Bindings::methodGetter(JSC *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  uint64_t v6;
  JSC::VM *v8;
  const WTF::String *v9;
  JSValue v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v4 = *(_DWORD **)(a2 + 16);
  if (v4)
  {
    ++v4[2];
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 120))(v4);
    v6 = (*(uint64_t (**)(_DWORD *, JSC *, uint64_t))(*(_QWORD *)v4 + 16))(v4, a1, a3);
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 128))(v4);
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 96))(v4);
    else
      --v4[2];
  }
  else
  {
    v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10.super.isa = (Class)JSC::createReferenceError(a1, (JSC::JSGlobalObject *)&v13, v9);
    v6 = JSC::VM::throwException(v8, a1, v10);
    v12 = v13;
    v13 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  return v6;
}

uint64_t JSC::Bindings::callRuntimeObject(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;

  v4 = *(_DWORD **)(*(_QWORD *)(a2 + 24) + 16);
  if (v4)
    ++v4[2];
  (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 120))(v4);
  v5 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a1, a2);
  (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 128))(v4);
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 96))(v4);
  else
    --v4[2];
  return v5;
}

uint64_t JSC::Bindings::callRuntimeConstructor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v8;
  int v9;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_DWORD **)(v4 + 16);
  if (v5)
    ++v5[2];
  (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 120))(v5);
  v8 = a2 + 48;
  v9 = *(_DWORD *)(a2 + 32) - 1;
  v6 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v5 + 56))(v5, a1, a2, &v8);
  (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 128))(v5);
  if ((v6 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v6 + 5) > 0x16u)
    v4 = v6;
  if (v5[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 96))(v5);
  else
    --v5[2];
  return v4;
}

uint64_t JSC::Bindings::RuntimeObject::subspaceForImpl(uint64_t a1)
{
  return *(_QWORD *)(a1 + 41456) + 23272;
}

uint64_t JSC::Bindings::RootObject::globalObject(JSC::Bindings::RootObject *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

void JSC::Bindings::RootObject::~RootObject(JSC::Bindings::RootObject *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3394D70;
  if (*((_BYTE *)this + 12))
    JSC::Bindings::RootObject::invalidate(this, a2);
  v3 = *((_QWORD *)this + 6);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = v4 + 8;
      do
      {
        if (*(_QWORD *)(v6 - 8) != -1 && *(_QWORD *)v6)
        {
          *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
          *(_QWORD *)v6 = 0;
        }
        v6 += 16;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v7 = *((_QWORD *)this + 4);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = (uint64_t *)(v8 - 16);
    v10 = *(_QWORD *)(((v8 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v11 = *(uint64_t **)(v8 - 8);
    if (v11)
    {
      v12 = *v9;
      *v11 = *v9;
      *(_QWORD *)(v12 + 8) = v11;
      *v9 = 0;
      v9[1] = 0;
    }
    *v9 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;
    *((_QWORD *)this + 3) = 0;
  }
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
}

{
  WTF *v2;
  void *v3;

  JSC::Bindings::RootObject::~RootObject(this, a2);
  WTF::fastFree(v2, v3);
}

_QWORD *JSC::Bindings::RootObject::invalidate(_QWORD *this, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  Class *v27;
  Class *v28;
  uint64_t v29;
  uint64_t v30;
  Class *v31;
  JSValue v32;
  _QWORD *v33;
  JSC::Heap *v34;
  Class *v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  int v43;
  unsigned int v44;

  if (!*((_BYTE *)this + 12))
    return this;
  v2 = this;
  v3 = this[5];
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (uint64_t *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = (uint64_t *)this[5];
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = (uint64_t *)this[5];
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v6 = (uint64_t *)(v3 + 16 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (uint64_t *)(v3 + 16 * v4);
  if (v3)
  {
LABEL_9:
    v8 = (uint64_t *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
  if (v8 == v6)
    goto LABEL_31;
  do
  {
    v9 = *v6;
    this = *(_QWORD **)(*v6 + 16);
    if (!this)
    {
      *(_QWORD *)(v9 + 16) = 0;
      goto LABEL_23;
    }
    v10 = this[3];
    if (v10)
    {
      *(_QWORD *)(v10 + 8) = 3;
      this[3] = 0;
      this = *(_QWORD **)(v9 + 16);
      *(_QWORD *)(v9 + 16) = 0;
      if (!this)
        goto LABEL_23;
    }
    else
    {
      *(_QWORD *)(v9 + 16) = 0;
    }
    if (*((_DWORD *)this + 2) == 1)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 96))(this);
    else
      --*((_DWORD *)this + 2);
LABEL_23:
    v11 = v6 + 2;
    v6 = v5;
    if (v11 != v5)
    {
      v6 = v11;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  while (v6 != v8);
  v3 = v2[5];
LABEL_31:
  if (v3)
  {
    v2[5] = 0;
    v12 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v12)
    {
      v13 = v3 + 8;
      do
      {
        if (*(_QWORD *)(v13 - 8) != -1 && *(_QWORD *)v13)
        {
          *(_QWORD *)(*(_QWORD *)v13 + 8) = 3;
          *(_QWORD *)v13 = 0;
        }
        v13 += 16;
        --v12;
      }
      while (v12);
    }
    this = (_QWORD *)WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  *((_BYTE *)v2 + 12) = 0;
  v2[2] = 0;
  v14 = v2[3];
  if (v14)
  {
    v15 = (uint64_t *)(v14 - 16);
    v16 = *(_QWORD *)(((v14 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v17 = *(uint64_t **)(v14 - 8);
    if (v17)
    {
      v18 = *v15;
      *v17 = *v15;
      *(_QWORD *)(v18 + 8) = v17;
      *v15 = 0;
      v15[1] = 0;
    }
    *v15 = *(_QWORD *)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;
    v2[3] = 0;
  }
  v19 = v2[6];
  if (!v19)
  {
    v21 = 0;
    v22 = 0;
    v20 = 0;
LABEL_53:
    v24 = (_QWORD *)(v19 + 8 * v20);
    goto LABEL_54;
  }
  v20 = *(unsigned int *)(v19 - 4);
  v21 = (_QWORD *)(v19 + 8 * v20);
  if (!*(_DWORD *)(v19 - 12))
  {
    v22 = (_QWORD *)(v19 + 8 * v20);
    goto LABEL_53;
  }
  v22 = (_QWORD *)v2[6];
  if ((_DWORD)v20)
  {
    v23 = 8 * v20;
    v22 = (_QWORD *)v2[6];
    while ((unint64_t)(*v22 + 1) <= 1)
    {
      ++v22;
      v23 -= 8;
      if (!v23)
      {
        v22 = v21;
        break;
      }
    }
  }
  v24 = v21;
LABEL_54:
  if (v21 != v22)
  {
    do
    {
      v25 = v22 + 1;
      this = (_QWORD *)(**(uint64_t (***)(_QWORD, _QWORD *))*v22)(*v22, v2);
      v22 = v24;
      if (v25 != v24)
      {
        v22 = v25;
        while ((unint64_t)(*v22 + 1) <= 1)
        {
          if (++v22 == v24)
          {
            v22 = v24;
            break;
          }
        }
      }
    }
    while (v22 != v21);
    v19 = v2[6];
  }
  if (v19)
  {
    v2[6] = 0;
    this = (_QWORD *)WTF::fastFree((WTF *)(v19 - 16), a2);
  }
  v26 = v2[4];
  if (!v26)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    goto LABEL_74;
  }
  v29 = *(unsigned int *)(v26 - 4);
  v27 = (Class *)(v26 + 16 * v29);
  if (*(_DWORD *)(v26 - 12))
  {
    v28 = (Class *)v2[4];
    if ((_DWORD)v29)
    {
      v30 = 16 * v29;
      v28 = (Class *)v2[4];
      while ((unint64_t)*v28 + 1 <= 1)
      {
        v28 += 2;
        v30 -= 16;
        if (!v30)
        {
          v28 = v27;
          break;
        }
      }
    }
    v31 = v27;
  }
  else
  {
    v28 = (Class *)(v26 + 16 * v29);
LABEL_74:
    v31 = (Class *)(v26 + 16 * v29);
  }
  if (v27 != v28)
  {
    do
    {
      v32.super.isa = *v28;
      if (*v28)
      {
        v33 = (_QWORD *)((char *)v32.super.isa - 16);
        if (((uint64_t)v32.super.isa & 8) == 0)
          v33 = (_QWORD *)((unint64_t)v32.super.isa & 0xFFFFFFFFFFFFC000 | 8);
        v34 = (JSC::Heap *)(*v33 + 192);
      }
      else
      {
        v34 = 0;
      }
      this = (_QWORD *)JSC::Heap::unprotect(v34, v32);
      v35 = v28 + 2;
      v28 = v31;
      if (v35 != v31)
      {
        v28 = v35;
        while ((unint64_t)*v28 + 1 <= 1)
        {
          v28 += 2;
          if (v28 == v31)
          {
            v28 = v31;
            break;
          }
        }
      }
    }
    while (v28 != v27);
    v26 = v2[4];
  }
  if (v26)
  {
    v2[4] = 0;
    this = (_QWORD *)WTF::fastFree((WTF *)(v26 - 16), a2);
  }
  {
    if (JSC::Bindings::rootObjectSet(void)::staticRootObjectSet)
    {
      v36 = *(_DWORD *)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet - 8);
      v37 = ((unint64_t)v2 + ~((_QWORD)v2 << 32)) ^ (((unint64_t)v2 + ~((_QWORD)v2 << 32)) >> 22);
      v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
      v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
      v40 = v36 & ((v39 >> 31) ^ v39);
      v41 = *(_QWORD **)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet + 8 * v40);
      if (v41 != v2)
      {
        v42 = 1;
        while (v41)
        {
          v40 = ((_DWORD)v40 + v42) & v36;
          v41 = *(_QWORD **)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet + 8 * v40);
          ++v42;
          if (v41 == v2)
            goto LABEL_98;
        }
        v40 = *(unsigned int *)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet - 4);
      }
LABEL_98:
      if (v40 != *(_DWORD *)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet - 4))
      {
        *(_QWORD *)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet + 8 * v40) = -1;
        ++*(_DWORD *)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet - 16);
        v43 = JSC::Bindings::rootObjectSet(void)::staticRootObjectSet
            ? *(_DWORD *)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet - 12) - 1
            : -1;
        *(_DWORD *)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet - 12) = v43;
        if (JSC::Bindings::rootObjectSet(void)::staticRootObjectSet)
        {
          v44 = *(_DWORD *)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet - 4);
          if (6 * *(_DWORD *)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet - 12) < v44 && v44 >= 9)
            return WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(&JSC::Bindings::rootObjectSet(void)::staticRootObjectSet, v44 >> 1, 0);
        }
      }
    }
  }
  else
  {
    JSC::Bindings::rootObjectSet(void)::staticRootObjectSet = 0;
  }
  return this;
}

uint64_t *JSC::Bindings::RootObject::gcProtect(JSC::Bindings::RootObject *this, JSC::JSObject *a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  JSC::JSObject *v10;
  int v11;
  _QWORD *v12;
  JSC::Heap *v13;
  JSValue v14;
  uint64_t *result;
  _QWORD v16[3];
  JSC::JSObject *v17;
  unsigned __int32 v18;

  v17 = a2;
  v4 = (uint64_t *)((char *)this + 32);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(JSC::JSObject **)(v3 + 16 * v9);
    if (v10 == a2)
      goto LABEL_12;
    v11 = 1;
    while (v10)
    {
      v9 = (v9 + v11) & v5;
      v10 = *(JSC::JSObject **)(v3 + 16 * v9);
      ++v11;
      if (v10 == a2)
        goto LABEL_12;
    }
  }
  MEMORY[0x19AEA3288](v16, *(_QWORD *)(**((_QWORD **)this + 3) + 56));
  if (a2)
  {
    v12 = (_QWORD *)((char *)a2 - 16);
    if ((a2 & 8) == 0)
      v12 = (_QWORD *)((unint64_t)a2 & 0xFFFFFFFFFFFFC000 | 8);
    v13 = (JSC::Heap *)(*v12 + 192);
  }
  else
  {
    v13 = 0;
  }
  v14.super.isa = a2;
  JSC::Heap::protect(v13, v14);
  MEMORY[0x19AEA32A0](v16);
LABEL_12:
  v18 = 0;
  result = WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(v4, (unint64_t *)&v17, &v18, (uint64_t)v16);
  ++*(_DWORD *)(v16[0] + 8);
  return result;
}

uint64_t JSC::Bindings::RootObject::gcUnprotect(uint64_t this, JSC::JSObject *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  objc_class *v7;
  int v8;
  JSValue v9;
  _QWORD *v10;
  JSC::Heap *v11;
  uint64_t v12;
  JSValue v13;

  v13.super.isa = a2;
  if (a2)
  {
    v2 = this;
    v3 = (uint64_t *)(this + 32);
    v4 = *(_QWORD *)(this + 32);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 - 8);
      v6 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::JSObject *>>::hash<JSC::JSObject *>(&v13) & v5;
      v7 = *(objc_class **)(v4 + 16 * v6);
      if (v7 == v13.super.isa)
      {
LABEL_7:
        if (*(_DWORD *)(v4 + 16 * v6 + 8) == 1)
        {
          MEMORY[0x19AEA3288](&v12, *(_QWORD *)(**(_QWORD **)(v2 + 24) + 56));
          v9.super.isa = v13.super.isa;
          if (v13.super.isa)
          {
            v10 = (_QWORD *)((char *)v13.super.isa - 16);
            if (((uint64_t)v13.super.isa & 8) == 0)
              v10 = (_QWORD *)((unint64_t)v13.super.isa & 0xFFFFFFFFFFFFC000 | 8);
            v11 = (JSC::Heap *)(*v10 + 192);
          }
          else
          {
            v11 = 0;
          }
          JSC::Heap::unprotect(v11, v9);
          MEMORY[0x19AEA32A0](&v12);
        }
      }
      else
      {
        v8 = 1;
        while (v7)
        {
          v6 = ((_DWORD)v6 + v8) & v5;
          v7 = *(objc_class **)(v4 + 16 * v6);
          ++v8;
          if (v7 == v13.super.isa)
            goto LABEL_7;
        }
      }
    }
    return WTF::HashCountedSet<JSC::JSObject *,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::remove(v3, &v13);
  }
  return this;
}

uint64_t WTF::HashCountedSet<JSC::JSObject *,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 != *a2)
  {
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v9;
      if (v8 == *a2)
        goto LABEL_8;
    }
    v7 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v7 == *(_DWORD *)(v2 - 4))
    return 0;
  v11 = v2 + 16 * v7;
  if (*(_DWORD *)(v11 + 8) == 1)
  {
    *(_QWORD *)v11 = -1;
    ++*(_DWORD *)(*a1 - 16);
    v12 = *a1;
    if (*a1)
      v13 = *(_DWORD *)(v12 - 12) - 1;
    else
      v13 = -1;
    *(_DWORD *)(v12 - 12) = v13;
    v14 = *a1;
    if (*a1)
    {
      v15 = 6 * *(_DWORD *)(v14 - 12);
      v16 = *(_DWORD *)(v14 - 4);
      if (v15 < v16 && v16 >= 9)
        WTF::HashTable<JSC::JSObject *,WTF::KeyValuePair<JSC::JSObject *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject *,unsigned int>>,WTF::DefaultHash<JSC::JSObject *>,WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject *>>::rehash(a1, v16 >> 1);
    }
    return 1;
  }
  else
  {
    result = 0;
    --*(_DWORD *)(v11 + 8);
  }
  return result;
}

uint64_t JSC::Bindings::RootObject::updateGlobalObject(uint64_t this, JSC::JSGlobalObject *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)(this + 24);
  if (!v2)
  {
    v3 = *((_QWORD *)a2 + 7);
    v4 = *(_QWORD **)(v3 + 712);
    if (!v4)
    {
      v9 = *((_QWORD *)a2 + 7);
      v7 = a2;
      v8 = this;
      JSC::HandleSet::grow((JSC::HandleSet *)(v3 + 672));
      v3 = v9;
      a2 = v7;
      this = v8;
      v4 = *(_QWORD **)(v9 + 712);
    }
    *(_QWORD *)(v3 + 712) = *v4;
    v4[2] = 0;
    v2 = v4 + 2;
    *v4 = 0;
    v4[1] = 0;
    *(_QWORD *)(this + 24) = v4 + 2;
  }
  if (!*v2)
  {
    v5 = *(_QWORD **)(((unint64_t)(v2 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v6 = v5[3];
    v5 += 3;
    *(v2 - 2) = v6;
    *(v2 - 1) = v5;
    *v5 = v2 - 2;
    *(_QWORD *)(v6 + 8) = v2 - 2;
  }
  *v2 = a2;
  return this;
}

uint64_t *JSC::Bindings::RootObject::finalize(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;

  v3 = *a2;
  ++*(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    *(_QWORD *)(v3 + 16) = 0;
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(v4 + 24);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *(_QWORD *)(v4 + 24) = 0;
    v4 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0;
    if (!v4)
      goto LABEL_9;
  }
  else
  {
    *(_QWORD *)(v3 + 16) = 0;
  }
  if (*(_DWORD *)(v4 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
  else
    --*(_DWORD *)(v4 + 8);
LABEL_9:
  result = (uint64_t *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v7 + 16 * v12);
    if (v13 != v3)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(_QWORD *)(v7 + 16 * v12);
        ++v14;
        if (v13 == v3)
          goto LABEL_16;
      }
      v12 = *(unsigned int *)(v7 - 4);
    }
LABEL_16:
    if (v12 != *(_DWORD *)(v7 - 4))
    {
      v15 = (_QWORD *)(v7 + 16 * v12);
      *v15 = -1;
      v18 = v15[1];
      v17 = v15 + 1;
      v16 = v18;
      if (v18)
      {
        *(_QWORD *)(v16 + 8) = 3;
        *v17 = 0;
      }
      ++*(_DWORD *)(*result - 16);
      v19 = *result;
      if (*result)
        v20 = *(_DWORD *)(v19 - 12) - 1;
      else
        v20 = -1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *result;
      if (*result)
      {
        v22 = 6 * *(_DWORD *)(v21 - 12);
        v23 = *(_DWORD *)(v21 - 4);
        if (v22 < v23 && v23 >= 9)
          result = (uint64_t *)WTF::HashTable<JSC::Bindings::RuntimeObject *,WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashMap<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Bindings::RuntimeObject *>>::rehash(result, v23 >> 1);
      }
    }
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  --*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t JSC::Bindings::Instance::Instance(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &unk_1E3394DD8;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void JSC::Bindings::Instance::~Instance(JSC::Bindings::Instance *this)
{
  uint64_t v2;
  _DWORD *v3;

  *(_QWORD *)this = &unk_1E3394DD8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
}

uint64_t JSC::Bindings::Instance::createRuntimeObject(JSC::Bindings::Instance *this, JSC::JSGlobalObject *a2)
{
  uint64_t v4;
  uint64_t Allocator;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  char v35[8];

  v4 = *((_QWORD *)this + 3);
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0 || (v6 = *(_QWORD *)v4) == 0)
  {
    JSC::JSLockHolder::JSLockHolder();
    Allocator = (*(uint64_t (**)(JSC::Bindings::Instance *, JSC::JSGlobalObject *))(*(_QWORD *)this + 136))(this, a2);
    v6 = Allocator;
    if (Allocator)
    {
      if ((Allocator & 8) != 0)
        v7 = (Allocator - 112) | 1;
      else
        v7 = Allocator & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v8 = v7 + 47;
      else
        v8 = *(_QWORD *)v7 + 32;
      Allocator = *(_QWORD *)(v8 + 16);
      if (!Allocator)
        Allocator = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v8 + 16) = *(_QWORD *)Allocator;
      *(_QWORD *)Allocator = v6;
      *(_QWORD *)(Allocator + 8) = 0;
      *(_QWORD *)(Allocator + 16) = 0;
    }
    v9 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = Allocator;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    v10 = *((_QWORD *)this + 2);
    v11 = (uint64_t *)(v10 + 40);
    if (v6)
    {
      if ((v6 & 8) != 0)
        v12 = (v6 - 112) | 1;
      else
        v12 = v6 & 0xFFFFFFFFFFFFC000;
      if ((v12 & 1) != 0)
        v13 = v12 + 47;
      else
        v13 = *(_QWORD *)v12 + 32;
      v14 = *(_QWORD **)(v13 + 16);
      if (!v14)
        v14 = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v13 + 16) = *v14;
      *v14 = v6;
      v14[1] = v10;
      v14[2] = 0;
    }
    else
    {
      v14 = 0;
    }
    v15 = *v11;
    if (*v11
      || (WTF::HashTable<JSC::Bindings::RuntimeObject *,WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashMap<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Bindings::RuntimeObject *>>::rehash((uint64_t *)(v10 + 40), 8u), (v15 = *v11) != 0))
    {
      v16 = *(_DWORD *)(v15 - 8);
    }
    else
    {
      v16 = 0;
    }
    v17 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = (uint64_t *)(v15 + 16 * v20);
    v22 = *v21;
    if (*v21)
    {
      v23 = 0;
      v24 = 1;
      while (v22 != v6)
      {
        if (v22 == -1)
          v23 = v21;
        v20 = (v20 + v24) & v16;
        v21 = (uint64_t *)(v15 + 16 * v20);
        v22 = *v21;
        ++v24;
        if (!*v21)
        {
          if (v23)
          {
            *v23 = 0;
            v23[1] = 0;
            --*(_DWORD *)(*v11 - 16);
            v21 = v23;
          }
          goto LABEL_35;
        }
      }
      v28 = v21[1];
      v21[1] = (uint64_t)v14;
      if (v28)
        *(_QWORD *)(v28 + 8) = 3;
      goto LABEL_54;
    }
LABEL_35:
    v25 = v21[1];
    *v21 = v6;
    v21[1] = (uint64_t)v14;
    if (v25)
      *(_QWORD *)(v25 + 8) = 3;
    v26 = *v11;
    if (*v11)
      v27 = *(_DWORD *)(v26 - 12) + 1;
    else
      v27 = 1;
    *(_DWORD *)(v26 - 12) = v27;
    v29 = *v11;
    if (*v11)
      v30 = *(_DWORD *)(v29 - 12);
    else
      v30 = 0;
    v31 = (*(_DWORD *)(v29 - 16) + v30);
    v32 = *(unsigned int *)(v29 - 4);
    if (v32 > 0x400)
    {
      if (v32 > 2 * v31)
        goto LABEL_54;
    }
    else
    {
      if (3 * v32 > 4 * v31)
      {
LABEL_54:
        MEMORY[0x19AEA32A0](v35);
        return v6;
      }
      if (!(_DWORD)v32)
      {
        v33 = 8;
        goto LABEL_53;
      }
    }
    v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
LABEL_53:
    WTF::HashTable<JSC::Bindings::RuntimeObject *,WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashMap<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Bindings::RuntimeObject *>>::rehash((uint64_t *)(v10 + 40), v33);
    goto LABEL_54;
  }
  return v6;
}

unint64_t JSC::Bindings::Instance::newRuntimeObject(JSC::Bindings::Instance *this, JSC::JSGlobalObject *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  JSC::JSCell *v15;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  unint64_t v22;
  unint64_t v23;
  _BYTE v24[12];
  int v25;

  JSC::JSLockHolder::JSLockHolder();
  v4 = *((_QWORD *)a2 + 7);
  v5 = (uint64_t *)(v4 + 40136);
  v6 = *((_QWORD *)a2 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&JSC::Bindings::RuntimeObject::s_info
        + ~((_QWORD)&JSC::Bindings::RuntimeObject::s_info << 32)) ^ (((unint64_t)&JSC::Bindings::RuntimeObject::s_info
                                                                    + ~((_QWORD)&JSC::Bindings::RuntimeObject::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &JSC::Bindings::RuntimeObject::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_15;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &JSC::Bindings::RuntimeObject::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (JSC::JSCell *)*((_QWORD *)a2 + 82);
  v25 = 335678487;
  if (((unint64_t)v15 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v15);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v4);
  }
  SlowCase = *v5;
  if ((unint64_t)*v5 >= *(_QWORD *)(v4 + 40144))
  {
    SlowCase = *(_QWORD *)(v4 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v5 = (uint64_t *)(v4 + 40136);
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_12;
    }
    v23 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v4 + 40160);
    *(_QWORD *)(v4 + 40144) = SlowCase + HIDWORD(v23);
    *(_QWORD *)(v4 + 40152) = SlowCase + (int)v23;
  }
  *v5 = SlowCase + 128;
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v4, a2, v15, &v25, &JSC::Bindings::RuntimeObject::s_info, 0, 0);
  if (*(_BYTE *)(v4 + 755))
    __dmb(0xAu);
  v14 = WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&JSC::Bindings::RuntimeObject::s_info);
LABEL_15:
  if (this)
    ++*((_DWORD *)this + 2);
  v18 = (_QWORD *)v5[165];
  v19 = v18[2912];
  if (v19 >= v18[2913])
  {
    v19 = v18[2914];
    if ((v19 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v19 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_19;
    }
    v22 = *(_QWORD *)(v19 + 8) ^ v18[2915];
    v18[2913] = v19 + HIDWORD(v22);
    v18[2914] = v19 + (int)v22;
  }
  v18[2912] = v19 + 32;
LABEL_19:
  *(_DWORD *)v19 = 0;
  v20 = *(_DWORD *)(v14 + 8);
  *(_DWORD *)v19 = v14 >> 4;
  *(_DWORD *)(v19 + 4) = v20;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = this;
  JSC::Bindings::RuntimeObject::finishCreation((JSC::Bindings::RuntimeObject *)v19, (JSC::VM *)v4);
  MEMORY[0x19AEA32A0](v24);
  return v19;
}

uint64_t JSC::Bindings::Instance::setValueOfUndefinedField()
{
  return 0;
}

uint64_t JSC::Bindings::Instance::supportsInvokeDefaultMethod(JSC::Bindings::Instance *this)
{
  return 0;
}

uint64_t JSC::Bindings::Instance::invokeDefaultMethod()
{
  return 10;
}

uint64_t WTF::equal(int16x8_t *a1, uint64_t a2, uint8x8_t *a3)
{
  size_t v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint16x8_t v17;
  unsigned int v18;
  uint16x8_t v19;
  BOOL v20;
  uint8x16_t v21;
  uint8x16_t v22;
  unsigned int v23;
  uint8x16_t v24;
  BOOL v25;

  if (!a3)
  {
    v10 = (_DWORD)a2 == 0;
    return !v10;
  }
  if (!(_DWORD)a2)
    return 0;
  v6 = strlen((const char *)a3);
  if (v6 != a2)
    return 0;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (v6 >= 8)
    {
      v17 = (uint16x8_t)vceqq_s16(*a1, (int16x8_t)vmovl_u8(*a3));
      v17.i16[0] = vminvq_u16(v17);
      v11 = v17.u32[0];
      if (v17.i32[0])
      {
        v18 = v6 & 7;
        do
        {
          v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)a1 + 2 * v18), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a3 + v18)));
          v19.i16[0] = vminvq_u16(v19);
          v11 = v19.i32[0] != 0;
          v18 += 8;
          if (v19.i32[0])
            v20 = v18 >= v6;
          else
            v20 = 1;
        }
        while (!v20);
      }
      return v11;
    }
    if (v6 >= 4)
    {
      v12 = (a3->u32[0] | ((unint64_t)a3->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v13 = (*(unsigned int *)((char *)a3->u32 + (v6 & 3)) | ((unint64_t)*(unsigned int *)((char *)a3->u32
                                                                                                + (v6 & 3)) << 16)) & 0xFFFF0000FFFFLL;
      v14 = (v13 | (v13 << 8)) & 0xFF00FF00FF00FFLL;
      return ((v12 | (v12 << 8)) & 0xFF00FF00FF00FFLL) == a1->i64[0]
          && v14 == *(uint64_t *)((char *)a1->i64 + 2 * (v6 & 3));
    }
    if (v6 >= 2)
      return ((a3->u16[0] | (a3->u16[0] << 8)) & 0xFF00FF) == a1->i32[0]
          && ((*(unsigned __int16 *)((char *)a3->u16 + (v6 & 1)) | (*(unsigned __int16 *)((char *)a3->u16 + (v6 & 1)) << 8)) & 0xFF00FF) == *(__int32 *)((char *)a1->i32 + 2 * (v6 & 1));
    if ((_DWORD)v6 == 1)
      return a1->u16[0] == a3->u8[0];
    return 1;
  }
  if (!(_DWORD)v6)
    return 1;
  if ((_DWORD)v6 == 1)
  {
    if (v6)
    {
      v8 = a1->u8[0];
      v9 = a3->u8[0];
      return v8 == v9;
    }
    __break(1u);
    return a1->u16[0] == a3->u8[0];
  }
  v7 = 32 - __clz(v6 - 1);
  if (v7 == 1)
  {
    v8 = a1->u16[0];
    v9 = a3->u16[0];
    return v8 == v9;
  }
  switch(v7)
  {
    case 2u:
      if (a1->u16[0] != a3->u16[0])
        return 0;
      v8 = *(unsigned __int16 *)((char *)&a1->u16[-1] + v6);
      v9 = *(unsigned __int16 *)((char *)&a3->u16[-1] + v6);
      return v8 == v9;
    case 3u:
      if (a1->i32[0] != a3->i32[0])
        return 0;
      v8 = *(__int32 *)((char *)&a1->i32[-1] + v6);
      v9 = *(__int32 *)((char *)&a3->i32[-1] + v6);
      return v8 == v9;
    case 4u:
      if (a1->i64[0] != *a3)
        return 0;
      return *(uint64_t *)((char *)&a1->i64[-1] + v6) == *(_QWORD *)((char *)&a3[-1] + v6);
    case 5u:
      v21 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&a1[-1] + v6), *(int8x16_t *)&a3[-2].i8[v6]), vceqq_s8(*(int8x16_t *)a1, *(int8x16_t *)a3->i8));
      v21.i8[0] = vminvq_u8(v21);
      v10 = v21.i32[0] == 0;
      return !v10;
    default:
      v22 = (uint8x16_t)vceqq_s8(*(int8x16_t *)a1, *(int8x16_t *)a3->i8);
      v22.i8[0] = vminvq_u8(v22);
      v11 = v22.u32[0];
      if (!v22.i32[0])
        return v11;
      if (v6 < 0x10)
        return 1;
      v23 = v6 & 0xF;
      do
      {
        v24 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)a1 + v23), *(int8x16_t *)&a3->i8[v23]);
        v24.i8[0] = vminvq_u8(v24);
        v11 = v24.i32[0] != 0;
        v23 += 16;
        if (v24.i32[0])
          v25 = v23 >= v6;
        else
          v25 = 1;
      }
      while (!v25);
      break;
  }
  return v11;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::IdentifierRep *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::IdentifierRep *>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::IdentifierRep *,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::IdentifierRep *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(unsigned int a1, _DWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _OWORD *v18;

  v4 = qword_1ECE828A8;
  if (qword_1ECE828A8)
  {
    v5 = *(_DWORD *)(qword_1ECE828A8 - 4);
    v6 = *(_DWORD *)(qword_1ECE828A8 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE828A8 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE828A8 - 12) = v6;
  if (v5)
  {
    v9 = v5;
    v10 = qword_1ECE828A8;
    if (qword_1ECE828A8)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        v13 = (_DWORD *)(v4 + 16 * v11);
        if ((*v13 + 1) >= 2)
        {
          v14 = 0;
          v15 = 9 * ((*v13 + ~(*v13 << 15)) ^ ((*v13 + ~(*v13 << 15)) >> 10));
          v16 = ((v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11)) ^ (((v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11)) >> 16);
          do
          {
            v17 = v16 & *(_DWORD *)(v10 - 8);
            v16 = ++v14 + v17;
          }
          while (*(_DWORD *)(v10 + 16 * v17));
          *(_OWORD *)(v10 + 16 * v17) = *(_OWORD *)v13;
          if (v13 == a2)
            v12 = v10 + 16 * v17;
        }
        ++v11;
      }
      while (v11 != v5);
    }
    else
    {
      v18 = (_OWORD *)v4;
      do
      {
        if ((*(_DWORD *)v18 + 1) >= 2)
          MEMORY[0] = *v18;
        ++v18;
        --v9;
      }
      while (v9);
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    if (!v4)
      return v12;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::HashTable<WebCore::IdentifierRep *,WebCore::IdentifierRep *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IdentifierRep *>,WTF::HashTraits<WebCore::IdentifierRep *>,WTF::HashTraits<WebCore::IdentifierRep *>>::add(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  char v23;
  uint64_t v24;

  v3 = result;
  v4 = qword_1ECE828B0;
  if (qword_1ECE828B0
    || (result = WTF::HashTable<WebCore::IdentifierRep *,WebCore::IdentifierRep *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IdentifierRep *>,WTF::HashTraits<WebCore::IdentifierRep *>,WTF::HashTraits<WebCore::IdentifierRep *>>::rehash(8u, 0), (v4 = qword_1ECE828B0) != 0))
  {
    v5 = 0;
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
    v5 = 1;
  }
  v7 = *a2;
  v8 = ~(*a2 << 32) + *a2;
  v9 = 9 * (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) ^ (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v6 & ((v10 >> 31) ^ v10);
  v12 = (uint64_t *)(v4 + 8 * v11);
  v13 = *v12;
  if (*v12)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      if (v13 == v7)
      {
        if ((v5 & 1) != 0)
          v17 = 0;
        else
          v17 = *(unsigned int *)(v4 - 4);
        v23 = 0;
        v24 = v4 + 8 * v17;
        goto LABEL_33;
      }
      if (v13 == -1)
        v14 = v12;
      v11 = (v11 + v15) & v6;
      v12 = (uint64_t *)(v4 + 8 * v11);
      v13 = *v12;
      ++v15;
    }
    while (*v12);
    if (v14)
    {
      *v14 = 0;
      --*(_DWORD *)(qword_1ECE828B0 - 16);
      v7 = *a2;
      v12 = v14;
    }
  }
  *v12 = v7;
  if (qword_1ECE828B0)
    v16 = *(_DWORD *)(qword_1ECE828B0 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(qword_1ECE828B0 - 12) = v16;
  v18 = qword_1ECE828B0;
  if (qword_1ECE828B0)
    v19 = *(_DWORD *)(qword_1ECE828B0 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(qword_1ECE828B0 - 16) + v19);
  v21 = *(unsigned int *)(qword_1ECE828B0 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20)
      goto LABEL_28;
  }
  else if (3 * v21 <= 4 * v20)
  {
    if (!(_DWORD)v21)
    {
      v22 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v22 = (_DWORD)v21 << (6 * *(_DWORD *)(qword_1ECE828B0 - 12) >= (2 * v21));
LABEL_29:
    result = WTF::HashTable<WebCore::IdentifierRep *,WebCore::IdentifierRep *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IdentifierRep *>,WTF::HashTraits<WebCore::IdentifierRep *>,WTF::HashTraits<WebCore::IdentifierRep *>>::rehash(v22, v12);
    v12 = (uint64_t *)result;
    v18 = qword_1ECE828B0;
    if (qword_1ECE828B0)
      v21 = *(unsigned int *)(qword_1ECE828B0 - 4);
    else
      v21 = 0;
  }
  v24 = v18 + 8 * v21;
  v23 = 1;
LABEL_33:
  *(_QWORD *)v3 = v12;
  *(_QWORD *)(v3 + 8) = v24;
  *(_BYTE *)(v3 + 16) = v23;
  return result;
}

uint64_t WTF::HashTable<WebCore::IdentifierRep *,WebCore::IdentifierRep *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IdentifierRep *>,WTF::HashTraits<WebCore::IdentifierRep *>,WTF::HashTraits<WebCore::IdentifierRep *>>::rehash(unsigned int a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;

  v4 = qword_1ECE828B0;
  if (qword_1ECE828B0)
  {
    v5 = *(_DWORD *)(qword_1ECE828B0 - 4);
    v6 = *(_DWORD *)(qword_1ECE828B0 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * a1 + 16));
  qword_1ECE828B0 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE828B0 - 12) = v6;
  if (!v5)
  {
    v10 = 0;
    if (!v4)
      return v10;
    goto LABEL_16;
  }
  v9 = 0;
  v10 = 0;
  v11 = qword_1ECE828B0;
  do
  {
    v12 = (uint64_t *)(v4 + 8 * v9);
    v13 = *v12;
    if ((unint64_t)(*v12 + 1) >= 2)
    {
      if (v11)
        v14 = *(_DWORD *)(v11 - 8);
      else
        v14 = 0;
      v15 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
      v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
      v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
      v18 = v14 & ((v17 >> 31) ^ v17);
      v19 = 1;
      do
      {
        v20 = v18;
        v21 = *(_QWORD *)(v11 + 8 * v18);
        v18 = (v18 + v19++) & v14;
      }
      while (v21);
      *(_QWORD *)(v11 + 8 * v20) = v13;
      if (v12 == a2)
        v10 = v11 + 8 * v20;
    }
    ++v9;
  }
  while (v9 != v5);
  if (v4)
LABEL_16:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WebCore::IdentifierRep *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WebCore::IdentifierRep *>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WebCore::IdentifierRep *,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WebCore::IdentifierRep *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(unsigned int a1, WTF::StringImpl **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  WTF::StringImpl *v21;
  _QWORD *result;

  v4 = qword_1ECE828B8;
  if (qword_1ECE828B8)
  {
    v5 = *(_DWORD *)(qword_1ECE828B8 - 4);
    v6 = *(_DWORD *)(qword_1ECE828B8 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE828B8 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE828B8 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (WTF::StringImpl **)(v4 + 16 * v9);
      v12 = *v11;
      if (*v11 != (WTF::StringImpl *)-1)
      {
        if (v12)
        {
          v13 = qword_1ECE828B8;
          if (qword_1ECE828B8)
            v14 = *(_DWORD *)(qword_1ECE828B8 - 8);
          else
            v14 = 0;
          v15 = *((_DWORD *)v12 + 4);
          if (v15 < 0x100)
            v16 = WTF::StringImpl::hashSlowCase(v12);
          else
            v16 = v15 >> 8;
          v17 = 0;
          do
          {
            v18 = v16 & v14;
            v16 = ++v17 + v18;
          }
          while (*(_QWORD *)(v13 + 16 * v18));
          v19 = (_QWORD *)(v13 + 16 * v18);
          *v19 = 0;
          v20 = *(_OWORD *)v11;
          *v11 = 0;
          *(_OWORD *)v19 = v20;
          v21 = *v11;
          *v11 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v8);
            else
              *(_DWORD *)v21 -= 2;
          }
          if (v11 == a2)
            v10 = v19;
        }
        else
        {
          *v11 = 0;
        }
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t *WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X1>, unsigned __int32 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  __n128 *v16;
  unint64_t v17;
  __n128 *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::JSObject *,WTF::KeyValuePair<JSC::JSObject *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject *,unsigned int>>,WTF::DefaultHash<JSC::JSObject *>,WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject *>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (__n128 *)(v8 + 16 * v15);
  v17 = v16->n128_u64[0];
  if (v16->n128_u64[0])
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v27 = v8 + 16 * v22;
        goto LABEL_27;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (__n128 *)(v8 + 16 * v15);
      v17 = v16->n128_u64[0];
      ++v19;
    }
    while (v16->n128_u64[0]);
    if (v18)
    {
      v18->n128_u64[0] = 0;
      v18->n128_u64[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  v16->n128_u64[0] = v11;
  v16->n128_u32[2] = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_22:
      result = (uint64_t *)WTF::HashTable<JSC::JSObject *,WTF::KeyValuePair<JSC::JSObject *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject *,unsigned int>>,WTF::DefaultHash<JSC::JSObject *>,WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject *>>::expand(v6, v16);
      v16 = (__n128 *)result;
      v23 = *v6;
      if (*v6)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_22;
  }
  v27 = v23 + 16 * v26;
  v28 = 1;
LABEL_27:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

uint64_t WTF::HashTable<JSC::JSObject *,WTF::KeyValuePair<JSC::JSObject *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject *,unsigned int>>,WTF::DefaultHash<JSC::JSObject *>,WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  void *v8;
  __n128 *v9;

  v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v9 = (__n128 *)v4;
    do
    {
      if (v9->n128_u64[0] + 1 >= 2)
        WTF::HashTable<JSC::JSObject *,WTF::KeyValuePair<JSC::JSObject *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject *,unsigned int>>,WTF::DefaultHash<JSC::JSObject *>,WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject *>>::reinsert(a1, v9);
      ++v9;
      --v5;
    }
    while (v5);
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<JSC::Bindings::RuntimeObject *,WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>>>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashMap<JSC::Bindings::RuntimeObject *,JSC::Weak<JSC::Bindings::RuntimeObject>,WTF::DefaultHash<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Bindings::RuntimeObject *>,WTF::HashTraits<JSC::Weak<JSC::Bindings::RuntimeObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Bindings::RuntimeObject *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = *(_QWORD *)(v4 + 16 * i);
      if (v10 != -1)
      {
        if (v10)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          LODWORD(v8) = v16 & ((v19 >> 31) ^ v19);
          v20 = 1;
          do
          {
            v21 = v8;
            v22 = *(_QWORD *)(v15 + 16 * v8);
            v8 = (void *)(((_DWORD)v8 + v20++) & v16);
          }
          while (v22);
          v23 = (_QWORD *)(v15 + 16 * v21);
          v24 = v23 + 1;
          v25 = v23[1];
          if (v25)
          {
            *(_QWORD *)(v25 + 8) = 3;
            *v24 = 0;
          }
          *v23 = v10;
          v26 = v4 + 16 * i;
          v28 = *(_QWORD *)(v26 + 8);
          v27 = v26 + 8;
          *(_QWORD *)v27 = 0;
          *v24 = v28;
          if (*(_QWORD *)v27)
          {
            *(_QWORD *)(*(_QWORD *)v27 + 8) = 3;
            *(_QWORD *)v27 = 0;
          }
        }
        else
        {
          v11 = v4 + 16 * i;
          v14 = *(_QWORD *)(v11 + 8);
          v12 = (_QWORD *)(v11 + 8);
          v13 = v14;
          if (v14)
          {
            *(_QWORD *)(v13 + 8) = 3;
            *v12 = 0;
          }
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

WebCore::ContentExtensions::CombinedURLFilters *WebCore::ContentExtensions::CombinedURLFilters::CombinedURLFilters(WebCore::ContentExtensions::CombinedURLFilters *this)
{
  _QWORD *v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = 0;
  v2[1] = 0;
  *((_QWORD *)this + 3) = v2;
  *((_QWORD *)this + 4) = 0;
  return this;
}

{
  _QWORD *v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = 0;
  v2[1] = 0;
  *((_QWORD *)this + 3) = v2;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void WebCore::ContentExtensions::CombinedURLFilters::~CombinedURLFilters(WebCore::ContentExtensions::CombinedURLFilters *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 8;
      do
      {
        if (*(_QWORD *)(v5 - 8) != -1)
        {
          v6 = *(WTF **)v5;
          if (*(_QWORD *)v5)
          {
            *(_QWORD *)v5 = 0;
            *(_DWORD *)(v5 + 8) = 0;
            WTF::fastFree(v6, a2);
          }
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    v8 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v8)
      WTF::VectorTypeOperations<WebCore::ContentExtensions::PrefixTreeEdge>::destruct(*(_QWORD *)v7, (WTF **)(*(_QWORD *)v7 + 16 * v8));
    v9 = *(WTF **)v7;
    if (*(_QWORD *)v7)
    {
      *(_QWORD *)v7 = 0;
      *(_DWORD *)(v7 + 8) = 0;
      WTF::fastFree(v9, a2);
    }
    WTF::fastFree((WTF *)v7, a2);
  }
  v10 = *((unsigned int *)this + 5);
  if ((_DWORD)v10)
  {
    v11 = (uint64_t *)*((_QWORD *)this + 1);
    v12 = 8 * v10;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        WebCore::ContentExtensions::Term::destroy(v13, a2);
        MEMORY[0x19AEA7644](v13, 0x1022C40407DD74BLL);
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v14 = (WTF *)*((_QWORD *)this + 1);
  if (v14)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v14, a2);
  }
  if (*(_QWORD *)this)
    WTF::fastFree((WTF *)(*(_QWORD *)this - 16), a2);
}

BOOL WebCore::ContentExtensions::CombinedURLFilters::isEmpty(WebCore::ContentExtensions::CombinedURLFilters *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 3) + 12) == 0;
}

char *WebCore::ContentExtensions::CombinedURLFilters::addPattern(char *result, void *a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned __int8 **v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::ContentExtensions::Term *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  WTF *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  WTF **v52;
  uint64_t v53;
  WTF **v54;
  unsigned __int8 **v55;
  WTF *v56;
  WTF *v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  int v73;
  WTF *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  void *v85;
  char **v86;
  uint64_t v87;
  unsigned __int8 *v88;
  WTF *v89;
  void *v90;
  WebCore::ContentExtensions::Term *v91;

  v90 = a2;
  v3 = *((unsigned int *)a3 + 3);
  if (!(_DWORD)v3)
    return result;
  v4 = result;
  v5 = *((_QWORD *)result + 3);
  v6 = *a3;
  v86 = (char **)(result + 8);
  v87 = (uint64_t)&(*a3)[32 * v3];
  do
  {
    if (!*(_DWORD *)(v5 + 12))
    {
LABEL_19:
      v14 = *(_QWORD *)v4;
      if (*(_QWORD *)v4
        || (WTF::HashTable<WebCore::ContentExtensions::Term const*,WebCore::ContentExtensions::Term const*,WTF::IdentityExtractor,WebCore::ContentExtensions::CombinedFiltersAlphabet::TermPointerHash,WTF::HashTraits<WebCore::ContentExtensions::Term const*>,WTF::HashTraits<WebCore::ContentExtensions::Term const*>>::rehash((uint64_t *)v4, 8u, 0), (v14 = *(_QWORD *)v4) != 0))
      {
        v15 = *(_DWORD *)(v14 - 8);
      }
      else
      {
        v15 = 0;
      }
      LODWORD(v91) = -1640531527;
      WORD2(v91) = 0;
      BYTE6(v91) = 0;
      WebCore::ContentExtensions::add((unsigned int *)&v91, v6);
      v16 = v91;
      if (BYTE6(v91))
      {
        v61 = ((_DWORD)v91 + WORD2(v91)) ^ (((_DWORD)v91 + WORD2(v91)) << 11);
        v16 = v61 + (v61 >> 17);
      }
      v17 = 0;
      v18 = 0;
      v19 = (v16 ^ (8 * v16)) + ((v16 ^ (8 * v16)) >> 5);
      v20 = (v19 ^ (4 * v19)) + ((v19 ^ (4 * v19)) >> 15);
      v21 = v20 ^ (v20 << 10);
      if (!v21)
        v21 = 0x800000;
      v22 = v6 + 8;
      while (1)
      {
        v23 = v21 & v15;
        v24 = (unsigned __int8 **)(v14 + 8 * (v21 & v15));
        v25 = *v24;
        if (*v24 == (unsigned __int8 *)-1)
        {
          v18 = (unsigned __int8 **)(v14 + 8 * v23);
        }
        else
        {
          if (!v25)
          {
            if (v18)
              v24 = v18;
            if (*v24 == (unsigned __int8 *)-1)
            {
              *v24 = 0;
              --*(_DWORD *)(*(_QWORD *)v4 - 16);
            }
            v30 = operator new();
            v31 = *v6;
            *(_BYTE *)v30 = v31;
            *(_BYTE *)(v30 + 1) = v6[1];
            *(_BYTE *)(v30 + 8) = 0;
            v32 = (_OWORD *)(v30 + 8);
            if (v31 == 2)
            {
              WTF::Vector<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v32, (uint64_t)(v6 + 8));
            }
            else if (v31 == 1)
            {
              v33 = *(_OWORD *)v22;
              *(_QWORD *)(v30 + 24) = *((_QWORD *)v6 + 3);
              *v32 = v33;
            }
            v91 = (WebCore::ContentExtensions::Term *)v30;
            *v24 = (unsigned __int8 *)v30;
            v34 = *((unsigned int *)v4 + 5);
            if ((_DWORD)v34 == *((_DWORD *)v4 + 4))
            {
              v35 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, v34 + 1, (unint64_t)&v91);
              v37 = *((unsigned int *)v4 + 5);
              v38 = *((_QWORD *)v4 + 1);
              v39 = *(_QWORD *)v35;
              *(_QWORD *)v35 = 0;
              *(_QWORD *)(v38 + 8 * v37) = v39;
              v40 = v91;
              *((_DWORD *)v4 + 5) = v37 + 1;
              v91 = 0;
              if (v40)
              {
                WebCore::ContentExtensions::Term::destroy((uint64_t)v40, v36);
                MEMORY[0x19AEA7644](v40, 0x1022C40407DD74BLL);
              }
            }
            else
            {
              *(_QWORD *)(*((_QWORD *)v4 + 1) + 8 * v34) = v30;
              *((_DWORD *)v4 + 5) = v34 + 1;
            }
            v41 = *(_QWORD *)v4;
            if (*(_QWORD *)v4)
              v42 = *(_DWORD *)(v41 - 12) + 1;
            else
              v42 = 1;
            *(_DWORD *)(v41 - 12) = v42;
            v43 = *(_QWORD *)v4;
            if (*(_QWORD *)v4)
              v44 = *(_DWORD *)(v43 - 12);
            else
              v44 = 0;
            v45 = (*(_DWORD *)(v43 - 16) + v44);
            v46 = *(unsigned int *)(v43 - 4);
            if (v46 > 0x400)
            {
              if (v46 <= 2 * v45)
              {
LABEL_67:
                v47 = (_DWORD)v46 << (6 * *(_DWORD *)(v43 - 12) >= (2 * v46));
                goto LABEL_70;
              }
            }
            else if (3 * v46 <= 4 * v45)
            {
              if ((_DWORD)v46)
                goto LABEL_67;
              v47 = 8;
LABEL_70:
              v24 = (unsigned __int8 **)WTF::HashTable<WebCore::ContentExtensions::Term const*,WebCore::ContentExtensions::Term const*,WTF::IdentityExtractor,WebCore::ContentExtensions::CombinedFiltersAlphabet::TermPointerHash,WTF::HashTraits<WebCore::ContentExtensions::Term const*>,WTF::HashTraits<WebCore::ContentExtensions::Term const*>>::rehash((uint64_t *)v4, v47, v24);
            }
LABEL_71:
            v88 = *v24;
            v48 = (WTF *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v48 = 0;
            *((_QWORD *)v48 + 1) = 0;
            v89 = v48;
            v49 = *(unsigned int *)(v5 + 12);
            if ((_DWORD)v49 == *(_DWORD *)(v5 + 8))
            {
              v50 = (_QWORD *)WTF::Vector<WebCore::ContentExtensions::PrefixTreeEdge,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v49 + 1, (unint64_t)&v88);
              v49 = *(unsigned int *)(v5 + 12);
              v51 = (_QWORD *)(*(_QWORD *)v5 + 16 * v49);
              v53 = *v50;
              v52 = (WTF **)(v50 + 1);
              *v51 = v53;
              v54 = (WTF **)(v51 + 1);
            }
            else
            {
              v55 = (unsigned __int8 **)(*(_QWORD *)v5 + 16 * v49);
              *v55 = v88;
              v54 = (WTF **)(v55 + 1);
              v52 = &v89;
            }
            v56 = *v52;
            *v52 = 0;
            *v54 = v56;
            *(_DWORD *)(v5 + 12) = v49 + 1;
            v57 = v89;
            v89 = 0;
            if (v57)
            {
              v58 = *((unsigned int *)v57 + 3);
              if ((_DWORD)v58)
                WTF::VectorTypeOperations<WebCore::ContentExtensions::PrefixTreeEdge>::destruct(*(_QWORD *)v57, (WTF **)(*(_QWORD *)v57 + 16 * v58));
              v59 = *(WTF **)v57;
              if (*(_QWORD *)v57)
              {
                *(_QWORD *)v57 = 0;
                *((_DWORD *)v57 + 2) = 0;
                WTF::fastFree(v59, a2);
              }
              WTF::fastFree(v57, a2);
            }
            v60 = *(unsigned int *)(v5 + 12);
            if ((_DWORD)v60)
            {
              v8 = v60 - 1;
              goto LABEL_82;
            }
LABEL_125:
            __break(0xC471u);
            JUMPOUT(0x1957164C4);
          }
          v26 = *v6;
          if (v26 == *v25 && v6[1] == v25[1])
          {
            if (v26 == 1)
            {
              if (v25[8] == *v22)
              {
                v28 = *((_QWORD *)v25 + 2);
                v27 = *((_QWORD *)v25 + 3);
                if (v28 == *((_QWORD *)v6 + 2) && v27 == *((_QWORD *)v6 + 3))
                  goto LABEL_71;
              }
            }
            else if (v26 == 2)
            {
              if (WTF::operator==<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((unsigned __int8 **)v25 + 1, (unsigned __int8 **)v6 + 1))
              {
                goto LABEL_71;
              }
            }
            else if (!*v6)
            {
              goto LABEL_71;
            }
          }
        }
        v21 = ++v17 + v23;
      }
    }
    v7 = 0;
    v8 = 0;
    v9 = *v6;
    while (1)
    {
      v10 = *(unsigned __int8 ***)(*(_QWORD *)v5 + v7);
      if (v9 == *(unsigned __int8 *)v10 && v6[1] == *((unsigned __int8 *)v10 + 1))
      {
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            if (WTF::operator==<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(v10 + 1, (unsigned __int8 **)v6 + 1))
            {
              break;
            }
          }
          else if (!v9)
          {
            break;
          }
          goto LABEL_18;
        }
        if (*((unsigned __int8 *)v10 + 8) == v6[8])
        {
          v12 = v10[2];
          v11 = v10[3];
          if (v12 == *((unsigned __int8 **)v6 + 2) && v11 == *((unsigned __int8 **)v6 + 3))
            break;
        }
      }
LABEL_18:
      ++v8;
      v7 += 16;
      if (v8 >= *(unsigned int *)(v5 + 12))
        goto LABEL_19;
    }
    if (v8 >= *(unsigned int *)(v5 + 12))
      goto LABEL_125;
LABEL_82:
    v5 = *(_QWORD *)(*(_QWORD *)v5 + 16 * v8 + 8);
    v6 += 32;
  }
  while (v6 != (unsigned __int8 *)v87);
  v64 = *((_QWORD *)v4 + 4);
  v63 = (uint64_t *)(v4 + 32);
  v62 = v64;
  if (v64
    || (WTF::HashTable<WebCore::ContentExtensions::PrefixTreeVertex const*,WTF::KeyValuePair<WebCore::ContentExtensions::PrefixTreeVertex const*,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContentExtensions::PrefixTreeVertex const*,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ContentExtensions::PrefixTreeVertex const*>,WTF::HashMap<WebCore::ContentExtensions::PrefixTreeVertex const*,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ContentExtensions::PrefixTreeVertex const*>,WTF::HashTraits<WebCore::ContentExtensions::PrefixTreeVertex const*>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ContentExtensions::PrefixTreeVertex const*>>::rehash(v63, 8u, 0), (v62 = *v63) != 0))
  {
    v65 = *(_DWORD *)(v62 - 8);
  }
  else
  {
    v65 = 0;
  }
  v66 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
  v67 = 9 * ((v66 + ~(v66 << 13)) ^ ((v66 + ~(v66 << 13)) >> 8));
  v68 = (v67 ^ (v67 >> 15)) + ~((v67 ^ (v67 >> 15)) << 27);
  v69 = v65 & ((v68 >> 31) ^ v68);
  v70 = (uint64_t *)(v62 + 24 * v69);
  v71 = *v70;
  if (!*v70)
  {
LABEL_99:
    *v70 = v5;
    v74 = (WTF *)v70[1];
    if (v74)
    {
      v70[1] = 0;
      *((_DWORD *)v70 + 4) = 0;
      WTF::fastFree(v74, a2);
    }
    v70[1] = 0;
    v70[2] = 0;
    v75 = *v63;
    if (*v63)
      v76 = *(_DWORD *)(v75 - 12) + 1;
    else
      v76 = 1;
    *(_DWORD *)(v75 - 12) = v76;
    v77 = *v63;
    if (*v63)
      v78 = *(_DWORD *)(v77 - 12);
    else
      v78 = 0;
    v79 = (*(_DWORD *)(v77 - 16) + v78);
    v80 = *(unsigned int *)(v77 - 4);
    if (v80 > 0x400)
    {
      if (v80 > 2 * v79)
        goto LABEL_114;
    }
    else
    {
      if (3 * v80 > 4 * v79)
        goto LABEL_114;
      if (!(_DWORD)v80)
      {
        v81 = 8;
        goto LABEL_113;
      }
    }
    v81 = (_DWORD)v80 << (6 * *(_DWORD *)(v77 - 12) >= (2 * v80));
LABEL_113:
    v70 = WTF::HashTable<WebCore::ContentExtensions::PrefixTreeVertex const*,WTF::KeyValuePair<WebCore::ContentExtensions::PrefixTreeVertex const*,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContentExtensions::PrefixTreeVertex const*,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ContentExtensions::PrefixTreeVertex const*>,WTF::HashMap<WebCore::ContentExtensions::PrefixTreeVertex const*,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ContentExtensions::PrefixTreeVertex const*>,WTF::HashTraits<WebCore::ContentExtensions::PrefixTreeVertex const*>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ContentExtensions::PrefixTreeVertex const*>>::rehash(v63, v81, v70);
    goto LABEL_114;
  }
  v72 = 0;
  v73 = 1;
  while (v71 != v5)
  {
    if (v71 == -1)
      v72 = v70;
    v69 = (v69 + v73) & v65;
    v70 = (uint64_t *)(v62 + 24 * v69);
    v71 = *v70;
    ++v73;
    if (!*v70)
    {
      if (v72)
      {
        *v72 = 0;
        v72[1] = 0;
        v72[2] = 0;
        --*(_DWORD *)(*v63 - 16);
        v70 = v72;
      }
      goto LABEL_99;
    }
  }
LABEL_114:
  result = (char *)(v70 + 1);
  v82 = *((unsigned int *)v70 + 5);
  if ((_DWORD)v82)
  {
    v83 = *(char **)result;
    v84 = *((unsigned int *)v70 + 5);
    while (1)
    {
      v85 = *(void **)v83;
      v83 += 8;
      if (v85 == v90)
        break;
      if (!--v84)
        goto LABEL_118;
    }
  }
  else
  {
LABEL_118:
    if ((_DWORD)v82 == *((_DWORD *)v70 + 4))
    {
      result = WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v82 + 1, (unint64_t)&v90);
      v82 = *((unsigned int *)v70 + 5);
      *(_QWORD *)(v70[1] + 8 * v82) = *(_QWORD *)result;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)result + 8 * v82) = v90;
    }
    *((_DWORD *)v70 + 5) = v82 + 1;
  }
  return result;
}

BOOL WebCore::ContentExtensions::CombinedURLFilters::processNFAs(uint64_t a1, void *a2, _QWORD *a3)
{
  unsigned int v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char *v13;
  void *v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  _QWORD *v42;
  WTF *v43;
  char *v44;
  uint64_t *v45;
  _OWORD *v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  WTF *v63;
  unsigned int v64;
  uint64_t v65;
  void *v66;
  _DWORD *v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  WTF *v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  WTF *v84;
  unsigned int v85;
  int v86;
  WTF *v87;
  char **v88;
  uint64_t v89;
  char *v90;
  char *v91;
  WTF *v92;
  int v93;
  _DWORD *v94;
  int v95;
  uint64_t v96;
  WTF *v97;
  WTF *v98;
  uint64_t v99;
  WTF *v100;
  int v101;
  int v102;
  WTF *v103;
  char **v104;
  uint64_t v105;
  WTF *v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  WTF *v111;
  uint64_t v112;
  uint64_t v113;
  int *v114;
  int *v115;
  uint64_t v116;
  int *v117;
  WTF *v118;
  unsigned int v119;
  int v120;
  WTF *v121;
  char **v122;
  uint64_t v123;
  int *v124;
  unsigned int v125;
  char **v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  WTF *v130;
  int v131;
  uint64_t v132;
  WTF *v133;
  uint64_t v134;
  WTF *v135;
  int v136;
  WTF *v137;
  unint64_t v138;
  int v139;
  WTF *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  BOOL v146;
  void *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  int v156;
  char *v157;
  char *v158;
  _QWORD *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  WTF *v172;
  uint64_t v173;
  uint64_t v174;
  WTF *v175;
  int v176;
  char *v177;
  WTF *v178;
  unint64_t v179;
  int v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int *v186;
  int *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  WTF *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  WTF *v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  int v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unsigned int v209;
  uint64_t *v210;
  uint64_t v211;
  int v212;
  int v213;
  unsigned int v215;
  _QWORD *v216;
  uint64_t v217;
  unsigned int *v218;
  int v219;
  uint64_t v220;
  char *v221;
  WTF *v222;
  WTF *v223;
  WTF *v224;
  WTF *v225;
  void *v226;
  unint64_t v227;
  uint64_t v228;
  WTF *v229;
  unsigned int *v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unsigned int v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  __int128 v246;
  _QWORD *v247;
  void *v248;
  uint64_t v249;
  uint64_t *v250;
  char *v251;
  _OWORD *v252;
  _OWORD *v253;
  __int128 v254;
  int v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unsigned int v260;
  _QWORD *v261;
  uint64_t v262;
  _QWORD *v263;
  int v264;
  int v265;
  int v266;
  uint64_t v267;
  unint64_t v268;
  unsigned int v269;
  uint64_t v270;
  void *v271;
  _DWORD *v272;
  unsigned int v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unsigned int v279;
  int v280;
  unsigned int v281;
  uint64_t v282;
  char *v283;
  _BYTE *v284;
  WTF *v285;
  char *v286;
  WTF *v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  WTF *v293;
  uint64_t v294;
  int v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unsigned int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  void *v305;
  unsigned __int16 *v306;
  int v307;
  unsigned int v308;
  unsigned int v309;
  int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  unsigned int v321;
  unsigned int v322;
  uint64_t v323;
  int v324;
  unsigned int v325;
  uint64_t v326;
  void *v327;
  uint64_t v328;
  void *v329;
  void *v330;
  char *v331;
  unsigned __int16 *v332;
  uint64_t v333;
  void *v334;
  WTF *v335;
  WTF **v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  unint64_t v343;
  unsigned int v344;
  char *v345;
  char *v346;
  __int128 v347;
  _QWORD *v348;
  WTF *v349;
  WTF *v350;
  WTF *v351;
  WTF *v352;
  __int128 v353;
  int v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unsigned int v359;
  _QWORD *v360;
  uint64_t v361;
  _QWORD *v362;
  int v363;
  int v364;
  WTF *v365;
  int v366;
  uint64_t v367;
  unint64_t v368;
  int v369;
  unsigned int v370;
  uint64_t v371;
  uint64_t v372;
  WTF *v373;
  uint64_t i;
  unint64_t v375;
  int v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unsigned int v380;
  int v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  char *v388;
  char *v389;
  uint64_t v390;
  uint64_t v391;
  char *v392;
  char *v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t v396;
  int v397;
  char *v398;
  char *v399;
  unsigned int v400;
  uint64_t *v401;
  char **v402;
  uint64_t v403;
  char *v404;
  char *v405;
  char *v406;
  int v407;
  _DWORD *v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  int *v412;
  int *v413;
  uint64_t v414;
  int *v415;
  int v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  uint64_t v420;
  char **v421;
  uint64_t v422;
  int *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  WTF *v428;
  uint64_t v429;
  uint64_t v430;
  _QWORD **v431;
  uint64_t v432;
  char *v433;
  char *v434;
  __int128 v435;
  _QWORD *v436;
  void *v437;
  _QWORD *v438;
  uint64_t v439;
  uint64_t v440;
  char *v441;
  _QWORD *v442;
  uint64_t *v443;
  uint64_t v444;
  _QWORD *v445;
  uint64_t *v446;
  uint64_t v447;
  void *v448;
  WTF *v449;
  uint64_t v450;
  uint64_t v451;
  WTF *v452;
  char *v453;
  char *v454;
  uint64_t v455;
  unsigned int v456;
  uint64_t *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unsigned int v464;
  WTF *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  char *v469;
  unsigned int v470;
  uint64_t v471;
  uint64_t v472;
  int v473;
  uint64_t j;
  uint64_t v475;
  uint64_t v476;
  WTF *v477;
  uint64_t v478;
  WTF *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t *v482;
  WTF *v483;
  unsigned int v484;
  uint64_t v485;
  uint64_t v486;
  int v487;
  WTF *v488;
  WTF *v489;
  WTF *v490;
  WTF *v491;
  WTF *v492;
  WTF *v493;
  uint64_t *v497;
  WTF *v498;
  char v499;
  unsigned __int16 *__s2;
  uint64_t v502;
  uint64_t v503;
  unsigned int v504;
  unsigned int v505;
  int v506;
  int v507;
  uint64_t v508;
  unsigned int v509;
  unsigned int *v510;
  uint64_t v511;
  _DWORD *v512;
  int v513;
  uint64_t *v514;
  int v515;
  char *v516;
  char *v517;
  unsigned int v518;
  int v519;
  WTF *v520;
  uint64_t v521;
  WTF *v522;
  unsigned int v523;
  WTF *v524[6];
  WTF *v525[2];
  WTF *v526[2];
  WTF *v527[2];
  WTF *v528[2];
  WTF *v529[2];
  uint64_t v530;
  WTF *v531;
  uint64_t v532;
  _BYTE v533[1024];
  _BYTE v534[40];
  int v535;
  char v536;
  WTF *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  WTF *v541;
  WTF *v542[5];
  int v543;
  char v544;
  int v545;

  v497 = (uint64_t *)(a1 + 24);
  do
  {
    v3 = 0;
    v530 = 0;
    v531 = (WTF *)v533;
    v532 = 128;
    v4 = 128;
    v5 = v497;
    while (1)
    {
      v6 = *v5;
      v530 = *v5;
      if (v3 == v4)
      {
        v7 = WTF::Vector<WebCore::ContentExtensions::ReverseSuffixTreeVertex *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v531, v3 + 1, (unint64_t)&v530);
        v3 = HIDWORD(v532);
        *((_QWORD *)v531 + HIDWORD(v532)) = *(_QWORD *)v7;
      }
      else
      {
        *((_QWORD *)v531 + v3) = v6;
      }
      HIDWORD(v532) = v3 + 1;
      v8 = *(unsigned int *)(v530 + 12);
      if (!(_DWORD)v8)
        break;
      v5 = (uint64_t *)(*(_QWORD *)v530 + 16 * v8 - 8);
      v4 = v532;
      ++v3;
    }
    if (!v3)
    {
      v136 = 3;
      goto LABEL_621;
    }
    if (v3 + 1 >= 2)
    {
      v9 = v531;
      do
      {
        v10 = *((_QWORD *)v9 + v3 - 1);
        v11 = *(unsigned int *)(v10 + 12);
        if (!(_DWORD)v11)
        {
          __break(0xC471u);
          JUMPOUT(0x195718CB0);
        }
        if (!WebCore::ContentExtensions::Term::hasFixedLength(*(WebCore::ContentExtensions::Term **)(*(_QWORD *)v10 + 16 * v11 - 16)))
          break;
        HIDWORD(v532) = v3;
        v12 = v3-- != 0;
      }
      while (v3 != 0 && v12);
    }
    *(_OWORD *)v528 = 0u;
    *(_OWORD *)v529 = 0u;
    *(_OWORD *)v526 = 0u;
    *(_OWORD *)v527 = 0u;
    *(_OWORD *)v525 = 0u;
    v524[0] = (WTF *)v525;
    memset(&v524[1], 0, 37);
    *(_OWORD *)v542 = 0uLL;
    v541 = 0;
    v13 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v525, 1uLL, (unint64_t)&v541);
    v15 = 0;
    v16 = (char *)v525[0] + 24 * HIDWORD(v525[1]);
    v17 = *(_OWORD *)v13;
    *((_QWORD *)v16 + 2) = *((_QWORD *)v13 + 2);
    *(_OWORD *)v16 = v17;
    v18 = HIDWORD(v532);
    ++HIDWORD(v525[1]);
    if (HIDWORD(v532) != 1)
    {
      v19 = 0;
      v20 = 0;
      while (1)
      {
        if (v18 <= v20)
        {
          __break(0xC471u);
          JUMPOUT(0x195718C88);
        }
        v518 = v20;
        v21 = *((_QWORD *)v531 + v19);
        v22 = *(unsigned int *)(v21 + 12);
        if (!(_DWORD)v22)
        {
          __break(0xC471u);
          JUMPOUT(0x195718C90);
        }
        v23 = *(_QWORD *)v21 + 16 * v22;
        v24 = *(_QWORD *)(v23 - 16);
        v25 = *(_QWORD *)(a1 + 32);
        if (!v25)
          goto LABEL_26;
        v26 = *(_QWORD *)(v23 - 8);
        v27 = *(_DWORD *)(v25 - 8);
        v28 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        v32 = *(_QWORD *)(v25 + 24 * v31);
        if (v32 != v26)
          break;
LABEL_23:
        v34 = v25 + 24 * v31;
        v35 = *(unsigned int *)(v34 + 20);
        if (!(_DWORD)v35)
          goto LABEL_26;
        if (v35 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x195718CB8);
        }
        v36 = v34 + 8;
        v37 = (char *)WTF::fastMalloc((WTF *)(8 * v35));
        memcpy(v37, *(const void **)v36, 8 * *(unsigned int *)(v36 + 12));
LABEL_27:
        *(_OWORD *)v542 = 0uLL;
        v541 = 0;
        v38 = HIDWORD(v525[1]);
        if (HIDWORD(v525[1]) == LODWORD(v525[1]))
        {
          v39 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v525, HIDWORD(v525[1]) + 1, (unint64_t)&v541);
          v40 = (char *)v525[0] + 24 * HIDWORD(v525[1]);
          v41 = *(_OWORD *)v39;
          *((_QWORD *)v40 + 2) = *((_QWORD *)v39 + 2);
          *(_OWORD *)v40 = v41;
        }
        else
        {
          v42 = (_QWORD *)((char *)v525[0] + 24 * HIDWORD(v525[1]));
          *v42 = 0;
          v42[1] = 0;
          v42[2] = 0;
        }
        ++HIDWORD(v525[1]);
        v515 = v38;
        WebCore::ContentExtensions::Term::generateGraph(v24, (uint64_t)v525, (uint64_t)v524, v38);
        v43 = 0;
        if (v35)
        {
          v44 = &v37[8 * v35];
          v45 = (uint64_t *)v37;
          while (1)
          {
            if (v43)
              goto LABEL_34;
            v46 = (_OWORD *)WTF::fastMalloc((WTF *)0x50);
            *(_QWORD *)&v47 = -1;
            *((_QWORD *)&v47 + 1) = -1;
            v46[2] = v47;
            v46[3] = v47;
            v46[4] = v47;
            *v46 = xmmword_1968A5190;
            v46[1] = v47;
            v43 = (WTF *)(v46 + 1);
            if (v46 == (_OWORD *)-16)
              v48 = 0;
            else
LABEL_34:
              v48 = *((_DWORD *)v43 - 2);
            v49 = *v45;
            v50 = *v45 + ~(*v45 << 32);
            v51 = (v50 ^ (v50 >> 22)) + ~((v50 ^ (v50 >> 22)) << 13);
            v52 = (9 * (v51 ^ (v51 >> 8))) ^ ((9 * (v51 ^ (v51 >> 8))) >> 15);
            v53 = v48 & (((v52 + ~(v52 << 27)) >> 31) ^ (v52 + ~((_DWORD)v52 << 27)));
            v54 = (uint64_t *)((char *)v43 + 8 * v53);
            v55 = *v54;
            if (*v54 == -1)
              goto LABEL_43;
            v56 = 0;
            v57 = 1;
            do
            {
              if (v55 == v49)
                goto LABEL_63;
              if (v55 == -2)
                v56 = v54;
              v53 = (v53 + v57) & v48;
              v54 = (uint64_t *)((char *)v43 + 8 * v53);
              v55 = *v54;
              ++v57;
            }
            while (*v54 != -1);
            if (!v56)
            {
LABEL_43:
              *v54 = v49;
              v58 = *((_DWORD *)v43 - 4);
              v59 = *((_DWORD *)v43 - 3);
            }
            else
            {
              *v56 = -1;
              v58 = *((_DWORD *)v43 - 4) - 1;
              *((_DWORD *)v43 - 4) = v58;
              *v56 = *v45;
              v59 = *((_DWORD *)v43 - 3);
            }
            v60 = v59 + 1;
            *((_DWORD *)v43 - 3) = v59 + 1;
            v61 = (v59 + 1 + v58);
            v62 = *((unsigned int *)v43 - 1);
            if (v62 > 0x400)
              break;
            if (3 * v62 > 4 * v61)
              goto LABEL_46;
            if ((_DWORD)v62)
              goto LABEL_48;
            v64 = 8;
LABEL_51:
            v65 = WTF::fastMalloc((WTF *)(8 * v64 + 16));
            v67 = (_DWORD *)v65;
            v63 = (WTF *)(v65 + 16);
            if (v64)
              memset((void *)(v65 + 16), 255, 8 * v64);
            v68 = v64 - 1;
            v67[2] = v64 - 1;
            v67[3] = v64;
            *v67 = 0;
            v67[1] = v60;
            if ((_DWORD)v62)
            {
              v69 = 0;
              if (!v63)
                v68 = 0;
              do
              {
                v70 = *((_QWORD *)v43 + v69);
                if (v70 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v71 = (v70 + ~(v70 << 32)) ^ ((v70 + ~(v70 << 32)) >> 22);
                  v72 = 9 * ((v71 + ~(v71 << 13)) ^ ((v71 + ~(v71 << 13)) >> 8));
                  v73 = (v72 ^ (v72 >> 15)) + ~((v72 ^ (v72 >> 15)) << 27);
                  v74 = v68 & ((v73 >> 31) ^ v73);
                  v75 = 1;
                  do
                  {
                    v76 = v74;
                    v77 = *((_QWORD *)v63 + v74);
                    v74 = (v74 + v75++) & v68;
                  }
                  while (v77 != -1);
                  *((_QWORD *)v63 + v76) = v70;
                }
                ++v69;
              }
              while (v69 != v62);
            }
            WTF::fastFree((WTF *)((char *)v43 - 16), v66);
            if (!v63)
            {
              v43 = 0;
              goto LABEL_63;
            }
LABEL_62:
            v43 = v63;
LABEL_63:
            if (++v45 == (uint64_t *)v44)
              goto LABEL_68;
          }
          if (v62 > 2 * v61)
          {
LABEL_46:
            v63 = v43;
            goto LABEL_62;
          }
LABEL_48:
          v64 = (_DWORD)v62 << (6 * v60 >= (2 * v62));
          goto LABEL_51;
        }
LABEL_68:
        if (v37)
          WTF::fastFree((WTF *)v37, v14);
        if (BYTE4(v524[5]))
          goto LABEL_154;
        BYTE4(v524[5]) = 1;
        if (!v524[4])
        {
          v80 = 0;
          v78 = 0;
LABEL_80:
          v79 = (WTF *)((char *)v524[4] + 8 * v78);
          goto LABEL_81;
        }
        v78 = *((unsigned int *)v524[4] - 1);
        v79 = (WTF *)((char *)v524[4] + 8 * v78);
        if (!*((_DWORD *)v524[4] - 3))
        {
          v80 = (WTF *)((char *)v524[4] + 8 * v78);
          goto LABEL_80;
        }
        v80 = v524[4];
        if ((_DWORD)v78)
        {
          v81 = 8 * v78;
          v80 = v524[4];
          do
          {
            if (*(_QWORD *)v80 < 0xFFFFFFFFFFFFFFFELL)
              goto LABEL_81;
            v80 = (WTF *)((char *)v80 + 8);
            v81 -= 8;
          }
          while (v81);
          v80 = v79;
        }
LABEL_81:
        v82 = v524[0];
        v83 = *(_QWORD *)v524[0];
        if (v524[4])
          v84 = (WTF *)((char *)v524[4] + 8 * *((unsigned int *)v524[4] - 1));
        else
          v84 = 0;
        v85 = v524[5];
        v86 = *((_DWORD *)v524[0] + 19);
        if (v84 == v80)
        {
          v93 = *((_DWORD *)v524[0] + 19);
        }
        else
        {
          do
          {
            v87 = v524[0];
            v88 = (char **)((char *)v524[0] + 64);
            v89 = *((unsigned int *)v524[0] + 19);
            if ((_DWORD)v89 == *((_DWORD *)v524[0] + 18))
            {
              v90 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, v89 + 1, (unint64_t)v80);
              v89 = *((unsigned int *)v87 + 19);
              v91 = (char *)(*((_QWORD *)v87 + 8) + 8 * v89);
            }
            else
            {
              v91 = &(*v88)[8 * v89];
              v90 = (char *)v80;
            }
            *(_QWORD *)v91 = *(_QWORD *)v90;
            *((_DWORD *)v87 + 19) = v89 + 1;
            v92 = (WTF *)((char *)v80 + 8);
            v80 = v79;
            if (v92 != v79)
            {
              v80 = v92;
              do
              {
                if (*(_QWORD *)v80 < 0xFFFFFFFFFFFFFFFELL)
                  goto LABEL_93;
                v80 = (WTF *)((char *)v80 + 8);
              }
              while (v80 != v79);
              v80 = v79;
            }
LABEL_93:
            ;
          }
          while (v80 != v84);
          v82 = v524[0];
          v93 = *((_DWORD *)v524[0] + 19);
        }
        v94 = (_DWORD *)(v83 + 24 * v85);
        v94[4] = v86;
        v94[5] = v93;
        v512 = v94;
        v95 = *((_DWORD *)v82 + 15);
        if (v524[3])
        {
          v96 = *((unsigned int *)v524[3] - 1);
          v97 = (WTF *)((char *)v524[3] + 4 * v96);
          if (*((_DWORD *)v524[3] - 3))
          {
            v98 = v524[3];
            if ((_DWORD)v96)
            {
              v99 = 4 * v96;
              v98 = v524[3];
              do
              {
                if (*(_DWORD *)v98 < 0xFFFFFFFE)
                  goto LABEL_103;
                v98 = (WTF *)((char *)v98 + 4);
                v99 -= 4;
              }
              while (v99);
              v98 = v97;
            }
            goto LABEL_103;
          }
          v98 = (WTF *)((char *)v524[3] + 4 * v96);
        }
        else
        {
          v98 = 0;
          v96 = 0;
        }
        v97 = (WTF *)((char *)v524[3] + 4 * v96);
        if (!v524[3])
        {
          v100 = 0;
          goto LABEL_108;
        }
LABEL_103:
        v100 = (WTF *)((char *)v524[3] + 4 * *((unsigned int *)v524[3] - 1));
LABEL_108:
        v101 = *((_DWORD *)v82 + 15);
        if (v100 != v98)
        {
          do
          {
            LODWORD(v541) = 0;
            v102 = *(_DWORD *)v98;
            LODWORD(v541) = *(_DWORD *)v98;
            v103 = v524[0];
            v104 = (char **)((char *)v524[0] + 48);
            v105 = *((unsigned int *)v524[0] + 15);
            if ((_DWORD)v105 == *((_DWORD *)v524[0] + 14))
              *(_DWORD *)(*((_QWORD *)v103 + 6) + 4 * *((unsigned int *)v103 + 15)) = *(_DWORD *)WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v104, v105 + 1, (unint64_t)&v541);
            else
              *(_DWORD *)&(*v104)[4 * v105] = v102;
            ++*((_DWORD *)v103 + 15);
            v106 = (WTF *)((char *)v98 + 4);
            v98 = v97;
            if (v106 != v97)
            {
              v98 = v106;
              do
              {
                if (*(_DWORD *)v98 < 0xFFFFFFFE)
                  goto LABEL_117;
                v98 = (WTF *)((char *)v98 + 4);
              }
              while (v98 != v97);
              v98 = v97;
            }
LABEL_117:
            ;
          }
          while (v98 != v100);
          v82 = v524[0];
          v101 = *((_DWORD *)v524[0] + 15);
        }
        v107 = v83 + 24 * v85;
        *(_DWORD *)(v107 + 8) = v95;
        *(_DWORD *)(v107 + 12) = v101;
        v108 = *((_DWORD *)v82 + 7);
        v109 = v108;
        if (!HIDWORD(v524[2]))
          goto LABEL_153;
        v506 = v108;
        v509 = v85;
        v110 = 0;
        v111 = v524[1];
        do
        {
          v112 = *((_QWORD *)v111 + 2 * v110);
          if (v112)
          {
            v113 = *(unsigned int *)(v112 - 4);
            v114 = (int *)(v112 + 4 * v113);
            if (*(_DWORD *)(v112 - 12))
            {
              v115 = (int *)*((_QWORD *)v111 + 2 * v110);
              if ((_DWORD)v113)
              {
                v116 = 4 * v113;
                v115 = (int *)*((_QWORD *)v111 + 2 * v110);
                while (*v115 >= 0xFFFFFFFE)
                {
                  ++v115;
                  v116 -= 4;
                  if (!v116)
                  {
                    v115 = v114;
                    break;
                  }
                }
              }
LABEL_128:
              v117 = (int *)(v112 + 4 * *(unsigned int *)(v112 - 4));
              goto LABEL_133;
            }
            v115 = (int *)(v112 + 4 * v113);
          }
          else
          {
            v115 = 0;
            v113 = 0;
          }
          v114 = (int *)(v112 + 4 * v113);
          if (v112)
            goto LABEL_128;
          v117 = 0;
LABEL_133:
          v118 = v524[0];
          v119 = *((_DWORD *)v524[0] + 11);
          if (v117 == v115)
          {
            v125 = *((_DWORD *)v524[0] + 11);
          }
          else
          {
            do
            {
              LODWORD(v541) = 0;
              v120 = *v115;
              LODWORD(v541) = *v115;
              v121 = v524[0];
              v122 = (char **)((char *)v524[0] + 32);
              v123 = *((unsigned int *)v524[0] + 11);
              if ((_DWORD)v123 == *((_DWORD *)v524[0] + 10))
                *(_DWORD *)(*((_QWORD *)v121 + 4) + 4 * *((unsigned int *)v121 + 11)) = *(_DWORD *)WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v122, v123 + 1, (unint64_t)&v541);
              else
                *(_DWORD *)&(*v122)[4 * v123] = v120;
              ++*((_DWORD *)v121 + 11);
              v124 = v115 + 1;
              v115 = v114;
              if (v124 != v114)
              {
                v115 = v124;
                while (*v115 >= 0xFFFFFFFE)
                {
                  if (++v115 == v114)
                  {
                    v115 = v114;
                    break;
                  }
                }
              }
            }
            while (v115 != v117);
            v118 = v524[0];
            v125 = *((_DWORD *)v524[0] + 11);
          }
          v126 = (char **)((char *)v118 + 16);
          v541 = (WTF *)__PAIR64__(v125, v119);
          LOWORD(v542[0]) = *((_WORD *)v111 + 8 * v110 + 6);
          v127 = *((unsigned int *)v118 + 7);
          if ((_DWORD)v127 == *((_DWORD *)v118 + 6))
          {
            v128 = WTF::Vector<WebCore::ContentExtensions::ImmutableRange<char>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v126, v127 + 1, (unint64_t)&v541);
            v129 = *((_QWORD *)v118 + 2) + 12 * *((unsigned int *)v118 + 7);
            v130 = *(WTF **)v128;
            v131 = *((_DWORD *)v128 + 2);
          }
          else
          {
            v129 = (uint64_t)&(*v126)[12 * v127];
            v130 = v541;
            v131 = (int)v542[0];
          }
          *(_DWORD *)(v129 + 8) = v131;
          *(_QWORD *)v129 = v130;
          ++*((_DWORD *)v118 + 7);
          v111 = v524[1];
          v132 = *((unsigned int *)v524[1] + 4 * v110 + 2);
          if ((_DWORD)v132)
            v110 = v110 & 0xFFFFFFFF00000000 | v132;
          else
            v110 = v110 & 0xFFFFFF0000000000 | v132 & 0xFFFFFF00FFFFFFFFLL | 0x100000000;
        }
        while ((v110 & 0xFF00000000) != 0x100000000);
        v109 = *((_DWORD *)v524[0] + 7);
        v85 = v509;
        v108 = v506;
LABEL_153:
        *v512 = v108;
        *(_DWORD *)(v83 + 24 * v85 + 4) = v109;
LABEL_154:
        v524[0] = (WTF *)v525;
        v133 = v524[1];
        if (HIDWORD(v524[2]))
        {
          v134 = 16 * HIDWORD(v524[2]);
          do
          {
            if (*(_QWORD *)v133)
              WTF::fastFree((WTF *)(*(_QWORD *)v133 - 16), v14);
            v133 = (WTF *)((char *)v133 + 16);
            v134 -= 16;
          }
          while (v134);
          v133 = v524[1];
        }
        if (v133)
        {
          v524[1] = 0;
          LODWORD(v524[2]) = 0;
          WTF::fastFree(v133, v14);
        }
        memset(&v524[1], 0, 24);
        if (v524[3])
          WTF::fastFree((WTF *)((char *)v524[3] - 16), v14);
        v135 = v524[4];
        v524[4] = v43;
        if (v135)
          WTF::fastFree((WTF *)((char *)v135 - 16), v14);
        LODWORD(v524[5]) = v515;
        BYTE4(v524[5]) = 0;
        v19 = v518 + 1;
        v18 = HIDWORD(v532);
        v15 = HIDWORD(v532) - 1;
        v20 = v518 + 1;
        if (v15 <= v19)
        {
          if (!HIDWORD(v532))
          {
            __break(0xC471u);
            JUMPOUT(0x195718D00);
          }
          goto LABEL_170;
        }
      }
      v33 = 1;
      while (v32)
      {
        v31 = (v31 + v33) & v27;
        v32 = *(_QWORD *)(v25 + 24 * v31);
        ++v33;
        if (v32 == v26)
          goto LABEL_23;
      }
LABEL_26:
      v37 = 0;
      v35 = 0;
      goto LABEL_27;
    }
LABEL_170:
    v137 = (WTF *)*((_QWORD *)v531 + v15);
    v539 = 0;
    v538 = 0;
    v537 = 0;
    if (!*((_DWORD *)v137 + 3))
      goto LABEL_603;
    v541 = v137;
    *(_OWORD *)v542 = *(_OWORD *)v524;
    v542[2] = v524[2];
    *(_OWORD *)&v542[3] = *(_OWORD *)&v524[3];
    v543 = (int)v524[5];
    v544 = BYTE4(v524[5]);
    memset(v524, 0, 40);
    BYTE4(v524[5]) = 1;
    v545 = 0;
    v138 = WTF::Vector<WebCore::ContentExtensions::ActiveSubtree,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v537, 1uLL, (unint64_t)&v541);
    v139 = HIDWORD(v538);
    v140 = v537;
    v141 = (char *)v537 + 64 * (unint64_t)HIDWORD(v538);
    *(_QWORD *)v141 = *(_QWORD *)v138;
    *((_QWORD *)v141 + 1) = *(_QWORD *)(v138 + 8);
    *((_OWORD *)v141 + 1) = 0u;
    v142 = *(_QWORD *)(v138 + 16);
    *(_QWORD *)(v138 + 16) = 0;
    *((_QWORD *)v141 + 2) = v142;
    LODWORD(v142) = *(_DWORD *)(v138 + 24);
    *(_DWORD *)(v138 + 24) = 0;
    *((_DWORD *)v141 + 6) = v142;
    LODWORD(v142) = *(_DWORD *)(v138 + 28);
    *(_DWORD *)(v138 + 28) = 0;
    *((_DWORD *)v141 + 7) = v142;
    *((_QWORD *)v141 + 4) = 0;
    v143 = *(_QWORD *)(v138 + 32);
    *(_QWORD *)(v138 + 32) = 0;
    *((_QWORD *)v141 + 4) = v143;
    *((_QWORD *)v141 + 5) = 0;
    v144 = *(_QWORD *)(v138 + 40);
    *(_QWORD *)(v138 + 40) = 0;
    *((_QWORD *)v141 + 5) = v144;
    *((_DWORD *)v141 + 12) = *(_DWORD *)(v138 + 48);
    v141[52] = *(_BYTE *)(v138 + 52);
    *(_QWORD *)(v138 + 8) = 0;
    *(_BYTE *)(v138 + 52) = 1;
    *((_DWORD *)v141 + 14) = *(_DWORD *)(v138 + 56);
    v145 = v139 + 1;
    v146 = v139 == -1;
    HIDWORD(v538) = v139 + 1;
    WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::~ImmutableNFANodeBuilder((uint64_t)v542, v147);
    if (v146)
      goto LABEL_601;
    v499 = 0;
    do
    {
      while (1)
      {
        v148 = (char *)v140 + 64 * (unint64_t)v145;
        v151 = *((_DWORD *)v148 - 2);
        v149 = v148 - 8;
        v150 = v151;
        v152 = *((_QWORD *)v149 - 7);
        v153 = *(unsigned int *)(v152 + 12);
        if (v153 <= v151)
          break;
        if ((v499 & 1) != 0)
        {
          *(_DWORD *)v149 = v153;
          v499 = 1;
          if (!v145)
            goto LABEL_563;
        }
        else
        {
          v177 = *(char **)v152;
          if ((WebCore::ContentExtensions::Term::hasFixedLength(*(WebCore::ContentExtensions::Term **)&v177[16 * v150]) & 1) != 0)
          {
            memset(v534, 0, sizeof(v534));
            v178 = *(WTF **)&v177[16 * v150 + 8];
            v541 = v178;
            memset(v542, 0, sizeof(v542));
            v543 = v535;
            v544 = 1;
            *(_OWORD *)v534 = 0u;
            v536 = 1;
            v545 = 0;
            if (v145 == (_DWORD)v538)
            {
              v179 = WTF::Vector<WebCore::ContentExtensions::ActiveSubtree,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v537, v145 + 1, (unint64_t)&v541);
              v180 = HIDWORD(v538);
              v140 = v537;
              v181 = (char *)v537 + 64 * (unint64_t)HIDWORD(v538);
              *(_QWORD *)v181 = *(_QWORD *)v179;
              v182 = *(_QWORD *)(v179 + 8);
              *((_QWORD *)v181 + 2) = 0;
              *((_QWORD *)v181 + 3) = 0;
              *((_QWORD *)v181 + 1) = v182;
              v183 = *(_QWORD *)(v179 + 16);
              *(_QWORD *)(v179 + 16) = 0;
              *((_QWORD *)v181 + 2) = v183;
              LODWORD(v183) = *(_DWORD *)(v179 + 24);
              *(_DWORD *)(v179 + 24) = 0;
              *((_DWORD *)v181 + 6) = v183;
              LODWORD(v183) = *(_DWORD *)(v179 + 28);
              *(_DWORD *)(v179 + 28) = 0;
              *((_DWORD *)v181 + 7) = v183;
              *((_QWORD *)v181 + 4) = 0;
              v184 = *(_QWORD *)(v179 + 32);
              *(_QWORD *)(v179 + 32) = 0;
              *((_QWORD *)v181 + 4) = v184;
              *((_QWORD *)v181 + 5) = 0;
              v185 = *(_QWORD *)(v179 + 40);
              *(_QWORD *)(v179 + 40) = 0;
              *((_QWORD *)v181 + 5) = v185;
              *((_DWORD *)v181 + 12) = *(_DWORD *)(v179 + 48);
              v181[52] = *(_BYTE *)(v179 + 52);
              *(_QWORD *)(v179 + 8) = 0;
              *(_BYTE *)(v179 + 52) = 1;
              v186 = (int *)(v181 + 56);
              v187 = (int *)(v179 + 56);
            }
            else
            {
              v221 = (char *)v140 + 64 * (unint64_t)v145;
              *(_QWORD *)v221 = v178;
              v222 = v542[0];
              *((_QWORD *)v221 + 2) = 0;
              *((_QWORD *)v221 + 3) = 0;
              *((_QWORD *)v221 + 1) = v222;
              v223 = v542[1];
              v542[1] = 0;
              *((_QWORD *)v221 + 2) = v223;
              LODWORD(v223) = v542[2];
              LODWORD(v542[2]) = 0;
              *((_DWORD *)v221 + 6) = (_DWORD)v223;
              LODWORD(v223) = HIDWORD(v542[2]);
              HIDWORD(v542[2]) = 0;
              *((_DWORD *)v221 + 7) = (_DWORD)v223;
              *((_QWORD *)v221 + 4) = 0;
              v224 = v542[3];
              v542[3] = 0;
              *((_QWORD *)v221 + 4) = v224;
              *((_QWORD *)v221 + 5) = 0;
              v225 = v542[4];
              v542[4] = 0;
              *((_QWORD *)v221 + 5) = v225;
              *((_DWORD *)v221 + 12) = v543;
              v221[52] = v544;
              v542[0] = 0;
              v544 = 1;
              v186 = (int *)(v221 + 56);
              v180 = HIDWORD(v538);
              v187 = &v545;
            }
            *v186 = *v187;
            v145 = v180 + 1;
            HIDWORD(v538) = v180 + 1;
            WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::~ImmutableNFANodeBuilder((uint64_t)v542, v14);
            WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::~ImmutableNFANodeBuilder((uint64_t)v534, v226);
            v499 = 0;
            if (!v145)
              goto LABEL_563;
          }
          else
          {
            if (!v145)
            {
              __break(0xC471u);
              JUMPOUT(0x195718CF0);
            }
            v499 = 0;
            ++*((_DWORD *)v140 + 16 * (unint64_t)v145 - 2);
          }
        }
      }
      v154 = *(char **)v152;
      v155 = (char *)(*(_QWORD *)v152 + 16 * v153);
      if ((_DWORD)v153)
      {
        v519 = *(_DWORD *)(v152 + 12);
        v156 = 0;
        v157 = (char *)(*(_QWORD *)v152 + 16 * v153);
        v153 = (unint64_t)v157;
        do
        {
          if (!*(_QWORD *)v154)
          {
            v158 = v154;
            if (v153 != *(_QWORD *)v152 + 16 * *(unsigned int *)(v152 + 12))
            {
              if (v157 == v154)
              {
                v158 = (char *)v153;
              }
              else
              {
                if ((unint64_t)v157 <= v153)
                {
                  v166 = 0;
                  v165 = (v154 - v157) >> 4;
                  do
                  {
                    v167 = &v154[v166];
                    v168 = (_QWORD *)(v153 + ((v154 - v157) & 0xFFFFFFFFFFFFFFF0) - 16 + v166);
                    *v168 = *(_QWORD *)&v154[v166 - 16];
                    v169 = *(_QWORD *)&v154[v166 - 8];
                    *((_QWORD *)v167 - 1) = 0;
                    v168[1] = v169;
                    v170 = *(_QWORD *)&v154[v166 - 8];
                    *((_QWORD *)v167 - 1) = 0;
                    if (v170)
                    {
                      v171 = *(unsigned int *)(v170 + 12);
                      if ((_DWORD)v171)
                        WTF::VectorTypeOperations<WebCore::ContentExtensions::PrefixTreeEdge>::destruct(*(_QWORD *)v170, (WTF **)(*(_QWORD *)v170 + 16 * v171));
                      v172 = *(WTF **)v170;
                      if (*(_QWORD *)v170)
                      {
                        *(_QWORD *)v170 = 0;
                        *(_DWORD *)(v170 + 8) = 0;
                        WTF::fastFree(v172, v14);
                      }
                      WTF::fastFree((WTF *)v170, v14);
                    }
                    v166 -= 16;
                  }
                  while (&v154[v166] != v157);
                }
                else
                {
                  v159 = (_QWORD *)v153;
                  v160 = v157;
                  do
                  {
                    *v159 = *(_QWORD *)v160;
                    v161 = *((_QWORD *)v160 + 1);
                    *((_QWORD *)v160 + 1) = 0;
                    v159[1] = v161;
                    v162 = *((_QWORD *)v160 + 1);
                    *((_QWORD *)v160 + 1) = 0;
                    if (v162)
                    {
                      v163 = *(unsigned int *)(v162 + 12);
                      if ((_DWORD)v163)
                        WTF::VectorTypeOperations<WebCore::ContentExtensions::PrefixTreeEdge>::destruct(*(_QWORD *)v162, (WTF **)(*(_QWORD *)v162 + 16 * v163));
                      v164 = *(WTF **)v162;
                      if (*(_QWORD *)v162)
                      {
                        *(_QWORD *)v162 = 0;
                        *(_DWORD *)(v162 + 8) = 0;
                        WTF::fastFree(v164, v14);
                      }
                      WTF::fastFree((WTF *)v162, v14);
                    }
                    v160 += 16;
                    v159 += 2;
                  }
                  while (v160 != v154);
                  v165 = (v154 - v157) >> 4;
                }
                v158 = (char *)(v153 + 16 * v165);
              }
            }
            v173 = *((_QWORD *)v154 + 1);
            *((_QWORD *)v154 + 1) = 0;
            if (v173)
            {
              v174 = *(unsigned int *)(v173 + 12);
              if ((_DWORD)v174)
                WTF::VectorTypeOperations<WebCore::ContentExtensions::PrefixTreeEdge>::destruct(*(_QWORD *)v173, (WTF **)(*(_QWORD *)v173 + 16 * v174));
              v175 = *(WTF **)v173;
              if (*(_QWORD *)v173)
              {
                *(_QWORD *)v173 = 0;
                *(_DWORD *)(v173 + 8) = 0;
                WTF::fastFree(v175, v14);
              }
              WTF::fastFree((WTF *)v173, v14);
            }
            v157 = v154 + 16;
            ++v156;
            v153 = (unint64_t)v158;
          }
          v154 += 16;
        }
        while (v154 < v155);
        v154 = *(char **)v152;
        v176 = *(_DWORD *)(v152 + 12);
        v155 = (char *)v153;
        LODWORD(v153) = v519;
      }
      else
      {
        v176 = 0;
        v156 = 0;
        v157 = (char *)(*(_QWORD *)v152 + 16 * v153);
      }
      v188 = &v154[16 * v176];
      if (v157 != v188)
      {
        if (v157 <= v155)
        {
          v193 = &v155[((v188 - v157) & 0xFFFFFFFFFFFFFFF0) - 8];
          do
          {
            v194 = *((_QWORD *)v188 - 2);
            v188 -= 16;
            *((_QWORD *)v193 - 1) = v194;
            v195 = *((_QWORD *)v188 + 1);
            *((_QWORD *)v188 + 1) = 0;
            *(_QWORD *)v193 = v195;
            v196 = *((_QWORD *)v188 + 1);
            *((_QWORD *)v188 + 1) = 0;
            if (v196)
            {
              v197 = *(unsigned int *)(v196 + 12);
              if ((_DWORD)v197)
                WTF::VectorTypeOperations<WebCore::ContentExtensions::PrefixTreeEdge>::destruct(*(_QWORD *)v196, (WTF **)(*(_QWORD *)v196 + 16 * v197));
              v198 = *(WTF **)v196;
              if (*(_QWORD *)v196)
              {
                *(_QWORD *)v196 = 0;
                *(_DWORD *)(v196 + 8) = 0;
                WTF::fastFree(v198, v14);
              }
              WTF::fastFree((WTF *)v196, v14);
            }
            v193 -= 16;
          }
          while (v188 != v157);
        }
        else
        {
          do
          {
            *(_QWORD *)v155 = *(_QWORD *)v157;
            v189 = *((_QWORD *)v157 + 1);
            *((_QWORD *)v157 + 1) = 0;
            *((_QWORD *)v155 + 1) = v189;
            v190 = *((_QWORD *)v157 + 1);
            *((_QWORD *)v157 + 1) = 0;
            if (v190)
            {
              v191 = *(unsigned int *)(v190 + 12);
              if ((_DWORD)v191)
                WTF::VectorTypeOperations<WebCore::ContentExtensions::PrefixTreeEdge>::destruct(*(_QWORD *)v190, (WTF **)(*(_QWORD *)v190 + 16 * v191));
              v192 = *(WTF **)v190;
              if (*(_QWORD *)v190)
              {
                *(_QWORD *)v190 = 0;
                *(_DWORD *)(v190 + 8) = 0;
                WTF::fastFree(v192, v14);
              }
              WTF::fastFree((WTF *)v190, v14);
            }
            v157 += 16;
            v155 += 16;
          }
          while (v157 != v188);
        }
        v176 = *(_DWORD *)(v152 + 12);
      }
      *(_DWORD *)(v152 + 12) = v176 - v156;
      v199 = HIDWORD(v538);
      if ((_DWORD)v153)
      {
        if (!HIDWORD(v538))
        {
          __break(0xC471u);
          JUMPOUT(0x195718CE8);
        }
        v145 = HIDWORD(v538) - 1;
        WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::~ImmutableNFANodeBuilder((uint64_t)v537 + 64 * HIDWORD(v538) - 56, v14);
        HIDWORD(v538) = v145;
        if (v145)
          goto LABEL_553;
        break;
      }
      v200 = HIDWORD(v538) - 1;
      v201 = *(_QWORD *)(a1 + 32);
      if (!v201)
      {
        if (HIDWORD(v538) < 2)
        {
          if (HIDWORD(v538) == 1)
          {
            v199 = 1;
            goto LABEL_353;
          }
        }
        else
        {
          v215 = HIDWORD(v538) - 2;
          while (1)
          {
            v202 = v215;
            v216 = (_QWORD *)((char *)v537 + 64 * (unint64_t)v215);
            if (v216[1])
              goto LABEL_353;
            if (!--v200)
              break;
            --v215;
            if (*(_DWORD *)(*v216 + 12) != 1)
              goto LABEL_261;
          }
        }
LABEL_646:
        __break(0xC471u);
        JUMPOUT(0x195718C70);
      }
      if (HIDWORD(v538) >= 2)
      {
        v202 = (HIDWORD(v538) - 1);
        do
        {
          v203 = (uint64_t *)((char *)v537 + 64 * --v202);
          if (v203[1])
            goto LABEL_336;
          if (!v202)
            goto LABEL_646;
          v204 = *v203;
          v205 = *(_DWORD *)(v201 - 8);
          v206 = (~(v204 << 32) + v204) ^ ((unint64_t)(~(v204 << 32) + v204) >> 22);
          v207 = 9 * ((v206 + ~(v206 << 13)) ^ ((v206 + ~(v206 << 13)) >> 8));
          v208 = (v207 ^ (v207 >> 15)) + ~((v207 ^ (v207 >> 15)) << 27);
          v209 = v205 & ((v208 >> 31) ^ v208);
          v210 = (uint64_t *)(v201 + 24 * v209);
          v211 = *v210;
          if (*v210 != v204)
          {
            v212 = 1;
            while (v211)
            {
              v209 = (v209 + v212) & v205;
              v210 = (uint64_t *)(v201 + 24 * v209);
              v211 = *v210;
              ++v212;
              if (*v210 == v204)
                goto LABEL_249;
            }
            v210 = (uint64_t *)(v201 + 24 * *(unsigned int *)(v201 - 4));
          }
LABEL_249:
          v213 = *(_DWORD *)(v204 + 12);
        }
        while (v210 == (uint64_t *)(v201 + 24 * *(unsigned int *)(v201 - 4)) && v213 == 1);
        v200 = v202;
LABEL_261:
        v217 = 0;
        v218 = (unsigned int *)((char *)v537 + 64 * v202);
        do
        {
          v219 = v217;
          if (v202 == v217)
          {
            v218 = 0;
            goto LABEL_270;
          }
          v220 = *((_QWORD *)v218 - 7);
          ++v217;
          v218 -= 16;
        }
        while (!v220);
        if (v200 < (int)v202 - (int)v217 + 1)
        {
LABEL_336:
          if (!v199)
          {
            __break(0xC471u);
            JUMPOUT(0x195718CF8);
          }
          if (v201)
          {
            v293 = (WTF *)((char *)v537 + 64 * (unint64_t)v199 - 64);
            goto LABEL_339;
          }
LABEL_353:
          std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
          v498 = 0;
          v303 = 0;
          v311 = 0;
          __s2 = 0;
          v308 = -1640531527;
          goto LABEL_354;
        }
LABEL_270:
        v227 = (v202 - v219);
        v504 = v200;
        while (2)
        {
          v228 = v218[14];
          if (*(_DWORD *)(*(_QWORD *)v218 + 12) <= v228)
          {
            __break(0xC471u);
            JUMPOUT(0x195718C98);
          }
          if (v227 >= HIDWORD(v538))
          {
            __break(0xC471u);
            JUMPOUT(0x195718CA0);
          }
          v229 = v537;
          v230 = (unsigned int *)((char *)v537 + 64 * v227);
          v231 = *(_QWORD *)(**(_QWORD **)v218 + 16 * v228);
          v232 = *(_QWORD *)(a1 + 32);
          if (v232)
          {
            v233 = *(_DWORD *)(v232 - 8);
            v234 = ~(*(_QWORD *)v230 << 32) + *(_QWORD *)v230;
            v235 = (v234 ^ (v234 >> 22)) + ~((v234 ^ (v234 >> 22)) << 13);
            v236 = (9 * (v235 ^ (v235 >> 8))) ^ ((9 * (v235 ^ (v235 >> 8))) >> 15);
            v237 = v233 & (((v236 + ~(v236 << 27)) >> 31) ^ (v236 + ~((_DWORD)v236 << 27)));
            v238 = *(_QWORD *)(v232 + 24 * v237);
            if (v238 != *(_QWORD *)v230)
            {
              v239 = 1;
              while (v238)
              {
                v237 = (v237 + v239) & v233;
                v238 = *(_QWORD *)(v232 + 24 * v237);
                ++v239;
                if (v238 == *(_QWORD *)v230)
                  goto LABEL_278;
              }
              goto LABEL_281;
            }
LABEL_278:
            v240 = v232 + 24 * v237;
            v241 = *(unsigned int *)(v240 + 20);
            if (!(_DWORD)v241)
              goto LABEL_281;
            if (v241 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195718CC8);
            }
            v242 = v240 + 8;
            v516 = (char *)WTF::fastMalloc((WTF *)(8 * v241));
            memcpy(v516, *(const void **)v242, 8 * *(unsigned int *)(v242 + 12));
          }
          else
          {
LABEL_281:
            v241 = 0;
            v516 = 0;
          }
          *(_OWORD *)v542 = 0uLL;
          v541 = 0;
          v243 = HIDWORD(v525[1]);
          if (HIDWORD(v525[1]) == LODWORD(v525[1]))
          {
            v244 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v525, HIDWORD(v525[1]) + 1, (unint64_t)&v541);
            v245 = (char *)v525[0] + 24 * HIDWORD(v525[1]);
            v246 = *(_OWORD *)v244;
            *((_QWORD *)v245 + 2) = *((_QWORD *)v244 + 2);
            *(_OWORD *)v245 = v246;
          }
          else
          {
            v247 = (_QWORD *)((char *)v525[0] + 24 * HIDWORD(v525[1]));
            *v247 = 0;
            v247[1] = 0;
            v247[2] = 0;
          }
          v520 = v229;
          v510 = v230;
          v513 = v227;
          ++HIDWORD(v525[1]);
          v507 = v243;
          WebCore::ContentExtensions::Term::generateGraph(v231, (uint64_t)v525, (uint64_t)(v218 + 2), v243);
          v249 = 0;
          if (!v241)
          {
LABEL_318:
            v283 = (char *)v520 + 64 * v227;
            v284 = v283 + 52;
            if (!v283[52])
              WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::finalize(v283 + 8);
            *((_QWORD *)v283 + 1) = v525;
            v287 = (WTF *)*((_QWORD *)v283 + 2);
            v286 = v283 + 16;
            v285 = v287;
            v288 = *((unsigned int *)v286 + 3);
            if ((_DWORD)v288)
            {
              v289 = 16 * v288;
              do
              {
                if (*(_QWORD *)v285)
                  WTF::fastFree((WTF *)(*(_QWORD *)v285 - 16), v248);
                v285 = (WTF *)((char *)v285 + 16);
                v289 -= 16;
              }
              while (v289);
              v285 = *(WTF **)v286;
            }
            if (v285)
            {
              *(_QWORD *)v286 = 0;
              *((_DWORD *)v520 + 16 * v227 + 6) = 0;
              WTF::fastFree(v285, v248);
            }
            v290 = (char *)v520 + 64 * v227;
            *(_QWORD *)v286 = 0;
            *((_QWORD *)v286 + 1) = 0;
            v291 = *((_QWORD *)v290 + 4);
            *((_QWORD *)v290 + 4) = 0;
            if (v291)
              WTF::fastFree((WTF *)(v291 - 16), v248);
            v292 = *((_QWORD *)v290 + 5);
            *((_QWORD *)v290 + 5) = v249;
            if (v292)
              WTF::fastFree((WTF *)(v292 - 16), v248);
            *((_DWORD *)v520 + 16 * v227 + 12) = v507;
            *v284 = 0;
            if (v516)
              WTF::fastFree((WTF *)v516, v248);
            ++v227;
            v218 = v510;
            if (v504 < v513 + 1)
            {
              v201 = *(_QWORD *)(a1 + 32);
              v199 = HIDWORD(v538);
              goto LABEL_336;
            }
            continue;
          }
          break;
        }
        v250 = (uint64_t *)v516;
        v251 = &v516[8 * v241];
        while (2)
        {
          v252 = (_OWORD *)v249;
          if (!v249)
          {
            v253 = (_OWORD *)WTF::fastMalloc((WTF *)0x50);
            *(_QWORD *)&v254 = -1;
            *((_QWORD *)&v254 + 1) = -1;
            v253[2] = v254;
            v253[3] = v254;
            v253[4] = v254;
            *v253 = xmmword_1968A5190;
            v253[1] = v254;
            v252 = v253 + 1;
          }
          v255 = *((_DWORD *)v252 - 2);
          v256 = *v250;
          v257 = *v250 + ~(*v250 << 32);
          v258 = (v257 ^ (v257 >> 22)) + ~((v257 ^ (v257 >> 22)) << 13);
          v259 = (9 * (v258 ^ (v258 >> 8))) ^ ((9 * (v258 ^ (v258 >> 8))) >> 15);
          v260 = v255 & (((v259 + ~(v259 << 27)) >> 31) ^ (v259 + ~((_DWORD)v259 << 27)));
          v261 = (_QWORD *)v252 + v260;
          v262 = *v261;
          if (*v261 != -1)
          {
            v263 = 0;
            v264 = 1;
            while (v262 != v256)
            {
              if (v262 == -2)
                v263 = v261;
              v260 = (v260 + v264) & v255;
              v261 = (_QWORD *)v252 + v260;
              v262 = *v261;
              ++v264;
              if (*v261 == -1)
              {
                if (v263)
                {
                  *v263 = -1;
                  --*((_DWORD *)v252 - 4);
                  v256 = *v250;
                  v261 = v263;
                }
                goto LABEL_297;
              }
            }
LABEL_299:
            v249 = (uint64_t)v252;
LABEL_314:
            if (++v250 == (uint64_t *)v251)
              goto LABEL_318;
            continue;
          }
          break;
        }
LABEL_297:
        *v261 = v256;
        v265 = *((_DWORD *)v252 - 4);
        v266 = *((_DWORD *)v252 - 3) + 1;
        *((_DWORD *)v252 - 3) = v266;
        v267 = (v265 + v266);
        v268 = *((unsigned int *)v252 - 1);
        if (v268 > 0x400)
        {
          if (v268 > 2 * v267)
            goto LABEL_299;
LABEL_301:
          v269 = (_DWORD)v268 << (6 * v266 >= (2 * v268));
        }
        else
        {
          if (3 * v268 > 4 * v267)
            goto LABEL_299;
          if ((_DWORD)v268)
            goto LABEL_301;
          v269 = 8;
        }
        v270 = WTF::fastMalloc((WTF *)(8 * v269 + 16));
        v272 = (_DWORD *)v270;
        v249 = v270 + 16;
        if (v269)
          memset((void *)(v270 + 16), 255, 8 * v269);
        v273 = v269 - 1;
        v272[2] = v269 - 1;
        v272[3] = v269;
        *v272 = 0;
        v272[1] = v266;
        if ((_DWORD)v268)
        {
          v274 = 0;
          if (!v249)
            v273 = 0;
          do
          {
            v275 = *((_QWORD *)v252 + v274);
            if (v275 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v276 = (v275 + ~(v275 << 32)) ^ ((v275 + ~(v275 << 32)) >> 22);
              v277 = 9 * ((v276 + ~(v276 << 13)) ^ ((v276 + ~(v276 << 13)) >> 8));
              v278 = (v277 ^ (v277 >> 15)) + ~((v277 ^ (v277 >> 15)) << 27);
              v279 = v273 & ((v278 >> 31) ^ v278);
              v280 = 1;
              do
              {
                v281 = v279;
                v282 = *(_QWORD *)(v249 + 8 * v279);
                v279 = (v279 + v280++) & v273;
              }
              while (v282 != -1);
              *(_QWORD *)(v249 + 8 * v281) = v275;
            }
            ++v274;
          }
          while (v274 != v268);
        }
        WTF::fastFree((WTF *)(v252 - 1), v271);
        goto LABEL_314;
      }
      if (HIDWORD(v538) != 1)
        goto LABEL_646;
      v293 = v537;
      v199 = 1;
LABEL_339:
      v294 = *(_QWORD *)v293;
      v295 = *(_DWORD *)(v201 - 8);
      v296 = (~(v294 << 32) + v294) ^ ((unint64_t)(~(v294 << 32) + v294) >> 22);
      v297 = 9 * ((v296 + ~(v296 << 13)) ^ ((v296 + ~(v296 << 13)) >> 8));
      v298 = (v297 ^ (v297 >> 15)) + ~((v297 ^ (v297 >> 15)) << 27);
      v299 = v295 & ((v298 >> 31) ^ v298);
      v300 = *(_QWORD *)(v201 + 24 * v299);
      if (v300 != v294)
      {
        v301 = 1;
        while (v300)
        {
          v299 = (v299 + v301) & v295;
          v300 = *(_QWORD *)(v201 + 24 * v299);
          ++v301;
          if (v300 == v294)
            goto LABEL_343;
        }
        goto LABEL_353;
      }
LABEL_343:
      v302 = v201 + 24 * v299;
      v303 = *(unsigned int *)(v302 + 20);
      if (!(_DWORD)v303)
        goto LABEL_353;
      if (v303 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x195718D08);
      }
      v304 = v302 + 8;
      v305 = (void *)WTF::fastMalloc((WTF *)(8 * v303));
      memcpy(v305, *(const void **)v304, 8 * *(unsigned int *)(v304 + 12));
      v306 = (unsigned __int16 *)WTF::fastMalloc((WTF *)(8 * v303));
      v498 = (WTF *)v305;
      memcpy(v306, v305, 8 * v303);
      std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
      v307 = -2 * v303;
      v308 = -1640531527;
      __s2 = v306;
      do
      {
        v309 = v308 + *v306;
        v310 = (v306[1] << 11) ^ (v309 << 16);
        v308 = (v310 ^ v309) + ((v310 ^ v309) >> 11);
        v306 += 2;
        v12 = __CFADD__(v307++, 1);
      }
      while (!v12);
      v311 = v303;
LABEL_354:
      v312 = (v308 ^ (8 * v308)) + ((v308 ^ (8 * v308)) >> 5);
      v313 = (v312 ^ (4 * v312)) + ((v312 ^ (4 * v312)) >> 15);
      v314 = v313 ^ (v313 << 10);
      if (v314)
        v315 = v314;
      else
        v315 = 0x800000;
      v316 = v539;
      v521 = v303;
      if (v539
        || (WTF::HashTable<WebCore::ContentExtensions::HashableActionList,WTF::KeyValuePair<WebCore::ContentExtensions::HashableActionList,WebCore::ContentExtensions::ReverseSuffixTreeVertex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContentExtensions::HashableActionList,WebCore::ContentExtensions::ReverseSuffixTreeVertex>>,WebCore::ContentExtensions::HashableActionListHash,WTF::HashMap<WebCore::ContentExtensions::HashableActionList,WebCore::ContentExtensions::ReverseSuffixTreeVertex,WebCore::ContentExtensions::HashableActionListHash,WebCore::ContentExtensions::HashableActionListHashTraits,WTF::HashTraits<WebCore::ContentExtensions::ReverseSuffixTreeVertex>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::ContentExtensions::HashableActionListHashTraits>::rehash(&v539, 8u, 0), (v316 = v539) != 0))
      {
        v317 = *(_DWORD *)(v316 - 8);
      }
      else
      {
        v317 = 0;
      }
      v318 = 0;
      v319 = 1;
      v320 = v315;
      v321 = v315;
      while (1)
      {
        v322 = v321 & v317;
        v323 = v316 + 48 * (v321 & v317);
        v324 = *(_DWORD *)(v323 + 20);
        if (v324)
          break;
        if (*(_DWORD *)(v323 + 12) == v311 && !memcmp(*(const void **)v323, __s2, 8 * v311))
          goto LABEL_444;
LABEL_368:
        v321 = v319 + v322;
        ++v319;
      }
      if (v324 == 2)
      {
        v318 = v316 + 48 * v322;
        goto LABEL_368;
      }
      if (v324 != 1)
        goto LABEL_368;
      if (v318)
      {
        *(_QWORD *)v318 = 0;
        *(_QWORD *)(v318 + 8) = 0;
        *(_DWORD *)(v318 + 20) = 1;
        *(_QWORD *)(v318 + 32) = 0;
        *(_QWORD *)(v318 + 40) = 0;
        *(_QWORD *)(v318 + 24) = 0;
        --*(_DWORD *)(v316 - 16);
        v323 = v318;
      }
      if (*(_DWORD *)(v323 + 12) <= v311)
      {
        v326 = v521;
        if (v311 > *(_DWORD *)(v323 + 8))
        {
          WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)v323, 0);
          if (*(_DWORD *)(v323 + 8) < v311)
          {
            v327 = *(void **)v323;
            v328 = *(unsigned int *)(v323 + 12);
            v329 = (void *)WTF::fastMalloc((WTF *)(8 * v311));
            *(_DWORD *)(v323 + 8) = v311;
            *(_QWORD *)v323 = v329;
            memcpy(v329, v327, 8 * v328);
            if (v327)
            {
              if (*(void **)v323 == v327)
              {
                *(_QWORD *)v323 = 0;
                *(_DWORD *)(v323 + 8) = 0;
              }
              WTF::fastFree((WTF *)v327, v330);
            }
          }
        }
        v325 = *(_DWORD *)(v323 + 12);
      }
      else
      {
        *(_DWORD *)(v323 + 12) = v311;
        v325 = v311;
        v326 = v521;
      }
      v331 = *(char **)v323;
      if (v325)
      {
        v332 = __s2;
        memmove(v331, __s2, 8 * v325);
        v333 = *(unsigned int *)(v323 + 12);
        v331 = *(char **)v323;
      }
      else
      {
        v333 = 0;
        v332 = __s2;
      }
      memcpy(&v331[8 * v333], &v332[4 * v333], 8 * v311 - 8 * v333);
      v336 = (WTF **)(v323 + 24);
      v335 = *(WTF **)(v323 + 24);
      *(_DWORD *)(v323 + 12) = v311;
      *(_QWORD *)(v323 + 16) = v320;
      v337 = *(unsigned int *)(v323 + 36);
      if ((_DWORD)v337)
      {
        v338 = 16 * v337;
        v339 = (uint64_t *)((char *)v335 + 8);
        do
        {
          v339 = std::unique_ptr<WebCore::ContentExtensions::ReverseSuffixTreeVertex>::~unique_ptr[abi:sn180100](v339, v334)+ 2;
          v338 -= 16;
        }
        while (v338);
        v335 = *v336;
      }
      if (v335)
      {
        *(_QWORD *)(v323 + 24) = 0;
        *(_DWORD *)(v323 + 32) = 0;
        WTF::fastFree(v335, v334);
      }
      *v336 = 0;
      *(_QWORD *)(v323 + 32) = 0;
      *(_DWORD *)(v323 + 40) = 0;
      v340 = v539;
      if (v539)
        v341 = *(_DWORD *)(v539 - 12) + 1;
      else
        v341 = 1;
      *(_DWORD *)(v539 - 12) = v341;
      v342 = (*(_DWORD *)(v340 - 16) + v341);
      v343 = *(unsigned int *)(v340 - 4);
      if (v343 > 0x400)
      {
        if (v343 <= 2 * v342)
        {
LABEL_393:
          v344 = (_DWORD)v343 << (6 * v341 >= (2 * v343));
          goto LABEL_396;
        }
      }
      else if (3 * v343 <= 4 * v342)
      {
        if ((_DWORD)v343)
          goto LABEL_393;
        v344 = 8;
LABEL_396:
        v323 = WTF::HashTable<WebCore::ContentExtensions::HashableActionList,WTF::KeyValuePair<WebCore::ContentExtensions::HashableActionList,WebCore::ContentExtensions::ReverseSuffixTreeVertex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContentExtensions::HashableActionList,WebCore::ContentExtensions::ReverseSuffixTreeVertex>>,WebCore::ContentExtensions::HashableActionListHash,WTF::HashMap<WebCore::ContentExtensions::HashableActionList,WebCore::ContentExtensions::ReverseSuffixTreeVertex,WebCore::ContentExtensions::HashableActionListHash,WebCore::ContentExtensions::HashableActionListHashTraits,WTF::HashTraits<WebCore::ContentExtensions::ReverseSuffixTreeVertex>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::ContentExtensions::HashableActionListHashTraits>::rehash(&v539, v344, v323);
      }
      v541 = (WTF *)v525;
      BYTE4(v542[4]) = 0;
      memset(v542, 0, 32);
      LODWORD(v542[4]) = HIDWORD(v525[1]);
      memset(v534, 0, 24);
      if (HIDWORD(v525[1]) == LODWORD(v525[1]))
      {
        v345 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v525, HIDWORD(v525[1]) + 1, (unint64_t)v534);
        v346 = (char *)v525[0] + 24 * HIDWORD(v525[1]);
        v347 = *(_OWORD *)v345;
        *((_QWORD *)v346 + 2) = *((_QWORD *)v345 + 2);
        *(_OWORD *)v346 = v347;
      }
      else
      {
        v348 = (_QWORD *)((char *)v525[0] + 24 * HIDWORD(v525[1]));
        *v348 = 0;
        v348[1] = 0;
        v348[2] = 0;
      }
      ++HIDWORD(v525[1]);
      if (v326)
      {
        v349 = v498;
        v350 = (WTF *)((char *)v498 + 8 * v326);
        v522 = v350;
        do
        {
          v351 = v542[3];
          if (v542[3])
            goto LABEL_404;
          v352 = (WTF *)WTF::fastMalloc((WTF *)0x50);
          *(_QWORD *)&v353 = -1;
          *((_QWORD *)&v353 + 1) = -1;
          *((_OWORD *)v352 + 1) = v353;
          *((_OWORD *)v352 + 2) = v353;
          v352 = (WTF *)((char *)v352 + 16);
          *((_OWORD *)v352 + 2) = v353;
          *((_OWORD *)v352 + 3) = v353;
          v542[3] = v352;
          *((_DWORD *)v352 - 1) = 8;
          *((_DWORD *)v542[3] - 2) = 7;
          *((_DWORD *)v542[3] - 4) = 0;
          *((_DWORD *)v542[3] - 3) = 0;
          v351 = v542[3];
          if (v542[3])
LABEL_404:
            v354 = *((_DWORD *)v351 - 2);
          else
            v354 = 0;
          v355 = *(_QWORD *)v349;
          v356 = *(_QWORD *)v349 + ~(*(_QWORD *)v349 << 32);
          v357 = (v356 ^ (v356 >> 22)) + ~((v356 ^ (v356 >> 22)) << 13);
          v358 = (9 * (v357 ^ (v357 >> 8))) ^ ((9 * (v357 ^ (v357 >> 8))) >> 15);
          v359 = v354 & (((v358 + ~(v358 << 27)) >> 31) ^ (v358 + ~((_DWORD)v358 << 27)));
          v360 = (_QWORD *)((char *)v351 + 8 * v359);
          v361 = *v360;
          if (*v360 != -1)
          {
            v362 = 0;
            v363 = 1;
            while (v361 != v355)
            {
              if (v361 == -2)
                v362 = v360;
              v359 = (v359 + v363) & v354;
              v360 = (_QWORD *)((char *)v351 + 8 * v359);
              v361 = *v360;
              ++v363;
              if (*v360 == -1)
              {
                if (v362)
                {
                  *v362 = -1;
                  --*((_DWORD *)v542[3] - 4);
                  v355 = *(_QWORD *)v349;
                  v360 = v362;
                }
                goto LABEL_413;
              }
            }
            goto LABEL_439;
          }
LABEL_413:
          *v360 = v355;
          if (v542[3])
            v364 = *((_DWORD *)v542[3] - 3) + 1;
          else
            v364 = 1;
          *((_DWORD *)v542[3] - 3) = v364;
          v365 = v542[3];
          if (v542[3])
            v366 = *((_DWORD *)v542[3] - 3);
          else
            v366 = 0;
          v367 = (*((_DWORD *)v542[3] - 4) + v366);
          v368 = *((unsigned int *)v542[3] - 1);
          if (v368 > 0x400)
          {
            if (v368 <= 2 * v367)
              goto LABEL_422;
          }
          else if (3 * v368 <= 4 * v367)
          {
            if ((_DWORD)v368)
            {
LABEL_422:
              v369 = *((_DWORD *)v542[3] - 3);
              v370 = (_DWORD)v368 << (6 * v369 >= (2 * v368));
            }
            else
            {
              v369 = *((_DWORD *)v542[3] - 3);
              v370 = 8;
            }
            v371 = WTF::fastMalloc((WTF *)(8 * v370 + 16));
            v372 = v371;
            v373 = (WTF *)(v371 + 16);
            if (v370)
              memset((void *)(v371 + 16), 255, 8 * v370);
            v542[3] = v373;
            *(_DWORD *)(v372 + 12) = v370;
            *((_DWORD *)v542[3] - 2) = v370 - 1;
            *((_DWORD *)v542[3] - 4) = 0;
            *((_DWORD *)v542[3] - 3) = v369;
            v350 = v522;
            if (!(_DWORD)v368)
              goto LABEL_438;
            for (i = 0; i != v368; ++i)
            {
              v375 = *((_QWORD *)v365 + i);
              if (v375 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                if (v542[3])
                  v376 = *((_DWORD *)v542[3] - 2);
                else
                  v376 = 0;
                v377 = (v375 + ~(v375 << 32)) ^ ((v375 + ~(v375 << 32)) >> 22);
                v378 = 9 * ((v377 + ~(v377 << 13)) ^ ((v377 + ~(v377 << 13)) >> 8));
                v379 = (v378 ^ (v378 >> 15)) + ~((v378 ^ (v378 >> 15)) << 27);
                v380 = v376 & ((v379 >> 31) ^ v379);
                v381 = 1;
                do
                {
                  v382 = v380;
                  v383 = *((_QWORD *)v542[3] + v380);
                  v380 = (v380 + v381++) & v376;
                }
                while (v383 != -1);
                *((_QWORD *)v542[3] + v382) = v375;
              }
            }
            if (v365)
LABEL_438:
              WTF::fastFree((WTF *)((char *)v365 - 16), v334);
          }
LABEL_439:
          v349 = (WTF *)((char *)v349 + 8);
        }
        while (v349 != v350);
      }
      *(_DWORD *)(v323 + 40) = v542[4];
      WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::~ImmutableNFANodeBuilder((uint64_t)&v541, v334);
      v199 = HIDWORD(v538);
LABEL_444:
      v503 = v323 + 24;
      v505 = *(_DWORD *)(v323 + 40);
      v384 = v199 - 2;
      while (2)
      {
        if (HIDWORD(v538) <= v384)
        {
          __break(0xC471u);
          JUMPOUT(0x195718C78);
        }
        v385 = (char *)v537 + 64 * (unint64_t)v384;
        v386 = *(_QWORD *)v385;
        v387 = *((unsigned int *)v385 + 14);
        if (*(_DWORD *)(*(_QWORD *)v385 + 12) <= v387)
        {
          __break(0xC471u);
          JUMPOUT(0x195718C80);
        }
        v514 = (uint64_t *)(*(_QWORD *)v386 + 16 * v387);
        v511 = *((_QWORD *)v385 + 1);
        if (v511)
        {
          v502 = (uint64_t)(v385 + 8);
          v508 = (v384 + 1);
          if (HIDWORD(v538) != (_DWORD)v508)
          {
            v388 = (char *)v537 + 64 * (unint64_t)HIDWORD(v538);
            v389 = (char *)v537 + 64 * v508;
            v517 = v388;
            while (v389[52])
            {
LABEL_501:
              v425 = *((_QWORD *)v389 + 5);
              if (v425)
                WTF::fastFree((WTF *)(v425 - 16), v14);
              v426 = *((_QWORD *)v389 + 4);
              if (v426)
                WTF::fastFree((WTF *)(v426 - 16), v14);
              v427 = *((unsigned int *)v389 + 7);
              v428 = (WTF *)*((_QWORD *)v389 + 2);
              if ((_DWORD)v427)
              {
                v429 = 16 * v427;
                do
                {
                  if (*(_QWORD *)v428)
                    WTF::fastFree((WTF *)(*(_QWORD *)v428 - 16), v14);
                  v428 = (WTF *)((char *)v428 + 16);
                  v429 -= 16;
                }
                while (v429);
                v428 = (WTF *)*((_QWORD *)v389 + 2);
              }
              if (v428)
              {
                *((_QWORD *)v389 + 2) = 0;
                *((_DWORD *)v389 + 6) = 0;
                WTF::fastFree(v428, v14);
              }
              v389 += 64;
              if (v389 == v388)
                goto LABEL_514;
            }
            v389[52] = 1;
            v390 = *((_QWORD *)v389 + 5);
            if (v390)
            {
              v391 = *(unsigned int *)(v390 - 4);
              v392 = (char *)(v390 + 8 * v391);
              if (*(_DWORD *)(v390 - 12))
              {
                v393 = (char *)*((_QWORD *)v389 + 5);
                if ((_DWORD)v391)
                {
                  v394 = 8 * v391;
                  v393 = (char *)*((_QWORD *)v389 + 5);
                  while (*(_QWORD *)v393 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    v393 += 8;
                    v394 -= 8;
                    if (!v394)
                    {
                      v393 = v392;
                      break;
                    }
                  }
                }
LABEL_461:
                v395 = (uint64_t *)*((_QWORD *)v389 + 1);
                v396 = *v395;
                v397 = *((_DWORD *)v395 + 19);
                if (v390)
                  v398 = (char *)(v390 + 8 * *(unsigned int *)(v390 - 4));
                else
                  v398 = 0;
                v399 = v389 + 8;
                v400 = *((_DWORD *)v389 + 12);
                if (v398 == v393)
                {
                  v407 = *((_DWORD *)v395 + 19);
                }
                else
                {
                  do
                  {
                    v401 = *(uint64_t **)v399;
                    v402 = (char **)(*(_QWORD *)v399 + 64);
                    v403 = *(unsigned int *)(*(_QWORD *)v399 + 76);
                    if ((_DWORD)v403 == *(_DWORD *)(*(_QWORD *)v399 + 72))
                    {
                      v404 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v402, v403 + 1, (unint64_t)v393);
                      v403 = *((unsigned int *)v401 + 19);
                      v405 = (char *)(v401[8] + 8 * v403);
                    }
                    else
                    {
                      v405 = &(*v402)[8 * v403];
                      v404 = v393;
                    }
                    *(_QWORD *)v405 = *(_QWORD *)v404;
                    *((_DWORD *)v401 + 19) = v403 + 1;
                    v406 = v393 + 8;
                    v393 = v392;
                    if (v406 != v392)
                    {
                      v393 = v406;
                      while (*(_QWORD *)v393 >= 0xFFFFFFFFFFFFFFFELL)
                      {
                        v393 += 8;
                        if (v393 == v392)
                        {
                          v393 = v392;
                          break;
                        }
                      }
                    }
                  }
                  while (v393 != v398);
                  v395 = *(uint64_t **)v399;
                  v407 = *(_DWORD *)(*(_QWORD *)v399 + 76);
                }
                v408 = (_DWORD *)(v396 + 24 * v400);
                v408[4] = v397;
                v408[5] = v407;
                v409 = *((_DWORD *)v395 + 15);
                v410 = *((_QWORD *)v389 + 4);
                if (v410)
                {
                  v411 = *(unsigned int *)(v410 - 4);
                  v412 = (int *)(v410 + 4 * v411);
                  if (*(_DWORD *)(v410 - 12))
                  {
                    v413 = (int *)*((_QWORD *)v389 + 4);
                    if ((_DWORD)v411)
                    {
                      v414 = 4 * v411;
                      v413 = (int *)*((_QWORD *)v389 + 4);
                      while (*v413 >= 0xFFFFFFFE)
                      {
                        ++v413;
                        v414 -= 4;
                        if (!v414)
                        {
                          v413 = v412;
                          break;
                        }
                      }
                    }
LABEL_483:
                    v415 = (int *)(v410 + 4 * *(unsigned int *)(v410 - 4));
                    goto LABEL_488;
                  }
                  v413 = (int *)(v410 + 4 * v411);
                }
                else
                {
                  v413 = 0;
                  v411 = 0;
                }
                v412 = (int *)(v410 + 4 * v411);
                if (v410)
                  goto LABEL_483;
                v415 = 0;
LABEL_488:
                v416 = v409;
                if (v415 != v413)
                {
                  v523 = v400;
                  v417 = v396;
                  v418 = v384;
                  do
                  {
                    LODWORD(v541) = 0;
                    v419 = *v413;
                    LODWORD(v541) = *v413;
                    v420 = *(_QWORD *)v399;
                    v421 = (char **)(*(_QWORD *)v399 + 48);
                    v422 = *(unsigned int *)(*(_QWORD *)v399 + 60);
                    if ((_DWORD)v422 == *(_DWORD *)(*(_QWORD *)v399 + 56))
                      *(_DWORD *)(*(_QWORD *)(v420 + 48) + 4 * *(unsigned int *)(v420 + 60)) = *(_DWORD *)WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v421, v422 + 1, (unint64_t)&v541);
                    else
                      *(_DWORD *)&(*v421)[4 * v422] = v419;
                    ++*(_DWORD *)(v420 + 60);
                    v423 = v413 + 1;
                    v413 = v412;
                    if (v423 != v412)
                    {
                      v413 = v423;
                      while (*v413 >= 0xFFFFFFFE)
                      {
                        if (++v413 == v412)
                        {
                          v413 = v412;
                          break;
                        }
                      }
                    }
                  }
                  while (v413 != v415);
                  v416 = *(_DWORD *)(*(_QWORD *)v399 + 60);
                  v384 = v418;
                  v396 = v417;
                  v400 = v523;
                }
                v424 = v396 + 24 * v400;
                *(_DWORD *)(v424 + 8) = v409;
                *(_DWORD *)(v424 + 12) = v416;
                WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::sinkTransitions(v389 + 8, v408);
                v388 = v517;
                goto LABEL_501;
              }
              v393 = (char *)(v390 + 8 * v391);
            }
            else
            {
              v393 = 0;
              v391 = 0;
            }
            v392 = (char *)(v390 + 8 * v391);
            goto LABEL_461;
          }
LABEL_514:
          HIDWORD(v538) = v508;
          WebCore::ContentExtensions::Term::generateGraph(*v514, (uint64_t)v525, v502, v505);
        }
        else
        {
          v430 = *(unsigned int *)(v503 + 12);
          if ((_DWORD)v430)
          {
            v431 = (_QWORD **)(*(_QWORD *)v503 + 8);
            v432 = 16 * v430;
            while ((_QWORD *)*v514 != *(v431 - 1))
            {
              v431 += 2;
              v432 -= 16;
              if (!v432)
                goto LABEL_521;
            }
            v438 = *v431;
          }
          else
          {
LABEL_521:
            v541 = (WTF *)v525;
            BYTE4(v542[4]) = 0;
            memset(v542, 0, 32);
            LODWORD(v542[4]) = HIDWORD(v525[1]);
            memset(v534, 0, 24);
            if (HIDWORD(v525[1]) == LODWORD(v525[1]))
            {
              v433 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v525, HIDWORD(v525[1]) + 1, (unint64_t)v534);
              v434 = (char *)v525[0] + 24 * HIDWORD(v525[1]);
              v435 = *(_OWORD *)v433;
              *((_QWORD *)v434 + 2) = *((_QWORD *)v433 + 2);
              *(_OWORD *)v434 = v435;
            }
            else
            {
              v436 = (_QWORD *)((char *)v525[0] + 24 * HIDWORD(v525[1]));
              *v436 = 0;
              v436[1] = 0;
              v436[2] = 0;
            }
            ++HIDWORD(v525[1]);
            WebCore::ContentExtensions::Term::generateGraph(*v514, (uint64_t)v525, (uint64_t)&v541, v505);
            v438 = (_QWORD *)operator new();
            v438[1] = 0;
            v438[2] = 0;
            *v438 = 0;
            *((_DWORD *)v438 + 4) = v542[4];
            v439 = *v514;
            v540 = 0;
            *(_QWORD *)v534 = v439;
            *(_QWORD *)&v534[8] = v438;
            v440 = *(unsigned int *)(v503 + 12);
            if ((_DWORD)v440 == *(_DWORD *)(v503 + 8))
            {
              v441 = WTF::Vector<WebCore::ContentExtensions::ReverseSuffixTreeEdge,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v503, v440 + 1, (unint64_t)v534);
              v440 = *(unsigned int *)(v503 + 12);
              v442 = (_QWORD *)(*(_QWORD *)v503 + 16 * v440);
              v444 = *(_QWORD *)v441;
              v443 = (uint64_t *)(v441 + 8);
              *v442 = v444;
              v445 = v442 + 1;
            }
            else
            {
              v446 = (uint64_t *)(*(_QWORD *)v503 + 16 * v440);
              *v446 = v439;
              v445 = v446 + 1;
              v443 = (uint64_t *)&v534[8];
            }
            v447 = *v443;
            *v443 = 0;
            *v445 = v447;
            *(_DWORD *)(v503 + 12) = v440 + 1;
            std::unique_ptr<WebCore::ContentExtensions::ReverseSuffixTreeVertex>::~unique_ptr[abi:sn180100]((uint64_t *)&v534[8], v437);
            std::unique_ptr<WebCore::ContentExtensions::ReverseSuffixTreeVertex>::~unique_ptr[abi:sn180100](&v540, v448);
            if (!BYTE4(v542[4]))
              WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::finalize((char *)&v541);
            if (v542[3])
              WTF::fastFree((WTF *)((char *)v542[3] - 16), v14);
            if (v542[2])
              WTF::fastFree((WTF *)((char *)v542[2] - 16), v14);
            v449 = v542[0];
            if (HIDWORD(v542[1]))
            {
              v450 = 16 * HIDWORD(v542[1]);
              do
              {
                if (*(_QWORD *)v449)
                  WTF::fastFree((WTF *)(*(_QWORD *)v449 - 16), v14);
                v449 = (WTF *)((char *)v449 + 16);
                v450 -= 16;
              }
              while (v450);
              v449 = v542[0];
            }
            if (v449)
            {
              v542[0] = 0;
              LODWORD(v542[1]) = 0;
              WTF::fastFree(v449, v14);
            }
            v386 = *(_QWORD *)v385;
          }
          v384 = (v384 - 1);
          v503 = (uint64_t)v438;
          v505 = *((_DWORD *)v438 + 4);
          if (*(_DWORD *)(v386 + 8))
          {
            v451 = *(unsigned int *)(v386 + 12);
            v452 = *(WTF **)v386;
            if ((_DWORD)v451)
            {
              WTF::VectorTypeOperations<WebCore::ContentExtensions::PrefixTreeEdge>::destruct((uint64_t)v452, (WTF **)v452 + 2 * v451);
              *(_DWORD *)(v386 + 12) = 0;
              v452 = *(WTF **)v386;
            }
            if (v452)
            {
              *(_QWORD *)v386 = 0;
              *(_DWORD *)(v386 + 8) = 0;
              WTF::fastFree(v452, v14);
            }
          }
        }
        if (!v511)
          continue;
        break;
      }
      if (__s2)
        WTF::fastFree((WTF *)__s2, v14);
      if (v498)
        WTF::fastFree(v498, v14);
      v499 |= HIDWORD(v525[1]) > (unint64_t)a2;
      v145 = HIDWORD(v538);
      if (!HIDWORD(v538))
        break;
LABEL_553:
      v140 = v537;
      v453 = (char *)v537 + 64 * (unint64_t)v145;
      v456 = *((_DWORD *)v453 - 2);
      v454 = v453 - 8;
      v455 = v456;
      v457 = (uint64_t *)*((_QWORD *)v454 - 7);
      if (*((_DWORD *)v457 + 3) <= v456)
      {
        __break(0xC471u);
        JUMPOUT(0x195718CD8);
      }
      v458 = *v457;
      if (!*(_DWORD *)(*(_QWORD *)(v458 + 16 * v455 + 8) + 12))
        *(_QWORD *)(v458 + 16 * v455) = 0;
      *(_DWORD *)v454 = v455 + 1;
    }
    while (v145);
LABEL_563:
    v459 = v539;
    if (v539)
    {
      v460 = *(unsigned int *)(v539 - 4);
      if (*(_DWORD *)(v539 - 12))
      {
        v461 = v539;
        if (*(_DWORD *)(v539 - 4))
        {
          v462 = 48 * v460;
          v461 = v539;
          while ((*(_DWORD *)(v461 + 20) - 1) <= 1)
          {
            v461 += 48;
            v462 -= 48;
            if (!v462)
              goto LABEL_587;
          }
        }
        v463 = v539 + 48 * v460;
        while (v461 != v463)
        {
          v541 = (WTF *)&v542[1];
          v542[1] = (WTF *)(v461 + 24);
          v542[0] = (WTF *)0x100000080;
          v464 = 1;
          while (1)
          {
            while (1)
            {
              v465 = v541;
              v466 = *((_QWORD *)v541 + v464 - 1);
              v467 = *(unsigned int *)(v466 + 12);
              if (!(_DWORD)v467)
                break;
              v468 = *(_QWORD *)(*(_QWORD *)v466 + 16 * v467 - 8);
              *(_QWORD *)v534 = v468;
              if (v464 == LODWORD(v542[0]))
              {
                v469 = WTF::Vector<WebCore::ContentExtensions::ReverseSuffixTreeVertex *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v541, v464 + 1, (unint64_t)v534);
                v464 = HIDWORD(v542[0]);
                *((_QWORD *)v541 + HIDWORD(v542[0])) = *(_QWORD *)v469;
              }
              else
              {
                *((_QWORD *)v541 + v464) = v468;
              }
              HIDWORD(v542[0]) = ++v464;
              if (!v464)
                goto LABEL_633;
            }
            v470 = v464 - 1;
            HIDWORD(v542[0]) = v470;
            if (!v470)
              break;
            v471 = *((_QWORD *)v541 + v470 - 1);
            v472 = *(unsigned int *)(v471 + 12);
            if (!(_DWORD)v472)
            {
              __break(0xC471u);
              JUMPOUT(0x195718CE0);
            }
            v473 = v472 - 1;
            std::unique_ptr<WebCore::ContentExtensions::ReverseSuffixTreeVertex>::~unique_ptr[abi:sn180100]((uint64_t *)(*(_QWORD *)v471 + 16 * (v472 - 1) + 8), v14);
            *(_DWORD *)(v471 + 12) = v473;
            v464 = HIDWORD(v542[0]);
            if (!HIDWORD(v542[0]))
            {
LABEL_633:
              __break(0xC471u);
              JUMPOUT(0x195718CA8);
            }
          }
          if (&v542[1] != (WTF **)v541)
          {
            v541 = 0;
            LODWORD(v542[0]) = 0;
            WTF::fastFree(v465, v14);
          }
          do
          {
            v461 += 48;
            if (v461 == v463)
              goto LABEL_587;
          }
          while ((*(_DWORD *)(v461 + 20) - 1) <= 1);
        }
LABEL_587:
        v460 = *(unsigned int *)(v459 - 4);
      }
      v539 = 0;
      if (v460)
      {
        for (j = 0; j != v460; ++j)
        {
          v475 = v459 + 48 * j;
          if (*(_DWORD *)(v475 + 20) != 2)
          {
            v476 = v459 + 48 * j;
            v479 = *(WTF **)(v476 + 24);
            v478 = v476 + 24;
            v477 = v479;
            v480 = *(unsigned int *)(v478 + 12);
            if ((_DWORD)v480)
            {
              v481 = 16 * v480;
              v482 = (uint64_t *)((char *)v477 + 8);
              do
              {
                v482 = std::unique_ptr<WebCore::ContentExtensions::ReverseSuffixTreeVertex>::~unique_ptr[abi:sn180100](v482, v14)+ 2;
                v481 -= 16;
              }
              while (v481);
              v477 = *(WTF **)v478;
            }
            if (v477)
            {
              *(_QWORD *)v478 = 0;
              *(_DWORD *)(v459 + 48 * j + 32) = 0;
              WTF::fastFree(v477, v14);
            }
            v483 = *(WTF **)v475;
            if (*(_QWORD *)v475)
            {
              *(_QWORD *)v475 = 0;
              *(_DWORD *)(v475 + 8) = 0;
              WTF::fastFree(v483, v14);
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v459 - 16), v14);
    }
LABEL_601:
    if (v537)
      WTF::fastFree(v537, v14);
LABEL_603:
    WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::~ImmutableNFANodeBuilder((uint64_t)v524, v14);
    if ((*(unsigned int (**)(_QWORD, WTF **))(*(_QWORD *)*a3 + 16))(*a3, v525))
    {
      v484 = HIDWORD(v532);
      if (HIDWORD(v532) >= 2)
      {
        do
        {
          if (*(_DWORD *)(*((_QWORD *)v531 + v484 - 1) + 12))
            break;
          v485 = *((_QWORD *)v531 + v484 - 2);
          v486 = *(unsigned int *)(v485 + 12);
          if (!(_DWORD)v486)
          {
            __break(0xC471u);
            JUMPOUT(0x195718CC0);
          }
          v487 = v486 - 1;
          WTF::VectorTypeOperations<WebCore::ContentExtensions::PrefixTreeEdge>::destruct(*(_QWORD *)v485 + 16 * (v486 - 1), (WTF **)(*(_QWORD *)v485 + 16 * v486));
          *(_DWORD *)(v485 + 12) = v487;
          if (!HIDWORD(v532))
          {
            __break(0xC471u);
            JUMPOUT(0x195718CD0);
          }
          v484 = HIDWORD(v532) - 1;
          HIDWORD(v532) = v484;
        }
        while (v484 > 1);
      }
      v136 = 0;
    }
    else
    {
      v136 = 1;
    }
    v488 = v529[0];
    if (v529[0])
    {
      v529[0] = 0;
      LODWORD(v529[1]) = 0;
      WTF::fastFree(v488, a2);
    }
    v489 = v528[0];
    if (v528[0])
    {
      v528[0] = 0;
      LODWORD(v528[1]) = 0;
      WTF::fastFree(v489, a2);
    }
    v490 = v527[0];
    if (v527[0])
    {
      v527[0] = 0;
      LODWORD(v527[1]) = 0;
      WTF::fastFree(v490, a2);
    }
    v491 = v526[0];
    if (v526[0])
    {
      v526[0] = 0;
      LODWORD(v526[1]) = 0;
      WTF::fastFree(v491, a2);
    }
    v492 = v525[0];
    if (v525[0])
    {
      v525[0] = 0;
      LODWORD(v525[1]) = 0;
      WTF::fastFree(v492, a2);
    }
LABEL_621:
    v493 = v531;
    if (v533 != (_BYTE *)v531 && v531)
    {
      v531 = 0;
      LODWORD(v532) = 0;
      WTF::fastFree(v493, a2);
    }
  }
  while (!v136);
  return v136 == 3;
}

uint64_t WebCore::ContentExtensions::Term::hasFixedLength(WebCore::ContentExtensions::Term *this)
{
  int v1;
  uint64_t result;
  uint64_t v3;
  WebCore::ContentExtensions::Term *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned __int8 *)this;
  if (v1 != 2)
  {
    if (v1 == 1)
      return *((_BYTE *)this + 1) == 0;
    return 0;
  }
  if (*((_BYTE *)this + 1))
    return 0;
  v3 = *((unsigned int *)this + 5);
  if (!(_DWORD)v3)
    return 1;
  v4 = (WebCore::ContentExtensions::Term *)*((_QWORD *)this + 1);
  v5 = 32 * v3 - 32;
  do
  {
    result = WebCore::ContentExtensions::Term::hasFixedLength(v4);
    if (!(_DWORD)result)
      break;
    v4 = (WebCore::ContentExtensions::Term *)((char *)v4 + 32);
    v6 = v5;
    v5 -= 32;
  }
  while (v6);
  return result;
}

uint64_t WebCore::ContentExtensions::ContentExtension::create@<X0>(_DWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t result;

  v10 = WTF::fastMalloc((WTF *)0xB8);
  result = WebCore::ContentExtensions::ContentExtension::ContentExtension(v10, *a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t WebCore::ContentExtensions::ContentExtension::ContentExtension(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t v7;
  unsigned int *v8;
  void *v9;
  WTF *v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15[2];

  *(_DWORD *)a1 = 1;
  if (a2)
    *a2 += 2;
  *(_QWORD *)(a1 + 8) = a2;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 16) = v7;
  WTF::URL::URL(a1 + 24, a4);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 72));
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 120));
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v15[0] = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  v15[1] = v8;
  WebCore::ContentExtensions::DFABytecodeInterpreter::actionsMatchingEverything(v15, &v12);
  v13 = 0;
  v14 = 0;
  WTF::Mapper<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<unsigned long long,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>(WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> const&)::{lambda(unsigned long long&&)#1},WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> const&,void>::map((uint64_t)&v13, &v12);
  v10 = *(WTF **)(a1 + 168);
  if (v10)
  {
    *(_QWORD *)(a1 + 168) = 0;
    *(_DWORD *)(a1 + 176) = 0;
    WTF::fastFree(v10, v9);
  }
  *(_QWORD *)(a1 + 168) = v13;
  *(_QWORD *)(a1 + 176) = v14;
  if (v12)
    WTF::fastFree((WTF *)(v12 - 2), v9);
  if (a5)
    WebCore::ContentExtensions::ContentExtension::compileGlobalDisplayNoneStyleSheet((WebCore::ContentExtensions::ContentExtension **)a1);
  WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(a1 + 168), *(unsigned int *)(a1 + 180));
  return a1;
}

WTF::StringImpl *WebCore::ContentExtensions::contentExtensionCSSParserContext@<X0>(uint64_t a1@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  char v10;
  char **v11;
  char *v12;

  v7 = 0;
  WTF::URL::invalidate((WTF::URL *)&v7);
  v4 = v7;
  if (v7)
    *(_DWORD *)v7 += 2;
  *(_QWORD *)a1 = v4;
  *(_OWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 46) = 0;
  *(_DWORD *)(a1 + 54) &= 0xC0000000;
  v5 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v5 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::StyleSheetContents **WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>::operator=<WebCore::StyleSheetContents>(WebCore::StyleSheetContents **a1, WebCore::StyleSheetContents **a2)
{
  WebCore::StyleSheetContents *v3;
  WebCore::StyleSheetContents *v4;
  WTF *v6;
  void *v7;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v4, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

WebCore::StyleSheetContents **WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>::~Ref(WebCore::StyleSheetContents **a1, void *a2)
{
  WebCore::StyleSheetContents *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::ContentExtensions::ContentExtension::compileGlobalDisplayNoneStyleSheet(void)::$_0>(uint64_t result, _DWORD **a2)
{
  unsigned int **v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int *v14;

  v2 = (unsigned int **)result;
  v3 = *(unsigned int **)result;
  v4 = *(unsigned int *)(result + 12);
  v5 = (unsigned int *)(*(_QWORD *)result + 8 * v4);
  if ((_DWORD)v4)
  {
    v7 = 0;
    v8 = *(unsigned int **)result;
    v9 = (unsigned int *)(*(_QWORD *)result + 8 * v4);
    v10 = v9;
    while (1)
    {
      v11 = *v3;
      if (*((_QWORD *)*a2 + 1) <= v11)
        break;
      if (*a2[1] > v11 && *(_BYTE *)(*(_QWORD *)*a2 + v11) == 2)
      {
        v12 = (char *)v3;
        if (v10 != &(*v2)[2 * *((unsigned int *)v2 + 3)])
        {
          if (v3 == v9)
          {
            v12 = (char *)v10;
          }
          else
          {
            v13 = (char *)v8 - (char *)v9;
            result = (uint64_t)memmove(v10, v9, (char *)v8 - (char *)v9);
            v12 = (char *)v10 + v13;
          }
        }
        v9 = v3 + 2;
        ++v7;
        v10 = (unsigned int *)v12;
      }
      v3 += 2;
      v8 += 2;
      if (v3 >= v5)
      {
        v3 = *v2;
        LODWORD(v4) = *((_DWORD *)v2 + 3);
        v5 = v10;
        goto LABEL_14;
      }
    }
    result = 82;
    __break(0xC471u);
  }
  else
  {
    v7 = 0;
    v9 = (unsigned int *)(*(_QWORD *)result + 8 * v4);
LABEL_14:
    v14 = &v3[2 * v4];
    if (v9 != v14)
    {
      result = (uint64_t)memmove(v5, v9, (char *)v14 - (char *)v9);
      LODWORD(v4) = *((_DWORD *)v2 + 3);
    }
    *((_DWORD *)v2 + 3) = v4 - v7;
  }
  return result;
}

uint64_t WebCore::ContentExtensions::ContentExtension::populateTopURLActionCacheIfNeeded(WebCore::ContentExtensions::ContentExtension *this, const WTF::URL *a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  unsigned int *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  const WTF::StringImpl *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  uint64_t *v27;
  _QWORD *v28;
  unsigned int *v29[2];

  result = WTF::equal(*((WTF **)this + 9), *(const WTF::StringImpl **)a2, a3);
  if ((result & 1) != 0)
    return result;
  v29[0] = (unsigned int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  v29[1] = v6;
  WebCore::ContentExtensions::DFABytecodeInterpreter::interpret((WebCore::ContentExtensions::DFABytecodeInterpreter *)v29, a2, &v28);
  v8 = *((_QWORD *)this + 14);
  if (v8)
  {
    *((_QWORD *)this + 14) = 0;
    WTF::fastFree((WTF *)(v8 - 16), v7);
  }
  if (!v28)
  {
    v9 = 0;
    v10 = 0;
LABEL_6:
    v11 = &v28[v10];
    goto LABEL_7;
  }
  v10 = *((unsigned int *)v28 - 1);
  v11 = &v28[v10];
  if (!*((_DWORD *)v28 - 3))
  {
    v9 = &v28[v10];
    goto LABEL_6;
  }
  v9 = v28;
  if ((_DWORD)v10)
  {
    v23 = 8 * v10;
    v9 = v28;
    while (*v9 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v9;
      v23 -= 8;
      if (!v23)
      {
        v9 = v11;
        break;
      }
    }
  }
LABEL_7:
  if (v28)
    v12 = &v28[*((unsigned int *)v28 - 1)];
  else
    v12 = 0;
  while (v9 != v12)
  {
    v27 = 0;
    v13 = v9 + 1;
    v27 = (uint64_t *)*v9;
    WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add((uint64_t *)this + 14, (uint64_t *)&v27, (uint64_t)v26);
    v9 = v11;
    if (v13 != v11)
    {
      v9 = v13;
      while (*v9 >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (++v9 == v11)
        {
          v9 = v11;
          break;
        }
      }
    }
  }
  WebCore::ContentExtensions::DFABytecodeInterpreter::actionsMatchingEverything(v29, &v27);
  v15 = (uint64_t)v27;
  if (v27)
  {
    v17 = *((unsigned int *)v27 - 1);
    v18 = &v27[v17];
    if (*((_DWORD *)v27 - 3))
    {
      v16 = v27;
      if ((_DWORD)v17)
      {
        v24 = 8 * v17;
        v16 = v27;
        while ((unint64_t)*v16 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v16;
          v24 -= 8;
          if (!v24)
          {
            v16 = v18;
            goto LABEL_19;
          }
        }
      }
      goto LABEL_19;
    }
    v16 = &v27[v17];
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  v18 = &v27[v17];
LABEL_19:
  if (v27)
    v19 = &v27[*((unsigned int *)v27 - 1)];
  else
    v19 = 0;
  if (v19 != v16)
  {
    do
    {
      v25 = 0;
      v20 = v16 + 1;
      v25 = *v16;
      WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add((uint64_t *)this + 14, &v25, (uint64_t)v26);
      v16 = v18;
      if (v20 != v18)
      {
        v16 = v20;
        while ((unint64_t)*v16 >= 0xFFFFFFFFFFFFFFFELL)
        {
          if (++v16 == v18)
          {
            v16 = v18;
            break;
          }
        }
      }
    }
    while (v16 != v19);
    v15 = (uint64_t)v27;
  }
  if (v15)
    WTF::fastFree((WTF *)(v15 - 16), v14);
  v21 = *(const WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v21 += 2;
  result = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v21;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  v22 = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 5) = *(_OWORD *)((char *)a2 + 8);
  *((_OWORD *)this + 6) = v22;
  if (v28)
    return WTF::fastFree((WTF *)(v28 - 2), v14);
  return result;
}

uint64_t WebCore::ContentExtensions::ContentExtension::populateFrameURLActionCacheIfNeeded(WebCore::ContentExtensions::ContentExtension *this, const WTF::URL *a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  unsigned int *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  const WTF::StringImpl *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  uint64_t *v27;
  _QWORD *v28;
  unsigned int *v29[2];

  result = WTF::equal(*((WTF **)this + 15), *(const WTF::StringImpl **)a2, a3);
  if ((result & 1) != 0)
    return result;
  v29[0] = (unsigned int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  v29[1] = v6;
  WebCore::ContentExtensions::DFABytecodeInterpreter::interpret((WebCore::ContentExtensions::DFABytecodeInterpreter *)v29, a2, &v28);
  v8 = *((_QWORD *)this + 20);
  if (v8)
  {
    *((_QWORD *)this + 20) = 0;
    WTF::fastFree((WTF *)(v8 - 16), v7);
  }
  if (!v28)
  {
    v9 = 0;
    v10 = 0;
LABEL_6:
    v11 = &v28[v10];
    goto LABEL_7;
  }
  v10 = *((unsigned int *)v28 - 1);
  v11 = &v28[v10];
  if (!*((_DWORD *)v28 - 3))
  {
    v9 = &v28[v10];
    goto LABEL_6;
  }
  v9 = v28;
  if ((_DWORD)v10)
  {
    v23 = 8 * v10;
    v9 = v28;
    while (*v9 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v9;
      v23 -= 8;
      if (!v23)
      {
        v9 = v11;
        break;
      }
    }
  }
LABEL_7:
  if (v28)
    v12 = &v28[*((unsigned int *)v28 - 1)];
  else
    v12 = 0;
  while (v9 != v12)
  {
    v27 = 0;
    v13 = v9 + 1;
    v27 = (uint64_t *)*v9;
    WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add((uint64_t *)this + 20, (uint64_t *)&v27, (uint64_t)v26);
    v9 = v11;
    if (v13 != v11)
    {
      v9 = v13;
      while (*v9 >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (++v9 == v11)
        {
          v9 = v11;
          break;
        }
      }
    }
  }
  WebCore::ContentExtensions::DFABytecodeInterpreter::actionsMatchingEverything(v29, &v27);
  v15 = (uint64_t)v27;
  if (v27)
  {
    v17 = *((unsigned int *)v27 - 1);
    v18 = &v27[v17];
    if (*((_DWORD *)v27 - 3))
    {
      v16 = v27;
      if ((_DWORD)v17)
      {
        v24 = 8 * v17;
        v16 = v27;
        while ((unint64_t)*v16 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v16;
          v24 -= 8;
          if (!v24)
          {
            v16 = v18;
            goto LABEL_19;
          }
        }
      }
      goto LABEL_19;
    }
    v16 = &v27[v17];
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  v18 = &v27[v17];
LABEL_19:
  if (v27)
    v19 = &v27[*((unsigned int *)v27 - 1)];
  else
    v19 = 0;
  if (v19 != v16)
  {
    do
    {
      v25 = 0;
      v20 = v16 + 1;
      v25 = *v16;
      WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add((uint64_t *)this + 20, &v25, (uint64_t)v26);
      v16 = v18;
      if (v20 != v18)
      {
        v16 = v20;
        while ((unint64_t)*v16 >= 0xFFFFFFFFFFFFFFFELL)
        {
          if (++v16 == v18)
          {
            v16 = v18;
            break;
          }
        }
      }
    }
    while (v16 != v19);
    v15 = (uint64_t)v27;
  }
  if (v15)
    WTF::fastFree((WTF *)(v15 - 16), v14);
  v21 = *(const WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v21 += 2;
  result = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v21;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  v22 = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *((_OWORD *)this + 9) = v22;
  if (v28)
    return WTF::fastFree((WTF *)(v28 - 2), v14);
  return result;
}

uint64_t WebCore::ContentExtensions::ModifyHeadersAction::parse@<X0>(WebCore::ContentExtensions::ModifyHeadersAction *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t Integer;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  unsigned int v20;

  WebCore::ContentExtensions::ModifyHeadersAction::parse(WTF::JSONImpl::Object const&)::$_0::operator()((uint64_t)&v19, this, (uint64_t)"request-headers", 16);
  v6 = v20;
  if (!v20)
  {
    WebCore::ContentExtensions::ModifyHeadersAction::parse(WTF::JSONImpl::Object const&)::$_0::operator()((uint64_t)&v17, this, (uint64_t)"response-headers", 17);
    v3 = v18;
    if (!v18)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Integer = WTF::JSONImpl::ObjectBase::getInteger(this, (const WTF::String *)&v16);
      v9 = v16;
      v16 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      if ((Integer & 0xFF00000000) != 0 && (Integer & 0x80000000) == 0)
      {
        v10 = 0;
        v11 = v19;
        *(_QWORD *)&v19 = 0;
        *(_BYTE *)a2 = 2;
        v12 = v17;
        *(_QWORD *)&v17 = 0;
        *(_QWORD *)(a2 + 8) = v11;
        v13 = *((_QWORD *)&v19 + 1);
        *((_QWORD *)&v19 + 1) = 0;
        *(_QWORD *)(a2 + 16) = v13;
        *(_QWORD *)(a2 + 24) = v12;
        v14 = *((_QWORD *)&v17 + 1);
        *((_QWORD *)&v17 + 1) = 0;
        *(_QWORD *)(a2 + 32) = v14;
        *(_DWORD *)(a2 + 40) = Integer;
LABEL_16:
        *(_DWORD *)(a2 + 48) = v10;
        ((void (*)(WTF::StringImpl **, __int128 *))off_1E3394EF8[v3])(&v16, &v17);
        return ((uint64_t (*)(__int128 *, __int128 *))off_1E3394EF8[v6])(&v17, &v19);
      }
      if ((_MergedGlobals_158 & 1) != 0)
        goto LABEL_14;
      goto LABEL_20;
    }
    if (v18 == 1)
    {
      *(_OWORD *)a2 = v17;
LABEL_15:
      v10 = 1;
      goto LABEL_16;
    }
LABEL_19:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_20:
    qword_1ECE828E8 = (uint64_t)&off_1E3395448;
    _MergedGlobals_158 = 1;
LABEL_14:
    *(_QWORD *)a2 = 39;
    *(_QWORD *)(a2 + 8) = &qword_1ECE828E8;
    goto LABEL_15;
  }
  if (v20 != 1)
    goto LABEL_19;
  *(_OWORD *)a2 = v19;
  *(_DWORD *)(a2 + 48) = 1;
  return ((uint64_t (*)(__int128 *, __int128 *))off_1E3394EF8[v6])(&v17, &v19);
}

WTF::StringImpl *WebCore::ContentExtensions::ModifyHeadersAction::parse(WTF::JSONImpl::Object const&)::$_0::operator()(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  unsigned int v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  WTF::JSONImpl::ObjectBase **v15;
  uint64_t v16;
  void *v17;
  int v18;
  unint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  char v31;
  WTF::StringImpl *v32;
  __int128 v33;
  int v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!a4)
    goto LABEL_55;
  if (a4 == 1)
  {
    v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = v32;
  }
  v28 = v6;
LABEL_5:
  WTF::JSONImpl::ObjectBase::getValue(a2, (const WTF::String *)&v28);
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  a2 = v30;
  if (!v30)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    return result;
  }
  v9 = *((_DWORD *)v30 + 1);
  if (v9 < 6)
  {
    if ((_MergedGlobals_158 & 1) == 0)
    {
      qword_1ECE828E8 = (uint64_t)&off_1E3395448;
      _MergedGlobals_158 = 1;
    }
    *(_QWORD *)a1 = 33;
    *(_QWORD *)(a1 + 8) = &qword_1ECE828E8;
    *(_DWORD *)(a1 + 16) = 1;
    goto LABEL_13;
  }
  if (v9 != 6)
  {
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x195719C70);
  }
  ++*(_DWORD *)v30;
  v29 = 0;
  v10 = *((unsigned int *)a2 + 7);
  if (!(_DWORD)v10)
  {
    v14 = 0;
    v12 = 0;
    goto LABEL_43;
  }
  if (v10 >= 0xAAAAAAB)
    goto LABEL_57;
  v11 = 24 * v10;
  v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(24 * v10));
  LODWORD(v10) = (v11 & 0xFFFFFFF8) / 0x18;
  LODWORD(v29) = v10;
  v28 = v12;
  v13 = *((unsigned int *)a2 + 7);
  if (!(_DWORD)v13)
  {
    v14 = 0;
    goto LABEL_43;
  }
  v14 = 0;
  v15 = (WTF::JSONImpl::ObjectBase **)*((_QWORD *)a2 + 2);
  v16 = 8 * v13;
  while (1)
  {
    WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::parse(*v15, (uint64_t)&v32);
    v18 = v35;
    if (v35)
    {
      if (v35 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_55:
        v28 = 0;
        goto LABEL_5;
      }
      *(_OWORD *)a1 = v33;
      *(_DWORD *)(a1 + 16) = 1;
    }
    else
    {
      if (v14 == (_DWORD)v29)
      {
        v19 = WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, v14 + 1, (unint64_t)&v33);
        v20 = HIDWORD(v29);
        v12 = v28;
        v21 = (char *)v28 + 24 * HIDWORD(v29);
        *v21 = 0;
        *((_DWORD *)v21 + 4) = -1;
        v22 = *(unsigned int *)(v19 + 16);
        if ((_DWORD)v22 != -1)
        {
          ((void (*)(char *, char *, unint64_t))off_1E3394F20[v22])(&v31, v21, v19);
          *((_DWORD *)v21 + 4) = v22;
        }
        v14 = v20 + 1;
      }
      else
      {
        v23 = (char *)v12 + 24 * v14;
        *v23 = 0;
        *((_DWORD *)v23 + 4) = -1;
        v24 = v34;
        if (v34 != -1)
        {
          ((void (*)(char *, char *, __int128 *))off_1E3394F20[v34])(&v31, v23, &v33);
          *((_DWORD *)v23 + 4) = v24;
        }
        ++v14;
      }
      HIDWORD(v29) = v14;
    }
    if (v35 != -1)
      ((void (*)(char *, __int128 *))off_1E3394EE8[v35])(&v31, &v33);
    if (v18)
      break;
    ++v15;
    v16 -= 8;
    if (!v16)
    {
      v12 = v28;
      LODWORD(v10) = v29;
LABEL_43:
      *(_QWORD *)a1 = v12;
      *(_DWORD *)(a1 + 8) = v10;
      *(_DWORD *)(a1 + 12) = v14;
      *(_DWORD *)(a1 + 16) = 0;
      goto LABEL_44;
    }
  }
  if (v14)
  {
    v25 = 24 * v14;
    v26 = v12;
    do
    {
      v27 = *((unsigned int *)v26 + 4);
      if ((_DWORD)v27 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl *))off_1E3394F08[v27])(&v32, v26);
      *((_DWORD *)v26 + 4) = -1;
      v26 = (WTF::StringImpl *)((char *)v26 + 24);
      v25 -= 24;
    }
    while (v25);
  }
  if (v12)
  {
    v28 = 0;
    LODWORD(v29) = 0;
    WTF::fastFree(v12, v17);
  }
LABEL_44:
  if (*(_DWORD *)a2 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*(_DWORD *)a2;
LABEL_13:
  result = v30;
  v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

double WebCore::ContentExtensions::ModifyHeadersAction::isolatedCopy@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  double result;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS9_EUlRT_E_S9_SC_vE3mapERS9_SC_RKSF_(&v8, (uint64_t *)(a1 + 8));
  v6 = 0;
  v7 = 0.0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS9_EUlRT_E_S9_SC_vE3mapERS9_SC_RKSF_(&v6, (uint64_t *)(a1 + 24));
  v4 = *(_DWORD *)(a1 + 40);
  *(_BYTE *)a2 = 2;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v6;
  result = v7;
  *(double *)(a2 + 32) = v7;
  *(_DWORD *)(a2 + 40) = v4;
  return result;
}

{
  int v4;
  double result;
  uint64_t v6;
  double v7;
  _QWORD v8[2];

  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((_QWORD *)(a1 + 8), (uint64_t)v8);
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((_QWORD *)(a1 + 24), (uint64_t)&v6);
  v4 = *(_DWORD *)(a1 + 40);
  *(_BYTE *)a2 = 2;
  *(_QWORD *)(a2 + 8) = v8[0];
  *(_QWORD *)(a2 + 16) = v8[1];
  *(_QWORD *)(a2 + 24) = v6;
  result = v7;
  *(double *)(a2 + 32) = v7;
  *(_DWORD *)(a2 + 40) = v4;
  return result;
}

uint64_t WebCore::ContentExtensions::ModifyHeadersAction::serialize(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  void *v41;
  void *v42;

  v3 = result;
  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(unsigned int *)(a2 + 12);
  v6 = v5 + 4;
  if (v5 + 4 > v4)
  {
    v25 = v4 + (v4 >> 2);
    if (v25 >= 0x10)
      v26 = v25 + 1;
    else
      v26 = 16;
    if (v26 <= v6)
      v27 = v5 + 4;
    else
      v27 = v26;
    if (HIDWORD(v27))
    {
      __break(0xC471u);
      JUMPOUT(0x19571A0E8);
    }
    v28 = *(void **)a2;
    v29 = (void *)WTF::fastMalloc((WTF *)v27);
    *(_DWORD *)(a2 + 8) = v27;
    *(_QWORD *)a2 = v29;
    result = (uint64_t)memcpy(v29, v28, v5);
    if (v28)
    {
      if (*(void **)a2 == v28)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v28, v30);
    }
  }
  v7 = *(unsigned int *)(a2 + 12);
  if (v6 < v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19571A0D0);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v7) = 0;
  *(_DWORD *)(a2 + 12) = v6;
  v8 = *(_DWORD *)(v3 + 40);
  v9 = (v5 + 4) + 4;
  v10 = *(unsigned int *)(a2 + 8);
  if (v9 > v10)
  {
    v31 = v10 + (v10 >> 2);
    if (v31 >= 0x10)
      v32 = v31 + 1;
    else
      v32 = 16;
    if (v32 <= v9)
      v33 = (v5 + 4) + 4;
    else
      v33 = v32;
    if (HIDWORD(v33))
    {
      __break(0xC471u);
      JUMPOUT(0x19571A0F0);
    }
    v34 = *(void **)a2;
    v35 = (void *)WTF::fastMalloc((WTF *)v33);
    *(_DWORD *)(a2 + 8) = v33;
    *(_QWORD *)a2 = v35;
    result = (uint64_t)memcpy(v35, v34, (v5 + 4));
    if (v34)
    {
      if (*(void **)a2 == v34)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v34, v36);
    }
  }
  v11 = *(unsigned int *)(a2 + 12);
  if (v9 < v11)
  {
    __break(0xC471u);
    JUMPOUT(0x19571A0D8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v11) = v8;
  *(_DWORD *)(a2 + 12) = v5 + 8;
  v12 = (v5 + 8);
  v13 = v12 + 4;
  v14 = *(unsigned int *)(a2 + 8);
  if (v12 + 4 > v14)
  {
    v37 = v14 + (v14 >> 2);
    if (v37 >= 0x10)
      v38 = v37 + 1;
    else
      v38 = 16;
    if (v38 <= v13)
      v39 = (v5 + 8) + 4;
    else
      v39 = v38;
    if (HIDWORD(v39))
      goto LABEL_65;
    v40 = *(void **)a2;
    v41 = (void *)WTF::fastMalloc((WTF *)v39);
    *(_DWORD *)(a2 + 8) = v39;
    *(_QWORD *)a2 = v41;
    result = (uint64_t)memcpy(v41, v40, v12);
    if (v40)
    {
      if (*(void **)a2 == v40)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v40, v42);
    }
  }
  v15 = *(unsigned int *)(a2 + 12);
  if (v13 < v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19571A0E0);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v15) = 0;
  *(_DWORD *)(a2 + 12) = v13;
  v16 = *(unsigned int *)(v3 + 20);
  v17 = v12 + 4;
  if ((_DWORD)v16)
  {
    v18 = *(_QWORD *)(v3 + 8);
    v19 = 24 * v16;
    do
    {
      result = WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::serialize(v18, a2);
      v18 += 24;
      v19 -= 24;
    }
    while (v19);
    v17 = *(_DWORD *)(a2 + 12);
  }
  v20 = v17 - v12;
  if (HIDWORD(v20))
  {
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x19571A028);
  }
  if (v13 > v17)
  {
    __break(0xC471u);
    JUMPOUT(0x19571A048);
  }
  if (*(_DWORD *)(*(_QWORD *)a2 + v12))
  {
    __break(0xC471u);
    JUMPOUT(0x19571A068);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v12) = v20;
  v21 = *(unsigned int *)(v3 + 36);
  if ((_DWORD)v21)
  {
    v22 = *(_QWORD *)(v3 + 24);
    v23 = 24 * v21;
    do
    {
      result = WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::serialize(v22, a2);
      v22 += 24;
      v23 -= 24;
    }
    while (v23);
  }
  v24 = *(unsigned int *)(a2 + 12);
  if ((v24 - v5) >> 32)
  {
    __break(0xC471u);
    JUMPOUT(0x19571A088);
  }
  if (v6 > v24)
  {
    __break(0xC471u);
    JUMPOUT(0x19571A0A8);
  }
  if (*(_DWORD *)(*(_QWORD *)a2 + v5))
  {
    __break(0xC471u);
    JUMPOUT(0x19571A0C8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v5) = v24 - v5;
  return result;
}

uint64_t WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::serialize(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[2];
  _QWORD *v27;

  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(unsigned int *)(a2 + 12);
  v6 = v5 + 4;
  if (v5 + 4 > v4)
  {
    v20 = v4 + (v4 >> 2);
    if (v20 >= 0x10)
      v21 = v20 + 1;
    else
      v21 = 16;
    if (v21 <= v6)
      v22 = v5 + 4;
    else
      v22 = v21;
    if (HIDWORD(v22))
    {
      __break(0xC471u);
LABEL_40:
      JUMPOUT(0x19571A2DCLL);
    }
    v23 = *(void **)a2;
    v24 = (void *)WTF::fastMalloc((WTF *)v22);
    *(_DWORD *)(a2 + 8) = v22;
    *(_QWORD *)a2 = v24;
    memcpy(v24, v23, v5);
    if (v23)
    {
      if (*(void **)a2 == v23)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v23, v25);
    }
  }
  v7 = *(unsigned int *)(a2 + 12);
  if (v6 < v7)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x19571A328);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v7) = 0;
  *(_DWORD *)(a2 + 12) = v6;
  v8 = *(_DWORD *)(a1 + 16);
  v9 = (v5 + 4);
  if (*(_DWORD *)(a2 + 8) == (_DWORD)v6)
  {
    v10 = v9 + (v9 >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 <= v9 + 1)
      v12 = v9 + 1;
    else
      v12 = v11;
    if (HIDWORD(v12))
    {
      __break(0xC471u);
      JUMPOUT(0x19571A330);
    }
    v13 = *(void **)a2;
    v14 = (void *)WTF::fastMalloc((WTF *)v12);
    *(_DWORD *)(a2 + 8) = v12;
    *(_QWORD *)a2 = v14;
    memcpy(v14, v13, (v5 + 4));
    if (v13)
    {
      if (*(void **)a2 == v13)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v13, v15);
    }
    v16 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
  }
  else
  {
    v16 = (_BYTE *)(*(_QWORD *)a2 + v9);
  }
  *v16 = v8;
  ++*(_DWORD *)(a2 + 12);
  v26[0] = a2;
  v26[1] = a2;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_37;
  }
  v27 = v26;
  result = ((uint64_t (*)(_QWORD **, uint64_t))off_1E3394F98[v17])(&v27, a1);
  v19 = *(unsigned int *)(a2 + 12);
  if ((v19 - v5) >> 32)
  {
    __break(0xC471u);
    goto LABEL_40;
  }
  if (v6 > v19)
  {
    __break(0xC471u);
    JUMPOUT(0x19571A2FCLL);
  }
  if (*(_DWORD *)(*(_QWORD *)a2 + v5))
  {
    __break(0xC471u);
    JUMPOUT(0x19571A31CLL);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v5) = v19 - v5;
  return result;
}

unsigned int *WebCore::ContentExtensions::ModifyHeadersAction::deserialize@<X0>(unsigned int *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  if (a2 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19571A6C8);
  }
  if (a2 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x19571A6E8);
  }
  if (a2 <= 0xB)
  {
    __break(0xC471u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v4 = result;
  v30 = *result;
  v28 = result[1];
  v5 = result[2];
  v35 = 0;
  v36 = 0;
  v6 = v5 + 8;
  if (v5 >= 5)
  {
    v7 = 0;
    v8 = 0;
    v9 = 12;
    while (1)
    {
      v10 = a2 - v9;
      if (a2 < v9)
        goto LABEL_42;
      if (v10 <= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19571A688);
      }
      v11 = *(unsigned int *)((char *)v4 + v9);
      result = (unsigned int *)WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::deserialize((unsigned int *)((char *)v4 + v9), v10, (uint64_t)v33);
      if (v8 == (_DWORD)v36)
        break;
      v15 = v7 + 24 * v8;
      *(_BYTE *)v15 = 0;
      *(_DWORD *)(v15 + 16) = -1;
      v16 = v34;
      if (v34 != -1)
      {
        result = (unsigned int *)((uint64_t (*)(uint64_t *, uint64_t, _BYTE *))off_1E3394F20[v34])(&v31, v15, v33);
        *(_DWORD *)(v15 + 16) = v16;
        v12 = HIDWORD(v36);
LABEL_14:
        v8 = v12 + 1;
        HIDWORD(v36) = v12 + 1;
        if (v34 != -1)
          result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E3394F08[v34])(&v31, v33);
        goto LABEL_17;
      }
      v8 = ++HIDWORD(v36);
LABEL_17:
      v9 += v11;
      if (v9 >= v6)
        goto LABEL_20;
    }
    result = (unsigned int *)WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v35, v8 + 1, (unint64_t)v33);
    v12 = HIDWORD(v36);
    v7 = v35;
    v13 = v35 + 24 * HIDWORD(v36);
    *(_BYTE *)v13 = 0;
    *(_DWORD *)(v13 + 16) = -1;
    v14 = result[4];
    if ((_DWORD)v14 != -1)
    {
      result = (unsigned int *)((uint64_t (*)(uint64_t *, uint64_t, unsigned int *))off_1E3394F20[v14])(&v31, v13, result);
      *(_DWORD *)(v13 + 16) = v14;
    }
    goto LABEL_14;
  }
  v8 = 0;
  v9 = 12;
LABEL_20:
  if (v9 != v6)
  {
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x19571A728);
  }
  v31 = 0;
  v32 = 0;
  if (v6 >= v30)
  {
    v18 = 0;
    v27 = 0;
    v26 = 0;
    goto LABEL_36;
  }
  v17 = 0;
  v18 = 0;
  do
  {
    v19 = a2 - v6;
    if (a2 < v6)
      goto LABEL_42;
    if (v19 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x19571A6A8);
    }
    v20 = *(unsigned int *)((char *)v4 + v6);
    result = (unsigned int *)WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::deserialize((unsigned int *)((char *)v4 + v6), v19, (uint64_t)v33);
    if (v18 == (_DWORD)v32)
    {
      result = (unsigned int *)WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v31, v18 + 1, (unint64_t)v33);
      v21 = HIDWORD(v32);
      v17 = v31;
      v22 = v31 + 24 * HIDWORD(v32);
      *(_BYTE *)v22 = 0;
      *(_DWORD *)(v22 + 16) = -1;
      v23 = result[4];
      if ((_DWORD)v23 != -1)
      {
        result = (unsigned int *)((uint64_t (*)(char *, uint64_t, unsigned int *))off_1E3394F20[v23])(&v37, v22, result);
        *(_DWORD *)(v22 + 16) = v23;
      }
    }
    else
    {
      v24 = v17 + 24 * v18;
      *(_BYTE *)v24 = 0;
      *(_DWORD *)(v24 + 16) = -1;
      v25 = v34;
      if (v34 == -1)
      {
        v18 = ++HIDWORD(v32);
        goto LABEL_33;
      }
      result = (unsigned int *)((uint64_t (*)(char *, uint64_t, _BYTE *))off_1E3394F20[v34])(&v37, v24, v33);
      *(_DWORD *)(v24 + 16) = v25;
      v21 = HIDWORD(v32);
    }
    v18 = v21 + 1;
    HIDWORD(v32) = v18;
    if (v34 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E3394F08[v34])(&v37, v33);
LABEL_33:
    v6 += v20;
  }
  while (v6 < v30);
  v26 = v31;
  v27 = v32;
  v8 = HIDWORD(v36);
LABEL_36:
  *(_BYTE *)a3 = 2;
  *(_QWORD *)(a3 + 8) = v35;
  *(_DWORD *)(a3 + 16) = v36;
  *(_DWORD *)(a3 + 20) = v8;
  *(_QWORD *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 32) = v27;
  *(_DWORD *)(a3 + 36) = v18;
  *(_DWORD *)(a3 + 40) = v28;
  return result;
}

uint64_t WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::serializedLength(unsigned int *a1, unint64_t a2)
{
  uint64_t result;

  if (a2 > 3)
    return *a1;
  result = 57;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::deserialize@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  if (a2 <= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x19571A890);
  }
  v5 = *a1;
  v6 = *((unsigned __int8 *)a1 + 4);
  if (v6 < 2)
  {
    if (a2 <= 8)
    {
      __break(0xC471u);
      JUMPOUT(0x19571A8B0);
    }
    v7 = *(unsigned int *)((char *)a1 + 5);
    v8 = v5 - v7;
    v9 = a2 - (v5 - v7);
    if (a2 < v5 - v7)
    {
      __break(0xC471u);
      JUMPOUT(0x19571A8D0);
    }
    if (v8 == 8 || a2 - 9 >= v8 - 9)
    {
      WTF::String::fromUTF8();
      if (a2 < v5)
      {
        __break(0xC471u);
        JUMPOUT(0x19571A8F0);
      }
      if (v9 >= v7)
      {
        result = WTF::String::fromUTF8();
        *(_QWORD *)a3 = v11;
        *(_DWORD *)(a3 + 16) = v6 != 0;
        return result;
      }
    }
    goto LABEL_22;
  }
  if (v6 != 2)
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x19571A930);
  }
  if (a2 < v5)
  {
    __break(0xC471u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v5 != 4 && a2 - 5 < v5 - 5)
    goto LABEL_22;
  result = WTF::String::fromUTF8();
  *(_DWORD *)(a3 + 16) = 2;
  return result;
}

uint64_t WebCore::ContentExtensions::ModifyHeadersAction::serializedLength(unsigned int *a1, unint64_t a2)
{
  uint64_t result;

  if (a2 > 3)
    return *a1;
  result = 57;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ContentExtensions::ModifyHeadersAction::applyToRequest(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];
  _QWORD *v11;

  v3 = *(unsigned int *)(result + 20);
  if ((_DWORD)v3)
  {
    v6 = *(_QWORD *)(result + 8);
    v7 = 24 * v3;
    while (1)
    {
      v10[0] = a3;
      v10[1] = a2;
      v10[2] = a3;
      v10[3] = a2;
      v10[4] = a3;
      v10[5] = a2;
      v8 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v8 == -1)
        break;
      v11 = v10;
      result = ((uint64_t (*)(_QWORD **, uint64_t))*(&off_1E3394F50 + v8))(&v11, v6);
      v6 += 24;
      v7 -= 24;
      if (!v7)
        return result;
    }
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::applyToRequest(v9);
  }
  return result;
}

uint64_t WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::applyToRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo *v5;
  const WTF::JSONImpl::Value *v6;
  _QWORD v7[6];
  _QWORD *v8;

  v7[0] = a3;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a2;
  v7[4] = a3;
  v7[5] = a2;
  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3 == -1)
  {
    v5 = (WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::parse(v5, v6);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **, uint64_t))*(&off_1E3394F50 + v3))(&v8, a1);
  }
}

WTF::JSONImpl::ObjectBase *WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::parse@<X0>(WTF::JSONImpl::ObjectBase *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  WTF::JSONImpl::ObjectBase *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v4 = *((_DWORD *)this + 1);
  if (v4 >= 5)
  {
    if (v4 != 5)
    {
      if (v4 != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x19571AACCLL);
      }
      goto LABEL_2;
    }
    v5 = this;
    ++*(_DWORD *)this;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v22 = v24;
    WTF::JSONImpl::ObjectBase::getString(v5, (const WTF::String *)&v22);
    this = v22;
    v22 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (WTF::JSONImpl::ObjectBase *)WTF::StringImpl::destroy(this, v6);
      else
        *(_DWORD *)this -= 2;
    }
    if (!v23)
    {
      if ((_MergedGlobals_158 & 1) == 0)
      {
        qword_1ECE828E8 = (uint64_t)&off_1E3395448;
        _MergedGlobals_158 = 1;
      }
      *(_QWORD *)(a2 + 8) = 35;
      *(_QWORD *)(a2 + 16) = &qword_1ECE828E8;
      *(_DWORD *)(a2 + 32) = 1;
      goto LABEL_52;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = v24;
    WTF::JSONImpl::ObjectBase::getString(v5, (const WTF::String *)&v21);
    v8 = v21;
    v21 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (!v22)
    {
      if ((_MergedGlobals_158 & 1) == 0)
      {
        qword_1ECE828E8 = (uint64_t)&off_1E3395448;
        _MergedGlobals_158 = 1;
      }
      *(_QWORD *)(a2 + 8) = 37;
      *(_QWORD *)(a2 + 16) = &qword_1ECE828E8;
      *(_DWORD *)(a2 + 32) = 1;
      goto LABEL_49;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = v24;
    WTF::JSONImpl::ObjectBase::getString(v5, (const WTF::String *)&v21);
    v10 = v21;
    v21 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (MEMORY[0x19AEA53F4](v23, "set", 3))
    {
      v11 = v24;
      if (v24)
      {
        v12 = 0;
        v13 = v22;
        v22 = 0;
        v24 = 0;
        *(_QWORD *)(a2 + 8) = v13;
        *(_QWORD *)(a2 + 16) = v11;
        v14 = 1;
LABEL_37:
        *(_DWORD *)(a2 + 24) = v14;
        goto LABEL_43;
      }
    }
    else
    {
      if (!MEMORY[0x19AEA53F4](v23, "append", 6))
      {
        if (MEMORY[0x19AEA53F4](v23, "remove", 6))
        {
          v12 = 0;
          v18 = v22;
          v22 = 0;
          *(_QWORD *)(a2 + 8) = v18;
          v14 = 2;
          goto LABEL_37;
        }
        if ((_MergedGlobals_158 & 1) == 0)
        {
          qword_1ECE828E8 = (uint64_t)&off_1E3395448;
          _MergedGlobals_158 = 1;
        }
        v17 = 36;
LABEL_42:
        *(_QWORD *)(a2 + 8) = v17;
        *(_QWORD *)(a2 + 16) = &qword_1ECE828E8;
        v12 = 1;
        goto LABEL_43;
      }
      v15 = v24;
      if (v24)
      {
        v12 = 0;
        v16 = v22;
        v22 = 0;
        v24 = 0;
        *(_QWORD *)(a2 + 8) = v16;
        *(_QWORD *)(a2 + 16) = v15;
        *(_DWORD *)(a2 + 24) = 0;
LABEL_43:
        *(_DWORD *)(a2 + 32) = v12;
        v19 = v24;
        v24 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v7);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = v22;
        v22 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v7);
          else
            *(_DWORD *)v20 -= 2;
        }
LABEL_49:
        this = v23;
        v23 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (WTF::JSONImpl::ObjectBase *)WTF::StringImpl::destroy(this, v7);
          else
            *(_DWORD *)this -= 2;
        }
LABEL_52:
        if (*(_DWORD *)v5 == 1)
          return (WTF::JSONImpl::ObjectBase *)WTF::JSONImpl::Value::operator delete();
        --*(_DWORD *)v5;
        return this;
      }
    }
    if ((_MergedGlobals_158 & 1) == 0)
    {
      qword_1ECE828E8 = (uint64_t)&off_1E3395448;
      _MergedGlobals_158 = 1;
    }
    v17 = 38;
    goto LABEL_42;
  }
LABEL_2:
  if ((_MergedGlobals_158 & 1) == 0)
  {
    qword_1ECE828E8 = (uint64_t)&off_1E3395448;
    _MergedGlobals_158 = 1;
  }
  *(_QWORD *)(a2 + 8) = 34;
  *(_QWORD *)(a2 + 16) = &qword_1ECE828E8;
  *(_DWORD *)(a2 + 32) = 1;
  return this;
}

uint64_t WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::isolatedCopy(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char *v5;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::isolatedCopy(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, uint64_t))off_1E3394F68[v1])(&v5, a1);
  }
}

{
  uint64_t v1;
  WebCore::ContentExtensions::RedirectAction *v3;
  const WTF::JSONImpl::Object *v4;
  const WTF::String *v5;
  char v6;
  char *v7;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::ContentExtensions::RedirectAction *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ContentExtensions::RedirectAction::parse(v3, v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(char **, uint64_t))off_1E3394F80[v1])(&v7, a1);
  }
}

WTF::JSONImpl::ObjectBase *WebCore::ContentExtensions::RedirectAction::parse@<X0>(WebCore::ContentExtensions::RedirectAction *this@<X0>, const WTF::JSONImpl::Object *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::JSONImpl::ObjectBase *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::JSONImpl::ObjectBase *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::JSONImpl::ObjectBase *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  WTF::JSONImpl::ObjectBase *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unsigned __int128 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  char v41;
  int v42;
  WTF::JSONImpl::ObjectBase *result;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46[2];
  unsigned __int128 v47;
  int v48;
  __int16 v49;
  _BYTE v50[32];
  int v51;
  unsigned __int128 v52;
  int v53;
  WTF::StringImpl *v54;
  __int128 v55;
  __int128 v56;
  int v57;
  __int16 v58;
  _BYTE v59[32];
  int v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  __int128 v65;
  int v66;
  __int16 v67;
  uint64_t v68;
  unsigned int v69;
  unsigned __int128 v70;
  unsigned int v71;
  WebCore::ContentExtensions::RedirectAction::URLTransformAction *v72;
  WTF::JSONImpl::ObjectBase *v73;
  char v74;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getObject(this, (const WTF::String *)&v54);
  v8 = v54;
  v54 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v73;
  if (!v73)
  {
    if ((_MergedGlobals_158 & 1) == 0)
    {
      qword_1ECE828E8 = (uint64_t)&off_1E3395448;
      _MergedGlobals_158 = 1;
    }
    v14 = 19;
    goto LABEL_14;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v46[0] = v54;
  WTF::JSONImpl::ObjectBase::getString(v9, (const WTF::String *)v46);
  v11 = v46[0];
  v46[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (!(_QWORD)v64)
  {
    v15 = v73;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v46[0] = v54;
    WTF::JSONImpl::ObjectBase::getString(v15, (const WTF::String *)v46);
    v17 = v46[0];
    v46[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v64;
    if ((_QWORD)v64)
    {
      v19 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v19 += 2;
      *(_BYTE *)a3 = 2;
      *(_QWORD *)(a3 + 8) = v18;
      *(_QWORD *)(a3 + 16) = v19;
      *(_DWORD *)(a3 + 104) = 1;
      goto LABEL_22;
    }
    v22 = v73;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)&v64 = v54;
    WTF::JSONImpl::ObjectBase::getObject(v22, (const WTF::String *)&v64);
    v24 = (WTF::StringImpl *)v64;
    *(_QWORD *)&v64 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (v72)
    {
      WebCore::ContentExtensions::RedirectAction::URLTransformAction::parse(v72, (uint64_t)&v64);
      v25 = v71;
      if (!v71)
      {
        v33 = (WTF::StringImpl *)*((_QWORD *)&v64 + 1);
        v32 = (WTF::StringImpl *)v64;
        v34 = 0uLL;
        *(_OWORD *)v46 = v64;
        v36 = *((_QWORD *)&v65 + 1);
        v35 = v65;
        v64 = 0u;
        v65 = 0u;
        v47 = __PAIR128__(v36, v35);
        v48 = v66;
        v49 = v67;
        v50[0] = 0;
        v51 = -1;
        v37 = v69;
        if (v69 != -1)
        {
          ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t *))off_1E33950D0[v69])(&v54, v50, &v68);
          v34 = 0uLL;
          v51 = v37;
          v32 = v46[0];
          v33 = v46[1];
          v36 = *((_QWORD *)&v47 + 1);
          v35 = v47;
        }
        v39 = *((_QWORD *)&v70 + 1);
        v38 = v70;
        v70 = v34;
        v52 = __PAIR128__(v39, v38);
        v40 = 2;
        v53 = 2;
        LOBYTE(v54) = 2;
        *(_QWORD *)&v55 = v32;
        *((_QWORD *)&v55 + 1) = v33;
        *(_OWORD *)v46 = v34;
        v47 = v34;
        *(_QWORD *)&v56 = v35;
        *((_QWORD *)&v56 + 1) = v36;
        v57 = v48;
        v58 = v49;
        v59[0] = 0;
        v63 = -1;
        v60 = -1;
        if ((_DWORD)v37 == -1)
        {
          v41 = 2;
        }
        else
        {
          ((void (*)(char *, _BYTE *, _BYTE *))off_1E33950D0[v37])(&v74, v59, v50);
          v60 = v37;
          v39 = *((_QWORD *)&v52 + 1);
          v38 = v52;
          v41 = (char)v54;
          v33 = (WTF::StringImpl *)*((_QWORD *)&v55 + 1);
          v32 = (WTF::StringImpl *)v55;
          v36 = *((_QWORD *)&v56 + 1);
          v35 = v56;
        }
        v52 = 0u;
        v61 = v38;
        v62 = v39;
        v63 = 2;
        *(_BYTE *)a3 = v41;
        *(_DWORD *)(a3 + 104) = -1;
        v55 = 0u;
        *(_QWORD *)(a3 + 8) = v32;
        *(_QWORD *)(a3 + 16) = v33;
        v56 = 0u;
        *(_QWORD *)(a3 + 24) = v35;
        *(_QWORD *)(a3 + 32) = v36;
        *(_DWORD *)(a3 + 40) = v57;
        *(_WORD *)(a3 + 44) = v58;
        *(_BYTE *)(a3 + 48) = 0;
        *(_DWORD *)(a3 + 80) = -1;
        if ((_DWORD)v37 != -1)
        {
          ((void (*)(char *, uint64_t, _BYTE *))off_1E33950D0[v37])(&v74, a3 + 48, v59);
          *(_DWORD *)(a3 + 80) = v37;
          v38 = v61;
          v39 = v62;
          v40 = v63;
        }
        v61 = 0;
        v62 = 0;
        *(_QWORD *)(a3 + 88) = v38;
        *(_QWORD *)(a3 + 96) = v39;
        *(_DWORD *)(a3 + 104) = 2;
        *(_DWORD *)(a3 + 112) = 0;
        if (v40 != -1)
          ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v40])(&v74, &v55);
        v63 = -1;
        if (v53 != -1)
          ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v53])(&v74, v46);
        v25 = v71;
        if (v71 == -1)
          goto LABEL_69;
        goto LABEL_68;
      }
      if (v71 == 1)
      {
        *(_OWORD *)a3 = v64;
        *(_DWORD *)(a3 + 112) = 1;
LABEL_68:
        (*(&off_1E3394FF0 + v25))((int)&v54, (WebCore::ContentExtensions::RedirectAction::URLTransformAction *)&v64);
LABEL_69:
        v20 = v72;
        v72 = 0;
        if (!v20)
          goto LABEL_72;
        v21 = *(_DWORD *)v20 - 1;
        if (*(_DWORD *)v20 != 1)
          goto LABEL_71;
        WTF::JSONImpl::Value::operator delete();
        goto LABEL_72;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_89;
    }
    v26 = v73;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)&v64 = v54;
    WTF::JSONImpl::ObjectBase::getString(v26, (const WTF::String *)&v64);
    v28 = (WTF::StringImpl *)v64;
    *(_QWORD *)&v64 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = v46[0];
    if (!v46[0])
    {
      if ((_MergedGlobals_158 & 1) != 0)
      {
LABEL_54:
        v14 = 24;
LABEL_14:
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = &qword_1ECE828E8;
        *(_DWORD *)(a3 + 112) = 1;
        goto LABEL_72;
      }
LABEL_89:
      qword_1ECE828E8 = (uint64_t)&off_1E3395448;
      _MergedGlobals_158 = 1;
      goto LABEL_54;
    }
    *(_DWORD *)v46[0] += 2;
    *(_QWORD *)&v64 = v29;
    MEMORY[0x19AEA52D4](&v54, &v64, 0);
    v30 = (WTF::StringImpl *)v64;
    *(_QWORD *)&v64 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v12);
      else
        *(_DWORD *)v30 -= 2;
    }
    if ((v55 & 1) != 0)
    {
      if (!WTF::URL::protocolIsJavaScript((WTF::URL *)&v54))
      {
        v42 = 0;
        v44 = v46[0];
        v46[0] = 0;
        *(_BYTE *)a3 = 2;
        *(_QWORD *)(a3 + 8) = v44;
        *(_DWORD *)(a3 + 104) = 3;
LABEL_79:
        *(_DWORD *)(a3 + 112) = v42;
        v45 = v54;
        v54 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v12);
          else
            *(_DWORD *)v45 -= 2;
        }
        v20 = v46[0];
        v46[0] = 0;
        if (v20)
          goto LABEL_26;
        goto LABEL_72;
      }
      if ((_MergedGlobals_158 & 1) == 0)
      {
        qword_1ECE828E8 = (uint64_t)&off_1E3395448;
        _MergedGlobals_158 = 1;
      }
      v31 = 22;
    }
    else
    {
      if ((_MergedGlobals_158 & 1) == 0)
      {
        qword_1ECE828E8 = (uint64_t)&off_1E3395448;
        _MergedGlobals_158 = 1;
      }
      v31 = 23;
    }
    *(_QWORD *)a3 = v31;
    *(_QWORD *)(a3 + 8) = &qword_1ECE828E8;
    v42 = 1;
    goto LABEL_79;
  }
  if ((WTF::StringImpl::startsWith() & 1) != 0)
  {
    v13 = v64;
    *(_BYTE *)a3 = 2;
    *(_QWORD *)(a3 + 8) = v13;
    *(_DWORD *)(a3 + 104) = 0;
LABEL_22:
    *(_DWORD *)(a3 + 112) = 0;
    goto LABEL_72;
  }
  if ((_MergedGlobals_158 & 1) == 0)
  {
    qword_1ECE828E8 = (uint64_t)&off_1E3395448;
    _MergedGlobals_158 = 1;
  }
  *(_QWORD *)a3 = 20;
  *(_QWORD *)(a3 + 8) = &qword_1ECE828E8;
  *(_DWORD *)(a3 + 112) = 1;
  v20 = (WTF::StringImpl *)v64;
  *(_QWORD *)&v64 = 0;
  if (v20)
  {
LABEL_26:
    v21 = *(_DWORD *)v20 - 2;
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::destroy(v20, v12);
      goto LABEL_72;
    }
LABEL_71:
    *(_DWORD *)v20 = v21;
  }
LABEL_72:
  result = v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::ObjectBase *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

void WebCore::ContentExtensions::RedirectAction::URLTransformAction::parse(WebCore::ContentExtensions::RedirectAction::URLTransformAction *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  _DWORD *v56;
  _DWORD *v57;
  unsigned int v58;
  uint64_t v59;
  WTF::StringImpl **v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  _DWORD *v70;
  WTF::StringImpl *v71;
  unsigned int v72;
  unsigned int v73;
  char *v74;
  char *v75;
  char *v76;
  _DWORD *v77;
  _DWORD *v78;
  WTF::StringImpl *v79;
  __int128 v80;
  __int128 v81;
  unsigned int v82;
  __int128 v83;
  _QWORD *v84;
  _DWORD **v85;
  uint64_t v86;
  _DWORD *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89[2];
  unsigned int v90[3];
  unsigned int v91;
  unsigned int v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96[2];
  WTF::StringImpl *v97[2];
  int v98;
  __int16 v99;
  WTF::StringImpl *v100;
  unsigned int v101;
  unsigned int v102;
  _QWORD *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  WTF::StringImpl *v107[2];

  LOBYTE(v99) = 0;
  v100 = 0;
  v106 = 0;
  *(_OWORD *)v96 = 0u;
  *(_OWORD *)v97 = 0u;
  LOBYTE(v98) = 0;
  v107[0] = 0;
  v107[1] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString(this, (const WTF::String *)&v95);
  v6 = v95;
  v95 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v89[0];
  if (!v89[0])
  {
LABEL_11:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v95 = v89[0];
    WTF::JSONImpl::ObjectBase::getString(this, (const WTF::String *)&v95);
    v10 = v89[0];
    v89[0] = 0;
    v11 = v96[1];
    v96[1] = v10;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
      v89[0] = 0;
    }
    v12 = v95;
    v95 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v95 = v89[0];
    WTF::JSONImpl::ObjectBase::getString(this, (const WTF::String *)&v95);
    v14 = v89[0];
    v89[0] = 0;
    v15 = v97[0];
    v97[0] = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
      v89[0] = 0;
    }
    v16 = v95;
    v95 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v95 = v89[0];
    WTF::JSONImpl::ObjectBase::getString(this, (const WTF::String *)&v95);
    v18 = v89[0];
    v89[0] = 0;
    v19 = v97[1];
    v97[1] = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
      v89[0] = 0;
    }
    v20 = v95;
    v95 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v94 = v89[0];
    WTF::JSONImpl::ObjectBase::getString(this, (const WTF::String *)&v94);
    v22 = v94;
    v94 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (v95)
    {
      v23 = *((unsigned int *)v95 + 1);
      if ((_DWORD)v23)
      {
        v24 = *((_QWORD *)v95 + 1);
        if ((*((_BYTE *)v95 + 16) & 4) != 0)
          v25 = WTF::parseInteger<unsigned short,unsigned char>(v24, v23, 10, 0);
        else
          v25 = WTF::parseInteger<unsigned short,char16_t>(v24, v23, 10, 0);
        if ((v25 & 0xFF0000) == 0)
        {
          if ((_MergedGlobals_158 & 1) == 0)
          {
            qword_1ECE828E8 = (uint64_t)&off_1E3395448;
            _MergedGlobals_158 = 1;
          }
          *(_QWORD *)a2 = 25;
          *(_QWORD *)(a2 + 8) = &qword_1ECE828E8;
          *(_DWORD *)(a2 + 96) = 1;
          goto LABEL_209;
        }
        v98 = v25;
      }
      else
      {
        if ((_BYTE)v99)
        {
          LOBYTE(v98) = 0;
          BYTE2(v98) = 0;
          goto LABEL_54;
        }
        v98 = 0;
      }
      LOBYTE(v99) = 1;
    }
LABEL_54:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v93 = v89[0];
    WTF::JSONImpl::ObjectBase::getString(this, (const WTF::String *)&v93);
    v28 = v93;
    v93 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (v94)
    {
      WTF::URLParser::maybeCanonicalizeScheme();
      if (!LOBYTE(v89[1]))
      {
        if ((_MergedGlobals_158 & 1) == 0)
        {
          qword_1ECE828E8 = (uint64_t)&off_1E3395448;
          _MergedGlobals_158 = 1;
        }
        *(_QWORD *)a2 = 21;
        *(_QWORD *)(a2 + 8) = &qword_1ECE828E8;
        *(_DWORD *)(a2 + 96) = 1;
LABEL_68:
        v30 = v94;
        v94 = 0;
        if (!v30)
          goto LABEL_209;
        v31 = *(_DWORD *)v30 - 2;
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::destroy(v30, v5);
          goto LABEL_209;
        }
LABEL_202:
        *(_DWORD *)v30 = v31;
        goto LABEL_209;
      }
      if (MEMORY[0x19AEA53F4](v89[0], "javascript", 10))
      {
        if ((_MergedGlobals_158 & 1) != 0)
        {
LABEL_61:
          *(_QWORD *)a2 = 22;
          *(_QWORD *)(a2 + 8) = &qword_1ECE828E8;
          *(_DWORD *)(a2 + 96) = 1;
          if (LOBYTE(v89[1]))
          {
            v29 = v89[0];
            v89[0] = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v5);
              else
                *(_DWORD *)v29 -= 2;
            }
          }
          goto LABEL_68;
        }
LABEL_225:
        qword_1ECE828E8 = (uint64_t)&off_1E3395448;
        _MergedGlobals_158 = 1;
        goto LABEL_61;
      }
      v32 = v89[0];
      v89[0] = 0;
      v33 = v107[0];
      v107[0] = v32;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::destroy(v33, v5);
          v89[0] = 0;
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      v34 = v94;
      v94 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v5);
        else
          *(_DWORD *)v34 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v94 = v89[0];
    WTF::JSONImpl::ObjectBase::getString(this, (const WTF::String *)&v94);
    v36 = v89[0];
    v89[0] = 0;
    v37 = v107[1];
    v107[1] = v36;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v35);
      else
        *(_DWORD *)v37 -= 2;
      v89[0] = 0;
    }
    v38 = v94;
    v94 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v35);
      else
        *(_DWORD *)v38 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v93 = v89[0];
    WTF::JSONImpl::ObjectBase::getObject(this, (const WTF::String *)&v93);
    v40 = v93;
    v93 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v39);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (!v94)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v88 = v89[0];
      WTF::JSONImpl::ObjectBase::getString(this, (const WTF::String *)&v88);
      v42 = v88;
      v88 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v5);
        else
          *(_DWORD *)v42 -= 2;
      }
      if (v93 && *((_DWORD *)v93 + 1) && (WTF::StringImpl::startsWith() & 1) == 0)
      {
        if ((_MergedGlobals_158 & 1) == 0)
        {
          qword_1ECE828E8 = (uint64_t)&off_1E3395448;
          _MergedGlobals_158 = 1;
        }
        *(_QWORD *)a2 = 26;
        *(_QWORD *)(a2 + 8) = &qword_1ECE828E8;
        *(_DWORD *)(a2 + 96) = 1;
        v51 = v93;
        v93 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            WTF::StringImpl::destroy(v51, v5);
          else
            *(_DWORD *)v51 -= 2;
        }
        goto LABEL_200;
      }
      if (v106 != -1)
      {
        if (!v106)
        {
          v43 = v93;
          v93 = 0;
          v44 = v100;
          v100 = v43;
          if (v44)
          {
            v45 = *(_DWORD *)v44 - 2;
            if (*(_DWORD *)v44 == 2)
            {
              WTF::StringImpl::destroy(v44, v5);
              v44 = v93;
              v93 = 0;
              if (!v44)
                goto LABEL_203;
              v45 = *(_DWORD *)v44 - 2;
              if (*(_DWORD *)v44 == 2)
              {
                WTF::StringImpl::destroy(v44, v63);
                goto LABEL_203;
              }
            }
            *(_DWORD *)v44 = v45;
          }
LABEL_203:
          v79 = v94;
          v94 = 0;
          if (v79)
          {
            if (*(_DWORD *)v79 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v79;
          }
          v80 = *(_OWORD *)v96;
          v81 = *(_OWORD *)v97;
          *(_OWORD *)v96 = 0u;
          *(_OWORD *)v97 = 0u;
          *(_OWORD *)a2 = v80;
          *(_OWORD *)(a2 + 16) = v81;
          *(_DWORD *)(a2 + 32) = v98;
          *(_WORD *)(a2 + 36) = v99;
          *(_BYTE *)(a2 + 40) = 0;
          v5 = (WTF::StringImpl *)(a2 + 40);
          *(_DWORD *)(a2 + 72) = -1;
          v82 = v106;
          if (v106 != -1)
          {
            ((void (*)(WTF::StringImpl **, WTF::StringImpl *, WTF::StringImpl **))off_1E33950D0[v106])(v89, v5, &v100);
            *(_DWORD *)(a2 + 72) = v82;
          }
          v83 = *(_OWORD *)v107;
          v107[0] = 0;
          v107[1] = 0;
          *(_OWORD *)(a2 + 80) = v83;
          *(_DWORD *)(a2 + 96) = 0;
          goto LABEL_209;
        }
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))*(&off_1E33950C0 + v106))(v89, &v100);
      }
      v100 = v93;
      v106 = 0;
      goto LABEL_203;
    }
    WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::parse(v94, (uint64_t)v89);
    v41 = v92;
    if (v92)
    {
      if (v92 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_225;
      }
      *(_OWORD *)a2 = *(_OWORD *)v89;
      *(_DWORD *)(a2 + 96) = 1;
LABEL_197:
      if (v92 != -1)
        (*(&off_1E3395080 + v92))((int)&v93, (WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *)v89);
      if (v41)
      {
LABEL_200:
        v30 = v94;
        v94 = 0;
        if (!v30)
          goto LABEL_209;
        v31 = *(_DWORD *)v30 - 1;
        if (*(_DWORD *)v30 != 1)
          goto LABEL_202;
        WTF::JSONImpl::Value::operator delete();
LABEL_209:
        v26 = v95;
        v95 = 0;
        if (!v26)
          goto LABEL_212;
        goto LABEL_210;
      }
      goto LABEL_203;
    }
    if (v106 != -1)
    {
      if (v106 == 1)
      {
        v46 = HIDWORD(v89[1]);
        if (v102 <= HIDWORD(v89[1]))
        {
          if (HIDWORD(v89[1]) <= v101)
          {
            v46 = v102;
          }
          else
          {
            if (v101)
            {
              if (v102)
              {
                v59 = 24 * v102;
                v60 = (WTF::StringImpl **)((char *)v100 + 16);
                do
                {
                  v61 = *v60;
                  *v60 = 0;
                  if (v61)
                  {
                    if (*(_DWORD *)v61 == 2)
                      WTF::StringImpl::destroy(v61, v5);
                    else
                      *(_DWORD *)v61 -= 2;
                  }
                  v62 = *(v60 - 2);
                  *(v60 - 2) = 0;
                  if (v62)
                  {
                    if (*(_DWORD *)v62 == 2)
                      WTF::StringImpl::destroy(v62, v5);
                    else
                      *(_DWORD *)v62 -= 2;
                  }
                  v60 += 3;
                  v59 -= 24;
                }
                while (v59);
                v102 = 0;
              }
              v64 = v100;
              if (v100)
              {
                v100 = 0;
                v101 = 0;
                WTF::fastFree(v64, v5);
              }
            }
            WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((unsigned int *)&v100, HIDWORD(v89[1]));
            v46 = v102;
          }
        }
        else
        {
          v47 = 24 * v102 - 24 * HIDWORD(v89[1]);
          v48 = (WTF::StringImpl **)((char *)v100 + 24 * HIDWORD(v89[1]) + 16);
          do
          {
            v49 = *v48;
            *v48 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
                WTF::StringImpl::destroy(v49, v5);
              else
                *(_DWORD *)v49 -= 2;
            }
            v50 = *(v48 - 2);
            *(v48 - 2) = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
                WTF::StringImpl::destroy(v50, v5);
              else
                *(_DWORD *)v50 -= 2;
            }
            v48 += 3;
            v47 -= 24;
          }
          while (v47);
          v102 = v46;
        }
        v65 = v89[0];
        v66 = v100;
        if (v46)
        {
          v67 = (WTF::StringImpl *)((char *)v89[0] + 24 * v46);
          do
          {
            v68 = *(_DWORD **)v65;
            if (*(_QWORD *)v65)
              *v68 += 2;
            v69 = *(WTF::StringImpl **)v66;
            *(_QWORD *)v66 = v68;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
                WTF::StringImpl::destroy(v69, v5);
              else
                *(_DWORD *)v69 -= 2;
            }
            *((_BYTE *)v66 + 8) = *((_BYTE *)v65 + 8);
            v70 = (_DWORD *)*((_QWORD *)v65 + 2);
            if (v70)
              *v70 += 2;
            v71 = (WTF::StringImpl *)*((_QWORD *)v66 + 2);
            *((_QWORD *)v66 + 2) = v70;
            if (v71)
            {
              if (*(_DWORD *)v71 == 2)
                WTF::StringImpl::destroy(v71, v5);
              else
                *(_DWORD *)v71 -= 2;
            }
            v65 = (WTF::StringImpl *)((char *)v65 + 24);
            v66 = (WTF::StringImpl *)((char *)v66 + 24);
          }
          while (v65 != v67);
          v65 = v89[0];
          v72 = v102;
          v66 = v100;
        }
        else
        {
          v72 = 0;
        }
        v73 = HIDWORD(v89[1]);
        if (v72 != HIDWORD(v89[1]))
        {
          v74 = (char *)v65 + 24 * HIDWORD(v89[1]);
          v75 = (char *)v66 + 24 * v72;
          v76 = (char *)v65 + 24 * v72;
          do
          {
            v77 = *(_DWORD **)v76;
            if (*(_QWORD *)v76)
              *v77 += 2;
            *(_QWORD *)v75 = v77;
            v75[8] = v76[8];
            v78 = (_DWORD *)*((_QWORD *)v76 + 2);
            if (v78)
              *v78 += 2;
            *((_QWORD *)v75 + 2) = v78;
            v76 += 24;
            v75 += 24;
          }
          while (v76 != v74);
        }
        v102 = v73;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v103, v90);
        goto LABEL_197;
      }
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))*(&off_1E33950C0 + v106))(&v93, &v100);
    }
    v100 = 0;
    v101 = 0;
    v106 = -1;
    v102 = HIDWORD(v89[1]);
    if (HIDWORD(v89[1]))
    {
      if (HIDWORD(v89[1]) >= 0xAAAAAAB)
        goto LABEL_226;
      v52 = 24 * HIDWORD(v89[1]);
      v53 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v89[1])));
      v101 = (v52 & 0xFFFFFFF8) / 0x18;
      v100 = (WTF::StringImpl *)v53;
      if (HIDWORD(v89[1]))
      {
        v54 = v89[0];
        v55 = (WTF::StringImpl *)((char *)v89[0] + 24 * HIDWORD(v89[1]));
        do
        {
          v56 = *(_DWORD **)v54;
          if (*(_QWORD *)v54)
            *v56 += 2;
          *(_QWORD *)v53 = v56;
          *(_BYTE *)(v53 + 8) = *((_BYTE *)v54 + 8);
          v57 = (_DWORD *)*((_QWORD *)v54 + 2);
          if (v57)
            *v57 += 2;
          *(_QWORD *)(v53 + 16) = v57;
          v54 = (WTF::StringImpl *)((char *)v54 + 24);
          v53 += 24;
        }
        while (v54 != v55);
      }
    }
    v58 = v91;
    v103 = 0;
    v104 = 0;
    v105 = v91;
    if (!v91)
    {
LABEL_143:
      v106 = 1;
      goto LABEL_197;
    }
    if (!(v91 >> 29))
    {
      v84 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v91));
      v104 = v58;
      v103 = v84;
      if (v91)
      {
        v85 = *(_DWORD ***)v90;
        v86 = 8 * v91;
        do
        {
          v87 = *v85;
          if (*v85)
            *v87 += 2;
          *v84++ = v87;
          ++v85;
          v86 -= 8;
        }
        while (v86);
      }
      goto LABEL_143;
    }
LABEL_226:
    __break(0xC471u);
    JUMPOUT(0x19571C314);
  }
  if (!*((_DWORD *)v89[0] + 1))
  {
LABEL_8:
    v89[0] = 0;
    v8 = v96[0];
    v96[0] = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v5);
        v89[0] = 0;
      }
      else
      {
        *(_DWORD *)v8 -= 2;
      }
    }
    goto LABEL_11;
  }
  if (WTF::StringImpl::startsWith())
  {
    v7 = v89[0];
    goto LABEL_8;
  }
  if ((_MergedGlobals_158 & 1) == 0)
  {
    qword_1ECE828E8 = (uint64_t)&off_1E3395448;
    _MergedGlobals_158 = 1;
  }
  *(_QWORD *)a2 = 27;
  *(_QWORD *)(a2 + 8) = &qword_1ECE828E8;
  *(_DWORD *)(a2 + 96) = 1;
  v26 = v89[0];
  v89[0] = 0;
  if (v26)
  {
LABEL_210:
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v5);
    else
      *(_DWORD *)v26 -= 2;
  }
LABEL_212:
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::~URLTransformAction((WebCore::ContentExtensions::RedirectAction::URLTransformAction *)v96, v5);
}

_QWORD *WebCore::ContentExtensions::RedirectAction::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  uint64_t v6;
  _QWORD v7[12];
  int v8;
  char v9;
  char *v10;

  v3 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v3 == -1)
  {
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_QWORD *)WebCore::ContentExtensions::RedirectAction::isolatedCopy(v6);
  }
  else
  {
    v10 = &v9;
    result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSB_23RegexSubstitutionActionENSB_18URLTransformActionENSB_9URLActionEEEEE4copyERKSG_EUlRT_E_EEJRKNS0_6__implIJSC_SD_SE_SF_EEEEEEDcOSK_DpOT0____fmatrix[v3])(v7, &v10, a1 + 8);
    *(_BYTE *)a2 = 2;
    *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 104) = -1;
    v5 = v8;
    if (v8 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(char **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v8])(&v10, a2 + 8, v7);
      *(_DWORD *)(a2 + 104) = v5;
      if (v8 != -1)
        return (_QWORD *)((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v8])(&v10, v7);
    }
  }
  return result;
}

{
  uint64_t v3;
  _QWORD *result;
  int v5;
  uint64_t v6;
  _QWORD v7[12];
  int v8;
  char v9;
  char *v10;

  v3 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v3 == -1)
  {
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_QWORD *)WebCore::ContentExtensions::RedirectAction::serialize(v6);
  }
  else
  {
    v10 = &v9;
    result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSB_23RegexSubstitutionActionENSB_18URLTransformActionENSB_9URLActionEEEEE4copyEOSG_EUlOT_E_EEJNS0_6__implIJSC_SD_SE_SF_EEEEEEDcSK_DpOT0____fmatrix[v3])(v7, &v10, a1 + 8);
    *(_BYTE *)a2 = 2;
    *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 104) = -1;
    v5 = v8;
    if (v8 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(char **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v8])(&v10, a2 + 8, v7);
      *(_DWORD *)(a2 + 104) = v5;
      if (v8 != -1)
        return (_QWORD *)((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v8])(&v10, v7);
    }
  }
  return result;
}

uint64_t WebCore::ContentExtensions::RedirectAction::serialize(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(unsigned int *)(a2 + 12);
  v6 = v5 + 4;
  if (v5 + 4 > v4)
  {
    v20 = v4 + (v4 >> 2);
    if (v20 >= 0x10)
      v21 = v20 + 1;
    else
      v21 = 16;
    if (v21 <= v6)
      v22 = v5 + 4;
    else
      v22 = v21;
    if (HIDWORD(v22))
    {
      __break(0xC471u);
LABEL_40:
      JUMPOUT(0x19571C67CLL);
    }
    v23 = *(void **)a2;
    v24 = (void *)WTF::fastMalloc((WTF *)v22);
    *(_DWORD *)(a2 + 8) = v22;
    *(_QWORD *)a2 = v24;
    memcpy(v24, v23, v5);
    if (v23)
    {
      if (*(void **)a2 == v23)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v23, v25);
    }
  }
  v7 = *(unsigned int *)(a2 + 12);
  if (v6 < v7)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x19571C6C8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v7) = 0;
  *(_DWORD *)(a2 + 12) = v6;
  v8 = *(_DWORD *)(a1 + 104);
  v9 = (v5 + 4);
  if (*(_DWORD *)(a2 + 8) == (_DWORD)v6)
  {
    v10 = v9 + (v9 >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 <= v9 + 1)
      v12 = v9 + 1;
    else
      v12 = v11;
    if (HIDWORD(v12))
    {
      __break(0xC471u);
      JUMPOUT(0x19571C6D0);
    }
    v13 = *(void **)a2;
    v14 = (void *)WTF::fastMalloc((WTF *)v12);
    *(_DWORD *)(a2 + 8) = v12;
    *(_QWORD *)a2 = v14;
    memcpy(v14, v13, (v5 + 4));
    if (v13)
    {
      if (*(void **)a2 == v13)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v13, v15);
    }
    v16 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
  }
  else
  {
    v16 = (_BYTE *)(*(_QWORD *)a2 + v9);
  }
  *v16 = v8;
  ++*(_DWORD *)(a2 + 12);
  v26[0] = a2;
  v26[1] = a2;
  v26[2] = a2;
  v26[3] = a2;
  v17 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v17 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_37;
  }
  v27 = v26;
  result = ((uint64_t (*)(_QWORD **, uint64_t))off_1E3395040[v17])(&v27, a1 + 8);
  v19 = *(unsigned int *)(a2 + 12);
  if ((v19 - v5) >> 32)
  {
    __break(0xC471u);
    goto LABEL_40;
  }
  if (v6 > v19)
  {
    __break(0xC471u);
    JUMPOUT(0x19571C69CLL);
  }
  if (*(_DWORD *)(*(_QWORD *)a2 + v5))
  {
    __break(0xC471u);
    JUMPOUT(0x19571C6BCLL);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v5) = v19 - v5;
  return result;
}

void WebCore::ContentExtensions::RedirectAction::deserialize(unsigned int *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  int *v14;
  _OWORD v15[2];
  int v16;
  __int16 v17;
  char v18[32];
  int v19;
  __int128 v20;
  int v21;
  __int128 v22;
  __int128 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  char v29;

  if (a2 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19571C904);
  }
  if (a2 == 4)
  {
    __break(0xC471u);
    JUMPOUT(0x19571C924);
  }
  v5 = *a1;
  v6 = v5 - 5;
  switch(*((_BYTE *)a1 + 4))
  {
    case 0:
      if (a2 < v5)
      {
        __break(0xC471u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(0xC471u);
        JUMPOUT(0x19571C964);
      }
      if (v5 != 4 && a2 - 5 < v6)
        goto LABEL_27;
      WTF::String::fromUTF8();
      v12 = 0;
      v21 = 0;
LABEL_20:
      *(_BYTE *)a3 = 2;
      *(_BYTE *)(a3 + 8) = 0;
      v13 = a3 + 8;
      *(_DWORD *)(a3 + 104) = -1;
      v14 = (int *)(a3 + 104);
LABEL_21:
      ((void (*)(__int128 *, uint64_t, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v12])(&v22, v13, v15);
      *v14 = v12;
      if (v21 != -1)
        ((void (*)(__int128 *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v21])(&v22, v15);
      return;
    case 1:
      WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction::deserialize((unsigned int *)((char *)a1 + 5), a2 - 5, &v22);
      v15[0] = v22;
      v12 = 1;
      goto LABEL_19;
    case 2:
      WebCore::ContentExtensions::RedirectAction::URLTransformAction::deserialize((uint64_t)a1 + 5, a2 - 5, (uint64_t)&v22);
      v8 = v22;
      v9 = v23;
      v22 = 0u;
      v23 = 0u;
      v15[0] = v8;
      v15[1] = v9;
      v16 = v24;
      v17 = v25;
      v18[0] = 0;
      v19 = -1;
      v10 = v27;
      if (v27 != -1)
      {
        ((void (*)(char *, char *, uint64_t *))off_1E33950D0[v27])(&v29, v18, &v26);
        v19 = v10;
      }
      v11 = v28;
      v28 = 0uLL;
      v20 = v11;
      v21 = 2;
      WebCore::ContentExtensions::RedirectAction::URLTransformAction::~URLTransformAction((WebCore::ContentExtensions::RedirectAction::URLTransformAction *)&v22, v7);
      v12 = v21;
      *(_BYTE *)a3 = 2;
      *(_BYTE *)(a3 + 8) = 0;
      v13 = a3 + 8;
      *(_DWORD *)(a3 + 104) = -1;
      v14 = (int *)(a3 + 104);
      if (v12 == -1)
        return;
      goto LABEL_21;
    case 3:
      if (a2 < v5)
        goto LABEL_28;
      if (v5 != 4 && a2 - 5 < v6)
        goto LABEL_27;
      WTF::String::fromUTF8();
      v12 = 3;
LABEL_19:
      v21 = v12;
      goto LABEL_20;
    default:
      __break(0xC471u);
      JUMPOUT(0x19571C984);
  }
}

uint64_t WebCore::ContentExtensions::RedirectAction::serializedLength(unsigned int *a1, unint64_t a2)
{
  uint64_t result;

  if (a2 > 3)
    return *a1;
  result = 57;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ContentExtensions::RedirectAction::applyToRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];
  _QWORD *v7;

  v6[0] = a3;
  v6[1] = a2;
  v6[2] = a2;
  v6[3] = a2;
  v6[4] = a2;
  v3 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction::serialize(v5);
  }
  else
  {
    v7 = v6;
    return ((uint64_t (*)(_QWORD **, uint64_t))*(&off_1E3395060 + v3))(&v7, a1 + 8);
  }
}

uint64_t WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction::serialize(uint64_t a1, uint64_t a2)
{
  WTF *v3;
  char *v4;
  WTF *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  WTF *v48;
  WTF *v49;

  WTF::String::utf8();
  WTF::String::utf8();
  v3 = v49;
  if (v49)
    v3 = (WTF *)*((_QWORD *)v49 + 1);
  v4 = (char *)v3 + *(unsigned int *)(a2 + 12) + 8;
  v5 = v48;
  if (v48)
    v5 = (WTF *)*((_QWORD *)v48 + 1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2, (WTF *)((char *)v5 + (_QWORD)v4));
  if (v49)
  {
    v7 = *((_QWORD *)v49 + 1);
    if (HIDWORD(v7))
      goto LABEL_87;
  }
  else
  {
    LODWORD(v7) = 0;
  }
  v8 = *(unsigned int *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 12);
  v10 = v9 + 4;
  if (v9 + 4 > v8)
  {
    v26 = v8 + (v8 >> 2);
    if (v26 >= 0x10)
      v27 = v26 + 1;
    else
      v27 = 16;
    if (v27 <= v10)
      v28 = v9 + 4;
    else
      v28 = v27;
    if (HIDWORD(v28))
    {
      __break(0xC471u);
      JUMPOUT(0x19571CE08);
    }
    v29 = *(void **)a2;
    v30 = (void *)WTF::fastMalloc((WTF *)v28);
    *(_DWORD *)(a2 + 8) = v28;
    *(_QWORD *)a2 = v30;
    memcpy(v30, v29, v9);
    if (v29)
    {
      if (*(void **)a2 == v29)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v29, v6);
    }
  }
  v11 = *(unsigned int *)(a2 + 12);
  if (v10 < v11)
  {
    __break(0xC471u);
    JUMPOUT(0x19571CDE0);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v11) = v7;
  *(_DWORD *)(a2 + 12) = v10;
  if (v48)
  {
    v12 = *((_QWORD *)v48 + 1);
    if (HIDWORD(v12))
    {
      __break(0xC471u);
      JUMPOUT(0x19571CB1CLL);
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  v13 = (v9 + 4) + 4;
  v14 = *(unsigned int *)(a2 + 8);
  if (v13 > v14)
  {
    v31 = v14 + (v14 >> 2);
    if (v31 >= 0x10)
      v32 = v31 + 1;
    else
      v32 = 16;
    if (v32 <= v13)
      v33 = (v9 + 4) + 4;
    else
      v33 = v32;
    if (HIDWORD(v33))
    {
      __break(0xC471u);
      JUMPOUT(0x19571CE10);
    }
    v34 = *(void **)a2;
    v35 = (void *)WTF::fastMalloc((WTF *)v33);
    *(_DWORD *)(a2 + 8) = v33;
    *(_QWORD *)a2 = v35;
    memcpy(v35, v34, (v9 + 4));
    if (v34)
    {
      if (*(void **)a2 == v34)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v34, v6);
    }
  }
  v15 = *(unsigned int *)(a2 + 12);
  if (v13 < v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19571CDE8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v15) = v12;
  *(_DWORD *)(a2 + 12) = v9 + 8;
  if (v49)
  {
    v16 = *((_QWORD *)v49 + 1);
    if (v16)
    {
      v17 = v16 + (v10 + 4);
      v18 = *(unsigned int *)(a2 + 8);
      if (v17 > v18)
      {
        v36 = v18 + (v18 >> 2);
        if (v36 >= 0x10)
          v37 = v36 + 1;
        else
          v37 = 16;
        if (v37 <= v17)
          v38 = v16 + (v10 + 4);
        else
          v38 = v37;
        if (HIDWORD(v38))
        {
          __break(0xC471u);
          JUMPOUT(0x19571CE18);
        }
        v39 = *(void **)a2;
        v40 = (void *)WTF::fastMalloc((WTF *)v38);
        *(_DWORD *)(a2 + 8) = v38;
        *(_QWORD *)a2 = v40;
        memcpy(v40, v39, (v10 + 4));
        if (v39)
        {
          if (*(void **)a2 == v39)
          {
            *(_QWORD *)a2 = 0;
            *(_DWORD *)(a2 + 8) = 0;
          }
          WTF::fastFree((WTF *)v39, v41);
        }
      }
      v19 = *(unsigned int *)(a2 + 12);
      if (v17 < v19)
      {
        __break(0xC471u);
        JUMPOUT(0x19571CDF0);
      }
      memcpy((void *)(*(_QWORD *)a2 + v19), (char *)v49 + 16, v16);
      *(_DWORD *)(a2 + 12) = v17;
      LODWORD(v13) = v16 + v10 + 4;
    }
  }
  v20 = v48;
  if (v48)
  {
    v21 = *((_QWORD *)v48 + 1);
    if (v21)
    {
      v22 = v21 + v13;
      v23 = *(unsigned int *)(a2 + 8);
      if (v22 > v23)
      {
        v42 = v23 + (v23 >> 2);
        if (v42 >= 0x10)
          v43 = v42 + 1;
        else
          v43 = 16;
        if (v43 <= v22)
          v44 = v21 + v13;
        else
          v44 = v43;
        if (HIDWORD(v44))
        {
LABEL_87:
          __break(0xC471u);
          JUMPOUT(0x19571CABCLL);
        }
        v45 = *(void **)a2;
        v46 = (void *)WTF::fastMalloc((WTF *)v44);
        *(_DWORD *)(a2 + 8) = v44;
        *(_QWORD *)a2 = v46;
        memcpy(v46, v45, v13);
        if (v45)
        {
          if (*(void **)a2 == v45)
          {
            *(_QWORD *)a2 = 0;
            *(_DWORD *)(a2 + 8) = 0;
          }
          WTF::fastFree((WTF *)v45, v47);
        }
      }
      v24 = *(unsigned int *)(a2 + 12);
      if (v22 < v24)
      {
        __break(0xC471u);
        JUMPOUT(0x19571CE00);
      }
      memcpy((void *)(*(_QWORD *)a2 + v24), (char *)v48 + 16, v21);
      *(_DWORD *)(a2 + 12) = v22;
      v20 = v48;
    }
    if (*(_DWORD *)v20 == 1)
      WTF::fastFree(v20, v6);
    else
      --*(_DWORD *)v20;
  }
  result = (uint64_t)v49;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      return WTF::fastFree(v49, v6);
    else
      --*(_DWORD *)v49;
  }
  return result;
}

uint64_t WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction::deserialize@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  if (a2 <= 3)
  {
    __break(0xC471u);
    goto LABEL_12;
  }
  if (a2 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x19571CEF8);
  }
  v4 = *a1 + 8;
  if (a2 < v4)
  {
    __break(0xC471u);
    JUMPOUT(0x19571CF18);
  }
  v6 = a1[1];
  WTF::String::fromUTF8();
  if (a2 < v4 + v6)
  {
    __break(0xC471u);
    goto LABEL_11;
  }
  if (a2 - v4 < v6)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    JUMPOUT(0x19571CED8);
  }
  result = WTF::String::fromUTF8();
  *a3 = v8;
  return result;
}

uint64_t WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction::applyToURL(WTF::StringImpl **this, WTF::URL *a2)
{
  const OpaqueJSContext *v4;
  BOOL v5;
  const char *v6;
  void *v7;
  OpaqueJSString *v8;
  WTF *v9;
  const OpaqueJSValue *String;
  uint64_t *v11;
  const OpaqueJSContext *v12;
  const char *v13;
  void *v14;
  OpaqueJSString *v15;
  WTF *v16;
  const OpaqueJSValue *v17;
  const OpaqueJSContext *v18;
  OpaqueJSValue *v19;
  OpaqueJSString *v20;
  const OpaqueJSValue *Property;
  OpaqueJSValue *v22;
  const OpaqueJSContext *v23;
  OpaqueJSValue *v24;
  uint64_t result;
  WTF::StringImpl *v26;
  const OpaqueJSContext *v27;
  OpaqueJSValue *v28;
  OpaqueJSString *v29;
  const OpaqueJSValue *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  unint64_t v41;
  const OpaqueJSContext *v42;
  OpaqueJSValue *v43;
  const OpaqueJSValue *PropertyAtIndex;
  OpaqueJSString *v45;
  size_t MaximumUTF8CStringSize;
  size_t v47;
  WTF::StringImpl *v48;
  uint64_t *v49;
  char *v50;
  void *v51;
  WTF::StringImpl *v52;
  WTF *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::URL *v59;
  unint64_t v60;
  const OpaqueJSValue *value;
  JSValueRef RegExp;
  JSValueRef arguments;
  WTF::StringImpl *v64;
  WTF *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v4 = (const OpaqueJSContext *)qword_1ECE828E0;
  if (qword_1ECE828D8)
    v5 = qword_1ECE828E0 == 0;
  else
    v5 = 1;
  if (v5)
  {
    qword_1ECE828D8 = (uint64_t)JSContextGroupCreate();
    v4 = JSGlobalContextCreateInGroup((JSContextGroupRef)qword_1ECE828D8, 0);
    qword_1ECE828E0 = (uint64_t)v4;
  }
  arguments = 0;
  WTF::String::utf8();
  if (v65)
    v6 = (char *)v65 + 16;
  else
    v6 = 0;
  v8 = JSStringCreateWithUTF8CString(v6);
  v9 = v65;
  v65 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, v7);
    else
      --*(_DWORD *)v9;
  }
  String = JSValueMakeString(v4, v8);
  if (v8)
    JSStringRelease(v8);
  arguments = String;
  v11 = &qword_1ECE82000;
  RegExp = JSObjectMakeRegExp((JSContextRef)qword_1ECE828E0, 1uLL, &arguments, 0);
  v12 = (const OpaqueJSContext *)qword_1ECE828E0;
  WTF::String::utf8();
  if (v65)
    v13 = (char *)v65 + 16;
  else
    v13 = 0;
  v15 = JSStringCreateWithUTF8CString(v13);
  v16 = v65;
  v65 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree(v16, v14);
    else
      --*(_DWORD *)v16;
  }
  v17 = JSValueMakeString(v12, v15);
  if (v15)
    JSStringRelease(v15);
  v18 = (const OpaqueJSContext *)qword_1ECE828E0;
  v19 = JSValueToObject((JSContextRef)qword_1ECE828E0, v17, 0);
  v20 = JSStringCreateWithUTF8CString("match");
  Property = JSObjectGetProperty(v18, v19, v20, 0);
  if (v20)
    JSStringRelease(v20);
  v22 = JSValueToObject(v18, Property, 0);
  v23 = (const OpaqueJSContext *)qword_1ECE828E0;
  v24 = JSValueToObject((JSContextRef)qword_1ECE828E0, v17, 0);
  value = JSObjectCallAsFunction(v23, v22, v24, 1uLL, &RegExp, 0);
  result = JSValueIsArray((JSContextRef)qword_1ECE828E0, value);
  if ((_DWORD)result)
  {
    v26 = *this;
    if (v26)
      *(_DWORD *)v26 += 2;
    v27 = (const OpaqueJSContext *)qword_1ECE828E0;
    v28 = JSValueToObject((JSContextRef)qword_1ECE828E0, value, 0);
    v29 = JSStringCreateWithUTF8CString("length");
    v30 = JSObjectGetProperty(v27, v28, v29, 0);
    if (v29)
      JSStringRelease(v29);
    v59 = a2;
    v32 = (unint64_t)JSValueToNumber(v27, v30, 0);
    if (v32 >= 0xA)
      v32 = 10;
    v60 = v32;
    if (v32)
    {
      v33 = 0;
      v34 = v26;
      while (1)
      {
        v35 = 0;
        v36 = v33;
        do
        {
          ++v35;
          v37 = v36 > 9;
          v36 /= 0xAuLL;
        }
        while (v37);
        if (v35 < 0
          || (v38 = (v35 + 1), __OFADD__(v35, 1))
          || (WTF::tryFastCompactMalloc((WTF *)(v38 + 20)), (v39 = v65) == 0))
        {
LABEL_92:
          __break(0xC471u);
          JUMPOUT(0x19571D570);
        }
        v40 = 0;
        *((_BYTE *)v65 + 20) = 92;
        *(_DWORD *)v39 = 2;
        *((_DWORD *)v39 + 1) = v38;
        *((_QWORD *)v39 + 1) = (char *)v39 + 20;
        *((_DWORD *)v39 + 4) = 4;
        v41 = v33;
        do
        {
          *((_BYTE *)&v67 + v40--) = (v41 % 0xA) | 0x30;
          v37 = v41 > 9;
          v41 /= 0xAuLL;
        }
        while (v37);
        if (v40 + 26 <= 25)
          memcpy((char *)v39 + 21, (char *)&v67 + v40 + 1, -v40);
        v42 = (const OpaqueJSContext *)v11[284];
        v43 = JSValueToObject(v42, value, 0);
        PropertyAtIndex = JSObjectGetPropertyAtIndex(v42, v43, v33, 0);
        v45 = JSValueToStringCopy((JSContextRef)v11[284], PropertyAtIndex, 0);
        MaximumUTF8CStringSize = JSStringGetMaximumUTF8CStringSize(v45);
        if (MaximumUTF8CStringSize)
        {
          v47 = MaximumUTF8CStringSize;
          if (HIDWORD(MaximumUTF8CStringSize))
            goto LABEL_92;
          v48 = v34;
          v49 = v11;
          v50 = (char *)WTF::fastMalloc((WTF *)MaximumUTF8CStringSize);
          JSStringGetUTF8CString(v45, v50, v47);
          strlen(v50);
          WTF::String::fromUTF8();
          WTF::fastFree((WTF *)v50, v51);
          v11 = v49;
          v34 = v48;
          if (v45)
LABEL_46:
            JSStringRelease(v45);
        }
        else
        {
          JSStringGetUTF8CString(v45, 0, 0);
          WTF::String::fromUTF8();
          if (v45)
            goto LABEL_46;
        }
        if (v64)
        {
          v31 = *((_QWORD *)v64 + 1);
          if (v34)
            goto LABEL_49;
        }
        else
        {
          v31 = 0;
          if (v34)
          {
LABEL_49:
            WTF::StringImpl::replace();
            v53 = v65;
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v52);
            else
              *(_DWORD *)v34 -= 2;
            v34 = v53;
          }
        }
        v54 = v64;
        v64 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v52);
          else
            *(_DWORD *)v54 -= 2;
        }
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v52);
        else
          *(_DWORD *)v39 -= 2;
        if (++v33 == v60)
          goto LABEL_67;
      }
    }
    v34 = v26;
LABEL_67:
    if (v34)
      *(_DWORD *)v34 += 2;
    v64 = v34;
    MEMORY[0x19AEA52D4](&v65, &v64, 0, v31);
    v56 = v64;
    v64 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v55);
      else
        *(_DWORD *)v56 -= 2;
    }
    result = (uint64_t)v65;
    if ((v66 & 1) != 0)
    {
      v65 = 0;
      v57 = *(WTF::StringImpl **)v59;
      *(_QWORD *)v59 = result;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
        {
          WTF::StringImpl::destroy(v57, v55);
          result = (uint64_t)v65;
        }
        else
        {
          result = 0;
          *(_DWORD *)v57 -= 2;
        }
      }
      else
      {
        result = 0;
      }
      v58 = v66;
      *(_OWORD *)((char *)v59 + 8) = v66;
      LODWORD(v66) = v58 & 0xFFFFFFFE;
      *(_OWORD *)((char *)v59 + 24) = v67;
    }
    v65 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v55);
        if (!v34)
          return result;
        goto LABEL_81;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v34)
      return result;
LABEL_81:
    if (*(_DWORD *)v34 == 2)
      return WTF::StringImpl::destroy(v34, v55);
    else
      *(_DWORD *)v34 -= 2;
  }
  return result;
}

void WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::parse(WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::JSONImpl::Value **v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  WTF::JSONImpl::ObjectBase **v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53[2];
  uint64_t v54;
  unsigned int v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  __int128 v59;
  __int128 v60;
  char v61;

  v59 = 0u;
  v60 = 0u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getValue(this, (const WTF::String *)v53);
  v6 = v53[0];
  v53[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v56;
  if (!v56)
  {
    v9 = 0;
    LODWORD(v10) = 0;
    v11 = 0;
    goto LABEL_12;
  }
  v8 = *((_DWORD *)v56 + 1);
  if (v8 < 6)
  {
    if ((_MergedGlobals_158 & 1) == 0)
    {
      qword_1ECE828E8 = (uint64_t)&off_1E3395448;
      _MergedGlobals_158 = 1;
    }
    *(_QWORD *)a2 = 28;
    *(_QWORD *)(a2 + 8) = &qword_1ECE828E8;
    *(_DWORD *)(a2 + 32) = 1;
    v56 = 0;
LABEL_9:
    if (*(_DWORD *)v7 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v7;
    goto LABEL_58;
  }
  if (v8 != 6)
    goto LABEL_116;
  ++*(_DWORD *)v56;
  v53[0] = 0;
  v53[1] = 0;
  v10 = *((unsigned int *)v7 + 7);
  if (!(_DWORD)v10)
  {
    v11 = 0;
    goto LABEL_67;
  }
  if (v10 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x19571DC6CLL);
  }
  v20 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v10));
  LODWORD(v53[1]) = v10;
  v53[0] = v20;
  v21 = *((unsigned int *)v7 + 7);
  if (!(_DWORD)v21)
  {
    v11 = v20;
LABEL_67:
    v9 = HIDWORD(v53[1]);
    *(_QWORD *)&v60 = v11;
    *((_QWORD *)&v60 + 1) = __PAIR64__(HIDWORD(v53[1]), v10);
    v44 = 1;
    goto LABEL_68;
  }
  v22 = (WTF::JSONImpl::Value **)*((_QWORD *)v7 + 2);
  v23 = 8 * v21;
  while (*((_DWORD *)*v22 + 1) == 4)
  {
    WTF::JSONImpl::Value::asString(*v22);
    LODWORD(v24) = HIDWORD(v53[1]);
    if (HIDWORD(v53[1]) == LODWORD(v53[1]))
    {
      v27 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v53, HIDWORD(v53[1]) + 1, (unint64_t)&v58);
      v24 = HIDWORD(v53[1]);
      v28 = v53[0];
      v29 = *v27;
      *v27 = 0;
      *((_QWORD *)v28 + v24) = v29;
    }
    else
    {
      v25 = v58;
      v58 = 0;
      *((_QWORD *)v53[0] + HIDWORD(v53[1])) = v25;
    }
    HIDWORD(v53[1]) = v24 + 1;
    v26 = v58;
    v58 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v5);
      else
        *(_DWORD *)v26 -= 2;
    }
    ++v22;
    v23 -= 8;
    if (!v23)
    {
      LODWORD(v10) = v53[1];
      v11 = v53[0];
      goto LABEL_67;
    }
  }
  if ((_MergedGlobals_158 & 1) == 0)
  {
    qword_1ECE828E8 = (uint64_t)&off_1E3395448;
    _MergedGlobals_158 = 1;
  }
  *(_QWORD *)a2 = 28;
  *(_QWORD *)(a2 + 8) = &qword_1ECE828E8;
  *(_DWORD *)(a2 + 32) = 1;
  v11 = v53[0];
  if (HIDWORD(v53[1]))
  {
    v51 = 8 * HIDWORD(v53[1]);
    do
    {
      v52 = *(WTF::StringImpl **)v11;
      *(_QWORD *)v11 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v5);
        else
          *(_DWORD *)v52 -= 2;
      }
      v11 = (WTF::StringImpl *)((char *)v11 + 8);
      v51 -= 8;
    }
    while (v51);
    v11 = v53[0];
    if (!v53[0])
      goto LABEL_65;
LABEL_111:
    v53[0] = 0;
    LODWORD(v53[1]) = 0;
    WTF::fastFree(v11, v5);
    v9 = 0;
    LODWORD(v10) = 0;
    v11 = 0;
    goto LABEL_66;
  }
  if (v53[0])
    goto LABEL_111;
LABEL_65:
  v9 = 0;
  LODWORD(v10) = 0;
LABEL_66:
  v44 = 0;
LABEL_68:
  if (*(_DWORD *)v7 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*(_DWORD *)v7;
  v7 = v56;
  v56 = 0;
  if (!v44)
  {
    if (!v7)
      goto LABEL_58;
    goto LABEL_9;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v7;
  }
LABEL_12:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v56 = v53[0];
  WTF::JSONImpl::ObjectBase::getValue(this, (const WTF::String *)&v56);
  v12 = v56;
  v56 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v58;
  if (!v58)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    goto LABEL_20;
  }
  v14 = *((_DWORD *)v58 + 1);
  if (v14 < 6)
  {
    if ((_MergedGlobals_158 & 1) == 0)
      goto LABEL_114;
    goto LABEL_18;
  }
  if (v14 != 6)
  {
    __break(0xC471u);
    JUMPOUT(0x19571DC44);
  }
  ++*(_DWORD *)v58;
  v57 = 0;
  v30 = *((unsigned int *)v13 + 7);
  if (!(_DWORD)v30)
  {
    v17 = 0;
    v16 = 0;
LABEL_77:
    v15 = 0;
LABEL_78:
    v18 = 0;
    *(_QWORD *)&v59 = v17;
    v45 = 1;
    *((_QWORD *)&v59 + 1) = __PAIR64__(v15, v16);
LABEL_79:
    if (*(_DWORD *)v13 == 1)
    {
      WTF::JSONImpl::Value::operator delete();
      if (!v45)
        goto LABEL_21;
    }
    else
    {
      --*(_DWORD *)v13;
      if (!v45)
        goto LABEL_21;
    }
LABEL_20:
    v18 = 0;
    goto LABEL_21;
  }
  if (v30 >= 0xAAAAAAB)
  {
LABEL_116:
    __break(0xC471u);
    JUMPOUT(0x19571DC24);
  }
  v31 = 24 * v30;
  v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(24 * v30));
  v16 = (v31 & 0xFFFFFFF8) / 0x18;
  LODWORD(v57) = v16;
  v56 = v17;
  v32 = *((unsigned int *)v13 + 7);
  if (!(_DWORD)v32)
    goto LABEL_77;
  v15 = 0;
  v33 = (WTF::JSONImpl::ObjectBase **)*((_QWORD *)v13 + 2);
  v34 = 8 * v32;
  while (1)
  {
    WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue::parse(*v33, (uint64_t)v53);
    if (v55)
      break;
    v35 = v15;
    if (v15 == (_DWORD)v57)
    {
      v36 = WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v56, v15 + 1, (unint64_t)v53);
      v15 = HIDWORD(v57) + 1;
      v17 = v56;
      v37 = (char *)v56 + 24 * HIDWORD(v57);
      v38 = *(_QWORD *)v36;
      *(_QWORD *)v36 = 0;
      *(_QWORD *)v37 = v38;
      v37[8] = *(_BYTE *)(v36 + 8);
      v39 = *(_QWORD *)(v36 + 16);
      *(_QWORD *)(v36 + 16) = 0;
      *((_QWORD *)v37 + 2) = v39;
      HIDWORD(v57) = v15;
      v40 = v55;
      if (v55 == -1)
        goto LABEL_55;
    }
    else
    {
      v40 = 0;
      ++v15;
      v41 = (char *)v17 + 24 * v35;
      v42 = v53[0];
      v53[0] = 0;
      *(_QWORD *)v41 = v42;
      v41[8] = (char)v53[1];
      v43 = v54;
      v54 = 0;
      *((_QWORD *)v41 + 2) = v43;
      HIDWORD(v57) = v15;
    }
    ((void (*)(char *, WTF::StringImpl **))off_1E33950E0[v40])(&v61, v53);
LABEL_55:
    ++v33;
    v34 -= 8;
    if (!v34)
    {
      v16 = v57;
      v17 = v56;
      goto LABEL_78;
    }
  }
  if (v55 == 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v53;
    *(_DWORD *)(a2 + 32) = 1;
    if (!v15)
      goto LABEL_97;
    v46 = 0;
    v47 = 24 * v15;
    do
    {
      v48 = (WTF::StringImpl **)((char *)v17 + v46);
      v49 = *(WTF::StringImpl **)((char *)v17 + v46 + 16);
      *(_QWORD *)((char *)v17 + v46 + 16) = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v5);
        else
          *(_DWORD *)v49 -= 2;
      }
      v50 = *v48;
      *v48 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v5);
        else
          *(_DWORD *)v50 -= 2;
      }
      v46 += 24;
    }
    while (v47 != v46);
    if (!v17)
    {
      v15 = 0;
      v16 = 0;
    }
    else
    {
LABEL_97:
      v56 = 0;
      LODWORD(v57) = 0;
      WTF::fastFree(v17, v5);
      v15 = 0;
      v16 = 0;
      v17 = 0;
    }
    v45 = 0;
    v18 = 1;
    goto LABEL_79;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_114:
  qword_1ECE828E8 = (uint64_t)&off_1E3395448;
  _MergedGlobals_158 = 1;
LABEL_18:
  v15 = 0;
  v16 = 0;
  v17 = 0;
  *(_QWORD *)a2 = 29;
  *(_QWORD *)(a2 + 8) = &qword_1ECE828E8;
  v18 = 1;
  *(_DWORD *)(a2 + 32) = 1;
LABEL_21:
  v19 = v58;
  v58 = 0;
  if (!v19)
  {
LABEL_24:
    if (v18)
      goto LABEL_58;
LABEL_25:
    *(_QWORD *)&v59 = 0;
    *(_QWORD *)a2 = v17;
    *((_QWORD *)&v59 + 1) = 0;
    *(_DWORD *)(a2 + 8) = v16;
    *(_DWORD *)(a2 + 12) = v15;
    *(_QWORD *)&v60 = 0;
    *(_QWORD *)(a2 + 16) = v11;
    *((_QWORD *)&v60 + 1) = 0;
    *(_DWORD *)(a2 + 24) = v10;
    *(_DWORD *)(a2 + 28) = v9;
    *(_DWORD *)(a2 + 32) = 0;
    goto LABEL_58;
  }
  if (*(_DWORD *)v19 != 1)
  {
    --*(_DWORD *)v19;
    goto LABEL_24;
  }
  WTF::JSONImpl::Value::operator delete();
  if (!v18)
    goto LABEL_25;
LABEL_58:
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::~QueryTransform((WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *)&v59, v5);
}

uint64_t WebCore::ContentExtensions::RedirectAction::URLTransformAction::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char *v11;

  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v4 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    v5 = *(unsigned __int16 *)(a1 + 32);
    if (!*(_BYTE *)(a1 + 34))
      v5 = 0;
    v6 = v5 | (*(unsigned __int8 *)(a1 + 34) << 16);
    v4 = 1;
  }
  else
  {
    v6 = 0;
  }
  *(_DWORD *)(a2 + 32) = v6;
  *(_WORD *)(a2 + 36) = v4;
  v7 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v7 == -1)
  {
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ContentExtensions::RedirectAction::URLTransformAction::isolatedCopy(v9);
  }
  else
  {
    v11 = &v10;
    ((void (*)(char **, uint64_t))off_1E3395090[v7])(&v11, a1 + 40);
    WTF::String::isolatedCopy();
    return WTF::String::isolatedCopy();
  }
}

{
  __int16 v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char *v11;

  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v4 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    v5 = *(unsigned __int16 *)(a1 + 32);
    if (!*(_BYTE *)(a1 + 34))
      v5 = 0;
    v6 = v5 | (*(unsigned __int8 *)(a1 + 34) << 16);
    v4 = 1;
  }
  else
  {
    v6 = 0;
  }
  *(_DWORD *)(a2 + 32) = v6;
  *(_WORD *)(a2 + 36) = v4;
  v7 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v7 == -1)
  {
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ContentExtensions::RedirectAction::URLTransformAction::serialize(v9);
  }
  else
  {
    v11 = &v10;
    ((void (*)(char **, uint64_t))off_1E33950A0[v7])(&v11, a1 + 40);
    WTF::String::isolatedCopy();
    return WTF::String::isolatedCopy();
  }
}

WTF *WebCore::ContentExtensions::RedirectAction::URLTransformAction::serialize(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  WTF *v19;
  WTF *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  WTF *v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  _BYTE *v41;
  char v42;
  size_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  _BYTE *v49;
  size_t v50;
  __int16 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  void *v58;
  unint64_t v59;
  int v60;
  size_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  _BYTE *v68;
  uint64_t v69;
  size_t v70;
  WTF *v71;
  WTF *v72;
  WTF *v73;
  WTF *v74;
  WTF *v75;
  WTF *v76;
  WTF *result;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  void *v82;
  BOOL v83;
  unint64_t v84;
  size_t v85;
  _BOOL4 v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _QWORD v94[3];
  uint64_t v95;
  WTF *v96;
  WTF *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  WTF *v102;
  _QWORD *v103;

  v90 = *(_QWORD *)a1;
  v91 = *(_QWORD *)(a1 + 8);
  v92 = *(_QWORD *)(a1 + 16);
  v93 = *(char **)(a1 + 80);
  v87 = *(unsigned __int8 *)(a1 + 36);
  v88 = *(_QWORD *)(a1 + 88);
  v89 = *(_QWORD *)(a1 + 24);
  v4 = (_QWORD *)(a1 + 40);
  v5 = *(_DWORD *)(a1 + 72);
  if (v5)
  {
    v102 = 0;
    v6 = 1;
  }
  else
  {
    WTF::String::utf8();
    v6 = *v4 != 0;
  }
  WTF::String::utf8();
  WTF::String::utf8();
  WTF::String::utf8();
  WTF::String::utf8();
  WTF::String::utf8();
  WTF::String::utf8();
  v7 = v90;
  if (v90)
  {
    v8 = (uint64_t)v101;
    v9 = v87;
    v10 = v88;
    if (v101)
      v8 = v101[1];
    v11 = v89;
    v7 = v8 + 4;
  }
  else
  {
    v9 = v87;
    v10 = v88;
    v11 = v89;
  }
  v12 = v91;
  if (v91)
  {
    v13 = (uint64_t)v100;
    if (v100)
      v13 = v100[1];
    v12 = v13 + 4;
  }
  v14 = v92;
  if (v92)
  {
    v15 = (uint64_t)v99;
    if (v99)
      v15 = v99[1];
    v14 = v15 + 4;
  }
  if (v11)
  {
    v16 = (uint64_t)v98;
    if (v98)
      v16 = v98[1];
    v17 = v16 + 4;
  }
  else
  {
    v17 = 0;
  }
  v18 = v93;
  if (v93)
  {
    v19 = v97;
    if (v97)
      v19 = (WTF *)*((_QWORD *)v97 + 1);
    v18 = (char *)v19 + 4;
  }
  if (v10)
  {
    v20 = v96;
    if (v96)
      v20 = (WTF *)*((_QWORD *)v96 + 1);
    v21 = (char *)v20 + 4;
  }
  else
  {
    v21 = 0;
  }
  if (v9)
  {
    if (!*(_BYTE *)(a1 + 36))
      goto LABEL_165;
    v22 = 3;
    if (!*(_BYTE *)(a1 + 34))
      v22 = 1;
  }
  else
  {
    v22 = 0;
  }
  v23 = (uint64_t)&v18[*(unsigned int *)(a2 + 12) + 5 + v7 + v12 + v14 + v17 + (_QWORD)v21 + v22];
  v24 = !v6;
  if (v5)
    v24 = 1;
  if ((v24 & 1) != 0)
  {
    v26 = v6;
  }
  else
  {
    v25 = v102;
    if (v102)
      v25 = (WTF *)*((_QWORD *)v102 + 1);
    v26 = (uint64_t)v25 + 5;
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v23 + v26));
  v28 = *(unsigned int *)(a2 + 8);
  v29 = *(unsigned int *)(a2 + 12);
  v30 = v29 + 4;
  if (v29 + 4 > v28)
  {
    v78 = v28 + (v28 >> 2);
    if (v78 >= 0x10)
      v79 = v78 + 1;
    else
      v79 = 16;
    if (v79 <= v30)
      v80 = v29 + 4;
    else
      v80 = v79;
    if (HIDWORD(v80))
    {
      __break(0xC471u);
LABEL_177:
      JUMPOUT(0x19571E608);
    }
    v81 = *(void **)a2;
    v82 = (void *)WTF::fastMalloc((WTF *)v80);
    *(_DWORD *)(a2 + 8) = v80;
    *(_QWORD *)a2 = v82;
    memcpy(v82, v81, v29);
    v10 = v88;
    if (v81)
    {
      if (*(void **)a2 == v81)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v81, v27);
    }
  }
  v85 = v29;
  v86 = v6;
  v31 = *(unsigned int *)(a2 + 12);
  if (v30 < v31)
  {
LABEL_170:
    __break(0xC471u);
    JUMPOUT(0x19571E654);
  }
  v32 = v10 != 0;
  v33 = v93 != 0;
  v34 = v9 != 0;
  *(_DWORD *)(*(_QWORD *)a2 + v31) = 0;
  *(_DWORD *)(a2 + 12) = v29 + 4;
  v35 = (v29 + 4);
  v84 = v29 + 4;
  if (*(_DWORD *)(a2 + 8) == (_DWORD)v29 + 4)
  {
    v83 = v10 != 0;
    v36 = v35 + (v35 >> 2);
    if (v36 >= 0x10)
      v37 = v36 + 1;
    else
      v37 = 16;
    if (v37 <= v35 + 1)
      v38 = v35 + 1;
    else
      v38 = v37;
    if (HIDWORD(v38))
    {
      __break(0xC471u);
      JUMPOUT(0x19571E65CLL);
    }
    v39 = *(void **)a2;
    v40 = (void *)WTF::fastMalloc((WTF *)v38);
    *(_DWORD *)(a2 + 8) = v38;
    *(_QWORD *)a2 = v40;
    memcpy(v40, v39, v35);
    v9 = v87;
    if (v39)
    {
      if (*(void **)a2 == v39)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v39, v27);
    }
    v41 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
    v10 = v88;
    v33 = v93 != 0;
    v32 = v83;
  }
  else
  {
    v41 = (_BYTE *)(*(_QWORD *)a2 + v35);
  }
  *v41 = ((v90 != 0) << 7) | ((v91 != 0) << 6) | (32 * (v92 != 0)) | (16 * (v11 != 0)) | (8 * v34) | (4 * v33) | (2 * v32) | v86;
  ++*(_DWORD *)(a2 + 12);
  v95 = a2;
  if (v90)
    WebCore::ContentExtensions::RedirectAction::URLTransformAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)const::$_2::operator()(&v95, (uint64_t *)&v101);
  if (v91)
    WebCore::ContentExtensions::RedirectAction::URLTransformAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)const::$_2::operator()(&v95, (uint64_t *)&v100);
  if (v92)
    WebCore::ContentExtensions::RedirectAction::URLTransformAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)const::$_2::operator()(&v95, (uint64_t *)&v99);
  if (v89)
    WebCore::ContentExtensions::RedirectAction::URLTransformAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)const::$_2::operator()(&v95, (uint64_t *)&v98);
  if (v93)
    WebCore::ContentExtensions::RedirectAction::URLTransformAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)const::$_2::operator()(&v95, (uint64_t *)&v97);
  if (v10)
    WebCore::ContentExtensions::RedirectAction::URLTransformAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)const::$_2::operator()(&v95, (uint64_t *)&v96);
  if (!v9)
  {
    LODWORD(v50) = *(_DWORD *)(a2 + 12);
    goto LABEL_105;
  }
  if (!*(_BYTE *)(a1 + 36))
    goto LABEL_165;
  v42 = *(_BYTE *)(a1 + 34);
  v43 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v43 == *(_DWORD *)(a2 + 8))
  {
    v44 = v43 + (v43 >> 2);
    if (v44 >= 0x10)
      v45 = v44 + 1;
    else
      v45 = 16;
    if (v45 <= v43 + 1)
      v46 = v43 + 1;
    else
      v46 = v45;
    if (HIDWORD(v46))
    {
      __break(0xC471u);
      JUMPOUT(0x19571E66CLL);
    }
    v47 = *(void **)a2;
    v48 = (void *)WTF::fastMalloc((WTF *)v46);
    *(_DWORD *)(a2 + 8) = v46;
    *(_QWORD *)a2 = v48;
    memcpy(v48, v47, v43);
    if (v47)
    {
      if (*(void **)a2 == v47)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v47, v27);
    }
    v49 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
  }
  else
  {
    v49 = (_BYTE *)(*(_QWORD *)a2 + v43);
  }
  *v49 = v42;
  v50 = (*(_DWORD *)(a2 + 12) + 1);
  *(_DWORD *)(a2 + 12) = v50;
  if (!*(_BYTE *)(a1 + 36))
  {
LABEL_165:
    __break(1u);
    goto LABEL_166;
  }
  if (*(_BYTE *)(a1 + 34))
  {
    v51 = *(_WORD *)(a1 + 32);
    v52 = v50 + 2;
    v53 = *(unsigned int *)(a2 + 8);
    if (v50 + 2 > v53)
    {
      v54 = v53 + (v53 >> 2);
      if (v54 >= 0x10)
        v55 = v54 + 1;
      else
        v55 = 16;
      if (v55 <= v52)
        v56 = v50 + 2;
      else
        v56 = v55;
      if (HIDWORD(v56))
      {
        __break(0xC471u);
        JUMPOUT(0x19571E67CLL);
      }
      v57 = *(void **)a2;
      v58 = (void *)WTF::fastMalloc((WTF *)v56);
      *(_DWORD *)(a2 + 8) = v56;
      *(_QWORD *)a2 = v58;
      memcpy(v58, v57, v50);
      if (v57)
      {
        if (*(void **)a2 == v57)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        WTF::fastFree((WTF *)v57, v27);
      }
    }
    v59 = *(unsigned int *)(a2 + 12);
    if (v52 < v59)
    {
      __break(0xC471u);
      JUMPOUT(0x19571E664);
    }
    *(_WORD *)(*(_QWORD *)a2 + v59) = v51;
    *(_DWORD *)(a2 + 12) = v52;
    LODWORD(v50) = v50 + 2;
  }
LABEL_105:
  if (!v86)
    goto LABEL_122;
  v60 = *(_DWORD *)(a1 + 72);
  v61 = v50;
  if ((_DWORD)v50 == *(_DWORD *)(a2 + 8))
  {
    v62 = v50 + ((unint64_t)v50 >> 2);
    if (v62 >= 0x10)
      v63 = v62 + 1;
    else
      v63 = 16;
    if (v63 <= (unint64_t)v50 + 1)
      v64 = v50 + 1;
    else
      v64 = v63;
    if (HIDWORD(v64))
    {
      __break(0xC471u);
      JUMPOUT(0x19571E674);
    }
    v65 = *(void **)a2;
    v66 = (void *)WTF::fastMalloc((WTF *)v64);
    *(_DWORD *)(a2 + 8) = v64;
    *(_QWORD *)a2 = v66;
    memcpy(v66, v65, v61);
    if (v65)
    {
      if (*(void **)a2 == v65)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v65, v67);
    }
    v68 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
  }
  else
  {
    v68 = (_BYTE *)(*(_QWORD *)a2 + v50);
  }
  *v68 = v60;
  ++*(_DWORD *)(a2 + 12);
  v94[0] = a2;
  v94[1] = &v102;
  v94[2] = a2;
  v69 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v69 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_170;
  }
  v103 = v94;
  ((void (*)(_QWORD **, _QWORD *))off_1E33950B0[v69])(&v103, v4);
  LODWORD(v50) = *(_DWORD *)(a2 + 12);
LABEL_122:
  v70 = v50 - v85;
  if (HIDWORD(v70))
  {
LABEL_166:
    __break(0xC471u);
    goto LABEL_177;
  }
  if (v84 > v50)
  {
    __break(0xC471u);
    JUMPOUT(0x19571E628);
  }
  if (*(_DWORD *)(*(_QWORD *)a2 + v85))
  {
    __break(0xC471u);
    JUMPOUT(0x19571E648);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v85) = v70;
  v71 = v96;
  v96 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
      WTF::fastFree(v71, v27);
    else
      --*(_DWORD *)v71;
  }
  v72 = v97;
  v97 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::fastFree(v72, v27);
    else
      --*(_DWORD *)v72;
  }
  v73 = (WTF *)v98;
  v98 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 1)
      WTF::fastFree(v73, v27);
    else
      --*(_DWORD *)v73;
  }
  v74 = (WTF *)v99;
  v99 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 1)
      WTF::fastFree(v74, v27);
    else
      --*(_DWORD *)v74;
  }
  v75 = (WTF *)v100;
  v100 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 1)
      WTF::fastFree(v75, v27);
    else
      --*(_DWORD *)v75;
  }
  v76 = (WTF *)v101;
  v101 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 1)
      WTF::fastFree(v76, v27);
    else
      --*(_DWORD *)v76;
  }
  result = v102;
  v102 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v27);
    else
      --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WebCore::ContentExtensions::RedirectAction::URLTransformAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)const::$_2::operator()(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;

  v3 = result;
  v4 = *result;
  if (*a2)
  {
    v5 = *(_QWORD *)(*a2 + 8);
    if (HIDWORD(v5))
      goto LABEL_38;
  }
  else
  {
    LODWORD(v5) = 0;
  }
  v6 = *(unsigned int *)(v4 + 8);
  v7 = *(unsigned int *)(v4 + 12);
  v8 = v7 + 4;
  if (v7 + 4 > v6)
  {
    v17 = v6 + (v6 >> 2);
    if (v17 >= 0x10)
      v18 = v17 + 1;
    else
      v18 = 16;
    if (v18 <= v8)
      v19 = v7 + 4;
    else
      v19 = v18;
    if (HIDWORD(v19))
    {
      __break(0xC471u);
      JUMPOUT(0x19571E848);
    }
    v20 = *(void **)v4;
    v21 = (void *)WTF::fastMalloc((WTF *)v19);
    *(_DWORD *)(v4 + 8) = v19;
    *(_QWORD *)v4 = v21;
    result = memcpy(v21, v20, v7);
    if (v20)
    {
      if (*(void **)v4 == v20)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      result = (_QWORD *)WTF::fastFree((WTF *)v20, v22);
    }
  }
  v9 = *(unsigned int *)(v4 + 12);
  if (v8 < v9)
  {
    __break(0xC471u);
    JUMPOUT(0x19571E838);
  }
  *(_DWORD *)(*(_QWORD *)v4 + v9) = v5;
  *(_DWORD *)(v4 + 12) = v8;
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = *v3;
      v13 = *(unsigned int *)(*v3 + 8);
      v14 = *(unsigned int *)(*v3 + 12);
      v15 = v11 + v14;
      if (v11 + v14 > v13)
      {
        v23 = v13 + (v13 >> 2);
        if (v23 >= 0x10)
          v24 = v23 + 1;
        else
          v24 = 16;
        if (v24 <= v15)
          v25 = v11 + v14;
        else
          v25 = v24;
        if (HIDWORD(v25))
        {
LABEL_38:
          __break(0xC471u);
          JUMPOUT(0x19571E6DCLL);
        }
        v26 = *(void **)v12;
        v27 = (void *)WTF::fastMalloc((WTF *)v25);
        *(_DWORD *)(v12 + 8) = v25;
        *(_QWORD *)v12 = v27;
        memcpy(v27, v26, v14);
        if (v26)
        {
          if (*(void **)v12 == v26)
          {
            *(_QWORD *)v12 = 0;
            *(_DWORD *)(v12 + 8) = 0;
          }
          WTF::fastFree((WTF *)v26, v28);
        }
      }
      v16 = *(unsigned int *)(v12 + 12);
      if (v15 < v16)
      {
        __break(0xC471u);
        JUMPOUT(0x19571E840);
      }
      result = memcpy((void *)(*(_QWORD *)v12 + v16), (const void *)(v10 + 16), v11);
      *(_DWORD *)(v12 + 12) = v15;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::ContentExtensions::RedirectAction::URLTransformAction::deserialize@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v3;
  int v7;
  unint64_t v8;
  char v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *result;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54[4];
  unsigned int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  char v62;

  if (a2 <= 4)
    goto LABEL_99;
  v7 = *(char *)(a1 + 4);
  if (v7 < 0)
  {
    if (a2 <= 8)
    {
      __break(0xC471u);
      JUMPOUT(0x19571EEECLL);
    }
    v8 = *(unsigned int *)(a1 + 5) + 9;
    if (a2 < v8)
    {
      __break(0xC471u);
      JUMPOUT(0x19571EF0CLL);
    }
    WTF::String::fromUTF8();
  }
  else
  {
    v61 = 0;
    v8 = 5;
  }
  if ((v7 & 0x40) != 0)
  {
    v12 = v8 + 4;
    v13 = a2 - (v8 + 4);
    if (a2 < v8 + 4)
    {
      __break(0xC471u);
      JUMPOUT(0x19571ED8CLL);
    }
    v14 = *(unsigned int *)(a1 + v8);
    v8 = v12 + v14;
    if (a2 < v12 + v14)
    {
      __break(0xC471u);
      goto LABEL_84;
    }
    if (v13 < v14)
    {
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    WTF::String::fromUTF8();
    if ((v7 & 0x20) == 0)
    {
LABEL_9:
      v59 = 0;
      if ((v7 & 0x10) == 0)
        goto LABEL_10;
      goto LABEL_22;
    }
  }
  else
  {
    v60 = 0;
    if ((v7 & 0x20) == 0)
      goto LABEL_9;
  }
  v15 = v8 + 4;
  v16 = a2 - (v8 + 4);
  if (a2 < v8 + 4)
  {
LABEL_85:
    __break(0xC471u);
    JUMPOUT(0x19571EDCCLL);
  }
  v17 = *(unsigned int *)(a1 + v8);
  v8 = v15 + v17;
  if (a2 < v15 + v17)
  {
    __break(0xC471u);
    JUMPOUT(0x19571EDECLL);
  }
  if (v16 < v17)
    goto LABEL_84;
  WTF::String::fromUTF8();
  if ((v7 & 0x10) == 0)
  {
LABEL_10:
    v58 = 0;
    if ((v7 & 4) == 0)
      goto LABEL_11;
LABEL_26:
    v21 = v8 + 4;
    v22 = a2 - (v8 + 4);
    if (a2 < v8 + 4)
    {
      __break(0xC471u);
      JUMPOUT(0x19571EE4CLL);
    }
    v23 = *(unsigned int *)(a1 + v8);
    v8 = v21 + v23;
    if (a2 < v21 + v23)
    {
      __break(0xC471u);
      JUMPOUT(0x19571EE6CLL);
    }
    if (v22 < v23)
      goto LABEL_84;
    WTF::String::fromUTF8();
    if ((v7 & 2) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_22:
  v18 = v8 + 4;
  v19 = a2 - (v8 + 4);
  if (a2 < v8 + 4)
  {
    __break(0xC471u);
    JUMPOUT(0x19571EE0CLL);
  }
  v20 = *(unsigned int *)(a1 + v8);
  v8 = v18 + v20;
  if (a2 < v18 + v20)
  {
    __break(0xC471u);
    JUMPOUT(0x19571EE2CLL);
  }
  if (v19 < v20)
    goto LABEL_84;
  WTF::String::fromUTF8();
  if ((v7 & 4) != 0)
    goto LABEL_26;
LABEL_11:
  v57 = 0;
  if ((v7 & 2) == 0)
  {
LABEL_12:
    v56 = 0;
    if ((v7 & 8) == 0)
    {
LABEL_13:
      v9 = 0;
      v10 = 0;
      v11 = 0;
      goto LABEL_39;
    }
    goto LABEL_34;
  }
LABEL_30:
  v24 = v8 + 4;
  v25 = a2 - (v8 + 4);
  if (a2 < v8 + 4)
  {
    __break(0xC471u);
    JUMPOUT(0x19571EE8CLL);
  }
  v26 = *(unsigned int *)(a1 + v8);
  v8 = v24 + v26;
  if (a2 < v24 + v26)
  {
    __break(0xC471u);
    JUMPOUT(0x19571EEACLL);
  }
  if (v25 < v26)
    goto LABEL_84;
  WTF::String::fromUTF8();
  if ((v7 & 8) == 0)
    goto LABEL_13;
LABEL_34:
  if (a2 <= v8)
    goto LABEL_84;
  if (*(_BYTE *)(a1 + v8))
  {
    if (a2 <= v8 + 2)
    {
      __break(0xC471u);
      JUMPOUT(0x19571EF2CLL);
    }
    v10 = *(unsigned __int8 *)(a1 + v8 + 1);
    v3 = *(_BYTE *)(a1 + v8 + 2);
    v8 += 3;
    v11 = 0x10000;
    v9 = 1;
  }
  else
  {
    v10 = 0;
    v3 = 0;
    v11 = 0;
    v9 = 1;
    ++v8;
  }
LABEL_39:
  v54[0] = 0;
  v55 = 0;
  if ((v7 & 1) == 0)
    goto LABEL_53;
  if (a2 <= v8)
  {
    __break(0xC471u);
    JUMPOUT(0x19571EECCLL);
  }
  v27 = v8 + 1;
  if (*(_BYTE *)(a1 + v8) != 1)
  {
    if (!*(_BYTE *)(a1 + v8))
    {
      if (a2 < v8 + 5)
      {
        __break(0xC471u);
        JUMPOUT(0x19571EF4CLL);
      }
      v28 = *(unsigned int *)(a1 + v27);
      if (a2 < v8 + 5 + v28)
      {
        __break(0xC471u);
        JUMPOUT(0x19571EF6CLL);
      }
      if (a2 - (v8 + 5) >= v28)
      {
        WTF::String::fromUTF8();
        v29 = v50;
        v50 = 0;
        v54[0] = v29;
        goto LABEL_53;
      }
      goto LABEL_84;
    }
LABEL_99:
    __break(0xC471u);
    JUMPOUT(0x19571ED6CLL);
  }
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::deserialize((unsigned int *)(a1 + v27), a2 - v27, (uint64_t)&v50);
  if (v55 == -1)
    goto LABEL_51;
  if (v55 != 1)
  {
    ((void (*)(char *, WTF::StringImpl **))*(&off_1E33950C0 + v55))(&v62, v54);
LABEL_51:
    v31 = v50;
    v50 = 0;
    v54[0] = v31;
    v32 = v51;
    v51 = 0;
    v54[1] = v32;
    v33 = v52;
    v52 = 0;
    v54[2] = v33;
    v34 = v53;
    v53 = 0;
    v54[3] = v34;
    v55 = 1;
    goto LABEL_52;
  }
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::operator=((unsigned int *)v54, (WTF::StringImpl *)&v50);
LABEL_52:
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::~QueryTransform((WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *)&v50, v30);
LABEL_53:
  v35 = v61;
  v61 = 0;
  v36 = v60;
  *(_QWORD *)a3 = v35;
  *(_QWORD *)(a3 + 8) = v36;
  v38 = v58;
  v37 = v59;
  v59 = 0;
  v60 = 0;
  v58 = 0;
  *(_QWORD *)(a3 + 16) = v37;
  *(_QWORD *)(a3 + 24) = v38;
  *(_DWORD *)(a3 + 32) = v11 | (v3 << 8) | v10;
  *(_BYTE *)(a3 + 36) = v9;
  *(_BYTE *)(a3 + 40) = 0;
  v39 = (WTF::StringImpl *)(a3 + 40);
  v40 = -1;
  *(_DWORD *)(a3 + 72) = -1;
  v41 = v55;
  if (v55 != -1)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl *, WTF::StringImpl **))off_1E33950D0[v55])(&v50, v39, v54);
    *(_DWORD *)(a3 + 72) = v41;
    v40 = v55;
  }
  v43 = v56;
  v42 = v57;
  v56 = 0;
  v57 = 0;
  *(_QWORD *)(a3 + 80) = v42;
  *(_QWORD *)(a3 + 88) = v43;
  if (v40 != -1)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))*(&off_1E33950C0 + v40))(&v50, v54);
    v44 = v56;
    v56 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v39);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
  v45 = v57;
  v57 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v39);
    else
      *(_DWORD *)v45 -= 2;
  }
  v46 = v58;
  v58 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v39);
    else
      *(_DWORD *)v46 -= 2;
  }
  v47 = v59;
  v59 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v39);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = v60;
  v60 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v39);
    else
      *(_DWORD *)v48 -= 2;
  }
  result = v61;
  v61 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v39);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::deserialize@<X0>(unsigned int *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;

  if (a2 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19571F284);
  }
  if (a2 <= 7)
  {
    __break(0xC471u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v4 = result;
  v5 = *result;
  v6 = result[1];
  v40 = 0;
  v41 = 0;
  if (v6 >= 5)
  {
    v7 = 0;
    v8 = 0;
    v9 = 4;
    while (1)
    {
      v10 = v9 + 4;
      v11 = a2 - (v9 + 4);
      if (a2 < v9 + 4)
        goto LABEL_42;
      if (v11 <= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19571F224);
      }
      v12 = *(unsigned int *)((char *)v4 + v10);
      WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue::deserialize((unsigned int *)((char *)v4 + v10), v11, (uint64_t)&v37);
      if (v8 == (_DWORD)v41)
      {
        v14 = WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v40, v8 + 1, (unint64_t)&v37);
        v8 = HIDWORD(v41);
        v7 = v40;
        v15 = v40 + 24 * HIDWORD(v41);
        v16 = *(_QWORD *)v14;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)v15 = v16;
        *(_BYTE *)(v15 + 8) = *(_BYTE *)(v14 + 8);
        v17 = (WTF::StringImpl **)(v15 + 16);
        v18 = (WTF::StringImpl **)(v14 + 16);
      }
      else
      {
        v19 = v7 + 24 * v8;
        v20 = v37;
        v37 = 0;
        *(_QWORD *)v19 = v20;
        *(_BYTE *)(v19 + 8) = v38;
        v17 = (WTF::StringImpl **)(v19 + 16);
        v18 = &v39;
      }
      v21 = *v18;
      *v18 = 0;
      *v17 = v21;
      HIDWORD(v41) = ++v8;
      v22 = v39;
      v39 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v13);
        else
          *(_DWORD *)v22 -= 2;
      }
      result = (unsigned int *)v37;
      v37 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
        else
          *result -= 2;
      }
      v9 += v12;
      if (v9 >= v6)
        goto LABEL_21;
    }
  }
  v8 = 0;
  v9 = 4;
LABEL_21:
  if (v9 != v6)
  {
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x19571F2C4);
  }
  v37 = 0;
  v38 = 0;
  v23 = v6 + 4;
  if (v6 + 4 >= v5)
  {
    v33 = 0;
    v34 = 0;
  }
  else
  {
    do
    {
      v24 = v23 + 4;
      v25 = a2 - (v23 + 4);
      if (a2 < v23 + 4)
      {
        __break(0xC471u);
        JUMPOUT(0x19571F244);
      }
      v26 = *(unsigned int *)((char *)v4 + v23);
      v23 = v24 + v26;
      if (a2 < v24 + v26)
      {
        __break(0xC471u);
        JUMPOUT(0x19571F264);
      }
      if (v25 < v26)
        goto LABEL_42;
      WTF::String::fromUTF8();
      LODWORD(v28) = HIDWORD(v38);
      if (HIDWORD(v38) == (_DWORD)v38)
      {
        v30 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v36);
        v28 = HIDWORD(v38);
        v31 = v37;
        v32 = *v30;
        *v30 = 0;
        *((_QWORD *)v31 + v28) = v32;
      }
      else
      {
        v29 = v36;
        v36 = 0;
        *((_QWORD *)v37 + HIDWORD(v38)) = v29;
      }
      HIDWORD(v38) = v28 + 1;
      result = (unsigned int *)v36;
      v36 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v27);
        else
          *result -= 2;
      }
    }
    while (v23 < v5);
    v33 = v37;
    v34 = v38;
  }
  *(_QWORD *)a3 = v40;
  *(_DWORD *)(a3 + 8) = v41;
  *(_DWORD *)(a3 + 12) = v8;
  *(_QWORD *)(a3 + 16) = v33;
  *(_QWORD *)(a3 + 24) = v34;
  return result;
}

uint64_t WebCore::ContentExtensions::RedirectAction::URLTransformAction::serializedLength(unsigned int *a1, unint64_t a2)
{
  uint64_t result;

  if (a2 > 3)
    return *a1;
  result = 57;
  __break(0xC471u);
  return result;
}

WTF::JSONImpl::ObjectBase *WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue::parse@<X0>(WTF::JSONImpl::ObjectBase *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  WTF::JSONImpl::ObjectBase *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned __int16 Boolean;
  BOOL v11;
  char v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v4 = *((_DWORD *)this + 1);
  if (v4 < 5)
  {
LABEL_2:
    if ((_MergedGlobals_158 & 1) == 0)
    {
      qword_1ECE828E8 = (uint64_t)&off_1E3395448;
      _MergedGlobals_158 = 1;
    }
    *(_QWORD *)a2 = 30;
    *(_QWORD *)(a2 + 8) = &qword_1ECE828E8;
    *(_DWORD *)(a2 + 24) = 1;
    return this;
  }
  if (v4 != 5)
  {
    if (v4 != 6)
    {
      __break(0xC471u);
      JUMPOUT(0x19571F37CLL);
    }
    goto LABEL_2;
  }
  v5 = this;
  ++*(_DWORD *)this;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString(v5, (const WTF::String *)&v16);
  this = v16;
  v16 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (WTF::JSONImpl::ObjectBase *)WTF::StringImpl::destroy(this, v6);
    else
      *(_DWORD *)this -= 2;
  }
  if (v17)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::ObjectBase::getString(v5, (const WTF::String *)&v15);
    v8 = v15;
    v15 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (v16)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Boolean = WTF::JSONImpl::ObjectBase::getBoolean(v5, (const WTF::String *)&v15);
      this = v15;
      v15 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WTF::JSONImpl::ObjectBase *)WTF::StringImpl::destroy(this, v9);
        else
          *(_DWORD *)this -= 2;
      }
      if ((_BYTE)Boolean)
        v11 = Boolean > 0xFFu;
      else
        v11 = 0;
      v12 = v11;
      v14 = v16;
      v13 = v17;
      v17 = 0;
      *(_QWORD *)a2 = v13;
      *(_BYTE *)(a2 + 8) = v12;
      *(_QWORD *)(a2 + 16) = v14;
      *(_DWORD *)(a2 + 24) = 0;
    }
    else
    {
      if ((_MergedGlobals_158 & 1) == 0)
      {
        qword_1ECE828E8 = (uint64_t)&off_1E3395448;
        _MergedGlobals_158 = 1;
      }
      *(_QWORD *)a2 = 32;
      *(_QWORD *)(a2 + 8) = &qword_1ECE828E8;
      this = v17;
      *(_DWORD *)(a2 + 24) = 1;
      v17 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WTF::JSONImpl::ObjectBase *)WTF::StringImpl::destroy(this, v7);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  else
  {
    if ((_MergedGlobals_158 & 1) == 0)
    {
      qword_1ECE828E8 = (uint64_t)&off_1E3395448;
      _MergedGlobals_158 = 1;
    }
    *(_QWORD *)a2 = 31;
    *(_QWORD *)(a2 + 8) = &qword_1ECE828E8;
    *(_DWORD *)(a2 + 24) = 1;
  }
  if (*(_DWORD *)v5 == 1)
    return (WTF::JSONImpl::ObjectBase *)WTF::JSONImpl::Value::operator delete();
  --*(_DWORD *)v5;
  return this;
}

uint64_t WebCore::ContentExtensions::RedirectAction::URLTransformAction::applyToURL(WebCore::ContentExtensions::RedirectAction::URLTransformAction *this, WTF::URL *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *v10;
  WTF::URL *v11;
  _QWORD v12[2];
  _QWORD *v13;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = *(unsigned int *)(v4 + 4);
    if (!(_DWORD)v5)
    {
      WTF::URL::removeFragmentIdentifier(a2);
      goto LABEL_10;
    }
    if ((_DWORD)v5 == 1)
      goto LABEL_9;
    v6 = (v5 - 1);
    v7 = v5 - 1;
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      if (v7 >= v6)
        goto LABEL_9;
    }
    else if (v7 >= v6)
    {
LABEL_9:
      WTF::URL::setFragmentIdentifier();
      goto LABEL_10;
    }
    __break(1u);
LABEL_26:
    v10 = (WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::applyToURL(v10, v11);
  }
LABEL_10:
  if (*((_QWORD *)this + 1))
    WTF::URL::setHost();
  if (*((_QWORD *)this + 2))
    WTF::URL::setPassword();
  if (*((_QWORD *)this + 3))
    WTF::URL::setPath();
  if (*((_BYTE *)this + 36))
    WTF::URL::setPort();
  v12[0] = a2;
  v12[1] = a2;
  v8 = *((unsigned int *)this + 18);
  if ((_DWORD)v8 == -1)
    goto LABEL_26;
  v13 = v12;
  result = ((uint64_t (*)(_QWORD **, char *))*(&off_1E33950F0 + v8))(&v13, (char *)this + 40);
  if (*((_QWORD *)this + 10))
    result = WTF::URL::setProtocol();
  if (*((_QWORD *)this + 11))
    return WTF::URL::setUser();
  return result;
}

uint64_t WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::applyToURL(uint64_t this, WTF::URL *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  const WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int i;
  int v43;
  WTF *v44;
  uint64_t v45;
  BOOL v46;
  WTF *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  BOOL v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl **v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  char v73;
  uint64_t *v74;
  unsigned int v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  char v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  unsigned int v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  WTF::StringImpl *v92;

  if (*((_DWORD *)a2 + 9) <= *((_DWORD *)a2 + 8))
    return this;
  v4 = this;
  v89 = 0;
  v5 = *(unsigned int *)(this + 28);
  if ((_DWORD)v5)
  {
    v6 = *(WTF::StringImpl ***)(this + 16);
    v7 = 8 * v5;
    do
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&v89, v6++, a3, (uint64_t)&v85);
      v7 -= 8;
    }
    while (v7);
  }
  v83 = 0;
  v84 = 0;
  v82 = 0;
  v8 = *(unsigned int *)(v4 + 12);
  if ((_DWORD)v8)
  {
    v9 = 24 * v8;
    v10 = (const WTF::StringImpl *)(*(_QWORD *)v4 + 16);
    do
    {
      v11 = (WTF::StringImpl **)((char *)v10 - 16);
      if (*((_BYTE *)v10 - 8))
      {
        WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String const&>(&v82, v11, v10, (uint64_t)&v85);
      }
      else
      {
        v12 = *v11;
        if (*v11)
          *(_DWORD *)v12 += 2;
        v85 = v12;
        v13 = *(WTF::StringImpl **)v10;
        if (*(_QWORD *)v10)
          *(_DWORD *)v13 += 2;
        v86 = v13;
        v14 = HIDWORD(v84);
        if (HIDWORD(v84) == (_DWORD)v84)
        {
          v15 = (_QWORD *)WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v83, HIDWORD(v84) + 1, (unint64_t)&v85);
          v14 = HIDWORD(v84);
          v16 = (_QWORD *)((char *)v83 + 16 * HIDWORD(v84));
          v17 = *v15;
          *v15 = 0;
          v18 = (WTF::StringImpl **)(v15 + 1);
          *v16 = v17;
          v19 = (WTF::StringImpl **)(v16 + 1);
        }
        else
        {
          v20 = (WTF::StringImpl **)((char *)v83 + 16 * HIDWORD(v84));
          v85 = 0;
          *v20 = v12;
          v19 = v20 + 1;
          v18 = &v86;
        }
        v21 = *v18;
        *v18 = 0;
        *v19 = v21;
        HIDWORD(v84) = v14 + 1;
        v22 = v86;
        v86 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = v85;
        v85 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
      v10 = (const WTF::StringImpl *)((char *)v10 + 24);
      v9 -= 24;
    }
    while (v9);
  }
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 1;
  v78 = WTF::URL::query(a2);
  v79 = v24;
  v80 = 38;
  v81 = 0;
  v74 = &v78;
  v75 = 0;
  v77 = (_DWORD)v24 == 0;
  this = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v74);
  v26 = v79;
  v27 = v75;
  if (v75 != (_DWORD)v79 || !v77)
  {
    v28 = 0;
    while (1)
    {
      v29 = *((unsigned int *)v74 + 2);
      if (v29 <= v27)
      {
        v31 = 0x100000000;
      }
      else
      {
        v30 = v76;
        if (v29 - v27 > v76)
          goto LABEL_31;
        if (v27)
        {
          v30 = v29 - v27;
LABEL_31:
          v31 = v30;
          v32 = v29 - v27;
          if (*((_BYTE *)v74 + 12))
          {
            if (v32 < v30)
              goto LABEL_146;
            v31 = v30 | 0x100000000;
          }
          else if (v32 < v30)
          {
LABEL_146:
            __break(1u);
            return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)this, v25);
          }
          goto LABEL_38;
        }
        v31 = v74[1];
      }
LABEL_38:
      WTF::URLParser::parseQueryNameAndValue();
      if (v73)
      {
        if (!v71)
          goto LABEL_40;
        if (*((_DWORD *)v71 + 1))
        {
          v38 = v89;
          if (v89)
          {
            v39 = *(_DWORD *)(v89 - 8);
            v40 = *((_DWORD *)v71 + 4);
            if (v40 < 0x100)
              v41 = WTF::StringImpl::hashSlowCase(v71);
            else
              v41 = v40 >> 8;
            for (i = 0; ; v41 = i + v43)
            {
              v43 = v41 & v39;
              v44 = *(WTF **)(v38 + 8 * (v41 & v39));
              if (!v44)
                break;
              if (v44 != (WTF *)-1 && (WTF::equal(v44, v71, v34) & 1) != 0)
                goto LABEL_76;
              ++i;
            }
          }
          v45 = v87;
          if (v87)
          {
            LOBYTE(v92) = 38;
            if (v86 && (v87 < *((_DWORD *)v86 + 1) ? (v46 = v85 == 0) : (v46 = 0), v46))
            {
              v49 = *((_DWORD *)v86 + 4);
              v50 = *((_QWORD *)v86 + 1);
              ++v87;
              if ((v49 & 4) != 0)
                *(_BYTE *)(v50 + v45) = 38;
              else
                *(_WORD *)(v50 + 2 * v45) = 38;
            }
            else
            {
              WTF::StringBuilder::append();
            }
          }
          v47 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(&v82, &v71, v34);
          v48 = v82;
          if (v82)
            v48 = v82 + 16 * *(unsigned int *)(v82 - 4);
          if ((WTF *)v48 == v47)
          {
            if ((v31 & 0xFF00000000) != 0)
              WTF::StringBuilder::append();
            else
              WTF::StringBuilder::append();
          }
          else
          {
            v92 = v71;
            v91 = 61;
            v90 = *((_QWORD *)v47 + 1);
            WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v85, (uint64_t *)&v92, &v91, &v90);
LABEL_76:
            v28 = 1;
          }
        }
        if (v73)
        {
LABEL_40:
          v35 = v72;
          v72 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v33);
            else
              *(_DWORD *)v35 -= 2;
          }
          v36 = v71;
          v71 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v33);
            else
              *(_DWORD *)v36 -= 2;
          }
        }
      }
      this = WTF::StringView::SplitResult::Iterator::operator++();
      v27 = v75;
      if (v75 == v26 && v77)
      {
        v51 = HIDWORD(v84);
        if (HIDWORD(v84))
          goto LABEL_103;
        if ((v28 & 1) != 0)
        {
LABEL_87:
          v52 = v85;
          if (v85
            || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v85),
                WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v85),
                (v52 = v85) != 0))
          {
            *(_DWORD *)v52 += 2;
            WTF::URL::setQuery();
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, v25);
            else
              *(_DWORD *)v52 -= 2;
          }
          else
          {
            WTF::URL::setQuery();
          }
        }
        goto LABEL_91;
      }
    }
  }
  v51 = HIDWORD(v84);
  if (HIDWORD(v84))
  {
LABEL_103:
    v57 = (uint64_t *)v83;
    v58 = (uint64_t *)((char *)v83 + 16 * v51);
    do
    {
      v59 = v87;
      if (v87)
      {
        LOBYTE(v78) = 38;
        if (v86 && (v87 < *((_DWORD *)v86 + 1) ? (v60 = v85 == 0) : (v60 = 0), v60))
        {
          v61 = *((_DWORD *)v86 + 4);
          v62 = *((_QWORD *)v86 + 1);
          ++v87;
          if ((v61 & 4) != 0)
            *(_BYTE *)(v62 + v59) = 38;
          else
            *(_WORD *)(v62 + 2 * v59) = 38;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      v78 = *v57;
      LOBYTE(v71) = 61;
      v74 = (uint64_t *)v57[1];
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v85, &v78, (char *)&v71, (uint64_t *)&v74);
      v57 += 2;
    }
    while (v57 != v58);
    goto LABEL_87;
  }
LABEL_91:
  v53 = v86;
  v86 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v25);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = v85;
  v85 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v25);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = v82;
  if (v82)
  {
    v67 = *(unsigned int *)(v82 - 4);
    if ((_DWORD)v67)
    {
      v68 = v82;
      do
      {
        v69 = *(WTF::StringImpl **)v68;
        if (*(_QWORD *)v68 != -1)
        {
          v70 = *(WTF::StringImpl **)(v68 + 8);
          *(_QWORD *)(v68 + 8) = 0;
          if (v70)
          {
            if (*(_DWORD *)v70 == 2)
            {
              WTF::StringImpl::destroy(v70, v25);
              v69 = *(WTF::StringImpl **)v68;
            }
            else
            {
              *(_DWORD *)v70 -= 2;
            }
          }
          *(_QWORD *)v68 = 0;
          if (v69)
          {
            if (*(_DWORD *)v69 == 2)
              WTF::StringImpl::destroy(v69, v25);
            else
              *(_DWORD *)v69 -= 2;
          }
        }
        v68 += 16;
        --v67;
      }
      while (v67);
    }
    WTF::fastFree((WTF *)(v55 - 16), v25);
  }
  v56 = v83;
  if (!HIDWORD(v84))
  {
    if (!v83)
      goto LABEL_100;
    goto LABEL_128;
  }
  v63 = 16 * HIDWORD(v84);
  v64 = (WTF::StringImpl **)((char *)v83 + 8);
  do
  {
    v65 = *v64;
    *v64 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v25);
      else
        *(_DWORD *)v65 -= 2;
    }
    v66 = *(v64 - 1);
    *(v64 - 1) = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v25);
      else
        *(_DWORD *)v66 -= 2;
    }
    v64 += 2;
    v63 -= 16;
  }
  while (v63);
  v56 = v83;
  if (v83)
  {
LABEL_128:
    v83 = 0;
    LODWORD(v84) = 0;
    WTF::fastFree(v56, v25);
  }
LABEL_100:
  this = v89;
  if (v89)
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)this, v25);
  return this;
}

uint64_t WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore22WebLockManagerSnapshot4InfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS8_EUlRT_E_S8_SB_vE3mapERS8_SB_RKSE_(a2, (uint64_t *)a1);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a2 + 24) = v5;
      *(_QWORD *)(a2 + 16) = result;
      v6 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v6)
      {
        v7 = result;
        v8 = 0;
        v9 = *(_QWORD *)(a1 + 16);
        v10 = 8 * v6;
        do
        {
          result = WTF::String::isolatedCopy();
          *(_QWORD *)(v7 + 8 * v8++) = v11;
          *(_DWORD *)(a2 + 28) = v8;
          v9 += 8;
          v10 -= 8;
        }
        while (v10);
      }
    }
  }
  return result;
}

unsigned int *WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(a2, (uint64_t *)a1);
  return WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((unsigned int *)(a1 + 16), a2 + 16);
}

uint64_t WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::serialize(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  WTF *v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  size_t v55;
  WTF *v56;

  v3 = result;
  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(unsigned int *)(a2 + 12);
  v6 = v5 + 4;
  if (v5 + 4 > v4)
  {
    v43 = v4 + (v4 >> 2);
    if (v43 >= 0x10)
      v44 = v43 + 1;
    else
      v44 = 16;
    if (v44 <= v6)
      v45 = v5 + 4;
    else
      v45 = v44;
    if (HIDWORD(v45))
    {
      __break(0xC471u);
      JUMPOUT(0x1957203D8);
    }
    v46 = *(void **)a2;
    v47 = (void *)WTF::fastMalloc((WTF *)v45);
    *(_DWORD *)(a2 + 8) = v45;
    *(_QWORD *)a2 = v47;
    result = (uint64_t)memcpy(v47, v46, v5);
    if (v46)
    {
      if (*(void **)a2 == v46)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v46, v48);
    }
  }
  v7 = *(unsigned int *)(a2 + 12);
  if (v6 < v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1957203C8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v7) = 0;
  *(_DWORD *)(a2 + 12) = v6;
  v8 = (v5 + 4);
  v9 = v8 + 4;
  v10 = *(unsigned int *)(a2 + 8);
  if (v8 + 4 > v10)
  {
    v49 = v10 + (v10 >> 2);
    if (v49 >= 0x10)
      v50 = v49 + 1;
    else
      v50 = 16;
    if (v50 <= v9)
      v51 = (v5 + 4) + 4;
    else
      v51 = v50;
    if (HIDWORD(v51))
    {
LABEL_92:
      __break(0xC471u);
      JUMPOUT(0x1957202E0);
    }
    v52 = *(void **)a2;
    v53 = (void *)WTF::fastMalloc((WTF *)v51);
    *(_DWORD *)(a2 + 8) = v51;
    *(_QWORD *)a2 = v53;
    result = (uint64_t)memcpy(v53, v52, (v5 + 4));
    if (v52)
    {
      if (*(void **)a2 == v52)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v52, v54);
    }
  }
  v11 = *(unsigned int *)(a2 + 12);
  if (v9 < v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1957203D0);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v11) = 0;
  *(_DWORD *)(a2 + 12) = v5 + 8;
  v12 = *(unsigned int *)(v3 + 12);
  v13 = v5 + 8;
  if ((_DWORD)v12)
  {
    v14 = *(_QWORD *)v3;
    v15 = 24 * v12;
    do
    {
      result = WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue::serialize(v14, a2);
      v14 += 24;
      v15 -= 24;
    }
    while (v15);
    v13 = *(_DWORD *)(a2 + 12);
  }
  v16 = v13 - v8;
  if (HIDWORD(v16))
  {
    __break(0xC471u);
    JUMPOUT(0x195720300);
  }
  if (v9 > v13)
  {
    __break(0xC471u);
    JUMPOUT(0x195720320);
  }
  if (*(_DWORD *)(*(_QWORD *)a2 + v8))
  {
    __break(0xC471u);
    JUMPOUT(0x195720340);
  }
  v55 = v5;
  *(_DWORD *)(*(_QWORD *)a2 + v8) = v16;
  v17 = *(unsigned int *)(v3 + 28);
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)(v3 + 16);
    v19 = 8 * v17;
    do
    {
      result = WTF::String::utf8();
      if (v56)
      {
        v21 = *((_QWORD *)v56 + 1);
        if (HIDWORD(v21))
          goto LABEL_92;
      }
      else
      {
        LODWORD(v21) = 0;
      }
      v22 = *(unsigned int *)(a2 + 8);
      v23 = *(unsigned int *)(a2 + 12);
      v24 = v23 + 4;
      if (v23 + 4 > v22)
      {
        v31 = v22 + (v22 >> 2);
        if (v31 >= 0x10)
          v32 = v31 + 1;
        else
          v32 = 16;
        if (v32 <= v24)
          v33 = v23 + 4;
        else
          v33 = v32;
        if (HIDWORD(v33))
        {
          __break(0xC471u);
          JUMPOUT(0x1957203B8);
        }
        v34 = *(void **)a2;
        v35 = (void *)WTF::fastMalloc((WTF *)v33);
        *(_DWORD *)(a2 + 8) = v33;
        *(_QWORD *)a2 = v35;
        result = (uint64_t)memcpy(v35, v34, v23);
        if (v34)
        {
          if (*(void **)a2 == v34)
          {
            *(_QWORD *)a2 = 0;
            *(_DWORD *)(a2 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v34, v20);
        }
      }
      v25 = *(unsigned int *)(a2 + 12);
      if (v24 < v25)
      {
        __break(0xC471u);
        JUMPOUT(0x1957203A8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + v25) = v21;
      *(_DWORD *)(a2 + 12) = v24;
      v26 = v56;
      if (v56)
      {
        v27 = *((_QWORD *)v56 + 1);
        if (v27)
        {
          v28 = v27 + v24;
          v29 = *(unsigned int *)(a2 + 8);
          if (v28 > v29)
          {
            v36 = v29 + (v29 >> 2);
            if (v36 >= 0x10)
              v37 = v36 + 1;
            else
              v37 = 16;
            if (v37 <= v28)
              v38 = v27 + v24;
            else
              v38 = v37;
            if (HIDWORD(v38))
            {
              __break(0xC471u);
              JUMPOUT(0x1957203C0);
            }
            v39 = *(void **)a2;
            v40 = (void *)WTF::fastMalloc((WTF *)v38);
            *(_DWORD *)(a2 + 8) = v38;
            *(_QWORD *)a2 = v40;
            memcpy(v40, v39, v24);
            if (v39)
            {
              if (*(void **)a2 == v39)
              {
                *(_QWORD *)a2 = 0;
                *(_DWORD *)(a2 + 8) = 0;
              }
              WTF::fastFree((WTF *)v39, v41);
            }
          }
          v30 = *(unsigned int *)(a2 + 12);
          if (v28 < v30)
          {
            __break(0xC471u);
            JUMPOUT(0x1957203B0);
          }
          result = (uint64_t)memcpy((void *)(*(_QWORD *)a2 + v30), (char *)v56 + 16, v27);
          *(_DWORD *)(a2 + 12) = v28;
          v26 = v56;
          v56 = 0;
        }
        else
        {
          v56 = 0;
        }
        if (*(_DWORD *)v26 == 1)
          result = WTF::fastFree(v26, v20);
        else
          --*(_DWORD *)v26;
      }
      v18 += 8;
      v19 -= 8;
    }
    while (v19);
  }
  v42 = *(unsigned int *)(a2 + 12);
  if ((v42 - v55) >> 32)
  {
    __break(0xC471u);
    JUMPOUT(0x195720360);
  }
  if (v6 > v42)
  {
    __break(0xC471u);
    JUMPOUT(0x195720380);
  }
  if (*(_DWORD *)(*(_QWORD *)a2 + v55))
  {
    __break(0xC471u);
    JUMPOUT(0x1957203A0);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v55) = v42 - v55;
  return result;
}

uint64_t WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue::serialize(uint64_t a1, uint64_t a2)
{
  WTF *v4;
  char *v5;
  WTF *v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  _BYTE *v23;
  size_t v24;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  WTF *v29;
  size_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t result;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  size_t v54;
  void *v55;
  void *v56;
  void *v57;
  WTF *v58;
  WTF *v59;

  WTF::String::utf8();
  WTF::String::utf8();
  v4 = v59;
  if (v59)
    v4 = (WTF *)*((_QWORD *)v59 + 1);
  v5 = (char *)v4 + 9;
  v6 = v58;
  if (v58)
    v6 = (WTF *)*((_QWORD *)v58 + 1);
  v7 = (unint64_t)v6 + (_QWORD)v5;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2, (WTF *)((char *)v6 + (_QWORD)v5 + *(unsigned int *)(a2 + 12)));
  if (HIDWORD(v7))
  {
    __break(0xC471u);
    JUMPOUT(0x19572082CLL);
  }
  v9 = *(unsigned int *)(a2 + 8);
  v10 = *(unsigned int *)(a2 + 12);
  v11 = v10 + 4;
  if (v10 + 4 > v9)
  {
    v35 = v9 + (v9 >> 2);
    if (v35 >= 0x10)
      v36 = v35 + 1;
    else
      v36 = 16;
    if (v36 <= v11)
      v37 = v10 + 4;
    else
      v37 = v36;
    if (HIDWORD(v37))
    {
      __break(0xC471u);
      JUMPOUT(0x195720864);
    }
    v38 = *(void **)a2;
    v39 = (void *)WTF::fastMalloc((WTF *)v37);
    *(_DWORD *)(a2 + 8) = v37;
    *(_QWORD *)a2 = v39;
    memcpy(v39, v38, v10);
    if (v38)
    {
      if (*(void **)a2 == v38)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v38, v8);
    }
  }
  v12 = *(unsigned int *)(a2 + 12);
  if (v11 < v12)
  {
    __break(0xC471u);
    JUMPOUT(0x195720834);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v12) = v7;
  *(_DWORD *)(a2 + 12) = v11;
  if (v59)
  {
    v13 = *((_QWORD *)v59 + 1);
    if (HIDWORD(v13))
    {
      __break(0xC471u);
      JUMPOUT(0x1957204B4);
    }
  }
  else
  {
    LODWORD(v13) = 0;
  }
  v14 = (v10 + 4);
  v15 = v11 + 4;
  v16 = *(unsigned int *)(a2 + 8);
  if (v15 > v16)
  {
    v40 = v16 + (v16 >> 2);
    if (v40 >= 0x10)
      v41 = v40 + 1;
    else
      v41 = 16;
    if (v41 <= v15)
      v42 = v15;
    else
      v42 = v41;
    if (HIDWORD(v42))
    {
      __break(0xC471u);
      JUMPOUT(0x19572086CLL);
    }
    v43 = *(void **)a2;
    v44 = (void *)WTF::fastMalloc((WTF *)v42);
    *(_DWORD *)(a2 + 8) = v42;
    *(_QWORD *)a2 = v44;
    memcpy(v44, v43, v14);
    if (v43)
    {
      if (*(void **)a2 == v43)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v43, v8);
    }
  }
  v17 = *(unsigned int *)(a2 + 12);
  if (v15 < v17)
  {
    __break(0xC471u);
    JUMPOUT(0x19572083CLL);
  }
  *(_DWORD *)(*(_QWORD *)a2 + v17) = v13;
  *(_DWORD *)(a2 + 12) = v15;
  if (*(_DWORD *)(a2 + 8) == (_DWORD)v15)
  {
    v18 = v15 + ((unint64_t)v15 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= (unint64_t)v15 + 1)
      v20 = v15 + 1;
    else
      v20 = v19;
    if (HIDWORD(v20))
    {
      __break(0xC471u);
      JUMPOUT(0x19572085CLL);
    }
    v21 = *(void **)a2;
    v22 = (void *)WTF::fastMalloc((WTF *)v20);
    *(_DWORD *)(a2 + 8) = v20;
    *(_QWORD *)a2 = v22;
    memcpy(v22, v21, v15);
    if (v21)
    {
      if (*(void **)a2 == v21)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v21, v8);
    }
    v23 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
  }
  else
  {
    v23 = (_BYTE *)(*(_QWORD *)a2 + v15);
  }
  *v23 = *(_BYTE *)(a1 + 8);
  v24 = (*(_DWORD *)(a2 + 12) + 1);
  *(_DWORD *)(a2 + 12) = v24;
  if (v59)
  {
    v25 = *((_QWORD *)v59 + 1);
    if (v25)
    {
      v26 = v25 + v24;
      v27 = *(unsigned int *)(a2 + 8);
      if (v26 > v27)
      {
        v45 = v27 + (v27 >> 2);
        if (v45 >= 0x10)
          v46 = v45 + 1;
        else
          v46 = 16;
        if (v46 <= v26)
          v47 = v25 + v24;
        else
          v47 = v46;
        if (HIDWORD(v47))
        {
          __break(0xC471u);
          JUMPOUT(0x195720874);
        }
        v48 = *(void **)a2;
        v49 = (void *)WTF::fastMalloc((WTF *)v47);
        *(_DWORD *)(a2 + 8) = v47;
        *(_QWORD *)a2 = v49;
        memcpy(v49, v48, v24);
        if (v48)
        {
          if (*(void **)a2 == v48)
          {
            *(_QWORD *)a2 = 0;
            *(_DWORD *)(a2 + 8) = 0;
          }
          WTF::fastFree((WTF *)v48, v50);
        }
      }
      v28 = *(unsigned int *)(a2 + 12);
      if (v26 < v28)
      {
        __break(0xC471u);
        JUMPOUT(0x195720844);
      }
      memcpy((void *)(*(_QWORD *)a2 + v28), (char *)v59 + 16, v25);
      *(_DWORD *)(a2 + 12) = v26;
      LODWORD(v24) = v25 + v24;
    }
  }
  v29 = v58;
  if (v58)
  {
    v30 = *((_QWORD *)v58 + 1);
    if (v30)
    {
      v31 = v30 + v24;
      v32 = *(unsigned int *)(a2 + 8);
      if (v31 > v32)
      {
        v51 = v32 + (v32 >> 2);
        if (v51 >= 0x10)
          v52 = v51 + 1;
        else
          v52 = 16;
        if (v52 <= v31)
          v53 = v30 + v24;
        else
          v53 = v52;
        if (HIDWORD(v53))
        {
          __break(0xC471u);
          JUMPOUT(0x19572087CLL);
        }
        v54 = v24;
        v55 = *(void **)a2;
        v56 = (void *)WTF::fastMalloc((WTF *)v53);
        *(_DWORD *)(a2 + 8) = v53;
        *(_QWORD *)a2 = v56;
        memcpy(v56, v55, v54);
        if (v55)
        {
          if (*(void **)a2 == v55)
          {
            *(_QWORD *)a2 = 0;
            *(_DWORD *)(a2 + 8) = 0;
          }
          WTF::fastFree((WTF *)v55, v57);
        }
      }
      v33 = *(unsigned int *)(a2 + 12);
      if (v31 < v33)
      {
        __break(0xC471u);
        JUMPOUT(0x195720854);
      }
      memcpy((void *)(*(_QWORD *)a2 + v33), (char *)v58 + 16, v30);
      *(_DWORD *)(a2 + 12) = v31;
      v29 = v58;
    }
    if (*(_DWORD *)v29 == 1)
      WTF::fastFree(v29, v8);
    else
      --*(_DWORD *)v29;
  }
  result = (uint64_t)v59;
  if (v59)
  {
    if (*(_DWORD *)v59 == 1)
      return WTF::fastFree(v59, v8);
    else
      --*(_DWORD *)v59;
  }
  return result;
}

uint64_t WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue::serializedLength(unsigned int *a1, unint64_t a2)
{
  uint64_t result;

  if (a2 > 3)
    return *a1;
  result = 57;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue::deserialize@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;

  if (a2 <= 8)
  {
    __break(0xC471u);
    goto LABEL_11;
  }
  v4 = a1[1];
  v5 = a2 - (v4 + 9);
  if (a2 < v4 + 9)
  {
    __break(0xC471u);
    JUMPOUT(0x1957209A8);
  }
  v7 = *a1;
  v8 = *((unsigned __int8 *)a1 + 8);
  WTF::String::fromUTF8();
  if (a2 < v7)
  {
    __break(0xC471u);
LABEL_10:
    __break(1u);
LABEL_11:
    JUMPOUT(0x195720988);
  }
  if (v7 - v4 != 8 && v5 < v7 - v4 - 9)
    goto LABEL_10;
  result = WTF::String::fromUTF8();
  *(_QWORD *)a3 = v10;
  *(_BYTE *)(a3 + 8) = v8 != 0;
  return result;
}

uint64_t WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::serializedLength(unsigned int *a1, unint64_t a2)
{
  uint64_t result;

  if (a2 > 3)
    return *a1;
  result = 57;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ContentExtensions::compileRuleList(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  int v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t i;
  _QWORD *v14;
  _QWORD *v15;
  WTF *v16;
  _QWORD *v17;
  WTF *v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF ***v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  WTF *v39;
  WTF *v40;
  void *v41;
  _DWORD *v42;
  uint64_t v43;
  int v44;
  int v45;
  size_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  WTF *v50;
  WTF *v51;
  void *v52;
  _BYTE *v53;
  uint64_t v54;
  _DWORD *v55;
  void *v56;
  WTF ***v57;
  uint64_t v58;
  uint64_t j;
  WTF ***v60;
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  WTF ***v74;
  uint64_t v75;
  WTF::StringImpl **v76;
  WTF::StringImpl *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  unint64_t v85;
  WTF::StringImpl *v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t k;
  int v98;
  uint64_t v99;
  unint64_t v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  WTF *v113;
  _QWORD *v114;
  _BOOL4 v115;
  void *v116;
  _QWORD *v117;
  __n128 v118;
  void *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  WTF *v124;
  WTF *v125;
  WTF *v126;
  WTF *v127;
  WTF *v128;
  WTF *v129;
  WTF *v130;
  WTF *v131;
  _QWORD *v132;
  _BOOL4 v133;
  _QWORD *v134;
  __n128 v135;
  void *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  WTF *v141;
  WTF *v142;
  WTF *v143;
  WTF *v144;
  WTF *v145;
  WTF *v146;
  WTF *v147;
  WTF *v148;
  _QWORD *v149;
  _BOOL4 v150;
  _QWORD *v151;
  __n128 v152;
  void *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  WTF *v158;
  WTF *v159;
  WTF *v160;
  WTF *v161;
  WTF *v162;
  WTF *v163;
  WTF *v164;
  WTF *v165;
  void *v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  const char *v170;
  WTF *v171;
  void *v172;
  void *v173;
  void *v174;
  WTF *v175;
  WTF *v176;
  WTF *v178;
  uint64_t v179;
  uint64_t v180;
  _DWORD *v181;
  char *v182;
  uint64_t v183;
  _QWORD v184[5];
  WTF **v185;
  _DWORD *v186;
  uint64_t *v187;
  _QWORD *v188;
  uint64_t v189;
  WTF **v190;
  _DWORD *v191;
  uint64_t *v192;
  _QWORD *v193;
  uint64_t v194;
  WTF *v195;
  uint64_t v196;
  WTF *v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t *v203;
  uint64_t **v204;
  uint64_t *v205;
  WTF ***v206;
  WTF ****v207;
  WTF ***v208;
  WTF ****v209;
  WTF ***v210;
  uint64_t *v211;
  WTF ***v212;
  uint64_t v213;
  WTF ***v214;
  uint64_t v215;
  WTF **v216;
  WTF **v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t *v226;
  _QWORD *v227;
  char v228;
  _QWORD v229[3];

  *(_QWORD *)&v199 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v199);
  v6 = (WTF::StringImpl *)v199;
  *(_QWORD *)&v199 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v179 = a3;
  v180 = a1;
  v197 = 0;
  v198 = 0;
  v7 = *(_DWORD **)a3;
  v8 = *(_DWORD *)(a3 + 12);
  v195 = 0;
  v196 = 0;
  v225 = 0;
  v223 = 0;
  v221 = 0;
  v229[0] = 0;
  v214 = 0;
  v215 = 0;
  v213 = 0;
  v212 = 0;
  if (v8)
  {
    v181 = &v7[38 * v8];
    while (v7[36] != 4)
    {
      v28 = (WTF ***)v229[0];
      if (v229[0])
      {
        v229[0] = 0;
LABEL_56:
        WTF::fastFree((WTF *)(v28 - 2), v5);
      }
LABEL_57:
      if (v7[7])
      {
        v34 = HIDWORD(v198);
        v35 = HIDWORD(v196);
        if (HIDWORD(v196) == (_DWORD)v196)
        {
          v36 = HIDWORD(v196) + ((unint64_t)HIDWORD(v196) >> 2);
          if (v36 >= 0x10)
            v37 = v36 + 1;
          else
            v37 = 16;
          if (v37 <= (unint64_t)HIDWORD(v196) + 1)
            v38 = HIDWORD(v196) + 1;
          else
            v38 = v37;
          if (v38 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x195721D2CLL);
          }
          v39 = v195;
          v40 = (WTF *)WTF::fastMalloc((WTF *)(4 * v38));
          LODWORD(v196) = v38;
          v195 = v40;
          memcpy(v40, v39, 4 * v35);
          if (v39)
          {
            if (v195 == v39)
            {
              v195 = 0;
              LODWORD(v196) = 0;
            }
            WTF::fastFree(v39, v41);
          }
          v42 = (_DWORD *)((char *)v195 + 4 * HIDWORD(v196));
        }
        else
        {
          v42 = (_DWORD *)((char *)v195 + 4 * HIDWORD(v196));
        }
        *v42 = v34;
        ++HIDWORD(v196);
        v45 = v7[36];
        v46 = HIDWORD(v198);
        if (HIDWORD(v198) == (_DWORD)v198)
        {
          v47 = HIDWORD(v198) + ((unint64_t)HIDWORD(v198) >> 2);
          if (v47 >= 0x10)
            v48 = v47 + 1;
          else
            v48 = 16;
          if (v48 <= (unint64_t)HIDWORD(v198) + 1)
            v49 = HIDWORD(v198) + 1;
          else
            v49 = v48;
          if (HIDWORD(v49))
          {
            __break(0xC471u);
            JUMPOUT(0x195721D34);
          }
          v50 = v197;
          v51 = (WTF *)WTF::fastMalloc((WTF *)v49);
          LODWORD(v198) = v49;
          v197 = v51;
          memcpy(v51, v50, v46);
          if (v50)
          {
            if (v197 == v50)
            {
              v197 = 0;
              LODWORD(v198) = 0;
            }
            WTF::fastFree(v50, v52);
          }
          v53 = (char *)v197 + HIDWORD(v198);
        }
        else
        {
          v53 = (char *)v197 + HIDWORD(v198);
        }
        *v53 = v45;
        ++HIDWORD(v198);
        v216 = &v197;
        v54 = v7[36];
        if ((_DWORD)v54 == -1)
        {
LABEL_295:
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_296;
        }
        *(_QWORD *)&v199 = &v216;
        ((void (*)(__int128 *, _DWORD *))off_1E3395100[v54])(&v199, v7 + 8);
      }
      else
      {
        LODWORD(v183) = v7[3];
        v216 = (WTF **)&v183;
        v217 = &v197;
        *(_QWORD *)&v218 = v7 + 8;
        v190 = &v197;
        v191 = v7 + 8;
        v192 = &v183;
        v185 = &v197;
        v186 = v7 + 8;
        v187 = &v183;
        LODWORD(v182) = 0;
        *(_QWORD *)&v199 = &v221;
        *((_QWORD *)&v199 + 1) = v7;
        *(_QWORD *)&v200 = &v195;
        *((_QWORD *)&v200 + 1) = &v216;
        *(_QWORD *)&v201 = v229;
        *((_QWORD *)&v201 + 1) = &v216;
        *(_QWORD *)&v202 = &v225;
        *((_QWORD *)&v202 + 1) = &v216;
        v203 = &v223;
        v204 = (uint64_t **)&v216;
        v205 = &v215;
        v206 = &v190;
        v207 = &v214;
        v208 = &v185;
        v209 = &v212;
        v210 = &v185;
        v211 = &v213;
        v43 = v7[36];
        if ((_DWORD)v43 == -1)
          goto LABEL_295;
        v184[0] = &v199;
        v44 = ((uint64_t (*)(_QWORD *, _DWORD *))off_1E3395140[v43])(v184, v7 + 8);
        LODWORD(v182) = v44;
        if (HIDWORD(v196) == (_DWORD)v196)
        {
          v55 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v195, HIDWORD(v196) + 1, (unint64_t)&v182);
          *((_DWORD *)v195 + HIDWORD(v196)) = *v55;
        }
        else
        {
          *((_DWORD *)v195 + HIDWORD(v196)) = v44;
        }
        ++HIDWORD(v196);
      }
      v7 += 38;
      if (v7 == v181)
        goto LABEL_94;
    }
    WebCore::ContentExtensions::resolvePendingDisplayNoneActions((uint64_t)&v197, (WTF::StringImpl *)&v195, &v221);
    v9 = v225;
    if (v225)
    {
      v225 = 0;
      WTF::fastFree((WTF *)(v9 - 16), v5);
    }
    v10 = v223;
    if (v223)
    {
      v223 = 0;
      WTF::fastFree((WTF *)(v10 - 16), v5);
    }
    v11 = v221;
    if (v221)
    {
      v221 = 0;
      v12 = *((unsigned int *)v11 - 1);
      if ((_DWORD)v12)
      {
        for (i = 0; i != v12; ++i)
        {
          v14 = &v11[9 * i];
          if (*v14 != -1)
          {
            v15 = &v11[9 * i];
            v18 = (WTF *)v15[7];
            v17 = v15 + 7;
            v16 = v18;
            if (v18)
            {
              *v17 = 0;
              LODWORD(v11[9 * i + 8]) = 0;
              WTF::fastFree(v16, v5);
            }
            v19 = &v11[9 * i];
            v20 = (WTF::StringImpl *)v19[5];
            v19[5] = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v5);
              else
                *(_DWORD *)v20 -= 2;
            }
            v21 = (WTF::StringImpl *)*(v17 - 3);
            *(v17 - 3) = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v5);
              else
                *(_DWORD *)v21 -= 2;
            }
            v22 = *((unsigned int *)v14 + 7);
            if ((_DWORD)v22)
            {
              v25 = (WTF::StringImpl **)v14[2];
              v26 = 8 * v22;
              do
              {
                v27 = *v25;
                *v25 = 0;
                if (v27)
                {
                  if (*(_DWORD *)v27 == 2)
                    WTF::StringImpl::destroy(v27, v5);
                  else
                    *(_DWORD *)v27 -= 2;
                }
                ++v25;
                v26 -= 8;
              }
              while (v26);
            }
            v23 = (WTF *)v14[2];
            if (v23)
            {
              v14[2] = 0;
              *((_DWORD *)v14 + 6) = 0;
              WTF::fastFree(v23, v5);
            }
            v24 = (WTF::StringImpl *)*v14;
            *v14 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v5);
              else
                *(_DWORD *)v24 -= 2;
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v11 - 2), v5);
    }
    v29 = v215;
    if (v215)
    {
      v215 = 0;
      WTF::fastFree((WTF *)(v29 - 16), v5);
    }
    v28 = v214;
    if (!v214)
      goto LABEL_57;
    v214 = 0;
    v30 = *((unsigned int *)v28 - 1);
    if ((_DWORD)v30)
    {
      v31 = 0;
      v32 = 24 * v30;
      do
      {
        v33 = (WTF::StringImpl *)v28[v31 / 8];
        if (v33 != (WTF::StringImpl *)-1)
        {
          v28[v31 / 8] = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v5);
            else
              *(_DWORD *)v33 -= 2;
          }
        }
        v31 += 24;
      }
      while (v32 != v31);
    }
    goto LABEL_56;
  }
LABEL_94:
  WebCore::ContentExtensions::resolvePendingDisplayNoneActions((uint64_t)&v197, (WTF::StringImpl *)&v195, &v221);
  v57 = v212;
  if (v212)
  {
    v58 = *((unsigned int *)v212 - 1);
    if ((_DWORD)v58)
    {
      for (j = 0; j != v58; ++j)
      {
        v60 = &v57[8 * j];
        if (*(_BYTE *)v60 != 1)
        {
          v61 = *((unsigned int *)v60 + 9);
          v62 = (unsigned int *)v60[3];
          if ((_DWORD)v61)
          {
            v63 = 24 * v61;
            do
            {
              v64 = v62[4];
              if ((_DWORD)v64 != -1)
                ((void (*)(__int128 *, unsigned int *))off_1E3394F08[v64])(&v199, v62);
              v62[4] = -1;
              v62 += 6;
              v63 -= 24;
            }
            while (v63);
            v62 = (unsigned int *)v60[3];
          }
          if (v62)
          {
            v60[3] = 0;
            *((_DWORD *)v60 + 8) = 0;
            WTF::fastFree((WTF *)v62, v56);
          }
          v65 = *((unsigned int *)v60 + 5);
          v66 = (unsigned int *)v60[1];
          if ((_DWORD)v65)
          {
            v67 = 24 * v65;
            do
            {
              v68 = v66[4];
              if ((_DWORD)v68 != -1)
                ((void (*)(__int128 *, unsigned int *))off_1E3394F08[v68])(&v199, v66);
              v66[4] = -1;
              v66 += 6;
              v67 -= 24;
            }
            while (v67);
            v66 = (unsigned int *)v60[1];
          }
          if (v66)
          {
            v60[1] = 0;
            *((_DWORD *)v60 + 4) = 0;
            WTF::fastFree((WTF *)v66, v56);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v57 - 2), v56);
  }
  v69 = v213;
  v70 = v180;
  if (v213)
  {
    v71 = *(unsigned int *)(v213 - 4);
    if ((_DWORD)v71)
    {
      v72 = (_DWORD *)(v213 + 104);
      do
      {
        if (*((_BYTE *)v72 - 104) != 1)
        {
          v73 = *v72;
          if ((_DWORD)v73 != -1)
            ((void (*)(__int128 *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v73])(&v199, v72 - 24);
          *v72 = -1;
        }
        v72 += 32;
        --v71;
      }
      while (v71);
    }
    WTF::fastFree((WTF *)(v69 - 16), v56);
  }
  v74 = v214;
  if (v214)
  {
    v75 = *((unsigned int *)v214 - 1);
    if ((_DWORD)v75)
    {
      v76 = (WTF::StringImpl **)v214;
      do
      {
        v77 = *v76;
        if (*v76 != (WTF::StringImpl *)-1)
        {
          *v76 = 0;
          if (v77)
          {
            if (*(_DWORD *)v77 == 2)
              WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v56);
            else
              *(_DWORD *)v77 -= 2;
          }
        }
        v76 += 3;
        --v75;
      }
      while (v75);
    }
    WTF::fastFree((WTF *)(v74 - 2), v56);
  }
  if (v215)
    WTF::fastFree((WTF *)(v215 - 16), v56);
  if (v229[0])
    WTF::fastFree((WTF *)(v229[0] - 16), v56);
  v78 = v221;
  if (v221)
  {
    v79 = *((unsigned int *)v221 - 1);
    if ((_DWORD)v79)
    {
      v80 = v221;
      do
      {
        if (*v80 != -1)
          v80 = (_QWORD *)WTF::KeyValuePair<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions>::~KeyValuePair((uint64_t)v80, v56);
        v80 += 9;
        --v79;
      }
      while (v79);
    }
    WTF::fastFree((WTF *)(v78 - 2), v56);
  }
  if (v223)
    WTF::fastFree((WTF *)(v223 - 16), v56);
  if (v225)
    WTF::fastFree((WTF *)(v225 - 16), v56);
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v180 + 24))(v180, &v197);
  v190 = 0;
  v191 = 0;
  v192 = 0;
  v81 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v81 = 0;
  v81[1] = 0;
  v193 = v81;
  v194 = 0;
  v214 = &v190;
  v215 = 0;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v82 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v82 = 0;
  v82[1] = 0;
  v188 = v82;
  v189 = 0;
  v213 = 0;
  v212 = &v185;
  memset(v184, 0, 24);
  v83 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v83 = 0;
  v83[1] = 0;
  v184[3] = v83;
  v184[4] = 0;
  v182 = (char *)v184;
  v183 = 0;
  if (!*(_DWORD *)(v179 + 12))
  {
    if (*(_DWORD *)(v179 + 8))
      goto LABEL_182;
    goto LABEL_184;
  }
  v85 = 0;
  while (1)
  {
    v86 = *(WTF::StringImpl **)v179;
    v216 = 0;
    if (v85 >= HIDWORD(v196))
    {
      __break(0xC471u);
      JUMPOUT(0x195721D3CLL);
    }
    v87 = (char *)v86 + 152 * v85;
    v88 = (uint64_t *)(*((unsigned int *)v195 + v85) | ((unint64_t)*((unsigned int *)v87 + 3) << 32));
    v216 = (WTF **)v88;
    v89 = *(_QWORD *)v87;
    if (*(_QWORD *)v87)
    {
      v90 = *(unsigned int *)(v89 + 16);
      v91 = *(WTF::StringImpl **)(v89 + 8);
      v89 = *(unsigned int *)(v89 + 4);
      v92 = (v90 >> 2) & 1;
    }
    else
    {
      v91 = 0;
      v92 = 1;
    }
    v93 = WebCore::ContentExtensions::URLFilterParser::addPattern((char **)&v214, v91, v89 | (v92 << 32), v87[8], v88);
    if (v93)
      break;
LABEL_159:
    v95 = *((unsigned int *)v87 + 7);
    if ((_DWORD)v95)
    {
      v96 = (uint64_t *)*((_QWORD *)v87 + 2);
      for (k = 8 * v95; k; k -= 8)
      {
        v98 = (*((_DWORD *)v87 + 3) >> 17) & 3;
        if ((v98 - 1) >= 2)
        {
          if (!v98)
            goto LABEL_174;
          v106 = *v96;
          if (*v96)
          {
            v107 = *(unsigned int *)(v106 + 16);
            v108 = *(WTF::StringImpl **)(v106 + 8);
            v106 = *(unsigned int *)(v106 + 4);
            v109 = (v107 >> 2) & 1;
          }
          else
          {
            v108 = 0;
            v109 = 1;
          }
          v110 = WebCore::ContentExtensions::URLFilterParser::addPattern(&v182, v108, v106 | (v109 << 32), v87[10], v216);
          if (!v110)
            goto LABEL_174;
          v111 = v110;
          if (v110 != 1)
          {
            WTF::String::utf8();
            if ((_QWORD)v199)
              v169 = v199 + 16;
            else
              v169 = 0;
            v170 = "Only ASCII characters are supported in pattern.";
            switch(v111)
            {
              case 2:
                goto LABEL_277;
              case 3:
                goto LABEL_265;
              case 4:
                goto LABEL_266;
              case 5:
                goto LABEL_267;
              case 6:
                goto LABEL_268;
              case 7:
                goto LABEL_273;
              case 8:
                goto LABEL_274;
              case 9:
                goto LABEL_269;
              case 10:
                goto LABEL_275;
              case 11:
                goto LABEL_270;
              case 12:
                goto LABEL_276;
              case 13:
                goto LABEL_271;
              case 14:
                goto LABEL_272;
              default:
                __break(0xC471u);
                JUMPOUT(0x195721D04);
            }
          }
          v105 = &v183;
        }
        else
        {
          v99 = *v96;
          if (*v96)
          {
            v100 = *(unsigned int *)(v99 + 16);
            v101 = *(WTF::StringImpl **)(v99 + 8);
            v99 = *(unsigned int *)(v99 + 4);
            v102 = (v100 >> 2) & 1;
          }
          else
          {
            v101 = 0;
            v102 = 1;
          }
          v103 = WebCore::ContentExtensions::URLFilterParser::addPattern((char **)&v212, v101, v99 | (v102 << 32), v87[9], v216);
          if (!v103)
            goto LABEL_174;
          v104 = v103;
          if (v103 != 1)
          {
            WTF::String::utf8();
            if ((_QWORD)v199)
              v169 = v199 + 16;
            else
              v169 = 0;
            v170 = "Only ASCII characters are supported in pattern.";
            switch(v104)
            {
              case 2:
                goto LABEL_277;
              case 3:
                goto LABEL_265;
              case 4:
                goto LABEL_266;
              case 5:
                goto LABEL_267;
              case 6:
                goto LABEL_268;
              case 7:
                goto LABEL_273;
              case 8:
                goto LABEL_274;
              case 9:
                goto LABEL_269;
              case 10:
                goto LABEL_275;
              case 11:
                goto LABEL_270;
              case 12:
                goto LABEL_276;
              case 13:
                goto LABEL_271;
              case 14:
                goto LABEL_272;
              default:
                __break(0xC471u);
                JUMPOUT(0x195721CE4);
            }
          }
          v105 = &v213;
        }
        WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add(v105, (uint64_t *)&v216, (uint64_t)&v199);
LABEL_174:
        ++v96;
      }
    }
    ++v85;
    v112 = *(unsigned int *)(v179 + 12);
    if (v85 >= v112)
    {
      if (*(_DWORD *)(v179 + 8))
      {
        if ((_DWORD)v112)
        {
          WTF::VectorDestructor<true,WebCore::ContentExtensions::ContentExtensionRule>::destruct(*(WTF::StringImpl **)v179, (WTF::StringImpl *)(*(_QWORD *)v179 + 152 * v112));
          *(_DWORD *)(v179 + 12) = 0;
        }
LABEL_182:
        v113 = *(WTF **)v179;
        if (*(_QWORD *)v179)
        {
          *(_QWORD *)v179 = 0;
          *(_DWORD *)(v179 + 8) = 0;
          WTF::fastFree(v113, v84);
        }
      }
LABEL_184:
      if (!(_DWORD)v196)
      {
LABEL_185:
        v229[0] = v70;
        v228 = 0;
        v225 = &v228;
        v226 = &v215;
        v227 = v229;
        v223 = 0;
        v224 = 0;
        v114 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v114 = off_1E3395358;
        v114[1] = &v223;
        v114[2] = &v225;
        *(_QWORD *)&v199 = v114;
        v115 = WebCore::ContentExtensions::CombinedURLFilters::processNFAs((uint64_t)&v190, (void *)0x124F8, &v199);
        (*(void (**)(_QWORD *))(*v114 + 8))(v114);
        if (!v115)
          goto LABEL_246;
        v117 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v117 = off_1E3395380;
        v117[1] = &v225;
        *(_QWORD *)&v199 = v117;
        WebCore::ContentExtensions::DFACombiner::combineDFAs((unsigned int *)&v223, 0x64u, &v199, v118);
        v120 = v199;
        *(_QWORD *)&v199 = 0;
        if (v120)
          (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
        if (!v228)
        {
          LODWORD(v203) = 0;
          v201 = 0u;
          v202 = 0u;
          v199 = 0u;
          v200 = 0u;
          LODWORD(v217) = 0;
          v216 = 0;
          v121 = WTF::Vector<WebCore::ContentExtensions::DFANode,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v199, 1uLL, (unint64_t)&v216);
          v122 = v199 + 12 * HIDWORD(v199);
          v123 = *(_QWORD *)v121;
          *(_DWORD *)(v122 + 8) = *((_DWORD *)v121 + 2);
          *(_QWORD *)v122 = v123;
          ++HIDWORD(v199);
          WebCore::ContentExtensions::addUniversalActionsToDFA((uint64_t)&v199, &v215);
          v221 = 0;
          v222 = 0;
          v216 = (WTF **)&v221;
          v217 = (WTF **)&v199;
          v218 = 0u;
          v219 = 0u;
          v220 = 0u;
          WebCore::ContentExtensions::DFABytecodeCompiler::compile((uint64_t **)&v216);
          (*(void (**)(_QWORD, _QWORD **))(*(_QWORD *)v229[0] + 32))(v229[0], &v221);
          v124 = (WTF *)v220;
          if ((_QWORD)v220)
          {
            *(_QWORD *)&v220 = 0;
            DWORD2(v220) = 0;
            WTF::fastFree(v124, v119);
          }
          v125 = (WTF *)v219;
          if ((_QWORD)v219)
          {
            *(_QWORD *)&v219 = 0;
            DWORD2(v219) = 0;
            WTF::fastFree(v125, v119);
          }
          v126 = (WTF *)v218;
          if ((_QWORD)v218)
          {
            *(_QWORD *)&v218 = 0;
            DWORD2(v218) = 0;
            WTF::fastFree(v126, v119);
          }
          v127 = (WTF *)v221;
          if (v221)
          {
            v221 = 0;
            LODWORD(v222) = 0;
            WTF::fastFree(v127, v119);
          }
          v128 = (WTF *)v202;
          if ((_QWORD)v202)
          {
            *(_QWORD *)&v202 = 0;
            DWORD2(v202) = 0;
            WTF::fastFree(v128, v119);
          }
          v129 = (WTF *)v201;
          if ((_QWORD)v201)
          {
            *(_QWORD *)&v201 = 0;
            DWORD2(v201) = 0;
            WTF::fastFree(v129, v119);
          }
          v130 = (WTF *)v200;
          if ((_QWORD)v200)
          {
            *(_QWORD *)&v200 = 0;
            DWORD2(v200) = 0;
            WTF::fastFree(v130, v119);
          }
          v131 = (WTF *)v199;
          if ((_QWORD)v199)
          {
            *(_QWORD *)&v199 = 0;
            DWORD2(v199) = 0;
            WTF::fastFree(v131, v119);
          }
        }
        WTF::Vector<WebCore::ContentExtensions::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v223, v119);
        v229[0] = v70;
        v228 = 0;
        v225 = &v228;
        v226 = &v213;
        v227 = v229;
        v223 = 0;
        v224 = 0;
        v132 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v132 = off_1E33953A8;
        v132[1] = &v223;
        v132[2] = &v225;
        *(_QWORD *)&v199 = v132;
        v133 = WebCore::ContentExtensions::CombinedURLFilters::processNFAs((uint64_t)&v185, (void *)0x124F8, &v199);
        (*(void (**)(_QWORD *))(*v132 + 8))(v132);
        if (!v133)
          goto LABEL_246;
        v134 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v134 = off_1E33953D0;
        v134[1] = &v225;
        *(_QWORD *)&v199 = v134;
        WebCore::ContentExtensions::DFACombiner::combineDFAs((unsigned int *)&v223, 0x64u, &v199, v135);
        v137 = v199;
        *(_QWORD *)&v199 = 0;
        if (v137)
          (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
        if (!v228)
        {
          LODWORD(v203) = 0;
          v201 = 0u;
          v202 = 0u;
          v199 = 0u;
          v200 = 0u;
          LODWORD(v217) = 0;
          v216 = 0;
          v138 = WTF::Vector<WebCore::ContentExtensions::DFANode,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v199, 1uLL, (unint64_t)&v216);
          v139 = v199 + 12 * HIDWORD(v199);
          v140 = *(_QWORD *)v138;
          *(_DWORD *)(v139 + 8) = *((_DWORD *)v138 + 2);
          *(_QWORD *)v139 = v140;
          ++HIDWORD(v199);
          WebCore::ContentExtensions::addUniversalActionsToDFA((uint64_t)&v199, &v213);
          v221 = 0;
          v222 = 0;
          v216 = (WTF **)&v221;
          v217 = (WTF **)&v199;
          v218 = 0u;
          v219 = 0u;
          v220 = 0u;
          WebCore::ContentExtensions::DFABytecodeCompiler::compile((uint64_t **)&v216);
          (*(void (**)(_QWORD, _QWORD **))(*(_QWORD *)v229[0] + 40))(v229[0], &v221);
          v141 = (WTF *)v220;
          if ((_QWORD)v220)
          {
            *(_QWORD *)&v220 = 0;
            DWORD2(v220) = 0;
            WTF::fastFree(v141, v136);
          }
          v142 = (WTF *)v219;
          if ((_QWORD)v219)
          {
            *(_QWORD *)&v219 = 0;
            DWORD2(v219) = 0;
            WTF::fastFree(v142, v136);
          }
          v143 = (WTF *)v218;
          if ((_QWORD)v218)
          {
            *(_QWORD *)&v218 = 0;
            DWORD2(v218) = 0;
            WTF::fastFree(v143, v136);
          }
          v144 = (WTF *)v221;
          if (v221)
          {
            v221 = 0;
            LODWORD(v222) = 0;
            WTF::fastFree(v144, v136);
          }
          v145 = (WTF *)v202;
          if ((_QWORD)v202)
          {
            *(_QWORD *)&v202 = 0;
            DWORD2(v202) = 0;
            WTF::fastFree(v145, v136);
          }
          v146 = (WTF *)v201;
          if ((_QWORD)v201)
          {
            *(_QWORD *)&v201 = 0;
            DWORD2(v201) = 0;
            WTF::fastFree(v146, v136);
          }
          v147 = (WTF *)v200;
          if ((_QWORD)v200)
          {
            *(_QWORD *)&v200 = 0;
            DWORD2(v200) = 0;
            WTF::fastFree(v147, v136);
          }
          v148 = (WTF *)v199;
          if ((_QWORD)v199)
          {
            *(_QWORD *)&v199 = 0;
            DWORD2(v199) = 0;
            WTF::fastFree(v148, v136);
          }
        }
        WTF::Vector<WebCore::ContentExtensions::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v223, v136);
        v229[0] = v70;
        v228 = 0;
        v225 = &v228;
        v226 = &v183;
        v227 = v229;
        v223 = 0;
        v224 = 0;
        v149 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v149 = off_1E33953F8;
        v149[1] = &v223;
        v149[2] = &v225;
        *(_QWORD *)&v199 = v149;
        v150 = WebCore::ContentExtensions::CombinedURLFilters::processNFAs((uint64_t)v184, (void *)0x124F8, &v199);
        (*(void (**)(_QWORD *))(*v149 + 8))(v149);
        if (v150)
        {
          v151 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v151 = off_1E3395420;
          v151[1] = &v225;
          *(_QWORD *)&v199 = v151;
          WebCore::ContentExtensions::DFACombiner::combineDFAs((unsigned int *)&v223, 0x64u, &v199, v152);
          v154 = v199;
          *(_QWORD *)&v199 = 0;
          if (v154)
            (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
          if (!v228)
          {
            LODWORD(v203) = 0;
            v201 = 0u;
            v202 = 0u;
            v199 = 0u;
            v200 = 0u;
            LODWORD(v217) = 0;
            v216 = 0;
            v155 = WTF::Vector<WebCore::ContentExtensions::DFANode,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v199, 1uLL, (unint64_t)&v216);
            v156 = v199 + 12 * HIDWORD(v199);
            v157 = *(_QWORD *)v155;
            *(_DWORD *)(v156 + 8) = *((_DWORD *)v155 + 2);
            *(_QWORD *)v156 = v157;
            ++HIDWORD(v199);
            WebCore::ContentExtensions::addUniversalActionsToDFA((uint64_t)&v199, &v183);
            v221 = 0;
            v222 = 0;
            v216 = (WTF **)&v221;
            v217 = (WTF **)&v199;
            v218 = 0u;
            v219 = 0u;
            v220 = 0u;
            WebCore::ContentExtensions::DFABytecodeCompiler::compile((uint64_t **)&v216);
            (*(void (**)(_QWORD, _QWORD **))(*(_QWORD *)v229[0] + 48))(v229[0], &v221);
            v158 = (WTF *)v220;
            if ((_QWORD)v220)
            {
              *(_QWORD *)&v220 = 0;
              DWORD2(v220) = 0;
              WTF::fastFree(v158, v153);
            }
            v159 = (WTF *)v219;
            if ((_QWORD)v219)
            {
              *(_QWORD *)&v219 = 0;
              DWORD2(v219) = 0;
              WTF::fastFree(v159, v153);
            }
            v160 = (WTF *)v218;
            if ((_QWORD)v218)
            {
              *(_QWORD *)&v218 = 0;
              DWORD2(v218) = 0;
              WTF::fastFree(v160, v153);
            }
            v161 = (WTF *)v221;
            if (v221)
            {
              v221 = 0;
              LODWORD(v222) = 0;
              WTF::fastFree(v161, v153);
            }
            v162 = (WTF *)v202;
            if ((_QWORD)v202)
            {
              *(_QWORD *)&v202 = 0;
              DWORD2(v202) = 0;
              WTF::fastFree(v162, v153);
            }
            v163 = (WTF *)v201;
            if ((_QWORD)v201)
            {
              *(_QWORD *)&v201 = 0;
              DWORD2(v201) = 0;
              WTF::fastFree(v163, v153);
            }
            v164 = (WTF *)v200;
            if ((_QWORD)v200)
            {
              *(_QWORD *)&v200 = 0;
              DWORD2(v200) = 0;
              WTF::fastFree(v164, v153);
            }
            v165 = (WTF *)v199;
            if ((_QWORD)v199)
            {
              *(_QWORD *)&v199 = 0;
              DWORD2(v199) = 0;
              WTF::fastFree(v165, v153);
            }
          }
          WTF::Vector<WebCore::ContentExtensions::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v223, v153);
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 56))(v70);
          std::system_category();
          v167 = 0;
        }
        else
        {
LABEL_246:
          WTF::Vector<WebCore::ContentExtensions::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v223, v116);
          if ((_MergedGlobals_158 & 1) == 0)
          {
            qword_1ECE828E8 = (uint64_t)&off_1E3395448;
            _MergedGlobals_158 = 1;
          }
          v167 = 40;
        }
        goto LABEL_283;
      }
LABEL_296:
      if (HIDWORD(v196))
        HIDWORD(v196) = 0;
      v178 = v195;
      v70 = v180;
      if (v195)
      {
        v195 = 0;
        LODWORD(v196) = 0;
        WTF::fastFree(v178, v84);
      }
      goto LABEL_185;
    }
  }
  v94 = v93;
  if (v93 == 1)
  {
    WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add(&v215, (uint64_t *)&v216, (uint64_t)&v199);
    goto LABEL_159;
  }
  WTF::String::utf8();
  if ((_QWORD)v199)
    v169 = v199 + 16;
  else
    v169 = 0;
  v170 = "Only ASCII characters are supported in pattern.";
  switch(v94)
  {
    case 2:
      break;
    case 3:
LABEL_265:
      v170 = "Character class is not supported.";
      break;
    case 4:
LABEL_266:
      v170 = "Patterns cannot contain backreferences.";
      break;
    case 5:
LABEL_267:
      v170 = "Patterns cannot contain forward references.";
      break;
    case 6:
LABEL_268:
      v170 = "Start of line assertion can only appear as the first term in a filter.";
      break;
    case 7:
LABEL_273:
      v170 = "Word boundaries assertions are not supported yet.";
      break;
    case 8:
LABEL_274:
      v170 = "Builtins character class atoms are not supported yet.";
      break;
    case 9:
LABEL_269:
      v170 = "Groups are not supported yet.";
      break;
    case 10:
LABEL_275:
      v170 = "Disjunctions are not supported yet.";
      break;
    case 11:
LABEL_270:
      v170 = "The end of line assertion must be the last term in an expression.";
      break;
    case 12:
LABEL_276:
      v170 = "Empty pattern.";
      break;
    case 13:
LABEL_271:
      v170 = "Internal error in YARR.";
      break;
    case 14:
LABEL_272:
      v170 = "Arbitrary atom repetitions are not supported.";
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x195721D24);
  }
LABEL_277:
  WTF::dataLogF((WTF *)"Error while parsing %s: %s\n", v168, v169, v170);
  v171 = (WTF *)v199;
  *(_QWORD *)&v199 = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 1)
      WTF::fastFree(v171, v166);
    else
      --*(_DWORD *)v171;
  }
  if ((_MergedGlobals_158 & 1) == 0)
  {
    qword_1ECE828E8 = (uint64_t)&off_1E3395448;
    _MergedGlobals_158 = 1;
  }
  v167 = 18;
LABEL_283:
  if (v183)
    WTF::fastFree((WTF *)(v183 - 16), v166);
  WebCore::ContentExtensions::CombinedURLFilters::~CombinedURLFilters((WebCore::ContentExtensions::CombinedURLFilters *)v184, v166);
  if (v213)
    WTF::fastFree((WTF *)(v213 - 16), v172);
  WebCore::ContentExtensions::CombinedURLFilters::~CombinedURLFilters((WebCore::ContentExtensions::CombinedURLFilters *)&v185, v172);
  if (v215)
    WTF::fastFree((WTF *)(v215 - 16), v173);
  WebCore::ContentExtensions::CombinedURLFilters::~CombinedURLFilters((WebCore::ContentExtensions::CombinedURLFilters *)&v190, v173);
  v175 = v195;
  if (v195)
  {
    v195 = 0;
    LODWORD(v196) = 0;
    WTF::fastFree(v175, v174);
  }
  v176 = v197;
  if (v197)
  {
    v197 = 0;
    LODWORD(v198) = 0;
    WTF::fastFree(v176, v174);
  }
  return v167;
}

uint64_t *WebCore::ContentExtensions::contentExtensionErrorCategory(WebCore::ContentExtensions *this)
{
  if ((_MergedGlobals_158 & 1) == 0)
  {
    qword_1ECE828E8 = (uint64_t)&off_1E3395448;
    _MergedGlobals_158 = 1;
  }
  return &qword_1ECE828E8;
}

BOOL WebCore::ContentExtensions::isValidCSSSelector(WebCore::ContentExtensions *this, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  int v11;
  WTF::StringImpl *v13;
  unsigned __int8 v14;
  char v15;
  _BYTE v16[9];
  WTF::StringImpl *v17[6];
  uint64_t v18;
  unsigned int v19;

  WebCore::ProcessWarming::initializeNames(this);
  v17[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v17);
  v4 = v17[0];
  if (v17[0])
    *(_DWORD *)v17[0] += 2;
  v5 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v5 != -1)
  {
    v13 = (WTF::StringImpl *)&v15;
    *(_QWORD *)v16 = &v13;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v6 = v17[0];
  v17[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v3);
      if (!v4)
        goto LABEL_10;
      goto LABEL_9;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (v4)
LABEL_9:
    *(_DWORD *)v4 += 2;
LABEL_10:
  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v17, (unsigned int **)this, 0, 0);
  v16[0] = 1;
  *(_QWORD *)&v16[1] = 0;
  WebCore::parseCSSSelectorList(v18, v18 + 24 * v19, v16, 0, 0, (uint64_t)&v13);
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v17, v7);
  v9 = v14;
  if (v14)
  {
    v8 = v13;
    v13 = 0;
    if (v8)
      WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v13, v8);
  }
  if (v4)
  {
    v10 = *(_DWORD *)v4 - 2;
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, v8);
      v10 = *(_DWORD *)v4;
    }
    else
    {
      *(_DWORD *)v4 = v10;
    }
    v11 = v10 - 2;
    if (v11)
      *(_DWORD *)v4 = v11;
    else
      WTF::StringImpl::destroy(v4, v8);
  }
  return v9 != 0;
}

uint64_t WebCore::ContentExtensions::parseRuleList@<X0>(uint64_t a1@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v17;
  WTF::JSONImpl::ObjectBase **v18;
  const char *v19;
  uint64_t *v20;
  WTF::JSONImpl::ObjectBase *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::JSONImpl::ObjectBase *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::JSONImpl::ObjectBase *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  const char *v39;
  int v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  WTF::JSONImpl::ObjectBase *v47;
  WTF::StringImpl *v48;
  unsigned __int16 Boolean;
  WTF::StringImpl *v50;
  WTF::JSONImpl::ObjectBase *v51;
  WTF::StringImpl *v52;
  unsigned __int16 v53;
  WTF::StringImpl *v54;
  WTF::JSONImpl::ObjectBase *v55;
  WTF::StringImpl *v56;
  unsigned __int16 v57;
  WTF::StringImpl *v58;
  WTF::JSONImpl::ObjectBase *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  unsigned int v62;
  uint64_t v63;
  WTF::JSONImpl::Value **v64;
  uint64_t v65;
  unint64_t v66;
  const char *v67;
  const char *v68;
  unint64_t v69;
  uint64_t ResourceType;
  uint64_t v71;
  WTF::StringImpl *v72;
  char *v73;
  unint64_t v74;
  WTF *v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  int v91;
  int v92;
  WTF *v93;
  WTF::StringImpl *v94;
  int v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  WTF::JSONImpl::ObjectBase *v101;
  WTF::StringImpl *v102;
  unsigned int v103;
  uint64_t v104;
  WTF::JSONImpl::Value **v105;
  uint64_t v106;
  unint64_t v107;
  unsigned __int8 *v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  char v112;
  WTF::StringImpl *v113;
  int v114;
  WTF::JSONImpl::ObjectBase *v115;
  WTF::StringImpl *v116;
  unsigned int v117;
  WTF *v118;
  WTF::StringImpl *v119;
  uint64_t v120;
  WTF::JSONImpl::Value **v121;
  uint64_t v122;
  unint64_t v123;
  unsigned __int8 *v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  char v128;
  WTF::StringImpl *v129;
  int v130;
  int v131;
  uint64_t (*v132)();
  uint64_t v133;
  WTF::StringImpl *v134;
  int v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF *v143;
  uint64_t v144;
  WTF *v146;
  uint64_t v147;
  WTF::JSONImpl::ObjectBase **v148;
  __int128 v149;
  unsigned int v150;
  WTF *v151;
  uint64_t v152;
  _DWORD *v153;
  WTF::StringImpl *v154[2];
  WTF *v155;
  uint64_t v156;
  unsigned int v157;
  WTF::StringImpl *v158;
  _BYTE v159[96];
  int v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  char v163;
  __int128 v164;
  WTF *v165;
  unsigned int v166;
  unsigned int v167;
  char v168[112];
  int v169;
  int v170;
  char v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF *v174;
  unint64_t v175;
  _BYTE v176[72];
  int v177;
  unsigned int v178;
  int v179;
  _BYTE v180[32];
  uint64_t v181;
  int v182;
  unsigned int v183;
  int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  WTF::JSONImpl::ObjectBase *v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  char v197;
  WTF::StringImpl *v198;
  _BYTE v199[96];
  int v200;
  int v201;
  uint64_t v202;

  v202 = *MEMORY[0x1E0C80C00];
  WTF::JSONImpl::Value::parseJSON();
  v5 = v153;
  if (!v153)
  {
    if ((_MergedGlobals_158 & 1) == 0)
    {
      qword_1ECE828E8 = (uint64_t)&off_1E3395448;
      _MergedGlobals_158 = 1;
    }
    *(_QWORD *)&v149 = 1;
    *((_QWORD *)&v149 + 1) = &qword_1ECE828E8;
    v150 = 1;
    goto LABEL_8;
  }
  v6 = v153[1];
  if (v6 >= 6)
  {
    if (v6 != 6)
    {
      __break(0xC471u);
      JUMPOUT(0x1957239E0);
    }
    ++*v153;
    v151 = 0;
    v152 = 0;
    v14 = v5[7];
    if (v14 >= 0x249F1)
    {
      if ((_MergedGlobals_158 & 1) == 0)
      {
        qword_1ECE828E8 = (uint64_t)&off_1E3395448;
        _MergedGlobals_158 = 1;
      }
      *(_QWORD *)&v149 = 13;
      *((_QWORD *)&v149 + 1) = &qword_1ECE828E8;
      goto LABEL_381;
    }
    if (v14)
    {
      v15 = 152 * v14;
      v16 = (WTF *)WTF::fastMalloc((WTF *)(152 * v14));
      LODWORD(v152) = v15 / 0x98;
      v151 = v16;
      v17 = v5[7];
      if ((_DWORD)v17)
      {
        v18 = (WTF::JSONImpl::ObjectBase **)*((_QWORD *)v5 + 2);
        v148 = &v18[v17];
        v19 = "trigger";
        v20 = &qword_1ECE82000;
        while (1)
        {
          v21 = *v18;
          v22 = *((_DWORD *)*v18 + 1);
          if (v22 != 5)
          {
            if (v22 > 6 || v22 == 5)
            {
              __break(0xC471u);
              JUMPOUT(0x195723A00);
            }
            if ((v20[282] & 1) == 0)
            {
              qword_1ECE828E8 = (uint64_t)&off_1E3395448;
              _MergedGlobals_158 = 1;
            }
            *(_QWORD *)&v149 = 4;
            *((_QWORD *)&v149 + 1) = &qword_1ECE828E8;
LABEL_381:
            v150 = 1;
LABEL_384:
            v146 = v151;
            if (HIDWORD(v152))
              WTF::VectorDestructor<true,WebCore::ContentExtensions::ContentExtensionRule>::destruct(v151, (WTF *)((char *)v151 + 152 * HIDWORD(v152)));
            if (v146)
              WTF::fastFree(v146, v4);
            if (*v5 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v5;
            goto LABEL_8;
          }
          ++*(_DWORD *)v21;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::JSONImpl::ObjectBase::getObject(v21, (const WTF::String *)v180);
          v24 = *(WTF::StringImpl **)v180;
          *(_QWORD *)v180 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = v188;
          if (!v188)
          {
            if ((v20[282] & 1) == 0)
            {
              qword_1ECE828E8 = (uint64_t)&off_1E3395448;
              _MergedGlobals_158 = 1;
            }
            v154[0] = (WTF::StringImpl *)6;
            v154[1] = (WTF::StringImpl *)&qword_1ECE828E8;
            v30 = &qword_1ECE828E8;
            v31 = 6;
            v157 = 1;
            goto LABEL_55;
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v172 = *(WTF::StringImpl **)v180;
          WTF::JSONImpl::ObjectBase::getString(v25, (const WTF::String *)&v172);
          v27 = v172;
          v172 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v26);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = v198;
          if (!v198 || !*((_DWORD *)v198 + 1))
          {
            if ((v20[282] & 1) == 0)
            {
              qword_1ECE828E8 = (uint64_t)&off_1E3395448;
              _MergedGlobals_158 = 1;
            }
            v154[0] = (WTF::StringImpl *)7;
            v154[1] = (WTF::StringImpl *)&qword_1ECE828E8;
            v157 = 1;
            goto LABEL_43;
          }
          *(_DWORD *)&v180[7] = 0;
          *(_QWORD *)v180 = 0;
          memset(&v180[12], 0, 20);
          *(_DWORD *)v198 += 2;
          *(_QWORD *)v180 = v28;
          v47 = v188;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v158 = v172;
          Boolean = WTF::JSONImpl::ObjectBase::getBoolean(v47, (const WTF::String *)&v158);
          v50 = v158;
          v158 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, v48);
            else
              *(_DWORD *)v50 -= 2;
          }
          if (Boolean >= 0x100u)
            v180[8] = Boolean;
          v51 = v188;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v158 = v172;
          v53 = WTF::JSONImpl::ObjectBase::getBoolean(v51, (const WTF::String *)&v158);
          v54 = v158;
          v158 = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v52);
            else
              *(_DWORD *)v54 -= 2;
          }
          if (v53 >= 0x100u)
            v180[9] = v53;
          v55 = v188;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v158 = v172;
          v57 = WTF::JSONImpl::ObjectBase::getBoolean(v55, (const WTF::String *)&v158);
          v58 = v158;
          v158 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, v56);
            else
              *(_DWORD *)v58 -= 2;
          }
          if (v57 >= 0x100u)
            v180[10] = v57;
          v59 = v188;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v154[0] = v172;
          WTF::JSONImpl::ObjectBase::getValue(v59, (const WTF::String *)v154);
          v60 = v154[0];
          v154[0] = 0;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
              WTF::StringImpl::destroy(v60, v26);
            else
              *(_DWORD *)v60 -= 2;
          }
          v61 = v158;
          if (!v158)
            goto LABEL_222;
          v62 = *((_DWORD *)v158 + 1);
          if (v62 < 6)
            goto LABEL_267;
          if (v62 != 6)
          {
            __break(0xC471u);
            JUMPOUT(0x195723A60);
          }
          ++*(_DWORD *)v158;
          v63 = *((unsigned int *)v61 + 7);
          if (!(_DWORD)v63)
          {
LABEL_194:
            std::system_category();
            v95 = 1;
            goto LABEL_216;
          }
          v64 = (WTF::JSONImpl::Value **)*((_QWORD *)v61 + 2);
          v65 = 8 * v63;
          while (1)
          {
            WTF::JSONImpl::Value::asString(*v64);
            v66 = (unint64_t)v172;
            v67 = v19;
            if (v172)
            {
              v68 = (const char *)*((_QWORD *)v172 + 1);
              v66 = *((unsigned int *)v172 + 1);
              v69 = ((unint64_t)*((unsigned int *)v172 + 4) >> 2) & 1;
            }
            else
            {
              v68 = 0;
              v69 = 1;
            }
            ResourceType = WebCore::ContentExtensions::readResourceType(v68, v66 | (v69 << 32));
            v71 = ResourceType & 0xFF00000000;
            if ((ResourceType & 0xFF00000000) != 0)
            {
              *(_DWORD *)&v180[12] |= ResourceType;
            }
            else if ((_MergedGlobals_158 & 1) == 0)
            {
              qword_1ECE828E8 = (uint64_t)&off_1E3395448;
              _MergedGlobals_158 = 1;
            }
            v72 = v172;
            v172 = 0;
            if (!v72)
              goto LABEL_108;
            if (*(_DWORD *)v72 != 2)
            {
              *(_DWORD *)v72 -= 2;
LABEL_108:
              if (!v71)
                break;
              goto LABEL_109;
            }
            WTF::StringImpl::destroy(v72, v26);
            if (!v71)
              break;
LABEL_109:
            ++v64;
            v65 -= 8;
            v19 = v67;
            if (!v65)
              goto LABEL_194;
          }
          v95 = 0;
          v154[0] = (WTF::StringImpl *)9;
          v154[1] = (WTF::StringImpl *)&qword_1ECE828E8;
          v157 = 1;
          v19 = v67;
LABEL_216:
          if (*(_DWORD *)v61 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v61;
          v61 = v158;
          v158 = 0;
          if (!v95)
            goto LABEL_280;
          v20 = &qword_1ECE82000;
          if (v61)
          {
            if (*(_DWORD *)v61 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v61;
          }
LABEL_222:
          v101 = v188;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v162 = v172;
          WTF::JSONImpl::ObjectBase::getValue(v101, (const WTF::String *)&v162);
          v102 = v162;
          v162 = 0;
          if (v102)
          {
            if (*(_DWORD *)v102 == 2)
              WTF::StringImpl::destroy(v102, v26);
            else
              *(_DWORD *)v102 -= 2;
          }
          v61 = v158;
          if (v158)
          {
            v103 = *((_DWORD *)v158 + 1);
            if (v103 >= 6)
            {
              if (v103 != 6)
              {
                __break(0xC471u);
                JUMPOUT(0x195723A80);
              }
              ++*(_DWORD *)v158;
              v104 = *((unsigned int *)v61 + 7);
              if (!(_DWORD)v104)
              {
LABEL_250:
                std::system_category();
                v114 = 1;
                goto LABEL_256;
              }
              v105 = (WTF::JSONImpl::Value **)*((_QWORD *)v61 + 2);
              v106 = 8 * v104;
              while (2)
              {
                WTF::JSONImpl::Value::asString(*v105);
                v107 = (unint64_t)v172;
                if (v172)
                {
                  v108 = (unsigned __int8 *)*((_QWORD *)v172 + 1);
                  v107 = *((unsigned int *)v172 + 1);
                  v109 = ((unint64_t)*((unsigned int *)v172 + 4) >> 2) & 1;
                }
                else
                {
                  v108 = 0;
                  v109 = 1;
                }
                v110 = v107 | (v109 << 32);
                if ((WTF::operator==(v108, v110, "first-party", 12) & 1) != 0)
                {
                  v111 = 4096;
                  goto LABEL_237;
                }
                if ((WTF::operator==(v108, v110, "third-party", 12) & 1) != 0)
                {
                  v111 = 0x2000;
LABEL_237:
                  v112 = 0;
                  *(_DWORD *)&v180[12] |= v111;
                }
                else
                {
                  v112 = 1;
                  if ((_MergedGlobals_158 & 1) == 0)
                  {
                    qword_1ECE828E8 = (uint64_t)&off_1E3395448;
                    _MergedGlobals_158 = 1;
                  }
                }
                v113 = v172;
                v172 = 0;
                if (v113)
                {
                  if (*(_DWORD *)v113 != 2)
                  {
                    *(_DWORD *)v113 -= 2;
                    goto LABEL_243;
                  }
                  WTF::StringImpl::destroy(v113, v26);
                  if ((v112 & 1) != 0)
                  {
LABEL_255:
                    v114 = 0;
                    v154[0] = (WTF::StringImpl *)9;
                    v154[1] = (WTF::StringImpl *)&qword_1ECE828E8;
                    v157 = 1;
LABEL_256:
                    v19 = "trigger";
                    if (*(_DWORD *)v61 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*(_DWORD *)v61;
                    v61 = v158;
                    v158 = 0;
                    if (v114)
                    {
                      v20 = &qword_1ECE82000;
                      if (v61)
                      {
                        if (*(_DWORD *)v61 == 1)
                          WTF::JSONImpl::Value::operator delete();
                        else
                          --*(_DWORD *)v61;
                      }
                      goto LABEL_262;
                    }
LABEL_280:
                    v20 = &qword_1ECE82000;
                    if (!v61)
                      goto LABEL_272;
LABEL_270:
                    if (*(_DWORD *)v61 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*(_DWORD *)v61;
                    goto LABEL_272;
                  }
                }
                else
                {
LABEL_243:
                  if ((v112 & 1) != 0)
                    goto LABEL_255;
                }
                ++v105;
                v106 -= 8;
                if (!v106)
                  goto LABEL_250;
                continue;
              }
            }
LABEL_267:
            if ((v20[282] & 1) == 0)
            {
              qword_1ECE828E8 = (uint64_t)&off_1E3395448;
              _MergedGlobals_158 = 1;
            }
            v154[0] = (WTF::StringImpl *)8;
            v154[1] = (WTF::StringImpl *)&qword_1ECE828E8;
            v157 = 1;
            v158 = 0;
            goto LABEL_270;
          }
LABEL_262:
          v115 = v188;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v162 = v172;
          WTF::JSONImpl::ObjectBase::getValue(v115, (const WTF::String *)&v162);
          v116 = v162;
          v162 = 0;
          if (v116)
          {
            if (*(_DWORD *)v116 == 2)
              WTF::StringImpl::destroy(v116, v26);
            else
              *(_DWORD *)v116 -= 2;
          }
          v61 = v158;
          if (!v158)
          {
LABEL_324:
            v172 = (WTF::StringImpl *)&v188;
            v173 = (WTF::StringImpl *)v180;
            v134 = (WTF::StringImpl *)WebCore::ContentExtensions::loadTrigger(WTF::JSONImpl::Object const&)::$_0::operator()((WTF::JSONImpl::ObjectBase ***)&v172, (uint64_t)"if-domain", 10, (WTF::JSONImpl::ObjectBase **)WebCore::ContentExtensions::getDomainList, (char *)0x20000);
            if ((_DWORD)v134
              || (v134 = (WTF::StringImpl *)WebCore::ContentExtensions::loadTrigger(WTF::JSONImpl::Object const&)::$_0::operator()((WTF::JSONImpl::ObjectBase ***)&v172, (uint64_t)"unless-domain", 14, (WTF::JSONImpl::ObjectBase **)WebCore::ContentExtensions::getDomainList, (char *)0x40000), (_DWORD)v134)|| (v134 = (WTF::StringImpl *)WebCore::ContentExtensions::loadTrigger(WTF::JSONImpl::Object const&)::$_0::operator()((WTF::JSONImpl::ObjectBase ***)&v172, (uint64_t)"if-top-url", 11, (WTF::JSONImpl::ObjectBase **)WebCore::ContentExtensions::getStringList, (char *)0x20000), (_DWORD)v134))
            {
              v154[0] = v134;
              v154[1] = v26;
              v135 = 1;
            }
            else
            {
              v136 = (WTF::StringImpl *)WebCore::ContentExtensions::loadTrigger(WTF::JSONImpl::Object const&)::$_0::operator()((WTF::JSONImpl::ObjectBase ***)&v172, (uint64_t)"unless-top-url", 15, (WTF::JSONImpl::ObjectBase **)WebCore::ContentExtensions::getStringList, (char *)0x40000);
              if ((_DWORD)v136
                || (v136 = (WTF::StringImpl *)WebCore::ContentExtensions::loadTrigger(WTF::JSONImpl::Object const&)::$_0::operator()((WTF::JSONImpl::ObjectBase ***)&v172, (uint64_t)"if-frame-url", 13, (WTF::JSONImpl::ObjectBase **)WebCore::ContentExtensions::getStringList, (char *)0x60000), (_DWORD)v136))
              {
                v154[0] = v136;
                v154[1] = v26;
                v135 = 1;
              }
              else
              {
                v135 = 0;
                *(_OWORD *)v154 = *(_OWORD *)v180;
                v143 = *(WTF **)&v180[16];
                *(_QWORD *)v180 = 0;
                *(_QWORD *)&v180[16] = 0;
                v155 = v143;
                v144 = *(_QWORD *)&v180[24];
                *(_QWORD *)&v180[24] = 0;
                v156 = v144;
              }
              v20 = &qword_1ECE82000;
            }
            v157 = v135;
            goto LABEL_272;
          }
          v117 = *((_DWORD *)v158 + 1);
          if (v117 < 6)
            goto LABEL_267;
          if (v117 != 6)
          {
            __break(0xC471u);
            JUMPOUT(0x195723AA0);
          }
          ++*(_DWORD *)v158;
          v120 = *((unsigned int *)v61 + 7);
          if (!(_DWORD)v120)
          {
LABEL_305:
            std::system_category();
            v130 = 1;
            goto LABEL_318;
          }
          v121 = (WTF::JSONImpl::Value **)*((_QWORD *)v61 + 2);
          v122 = 8 * v120;
          while (2)
          {
            WTF::JSONImpl::Value::asString(*v121);
            v123 = (unint64_t)v172;
            if (v172)
            {
              v124 = (unsigned __int8 *)*((_QWORD *)v172 + 1);
              v123 = *((unsigned int *)v172 + 1);
              v125 = ((unint64_t)*((unsigned int *)v172 + 4) >> 2) & 1;
            }
            else
            {
              v124 = 0;
              v125 = 1;
            }
            v126 = v123 | (v125 << 32);
            if ((WTF::operator==(v124, v126, "top-frame", 10) & 1) != 0)
            {
              v127 = 0x4000;
              goto LABEL_292;
            }
            if ((WTF::operator==(v124, v126, "child-frame", 12) & 1) != 0)
            {
              v127 = 0x8000;
LABEL_292:
              v128 = 0;
              *(_DWORD *)&v180[12] |= v127;
            }
            else
            {
              v128 = 1;
              if ((_MergedGlobals_158 & 1) == 0)
              {
                qword_1ECE828E8 = (uint64_t)&off_1E3395448;
                _MergedGlobals_158 = 1;
              }
            }
            v129 = v172;
            v172 = 0;
            if (!v129)
            {
LABEL_298:
              if ((v128 & 1) != 0)
                goto LABEL_317;
LABEL_299:
              ++v121;
              v122 -= 8;
              if (!v122)
                goto LABEL_305;
              continue;
            }
            break;
          }
          if (*(_DWORD *)v129 != 2)
          {
            *(_DWORD *)v129 -= 2;
            goto LABEL_298;
          }
          WTF::StringImpl::destroy(v129, v26);
          if ((v128 & 1) == 0)
            goto LABEL_299;
LABEL_317:
          v130 = 0;
          v154[0] = (WTF::StringImpl *)9;
          v154[1] = (WTF::StringImpl *)&qword_1ECE828E8;
          v157 = 1;
LABEL_318:
          if (*(_DWORD *)v61 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v61;
          v61 = v158;
          v158 = 0;
          if (v130)
          {
            v20 = &qword_1ECE82000;
            v19 = "trigger";
            if (v61)
            {
              if (*(_DWORD *)v61 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v61;
            }
            goto LABEL_324;
          }
          v20 = &qword_1ECE82000;
          v19 = "trigger";
          if (v61)
            goto LABEL_270;
LABEL_272:
          v118 = *(WTF **)&v180[16];
          if (*(_DWORD *)&v180[28])
          {
            v139 = 8 * *(unsigned int *)&v180[28];
            do
            {
              v140 = *(WTF::StringImpl **)v118;
              *(_QWORD *)v118 = 0;
              if (v140)
              {
                if (*(_DWORD *)v140 == 2)
                  WTF::StringImpl::destroy(v140, v26);
                else
                  *(_DWORD *)v140 -= 2;
              }
              v118 = (WTF *)((char *)v118 + 8);
              v139 -= 8;
            }
            while (v139);
            v118 = *(WTF **)&v180[16];
            v20 = &qword_1ECE82000;
            if (*(_QWORD *)&v180[16])
              goto LABEL_357;
          }
          else
          {
            if (!*(_QWORD *)&v180[16])
              goto LABEL_274;
LABEL_357:
            *(_QWORD *)&v180[16] = 0;
            *(_DWORD *)&v180[24] = 0;
            WTF::fastFree(v118, v26);
          }
LABEL_274:
          v119 = *(WTF::StringImpl **)v180;
          *(_QWORD *)v180 = 0;
          if (v119)
          {
            if (*(_DWORD *)v119 == 2)
              WTF::StringImpl::destroy(v119, v26);
            else
              *(_DWORD *)v119 -= 2;
          }
          v28 = v198;
LABEL_43:
          v198 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v26);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = v188;
          v188 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v29;
          }
          if (!v157)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::ObjectBase::getObject(v21, (const WTF::String *)v180);
            v35 = *(WTF::StringImpl **)v180;
            *(_QWORD *)v180 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v34);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = v162;
            if (!v162)
            {
              if ((v20[282] & 1) == 0)
              {
                qword_1ECE828E8 = (uint64_t)&off_1E3395448;
                _MergedGlobals_158 = 1;
              }
              *(_QWORD *)&v189 = 14;
              *((_QWORD *)&v189 + 1) = &qword_1ECE828E8;
              v196 = 1;
              v76 = &qword_1ECE828E8;
              v77 = 14;
              v197 = 1;
              goto LABEL_150;
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v172 = *(WTF::StringImpl **)v180;
            WTF::JSONImpl::ObjectBase::getString(v36, (const WTF::String *)&v172);
            v38 = v172;
            v172 = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2)
                WTF::StringImpl::destroy(v38, v37);
              else
                *(_DWORD *)v38 -= 2;
            }
            if (MEMORY[0x19AEA53F4](v161, "block", 5))
            {
              LOBYTE(v189) = 0;
              v195 = 0;
              goto LABEL_138;
            }
            if (MEMORY[0x19AEA53F4](v161, "ignore-previous-rules", 21))
            {
              LOBYTE(v189) = 0;
              v78 = 4;
              goto LABEL_132;
            }
            if (MEMORY[0x19AEA53F4](v161, "block-cookies", 13))
            {
              LOBYTE(v189) = 0;
              v195 = 1;
              goto LABEL_138;
            }
            if (MEMORY[0x19AEA53F4](v161, "css-display-none", 16))
            {
              v89 = v162;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              WTF::JSONImpl::ObjectBase::getString(v89, (const WTF::String *)&v172);
              v90 = v172;
              v172 = 0;
              if (v90)
              {
                if (*(_DWORD *)v90 == 2)
                  WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v4);
                else
                  *(_DWORD *)v90 -= 2;
              }
              if (*(_QWORD *)v180)
              {
                if (WebCore::ContentExtensions::isValidCSSSelector((WebCore::ContentExtensions *)v180, (const WTF::String *)v4))
                {
                  v91 = 0;
                  *(_QWORD *)&v189 = *(_QWORD *)v180;
                  v92 = 2;
                  goto LABEL_201;
                }
                LOBYTE(v188) = 0;
                v197 = 0;
                v99 = *(WTF::StringImpl **)v180;
                *(_QWORD *)v180 = 0;
                if (v99)
                {
                  if (*(_DWORD *)v99 == 2)
                    WTF::StringImpl::destroy(v99, (WTF::StringImpl *)v4);
                  else
                    *(_DWORD *)v99 -= 2;
                }
LABEL_140:
                v79 = v161;
                v161 = 0;
                if (v79)
                {
                  if (*(_DWORD *)v79 == 2)
                    WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v4);
                  else
                    *(_DWORD *)v79 -= 2;
                }
                v80 = v162;
                v162 = 0;
                if (v80)
                {
                  if (*(_DWORD *)v80 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v80;
                }
                if (!v197)
                {
                  LOBYTE(v164) = 0;
                  v171 = 0;
                  goto LABEL_153;
                }
                if (v196)
                {
                  if (v196 != 1)
                    goto LABEL_391;
                  v76 = (uint64_t *)*((_QWORD *)&v189 + 1);
                  v77 = v189;
LABEL_150:
                  *(_QWORD *)&v164 = v77;
                  *((_QWORD *)&v164 + 1) = v76;
                  v170 = 1;
                  v81 = 1;
                  v171 = 1;
LABEL_151:
                  ((void (*)(_BYTE *, __int128 *))off_1E3395318[v81])(v180, &v189);
LABEL_153:
                  v32 = v157;
                  if (v157 != -1)
                    goto LABEL_56;
                  goto LABEL_57;
                }
                if (v157)
                  goto LABEL_391;
                v82 = v154[0];
                v83 = v154[1];
                v172 = v154[0];
                v173 = v154[1];
                v84 = v155;
                v154[0] = 0;
                v174 = v155;
                v85 = v156;
                v86 = HIDWORD(v156);
                v155 = 0;
                v156 = 0;
                v175 = __PAIR64__(v86, v85);
                v176[0] = 0;
                v179 = -1;
                v87 = v195;
                if (v195 != -1)
                {
                  ((void (*)(WTF::StringImpl **, _BYTE *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS7_18BlockCookiesActionENS7_28CSSDisplayNoneSelectorActionENS7_12NotifyActionENS7_25IgnorePreviousRulesActionENS7_15MakeHTTPSActionENS7_19ModifyHeadersActionENS7_14RedirectActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v195])(&v198, v176, &v189);
                  v179 = v87;
                  v82 = v172;
                  v83 = v173;
                  v84 = v174;
                  v85 = v175;
                  v86 = HIDWORD(v175);
                }
                *(_QWORD *)v180 = v82;
                *(_QWORD *)&v180[8] = v83;
                v172 = 0;
                v174 = 0;
                v175 = 0;
                *(_QWORD *)&v180[16] = v84;
                *(_DWORD *)&v180[24] = v85;
                *(_DWORD *)&v180[28] = v86;
                LOBYTE(v181) = 0;
                v186 = -1;
                if ((_DWORD)v87 != -1)
                {
                  ((void (*)(WTF::StringImpl **, uint64_t *, _BYTE *))off_1E33952A8[v87])(&v198, &v181, v176);
                  v186 = v87;
                  v82 = *(WTF::StringImpl **)v180;
                  v83 = *(WTF::StringImpl **)&v180[8];
                  v84 = *(WTF **)&v180[16];
                  v85 = *(_DWORD *)&v180[24];
                  v86 = *(_DWORD *)&v180[28];
                }
                v187 = 0;
                *(_QWORD *)&v164 = v82;
                *((_QWORD *)&v164 + 1) = v83;
                *(_QWORD *)v180 = 0;
                *(_QWORD *)&v180[16] = 0;
                v165 = v84;
                *(_QWORD *)&v180[24] = 0;
                v166 = v85;
                v167 = v86;
                v168[0] = 0;
                v170 = -1;
                v169 = -1;
                if ((_DWORD)v87 == -1)
                {
                  v88 = 0;
                  v170 = 0;
                  v171 = 1;
                  v20 = &qword_1ECE82000;
                }
                else
                {
                  ((void (*)(WTF::StringImpl **, char *, uint64_t *))off_1E33952A8[v87])(&v198, v168, &v181);
                  v88 = v187;
                  v169 = v87;
                  v170 = 0;
                  v171 = 1;
                  v20 = &qword_1ECE82000;
                  if (v187 == -1)
                  {
LABEL_174:
                    v187 = -1;
                    if (v179 != -1)
                      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3394EA8[v179])(&v198, v176);
                    v179 = -1;
                    v93 = v174;
                    if (HIDWORD(v175))
                    {
                      v141 = 8 * HIDWORD(v175);
                      do
                      {
                        v142 = *(WTF::StringImpl **)v93;
                        *(_QWORD *)v93 = 0;
                        if (v142)
                        {
                          if (*(_DWORD *)v142 == 2)
                            WTF::StringImpl::destroy(v142, (WTF::StringImpl *)v4);
                          else
                            *(_DWORD *)v142 -= 2;
                        }
                        v93 = (WTF *)((char *)v93 + 8);
                        v141 -= 8;
                      }
                      while (v141);
                      v93 = v174;
                      v20 = &qword_1ECE82000;
                      if (v174)
                        goto LABEL_369;
                    }
                    else
                    {
                      if (!v174)
                        goto LABEL_178;
LABEL_369:
                      v174 = 0;
                      LODWORD(v175) = 0;
                      WTF::fastFree(v93, v4);
                    }
LABEL_178:
                    v94 = v172;
                    v172 = 0;
                    if (v94)
                    {
                      if (*(_DWORD *)v94 == 2)
                        WTF::StringImpl::destroy(v94, (WTF::StringImpl *)v4);
                      else
                        *(_DWORD *)v94 -= 2;
                    }
                    if (v197)
                    {
                      v81 = v196;
                      if (v196 != 0xFFFFFFFFLL)
                        goto LABEL_151;
                    }
                    goto LABEL_153;
                  }
                }
                ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3395308[v88])(&v198, v180);
                goto LABEL_174;
              }
              if ((v20[282] & 1) == 0)
              {
                qword_1ECE828E8 = (uint64_t)&off_1E3395448;
                _MergedGlobals_158 = 1;
              }
              v98 = 16;
LABEL_205:
              *(_QWORD *)&v189 = v98;
              *((_QWORD *)&v189 + 1) = &qword_1ECE828E8;
              v91 = 1;
              goto LABEL_206;
            }
            if (MEMORY[0x19AEA53F4](v161, "make-https", 10))
            {
              LOBYTE(v189) = 0;
              v78 = 5;
LABEL_132:
              v195 = v78;
LABEL_138:
              v196 = 0;
              goto LABEL_139;
            }
            if (MEMORY[0x19AEA53F4](v161, "notify", 6))
            {
              v96 = v162;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              WTF::JSONImpl::ObjectBase::getString(v96, (const WTF::String *)&v172);
              v97 = v172;
              v172 = 0;
              if (v97)
              {
                if (*(_DWORD *)v97 == 2)
                  WTF::StringImpl::destroy(v97, (WTF::StringImpl *)v4);
                else
                  *(_DWORD *)v97 -= 2;
              }
              if (!*(_QWORD *)v180)
              {
                if ((v20[282] & 1) == 0)
                {
                  qword_1ECE828E8 = (uint64_t)&off_1E3395448;
                  _MergedGlobals_158 = 1;
                }
                v98 = 17;
                goto LABEL_205;
              }
              v91 = 0;
              *(_QWORD *)&v189 = *(_QWORD *)v180;
              v92 = 3;
LABEL_201:
              v195 = v92;
LABEL_206:
              v196 = v91;
LABEL_139:
              v197 = 1;
              goto LABEL_140;
            }
            if (!MEMORY[0x19AEA53F4](v161, "redirect", 8))
            {
              if (MEMORY[0x19AEA53F4](v161, "modify-headers", 14))
              {
                WebCore::ContentExtensions::ModifyHeadersAction::parse(v162, (uint64_t)v180);
                if (v183)
                {
                  if (v183 != 1)
                    goto LABEL_391;
                  v189 = *(_OWORD *)v180;
                }
                else
                {
                  v137 = *(_QWORD *)&v180[8];
                  memset(&v180[8], 0, 24);
                  LOBYTE(v189) = v180[0];
                  *((_QWORD *)&v189 + 1) = v137;
                  v190 = *(_QWORD *)&v180[16];
                  v191 = *(_QWORD *)&v180[24];
                  v138 = v181;
                  v181 = 0;
                  v192 = v138;
                  v193 = v182;
                  v195 = 6;
                }
                v196 = v183;
                v197 = 1;
                ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33952F8[v183])(&v172, v180);
              }
              else
              {
                if ((_MergedGlobals_158 & 1) == 0)
                {
                  qword_1ECE828E8 = (uint64_t)&off_1E3395448;
                  _MergedGlobals_158 = 1;
                }
                *(_QWORD *)&v189 = 15;
                *((_QWORD *)&v189 + 1) = &qword_1ECE828E8;
                v196 = 1;
                v197 = 1;
              }
              v20 = &qword_1ECE82000;
              goto LABEL_140;
            }
            WebCore::ContentExtensions::RedirectAction::parse(v162, (const WTF::JSONImpl::Object *)v154, (uint64_t)v180);
            if (v185)
            {
              if (v185 != 1)
                goto LABEL_391;
              v189 = *(_OWORD *)v180;
              v196 = 1;
              v197 = 1;
              v100 = 1;
LABEL_347:
              ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33952E8[v100])(&v172, v180);
LABEL_348:
              v20 = &qword_1ECE82000;
              v19 = "trigger";
              goto LABEL_140;
            }
            LOBYTE(v158) = v180[0];
            v159[0] = 0;
            v160 = -1;
            v131 = v184;
            if (v184 == -1)
            {
              LOBYTE(v198) = v180[0];
              v199[0] = 0;
              v200 = -1;
              v201 = 7;
              LOBYTE(v172) = v180[0];
              LOBYTE(v173) = 0;
              v177 = -1;
              v178 = 7;
              LOBYTE(v189) = v180[0];
              BYTE8(v189) = 0;
              v194 = -1;
              v195 = 7;
              v196 = 0;
              v133 = 7;
              v197 = 1;
            }
            else
            {
              v132 = __const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v184];
              ((void (*)(char *, _BYTE *, _BYTE *))v132)(&v163, v159, &v180[8]);
              v160 = v131;
              LOBYTE(v198) = (_BYTE)v158;
              v199[0] = 0;
              v200 = -1;
              ((void (*)(char *, _BYTE *, _BYTE *))v132)(&v163, v199, v159);
              v200 = v131;
              v201 = 7;
              LOBYTE(v172) = (_BYTE)v198;
              LOBYTE(v173) = 0;
              v178 = -1;
              v177 = -1;
              ((void (*)(char *, WTF::StringImpl **, _BYTE *))v132)(&v163, &v173, v199);
              v177 = v131;
              v178 = 7;
              LOBYTE(v189) = (_BYTE)v172;
              BYTE8(v189) = 0;
              v195 = -1;
              v194 = -1;
              ((void (*)(char *, char *, WTF::StringImpl **))v132)(&v163, (char *)&v189 + 8, &v173);
              v133 = v178;
              v194 = v131;
              v195 = 7;
              v196 = 0;
              v197 = 1;
              if (v178 == -1)
              {
LABEL_342:
                v178 = -1;
                if (v201 != -1)
                  ((void (*)(char *, WTF::StringImpl **))off_1E3394EA8[v201])(&v163, &v198);
                v201 = -1;
                if (v160 != -1)
                  ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v160])(&v163, v159);
                v100 = v185;
                if (v185 != -1)
                  goto LABEL_347;
                goto LABEL_348;
              }
            }
            ((void (*)(char *, WTF::StringImpl **))off_1E3394EA8[v133])(&v163, &v172);
            goto LABEL_342;
          }
          if (v157 != 1)
            goto LABEL_391;
          v31 = (uint64_t)v154[0];
          v30 = (uint64_t *)v154[1];
LABEL_55:
          *(_QWORD *)&v164 = v31;
          *((_QWORD *)&v164 + 1) = v30;
          v170 = 1;
          v32 = 1;
          v171 = 1;
LABEL_56:
          ((void (*)(_BYTE *, WTF::StringImpl **))off_1E3395328[v32])(v180, v154);
LABEL_57:
          if (!v171)
          {
            v33 = 3;
            goto LABEL_121;
          }
          v33 = v170;
          if (!v170)
          {
            v39 = v19;
            v40 = HIDWORD(v152);
            if (HIDWORD(v152) == (_DWORD)v152)
            {
              v41 = WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v151, HIDWORD(v152) + 1, (unint64_t)&v164);
              v40 = HIDWORD(v152);
              v42 = (char *)v151 + 152 * HIDWORD(v152);
              v43 = *(_QWORD *)v41;
              *(_QWORD *)v41 = 0;
              *(_QWORD *)v42 = v43;
              *((_QWORD *)v42 + 1) = *((_QWORD *)v41 + 1);
              *((_QWORD *)v42 + 2) = 0;
              *((_QWORD *)v42 + 3) = 0;
              v44 = *((_QWORD *)v41 + 2);
              *((_QWORD *)v41 + 2) = 0;
              *((_QWORD *)v42 + 2) = v44;
              LODWORD(v44) = *((_DWORD *)v41 + 6);
              *((_DWORD *)v41 + 6) = 0;
              *((_DWORD *)v42 + 6) = v44;
              LODWORD(v44) = *((_DWORD *)v41 + 7);
              *((_DWORD *)v41 + 7) = 0;
              v42[32] = 0;
              v4 = v42 + 32;
              *(v4 - 1) = v44;
              v4[28] = -1;
              v45 = v4 + 28;
              v46 = *((unsigned int *)v41 + 36);
              if ((_DWORD)v46 != -1)
              {
                ((void (*)(_BYTE *))off_1E33952A8[v46])(v180);
                goto LABEL_116;
              }
            }
            else
            {
              v73 = (char *)v151 + 152 * HIDWORD(v152);
              v74 = v164;
              *(_QWORD *)&v164 = 0;
              *(_OWORD *)v73 = __PAIR128__(*((unint64_t *)&v164 + 1), v74);
              *((_QWORD *)v73 + 2) = 0;
              *((_QWORD *)v73 + 3) = 0;
              v75 = v165;
              v165 = 0;
              *((_QWORD *)v73 + 2) = v75;
              LODWORD(v75) = v166;
              v166 = 0;
              *((_DWORD *)v73 + 6) = (_DWORD)v75;
              LODWORD(v75) = v167;
              v167 = 0;
              v73[32] = 0;
              v4 = v73 + 32;
              *(v4 - 1) = (_DWORD)v75;
              v4[28] = -1;
              v45 = v4 + 28;
              LODWORD(v46) = v169;
              if (v169 != -1)
              {
                ((void (*)(_BYTE *))off_1E33952A8[v169])(v180);
LABEL_116:
                *v45 = v46;
              }
            }
            HIDWORD(v152) = v40 + 1;
            v20 = &qword_1ECE82000;
            v19 = v39;
            goto LABEL_118;
          }
          if (v170 != 1)
            goto LABEL_391;
          v149 = v164;
          v150 = 1;
LABEL_118:
          if (v171 && v170 != -1)
            ((void (*)(_BYTE *, __int128 *))off_1E3395308[v170])(v180, &v164);
LABEL_121:
          if (*(_DWORD *)v21 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v21;
          if (v33 != 3 && v33)
            goto LABEL_384;
          if (++v18 == v148)
          {
            v16 = v151;
            v147 = v152;
            goto LABEL_383;
          }
        }
      }
      v147 = v15 / 0x98;
    }
    else
    {
      v16 = 0;
      v147 = 0;
    }
LABEL_383:
    v151 = 0;
    *(_QWORD *)&v149 = v16;
    HIDWORD(v152) = 0;
    *((_QWORD *)&v149 + 1) = v147;
    v150 = 0;
    goto LABEL_384;
  }
  if ((_MergedGlobals_158 & 1) == 0)
    goto LABEL_392;
  while (1)
  {
    *(_QWORD *)&v149 = 2;
    *((_QWORD *)&v149 + 1) = &qword_1ECE828E8;
    v150 = 1;
LABEL_8:
    v7 = v153;
    v153 = 0;
    if (v7)
    {
      if (*v7 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v7;
    }
    v8 = v150;
    if (!v150)
      break;
    if (v150 == 1)
    {
      v9 = (uint64_t *)*((_QWORD *)&v149 + 1);
      v10 = v149;
      goto LABEL_19;
    }
LABEL_391:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_392:
    qword_1ECE828E8 = (uint64_t)&off_1E3395448;
    _MergedGlobals_158 = 1;
  }
  v11 = HIDWORD(v149);
  if (HIDWORD(v149))
  {
    *(_QWORD *)a1 = v149;
    v12 = DWORD2(v149);
    v149 = 0uLL;
    *(_DWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 12) = v11;
    *(_DWORD *)(a1 + 16) = 0;
    return ((uint64_t (*)(__int128 *, __int128 *))off_1E3395338[v8])(&v164, &v149);
  }
  if ((_MergedGlobals_158 & 1) != 0)
  {
    v9 = &qword_1ECE828E8;
  }
  else
  {
    qword_1ECE828E8 = (uint64_t)&off_1E3395448;
    v9 = &qword_1ECE828E8;
    _MergedGlobals_158 = 1;
  }
  v10 = 5;
LABEL_19:
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 16) = 1;
  return ((uint64_t (*)(__int128 *, __int128 *))off_1E3395338[v8])(&v164, &v149);
}

uint64_t WTF::VectorTypeOperations<WebCore::ContentExtensions::PrefixTreeEdge>::destruct(uint64_t result, WTF **a2)
{
  WTF **v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;

  if ((WTF **)result != a2)
  {
    v3 = (WTF **)result;
    do
    {
      v4 = v3[1];
      v3[1] = 0;
      if (v4)
      {
        v5 = *((unsigned int *)v4 + 3);
        if ((_DWORD)v5)
          WTF::VectorTypeOperations<WebCore::ContentExtensions::PrefixTreeEdge>::destruct(*(_QWORD *)v4, *(_QWORD *)v4 + 16 * v5);
        v6 = *(WTF **)v4;
        if (*(_QWORD *)v4)
        {
          *(_QWORD *)v4 = 0;
          *((_DWORD *)v4 + 2) = 0;
          WTF::fastFree(v6, a2);
        }
        result = WTF::fastFree(v4, a2);
      }
      v3 += 2;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WebCore::ContentExtensions::Term::destroy(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::ContentExtensions::Term *v4;
  uint64_t v5;

  v2 = this;
  if (*(_BYTE *)this == 2)
  {
    v3 = *(unsigned int *)(this + 20);
    v4 = *(WebCore::ContentExtensions::Term **)(this + 8);
    if ((_DWORD)v3)
    {
      v5 = 32 * v3;
      do
      {
        this = WebCore::ContentExtensions::Term::destroy(v4);
        v4 = (WebCore::ContentExtensions::Term *)((char *)v4 + 32);
        v5 -= 32;
      }
      while (v5);
      v4 = *(WebCore::ContentExtensions::Term **)(v2 + 8);
    }
    if (v4)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      this = WTF::fastFree(v4, a2);
    }
  }
  *(_BYTE *)v2 = 0;
  return this;
}

BOOL WTF::operator==<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  int v17;

  v2 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v2 == *((_DWORD *)a2 + 3))
  {
    if (!(_DWORD)v2)
      return 1;
    v3 = (uint64_t)*a1;
    v4 = (uint64_t)*a2;
    v5 = **a2;
    if (v5 == **a1 && *(unsigned __int8 *)(v4 + 1) == *(unsigned __int8 *)(v3 + 1))
    {
      v6 = 0;
      v7 = 0;
      v8 = 1;
      while (1)
      {
        if (v5)
        {
          if (v5 == 2)
          {
            if ((WTF::operator==<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(v3 + v6 + 8, v4 + v6 + 8) & 1) == 0)return v7;
          }
          else
          {
            if (v5 != 1)
              return v7;
            v9 = v3 + v6;
            v10 = v4 + v6;
            if (*(unsigned __int8 *)(v3 + v6 + 8) != *(unsigned __int8 *)(v4 + v6 + 8))
              return v7;
            v12 = *(_QWORD *)(v9 + 16);
            v11 = *(_QWORD *)(v9 + 24);
            v14 = *(_QWORD *)(v10 + 16);
            v13 = *(_QWORD *)(v10 + 24);
            if (v12 != v14 || v11 != v13)
              return v7;
          }
        }
        v7 = v8 >= v2;
        if (32 * v2 - 32 != v6)
        {
          v5 = *(unsigned __int8 *)(v4 + v6 + 32);
          if (v5 == *(unsigned __int8 *)(v3 + v6 + 32))
          {
            v16 = *(unsigned __int8 *)(v4 + v6 + 33);
            v17 = *(unsigned __int8 *)(v3 + v6 + 33);
            v6 += 32;
            ++v8;
            if (v16 == v17)
              continue;
          }
        }
        return v7;
      }
    }
  }
  return 0;
}

uint64_t WebCore::ContentExtensions::Term::generateGraph(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;

  v4 = a4;
  v7 = (uint64_t *)result;
  switch(*(_BYTE *)(result + 1))
  {
    case 0:
      result = (uint64_t)WebCore::ContentExtensions::Term::generateSubgraphForAtom((uint64_t *)result, a2, a3, a4);
      break;
    case 1:
      WebCore::ContentExtensions::Term::generateSubgraphForAtom((uint64_t *)result, a2, a3, a4);
      LODWORD(v36) = v4;
      result = (uint64_t)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)(a3 + 24), (int *)&v36, (uint64_t)&v41);
      break;
    case 2:
      v41 = a2;
      v45 = 0;
      v42 = 0u;
      v43 = 0u;
      v8 = *(_DWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 12);
      v44 = v9;
      v36 = 0;
      v37 = 0uLL;
      if ((_DWORD)v9 == v8)
      {
        v10 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v9 + 1, (unint64_t)&v36);
        v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 12);
        v12 = *(_OWORD *)v10;
        *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v11 = v12;
      }
      else
      {
        v18 = (_QWORD *)(*(_QWORD *)a2 + 24 * v9);
        *v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
      }
      ++*(_DWORD *)(a2 + 12);
      LODWORD(v46) = v9;
      v19 = (uint64_t *)(a3 + 24);
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(v19, (int *)&v46, (uint64_t)&v36);
      v36 = a2;
      v40 = 0;
      v37 = 0u;
      v38 = 0u;
      v20 = *(_DWORD *)(a2 + 8);
      v39 = *(_DWORD *)(a2 + 12);
      v21 = v39;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      if (v39 == v20)
      {
        v22 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v39 + 1, (unint64_t)&v46);
        v23 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 12);
        v24 = *(_OWORD *)v22;
        *(_QWORD *)(v23 + 16) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v23 = v24;
      }
      else
      {
        v31 = (_QWORD *)(*(_QWORD *)a2 + 24 * v39);
        *v31 = 0;
        v31[1] = 0;
        v31[2] = 0;
      }
      ++*(_DWORD *)(a2 + 12);
      WebCore::ContentExtensions::Term::generateSubgraphForAtom(v7, a2, (uint64_t)&v41, v21);
      v49 = v44;
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v38, &v49, (uint64_t)&v46);
      v49 = v4;
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v38, &v49, (uint64_t)&v46);
      v49 = v4;
      v32 = v19;
      goto LABEL_18;
    case 3:
      v41 = a2;
      v45 = 0;
      v42 = 0u;
      v43 = 0u;
      v13 = *(_DWORD *)(a2 + 8);
      v14 = *(unsigned int *)(a2 + 12);
      v44 = v14;
      v36 = 0;
      v37 = 0uLL;
      if ((_DWORD)v14 == v13)
      {
        v15 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v14 + 1, (unint64_t)&v36);
        v16 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 12);
        v17 = *(_OWORD *)v15;
        *(_QWORD *)(v16 + 16) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v16 = v17;
      }
      else
      {
        v25 = (_QWORD *)(*(_QWORD *)a2 + 24 * v14);
        *v25 = 0;
        v25[1] = 0;
        v25[2] = 0;
      }
      ++*(_DWORD *)(a2 + 12);
      LODWORD(v46) = v14;
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)(a3 + 24), (int *)&v46, (uint64_t)&v36);
      v36 = a2;
      v40 = 0;
      v37 = 0u;
      v38 = 0u;
      v26 = *(_DWORD *)(a2 + 8);
      v39 = *(_DWORD *)(a2 + 12);
      v27 = v39;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      if (v39 == v26)
      {
        v28 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v39 + 1, (unint64_t)&v46);
        v29 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 12);
        v30 = *(_OWORD *)v28;
        *(_QWORD *)(v29 + 16) = *((_QWORD *)v28 + 2);
        *(_OWORD *)v29 = v30;
      }
      else
      {
        v33 = (_QWORD *)(*(_QWORD *)a2 + 24 * v39);
        *v33 = 0;
        v33[1] = 0;
        v33[2] = 0;
      }
      ++*(_DWORD *)(a2 + 12);
      WebCore::ContentExtensions::Term::generateSubgraphForAtom(v7, a2, (uint64_t)&v41, v27);
      v49 = v44;
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v38, &v49, (uint64_t)&v46);
      v49 = v4;
      v32 = (uint64_t *)&v38;
LABEL_18:
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(v32, &v49, (uint64_t)&v46);
      WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::~ImmutableNFANodeBuilder((uint64_t)&v36, v34);
      result = WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::~ImmutableNFANodeBuilder((uint64_t)&v41, v35);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *WebCore::ContentExtensions::Term::generateSubgraphForAtom(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int i;
  unsigned int v13;
  int v14;
  int v15;
  __int16 v16;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  _QWORD *v39;
  void *v40;
  WTF *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  int v52;
  char v53;
  uint64_t v54;
  WTF *v55[2];
  __int128 v56;
  int v57;
  char v58;
  _QWORD v59[3];

  v6 = result;
  v7 = *(unsigned __int8 *)result;
  if (v7 == 2)
  {
    v18 = *((_DWORD *)result + 5);
    if (v18 == 1)
      return (uint64_t *)WebCore::ContentExtensions::Term::generateGraph(result[1], a2, a3, a4);
    if (v18)
    {
      v23 = result[1];
      v54 = a2;
      v58 = 0;
      *(_OWORD *)v55 = 0u;
      v56 = 0u;
      v24 = *(_DWORD *)(a2 + 8);
      v25 = *(unsigned int *)(a2 + 12);
      v57 = v25;
      v49 = 0;
      v50 = 0uLL;
      if ((_DWORD)v25 == v24)
      {
        v26 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v25 + 1, (unint64_t)&v49);
        v27 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 12);
        v28 = *(_OWORD *)v26;
        *(_QWORD *)(v27 + 16) = *((_QWORD *)v26 + 2);
        *(_OWORD *)v27 = v28;
      }
      else
      {
        v29 = (_QWORD *)(*(_QWORD *)a2 + 24 * v25);
        *v29 = 0;
        v29[1] = 0;
        v29[2] = 0;
      }
      ++*(_DWORD *)(a2 + 12);
      WebCore::ContentExtensions::Term::generateGraph(v23, a2, a3, v25);
      v30 = *((unsigned int *)v6 + 5);
      v31 = v30 - 1;
      if (v30 - 1 < 2)
      {
LABEL_66:
        if (v30)
        {
          WebCore::ContentExtensions::Term::generateGraph(v6[1] + 32 * v31, a2, &v54, a4);
          return (uint64_t *)WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::~ImmutableNFANodeBuilder((uint64_t)&v54, v48);
        }
      }
      else
      {
        v32 = 1;
        while (v32 < v30)
        {
          v33 = v6[1];
          v49 = a2;
          v53 = 0;
          v50 = 0u;
          v51 = 0u;
          v34 = *(_DWORD *)(a2 + 8);
          v35 = *(unsigned int *)(a2 + 12);
          v52 = v35;
          memset(v59, 0, sizeof(v59));
          if ((_DWORD)v35 == v34)
          {
            v36 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v35 + 1, (unint64_t)v59);
            v37 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 12);
            v38 = *(_OWORD *)v36;
            *(_QWORD *)(v37 + 16) = *((_QWORD *)v36 + 2);
            *(_OWORD *)v37 = v38;
          }
          else
          {
            v39 = (_QWORD *)(*(_QWORD *)a2 + 24 * v35);
            *v39 = 0;
            v39[1] = 0;
            v39[2] = 0;
          }
          ++*(_DWORD *)(a2 + 12);
          WebCore::ContentExtensions::Term::generateGraph(v33 + 32 * v32, a2, &v54, v35);
          if (!v58)
            WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::finalize((char *)&v54);
          v54 = v49;
          v41 = v55[0];
          if (HIDWORD(v55[1]))
          {
            v42 = 16 * HIDWORD(v55[1]);
            do
            {
              if (*(_QWORD *)v41)
                WTF::fastFree((WTF *)(*(_QWORD *)v41 - 16), v40);
              v41 = (WTF *)((char *)v41 + 16);
              v42 -= 16;
            }
            while (v42);
            v41 = v55[0];
          }
          if (v41)
          {
            v55[0] = 0;
            LODWORD(v55[1]) = 0;
            WTF::fastFree(v41, v40);
          }
          v43 = (WTF *)*((_QWORD *)&v50 + 1);
          v55[0] = (WTF *)v50;
          v50 = 0uLL;
          v55[1] = v43;
          v44 = v51;
          *(_QWORD *)&v51 = 0;
          v45 = v56;
          *(_QWORD *)&v56 = v44;
          if (v45)
            WTF::fastFree((WTF *)(v45 - 16), v40);
          v46 = *((_QWORD *)&v51 + 1);
          *((_QWORD *)&v51 + 1) = 0;
          v47 = *((_QWORD *)&v56 + 1);
          *((_QWORD *)&v56 + 1) = v46;
          if (v47)
            WTF::fastFree((WTF *)(v47 - 16), v40);
          v57 = v52;
          v58 = v53;
          v49 = 0;
          v53 = 1;
          WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::~ImmutableNFANodeBuilder((uint64_t)&v49, v40);
          ++v32;
          v30 = *((unsigned int *)v6 + 5);
          v31 = v30 - 1;
          if (v30 - 1 <= v32)
            goto LABEL_66;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1957244E0);
    }
LABEL_24:
    LODWORD(v49) = a4;
    return WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)(a3 + 24), (int *)&v49, (uint64_t)&v54);
  }
  if (v7 != 1)
  {
    if (*(_BYTE *)result)
      return result;
    goto LABEL_24;
  }
  v8 = *((unsigned __int8 *)result + 8);
  v9 = result + 2;
  v10 = a3 + 8;
  v11 = a4 << 32;
  if (*((_BYTE *)result + 8))
  {
    for (i = 1; ; i = v15)
    {
      v13 = (unsigned __int16)i;
      if ((unsigned __int16)i <= 0x7Fu)
      {
        while ((((unint64_t)v9[v13 >> 6] >> v13) & 1) != 0)
        {
          if (++v13 == 128)
            return result;
        }
        i = v13;
      }
      if ((unsigned __int16)i == 128)
        break;
      if ((unsigned __int16)(i + 1) <= 0x80u)
        v14 = 128;
      else
        v14 = (unsigned __int16)(i + 1);
      v15 = i;
      while (1)
      {
        v16 = v15++;
        if ((unsigned __int16)v15 > 0x7Fu)
          break;
        if ((((unint64_t)v9[(unsigned __int16)v15 >> 6] >> v15) & 1) != 0)
          goto LABEL_21;
      }
      v16 = v14 - 1;
      v15 = v14;
LABEL_21:
      result = (uint64_t *)WebCore::ContentExtensions::MutableRangeList<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,0u>::extend<WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::FakeRangeIterator,WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::addTransition(char,char,unsigned int)::Converter>(v10, v11 | (unsigned __int16)(i | (unsigned __int16)(v16 << 8)), 0, v11, 1u);
    }
  }
  else
  {
    while (1)
    {
      v19 = (unsigned __int16)v8;
      if ((unsigned __int16)v8 <= 0x7Fu)
      {
        while ((((unint64_t)v9[v19 >> 6] >> v19) & 1) == 0)
        {
          if (++v19 == 128)
            return result;
        }
        v8 = v19;
      }
      if ((unsigned __int16)v8 == 128)
        break;
      if ((unsigned __int16)(v8 + 1) <= 0x80u)
        v20 = 128;
      else
        v20 = (unsigned __int16)(v8 + 1);
      v21 = v8;
      while (1)
      {
        v22 = v21++;
        if ((unsigned __int16)v21 > 0x7Fu)
          break;
        if ((((unint64_t)v9[(unsigned __int16)v21 >> 6] >> v21) & 1) == 0)
          goto LABEL_40;
      }
      v22 = v20 - 1;
      v21 = v20;
LABEL_40:
      result = (uint64_t *)WebCore::ContentExtensions::MutableRangeList<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,0u>::extend<WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::FakeRangeIterator,WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::addTransition(char,char,unsigned int)::Converter>(v10, v11 | (unsigned __int16)(v8 | (unsigned __int16)(v22 << 8)), 0, v11, 1u);
      v8 = v21;
    }
  }
  return result;
}

uint64_t WebCore::ContentExtensions::MutableRangeList<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,0u>::extend<WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::FakeRangeIterator,WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::addTransition(char,char,unsigned int)::Converter>(uint64_t result, unint64_t a2, unsigned __int8 a3, uint64_t a4, unsigned __int8 a5)
{
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  char *v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  void *v25;
  uint64_t v26;
  char v27;
  void *v28;
  int v29;
  char v30;
  void *v31;
  uint64_t v32;
  int v33;
  void *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  unsigned int appended;
  char v47;
  uint64_t v48;
  __int128 v49;
  int *v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int *v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  double v67;
  double v68;
  int *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  int *v75;
  int *v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  int *v99;
  int *v100;
  int v101;
  char v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  char v107;
  char v108;

  v5 = a3;
  if (a3 == a5)
    return result;
  v6 = a2;
  v7 = result;
  v8 = a2 >> 8;
  v97 = HIDWORD(a2);
  if (*(_DWORD *)(result + 12))
  {
    v9 = 0;
    v10 = (char)a2;
    v11 = a5;
    v104 = 0;
    v98 = 0;
    v93 = BYTE1(a2) + 1;
    v12 = a2 >> 8;
    v96 = a2 >> 8;
    v94 = BYTE1(a2);
    while (1)
    {
      LODWORD(v13) = v98;
      v14 = *(_QWORD *)v7;
      v15 = *(_QWORD *)v7 + 16 * v98;
      v16 = v10 + v9;
      if (v16 > *(char *)(v15 + 13))
      {
        v104 = v98;
        v17 = *(_DWORD *)(v14 + 16 * v98 + 8);
        goto LABEL_7;
      }
      v18 = v14 + 16 * v98;
      v21 = *(char *)(v18 + 12);
      v20 = (char *)(v18 + 12);
      v19 = v21;
      if (v21 > (char)v12)
        break;
      if (v16 <= v19)
      {
        if (v16 < v19)
        {
          v27 = v19 - 1;
          LODWORD(v99) = v97;
          v100 = 0;
          WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v100, (int *)&v99, (uint64_t)&v105);
          WebCore::ContentExtensions::MutableRangeList<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,0u>::insertBetween(v7, &v104, &v98, v9 + v6, v27, (uint64_t *)&v100);
          if (v100)
            WTF::fastFree((WTF *)(v100 - 4), v28);
          LODWORD(v13) = v98;
          v15 = *(_QWORD *)v7 + 16 * v98;
        }
      }
      else
      {
        WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable(&v105, (int **)(*(_QWORD *)v7 + 16 * v98));
        v24 = *v20;
        *v20 = v9 + v6;
        WebCore::ContentExtensions::MutableRangeList<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,0u>::insertBetween(v7, &v104, &v98, v24, v9 + v6 - 1, &v105);
        v13 = v98;
        v26 = *(_QWORD *)v7;
        if (v105)
          WTF::fastFree((WTF *)(v105 - 16), v25);
        v15 = v26 + 16 * v13;
      }
      v29 = *(unsigned __int8 *)(v15 + 13);
      if (v29 != v12)
      {
        if ((char)v29 <= (char)v12)
        {
          LODWORD(v100) = v97;
          result = (uint64_t)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)v15, (int *)&v100, (uint64_t)&v105);
          v9 = *(_BYTE *)(v15 + 13) - v6 + 1;
          v104 = v13;
          v17 = *(_DWORD *)(v15 + 8);
LABEL_7:
          v98 = v17;
          if (!v17)
            goto LABEL_41;
          goto LABEL_27;
        }
        v30 = *(_BYTE *)(v15 + 12);
        *(_BYTE *)(v15 + 12) = v93;
        WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable((uint64_t *)&v100, (int **)v15);
        LODWORD(v99) = v97;
        WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v100, (int *)&v99, (uint64_t)&v105);
        v23 = v7;
        v22 = v30;
        goto LABEL_24;
      }
      LODWORD(v100) = v97;
      result = (uint64_t)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)v15, (int *)&v100, (uint64_t)&v105);
      v9 = 0;
      v104 = v13;
      v98 = *(_DWORD *)(v15 + 8);
      v5 = 1;
      if (!v98)
      {
LABEL_41:
        if (v5 == v11)
          return result;
        if (v11 == 1)
        {
          LODWORD(v99) = v97;
          v100 = 0;
          WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v100, (int *)&v99, (uint64_t)&v105);
          result = WebCore::ContentExtensions::MutableRangeList<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,0u>::appendRange(v7, v13, v9 + v6, v94, &v100);
          if (v100)
            return WTF::fastFree((WTF *)(v100 - 4), v44);
          return result;
        }
        LODWORD(v99) = v97;
        v100 = 0;
        WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v100, (int *)&v99, (uint64_t)&v105);
        appended = WebCore::ContentExtensions::MutableRangeList<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,0u>::appendRange(v7, v13, v9 + v6, v94, &v100);
        v104 = appended;
        if (v100)
          WTF::fastFree((WTF *)(v100 - 4), v45);
        v95 = v6;
        v47 = v96;
        while (2)
        {
          LODWORD(v99) = v97;
          v100 = 0;
          v48 = WTF::fastMalloc((WTF *)0x30);
          *(_QWORD *)&v49 = -1;
          *((_QWORD *)&v49 + 1) = -1;
          *(_OWORD *)(v48 + 16) = v49;
          *(_OWORD *)(v48 + 32) = v49;
          v100 = (int *)(v48 + 16);
          *(_DWORD *)(v48 + 12) = 8;
          *(v100 - 2) = 7;
          *(v100 - 4) = 0;
          *(v100 - 3) = 0;
          v50 = v100;
          if (v100)
            v51 = *(v100 - 2);
          else
            v51 = 0;
          v52 = (int)v99;
          v53 = 9 * (((_DWORD)v99 + ~((_DWORD)v99 << 15)) ^ (((_DWORD)v99 + ~((_DWORD)v99 << 15)) >> 10));
          v54 = (v53 ^ (v53 >> 6)) + ~((v53 ^ (v53 >> 6)) << 11);
          v55 = (v54 ^ HIWORD(v54)) & v51;
          v56 = &v100[v55];
          v57 = *v56;
          if (*v56 != -1)
          {
            v69 = 0;
            v70 = 1;
            do
            {
              if (v57 == (_DWORD)v99)
                goto LABEL_59;
              if (v57 == -2)
                v69 = v56;
              v55 = (v55 + v70) & v51;
              v56 = &v100[v55];
              v57 = *v56;
              ++v70;
            }
            while (*v56 != -1);
            if (v69)
            {
              *v69 = -1;
              --*(v100 - 4);
              v52 = (int)v99;
              v56 = v69;
            }
          }
          *v56 = v52;
          if (v100)
            v58 = *(v100 - 3) + 1;
          else
            v58 = 1;
          *(v100 - 3) = v58;
          v50 = v100;
          if (v100)
            v59 = *(v100 - 3);
          else
            v59 = 0;
          v60 = (*(v100 - 4) + v59);
          v61 = *(v100 - 1);
          if (v61 > 0x400)
          {
            if (v61 <= 2 * v60)
              goto LABEL_65;
          }
          else
          {
            if (3 * v61 > 4 * v60)
              goto LABEL_59;
LABEL_65:
            WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand((uint64_t *)&v100, v56);
            v50 = v100;
            if (!v100)
            {
              v62 = *(_DWORD *)(v7 + 12);
              v105 = 0;
              goto LABEL_106;
            }
          }
LABEL_59:
          v62 = *(_DWORD *)(v7 + 12);
          v105 = 0;
          v63 = *(v50 - 3);
          if (!(_DWORD)v63)
          {
LABEL_106:
            v106 = 0;
            v107 = v6;
            v108 = v47;
            v85 = *(unsigned int *)(v7 + 12);
            if ((_DWORD)v85 == *(_DWORD *)(v7 + 8))
            {
              v86 = WTF::Vector<WebCore::ContentExtensions::MutableRange<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v85 + 1, (unint64_t)&v105);
              v87 = *(_QWORD *)v7 + 16 * *(unsigned int *)(v7 + 12);
              *(_QWORD *)v87 = 0;
              v88 = *(_QWORD *)v86;
              *(_QWORD *)v86 = 0;
              *(_QWORD *)v87 = v88;
              *(_DWORD *)(v87 + 8) = *(_DWORD *)(v86 + 8);
              *(_BYTE *)(v87 + 12) = *(_BYTE *)(v86 + 12);
              v89 = (char *)(v87 + 13);
              v90 = (char *)(v86 + 13);
            }
            else
            {
              v91 = *(_QWORD *)v7 + 16 * v85;
              *(_QWORD *)v91 = 0;
              v92 = v105;
              v105 = 0;
              *(_QWORD *)v91 = v92;
              *(_DWORD *)(v91 + 8) = v106;
              *(_BYTE *)(v91 + 12) = v107;
              v89 = (char *)(v91 + 13);
              v90 = &v108;
            }
            *v89 = *v90;
            ++*(_DWORD *)(v7 + 12);
            if (v105)
              WTF::fastFree((WTF *)(v105 - 16), v56);
            if (v62)
              *(_DWORD *)(*(_QWORD *)v7 + 16 * appended + 8) = v62;
            v104 = v62;
            if (v100)
              WTF::fastFree((WTF *)(v100 - 4), v56);
            appended = v62;
            continue;
          }
          break;
        }
        v64 = (v63 - 1) | ((v63 - 1) >> 1) | ((((_DWORD)v63 - 1) | ((v63 - 1) >> 1)) >> 2);
        v65 = v64 | (v64 >> 4) | ((v64 | (v64 >> 4)) >> 8);
        v66 = (v65 | HIWORD(v65)) + 1;
        if (v66 > 0x400)
        {
          if (v66 <= 2 * v63)
          {
LABEL_62:
            LODWORD(v66) = 2 * v66;
            if (v66 <= 0x400)
              goto LABEL_63;
          }
          v67 = (double)v63;
          v68 = (double)v66 * 0.416666667;
        }
        else
        {
          if (3 * v66 <= 4 * v63)
            goto LABEL_62;
LABEL_63:
          v67 = (double)v63;
          v68 = (double)v66 * 0.604166667;
        }
        if (v68 <= v67)
          LODWORD(v66) = 2 * v66;
        if (v66 <= 8)
          v71 = 8;
        else
          v71 = v66;
        v72 = WTF::fastMalloc((WTF *)(4 * v71 + 16));
        memset((void *)(v72 + 16), 255, 4 * v71);
        v105 = v72 + 16;
        *(_DWORD *)(v72 + 12) = v71;
        *(_DWORD *)(v105 - 8) = v71 - 1;
        *(_DWORD *)(v105 - 12) = v63;
        *(_DWORD *)(v105 - 16) = 0;
        v73 = v100;
        if (v100)
        {
          v74 = *(v100 - 1);
          v75 = &v100[v74];
          if (*(v100 - 3))
          {
            v76 = v100;
            v6 = v95;
            v47 = v96;
            if ((_DWORD)v74)
            {
              v77 = 4 * v74;
              v76 = v100;
              do
              {
                if (*v76 < 0xFFFFFFFE)
                  goto LABEL_91;
                ++v76;
                v77 -= 4;
              }
              while (v77);
              v76 = v75;
            }
            goto LABEL_91;
          }
          v76 = &v100[v74];
        }
        else
        {
          v76 = 0;
          v74 = 0;
        }
        v6 = v95;
        v47 = v96;
        v75 = &v100[v74];
LABEL_91:
        if (v100)
          v73 = &v100[*(v100 - 1)];
        while (v76 != v73)
        {
          if (v105)
            v78 = *(_DWORD *)(v105 - 8);
          else
            v78 = 0;
          v79 = 0;
          v80 = *v76;
          v81 = 9 * ((v80 + ~(v80 << 15)) ^ ((v80 + ~(v80 << 15)) >> 10));
          v82 = ((v81 ^ (v81 >> 6)) + ~((v81 ^ (v81 >> 6)) << 11)) ^ (((v81 ^ (v81 >> 6)) + ~((v81 ^ (v81 >> 6)) << 11)) >> 16);
          do
          {
            v83 = v82 & v78;
            v82 = ++v79 + v83;
          }
          while (*(_DWORD *)(v105 + 4 * v83) != -1);
          *(_DWORD *)(v105 + 4 * v83) = v80;
          v84 = v76 + 1;
          v76 = v75;
          if (v84 != v75)
          {
            v76 = v84;
            do
            {
              if (*v76 < 0xFFFFFFFE)
                goto LABEL_103;
              ++v76;
            }
            while (v76 != v75);
            v76 = v75;
          }
LABEL_103:
          ;
        }
        goto LABEL_106;
      }
LABEL_27:
      if (v5 == v11)
        return result;
    }
    LODWORD(v99) = v97;
    v100 = 0;
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v100, (int *)&v99, (uint64_t)&v105);
    v22 = v9 + v6;
    v23 = v7;
LABEL_24:
    result = WebCore::ContentExtensions::MutableRangeList<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,0u>::insertBetween(v23, &v104, &v98, v22, v94, (uint64_t *)&v100);
    if (v100)
      result = WTF::fastFree((WTF *)(v100 - 4), v31);
    v9 = 0;
    v5 = 1;
    goto LABEL_27;
  }
  v32 = a5;
  v33 = 1;
  do
  {
    v104 = v97;
    v99 = 0;
    result = (uint64_t)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v99, (int *)&v104, (uint64_t)&v105);
    v35 = v99;
    v99 = 0;
    v100 = v35;
    v101 = v33;
    v102 = v6;
    v103 = v8;
    v36 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v36 == *(_DWORD *)(v7 + 8))
    {
      result = WTF::Vector<WebCore::ContentExtensions::MutableRange<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v36 + 1, (unint64_t)&v100);
      v37 = *(_QWORD *)v7 + 16 * *(unsigned int *)(v7 + 12);
      *(_QWORD *)v37 = 0;
      v38 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v37 = v38;
      *(_DWORD *)(v37 + 8) = *(_DWORD *)(result + 8);
      *(_BYTE *)(v37 + 12) = *(_BYTE *)(result + 12);
      v39 = (char *)(v37 + 13);
      v40 = (char *)(result + 13);
    }
    else
    {
      v41 = *(_QWORD *)v7 + 16 * v36;
      *(_QWORD *)v41 = 0;
      v42 = v100;
      v100 = 0;
      *(_QWORD *)v41 = v42;
      *(_DWORD *)(v41 + 8) = v101;
      *(_BYTE *)(v41 + 12) = v102;
      v39 = (char *)(v41 + 13);
      v40 = &v103;
    }
    *v39 = *v40;
    ++*(_DWORD *)(v7 + 12);
    if (v100)
      result = WTF::fastFree((WTF *)(v100 - 4), v34);
    if (v99)
      result = WTF::fastFree((WTF *)(v99 - 4), v34);
    ++v33;
  }
  while (v32 != 1);
  v43 = *(unsigned int *)(v7 + 12);
  if ((_DWORD)v43)
    *(_DWORD *)(*(_QWORD *)v7 + 16 * v43 - 8) = 0;
  return result;
}

uint64_t WebCore::ContentExtensions::MutableRangeList<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,0u>::insertBetween(uint64_t result, _DWORD *a2, _DWORD *a3, char a4, char a5, uint64_t *a6)
{
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  char v31;

  v9 = a2;
  v10 = result;
  v11 = *a3;
  v12 = *(unsigned int *)(result + 12);
  if (*a3)
  {
    v13 = *a6;
    *a6 = 0;
    v28 = v13;
    v29 = v11;
    v30 = a4;
    v31 = a5;
    if ((_DWORD)v12 == *(_DWORD *)(result + 8))
    {
      result = WTF::Vector<WebCore::ContentExtensions::MutableRange<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v12 + 1, (unint64_t)&v28);
      v15 = *(_QWORD *)v10 + 16 * *(unsigned int *)(v10 + 12);
      *(_QWORD *)v15 = 0;
      v16 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v15 = v16;
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(result + 8);
      *(_BYTE *)(v15 + 12) = *(_BYTE *)(result + 12);
      *(_BYTE *)(v15 + 13) = *(_BYTE *)(result + 13);
      v17 = v28;
      ++*(_DWORD *)(v10 + 12);
      if (v17)
        result = WTF::fastFree((WTF *)(v17 - 16), v14);
    }
    else
    {
      v23 = *(_QWORD *)result + 16 * v12;
      *(_QWORD *)v23 = v13;
      *(_DWORD *)(v23 + 8) = v11;
      *(_BYTE *)(v23 + 12) = a4;
      *(_BYTE *)(v23 + 13) = a5;
      ++*(_DWORD *)(result + 12);
    }
    *(_DWORD *)(*(_QWORD *)v10 + 16 * *v9 + 8) = v12;
  }
  else
  {
    v19 = *(_QWORD *)result;
    if ((_DWORD)v12 == *(_DWORD *)(result + 8))
    {
      result = WTF::Vector<WebCore::ContentExtensions::MutableRange<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v12 + 1, v19);
      v19 = result;
      v20 = *(_QWORD *)v10 + 16 * *(unsigned int *)(v10 + 12);
      *(_QWORD *)v20 = 0;
      v21 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v20 = v21;
      *(_DWORD *)(v20 + 8) = *(_DWORD *)(result + 8);
      v22 = *(_BYTE *)(result + 12);
    }
    else
    {
      v20 = v19 + 16 * v12;
      *(_QWORD *)v20 = 0;
      v24 = *(_QWORD *)v19;
      *(_QWORD *)v19 = 0;
      *(_QWORD *)v20 = v24;
      *(_DWORD *)(v20 + 8) = *(_DWORD *)(v19 + 8);
      v22 = *(_BYTE *)(v19 + 12);
    }
    *(_BYTE *)(v20 + 12) = v22;
    *(_BYTE *)(v20 + 13) = *(_BYTE *)(v19 + 13);
    ++*(_DWORD *)(v10 + 12);
    v25 = *a6;
    *a6 = 0;
    v26 = *(uint64_t **)v10;
    v27 = *v26;
    *v26 = v25;
    if (v27)
      result = WTF::fastFree((WTF *)(v27 - 16), a2);
    *((_DWORD *)v26 + 2) = v12;
    *((_BYTE *)v26 + 12) = a4;
    *((_BYTE *)v26 + 13) = a5;
    *v9 = 0;
    v9 = a3;
  }
  *v9 = v12;
  return result;
}

uint64_t WebCore::ContentExtensions::MutableRangeList<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,0u>::appendRange(uint64_t a1, unsigned int a2, char a3, char a4, int **a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  char v22;
  char v23;

  v9 = *(unsigned int *)(a1 + 12);
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable(&v20, a5);
  v21 = 0;
  v22 = a3;
  v23 = a4;
  v11 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
  {
    v12 = WTF::Vector<WebCore::ContentExtensions::MutableRange<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v11 + 1, (unint64_t)&v20);
    v13 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12);
    *(_QWORD *)v13 = 0;
    v14 = *(_QWORD *)v12;
    *(_QWORD *)v12 = 0;
    *(_QWORD *)v13 = v14;
    *(_DWORD *)(v13 + 8) = *(_DWORD *)(v12 + 8);
    *(_BYTE *)(v13 + 12) = *(_BYTE *)(v12 + 12);
    v15 = (char *)(v13 + 13);
    v16 = (char *)(v12 + 13);
  }
  else
  {
    v16 = &v23;
    v17 = *(_QWORD *)a1 + 16 * v11;
    *(_QWORD *)v17 = 0;
    v18 = v20;
    v20 = 0;
    *(_QWORD *)v17 = v18;
    *(_DWORD *)(v17 + 8) = v21;
    *(_BYTE *)(v17 + 12) = v22;
    v15 = (char *)(v17 + 13);
  }
  *v15 = *v16;
  ++*(_DWORD *)(a1 + 12);
  if (v20)
    WTF::fastFree((WTF *)(v20 - 16), v10);
  if ((_DWORD)v9)
    *(_DWORD *)(*(_QWORD *)a1 + 16 * a2 + 8) = v9;
  return v9;
}

unint64_t WTF::Vector<WebCore::ContentExtensions::MutableRange<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::ContentExtensions::MutableRange<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::ContentExtensions::MutableRange<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::MutableRange<char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (WTF *)((char *)v7 + 16 * v8);
        v12 = v7;
        do
        {
          *(_QWORD *)v10 = 0;
          v13 = *(_QWORD *)v12;
          *(_QWORD *)v12 = 0;
          *(_QWORD *)v10 = v13;
          *(_DWORD *)(v10 + 8) = *((_DWORD *)v12 + 2);
          *(_WORD *)(v10 + 12) = *((_WORD *)v12 + 6);
          if (*(_QWORD *)v12)
            result = WTF::fastFree((WTF *)(*(_QWORD *)v12 - 16), v9);
          v12 = (WTF *)((char *)v12 + 16);
          v10 += 16;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable(uint64_t *a1, int **a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int *v25;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(*a2 - 3);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_8;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_9:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastMalloc((WTF *)(4 * v11 + 16));
  memset((void *)(v12 + 16), 255, 4 * v11);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v13 = *a2;
  if (*a2)
  {
    v14 = *(v13 - 1);
    v15 = &v13[v14];
    if (*(v13 - 3))
    {
      v16 = *a2;
      if ((_DWORD)v14)
      {
        v17 = 4 * v14;
        v16 = *a2;
        while (*v16 >= 0xFFFFFFFE)
        {
          ++v16;
          v17 -= 4;
          if (!v17)
          {
            v16 = v15;
            goto LABEL_24;
          }
        }
      }
      goto LABEL_24;
    }
    v16 = &v13[v14];
  }
  else
  {
    v16 = 0;
    v14 = 0;
  }
  v15 = &v13[v14];
LABEL_24:
  if (v13)
    v13 += *(v13 - 1);
  while (v16 != v13)
  {
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 8);
    else
      v19 = 0;
    v20 = 0;
    v21 = *v16;
    v22 = 9 * ((v21 + ~(v21 << 15)) ^ ((v21 + ~(v21 << 15)) >> 10));
    v23 = ((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) ^ (((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) >> 16);
    do
    {
      v24 = v23 & v19;
      v23 = ++v20 + v24;
    }
    while (*(_DWORD *)(v18 + 4 * v24) != -1);
    *(_DWORD *)(v18 + 4 * v24) = v21;
    v25 = v16 + 1;
    v16 = v15;
    if (v25 != v15)
    {
      v16 = v25;
      while (*v16 >= 0xFFFFFFFE)
      {
        if (++v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  return a1;
}

unint64_t WTF::Vector<WebCore::ContentExtensions::ActiveSubtree,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ContentExtensions::ActiveSubtree,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ContentExtensions::ActiveSubtree,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::ActiveSubtree,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 26)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(a2 << 6));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        result = (uint64_t)v4 + 8;
        do
        {
          *(_QWORD *)v7 = *(_QWORD *)(result - 8);
          v8 = *(WTF **)result;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 8) = v8;
          v9 = *(_QWORD *)(result + 8);
          *(_QWORD *)(result + 8) = 0;
          *(_QWORD *)(v7 + 16) = v9;
          LODWORD(v9) = *(_DWORD *)(result + 16);
          *(_DWORD *)(result + 16) = 0;
          *(_DWORD *)(v7 + 24) = v9;
          LODWORD(v9) = *(_DWORD *)(result + 20);
          *(_DWORD *)(result + 20) = 0;
          *(_DWORD *)(v7 + 28) = v9;
          *(_QWORD *)(v7 + 32) = 0;
          v10 = *(_QWORD *)(result + 24);
          *(_QWORD *)(result + 24) = 0;
          *(_QWORD *)(v7 + 32) = v10;
          *(_QWORD *)(v7 + 40) = 0;
          v11 = *(_QWORD *)(result + 32);
          *(_QWORD *)(result + 32) = 0;
          *(_QWORD *)(v7 + 40) = v11;
          *(_DWORD *)(v7 + 48) = *(_DWORD *)(result + 40);
          *(_BYTE *)(v7 + 52) = *(_BYTE *)(result + 44);
          *(_QWORD *)result = 0;
          *(_BYTE *)(result + 44) = 1;
          *(_DWORD *)(v7 + 56) = *(_DWORD *)(result + 48);
          v12 = WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::~ImmutableNFANodeBuilder(result, v6);
          v13 = (WTF *)(v12 + 56);
          result = v12 + 64;
          v7 += 64;
        }
        while (v13 != (WTF *)((char *)v4 + 64 * v5));
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t *std::unique_ptr<WebCore::ContentExtensions::ReverseSuffixTreeVertex>::~unique_ptr[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *(unsigned int *)(v3 + 12);
    v5 = *(WTF **)v3;
    if ((_DWORD)v4)
    {
      v6 = 16 * v4;
      v7 = (uint64_t)v5 + 8;
      do
      {
        v7 = std::unique_ptr<WebCore::ContentExtensions::ReverseSuffixTreeVertex>::~unique_ptr[abi:sn180100](v7) + 16;
        v6 -= 16;
      }
      while (v6);
      v5 = *(WTF **)v3;
    }
    if (v5)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
      WTF::fastFree(v5, a2);
    }
    MEMORY[0x19AEA7644](v3, 0x1020C405AF6BDC9);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::ContentExtensions::HashableActionList,WTF::KeyValuePair<WebCore::ContentExtensions::HashableActionList,WebCore::ContentExtensions::ReverseSuffixTreeVertex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContentExtensions::HashableActionList,WebCore::ContentExtensions::ReverseSuffixTreeVertex>>,WebCore::ContentExtensions::HashableActionListHash,WTF::HashMap<WebCore::ContentExtensions::HashableActionList,WebCore::ContentExtensions::ReverseSuffixTreeVertex,WebCore::ContentExtensions::HashableActionListHash,WebCore::ContentExtensions::HashableActionListHashTraits,WTF::HashTraits<WebCore::ContentExtensions::ReverseSuffixTreeVertex>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::ContentExtensions::HashableActionListHashTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  WTF *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  WTF **v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  uint64_t *v48;
  WTF *v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 40);
    do
    {
      *(v10 - 3) = 0;
      *(v10 - 2) = 0;
      *((_DWORD *)v10 - 1) = 1;
      v10[1] = 0;
      v10[2] = 0;
      *v10 = 0;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v51 = v5;
    v52 = v4;
    do
    {
      v14 = v4 + 48 * v11;
      v15 = *(_DWORD *)(v14 + 20);
      if (v15 != 2)
      {
        if (v15 == 1)
        {
          v16 = v4 + 48 * v11;
          v19 = *(WTF **)(v16 + 24);
          v18 = v16 + 24;
          v17 = v19;
          v20 = *(unsigned int *)(v18 + 12);
          if ((_DWORD)v20)
          {
            v21 = 16 * v20;
            v22 = (uint64_t *)((char *)v17 + 8);
            do
            {
              v22 = std::unique_ptr<WebCore::ContentExtensions::ReverseSuffixTreeVertex>::~unique_ptr[abi:sn180100](v22, v8)+ 2;
              v21 -= 16;
            }
            while (v21);
            v17 = *(WTF **)v18;
          }
          if (v17)
          {
            *(_QWORD *)v18 = 0;
            *(_DWORD *)(v4 + 48 * v11 + 32) = 0;
            WTF::fastFree(v17, v8);
          }
          v23 = *(WTF **)v14;
          if (*(_QWORD *)v14)
          {
            *(_QWORD *)v14 = 0;
            *(_DWORD *)(v14 + 8) = 0;
            WTF::fastFree(v23, v8);
          }
        }
        else
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = 0;
          v27 = *(_DWORD *)(v14 + 16);
          do
          {
            v28 = v27 & v25;
            v29 = v24 + 48 * (v27 & v25);
            v27 = ++v26 + (v27 & v25);
          }
          while (*(_DWORD *)(v29 + 20) != 1);
          v30 = v24 + 48 * v28;
          v33 = *(WTF **)(v30 + 24);
          v32 = v30 + 24;
          v31 = v33;
          v34 = *(unsigned int *)(v32 + 12);
          if ((_DWORD)v34)
          {
            v35 = 16 * v34;
            v36 = (uint64_t *)((char *)v31 + 8);
            do
            {
              v36 = std::unique_ptr<WebCore::ContentExtensions::ReverseSuffixTreeVertex>::~unique_ptr[abi:sn180100](v36, v8)+ 2;
              v35 -= 16;
            }
            while (v35);
            v31 = *(WTF **)v32;
          }
          if (v31)
          {
            *(_QWORD *)v32 = 0;
            *(_DWORD *)(v24 + 48 * v28 + 32) = 0;
            WTF::fastFree(v31, v8);
          }
          v37 = *(WTF **)v29;
          if (*(_QWORD *)v29)
          {
            *(_QWORD *)v29 = 0;
            *(_DWORD *)(v29 + 8) = 0;
            WTF::fastFree(v37, v8);
          }
          *(_QWORD *)v29 = 0;
          *(_QWORD *)(v29 + 8) = 0;
          v38 = *(WTF **)v14;
          *(_QWORD *)v14 = 0;
          *(_QWORD *)v29 = v38;
          LODWORD(v38) = *(_DWORD *)(v14 + 8);
          *(_DWORD *)(v14 + 8) = 0;
          *(_DWORD *)(v29 + 8) = (_DWORD)v38;
          LODWORD(v38) = *(_DWORD *)(v14 + 12);
          *(_DWORD *)(v14 + 12) = 0;
          *(_DWORD *)(v29 + 12) = (_DWORD)v38;
          *(_QWORD *)(v29 + 16) = *(_QWORD *)(v14 + 16);
          v39 = v4 + 48 * v11;
          *(_QWORD *)v32 = 0;
          *(_QWORD *)(v32 + 8) = 0;
          v41 = *(_DWORD *)(v39 + 32);
          v40 = v39 + 32;
          v43 = (WTF **)(v40 - 8);
          v42 = *(_QWORD *)(v40 - 8);
          *(_QWORD *)(v40 - 8) = 0;
          *(_QWORD *)v32 = v42;
          *(_DWORD *)v40 = 0;
          *(_DWORD *)(v24 + 48 * v28 + 32) = v41;
          v44 = *(_QWORD *)(v40 + 4);
          *(_DWORD *)(v40 + 4) = 0;
          *(_QWORD *)(v32 + 12) = v44;
          v45 = *(unsigned int *)(v40 + 4);
          v46 = *(WTF **)(v40 - 8);
          if ((_DWORD)v45)
          {
            v47 = 16 * v45;
            v48 = (uint64_t *)((char *)v46 + 8);
            do
            {
              v48 = std::unique_ptr<WebCore::ContentExtensions::ReverseSuffixTreeVertex>::~unique_ptr[abi:sn180100](v48, v8)+ 2;
              v47 -= 16;
            }
            while (v47);
            v46 = *v43;
          }
          if (v46)
          {
            *v43 = 0;
            *(_DWORD *)v40 = 0;
            WTF::fastFree(v46, v8);
          }
          v49 = *(WTF **)v14;
          if (*(_QWORD *)v14)
          {
            *(_QWORD *)v14 = 0;
            *(_DWORD *)(v14 + 8) = 0;
            WTF::fastFree(v49, v8);
          }
          v4 = v52;
          if (v14 == a3)
            v12 = v29;
          v13 = v51;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

char *WTF::Vector<WebCore::ContentExtensions::ReverseSuffixTreeEdge,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  WTF *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  WTF *v27;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (uint64_t *)((char *)v5 + 16 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 + 1 > a2)
        v9 = v8 + 1;
      else
        v9 = a2;
      if (v9 <= v7)
      {
        v16 = *(WTF **)a1;
        return (char *)v16 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
      if (!(v9 >> 28))
      {
        v11 = WTF::fastMalloc((WTF *)(16 * v9));
        v12 = 0;
        *(_DWORD *)(a1 + 8) = v9;
        *(_QWORD *)a1 = v11;
        do
        {
          v13 = (_QWORD *)(v11 + v12);
          *v13 = *(_QWORD *)((char *)v5 + v12);
          v14 = (uint64_t *)((char *)v5 + v12 + 8);
          v15 = *v14;
          *v14 = 0;
          v13[1] = v15;
          v12 += 16;
        }
        while (std::unique_ptr<WebCore::ContentExtensions::ReverseSuffixTreeVertex>::~unique_ptr[abi:sn180100](v14, v10)+ 1 != v6);
        v16 = *(WTF **)a1;
        if (v5)
        {
          if (v16 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v10);
          v16 = *(WTF **)a1;
        }
        return (char *)v16 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_29:
      __break(0xC471u);
      JUMPOUT(0x195725C8CLL);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 + 1 > a2)
    v19 = v18 + 1;
  else
    v19 = a2;
  if (v19 > v17)
  {
    if (v19 >> 28)
      goto LABEL_29;
    v20 = *(unsigned int *)(a1 + 12);
    v21 = WTF::fastMalloc((WTF *)(16 * v19));
    *(_DWORD *)(a1 + 8) = v19;
    *(_QWORD *)a1 = v21;
    if ((_DWORD)v20)
    {
      v23 = (_QWORD *)v21;
      v24 = (uint64_t *)((char *)v5 + 8);
      do
      {
        *v23 = *(v24 - 1);
        v25 = *v24;
        *v24 = 0;
        v23[1] = v25;
        v26 = std::unique_ptr<WebCore::ContentExtensions::ReverseSuffixTreeVertex>::~unique_ptr[abi:sn180100](v24, v22);
        v27 = (WTF *)(v26 + 1);
        v24 = v26 + 2;
        v23 += 2;
      }
      while (v27 != (WTF *)((char *)v5 + 16 * v20));
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v22);
    }
  }
  return (char *)v3;
}

char *WTF::Vector<WebCore::ContentExtensions::ReverseSuffixTreeVertex *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 0x81)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 128;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x195725E2CLL);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 0x81)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 128;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v3 = *(unsigned int *)(a2 + 36);
  v4 = *(unsigned int **)(a2 + 24);
  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    do
    {
      v6 = v4[4];
      if ((_DWORD)v6 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))off_1E3394F08[v6])(&v12, v4);
      v4[4] = -1;
      v4 += 6;
      v5 -= 24;
    }
    while (v5);
    v4 = *(unsigned int **)(a2 + 24);
  }
  if (v4)
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    result = WTF::fastFree((WTF *)v4, (void *)a2);
  }
  v8 = *(unsigned int *)(a2 + 20);
  v9 = *(unsigned int **)(a2 + 8);
  if ((_DWORD)v8)
  {
    v10 = 24 * v8;
    do
    {
      v11 = v9[4];
      if ((_DWORD)v11 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))off_1E3394F08[v11])(&v13, v9);
      v9[4] = -1;
      v9 += 6;
      v10 -= 24;
    }
    while (v10);
    v9 = *(unsigned int **)(a2 + 8);
  }
  if (v9)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return WTF::fastFree((WTF *)v9, (void *)a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 104) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfoENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3394F08[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfoELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v3 = *((unsigned int *)a2 + 3);
  v4 = *a2;
  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    do
    {
      v6 = v4[4];
      if ((_DWORD)v6 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))off_1E3394F08[v6])(&v8, v4);
      v4[4] = -1;
      v4 += 6;
      v5 -= 24;
    }
    while (v5);
    v4 = *a2;
  }
  if (v4)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return WTF::fastFree((WTF *)v4, a2);
  }
  return result;
}

_QWORD *_ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS9_EUlRT_E_S9_SC_vE3mapERS9_SC_RKSF_(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD v13[2];
  unsigned int v14;
  char v15;
  char *v16;

  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    if (v2 >= 0xAAAAAAB)
    {
LABEL_13:
      __break(0xC471u);
      return result;
    }
    v4 = result;
    v5 = 24 * v2;
    result = (_QWORD *)WTF::fastMalloc((WTF *)(24 * v2));
    *((_DWORD *)v4 + 2) = (v5 & 0xFFFFFFF8) / 0x18;
    *v4 = result;
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = 24 * v6;
      for (i = *a2; ; i += 24)
      {
        v9 = *(unsigned int *)(i + 16);
        if ((_DWORD)v9 == -1)
          break;
        v16 = &v15;
        result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, uint64_t))off_1E3394F68[v9])(v13, &v16, i);
        v10 = *v4 + 24 * *((unsigned int *)v4 + 3);
        *(_BYTE *)v10 = 0;
        *(_DWORD *)(v10 + 16) = -1;
        v11 = v14;
        if (v14 == -1)
        {
          ++*((_DWORD *)v4 + 3);
        }
        else
        {
          result = (_QWORD *)((uint64_t (*)(char **, uint64_t, _QWORD *))off_1E3394F20[v14])(&v16, v10, v13);
          *(_DWORD *)(v10 + 16) = v11;
          v12 = v14;
          ++*((_DWORD *)v4 + 3);
          if ((_DWORD)v12 != -1)
            result = (_QWORD *)((uint64_t (*)(char **, _QWORD *))off_1E3394F08[v12])(&v16, v13);
        }
        v7 -= 24;
        if (!v7)
          return result;
      }
      result = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_13;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_QWORD *WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  char v13;
  char *v14;

  v2 = result;
  v4 = *result;
  v5 = *((_DWORD *)result + 3);
  if (!v5)
  {
LABEL_13:
    *(_QWORD *)a2 = v4;
    v9 = *((_DWORD *)v2 + 2);
    *v2 = 0;
    v2[1] = 0;
    *(_DWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 12) = v5;
    return result;
  }
  v6 = v4 + 24 * v5;
  while (1)
  {
    v7 = *(unsigned int *)(v4 + 16);
    if ((_DWORD)v7 == -1)
      break;
    v14 = &v13;
    result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, unint64_t))off_1E3394F80[v7])(v11, &v14, v4);
    v8 = *(unsigned int *)(v4 + 16);
    if ((_DWORD)v8 != -1)
    {
      if (v12 == -1)
      {
        result = (_QWORD *)((uint64_t (*)(char **, unint64_t))off_1E3394F08[v8])(&v14, v4);
        *(_DWORD *)(v4 + 16) = -1;
      }
      else
      {
LABEL_8:
        v14 = (char *)v4;
        result = (_QWORD *)((uint64_t (*)(char **, unint64_t, _QWORD *))off_1E3394F38[v12])(&v14, v4, v11);
      }
      if (v12 != -1)
        result = (_QWORD *)((uint64_t (*)(char **, _QWORD *))off_1E3394F08[v12])(&v14, v11);
      goto LABEL_11;
    }
    if (v12 != -1)
      goto LABEL_8;
LABEL_11:
    v4 += 24;
    if (v4 >= v6)
    {
      v4 = *v2;
      v5 = *((_DWORD *)v2 + 3);
      goto LABEL_13;
    }
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_QWORD *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEEOST_EEEDcSL_DpT0_(v10);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEEOST_EEEDcSL_DpT0_(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3394F08[v5])(&v12, v4);
LABEL_10:
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    v11 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(v4 + 8) = v11;
    *(_DWORD *)(v4 + 16) = 0;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = *a2;
  *a2 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = a3[1];
  a3[1] = 0;
  result = a2[1];
  a2[1] = v9;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEEOST_EEEDcSL_DpT0_(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3394F08[v5])(&v12, v4);
LABEL_10:
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    v11 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(v4 + 8) = v11;
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = *a2;
  *a2 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = a3[1];
  a3[1] = 0;
  result = a2[1];
  a2[1] = v9;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEEOST_EEEDcSL_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3394F08[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::applyToRequest(WebCore::ResourceRequest &,WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits> &)::$_0,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::applyToRequest(WebCore::ResourceRequest &,WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits> &)::$_1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::applyToRequest(WebCore::ResourceRequest &,WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::AppendOperation,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::SetOperation,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::RemoveOperation> &>(uint64_t ***a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t **v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WebCore::HTTPHeaderNamesHash *v17;
  uint64_t v18;
  char *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  int v23;
  WebCore::ResourceRequestBase *v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  char v29;
  unsigned int v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33[3];
  int v34;
  WTF::StringImpl *v35;

  v4 = *a1;
  v5 = ***a1;
  if (!v5)
  {
LABEL_10:
    v13 = 0;
    goto LABEL_11;
  }
  v6 = *(_DWORD *)(v5 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v8 = v7 >> 8;
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11)
        goto LABEL_10;
      result = WTF::equal(v11, *a2, a3);
      if ((result & 1) != 0)
        break;
    }
    ++i;
  }
  v13 = *(_DWORD *)(v5 + 16 * v10 + 8);
  if (v13 != 3)
  {
LABEL_11:
    v14 = v4[1];
    v15 = *a2;
    if (*a2)
    {
      v16 = *((unsigned int *)v15 + 4);
      v17 = (WebCore::HTTPHeaderNamesHash *)*((_QWORD *)v15 + 1);
      LODWORD(v15) = *((_DWORD *)v15 + 1);
      v18 = (v16 >> 2) & 1;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = (char *)(v15 | (unint64_t)(v18 << 32));
    if ((v14[23] & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v4[1]);
      *((_BYTE *)v14 + 184) |= 1u;
    }
    result = WebCore::HTTPHeaderMap::get((uint64_t)(v14 + 12), v17, v19, &v35);
    v20 = v35;
    if (!v35 || (v23 = *((_DWORD *)v35 + 1)) == 0)
    {
      WebCore::ResourceRequestBase::setHTTPHeaderField((WebCore::ResourceRequestBase *)v4[1], a2, a2 + 1);
LABEL_17:
      if (!v13)
      {
        v22 = *v4;
        v34 = 1;
        WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits>::add<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>((uint64_t)v33, v22, a2, &v34);
      }
      result = (uint64_t)v35;
      v35 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    v24 = (WebCore::ResourceRequestBase *)v4[1];
    *(_DWORD *)v35 += 2;
    v25 = (uint64_t)a2[1];
    if (v25)
    {
      v26 = *(_DWORD *)(v25 + 4);
      *(_DWORD *)v25 += 2;
      if (v26 < 0)
        goto LABEL_53;
    }
    else
    {
      v26 = 0;
    }
    v27 = __OFADD__(v26, 2);
    v28 = v26 + 2;
    v29 = v27;
    if ((v23 & 0x80000000) == 0 && (v29 & 1) == 0)
    {
      result = (v23 + v28);
      if (!__OFADD__(v23, v28))
      {
        v30 = *((_DWORD *)v20 + 4);
        v31 = (v30 >> 2) & 1;
        if (v25 && (v30 & 4) != 0)
          v31 = (*(unsigned __int8 *)(v25 + 16) >> 2) & 1;
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v31, (uint64_t)v20, (int8x16_t *)"; ",
                   2u,
                   v25,
                   v33);
        if (v33[0])
        {
          WebCore::ResourceRequestBase::setHTTPHeaderField(v24, a2, v33);
          v32 = v33[0];
          v33[0] = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
            {
              WTF::StringImpl::destroy(v32, v21);
              if (v25)
              {
LABEL_42:
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v25, v21);
                else
                  *(_DWORD *)v25 -= 2;
              }
LABEL_44:
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v21);
              else
                *(_DWORD *)v20 -= 2;
              goto LABEL_17;
            }
            *(_DWORD *)v32 -= 2;
          }
          if (v25)
            goto LABEL_42;
          goto LABEL_44;
        }
LABEL_54:
        __break(0xC471u);
        return result;
      }
    }
LABEL_53:
    v33[0] = 0;
    goto LABEL_54;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::applyToRequest(WebCore::ResourceRequest &,WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits> &)::$_0,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::applyToRequest(WebCore::ResourceRequest &,WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits> &)::$_1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::applyToRequest(WebCore::ResourceRequest &,WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::AppendOperation,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::SetOperation,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::RemoveOperation> &>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  int v10;
  WTF *v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v4 = *a1;
  v5 = **(_QWORD **)(*a1 + 16);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      v11 = *(WTF **)(v5 + 16 * (v8 & v6));
      if (v11 != (WTF *)-1)
      {
        if (!v11)
          goto LABEL_10;
        result = WTF::equal(v11, *a2, a3);
        if ((result & 1) != 0)
          break;
      }
      ++i;
    }
  }
  else
  {
LABEL_10:
    WebCore::ResourceRequestBase::setHTTPHeaderField(*(WebCore::ResourceRequestBase **)(v4 + 24), a2, a2 + 1);
    v13 = *(uint64_t **)(v4 + 16);
    v15 = 2;
    return (uint64_t)WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits>::add<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>((uint64_t)&v14, v13, a2, &v15);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::applyToRequest(WebCore::ResourceRequest &,WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits> &)::$_0,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::applyToRequest(WebCore::ResourceRequest &,WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits> &)::$_1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::applyToRequest(WebCore::ResourceRequest &,WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::AppendOperation,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::SetOperation,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::RemoveOperation> &>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  int v10;
  WTF *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v4 = *a1;
  v5 = **(_QWORD **)(*a1 + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      v11 = *(WTF **)(v5 + 16 * (v8 & v6));
      if (v11 != (WTF *)-1)
      {
        if (!v11)
          goto LABEL_10;
        result = WTF::equal(v11, *a2, a3);
        if ((result & 1) != 0)
          break;
      }
      ++i;
    }
  }
  else
  {
LABEL_10:
    v13 = *(_QWORD *)(v4 + 40);
    if ((*(_BYTE *)(v13 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(*(WebCore::ResourceRequest **)(v4 + 40));
      *(_BYTE *)(v13 + 184) |= 1u;
    }
    WebCore::HTTPHeaderMap::remove((WebCore::HTTPHeaderMap *)(v13 + 96), a2);
    *(_BYTE *)(v13 + 184) &= ~2u;
    v14 = *(uint64_t **)(v4 + 32);
    v16 = 3;
    return (uint64_t)WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits>::add<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>((uint64_t)&v15, v14, a2, &v16);
  }
  return result;
}

WTF *WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits>::add<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, _DWORD *a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int i;
  unsigned int v14;
  WTF *v15;
  WTF *result;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF *)(v8 + 16 * (v11 & v9));
    result = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = v8 + 16 * v14;
LABEL_13:
    v11 = i + v14;
  }
  if (!result)
  {
    if (v12)
    {
      result = 0;
      *(_QWORD *)v12 = 0;
      *(_DWORD *)(v12 + 8) = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = (WTF *)v12;
    }
    v17 = *a3;
    if (*a3)
      *(_DWORD *)v17 += 2;
    *(_QWORD *)v15 = v17;
    *((_DWORD *)v15 + 2) = *a4;
    v18 = *a2;
    if (*a2)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
        goto LABEL_29;
    }
    else if (3 * v25 <= 4 * v24)
    {
      if (!(_DWORD)v25)
      {
        v26 = 8;
LABEL_34:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v26, (WTF::StringImpl **)v15);
        v15 = result;
        v22 = *a2;
        if (*a2)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
        goto LABEL_38;
      }
LABEL_29:
      v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
      goto LABEL_34;
    }
LABEL_38:
    v28 = v22 + 16 * v25;
    v27 = 1;
    goto LABEL_39;
  }
  result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v20 = *a2;
  if (*a2)
    v21 = *(unsigned int *)(v20 - 4);
  else
    v21 = 0;
  v27 = 0;
  v28 = v20 + 16 * v21;
LABEL_39:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v28;
  *(_BYTE *)(a1 + 16) = v27;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersOperationType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_DWORD *)(v9 + 24);
    do
    {
      *((_QWORD *)v12 - 1) = 0;
      *v12 = 0;
      v12 += 4;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (WTF::StringImpl **)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15 != (WTF::StringImpl *)-1)
      {
        if (v16)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v16 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v16);
          else
            v20 = v19 >> 8;
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = v17 + 16 * v22;
          *(_QWORD *)v23 = 0;
          v24 = *v15;
          *v15 = 0;
          *(_QWORD *)v23 = v24;
          *(_DWORD *)(v23 + 8) = *(_DWORD *)(v6 + 16 * v13 + 8);
          v25 = *v15;
          *v15 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v10);
            else
              *(_DWORD *)v25 -= 2;
          }
          if (v15 == a3)
            v14 = v23;
        }
        else
        {
          *v15 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSE_12SetOperationENSE_15RemoveOperationEEEEE4copyERKSI_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_EEEEEEDcSM_DpT0_@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;

  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSE_12SetOperationENSE_15RemoveOperationEEEEE4copyERKSI_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_EEEEEEDcSM_DpT0_@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;

  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_DWORD *)(a1 + 16) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSE_12SetOperationENSE_15RemoveOperationEEEEE4copyERKSI_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_EEEEEEDcSM_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 16) = 2;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSE_12SetOperationENSE_15RemoveOperationEEEEE4copyEOSI_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_EEEEEEDcSL_DpT0_@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;

  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSE_12SetOperationENSE_15RemoveOperationEEEEE4copyEOSI_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_EEEEEEDcSL_DpT0_@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;

  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_DWORD *)(a1 + 16) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSE_12SetOperationENSE_15RemoveOperationEEEEE4copyEOSI_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSF_SG_SH_EEEEEEDcSL_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 16) = 2;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::AppendOperation,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::SetOperation,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::RemoveOperation> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  WTF *v11;
  size_t v12;
  size_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  WTF *v42;
  WTF *v43;

  v1 = *a1;
  WTF::String::utf8();
  v2 = *(_QWORD *)(v1 + 8);
  if (v43)
  {
    v3 = *((_QWORD *)v43 + 1);
    if (HIDWORD(v3))
      goto LABEL_64;
  }
  else
  {
    LODWORD(v3) = 0;
  }
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(unsigned int *)(v2 + 12);
  v6 = v5 + 4;
  if (v5 + 4 > v4)
  {
    v24 = v4 + (v4 >> 2);
    if (v24 >= 0x10)
      v25 = v24 + 1;
    else
      v25 = 16;
    if (v25 <= v6)
      v26 = v5 + 4;
    else
      v26 = v25;
    if (HIDWORD(v26))
    {
      __break(0xC471u);
      JUMPOUT(0x1957272A4);
    }
    v27 = *(void **)v2;
    v28 = (void *)WTF::fastMalloc((WTF *)v26);
    *(_DWORD *)(v2 + 8) = v26;
    *(_QWORD *)v2 = v28;
    memcpy(v28, v27, v5);
    if (v27)
    {
      if (*(void **)v2 == v27)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v27, v29);
    }
  }
  v7 = *(unsigned int *)(v2 + 12);
  if (v6 < v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19572727CLL);
  }
  *(_DWORD *)(*(_QWORD *)v2 + v7) = v3;
  *(_DWORD *)(v2 + 12) = v6;
  v8 = *(_QWORD *)(v1 + 8);
  result = WTF::String::utf8();
  v11 = v42;
  if (v42)
  {
    v12 = *((_QWORD *)v42 + 1);
    if (v12)
    {
      v13 = *(unsigned int *)(v8 + 8);
      v14 = *(unsigned int *)(v8 + 12);
      v15 = v12 + v14;
      if (v12 + v14 > v13)
      {
        v30 = v13 + (v13 >> 2);
        if (v30 >= 0x10)
          v31 = v30 + 1;
        else
          v31 = 16;
        if (v31 <= v15)
          v32 = v12 + v14;
        else
          v32 = v31;
        if (HIDWORD(v32))
        {
          __break(0xC471u);
          JUMPOUT(0x1957272ACLL);
        }
        v33 = *(void **)v8;
        v34 = (void *)WTF::fastMalloc((WTF *)v32);
        *(_DWORD *)(v8 + 8) = v32;
        *(_QWORD *)v8 = v34;
        memcpy(v34, v33, v14);
        if (v33)
        {
          if (*(void **)v8 == v33)
          {
            *(_QWORD *)v8 = 0;
            *(_DWORD *)(v8 + 8) = 0;
          }
          WTF::fastFree((WTF *)v33, v35);
        }
      }
      v16 = *(unsigned int *)(v8 + 12);
      if (v15 < v16)
      {
        __break(0xC471u);
        JUMPOUT(0x19572728CLL);
      }
      result = (uint64_t)memcpy((void *)(*(_QWORD *)v8 + v16), (char *)v42 + 16, v12);
      *(_DWORD *)(v8 + 12) = v15;
      v11 = v42;
    }
    if (*(_DWORD *)v11 == 1)
      result = WTF::fastFree(v11, v10);
    else
      --*(_DWORD *)v11;
  }
  v17 = v43;
  if (v43)
  {
    v18 = *((_QWORD *)v43 + 1);
    if (v18)
    {
      v19 = *(_QWORD *)(v1 + 8);
      v20 = *(unsigned int *)(v19 + 8);
      v21 = *(unsigned int *)(v19 + 12);
      v22 = v18 + v21;
      if (v18 + v21 > v20)
      {
        v36 = v20 + (v20 >> 2);
        if (v36 >= 0x10)
          v37 = v36 + 1;
        else
          v37 = 16;
        if (v37 <= v22)
          v38 = v18 + v21;
        else
          v38 = v37;
        if (HIDWORD(v38))
        {
LABEL_64:
          __break(0xC471u);
          JUMPOUT(0x195727010);
        }
        v39 = *(void **)v19;
        v40 = (void *)WTF::fastMalloc((WTF *)v38);
        *(_DWORD *)(v19 + 8) = v38;
        *(_QWORD *)v19 = v40;
        memcpy(v40, v39, v21);
        if (v39)
        {
          if (*(void **)v19 == v39)
          {
            *(_QWORD *)v19 = 0;
            *(_DWORD *)(v19 + 8) = 0;
          }
          WTF::fastFree((WTF *)v39, v41);
        }
      }
      v23 = *(unsigned int *)(v19 + 12);
      if (v22 < v23)
      {
        __break(0xC471u);
        JUMPOUT(0x19572729CLL);
      }
      result = (uint64_t)memcpy((void *)(*(_QWORD *)v19 + v23), (char *)v43 + 16, v18);
      *(_DWORD *)(v19 + 12) = v22;
      v17 = v43;
    }
    if (*(_DWORD *)v17 == 1)
      return WTF::fastFree(v17, v10);
    else
      --*(_DWORD *)v17;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::AppendOperation,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::SetOperation,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::RemoveOperation> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  WTF *v11;
  size_t v12;
  size_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  WTF *v42;
  WTF *v43;

  v1 = *a1;
  WTF::String::utf8();
  v2 = *(_QWORD *)(v1 + 8);
  if (v43)
  {
    v3 = *((_QWORD *)v43 + 1);
    if (HIDWORD(v3))
      goto LABEL_64;
  }
  else
  {
    LODWORD(v3) = 0;
  }
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(unsigned int *)(v2 + 12);
  v6 = v5 + 4;
  if (v5 + 4 > v4)
  {
    v24 = v4 + (v4 >> 2);
    if (v24 >= 0x10)
      v25 = v24 + 1;
    else
      v25 = 16;
    if (v25 <= v6)
      v26 = v5 + 4;
    else
      v26 = v25;
    if (HIDWORD(v26))
    {
      __break(0xC471u);
      JUMPOUT(0x1957275B4);
    }
    v27 = *(void **)v2;
    v28 = (void *)WTF::fastMalloc((WTF *)v26);
    *(_DWORD *)(v2 + 8) = v26;
    *(_QWORD *)v2 = v28;
    memcpy(v28, v27, v5);
    if (v27)
    {
      if (*(void **)v2 == v27)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v27, v29);
    }
  }
  v7 = *(unsigned int *)(v2 + 12);
  if (v6 < v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19572758CLL);
  }
  *(_DWORD *)(*(_QWORD *)v2 + v7) = v3;
  *(_DWORD *)(v2 + 12) = v6;
  v8 = *(_QWORD *)(v1 + 8);
  result = WTF::String::utf8();
  v11 = v42;
  if (v42)
  {
    v12 = *((_QWORD *)v42 + 1);
    if (v12)
    {
      v13 = *(unsigned int *)(v8 + 8);
      v14 = *(unsigned int *)(v8 + 12);
      v15 = v12 + v14;
      if (v12 + v14 > v13)
      {
        v30 = v13 + (v13 >> 2);
        if (v30 >= 0x10)
          v31 = v30 + 1;
        else
          v31 = 16;
        if (v31 <= v15)
          v32 = v12 + v14;
        else
          v32 = v31;
        if (HIDWORD(v32))
        {
          __break(0xC471u);
          JUMPOUT(0x1957275BCLL);
        }
        v33 = *(void **)v8;
        v34 = (void *)WTF::fastMalloc((WTF *)v32);
        *(_DWORD *)(v8 + 8) = v32;
        *(_QWORD *)v8 = v34;
        memcpy(v34, v33, v14);
        if (v33)
        {
          if (*(void **)v8 == v33)
          {
            *(_QWORD *)v8 = 0;
            *(_DWORD *)(v8 + 8) = 0;
          }
          WTF::fastFree((WTF *)v33, v35);
        }
      }
      v16 = *(unsigned int *)(v8 + 12);
      if (v15 < v16)
      {
        __break(0xC471u);
        JUMPOUT(0x19572759CLL);
      }
      result = (uint64_t)memcpy((void *)(*(_QWORD *)v8 + v16), (char *)v42 + 16, v12);
      *(_DWORD *)(v8 + 12) = v15;
      v11 = v42;
    }
    if (*(_DWORD *)v11 == 1)
      result = WTF::fastFree(v11, v10);
    else
      --*(_DWORD *)v11;
  }
  v17 = v43;
  if (v43)
  {
    v18 = *((_QWORD *)v43 + 1);
    if (v18)
    {
      v19 = *(_QWORD *)(v1 + 8);
      v20 = *(unsigned int *)(v19 + 8);
      v21 = *(unsigned int *)(v19 + 12);
      v22 = v18 + v21;
      if (v18 + v21 > v20)
      {
        v36 = v20 + (v20 >> 2);
        if (v36 >= 0x10)
          v37 = v36 + 1;
        else
          v37 = 16;
        if (v37 <= v22)
          v38 = v18 + v21;
        else
          v38 = v37;
        if (HIDWORD(v38))
        {
LABEL_64:
          __break(0xC471u);
          JUMPOUT(0x195727320);
        }
        v39 = *(void **)v19;
        v40 = (void *)WTF::fastMalloc((WTF *)v38);
        *(_DWORD *)(v19 + 8) = v38;
        *(_QWORD *)v19 = v40;
        memcpy(v40, v39, v21);
        if (v39)
        {
          if (*(void **)v19 == v39)
          {
            *(_QWORD *)v19 = 0;
            *(_DWORD *)(v19 + 8) = 0;
          }
          WTF::fastFree((WTF *)v39, v41);
        }
      }
      v23 = *(unsigned int *)(v19 + 12);
      if (v22 < v23)
      {
        __break(0xC471u);
        JUMPOUT(0x1957275ACLL);
      }
      result = (uint64_t)memcpy((void *)(*(_QWORD *)v19 + v23), (char *)v43 + 16, v18);
      *(_DWORD *)(v19 + 12) = v22;
      v17 = v43;
    }
    if (*(_DWORD *)v17 == 1)
      return WTF::fastFree(v17, v10);
    else
      --*(_DWORD *)v17;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::AppendOperation,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::SetOperation,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::RemoveOperation> const&>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  WTF *v4;
  size_t v5;
  size_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  WTF *v16;

  v1 = **a1;
  result = WTF::String::utf8();
  v4 = v16;
  if (v16)
  {
    v5 = *((_QWORD *)v16 + 1);
    if (!v5)
    {
LABEL_6:
      if (*(_DWORD *)v4 == 1)
        return WTF::fastFree(v4, v3);
      --*(_DWORD *)v4;
      return result;
    }
    v6 = *(unsigned int *)(v1 + 8);
    v7 = *(unsigned int *)(v1 + 12);
    v8 = v5 + v7;
    if (v5 + v7 > v6)
    {
      v10 = v6 + (v6 >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= v8)
        v12 = v5 + v7;
      else
        v12 = v11;
      if (HIDWORD(v12))
        goto LABEL_22;
      v13 = *(void **)v1;
      v14 = (void *)WTF::fastMalloc((WTF *)v12);
      *(_DWORD *)(v1 + 8) = v12;
      *(_QWORD *)v1 = v14;
      memcpy(v14, v13, v7);
      if (v13)
      {
        if (*(void **)v1 == v13)
        {
          *(_QWORD *)v1 = 0;
          *(_DWORD *)(v1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v13, v15);
      }
    }
    v9 = *(unsigned int *)(v1 + 12);
    if (v8 >= v9)
    {
      result = (uint64_t)memcpy((void *)(*(_QWORD *)v1 + v9), (char *)v16 + 16, v5);
      *(_DWORD *)(v1 + 12) = v8;
      v4 = v16;
      goto LABEL_6;
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x1957276F4);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v5;
  v6 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 8) = v6;
  v7 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v7;
  v8 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(a2 + 24) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 8);
  v9 = *((_WORD *)a3 + 18);
  *(_BYTE *)(a2 + 40) = 0;
  v10 = a2 + 40;
  *(_WORD *)(v10 - 4) = v9;
  *(_DWORD *)(v10 - 8) = v8;
  *(_DWORD *)(v10 + 32) = -1;
  v11 = *((unsigned int *)a3 + 18);
  if ((_DWORD)v11 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E33950D0[v11])(&v15);
    *(_DWORD *)(a2 + 72) = v11;
  }
  v13 = a3[10];
  a3[10] = 0;
  *(_QWORD *)(a2 + 80) = v13;
  v14 = a3[11];
  a3[11] = 0;
  *(_QWORD *)(a2 + 88) = v14;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction18URLTransformActionENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(int a1, WebCore::ContentExtensions::RedirectAction::URLTransformAction *this)
{
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::~URLTransformAction(this, this);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSD_23RegexSubstitutionActionENSD_18URLTransformActionENSD_9URLActionEEEEE4copyERKSI_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SG_SH_EEEEEEDcSM_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSD_23RegexSubstitutionActionENSD_18URLTransformActionENSD_9URLActionEEEEE4copyERKSI_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SG_SH_EEEEEEDcSM_DpT0_@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;

  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_DWORD *)(a1 + 96) = 1;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSD_23RegexSubstitutionActionENSD_18URLTransformActionENSD_9URLActionEEEEE4copyERKSI_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SG_SH_EEEEEEDcSM_DpT0_@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  WTF::StringImpl *v5;
  int v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  char v16;

  WebCore::ContentExtensions::RedirectAction::URLTransformAction::isolatedCopy(a1, (uint64_t)&v9);
  v3 = v9;
  v4 = v10;
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 32) = v11;
  *(_WORD *)(a2 + 36) = v12;
  *(_BYTE *)(a2 + 40) = 0;
  v5 = (WTF::StringImpl *)(a2 + 40);
  *(_DWORD *)(a2 + 72) = -1;
  v6 = v14;
  if (v14 != -1)
  {
    ((void (*)(char *, WTF::StringImpl *, uint64_t *))off_1E33950D0[v14])(&v16, v5, &v13);
    *(_DWORD *)(a2 + 72) = v6;
  }
  v7 = v15;
  v15 = 0uLL;
  *(_OWORD *)(a2 + 80) = v7;
  *(_DWORD *)(a2 + 96) = 2;
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::~URLTransformAction((WebCore::ContentExtensions::RedirectAction::URLTransformAction *)&v9, v5);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSD_23RegexSubstitutionActionENSD_18URLTransformActionENSD_9URLActionEEEEE4copyERKSI_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SG_SH_EEEEEEDcSM_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 96) = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSD_23RegexSubstitutionActionENSD_18URLTransformActionENSD_9URLActionEEEEE4copyEOSI_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSE_SF_SG_SH_EEEEEEDcSL_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSD_23RegexSubstitutionActionENSD_18URLTransformActionENSD_9URLActionEEEEE4copyEOSI_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSE_SF_SG_SH_EEEEEEDcSL_DpT0_@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;

  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_DWORD *)(a1 + 96) = 1;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSD_23RegexSubstitutionActionENSD_18URLTransformActionENSD_9URLActionEEEEE4copyEOSI_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSE_SF_SG_SH_EEEEEEDcSL_DpT0_@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  WTF::StringImpl *v5;
  int v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  char v16;

  WebCore::ContentExtensions::RedirectAction::URLTransformAction::isolatedCopy(a1, (uint64_t)&v9);
  v3 = v9;
  v4 = v10;
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 32) = v11;
  *(_WORD *)(a2 + 36) = v12;
  *(_BYTE *)(a2 + 40) = 0;
  v5 = (WTF::StringImpl *)(a2 + 40);
  *(_DWORD *)(a2 + 72) = -1;
  v6 = v14;
  if (v14 != -1)
  {
    ((void (*)(char *, WTF::StringImpl *, uint64_t *))off_1E33950D0[v14])(&v16, v5, &v13);
    *(_DWORD *)(a2 + 72) = v6;
  }
  v7 = v15;
  v15 = 0uLL;
  *(_OWORD *)(a2 + 80) = v7;
  *(_DWORD *)(a2 + 96) = 2;
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::~URLTransformAction((WebCore::ContentExtensions::RedirectAction::URLTransformAction *)&v9, v5);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSD_23RegexSubstitutionActionENSD_18URLTransformActionENSD_9URLActionEEEEE4copyEOSI_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSE_SF_SG_SH_EEEEEEDcSL_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 96) = 3;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1,WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_2,WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction,WebCore::ContentExtensions::RedirectAction::URLTransformAction,WebCore::ContentExtensions::RedirectAction::URLAction> const&>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  WTF *v4;
  size_t v5;
  size_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  WTF *v16;

  v1 = **a1;
  result = WTF::String::utf8();
  v4 = v16;
  if (v16)
  {
    v5 = *((_QWORD *)v16 + 1);
    if (!v5)
    {
LABEL_6:
      if (*(_DWORD *)v4 == 1)
        return WTF::fastFree(v4, v3);
      --*(_DWORD *)v4;
      return result;
    }
    v6 = *(unsigned int *)(v1 + 8);
    v7 = *(unsigned int *)(v1 + 12);
    v8 = v5 + v7;
    if (v5 + v7 > v6)
    {
      v10 = v6 + (v6 >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= v8)
        v12 = v5 + v7;
      else
        v12 = v11;
      if (HIDWORD(v12))
        goto LABEL_22;
      v13 = *(void **)v1;
      v14 = (void *)WTF::fastMalloc((WTF *)v12);
      *(_DWORD *)(v1 + 8) = v12;
      *(_QWORD *)v1 = v14;
      memcpy(v14, v13, v7);
      if (v13)
      {
        if (*(void **)v1 == v13)
        {
          *(_QWORD *)v1 = 0;
          *(_DWORD *)(v1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v13, v15);
      }
    }
    v9 = *(unsigned int *)(v1 + 12);
    if (v8 >= v9)
    {
      result = (uint64_t)memcpy((void *)(*(_QWORD *)v1 + v9), (char *)v16 + 16, v5);
      *(_DWORD *)(v1 + 12) = v8;
      v4 = v16;
      goto LABEL_6;
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x195727BF0);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1,WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_2,WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction,WebCore::ContentExtensions::RedirectAction::URLTransformAction,WebCore::ContentExtensions::RedirectAction::URLAction> const&>(uint64_t a1, uint64_t a2)
{
  return WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction::serialize(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1,WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_2,WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction,WebCore::ContentExtensions::RedirectAction::URLTransformAction,WebCore::ContentExtensions::RedirectAction::URLAction> const&>(uint64_t a1, uint64_t a2)
{
  return WebCore::ContentExtensions::RedirectAction::URLTransformAction::serialize(a2, *(_QWORD *)(*(_QWORD *)a1 + 16));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1,WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_2,WebCore::ContentExtensions::RedirectAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction,WebCore::ContentExtensions::RedirectAction::URLTransformAction,WebCore::ContentExtensions::RedirectAction::URLAction> const&>(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  WTF *v4;
  size_t v5;
  size_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  WTF *v16;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  result = WTF::String::utf8();
  v4 = v16;
  if (v16)
  {
    v5 = *((_QWORD *)v16 + 1);
    if (!v5)
    {
LABEL_6:
      if (*(_DWORD *)v4 == 1)
        return WTF::fastFree(v4, v3);
      --*(_DWORD *)v4;
      return result;
    }
    v6 = *(unsigned int *)(v1 + 8);
    v7 = *(unsigned int *)(v1 + 12);
    v8 = v5 + v7;
    if (v5 + v7 > v6)
    {
      v10 = v6 + (v6 >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= v8)
        v12 = v5 + v7;
      else
        v12 = v11;
      if (HIDWORD(v12))
        goto LABEL_22;
      v13 = *(void **)v1;
      v14 = (void *)WTF::fastMalloc((WTF *)v12);
      *(_DWORD *)(v1 + 8) = v12;
      *(_QWORD *)v1 = v14;
      memcpy(v14, v13, v7);
      if (v13)
      {
        if (*(void **)v1 == v13)
        {
          *(_QWORD *)v1 = 0;
          *(_DWORD *)(v1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v13, v15);
      }
    }
    v9 = *(unsigned int *)(v1 + 12);
    if (v8 >= v9)
    {
      result = (uint64_t)memcpy((void *)(*(_QWORD *)v1 + v9), (char *)v16 + 16, v5);
      *(_DWORD *)(v1 + 12) = v8;
      v4 = v16;
      goto LABEL_6;
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x195727D50);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_0,WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_1,WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_2,WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction,WebCore::ContentExtensions::RedirectAction::URLTransformAction,WebCore::ContentExtensions::RedirectAction::URLAction> &>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  __int128 v9;
  __int128 v10;

  v1 = *a1;
  v2 = **a1;
  v3 = *(WTF::StringImpl **)v2;
  if (*(_QWORD *)v2)
    *(_DWORD *)v3 += 2;
  v8 = v3;
  v9 = *(_OWORD *)(v2 + 8);
  v10 = *(_OWORD *)(v2 + 24);
  WTF::URL::setPath();
  v5 = v1[1];
  if ((*(_BYTE *)(v5 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v5);
    *(_BYTE *)(v5 + 184) |= 1u;
  }
  if (v8)
    *(_DWORD *)v8 += 2;
  v6 = *(WTF::StringImpl **)v5;
  *(_QWORD *)v5 = v8;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_OWORD *)(v5 + 24) = v10;
  *(_OWORD *)(v5 + 8) = v9;
  *(_BYTE *)(v5 + 148) &= ~0x20u;
  *(_BYTE *)(v5 + 184) &= ~2u;
  result = (uint64_t)v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_0,WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_1,WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_2,WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction,WebCore::ContentExtensions::RedirectAction::URLTransformAction,WebCore::ContentExtensions::RedirectAction::URLAction> &>(uint64_t *a1, WTF::StringImpl **this)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  __int128 v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if ((*(_BYTE *)(v4 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(*(WebCore::ResourceRequest **)(*a1 + 16));
    *(_BYTE *)(v4 + 184) |= 1u;
  }
  v5 = *(WTF::StringImpl **)v4;
  if (*(_QWORD *)v4)
    *(_DWORD *)v5 += 2;
  v13 = v5;
  v6 = *(_OWORD *)(v4 + 24);
  v14 = *(_OWORD *)(v4 + 8);
  v15 = v6;
  WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction::applyToURL(this, (WTF::URL *)&v13);
  v8 = *(_QWORD *)(v3 + 16);
  if ((*(_BYTE *)(v8 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(*(WebCore::ResourceRequest **)(v3 + 16));
    *(_BYTE *)(v8 + 184) |= 1u;
  }
  v9 = v13;
  if (v13)
    *(_DWORD *)v13 += 2;
  v10 = *(WTF::StringImpl **)v8;
  *(_QWORD *)v8 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v14;
  *(_OWORD *)(v8 + 24) = v15;
  *(_OWORD *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 148) &= ~0x20u;
  *(_BYTE *)(v8 + 184) &= ~2u;
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_0,WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_1,WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_2,WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction,WebCore::ContentExtensions::RedirectAction::URLTransformAction,WebCore::ContentExtensions::RedirectAction::URLAction> &>(uint64_t *a1, WebCore::ContentExtensions::RedirectAction::URLTransformAction *this)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  __int128 v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 24);
  if ((*(_BYTE *)(v4 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(*(WebCore::ResourceRequest **)(*a1 + 24));
    *(_BYTE *)(v4 + 184) |= 1u;
  }
  v5 = *(WTF::StringImpl **)v4;
  if (*(_QWORD *)v4)
    *(_DWORD *)v5 += 2;
  v13 = v5;
  v6 = *(_OWORD *)(v4 + 24);
  v14 = *(_OWORD *)(v4 + 8);
  v15 = v6;
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::applyToURL(this, (WTF::URL *)&v13);
  v8 = *(_QWORD *)(v3 + 24);
  if ((*(_BYTE *)(v8 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(*(WebCore::ResourceRequest **)(v3 + 24));
    *(_BYTE *)(v8 + 184) |= 1u;
  }
  v9 = v13;
  if (v13)
    *(_DWORD *)v13 += 2;
  v10 = *(WTF::StringImpl **)v8;
  *(_QWORD *)v8 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v14;
  *(_OWORD *)(v8 + 24) = v15;
  *(_OWORD *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 148) &= ~0x20u;
  *(_BYTE *)(v8 + 184) &= ~2u;
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_0,WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_1,WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_2,WebCore::ContentExtensions::RedirectAction::applyToRequest(WebCore::ResourceRequest &,WTF::URL const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RedirectAction::RegexSubstitutionAction,WebCore::ContentExtensions::RedirectAction::URLTransformAction,WebCore::ContentExtensions::RedirectAction::URLAction> &>(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  __int128 v8;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;
  WTF::StringImpl *v12;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (*a2)
    *(_DWORD *)v2 += 2;
  v12 = v2;
  MEMORY[0x19AEA52D4](&v9, &v12, 0);
  v5 = v12;
  v12 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  if ((*(_BYTE *)(v3 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v3);
    *(_BYTE *)(v3 + 184) |= 1u;
  }
  result = v9;
  if (v9)
    *(_DWORD *)v9 += 2;
  v7 = *(WTF::StringImpl **)v3;
  *(_QWORD *)v3 = result;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v4);
      result = v9;
    }
    else
    {
      *(_DWORD *)v7 -= 2;
    }
  }
  v8 = v10;
  *(_OWORD *)(v3 + 24) = v11;
  *(_OWORD *)(v3 + 8) = v8;
  *(_BYTE *)(v3 + 148) &= ~0x20u;
  *(_BYTE *)(v3 + 184) &= ~2u;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(int a1, WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *this)
{
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::~QueryTransform(this, this);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE4copyERKSH_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSB_SG_EEEEEEDcSL_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE4copyERKSH_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSB_SG_EEEEEEDcSL_DpT0_(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v14 = 0;
  v15 = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore22WebLockManagerSnapshot4InfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS8_EUlRT_E_S8_SB_vE3mapERS8_SB_RKSE_((uint64_t)&v14, (uint64_t *)a1);
  v5 = *(unsigned int *)(a1 + 28);
  if (!(_DWORD)v5)
  {
    LODWORD(v8) = 0;
    v6 = 0;
LABEL_8:
    v12 = v14;
    v14 = 0;
    *(_QWORD *)a2 = v12;
    v13 = v15;
    v15 = 0;
    *(_QWORD *)(a2 + 8) = v13;
    v16 = 0;
    *(_QWORD *)(a2 + 16) = v6;
    v17 = 0;
    *(_DWORD *)(a2 + 24) = v5;
    *(_DWORD *)(a2 + 28) = v8;
    *(_DWORD *)(a2 + 32) = 1;
    WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::~QueryTransform((WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *)&v14, v4);
    return;
  }
  if (!(v5 >> 29))
  {
    v6 = WTF::fastMalloc((WTF *)(8 * v5));
    v7 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 16);
      v10 = 8 * v7;
      do
      {
        v11 = v8;
        WTF::String::isolatedCopy();
        v8 = v11 + 1;
        *(_QWORD *)(v6 + 8 * v11) = v18;
        v9 += 8;
        v10 -= 8;
      }
      while (v10);
    }
    else
    {
      LODWORD(v8) = 0;
    }
    goto LABEL_8;
  }
  __break(0xC471u);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE4copyEOSH_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSB_SG_EEEEEEDcSK_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE4copyEOSH_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSB_SG_EEEEEEDcSK_DpT0_(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)&v14, (uint64_t *)a1);
  v5 = *(WTF::StringImpl ***)(a1 + 16);
  v6 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v6)
  {
    v10 = &v5[v6];
    while (1)
    {
      WTF::String::isolatedCopy();
      v11 = v18;
      v18 = 0;
      v12 = *v5;
      *v5 = v11;
      if (v12)
      {
        v13 = *(_DWORD *)v12 - 2;
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v4);
          v12 = v18;
          v18 = 0;
          if (!v12)
            goto LABEL_7;
          v13 = *(_DWORD *)v12 - 2;
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::destroy(v12, v4);
            goto LABEL_7;
          }
        }
        *(_DWORD *)v12 = v13;
      }
LABEL_7:
      if (++v5 >= v10)
      {
        v5 = *(WTF::StringImpl ***)(a1 + 16);
        LODWORD(v6) = *(_DWORD *)(a1 + 28);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  v7 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v8 = v14;
  v14 = 0;
  *(_QWORD *)a2 = v8;
  v9 = v15;
  v15 = 0;
  *(_QWORD *)(a2 + 8) = v9;
  v16 = 0;
  *(_QWORD *)(a2 + 16) = v5;
  v17 = 0;
  *(_DWORD *)(a2 + 24) = v7;
  *(_DWORD *)(a2 + 28) = v6;
  *(_DWORD *)(a2 + 32) = 1;
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::~QueryTransform((WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *)&v14, v4);
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::RedirectAction::URLTransformAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,WebCore::ContentExtensions::RedirectAction::URLTransformAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform> const&>(uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;

  v1 = *result;
  v2 = **result;
  v3 = *(_QWORD *)(*result)[1];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (HIDWORD(v4))
      goto LABEL_38;
  }
  else
  {
    LODWORD(v4) = 0;
  }
  v5 = *(unsigned int *)(v2 + 8);
  v6 = *(unsigned int *)(v2 + 12);
  v7 = v6 + 4;
  if (v6 + 4 > v5)
  {
    v16 = v5 + (v5 >> 2);
    if (v16 >= 0x10)
      v17 = v16 + 1;
    else
      v17 = 16;
    if (v17 <= v7)
      v18 = v6 + 4;
    else
      v18 = v17;
    if (HIDWORD(v18))
    {
      __break(0xC471u);
      JUMPOUT(0x195728610);
    }
    v19 = *(void **)v2;
    v20 = (void *)WTF::fastMalloc((WTF *)v18);
    *(_DWORD *)(v2 + 8) = v18;
    *(_QWORD *)v2 = v20;
    result = (uint64_t **)memcpy(v20, v19, v6);
    if (v19)
    {
      if (*(void **)v2 == v19)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      result = (uint64_t **)WTF::fastFree((WTF *)v19, v21);
    }
  }
  v8 = *(unsigned int *)(v2 + 12);
  if (v7 < v8)
  {
    __break(0xC471u);
    JUMPOUT(0x195728600);
  }
  *(_DWORD *)(*(_QWORD *)v2 + v8) = v4;
  *(_DWORD *)(v2 + 12) = v7;
  v9 = *(_QWORD *)v1[1];
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *v1;
      v12 = *(unsigned int *)(*v1 + 8);
      v13 = *(unsigned int *)(*v1 + 12);
      v14 = v10 + v13;
      if (v10 + v13 > v12)
      {
        v22 = v12 + (v12 >> 2);
        if (v22 >= 0x10)
          v23 = v22 + 1;
        else
          v23 = 16;
        if (v23 <= v14)
          v24 = v10 + v13;
        else
          v24 = v23;
        if (HIDWORD(v24))
        {
LABEL_38:
          __break(0xC471u);
          JUMPOUT(0x1957284A0);
        }
        v25 = *(void **)v11;
        v26 = (void *)WTF::fastMalloc((WTF *)v24);
        *(_DWORD *)(v11 + 8) = v24;
        *(_QWORD *)v11 = v26;
        memcpy(v26, v25, v13);
        if (v25)
        {
          if (*(void **)v11 == v25)
          {
            *(_QWORD *)v11 = 0;
            *(_DWORD *)(v11 + 8) = 0;
          }
          WTF::fastFree((WTF *)v25, v27);
        }
      }
      v15 = *(unsigned int *)(v11 + 12);
      if (v14 < v15)
      {
        __break(0xC471u);
        JUMPOUT(0x195728608);
      }
      result = (uint64_t **)memcpy((void *)(*(_QWORD *)v11 + v15), (const void *)(v9 + 16), v10);
      *(_DWORD *)(v11 + 12) = v14;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::RedirectAction::URLTransformAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,WebCore::ContentExtensions::RedirectAction::URLTransformAction::serialize(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform> const&>(uint64_t a1, uint64_t a2)
{
  return WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::serialize(a2, *(_QWORD *)(*(_QWORD *)a1 + 16));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v4 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 0;
  *(_DWORD *)(a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 7);
  *((_DWORD *)a3 + 7) = 0;
  *(_DWORD *)(a2 + 28) = v4;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransform13QueryKeyValueENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::RedirectAction::URLTransformAction::applyToURL(WTF::URL &)::$_0,WebCore::ContentExtensions::RedirectAction::URLTransformAction::applyToURL(WTF::URL &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform> const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (*a2)
    return WTF::URL::setQuery();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::RedirectAction::URLTransformAction::applyToURL(WTF::URL &)::$_0,WebCore::ContentExtensions::RedirectAction::URLTransformAction::applyToURL(WTF::URL &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform> const&>(uint64_t a1, WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *this, const WTF::StringImpl *a3)
{
  return WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::applyToURL((uint64_t)this, *(WTF::URL **)(*(_QWORD *)a1 + 8), a3);
}

uint64_t WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;

  v3 = result;
  v4 = *a2;
  v5 = *((_DWORD *)a2 + 3);
  if (v5)
  {
    v6 = v4 + 24 * v5;
    while (1)
    {
      WTF::String::isolatedCopy();
      v13 = *(_BYTE *)(v4 + 8);
      v7 = (WTF::StringImpl **)(v4 + 16);
      WTF::String::isolatedCopy();
      v9 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = v12;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      *(_BYTE *)(v4 + 8) = v13;
      v10 = *v7;
      *v7 = v14;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::destroy(v10, v8);
          v14 = 0;
          goto LABEL_10;
        }
        *(_DWORD *)v10 -= 2;
      }
      v14 = 0;
LABEL_10:
      result = 0;
      v12 = 0;
      v4 += 24;
      if ((unint64_t)(v7 + 1) >= v6)
      {
        v4 = *a2;
        v5 = *((_DWORD *)a2 + 3);
        break;
      }
    }
  }
  *(_QWORD *)v3 = v4;
  v11 = *((_DWORD *)a2 + 2);
  *a2 = 0;
  a2[1] = 0;
  *(_DWORD *)(v3 + 8) = v11;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t WebCore::ContentExtensions::resolvePendingDisplayNoneActions(uint64_t result, WTF::StringImpl *a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _QWORD *v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  _BYTE *v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  WTF::StringImpl *v34;

  v4 = result;
  v5 = (_QWORD *)*a3;
  if (*a3)
  {
    v6 = *((unsigned int *)v5 - 1);
    v7 = &v5[9 * v6];
    if (*((_DWORD *)v5 - 3))
    {
      v8 = (_QWORD *)*a3;
      if (!(_DWORD)v6)
        goto LABEL_20;
      v9 = 72 * v6;
      v8 = (_QWORD *)*a3;
      while (1)
      {
        v10 = *v8;
        if (!*v8)
          break;
        if (*(_DWORD *)(v10 + 4))
          v11 = 0;
        else
          v11 = *((_BYTE *)v8 + 8) == 0;
        if (v11)
          goto LABEL_7;
        if (v10 != -1)
          goto LABEL_20;
LABEL_15:
        v8 += 9;
        v9 -= 72;
        if (!v9)
        {
          v8 = v7;
          goto LABEL_20;
        }
      }
      if (*((_BYTE *)v8 + 8))
        goto LABEL_20;
LABEL_7:
      if (v10 != -1
        && *((unsigned __int8 *)v8 + 9) | *((unsigned __int8 *)v8 + 10) | *((_DWORD *)v8 + 3) | *((_DWORD *)v8 + 7))
      {
        goto LABEL_20;
      }
      goto LABEL_15;
    }
    v8 = &v5[9 * v6];
  }
  else
  {
    v8 = 0;
    LODWORD(v6) = 0;
  }
  v7 = &v5[9 * v6];
LABEL_20:
  if (v5)
    v12 = &v5[9 * *((unsigned int *)v5 - 1)];
  else
    v12 = 0;
  if (v12 != v8)
  {
    v33 = a3;
    while (1)
    {
      v13 = *(unsigned int *)(v4 + 12);
      if ((_DWORD)v13 == *(_DWORD *)(v4 + 8))
      {
        v14 = v13 + (v13 >> 2);
        if (v14 >= 0x10)
          v15 = v14 + 1;
        else
          v15 = 16;
        if (v15 <= v13 + 1)
          v16 = v13 + 1;
        else
          v16 = v15;
        if (HIDWORD(v16))
          goto LABEL_74;
        v17 = *(void **)v4;
        v18 = (void *)WTF::fastMalloc((WTF *)v16);
        *(_DWORD *)(v4 + 8) = v16;
        *(_QWORD *)v4 = v18;
        memcpy(v18, v17, v13);
        if (v17)
        {
          if (*(void **)v4 == v17)
          {
            *(_QWORD *)v4 = 0;
            *(_DWORD *)(v4 + 8) = 0;
          }
          WTF::fastFree((WTF *)v17, v19);
        }
        v20 = (_BYTE *)(*(_QWORD *)v4 + *(unsigned int *)(v4 + 12));
      }
      else
      {
        v20 = (_BYTE *)(*(_QWORD *)v4 + v13);
      }
      v21 = (WTF::StringImpl **)(v8 + 4);
      *v20 = 2;
      ++*(_DWORD *)(v4 + 12);
      v22 = (WTF::StringImpl *)v8[4];
      if (v22
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)(v8 + 4)),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)(v8 + 4)),
            (v22 = *v21) != 0))
      {
        *(_DWORD *)v22 += 2;
      }
      v34 = v22;
      WebCore::ContentExtensions::serializeString(v4);
      result = (uint64_t)v34;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          result = WTF::StringImpl::destroy(v34, a2);
        else
          *(_DWORD *)v34 -= 2;
      }
      v23 = *((unsigned int *)v8 + 17);
      if ((_DWORD)v23)
      {
        v24 = (unsigned int *)v8[7];
        v25 = *(_QWORD *)a2;
        v26 = 4 * v23;
        while (1)
        {
          v27 = *v24;
          if (*((_DWORD *)a2 + 3) <= v27)
            break;
          *(_DWORD *)(v25 + 4 * v27) = v13;
          ++v24;
          v26 -= 4;
          if (!v26)
            goto LABEL_49;
        }
LABEL_74:
        __break(0xC471u);
        JUMPOUT(0x195728BCCLL);
      }
LABEL_49:
      v28 = v8 + 9;
      v8 = v7;
      if (v28 == v7)
        goto LABEL_63;
      v8 = v28;
      do
      {
        v29 = *v8;
        if (*v8)
        {
          if (*(_DWORD *)(v29 + 4))
            v30 = 0;
          else
            v30 = *((_BYTE *)v8 + 8) == 0;
          if (!v30)
          {
            if (v29 != -1)
              goto LABEL_63;
            goto LABEL_61;
          }
        }
        else if (*((_BYTE *)v8 + 8))
        {
          goto LABEL_63;
        }
        if (v29 != -1
          && *((unsigned __int8 *)v8 + 9) | *((unsigned __int8 *)v8 + 10) | *((_DWORD *)v8 + 3) | *((_DWORD *)v8 + 7))
        {
          goto LABEL_63;
        }
LABEL_61:
        v8 += 9;
      }
      while (v8 != v7);
      v8 = v7;
LABEL_63:
      if (v8 == v12)
      {
        a3 = v33;
        v5 = (_QWORD *)*v33;
        break;
      }
    }
  }
  if (v5)
  {
    *a3 = 0;
    v31 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v31)
    {
      v32 = v5;
      do
      {
        if (*v32 != -1)
          v32 = (_QWORD *)WTF::KeyValuePair<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions>::~KeyValuePair((uint64_t)v32, a2);
        v32 += 9;
        --v31;
      }
      while (v31);
    }
    return WTF::fastFree((WTF *)(v5 - 2), a2);
  }
  return result;
}

uint64_t WTF::KeyValuePair<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions>::~KeyValuePair(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  v3 = *(WTF **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v6)
  {
    v10 = *(WTF::StringImpl ***)(a1 + 16);
    v11 = 8 * v6;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v7 = *(WTF **)(a1 + 16);
  if (v7)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t **a1)
{
  return WebCore::ContentExtensions::serializeString(**a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t **a1)
{
  return WebCore::ContentExtensions::serializeString(**a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t **a1, uint64_t a2)
{
  return WebCore::ContentExtensions::ModifyHeadersAction::serialize(a2, **a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t **a1, uint64_t a2)
{
  return WebCore::ContentExtensions::RedirectAction::serialize(a2, **a1);
}

int **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_3,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_4,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_5,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_6,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_7,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_8,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_9,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t a1)
{
  return WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_11::operator()(*(int ***)(*(_QWORD *)a1 + 40), *(uint64_t **)(*(_QWORD *)a1 + 48));
}

int **std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_3,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_4,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_5,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_6,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_7,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_8,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_9,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t a1)
{
  return WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_11::operator()(*(int ***)(*(_QWORD *)a1 + 56), *(uint64_t **)(*(_QWORD *)a1 + 64));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_3,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_4,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_5,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_6,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_7,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_8,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_9,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t ***a1, uint64_t *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  uint64_t **v22;
  unint64_t v23;
  unint64_t v24;
  const WTF::StringImpl **v25;
  WTF **v26;
  unint64_t v27;
  char v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t result;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  WTF **v60;
  const WTF::StringImpl **v61;
  const WTF::StringImpl **v62;
  WTF **v63;
  unint64_t v64;
  uint64_t *v65;
  const WTF::StringImpl ***v66;
  uint64_t *v67;
  unsigned int v68;
  unsigned __int16 v69;
  char v70;

  v3 = *a1;
  v4 = **a1;
  v5 = (*a1)[1];
  v6 = *v4;
  v65 = v4;
  if (*v4
    || (WTF::HashTable<WebCore::ContentExtensions::Trigger,WTF::KeyValuePair<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions>>,WebCore::ContentExtensions::TriggerHash,WTF::HashMap<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions,WebCore::ContentExtensions::TriggerHash,WebCore::ContentExtensions::TriggerHashTraits,WTF::HashTraits<WebCore::ContentExtensions::PendingDisplayNoneActions>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::ContentExtensions::TriggerHashTraits>::rehash(v4, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v68 = -1640531527;
  v69 = 0;
  v70 = 0;
  v66 = (const WTF::StringImpl ***)(v5 + 2);
  WTF::add<BOOL,WTF::String,unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v68, *((_BYTE *)v5 + 8), *v5, (_DWORD *)v5 + 3, (uint64_t)(v5 + 2));
  v10 = v68;
  if (v70)
  {
    v58 = (v68 + v69) ^ ((v68 + v69) << 11);
    v10 = v58 + (v58 >> 17);
  }
  v11 = 0;
  v12 = 0;
  v13 = (v10 ^ (8 * v10)) + ((v10 ^ (8 * v10)) >> 5);
  v14 = (v13 ^ (4 * v13)) + ((v13 ^ (4 * v13)) >> 15);
  v15 = v14 ^ (v14 << 10);
  if (!v15)
    v15 = 0x800000;
  while (1)
  {
    v16 = v15 & v7;
    v17 = v6 + 72 * (v15 & v7);
    v18 = *(WTF **)v17;
    if (!*(_QWORD *)v17)
      break;
    if (*((_DWORD *)v18 + 1))
      v19 = 0;
    else
      v19 = *(_BYTE *)(v17 + 8) == 0;
    if (v19)
      goto LABEL_16;
LABEL_25:
    if (v18 == (WTF *)-1)
    {
      v11 = v6 + 72 * v16;
      goto LABEL_41;
    }
LABEL_26:
    if (WTF::equal(v18, (const WTF::StringImpl *)*v5, v9)
      && *(unsigned __int8 *)(v17 + 8) == *((unsigned __int8 *)v5 + 8)
      && *(unsigned __int8 *)(v17 + 9) == *((unsigned __int8 *)v5 + 9)
      && *(unsigned __int8 *)(v17 + 10) == *((unsigned __int8 *)v5 + 10)
      && *(_DWORD *)(v17 + 12) == *((_DWORD *)v5 + 3))
    {
      v67 = a2;
      v22 = v3;
      v23 = *(unsigned int *)(v17 + 28);
      if ((_DWORD)v23 == *((_DWORD *)v5 + 7))
      {
        if (!(_DWORD)v23)
          goto LABEL_43;
        v61 = *v66;
        v63 = *(WTF ***)(v17 + 16);
        if (WTF::equal(*v63, **v66, v9))
        {
          v24 = 0;
          v25 = v61 + 1;
          v26 = v63 + 1;
          v27 = v23 - 1;
          while (v27 != v24)
          {
            v62 = v25;
            v64 = v24;
            v59 = v27;
            v60 = v26;
            v28 = WTF::equal(v26[v24], v25[v24], v9);
            v27 = v59;
            v26 = v60;
            v25 = v62;
            v24 = v64 + 1;
            if ((v28 & 1) == 0)
            {
              v29 = v24 >= v23;
              v3 = v22;
              a2 = v67;
              if (v29)
                goto LABEL_44;
              goto LABEL_41;
            }
          }
LABEL_43:
          v3 = v22;
          a2 = v67;
          goto LABEL_44;
        }
      }
      v3 = v22;
      a2 = v67;
    }
LABEL_41:
    ++v12;
    v15 = v16 + v12;
  }
  if (*(_BYTE *)(v17 + 8))
    goto LABEL_26;
LABEL_16:
  if (*(_BYTE *)(v17 + 9))
    v20 = 0;
  else
    v20 = *(_BYTE *)(v17 + 10) == 0;
  v21 = v20 && *(_DWORD *)(v17 + 12) == 0;
  if (!v21 || *(_DWORD *)(v17 + 28))
    goto LABEL_25;
  if (v11)
  {
    v18 = 0;
    *(_QWORD *)(v11 + 48) = 0;
    *(_QWORD *)(v11 + 56) = 0;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)v11 = 0u;
    *(_BYTE *)(v11 + 52) = 1;
    *(_QWORD *)(v11 + 64) = 0;
    --*(_DWORD *)(*v65 - 16);
    v17 = v11;
  }
  v45 = (_DWORD *)*v5;
  if (*v5)
    *v45 += 2;
  *(_QWORD *)v17 = v45;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v8);
    else
      *(_DWORD *)v18 -= 2;
  }
  *(_QWORD *)(v17 + 8) = v5[1];
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v17 + 16), (unsigned int *)v66);
  v46 = *(WTF::StringImpl **)(v17 + 32);
  *(_QWORD *)(v17 + 32) = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v8);
    else
      *(_DWORD *)v46 -= 2;
  }
  v47 = *(WTF::StringImpl **)(v17 + 40);
  *(_QWORD *)(v17 + 40) = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v8);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = *(WTF **)(v17 + 56);
  *(_DWORD *)(v17 + 48) = 0;
  *(_BYTE *)(v17 + 52) = 1;
  if (v48)
  {
    *(_QWORD *)(v17 + 56) = 0;
    *(_DWORD *)(v17 + 64) = 0;
    WTF::fastFree(v48, v8);
  }
  *(_QWORD *)(v17 + 56) = 0;
  *(_QWORD *)(v17 + 64) = 0;
  v49 = *v65;
  if (*v65)
    v50 = *(_DWORD *)(v49 - 12) + 1;
  else
    v50 = 1;
  *(_DWORD *)(v49 - 12) = v50;
  v51 = *v65;
  if (*v65)
    v52 = *(_DWORD *)(v51 - 12);
  else
    v52 = 0;
  v53 = (*(_DWORD *)(v51 - 16) + v52);
  v54 = *(unsigned int *)(v51 - 4);
  if (v54 > 0x400)
  {
    if (v54 <= 2 * v53)
    {
LABEL_99:
      v55 = (_DWORD)v54 << (6 * *(_DWORD *)(v51 - 12) >= (2 * v54));
      goto LABEL_108;
    }
  }
  else if (3 * v54 <= 4 * v53)
  {
    if ((_DWORD)v54)
      goto LABEL_99;
    v55 = 8;
LABEL_108:
    v17 = WTF::HashTable<WebCore::ContentExtensions::Trigger,WTF::KeyValuePair<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions>>,WebCore::ContentExtensions::TriggerHash,WTF::HashMap<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions,WebCore::ContentExtensions::TriggerHash,WebCore::ContentExtensions::TriggerHashTraits,WTF::HashTraits<WebCore::ContentExtensions::PendingDisplayNoneActions>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::ContentExtensions::TriggerHashTraits>::rehash(v65, v55, v17);
  }
LABEL_44:
  v30 = (uint64_t *)(v17 + 32);
  v31 = *(unsigned int *)(v17 + 48);
  if (!(_DWORD)v31)
    goto LABEL_119;
  v32 = *(_QWORD *)(v17 + 40);
  if (!v32 || v31 >= *(_DWORD *)(v32 + 4) || *v30)
  {
    WTF::StringBuilder::append();
    goto LABEL_49;
  }
  v56 = *(_DWORD *)(v32 + 16);
  v57 = *(_QWORD *)(v32 + 8);
  *(_DWORD *)(v17 + 48) = v31 + 1;
  if ((v56 & 4) == 0)
  {
    *(_WORD *)(v57 + 2 * v31) = 44;
    goto LABEL_102;
  }
  *(_BYTE *)(v57 + v31) = 44;
LABEL_49:
  if (*(_DWORD *)(v17 + 48))
  {
LABEL_102:
    if (*a2 && (*(_BYTE *)(*a2 + 16) & 4) == 0)
      result = WTF::StringBuilder::append();
    else
      result = WTF::StringBuilder::append();
  }
  else
  {
LABEL_119:
    if (*(_QWORD *)(v17 + 40))
      goto LABEL_102;
    v33 = (_DWORD *)*a2;
    if (*a2)
      *v33 += 2;
    result = *v30;
    *v30 = (uint64_t)v33;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
      else
        *(_DWORD *)result -= 2;
    }
    v35 = *a2;
    if (*a2)
      LODWORD(v35) = *(_DWORD *)(v35 + 4);
    *(_DWORD *)(v17 + 48) = v35;
  }
  v36 = *((_DWORD *)v3[2] + 3);
  v37 = *(unsigned int *)(v17 + 68);
  if ((_DWORD)v37 != *(_DWORD *)(v17 + 64))
  {
    v44 = (_DWORD *)(*(_QWORD *)(v17 + 56) + 4 * v37);
    goto LABEL_73;
  }
  v38 = v37 + (v37 >> 2);
  if (v38 >= 0x10)
    v39 = v38 + 1;
  else
    v39 = 16;
  if (v39 <= v37 + 1)
    v40 = v37 + 1;
  else
    v40 = v39;
  if (v40 >> 30)
  {
    __break(0xC471u);
  }
  else
  {
    v41 = *(void **)(v17 + 56);
    v42 = (void *)WTF::fastMalloc((WTF *)(4 * v40));
    *(_DWORD *)(v17 + 64) = v40;
    *(_QWORD *)(v17 + 56) = v42;
    memcpy(v42, v41, 4 * v37);
    if (v41)
    {
      if (*(void **)(v17 + 56) == v41)
      {
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
      }
      WTF::fastFree((WTF *)v41, v43);
    }
    v44 = (_DWORD *)(*(_QWORD *)(v17 + 56) + 4 * *(unsigned int *)(v17 + 68));
LABEL_73:
    *v44 = v36;
    ++*(_DWORD *)(v17 + 68);
    return 0xFFFFFFFFLL;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_3,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_4,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_5,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_6,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_7,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_8,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_9,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  _DWORD *v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  BOOL v25;
  WTF::StringImpl *result;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;

  v3 = *(uint64_t **)(*(_QWORD *)a1 + 88);
  v4 = *(uint64_t **)(*(_QWORD *)a1 + 96);
  v5 = (int *)v3[2];
  v6 = *a2;
  if (*a2)
    *(_DWORD *)v6 += 2;
  v50 = *v5;
  v7 = *v3;
  v8 = v3[1];
  v9 = *v4;
  if (*v4
    || (WTF::HashTable<std::pair<WTF::String,unsigned int>,WTF::KeyValuePair<std::pair<WTF::String,unsigned int>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,unsigned int>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::String,unsigned int>>,WTF::HashMap<std::pair<WTF::String,unsigned int>,unsigned int,WTF::DefaultHash<std::pair<WTF::String,unsigned int>>,WTF::PairHashTraits<WTF::HashTraits<WTF::String>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::HashTraits<WTF::String>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>>::rehash(v4, 8u, 0), (v9 = *v4) != 0))
  {
    v10 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = *((_DWORD *)v6 + 4);
  v48 = v8;
  v49 = v7;
  if (v11 < 0x100)
    v12 = WTF::StringImpl::hashSlowCase(v6);
  else
    v12 = v11 >> 8;
  v13 = 9 * ((v50 + ~(v50 << 15)) ^ ((v50 + ~(v50 << 15)) >> 10));
  v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
  v15 = v10 & ((0xD7862706ELL * (unint64_t)(95187966 * (v14 ^ HIWORD(v14)) + 277951225 * v12)) >> 4);
  v16 = v9 + 24 * v15;
  v19 = (_DWORD *)(v16 + 8);
  if (WTF::equal(*(WTF **)v16, 0, a3))
    v20 = *(_DWORD *)(v16 + 8) == -1;
  else
    v20 = 0;
  if (v20)
  {
LABEL_26:
    result = *(WTF::StringImpl **)v16;
    *(_QWORD *)v16 = v6;
    v28 = v48;
    v29 = v49;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      else
        *(_DWORD *)result -= 2;
    }
    v23 = v16;
  }
  else
  {
    v47 = v4;
    v21 = 0;
    v22 = 1;
    do
    {
      v23 = v16;
      if (*(_QWORD *)v16 != -1)
      {
        v25 = WTF::equal(*(WTF **)v16, v6, v18) && *v19 == v50;
        v23 = v21;
        if (v25)
        {
          v46 = *(unsigned int *)(v9 + 24 * v15 + 16);
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v24);
          else
            *(_DWORD *)v6 -= 2;
          return (WTF::StringImpl *)v46;
        }
      }
      v15 = ((_DWORD)v15 + v22) & v10;
      v16 = v9 + 24 * v15;
      result = (WTF::StringImpl *)WTF::equal(*(WTF **)v16, 0, v18);
      v19 = (_DWORD *)(v16 + 8);
      ++v22;
      if ((_DWORD)result)
        v27 = *(_DWORD *)(v16 + 8) == -1;
      else
        v27 = 0;
      v21 = v23;
    }
    while (!v27);
    v4 = v47;
    if (!v23)
      goto LABEL_26;
    *(_QWORD *)v23 = 0;
    *(_DWORD *)(v23 + 8) = -1;
    *(_DWORD *)(v23 + 16) = 0;
    --*(_DWORD *)(*v47 - 16);
    *(_QWORD *)v23 = v6;
    v28 = v48;
    v29 = v49;
  }
  *(_DWORD *)(v23 + 8) = v50;
  v30 = *(_DWORD *)(v28 + 112);
  v31 = *(unsigned int *)(v29 + 12);
  if ((_DWORD)v31 == *(_DWORD *)(v29 + 8))
  {
    v32 = v31 + (v31 >> 2);
    if (v32 >= 0x10)
      v33 = v32 + 1;
    else
      v33 = 16;
    if (v33 <= v31 + 1)
      v34 = v31 + 1;
    else
      v34 = v33;
    if (HIDWORD(v34))
    {
      __break(0xC471u);
      return result;
    }
    v35 = *(void **)v29;
    v36 = (void *)WTF::fastMalloc((WTF *)v34);
    *(_DWORD *)(v29 + 8) = v34;
    *(_QWORD *)v29 = v36;
    memcpy(v36, v35, v31);
    if (v35)
    {
      if (*(void **)v29 == v35)
      {
        *(_QWORD *)v29 = 0;
        *(_DWORD *)(v29 + 8) = 0;
      }
      WTF::fastFree((WTF *)v35, v37);
    }
    v38 = (_BYTE *)(*(_QWORD *)v29 + *(unsigned int *)(v29 + 12));
  }
  else
  {
    v38 = (_BYTE *)(*(_QWORD *)v29 + v31);
  }
  *v38 = v30;
  ++*(_DWORD *)(v29 + 12);
  WebCore::ContentExtensions::serializeString(v29);
  *(_DWORD *)(v23 + 16) = v31;
  v39 = *v4;
  if (*v4)
    v40 = *(_DWORD *)(v39 - 12) + 1;
  else
    v40 = 1;
  *(_DWORD *)(v39 - 12) = v40;
  v41 = *v4;
  if (*v4)
    v42 = *(_DWORD *)(v41 - 12);
  else
    v42 = 0;
  v43 = (*(_DWORD *)(v41 - 16) + v42);
  v44 = *(unsigned int *)(v41 - 4);
  if (v44 <= 0x400)
  {
    if (3 * v44 > 4 * v43)
      return (WTF::StringImpl *)*(unsigned int *)(v23 + 16);
    if (!(_DWORD)v44)
    {
      v45 = 8;
      goto LABEL_58;
    }
LABEL_53:
    v45 = (_DWORD)v44 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v44));
LABEL_58:
    v23 = WTF::HashTable<std::pair<WTF::String,unsigned int>,WTF::KeyValuePair<std::pair<WTF::String,unsigned int>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,unsigned int>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::String,unsigned int>>,WTF::HashMap<std::pair<WTF::String,unsigned int>,unsigned int,WTF::DefaultHash<std::pair<WTF::String,unsigned int>>,WTF::PairHashTraits<WTF::HashTraits<WTF::String>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::HashTraits<WTF::String>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>>::rehash(v4, v45, v23);
    return (WTF::StringImpl *)*(unsigned int *)(v23 + 16);
  }
  if (v44 <= 2 * v43)
    goto LABEL_53;
  return (WTF::StringImpl *)*(unsigned int *)(v23 + 16);
}

int **std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_3,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_4,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_5,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_6,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_7,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_8,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_9,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t a1)
{
  return WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_11::operator()(*(int ***)(*(_QWORD *)a1 + 24), *(uint64_t **)(*(_QWORD *)a1 + 32));
}

int **std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_3,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_4,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_5,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_6,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_7,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_8,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_9,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t a1)
{
  return WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_11::operator()(*(int ***)(*(_QWORD *)a1 + 72), *(uint64_t **)(*(_QWORD *)a1 + 80));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_3,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_4,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_5,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_6,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_7,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_8,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_9,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t a1, const WebCore::ContentExtensions::ModifyHeadersAction *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  void *v22;
  BOOL v23;
  unsigned int *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  int v37;
  size_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  _BYTE *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v63;
  unsigned __int8 v64[8];
  WTF *v65;
  int v66;
  unsigned int v67;
  WTF *v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  unsigned __int16 v73;
  char v74;
  __int128 v75;
  __int128 v76;
  int v77;
  int v78;

  v2 = *(uint64_t **)(*(_QWORD *)a1 + 104);
  v3 = *(uint64_t **)(*(_QWORD *)a1 + 112);
  v4 = (int *)v2[2];
  WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersAction((WebCore::ContentExtensions::ModifyHeadersAction *)v64, a2);
  v71 = *v4;
  v5 = *v2;
  v61 = v2[1];
  v6 = *v3;
  if (*v3
    || (WTF::HashTable<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>,WTF::KeyValuePair<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>,unsigned int>>,WTF::DefaultHash<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>>,WTF::HashMap<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>,unsigned int,WTF::DefaultHash<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>>,WTF::PairHashTraits<WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>>::rehash(v3, 8u, 0), (v6 = *v3) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v63 = v3;
  v72 = -1640531527;
  v73 = 0;
  v74 = 0;
  WTF::add<WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>((uint64_t)&v72, (uint64_t)v65, v67, (uint64_t *)&v68, (_DWORD *)&v70 + 1);
  v8 = v72;
  if (v74)
  {
    v60 = (v72 + v73) ^ ((v72 + v73) << 11);
    v8 = v60 + (v60 >> 17);
  }
  v9 = (v8 ^ (8 * v8)) + ((v8 ^ (8 * v8)) >> 5);
  v10 = (v9 ^ (4 * v9)) + ((v9 ^ (4 * v9)) >> 15);
  v11 = v10 ^ (v10 << 10);
  v12 = 9 * ((v71 + ~(v71 << 15)) ^ ((v71 + ~(v71 << 15)) >> 10));
  v13 = ((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) ^ (((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) >> 16);
  if (v11)
    v14 = 277951225 * v11;
  else
    v14 = 2088763392;
  v15 = v7 & ((0xD7862706ELL * (unint64_t)(v14 + 95187966 * v13)) >> 4);
  LOBYTE(v72) = 0;
  v75 = 0u;
  v76 = 0u;
  v16 = v6 + (v15 << 6);
  v77 = 0;
  v78 = -1;
  result = WebCore::ContentExtensions::operator==((unsigned __int8 *)v16, (unsigned __int8 *)&v72);
  if ((_DWORD)result)
    v19 = *(_DWORD *)(v16 + 48) == -1;
  else
    v19 = 0;
  if (!v19)
  {
    v20 = 0;
    v21 = 1;
    while (!WebCore::ContentExtensions::operator==((unsigned __int8 *)v16, v64) || *(_DWORD *)(v16 + 48) != v71)
    {
      if (*(_BYTE *)v16 == 1)
        v20 = v16;
      LOBYTE(v72) = 0;
      v15 = ((_DWORD)v15 + v21) & v7;
      v16 = v6 + (v15 << 6);
      v75 = 0u;
      v76 = 0u;
      v77 = 0;
      v78 = -1;
      result = WebCore::ContentExtensions::operator==((unsigned __int8 *)v16, (unsigned __int8 *)&v72);
      ++v21;
      if ((_DWORD)result)
        v23 = *(_DWORD *)(v16 + 48) == -1;
      else
        v23 = 0;
      if (v23)
      {
        if (!v20)
          goto LABEL_25;
        v24 = 0;
        *(_BYTE *)v20 = 0;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_DWORD *)(v20 + 40) = 0;
        *(_DWORD *)(v20 + 48) = -1;
        *(_DWORD *)(v20 + 56) = 0;
        v25 = v63;
        --*(_DWORD *)(*v63 - 16);
        goto LABEL_26;
      }
    }
    goto LABEL_71;
  }
LABEL_25:
  v24 = *(unsigned int **)(v16 + 8);
  v20 = v16;
  v25 = v63;
LABEL_26:
  *(_BYTE *)v20 = v64[0];
  v26 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v26)
  {
    v27 = 24 * v26;
    do
    {
      v28 = v24[4];
      if ((_DWORD)v28 != -1)
        result = ((uint64_t (*)(int *, unsigned int *))off_1E3394F08[v28])(&v72, v24);
      v24[4] = -1;
      v24 += 6;
      v27 -= 24;
    }
    while (v27);
    v24 = *(unsigned int **)(v20 + 8);
  }
  if (v24)
  {
    *(_QWORD *)(v20 + 8) = 0;
    *(_DWORD *)(v20 + 16) = 0;
    result = WTF::fastFree((WTF *)v24, v18);
  }
  v29 = v65;
  v65 = 0;
  *(_QWORD *)(v20 + 8) = v29;
  LODWORD(v29) = v66;
  v66 = 0;
  *(_DWORD *)(v20 + 16) = (_DWORD)v29;
  LODWORD(v29) = v67;
  v67 = 0;
  *(_DWORD *)(v20 + 20) = (_DWORD)v29;
  v30 = *(unsigned int *)(v20 + 36);
  v31 = *(unsigned int **)(v20 + 24);
  if ((_DWORD)v30)
  {
    v32 = 24 * v30;
    v33 = v61;
    do
    {
      v34 = v31[4];
      if ((_DWORD)v34 != -1)
        result = ((uint64_t (*)(int *, unsigned int *))off_1E3394F08[v34])(&v72, v31);
      v31[4] = -1;
      v31 += 6;
      v32 -= 24;
    }
    while (v32);
    v31 = *(unsigned int **)(v20 + 24);
    if (v31)
      goto LABEL_40;
  }
  else
  {
    v33 = v61;
    if (v31)
    {
LABEL_40:
      *(_QWORD *)(v20 + 24) = 0;
      *(_DWORD *)(v20 + 32) = 0;
      result = WTF::fastFree((WTF *)v31, v18);
    }
  }
  v35 = v68;
  v68 = 0;
  *(_QWORD *)(v20 + 24) = v35;
  LODWORD(v35) = v69;
  v69 = 0;
  *(_DWORD *)(v20 + 32) = (_DWORD)v35;
  v36 = v70;
  LODWORD(v70) = 0;
  *(_QWORD *)(v20 + 36) = v36;
  *(_DWORD *)(v20 + 48) = v71;
  v37 = *(_DWORD *)(v33 + 112);
  v38 = *(unsigned int *)(v5 + 12);
  if ((_DWORD)v38 == *(_DWORD *)(v5 + 8))
  {
    v39 = v38 + (v38 >> 2);
    if (v39 >= 0x10)
      v40 = v39 + 1;
    else
      v40 = 16;
    if (v40 <= v38 + 1)
      v41 = v38 + 1;
    else
      v41 = v40;
    if (HIDWORD(v41))
    {
      __break(0xC471u);
      return result;
    }
    v42 = *(void **)v5;
    v43 = (void *)WTF::fastMalloc((WTF *)v41);
    *(_DWORD *)(v5 + 8) = v41;
    *(_QWORD *)v5 = v43;
    memcpy(v43, v42, v38);
    if (v42)
    {
      if (*(void **)v5 == v42)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree((WTF *)v42, v44);
    }
    v45 = (_BYTE *)(*(_QWORD *)v5 + *(unsigned int *)(v5 + 12));
  }
  else
  {
    v45 = (_BYTE *)(*(_QWORD *)v5 + v38);
  }
  *v45 = v37;
  ++*(_DWORD *)(v5 + 12);
  WebCore::ContentExtensions::ModifyHeadersAction::serialize((uint64_t)a2, v5);
  *(_DWORD *)(v20 + 56) = v38;
  v46 = *v25;
  if (*v25)
    v47 = *(_DWORD *)(v46 - 12) + 1;
  else
    v47 = 1;
  *(_DWORD *)(v46 - 12) = v47;
  v48 = *v25;
  if (*v25)
    v49 = *(_DWORD *)(v48 - 12);
  else
    v49 = 0;
  v50 = (*(_DWORD *)(v48 - 16) + v49);
  v51 = *(unsigned int *)(v48 - 4);
  if (v51 > 0x400)
  {
    if (v51 > 2 * v50)
      goto LABEL_65;
    goto LABEL_67;
  }
  if (3 * v51 <= 4 * v50)
  {
    if (!(_DWORD)v51)
    {
      v52 = 8;
      goto LABEL_70;
    }
LABEL_67:
    v52 = (_DWORD)v51 << (6 * *(_DWORD *)(v48 - 12) >= (2 * v51));
LABEL_70:
    v16 = WTF::HashTable<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>,WTF::KeyValuePair<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>,unsigned int>>,WTF::DefaultHash<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>>,WTF::HashMap<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>,unsigned int,WTF::DefaultHash<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>>,WTF::PairHashTraits<WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>>::rehash(v25, v52, v20);
    goto LABEL_71;
  }
LABEL_65:
  v16 = v20;
LABEL_71:
  v53 = *(unsigned int *)(v16 + 56);
  v54 = (unsigned int *)v68;
  if ((_DWORD)v70)
  {
    v55 = 24 * v70;
    do
    {
      v56 = v54[4];
      if ((_DWORD)v56 != -1)
        ((void (*)(int *, unsigned int *))off_1E3394F08[v56])(&v72, v54);
      v54[4] = -1;
      v54 += 6;
      v55 -= 24;
    }
    while (v55);
    v54 = (unsigned int *)v68;
  }
  if (v54)
  {
    v68 = 0;
    v69 = 0;
    WTF::fastFree((WTF *)v54, v22);
  }
  v57 = (unsigned int *)v65;
  if (v67)
  {
    v58 = 24 * v67;
    do
    {
      v59 = v57[4];
      if ((_DWORD)v59 != -1)
        ((void (*)(int *, unsigned int *))off_1E3394F08[v59])(&v72, v57);
      v57[4] = -1;
      v57 += 6;
      v58 -= 24;
    }
    while (v58);
    v57 = (unsigned int *)v65;
  }
  if (v57)
  {
    v65 = 0;
    v66 = 0;
    WTF::fastFree((WTF *)v57, v22);
  }
  return v53;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_3,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_4,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_5,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_6,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_7,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_8,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_9,WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_10>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  const WTF::StringImpl *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int i;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t result;
  uint64_t v22;
  _BOOL4 v24;
  _BOOL4 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char v50[8];
  _BYTE v51[96];
  int v52;
  int v53;
  char v54;
  _QWORD v55[2];

  v3 = *(uint64_t **)(*(_QWORD *)a1 + 120);
  v4 = *(uint64_t **)(*(_QWORD *)a1 + 128);
  v5 = (int *)v3[2];
  v50[0] = *(_BYTE *)a2;
  v51[0] = 0;
  v52 = -1;
  v6 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E3395258[v6])(v55, v51, a2 + 8);
    v52 = v6;
  }
  v53 = *v5;
  v7 = *v3;
  v8 = *v4;
  v48 = a2;
  v49 = v4;
  v47 = v3[1];
  if (*v4
    || (WTF::HashTable<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>,WTF::KeyValuePair<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>,unsigned int>>,WTF::DefaultHash<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>>,WTF::HashMap<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>,unsigned int,WTF::DefaultHash<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>>,WTF::PairHashTraits<WTF::HashTraits<WebCore::ContentExtensions::RedirectAction>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::HashTraits<WebCore::ContentExtensions::RedirectAction>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>>::rehash(v4, 8u, 0), (v8 = *v4) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::computeHash<WebCore::ContentExtensions::RedirectAction>((uint64_t)v50);
  v12 = 0;
  v13 = 9 * ((v53 + ~(v53 << 15)) ^ ((v53 + ~(v53 << 15)) >> 10));
  v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
  v15 = (0xD7862706ELL * (unint64_t)(277951225 * v10 + 95187966 * (v14 ^ HIWORD(v14)))) >> 4;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v9;
    v18 = (unsigned __int8 *)(v8 + (v17 << 7));
    v19 = *v18;
    if (v19 | *((_DWORD *)v18 + 26))
      goto LABEL_13;
    result = WTF::equal(*((WTF **)v18 + 1), 0, v11);
    if ((_DWORD)result && *((_DWORD *)v18 + 28) == -1)
      break;
    v19 = *v18;
LABEL_13:
    if (v19 != v50[0])
      goto LABEL_32;
    v22 = *((unsigned int *)v18 + 26);
    v24 = v52 == (_DWORD)v22 && v52 != -1;
    if ((_DWORD)v22 == -1 || !v24)
    {
      if ((_DWORD)v22 == -1)
        v26 = v52 == -1;
      else
        v26 = v24;
      if (!v26)
        goto LABEL_32;
    }
    else
    {
      v55[0] = &v54;
      v27 = ((uint64_t (*)(_QWORD *, unsigned __int8 *, _BYTE *))off_1E33951F8[v22])(v55, v18 + 8, v51);
      if ((v27 & 1) == 0)
        goto LABEL_32;
    }
    if (*((_DWORD *)v18 + 28) == v53)
      goto LABEL_69;
LABEL_32:
    if (*v18 == 1)
      v12 = (unsigned __int8 *)(v8 + (v17 << 7));
    LODWORD(v15) = i + v17;
  }
  if (v12)
  {
    *v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_DWORD *)v12 + 26) = 0;
    *((_DWORD *)v12 + 28) = -1;
    *((_DWORD *)v12 + 30) = 0;
    --*(_DWORD *)(*v49 - 16);
    v18 = v12;
  }
  *v18 = v50[0];
  v28 = *((unsigned int *)v18 + 26);
  if ((_DWORD)v28 == -1)
  {
    v29 = v47;
    if (v52 != -1)
      goto LABEL_41;
  }
  else
  {
    v29 = v47;
    if (v52 == -1)
    {
      result = ((uint64_t (*)(_QWORD *, unsigned __int8 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v28])(v55, v18 + 8);
      *((_DWORD *)v18 + 26) = -1;
      goto LABEL_42;
    }
LABEL_41:
    v55[0] = v18 + 8;
    result = ((uint64_t (*)(_QWORD *))off_1E3395228[v52])(v55);
  }
LABEL_42:
  *((_DWORD *)v18 + 28) = v53;
  v30 = *(_DWORD *)(v29 + 112);
  v31 = *(unsigned int *)(v7 + 12);
  if ((_DWORD)v31 == *(_DWORD *)(v7 + 8))
  {
    v32 = v31 + (v31 >> 2);
    if (v32 >= 0x10)
      v33 = v32 + 1;
    else
      v33 = 16;
    if (v33 <= v31 + 1)
      v34 = v31 + 1;
    else
      v34 = v33;
    if (HIDWORD(v34))
    {
      __break(0xC471u);
      return result;
    }
    v35 = *(void **)v7;
    v36 = (void *)WTF::fastMalloc((WTF *)v34);
    *(_DWORD *)(v7 + 8) = v34;
    *(_QWORD *)v7 = v36;
    memcpy(v36, v35, v31);
    if (v35)
    {
      if (*(void **)v7 == v35)
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
      }
      WTF::fastFree((WTF *)v35, v37);
    }
    v38 = (_BYTE *)(*(_QWORD *)v7 + *(unsigned int *)(v7 + 12));
  }
  else
  {
    v38 = (_BYTE *)(*(_QWORD *)v7 + v31);
  }
  *v38 = v30;
  ++*(_DWORD *)(v7 + 12);
  WebCore::ContentExtensions::RedirectAction::serialize(v48, v7);
  *((_DWORD *)v18 + 30) = v31;
  v39 = *v49;
  if (*v49)
    v40 = *(_DWORD *)(v39 - 12) + 1;
  else
    v40 = 1;
  *(_DWORD *)(v39 - 12) = v40;
  v41 = *v49;
  if (*v49)
    v42 = *(_DWORD *)(v41 - 12);
  else
    v42 = 0;
  v43 = (*(_DWORD *)(v41 - 16) + v42);
  v44 = *(unsigned int *)(v41 - 4);
  if (v44 > 0x400)
  {
    if (v44 <= 2 * v43)
    {
LABEL_65:
      v45 = (_DWORD)v44 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v44));
      goto LABEL_68;
    }
  }
  else if (3 * v44 <= 4 * v43)
  {
    if ((_DWORD)v44)
      goto LABEL_65;
    v45 = 8;
LABEL_68:
    v18 = (unsigned __int8 *)WTF::HashTable<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>,WTF::KeyValuePair<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>,unsigned int>>,WTF::DefaultHash<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>>,WTF::HashMap<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>,unsigned int,WTF::DefaultHash<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>>,WTF::PairHashTraits<WTF::HashTraits<WebCore::ContentExtensions::RedirectAction>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::HashTraits<WebCore::ContentExtensions::RedirectAction>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>>::rehash(v49, v45, v18);
  }
LABEL_69:
  v46 = *((unsigned int *)v18 + 30);
  if (v52 != -1)
    ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v52])(v55, v51);
  return v46;
}

int **WebCore::ContentExtensions::serializeActions(WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_11::operator()(int **result, uint64_t *a2)
{
  int *v3;
  int *v4;
  int *v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  int v15;
  int v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;

  v3 = *result;
  v4 = result[1];
  v5 = result[2];
  v6 = *a2;
  if (*a2
    || (result = (int **)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *v3;
  v9 = 9 * ((v8 + ~(v8 << 15)) ^ ((v8 + ~(v8 << 15)) >> 10));
  v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  v11 = (v10 ^ HIWORD(v10)) & v7;
  v12 = (_DWORD *)(v6 + 8 * v11);
  v13 = *v12;
  if (*v12 != -1)
  {
    v14 = 0;
    v15 = 1;
    while (v13 != v8)
    {
      if (v13 == -2)
        v14 = v12;
      v11 = (v11 + v15) & v7;
      v12 = (_DWORD *)(v6 + 8 * v11);
      v13 = *v12;
      ++v15;
      if (*v12 == -1)
      {
        if (v14)
        {
          *v14 = 0xFFFFFFFFLL;
          --*(_DWORD *)(*a2 - 16);
          v8 = *v3;
          v12 = v14;
        }
        goto LABEL_12;
      }
    }
    return (int **)v12[1];
  }
LABEL_12:
  *v12 = v8;
  v16 = v5[28];
  v17 = v4[3];
  if ((_DWORD)v17 != v4[2])
  {
    v24 = (_BYTE *)(*(_QWORD *)v4 + v17);
    goto LABEL_26;
  }
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= v17 + 1)
    v20 = v17 + 1;
  else
    v20 = v19;
  if (!HIDWORD(v20))
  {
    v21 = *(void **)v4;
    v22 = (void *)WTF::fastMalloc((WTF *)v20);
    v4[2] = v20;
    *(_QWORD *)v4 = v22;
    memcpy(v22, v21, v17);
    if (v21)
    {
      if (*(void **)v4 == v21)
      {
        *(_QWORD *)v4 = 0;
        v4[2] = 0;
      }
      WTF::fastFree((WTF *)v21, v23);
    }
    v24 = (_BYTE *)(*(_QWORD *)v4 + v4[3]);
LABEL_26:
    *v24 = v16;
    ++v4[3];
    v12[1] = v17;
    v25 = *a2;
    if (*a2)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *a2;
    if (*a2)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        return (int **)v12[1];
    }
    else
    {
      if (3 * v30 > 4 * v29)
        return (int **)v12[1];
      if (!(_DWORD)v30)
      {
        v31 = 8;
        goto LABEL_38;
      }
    }
    v31 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
LABEL_38:
    v12 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, v31, v12);
    return (int **)v12[1];
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 16);
    do
    {
      *v12++ = 0xFFFFFFFFLL;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_DWORD *)(v6 + 8 * v13);
      if (*v15 <= 0xFFFFFFFD)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = 0;
        v19 = 9 * ((*v15 + ~(*v15 << 15)) ^ ((*v15 + ~(*v15 << 15)) >> 10));
        v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
        do
        {
          v21 = v20 & v17;
          v20 = ++v18 + v21;
        }
        while (*(_DWORD *)(v16 + 8 * v21) != -1);
        v22 = (_QWORD *)(v16 + 8 * v21);
        *v22 = *(_QWORD *)v15;
        if (v15 == a3)
          v14 = v22;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WebCore::ContentExtensions::Trigger,WTF::KeyValuePair<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions>>,WebCore::ContentExtensions::TriggerHash,WTF::HashMap<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions,WebCore::ContentExtensions::TriggerHash,WebCore::ContentExtensions::TriggerHashTraits,WTF::HashTraits<WebCore::ContentExtensions::PendingDisplayNoneActions>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::ContentExtensions::TriggerHashTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  void *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unsigned int v41;
  uint64_t result;
  unsigned int v45;
  unsigned __int16 v46;
  char v47;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(72 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 72);
    do
    {
      *(v10 - 1) = 0;
      *v10 = 0;
      *(_OWORD *)(v10 - 3) = 0uLL;
      *(_OWORD *)(v10 - 5) = 0uLL;
      *(_OWORD *)(v10 - 7) = 0uLL;
      *((_BYTE *)v10 - 4) = 1;
      v10[1] = 0;
      v10 += 9;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    while (1)
    {
      v14 = v4 + 72 * v11;
      v15 = *(_QWORD *)v14;
      if (*(_QWORD *)v14 == -1)
        goto LABEL_55;
      if (v15)
      {
        v8 = (void *)*(unsigned __int8 *)(v14 + 8);
        if (*(_DWORD *)(v15 + 4))
          v16 = 0;
        else
          v16 = (_DWORD)v8 == 0;
        if (v16)
        {
LABEL_18:
          if (*(_BYTE *)(v14 + 9))
            v17 = 0;
          else
            v17 = *(_BYTE *)(v14 + 10) == 0;
          v18 = v17 && *(_DWORD *)(v14 + 12) == 0;
          if (v18 && !*(_DWORD *)(v14 + 28))
          {
            WTF::KeyValuePair<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions>::~KeyValuePair(v4 + 72 * v11, v8);
            goto LABEL_55;
          }
          LOBYTE(v8) = 0;
        }
      }
      else
      {
        if (!*(_BYTE *)(v14 + 8))
          goto LABEL_18;
        LOBYTE(v8) = 1;
      }
      v19 = *a1;
      if (*a1)
        v20 = *(_DWORD *)(v19 - 8);
      else
        v20 = 0;
      v45 = -1640531527;
      v46 = 0;
      v47 = 0;
      WTF::add<BOOL,WTF::String,unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v45, v8, v15, (_DWORD *)(v14 + 12), v14 + 16);
      v22 = v45;
      if (v47)
      {
        v41 = (v45 + v46) ^ ((v45 + v46) << 11);
        v22 = v41 + (v41 >> 17);
      }
      v23 = 0;
      v24 = (v22 ^ (8 * v22)) + ((v22 ^ (8 * v22)) >> 5);
      v25 = (v24 ^ (4 * v24)) + ((v24 ^ (4 * v24)) >> 15);
      v26 = v25 ^ (v25 << 10);
      if (!v26)
        v26 = 0x800000;
      while (1)
      {
        v27 = v26 & v20;
        v28 = v19 + 72 * (v26 & v20);
        if (!*(_QWORD *)v28)
          break;
        if (*(_DWORD *)(*(_QWORD *)v28 + 4))
          v29 = 0;
        else
          v29 = *(_BYTE *)(v28 + 8) == 0;
        if (v29)
          goto LABEL_43;
LABEL_52:
        v26 = ++v23 + v27;
      }
      if (*(_BYTE *)(v28 + 8))
        goto LABEL_52;
LABEL_43:
      if (*(_BYTE *)(v28 + 9))
        v30 = 0;
      else
        v30 = *(_BYTE *)(v28 + 10) == 0;
      v31 = v30 && *(_DWORD *)(v28 + 12) == 0;
      if (!v31 || *(_DWORD *)(v28 + 28))
        goto LABEL_52;
      WTF::KeyValuePair<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions>::~KeyValuePair(v19 + 72 * v27, v21);
      v32 = *(_QWORD *)v14;
      *(_QWORD *)v14 = 0;
      *(_QWORD *)v28 = v32;
      v33 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v28 + 16) = 0;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 8) = v33;
      v34 = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v28 + 16) = v34;
      LODWORD(v34) = *(_DWORD *)(v14 + 24);
      *(_DWORD *)(v14 + 24) = 0;
      *(_DWORD *)(v28 + 24) = v34;
      LODWORD(v34) = *(_DWORD *)(v14 + 28);
      *(_DWORD *)(v14 + 28) = 0;
      *(_DWORD *)(v28 + 28) = v34;
      v35 = v19 + 72 * v27;
      v36 = v4 + 72 * v11;
      v37 = *(_QWORD *)(v36 + 32);
      *(_QWORD *)(v36 + 32) = 0;
      *(_QWORD *)(v35 + 32) = v37;
      v38 = *(_QWORD *)(v36 + 40);
      *(_QWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v35 + 40) = v38;
      LODWORD(v38) = *(_DWORD *)(v36 + 48);
      *(_BYTE *)(v35 + 52) = *(_BYTE *)(v36 + 52);
      *(_DWORD *)(v35 + 48) = v38;
      *(_QWORD *)(v35 + 56) = 0;
      *(_QWORD *)(v35 + 64) = 0;
      v39 = *(_QWORD *)(v36 + 56);
      *(_QWORD *)(v36 + 56) = 0;
      *(_QWORD *)(v35 + 56) = v39;
      LODWORD(v39) = *(_DWORD *)(v36 + 64);
      *(_DWORD *)(v36 + 64) = 0;
      *(_DWORD *)(v35 + 64) = v39;
      LODWORD(v39) = *(_DWORD *)(v36 + 68);
      *(_DWORD *)(v36 + 68) = 0;
      *(_DWORD *)(v35 + 68) = v39;
      WTF::KeyValuePair<WebCore::ContentExtensions::Trigger,WebCore::ContentExtensions::PendingDisplayNoneActions>::~KeyValuePair(v36, v40);
      if (v14 == a3)
        v12 = v19 + 72 * v27;
LABEL_55:
      if (++v11 == v13)
      {
LABEL_59:
        WTF::fastFree((WTF *)(v4 - 16), v8);
        return v12;
      }
    }
  }
  v12 = 0;
  result = 0;
  if (v4)
    goto LABEL_59;
  return result;
}

unsigned int *WTF::add<BOOL,WTF::String,unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unsigned int *a1, unsigned __int8 a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;

  v5 = (*a1 + a2) ^ ((*a1 + a2) << 16);
  v6 = v5 + (v5 >> 11);
  *a1 = v6;
  if (a3)
  {
    v7 = *(_DWORD *)(a3 + 4);
    v8 = v7 & 0xFFFFFFFE;
    if ((v7 & 0xFFFFFFFE) != 0)
    {
      v9 = 0;
      do
      {
        v10 = *(unsigned int *)(a3 + 4);
        if (v9 >= v10)
        {
          v12 = 0;
        }
        else
        {
          v11 = *(_QWORD *)(a3 + 8);
          if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            v12 = *(unsigned __int8 *)(v11 + v9);
          else
            v12 = *(unsigned __int16 *)(v11 + 2 * v9);
        }
        v13 = v9 + 1;
        if (v9 + 1 >= v10)
        {
          v15 = 0;
        }
        else
        {
          v14 = *(_QWORD *)(a3 + 8);
          if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            v15 = *(unsigned __int8 *)(v14 + v9 + 1);
          else
            v15 = *(unsigned __int16 *)(v14 + 2 * v9 + 2);
        }
        v16 = (v12 << 11) ^ ((v6 + v15) << 16) ^ (v6 + v15);
        v6 = v16 + (v16 >> 11);
        *a1 = v6;
        v9 = v13 + 1;
      }
      while (v13 + 1 < v8);
    }
    if ((v7 & 1) != 0)
    {
      if (*(_DWORD *)(a3 + 4) <= v8)
      {
        v18 = 0;
      }
      else
      {
        v17 = *(_QWORD *)(a3 + 8);
        if ((*(_BYTE *)(a3 + 16) & 4) != 0)
          v18 = *(unsigned __int8 *)(v17 + v8);
        else
          v18 = *(unsigned __int16 *)(v17 + 2 * v8);
      }
      v6 = ((v6 + v18) ^ ((v6 + v18) << 16)) + (((v6 + v18) ^ ((v6 + v18) << 16)) >> 11);
      *a1 = v6;
    }
  }
  v19 = v6 + (unsigned __int16)*a4;
  v20 = (*a4 >> 5) & 0x7FFF800 ^ (v19 << 16);
  *a1 = (v20 ^ v19) + ((v20 ^ v19) >> 11);
  return WTF::add<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a5);
}

unsigned int *WTF::add<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)a2;
    v4 = *(_QWORD *)a2 + 8 * v2;
    v5 = *result;
    do
    {
      v6 = *v3;
      if (*v3)
      {
        v7 = *(_DWORD *)(v6 + 4);
        v8 = v7 & 0xFFFFFFFE;
        if ((v7 & 0xFFFFFFFE) != 0)
        {
          v9 = 0;
          do
          {
            v10 = *(unsigned int *)(v6 + 4);
            if (v9 >= v10)
            {
              v12 = 0;
            }
            else
            {
              v11 = *(_QWORD *)(v6 + 8);
              if ((*(_BYTE *)(v6 + 16) & 4) != 0)
                v12 = *(unsigned __int8 *)(v11 + v9);
              else
                v12 = *(unsigned __int16 *)(v11 + 2 * v9);
            }
            v13 = v9 + 1;
            if (v9 + 1 >= v10)
            {
              v15 = 0;
            }
            else
            {
              v14 = *(_QWORD *)(v6 + 8);
              if ((*(_BYTE *)(v6 + 16) & 4) != 0)
                v15 = *(unsigned __int8 *)(v14 + v9 + 1);
              else
                v15 = *(unsigned __int16 *)(v14 + 2 * v9 + 2);
            }
            v16 = (v12 << 11) ^ ((v5 + v15) << 16) ^ (v5 + v15);
            v5 = v16 + (v16 >> 11);
            *result = v5;
            v9 = v13 + 1;
          }
          while (v13 + 1 < v8);
        }
        if ((v7 & 1) != 0)
        {
          if (*(_DWORD *)(v6 + 4) <= v8)
          {
            v18 = 0;
          }
          else
          {
            v17 = *(_QWORD *)(v6 + 8);
            if ((*(_BYTE *)(v6 + 16) & 4) != 0)
              v18 = *(unsigned __int8 *)(v17 + v8);
            else
              v18 = *(unsigned __int16 *)(v17 + 2 * v8);
          }
          v5 = ((v5 + v18) ^ ((v5 + v18) << 16)) + (((v5 + v18) ^ ((v5 + v18) << 16)) >> 11);
          *result = v5;
        }
      }
      ++v3;
    }
    while (v3 != (uint64_t *)v4);
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::String,unsigned int>,WTF::KeyValuePair<std::pair<WTF::String,unsigned int>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,unsigned int>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::String,unsigned int>>,WTF::HashMap<std::pair<WTF::String,unsigned int>,unsigned int,WTF::DefaultHash<std::pair<WTF::String,unsigned int>>,WTF::PairHashTraits<WTF::HashTraits<WTF::String>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::HashTraits<WTF::String>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  WTF::StringImpl *v31;
  WTF *v32;
  WTF::StringImpl *v33;
  uint64_t result;
  uint64_t v35;

  v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v10 = a2;
    v11 = (_DWORD *)(v7 + 32);
    do
    {
      *((_QWORD *)v11 - 2) = 0;
      *(v11 - 2) = -1;
      *v11 = 0;
      v11 += 6;
      --v10;
    }
    while (v10);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if ((_DWORD)v5)
  {
    v12 = 0;
    v13 = 0;
    v5 = v5;
    v35 = v5;
    do
    {
      v14 = v4 + 24 * v12;
      if (*(_QWORD *)v14 != -1)
      {
        v15 = WTF::equal(*(WTF **)v14, 0, v9);
        v16 = *(_DWORD *)(v14 + 8);
        if (v15)
          v17 = v16 == -1;
        else
          v17 = 0;
        if (v17)
        {
          v20 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v8);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        else
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v21 = *(_DWORD *)(*(_QWORD *)v14 + 16);
          if (v21 < 0x100)
          {
            v22 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v14);
            v16 = *(_DWORD *)(v14 + 8);
          }
          else
          {
            v22 = v21 >> 8;
          }
          v23 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
          v24 = (v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11);
          v25 = v19 & ((0xD7862706ELL * (unint64_t)(277951225 * v22 + 95187966 * (v24 ^ HIWORD(v24)))) >> 4);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = v18 + 24 * v25;
            v29 = WTF::equal(*(WTF **)v28, 0, v9);
            v25 = (v27 + v26++) & v19;
            if (v29)
              v30 = *(_DWORD *)(v28 + 8) == -1;
            else
              v30 = 0;
          }
          while (!v30);
          v31 = *(WTF::StringImpl **)v28;
          *(_QWORD *)v28 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v8);
            else
              *(_DWORD *)v31 -= 2;
          }
          v32 = *(WTF **)v14;
          *(_QWORD *)v14 = 0;
          *(_QWORD *)v28 = v32;
          *(_DWORD *)(v28 + 8) = *(_DWORD *)(v14 + 8);
          *(_DWORD *)(v18 + 24 * v27 + 16) = *(_DWORD *)(v4 + 24 * v12 + 16);
          v33 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v8);
            else
              *(_DWORD *)v33 -= 2;
          }
          if (v14 == a3)
            v13 = v28;
          v5 = v35;
        }
      }
      ++v12;
    }
    while (v12 != v5);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

uint64_t WTF::HashTable<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>,WTF::KeyValuePair<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>,unsigned int>>,WTF::DefaultHash<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>>,WTF::HashMap<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>,unsigned int,WTF::DefaultHash<std::pair<WebCore::ContentExtensions::ModifyHeadersAction,unsigned int>>,WTF::PairHashTraits<WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::HashTraits<WebCore::ContentExtensions::ModifyHeadersAction>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  _BOOL4 v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t result;
  uint64_t v59;
  unsigned int **v62;
  uint64_t v63;
  unsigned int **v64;
  int v65;
  unsigned __int16 v66;
  char v67;
  __int128 v68;
  __int128 v69;
  int v70;
  int v71;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)(((unint64_t)a2 << 6) | 0x10));
  if (a2)
  {
    v10 = (_DWORD *)(v8 + 72);
    do
    {
      *((_BYTE *)v10 - 56) = 0;
      *((_OWORD *)v10 - 3) = 0uLL;
      *((_OWORD *)v10 - 2) = 0uLL;
      *(v10 - 4) = 0;
      *(v10 - 2) = -1;
      *v10 = 0;
      v10 += 16;
      --v7;
    }
    while (v7);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v59 = v4;
    while (1)
    {
      v14 = v4 + (v11 << 6);
      if (*(_BYTE *)v14 != 1)
      {
        LOBYTE(v65) = 0;
        v68 = 0u;
        v69 = 0u;
        v70 = 0;
        v71 = -1;
        if (!WebCore::ContentExtensions::operator==((unsigned __int8 *)(v4 + (v11 << 6)), (unsigned __int8 *)&v65)
          || *(_DWORD *)(v14 + 48) != -1)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v65 = -1640531527;
          v66 = 0;
          v67 = 0;
          v62 = (unsigned int **)(v14 + 24);
          v63 = v12;
          WTF::add<WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>((uint64_t)&v65, *(_QWORD *)(v14 + 8), *(_DWORD *)(v14 + 20), (uint64_t *)(v14 + 24), (_DWORD *)(v14 + 40));
          v25 = v65;
          if (v67)
          {
            v57 = (v65 + v66) ^ ((v65 + v66) << 11);
            v25 = v57 + (v57 >> 17);
          }
          v26 = (v25 ^ (8 * v25)) + ((v25 ^ (8 * v25)) >> 5);
          v27 = (v26 ^ (4 * v26)) + ((v26 ^ (4 * v26)) >> 15);
          v28 = v27 ^ (v27 << 10);
          v29 = *(_DWORD *)(v14 + 48) + ~(*(_DWORD *)(v14 + 48) << 15);
          v30 = (9 * (v29 ^ (v29 >> 10))) ^ ((9 * (v29 ^ (v29 >> 10))) >> 6);
          v31 = (v30 + ~(v30 << 11)) ^ ((v30 + ~(v30 << 11)) >> 16);
          if (v28)
            v32 = 277951225 * v28;
          else
            v32 = 2088763392;
          v33 = v24 & ((0xD7862706ELL * (unint64_t)(v32 + 95187966 * v31)) >> 4);
          v34 = 1;
          do
          {
            v35 = v33;
            v12 = v23 + ((unint64_t)v33 << 6);
            v36 = !*(_BYTE *)v12 && !*(_DWORD *)(v12 + 20) && !*(_DWORD *)(v12 + 36) && *(_DWORD *)(v12 + 40) == 0;
            v33 = (v33 + v34++) & v24;
          }
          while (!v36 || *(_DWORD *)(v12 + 48) != -1);
          v37 = *(unsigned int **)(v12 + 24);
          v64 = (unsigned int **)(v12 + 24);
          v38 = *(unsigned int *)(v12 + 36);
          if ((_DWORD)v38)
          {
            v39 = 24 * v38;
            do
            {
              v40 = v37[4];
              if ((_DWORD)v40 != -1)
                ((void (*)(int *, unsigned int *))off_1E3394F08[v40])(&v65, v37);
              v37[4] = -1;
              v37 += 6;
              v39 -= 24;
            }
            while (v39);
            v37 = *v64;
          }
          if (v37)
          {
            *(_QWORD *)(v12 + 24) = 0;
            *(_DWORD *)(v12 + 32) = 0;
            WTF::fastFree((WTF *)v37, v9);
          }
          v42 = (unsigned int **)(v12 + 8);
          v41 = *(unsigned int **)(v12 + 8);
          v43 = *(unsigned int *)(v12 + 20);
          if ((_DWORD)v43)
          {
            v44 = 24 * v43;
            do
            {
              v45 = v41[4];
              if ((_DWORD)v45 != -1)
                ((void (*)(int *, unsigned int *))off_1E3394F08[v45])(&v65, v41);
              v41[4] = -1;
              v41 += 6;
              v44 -= 24;
            }
            while (v44);
            v41 = *v42;
          }
          v4 = v59;
          if (v41)
          {
            *(_QWORD *)(v12 + 8) = 0;
            *(_DWORD *)(v12 + 16) = 0;
            WTF::fastFree((WTF *)v41, v9);
          }
          *(_BYTE *)v12 = *(_BYTE *)v14;
          *v42 = 0;
          *(_QWORD *)(v12 + 16) = 0;
          v46 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v12 + 8) = v46;
          LODWORD(v46) = *(_DWORD *)(v14 + 16);
          *(_DWORD *)(v14 + 16) = 0;
          *(_DWORD *)(v12 + 16) = v46;
          LODWORD(v46) = *(_DWORD *)(v14 + 20);
          *(_DWORD *)(v14 + 20) = 0;
          *(_DWORD *)(v12 + 20) = v46;
          *v64 = 0;
          *(_QWORD *)(v12 + 32) = 0;
          v47 = *(_QWORD *)(v14 + 24);
          *(_QWORD *)(v14 + 24) = 0;
          *(_QWORD *)(v12 + 24) = v47;
          LODWORD(v47) = *(_DWORD *)(v14 + 32);
          *(_DWORD *)(v14 + 32) = 0;
          *(_DWORD *)(v12 + 32) = v47;
          v48 = *(_QWORD *)(v14 + 36);
          *(_DWORD *)(v14 + 36) = 0;
          *(_QWORD *)(v12 + 36) = v48;
          *(_DWORD *)(v12 + 48) = *(_DWORD *)(v14 + 48);
          *(_DWORD *)(v23 + (v35 << 6) + 56) = *(_DWORD *)(v59 + (v11 << 6) + 56);
          v49 = *(unsigned int *)(v14 + 36);
          v50 = *(unsigned int **)(v14 + 24);
          if ((_DWORD)v49)
          {
            v51 = 24 * v49;
            v13 = v5;
            do
            {
              v52 = v50[4];
              if ((_DWORD)v52 != -1)
                ((void (*)(int *, unsigned int *))off_1E3394F08[v52])(&v65, v50);
              v50[4] = -1;
              v50 += 6;
              v51 -= 24;
            }
            while (v51);
            v50 = *v62;
            if (*v62)
            {
LABEL_67:
              *(_QWORD *)(v14 + 24) = 0;
              *(_DWORD *)(v14 + 32) = 0;
              WTF::fastFree((WTF *)v50, v9);
            }
          }
          else
          {
            v13 = v5;
            if (v50)
              goto LABEL_67;
          }
          v53 = *(unsigned int *)(v14 + 20);
          v54 = *(unsigned int **)(v14 + 8);
          if ((_DWORD)v53)
          {
            v55 = 24 * v53;
            do
            {
              v56 = v54[4];
              if ((_DWORD)v56 != -1)
                ((void (*)(int *, unsigned int *))off_1E3394F08[v56])(&v65, v54);
              v54[4] = -1;
              v54 += 6;
              v55 -= 24;
            }
            while (v55);
            v54 = *(unsigned int **)(v14 + 8);
          }
          if (v54)
          {
            *(_QWORD *)(v14 + 8) = 0;
            *(_DWORD *)(v14 + 16) = 0;
            WTF::fastFree((WTF *)v54, v9);
          }
          if (v14 != a3)
            v12 = v63;
          goto LABEL_78;
        }
        v15 = *(unsigned int *)(v14 + 36);
        v16 = *(unsigned int **)(v14 + 24);
        if ((_DWORD)v15)
        {
          v17 = 24 * v15;
          do
          {
            v18 = v16[4];
            if ((_DWORD)v18 != -1)
              ((void (*)(int *, unsigned int *))off_1E3394F08[v18])(&v65, v16);
            v16[4] = -1;
            v16 += 6;
            v17 -= 24;
          }
          while (v17);
          v16 = *(unsigned int **)(v14 + 24);
        }
        if (v16)
        {
          *(_QWORD *)(v14 + 24) = 0;
          *(_DWORD *)(v14 + 32) = 0;
          WTF::fastFree((WTF *)v16, v9);
        }
        v19 = *(unsigned int *)(v14 + 20);
        v20 = *(unsigned int **)(v14 + 8);
        if ((_DWORD)v19)
        {
          v21 = 24 * v19;
          do
          {
            v22 = v20[4];
            if ((_DWORD)v22 != -1)
              ((void (*)(int *, unsigned int *))off_1E3394F08[v22])(&v65, v20);
            v20[4] = -1;
            v20 += 6;
            v21 -= 24;
          }
          while (v21);
          v20 = *(unsigned int **)(v14 + 8);
        }
        if (v20)
        {
          *(_QWORD *)(v14 + 8) = 0;
          *(_DWORD *)(v14 + 16) = 0;
          WTF::fastFree((WTF *)v20, v9);
        }
      }
LABEL_78:
      if (++v11 == v13)
        goto LABEL_83;
    }
  }
  v12 = 0;
  result = 0;
  if (v4)
  {
LABEL_83:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v12;
  }
  return result;
}

uint64_t WTF::add<WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>(uint64_t result, uint64_t a2, unsigned int a3, uint64_t *a4, _DWORD *a5)
{
  _DWORD *v7;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  _QWORD *v25;

  v7 = (_DWORD *)result;
  if (a3)
  {
    v9 = 24 * a3;
    while (1)
    {
      v10 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v10 == -1)
        v10 = -1;
      v11 = (v10 >> 5) & 0x7FFF800 ^ ((*v7 + (unsigned __int16)v10) << 16) ^ (*v7 + (unsigned __int16)v10);
      v12 = (v10 >> 37) & 0x7FFF800 ^ ((v11 + WORD2(v10) + (v11 >> 11)) << 16) ^ (v11 + WORD2(v10) + (v11 >> 11));
      *v7 = v12 + (v12 >> 11);
      v24 = v7;
      v13 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v13 == -1)
        break;
      v25 = &v24;
      result = ((uint64_t (*)(_QWORD **, uint64_t))off_1E3395180[v13])(&v25, a2);
      a2 += 24;
      v9 -= 24;
      if (!v9)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v14 = *((unsigned int *)a4 + 3);
    if (!(_DWORD)v14)
    {
LABEL_13:
      v21 = *v7 + (unsigned __int16)*a5;
      v22 = (*a5 >> 5) & 0x7FFF800 ^ (v21 << 16) ^ v21;
      *v7 = v22 + (v22 >> 11);
      return result;
    }
    v15 = *a4;
    v16 = 24 * v14;
    while (1)
    {
      v17 = *(unsigned int *)(v15 + 16);
      if ((_DWORD)v17 == -1)
        v17 = -1;
      v18 = (v17 >> 5) & 0x7FFF800 ^ ((*v7 + (unsigned __int16)v17) << 16) ^ (*v7 + (unsigned __int16)v17);
      v19 = (v17 >> 37) & 0x7FFF800 ^ ((v18 + WORD2(v17) + (v18 >> 11)) << 16) ^ (v18 + WORD2(v17) + (v18 >> 11));
      *v7 = v19 + (v19 >> 11);
      v24 = v7;
      v20 = *(unsigned int *)(v15 + 16);
      if ((_DWORD)v20 == -1)
        break;
      v25 = &v24;
      result = ((uint64_t (*)(_QWORD **, uint64_t))off_1E3395180[v20])(&v25, v15);
      v15 += 24;
      v16 -= 24;
      if (!v16)
        goto LABEL_13;
    }
  }
  v23 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSD_12SetOperationENSD_15RemoveOperationEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SG_EEEEEEDcSP_DpT0_(v23);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSD_12SetOperationENSD_15RemoveOperationEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SG_EEEEEEDcSP_DpT0_(unsigned int ***a1, uint64_t *a2)
{
  return WTF::add<WTF::String,WTF::String>(**a1, *a2, a2[1]);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSD_12SetOperationENSD_15RemoveOperationEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SG_EEEEEEDcSP_DpT0_(unsigned int ***a1, uint64_t *a2)
{
  return WTF::add<WTF::String,WTF::String>(**a1, *a2, a2[1]);
}

unsigned int ***_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSD_12SetOperationENSD_15RemoveOperationEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SG_EEEEEEDcSP_DpT0_(unsigned int ***result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  v2 = *a2;
  if (*a2)
  {
    v3 = **result;
    v4 = *(_DWORD *)(v2 + 4);
    v5 = v4 & 0xFFFFFFFE;
    if ((v4 & 0xFFFFFFFE) != 0)
    {
      v6 = 0;
      v7 = *v3;
      do
      {
        v8 = *(unsigned int *)(v2 + 4);
        if (v6 >= v8)
        {
          v10 = 0;
        }
        else
        {
          v9 = *(_QWORD *)(v2 + 8);
          if ((*(_BYTE *)(v2 + 16) & 4) != 0)
            v10 = *(unsigned __int8 *)(v9 + v6);
          else
            v10 = *(unsigned __int16 *)(v9 + 2 * v6);
        }
        v11 = v6 + 1;
        if (v6 + 1 >= v8)
        {
          v13 = 0;
        }
        else
        {
          v12 = *(_QWORD *)(v2 + 8);
          if ((*(_BYTE *)(v2 + 16) & 4) != 0)
            v13 = *(unsigned __int8 *)(v12 + v6 + 1);
          else
            v13 = *(unsigned __int16 *)(v12 + 2 * v6 + 2);
        }
        v14 = (v10 << 11) ^ ((v7 + v13) << 16) ^ (v7 + v13);
        v7 = v14 + (v14 >> 11);
        *v3 = v7;
        v6 = v11 + 1;
      }
      while (v11 + 1 < v5);
    }
    if ((v4 & 1) != 0)
    {
      if (*(_DWORD *)(v2 + 4) <= v5)
      {
        v16 = 0;
      }
      else
      {
        v15 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
          v16 = *(unsigned __int8 *)(v15 + v5);
        else
          v16 = *(unsigned __int16 *)(v15 + 2 * v5);
      }
      *v3 = ((*v3 + v16) ^ ((*v3 + v16) << 16)) + (((*v3 + v16) ^ ((*v3 + v16) << 16)) >> 11);
    }
  }
  return result;
}

unsigned int *WTF::add<WTF::String,WTF::String>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;

  if (a2)
  {
    v3 = *(_DWORD *)(a2 + 4);
    v4 = v3 & 0xFFFFFFFE;
    if ((v3 & 0xFFFFFFFE) != 0)
    {
      v5 = 0;
      v6 = *result;
      do
      {
        v7 = *(unsigned int *)(a2 + 4);
        if (v5 >= v7)
        {
          v9 = 0;
        }
        else
        {
          v8 = *(_QWORD *)(a2 + 8);
          if ((*(_BYTE *)(a2 + 16) & 4) != 0)
            v9 = *(unsigned __int8 *)(v8 + v5);
          else
            v9 = *(unsigned __int16 *)(v8 + 2 * v5);
        }
        v10 = v5 + 1;
        if (v5 + 1 >= v7)
        {
          v12 = 0;
        }
        else
        {
          v11 = *(_QWORD *)(a2 + 8);
          if ((*(_BYTE *)(a2 + 16) & 4) != 0)
            v12 = *(unsigned __int8 *)(v11 + v5 + 1);
          else
            v12 = *(unsigned __int16 *)(v11 + 2 * v5 + 2);
        }
        v13 = (v9 << 11) ^ ((v6 + v12) << 16) ^ (v6 + v12);
        v6 = v13 + (v13 >> 11);
        *result = v6;
        v5 = v10 + 1;
      }
      while (v10 + 1 < v4);
    }
    if ((v3 & 1) != 0)
    {
      if (*(_DWORD *)(a2 + 4) <= v4)
      {
        v15 = 0;
      }
      else
      {
        v14 = *(_QWORD *)(a2 + 8);
        if ((*(_BYTE *)(a2 + 16) & 4) != 0)
          v15 = *(unsigned __int8 *)(v14 + v4);
        else
          v15 = *(unsigned __int16 *)(v14 + 2 * v4);
      }
      *result = ((*result + v15) ^ ((*result + v15) << 16)) + (((*result + v15) ^ ((*result + v15) << 16)) >> 11);
    }
  }
  if (a3)
  {
    v16 = *(_DWORD *)(a3 + 4);
    v17 = v16 & 0xFFFFFFFE;
    if ((v16 & 0xFFFFFFFE) != 0)
    {
      v18 = 0;
      v19 = *result;
      do
      {
        v20 = *(unsigned int *)(a3 + 4);
        if (v18 >= v20)
        {
          v22 = 0;
        }
        else
        {
          v21 = *(_QWORD *)(a3 + 8);
          if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            v22 = *(unsigned __int8 *)(v21 + v18);
          else
            v22 = *(unsigned __int16 *)(v21 + 2 * v18);
        }
        v23 = v18 + 1;
        if (v18 + 1 >= v20)
        {
          v25 = 0;
        }
        else
        {
          v24 = *(_QWORD *)(a3 + 8);
          if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            v25 = *(unsigned __int8 *)(v24 + v18 + 1);
          else
            v25 = *(unsigned __int16 *)(v24 + 2 * v18 + 2);
        }
        v26 = (v22 << 11) ^ ((v19 + v25) << 16) ^ (v19 + v25);
        v19 = v26 + (v26 >> 11);
        *result = v19;
        v18 = v23 + 1;
      }
      while (v23 + 1 < v17);
    }
    if ((v16 & 1) != 0)
    {
      if (*(_DWORD *)(a3 + 4) <= v17)
      {
        v28 = 0;
      }
      else
      {
        v27 = *(_QWORD *)(a3 + 8);
        if ((*(_BYTE *)(a3 + 16) & 4) != 0)
          v28 = *(unsigned __int8 *)(v27 + v17);
        else
          v28 = *(unsigned __int16 *)(v27 + 2 * v17);
      }
      *result = ((*result + v28) ^ ((*result + v28) << 16)) + (((*result + v28) ^ ((*result + v28) << 16)) >> 11);
    }
  }
  return result;
}

BOOL WebCore::ContentExtensions::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  _BOOL4 v12;
  _BOOL4 v14;
  _BOOL4 v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BOOL4 v24;
  _BOOL4 v26;
  _BOOL4 v27;
  char v29;
  char *v30;

  if (*a1 != *a2)
    return 0;
  v4 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v4 != *((_DWORD *)a2 + 5))
    return 0;
  if (!(_DWORD)v4)
    goto LABEL_24;
  v5 = 0;
  v6 = 0;
  v7 = *((_QWORD *)a1 + 1);
  v8 = *((_QWORD *)a2 + 1);
  while (1)
  {
    v9 = *(unsigned int *)(v7 + 16);
    v10 = *(_DWORD *)(v8 + 16);
    v11 = v10 != (_DWORD)v9 || v10 == -1;
    v12 = !v11;
    if ((_DWORD)v9 == -1 || !v12)
      break;
    v30 = &v29;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3395198[v9])(&v30, v7, v8) & 1) == 0)
      goto LABEL_23;
LABEL_22:
    v5 = ++v6 >= v4;
    v8 += 24;
    v7 += 24;
    if (v4 == v6)
      goto LABEL_23;
  }
  v14 = v10 == -1;
  if ((_DWORD)v9 == -1)
    v15 = v14;
  else
    v15 = v12;
  if (v15)
    goto LABEL_22;
LABEL_23:
  if (!v5)
    return 0;
LABEL_24:
  v16 = *((unsigned int *)a1 + 9);
  if ((_DWORD)v16 != *((_DWORD *)a2 + 9))
    return 0;
  if (!(_DWORD)v16)
    return *((_DWORD *)a1 + 10) == *((_DWORD *)a2 + 10);
  v17 = 0;
  v18 = 0;
  v19 = *((_QWORD *)a1 + 3);
  v20 = *((_QWORD *)a2 + 3);
  while (2)
  {
    v21 = *(unsigned int *)(v19 + 16);
    v22 = *(_DWORD *)(v20 + 16);
    v24 = v22 == (_DWORD)v21 && v22 != -1;
    if ((_DWORD)v21 != -1 && v24)
    {
      v30 = &v29;
      if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3395198[v21])(&v30, v19, v20) & 1) == 0)
        break;
      goto LABEL_44;
    }
    v26 = v22 == -1;
    if ((_DWORD)v21 == -1)
      v27 = v26;
    else
      v27 = v24;
    if (v27)
    {
LABEL_44:
      v17 = ++v18 >= v16;
      v20 += 24;
      v19 += 24;
      if (v16 == v18)
        break;
      continue;
    }
    break;
  }
  if (v17)
    return *((_DWORD *)a1 + 10) == *((_DWORD *)a2 + 10);
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::AppendOperation,WebCore::ContentExtensions::ModifyHeadersAction::SetOperation,WebCore::ContentExtensions::ModifyHeadersAction::RemoveOperation> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::AppendOperation,WebCore::ContentExtensions::ModifyHeadersAction::SetOperation,WebCore::ContentExtensions::ModifyHeadersAction::RemoveOperation> const>(uint64_t a1, WTF **a2, const WTF::StringImpl **a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;

  result = WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3);
  if ((_DWORD)result)
    return WTF::equal(a2[1], a3[1], v6);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::AppendOperation,WebCore::ContentExtensions::ModifyHeadersAction::SetOperation,WebCore::ContentExtensions::ModifyHeadersAction::RemoveOperation> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::AppendOperation,WebCore::ContentExtensions::ModifyHeadersAction::SetOperation,WebCore::ContentExtensions::ModifyHeadersAction::RemoveOperation> const>(uint64_t a1, WTF **a2, const WTF::StringImpl **a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;

  result = WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3);
  if ((_DWORD)result)
    return WTF::equal(a2[1], a3[1], v6);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::AppendOperation,WebCore::ContentExtensions::ModifyHeadersAction::SetOperation,WebCore::ContentExtensions::ModifyHeadersAction::RemoveOperation> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo::AppendOperation,WebCore::ContentExtensions::ModifyHeadersAction::SetOperation,WebCore::ContentExtensions::ModifyHeadersAction::RemoveOperation> const>(uint64_t a1, WTF **a2, const WTF::StringImpl **a3)
{
  return WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3);
}

WebCore::ContentExtensions::ModifyHeadersAction *WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersAction(WebCore::ContentExtensions::ModifyHeadersAction *this, const WebCore::ContentExtensions::ModifyHeadersAction *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  char v22;

  *(_BYTE *)this = *(_BYTE *)a2;
  v4 = *((unsigned int *)a2 + 5);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 5) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      goto LABEL_18;
    }
    v5 = 24 * v4;
    v6 = WTF::fastMalloc((WTF *)(24 * v4));
    *((_DWORD *)this + 4) = (v5 & 0xFFFFFFF8) / 0x18;
    *((_QWORD *)this + 1) = v6;
    v7 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v7)
    {
      v8 = v6;
      v9 = *((_QWORD *)a2 + 1);
      v10 = 24 * v7;
      do
      {
        *(_BYTE *)v8 = 0;
        *(_DWORD *)(v8 + 16) = -1;
        v11 = *(unsigned int *)(v9 + 16);
        if ((_DWORD)v11 != -1)
        {
          ((void (*)(char *, uint64_t, uint64_t))off_1E33951B0[v11])(&v21, v8, v9);
          *(_DWORD *)(v8 + 16) = v11;
        }
        v8 += 24;
        v9 += 24;
        v10 -= 24;
      }
      while (v10);
    }
  }
  v12 = *((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = v12;
  if (!(_DWORD)v12)
    goto LABEL_15;
  if (v12 >= 0xAAAAAAB)
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x19572B958);
  }
  v13 = 24 * v12;
  v14 = WTF::fastMalloc((WTF *)(24 * v12));
  *((_DWORD *)this + 8) = (v13 & 0xFFFFFFF8) / 0x18;
  *((_QWORD *)this + 3) = v14;
  v15 = *((unsigned int *)a2 + 9);
  if ((_DWORD)v15)
  {
    v16 = v14;
    v17 = *((_QWORD *)a2 + 3);
    v18 = 24 * v15;
    do
    {
      *(_BYTE *)v16 = 0;
      *(_DWORD *)(v16 + 16) = -1;
      v19 = *(unsigned int *)(v17 + 16);
      if ((_DWORD)v19 != -1)
      {
        ((void (*)(char *, uint64_t, uint64_t))off_1E33951B0[v19])(&v22, v16, v17);
        *(_DWORD *)(v16 + 16) = v19;
      }
      v16 += 24;
      v17 += 24;
      v18 -= 24;
    }
    while (v18);
  }
LABEL_15:
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  return this;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *a2 = v3;
  v4 = *(_DWORD **)(a3 + 8);
  if (v4)
    *v4 += 2;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *a2 = v3;
  v4 = *(_DWORD **)(a3 + 8);
  if (v4)
    *v4 += 2;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

uint64_t WTF::HashTable<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>,WTF::KeyValuePair<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>,unsigned int>>,WTF::DefaultHash<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>>,WTF::HashMap<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>,unsigned int,WTF::DefaultHash<std::pair<WebCore::ContentExtensions::RedirectAction,unsigned int>>,WTF::PairHashTraits<WTF::HashTraits<WebCore::ContentExtensions::RedirectAction>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::HashTraits<WebCore::ContentExtensions::RedirectAction>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const WTF::StringImpl *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  char v36;
  char v37;
  char v38;
  char v39;

  v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)(((unint64_t)a2 << 7) | 0x10));
  if (a2)
  {
    v11 = (_DWORD *)(v8 + 136);
    do
    {
      *((_BYTE *)v11 - 120) = 0;
      *((_QWORD *)v11 - 14) = 0;
      *(v11 - 4) = 0;
      *(v11 - 2) = -1;
      *v11 = 0;
      v11 += 32;
      --v7;
    }
    while (v7);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if ((_DWORD)v5)
  {
    v12 = 0;
    v13 = 0;
    v5 = v5;
    v33 = v5;
    do
    {
      v14 = (unsigned __int8 *)(v4 + (v12 << 7));
      v15 = *v14;
      if (v15 != 1)
      {
        if (!(v15 | *((_DWORD *)v14 + 26))
          && (WTF::equal(*((WTF **)v14 + 1), 0, v10) ? (v16 = *((_DWORD *)v14 + 28) == -1) : (v16 = 0),
              v16))
        {
          v31 = *((unsigned int *)v14 + 26);
          if ((_DWORD)v31 != -1)
            ((void (*)(char *, unsigned __int8 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v31])(&v36, v14 + 8);
          *((_DWORD *)v14 + 26) = -1;
        }
        else
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = WTF::computeHash<WebCore::ContentExtensions::RedirectAction>(v4 + (v12 << 7));
          v20 = *((_DWORD *)v14 + 28) + ~(*((_DWORD *)v14 + 28) << 15);
          v21 = (9 * (v20 ^ (v20 >> 10))) ^ ((9 * (v20 ^ (v20 >> 10))) >> 6);
          v22 = v18 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * v19
                                         + 95187966 * ((v21 + ~(v21 << 11)) ^ ((v21 + ~(v21 << 11)) >> 16)))) >> 4);
          for (i = 1; ; ++i)
          {
            v24 = v22;
            v25 = v17 + ((unint64_t)v22 << 7);
            if (!*(_BYTE *)v25
              && *(_DWORD *)(v25 + 104) == 0
              && WTF::equal(*(WTF **)(v25 + 8), 0, v10)
              && *(_DWORD *)(v25 + 112) == -1)
            {
              break;
            }
            v22 = (v24 + i) & v18;
          }
          v28 = *(unsigned int *)(v25 + 104);
          if ((_DWORD)v28 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v28])(&v38, v25 + 8);
          *(_BYTE *)v25 = *v14;
          *(_BYTE *)(v25 + 8) = 0;
          *(_DWORD *)(v25 + 104) = -1;
          v29 = *((unsigned int *)v14 + 26);
          if ((_DWORD)v29 == -1)
          {
            *(_DWORD *)(v25 + 112) = *((_DWORD *)v14 + 28);
            *(_DWORD *)(v17 + (v24 << 7) + 120) = *(_DWORD *)(v4 + (v12 << 7) + 120);
            v5 = v33;
          }
          else
          {
            ((void (*)(char *, uint64_t, unsigned __int8 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v29])(&v39, v25 + 8, v14 + 8);
            *(_DWORD *)(v25 + 104) = v29;
            v30 = *((unsigned int *)v14 + 26);
            *(_DWORD *)(v25 + 112) = *((_DWORD *)v14 + 28);
            *(_DWORD *)(v17 + (v24 << 7) + 120) = *(_DWORD *)(v4 + (v12 << 7) + 120);
            v5 = v33;
            if ((_DWORD)v30 != -1)
              ((void (*)(char *, unsigned __int8 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v30])(&v37, v14 + 8);
          }
          *((_DWORD *)v14 + 26) = -1;
          if (v14 == a3)
            v13 = v25;
        }
      }
      ++v12;
    }
    while (v12 != v5);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v13;
}

unint64_t WTF::computeHash<WebCore::ContentExtensions::RedirectAction>(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  unsigned int ***v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned __int16 v14;
  char v15;
  unsigned int *v16;
  unsigned int **v17;

  v14 = 0;
  v15 = 0;
  v1 = *(unsigned int *)(a1 + 104);
  v16 = &v13;
  if ((_DWORD)v1 == -1)
    v2 = -1;
  else
    v2 = v1;
  v3 = (v2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v2 - 1640531527) << 16) ^ ((unsigned __int16)v2
                                                                                          - 1640531527);
  v4 = (v2 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(v2) + (v3 >> 11)) << 16) ^ (v3 + WORD2(v2) + (v3 >> 11));
  v13 = v4 + (v4 >> 11);
  if ((_DWORD)v1 == -1)
  {
    v11 = (unsigned int ***)std::__throw_bad_variant_access[abi:sn180100]();
    return (unint64_t)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSC_23RegexSubstitutionActionENSC_18URLTransformActionENSC_9URLActionEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_EEEEEEDcSP_DpT0_(v11, v12);
  }
  else
  {
    v17 = &v16;
    ((void (*)(unsigned int ***, uint64_t))off_1E33951C8[v1])(&v17, a1 + 8);
    v5 = v13;
    if (v15)
    {
      v10 = (v13 + v14) ^ ((v13 + v14) << 11);
      v5 = v10 + (v10 >> 17);
    }
    v6 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
    v7 = (v6 ^ (4 * v6)) + ((v6 ^ (4 * v6)) >> 15);
    v8 = v7 ^ (v7 << 10);
    if (v8)
      return v8;
    else
      return 0x800000;
  }
}

unsigned int ***_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSC_23RegexSubstitutionActionENSC_18URLTransformActionENSC_9URLActionEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_EEEEEEDcSP_DpT0_(unsigned int ***result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  v2 = *a2;
  if (*a2)
  {
    v3 = **result;
    v4 = *(_DWORD *)(v2 + 4);
    v5 = v4 & 0xFFFFFFFE;
    if ((v4 & 0xFFFFFFFE) != 0)
    {
      v6 = 0;
      v7 = *v3;
      do
      {
        v8 = *(unsigned int *)(v2 + 4);
        if (v6 >= v8)
        {
          v10 = 0;
        }
        else
        {
          v9 = *(_QWORD *)(v2 + 8);
          if ((*(_BYTE *)(v2 + 16) & 4) != 0)
            v10 = *(unsigned __int8 *)(v9 + v6);
          else
            v10 = *(unsigned __int16 *)(v9 + 2 * v6);
        }
        v11 = v6 + 1;
        if (v6 + 1 >= v8)
        {
          v13 = 0;
        }
        else
        {
          v12 = *(_QWORD *)(v2 + 8);
          if ((*(_BYTE *)(v2 + 16) & 4) != 0)
            v13 = *(unsigned __int8 *)(v12 + v6 + 1);
          else
            v13 = *(unsigned __int16 *)(v12 + 2 * v6 + 2);
        }
        v14 = (v10 << 11) ^ ((v7 + v13) << 16) ^ (v7 + v13);
        v7 = v14 + (v14 >> 11);
        *v3 = v7;
        v6 = v11 + 1;
      }
      while (v11 + 1 < v5);
    }
    if ((v4 & 1) != 0)
    {
      if (*(_DWORD *)(v2 + 4) <= v5)
      {
        v16 = 0;
      }
      else
      {
        v15 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
          v16 = *(unsigned __int8 *)(v15 + v5);
        else
          v16 = *(unsigned __int16 *)(v15 + 2 * v5);
      }
      *v3 = ((*v3 + v16) ^ ((*v3 + v16) << 16)) + (((*v3 + v16) ^ ((*v3 + v16) << 16)) >> 11);
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSC_23RegexSubstitutionActionENSC_18URLTransformActionENSC_9URLActionEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_EEEEEEDcSP_DpT0_(unsigned int ***a1, uint64_t *a2)
{
  return WTF::add<WTF::String,WTF::String>(**a1, *a2, a2[1]);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSC_23RegexSubstitutionActionENSC_18URLTransformActionENSC_9URLActionEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_EEEEEEDcSP_DpT0_(unsigned int ***a1, uint64_t *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  unsigned int *v70;
  unsigned int **v71;

  v2 = **a1;
  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  if (!*a2)
    goto LABEL_21;
  v6 = *(_DWORD *)(v4 + 4);
  v7 = v6 & 0xFFFFFFFE;
  if ((v6 & 0xFFFFFFFE) != 0)
  {
    v8 = 0;
    v9 = *v2;
    do
    {
      v10 = *(unsigned int *)(v4 + 4);
      if (v8 >= v10)
      {
        v12 = 0;
      }
      else
      {
        v11 = *(_QWORD *)(v4 + 8);
        if ((*(_BYTE *)(v4 + 16) & 4) != 0)
          v12 = *(unsigned __int8 *)(v11 + v8);
        else
          v12 = *(unsigned __int16 *)(v11 + 2 * v8);
      }
      v13 = v8 + 1;
      if (v8 + 1 >= v10)
      {
        v15 = 0;
      }
      else
      {
        v14 = *(_QWORD *)(v4 + 8);
        if ((*(_BYTE *)(v4 + 16) & 4) != 0)
          v15 = *(unsigned __int8 *)(v14 + v8 + 1);
        else
          v15 = *(unsigned __int16 *)(v14 + 2 * v8 + 2);
      }
      v16 = (v12 << 11) ^ ((v9 + v15) << 16) ^ (v9 + v15);
      v9 = v16 + (v16 >> 11);
      *v2 = v9;
      v8 = v13 + 1;
    }
    while (v13 + 1 < v7);
  }
  if ((v6 & 1) == 0)
    goto LABEL_21;
  if (*(_DWORD *)(v4 + 4) <= v7)
    goto LABEL_93;
  v17 = *(_QWORD *)(v4 + 8);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    v18 = *(unsigned __int8 *)(v17 + v7);
  else
    v18 = *(unsigned __int16 *)(v17 + 2 * v7);
  while (1)
  {
    *v2 = ((*v2 + v18) ^ ((*v2 + v18) << 16)) + (((*v2 + v18) ^ ((*v2 + v18) << 16)) >> 11);
LABEL_21:
    if (v3)
    {
      v19 = *(_DWORD *)(v3 + 4);
      v20 = v19 & 0xFFFFFFFE;
      if ((v19 & 0xFFFFFFFE) != 0)
      {
        v21 = 0;
        v22 = *v2;
        do
        {
          v23 = *(unsigned int *)(v3 + 4);
          if (v21 >= v23)
          {
            v25 = 0;
          }
          else
          {
            v24 = *(_QWORD *)(v3 + 8);
            if ((*(_BYTE *)(v3 + 16) & 4) != 0)
              v25 = *(unsigned __int8 *)(v24 + v21);
            else
              v25 = *(unsigned __int16 *)(v24 + 2 * v21);
          }
          v26 = v21 + 1;
          if (v21 + 1 >= v23)
          {
            v28 = 0;
          }
          else
          {
            v27 = *(_QWORD *)(v3 + 8);
            if ((*(_BYTE *)(v3 + 16) & 4) != 0)
              v28 = *(unsigned __int8 *)(v27 + v21 + 1);
            else
              v28 = *(unsigned __int16 *)(v27 + 2 * v21 + 2);
          }
          v29 = (v25 << 11) ^ ((v22 + v28) << 16) ^ (v22 + v28);
          v22 = v29 + (v29 >> 11);
          *v2 = v22;
          v21 = v26 + 1;
        }
        while (v26 + 1 < v20);
      }
      if ((v19 & 1) != 0)
      {
        if (*(_DWORD *)(v3 + 4) <= v20)
        {
          v31 = 0;
        }
        else
        {
          v30 = *(_QWORD *)(v3 + 8);
          if ((*(_BYTE *)(v3 + 16) & 4) != 0)
            v31 = *(unsigned __int8 *)(v30 + v20);
          else
            v31 = *(unsigned __int16 *)(v30 + 2 * v20);
        }
        *v2 = ((*v2 + v31) ^ ((*v2 + v31) << 16)) + (((*v2 + v31) ^ ((*v2 + v31) << 16)) >> 11);
      }
    }
    v32 = a2[3];
    if (v5)
    {
      v33 = *(_DWORD *)(v5 + 4);
      v34 = v33 & 0xFFFFFFFE;
      if ((v33 & 0xFFFFFFFE) != 0)
      {
        v35 = 0;
        v36 = *v2;
        do
        {
          v37 = *(unsigned int *)(v5 + 4);
          if (v35 >= v37)
          {
            v39 = 0;
          }
          else
          {
            v38 = *(_QWORD *)(v5 + 8);
            if ((*(_BYTE *)(v5 + 16) & 4) != 0)
              v39 = *(unsigned __int8 *)(v38 + v35);
            else
              v39 = *(unsigned __int16 *)(v38 + 2 * v35);
          }
          v40 = v35 + 1;
          if (v35 + 1 >= v37)
          {
            v42 = 0;
          }
          else
          {
            v41 = *(_QWORD *)(v5 + 8);
            if ((*(_BYTE *)(v5 + 16) & 4) != 0)
              v42 = *(unsigned __int8 *)(v41 + v35 + 1);
            else
              v42 = *(unsigned __int16 *)(v41 + 2 * v35 + 2);
          }
          v43 = (v39 << 11) ^ ((v36 + v42) << 16) ^ (v36 + v42);
          v36 = v43 + (v43 >> 11);
          *v2 = v36;
          v35 = v40 + 1;
        }
        while (v40 + 1 < v34);
      }
      if ((v33 & 1) != 0)
      {
        if (*(_DWORD *)(v5 + 4) <= v34)
        {
          v45 = 0;
        }
        else
        {
          v44 = *(_QWORD *)(v5 + 8);
          if ((*(_BYTE *)(v5 + 16) & 4) != 0)
            v45 = *(unsigned __int8 *)(v44 + v34);
          else
            v45 = *(unsigned __int16 *)(v44 + 2 * v34);
        }
        *v2 = ((*v2 + v45) ^ ((*v2 + v45) << 16)) + (((*v2 + v45) ^ ((*v2 + v45) << 16)) >> 11);
      }
    }
    if (v32)
    {
      v46 = *(_DWORD *)(v32 + 4);
      v47 = v46 & 0xFFFFFFFE;
      if ((v46 & 0xFFFFFFFE) != 0)
      {
        v48 = 0;
        v49 = *v2;
        do
        {
          v50 = *(unsigned int *)(v32 + 4);
          if (v48 >= v50)
          {
            v52 = 0;
          }
          else
          {
            v51 = *(_QWORD *)(v32 + 8);
            if ((*(_BYTE *)(v32 + 16) & 4) != 0)
              v52 = *(unsigned __int8 *)(v51 + v48);
            else
              v52 = *(unsigned __int16 *)(v51 + 2 * v48);
          }
          v53 = v48 + 1;
          if (v48 + 1 >= v50)
          {
            v55 = 0;
          }
          else
          {
            v54 = *(_QWORD *)(v32 + 8);
            if ((*(_BYTE *)(v32 + 16) & 4) != 0)
              v55 = *(unsigned __int8 *)(v54 + v48 + 1);
            else
              v55 = *(unsigned __int16 *)(v54 + 2 * v48 + 2);
          }
          v56 = (v52 << 11) ^ ((v49 + v55) << 16) ^ (v49 + v55);
          v49 = v56 + (v56 >> 11);
          *v2 = v49;
          v48 = v53 + 1;
        }
        while (v53 + 1 < v47);
      }
      if ((v46 & 1) != 0)
      {
        if (*(_DWORD *)(v32 + 4) <= v47)
        {
          v58 = 0;
        }
        else
        {
          v57 = *(_QWORD *)(v32 + 8);
          if ((*(_BYTE *)(v32 + 16) & 4) != 0)
            v58 = *(unsigned __int8 *)(v57 + v47);
          else
            v58 = *(unsigned __int16 *)(v57 + 2 * v47);
        }
        *v2 = ((*v2 + v58) ^ ((*v2 + v58) << 16)) + (((*v2 + v58) ^ ((*v2 + v58) << 16)) >> 11);
      }
    }
    v59 = *((unsigned __int8 *)a2 + 36);
    v60 = (*v2 + v59) ^ ((*v2 + v59) << 16);
    v61 = v60 + (v60 >> 11);
    *v2 = v61;
    if (v59)
    {
      v62 = *((unsigned __int8 *)a2 + 34);
      v61 = ((v61 + v62) ^ ((v61 + v62) << 16)) + (((v61 + v62) ^ ((v61 + v62) << 16)) >> 11);
      *v2 = v61;
      if (v62)
      {
        v61 = ((v61 + *((unsigned __int16 *)a2 + 16)) ^ ((v61 + *((unsigned __int16 *)a2 + 16)) << 16))
            + (((v61 + *((unsigned __int16 *)a2 + 16)) ^ ((v61 + *((unsigned __int16 *)a2 + 16)) << 16)) >> 11);
        *v2 = v61;
      }
    }
    v63 = *((unsigned int *)a2 + 18);
    if ((_DWORD)v63 == -1)
      v63 = -1;
    v64 = (v63 >> 5) & 0x7FFF800 ^ ((v61 + (unsigned __int16)v63) << 16) ^ (v61 + (unsigned __int16)v63);
    v65 = (v63 >> 37) & 0x7FFF800 ^ ((v64 + WORD2(v63) + (v64 >> 11)) << 16) ^ (v64 + WORD2(v63) + (v64 >> 11));
    *v2 = v65 + (v65 >> 11);
    v70 = v2;
    v66 = *((unsigned int *)a2 + 18);
    if ((_DWORD)v66 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_93:
    v18 = 0;
  }
  v67 = a2 + 11;
  v68 = a2 + 10;
  v71 = &v70;
  ((void (*)(unsigned int ***, uint64_t *))off_1E33951E8[v66])(&v71, a2 + 5);
  return WTF::addArgs<WTF::String,WTF::String>(v2, v68, v67);
}

unsigned int ***_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSC_23RegexSubstitutionActionENSC_18URLTransformActionENSC_9URLActionEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_EEEEEEDcSP_DpT0_(unsigned int ***result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  v2 = *a2;
  if (*a2)
  {
    v3 = **result;
    v4 = *(_DWORD *)(v2 + 4);
    v5 = v4 & 0xFFFFFFFE;
    if ((v4 & 0xFFFFFFFE) != 0)
    {
      v6 = 0;
      v7 = *v3;
      do
      {
        v8 = *(unsigned int *)(v2 + 4);
        if (v6 >= v8)
        {
          v10 = 0;
        }
        else
        {
          v9 = *(_QWORD *)(v2 + 8);
          if ((*(_BYTE *)(v2 + 16) & 4) != 0)
            v10 = *(unsigned __int8 *)(v9 + v6);
          else
            v10 = *(unsigned __int16 *)(v9 + 2 * v6);
        }
        v11 = v6 + 1;
        if (v6 + 1 >= v8)
        {
          v13 = 0;
        }
        else
        {
          v12 = *(_QWORD *)(v2 + 8);
          if ((*(_BYTE *)(v2 + 16) & 4) != 0)
            v13 = *(unsigned __int8 *)(v12 + v6 + 1);
          else
            v13 = *(unsigned __int16 *)(v12 + 2 * v6 + 2);
        }
        v14 = (v10 << 11) ^ ((v7 + v13) << 16) ^ (v7 + v13);
        v7 = v14 + (v14 >> 11);
        *v3 = v7;
        v6 = v11 + 1;
      }
      while (v11 + 1 < v5);
    }
    if ((v4 & 1) != 0)
    {
      if (*(_DWORD *)(v2 + 4) <= v5)
      {
        v16 = 0;
      }
      else
      {
        v15 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
          v16 = *(unsigned __int8 *)(v15 + v5);
        else
          v16 = *(unsigned __int16 *)(v15 + 2 * v5);
      }
      *v3 = ((*v3 + v16) ^ ((*v3 + v16) << 16)) + (((*v3 + v16) ^ ((*v3 + v16) << 16)) >> 11);
    }
  }
  return result;
}

unsigned int *WTF::addArgs<WTF::String,WTF::String>(unsigned int *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  v3 = *a2;
  if (*a2)
  {
    v4 = *(_DWORD *)(v3 + 4);
    v5 = v4 & 0xFFFFFFFE;
    if ((v4 & 0xFFFFFFFE) != 0)
    {
      v6 = 0;
      v7 = *a1;
      do
      {
        v8 = *(unsigned int *)(v3 + 4);
        if (v6 >= v8)
        {
          v10 = 0;
        }
        else
        {
          v9 = *(_QWORD *)(v3 + 8);
          if ((*(_BYTE *)(v3 + 16) & 4) != 0)
            v10 = *(unsigned __int8 *)(v9 + v6);
          else
            v10 = *(unsigned __int16 *)(v9 + 2 * v6);
        }
        v11 = v6 + 1;
        if (v6 + 1 >= v8)
        {
          v13 = 0;
        }
        else
        {
          v12 = *(_QWORD *)(v3 + 8);
          if ((*(_BYTE *)(v3 + 16) & 4) != 0)
            v13 = *(unsigned __int8 *)(v12 + v6 + 1);
          else
            v13 = *(unsigned __int16 *)(v12 + 2 * v6 + 2);
        }
        v14 = (v10 << 11) ^ ((v7 + v13) << 16) ^ (v7 + v13);
        v7 = v14 + (v14 >> 11);
        *a1 = v7;
        v6 = v11 + 1;
      }
      while (v11 + 1 < v5);
    }
    if ((v4 & 1) != 0)
    {
      if (*(_DWORD *)(v3 + 4) <= v5)
      {
        v16 = 0;
      }
      else
      {
        v15 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v3 + 16) & 4) != 0)
          v16 = *(unsigned __int8 *)(v15 + v5);
        else
          v16 = *(unsigned __int16 *)(v15 + 2 * v5);
      }
      *a1 = ((*a1 + v16) ^ ((*a1 + v16) << 16)) + (((*a1 + v16) ^ ((*a1 + v16) << 16)) >> 11);
    }
  }
  return WTF::addArgs<WTF::String>(a1, a3);
}

unsigned int ***_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJNS8_6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSA_SF_EEEEEEDcSO_DpT0_(unsigned int ***result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  v2 = *a2;
  if (*a2)
  {
    v3 = **result;
    v4 = *(_DWORD *)(v2 + 4);
    v5 = v4 & 0xFFFFFFFE;
    if ((v4 & 0xFFFFFFFE) != 0)
    {
      v6 = 0;
      v7 = *v3;
      do
      {
        v8 = *(unsigned int *)(v2 + 4);
        if (v6 >= v8)
        {
          v10 = 0;
        }
        else
        {
          v9 = *(_QWORD *)(v2 + 8);
          if ((*(_BYTE *)(v2 + 16) & 4) != 0)
            v10 = *(unsigned __int8 *)(v9 + v6);
          else
            v10 = *(unsigned __int16 *)(v9 + 2 * v6);
        }
        v11 = v6 + 1;
        if (v6 + 1 >= v8)
        {
          v13 = 0;
        }
        else
        {
          v12 = *(_QWORD *)(v2 + 8);
          if ((*(_BYTE *)(v2 + 16) & 4) != 0)
            v13 = *(unsigned __int8 *)(v12 + v6 + 1);
          else
            v13 = *(unsigned __int16 *)(v12 + 2 * v6 + 2);
        }
        v14 = (v10 << 11) ^ ((v7 + v13) << 16) ^ (v7 + v13);
        v7 = v14 + (v14 >> 11);
        *v3 = v7;
        v6 = v11 + 1;
      }
      while (v11 + 1 < v5);
    }
    if ((v4 & 1) != 0)
    {
      if (*(_DWORD *)(v2 + 4) <= v5)
      {
        v16 = 0;
      }
      else
      {
        v15 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
          v16 = *(unsigned __int8 *)(v15 + v5);
        else
          v16 = *(unsigned __int16 *)(v15 + 2 * v5);
      }
      *v3 = ((*v3 + v16) ^ ((*v3 + v16) << 16)) + (((*v3 + v16) ^ ((*v3 + v16) << 16)) >> 11);
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJNS8_6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSA_SF_EEEEEEDcSO_DpT0_(unsigned int ***a1, uint64_t **a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;

  v3 = **a1;
  v4 = *((_DWORD *)a2 + 3);
  if (v4)
  {
    v5 = *a2;
    v6 = (uint64_t)&(*a2)[3 * v4];
    do
    {
      v7 = *v5;
      v8 = *((unsigned __int8 *)v5 + 8);
      if (*v5)
      {
        v9 = *(_DWORD *)(v7 + 4);
        v10 = v9 & 0xFFFFFFFE;
        if ((v9 & 0xFFFFFFFE) != 0)
        {
          v11 = 0;
          v12 = *v3;
          do
          {
            v13 = *(unsigned int *)(v7 + 4);
            if (v11 >= v13)
            {
              v15 = 0;
            }
            else
            {
              v14 = *(_QWORD *)(v7 + 8);
              if ((*(_BYTE *)(v7 + 16) & 4) != 0)
                v15 = *(unsigned __int8 *)(v14 + v11);
              else
                v15 = *(unsigned __int16 *)(v14 + 2 * v11);
            }
            v16 = v11 + 1;
            if (v11 + 1 >= v13)
            {
              v18 = 0;
            }
            else
            {
              v17 = *(_QWORD *)(v7 + 8);
              if ((*(_BYTE *)(v7 + 16) & 4) != 0)
                v18 = *(unsigned __int8 *)(v17 + v11 + 1);
              else
                v18 = *(unsigned __int16 *)(v17 + 2 * v11 + 2);
            }
            v19 = (v15 << 11) ^ ((v12 + v18) << 16) ^ (v12 + v18);
            v12 = v19 + (v19 >> 11);
            *v3 = v12;
            v11 = v16 + 1;
          }
          while (v16 + 1 < v10);
        }
        if ((v9 & 1) != 0)
        {
          if (*(_DWORD *)(v7 + 4) <= v10)
          {
            v21 = 0;
          }
          else
          {
            v20 = *(_QWORD *)(v7 + 8);
            if ((*(_BYTE *)(v7 + 16) & 4) != 0)
              v21 = *(unsigned __int8 *)(v20 + v10);
            else
              v21 = *(unsigned __int16 *)(v20 + 2 * v10);
          }
          *v3 = ((*v3 + v21) ^ ((*v3 + v21) << 16)) + (((*v3 + v21) ^ ((*v3 + v21) << 16)) >> 11);
        }
      }
      *v3 = ((*v3 + v8) ^ ((*v3 + v8) << 16)) + (((*v3 + v8) ^ ((*v3 + v8) << 16)) >> 11);
      WTF::addArgs<WTF::String>(v3, v5 + 2);
      v5 += 3;
    }
    while (v5 != (uint64_t *)v6);
  }
  return WTF::add<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, (uint64_t)(a2 + 2));
}

unsigned int *WTF::addArgs<WTF::String>(unsigned int *result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_DWORD *)(v2 + 4);
    v4 = v3 & 0xFFFFFFFE;
    if ((v3 & 0xFFFFFFFE) != 0)
    {
      v5 = 0;
      v6 = *result;
      do
      {
        v7 = *(unsigned int *)(v2 + 4);
        if (v5 >= v7)
        {
          v9 = 0;
        }
        else
        {
          v8 = *(_QWORD *)(v2 + 8);
          if ((*(_BYTE *)(v2 + 16) & 4) != 0)
            v9 = *(unsigned __int8 *)(v8 + v5);
          else
            v9 = *(unsigned __int16 *)(v8 + 2 * v5);
        }
        v10 = v5 + 1;
        if (v5 + 1 >= v7)
        {
          v12 = 0;
        }
        else
        {
          v11 = *(_QWORD *)(v2 + 8);
          if ((*(_BYTE *)(v2 + 16) & 4) != 0)
            v12 = *(unsigned __int8 *)(v11 + v5 + 1);
          else
            v12 = *(unsigned __int16 *)(v11 + 2 * v5 + 2);
        }
        v13 = (v9 << 11) ^ ((v6 + v12) << 16) ^ (v6 + v12);
        v6 = v13 + (v13 >> 11);
        *result = v6;
        v5 = v10 + 1;
      }
      while (v10 + 1 < v4);
    }
    if ((v3 & 1) != 0)
    {
      if (*(_DWORD *)(v2 + 4) <= v4)
      {
        v15 = 0;
      }
      else
      {
        v14 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
          v15 = *(unsigned __int8 *)(v14 + v4);
        else
          v15 = *(unsigned __int16 *)(v14 + 2 * v4);
      }
      *result = ((*result + v15) ^ ((*result + v15) << 16)) + (((*result + v15) ^ ((*result + v15) << 16)) >> 11);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RegexSubstitutionAction,WebCore::ContentExtensions::URLTransformAction,WebCore::ContentExtensions::URLAction> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RegexSubstitutionAction,WebCore::ContentExtensions::URLTransformAction,WebCore::ContentExtensions::URLAction> const>(uint64_t a1, WTF **a2, const WTF::StringImpl **a3)
{
  return WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RegexSubstitutionAction,WebCore::ContentExtensions::URLTransformAction,WebCore::ContentExtensions::URLAction> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RegexSubstitutionAction,WebCore::ContentExtensions::URLTransformAction,WebCore::ContentExtensions::URLAction> const>(uint64_t a1, WTF **a2, const WTF::StringImpl **a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;

  result = WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3);
  if ((_DWORD)result)
    return WTF::equal(a2[1], a3[1], v6);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RegexSubstitutionAction,WebCore::ContentExtensions::URLTransformAction,WebCore::ContentExtensions::URLAction> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RegexSubstitutionAction,WebCore::ContentExtensions::URLTransformAction,WebCore::ContentExtensions::URLAction> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  char v10;
  uint64_t v11;
  int v12;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  const WTF::StringImpl *v17;
  char v18;
  char *v19;

  result = WTF::equal(*(WTF **)a2, *(const WTF::StringImpl **)a3, (const WTF::StringImpl *)a3);
  if ((_DWORD)result)
  {
    result = WTF::equal(*(WTF **)(a2 + 8), *(const WTF::StringImpl **)(a3 + 8), v6);
    if ((_DWORD)result)
    {
      result = WTF::equal(*(WTF **)(a2 + 16), *(const WTF::StringImpl **)(a3 + 16), v7);
      if ((_DWORD)result)
      {
        result = WTF::equal(*(WTF **)(a2 + 24), *(const WTF::StringImpl **)(a3 + 24), v8);
        if ((_DWORD)result)
        {
          v10 = (*(_BYTE *)(a2 + 36) != 0) ^ (*(_BYTE *)(a3 + 36) != 0);
          if (*(_BYTE *)(a2 + 36)
            && *(_BYTE *)(a3 + 36)
            && (v10 = (*(_BYTE *)(a2 + 34) != 0) ^ (*(_BYTE *)(a3 + 34) != 0), *(_BYTE *)(a2 + 34))
            && *(_BYTE *)(a3 + 34))
          {
            if (*(unsigned __int16 *)(a2 + 32) != *(unsigned __int16 *)(a3 + 32))
              return 0;
          }
          else if ((v10 & 1) != 0)
          {
            return 0;
          }
          v11 = *(unsigned int *)(a2 + 72);
          v12 = *(_DWORD *)(a3 + 72);
          v14 = v12 == (_DWORD)v11 && v12 != -1;
          if ((_DWORD)v11 == -1 || !v14)
          {
            v15 = v12 == -1;
            if ((_DWORD)v11 == -1)
              v16 = v15;
            else
              v16 = v14;
            if (!v16)
              return 0;
          }
          else
          {
            v19 = &v18;
            if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3395218[v11])(&v19, a2 + 40, a3 + 40) & 1) == 0)
              return 0;
          }
          result = WTF::equal(*(WTF **)(a2 + 80), *(const WTF::StringImpl **)(a3 + 80), v9);
          if ((_DWORD)result)
            return WTF::equal(*(WTF **)(a2 + 88), *(const WTF::StringImpl **)(a3 + 88), v17);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RegexSubstitutionAction,WebCore::ContentExtensions::URLTransformAction,WebCore::ContentExtensions::URLAction> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::RedirectAction::ExtensionPathAction,WebCore::ContentExtensions::RegexSubstitutionAction,WebCore::ContentExtensions::URLTransformAction,WebCore::ContentExtensions::URLAction> const>(uint64_t a1, WTF **a2, const WTF::StringImpl **a3)
{
  return WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform> const>(uint64_t a1, WTF **a2, const WTF::StringImpl **a3)
{
  return WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  WTF **v6;
  const WTF::StringImpl **v7;
  uint64_t result;
  const WTF::StringImpl *v9;
  WTF **v10;
  const WTF::StringImpl **v11;
  uint64_t v12;
  unint64_t v13;
  WTF *v14;
  WTF *v15;
  const WTF::StringImpl *v16;
  char v17;
  unint64_t v18;
  WTF **v19;
  const WTF::StringImpl **v20;
  const WTF::StringImpl *v21;
  unint64_t v22;
  const WTF::StringImpl **v23;
  WTF **v24;
  char v25;

  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a3 + 12))
    return 0;
  if ((_DWORD)v3)
  {
    v6 = *(WTF ***)a2;
    v7 = *(const WTF::StringImpl ***)a3;
    result = WTF::equal(**(WTF ***)a2, **(const WTF::StringImpl ***)a3, (const WTF::StringImpl *)a3);
    if (!(_DWORD)result)
      return result;
    if (*((unsigned __int8 *)v6 + 8) != *((unsigned __int8 *)v7 + 8))
      return 0;
    result = WTF::equal(v6[2], v7[2], v9);
    if (!(_DWORD)result)
      return result;
    v10 = v6 + 5;
    v11 = v7 + 5;
    v12 = 1;
    do
    {
      v13 = v12;
      if (v3 == v12)
        break;
      if (!WTF::equal(*(v10 - 2), *(v11 - 2), (const WTF::StringImpl *)a3))
        break;
      if (*((unsigned __int8 *)v10 - 8) != *((unsigned __int8 *)v11 - 8))
        break;
      v15 = *v10;
      v10 += 3;
      v14 = v15;
      v16 = *v11;
      v11 += 3;
      v17 = WTF::equal(v14, v16, (const WTF::StringImpl *)a3);
      v12 = v13 + 1;
    }
    while ((v17 & 1) != 0);
    if (v13 < v3)
      return 0;
  }
  v18 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v18 != *(_DWORD *)(a3 + 28))
    return 0;
  if (!(_DWORD)v18)
    return 1;
  v19 = *(WTF ***)(a2 + 16);
  v20 = *(const WTF::StringImpl ***)(a3 + 16);
  result = WTF::equal(*v19, *v20, (const WTF::StringImpl *)a3);
  if ((_DWORD)result)
  {
    v22 = 0;
    v23 = v20 + 1;
    v24 = v19 + 1;
    while (v18 - 1 != v22)
    {
      v25 = WTF::equal(v24[v22], v23[v22], v21);
      ++v22;
      if ((v25 & 1) == 0)
        return v22 >= v18;
    }
    v22 = v18;
    return v22 >= v18;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 96);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 96) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 96);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v5])(&v12, v4);
LABEL_10:
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    v11 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(v4 + 8) = v11;
    *(_DWORD *)(v4 + 96) = 1;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = *a2;
  *a2 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = a3[1];
  a3[1] = 0;
  result = a2[1];
  a2[1] = v9;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(WTF::StringImpl *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  char v33;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 96);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      v7 = *a3;
      *a3 = 0;
      v8 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v7;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = a3[1];
      a3[1] = 0;
      v10 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v9;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = a3[2];
      a3[2] = 0;
      v12 = *(WTF::StringImpl **)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = a3[3];
      a3[3] = 0;
      v14 = *(WTF::StringImpl **)(a2 + 24);
      *(_QWORD *)(a2 + 24) = v13;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = *((_DWORD *)a3 + 8);
      *(_BYTE *)(a2 + 36) = *((_BYTE *)a3 + 36);
      *(_DWORD *)(a2 + 32) = v15;
      v16 = (WTF::StringImpl *)(a2 + 40);
      v17 = *(unsigned int *)(a2 + 72);
      v18 = *((unsigned int *)a3 + 18);
      if ((_DWORD)v17 == -1)
      {
        if ((_DWORD)v18 == -1)
          goto LABEL_24;
      }
      else if ((_DWORD)v18 == -1)
      {
        ((void (*)(char *, WTF::StringImpl *))*(&off_1E33950C0 + v17))(&v33, v16);
        *(_DWORD *)(a2 + 72) = -1;
LABEL_24:
        v27 = a3[10];
        a3[10] = 0;
        v28 = *(WTF::StringImpl **)(a2 + 80);
        *(_QWORD *)(a2 + 80) = v27;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v16);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = a3[11];
        a3[11] = 0;
        result = *(WTF::StringImpl **)(a2 + 88);
        *(_QWORD *)(a2 + 88) = v29;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
          else
            *(_DWORD *)result -= 2;
        }
        return result;
      }
      v32 = a2 + 40;
      ((void (*)(uint64_t *))off_1E3395248[v18])(&v32);
      goto LABEL_24;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v5])(&v30, v4);
  }
  *(_DWORD *)(v4 + 96) = -1;
  v19 = *a3;
  *a3 = 0;
  *(_QWORD *)v4 = v19;
  v20 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(v4 + 8) = v20;
  v21 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(v4 + 16) = v21;
  v22 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(v4 + 24) = v22;
  LODWORD(v22) = *((_DWORD *)a3 + 8);
  v23 = *((_WORD *)a3 + 18);
  *(_BYTE *)(v4 + 40) = 0;
  *(_WORD *)(v4 + 36) = v23;
  *(_DWORD *)(v4 + 32) = v22;
  *(_DWORD *)(v4 + 72) = -1;
  v24 = *((unsigned int *)a3 + 18);
  if ((_DWORD)v24 != -1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *))off_1E33950D0[v24])(&v31);
    *(_DWORD *)(v4 + 72) = v24;
  }
  v25 = a3[10];
  a3[10] = 0;
  *(_QWORD *)(v4 + 80) = v25;
  v26 = a3[11];
  a3[11] = 0;
  *(_QWORD *)(v4 + 88) = v26;
  *(_DWORD *)(v4 + 96) = 2;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 96);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 96) = 3;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEEOST_EEEDcSL_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))*(&off_1E33950C0 + v5))(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 32) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEEOST_EEEDcSL_DpT0_(unsigned int *result, unsigned int *a2, WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::operator=(a2, a3);
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))*(&off_1E33950C0 + v5))(&v8, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)v4 = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(v4 + 8) = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(v4 + 12) = v6;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v7 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)(v4 + 16) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 0;
  *(_DWORD *)(v4 + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 7);
  *((_DWORD *)a3 + 7) = 0;
  *(_DWORD *)(v4 + 28) = v7;
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

unsigned int *WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::operator=(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v4 = a1[3];
  if ((_DWORD)v4)
  {
    v5 = 24 * v4;
    v6 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(v6 - 2);
      *(v6 - 2) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  a1[2] = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  a1[3] = v10;
  v11 = a1[7];
  if ((_DWORD)v11)
  {
    v15 = (WTF::StringImpl **)*((_QWORD *)a1 + 2);
    v16 = 8 * v11;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v12 = (WTF *)*((_QWORD *)a1 + 2);
  if (v12)
  {
    *((_QWORD *)a1 + 2) = 0;
    a1[6] = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a1 + 2) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  a1[6] = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  a1[7] = v13;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *a2 = v3;
  v4 = *(_DWORD **)(a3 + 8);
  if (v4)
    *v4 += 2;
  a2[1] = v4;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t result;
  _DWORD *v13;
  _DWORD *v14;
  char v15;

  v5 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v5 += 2;
  *(_QWORD *)a2 = v5;
  v6 = *(_DWORD **)(a3 + 8);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a2 + 8) = v6;
  v7 = *(_DWORD **)(a3 + 16);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a2 + 16) = v7;
  v8 = *(_DWORD **)(a3 + 24);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a2 + 24) = v8;
  v9 = *(_DWORD *)(a3 + 32);
  v10 = *(_WORD *)(a3 + 36);
  *(_BYTE *)(a2 + 40) = 0;
  *(_WORD *)(a2 + 36) = v10;
  *(_DWORD *)(a2 + 32) = v9;
  *(_DWORD *)(a2 + 72) = -1;
  v11 = *(unsigned int *)(a3 + 72);
  if ((_DWORD)v11 != -1)
  {
    result = ((uint64_t (*)(char *))*(&off_1E3395278 + v11))(&v15);
    *(_DWORD *)(a2 + 72) = v11;
  }
  v13 = *(_DWORD **)(a3 + 80);
  if (v13)
    *v13 += 2;
  *(_QWORD *)(a2 + 80) = v13;
  v14 = *(_DWORD **)(a3 + 88);
  if (v14)
    *v14 += 2;
  *(_QWORD *)(a2 + 88) = v14;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEERKSW_EEEDcSO_DpT0_(int a1, WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *this, WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *a3)
{
  return WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryTransform(this, a3);
}

WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryTransform(WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *this, const WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  _DWORD **v16;
  uint64_t v17;
  _DWORD *v18;

  v4 = *((unsigned int *)a2 + 3);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 3) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >= 0xAAAAAAB)
      goto LABEL_19;
    v5 = 24 * v4;
    v6 = WTF::fastMalloc((WTF *)(24 * v4));
    *((_DWORD *)this + 2) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)this = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = *(_QWORD *)a2;
      v9 = *(_QWORD *)a2 + 24 * v7;
      do
      {
        v10 = *(_DWORD **)v8;
        if (*(_QWORD *)v8)
          *v10 += 2;
        *(_QWORD *)v6 = v10;
        *(_BYTE *)(v6 + 8) = *(_BYTE *)(v8 + 8);
        v11 = *(_DWORD **)(v8 + 16);
        if (v11)
          *v11 += 2;
        *(_QWORD *)(v6 + 16) = v11;
        v8 += 24;
        v6 += 24;
      }
      while (v8 != v9);
    }
  }
  v12 = *((unsigned int *)a2 + 7);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 7) = v12;
  if (!(_DWORD)v12)
    return this;
  if (v12 >> 29)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x19572D5C4);
  }
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v12));
  *((_DWORD *)this + 6) = v12;
  *((_QWORD *)this + 2) = v14;
  v15 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v15)
  {
    v16 = (_DWORD **)*((_QWORD *)a2 + 2);
    v17 = 8 * v15;
    do
    {
      v18 = *v16;
      if (*v16)
        *v18 += 2;
      *v14++ = v18;
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  return this;
}

WebCore::CSSSelector::RareData *WTF::RefCounted<WebCore::CSSSelector::RareData>::deref(WebCore::CSSSelector::RareData *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::CSSSelector::RareData::~RareData(result);
    return (WebCore::CSSSelector::RareData *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::ContentExtensions::loadTrigger(WTF::JSONImpl::Object const&)::$_0::operator()(WTF::JSONImpl::ObjectBase ***a1, uint64_t a2, uint64_t a3, WTF::JSONImpl::ObjectBase **a4, char *a5)
{
  WTF::JSONImpl::ObjectBase ***v7;
  WTF::JSONImpl::ObjectBase *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  _DWORD *v15;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  WTF *v20;
  WTF::JSONImpl::ObjectBase *v21;
  WTF::JSONImpl::ObjectBase **v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::JSONImpl::ObjectBase *v27;
  int v28;
  WTF::StringImpl *v29;
  _DWORD *v30;

  v7 = a1;
  v8 = **a1;
  if (a3)
  {
    if (a3 == 1)
    {
      v9 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = v26;
    }
    v29 = v9;
  }
  else
  {
    v29 = 0;
  }
  WTF::JSONImpl::ObjectBase::getValue(v8, (const WTF::String *)&v29);
  v11 = v29;
  v29 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v30;
  if (!v30)
    goto LABEL_13;
  if ((*((_BYTE *)v7[1] + 14) & 6) != 0)
  {
    v7 = 0;
    v13 = 0;
    if ((_MergedGlobals_158 & 1) == 0)
    {
      qword_1ECE828E8 = (uint64_t)&off_1E3395448;
      _MergedGlobals_158 = 1;
    }
    LODWORD(a4) = 12;
    goto LABEL_18;
  }
  v14 = v30[1];
  if (v14 >= 6)
  {
    if (v14 != 6)
    {
      __break(0xC471u);
      JUMPOUT(0x19572D910);
    }
    ++*v30;
    ((void (*)(WTF::StringImpl **__return_ptr, _DWORD *))a4)(&v26, v12);
    if (v28)
    {
      if (v28 == 1)
      {
        v18 = 0;
        LODWORD(a4) = (_DWORD)v26;
        v7 = (WTF::JSONImpl::ObjectBase ***)HIDWORD(v26);
        goto LABEL_40;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      a4 = v7[1];
      v19 = *((unsigned int *)a4 + 7);
      if ((_DWORD)v19)
      {
        v23 = (WTF::StringImpl **)a4[2];
        v24 = 8 * v19;
        do
        {
          v25 = *v23;
          *v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v17);
            else
              *(_DWORD *)v25 -= 2;
          }
          ++v23;
          v24 -= 8;
        }
        while (v24);
      }
      v20 = a4[2];
      if (v20)
      {
        a4[2] = 0;
        *((_DWORD *)a4 + 6) = 0;
        WTF::fastFree(v20, v17);
      }
      a4[2] = v26;
      v21 = v27;
      v26 = 0;
      v27 = 0;
      a4[3] = v21;
      v22 = v7[1];
      if (*((_DWORD *)v22 + 7))
      {
        *((_DWORD *)v22 + 3) |= a5;
        v18 = 1;
        goto LABEL_40;
      }
      a5 = &_MergedGlobals_158;
      if ((_MergedGlobals_158 & 1) != 0)
      {
        v7 = 0;
        v18 = 0;
LABEL_39:
        LODWORD(a4) = 10;
LABEL_40:
        if (v28 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3395288[v28])(&v29, &v26);
        if (*v12 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          if (!v18)
            goto LABEL_44;
        }
        else
        {
          --*v12;
          if (!v18)
          {
LABEL_44:
            v13 = 0;
            goto LABEL_18;
          }
        }
LABEL_13:
        v13 = 1;
        goto LABEL_18;
      }
    }
    v7 = 0;
    v18 = 0;
    *((_QWORD *)a5 + 3) = &off_1E3395448;
    _MergedGlobals_158 = 1;
    goto LABEL_39;
  }
  v7 = 0;
  v13 = 0;
  if ((_MergedGlobals_158 & 1) == 0)
  {
    qword_1ECE828E8 = (uint64_t)&off_1E3395448;
    _MergedGlobals_158 = 1;
  }
  LODWORD(a4) = 10;
LABEL_18:
  v15 = v30;
  v30 = 0;
  if (v15)
  {
    if (*v15 == 1)
    {
      WTF::JSONImpl::Value::operator delete();
      if (!v13)
        return a4 | ((_QWORD)v7 << 32);
      goto LABEL_22;
    }
    --*v15;
  }
  if (v13)
  {
LABEL_22:
    std::system_category();
    LODWORD(a4) = 0;
  }
  return a4 | ((_QWORD)v7 << 32);
}

WTF::StringImpl *WebCore::ContentExtensions::getDomainList@<X0>(WebCore::ContentExtensions *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v17;
  unsigned int v18;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  const char *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t *v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  _QWORD v41[3];
  __int16 v42;
  const char *v43;
  uint64_t v44;
  __int16 v45;
  const char *v46;
  uint64_t v47;
  __int16 v48;
  const char *v49;
  uint64_t v50;
  __int16 v51;
  const char *v52;
  uint64_t v53;
  __int16 v54;
  const char *v55;
  uint64_t v56;
  __int16 v57;
  const char *v58;
  uint64_t v59;
  __int16 v60;
  const char *v61;
  uint64_t v62;
  __int16 v63;
  const char *v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  WTF::StringImpl **v68;
  unsigned int v69;
  unsigned int v70;
  _QWORD v71[2];
  _QWORD v72[2];
  _QWORD v73[3];

  result = (WTF::StringImpl *)WebCore::ContentExtensions::getStringList((unsigned int *)this, (uint64_t)&v68);
  v5 = v70;
  if (v70)
  {
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    if ((_DWORD)v5 != -1)
    {
      result = (WTF::StringImpl *)((uint64_t (*)(_QWORD *, uint64_t, WTF::StringImpl ***))off_1E3395298[v5])(v41, a2, &v68);
      *(_DWORD *)(a2 + 16) = v5;
    }
    goto LABEL_70;
  }
  v67 = 0;
  v6 = v69;
  if (!v69)
  {
    v36 = 0;
    v37 = 0;
LABEL_73:
    *(_QWORD *)a2 = v36;
    *(_QWORD *)(a2 + 8) = v37;
    *(_DWORD *)(a2 + 16) = 0;
    goto LABEL_70;
  }
  if (v69 >> 29)
  {
    __break(0xC471u);
LABEL_86:
    JUMPOUT(0x19572DE20);
  }
  v7 = WTF::fastMalloc((WTF *)(8 * v69));
  v9 = v68;
  v10 = &v68[v6];
  LODWORD(v67) = v6;
  v66 = (WTF *)v7;
  while (1)
  {
    result = *v9;
    if (!*v9)
      goto LABEL_34;
    v11 = *((_DWORD *)result + 1);
    if (v11)
      break;
LABEL_29:
    if (WTF::StringImpl::startsWith())
    {
      if (*v9)
      {
        v20 = 1;
        WTF::StringImpl::substring(*v9);
        v22 = *v9;
        *v9 = (WTF::StringImpl *)v41[0];
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v21);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      else
      {
        *v9 = 0;
        v20 = 1;
      }
      goto LABEL_35;
    }
LABEL_34:
    v20 = 0;
LABEL_35:
    v23 = 0;
    LOWORD(v41[0]) = 92;
    v41[1] = "\\\\";
    v41[2] = 3;
    v42 = 123;
    v43 = "\\{";
    v44 = 3;
    v45 = 125;
    v46 = "\\}";
    v47 = 3;
    v48 = 91;
    v49 = "\\[";
    v50 = 3;
    v51 = 91;
    v52 = "\\[";
    v53 = 3;
    v54 = 46;
    v55 = "\\.";
    v56 = 3;
    v57 = 63;
    v58 = "\\?";
    v59 = 3;
    v60 = 42;
    v61 = "\\*";
    v62 = 3;
    v63 = 36;
    v64 = "\\$";
    v65 = 3;
    do
    {
      if (*v9)
      {
        WTF::StringImpl::replace();
        v25 = *v9;
        *v9 = (WTF::StringImpl *)v73[0];
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v24);
          else
            *(_DWORD *)v25 -= 2;
        }
      }
      else
      {
        *v9 = 0;
      }
      v23 += 24;
    }
    while (v23 != 216);
    v26 = 11;
    if (!v20)
      v26 = 1;
    v27 = "";
    if (v20)
      v27 = "([^/]*\\.)*";
    v28 = *v9;
    if (*v9)
      *(_DWORD *)v28 += 2;
    v39 = v28;
    v73[0] = "[a-z][a-z+.-]*:\\/\\/";
    v73[1] = 20;
    v72[0] = v27;
    v72[1] = v26;
    v71[0] = "[:/]";
    v71[1] = 5;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)v73, (uint64_t)v72, (uint64_t *)&v39, (uint64_t)v71, &v40);
    v29 = v40;
    if (!v40)
    {
      __break(0xC471u);
      goto LABEL_86;
    }
    LODWORD(v30) = HIDWORD(v67);
    if (HIDWORD(v67) == (_DWORD)v67)
    {
      v32 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v66, HIDWORD(v67) + 1, (unint64_t)&v40);
      v30 = HIDWORD(v67);
      v33 = v66;
      v34 = *v32;
      *v32 = 0;
      *((_QWORD *)v33 + v30) = v34;
    }
    else
    {
      v40 = 0;
      *((_QWORD *)v66 + HIDWORD(v67)) = v29;
    }
    HIDWORD(v67) = v30 + 1;
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v8);
      else
        *(_DWORD *)v31 -= 2;
    }
    result = v39;
    v39 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
    if (++v9 == v10)
    {
      v36 = v66;
      v37 = v67;
      goto LABEL_73;
    }
  }
  v12 = (unsigned __int8 *)*((_QWORD *)result + 1);
  if ((*((_BYTE *)result + 16) & 4) != 0)
  {
    if ((char)*v12 < 0 || *v12 - 65 < 0x1A)
      goto LABEL_66;
    v13 = 1;
    while (v11 != v13)
    {
      v14 = (char)v12[v13];
      if ((v14 & 0x80000000) == 0)
      {
        ++v13;
        if (v14 - 65 > 0x19)
          continue;
      }
      goto LABEL_66;
    }
    goto LABEL_29;
  }
  v15 = *(unsigned __int16 *)v12;
  if (v15 <= 0x7F && v15 - 65 >= 0x1A)
  {
    v17 = 1;
    while (v11 != v17)
    {
      v18 = *(unsigned __int16 *)&v12[2 * v17++];
      if (v18 > 0x7F || v18 - 65 < 0x1A)
        goto LABEL_66;
    }
    goto LABEL_29;
  }
LABEL_66:
  if ((_MergedGlobals_158 & 1) == 0)
  {
    qword_1ECE828E8 = (uint64_t)&off_1E3395448;
    _MergedGlobals_158 = 1;
  }
  *(_QWORD *)a2 = 11;
  *(_QWORD *)(a2 + 8) = &qword_1ECE828E8;
  *(_DWORD *)(a2 + 16) = 1;
  v35 = v66;
  if (HIDWORD(v67))
  {
    v38 = 8 * HIDWORD(v67);
    do
    {
      result = *(WTF::StringImpl **)v35;
      *(_QWORD *)v35 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      v35 = (WTF *)((char *)v35 + 8);
      v38 -= 8;
    }
    while (v38);
    v35 = v66;
    if (v66)
      goto LABEL_82;
  }
  else
  {
    if (!v66)
      goto LABEL_70;
LABEL_82:
    v66 = 0;
    LODWORD(v67) = 0;
    result = (WTF::StringImpl *)WTF::fastFree(v35, v8);
  }
LABEL_70:
  if (v70 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(_QWORD *, WTF::StringImpl ***))off_1E3395288[v70])(v41, &v68);
  return result;
}

unsigned int *WebCore::ContentExtensions::getStringList@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::JSONImpl::Value **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  WTF *v15;
  _DWORD *v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  uint64_t v23;

  v23 = 0;
  v4 = this[7];
  if (!(_DWORD)v4)
  {
    this = 0;
    v19 = 0;
    goto LABEL_27;
  }
  if (v4 >> 29)
  {
    __break(0xC471u);
    return this;
  }
  v5 = this;
  this = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v4));
  LODWORD(v23) = v4;
  v22 = (WTF *)this;
  v6 = v5[7];
  if (!(_DWORD)v6)
  {
    v19 = v4;
LABEL_27:
    *(_QWORD *)a2 = this;
    *(_QWORD *)(a2 + 8) = v19;
    *(_DWORD *)(a2 + 16) = 0;
    return this;
  }
  v7 = 8 * v6;
  v8 = (WTF::JSONImpl::Value **)*((_QWORD *)v5 + 2);
  while (1)
  {
    WTF::JSONImpl::Value::asString(*v8);
    v10 = v21;
    if (v21 && *((_DWORD *)v21 + 1))
    {
      v12 = HIDWORD(v23);
      if (HIDWORD(v23) == (_DWORD)v23)
      {
        v13 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, HIDWORD(v23) + 1, (unint64_t)&v21);
        v14 = HIDWORD(v23);
        v15 = v22;
        v16 = *v13;
        if (*v13)
          *v16 += 2;
        v11 = 0;
        *((_QWORD *)v15 + v14) = v16;
        HIDWORD(v23) = v14 + 1;
      }
      else
      {
        v11 = 0;
        v17 = v22;
        *(_DWORD *)v21 += 2;
        *((_QWORD *)v17 + v12) = v10;
        HIDWORD(v23) = v12 + 1;
      }
    }
    else
    {
      if ((_MergedGlobals_158 & 1) == 0)
      {
        qword_1ECE828E8 = (uint64_t)&off_1E3395448;
        _MergedGlobals_158 = 1;
      }
      *(_QWORD *)a2 = 10;
      *(_QWORD *)(a2 + 8) = &qword_1ECE828E8;
      v11 = 1;
      *(_DWORD *)(a2 + 16) = 1;
    }
    this = (unsigned int *)v21;
    v21 = 0;
    if (this)
      break;
LABEL_12:
    if ((v11 & 1) != 0)
      goto LABEL_24;
LABEL_13:
    ++v8;
    v7 -= 8;
    if (!v7)
    {
      this = (unsigned int *)v22;
      v19 = v23;
      goto LABEL_27;
    }
  }
  if (*this != 2)
  {
    *this -= 2;
    goto LABEL_12;
  }
  this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
  if ((v11 & 1) == 0)
    goto LABEL_13;
LABEL_24:
  v18 = v22;
  if (HIDWORD(v23))
  {
    v20 = 8 * HIDWORD(v23);
    do
    {
      this = *(unsigned int **)v18;
      *(_QWORD *)v18 = 0;
      if (this)
      {
        if (*this == 2)
          this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
        else
          *this -= 2;
      }
      v18 = (WTF *)((char *)v18 + 8);
      v20 -= 8;
    }
    while (v20);
    v18 = v22;
    if (v22)
    {
LABEL_26:
      v22 = 0;
      LODWORD(v23) = 0;
      return (unsigned int *)WTF::fastFree(v18, v9);
    }
  }
  else if (v22)
  {
    goto LABEL_26;
  }
  return this;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS_10error_codeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS_10error_codeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a2 + 16) = v3;
  LODWORD(v3) = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a2 + 24) = v4;
  LODWORD(v4) = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a2 + 32) = v4;
  result = *(double *)(a3 + 36);
  *(_DWORD *)(a3 + 36) = 0;
  *(double *)(a2 + 36) = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)(a2 + 8) = 0;
  v4 = a2 + 8;
  *(_DWORD *)(a2 + 104) = -1;
  v5 = *(unsigned int *)(a3 + 104);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v5])(&v7, v4, a3 + 8);
    *(_DWORD *)(a2 + 104) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectActionENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 104) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersActionENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v3 = *(unsigned int *)(a2 + 36);
  v4 = *(unsigned int **)(a2 + 24);
  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    do
    {
      v6 = v4[4];
      if ((_DWORD)v6 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))off_1E3394F08[v6])(&v12, v4);
      v4[4] = -1;
      v4 += 6;
      v5 -= 24;
    }
    while (v5);
    v4 = *(unsigned int **)(a2 + 24);
  }
  if (v4)
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    result = WTF::fastFree((WTF *)v4, (void *)a2);
  }
  v8 = *(unsigned int *)(a2 + 20);
  v9 = *(unsigned int **)(a2 + 8);
  if ((_DWORD)v8)
  {
    v10 = 24 * v8;
    do
    {
      v11 = v9[4];
      if ((_DWORD)v11 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))off_1E3394F08[v11])(&v13, v9);
      v9[4] = -1;
      v9 += 6;
      v10 -= 24;
    }
    while (v10);
    v9 = *(unsigned int **)(a2 + 8);
  }
  if (v9)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return WTF::fastFree((WTF *)v9, (void *)a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions20ContentExtensionRuleENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF::StringImpl *result;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;

  v3 = *(unsigned int *)(a2 + 144);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E3394EA8[v3])(&v10, a2 + 32);
  *(_DWORD *)(a2 + 144) = -1;
  v4 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v4)
  {
    v7 = *(WTF::StringImpl ***)(a2 + 16);
    v8 = 8 * v4;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v5 = *(WTF **)(a2 + 16);
  if (v5)
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    WTF::fastFree(v5, (void *)a2);
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions6ActionENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 112);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3394EA8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 112) = -1;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions7TriggerENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *result;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v3)
  {
    v6 = *(WTF::StringImpl ***)(a2 + 16);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)(a2 + 16);
  if (v4)
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    WTF::fastFree(v4, (void *)a2);
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

char *WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 152 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x1AF286C)
      {
        __break(0xC471u);
        JUMPOUT(0x19572E6E0);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 152 * *(unsigned int *)(a1 + 12));
      v18 = 152 * v16;
      v19 = WTF::fastMalloc((WTF *)(152 * v16));
      *(_DWORD *)(a1 + 8) = v18 / 0x98;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::ContentExtensions::ContentExtensionRule>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x1AF286C)
      {
        __break(0xC471u);
        JUMPOUT(0x19572E6E8);
      }
      v10 = 152 * v9;
      v11 = WTF::fastMalloc((WTF *)(152 * v9));
      *(_DWORD *)(a1 + 8) = v10 / 0x98;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::ContentExtensions::ContentExtensionRule>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ContentExtensions::ContentExtensionRule>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  if (result != a2)
  {
    v21 = v3;
    v22 = v4;
    v7 = result;
    do
    {
      v8 = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)a3 = v8;
      v9 = *((_QWORD *)v7 + 1);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = v9;
      v10 = *((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v10;
      LODWORD(v10) = *((_DWORD *)v7 + 6);
      *((_DWORD *)v7 + 6) = 0;
      *(_DWORD *)(a3 + 24) = v10;
      LODWORD(v10) = *((_DWORD *)v7 + 7);
      *((_DWORD *)v7 + 7) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      v11 = (WTF::StringImpl *)(a3 + 32);
      *(_DWORD *)(a3 + 28) = v10;
      *(_DWORD *)(a3 + 144) = -1;
      v12 = *((unsigned int *)v7 + 36);
      if ((_DWORD)v12 != -1)
      {
        ((void (*)(char *))off_1E33952A8[v12])(&v19);
        *(_DWORD *)(a3 + 144) = v12;
        v13 = *((unsigned int *)v7 + 36);
        if ((_DWORD)v13 != -1)
          ((void (*)(char *, char *))off_1E3394EA8[v13])(&v20, (char *)v7 + 32);
      }
      *((_DWORD *)v7 + 36) = -1;
      v14 = *((unsigned int *)v7 + 7);
      if ((_DWORD)v14)
      {
        v16 = (WTF::StringImpl **)*((_QWORD *)v7 + 2);
        v17 = 8 * v14;
        do
        {
          v18 = *v16;
          *v16 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v11);
            else
              *(_DWORD *)v18 -= 2;
          }
          ++v16;
          v17 -= 8;
        }
        while (v17);
      }
      v15 = (WTF *)*((_QWORD *)v7 + 2);
      if (v15)
      {
        *((_QWORD *)v7 + 2) = 0;
        *((_DWORD *)v7 + 6) = 0;
        WTF::fastFree(v15, v11);
      }
      result = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 152;
      v7 = (WTF::StringImpl *)((char *)v7 + 152);
    }
    while (v7 != a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ContentExtensions::ContentExtensionRule>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v13 = v2;
    v14 = v3;
    v5 = result;
    do
    {
      v6 = *((unsigned int *)v5 + 36);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, char *))off_1E3394EA8[v6])(&v12, (char *)v5 + 32);
      *((_DWORD *)v5 + 36) = -1;
      v7 = *((unsigned int *)v5 + 7);
      if ((_DWORD)v7)
      {
        v9 = (WTF::StringImpl **)*((_QWORD *)v5 + 2);
        v10 = 8 * v7;
        do
        {
          v11 = *v9;
          *v9 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      v8 = (WTF *)*((_QWORD *)v5 + 2);
      if (v8)
      {
        *((_QWORD *)v5 + 2) = 0;
        *((_DWORD *)v5 + 6) = 0;
        WTF::fastFree(v8, a2);
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 152);
    }
    while (v5 != a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore17ContentExtensions20ContentExtensionRuleELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  WTF *result;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ContentExtensions::ContentExtensionRule>::destruct(*(WTF::StringImpl **)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 152 * v3));
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

uint64_t WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::~ImmutableNFANodeBuilder(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;

  if (!*(_BYTE *)(a1 + 44))
    WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::finalize((char *)a1);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *(unsigned int *)(a1 + 20);
  v6 = *(WTF **)(a1 + 8);
  if ((_DWORD)v5)
  {
    v7 = 16 * v5;
    do
    {
      if (*(_QWORD *)v6)
        WTF::fastFree((WTF *)(*(_QWORD *)v6 - 16), a2);
      v6 = (WTF *)((char *)v6 + 16);
      v7 -= 16;
    }
    while (v7);
    v6 = *(WTF **)(a1 + 8);
  }
  if (v6)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

char *WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::finalize(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  char **v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  uint64_t *v29;
  char **v30;
  uint64_t v31;
  int *v32;
  _DWORD *v33;
  int v35;

  a1[44] = 1;
  v2 = *((_QWORD *)a1 + 4);
  if (!v2)
  {
    v5 = 0;
    v3 = 0;
LABEL_10:
    v4 = (char *)(v2 + 8 * v3);
    goto LABEL_11;
  }
  v3 = *(unsigned int *)(v2 - 4);
  v4 = (char *)(v2 + 8 * v3);
  if (!*(_DWORD *)(v2 - 12))
  {
    v5 = (char *)(v2 + 8 * v3);
    goto LABEL_10;
  }
  v5 = (char *)*((_QWORD *)a1 + 4);
  if ((_DWORD)v3)
  {
    v6 = 8 * v3;
    v5 = (char *)*((_QWORD *)a1 + 4);
    while (*(_QWORD *)v5 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v5 += 8;
      v6 -= 8;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  v7 = *(uint64_t **)a1;
  v8 = *((_DWORD *)a1 + 10);
  if (v2)
    v9 = (char *)(v2 + 8 * *(unsigned int *)(v2 - 4));
  else
    v9 = 0;
  v10 = *v7;
  v11 = *((_DWORD *)v7 + 19);
  if (v9 == v5)
  {
    v18 = *((_DWORD *)v7 + 19);
  }
  else
  {
    do
    {
      v12 = *(uint64_t **)a1;
      v13 = (char **)(*(_QWORD *)a1 + 64);
      v14 = *(unsigned int *)(*(_QWORD *)a1 + 76);
      if ((_DWORD)v14 == *(_DWORD *)(*(_QWORD *)a1 + 72))
      {
        v15 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)v5);
        v14 = *((unsigned int *)v12 + 19);
        v16 = (char *)(v12[8] + 8 * v14);
      }
      else
      {
        v16 = &(*v13)[8 * v14];
        v15 = v5;
      }
      *(_QWORD *)v16 = *(_QWORD *)v15;
      *((_DWORD *)v12 + 19) = v14 + 1;
      v17 = v5 + 8;
      v5 = v4;
      if (v17 != v4)
      {
        v5 = v17;
        while (*(_QWORD *)v5 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v5 += 8;
          if (v5 == v4)
          {
            v5 = v4;
            break;
          }
        }
      }
    }
    while (v5 != v9);
    v7 = *(uint64_t **)a1;
    v18 = *(_DWORD *)(*(_QWORD *)a1 + 76);
  }
  v19 = v10 + 24 * v8;
  *(_DWORD *)(v19 + 16) = v11;
  *(_DWORD *)(v19 + 20) = v18;
  v20 = *((_QWORD *)a1 + 3);
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    v22 = (int *)(v20 + 4 * v21);
    if (*(_DWORD *)(v20 - 12))
    {
      v23 = (int *)*((_QWORD *)a1 + 3);
      if ((_DWORD)v21)
      {
        v24 = 4 * v21;
        v23 = (int *)*((_QWORD *)a1 + 3);
        while (*v23 >= 0xFFFFFFFE)
        {
          ++v23;
          v24 -= 4;
          if (!v24)
          {
            v23 = v22;
            goto LABEL_33;
          }
        }
      }
      goto LABEL_33;
    }
    v23 = (int *)(v20 + 4 * v21);
  }
  else
  {
    v23 = 0;
    v21 = 0;
  }
  v22 = (int *)(v20 + 4 * v21);
  if (v20)
  {
LABEL_33:
    v25 = (int *)(v20 + 4 * *(unsigned int *)(v20 - 4));
    goto LABEL_38;
  }
  v25 = 0;
LABEL_38:
  v26 = *((_DWORD *)v7 + 15);
  v27 = v26;
  if (v25 != v23)
  {
    do
    {
      v35 = 0;
      v28 = *v23;
      v35 = *v23;
      v29 = *(uint64_t **)a1;
      v30 = (char **)(*(_QWORD *)a1 + 48);
      v31 = *(unsigned int *)(*(_QWORD *)a1 + 60);
      if ((_DWORD)v31 == *(_DWORD *)(*(_QWORD *)a1 + 56))
        *(_DWORD *)(v29[6] + 4 * *((unsigned int *)v29 + 15)) = *(_DWORD *)WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30, v31 + 1, (unint64_t)&v35);
      else
        *(_DWORD *)&(*v30)[4 * v31] = v28;
      ++*((_DWORD *)v29 + 15);
      v32 = v23 + 1;
      v23 = v22;
      if (v32 != v22)
      {
        v23 = v32;
        while (*v23 >= 0xFFFFFFFE)
        {
          if (++v23 == v22)
          {
            v23 = v22;
            break;
          }
        }
      }
    }
    while (v23 != v25);
    v27 = *(_DWORD *)(*(_QWORD *)a1 + 60);
  }
  v33 = (_DWORD *)(v10 + 24 * v8);
  v33[2] = v26;
  v33[3] = v27;
  return WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::sinkTransitions(a1, v33);
}

char *WebCore::ContentExtensions::ImmutableNFANodeBuilder<char,unsigned long long>::sinkTransitions(char *result, _DWORD *a2)
{
  int v2;
  int v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  unint64_t v28;
  int v29;

  v2 = *(_DWORD *)(*(_QWORD *)result + 28);
  v3 = v2;
  if (*((_DWORD *)result + 5))
  {
    v4 = result;
    v26 = *(_DWORD *)(*(_QWORD *)result + 28);
    v27 = a2;
    v5 = 0;
    v6 = *((_QWORD *)result + 1);
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 16 * v5);
      if (v7)
      {
        v8 = *(unsigned int *)(v7 - 4);
        v9 = (int *)(v7 + 4 * v8);
        if (*(_DWORD *)(v7 - 12))
        {
          v10 = *(int **)(v6 + 16 * v5);
          if ((_DWORD)v8)
          {
            v11 = 4 * v8;
            v10 = *(int **)(v6 + 16 * v5);
            while (*v10 >= 0xFFFFFFFE)
            {
              ++v10;
              v11 -= 4;
              if (!v11)
              {
                v10 = v9;
                goto LABEL_10;
              }
            }
          }
          goto LABEL_10;
        }
        v10 = (int *)(v7 + 4 * v8);
      }
      else
      {
        v10 = 0;
        v8 = 0;
      }
      v9 = (int *)(v7 + 4 * v8);
      if (!v7)
      {
        v12 = 0;
        goto LABEL_15;
      }
LABEL_10:
      v12 = (int *)(v7 + 4 * *(unsigned int *)(v7 - 4));
LABEL_15:
      v13 = *(_QWORD *)v4;
      v14 = *(_DWORD *)(*(_QWORD *)v4 + 44);
      if (v12 == v10)
      {
        v20 = *(_DWORD *)(*(_QWORD *)v4 + 44);
      }
      else
      {
        do
        {
          LODWORD(v28) = 0;
          v15 = *v10;
          LODWORD(v28) = *v10;
          v16 = *(_QWORD *)v4;
          v17 = (char **)(*(_QWORD *)v4 + 32);
          v18 = *(unsigned int *)(*(_QWORD *)v4 + 44);
          if ((_DWORD)v18 == *(_DWORD *)(*(_QWORD *)v4 + 40))
            *(_DWORD *)(*(_QWORD *)(v16 + 32) + 4 * *(unsigned int *)(v16 + 44)) = *(_DWORD *)WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, (unint64_t)&v28);
          else
            *(_DWORD *)&(*v17)[4 * v18] = v15;
          ++*(_DWORD *)(v16 + 44);
          v19 = v10 + 1;
          v10 = v9;
          if (v19 != v9)
          {
            v10 = v19;
            while (*v10 >= 0xFFFFFFFE)
            {
              if (++v10 == v9)
              {
                v10 = v9;
                break;
              }
            }
          }
        }
        while (v10 != v12);
        v13 = *(_QWORD *)v4;
        v20 = *(_DWORD *)(*(_QWORD *)v4 + 44);
      }
      result = (char *)(v13 + 16);
      v28 = __PAIR64__(v20, v14);
      LOWORD(v29) = *(_WORD *)(v6 + 16 * v5 + 12);
      v21 = *(unsigned int *)(v13 + 28);
      if ((_DWORD)v21 == *(_DWORD *)(v13 + 24))
      {
        result = WTF::Vector<WebCore::ContentExtensions::ImmutableRange<char>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v21 + 1, (unint64_t)&v28);
        v22 = *(_QWORD *)(v13 + 16) + 12 * *(unsigned int *)(v13 + 28);
        v23 = *(char **)result;
        v24 = *((_DWORD *)result + 2);
      }
      else
      {
        v22 = *(_QWORD *)result + 12 * v21;
        v23 = (char *)v28;
        v24 = v29;
      }
      *(_DWORD *)(v22 + 8) = v24;
      *(_QWORD *)v22 = v23;
      ++*(_DWORD *)(v13 + 28);
      v6 = *((_QWORD *)v4 + 1);
      v25 = *(unsigned int *)(v6 + 16 * v5 + 8);
      if ((_DWORD)v25)
        v5 = v5 & 0xFFFFFFFF00000000 | v25;
      else
        v5 = v5 & 0xFFFFFF0000000000 | v25 & 0xFFFFFF00FFFFFFFFLL | 0x100000000;
      if ((v5 & 0xFF00000000) == 0x100000000)
      {
        v3 = *(_DWORD *)(*(_QWORD *)v4 + 28);
        a2 = v27;
        v2 = v26;
        break;
      }
    }
  }
  *a2 = v2;
  a2[1] = v3;
  return result;
}

char *WTF::Vector<WebCore::ContentExtensions::ImmutableRange<char>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[12 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v13 = *a1;
        return &v13[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
      if (v9 < 0x15555556)
      {
        v10 = 12 * v9;
        v11 = (char *)WTF::fastMalloc((WTF *)(12 * v9));
        *((_DWORD *)a1 + 2) = (v10 & 0xFFFFFFFC) / 0xC;
        *a1 = v11;
        memcpy(v11, v5, 12 * v6);
        v13 = *a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x19572F0D4);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v16 = a2;
  if (v16 > v14)
  {
    if (v16 >= 0x15555556)
      goto LABEL_28;
    v17 = *((unsigned int *)a1 + 3);
    v18 = 12 * v16;
    v19 = (char *)WTF::fastMalloc((WTF *)(12 * v16));
    *((_DWORD *)a1 + 2) = (v18 & 0xFFFFFFFC) / 0xC;
    *a1 = v19;
    memcpy(v19, v5, 12 * v17);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

uint64_t WTF::HashTable<WebCore::ContentExtensions::Term const*,WebCore::ContentExtensions::Term const*,WTF::IdentityExtractor,WebCore::ContentExtensions::CombinedFiltersAlphabet::TermPointerHash,WTF::HashTraits<WebCore::ContentExtensions::Term const*>,WTF::HashTraits<WebCore::ContentExtensions::Term const*>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  unsigned int v26;
  unsigned __int16 v27;
  char v28;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = (unsigned __int8 **)(v6 + 8 * v11);
      v15 = *v14;
      if ((unint64_t)(*v14 + 1) >= 2)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v26 = -1640531527;
        v27 = 0;
        v28 = 0;
        WebCore::ContentExtensions::add(&v26, v15);
        v18 = v26;
        if (v28)
        {
          v24 = (v26 + v27) ^ ((v26 + v27) << 11);
          v18 = v24 + (v24 >> 17);
        }
        v19 = 0;
        v20 = (v18 ^ (8 * v18)) + ((v18 ^ (8 * v18)) >> 5);
        v21 = (v20 ^ (4 * v20)) + ((v20 ^ (4 * v20)) >> 15);
        v22 = v21 ^ (v21 << 10);
        if (!v22)
          v22 = 0x800000;
        do
        {
          v23 = v22 & v17;
          v22 = ++v19 + v23;
        }
        while (*(_QWORD *)(v16 + 8 * v23));
        *(_QWORD *)(v16 + 8 * v23) = v15;
        if (v14 == a3)
          v12 = v16 + 8 * v23;
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int *WebCore::ContentExtensions::add(unsigned int *result, unsigned __int8 *a2)
{
  unsigned int *v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = result;
  v3 = *a2;
  v4 = (*result + v3) ^ ((*result + v3) << 16);
  v5 = (v4 + a2[1] + (v4 >> 11)) ^ ((v4 + a2[1] + (v4 >> 11)) << 16);
  v6 = v5 + (v5 >> 11);
  *result = v6;
  if (v3 == 2)
  {
    v14 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v14)
    {
      v15 = *((_QWORD *)a2 + 1);
      v16 = 32 * v14;
      do
      {
        result = (unsigned int *)WebCore::ContentExtensions::add(v2, v15);
        v15 += 32;
        v16 -= 32;
      }
      while (v16);
    }
  }
  else if (v3 == 1)
  {
    v7 = (v6 + a2[8]) ^ ((v6 + a2[8]) << 16);
    v8 = *((_QWORD *)a2 + 2);
    v9 = *((_QWORD *)a2 + 3);
    v10 = (v8 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)v8 + (v7 >> 11)) << 16) ^ (v7
                                                                                                  + (unsigned __int16)v8
                                                                                                  + (v7 >> 11));
    v11 = (v8 >> 37) & 0x7FFF800 ^ ((v10 + WORD2(v8) + (v10 >> 11)) << 16) ^ (v10 + WORD2(v8) + (v10 >> 11));
    v12 = (v9 >> 5) & 0x7FFF800 ^ ((v11 + (unsigned __int16)v9 + (v11 >> 11)) << 16) ^ (v11 + (unsigned __int16)v9 + (v11 >> 11));
    v13 = v12 + WORD2(v9) + (v12 >> 11);
    LODWORD(v8) = (v9 >> 37) & 0x7FFF800 ^ (v13 << 16);
    *result = (v8 ^ v13) + ((v8 ^ v13) >> 11);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 27))
  {
    v5 = WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)a2 + 32 * v6;
      v8 = v5 + 8;
      v9 = *(_QWORD *)a2 + 8;
      do
      {
        v11 = v9 - 8;
        v10 = *(unsigned __int8 *)(v9 - 8);
        *(_BYTE *)(v8 - 8) = v10;
        *(_BYTE *)(v8 - 7) = *(_BYTE *)(v9 - 7);
        *(_BYTE *)v8 = 0;
        if (v10 == 2)
        {
          v8 = WTF::Vector<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector();
        }
        else if (v10 == 1)
        {
          v12 = *(_OWORD *)v9;
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
          *(_OWORD *)v8 = v12;
        }
        v8 += 32;
        v9 += 32;
      }
      while (v11 + 32 != v7);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<WebCore::ContentExtensions::PrefixTreeEdge,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v8 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v8 + 1 > a2)
      a2 = v8 + 1;
    WTF::Vector<WebCore::ContentExtensions::PrefixTreeEdge,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 + 1 > a2)
      a2 = v7 + 1;
    WTF::Vector<WebCore::ContentExtensions::PrefixTreeEdge,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::PrefixTreeEdge,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = (_QWORD *)result;
        v8 = (WTF *)((char *)v4 + 16 * v5);
        v9 = v4;
        do
        {
          *v7 = *(_QWORD *)v9;
          v10 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          v7[1] = v10;
          v11 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (v11)
          {
            v12 = *(unsigned int *)(v11 + 12);
            if ((_DWORD)v12)
              WTF::VectorTypeOperations<WebCore::ContentExtensions::PrefixTreeEdge>::destruct(*(_QWORD *)v11, (WTF **)(*(_QWORD *)v11 + 16 * v12));
            v13 = *(WTF **)v11;
            if (*(_QWORD *)v11)
            {
              *(_QWORD *)v11 = 0;
              *(_DWORD *)(v11 + 8) = 0;
              WTF::fastFree(v13, v6);
            }
            result = WTF::fastFree((WTF *)v11, v6);
          }
          v9 = (WTF *)((char *)v9 + 16);
          v7 += 2;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WebCore::ContentExtensions::PrefixTreeVertex const*,WTF::KeyValuePair<WebCore::ContentExtensions::PrefixTreeVertex const*,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContentExtensions::PrefixTreeVertex const*,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ContentExtensions::PrefixTreeVertex const*>,WTF::HashMap<WebCore::ContentExtensions::PrefixTreeVertex const*,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ContentExtensions::PrefixTreeVertex const*>,WTF::HashTraits<WebCore::ContentExtensions::PrefixTreeVertex const*>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ContentExtensions::PrefixTreeVertex const*>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  _QWORD *v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  _QWORD *v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  WTF *v42;
  _QWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  v11 = a1;
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    v15 = a3;
    do
    {
      v16 = (uint64_t *)(v4 + 24 * v12);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v22 = *v11;
          if (*v11)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v24 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
          v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
          v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
          v27 = v23 & ((v26 >> 31) ^ v26);
          v28 = 1;
          do
          {
            v29 = v27;
            v30 = (_QWORD *)(v22 + 24 * v27);
            v27 = (v27 + v28++) & v23;
          }
          while (*v30);
          v31 = v29;
          v32 = v22 + 24 * v29;
          v35 = *(WTF **)(v32 + 8);
          v34 = (_QWORD *)(v32 + 8);
          v33 = v35;
          if (v35)
          {
            *v34 = 0;
            *(_DWORD *)(v22 + 24 * v29 + 16) = 0;
            WTF::fastFree(v33, v8);
            v15 = a3;
            v11 = a1;
            v17 = *v16;
          }
          *v30 = v17;
          v36 = v4 + 24 * v12;
          *v34 = 0;
          v34[1] = 0;
          v38 = *(_QWORD *)(v36 + 8);
          v37 = v36 + 8;
          *(_QWORD *)v37 = 0;
          *v34 = v38;
          v39 = *(_DWORD *)(v37 + 8);
          *(_DWORD *)(v37 + 8) = 0;
          v40 = v22 + 24 * v31;
          *(_DWORD *)(v40 + 16) = v39;
          v41 = *(_DWORD *)(v37 + 12);
          *(_DWORD *)(v37 + 12) = 0;
          *(_DWORD *)(v40 + 20) = v41;
          v42 = *(WTF **)v37;
          if (*(_QWORD *)v37)
          {
            *(_QWORD *)v37 = 0;
            *(_DWORD *)(v37 + 8) = 0;
            WTF::fastFree(v42, v8);
            v15 = a3;
            v11 = a1;
          }
          if (v16 == v15)
            v13 = v30;
        }
        else
        {
          v18 = v4 + 24 * v12;
          v21 = *(WTF **)(v18 + 8);
          v20 = (_QWORD *)(v18 + 8);
          v19 = v21;
          if (v21)
          {
            *v20 = 0;
            *(_DWORD *)(v4 + 24 * v12 + 16) = 0;
            WTF::fastFree(v19, v8);
            v15 = a3;
            v11 = a1;
          }
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

uint64_t *WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = *a2 + ~(*a2 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14 != -1)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v25;
        goto LABEL_28;
      }
      if (v15 == -2)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14 != -1);
    if (v16)
    {
      *v16 = -1;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
      goto LABEL_19;
  }
  else if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v24 = 8;
LABEL_25:
      result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v4, v24, v14);
      v14 = result;
      v20 = *v4;
      if (*v4)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_27;
    }
LABEL_19:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
    goto LABEL_25;
  }
LABEL_27:
  v27 = v20 + 8 * v23;
  v26 = 1;
LABEL_28:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

_QWORD *WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    memset((void *)(v9 + 16), 255, 8 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (!v7)
  {
    v14 = 0;
    if (!v6)
      return v14;
    goto LABEL_17;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    v15 = (uint64_t *)(v6 + 8 * v13);
    v16 = *v15;
    if ((unint64_t)*v15 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v17 = *a1;
      if (*a1)
        v18 = *(_DWORD *)(v17 - 8);
      else
        v18 = 0;
      v19 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
      v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
      v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
      v22 = v18 & ((v21 >> 31) ^ v21);
      v23 = 1;
      do
      {
        v24 = v22;
        v25 = *(_QWORD *)(v17 + 8 * v22);
        v22 = (v22 + v23++) & v18;
      }
      while (v25 != -1);
      v26 = (_QWORD *)(v17 + 8 * v24);
      *v26 = v16;
      if (v15 == a3)
        v14 = v26;
    }
    ++v13;
  }
  while (v13 != v7);
  if (v6)
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

unint64_t WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 24 * a2;
      result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 24 * v4;
        v9 = v3;
        do
        {
          *(_BYTE *)v7 = 0;
          *(_DWORD *)(v7 + 16) = -1;
          v10 = *((unsigned int *)v9 + 4);
          if ((_DWORD)v10 != -1)
          {
            result = ((uint64_t (*)(char *, uint64_t, WTF *))off_1E3394F20[v10])(&v12, v7, v9);
            *(_DWORD *)(v7 + 16) = v10;
            v11 = *((unsigned int *)v9 + 4);
            if ((_DWORD)v11 != -1)
              result = ((uint64_t (*)(char *, WTF *))off_1E3394F08[v11])(&v13, v9);
          }
          *((_DWORD *)v9 + 4) = -1;
          v7 += 24;
          v9 = (WTF *)((char *)v9 + 24);
          v8 -= 24;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::parseInteger<unsigned short,unsigned char>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned __int16 v14;
  char v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *i;
  unsigned int v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  int v22;
  int v23;
  uint64_t v25;
  int v26;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (!a1 || !a2)
    return v5 | v4 | v6;
  v7 = 0;
  while (1)
  {
    v8 = *(unsigned __int8 *)(a1 + v7);
    if ((v8 - 9) >= 5 && v8 != 32)
      break;
    if (a2 == ++v7)
      goto LABEL_51;
  }
  if (v8 == 43)
  {
    if (a2 - 1 == v7)
      goto LABEL_51;
    v9 = ~v7 + a2;
    v10 = (unsigned __int8 *)(a1 + v7 + 1);
    v8 = *v10;
  }
  else
  {
    v10 = (unsigned __int8 *)(a1 + v7);
    v9 = a2 - v7;
  }
  if ((v8 - 48) <= 9)
  {
    if (v8 - 48 < a3)
    {
      if (a3 >= 36)
        v11 = 36;
      else
        v11 = a3;
      v12 = v11 + 87;
      goto LABEL_23;
    }
LABEL_51:
    v4 = 0;
    v5 = 0;
    v6 = 0;
    return v5 | v4 | v6;
  }
  if ((v8 | 0x20u) < 0x61)
    goto LABEL_51;
  v13 = a3 >= 36 ? 36 : a3;
  v12 = v13 + 87;
  if (v13 + 87 <= (v8 | 0x20u))
    goto LABEL_51;
LABEL_23:
  v14 = 0;
  v15 = 0;
  v16 = &v10[v9];
  v17 = v9 - 1;
  for (i = v10 + 1; ; ++i)
  {
    v19 = v8 - 48;
    v20 = v8 - 48;
    v21 = (v8 | 0x20) - 87;
    if (v19 < 0xA)
      v21 = v20;
    v22 = v14 * a3;
    if ((v22 & 0xFF0000) == 0)
      v14 *= (_WORD)a3;
    v23 = v14 + v21;
    if ((v22 & 0xFF0000) != 0 || (unsigned __int16)v23 != v23)
      v15 = 1;
    if ((unsigned __int16)v23 == v23)
      v14 = v23;
    if (!v17)
      break;
    ++v10;
    v8 = *i;
    if ((v8 - 48) > 9)
    {
      if ((v8 | 0x20u) < 0x61 || v12 <= (v8 | 0x20u))
      {
        v16 = i;
        break;
      }
    }
    else if (v8 - 48 >= a3)
    {
      v16 = v10;
      break;
    }
    --v17;
  }
  if (v15)
    goto LABEL_51;
  if (!a4 && v17)
  {
    v25 = 0;
    do
    {
      v26 = v16[v25];
      if ((v26 - 9) >= 5 && v26 != 32)
        goto LABEL_51;
    }
    while (v17 != ++v25);
  }
  v6 = v14 & 0xFF00;
  v5 = v14;
  v4 = 0x10000;
  return v5 | v4 | v6;
}

uint64_t WTF::parseInteger<unsigned short,char16_t>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4;
  int v5;
  int v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned __int16 v12;
  char v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned __int16 v17;
  unsigned int v18;
  unsigned __int16 v19;
  int v20;
  int v21;
  uint64_t v23;
  int v24;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (!a1 || !a2)
    return v5 | v4 | v6;
  v7 = (unsigned __int16 *)(a1 + 2);
  while (1)
  {
    v8 = *(v7 - 1);
    if ((v8 - 9) >= 5 && v8 != 32)
      break;
    ++v7;
    if (!--a2)
      goto LABEL_51;
  }
  if (v8 == 43)
  {
    if (!--a2)
      goto LABEL_51;
    v8 = *v7;
  }
  else
  {
    --v7;
  }
  if ((v8 - 48) <= 9)
  {
    if (v8 - 48 < a3)
    {
      if (a3 >= 36)
        v9 = 36;
      else
        v9 = a3;
      v10 = v9 + 87;
      goto LABEL_23;
    }
LABEL_51:
    v4 = 0;
    v5 = 0;
    v6 = 0;
    return v5 | v4 | v6;
  }
  if ((v8 | 0x20u) < 0x61)
    goto LABEL_51;
  v11 = a3 >= 36 ? 36 : a3;
  v10 = v11 + 87;
  if (v11 + 87 <= (v8 | 0x20u))
    goto LABEL_51;
LABEL_23:
  v12 = 0;
  v13 = 0;
  v14 = a2 - 1;
  v15 = v7 + 1;
  v16 = &v7[a2];
  while (1)
  {
    v17 = v8 - 48;
    v18 = (unsigned __int16)(v8 - 48);
    v19 = (v8 | 0x20) - 87;
    if (v18 < 0xA)
      v19 = v17;
    v20 = v12 * a3;
    if ((v20 & 0xFF0000) == 0)
      v12 *= (_WORD)a3;
    v21 = v12 + v19;
    if ((v20 & 0xFF0000) != 0 || (unsigned __int16)v21 != v21)
      v13 = 1;
    if ((unsigned __int16)v21 == v21)
      v12 = v21;
    if (!v14)
      break;
    ++v7;
    v8 = *v15;
    if ((v8 - 48) > 9)
    {
      if ((v8 | 0x20u) < 0x61 || v10 <= (v8 | 0x20u))
      {
        v16 = v15;
        break;
      }
    }
    else if (v8 - 48 >= a3)
    {
      v16 = v7;
      break;
    }
    --v14;
    ++v15;
  }
  if (v13)
    goto LABEL_51;
  if (!a4 && v14)
  {
    v23 = 0;
    do
    {
      v24 = v16[v23];
      if ((v24 - 9) >= 5 && v24 != 32)
        goto LABEL_51;
    }
    while (v14 != ++v23);
  }
  v6 = v12 & 0xFF00;
  v5 = v12;
  v4 = 0x10000;
  return v5 | v4 | v6;
}

_BYTE *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(WTF::StringBuilder *a1, uint64_t *a2, char *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *result;
  _BYTE *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  int8x16_t *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  _WORD *v29;
  int8x16_t *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  __int128 v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;

  v7 = *a2;
  v8 = *a4;
  v9 = *((_QWORD *)a1 + 1);
  if ((v9 || (v9 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v9 + 16) & 4) == 0
    || v7 && (*(_BYTE *)(v7 + 16) & 4) == 0
    || v8 && (*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v11 = result;
      v12 = *a2;
      v13 = *a3;
      v14 = *a4;
      if (v12)
      {
        v15 = *(int8x16_t **)(v12 + 8);
        v16 = *(unsigned int *)(v12 + 4);
        if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        {
          v17 = &result[2 * v16];
          if (v16 >= 0x40)
          {
            v18 = &result[2 * (v16 & 0xFFFFFFC0)];
            v20 = 0uLL;
            v21 = result;
            do
            {
              v42.val[0] = *v15;
              v22 = v15[1];
              v44.val[0] = v15[2];
              v23 = v15[3];
              v15 += 4;
              v24 = v23;
              v44.val[1] = 0uLL;
              v46.val[0] = v22;
              v42.val[1] = 0uLL;
              v25 = v21;
              vst2q_s8(v25, v42);
              v25 += 32;
              v46.val[1] = 0uLL;
              vst2q_s8(v25, v46);
              v26 = v21 + 64;
              vst2q_s8(v26, v44);
              v27 = v21 + 96;
              vst2q_s8(v27, *(int8x16x2_t *)(&v20 - 1));
              v21 += 128;
            }
            while (v21 != v18);
          }
          else
          {
            v18 = result;
          }
          while (v18 != v17)
          {
            v28 = v15->u8[0];
            v15 = (int8x16_t *)((char *)v15 + 1);
            *(_WORD *)v18 = v28;
            v18 += 2;
          }
        }
        else if ((_DWORD)v16 == 1)
        {
          *(_WORD *)result = v15->i16[0];
        }
        else if ((_DWORD)v16)
        {
          memcpy(result, v15, 2 * v16);
        }
        v19 = *(unsigned int *)(v12 + 4);
      }
      else
      {
        v19 = 0;
      }
      v29 = &v11[2 * v19];
      *v29 = v13;
      result = v29 + 1;
      if (v14)
      {
        v30 = *(int8x16_t **)(v14 + 8);
        v31 = *(unsigned int *)(v14 + 4);
        if ((*(_BYTE *)(v14 + 16) & 4) != 0)
        {
          v32 = &result[2 * v31];
          if (v31 >= 0x40)
          {
            v33 = &result[2 * (v31 & 0xFFFFFFC0)];
            v34 = 0uLL;
            do
            {
              v43.val[0] = *v30;
              v35 = v30[1];
              v45.val[0] = v30[2];
              v36 = v30[3];
              v30 += 4;
              v37 = v36;
              v45.val[1] = 0uLL;
              v47.val[0] = v35;
              v43.val[1] = 0uLL;
              v38 = result;
              vst2q_s8(v38, v43);
              v38 += 32;
              v47.val[1] = 0uLL;
              vst2q_s8(v38, v47);
              v39 = result + 64;
              vst2q_s8(v39, v45);
              v40 = result + 96;
              vst2q_s8(v40, *(int8x16x2_t *)(&v34 - 1));
              result += 128;
            }
            while (result != v33);
            result = v33;
          }
          while (result != v32)
          {
            v41 = v30->u8[0];
            v30 = (int8x16_t *)((char *)v30 + 1);
            *(_WORD *)result = v41;
            result += 2;
          }
        }
        else if ((_DWORD)v31 == 1)
        {
          *(_WORD *)result = v30->i16[0];
        }
        else if ((_DWORD)v31)
        {
          return memcpy(result, v30, 2 * v31);
        }
      }
    }
  }
  else
  {
    result = (_BYTE *)MEMORY[0x19AEA4824]();
    if (result)
      return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, *a2, *a3, *a4);
  }
  return result;
}

uint64_t WebCore::ContentExtensions::addUniversalActionsToDFA(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;

  if (!*a2)
    return result;
  v2 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v2)
    return result;
  v4 = result;
  v5 = *(_DWORD *)(result + 64);
  v6 = *(_QWORD *)result;
  v7 = (char **)(result + 16);
  v8 = *(unsigned int *)(result + 28);
  v9 = v8 + v2;
  if (v8 + v2 > (unint64_t)*(unsigned int *)(result + 24))
  {
    if (v9 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1957304F0);
    }
    v10 = *v7;
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 24) = v9;
    *(_QWORD *)(v4 + 16) = v11;
    result = (uint64_t)memcpy(v11, v10, 8 * v8);
    if (v10)
    {
      if (*v7 == v10)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
      }
      result = WTF::fastFree((WTF *)v10, v12);
    }
  }
  v13 = (_QWORD *)*a2;
  if (*a2)
  {
    v15 = *((unsigned int *)v13 - 1);
    v16 = &v13[v15];
    if (*((_DWORD *)v13 - 3))
    {
      v14 = (_QWORD *)*a2;
      if ((_DWORD)v15)
      {
        v22 = 8 * v15;
        v14 = v13;
        while (*v14 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v14;
          v22 -= 8;
          if (!v22)
          {
            v14 = v16;
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
    v14 = &v13[v15];
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v16 = &v13[v15];
LABEL_10:
  if (v13)
    v17 = &v13[*((unsigned int *)v13 - 1)];
  else
    v17 = 0;
  LODWORD(v18) = *(_DWORD *)(v4 + 28);
  while (v14 != v17)
  {
    if ((_DWORD)v18 == *(_DWORD *)(v4 + 24))
    {
      result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v18 + 1, (unint64_t)v14);
      v18 = *(unsigned int *)(v4 + 28);
      v19 = (char *)(*(_QWORD *)(v4 + 16) + 8 * v18);
    }
    else
    {
      v19 = &(*v7)[8 * v18];
      result = (uint64_t)v14;
    }
    *(_QWORD *)v19 = *(_QWORD *)result;
    LODWORD(v18) = v18 + 1;
    *(_DWORD *)(v4 + 28) = v18;
    v20 = v14 + 1;
    v14 = v16;
    if (v20 != v16)
    {
      v14 = v20;
      while (*v14 >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (++v14 == v16)
        {
          v14 = v16;
          break;
        }
      }
    }
  }
  v21 = v18 - v8;
  if (v21 >= 0xFFFF)
  {
    __break(0xC471u);
    JUMPOUT(0x1957304E8);
  }
  *(_DWORD *)(v6 + 12 * v5) = v8;
  *(_WORD *)(v6 + 12 * v5 + 8) = v21;
  return result;
}

WTF *WTF::Detail::CallableWrapper<BOOL WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0)::{lambda(WebCore::ContentExtensions::NFA &&)#1},BOOL,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &>::call(uint64_t a1, uint64_t a2)
{
  WebCore::ContentExtensions::DFA *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char v8;
  void *v9;
  WTF *result;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  int v16;
  unsigned int v17;
  WTF *v18;
  int v19;
  WTF *v20;
  int v21;
  WTF *v22;
  int v23;
  unsigned __int8 v24;

  WebCore::ContentExtensions::NFAToDFA::convert(a2, (uint64_t)&v15);
  v4 = v24;
  if (!v24)
    return (WTF *)(v4 != 0);
  if (!v17)
    goto LABEL_8;
  v5 = 0;
  v6 = 12 * v17;
  v7 = (char *)v15 + 11;
  do
  {
    v8 = *v7;
    v7 += 12;
    if ((v8 & 1) == 0)
      ++v5;
    v6 -= 12;
  }
  while (v6);
  if (v5 <= 0x63)
  {
LABEL_8:
    WebCore::ContentExtensions::DFACombiner::addDFA(*(_QWORD *)(a1 + 8), (WebCore::ContentExtensions::DFAMinimizer *)&v15);
    goto LABEL_11;
  }
  result = WebCore::ContentExtensions::DFAMinimizer::minimize((WebCore::ContentExtensions::DFAMinimizer *)&v15, v3);
  if (v24)
  {
    WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0)::{lambda(WebCore::ContentExtensions::DFA &&)#1}::operator()(*(_QWORD *)(a1 + 16), (uint64_t *)&v15);
LABEL_11:
    if (v24)
    {
      v11 = v22;
      if (v22)
      {
        v22 = 0;
        v23 = 0;
        WTF::fastFree(v11, v9);
      }
      v12 = v20;
      if (v20)
      {
        v20 = 0;
        v21 = 0;
        WTF::fastFree(v12, v9);
      }
      v13 = v18;
      if (v18)
      {
        v18 = 0;
        v19 = 0;
        WTF::fastFree(v13, v9);
      }
      v14 = v15;
      if (v15)
      {
        v15 = 0;
        v16 = 0;
        WTF::fastFree(v14, v9);
      }
    }
    return (WTF *)(v4 != 0);
  }
  __break(1u);
  return result;
}

WebCore::ContentExtensions::DFAMinimizer *WebCore::ContentExtensions::DFACombiner::addDFA(uint64_t a1, WebCore::ContentExtensions::DFAMinimizer *this)
{
  WebCore::ContentExtensions::DFAMinimizer *v2;
  WebCore::ContentExtensions::DFAMinimizer *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = this;
  result = WebCore::ContentExtensions::DFAMinimizer::minimize(this, this);
  v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 8))
  {
    result = (WebCore::ContentExtensions::DFAMinimizer *)WTF::Vector<WebCore::ContentExtensions::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v5 + 1, (unint64_t)v2);
    v2 = result;
    v6 = *(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    v7 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)v6 = v7;
    LODWORD(v7) = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = 0;
    *(_DWORD *)(v6 + 8) = v7;
    LODWORD(v7) = *((_DWORD *)result + 3);
    *((_DWORD *)result + 3) = 0;
    *(_DWORD *)(v6 + 12) = v7;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    v8 = *((_QWORD *)result + 2);
    *((_QWORD *)result + 2) = 0;
    *(_QWORD *)(v6 + 16) = v8;
    LODWORD(v8) = *((_DWORD *)result + 6);
    *((_DWORD *)result + 6) = 0;
    *(_DWORD *)(v6 + 24) = v8;
    LODWORD(v8) = *((_DWORD *)result + 7);
    *((_DWORD *)result + 7) = 0;
    *(_DWORD *)(v6 + 28) = v8;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    v9 = *((_QWORD *)result + 4);
    *((_QWORD *)result + 4) = 0;
    *(_QWORD *)(v6 + 32) = v9;
    LODWORD(v9) = *((_DWORD *)result + 10);
    *((_DWORD *)result + 10) = 0;
    *(_DWORD *)(v6 + 40) = v9;
    LODWORD(v9) = *((_DWORD *)result + 11);
    *((_DWORD *)result + 11) = 0;
    *(_DWORD *)(v6 + 44) = v9;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 56) = 0;
    v10 = *((_QWORD *)result + 6);
    *((_QWORD *)result + 6) = 0;
    *(_QWORD *)(v6 + 48) = v10;
    LODWORD(v10) = *((_DWORD *)result + 14);
    *((_DWORD *)result + 14) = 0;
    *(_DWORD *)(v6 + 56) = v10;
    v11 = *((_DWORD *)result + 15);
    *((_DWORD *)result + 15) = 0;
  }
  else
  {
    v6 = *(_QWORD *)a1 + 72 * v5;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    v12 = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)v6 = v12;
    LODWORD(v12) = *((_DWORD *)v2 + 2);
    *((_DWORD *)v2 + 2) = 0;
    *(_DWORD *)(v6 + 8) = v12;
    LODWORD(v12) = *((_DWORD *)v2 + 3);
    *((_DWORD *)v2 + 3) = 0;
    *(_DWORD *)(v6 + 12) = v12;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    v13 = *((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    *(_QWORD *)(v6 + 16) = v13;
    LODWORD(v13) = *((_DWORD *)v2 + 6);
    *((_DWORD *)v2 + 6) = 0;
    *(_DWORD *)(v6 + 24) = v13;
    LODWORD(v13) = *((_DWORD *)v2 + 7);
    *((_DWORD *)v2 + 7) = 0;
    *(_DWORD *)(v6 + 28) = v13;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    v14 = *((_QWORD *)v2 + 4);
    *((_QWORD *)v2 + 4) = 0;
    *(_QWORD *)(v6 + 32) = v14;
    LODWORD(v14) = *((_DWORD *)v2 + 10);
    *((_DWORD *)v2 + 10) = 0;
    *(_DWORD *)(v6 + 40) = v14;
    LODWORD(v14) = *((_DWORD *)v2 + 11);
    *((_DWORD *)v2 + 11) = 0;
    *(_DWORD *)(v6 + 44) = v14;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 56) = 0;
    v15 = *((_QWORD *)v2 + 6);
    *((_QWORD *)v2 + 6) = 0;
    *(_QWORD *)(v6 + 48) = v15;
    LODWORD(v15) = *((_DWORD *)v2 + 14);
    *((_DWORD *)v2 + 14) = 0;
    *(_DWORD *)(v6 + 56) = v15;
    v11 = *((_DWORD *)v2 + 15);
    *((_DWORD *)v2 + 15) = 0;
  }
  *(_DWORD *)(v6 + 60) = v11;
  *(_DWORD *)(v6 + 64) = *((_DWORD *)v2 + 16);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

WTF *WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0)::{lambda(WebCore::ContentExtensions::DFA &&)#1}::operator()(uint64_t a1, uint64_t *a2)
{
  void *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *result;
  uint64_t *v9[2];
  WTF *v10[2];
  WTF *v11[2];
  WTF *v12[2];
  WTF *v13;
  uint64_t v14;

  if (!**(_BYTE **)a1)
    WebCore::ContentExtensions::addUniversalActionsToDFA((uint64_t)a2, *(_QWORD **)(a1 + 8));
  v13 = 0;
  v14 = 0;
  v9[0] = (uint64_t *)&v13;
  v9[1] = a2;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)v12 = 0u;
  WebCore::ContentExtensions::DFABytecodeCompiler::compile(v9);
  (*(void (**)(_QWORD, WTF **))(***(_QWORD ***)(a1 + 16) + 32))(**(_QWORD **)(a1 + 16), &v13);
  **(_BYTE **)a1 = 1;
  v5 = v12[0];
  if (v12[0])
  {
    v12[0] = 0;
    LODWORD(v12[1]) = 0;
    WTF::fastFree(v5, v4);
  }
  v6 = v11[0];
  if (v11[0])
  {
    v11[0] = 0;
    LODWORD(v11[1]) = 0;
    WTF::fastFree(v6, v4);
  }
  v7 = v10[0];
  if (v10[0])
  {
    v10[0] = 0;
    LODWORD(v10[1]) = 0;
    WTF::fastFree(v7, v4);
  }
  result = v13;
  if (v13)
  {
    v13 = 0;
    LODWORD(v14) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

char *WTF::Vector<WebCore::ContentExtensions::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  WTF *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (WTF *)((char *)v5 + 72 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x38E38E4)
      {
        __break(0xC471u);
        JUMPOUT(0x195730A4CLL);
      }
      v17 = (WTF *)((char *)v5 + 72 * *(unsigned int *)(a1 + 12));
      v18 = 72 * v16;
      v19 = WTF::fastMalloc((WTF *)(72 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::ContentExtensions::DFA>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v9 >= 0x38E38E4)
      {
        __break(0xC471u);
        JUMPOUT(0x195730A54);
      }
      v10 = 72 * v9;
      v11 = WTF::fastMalloc((WTF *)(72 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::ContentExtensions::DFA>::move(v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF *WTF::VectorMover<false,WebCore::ContentExtensions::DFA>::move(WTF *result, WTF *a2, uint64_t a3)
{
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = (char *)v5 + v6;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      v9 = *(_QWORD *)((char *)v5 + v6);
      *(_QWORD *)v8 = 0;
      *(_QWORD *)v7 = v9;
      LODWORD(v9) = *(_DWORD *)((char *)v5 + v6 + 8);
      *((_DWORD *)v8 + 2) = 0;
      *(_DWORD *)(v7 + 8) = v9;
      LODWORD(v9) = *(_DWORD *)((char *)v5 + v6 + 12);
      *((_DWORD *)v8 + 3) = 0;
      *(_DWORD *)(v7 + 12) = v9;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      v10 = *(_QWORD *)((char *)v5 + v6 + 16);
      *((_QWORD *)v8 + 2) = 0;
      *(_QWORD *)(v7 + 16) = v10;
      LODWORD(v10) = *(_DWORD *)((char *)v5 + v6 + 24);
      *((_DWORD *)v8 + 6) = 0;
      *(_DWORD *)(v7 + 24) = v10;
      LODWORD(v10) = *(_DWORD *)((char *)v5 + v6 + 28);
      *((_DWORD *)v8 + 7) = 0;
      *(_DWORD *)(v7 + 28) = v10;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      v11 = *(_QWORD *)((char *)v5 + v6 + 32);
      *((_QWORD *)v8 + 4) = 0;
      *(_QWORD *)(v7 + 32) = v11;
      LODWORD(v11) = *(_DWORD *)((char *)v5 + v6 + 40);
      *((_DWORD *)v8 + 10) = 0;
      *(_DWORD *)(v7 + 40) = v11;
      LODWORD(v11) = *(_DWORD *)((char *)v5 + v6 + 44);
      *((_DWORD *)v8 + 11) = 0;
      *(_DWORD *)(v7 + 44) = v11;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      v12 = *(_QWORD *)((char *)v5 + v6 + 48);
      *((_QWORD *)v8 + 6) = 0;
      *(_QWORD *)(v7 + 48) = v12;
      LODWORD(v12) = *(_DWORD *)((char *)v5 + v6 + 56);
      *((_DWORD *)v8 + 14) = 0;
      *(_DWORD *)(v7 + 56) = v12;
      v13 = *(_QWORD *)((char *)v5 + v6 + 60);
      *((_DWORD *)v8 + 15) = 0;
      *(_QWORD *)(v7 + 60) = v13;
      v14 = *(WTF **)((char *)v5 + v6 + 48);
      if (v14)
      {
        *((_QWORD *)v8 + 6) = 0;
        *((_DWORD *)v8 + 14) = 0;
        WTF::fastFree(v14, a2);
      }
      v15 = (WTF *)*((_QWORD *)v8 + 4);
      if (v15)
      {
        *((_QWORD *)v8 + 4) = 0;
        *((_DWORD *)v8 + 10) = 0;
        WTF::fastFree(v15, a2);
      }
      v16 = (WTF *)*((_QWORD *)v8 + 2);
      if (v16)
      {
        *((_QWORD *)v8 + 2) = 0;
        *((_DWORD *)v8 + 6) = 0;
        WTF::fastFree(v16, a2);
      }
      result = *(WTF **)((char *)v5 + v6);
      if (result)
      {
        *(_QWORD *)((char *)v5 + v6) = 0;
        *((_DWORD *)v8 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v6 += 72;
    }
    while ((WTF *)((char *)v5 + v6) != a2);
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<BOOL WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0)::{lambda(WebCore::ContentExtensions::DFA &&)#2},void,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &>::call(uint64_t a1, uint64_t *a2)
{
  return WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0)::{lambda(WebCore::ContentExtensions::DFA &&)#1}::operator()(*(_QWORD *)(a1 + 8), a2);
}

uint64_t WTF::Vector<WebCore::ContentExtensions::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  char *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 72 * v3;
    v6 = (char *)v4 + 32;
    do
    {
      v7 = (WTF *)*((_QWORD *)v6 + 2);
      if (v7)
      {
        *((_QWORD *)v6 + 2) = 0;
        *((_DWORD *)v6 + 6) = 0;
        WTF::fastFree(v7, a2);
      }
      v8 = *(WTF **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
        WTF::fastFree(v8, a2);
      }
      v9 = (WTF *)*((_QWORD *)v6 - 2);
      if (v9)
      {
        *((_QWORD *)v6 - 2) = 0;
        *((_DWORD *)v6 - 2) = 0;
        WTF::fastFree(v9, a2);
      }
      v10 = (WTF *)*((_QWORD *)v6 - 4);
      if (v10)
      {
        *((_QWORD *)v6 - 4) = 0;
        *((_DWORD *)v6 - 6) = 0;
        WTF::fastFree(v10, a2);
      }
      v6 += 72;
      v5 -= 72;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::Detail::CallableWrapper<BOOL WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1)::{lambda(WebCore::ContentExtensions::NFA &&)#1},BOOL,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &>::call(uint64_t a1, uint64_t a2)
{
  WebCore::ContentExtensions::DFA *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char v8;
  void *v9;
  WTF *result;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  int v16;
  unsigned int v17;
  WTF *v18;
  int v19;
  WTF *v20;
  int v21;
  WTF *v22;
  int v23;
  unsigned __int8 v24;

  WebCore::ContentExtensions::NFAToDFA::convert(a2, (uint64_t)&v15);
  v4 = v24;
  if (!v24)
    return (WTF *)(v4 != 0);
  if (!v17)
    goto LABEL_8;
  v5 = 0;
  v6 = 12 * v17;
  v7 = (char *)v15 + 11;
  do
  {
    v8 = *v7;
    v7 += 12;
    if ((v8 & 1) == 0)
      ++v5;
    v6 -= 12;
  }
  while (v6);
  if (v5 <= 0x63)
  {
LABEL_8:
    WebCore::ContentExtensions::DFACombiner::addDFA(*(_QWORD *)(a1 + 8), (WebCore::ContentExtensions::DFAMinimizer *)&v15);
    goto LABEL_11;
  }
  result = WebCore::ContentExtensions::DFAMinimizer::minimize((WebCore::ContentExtensions::DFAMinimizer *)&v15, v3);
  if (v24)
  {
    WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1)::{lambda(WebCore::ContentExtensions::DFA &&)#1}::operator()(*(_QWORD *)(a1 + 16), (uint64_t *)&v15);
LABEL_11:
    if (v24)
    {
      v11 = v22;
      if (v22)
      {
        v22 = 0;
        v23 = 0;
        WTF::fastFree(v11, v9);
      }
      v12 = v20;
      if (v20)
      {
        v20 = 0;
        v21 = 0;
        WTF::fastFree(v12, v9);
      }
      v13 = v18;
      if (v18)
      {
        v18 = 0;
        v19 = 0;
        WTF::fastFree(v13, v9);
      }
      v14 = v15;
      if (v15)
      {
        v15 = 0;
        v16 = 0;
        WTF::fastFree(v14, v9);
      }
    }
    return (WTF *)(v4 != 0);
  }
  __break(1u);
  return result;
}

WTF *WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1)::{lambda(WebCore::ContentExtensions::DFA &&)#1}::operator()(uint64_t a1, uint64_t *a2)
{
  void *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *result;
  uint64_t *v9[2];
  WTF *v10[2];
  WTF *v11[2];
  WTF *v12[2];
  WTF *v13;
  uint64_t v14;

  if (!**(_BYTE **)a1)
    WebCore::ContentExtensions::addUniversalActionsToDFA((uint64_t)a2, *(_QWORD **)(a1 + 8));
  v13 = 0;
  v14 = 0;
  v9[0] = (uint64_t *)&v13;
  v9[1] = a2;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)v12 = 0u;
  WebCore::ContentExtensions::DFABytecodeCompiler::compile(v9);
  (*(void (**)(_QWORD, WTF **))(***(_QWORD ***)(a1 + 16) + 40))(**(_QWORD **)(a1 + 16), &v13);
  **(_BYTE **)a1 = 1;
  v5 = v12[0];
  if (v12[0])
  {
    v12[0] = 0;
    LODWORD(v12[1]) = 0;
    WTF::fastFree(v5, v4);
  }
  v6 = v11[0];
  if (v11[0])
  {
    v11[0] = 0;
    LODWORD(v11[1]) = 0;
    WTF::fastFree(v6, v4);
  }
  v7 = v10[0];
  if (v10[0])
  {
    v10[0] = 0;
    LODWORD(v10[1]) = 0;
    WTF::fastFree(v7, v4);
  }
  result = v13;
  if (v13)
  {
    v13 = 0;
    LODWORD(v14) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<BOOL WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1)::{lambda(WebCore::ContentExtensions::DFA &&)#2},void,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &>::call(uint64_t a1, uint64_t *a2)
{
  return WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1)::{lambda(WebCore::ContentExtensions::DFA &&)#1}::operator()(*(_QWORD *)(a1 + 8), a2);
}

WTF *WTF::Detail::CallableWrapper<BOOL WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2)::{lambda(WebCore::ContentExtensions::NFA &&)#1},BOOL,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &>::call(uint64_t a1, uint64_t a2)
{
  WebCore::ContentExtensions::DFA *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char v8;
  void *v9;
  WTF *result;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  int v16;
  unsigned int v17;
  WTF *v18;
  int v19;
  WTF *v20;
  int v21;
  WTF *v22;
  int v23;
  unsigned __int8 v24;

  WebCore::ContentExtensions::NFAToDFA::convert(a2, (uint64_t)&v15);
  v4 = v24;
  if (!v24)
    return (WTF *)(v4 != 0);
  if (!v17)
    goto LABEL_8;
  v5 = 0;
  v6 = 12 * v17;
  v7 = (char *)v15 + 11;
  do
  {
    v8 = *v7;
    v7 += 12;
    if ((v8 & 1) == 0)
      ++v5;
    v6 -= 12;
  }
  while (v6);
  if (v5 <= 0x63)
  {
LABEL_8:
    WebCore::ContentExtensions::DFACombiner::addDFA(*(_QWORD *)(a1 + 8), (WebCore::ContentExtensions::DFAMinimizer *)&v15);
    goto LABEL_11;
  }
  result = WebCore::ContentExtensions::DFAMinimizer::minimize((WebCore::ContentExtensions::DFAMinimizer *)&v15, v3);
  if (v24)
  {
    WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2)::{lambda(WebCore::ContentExtensions::DFA &&)#1}::operator()(*(_QWORD *)(a1 + 16), (uint64_t *)&v15);
LABEL_11:
    if (v24)
    {
      v11 = v22;
      if (v22)
      {
        v22 = 0;
        v23 = 0;
        WTF::fastFree(v11, v9);
      }
      v12 = v20;
      if (v20)
      {
        v20 = 0;
        v21 = 0;
        WTF::fastFree(v12, v9);
      }
      v13 = v18;
      if (v18)
      {
        v18 = 0;
        v19 = 0;
        WTF::fastFree(v13, v9);
      }
      v14 = v15;
      if (v15)
      {
        v15 = 0;
        v16 = 0;
        WTF::fastFree(v14, v9);
      }
    }
    return (WTF *)(v4 != 0);
  }
  __break(1u);
  return result;
}

WTF *WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2)::{lambda(WebCore::ContentExtensions::DFA &&)#1}::operator()(uint64_t a1, uint64_t *a2)
{
  void *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *result;
  uint64_t *v9[2];
  WTF *v10[2];
  WTF *v11[2];
  WTF *v12[2];
  WTF *v13;
  uint64_t v14;

  if (!**(_BYTE **)a1)
    WebCore::ContentExtensions::addUniversalActionsToDFA((uint64_t)a2, *(_QWORD **)(a1 + 8));
  v13 = 0;
  v14 = 0;
  v9[0] = (uint64_t *)&v13;
  v9[1] = a2;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)v12 = 0u;
  WebCore::ContentExtensions::DFABytecodeCompiler::compile(v9);
  (*(void (**)(_QWORD, WTF **))(***(_QWORD ***)(a1 + 16) + 48))(**(_QWORD **)(a1 + 16), &v13);
  **(_BYTE **)a1 = 1;
  v5 = v12[0];
  if (v12[0])
  {
    v12[0] = 0;
    LODWORD(v12[1]) = 0;
    WTF::fastFree(v5, v4);
  }
  v6 = v11[0];
  if (v11[0])
  {
    v11[0] = 0;
    LODWORD(v11[1]) = 0;
    WTF::fastFree(v6, v4);
  }
  v7 = v10[0];
  if (v10[0])
  {
    v10[0] = 0;
    LODWORD(v10[1]) = 0;
    WTF::fastFree(v7, v4);
  }
  result = v13;
  if (v13)
  {
    v13 = 0;
    LODWORD(v14) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<BOOL WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2)::{lambda(WebCore::ContentExtensions::DFA &&)#2},void,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &>::call(uint64_t a1, uint64_t *a2)
{
  return WebCore::ContentExtensions::compileToBytecode<WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2>(WebCore::ContentExtensions::CombinedURLFilters &&,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> &&,WebCore::ContentExtensions::compileRuleList(WebCore::ContentExtensions::ContentExtensionCompilationClient &,WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_2)::{lambda(WebCore::ContentExtensions::DFA &&)#1}::operator()(*(_QWORD *)(a1 + 8), a2);
}

void WebCore::ContentExtensions::contentExtensionErrorCategory(void)::ContentExtensionErrorCategory::~ContentExtensionErrorCategory(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x19AEA7644);
}

const char *WebCore::ContentExtensions::contentExtensionErrorCategory(void)::ContentExtensionErrorCategory::name()
{
  return "content extension";
}

void WebCore::ContentExtensions::contentExtensionErrorCategory(void)::ContentExtensionErrorCategory::message(int a1@<W1>, unint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  const char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  const char *v10;
  char *v11;
  const char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  const char *v18;
  char *v19;
  const char *v20;
  __int128 v21;
  char *v22;
  const char *v23;
  char *v24;
  const char *v25;
  __int16 v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;

  switch(a1)
  {
    case 1:
      v3 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v3;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFDA0;
      if (v3 <= "Failed to parse the JSON String." && v3 + 32 > "Failed to parse the JSON String.")
        goto LABEL_119;
      strcpy(v3, "Failed to parse the JSON String.");
      return;
    case 2:
      v4 = (char *)operator new(0x38uLL);
      *(_QWORD *)a2 = v4;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC70;
      v5 = "Invalid input, the top level structure is not an array.";
      goto LABEL_69;
    case 3:
      v6 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v6;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFD90;
      if (v6 <= "Invalid object in the top level array." && v6 + 38 > "Invalid object in the top level array.")
        goto LABEL_119;
      strcpy(v6, "Invalid object in the top level array.");
      return;
    case 4:
      *(_BYTE *)(a2 + 23) = 13;
      if (a2 <= (unint64_t)"Invalid rule." && a2 + 13 > (unint64_t)"Invalid rule.")
        goto LABEL_119;
      strcpy((char *)a2, "Invalid rule.");
      return;
    case 5:
      *(_BYTE *)(a2 + 23) = 16;
      if (a2 <= (unint64_t)"Empty extension." && a2 + 16 > (unint64_t)"Empty extension.")
        goto LABEL_119;
      strcpy((char *)a2, "Empty extension.");
      return;
    case 6:
      v7 = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = v7;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFD80;
      if (v7 <= "Invalid trigger object." && v7 + 23 > "Invalid trigger object.")
        goto LABEL_119;
      strcpy(v7, "Invalid trigger object.");
      return;
    case 7:
      v8 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v8;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFD70;
      if (v8 <= "Invalid url-filter object." && v8 + 26 > "Invalid url-filter object.")
        goto LABEL_119;
      strcpy(v8, "Invalid url-filter object.");
      return;
    case 8:
      v9 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v9;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFCA0;
      v10 = "Invalid trigger flags array.";
      goto LABEL_59;
    case 9:
      v11 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v11;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFD60;
      v12 = "Invalid string in the trigger flags array.";
      goto LABEL_45;
    case 10:
      v13 = (char *)operator new(0x58uLL);
      *(_QWORD *)a2 = v13;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFD50;
      if (v13 <= "Invalid list of if-domain, unless-domain, if-top-url, or unless-top-url conditions."
        && v13 + 83 > "Invalid list of if-domain, unless-domain, if-top-url, or unless-top-url conditions.")
      {
        goto LABEL_119;
      }
      strcpy(v13, "Invalid list of if-domain, unless-domain, if-top-url, or unless-top-url conditions.");
      return;
    case 11:
      v14 = (char *)operator new(0x50uLL);
      *(_QWORD *)a2 = v14;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFD30;
      if (v14 <= "Domains must be lower case ASCII. Use punycode to encode non-ASCII characters."
        && v14 + 78 > "Domains must be lower case ASCII. Use punycode to encode non-ASCII characters.")
      {
        goto LABEL_119;
      }
      strcpy(v14, "Domains must be lower case ASCII. Use punycode to encode non-ASCII characters.");
      return;
    case 12:
      v15 = (char *)operator new(0x68uLL);
      *(_QWORD *)a2 = v15;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFD20;
      if (v15 <= "A trigger cannot have more than one condition (if-domain, unless-domain, if-top-url, or unless-top-url)"
        && v15 + 103 > "A trigger cannot have more than one condition (if-domain, unless-domain, if-top-url, or unless-top-url)")
      {
        goto LABEL_119;
      }
      strcpy(v15, "A trigger cannot have more than one condition (if-domain, unless-domain, if-top-url, or unless-top-url)");
      return;
    case 13:
      v16 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v16;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFD40;
      if (v16 <= "Too many rules in JSON array." && v16 + 29 > "Too many rules in JSON array.")
        goto LABEL_119;
      strcpy(v16, "Too many rules in JSON array.");
      return;
    case 14:
      *(_BYTE *)(a2 + 23) = 22;
      if (a2 <= (unint64_t)"Invalid action object." && a2 + 22 > (unint64_t)"Invalid action object.")
        goto LABEL_119;
      strcpy((char *)a2, "Invalid action object.");
      return;
    case 15:
      *(_BYTE *)(a2 + 23) = 20;
      if (a2 <= (unint64_t)"Invalid action type." && a2 + 20 > (unint64_t)"Invalid action type.")
        goto LABEL_119;
      strcpy((char *)a2, "Invalid action type.");
      return;
    case 16:
      v17 = (char *)operator new(0x40uLL);
      *(_QWORD *)a2 = v17;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC60;
      v18 = "Invalid css-display-none action type. Requires a selector.";
      goto LABEL_73;
    case 17:
      v19 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v19;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC40;
      v20 = "A notify action must have a string notification";
      goto LABEL_95;
    case 18:
      v11 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v11;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFD60;
      v12 = "Invalid or unsupported regular expression.";
LABEL_45:
      if (v11 <= v12 && v11 + 42 > v12)
        goto LABEL_119;
      v21 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v21;
      *(_OWORD *)(v11 + 26) = *(_OWORD *)(v12 + 26);
      v11[42] = 0;
      return;
    case 19:
      v22 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v22;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC20;
      v23 = "A redirect action must have a redirect member";
      goto LABEL_106;
    case 20:
      v24 = (char *)operator new(0x38uLL);
      *(_QWORD *)a2 = v24;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC30;
      v25 = "A redirect extension path must start with a slash";
      if (v24 <= "A redirect extension path must start with a slash"
        && v24 + 49 > "A redirect extension path must start with a slash")
      {
        goto LABEL_119;
      }
      v26 = 104;
      goto LABEL_101;
    case 21:
      v27 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v27;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFCC0;
      if (v27 <= "A redirect url scheme must be a valid scheme"
        && v27 + 44 > "A redirect url scheme must be a valid scheme")
      {
        goto LABEL_119;
      }
      strcpy(v27, "A redirect url scheme must be a valid scheme");
      return;
    case 22:
      v28 = (char *)operator new(0x38uLL);
      *(_QWORD *)a2 = v28;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFCB0;
      if (v28 <= "A redirect url can't have a scheme of javascript"
        && v28 + 48 > "A redirect url can't have a scheme of javascript")
      {
        goto LABEL_119;
      }
      strcpy(v28, "A redirect url can't have a scheme of javascript");
      return;
    case 23:
      v9 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v9;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFCA0;
      v10 = "A redirect url must be valid";
LABEL_59:
      if (v9 <= v10 && v9 + 28 > v10)
        goto LABEL_119;
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *(_OWORD *)(v9 + 12) = *(_OWORD *)(v10 + 12);
      v9[28] = 0;
      return;
    case 24:
      v29 = (char *)operator new(0x68uLL);
      *(_QWORD *)a2 = v29;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC90;
      if (v29 <= "A redirect must have a member named \"extension-path\", \"regex-substitution\", \"transform\" or \"url\""
        && v29 + 96 > "A redirect must have a member named \"extension-path\", \"regex-substitution\", \"transform\" or \"url\"")
      {
        goto LABEL_119;
      }
      strcpy(v29, "A redirect must have a member named \"extension-path\", \"regex-substitution\", \"transform\" or \"url\"");
      return;
    case 25:
      v30 = (char *)operator new(0x50uLL);
      *(_QWORD *)a2 = v30;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC80;
      if (v30 <= "A redirect port must be either empty or a number between 0 and 65535, inclusive"
        && v30 + 79 > "A redirect port must be either empty or a number between 0 and 65535, inclusive")
      {
        goto LABEL_119;
      }
      strcpy(v30, "A redirect port must be either empty or a number between 0 and 65535, inclusive");
      return;
    case 26:
      v4 = (char *)operator new(0x38uLL);
      *(_QWORD *)a2 = v4;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC70;
      v5 = "A redirect query must either be empty or begin with '?'";
LABEL_69:
      if (v4 <= v5 && v4 + 55 > v5)
        goto LABEL_119;
      v31 = *((_OWORD *)v5 + 1);
      *(_OWORD *)v4 = *(_OWORD *)v5;
      *((_OWORD *)v4 + 1) = v31;
      *((_OWORD *)v4 + 2) = *((_OWORD *)v5 + 2);
      *(_QWORD *)(v4 + 47) = *(_QWORD *)(v5 + 47);
      v4[55] = 0;
      return;
    case 27:
      v17 = (char *)operator new(0x40uLL);
      *(_QWORD *)a2 = v17;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC60;
      v18 = "A redirect fragment must either be empty or begin with '#'";
LABEL_73:
      if (v17 <= v18 && v17 + 58 > v18)
        goto LABEL_119;
      v32 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v32;
      *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
      *(_OWORD *)(v17 + 42) = *(_OWORD *)(v18 + 42);
      v17[58] = 0;
      return;
    case 28:
      v33 = (char *)operator new(0x38uLL);
      *(_QWORD *)a2 = v33;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFD10;
      if (v33 <= "A remove-parameters value must be an array of strings"
        && v33 + 53 > "A remove-parameters value must be an array of strings")
      {
        goto LABEL_119;
      }
      strcpy(v33, "A remove-parameters value must be an array of strings");
      return;
    case 29:
      v34 = (char *)operator new(0x38uLL);
      *(_QWORD *)a2 = v34;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFD00;
      if (v34 <= "An add-or-replace-parameters value must be an array"
        && v34 + 51 > "An add-or-replace-parameters value must be an array")
      {
        goto LABEL_119;
      }
      strcpy(v34, "An add-or-replace-parameters value must be an array");
      return;
    case 30:
      v35 = (char *)operator new(0x48uLL);
      *(_QWORD *)a2 = v35;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFCF0;
      if (v35 <= "Members of the add-or-replace-parameters array must be a dictionary"
        && v35 + 67 > "Members of the add-or-replace-parameters array must be a dictionary")
      {
        goto LABEL_119;
      }
      strcpy(v35, "Members of the add-or-replace-parameters array must be a dictionary");
      return;
    case 31:
      v36 = (char *)operator new(0x58uLL);
      *(_QWORD *)a2 = v36;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFCE0;
      if (v36 <= "Members of the add-or-replace-parameters array must contain a key that is a string"
        && v36 + 82 > "Members of the add-or-replace-parameters array must contain a key that is a string")
      {
        goto LABEL_119;
      }
      strcpy(v36, "Members of the add-or-replace-parameters array must contain a key that is a string");
      return;
    case 32:
      v37 = (char *)operator new(0x58uLL);
      *(_QWORD *)a2 = v37;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFCD0;
      if (v37 <= "Members of the add-or-replace-parameters array must contain a value that is a string"
        && v37 + 84 > "Members of the add-or-replace-parameters array must contain a value that is a string")
      {
        goto LABEL_119;
      }
      strcpy(v37, "Members of the add-or-replace-parameters array must contain a value that is a string");
      return;
    case 33:
      v38 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v38;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC00;
      if (v38 <= "A headers member must be an array" && v38 + 33 > "A headers member must be an array")
        goto LABEL_119;
      strcpy(v38, "A headers member must be an array");
      return;
    case 34:
      v19 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v19;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC40;
      v20 = "A modify-headers operation must be a dictionary";
LABEL_95:
      if (v19 <= v20 && v19 + 47 > v20)
        goto LABEL_119;
      v39 = *((_OWORD *)v20 + 1);
      *(_OWORD *)v19 = *(_OWORD *)v20;
      *((_OWORD *)v19 + 1) = v39;
      *(_OWORD *)(v19 + 31) = *(_OWORD *)(v20 + 31);
      v19[47] = 0;
      return;
    case 35:
      v24 = (char *)operator new(0x38uLL);
      *(_QWORD *)a2 = v24;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC30;
      v25 = "A modify-headers operation must have an operation";
      if (v24 <= "A modify-headers operation must have an operation"
        && v24 + 49 > "A modify-headers operation must have an operation")
      {
        goto LABEL_119;
      }
      v26 = 110;
LABEL_101:
      *((_WORD *)v24 + 24) = v26;
      v40 = *((_OWORD *)v25 + 1);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v40;
      *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
      return;
    case 36:
      v41 = (char *)operator new(0x60uLL);
      *(_QWORD *)a2 = v41;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC50;
      if (v41 <= "A modify-headers operation must have an operation that is either \"set\", \"append\", or \"remove\""
        && v41 + 93 > "A modify-headers operation must have an operation that is either \"set\", \"append\", or \"remove\"")
      {
        goto LABEL_119;
      }
      strcpy(v41, "A modify-headers operation must have an operation that is either \"set\", \"append\", or \"remove\"");
      return;
    case 37:
      v22 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v22;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC20;
      v23 = "A modify-headers operation must have a header";
LABEL_106:
      if (v22 <= v23 && v22 + 45 > v23)
        goto LABEL_119;
      v42 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v42;
      *(_OWORD *)(v22 + 29) = *(_OWORD *)(v23 + 29);
      v22[45] = 0;
      break;
    case 38:
      v43 = (char *)operator new(0x48uLL);
      *(_QWORD *)a2 = v43;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFC10;
      if (v43 <= "A modify-headers operation of \"set\" or \"append\" must have a value"
        && v43 + 65 > "A modify-headers operation of \"set\" or \"append\" must have a value")
      {
        goto LABEL_119;
      }
      strcpy(v43, "A modify-headers operation of \"set\" or \"append\" must have a value");
      break;
    case 39:
      v44 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v44;
      *(_OWORD *)(a2 + 8) = xmmword_1968DFBF0;
      if (v44 <= "A priority must be a positive integer" && v44 + 37 > "A priority must be a positive integer")
        goto LABEL_119;
      strcpy(v44, "A priority must be a positive integer");
      break;
    case 40:
      *(_BYTE *)(a2 + 23) = 18;
      if (a2 <= (unint64_t)"Internal I/O error" && a2 + 18 > (unint64_t)"Internal I/O error")
LABEL_119:
        __break(1u);
      else
        strcpy((char *)a2, "Internal I/O error");
      break;
    default:
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      break;
  }
}

uint64_t WebCore::ContentExtensions::ContentExtensionRule::ContentExtensionRule(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char v11;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  a2[2] = 0;
  v7 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 24) = v7;
  v8 = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 28) = v8;
  *(_DWORD *)(a1 + 144) = -1;
  v9 = *(unsigned int *)(a3 + 112);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS7_18BlockCookiesActionENS7_28CSSDisplayNoneSelectorActionENS7_12NotifyActionENS7_25IgnorePreviousRulesActionENS7_15MakeHTTPSActionENS7_19ModifyHeadersActionENS7_14RedirectActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v9])(&v11);
    *(_DWORD *)(a1 + 144) = v9;
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char v11;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  a2[2] = 0;
  v7 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 24) = v7;
  v8 = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 28) = v8;
  *(_DWORD *)(a1 + 144) = -1;
  v9 = *(unsigned int *)(a3 + 112);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS7_18BlockCookiesActionENS7_28CSSDisplayNoneSelectorActionENS7_12NotifyActionENS7_25IgnorePreviousRulesActionENS7_15MakeHTTPSActionENS7_19ModifyHeadersActionENS7_14RedirectActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v9])(&v11);
    *(_DWORD *)(a1 + 144) = v9;
  }
  return a1;
}

uint64_t WebCore::ContentExtensions::DeserializedAction::deserialize@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unsigned int *v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  char v15[8];
  _QWORD v16[4];
  int v17;
  int v18;
  char v19;
  char v20[8];
  _QWORD v21[4];
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a2 <= a3)
  {
    __break(0xC471u);
    goto LABEL_32;
  }
  v6 = a3 + 1;
  v7 = a2 >= v6;
  v8 = a2 - v6;
  if (!v7)
LABEL_32:
    __break(1u);
  v10 = (unsigned int *)(a1 + v6);
  v11 = *(unsigned __int8 *)(a1 + a3);
  if (v11 != 7)
  {
    if (v11 == 6)
    {
      WebCore::ContentExtensions::ModifyHeadersAction::deserialize(v10, v8, (uint64_t)v15);
      v20[0] = v15[0];
      v21[0] = v16[0];
      v21[1] = v16[1];
      v21[2] = v16[2];
      v21[3] = v16[3];
      v22 = v17;
    }
    else
    {
      switch(*(_BYTE *)(a1 + a3))
      {
        case 2:
          if (v8 <= 3 || *v10 != 3 && v8 - 4 < (unint64_t)*v10 - 4)
            goto LABEL_32;
          WTF::String::fromUTF8();
          v11 = 2;
          break;
        case 3:
          if (v8 <= 3 || *v10 != 3 && v8 - 4 < (unint64_t)*v10 - 4)
            goto LABEL_32;
          WTF::String::fromUTF8();
          v11 = 3;
          break;
        case 4:
          v11 = 4;
          break;
        case 5:
          break;
        default:
          v11 = v11 == 1;
          break;
      }
    }
    v24 = v11;
    goto LABEL_19;
  }
  WebCore::ContentExtensions::RedirectAction::deserialize(v10, v8, (uint64_t)v15);
  v20[0] = v15[0];
  LOBYTE(v21[0]) = 0;
  v23 = -1;
  v12 = v18;
  if (v18 == -1)
  {
    v24 = 7;
    goto LABEL_18;
  }
  ((void (*)(char *, _QWORD *, _QWORD *))off_1E3395558[v18])(&v19, v21, v16);
  v23 = v12;
  v24 = 7;
  if (v18 == -1)
  {
LABEL_18:
    v11 = 7;
LABEL_19:
    *(_BYTE *)a4 = 0;
    *(_DWORD *)(a4 + 112) = -1;
    goto LABEL_20;
  }
  result = ((uint64_t (*)(char *, _QWORD *))off_1E33954F8[v18])(&v19, v16);
  v11 = v24;
  *(_BYTE *)a4 = 0;
  *(_DWORD *)(a4 + 112) = -1;
  if (v11 == -1)
  {
    *(_DWORD *)(a4 + 120) = a3;
    return result;
  }
LABEL_20:
  result = ((uint64_t (*)(char *, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS7_18BlockCookiesActionENS7_28CSSDisplayNoneSelectorActionENS7_12NotifyActionENS7_25IgnorePreviousRulesActionENS7_15MakeHTTPSActionENS7_19ModifyHeadersActionENS7_14RedirectActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v11])(v15, a4, v20);
  *(_DWORD *)(a4 + 112) = v11;
  v14 = v24;
  *(_DWORD *)(a4 + 120) = a3;
  if ((_DWORD)v14 != -1)
    return ((uint64_t (*)(char *, char *))off_1E33954A0[v14])(v15, v20);
  return result;
}

uint64_t WebCore::ContentExtensions::Trigger::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = WTF::String::isolatedCopy();
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 8);
  *(_WORD *)(a2 + 9) = *(_WORD *)(a1 + 9);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a2 + 24) = v5;
      *(_QWORD *)(a2 + 16) = result;
      v6 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v6)
      {
        v7 = result;
        v8 = 0;
        v9 = *(_QWORD *)(a1 + 16);
        v10 = 8 * v6;
        do
        {
          result = WTF::String::isolatedCopy();
          *(_QWORD *)(v7 + 8 * v8++) = v11;
          *(_DWORD *)(a2 + 28) = v8;
          v9 += 8;
          v10 -= 8;
        }
        while (v10);
      }
    }
  }
  return result;
}

unsigned int *WebCore::ContentExtensions::Trigger::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WTF::String::isolatedCopy();
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 8);
  *(_WORD *)(a2 + 9) = *(_WORD *)(a1 + 9);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  return WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((unsigned int *)(a1 + 16), a2 + 16);
}

_QWORD *WebCore::ContentExtensions::Action::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  char v6;
  char *v7;
  _QWORD v8[14];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v7 = &v6;
  result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, uint64_t))off_1E3395578[v3])(v8, &v7, a1);
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 112) = -1;
  v5 = v9;
  if (v9 != -1)
  {
    result = (_QWORD *)((uint64_t (*)(char **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS7_18BlockCookiesActionENS7_28CSSDisplayNoneSelectorActionENS7_12NotifyActionENS7_25IgnorePreviousRulesActionENS7_15MakeHTTPSActionENS7_19ModifyHeadersActionENS7_14RedirectActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v9])(&v7, a2, v8);
    *(_DWORD *)(a2 + 112) = v5;
    if (v9 != -1)
      return (_QWORD *)((uint64_t (*)(char **, _QWORD *))off_1E33954A0[v9])(&v7, v8);
  }
  return result;
}

{
  uint64_t v3;
  _QWORD *result;
  int v5;
  char v6;
  char *v7;
  _QWORD v8[14];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v7 = &v6;
  result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, uint64_t))off_1E33955B8[v3])(v8, &v7, a1);
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 112) = -1;
  v5 = v9;
  if (v9 != -1)
  {
    result = (_QWORD *)((uint64_t (*)(char **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS7_18BlockCookiesActionENS7_28CSSDisplayNoneSelectorActionENS7_12NotifyActionENS7_25IgnorePreviousRulesActionENS7_15MakeHTTPSActionENS7_19ModifyHeadersActionENS7_14RedirectActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v9])(&v7, a2, v8);
    *(_DWORD *)(a2 + 112) = v5;
    if (v9 != -1)
      return (_QWORD *)((uint64_t (*)(char **, _QWORD *))off_1E33954A0[v9])(&v7, v8);
  }
  return result;
}

uint64_t WebCore::ContentExtensions::serializeString(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;
  void *v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  WTF *v25;

  WTF::String::utf8();
  if (v25)
    v2 = *((_DWORD *)v25 + 2) + 4;
  else
    v2 = 4;
  result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, (WTF *)(*(unsigned int *)(a1 + 12) + (unint64_t)v2));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 12);
  v7 = v6 + 4;
  if (v6 + 4 > v5)
  {
    v14 = v5 + (v5 >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v7)
      v16 = v6 + 4;
    else
      v16 = v15;
    if (HIDWORD(v16))
    {
      __break(0xC471u);
      JUMPOUT(0x1957324A8);
    }
    v17 = *(void **)a1;
    v18 = (void *)WTF::fastMalloc((WTF *)v16);
    *(_DWORD *)(a1 + 8) = v16;
    *(_QWORD *)a1 = v18;
    result = (uint64_t)memcpy(v18, v17, v6);
    if (v17)
    {
      if (*(void **)a1 == v17)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v17, v4);
    }
  }
  v8 = *(unsigned int *)(a1 + 12);
  if (v7 < v8)
    goto LABEL_41;
  *(_DWORD *)(*(_QWORD *)a1 + v8) = v2;
  *(_DWORD *)(a1 + 12) = v7;
  v9 = v25;
  if (!v25)
    return result;
  v10 = *((_QWORD *)v25 + 1);
  if (v10)
  {
    v11 = v10 + v7;
    v12 = *(unsigned int *)(a1 + 8);
    if (v11 <= v12)
    {
LABEL_9:
      v13 = *(unsigned int *)(a1 + 12);
      if (v11 < v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1957324A0);
      }
      result = (uint64_t)memcpy((void *)(*(_QWORD *)a1 + v13), (char *)v25 + 16, v10);
      *(_DWORD *)(a1 + 12) = v11;
      v9 = v25;
      goto LABEL_11;
    }
    v19 = v12 + (v12 >> 2);
    if (v19 >= 0x10)
      v20 = v19 + 1;
    else
      v20 = 16;
    if (v20 <= v11)
      v21 = v10 + v7;
    else
      v21 = v20;
    if (!HIDWORD(v21))
    {
      v22 = *(void **)a1;
      v23 = (void *)WTF::fastMalloc((WTF *)v21);
      *(_DWORD *)(a1 + 8) = v21;
      *(_QWORD *)a1 = v23;
      memcpy(v23, v22, v7);
      if (v22)
      {
        if (*(void **)a1 == v22)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v22, v24);
      }
      goto LABEL_9;
    }
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x195732490);
  }
LABEL_11:
  if (*(_DWORD *)v9 == 1)
    return WTF::fastFree(v9, v4);
  --*(_DWORD *)v9;
  return result;
}

WebCore::ContentExtensions::ContentExtensionStyleSheet *WebCore::ContentExtensions::ContentExtensionStyleSheet::ContentExtensionStyleSheet(WebCore::ContentExtensions::ContentExtensionStyleSheet *this, WebCore::Document *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  WTF::StringImpl *v17;
  __int128 v18;
  __int128 v19;
  char v20;
  WebCore::StyleSheetContents **v21;
  WebCore::StyleSheetContents *v22;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E3395490;
  v17 = 0;
  WTF::URL::invalidate((WTF::URL *)&v17);
  v5 = v17;
  if (v17)
    *(_DWORD *)v17 += 2;
  v15 = v18;
  v16 = v19;
  v6 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v6 != -1)
  {
    v22 = (WebCore::StyleSheetContents *)&v20;
    v21 = &v22;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v7 = v17;
  v17 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = WTF::fastMalloc((WTF *)0xD8);
  *(_DWORD *)v8 = 1;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  v9 = WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  *(_QWORD *)(v8 + 112) = v9;
  *(_WORD *)(v8 + 120) = 0;
  *(_BYTE *)(v8 + 122) = 1;
  *(_QWORD *)(v8 + 123) = 0;
  *(_BYTE *)(v8 + 131) = 0;
  if (v5)
    *(_DWORD *)v5 += 2;
  *(_QWORD *)(v8 + 136) = v5;
  *(_OWORD *)(v8 + 144) = v15;
  *(_OWORD *)(v8 + 160) = v16;
  *(_QWORD *)(v8 + 176) = 0;
  *(_DWORD *)(v8 + 184) = 0;
  *(_WORD *)(v8 + 188) = 0;
  *(_DWORD *)(v8 + 190) = 0;
  *(_QWORD *)(v8 + 200) = 0;
  *(_QWORD *)(v8 + 208) = 0;
  v22 = (WebCore::StyleSheetContents *)v8;
  LOWORD(v21) = 0;
  v10 = WTF::fastMalloc((WTF *)0x98);
  v17 = 0;
  *((_QWORD *)this + 2) = WebCore::CSSStyleSheet::CSSStyleSheet(v10, (uint64_t *)&v22, (uint64_t)a2, &v17, 0, &v21);
  if (!v22)
  {
LABEL_15:
    if (!v5)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (*(_DWORD *)v22 != 1)
  {
    --*(_DWORD *)v22;
    goto LABEL_15;
  }
  WebCore::StyleSheetContents::~StyleSheetContents(v22, v11);
  WTF::fastFree(v13, v14);
  if (!v5)
    goto LABEL_18;
LABEL_16:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v11);
  else
    *(_DWORD *)v5 -= 2;
LABEL_18:
  *((_QWORD *)this + 3) = 0;
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 120) = 1;
  return this;
}

void WebCore::ContentExtensions::ContentExtensionStyleSheet::~ContentExtensionStyleSheet(WebCore::ContentExtensions::ContentExtensionStyleSheet *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3395490;
  v3 = *((_QWORD *)this + 2);
  v4 = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(v3 + 96) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v9 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v9)
      {
        v12 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v9));
        v4 = v12;
      }
      v10 = *(WTF **)(v4 + 16);
      if (v10)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v11 = v4;
        WTF::fastFree(v10, a2);
        v4 = v11;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
  v8 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3395490;
  v3 = *((_QWORD *)this + 2);
  v4 = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(v3 + 96) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v9 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v9)
      {
        v12 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v9));
        v4 = v12;
      }
      v10 = *(WTF **)(v4 + 16);
      if (v10)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v11 = v4;
        WTF::fastFree(v10, a2);
        v4 = v11;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
  v8 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  WTF::fastFree(this, a2);
}

BOOL WebCore::ContentExtensions::ContentExtensionStyleSheet::addDisplayNoneSelector(WebCore::ContentExtensions::ContentExtensionStyleSheet *this, WTF::StringImpl **a2, int a3)
{
  int v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  int *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WebCore::StyleSheetContents *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  char v25;
  int v26;

  v26 = a3;
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)this + 3, &v26, (uint64_t)&v22);
  v5 = v24;
  if (!(_BYTE)v24)
    return v5 != 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 1;
  v6 = *a2;
  if (*a2)
  {
    v7 = *((_DWORD *)v6 + 1);
    *(_DWORD *)v6 += 2;
  }
  else
  {
    v7 = 0;
  }
  v22 = v6;
  v24 = v7;
  LOBYTE(v21) = 123;
  WTF::StringBuilder::append();
  if ((_MergedGlobals_159 & 1) != 0)
  {
    v9 = (int *)qword_1ECE828F8;
  }
  else
  {
    v9 = &WebCore::ContentExtensions::ContentExtensionsBackend::displayNoneCSSRule(void)::$_0::operator() const(void)::impl;
    WebCore::ContentExtensions::ContentExtensionsBackend::displayNoneCSSRule(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE828F8 = (uint64_t)&WebCore::ContentExtensions::ContentExtensionsBackend::displayNoneCSSRule(void)::$_0::operator() const(void)::impl;
    _MergedGlobals_159 = 1;
  }
  if (!v24 && !v23)
  {
    if (v9)
      *v9 += 2;
    v10 = v22;
    v22 = (WTF::StringImpl *)v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v8);
        v9 = (int *)qword_1ECE828F8;
        if (!qword_1ECE828F8)
          goto LABEL_15;
        goto LABEL_14;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (!v9)
    {
LABEL_15:
      v24 = v9;
      goto LABEL_16;
    }
LABEL_14:
    LODWORD(v9) = v9[1];
    goto LABEL_15;
  }
  if (v9 && (v9[4] & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_16:
  LOBYTE(v21) = 125;
  if (!v23 || (v11 = v24, v24 >= *((_DWORD *)v23 + 1)) || v22)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v12 = *((_DWORD *)v23 + 4);
    v13 = *((_QWORD *)v23 + 1);
    ++v24;
    if ((v12 & 4) != 0)
      *(_BYTE *)(v13 + v11) = 125;
    else
      *(_WORD *)(v13 + 2 * v11) = 125;
  }
  v14 = *(WebCore::StyleSheetContents **)(*((_QWORD *)this + 2) + 24);
  v15 = v22;
  if (v22
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v22),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v22),
        (v15 = v22) != 0))
  {
    *(_DWORD *)v15 += 2;
  }
  v21 = v15;
  WebCore::StyleSheetContents::parseString(v14, (const WTF::String *)&v21);
  v17 = v21;
  v21 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v23;
  v23 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v22;
  v22 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  return v5 != 0;
}

uint64_t *WebCore::ContentExtensions::ContentExtensionsBackend::displayNoneCSSRule(WebCore::ContentExtensions::ContentExtensionsBackend *this)
{
  if ((_MergedGlobals_159 & 1) == 0)
  {
    WebCore::ContentExtensions::ContentExtensionsBackend::displayNoneCSSRule(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE828F8 = (uint64_t)&WebCore::ContentExtensions::ContentExtensionsBackend::displayNoneCSSRule(void)::$_0::operator() const(void)::impl;
    _MergedGlobals_159 = 1;
  }
  return &qword_1ECE828F8;
}

uint64_t WebCore::ContentExtensions::net::FixedSetIncrementalLookup::GetResultForCurrentSequence(WebCore::ContentExtensions::net::FixedSetIncrementalLookup *this, char a2)
{
  WebCore::ContentExtensions::net::FixedSetIncrementalLookup *v3;
  char v4;
  int v5;
  unsigned int v6;
  uint64_t v7;

  if (a2)
  {
    if ((*(_BYTE *)this & 0xE0) == 0x80)
      return *(_BYTE *)this & 0x1F;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v3 = this;
    while (this)
    {
      v4 = *(_BYTE *)this;
      v5 = *(_BYTE *)this & 0x60;
      if (v5 == 96)
      {
        v6 = ((v4 & 0x1F) << 16) | (*((unsigned __int8 *)this + 1) << 8) | *((unsigned __int8 *)this + 2);
        v7 = 3;
      }
      else if (v5 == 64)
      {
        v6 = *((unsigned __int8 *)this + 1) | ((v4 & 0x1F) << 8);
        v7 = 2;
      }
      else
      {
        v6 = v4 & 0x3F;
        v7 = 1;
      }
      v3 = (WebCore::ContentExtensions::net::FixedSetIncrementalLookup *)((char *)v3 + v6);
      if (v4 < 0)
        this = 0;
      else
        this = (WebCore::ContentExtensions::net::FixedSetIncrementalLookup *)((char *)this + v7);
      if ((*(_BYTE *)v3 & 0xE0) == 0x80)
        return *(_BYTE *)v3 & 0x1F;
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t WebCore::ContentExtensions::ContentExtensionsBackend::shouldBeMadeSecure(WebCore::ContentExtensions::ContentExtensionsBackend *this, const WTF::URL *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v7[5];
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v8 = 0;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v7[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v7);
  WebCore::ContentExtensions::makeSecureIfNecessary((uint64_t)&v8, this, (WTF::URL *)v7);
  v4 = v7[0];
  v7[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = BYTE1(v8);
  WebCore::ContentRuleListResults::~ContentRuleListResults((WebCore::ContentRuleListResults *)&v8, v3);
  return v5;
}

WebCore::ContentExtensions::ContentExtension **WebCore::ContentExtensions::ContentExtensionsBackend::addContentExtension(WebCore::ContentExtensions::ContentExtension **result, WTF::StringImpl **a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  WebCore::ContentExtensions::ContentExtension *v9;

  if (*a2)
  {
    if (*((_DWORD *)*a2 + 1))
    {
      v6 = (uint64_t *)result;
      WebCore::ContentExtensions::ContentExtension::create((_DWORD **)a2, a3, a4, a5, (uint64_t *)&v9);
      WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>((uint64_t)&v8, v6, a2, &v9);
      return WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>::~Ref(&v9, v7);
    }
  }
  return result;
}

WebCore::ContentExtensions::ContentExtension **WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>::~Ref(WebCore::ContentExtensions::ContentExtension **a1, void *a2)
{
  WebCore::ContentExtensions::ContentExtension *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::ContentExtensions::ContentExtension::~ContentExtension(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebCore::ContentExtensions::ContentExtensionsBackend::removeContentExtension(uint64_t this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v21;
  void *v22;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = (uint64_t *)this;
    v6 = *(_DWORD *)(v3 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      this = *(_QWORD *)(v3 + 16 * v10);
      if (this != -1)
      {
        if (!this)
        {
          v11 = *v5;
          if (!*v5)
            return this;
          v12 = *(unsigned int *)(v11 - 4);
          v13 = v11 + 16 * v12;
          goto LABEL_14;
        }
        this = WTF::equal((WTF *)this, *a2, a3);
        if ((this & 1) != 0)
          break;
      }
      ++i;
    }
    v13 = v3 + 16 * v10;
    v11 = *v5;
    if (!*v5)
      goto LABEL_15;
    v12 = *(unsigned int *)(v11 - 4);
LABEL_14:
    v11 += 16 * v12;
    if (v11 == v13)
      return this;
LABEL_15:
    if (v11 != v13)
    {
      v14 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = -1;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      this = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 1)
        {
          WebCore::ContentExtensions::ContentExtension::~ContentExtension((WebCore::ContentExtensions::ContentExtension *)this, a2);
          this = WTF::fastFree(v21, v22);
        }
        else
        {
          --*(_DWORD *)this;
        }
      }
      ++*(_DWORD *)(*v5 - 16);
      v15 = *v5;
      if (*v5)
        v16 = *(_DWORD *)(v15 - 12) - 1;
      else
        v16 = -1;
      *(_DWORD *)(v15 - 12) = v16;
      v17 = *v5;
      if (*v5)
      {
        v18 = 6 * *(_DWORD *)(v17 - 12);
        v19 = *(_DWORD *)(v17 - 4);
        if (v18 < v19 && v19 >= 9)
          return (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v5, v19 >> 1, 0);
      }
    }
  }
  return this;
}

WTF::StringImpl ***WebCore::ContentExtensions::ContentExtensionsBackend::removeAllContentExtensions(WTF::StringImpl ***this, void *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WebCore::ContentExtensions::ContentExtension *v6;
  WTF *v7;
  void *v8;

  v2 = *this;
  if (*this)
  {
    *this = 0;
    v3 = *((unsigned int *)v2 - 1);
    if ((_DWORD)v3)
    {
      v4 = v2;
      do
      {
        v5 = *v4;
        if (*v4 != (WTF::StringImpl *)-1)
        {
          v6 = v4[1];
          v4[1] = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
            {
              WebCore::ContentExtensions::ContentExtension::~ContentExtension(v6, a2);
              WTF::fastFree(v7, v8);
              v5 = *v4;
            }
            else
            {
              --*(_DWORD *)v6;
            }
          }
          *v4 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
              WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v5 -= 2;
          }
        }
        v4 += 2;
        --v3;
      }
      while (v3);
    }
    return (WTF::StringImpl ***)WTF::fastFree((WTF *)(v2 - 2), a2);
  }
  return this;
}

WTF *WebCore::ContentExtensions::DFABytecodeInterpreter::interpret@<X0>(WebCore::ContentExtensions::DFABytecodeInterpreter *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  char v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v36;
  WTF *result;
  WTF *v38;
  unsigned int v39;
  uint64_t v40;

  v5 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_76;
  if ((*(_BYTE *)(v5 + 16) & 4) == 0)
    goto LABEL_74;
  v38 = 0;
  v6 = *(char **)(v5 + 8);
  v7 = *(unsigned int *)(v5 + 4);
  while (1)
  {
    *a3 = 0;
    v8 = *((_QWORD *)this + 1);
    if (!v8)
      break;
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)this;
LABEL_6:
    v12 = *(_DWORD *)(v11 + v9);
    v13 = v10 + 4;
    v39 = v10 + 4;
    if (v10)
      goto LABEL_17;
    if (v13 >= v12)
    {
      v13 = 4;
LABEL_16:
      if (v8 > v13)
      {
LABEL_17:
        while (2)
        {
          v11 = *(_QWORD *)this;
          v15 = *(unsigned __int8 *)(*(_QWORD *)this + v13);
          v16 = v13;
          switch(v15 & 0xF)
          {
            case 0:
              if (v7)
                v17 = *(_BYTE *)(MEMORY[0x1E0CBF868] + *v6);
              else
                v17 = 0;
              v23 = v15 & 0x30;
              if (*(unsigned __int8 *)(v11 + v13 + 1) == v17)
                __asm { BR              X11 }
              goto LABEL_41;
            case 1:
              if (v7)
                v18 = *v6;
              else
                v18 = 0;
              v23 = v15 & 0x30;
              if (*(unsigned __int8 *)(v11 + v13 + 1) == v18)
                __asm { BR              X11 }
LABEL_41:
              v24 = v13 + (v23 >> 4);
              goto LABEL_55;
            case 2:
              if (v7)
                v19 = *v6;
              else
                v19 = 0;
              v25 = *(char *)(MEMORY[0x1E0CBF868] + v19);
              v26 = *(unsigned __int8 *)(v11 + v13 + 1);
              v27 = v15 & 0x30;
              v28 = *(unsigned __int8 *)(v11 + v13 + 2);
              if (v25 >= v26 && v25 <= v28)
                __asm { BR              X12 }
              v30 = (v27 >> 4) + 1;
              v31 = v28 - v26;
              goto LABEL_54;
            case 3:
              if (v7)
                v20 = *v6;
              else
                v20 = 0;
              v32 = *(unsigned __int8 *)(v11 + v13 + 1);
              v33 = v15 & 0x30;
              v34 = *(unsigned __int8 *)(v11 + v13 + 2);
              if (v20 >= v32 && v20 <= v34)
                __asm { BR              X12 }
              v30 = (v33 >> 4) + 1;
              v31 = v34 - v32;
LABEL_54:
              v24 = v13 + v30 + v30 * v31;
LABEL_55:
              v13 = v24 + 3;
              v39 = v24 + 3;
              continue;
            case 4:
              if (v7)
                v21 = *(_BYTE *)(MEMORY[0x1E0CBF868] + *v6);
              else
                v21 = 0;
              v36 = v15 & 0x30;
              if (v21 >= (int)*(unsigned __int8 *)(v11 + v13 + 1) && v21 <= (int)*(unsigned __int8 *)(v11 + v13 + 2))
                __asm { BR              X11 }
              goto LABEL_63;
            case 5:
              if (v7)
                v22 = *v6;
              else
                v22 = 0;
              v36 = v15 & 0x30;
              if (v22 >= (int)*(unsigned __int8 *)(v11 + v13 + 1) && v22 <= (int)*(unsigned __int8 *)(v11 + v13 + 2))
                __asm { BR              X11 }
LABEL_63:
              v13 += (v36 >> 4) + 4;
              v39 = v16 + (v36 >> 4) + 4;
              continue;
            case 6:
              if (*((_QWORD *)this + 1) > (unint64_t)v13)
                __asm { BR              X11 }
              goto LABEL_73;
            case 8:
              WebCore::ContentExtensions::DFABytecodeInterpreter::interpretTestFlagsAndAppendAction(v11, *((_QWORD *)this + 1), &v39);
              v13 = v39;
              continue;
            case 0xA:
              goto LABEL_67;
            case 0xB:
              if (v7)
                __asm { BR              X11 }
LABEL_67:
              v39 = v12 + v10;
              v8 = *((_QWORD *)this + 1);
              v10 += v12;
              v9 = v10;
              if (v8 <= v10)
                goto LABEL_68;
              goto LABEL_6;
            default:
              __break(0xC471u);
              JUMPOUT(0x1957335B8);
          }
        }
      }
      break;
    }
    v13 = 4;
    while (1)
    {
      v14 = *(unsigned __int8 *)(*(_QWORD *)this + v13);
      if ((v14 & 0xF) != 8)
        break;
      WebCore::ContentExtensions::DFABytecodeInterpreter::interpretTestFlagsAndAppendAction(*(_QWORD *)this, *((_QWORD *)this + 1), &v39);
      v13 = v39;
      if (v39 >= v12)
        goto LABEL_14;
    }
    if ((v14 & 0xF) != 6)
    {
LABEL_14:
      v8 = *((_QWORD *)this + 1);
      goto LABEL_16;
    }
    if (*((_QWORD *)this + 1) > (unint64_t)v13)
      __asm { BR              X9 }
LABEL_73:
    __break(1u);
LABEL_74:
    WTF::String::utf8();
    if (v40)
    {
      v6 = (char *)(v40 + 16);
      v38 = (WTF *)v40;
      v7 = *(_QWORD *)(v40 + 8);
    }
    else
    {
LABEL_76:
      v38 = 0;
      v6 = 0;
      v7 = 0;
    }
  }
LABEL_68:
  result = v38;
  if (v38)
  {
    if (*(_DWORD *)v38 == 1)
      return (WTF *)WTF::fastFree(v38, a2);
    else
      --*(_DWORD *)v38;
  }
  return result;
}

WTF *WebCore::ContentExtensions::ContentExtensionsBackend::globalDisplayNoneStyleSheet(WebCore::ContentExtensions::ContentExtensionsBackend *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int i;
  uint64_t v9;
  WTF *result;
  uint64_t v11;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  v7 = v6 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v6 >> 8;
  for (i = 0; ; v7 = ++i + v9)
  {
    v9 = v7 & v5;
    result = *(WTF **)(v3 + 16 * v9);
    if (result != (WTF *)-1)
    {
      if (!result)
        return result;
      if ((WTF::equal(result, *a2, a3) & 1) != 0)
        break;
    }
  }
  v11 = *(_QWORD *)(v3 + 16 * v9 + 8);
  if (v11)
    return *(WTF **)(v11 + 64);
  else
    return 0;
}

uint64_t WebCore::ContentExtensions::customTrackerBlockingMessageForConsole@<X0>(uint64_t this@<X0>, const WebCore::ContentRuleListResults *a2@<X1>, const WTF::URL *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  size_t v27;
  _BYTE *v28;
  size_t v29;
  unsigned __int128 *v30;
  unsigned __int128 *v31;
  unsigned __int128 v32;
  size_t v33;
  uint64_t v34;
  unsigned __int128 v35;
  char v36;
  char v37;
  uint64_t v38;

  if (!*(_DWORD *)(this + 52))
  {
LABEL_9:
    *a4 = 0;
    a4[8] = 0;
    return this;
  }
  v8 = this;
  v9 = 0;
  v10 = 0;
  while (1)
  {
    v11 = *(_QWORD *)(v8 + 40);
    if (*(_BYTE *)(v11 + v9 + 8))
    {
      this = *(_QWORD *)(v11 + v9);
      if (this)
      {
        this = WTF::StringImpl::startsWith();
        if ((_DWORD)this)
        {
          this = *(_QWORD *)(v11 + v9);
          if (this)
          {
            this = WTF::StringImpl::endsWith();
            if ((this & 1) != 0)
              break;
          }
        }
      }
    }
    ++v10;
    v9 += 32;
    if (v10 >= *(unsigned int *)(v8 + 52))
      goto LABEL_9;
  }
  v13 = *(_QWORD *)a2;
  if (!v13 || (v14 = *(_DWORD *)(v13 + 4)) == 0)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    a4[8] = 1;
    return this;
  }
  v15 = *(_QWORD *)a3;
  if (v15)
  {
    v18 = *(_DWORD *)(v15 + 4);
    if (v18)
    {
      *(_DWORD *)v13 += 2;
      *(_DWORD *)v15 += 2;
      if ((v18 & 0x80000000) == 0)
      {
        v16 = __OFADD__(v18, 21);
        v19 = v18 + 21;
        v20 = v16;
        if ((v14 & 0x80000000) == 0 && !v20)
        {
          v16 = __OFADD__(v14, v19);
          v21 = v14 + v19;
          if (!v16)
          {
            v16 = __OFADD__(v21, 1);
            v22 = v21 + 1;
            if (!v16)
            {
              v23 = (v22 + 35);
              if (!__OFADD__(v22, 35))
              {
                if ((*(_BYTE *)(v13 + 16) & 4) == 0 || (*(_BYTE *)(v15 + 16) & 4) == 0)
                {
                  if (v22 != -35)
                  {
                    if (v23 <= 0x7FFFFFEF)
                    {
                      WTF::tryFastCompactMalloc((WTF *)(2 * v23 + 20));
                      v24 = v38;
                      if (v38)
                      {
                        *(_DWORD *)v38 = 2;
                        *(_DWORD *)(v24 + 4) = v23;
                        *(_OWORD *)(v24 + 20) = xmmword_1968DFE10;
                        *(_QWORD *)(v24 + 8) = v24 + 20;
                        *(_DWORD *)(v24 + 16) = 0;
                        *(_OWORD *)(v24 + 36) = xmmword_1968DFE20;
                        *(_OWORD *)(v24 + 52) = xmmword_1968DFE30;
                        *(_OWORD *)(v24 + 68) = xmmword_1968DFE40;
                        *(_QWORD *)(v24 + 84) = 0x2000720065006BLL;
                        this = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v24 + 92), v13, (int8x16_t *)" in frame displaying ", 21, v15);
                        goto LABEL_50;
                      }
                    }
                    goto LABEL_73;
                  }
LABEL_55:
                  v24 = MEMORY[0x1E0CBEF70];
                  *MEMORY[0x1E0CBEF70] += 2;
LABEL_50:
                  *(_QWORD *)a4 = v24;
                  a4[8] = 1;
                  if (*(_DWORD *)v15 == 2)
                    this = WTF::StringImpl::destroy((WTF::StringImpl *)v15, v12);
                  else
                    *(_DWORD *)v15 -= 2;
                  goto LABEL_20;
                }
                if (v22 == -35)
                  goto LABEL_55;
                if ((v23 & 0x80000000) == 0)
                {
                  WTF::tryFastCompactMalloc((WTF *)(v23 + 20));
                  v24 = v38;
                  if (v38)
                  {
                    *(_OWORD *)(v38 + 20) = *(_OWORD *)"Blocked connection to known tracker";
                    *(_DWORD *)v24 = 2;
                    *(_DWORD *)(v24 + 4) = v23;
                    *(_QWORD *)(v24 + 8) = v24 + 20;
                    *(_DWORD *)(v24 + 16) = 4;
                    *(_DWORD *)(v24 + 51) = 1919249251;
                    *(_OWORD *)(v24 + 36) = *(_OWORD *)"on to known tracker";
                    *(_BYTE *)(v24 + 55) = 32;
                    v25 = (_BYTE *)(v24 + 56);
                    v26 = *(_BYTE **)(v13 + 8);
                    v27 = *(unsigned int *)(v13 + 4);
                    if ((*(_BYTE *)(v13 + 16) & 4) != 0)
                    {
                      if ((_DWORD)v27)
                      {
                        if ((_DWORD)v27 == 1)
                          *v25 = *v26;
                        else
                          memcpy((void *)(v24 + 56), v26, v27);
                      }
                    }
                    else
                    {
                      if (v27 < 0x10)
                      {
                        v30 = (unsigned __int128 *)(v24 + 56);
                      }
                      else
                      {
                        v30 = (unsigned __int128 *)&v25[v27 & 0xFFFFFFF0];
                        v31 = (unsigned __int128 *)(v24 + 56);
                        do
                        {
                          v32 = (unsigned __int128)vld2q_s8(v26);
                          v26 += 32;
                          *v31++ = v32;
                        }
                        while (v31 != v30);
                      }
                      while (v30 != (unsigned __int128 *)&v25[v27])
                      {
                        v37 = *v26;
                        v26 += 2;
                        *(_BYTE *)v30 = v37;
                        v30 = (unsigned __int128 *)((char *)v30 + 1);
                      }
                    }
                    v28 = &v25[*(unsigned int *)(v13 + 4)];
                    qmemcpy(v28, " in frame displaying ", 21);
                    this = (uint64_t)(v28 + 21);
                    v12 = *(WTF::StringImpl **)(v15 + 8);
                    v29 = *(unsigned int *)(v15 + 4);
                    if ((*(_BYTE *)(v15 + 16) & 4) != 0)
                    {
                      if ((_DWORD)v29)
                      {
                        if ((_DWORD)v29 == 1)
                          *(_BYTE *)this = *(_BYTE *)v12;
                        else
                          this = (uint64_t)memcpy((void *)this, v12, v29);
                      }
                    }
                    else
                    {
                      v33 = this + v29;
                      if (v29 >= 0x10)
                      {
                        v34 = this + (v29 & 0xFFFFFFF0);
                        do
                        {
                          v35 = (unsigned __int128)vld2q_s8((const char *)v12);
                          v12 = (WTF::StringImpl *)((char *)v12 + 32);
                          *(_OWORD *)this = v35;
                          this += 16;
                        }
                        while (this != v34);
                        this = v34;
                      }
                      while (this != v33)
                      {
                        v36 = *(_BYTE *)v12;
                        v12 = (WTF::StringImpl *)((char *)v12 + 2);
                        *(_BYTE *)this++ = v36;
                      }
                    }
                    goto LABEL_50;
                  }
                }
              }
            }
          }
        }
      }
LABEL_73:
      __break(0xC471u);
LABEL_74:
      JUMPOUT(0x195733B60);
    }
  }
  *(_DWORD *)v13 += 2;
  if (v14 < 0 || (v16 = __OFADD__(v14, 1), v17 = v14 + 1, v16) || __OFADD__(v17, 35))
  {
    v38 = 0;
    goto LABEL_72;
  }
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((v17 + 35), (*(_DWORD *)(v13 + 16) >> 2) & 1, "Blocked connection to known tracker", 0x23u, 32, v13, &v38);
  if (!v38)
  {
LABEL_72:
    __break(0xC471u);
    goto LABEL_74;
  }
  *(_QWORD *)a4 = v38;
  a4[8] = 1;
  v38 = 0;
LABEL_20:
  if (*(_DWORD *)v13 == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)v13, v12);
  *(_DWORD *)v13 -= 2;
  return this;
}

uint64_t std::pair<WTF::String,WebCore::ContentRuleListResults::Result>::~pair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v3 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v3)
  {
    v7 = *(WTF::StringImpl ***)(a1 + 16);
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = *(WTF **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

void WebCore::ContentRuleListResults::Result::~Result(WebCore::ContentRuleListResults::Result *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v5 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t result;
  _QWORD v9[2];
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v9[0] = a4;
  v9[1] = a5;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)v10, a3, (uint64_t)v9, a6, a7);
  if (!*a7)
    __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad@<X0>(WebCore::ContentExtensions::ContentExtensionsBackend *this@<X0>, const WTF::URL *a2@<X1>, const WTF::URL *a3@<X2>, const WTF::URL *a4@<X3>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *v10;
  __int128 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  unsigned int *v26;
  WTF::StringImpl *v27;
  uint8x8_t v28;
  WTF::StringImpl *v29[5];
  uint64_t v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  int v41;
  char v42;
  WTF::StringImpl **v43;

  v8 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v8 += 2;
  v32 = v8;
  v9 = *(_OWORD *)((char *)a2 + 24);
  v33 = *(_OWORD *)((char *)a2 + 8);
  v34 = v9;
  v10 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v10 += 2;
  v35 = v10;
  v11 = *(_OWORD *)((char *)a3 + 24);
  v36 = *(_OWORD *)((char *)a3 + 8);
  v37 = v11;
  v12 = *(WTF::StringImpl **)a4;
  if (*(_QWORD *)a4)
    *(_DWORD *)v12 += 2;
  v38 = v12;
  v39 = *(_OWORD *)((char *)a4 + 8);
  v40 = *(_OWORD *)((char *)a4 + 24);
  v41 = 256;
  v42 = 0;
  v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v13 = off_1E33956A8;
  v29[0] = v13;
  WebCore::ContentExtensions::ContentExtensionsBackend::actionsForResourceLoad((uint64_t)this, (uint64_t)&v32, v29, (uint64_t)&v30);
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
  *(_DWORD *)a5 = 0;
  *(_OWORD *)(a5 + 8) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  v29[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v29);
  WebCore::ContentExtensions::makeSecureIfNecessary(a5, a2, (WTF::URL *)v29);
  v15 = v29[0];
  v29[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (v31)
  {
    v16 = v30;
    v17 = v30 + 32 * v31;
    while (1)
    {
      v18 = *(unsigned int *)(v16 + 28);
      if ((_DWORD)v18)
        break;
LABEL_16:
      v16 += 32;
      if (v16 == v17)
        goto LABEL_17;
    }
    v19 = *(_QWORD *)(v16 + 16);
    v20 = v18 << 7;
    while (1)
    {
      v29[0] = (WTF::StringImpl *)a5;
      v29[1] = (WTF::StringImpl *)a5;
      v29[2] = a2;
      v29[3] = (WTF::StringImpl *)a5;
      v21 = *(unsigned int *)(v19 + 112);
      if ((_DWORD)v21 == -1)
        break;
      v43 = v29;
      ((void (*)(WTF::StringImpl ***, uint64_t))off_1E3395658[v21])(&v43, v19);
      v19 += 128;
      v20 -= 128;
      if (!v20)
        goto LABEL_16;
    }
    v26 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::ContentExtensions::applyResultsToRequest(WebCore::ContentRuleListResults&&,WebCore::Page *,WebCore::ResourceRequest &)::$_1>(v26, v27, v28);
  }
  else
  {
LABEL_17:
    WTF::Vector<WebCore::ContentExtensions::ContentExtensionsBackend::ActionsFromContentRuleList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v14);
    v23 = v38;
    v38 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v35;
    v35 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v22);
      else
        *(_DWORD *)v24 -= 2;
    }
    result = v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::ContentExtensions::applyResultsToRequest(WebCore::ContentRuleListResults&&,WebCore::Page *,WebCore::ResourceRequest &)::$_1>(unsigned int *result, WTF::StringImpl *a2, uint8x8_t a3)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  WTF::StringImpl *v17;

  v3 = result;
  v4 = *(_QWORD *)result;
  v5 = result[3];
  v6 = *(_QWORD *)result + 32 * v5;
  v7 = 0;
  v8 = (WTF::StringImpl *)v6;
  if ((_DWORD)v5)
  {
    v9 = *(_QWORD *)result + 32 * v5;
    while (1)
    {
      a3.i32[0] = *(_DWORD *)(v4 + 8);
      a3 = (uint8x8_t)vmovn_s16((int16x8_t)vmovl_u8(a3));
      v10 = !a3.i32[0] && *(_BYTE *)(v4 + 12) == 0;
      if (v10 && !*(_DWORD *)(v4 + 28))
        break;
LABEL_27:
      v4 += 32;
      if (v4 >= v6)
      {
        v4 = *(_QWORD *)v3;
        LODWORD(v5) = v3[3];
        v6 = v9;
        goto LABEL_30;
      }
    }
    v11 = v4;
    if (v9 != *(_QWORD *)v3 + 32 * v3[3])
    {
      if (v8 != (WTF::StringImpl *)v4)
      {
        WTF::VectorMover<false,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>::moveOverlapping(v8, (WTF::StringImpl *)v4, v9);
        v9 += v4 - (_QWORD)v8;
        v12 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v12)
        {
          v13 = *(WTF::StringImpl ***)(v4 + 16);
          v14 = 8 * v12;
          do
          {
            v15 = *v13;
            *v13 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, a2);
              else
                *(_DWORD *)v15 -= 2;
            }
            ++v13;
            v14 -= 8;
          }
          while (v14);
        }
        goto LABEL_21;
      }
      v11 = v9;
    }
    v9 = v11;
LABEL_21:
    v16 = *(WTF **)(v4 + 16);
    if (v16)
    {
      *(_QWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 0;
      WTF::fastFree(v16, a2);
    }
    result = *(unsigned int **)v4;
    *(_QWORD *)v4 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *result -= 2;
    }
    v8 = (WTF::StringImpl *)(v4 + 32);
    ++v7;
    goto LABEL_27;
  }
LABEL_30:
  v17 = (WTF::StringImpl *)(v4 + 32 * v5);
  if (v8 != v17)
  {
    result = (unsigned int *)WTF::VectorMover<false,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>::moveOverlapping(v8, v17, v6);
    LODWORD(v5) = v3[3];
  }
  v3[3] = v5 - v7;
  return result;
}

char *WebCore::ContentExtensions::DFA::empty@<X0>(uint64_t a1@<X8>)
{
  char *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v7 = 0;
  v6 = 0;
  result = WTF::Vector<WebCore::ContentExtensions::DFANode,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, 1uLL, (unint64_t)&v6);
  v4 = *(_QWORD *)a1 + 12 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)result;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)result + 2);
  *(_QWORD *)v4 = v5;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WebCore::ContentExtensions::DFA::memoryUsed(WebCore::ContentExtensions::DFA *this)
{
  return 8 * *((unsigned int *)this + 6)
       + 2 * *((unsigned int *)this + 10)
       + 4 * *((unsigned int *)this + 14)
       + 12 * *((unsigned int *)this + 2)
       + 72;
}

uint64_t WebCore::ContentExtensions::DFA::graphSize(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;

  v1 = *(unsigned int *)(this + 12);
  if (!(_DWORD)v1)
    return 0;
  v2 = (uint64_t *)this;
  LODWORD(this) = 0;
  v3 = *v2;
  v4 = 12 * v1;
  v5 = (char *)(v3 + 11);
  do
  {
    v6 = *v5;
    v5 += 12;
    if ((v6 & 1) != 0)
      this = this;
    else
      this = (this + 1);
    v4 -= 12;
  }
  while (v4);
  return this;
}

uint64_t WebCore::ContentExtensions::DFABytecodeCompiler::emitAppendAction(WebCore::ContentExtensions::DFABytecodeCompiler *this, unint64_t a2)
{
  unsigned int v2;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;

  v2 = a2;
  if (BYTE3(a2))
    v4 = -64;
  else
    v4 = 0x80;
  if (a2 >= 0x10000)
    v5 = v4;
  else
    v5 = 64;
  if (a2 >= 0x100)
    v6 = v5;
  else
    v6 = 0;
  v7 = HIDWORD(a2) & 0x7FFFF;
  if (!(_DWORD)v7)
  {
    v20 = *(_QWORD *)this;
    v21 = *(unsigned int *)(*(_QWORD *)this + 8);
    v22 = *(unsigned int *)(*(_QWORD *)this + 12);
    v23 = v22 + 1;
    if (v22 >= v21)
    {
      v24 = v21 + (v21 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v23)
        v26 = v22 + 1;
      else
        v26 = v25;
      if (HIDWORD(v26))
      {
        __break(0xC471u);
        JUMPOUT(0x195734384);
      }
      v27 = *(void **)v20;
      v28 = (void *)WTF::fastMalloc((WTF *)v26);
      *(_DWORD *)(v20 + 8) = v26;
      *(_QWORD *)v20 = v28;
      memcpy(v28, v27, v22);
      if (v27)
      {
        if (*(void **)v20 == v27)
        {
          *(_QWORD *)v20 = 0;
          *(_DWORD *)(v20 + 8) = 0;
        }
        WTF::fastFree((WTF *)v27, v29);
      }
    }
    *(_DWORD *)(v20 + 12) = v23;
    if ((_DWORD)v22 != -1)
    {
      *(_BYTE *)((v22 + 1) + *(_QWORD *)v20 - 1) = v6 | 6;
      return WebCore::ContentExtensions::appendVariableLengthUnsignedInteger(*(_QWORD *)this, v2);
    }
    goto LABEL_49;
  }
  if (WORD1(v7))
    v8 = 40;
  else
    v8 = 24;
  v9 = *(_QWORD *)this;
  if (v7 <= 0xFF)
    v10 = 8;
  else
    v10 = v8;
  v11 = *(unsigned int *)(v9 + 8);
  v12 = *(unsigned int *)(v9 + 12);
  v13 = v12 + 1;
  if (v12 >= v11)
  {
    v14 = v11 + (v11 >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v13)
      v16 = v12 + 1;
    else
      v16 = v15;
    if (!HIDWORD(v16))
    {
      v17 = *(void **)v9;
      v18 = (void *)WTF::fastMalloc((WTF *)v16);
      *(_DWORD *)(v9 + 8) = v16;
      *(_QWORD *)v9 = v18;
      memcpy(v18, v17, v12);
      if (v17)
      {
        if (*(void **)v9 == v17)
        {
          *(_QWORD *)v9 = 0;
          *(_DWORD *)(v9 + 8) = 0;
        }
        WTF::fastFree((WTF *)v17, v19);
      }
      goto LABEL_29;
    }
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x195734374);
  }
LABEL_29:
  *(_DWORD *)(v9 + 12) = v13;
  if ((_DWORD)v12 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x19573437CLL);
  }
  *(_BYTE *)((v12 + 1) + *(_QWORD *)v9 - 1) = v6 | v10;
  WebCore::ContentExtensions::appendVariableLengthUnsignedInteger(*(_QWORD *)this, v7);
  return WebCore::ContentExtensions::appendVariableLengthUnsignedInteger(*(_QWORD *)this, v2);
}

uint64_t WebCore::ContentExtensions::appendVariableLengthUnsignedInteger(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  unint64_t v41;
  size_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  void *v49;

  v3 = result;
  if (a2 <= 0xFF)
  {
    v23 = *(unsigned int *)(result + 8);
    v24 = *(unsigned int *)(result + 12);
    v25 = v24 + 1;
    if (v24 >= v23)
    {
      v26 = v23 + (v23 >> 2);
      if (v26 >= 0x10)
        v27 = v26 + 1;
      else
        v27 = 16;
      if (v27 <= v25)
        v28 = v24 + 1;
      else
        v28 = v27;
      if (HIDWORD(v28))
        goto LABEL_82;
      v29 = *(void **)result;
      v30 = (void *)WTF::fastMalloc((WTF *)v28);
      *(_DWORD *)(v3 + 8) = v28;
      *(_QWORD *)v3 = v30;
      result = (uint64_t)memcpy(v30, v29, v24);
      if (v29)
      {
        if (*(void **)v3 == v29)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        result = WTF::fastFree((WTF *)v29, v31);
      }
    }
    *(_DWORD *)(v3 + 12) = v25;
    if ((_DWORD)v24 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1957346ACLL);
    }
    *(_BYTE *)((v24 + 1) + *(_QWORD *)v3 - 1) = a2;
  }
  else
  {
    v4 = HIWORD(a2);
    if (HIWORD(a2))
    {
      if (!HIBYTE(a2))
      {
        v5 = *(unsigned int *)(result + 8);
        v6 = *(unsigned int *)(result + 12);
        v7 = v6 + 2;
        if (v6 + 2 > v5)
        {
          v8 = v5 + (v5 >> 2);
          if (v8 >= 0x10)
            v9 = v8 + 1;
          else
            v9 = 16;
          if (v9 <= v7)
            v10 = v6 + 2;
          else
            v10 = v9;
          if (HIDWORD(v10))
          {
            __break(0xC471u);
            JUMPOUT(0x1957346C4);
          }
          v11 = *(void **)result;
          v12 = (void *)WTF::fastMalloc((WTF *)v10);
          *(_DWORD *)(v3 + 8) = v10;
          *(_QWORD *)v3 = v12;
          result = (uint64_t)memcpy(v12, v11, v6);
          if (v11)
          {
            if (*(void **)v3 == v11)
            {
              *(_QWORD *)v3 = 0;
              *(_DWORD *)(v3 + 8) = 0;
            }
            result = WTF::fastFree((WTF *)v11, v13);
          }
        }
        *(_DWORD *)(v3 + 12) = v7;
        if ((v6 + 2) <= 1uLL)
        {
          __break(0xC471u);
          JUMPOUT(0x1957346CCLL);
        }
        *(_WORD *)((v6 + 2) + *(_QWORD *)v3 - 2) = a2;
        v14 = *(unsigned int *)(v3 + 8);
        v15 = *(unsigned int *)(v3 + 12);
        v16 = v15 + 1;
        if (v15 < v14)
          goto LABEL_29;
        v17 = v14 + (v14 >> 2);
        if (v17 >= 0x10)
          v18 = v17 + 1;
        else
          v18 = 16;
        if (v18 <= v16)
          v19 = v15 + 1;
        else
          v19 = v18;
        if (!HIDWORD(v19))
        {
          v20 = *(void **)v3;
          v21 = (void *)WTF::fastMalloc((WTF *)v19);
          *(_DWORD *)(v3 + 8) = v19;
          *(_QWORD *)v3 = v21;
          result = (uint64_t)memcpy(v21, v20, v15);
          if (v20)
          {
            if (*(void **)v3 == v20)
            {
              *(_QWORD *)v3 = 0;
              *(_DWORD *)(v3 + 8) = 0;
            }
            result = WTF::fastFree((WTF *)v20, v22);
          }
LABEL_29:
          *(_DWORD *)(v3 + 12) = v16;
          if ((_DWORD)v15 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1957346D4);
          }
          *(_BYTE *)((v15 + 1) + *(_QWORD *)v3 - 1) = v4;
          return result;
        }
LABEL_82:
        __break(0xC471u);
        JUMPOUT(0x1957346A4);
      }
      v41 = *(unsigned int *)(result + 8);
      v42 = *(unsigned int *)(result + 12);
      v43 = v42 + 4;
      if (v42 + 4 > v41)
      {
        v44 = v41 + (v41 >> 2);
        if (v44 >= 0x10)
          v45 = v44 + 1;
        else
          v45 = 16;
        if (v45 <= v43)
          v46 = v42 + 4;
        else
          v46 = v45;
        if (HIDWORD(v46))
        {
          __break(0xC471u);
          JUMPOUT(0x1957346DCLL);
        }
        v47 = *(void **)result;
        v48 = (void *)WTF::fastMalloc((WTF *)v46);
        *(_DWORD *)(v3 + 8) = v46;
        *(_QWORD *)v3 = v48;
        result = (uint64_t)memcpy(v48, v47, v42);
        if (v47)
        {
          if (*(void **)v3 == v47)
          {
            *(_QWORD *)v3 = 0;
            *(_DWORD *)(v3 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v47, v49);
        }
      }
      *(_DWORD *)(v3 + 12) = v43;
      if ((v42 + 4) <= 3uLL)
      {
        __break(0xC471u);
        JUMPOUT(0x1957346E4);
      }
      *(_DWORD *)((v42 + 4) + *(_QWORD *)v3 - 4) = a2;
    }
    else
    {
      v32 = *(unsigned int *)(result + 8);
      v33 = *(unsigned int *)(result + 12);
      v34 = v33 + 2;
      if (v33 + 2 > v32)
      {
        v35 = v32 + (v32 >> 2);
        if (v35 >= 0x10)
          v36 = v35 + 1;
        else
          v36 = 16;
        if (v36 <= v34)
          v37 = v33 + 2;
        else
          v37 = v36;
        if (HIDWORD(v37))
        {
          __break(0xC471u);
          JUMPOUT(0x1957346B4);
        }
        v38 = *(void **)result;
        v39 = (void *)WTF::fastMalloc((WTF *)v37);
        *(_DWORD *)(v3 + 8) = v37;
        *(_QWORD *)v3 = v39;
        result = (uint64_t)memcpy(v39, v38, v33);
        if (v38)
        {
          if (*(void **)v3 == v38)
          {
            *(_QWORD *)v3 = 0;
            *(_DWORD *)(v3 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v38, v40);
        }
      }
      *(_DWORD *)(v3 + 12) = v34;
      if ((v33 + 2) <= 1uLL)
      {
        __break(0xC471u);
        JUMPOUT(0x1957346BCLL);
      }
      *(_WORD *)((v33 + 2) + *(_QWORD *)v3 - 2) = a2;
    }
  }
  return result;
}

uint64_t WebCore::ContentExtensions::DFABytecodeCompiler::longestPossibleJump(WebCore::ContentExtensions::DFABytecodeCompiler *this, int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned int v8;

  v4 = *((_DWORD *)this + 11);
  if (v4 <= a4)
    goto LABEL_11;
  v5 = *((_QWORD *)this + 4);
  v6 = *(_DWORD *)(v5 + 4 * a4);
  if (v6 != -1)
    return (v6 - a2);
  v8 = *((_DWORD *)this + 7);
  if (v8 <= a4)
  {
    __break(0xC471u);
    JUMPOUT(0x195734764);
  }
  if (v8 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x19573476CLL);
  }
  if (v4 <= a3)
  {
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x19573475CLL);
  }
  return (*(_DWORD *)(*((_QWORD *)this + 2) + 4 * a4)
                      + a2
                      - (*(_DWORD *)(*((_QWORD *)this + 2) + 4 * a3)
                       + *(_DWORD *)(v5 + 4 * a3)));
}

uint64_t WebCore::ContentExtensions::DFABytecodeCompiler::emitJump(WebCore::ContentExtensions::DFABytecodeCompiler *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  char **v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  unsigned int v28;
  __int128 v30;
  unsigned int v31;

  v3 = *((_DWORD *)this + 11);
  if (v3 <= a3)
    goto LABEL_39;
  v6 = *(_QWORD *)this;
  v7 = *(unsigned int *)(*(_QWORD *)this + 12);
  v8 = *((_QWORD *)this + 4);
  v9 = *(_DWORD *)(v8 + 4 * a3);
  if (v9 != -1)
  {
    v10 = v9 - v7;
    goto LABEL_8;
  }
  v11 = *((_DWORD *)this + 7);
  if (v11 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x195734980);
  }
  if (v11 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x195734988);
  }
  if (v3 <= a2)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x195734968);
  }
  v10 = *(_DWORD *)(*((_QWORD *)this + 2) + 4 * a3)
      + v7
      - (*(_DWORD *)(*((_QWORD *)this + 2) + 4 * a2)
       + *(_DWORD *)(v8 + 4 * a2));
LABEL_8:
  if ((v10 + 0x800000) >> 24)
    v12 = 48;
  else
    v12 = 32;
  if (v10 == (__int16)v10)
    v13 = 16;
  else
    v13 = v12;
  if (v10 == (char)v10)
    v14 = 0;
  else
    v14 = v13;
  v15 = v7 + 1;
  v16 = *(unsigned int *)(v6 + 8);
  if (v7 >= v16)
  {
    v17 = v16 + (v16 >> 2);
    if (v17 >= 0x10)
      v18 = v17 + 1;
    else
      v18 = 16;
    if (v18 <= v15)
      v19 = v7 + 1;
    else
      v19 = v18;
    if (HIDWORD(v19))
    {
      __break(0xC471u);
      JUMPOUT(0x195734970);
    }
    v20 = *(void **)v6;
    v21 = (void *)WTF::fastMalloc((WTF *)v19);
    *(_DWORD *)(v6 + 8) = v19;
    *(_QWORD *)v6 = v21;
    memcpy(v21, v20, v7);
    if (v20)
    {
      if (*(void **)v6 == v20)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v20, v22);
    }
  }
  *(_DWORD *)(v6 + 12) = v15;
  if ((_DWORD)v7 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x195734978);
  }
  *(_BYTE *)((v7 + 1) + *(_QWORD *)v6 - 1) = v14 | 0xB;
  v23 = (char **)((char *)this + 48);
  LOBYTE(v30) = v14;
  *(_QWORD *)((char *)&v30 + 4) = __PAIR64__(v7, v10);
  HIDWORD(v30) = v7 + 1;
  v31 = a3;
  v24 = *((unsigned int *)this + 15);
  if ((_DWORD)v24 == *((_DWORD *)this + 14))
  {
    v25 = WTF::Vector<WebCore::ContentExtensions::DFABytecodeCompiler::LinkRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v30);
    v26 = *((_QWORD *)this + 6) + 20 * *((unsigned int *)this + 15);
    v27 = *(_OWORD *)v25;
    v28 = *((_DWORD *)v25 + 4);
  }
  else
  {
    v26 = (uint64_t)&(*v23)[20 * v24];
    v27 = v30;
    v28 = v31;
  }
  *(_DWORD *)(v26 + 16) = v28;
  *(_OWORD *)v26 = v27;
  ++*((_DWORD *)this + 15);
  return WebCore::ContentExtensions::appendZeroes(*(_QWORD *)this, v14);
}

uint64_t WebCore::ContentExtensions::appendZeroes(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  void *v47;
  void *v48;

  v2 = result;
  switch((a2 >> 4) | (16 * a2))
  {
    case 0:
      v3 = *(unsigned int *)(result + 8);
      v4 = *(unsigned int *)(result + 12);
      v5 = v4 + 1;
      if (v4 >= v3)
      {
        v6 = v3 + (v3 >> 2);
        if (v6 >= 0x10)
          v7 = v6 + 1;
        else
          v7 = 16;
        if (v7 <= v5)
          v8 = v4 + 1;
        else
          v8 = v7;
        if (HIDWORD(v8))
        {
          __break(0xC471u);
          JUMPOUT(0x195734CACLL);
        }
        v9 = *(void **)result;
        v10 = (void *)WTF::fastMalloc((WTF *)v8);
        *(_DWORD *)(v2 + 8) = v8;
        *(_QWORD *)v2 = v10;
        result = (uint64_t)memcpy(v10, v9, v4);
        if (v9)
        {
          if (*(void **)v2 == v9)
          {
            *(_QWORD *)v2 = 0;
            *(_DWORD *)(v2 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v9, v11);
        }
      }
      *(_DWORD *)(v2 + 12) = v5;
      v12 = (v4 + 1);
      if ((_DWORD)v4 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x195734A5CLL);
      }
      goto LABEL_42;
    case 1:
      v40 = *(unsigned int *)(result + 8);
      v41 = *(unsigned int *)(result + 12);
      v42 = v41 + 2;
      if (v41 + 2 > v40)
      {
        v43 = v40 + (v40 >> 2);
        if (v43 >= 0x10)
          v44 = v43 + 1;
        else
          v44 = 16;
        if (v44 <= v42)
          v45 = v41 + 2;
        else
          v45 = v44;
        if (HIDWORD(v45))
        {
          __break(0xC471u);
          JUMPOUT(0x195734CE4);
        }
        v46 = *(void **)result;
        v47 = (void *)WTF::fastMalloc((WTF *)v45);
        *(_DWORD *)(v2 + 8) = v45;
        *(_QWORD *)v2 = v47;
        result = (uint64_t)memcpy(v47, v46, v41);
        if (v46)
        {
          if (*(void **)v2 == v46)
          {
            *(_QWORD *)v2 = 0;
            *(_DWORD *)(v2 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v46, v48);
        }
      }
      *(_DWORD *)(v2 + 12) = v42;
      if ((v41 + 2) <= 1uLL)
      {
        __break(0xC471u);
        JUMPOUT(0x195734CECLL);
      }
      *(_WORD *)((v41 + 2) + *(_QWORD *)v2 - 2) = 0;
      break;
    case 2:
      v13 = *(unsigned int *)(result + 8);
      v14 = *(unsigned int *)(result + 12);
      v15 = v14 + 2;
      if (v14 + 2 > v13)
      {
        v16 = v13 + (v13 >> 2);
        if (v16 >= 0x10)
          v17 = v16 + 1;
        else
          v17 = 16;
        if (v17 <= v15)
          v18 = v14 + 2;
        else
          v18 = v17;
        if (HIDWORD(v18))
        {
          __break(0xC471u);
          JUMPOUT(0x195734CB4);
        }
        v19 = *(void **)result;
        v20 = (void *)WTF::fastMalloc((WTF *)v18);
        *(_DWORD *)(v2 + 8) = v18;
        *(_QWORD *)v2 = v20;
        result = (uint64_t)memcpy(v20, v19, v14);
        if (v19)
        {
          if (*(void **)v2 == v19)
          {
            *(_QWORD *)v2 = 0;
            *(_DWORD *)(v2 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v19, v21);
        }
      }
      *(_DWORD *)(v2 + 12) = v15;
      if ((v14 + 2) <= 1uLL)
      {
        __break(0xC471u);
        JUMPOUT(0x195734CBCLL);
      }
      *(_WORD *)((v14 + 2) + *(_QWORD *)v2 - 2) = 0;
      v22 = *(unsigned int *)(v2 + 8);
      v23 = *(unsigned int *)(v2 + 12);
      v24 = v23 + 1;
      if (v23 >= v22)
      {
        v25 = v22 + (v22 >> 2);
        if (v25 >= 0x10)
          v26 = v25 + 1;
        else
          v26 = 16;
        if (v26 <= v24)
          v27 = v23 + 1;
        else
          v27 = v26;
        if (HIDWORD(v27))
        {
          __break(0xC471u);
          JUMPOUT(0x195734CC4);
        }
        v28 = *(void **)v2;
        v29 = (void *)WTF::fastMalloc((WTF *)v27);
        *(_DWORD *)(v2 + 8) = v27;
        *(_QWORD *)v2 = v29;
        result = (uint64_t)memcpy(v29, v28, v23);
        if (v28)
        {
          if (*(void **)v2 == v28)
          {
            *(_QWORD *)v2 = 0;
            *(_DWORD *)(v2 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v28, v30);
        }
      }
      *(_DWORD *)(v2 + 12) = v24;
      v12 = (v23 + 1);
      if ((_DWORD)v23 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x195734CCCLL);
      }
LABEL_42:
      *(_BYTE *)(v12 + *(_QWORD *)v2 - 1) = 0;
      break;
    case 3:
      v31 = *(unsigned int *)(result + 8);
      v32 = *(unsigned int *)(result + 12);
      v33 = v32 + 4;
      if (v32 + 4 > v31)
      {
        v34 = v31 + (v31 >> 2);
        if (v34 >= 0x10)
          v35 = v34 + 1;
        else
          v35 = 16;
        if (v35 <= v33)
          v36 = v32 + 4;
        else
          v36 = v35;
        if (HIDWORD(v36))
        {
          __break(0xC471u);
          JUMPOUT(0x195734CD4);
        }
        v37 = *(void **)result;
        v38 = (void *)WTF::fastMalloc((WTF *)v36);
        *(_DWORD *)(v2 + 8) = v36;
        *(_QWORD *)v2 = v38;
        result = (uint64_t)memcpy(v38, v37, v32);
        if (v37)
        {
          if (*(void **)v2 == v37)
          {
            *(_QWORD *)v2 = 0;
            *(_DWORD *)(v2 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v37, v39);
        }
      }
      *(_DWORD *)(v2 + 12) = v33;
      if ((v32 + 4) <= 3uLL)
      {
        __break(0xC471u);
        JUMPOUT(0x195734CDCLL);
      }
      *(_DWORD *)((v32 + 4) + *(_QWORD *)v2 - 4) = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WebCore::ContentExtensions::DFABytecodeCompiler::emitCheckValue(WebCore::ContentExtensions::DFABytecodeCompiler *this, char a2, unsigned int a3, unsigned int a4, char a5)
{
  unsigned int v5;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  char **v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  unsigned int v41;
  __int128 v44;
  unsigned int v45;

  v5 = *((_DWORD *)this + 11);
  if (v5 <= a4)
    goto LABEL_54;
  v9 = *(_QWORD *)this;
  v10 = *(unsigned int *)(*(_QWORD *)this + 12);
  v11 = *((_QWORD *)this + 4);
  v12 = *(_DWORD *)(v11 + 4 * a4);
  if (v12 != -1)
  {
    v13 = v12 - v10;
    goto LABEL_8;
  }
  v14 = *((_DWORD *)this + 7);
  if (v14 <= a4)
  {
    __break(0xC471u);
    JUMPOUT(0x195734FACLL);
  }
  if (v14 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x195734FB4);
  }
  if (v5 <= a3)
  {
LABEL_54:
    __break(0xC471u);
    JUMPOUT(0x195734F84);
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 2) + 4 * a4)
      + v10
      - (*(_DWORD *)(*((_QWORD *)this + 2) + 4 * a3)
       + *(_DWORD *)(v11 + 4 * a3));
LABEL_8:
  if ((v13 + 0x800000) >> 24)
    v15 = 48;
  else
    v15 = 32;
  if (v13 == (__int16)v13)
    v16 = 16;
  else
    v16 = v15;
  if (v13 == (char)v13)
    v17 = 0;
  else
    v17 = v16;
  v18 = v10 + 1;
  v19 = *(unsigned int *)(v9 + 8);
  if (v10 >= v19)
  {
    v20 = v19 + (v19 >> 2);
    if (v20 >= 0x10)
      v21 = v20 + 1;
    else
      v21 = 16;
    if (v21 <= v18)
      v22 = v10 + 1;
    else
      v22 = v21;
    if (HIDWORD(v22))
    {
      __break(0xC471u);
      JUMPOUT(0x195734F8CLL);
    }
    v23 = *(void **)v9;
    v24 = (void *)WTF::fastMalloc((WTF *)v22);
    *(_DWORD *)(v9 + 8) = v22;
    *(_QWORD *)v9 = v24;
    memcpy(v24, v23, v10);
    if (v23)
    {
      if (*(void **)v9 == v23)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree((WTF *)v23, v25);
    }
  }
  *(_DWORD *)(v9 + 12) = v18;
  if ((_DWORD)v10 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x195734F94);
  }
  *(_BYTE *)((v10 + 1) + *(_QWORD *)v9 - 1) = v17 | a5;
  v26 = *(_QWORD *)this;
  v27 = *(unsigned int *)(*(_QWORD *)this + 8);
  v28 = *(unsigned int *)(*(_QWORD *)this + 12);
  v29 = v28 + 1;
  if (v28 >= v27)
  {
    v30 = v27 + (v27 >> 2);
    if (v30 >= 0x10)
      v31 = v30 + 1;
    else
      v31 = 16;
    if (v31 <= v29)
      v32 = v28 + 1;
    else
      v32 = v31;
    if (HIDWORD(v32))
    {
      __break(0xC471u);
      JUMPOUT(0x195734F9CLL);
    }
    v33 = *(void **)v26;
    v34 = (void *)WTF::fastMalloc((WTF *)v32);
    *(_DWORD *)(v26 + 8) = v32;
    *(_QWORD *)v26 = v34;
    memcpy(v34, v33, v28);
    if (v33)
    {
      if (*(void **)v26 == v33)
      {
        *(_QWORD *)v26 = 0;
        *(_DWORD *)(v26 + 8) = 0;
      }
      WTF::fastFree((WTF *)v33, v35);
    }
  }
  *(_DWORD *)(v26 + 12) = v29;
  if ((_DWORD)v28 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x195734FA4);
  }
  *(_BYTE *)((v28 + 1) + *(_QWORD *)v26 - 1) = a2;
  v36 = (char **)((char *)this + 48);
  LOBYTE(v44) = v17;
  *(_QWORD *)((char *)&v44 + 4) = __PAIR64__(v10, v13);
  HIDWORD(v44) = v10 + 2;
  v45 = a4;
  v37 = *((unsigned int *)this + 15);
  if ((_DWORD)v37 == *((_DWORD *)this + 14))
  {
    v38 = WTF::Vector<WebCore::ContentExtensions::DFABytecodeCompiler::LinkRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)&v44);
    v39 = *((_QWORD *)this + 6) + 20 * *((unsigned int *)this + 15);
    v40 = *(_OWORD *)v38;
    v41 = *((_DWORD *)v38 + 4);
  }
  else
  {
    v39 = (uint64_t)&(*v36)[20 * v37];
    v40 = v44;
    v41 = v45;
  }
  *(_DWORD *)(v39 + 16) = v41;
  *(_OWORD *)v39 = v40;
  ++*((_DWORD *)this + 15);
  return WebCore::ContentExtensions::appendZeroes(*(_QWORD *)this, v17);
}

uint64_t WebCore::ContentExtensions::DFABytecodeCompiler::emitCheckValueRange(WebCore::ContentExtensions::DFABytecodeCompiler *this, char a2, char a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v6;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  size_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  char **v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  unsigned int v52;
  __int128 v56;
  unsigned int v57;

  v6 = *((_DWORD *)this + 11);
  if (v6 <= a5)
    goto LABEL_72;
  v9 = *(_QWORD *)this;
  v10 = *(unsigned int *)(*(_QWORD *)this + 12);
  v11 = *((_QWORD *)this + 4);
  v12 = *(_DWORD *)(v11 + 4 * a5);
  if (v12 != -1)
  {
    v13 = v12 - v10;
    goto LABEL_8;
  }
  v14 = *((_DWORD *)this + 7);
  if (v14 <= a5)
  {
    __break(0xC471u);
    JUMPOUT(0x195735314);
  }
  if (v14 <= a4)
  {
    __break(0xC471u);
    JUMPOUT(0x19573531CLL);
  }
  if (v6 <= a4)
  {
LABEL_72:
    __break(0xC471u);
    JUMPOUT(0x1957352DCLL);
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 2) + 4 * a5)
      + v10
      - (*(_DWORD *)(*((_QWORD *)this + 2) + 4 * a4)
       + *(_DWORD *)(v11 + 4 * a4));
LABEL_8:
  if ((v13 + 0x800000) >> 24)
    v15 = 48;
  else
    v15 = 32;
  if (v13 == (__int16)v13)
    v16 = 16;
  else
    v16 = v15;
  if (v13 == (char)v13)
    v17 = 0;
  else
    v17 = v16;
  if (a6)
    v18 = 5;
  else
    v18 = 4;
  v19 = v10 + 1;
  v20 = *(unsigned int *)(v9 + 8);
  if (v10 >= v20)
  {
    v21 = v20 + (v20 >> 2);
    if (v21 >= 0x10)
      v22 = v21 + 1;
    else
      v22 = 16;
    if (v22 <= v19)
      v23 = v10 + 1;
    else
      v23 = v22;
    if (HIDWORD(v23))
    {
      __break(0xC471u);
      JUMPOUT(0x1957352E4);
    }
    v24 = *(void **)v9;
    v25 = (void *)WTF::fastMalloc((WTF *)v23);
    *(_DWORD *)(v9 + 8) = v23;
    *(_QWORD *)v9 = v25;
    memcpy(v25, v24, v10);
    if (v24)
    {
      if (*(void **)v9 == v24)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree((WTF *)v24, v26);
    }
  }
  *(_DWORD *)(v9 + 12) = v19;
  if ((_DWORD)v10 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x1957352ECLL);
  }
  *(_BYTE *)((v10 + 1) + *(_QWORD *)v9 - 1) = v17 | v18;
  v27 = *(_QWORD *)this;
  v28 = *(unsigned int *)(*(_QWORD *)this + 8);
  v29 = *(unsigned int *)(*(_QWORD *)this + 12);
  v30 = v29 + 1;
  if (v29 >= v28)
  {
    v31 = v28 + (v28 >> 2);
    if (v31 >= 0x10)
      v32 = v31 + 1;
    else
      v32 = 16;
    if (v32 <= v30)
      v33 = v29 + 1;
    else
      v33 = v32;
    if (HIDWORD(v33))
    {
      __break(0xC471u);
      JUMPOUT(0x1957352F4);
    }
    v34 = *(void **)v27;
    v35 = (void *)WTF::fastMalloc((WTF *)v33);
    *(_DWORD *)(v27 + 8) = v33;
    *(_QWORD *)v27 = v35;
    memcpy(v35, v34, v29);
    if (v34)
    {
      if (*(void **)v27 == v34)
      {
        *(_QWORD *)v27 = 0;
        *(_DWORD *)(v27 + 8) = 0;
      }
      WTF::fastFree((WTF *)v34, v36);
    }
  }
  *(_DWORD *)(v27 + 12) = v30;
  if ((_DWORD)v29 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x1957352FCLL);
  }
  *(_BYTE *)((v29 + 1) + *(_QWORD *)v27 - 1) = a2;
  v37 = *(_QWORD *)this;
  v38 = *(unsigned int *)(*(_QWORD *)this + 8);
  v39 = *(unsigned int *)(*(_QWORD *)this + 12);
  v40 = v39 + 1;
  if (v39 >= v38)
  {
    v41 = v38 + (v38 >> 2);
    if (v41 >= 0x10)
      v42 = v41 + 1;
    else
      v42 = 16;
    if (v42 <= v40)
      v43 = v39 + 1;
    else
      v43 = v42;
    if (HIDWORD(v43))
    {
      __break(0xC471u);
      JUMPOUT(0x195735304);
    }
    v44 = *(void **)v37;
    v45 = (void *)WTF::fastMalloc((WTF *)v43);
    *(_DWORD *)(v37 + 8) = v43;
    *(_QWORD *)v37 = v45;
    memcpy(v45, v44, v39);
    if (v44)
    {
      if (*(void **)v37 == v44)
      {
        *(_QWORD *)v37 = 0;
        *(_DWORD *)(v37 + 8) = 0;
      }
      WTF::fastFree((WTF *)v44, v46);
    }
  }
  *(_DWORD *)(v37 + 12) = v40;
  if ((_DWORD)v39 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x19573530CLL);
  }
  *(_BYTE *)((v39 + 1) + *(_QWORD *)v37 - 1) = a3;
  v47 = (char **)((char *)this + 48);
  LOBYTE(v56) = v17;
  *(_QWORD *)((char *)&v56 + 4) = __PAIR64__(v10, v13);
  HIDWORD(v56) = v10 + 3;
  v57 = a5;
  v48 = *((unsigned int *)this + 15);
  if ((_DWORD)v48 == *((_DWORD *)this + 14))
  {
    v49 = WTF::Vector<WebCore::ContentExtensions::DFABytecodeCompiler::LinkRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v47, v48 + 1, (unint64_t)&v56);
    v50 = *((_QWORD *)this + 6) + 20 * *((unsigned int *)this + 15);
    v51 = *(_OWORD *)v49;
    v52 = *((_DWORD *)v49 + 4);
  }
  else
  {
    v50 = (uint64_t)&(*v47)[20 * v48];
    v51 = v56;
    v52 = v57;
  }
  *(_DWORD *)(v50 + 16) = v52;
  *(_OWORD *)v50 = v51;
  ++*((_DWORD *)this + 15);
  return WebCore::ContentExtensions::appendZeroes(*(_QWORD *)this, v17);
}

uint64_t *WebCore::ContentExtensions::DFABytecodeCompiler::emitTerminate(uint64_t *this)
{
  uint64_t v1;
  unint64_t v2;
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  v1 = *this;
  v2 = *(unsigned int *)(*this + 8);
  v3 = *(unsigned int *)(*this + 12);
  v4 = v3 + 1;
  if (v3 >= v2)
  {
    v5 = v2 + (v2 >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 <= v4)
      v7 = v3 + 1;
    else
      v7 = v6;
    if (HIDWORD(v7))
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x1957353E4);
    }
    v8 = *(void **)v1;
    v9 = (void *)WTF::fastMalloc((WTF *)v7);
    *(_DWORD *)(v1 + 8) = v7;
    *(_QWORD *)v1 = v9;
    this = (uint64_t *)memcpy(v9, v8, v3);
    if (v8)
    {
      if (*(void **)v1 == v8)
      {
        *(_QWORD *)v1 = 0;
        *(_DWORD *)(v1 + 8) = 0;
      }
      this = (uint64_t *)WTF::fastFree((WTF *)v8, v10);
    }
  }
  *(_DWORD *)(v1 + 12) = v4;
  if ((_DWORD)v3 == -1)
    goto LABEL_15;
  *(_BYTE *)((v3 + 1) + *(_QWORD *)v1 - 1) = 10;
  return this;
}

WTF *WebCore::ContentExtensions::DFABytecodeCompiler::compileNode(WTF *this, unsigned int a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v3 = (uint64_t *)*((_QWORD *)this + 1);
  v4 = *v3;
  v5 = (unsigned int *)(*v3 + 12 * a2);
  if ((*((_BYTE *)v5 + 11) & 1) == 0)
  {
    v8 = (uint64_t)this;
    v9 = a2;
    if ((a3 & 1) == 0)
    {
      if (*((_DWORD *)this + 11) <= a2)
        goto LABEL_17;
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * a2) = *(_DWORD *)(*(_QWORD *)this + 12);
    }
    v10 = *(unsigned __int16 *)(v4 + 12 * a2 + 8);
    if (v10)
    {
      v11 = 8 * v10;
      v12 = WTF::fastMalloc((WTF *)(8 * v10));
      v13 = (WTF *)v12;
      v14 = 0;
      v15 = v3[2] + 8 * *v5;
      do
      {
        *(_QWORD *)(v12 + v14) = *(_QWORD *)(v15 + v14);
        v14 += 8;
      }
      while (v11 != v14);
      v16 = 0;
      do
      {
        WebCore::ContentExtensions::DFABytecodeCompiler::emitAppendAction((WebCore::ContentExtensions::DFABytecodeCompiler *)v8, *(_QWORD *)((char *)v13 + v16));
        v16 += 8;
      }
      while (v11 != v16);
      WTF::fastFree(v13, v17);
      if ((a3 & 1) == 0)
        return WebCore::ContentExtensions::DFABytecodeCompiler::compileNodeTransitions((WebCore::ContentExtensions::DFABytecodeCompiler *)v8, a2);
    }
    else if ((a3 & 1) == 0)
    {
      return WebCore::ContentExtensions::DFABytecodeCompiler::compileNodeTransitions((WebCore::ContentExtensions::DFABytecodeCompiler *)v8, a2);
    }
    if (*(_DWORD *)(v8 + 44) > a2)
    {
      *(_DWORD *)(*(_QWORD *)(v8 + 32) + 4 * v9) = *(_DWORD *)(*(_QWORD *)v8 + 12);
      return WebCore::ContentExtensions::DFABytecodeCompiler::compileNodeTransitions((WebCore::ContentExtensions::DFABytecodeCompiler *)v8, a2);
    }
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x19573551CLL);
  }
  return this;
}

WTF *WebCore::ContentExtensions::DFABytecodeCompiler::compileNodeTransitions(WebCore::ContentExtensions::DFABytecodeCompiler *this, unsigned int a2)
{
  WTF *result;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  WTF *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  WTF *v27;
  unsigned int v28;
  WTF *v29;
  unsigned int v30;
  char v31;
  unsigned int v32;

  result = (WTF *)WebCore::ContentExtensions::DFABytecodeCompiler::transitions(this, (const WebCore::ContentExtensions::DFANode *)(**((_QWORD **)this + 1) + 12 * a2), (uint64_t *)&v27);
  v6 = v27;
  v7 = v28;
  if (v28)
  {
    v8 = 24 * v28;
    v9 = (char *)v27;
    do
    {
      result = (WTF *)WebCore::ContentExtensions::DFABytecodeCompiler::compileJumpTable((uint64_t)this, a2, v9);
      v9 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  v10 = v29;
  if (v30)
  {
    v11 = (unsigned __int8 *)v29 + 12 * v30;
    v12 = (unsigned __int8 *)v29;
    do
    {
      v13 = *v12;
      v14 = v12[1];
      v15 = v12[8];
      if (v13 == v14)
        result = (WTF *)WebCore::ContentExtensions::DFABytecodeCompiler::emitCheckValue(this, v13, a2, *((_DWORD *)v12 + 1), v15 != 0);
      else
        result = (WTF *)WebCore::ContentExtensions::DFABytecodeCompiler::emitCheckValueRange(this, v13, v14, a2, *((_DWORD *)v12 + 1), v15 != 0);
      v12 += 12;
    }
    while (v12 != v11);
  }
  if (v31)
  {
    result = (WTF *)WebCore::ContentExtensions::DFABytecodeCompiler::emitJump(this, a2, v32);
    if (!v10)
      goto LABEL_13;
    goto LABEL_12;
  }
  v18 = *(_QWORD **)this;
  v19 = *(unsigned int *)(*(_QWORD *)this + 8);
  v20 = *(unsigned int *)(*(_QWORD *)this + 12);
  v21 = v20 + 1;
  if (v20 >= v19)
  {
    v22 = v19 + (v19 >> 2);
    if (v22 >= 0x10)
      v23 = v22 + 1;
    else
      v23 = 16;
    if (v23 <= v21)
      v24 = v20 + 1;
    else
      v24 = v23;
    if (HIDWORD(v24))
    {
LABEL_36:
      __break(0xC471u);
      JUMPOUT(0x195735738);
    }
    v25 = (void *)*v18;
    v26 = (void *)WTF::fastMalloc((WTF *)v24);
    *((_DWORD *)v18 + 2) = v24;
    *v18 = v26;
    result = (WTF *)memcpy(v26, v25, v20);
    if (v25)
    {
      if ((void *)*v18 == v25)
      {
        *v18 = 0;
        *((_DWORD *)v18 + 2) = 0;
      }
      result = (WTF *)WTF::fastFree((WTF *)v25, v5);
    }
  }
  *((_DWORD *)v18 + 3) = v21;
  if ((_DWORD)v20 == -1)
    goto LABEL_36;
  *(_BYTE *)((v20 + 1) + *v18 - 1) = 10;
  if (v10)
LABEL_12:
    result = (WTF *)WTF::fastFree(v10, v5);
LABEL_13:
  if ((_DWORD)v7)
  {
    v16 = 24 * v7;
    v17 = (char *)v6 + 8;
    do
    {
      result = *(WTF **)v17;
      if (*(_QWORD *)v17)
      {
        *(_QWORD *)v17 = 0;
        *((_DWORD *)v17 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, v5);
      }
      v17 += 24;
      v16 -= 24;
    }
    while (v16);
  }
  if (v6)
    return (WTF *)WTF::fastFree(v6, v5);
  return result;
}

uint64_t WebCore::ContentExtensions::DFABytecodeCompiler::compiledNodeMaxBytecodeSize(WebCore::ContentExtensions::DFABytecodeCompiler *this, unsigned int a2)
{
  _QWORD *v2;
  const WebCore::ContentExtensions::DFANode *v3;
  uint64_t v5;
  int v6;
  uint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (const WebCore::ContentExtensions::DFANode *)(*v2 + 12 * a2);
  if ((*((_BYTE *)v3 + 11) & 1) != 0)
    return 0;
  v5 = *(unsigned __int16 *)(*v2 + 12 * a2 + 8);
  if (*(_WORD *)(*v2 + 12 * a2 + 8))
  {
    v8 = 8 * v5;
    v9 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
    v11 = 0;
    v12 = v2[2] + 8 * *(unsigned int *)v3;
    do
    {
      *(_QWORD *)((char *)v9 + v11) = *(_QWORD *)(v12 + v11);
      v11 += 8;
    }
    while (v8 != v11);
    v13 = 0;
    v6 = 0;
    do
    {
      v14 = *(_QWORD *)((char *)v9 + v13);
      v15 = HIDWORD(v14) & 0x7FFFF;
      if ((_DWORD)v15)
      {
        if (WORD1(v15))
          v16 = 32;
        else
          v16 = 16;
        if (v15 <= 0xFF)
          v17 = 0;
        else
          v17 = v16;
        if (v17)
        {
          if (v17 == 32)
            v18 = 4;
          else
            v18 = 3;
        }
        else
        {
          v18 = 2;
        }
      }
      else
      {
        v18 = 1;
      }
      if (BYTE3(v14))
        v19 = 4;
      else
        v19 = 3;
      if (v14 < 0x10000)
        v19 = 2;
      if (v14 >= 0x100)
        v20 = v19;
      else
        v20 = 1;
      v6 += v18 + v20;
      v13 += 8;
    }
    while (v8 != v13);
    WTF::fastFree(v9, v10);
  }
  else
  {
    v6 = 0;
  }
  return WebCore::ContentExtensions::DFABytecodeCompiler::nodeTransitionsMaxBytecodeSize(this, v3) + v6;
}

uint64_t WebCore::ContentExtensions::DFABytecodeCompiler::nodeTransitionsMaxBytecodeSize(WebCore::ContentExtensions::DFABytecodeCompiler *this, const WebCore::ContentExtensions::DFANode *a2)
{
  void *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  WTF *v13;
  WTF *v15;
  unsigned int v16;
  WTF *v17;
  unsigned int v18;
  unsigned __int8 v19;

  WebCore::ContentExtensions::DFABytecodeCompiler::transitions(this, a2, (uint64_t *)&v15);
  v3 = v15;
  v4 = v16;
  if (v16)
  {
    v5 = 0;
    v6 = 24 * v16;
    v7 = (unsigned __int8 *)v15 + 1;
    do
    {
      v5 += 4 * (*v7 - *(v7 - 1)) + 7;
      v7 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  else
  {
    v5 = 0;
  }
  if (v18)
  {
    v8 = (unsigned __int8 *)v17;
    do
    {
      if (*v8 == v8[1])
        v9 = 6;
      else
        v9 = 7;
      v5 += v9;
      v8 += 12;
    }
    while (v8 != (unsigned __int8 *)((char *)v17 + 12 * v18));
  }
  v10 = v19;
  if (v17)
    WTF::fastFree(v17, v2);
  if ((_DWORD)v4)
  {
    v11 = 24 * v4;
    v12 = (char *)v3 + 8;
    do
    {
      v13 = *(WTF **)v12;
      if (*(_QWORD *)v12)
      {
        *(_QWORD *)v12 = 0;
        *((_DWORD *)v12 + 2) = 0;
        WTF::fastFree(v13, v2);
      }
      v12 += 24;
      v11 -= 24;
    }
    while (v11);
  }
  if (v3)
    WTF::fastFree(v3, v2);
  if (v10)
    return (v5 + 5);
  else
    return (v5 + 1);
}

void WebCore::ContentExtensions::DFABytecodeCompiler::extractJumpTable(uint64_t *a1@<X1>, unsigned int a2@<W2>, unsigned int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *((unsigned int *)a1 + 3);
  if (v5 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x195735B60);
  }
  v7 = a2;
  v8 = *a1;
  v9 = (_BYTE *)(*a1 + 12 * a2);
  *(_BYTE *)a4 = *v9;
  if (v5 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x195735B68);
  }
  v10 = v8 + 12 * a3;
  *(_BYTE *)(a4 + 1) = *(_BYTE *)(v10 + 1);
  *(_BYTE *)(a4 + 2) = *(_BYTE *)(v10 + 8);
  v11 = a3 - a2 + 1;
  if (a3 - a2 == -1)
  {
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = v11;
    *(_DWORD *)(a4 + 20) = v11;
    v12 = v8 + 12 * v5 - (_QWORD)&v9[12 * v11];
    if (v12)
    {
      v13 = 12 * (v12 / 12) + 12 * a2 + v8 - 12;
      v14 = 3 * v5;
      v15 = 12 * a2 + 12 * v11 - 12 * v5;
      v16 = v8 + 4 * v14 - 12;
      do
      {
        v17 = *(_QWORD *)v16;
        *(_DWORD *)(v13 + 8) = *(_DWORD *)(v16 + 8);
        *(_QWORD *)v13 = v17;
        v13 -= 12;
        v16 -= 12;
        v15 += 12;
      }
      while (v15);
    }
  }
  else
  {
    if (v11 >> 30)
    {
LABEL_19:
      __break(0xC471u);
      JUMPOUT(0x195735B58);
    }
    v18 = WTF::fastMalloc((WTF *)(4 * v11));
    v19 = 0;
    v20 = *a1;
    v21 = (int *)(*a1 + 12 * v7 + 4);
    do
    {
      if (v7 + v19 >= (unint64_t)*((unsigned int *)a1 + 3))
        goto LABEL_19;
      v22 = *v21;
      v21 += 3;
      *(_DWORD *)(v18 + 4 * v19++) = v22;
    }
    while (v11 != v19);
    v23 = *((_DWORD *)a1 + 3);
    *(_QWORD *)(a4 + 8) = v18;
    *(_DWORD *)(a4 + 16) = v11;
    *(_DWORD *)(a4 + 20) = v11;
    v24 = v20 + 12 * v7;
    if (v24 + 12 * v11 != v20 + 12 * v23)
    {
      v25 = 12 * v11;
      v26 = 12 * v23 - 12 * v7;
      do
      {
        v27 = *(_QWORD *)(v24 + 12 * v11);
        *(_DWORD *)(v24 + 8) = *(_DWORD *)(v24 + v25 + 8);
        *(_QWORD *)v24 = v27;
        v24 += 12;
        v26 -= 12;
      }
      while (v25 != v26);
    }
  }
  *((_DWORD *)a1 + 3) -= v11;
}

_QWORD *WebCore::ContentExtensions::DFABytecodeCompiler::transitions@<X0>(_QWORD *this@<X0>, const WebCore::ContentExtensions::DFANode *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 v4;
  int v5;
  _QWORD *v7;
  const WebCore::ContentExtensions::DFA *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  unsigned __int16 v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unsigned __int16 v30;
  int v31;
  int v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t j;
  unsigned __int8 v47;
  uint64_t v48;
  int v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;
  int v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  void **p_src;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void *__src;
  int v108;
  unsigned int v109;
  _OWORD v110[32];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_DWORD *)a3 + 9) = -1;
  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  v110[30] = v4;
  v110[31] = v4;
  v110[28] = v4;
  v110[29] = v4;
  v110[26] = v4;
  v110[27] = v4;
  v110[24] = v4;
  v110[25] = v4;
  v110[22] = v4;
  v110[23] = v4;
  v110[20] = v4;
  v110[21] = v4;
  v110[18] = v4;
  v110[19] = v4;
  v110[16] = v4;
  v110[17] = v4;
  v110[14] = v4;
  v110[15] = v4;
  v110[12] = v4;
  v110[13] = v4;
  v110[10] = v4;
  v110[11] = v4;
  v110[8] = v4;
  v110[9] = v4;
  v110[7] = v4;
  v110[5] = v4;
  v110[6] = v4;
  v110[3] = v4;
  v110[4] = v4;
  v110[1] = v4;
  v110[2] = v4;
  v110[0] = v4;
  v5 = *((unsigned __int8 *)a2 + 10);
  if (*((_BYTE *)a2 + 10))
  {
    v7 = this;
    v8 = (const WebCore::ContentExtensions::DFA *)this[1];
    v9 = *((unsigned int *)a2 + 1);
    v10 = *((_QWORD *)v8 + 4);
    if (*(_BYTE *)(v10 + 2 * v9))
    {
      LOBYTE(v11) = 0;
      v12 = *((_DWORD *)a2 + 1);
LABEL_15:
      for (i = v9 + v5; i != v12; ++v12)
      {
        if ((char)v11 + 1 != *(char *)(v10 + 2 * v12))
          break;
        v11 = *(unsigned __int8 *)(v10 + 2 * v12 + 1);
        if (v11 == 127)
          goto LABEL_6;
      }
      *((_BYTE *)a3 + 32) = 0;
      v26 = this[1];
      v27 = *(_QWORD *)(v26 + 48);
      v28 = *(_QWORD *)(v26 + 32);
      do
      {
        v29 = (char *)(v28 + 2 * v9);
        v30 = *v29;
        v31 = v29[1];
        if (v31 >= v30)
        {
          v32 = *(_DWORD *)(v27 + 4 * v9);
          v33 = (v31 + 1);
          v34 = (_DWORD *)v110 + v30;
          v35 = v33 - v30;
          do
          {
            *v34++ = v32;
            --v35;
          }
          while (v35);
        }
        v36 = v9 + 1;
        v9 = (v9 + 1);
      }
      while (i != v36);
      goto LABEL_24;
    }
    v11 = *(unsigned __int8 *)(v10 + 2 * v9 + 1);
    if (v11 != 127)
    {
      v12 = v9 + 1;
      goto LABEL_15;
    }
LABEL_6:
    *((_BYTE *)a3 + 32) = 1;
    this = (_QWORD *)WebCore::ContentExtensions::DFANode::bestFallbackTarget(a2, v8);
    *((_DWORD *)a3 + 9) = (_DWORD)this;
    if (*((_BYTE *)a2 + 10))
    {
      v13 = *((unsigned int *)a2 + 1);
      v14 = v13 + *((unsigned __int8 *)a2 + 10);
      v15 = v7[1];
      v16 = *(_QWORD *)(v15 + 48);
      do
      {
        v17 = *(_DWORD *)(v16 + 4 * v13);
        if ((_DWORD)this != v17)
        {
          v18 = (char *)(*(_QWORD *)(v15 + 32) + 2 * v13);
          v19 = *v18;
          v20 = v18[1];
          if (v20 >= v19)
          {
            v21 = (v20 + 1);
            v22 = (_DWORD *)v110 + v19;
            v23 = v21 - v19;
            do
            {
              *v22++ = v17;
              --v23;
            }
            while (v23);
          }
        }
        v24 = v13 + 1;
        v13 = (v13 + 1);
      }
      while (v14 != v24);
    }
  }
  else
  {
    *((_BYTE *)a3 + 32) = 0;
  }
LABEL_24:
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = a3 + 2;
  v43 = MEMORY[0x1E0CBF868];
  do
  {
    v44 = *((_DWORD *)v110 + v39);
    if (!v40)
    {
      LODWORD(j) = v39;
      goto LABEL_51;
    }
    v45 = *((_DWORD *)v110 + v41);
    if (v44 == v45)
    {
      for (j = v39 + 1; j != 128; ++j)
      {
        if (*((_DWORD *)v110 + j) != v44)
        {
          v44 = *((_DWORD *)v110 + j);
          goto LABEL_34;
        }
      }
      LOBYTE(j) = v41;
      goto LABEL_57;
    }
    j = v39;
LABEL_34:
    v47 = j - 1;
    if (v41 < 0x41u || (j - 1) > 0x5Au)
      goto LABEL_44;
    v48 = v41;
    if (v41 <= v47)
    {
      while (v45 == *((_DWORD *)v110 + *(unsigned __int8 *)(v43 + v48)))
      {
        if (++v48 == j)
        {
          v49 = v41;
          do
            *((_DWORD *)v110 + *(unsigned __int8 *)(v43 + v49++)) = -1;
          while (v49 <= v47);
          v45 = *((_DWORD *)v110 + v41);
          goto LABEL_42;
        }
      }
LABEL_44:
      LOBYTE(v106) = v41;
      BYTE1(v106) = j - 1;
      HIDWORD(v106) = v45;
      LOBYTE(__src) = 1;
      if (v38 == *((_DWORD *)a3 + 6))
      {
        this = WTF::Vector<WebCore::ContentExtensions::DFANode,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a3 + 2), v38 + 1, (unint64_t)&v106);
        v54 = *((_DWORD *)a3 + 7);
        v37 = a3[2];
        v55 = v37 + 12 * v54;
        v56 = *((_DWORD *)this + 2);
        *(_QWORD *)v55 = *this;
        *(_DWORD *)(v55 + 8) = v56;
      }
      else
      {
        v57 = v37 + 12 * v38;
        v58 = v106;
        *(_DWORD *)(v57 + 8) = (_DWORD)__src;
        *(_QWORD *)v57 = v58;
        v54 = *((_DWORD *)a3 + 7);
      }
      v38 = v54 + 1;
      *((_DWORD *)a3 + 7) = v38;
      goto LABEL_50;
    }
LABEL_42:
    v50 = *(_BYTE *)(v43 + (j - 1));
    LOBYTE(v106) = *(_BYTE *)(v43 + v41);
    BYTE1(v106) = v50;
    HIDWORD(v106) = v45;
    LOBYTE(__src) = 0;
    if (v38 == *((_DWORD *)a3 + 6))
    {
      this = WTF::Vector<WebCore::ContentExtensions::DFANode,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a3 + 2), v38 + 1, (unint64_t)&v106);
      v51 = *((_DWORD *)a3 + 7);
      v37 = a3[2];
      v52 = v37 + 12 * v51;
      v53 = *((_DWORD *)this + 2);
      *(_QWORD *)v52 = *this;
      *(_DWORD *)(v52 + 8) = v53;
    }
    else
    {
      v59 = v37 + 12 * v38;
      v60 = v106;
      *(_DWORD *)(v59 + 8) = (_DWORD)__src;
      *(_QWORD *)v59 = v60;
      v51 = *((_DWORD *)a3 + 7);
    }
    v38 = v51 + 1;
    *((_DWORD *)a3 + 7) = v38;
    v44 = *((_DWORD *)v110 + j);
LABEL_50:
    v39 = j;
LABEL_51:
    v40 = v44 != -1;
    if (v44 != -1)
      v41 = j;
    ++v39;
  }
  while (v39 != 128);
  if (v44 == -1)
    goto LABEL_61;
  v44 = *((_DWORD *)v110 + j);
LABEL_57:
  LOBYTE(v106) = j;
  BYTE1(v106) = 127;
  HIDWORD(v106) = v44;
  LOBYTE(__src) = 1;
  if (v38 == *((_DWORD *)a3 + 6))
  {
    this = WTF::Vector<WebCore::ContentExtensions::DFANode,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a3 + 2), v38 + 1, (unint64_t)&v106);
    v61 = *((_DWORD *)a3 + 7);
    v62 = a3[2] + 12 * v61;
    v63 = *((_DWORD *)this + 2);
    *(_QWORD *)v62 = *this;
    *(_DWORD *)(v62 + 8) = v63;
  }
  else
  {
    v64 = v37 + 12 * v38;
    v65 = v106;
    *(_DWORD *)(v64 + 8) = (_DWORD)__src;
    *(_QWORD *)v64 = v65;
    v61 = *((_DWORD *)a3 + 7);
  }
  v38 = v61 + 1;
  *((_DWORD *)a3 + 7) = v38;
LABEL_61:
  if (!v38)
    return this;
  v66 = 0;
  v67 = 0;
  v68 = -1;
  while (2)
  {
    v69 = *v42;
    v70 = (unsigned __int8 *)(*v42 + 12 * v67);
    v71 = *v70;
    v72 = v70[1];
    if (v66)
    {
      if (v71 != v72 || *(unsigned __int8 *)(v66 + 8) != *(unsigned __int8 *)(v69 + 12 * v67 + 8))
        goto LABEL_68;
      if (v38 <= v67 - 1)
        goto LABEL_106;
      if (*(unsigned __int8 *)(v69 + 12 * (v67 - 1) + 1) + 1 != v71)
      {
LABEL_68:
        if (v67 - v68 < 2)
        {
          v66 = 0;
        }
        else
        {
          WebCore::ContentExtensions::DFABytecodeCompiler::extractJumpTable(a3 + 2, v68, v67 - 1, (uint64_t)&v106);
          v74 = *((unsigned int *)a3 + 3);
          if ((_DWORD)v74 == *((_DWORD *)a3 + 2))
          {
            v75 = WTF::Vector<WebCore::ContentExtensions::DFABytecodeCompiler::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)a3, v74 + 1, (unint64_t)&v106);
            LODWORD(v74) = *((_DWORD *)a3 + 3);
            v76 = *a3;
            v77 = *a3 + 24 * v74;
            v78 = *(_BYTE *)(v75 + 2);
            *(_WORD *)v77 = *(_WORD *)v75;
            *(_BYTE *)(v77 + 2) = v78;
            v79 = (unsigned int *)(v75 + 20);
            v80 = *(unsigned int *)(v75 + 20);
            *(_QWORD *)(v77 + 8) = 0;
            *(_QWORD *)(v77 + 16) = 0;
            v81 = v77 + 8;
            *(_DWORD *)(v81 + 12) = v80;
            if ((_DWORD)v80)
            {
              if (v80 >> 30)
              {
                __break(0xC471u);
                JUMPOUT(0x19573633CLL);
              }
              p_src = (void **)(v75 + 8);
              v83 = (void *)WTF::fastMalloc((WTF *)(4 * v80));
              *(_DWORD *)(v76 + 24 * v74 + 16) = v80;
              *(_QWORD *)v81 = v83;
              goto LABEL_80;
            }
          }
          else
          {
            v84 = *a3;
            v85 = *a3 + 24 * v74;
            v86 = BYTE2(v106);
            *(_WORD *)v85 = v106;
            *(_BYTE *)(v85 + 2) = v86;
            v87 = v109;
            *(_QWORD *)(v85 + 8) = 0;
            *(_QWORD *)(v85 + 16) = 0;
            v88 = v85 + 8;
            *(_DWORD *)(v88 + 12) = v87;
            if ((_DWORD)v87)
            {
              if (v87 >> 30)
              {
                __break(0xC471u);
                JUMPOUT(0x195736344);
              }
              v83 = (void *)WTF::fastMalloc((WTF *)(4 * v87));
              *(_DWORD *)(v84 + 24 * v74 + 16) = v87;
              *(_QWORD *)v88 = v83;
              v79 = &v109;
              p_src = &__src;
LABEL_80:
              memcpy(v83, *p_src, 4 * *v79);
            }
          }
          *((_DWORD *)a3 + 3) = v74 + 1;
          this = __src;
          if (__src)
          {
            __src = 0;
            v108 = 0;
            this = (_QWORD *)WTF::fastFree((WTF *)this, v73);
          }
          v66 = 0;
          v38 = *((_DWORD *)a3 + 7);
          v67 = v68;
        }
        v68 = -1;
      }
    }
    else if (v71 == v72)
    {
      v68 = v67;
      v66 = *v42 + 12 * v67;
    }
    else
    {
      v66 = 0;
    }
    if (v38 > ++v67)
      continue;
    break;
  }
  if (v66)
    v89 = v38 - (unint64_t)v68 >= 2;
  else
    v89 = 0;
  if (v89)
  {
    WebCore::ContentExtensions::DFABytecodeCompiler::extractJumpTable(a3 + 2, v68, v38 - 1, (uint64_t)&v106);
    v91 = *((unsigned int *)a3 + 3);
    if ((_DWORD)v91 == *((_DWORD *)a3 + 2))
    {
      v92 = WTF::Vector<WebCore::ContentExtensions::DFABytecodeCompiler::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)a3, v91 + 1, (unint64_t)&v106);
      LODWORD(v91) = *((_DWORD *)a3 + 3);
      v93 = *a3;
      v94 = *a3 + 24 * v91;
      v95 = *(_BYTE *)(v92 + 2);
      *(_WORD *)v94 = *(_WORD *)v92;
      *(_BYTE *)(v94 + 2) = v95;
      v96 = *(unsigned int *)(v92 + 20);
      *(_QWORD *)(v94 + 8) = 0;
      *(_QWORD *)(v94 + 16) = 0;
      v97 = v94 + 8;
      *(_DWORD *)(v97 + 12) = v96;
      if ((_DWORD)v96)
      {
        if (v96 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x19573634CLL);
        }
        v98 = v92;
        v99 = (void *)WTF::fastMalloc((WTF *)(4 * v96));
        *(_DWORD *)(v93 + 24 * v91 + 16) = v96;
        *(_QWORD *)v97 = v99;
        memcpy(v99, *(const void **)(v98 + 8), 4 * *(unsigned int *)(v98 + 20));
      }
    }
    else
    {
      v100 = *a3;
      v101 = *a3 + 24 * v91;
      v102 = BYTE2(v106);
      *(_WORD *)v101 = v106;
      *(_BYTE *)(v101 + 2) = v102;
      v103 = v109;
      *(_QWORD *)(v101 + 8) = 0;
      *(_QWORD *)(v101 + 16) = 0;
      v104 = v101 + 8;
      *(_DWORD *)(v104 + 12) = v103;
      if ((_DWORD)v103)
      {
        if (v103 >> 30)
        {
LABEL_106:
          __break(0xC471u);
          JUMPOUT(0x195736334);
        }
        v105 = (void *)WTF::fastMalloc((WTF *)(4 * v103));
        *(_DWORD *)(v100 + 24 * v91 + 16) = v103;
        *(_QWORD *)v104 = v105;
        memcpy(v105, __src, 4 * v103);
      }
    }
    *((_DWORD *)a3 + 3) = v91 + 1;
    this = __src;
    if (__src)
    {
      __src = 0;
      v108 = 0;
      return (_QWORD *)WTF::fastFree((WTF *)this, v90);
    }
  }
  return this;
}

uint64_t WebCore::ContentExtensions::DFABytecodeCompiler::checkForJumpTableMaxBytecodeSize(uint64_t a1, unsigned __int8 *a2)
{
  return 4 * (a2[1] - *a2) + 7;
}

uint64_t WebCore::ContentExtensions::DFABytecodeCompiler::checkForRangeMaxBytecodeSize(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 == a2[1])
    return 6;
  else
    return 7;
}

uint64_t WebCore::ContentExtensions::DFABytecodeCompiler::compileJumpTable(uint64_t result, unsigned int a2, char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  size_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  char *v69;
  __int128 v70;
  int v71;

  v5 = (uint64_t *)result;
  v6 = *(_QWORD *)result;
  v7 = *(unsigned int *)(*(_QWORD *)result + 12);
  v8 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v8)
  {
    v9 = (unsigned int *)*((_QWORD *)a3 + 1);
    v10 = *(_DWORD *)(result + 44);
    v11 = 4 * v8;
    if (v10 > a2)
    {
      LOBYTE(v12) = 0;
      while (1)
      {
        v13 = *v9;
        if (v10 <= v13)
          break;
        v14 = *(_QWORD *)(result + 32);
        v15 = *(_DWORD *)(v14 + 4 * v13);
        if (v15 == -1)
        {
          v17 = *(_DWORD *)(result + 28);
          if (v17 <= v13)
            goto LABEL_104;
          if (v17 <= a2)
            goto LABEL_105;
          v16 = *(_DWORD *)(*(_QWORD *)(result + 16) + 4 * v13)
              + v7
              - (*(_DWORD *)(*(_QWORD *)(result + 16) + 4 * a2)
               + *(_DWORD *)(v14 + 4 * a2));
        }
        else
        {
          v16 = v15 - v7;
        }
        if (v16 == (char)v16)
        {
          v18 = 0;
        }
        else if ((v16 + 0x800000) >> 24)
        {
          v18 = 48;
        }
        else
        {
          v18 = 32;
        }
        if (v12 <= v18)
          v12 = v18;
        else
          v12 = v12;
        ++v9;
        v11 -= 4;
        if (!v11)
          goto LABEL_21;
      }
LABEL_91:
      __break(0xC471u);
      JUMPOUT(0x1957367F8);
    }
    LOBYTE(v12) = 0;
    while (1)
    {
      v65 = *v9;
      if (v10 <= v65)
        goto LABEL_91;
      v66 = *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * v65);
      if (v66 == -1)
        break;
      if (v66 - (_DWORD)v7 == (char)(v66 - v7))
      {
        v67 = 0;
      }
      else if ((v66 - v7 + 0x800000) >> 24)
      {
        v67 = 48;
      }
      else
      {
        v67 = 32;
      }
      if (v12 <= v67)
        v12 = v67;
      else
        v12 = v12;
      ++v9;
      v11 -= 4;
      if (!v11)
        goto LABEL_21;
    }
    v68 = *(_DWORD *)(result + 28);
    if (v68 <= v65)
    {
LABEL_104:
      __break(0xC471u);
      JUMPOUT(0x195736864);
    }
    if (v68 > a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19573685CLL);
    }
LABEL_105:
    __break(0xC471u);
LABEL_106:
    JUMPOUT(0x1957367F0);
  }
  v12 = 0;
LABEL_21:
  if (a3[2])
    v19 = 3;
  else
    v19 = 2;
  v20 = v7 + 1;
  v21 = *(unsigned int *)(v6 + 8);
  if (v7 >= v21)
  {
    v22 = v21 + (v21 >> 2);
    if (v22 >= 0x10)
      v23 = v22 + 1;
    else
      v23 = 16;
    if (v23 <= v20)
      v24 = v7 + 1;
    else
      v24 = v23;
    if (HIDWORD(v24))
    {
      __break(0xC471u);
      JUMPOUT(0x195736830);
    }
    v25 = *(void **)v6;
    v26 = (void *)WTF::fastMalloc((WTF *)v24);
    *(_DWORD *)(v6 + 8) = v24;
    *(_QWORD *)v6 = v26;
    result = (uint64_t)memcpy(v26, v25, v7);
    if (v25)
    {
      if (*(void **)v6 == v25)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v25, v27);
    }
  }
  *(_DWORD *)(v6 + 12) = v20;
  if ((_DWORD)v7 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x195736818);
  }
  *(_BYTE *)((v7 + 1) + *(_QWORD *)v6 - 1) = v19 | v12;
  v28 = *v5;
  v69 = a3;
  v29 = *a3;
  v30 = *(unsigned int *)(*v5 + 8);
  v31 = *(unsigned int *)(*v5 + 12);
  v32 = v31 + 1;
  if (v31 >= v30)
  {
    v33 = v30 + (v30 >> 2);
    if (v33 >= 0x10)
      v34 = v33 + 1;
    else
      v34 = 16;
    if (v34 <= v32)
      v35 = v31 + 1;
    else
      v35 = v34;
    if (HIDWORD(v35))
    {
      __break(0xC471u);
      JUMPOUT(0x195736838);
    }
    v36 = *(void **)v28;
    v37 = (void *)WTF::fastMalloc((WTF *)v35);
    *(_DWORD *)(v28 + 8) = v35;
    *(_QWORD *)v28 = v37;
    result = (uint64_t)memcpy(v37, v36, v31);
    if (v36)
    {
      if (*(void **)v28 == v36)
      {
        *(_QWORD *)v28 = 0;
        *(_DWORD *)(v28 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v36, v38);
    }
  }
  *(_DWORD *)(v28 + 12) = v32;
  if ((_DWORD)v31 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x195736820);
  }
  *(_BYTE *)((v31 + 1) + *(_QWORD *)v28 - 1) = v29;
  v39 = *v5;
  v40 = v69[1];
  v41 = *(unsigned int *)(*v5 + 8);
  v42 = *(unsigned int *)(*v5 + 12);
  v43 = v42 + 1;
  if (v42 >= v41)
  {
    v44 = v41 + (v41 >> 2);
    if (v44 >= 0x10)
      v45 = v44 + 1;
    else
      v45 = 16;
    if (v45 <= v43)
      v46 = v42 + 1;
    else
      v46 = v45;
    if (HIDWORD(v46))
    {
      __break(0xC471u);
      JUMPOUT(0x195736840);
    }
    v47 = *(void **)v39;
    v48 = (void *)WTF::fastMalloc((WTF *)v46);
    *(_DWORD *)(v39 + 8) = v46;
    *(_QWORD *)v39 = v48;
    result = (uint64_t)memcpy(v48, v47, v42);
    if (v47)
    {
      if (*(void **)v39 == v47)
      {
        *(_QWORD *)v39 = 0;
        *(_DWORD *)(v39 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v47, v49);
    }
  }
  *(_DWORD *)(v39 + 12) = v43;
  if ((_DWORD)v42 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x195736828);
  }
  *(_BYTE *)((v42 + 1) + *(_QWORD *)v39 - 1) = v40;
  v50 = *((unsigned int *)v69 + 5);
  if ((_DWORD)v50)
  {
    v51 = (unsigned int *)*((_QWORD *)v69 + 1);
    v52 = 4 * v50;
    while (1)
    {
      v53 = *v51;
      v54 = *((_DWORD *)v5 + 11);
      if (v54 <= v53)
        break;
      v55 = v5[4];
      v56 = *(_DWORD *)(v55 + 4 * v53);
      if (v56 == -1)
      {
        v58 = *((_DWORD *)v5 + 7);
        if (v58 <= v53)
        {
          __break(0xC471u);
          JUMPOUT(0x195736800);
        }
        if (v58 <= a2)
        {
          __break(0xC471u);
          JUMPOUT(0x195736808);
        }
        if (v54 <= a2)
        {
          __break(0xC471u);
          JUMPOUT(0x195736810);
        }
        v57 = *(_DWORD *)(v5[2] + 4 * v53) + v7 - (*(_DWORD *)(v5[2] + 4 * a2) + *(_DWORD *)(v55 + 4 * a2));
      }
      else
      {
        v57 = v56 - v7;
      }
      v59 = *(_DWORD *)(*v5 + 12);
      LOBYTE(v70) = v12;
      *(_QWORD *)((char *)&v70 + 4) = __PAIR64__(v7, v57);
      HIDWORD(v70) = v59;
      v71 = v53;
      v60 = *((unsigned int *)v5 + 15);
      if ((_DWORD)v60 == *((_DWORD *)v5 + 14))
      {
        v61 = WTF::Vector<WebCore::ContentExtensions::DFABytecodeCompiler::LinkRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v5 + 6, v60 + 1, (unint64_t)&v70);
        v62 = v5[6] + 20 * *((unsigned int *)v5 + 15);
        v63 = *(_OWORD *)v61;
        v64 = *((_DWORD *)v61 + 4);
      }
      else
      {
        v62 = v5[6] + 20 * v60;
        v63 = v70;
        v64 = v71;
      }
      *(_DWORD *)(v62 + 16) = v64;
      *(_OWORD *)v62 = v63;
      ++*((_DWORD *)v5 + 15);
      result = WebCore::ContentExtensions::appendZeroes(*v5, v12);
      ++v51;
      v52 -= 4;
      if (!v52)
        return result;
    }
    __break(0xC471u);
    goto LABEL_106;
  }
  return result;
}

uint64_t WebCore::ContentExtensions::DFABytecodeCompiler::compileCheckForRange(WebCore::ContentExtensions::DFABytecodeCompiler *a1, unsigned int a2, unsigned __int8 *a3)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  v5 = *a3;
  v6 = a3[1];
  v7 = *((_DWORD *)a3 + 1);
  v8 = a3[8];
  if (v5 == v6)
    return WebCore::ContentExtensions::DFABytecodeCompiler::emitCheckValue(a1, v5, a2, v7, v8 != 0);
  else
    return WebCore::ContentExtensions::DFABytecodeCompiler::emitCheckValueRange(a1, v5, v6, a2, v7, v8 != 0);
}

WTF *WebCore::ContentExtensions::DFABytecodeCompiler::compile(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  void *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  void *v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t *v39;
  unint64_t v40;
  int v41;
  WTF *result;
  uint64_t *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;

  v2 = *this;
  v3 = *((unsigned int *)*this + 2);
  v4 = *((unsigned int *)*this + 3);
  v5 = v4 + 4;
  if (v4 + 4 > v3)
  {
    v6 = v3 + (v3 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= v5)
      v8 = v4 + 4;
    else
      v8 = v7;
    if (HIDWORD(v8))
    {
      __break(0xC471u);
      JUMPOUT(0x195736F7CLL);
    }
    v9 = (void *)*v2;
    v10 = (void *)WTF::fastMalloc((WTF *)v8);
    *((_DWORD *)v2 + 2) = v8;
    *v2 = (uint64_t)v10;
    memcpy(v10, v9, v4);
    if (v9)
    {
      if ((void *)*v2 == v9)
      {
        *v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
  }
  *((_DWORD *)v2 + 3) = v5;
  if ((v4 + 4) <= 3uLL)
  {
    __break(0xC471u);
    JUMPOUT(0x195736F84);
  }
  *(_DWORD *)((v4 + 4) + *v2 - 4) = 0;
  v12 = *((unsigned int *)this[1] + 3);
  v13 = *((unsigned int *)this + 11);
  if (v13 < v12)
  {
    v14 = *((unsigned int *)this + 10);
    if (v14 < v12)
    {
      v15 = v14 + (v14 >> 2);
      if (v15 >= 0x10)
        v16 = v15 + 1;
      else
        v16 = 16;
      if (v16 <= v12)
        v17 = *((unsigned int *)this[1] + 3);
      else
        v17 = v16;
      if (v17 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x195736F9CLL);
      }
      v18 = this[4];
      v19 = (uint64_t *)WTF::fastMalloc((WTF *)(4 * v17));
      *((_DWORD *)this + 10) = v17;
      this[4] = v19;
      memcpy(v19, v18, 4 * v13);
      if (v18)
      {
        if (this[4] == v18)
        {
          this[4] = 0;
          *((_DWORD *)this + 10) = 0;
        }
        WTF::fastFree((WTF *)v18, v20);
      }
    }
  }
  *((_DWORD *)this + 11) = v12;
  v21 = this[1];
  if (*((_DWORD *)v21 + 3))
  {
    v22 = 0;
    do
    {
      if (v22 >= *((unsigned int *)this + 11))
      {
        __break(0xC471u);
        JUMPOUT(0x195736F64);
      }
      *((_DWORD *)this[4] + v22++) = -1;
      v23 = *((unsigned int *)v21 + 3);
    }
    while (v22 < v23);
    v24 = (unsigned int *)this + 7;
    v25 = *((unsigned int *)this + 7);
    if (v25 < v23)
    {
      v26 = *((unsigned int *)this + 6);
      if (v26 < v23)
      {
        v27 = v26 + (v26 >> 2);
        if (v27 >= 0x10)
          v28 = v27 + 1;
        else
          v28 = 16;
        if (v28 <= v23)
          v29 = v23;
        else
          v29 = v28;
        if (v29 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x195736FA4);
        }
        v30 = this[2];
        v31 = (uint64_t *)WTF::fastMalloc((WTF *)(4 * v29));
        *((_DWORD *)this + 6) = v29;
        this[2] = v31;
        memcpy(v31, v30, 4 * v25);
        if (v30)
        {
          if (this[2] == v30)
          {
            this[2] = 0;
            *((_DWORD *)this + 6) = 0;
          }
          WTF::fastFree((WTF *)v30, v32);
        }
      }
    }
  }
  else
  {
    LODWORD(v23) = 0;
    v24 = (unsigned int *)this + 7;
  }
  *((_DWORD *)this + 7) = v23;
  v33 = this[1];
  v34 = *((_DWORD *)v33 + 16);
  v35 = *v33;
  v36 = *(unsigned __int16 *)(*v33 + 12 * v34 + 8);
  if (*(_WORD *)(*v33 + 12 * v34 + 8))
  {
    v60 = 12 * v34;
    v61 = 8 * v36;
    v62 = (WTF *)WTF::fastMalloc((WTF *)(8 * v36));
    v64 = 0;
    v65 = v33[2] + 8 * *(unsigned int *)(v35 + v60);
    do
    {
      *(_QWORD *)((char *)v62 + v64) = *(_QWORD *)(v65 + v64);
      v64 += 8;
    }
    while (v61 != v64);
    v66 = 0;
    v67 = 0;
    do
    {
      v68 = *(_QWORD *)((char *)v62 + v66);
      v69 = HIDWORD(v68) & 0x7FFFF;
      if ((_DWORD)v69)
      {
        if (WORD1(v69))
          v70 = 32;
        else
          v70 = 16;
        if (v69 <= 0xFF)
          v71 = 0;
        else
          v71 = v70;
        if (v71)
        {
          if (v71 == 32)
            v72 = 4;
          else
            v72 = 3;
        }
        else
        {
          v72 = 2;
        }
      }
      else
      {
        v72 = 1;
      }
      if (BYTE3(v68))
        v73 = 4;
      else
        v73 = 3;
      if (v68 < 0x10000)
        v73 = 2;
      if (v68 >= 0x100)
        v74 = v73;
      else
        v74 = 1;
      v67 += v72 + v74;
      v66 += 8;
    }
    while (v61 != v66);
    WTF::fastFree(v62, v63);
    v33 = this[1];
    v34 = *((_DWORD *)v33 + 16);
    LODWORD(v23) = *((_DWORD *)this + 7);
    v37 = v67 + 4;
  }
  else
  {
    v37 = 4;
  }
  if (v23 <= v34)
  {
    __break(0xC471u);
    JUMPOUT(0x195736F8CLL);
  }
  *((_DWORD *)this[2] + v34) = v37;
  v38 = WebCore::ContentExtensions::DFABytecodeCompiler::compiledNodeMaxBytecodeSize((WebCore::ContentExtensions::DFABytecodeCompiler *)this, *((_DWORD *)v33 + 16));
  v39 = this[1];
  if (*((_DWORD *)v39 + 3))
  {
    v40 = 0;
    v41 = v38 + 4;
    do
    {
      if (v40 != *((_DWORD *)v39 + 16))
      {
        if (v40 >= *v24)
        {
          __break(0xC471u);
          JUMPOUT(0x195736F74);
        }
        *((_DWORD *)this[2] + v40) = v41;
        v41 += WebCore::ContentExtensions::DFABytecodeCompiler::compiledNodeMaxBytecodeSize((WebCore::ContentExtensions::DFABytecodeCompiler *)this, v40);
        v39 = this[1];
      }
      ++v40;
    }
    while (v40 < *((unsigned int *)v39 + 3));
  }
  result = WebCore::ContentExtensions::DFABytecodeCompiler::compileNode((WTF *)this, *((_DWORD *)v39 + 16), 1);
  v43 = this[1];
  if (*((_DWORD *)v43 + 3))
  {
    v44 = 0;
    do
    {
      if (v44 != *((_DWORD *)v43 + 16))
      {
        result = WebCore::ContentExtensions::DFABytecodeCompiler::compileNode((WTF *)this, v44, 0);
        v43 = this[1];
      }
      ++v44;
      v45 = *((_DWORD *)v43 + 3);
    }
    while (v45 > v44);
    if (v45 && *((_DWORD *)this + 11) <= v45 - 1)
    {
      __break(0xC471u);
      JUMPOUT(0x195736F94);
    }
  }
  v46 = *((unsigned int *)this + 15);
  if ((_DWORD)v46)
  {
    v47 = 20 * v46;
    v48 = (unsigned int *)(this[6] + 2);
    do
    {
      v49 = *v48;
      if (*((_DWORD *)this + 11) <= v49)
      {
        __break(0xC471u);
        JUMPOUT(0x195736F6CLL);
      }
      v50 = *((_DWORD *)this[4] + v49);
      if (v50 >= 0x7FFFFFFF)
      {
        __break(0xC471u);
        JUMPOUT(0x195736E1CLL);
      }
      v51 = v50 - *(v48 - 2);
      switch((*((_BYTE *)v48 - 16) >> 4) | (16 * *((_BYTE *)v48 - 16)))
      {
        case 0:
          if (v51 != (char)v51)
          {
            __break(0xC471u);
            JUMPOUT(0x195736E7CLL);
          }
          v52 = *(v48 - 1);
          if (*((_DWORD *)*this + 3) <= v52)
          {
            __break(0xC471u);
            JUMPOUT(0x195736EDCLL);
          }
          *(_BYTE *)(**this + v52) = v51;
          break;
        case 1:
          if (v51 != (__int16)v51)
          {
            __break(0xC471u);
            JUMPOUT(0x195736E5CLL);
          }
          v58 = *(v48 - 1);
          if (v58 + 2 > (unint64_t)*((unsigned int *)*this + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x195736EFCLL);
          }
          *(_WORD *)(**this + v58) = v51;
          break;
        case 2:
          if ((v51 - 0x800000) >> 24 != 255)
          {
            __break(0xC471u);
            JUMPOUT(0x195736E3CLL);
          }
          v53 = *(v48 - 1);
          v54 = *((unsigned int *)*this + 3);
          if (v53 + 2 > v54)
          {
            __break(0xC471u);
            JUMPOUT(0x195736EBCLL);
          }
          v55 = **this;
          *(_WORD *)(v55 + v53) = v51;
          v56 = v53 + 2;
          if (v54 <= v56)
          {
            __break(0xC471u);
            JUMPOUT(0x195736F1CLL);
          }
          *(_BYTE *)(v55 + v56) = BYTE2(v51);
          break;
        case 3:
          v57 = *(v48 - 1);
          if (v57 + 4 > (unint64_t)*((unsigned int *)*this + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x195736E9CLL);
          }
          *(_DWORD *)(**this + v57) = v51;
          break;
        default:
          break;
      }
      v48 += 5;
      v47 -= 20;
    }
    while (v47);
  }
  v59 = *((unsigned int *)*this + 3);
  if (v5 > v59)
  {
    __break(0xC471u);
    JUMPOUT(0x195736F3CLL);
  }
  *(_DWORD *)(**this + v4) = v59 - v4;
  return result;
}

uint64_t WebCore::ContentExtensions::DFABytecodeInterpreter::interpretAppendAction(uint64_t result, _DWORD *a2)
{
  unint64_t v2;

  v2 = *a2;
  *a2 = v2 + 1;
  if (*(_QWORD *)(result + 8) > v2)
    __asm { BR              X14 }
  __break(1u);
  return result;
}

uint64_t WebCore::ContentExtensions::DFABytecodeInterpreter::interpretTestFlagsAndAppendAction(uint64_t result, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;
  int v4;

  v3 = *a3;
  *a3 = v3 + 1;
  if (v3 < a2)
  {
    v4 = *(_BYTE *)(result + v3) & 0x30;
    if (v4 == 32)
    {
      *a3 = v3 + 4;
    }
    else if (v4 == 16)
    {
      *a3 = v3 + 3;
    }
    else if ((*(_BYTE *)(result + v3) & 0x30) == 0)
    {
      *a3 = v3 + 2;
    }
    __asm { BR              X14 }
  }
  __break(1u);
  return result;
}

unsigned int *WebCore::ContentExtensions::DFACombiner::combineDFAs(unsigned int *result, unsigned int a2, _QWORD *a3, __n128 a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  _QWORD *v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  _QWORD *v23;
  WTF *v24;
  WTF *v25;
  __n128 v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  void *v36;
  unsigned int v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  void *v47;
  WTF *v48;
  unint64_t v50;
  unint64_t v51;
  WTF **v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  int v59;
  uint64_t v60;
  char *v61;
  WTF *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  char v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  char *v72;
  char v73;
  char v74;
  char v75;
  int v76;
  int v77;
  char v78;
  int v79;
  WTF *v80;
  char *v81;
  _BYTE *v82;
  char *v83;
  uint64_t *p_i;
  char *v85;
  int v86;
  unsigned int v87;
  unint64_t v88;
  char *v89;
  char v90;
  char v91;
  uint64_t v92;
  WTF *v93;
  char *v94;
  char *v95;
  char v96;
  _BYTE *v97;
  char v98;
  char v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  char *v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int j;
  unsigned int v108;
  char *v109;
  char v110;
  char v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int v114;
  char *v115;
  uint64_t v116;
  WTF **v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  char v123;
  int v124;
  uint64_t v125;
  char *v126;
  WTF *v127;
  int v128;
  int v129;
  int v130;
  int v131;
  char v132;
  unint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  char *v137;
  char v138;
  char v139;
  char v140;
  int v141;
  int v142;
  char v143;
  int v144;
  WTF *v145;
  char *v146;
  _BYTE *v147;
  char *v148;
  uint64_t *v149;
  char *v150;
  int v151;
  unsigned int v152;
  unint64_t v153;
  char *v154;
  char v155;
  char v156;
  uint64_t v157;
  WTF *v158;
  char *v159;
  char *v160;
  char v161;
  _BYTE *v162;
  char v163;
  char v164;
  unint64_t v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int v168;
  char *v169;
  uint64_t v170;
  unsigned int v171;
  unsigned int k;
  unsigned int v173;
  char *v174;
  char v175;
  char v176;
  unint64_t v177;
  uint64_t v178;
  unsigned int v179;
  char *v180;
  uint64_t v181;
  int v182;
  char v183;
  unint64_t v184;
  WTF *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  __int16 v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  unsigned int v196;
  unsigned int v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  int v205;
  WTF *v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  WTF *v211;
  int v212;
  WTF *v213;
  int v214;
  WTF *v215;
  WTF *v216;
  WTF *v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  char *v221;
  char v222;
  unsigned int v223;
  uint64_t v224;
  char *v225;
  char v226;
  uint64_t v227;
  const void **v228;
  WebCore::ContentExtensions::DFA *v229;
  WTF *v230;
  WTF *v231;
  WTF *v232;
  WTF *v233;
  WTF *v234;
  WTF *v235;
  WTF *v236;
  WTF *v237;
  WTF *v238;
  WTF *v239;
  WTF *v240;
  WTF *v241;
  WTF *v242;
  WTF *v243;
  WTF *v244;
  WTF *v245;
  unsigned int *v248;
  WTF *v249;
  unsigned int v250;
  unsigned int v251;
  WTF *v252;
  int v253;
  int v254;
  WTF *v255;
  int v256;
  int v257;
  WTF *v258;
  int v259;
  int v260;
  int v261;
  int v262;
  WTF **v263;
  WTF **v264;
  __int128 v265;
  __int128 __src;
  __int128 v267;
  __int128 v268;
  int v269;
  uint64_t v270;
  WTF *v271;
  uint64_t v272;
  WTF *v273;
  uint64_t v274;
  WTF *v275;
  uint64_t v276;
  WTF *v277;
  uint64_t v278;
  WTF *v279;
  uint64_t v280;
  unsigned int v281;
  WTF *v282;
  uint64_t v283;
  WTF *v284;
  uint64_t v285;
  WTF *v286;
  uint64_t v287;
  WTF *v288;
  uint64_t v289;
  unsigned int v290;
  WTF *v291;
  uint64_t v292;
  _BYTE v293[2048];
  uint64_t i;
  unint64_t v295;
  int v296;
  char v297;
  char v298;

  v248 = result;
  v4 = result[3];
  if (!v4)
    return result;
  v5 = result[3];
  v6 = result;
  do
  {
    if (v4 <= --v5)
    {
      __break(0xC471u);
      goto LABEL_246;
    }
    v7 = (unsigned int *)(*(_QWORD *)v6 + 72 * v5);
    v8 = v7[3];
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 12 * v8;
      v11 = (char *)(*(_QWORD *)v7 + 11);
      do
      {
        v12 = *v11;
        v11 += 12;
        if ((v12 & 1) == 0)
          ++v9;
        v10 -= 12;
      }
      while (v10);
      if (v9 > a2)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
        v14 = *(_QWORD *)v6;
        v15 = v14 + 72 * v5;
        v16 = *(WTF **)(v15 + 48);
        if (v16)
        {
          *(_QWORD *)(v15 + 48) = 0;
          *(_DWORD *)(v14 + 72 * v5 + 56) = 0;
          WTF::fastFree(v16, v13);
        }
        v17 = v14 + 72 * v5;
        v20 = *(WTF **)(v17 + 32);
        v19 = (_QWORD *)(v17 + 32);
        v18 = v20;
        if (v20)
        {
          *v19 = 0;
          *(_DWORD *)(v14 + 72 * v5 + 40) = 0;
          WTF::fastFree(v18, v13);
        }
        v21 = v14 + 72 * v5;
        v24 = *(WTF **)(v21 + 16);
        v23 = (_QWORD *)(v21 + 16);
        v22 = v24;
        if (v24)
        {
          *v23 = 0;
          *(_DWORD *)(v14 + 72 * v5 + 24) = 0;
          WTF::fastFree(v22, v13);
        }
        v25 = *(WTF **)v15;
        if (*(_QWORD *)v15)
        {
          *(_QWORD *)v15 = 0;
          *(_DWORD *)(v15 + 8) = 0;
          WTF::fastFree(v25, v13);
        }
        v6 = v248;
        result = (unsigned int *)WTF::VectorMover<false,WebCore::ContentExtensions::DFA>::move((WTF *)(v15 + 72), (WTF *)(*(_QWORD *)v248 + 72 * v248[3]), v15);
        v4 = v248[3] - 1;
        v248[3] = v4;
      }
    }
  }
  while (v5);
  v26 = 0uLL;
  if (!v4)
    return result;
  do
  {
    if (v4 == 1)
      return (unsigned int *)(*(uint64_t (**)(_QWORD, _QWORD, __n128, __n128))(*(_QWORD *)*a3 + 16))(*a3, *(_QWORD *)v248, a4, v26);
    v27 = *(_QWORD *)v248 + 72 * v4;
    v28 = *(WTF **)(v27 - 72);
    *(_QWORD *)(v27 - 72) = 0;
    v282 = v28;
    v29 = *(_QWORD *)(v27 - 64);
    *(_QWORD *)(v27 - 64) = v26.n128_u64[0];
    v283 = v29;
    v30 = *(WTF **)(v27 - 56);
    *(_QWORD *)(v27 - 56) = 0;
    v284 = v30;
    v31 = *(_QWORD *)(v27 - 48);
    *(_QWORD *)(v27 - 48) = v26.n128_u64[0];
    v285 = v31;
    v32 = *(WTF **)(v27 - 40);
    *(_QWORD *)(v27 - 40) = 0;
    v286 = v32;
    v33 = *(_QWORD *)(v27 - 32);
    *(_QWORD *)(v27 - 32) = v26.n128_u64[0];
    v287 = v33;
    v34 = *(WTF **)(v27 - 24);
    *(_QWORD *)(v27 - 24) = 0;
    v288 = v34;
    v35 = *(_QWORD *)(v27 - 16);
    *(_QWORD *)(v27 - 16) = v26.n128_u64[0];
    v289 = v35;
    v290 = *(_DWORD *)(v27 - 8);
    WTF::Vector<WebCore::ContentExtensions::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast(v248, v7);
    v37 = v248[3];
    if (!v37)
    {
      __break(0xC471u);
      JUMPOUT(0x1957385B8);
    }
    v38 = *(_QWORD *)v248 + 72 * v37;
    v39 = *(WTF **)(v38 - 72);
    *(_QWORD *)(v38 - 72) = 0;
    v273 = v39;
    v40 = *(_QWORD *)(v38 - 64);
    *(_QWORD *)(v38 - 64) = 0;
    v274 = v40;
    v41 = *(WTF **)(v38 - 56);
    *(_QWORD *)(v38 - 56) = 0;
    v275 = v41;
    v42 = *(_QWORD *)(v38 - 48);
    *(_QWORD *)(v38 - 48) = 0;
    v276 = v42;
    v43 = *(WTF **)(v38 - 40);
    *(_QWORD *)(v38 - 40) = 0;
    v277 = v43;
    v44 = *(_QWORD *)(v38 - 32);
    *(_QWORD *)(v38 - 32) = 0;
    v278 = v44;
    v45 = *(WTF **)(v38 - 24);
    *(_QWORD *)(v38 - 24) = 0;
    v279 = v45;
    v46 = *(_QWORD *)(v38 - 16);
    *(_QWORD *)(v38 - 16) = 0;
    v280 = v46;
    v281 = *(_DWORD *)(v38 - 8);
    WTF::Vector<WebCore::ContentExtensions::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast(v248, v36);
    v262 = -1;
    v263 = &v282;
    v264 = &v273;
    v265 = 0u;
    __src = 0u;
    v267 = 0u;
    v268 = 0u;
    v269 = 0;
    v271 = 0;
    v272 = 0;
    v270 = 0;
    WebCore::ContentExtensions::DFAMerger::getOrCreateCombinedNode((WebCore::ContentExtensions::DFAMerger *)&v262, (void *)(v281 | ((unint64_t)v290 << 32)));
    v291 = (WTF *)v293;
    v292 = 128;
    if (!HIDWORD(v272))
      goto LABEL_163;
LABEL_26:
    if (HIDWORD(v292))
      HIDWORD(v292) = 0;
    v48 = v291;
    if (v293 != (_BYTE *)v291 && v291 != 0)
    {
      v291 = 0;
      LODWORD(v292) = 0;
      WTF::fastFree(v48, v47);
      v48 = v291;
    }
    if (!v48)
    {
      v291 = (WTF *)v293;
      LODWORD(v292) = 128;
    }
    while (2)
    {
      v50 = *((_QWORD *)v271 + HIDWORD(v272) - 1);
      --HIDWORD(v272);
      v51 = HIDWORD(v50);
      if (v262 == HIDWORD(v50))
        goto LABEL_89;
      v52 = v263;
      v53 = (uint64_t)*v263 + 12 * HIDWORD(v50);
      v54 = *(unsigned __int8 *)(v53 + 10);
      if (!*(_BYTE *)(v53 + 10))
        goto LABEL_88;
      v55 = *(_DWORD *)(v53 + 4);
      v56 = HIDWORD(v292);
      if (!HIDWORD(v292))
      {
        v86 = 0;
        do
        {
          v87 = v55 + v86;
          v88 = ((unint64_t)*((unsigned int *)v52[6] + v55 + v86++) << 32) | 0xFFFFFFFF;
          v89 = (char *)v52[4] + 2 * v87;
          v90 = *v89;
          v91 = v89[1];
          v295 = v88;
          v296 = v86;
          v297 = v90;
          v298 = v91;
          if (v56 == (_DWORD)v292)
          {
            v92 = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,unsigned long long>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v291, (void *)(v56 + 1), (unint64_t)&v295);
            v56 = HIDWORD(v292);
            v93 = v291;
            v94 = (char *)v291 + 16 * HIDWORD(v292);
            *(_QWORD *)v94 = *(_QWORD *)v92;
            *((_DWORD *)v94 + 2) = *(_DWORD *)(v92 + 8);
            *((_WORD *)v94 + 6) = *(_WORD *)(v92 + 12);
          }
          else
          {
            v93 = v291;
            v95 = (char *)v291 + 16 * v56;
            *(_QWORD *)v95 = v88;
            *((_DWORD *)v95 + 2) = v86;
            v95[12] = v90;
            v95[13] = v91;
          }
          HIDWORD(v292) = ++v56;
        }
        while (v54 != v86);
        if (v56)
          *((_DWORD *)v93 + 4 * v56 - 2) = 0;
        goto LABEL_88;
      }
      v57 = 0;
      v58 = 0;
      v59 = v55 + v54;
      for (i = 0; ; v57 = i)
      {
        v60 = (uint64_t)v291;
        v61 = (char *)v291 + 16 * v57;
        v62 = v52[4];
        v63 = *((char *)v62 + 2 * v55);
        v64 = v63 + v58;
        if (v64 > v61[13])
          break;
        v65 = *((char *)v62 + 2 * v55 + 1);
        v66 = v61[12];
        if (v65 < v66)
        {
          v67 = v63 + v58;
          v68 = ((unint64_t)*((unsigned int *)v52[6] + v55) << 32) | 0xFFFFFFFF;
          v69 = HIDWORD(v292);
          if (v57)
          {
            v295 = ((unint64_t)*((unsigned int *)v52[6] + v55) << 32) | 0xFFFFFFFF;
            v296 = v57;
            v297 = v63 + v58;
            v298 = v65;
            if (HIDWORD(v292) == (_DWORD)v292)
            {
              v70 = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,unsigned long long>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v291, (void *)(HIDWORD(v292) + 1), (unint64_t)&v295);
              v71 = HIDWORD(v292);
              v60 = (uint64_t)v291;
              v72 = (char *)v291 + 16 * HIDWORD(v292);
              *(_QWORD *)v72 = *(_QWORD *)v70;
              *((_DWORD *)v72 + 2) = *(_DWORD *)(v70 + 8);
              *((_WORD *)v72 + 6) = *(_WORD *)(v70 + 12);
            }
            else
            {
              v83 = (char *)v291 + 16 * HIDWORD(v292);
              *(_QWORD *)v83 = v68;
              *((_DWORD *)v83 + 2) = v57;
              v83[12] = v67;
              v83[13] = v65;
              v71 = v69;
            }
            HIDWORD(v292) = v71 + 1;
            *(_DWORD *)(v60 + 16 * HIDWORD(i) + 8) = v69;
            p_i = (uint64_t *)((char *)&i + 4);
          }
          else
          {
            if (HIDWORD(v292) == (_DWORD)v292)
            {
              v60 = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,unsigned long long>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v291, (void *)(HIDWORD(v292) + 1), (unint64_t)v291);
              v79 = HIDWORD(v292);
              v80 = v291;
              v81 = (char *)v291 + 16 * HIDWORD(v292);
              *(_QWORD *)v81 = *(_QWORD *)v60;
              *((_DWORD *)v81 + 2) = *(_DWORD *)(v60 + 8);
              v81[12] = *(_BYTE *)(v60 + 12);
              v82 = v81 + 13;
            }
            else
            {
              v85 = (char *)v291 + 16 * HIDWORD(v292);
              *(_QWORD *)v85 = *(_QWORD *)v291;
              *((_DWORD *)v85 + 2) = *(_DWORD *)(v60 + 8);
              v85[12] = *(_BYTE *)(v60 + 12);
              v82 = v85 + 13;
              v80 = (WTF *)v60;
              v79 = v69;
            }
            *v82 = *(_BYTE *)(v60 + 13);
            HIDWORD(v292) = v79 + 1;
            *(_QWORD *)v80 = v68;
            *((_DWORD *)v80 + 2) = v69;
            *((_BYTE *)v80 + 12) = v67;
            *((_BYTE *)v80 + 13) = v65;
            HIDWORD(i) = 0;
            p_i = &i;
          }
          v58 = 0;
          *(_DWORD *)p_i = v69;
          goto LABEL_65;
        }
        if (v64 <= v66)
        {
          if (v64 >= v66)
            goto LABEL_51;
          v75 = v66 - 1;
          v295 = ((unint64_t)*((unsigned int *)v52[6] + v55) << 32) | 0xFFFFFFFF;
          LOBYTE(v66) = v63 + v58;
          v74 = v75;
        }
        else
        {
          v295 = *(_QWORD *)v61;
          v73 = v63 + v58;
          v61[12] = v73;
          v74 = v73 - 1;
        }
        WebCore::ContentExtensions::MutableRangeList<signed char,unsigned long long,128u>::insertBetween((uint64_t)&v291, (_DWORD *)&i + 1, &i, v66, v74, (uint64_t *)&v295);
        v57 = i;
        v60 = (uint64_t)v291;
        v61 = (char *)v291 + 16 * i;
LABEL_51:
        v76 = v61[13];
        v62 = v52[4];
        v77 = *((unsigned __int8 *)v62 + 2 * v55 + 1);
        if (v76 == v77)
        {
          v58 = 0;
          v96 = 0;
          *((_DWORD *)v61 + 1) = *((_DWORD *)v52[6] + v55);
          LODWORD(i) = *((_DWORD *)v61 + 2);
          HIDWORD(i) = v57;
          ++v55;
          if (!(_DWORD)i)
            goto LABEL_75;
        }
        else
        {
          if ((char)v76 > (char)v77)
          {
            v78 = v61[12];
            v61[12] = v77 + 1;
            v295 = *(unsigned int *)v61 | ((unint64_t)*((unsigned int *)v52[6] + v55) << 32);
            WebCore::ContentExtensions::MutableRangeList<signed char,unsigned long long,128u>::insertBetween((uint64_t)&v291, (_DWORD *)&i + 1, &i, v78, v77, (uint64_t *)&v295);
            v58 = 0;
LABEL_65:
            ++v55;
            goto LABEL_66;
          }
          *((_DWORD *)v61 + 1) = *((_DWORD *)v52[6] + v55);
          v58 = v76 - *((_BYTE *)v62 + 2 * v55) + 1;
          LODWORD(i) = *((_DWORD *)v61 + 2);
          HIDWORD(i) = v57;
          v96 = v58;
          if (!(_DWORD)i)
            goto LABEL_75;
        }
LABEL_66:
        if (v55 == v59)
          goto LABEL_88;
      }
      HIDWORD(i) = v57;
      LODWORD(i) = *((_DWORD *)v61 + 2);
      if ((_DWORD)i)
        goto LABEL_66;
      v96 = v58;
LABEL_75:
      if (v55 != v59)
      {
        v97 = (char *)v62 + 2 * v55;
        v98 = *v97 + v96;
        v99 = v97[1];
        v100 = ((unint64_t)*((unsigned int *)v52[6] + v55) << 32) | 0xFFFFFFFF;
        v295 = v100;
        v296 = 0;
        v297 = v98;
        v298 = v99;
        v101 = HIDWORD(v292);
        if (HIDWORD(v292) == (_DWORD)v292)
        {
          v102 = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,unsigned long long>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v291, (void *)(HIDWORD(v292) + 1), (unint64_t)&v295);
          v103 = HIDWORD(v292);
          v60 = (uint64_t)v291;
          v104 = (char *)v291 + 16 * HIDWORD(v292);
          *(_QWORD *)v104 = *(_QWORD *)v102;
          *((_DWORD *)v104 + 2) = *(_DWORD *)(v102 + 8);
          *((_WORD *)v104 + 6) = *(_WORD *)(v102 + 12);
        }
        else
        {
          v105 = v60 + 16 * HIDWORD(v292);
          *(_QWORD *)v105 = v100;
          *(_DWORD *)(v105 + 8) = 0;
          *(_BYTE *)(v105 + 12) = v98;
          *(_BYTE *)(v105 + 13) = v99;
          v103 = v101;
        }
        v106 = v103 + 1;
        HIDWORD(v292) = v106;
        if (v101)
          *(_DWORD *)(v60 + 16 * v57 + 8) = v101;
        for (j = v55 + 1; v59 != j; v101 = v108)
        {
          v108 = v106;
          v109 = (char *)v52[4] + 2 * j;
          v110 = *v109;
          v111 = v109[1];
          v112 = ((unint64_t)*((unsigned int *)v52[6] + j) << 32) | 0xFFFFFFFF;
          v295 = v112;
          v296 = 0;
          v297 = v110;
          v298 = v111;
          if (v108 == (_DWORD)v292)
          {
            v113 = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,unsigned long long>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v291, (void *)(v108 + 1), (unint64_t)&v295);
            v114 = HIDWORD(v292);
            v60 = (uint64_t)v291;
            v115 = (char *)v291 + 16 * HIDWORD(v292);
            *(_QWORD *)v115 = *(_QWORD *)v113;
            *((_DWORD *)v115 + 2) = *(_DWORD *)(v113 + 8);
            *((_WORD *)v115 + 6) = *(_WORD *)(v113 + 12);
          }
          else
          {
            v116 = v60 + 16 * v108;
            *(_QWORD *)v116 = v112;
            *(_DWORD *)(v116 + 8) = 0;
            *(_BYTE *)(v116 + 12) = v110;
            *(_BYTE *)(v116 + 13) = v111;
            v114 = v108;
          }
          v106 = v114 + 1;
          HIDWORD(v292) = v106;
          if (v108)
            *(_DWORD *)(v60 + 16 * v101 + 8) = v108;
          ++j;
        }
      }
LABEL_88:
      LODWORD(v51) = v262;
LABEL_89:
      if ((_DWORD)v51 == (_DWORD)v50)
        goto LABEL_142;
      v117 = v264;
      v118 = (uint64_t)*v264 + 12 * v50;
      v119 = *(unsigned __int8 *)(v118 + 10);
      if (!*(_BYTE *)(v118 + 10))
        goto LABEL_142;
      v120 = *(_DWORD *)(v118 + 4);
      v121 = HIDWORD(v292);
      if (!HIDWORD(v292))
      {
        v151 = 0;
        do
        {
          v152 = v120 + v151;
          v153 = *((unsigned int *)v117[6] + v120 + v151++) | 0xFFFFFFFF00000000;
          v154 = (char *)v117[4] + 2 * v152;
          v155 = *v154;
          v156 = v154[1];
          v295 = v153;
          v296 = v151;
          v297 = v155;
          v298 = v156;
          if (v121 == (_DWORD)v292)
          {
            v157 = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,unsigned long long>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v291, (void *)(v121 + 1), (unint64_t)&v295);
            v121 = HIDWORD(v292);
            v158 = v291;
            v159 = (char *)v291 + 16 * HIDWORD(v292);
            *(_QWORD *)v159 = *(_QWORD *)v157;
            *((_DWORD *)v159 + 2) = *(_DWORD *)(v157 + 8);
            *((_WORD *)v159 + 6) = *(_WORD *)(v157 + 12);
          }
          else
          {
            v158 = v291;
            v160 = (char *)v291 + 16 * v121;
            *(_QWORD *)v160 = v153;
            *((_DWORD *)v160 + 2) = v151;
            v160[12] = v155;
            v160[13] = v156;
          }
          HIDWORD(v292) = ++v121;
        }
        while (v119 != v151);
        if (v121)
          *((_DWORD *)v158 + 4 * v121 - 2) = 0;
        goto LABEL_142;
      }
      v122 = 0;
      v123 = 0;
      v124 = v120 + v119;
      i = 0;
      while (2)
      {
        v125 = (uint64_t)v291;
        v126 = (char *)v291 + 16 * v122;
        v127 = v117[4];
        v128 = *((char *)v127 + 2 * v120);
        v129 = v128 + v123;
        if (v129 <= v126[13])
        {
          v130 = *((char *)v127 + 2 * v120 + 1);
          v131 = v126[12];
          if (v130 < v131)
          {
            v132 = v128 + v123;
            v133 = *((unsigned int *)v117[6] + v120) | 0xFFFFFFFF00000000;
            v134 = HIDWORD(v292);
            if (v122)
            {
              v295 = *((unsigned int *)v117[6] + v120) | 0xFFFFFFFF00000000;
              v296 = v122;
              v297 = v128 + v123;
              v298 = v130;
              if (HIDWORD(v292) == (_DWORD)v292)
              {
                v135 = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,unsigned long long>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v291, (void *)(HIDWORD(v292) + 1), (unint64_t)&v295);
                v136 = HIDWORD(v292);
                v125 = (uint64_t)v291;
                v137 = (char *)v291 + 16 * HIDWORD(v292);
                *(_QWORD *)v137 = *(_QWORD *)v135;
                *((_DWORD *)v137 + 2) = *(_DWORD *)(v135 + 8);
                *((_WORD *)v137 + 6) = *(_WORD *)(v135 + 12);
              }
              else
              {
                v148 = (char *)v291 + 16 * HIDWORD(v292);
                *(_QWORD *)v148 = v133;
                *((_DWORD *)v148 + 2) = v122;
                v148[12] = v132;
                v148[13] = v130;
                v136 = v134;
              }
              HIDWORD(v292) = v136 + 1;
              *(_DWORD *)(v125 + 16 * HIDWORD(i) + 8) = v134;
              v149 = (uint64_t *)((char *)&i + 4);
            }
            else
            {
              if (HIDWORD(v292) == (_DWORD)v292)
              {
                v125 = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,unsigned long long>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v291, (void *)(HIDWORD(v292) + 1), (unint64_t)v291);
                v144 = HIDWORD(v292);
                v145 = v291;
                v146 = (char *)v291 + 16 * HIDWORD(v292);
                *(_QWORD *)v146 = *(_QWORD *)v125;
                *((_DWORD *)v146 + 2) = *(_DWORD *)(v125 + 8);
                v146[12] = *(_BYTE *)(v125 + 12);
                v147 = v146 + 13;
              }
              else
              {
                v150 = (char *)v291 + 16 * HIDWORD(v292);
                *(_QWORD *)v150 = *(_QWORD *)v291;
                *((_DWORD *)v150 + 2) = *(_DWORD *)(v125 + 8);
                v150[12] = *(_BYTE *)(v125 + 12);
                v147 = v150 + 13;
                v145 = (WTF *)v125;
                v144 = v134;
              }
              *v147 = *(_BYTE *)(v125 + 13);
              HIDWORD(v292) = v144 + 1;
              *(_QWORD *)v145 = v133;
              *((_DWORD *)v145 + 2) = v134;
              *((_BYTE *)v145 + 12) = v132;
              *((_BYTE *)v145 + 13) = v130;
              HIDWORD(i) = 0;
              v149 = &i;
            }
            v123 = 0;
            *(_DWORD *)v149 = v134;
            goto LABEL_119;
          }
          if (v129 <= v131)
          {
            if (v129 >= v131)
            {
LABEL_105:
              v141 = v126[13];
              v127 = v117[4];
              v142 = *((unsigned __int8 *)v127 + 2 * v120 + 1);
              if (v141 == v142)
              {
                v123 = 0;
                v161 = 0;
                *(_DWORD *)v126 = *((_DWORD *)v117[6] + v120);
                LODWORD(i) = *((_DWORD *)v126 + 2);
                HIDWORD(i) = v122;
                ++v120;
                if (!(_DWORD)i)
                  goto LABEL_129;
                goto LABEL_120;
              }
              if ((char)v141 <= (char)v142)
              {
                *(_DWORD *)v126 = *((_DWORD *)v117[6] + v120);
                v123 = v141 - *((_BYTE *)v127 + 2 * v120) + 1;
                LODWORD(i) = *((_DWORD *)v126 + 2);
                HIDWORD(i) = v122;
                v161 = v123;
                if (!(_DWORD)i)
                  goto LABEL_129;
                goto LABEL_120;
              }
              v143 = v126[12];
              v126[12] = v142 + 1;
              v295 = *((unsigned int *)v117[6] + v120) | ((unint64_t)*((unsigned int *)v126 + 1) << 32);
              WebCore::ContentExtensions::MutableRangeList<signed char,unsigned long long,128u>::insertBetween((uint64_t)&v291, (_DWORD *)&i + 1, &i, v143, v142, (uint64_t *)&v295);
              v123 = 0;
LABEL_119:
              ++v120;
LABEL_120:
              if (v120 == v124)
                goto LABEL_142;
              v122 = i;
              continue;
            }
            v140 = v131 - 1;
            v295 = *((unsigned int *)v117[6] + v120) | 0xFFFFFFFF00000000;
            LOBYTE(v131) = v128 + v123;
            v139 = v140;
          }
          else
          {
            v295 = *(_QWORD *)v126;
            v138 = v128 + v123;
            v126[12] = v138;
            v139 = v138 - 1;
          }
          WebCore::ContentExtensions::MutableRangeList<signed char,unsigned long long,128u>::insertBetween((uint64_t)&v291, (_DWORD *)&i + 1, &i, v131, v139, (uint64_t *)&v295);
          v122 = i;
          v125 = (uint64_t)v291;
          v126 = (char *)v291 + 16 * i;
          goto LABEL_105;
        }
        break;
      }
      HIDWORD(i) = v122;
      LODWORD(i) = *((_DWORD *)v126 + 2);
      if ((_DWORD)i)
        goto LABEL_120;
      v161 = v123;
LABEL_129:
      if (v120 != v124)
      {
        v162 = (char *)v127 + 2 * v120;
        v163 = *v162 + v161;
        v164 = v162[1];
        v165 = *((unsigned int *)v117[6] + v120) | 0xFFFFFFFF00000000;
        v295 = v165;
        v296 = 0;
        v297 = v163;
        v298 = v164;
        v166 = HIDWORD(v292);
        if (HIDWORD(v292) == (_DWORD)v292)
        {
          v167 = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,unsigned long long>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v291, (void *)(HIDWORD(v292) + 1), (unint64_t)&v295);
          v168 = HIDWORD(v292);
          v125 = (uint64_t)v291;
          v169 = (char *)v291 + 16 * HIDWORD(v292);
          *(_QWORD *)v169 = *(_QWORD *)v167;
          *((_DWORD *)v169 + 2) = *(_DWORD *)(v167 + 8);
          *((_WORD *)v169 + 6) = *(_WORD *)(v167 + 12);
        }
        else
        {
          v170 = v125 + 16 * HIDWORD(v292);
          *(_QWORD *)v170 = v165;
          *(_DWORD *)(v170 + 8) = 0;
          *(_BYTE *)(v170 + 12) = v163;
          *(_BYTE *)(v170 + 13) = v164;
          v168 = v166;
        }
        v171 = v168 + 1;
        HIDWORD(v292) = v171;
        if (v166)
          *(_DWORD *)(v125 + 16 * v122 + 8) = v166;
        for (k = v120 + 1; v124 != k; v166 = v173)
        {
          v173 = v171;
          v174 = (char *)v117[4] + 2 * k;
          v175 = *v174;
          v176 = v174[1];
          v177 = *((unsigned int *)v117[6] + k) | 0xFFFFFFFF00000000;
          v295 = v177;
          v296 = 0;
          v297 = v175;
          v298 = v176;
          if (v173 == (_DWORD)v292)
          {
            v178 = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,unsigned long long>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v291, (void *)(v173 + 1), (unint64_t)&v295);
            v179 = HIDWORD(v292);
            v125 = (uint64_t)v291;
            v180 = (char *)v291 + 16 * HIDWORD(v292);
            *(_QWORD *)v180 = *(_QWORD *)v178;
            *((_DWORD *)v180 + 2) = *(_DWORD *)(v178 + 8);
            *((_WORD *)v180 + 6) = *(_WORD *)(v178 + 12);
          }
          else
          {
            v181 = v125 + 16 * v173;
            *(_QWORD *)v181 = v177;
            *(_DWORD *)(v181 + 8) = 0;
            *(_BYTE *)(v181 + 12) = v175;
            *(_BYTE *)(v181 + 13) = v176;
            v179 = v173;
          }
          v171 = v179 + 1;
          HIDWORD(v292) = v171;
          if (v173)
            *(_DWORD *)(v125 + 16 * v166 + 8) = v173;
          ++k;
        }
      }
LABEL_142:
      v182 = HIDWORD(v267);
      v183 = BYTE12(v267);
      if (HIDWORD(v292))
      {
        v184 = 0;
        v185 = v291;
        do
        {
          v186 = (char *)v185 + 16 * v184;
          LODWORD(v295) = 0;
          LODWORD(v295) = WebCore::ContentExtensions::DFAMerger::getOrCreateCombinedNode((WebCore::ContentExtensions::DFAMerger *)&v262, *(void **)v186);
          WORD2(i) = *((_WORD *)v186 + 6);
          v187 = HIDWORD(v267);
          if (HIDWORD(v267) == DWORD2(v267))
          {
            v188 = WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v267, HIDWORD(v267) + 1, (unint64_t)&i + 4);
            v187 = HIDWORD(v267);
            v189 = v267;
            v190 = *(_WORD *)v188;
          }
          else
          {
            v189 = v267;
            v190 = WORD2(i);
          }
          *(_WORD *)(v189 + 2 * v187) = v190;
          ++HIDWORD(v267);
          v191 = HIDWORD(v268);
          if (HIDWORD(v268) == DWORD2(v268))
          {
            v192 = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v268, HIDWORD(v268) + 1, (unint64_t)&v295);
            v191 = HIDWORD(v268);
            v193 = v268;
            v194 = *(_DWORD *)v192;
          }
          else
          {
            v193 = v268;
            v194 = v295;
          }
          *(_DWORD *)(v193 + 4 * v191) = v194;
          ++HIDWORD(v268);
          v185 = v291;
          v195 = *((unsigned int *)v291 + 4 * v184 + 2);
          if ((_DWORD)v195)
            v184 = v184 & 0xFFFFFFFF00000000 | v195;
          else
            v184 = v184 & 0xFFFFFF0000000000 | v195 & 0xFFFFFF00FFFFFFFFLL | 0x100000000;
        }
        while ((v184 & 0xFF00000000) != 0x100000000);
        v183 = BYTE12(v267);
      }
      v196 = v270;
      if (v270)
      {
        v197 = *(_DWORD *)(v270 - 8);
        v198 = (v50 + ~(v50 << 32)) ^ ((v50 + ~(v50 << 32)) >> 22);
        v199 = 9 * ((v198 + ~(v198 << 13)) ^ ((v198 + ~(v198 << 13)) >> 8));
        v200 = (v199 ^ (v199 >> 15)) + ~((v199 ^ (v199 >> 15)) << 27);
        v201 = v197 & ((v200 >> 31) ^ v200);
        v202 = *(_QWORD *)(v270 + 16 * v201);
        if (v202 == v50)
        {
LABEL_160:
          v196 = *(_DWORD *)(v270 + 16 * v201 + 8);
        }
        else
        {
          v203 = 1;
          while (v202 != -1)
          {
            v201 = ((_DWORD)v201 + v203) & v197;
            v202 = *(_QWORD *)(v270 + 16 * v201);
            ++v203;
            if (v202 == v50)
              goto LABEL_160;
          }
          v196 = 0;
        }
      }
      v204 = v265 + 12 * v196;
      *(_DWORD *)(v204 + 4) = v182;
      *(_BYTE *)(v204 + 10) = v183 - v182;
      if (HIDWORD(v272))
      {
        if (!(_DWORD)v292)
          continue;
        goto LABEL_26;
      }
      break;
    }
LABEL_163:
    v249 = 0;
    v250 = 0;
    v251 = HIDWORD(v265);
    if (HIDWORD(v265))
    {
      if (HIDWORD(v265) >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x1957385C0);
      }
      v205 = 12 * HIDWORD(v265);
      v206 = (WTF *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v265)));
      v250 = (v205 & 0xFFFFFFFC) / 0xC;
      v249 = v206;
      if (HIDWORD(v265))
      {
        v207 = (uint64_t *)v265;
        v208 = 12 * HIDWORD(v265);
        do
        {
          v209 = *v207;
          *((_DWORD *)v206 + 2) = *((_DWORD *)v207 + 2);
          *(_QWORD *)v206 = v209;
          v206 = (WTF *)((char *)v206 + 12);
          v207 = (uint64_t *)((char *)v207 + 12);
          v208 -= 12;
        }
        while (v208);
      }
    }
    v210 = HIDWORD(__src);
    v252 = 0;
    v253 = 0;
    v254 = HIDWORD(__src);
    if (HIDWORD(__src))
    {
      if (HIDWORD(__src) >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1957385C8);
      }
      v211 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(__src)));
      v253 = v210;
      v252 = v211;
      memcpy(v211, (const void *)__src, 8 * HIDWORD(__src));
    }
    v212 = HIDWORD(v267);
    v255 = 0;
    v256 = 0;
    v257 = HIDWORD(v267);
    if (HIDWORD(v267))
    {
      if ((HIDWORD(v267) & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1957385D0);
      }
      v213 = (WTF *)WTF::fastMalloc((WTF *)(2 * HIDWORD(v267)));
      v256 = v212;
      v255 = v213;
      memcpy(v213, (const void *)v267, 2 * HIDWORD(v267));
    }
    v214 = HIDWORD(v268);
    v258 = 0;
    v259 = 0;
    v260 = HIDWORD(v268);
    if (HIDWORD(v268))
    {
      if (!(HIDWORD(v268) >> 30))
      {
        v215 = (WTF *)WTF::fastMalloc((WTF *)(4 * HIDWORD(v268)));
        v259 = v214;
        v258 = v215;
        memcpy(v215, (const void *)v268, 4 * HIDWORD(v268));
        goto LABEL_177;
      }
      __break(0xC471u);
LABEL_246:
      JUMPOUT(0x1957385B0);
    }
LABEL_177:
    v261 = v269;
    v216 = v291;
    if (v293 != (_BYTE *)v291 && v291)
    {
      v291 = 0;
      LODWORD(v292) = 0;
      WTF::fastFree(v216, v47);
    }
    v217 = v249;
    v218 = v251;
    if (v251)
    {
      v219 = 0;
      v220 = 12 * v251;
      v221 = (char *)v249 + 11;
      do
      {
        v222 = *v221;
        v221 += 12;
        if ((v222 & 1) == 0)
          ++v219;
        v220 -= 12;
      }
      while (v220);
      if (v219 > a2)
        goto LABEL_189;
    }
    if (!v248[3])
    {
LABEL_189:
      WebCore::ContentExtensions::DFAMinimizer::minimize((WebCore::ContentExtensions::DFAMinimizer *)&v249, (WebCore::ContentExtensions::DFA *)v47);
      v217 = v249;
      v218 = v251;
      if (!v251)
        goto LABEL_196;
    }
    else if (!v251)
    {
      goto LABEL_196;
    }
    v223 = 0;
    v224 = 12 * v218;
    v225 = (char *)v217 + 11;
    do
    {
      v226 = *v225;
      v225 += 12;
      if ((v226 & 1) == 0)
        ++v223;
      v224 -= 12;
    }
    while (v224);
    if (v223 <= a2)
    {
LABEL_196:
      v227 = v248[3];
      if ((_DWORD)v227 == v248[2])
      {
        v228 = (const void **)WTF::Vector<WebCore::ContentExtensions::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v248, v227 + 1, (unint64_t)&v249);
        v229 = (WebCore::ContentExtensions::DFA *)(*(_QWORD *)v248 + 72 * v248[3]);
      }
      else
      {
        v229 = (WebCore::ContentExtensions::DFA *)(*(_QWORD *)v248 + 72 * v227);
        v228 = (const void **)&v249;
      }
      WebCore::ContentExtensions::DFA::DFA(v229, v228);
      ++v248[3];
    }
    else
    {
      (*(void (**)(_QWORD, WTF **))(*(_QWORD *)*a3 + 16))(*a3, &v249);
    }
    v230 = v258;
    if (v258)
    {
      v258 = 0;
      v259 = 0;
      WTF::fastFree(v230, v7);
    }
    v231 = v255;
    if (v255)
    {
      v255 = 0;
      v256 = 0;
      WTF::fastFree(v231, v7);
    }
    v232 = v252;
    if (v252)
    {
      v252 = 0;
      v253 = 0;
      WTF::fastFree(v232, v7);
    }
    v233 = v249;
    if (v249)
    {
      v249 = 0;
      v250 = 0;
      WTF::fastFree(v233, v7);
    }
    v234 = v271;
    if (v271)
    {
      v271 = 0;
      LODWORD(v272) = 0;
      WTF::fastFree(v234, v7);
    }
    if (v270)
      WTF::fastFree((WTF *)(v270 - 16), v7);
    v235 = (WTF *)v268;
    if ((_QWORD)v268)
    {
      *(_QWORD *)&v268 = 0;
      DWORD2(v268) = 0;
      WTF::fastFree(v235, v7);
    }
    v236 = (WTF *)v267;
    if ((_QWORD)v267)
    {
      *(_QWORD *)&v267 = 0;
      DWORD2(v267) = 0;
      WTF::fastFree(v236, v7);
    }
    v237 = (WTF *)__src;
    if ((_QWORD)__src)
    {
      *(_QWORD *)&__src = 0;
      DWORD2(__src) = 0;
      WTF::fastFree(v237, v7);
    }
    v238 = (WTF *)v265;
    if ((_QWORD)v265)
    {
      *(_QWORD *)&v265 = 0;
      DWORD2(v265) = 0;
      WTF::fastFree(v238, v7);
    }
    v239 = v279;
    if (v279)
    {
      v279 = 0;
      LODWORD(v280) = 0;
      WTF::fastFree(v239, v7);
    }
    v240 = v277;
    if (v277)
    {
      v277 = 0;
      LODWORD(v278) = 0;
      WTF::fastFree(v240, v7);
    }
    v241 = v275;
    if (v275)
    {
      v275 = 0;
      LODWORD(v276) = 0;
      WTF::fastFree(v241, v7);
    }
    v242 = v273;
    if (v273)
    {
      v273 = 0;
      LODWORD(v274) = 0;
      WTF::fastFree(v242, v7);
    }
    v243 = v288;
    if (v288)
    {
      v288 = 0;
      LODWORD(v289) = 0;
      WTF::fastFree(v243, v7);
    }
    v244 = v286;
    if (v286)
    {
      v286 = 0;
      LODWORD(v287) = 0;
      WTF::fastFree(v244, v7);
    }
    v245 = v284;
    if (v284)
    {
      v284 = 0;
      LODWORD(v285) = 0;
      WTF::fastFree(v245, v7);
    }
    result = (unsigned int *)v282;
    if (v282)
    {
      v282 = 0;
      LODWORD(v283) = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
    v4 = v248[3];
    v26 = 0uLL;
  }
  while (v4);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSP_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 112) = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSP_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 112) = 1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSP_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 112) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSP_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 112) = 3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSP_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 112) = 4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSP_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 112) = 5;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSP_DpT0_@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS9_EUlRT_E_S9_SC_vE3mapERS9_SC_RKSF_(&v11, (uint64_t *)(a1 + 8));
  v9 = 0;
  v10 = 0.0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS9_EUlRT_E_S9_SC_vE3mapERS9_SC_RKSF_(&v9, (uint64_t *)(a1 + 24));
  v4 = *(_DWORD *)(a1 + 40);
  v5 = v11;
  v6 = v9;
  result = v10;
  v8 = v12;
  *(_BYTE *)a2 = 2;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v6;
  *(double *)(a2 + 32) = result;
  *(_DWORD *)(a2 + 40) = v4;
  *(_DWORD *)(a2 + 112) = 6;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSP_DpT0_(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE v9[96];
  unsigned int v10;
  _QWORD v11[12];
  unsigned int v12;
  char v13;

  v3 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v3 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyEOSL_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_(v7);
  }
  else
  {
    v8 = &v13;
    ((void (*)(_QWORD *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSB_23RegexSubstitutionActionENSB_18URLTransformActionENSB_9URLActionEEEEE4copyERKSG_EUlRT_E_EEJRKNS0_6__implIJSC_SD_SE_SF_EEEEEEDcOSK_DpOT0____fmatrix[v3])(v11, &v8, a1 + 8);
    LOBYTE(v8) = 2;
    v9[0] = 0;
    v10 = -1;
    v4 = v12;
    if (v12 == -1)
    {
      *(_BYTE *)a2 = (_BYTE)v8;
      *(_BYTE *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 104) = -1;
LABEL_7:
      *(_DWORD *)(a2 + 112) = 7;
      return;
    }
    ((void (*)(char *, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v12])(&v13, v9, v11);
    v10 = v4;
    if (v12 == -1)
    {
      *(_BYTE *)a2 = (_BYTE)v8;
      *(_BYTE *)(a2 + 8) = 0;
      v5 = a2 + 8;
      *(_DWORD *)(a2 + 104) = -1;
    }
    else
    {
      ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v12])(&v13, v11);
      v4 = v10;
      *(_BYTE *)a2 = (_BYTE)v8;
      *(_BYTE *)(a2 + 8) = 0;
      v5 = a2 + 8;
      *(_DWORD *)(a2 + 104) = -1;
      if (v4 == -1)
        goto LABEL_7;
    }
    ((void (*)(_QWORD *, uint64_t, _BYTE *))off_1E3395558[v4])(v11, v5, v9);
    *(_DWORD *)(a2 + 104) = v4;
    v6 = v10;
    *(_DWORD *)(a2 + 112) = 7;
    if ((_DWORD)v6 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E33954F8[v6])(v11, v9);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyEOSL_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 112) = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyEOSL_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 112) = 1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyEOSL_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 112) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyEOSL_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + 112) = 3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyEOSL_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 112) = 4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyEOSL_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 112) = 5;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyEOSL_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD v10[2];

  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((_QWORD *)(a1 + 8), (uint64_t)v10);
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((_QWORD *)(a1 + 24), (uint64_t)v9);
  v4 = *(_DWORD *)(a1 + 40);
  v5 = v10[0];
  v6 = v9[0];
  result = *(double *)&v9[1];
  v8 = v10[1];
  *(_BYTE *)a2 = 2;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v6;
  *(double *)(a2 + 32) = result;
  *(_DWORD *)(a2 + 40) = v4;
  *(_DWORD *)(a2 + 112) = 6;
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions15BlockLoadActionENSC_18BlockCookiesActionENSC_28CSSDisplayNoneSelectorActionENSC_12NotifyActionENSC_25IgnorePreviousRulesActionENSC_15MakeHTTPSActionENSC_19ModifyHeadersActionENSC_14RedirectActionEEEEE4copyEOSL_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _BYTE v10[96];
  unsigned int v11;
  _QWORD v12[12];
  unsigned int v13;
  char v14;

  v3 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v3 == -1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_QWORD *)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_3,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_4,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_5,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_6,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(v8);
  }
  else
  {
    v9 = &v14;
    result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSB_23RegexSubstitutionActionENSB_18URLTransformActionENSB_9URLActionEEEEE4copyEOSG_EUlOT_E_EEJNS0_6__implIJSC_SD_SE_SF_EEEEEEDcSK_DpOT0____fmatrix[v3])(v12, &v9, a1 + 8);
    LOBYTE(v9) = 2;
    v10[0] = 0;
    v11 = -1;
    v5 = v13;
    if (v13 == -1)
    {
      *(_BYTE *)a2 = (_BYTE)v9;
      *(_BYTE *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 104) = -1;
LABEL_7:
      *(_DWORD *)(a2 + 112) = 7;
      return result;
    }
    ((void (*)(char *, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v13])(&v14, v10, v12);
    v11 = v5;
    if (v13 == -1)
    {
      *(_BYTE *)a2 = (_BYTE)v9;
      *(_BYTE *)(a2 + 8) = 0;
      v6 = a2 + 8;
      *(_DWORD *)(a2 + 104) = -1;
    }
    else
    {
      result = (_QWORD *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENS8_23RegexSubstitutionActionENS8_18URLTransformActionENS8_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v13])(&v14, v12);
      v5 = v11;
      *(_BYTE *)a2 = (_BYTE)v9;
      *(_BYTE *)(a2 + 8) = 0;
      v6 = a2 + 8;
      *(_DWORD *)(a2 + 104) = -1;
      if (v5 == -1)
        goto LABEL_7;
    }
    result = (_QWORD *)((uint64_t (*)(_QWORD *, uint64_t, _BYTE *))off_1E3395558[v5])(v12, v6, v10);
    *(_DWORD *)(a2 + 104) = v5;
    v7 = v11;
    *(_DWORD *)(a2 + 112) = 7;
    if ((_DWORD)v7 != -1)
      return (_QWORD *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E33954F8[v7])(v12, v10);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_3,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_4,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_5,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_6,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t result)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(*(_QWORD *)result + 8);
  ***(_BYTE ***)result = 1;
  *v1 = 1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_3,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_4,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_5,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_6,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)result + 24);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)result + 16) + 2) = 1;
  *(_BYTE *)(v1 + 2) = 1;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_3,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_4,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_5,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_6,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  uint64_t v6;
  unsigned int *v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  WebCore::ExtensionStyleSheets *v10;
  uint64_t v11;
  void *v12;

  v3 = *a1;
  if (**(_DWORD **)(*a1 + 32) == 1)
  {
    WebCore::DocumentLoader::addPendingContentExtensionDisplayNoneSelector(*(WebCore::DocumentLoader **)(v3 + 40), *(const WTF::String **)(v3 + 48), a2, *(_DWORD *)(*(_QWORD *)(v3 + 56) + 120));
  }
  else
  {
    v4 = **(_QWORD **)(v3 + 64);
    if (v4)
    {
      v5 = *(WTF ***)(v4 + 1336);
      if (!v5)
      {
        v6 = WTF::fastMalloc((WTF *)0xA8);
        *(_DWORD *)v6 = 0;
        v7 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4);
        do
          v9 = __ldaxr(v7);
        while (__stlxr(v9 + 1, v7));
        *(_QWORD *)(v6 + 8) = v7;
        *(_QWORD *)(v6 + 144) = 0;
        *(_QWORD *)(v6 + 152) = 0;
        *(_QWORD *)(v6 + 157) = 0;
        *(_OWORD *)(v6 + 16) = 0u;
        *(_OWORD *)(v6 + 32) = 0u;
        *(_OWORD *)(v6 + 48) = 0u;
        *(_BYTE *)(v6 + 64) = 0;
        *(_OWORD *)(v6 + 72) = 0u;
        *(_OWORD *)(v6 + 88) = 0u;
        *(_OWORD *)(v6 + 104) = 0u;
        *(_OWORD *)(v6 + 120) = 0u;
        *(_QWORD *)(v6 + 133) = 0;
        v10 = *(WebCore::ExtensionStyleSheets **)(v4 + 1336);
        *(_QWORD *)(v4 + 1336) = v6;
        if (v10)
        {
          WebCore::ExtensionStyleSheets::~ExtensionStyleSheets(v10, v8);
          if (*(_DWORD *)v11)
          {
            *(_QWORD *)(v11 + 160) = 0;
            *(_OWORD *)(v11 + 128) = 0u;
            *(_OWORD *)(v11 + 144) = 0u;
            *(_OWORD *)(v11 + 96) = 0u;
            *(_OWORD *)(v11 + 112) = 0u;
            *(_OWORD *)(v11 + 64) = 0u;
            *(_OWORD *)(v11 + 80) = 0u;
            *(_OWORD *)(v11 + 32) = 0u;
            *(_OWORD *)(v11 + 48) = 0u;
            *(_OWORD *)v11 = 0u;
            *(_OWORD *)(v11 + 16) = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v11, v12);
          }
        }
        v5 = *(WTF ***)(v4 + 1336);
      }
      WebCore::ExtensionStyleSheets::addDisplayNoneSelector(v5, *(WTF::StringImpl ***)(v3 + 48), (const WTF::String *)a2, *(_DWORD *)(*(_QWORD *)(v3 + 56) + 120));
    }
  }
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_3,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_4,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_5,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_6,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 3) = 1;
  result = (_QWORD *)(v2 + 8);
  v4 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v4 == *(_DWORD *)(v2 + 16))
  {
    result = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)a2);
    v4 = *(unsigned int *)(v2 + 20);
    v7 = *(_QWORD *)(v2 + 8);
    v8 = (_DWORD *)*result;
    if (*result)
      *v8 += 2;
    *(_QWORD *)(v7 + 8 * v4) = v8;
  }
  else
  {
    v5 = (_DWORD *)*result;
    v6 = (_DWORD *)*a2;
    if (*a2)
      *v6 += 2;
    *(_QWORD *)&v5[2 * v4] = v6;
  }
  *(_DWORD *)(v2 + 20) = v4 + 1;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_3,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_4,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_5,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_6,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>()
{
  __break(0xC471u);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_3,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_4,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_5,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_6,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  if ((WTF::URL::protocolIs() & 1) != 0 || (result = WTF::URL::protocolIs(), (_DWORD)result))
  {
    result = WTF::URL::port(*(WTF::URL **)(v1 + 88));
    if ((result & 0xFF0000) == 0)
      goto LABEL_6;
    if ((WTF::URL::port(*(WTF::URL **)(v1 + 88)) & 0xFF0000) == 0)
    {
      v4 = std::__throw_bad_optional_access[abi:sn180100]();
      return std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_3,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_4,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_5,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_6,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(v4);
    }
    WTF::URL::protocol(*(WTF::URL **)(v1 + 88));
    result = WTF::isDefaultPortForProtocol();
    if ((_DWORD)result)
    {
LABEL_6:
      v3 = *(_QWORD *)(v1 + 104);
      *(_BYTE *)(*(_QWORD *)(v1 + 96) + 1) = 1;
      *(_BYTE *)(v3 + 1) = 1;
    }
  }
  return result;
}

WebCore::ContentExtensions::ModifyHeadersAction *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_3,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_4,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_5,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_6,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t *a1, unint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  const WTF::URL *v5;
  void *v6;
  WebCore::UserContentURLPattern *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  WebCore::ContentExtensions::ModifyHeadersAction *v13;
  WebCore::ContentExtensions::ModifyHeadersAction *result;
  WebCore::UserContentURLPattern *v15;
  unsigned int v16;

  v4 = *a1;
  v5 = *(const WTF::URL **)(*a1 + 128);
  WTF::HashMap<WTF::String,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*(_QWORD *)(*a1 + 112) + 3408), *(WTF::StringImpl ***)(*a1 + 120), a3, (uint64_t)&v15);
  if (!v16)
    return (WebCore::ContentExtensions::ModifyHeadersAction *)WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v6);
  v7 = v15;
  v8 = 32 * v16;
  while (*((_BYTE *)v7 + 24)
       || !WebCore::UserContentURLPattern::matchesScheme(v7, v5)
       || !WebCore::UserContentURLPattern::matchesHost((const WTF::StringImpl **)v7, v5)
       || (WebCore::UserContentURLPattern::matchesPath(v7, v5) & 1) == 0)
  {
    v7 = (WebCore::UserContentURLPattern *)((char *)v7 + 32);
    v8 -= 32;
    if (!v8)
      return (WebCore::ContentExtensions::ModifyHeadersAction *)WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v6);
  }
  WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v6);
  *(_BYTE *)(*(_QWORD *)(v4 + 136) + 3) = 1;
  v9 = *(_QWORD *)(v4 + 144);
  v10 = (_QWORD *)(v9 + 8);
  v11 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v9 + 16))
  {
    v12 = WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, a2);
    v13 = (WebCore::ContentExtensions::ModifyHeadersAction *)(*(_QWORD *)(v9 + 8) + 48 * *(unsigned int *)(v9 + 20));
  }
  else
  {
    v13 = (WebCore::ContentExtensions::ModifyHeadersAction *)(*v10 + 48 * v11);
    v12 = (char *)a2;
  }
  result = WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeadersAction(v13, (const WebCore::ContentExtensions::ModifyHeadersAction *)v12);
  ++*(_DWORD *)(v9 + 20);
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_3,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_4,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_5,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_6,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(WebCore::Page &,WTF::URL const&,WTF::OptionSet<WebCore::ContentExtensions::ResourceType>,WebCore::DocumentLoader &,WTF::URL const&,WTF::Function<WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList ()(WTF::String const&)> const&)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  const WTF::URL *v6;
  void *v7;
  WebCore::UserContentURLPattern *v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  WTF::StringImpl *result;
  int i;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WebCore::UserContentURLPattern *v30;
  _BYTE v31[4];
  unsigned int v32;
  int v33;
  WTF::StringImpl *v34;
  __int128 v35;
  __int128 v36;
  char v37;

  v4 = *(_QWORD **)a1;
  v5 = *(uint64_t **)(*(_QWORD *)a1 + 192);
  v6 = *(const WTF::URL **)(*(_QWORD *)a1 + 168);
  WTF::HashMap<WTF::String,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 152) + 3408), *(WTF::StringImpl ***)(*(_QWORD *)a1 + 160), a3, (uint64_t)&v30);
  if (!v32)
    return (WTF::StringImpl *)WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v7);
  v8 = v30;
  v9 = 32 * v32;
  while (*((_BYTE *)v8 + 24)
       || !WebCore::UserContentURLPattern::matchesScheme(v8, v6)
       || !WebCore::UserContentURLPattern::matchesHost((const WTF::StringImpl **)v8, v6)
       || (WebCore::UserContentURLPattern::matchesPath(v8, v6) & 1) == 0)
  {
    v8 = (WebCore::UserContentURLPattern *)((char *)v8 + 32);
    v9 -= 32;
    if (!v9)
      return (WTF::StringImpl *)WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v7);
  }
  WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v7);
  *(_BYTE *)(v4[22] + 4) = 1;
  v11 = v4[23];
  v12 = *v5;
  if (v12)
  {
    v13 = (WTF::StringImpl **)v4[20];
    v14 = *(_DWORD *)(v12 - 8);
    v15 = *((_DWORD *)*v13 + 4);
    if (v15 < 0x100)
      v16 = WTF::StringImpl::hashSlowCase(*v13);
    else
      v16 = v15 >> 8;
    for (i = 0; ; v16 = i + v19)
    {
      v19 = v16 & v14;
      v20 = *(WTF **)(v12 + 16 * v19);
      if (v20 != (WTF *)-1)
      {
        if (!v20)
          goto LABEL_20;
        if ((WTF::equal(v20, *v13, v10) & 1) != 0)
          break;
      }
      ++i;
    }
    v21 = *(_QWORD *)(v12 + 16 * v19 + 8);
  }
  else
  {
LABEL_20:
    v21 = 0;
  }
  LOBYTE(v30) = *(_BYTE *)a2;
  v31[0] = 0;
  v33 = -1;
  v22 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v22 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E3395638[v22])(&v37, v31, a2 + 8);
    v33 = v22;
  }
  v23 = *(WTF::StringImpl **)(v21 + 24);
  if (v23)
    *(_DWORD *)v23 += 2;
  v24 = (_QWORD *)(v11 + 24);
  v34 = v23;
  v25 = *(_OWORD *)(v21 + 32);
  v36 = *(_OWORD *)(v21 + 48);
  v35 = v25;
  v26 = *(unsigned int *)(v11 + 36);
  if ((_DWORD)v26 == *(_DWORD *)(v11 + 32))
  {
    v27 = WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v26 + 1, (unint64_t)&v30);
    v28 = *(_QWORD *)(v11 + 24) + 152 * *(unsigned int *)(v11 + 36);
  }
  else
  {
    v28 = *v24 + 152 * v26;
    v27 = (uint64_t)&v30;
  }
  std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>::pair[abi:sn180100](v28, v27);
  ++*(_DWORD *)(v11 + 36);
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
    else
      *(_DWORD *)result -= 2;
  }
  if (v33 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E33954F8[v33])(&v37, v31);
  return result;
}

char *WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (char *)v5 + 48 * *(unsigned int *)(a1 + 12), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x19573928CLL);
      }
      v17 = (char *)v5 + 48 * *(unsigned int *)(a1 + 12);
      v18 = 48 * v16;
      v19 = WTF::fastMalloc((WTF *)(48 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::ContentExtensions::ModifyHeadersAction>::move((uint64_t)v5, v17, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v9 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x195739294);
      }
      v10 = 48 * v9;
      v11 = WTF::fastMalloc((WTF *)(48 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::ContentExtensions::ModifyHeadersAction>::move((uint64_t)v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
  }
  return (char *)v3;
}

uint64_t WTF::VectorMover<false,WebCore::ContentExtensions::ModifyHeadersAction>::move(uint64_t result, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  if ((char *)result != a2)
  {
    v21 = v3;
    v22 = v4;
    v7 = (char *)result;
    do
    {
      *(_BYTE *)a3 = *v7;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v8 = *((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v8;
      LODWORD(v8) = *((_DWORD *)v7 + 4);
      *((_DWORD *)v7 + 4) = 0;
      *(_DWORD *)(a3 + 16) = v8;
      LODWORD(v8) = *((_DWORD *)v7 + 5);
      *((_DWORD *)v7 + 5) = 0;
      *(_DWORD *)(a3 + 20) = v8;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v9 = *((_QWORD *)v7 + 3);
      *((_QWORD *)v7 + 3) = 0;
      *(_QWORD *)(a3 + 24) = v9;
      LODWORD(v9) = *((_DWORD *)v7 + 8);
      *((_DWORD *)v7 + 8) = 0;
      *(_DWORD *)(a3 + 32) = v9;
      v10 = *(_QWORD *)(v7 + 36);
      *((_DWORD *)v7 + 9) = 0;
      *(_QWORD *)(a3 + 36) = v10;
      v11 = *((unsigned int *)v7 + 9);
      v12 = (unsigned int *)*((_QWORD *)v7 + 3);
      if ((_DWORD)v11)
      {
        v13 = 24 * v11;
        do
        {
          v14 = v12[4];
          if ((_DWORD)v14 != -1)
            result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v14])(&v19, v12);
          v12[4] = -1;
          v12 += 6;
          v13 -= 24;
        }
        while (v13);
        v12 = (unsigned int *)*((_QWORD *)v7 + 3);
      }
      if (v12)
      {
        *((_QWORD *)v7 + 3) = 0;
        *((_DWORD *)v7 + 8) = 0;
        result = WTF::fastFree((WTF *)v12, a2);
      }
      v15 = *((unsigned int *)v7 + 5);
      v16 = (unsigned int *)*((_QWORD *)v7 + 1);
      if ((_DWORD)v15)
      {
        v17 = 24 * v15;
        do
        {
          v18 = v16[4];
          if ((_DWORD)v18 != -1)
            result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v18])(&v20, v16);
          v16[4] = -1;
          v16 += 6;
          v17 -= 24;
        }
        while (v17);
        v16 = (unsigned int *)*((_QWORD *)v7 + 1);
      }
      if (v16)
      {
        *((_QWORD *)v7 + 1) = 0;
        *((_DWORD *)v7 + 4) = 0;
        result = WTF::fastFree((WTF *)v16, a2);
      }
      a3 += 48;
      v7 += 48;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>::pair[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  v4 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3395558[v4])(&v11, a1 + 8, a2 + 8);
    *(_DWORD *)(a1 + 104) = v4;
  }
  v5 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 112) = v5;
  v6 = *(_DWORD *)(a1 + 120) & 0xFFFFFFFE | *(_DWORD *)(a2 + 120) & 1;
  *(_DWORD *)(a1 + 120) = v6;
  v7 = v6 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 120) >> 1) & 1));
  *(_DWORD *)(a1 + 120) = v7;
  v8 = v7 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 120) >> 2) & 1));
  *(_DWORD *)(a1 + 120) = v8;
  v9 = v8 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 120) >> 3) & 7));
  *(_DWORD *)(a1 + 120) = v9;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120) & 0xFFFFFFC0 | v9 & 0x3F;
  *(_OWORD *)(a1 + 124) = *(_OWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 140) = *(_QWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 120) &= ~1u;
  return a1;
}

