char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<__CFString const*,void>,WTF::StringTypeAdapter<char,void>>(uint64_t *a1, int8x16_t **a2, CFStringRef *a3, char *a4)
{
  int v8;
  int v9;
  int Length;
  int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *result;
  int8x16_t *v18;
  int8x16_t *v19;
  const __CFString *v20;
  UniChar v21;
  UniChar *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  uint64_t v33;
  char *v34;
  int8x16_t *v35;
  uint64_t v36;
  const __CFString *v37;
  char v38;
  char *v39;
  const char *CStringPtr;
  size_t v41;
  uint64_t v42;
  CFRange v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;

  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)a2 + 2);
  if (*a3)
  {
    Length = CFStringGetLength(*a3);
    v11 = Length + 1;
    if (Length == -1)
      v11 = -1;
  }
  else
  {
    v11 = 1;
  }
  v12 = __CFADD__(v11, v9);
  v13 = v11 + v9;
  if (v12)
    v13 = -1;
  v12 = __CFADD__(v13, v8);
  v14 = v13 + v8;
  if (v12)
    v15 = 0xFFFFFFFFLL;
  else
    v15 = v14;
  v16 = a1[1];
  if ((v16 || (v16 = *a1) != 0) && (*(_BYTE *)(v16 + 16) & 4) == 0 || *a3 && !CFStringGetCStringPtr(*a3, 0x201u))
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1);
    if (result)
    {
      v18 = *a2;
      v19 = a2[1];
      v20 = *a3;
      v21 = *a4;
      v22 = (UniChar *)&result[2 * v19];
      v23 = v19 & 0xFFFFFFC0;
      if (v23)
      {
        v24 = &result[2 * v23];
        v25 = 0uLL;
        do
        {
          v44.val[0] = *v18;
          v26 = v18[1];
          v45.val[0] = v18[2];
          v27 = v18[3];
          v18 += 4;
          v28 = v27;
          v45.val[1] = 0uLL;
          v46.val[0] = v26;
          v44.val[1] = 0uLL;
          v29 = result;
          vst2q_s8(v29, v44);
          v29 += 32;
          v46.val[1] = 0uLL;
          vst2q_s8(v29, v46);
          v30 = result + 64;
          vst2q_s8(v30, v45);
          v31 = result + 96;
          vst2q_s8(v31, *(int8x16x2_t *)(&v25 - 1));
          result += 128;
        }
        while (result != v24);
        result = v24;
      }
      while (result != (char *)v22)
      {
        v32 = v18->u8[0];
        v18 = (int8x16_t *)((char *)v18 + 1);
        *(_WORD *)result = v32;
        result += 2;
      }
      if (v20)
      {
        v43.length = CFStringGetLength(v20);
        v43.location = 0;
        CFStringGetCharacters(v20, v43, v22);
        result = (char *)CFStringGetLength(v20);
        v33 = result;
      }
      else
      {
        v33 = 0;
      }
      v22[v33] = v21;
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824](a1, v15);
    if (result)
    {
      v34 = result;
      v35 = a2[1];
      v36 = v35;
      v37 = *a3;
      v38 = *a4;
      if ((_DWORD)v35)
      {
        v39 = (char *)*a2;
        if ((_DWORD)v35 == 1)
          *result = *v39;
        else
          result = (char *)memcpy(result, v39, a2[1]);
      }
      if (v37)
      {
        CStringPtr = CFStringGetCStringPtr(v37, 0x201u);
        v41 = CFStringGetLength(v37);
        memcpy(&v34[v36], CStringPtr, v41);
        result = (char *)CFStringGetLength(v37);
        v42 = result;
      }
      else
      {
        v42 = 0;
      }
      v34[v36 + v42] = v38;
    }
  }
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *__dst, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _BYTE *v8;
  _BYTE *v10;
  size_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  size_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  size_t v19;
  uint64_t v20;
  unsigned __int128 *v21;
  unsigned __int128 *v22;
  unsigned __int128 v23;
  unsigned __int128 *v24;
  unsigned __int128 *v25;
  unsigned __int128 v26;
  unsigned __int128 *v27;
  unsigned __int128 *v28;
  unsigned __int128 v29;
  char v30;
  char v31;
  char v32;

  v8 = __dst;
  if (a2)
  {
    v10 = *(_BYTE **)(a2 + 8);
    v11 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v11)
      {
        if ((_DWORD)v11 == 1)
          *__dst = *v10;
        else
          __dst = memcpy(__dst, v10, v11);
      }
    }
    else
    {
      if (v11 < 0x10)
      {
        v21 = (unsigned __int128 *)__dst;
      }
      else
      {
        v21 = (unsigned __int128 *)&__dst[v11 & 0xFFFFFFF0];
        v22 = (unsigned __int128 *)__dst;
        do
        {
          v23 = (unsigned __int128)vld2q_s8(v10);
          v10 += 32;
          *v22++ = v23;
        }
        while (v22 != v21);
      }
      while (v21 != (unsigned __int128 *)&__dst[v11])
      {
        v30 = *v10;
        v10 += 2;
        *(_BYTE *)v21 = v30;
        v21 = (unsigned __int128 *)((char *)v21 + 1);
      }
    }
    v12 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v8[v12];
  if (a3)
  {
    v14 = *(_BYTE **)(a3 + 8);
    v15 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v15)
      {
        if ((_DWORD)v15 == 1)
          *v13 = *v14;
        else
          __dst = memcpy(v13, v14, v15);
      }
    }
    else
    {
      if (v15 < 0x10)
      {
        v24 = (unsigned __int128 *)v13;
      }
      else
      {
        v24 = (unsigned __int128 *)&v13[v15 & 0xFFFFFFF0];
        v25 = (unsigned __int128 *)v13;
        do
        {
          v26 = (unsigned __int128)vld2q_s8(v14);
          v14 += 32;
          *v25++ = v26;
        }
        while (v25 != v24);
      }
      while (v24 != (unsigned __int128 *)&v13[v15])
      {
        v31 = *v14;
        v14 += 2;
        *(_BYTE *)v24 = v31;
        v24 = (unsigned __int128 *)((char *)v24 + 1);
      }
    }
    v16 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v16 = 0;
  }
  v17 = &v13[v16];
  if (a4)
  {
    v18 = *(_BYTE **)(a4 + 8);
    v19 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v19)
      {
        if ((_DWORD)v19 == 1)
          *v17 = *v18;
        else
          __dst = memcpy(v17, v18, v19);
      }
    }
    else
    {
      if (v19 < 0x10)
      {
        v27 = (unsigned __int128 *)&v13[v16];
      }
      else
      {
        v27 = (unsigned __int128 *)&v17[v19 & 0xFFFFFFF0];
        v28 = (unsigned __int128 *)&v13[v16];
        do
        {
          v29 = (unsigned __int128)vld2q_s8(v18);
          v18 += 32;
          *v28++ = v29;
        }
        while (v28 != v27);
      }
      while (v27 != (unsigned __int128 *)&v17[v19])
      {
        v32 = *v18;
        v18 += 2;
        *(_BYTE *)v27 = v32;
        v27 = (unsigned __int128 *)((char *)v27 + 1);
      }
    }
    v20 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v20 = 0;
  }
  v17[v20] = a5;
  return __dst;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(_WORD *__dst, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _WORD *v8;
  int8x16_t *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int16 v23;
  char *v24;
  int8x16_t *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  char *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int16 v38;
  char *v39;
  int8x16_t *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  char *v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int16 v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;

  v8 = __dst;
  if (a2)
  {
    v10 = *(int8x16_t **)(a2 + 8);
    v11 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v12 = (char *)&__dst[v11];
      if (v11 >= 0x40)
      {
        v13 = (char *)&__dst[v11 & 0xFFFFFFC0];
        v15 = 0uLL;
        v16 = (char *)__dst;
        do
        {
          v54.val[0] = *v10;
          v17 = v10[1];
          v57.val[0] = v10[2];
          v18 = v10[3];
          v10 += 4;
          v19 = v18;
          v57.val[1] = 0uLL;
          v60.val[0] = v17;
          v54.val[1] = 0uLL;
          v20 = v16;
          vst2q_s8(v20, v54);
          v20 += 32;
          v60.val[1] = 0uLL;
          vst2q_s8(v20, v60);
          v21 = v16 + 64;
          vst2q_s8(v21, v57);
          v22 = v16 + 96;
          vst2q_s8(v22, *(int8x16x2_t *)(&v15 - 1));
          v16 += 128;
        }
        while (v16 != v13);
      }
      else
      {
        v13 = (char *)__dst;
      }
      while (v13 != v12)
      {
        v23 = v10->u8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)v13 = v23;
        v13 += 2;
      }
    }
    else if ((_DWORD)v11 == 1)
    {
      *__dst = v10->i16[0];
    }
    else if ((_DWORD)v11)
    {
      __dst = memcpy(__dst, v10, 2 * v11);
    }
    v14 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v14 = 0;
  }
  v24 = (char *)&v8[v14];
  if (a3)
  {
    v25 = *(int8x16_t **)(a3 + 8);
    v26 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      v27 = &v24[2 * v26];
      if (v26 >= 0x40)
      {
        v28 = &v24[2 * (v26 & 0xFFFFFFC0)];
        v30 = 0uLL;
        v31 = v24;
        do
        {
          v55.val[0] = *v25;
          v32 = v25[1];
          v58.val[0] = v25[2];
          v33 = v25[3];
          v25 += 4;
          v34 = v33;
          v58.val[1] = 0uLL;
          v61.val[0] = v32;
          v55.val[1] = 0uLL;
          v35 = v31;
          vst2q_s8(v35, v55);
          v35 += 32;
          v61.val[1] = 0uLL;
          vst2q_s8(v35, v61);
          v36 = v31 + 64;
          vst2q_s8(v36, v58);
          v37 = v31 + 96;
          vst2q_s8(v37, *(int8x16x2_t *)(&v30 - 1));
          v31 += 128;
        }
        while (v31 != v28);
      }
      else
      {
        v28 = v24;
      }
      while (v28 != v27)
      {
        v38 = v25->u8[0];
        v25 = (int8x16_t *)((char *)v25 + 1);
        *(_WORD *)v28 = v38;
        v28 += 2;
      }
    }
    else if ((_DWORD)v26 == 1)
    {
      *(_WORD *)v24 = v25->i16[0];
    }
    else if ((_DWORD)v26)
    {
      __dst = memcpy(v24, v25, 2 * v26);
    }
    v29 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v29 = 0;
  }
  v39 = &v24[2 * v29];
  if (a4)
  {
    v40 = *(int8x16_t **)(a4 + 8);
    v41 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v42 = &v39[2 * v41];
      if (v41 >= 0x40)
      {
        v43 = &v39[2 * (v41 & 0xFFFFFFC0)];
        v45 = 0uLL;
        v46 = v39;
        do
        {
          v56.val[0] = *v40;
          v47 = v40[1];
          v59.val[0] = v40[2];
          v48 = v40[3];
          v40 += 4;
          v49 = v48;
          v59.val[1] = 0uLL;
          v62.val[0] = v47;
          v56.val[1] = 0uLL;
          v50 = v46;
          vst2q_s8(v50, v56);
          v50 += 32;
          v62.val[1] = 0uLL;
          vst2q_s8(v50, v62);
          v51 = v46 + 64;
          vst2q_s8(v51, v59);
          v52 = v46 + 96;
          vst2q_s8(v52, *(int8x16x2_t *)(&v45 - 1));
          v46 += 128;
        }
        while (v46 != v43);
      }
      else
      {
        v43 = v39;
      }
      while (v43 != v42)
      {
        v53 = v40->u8[0];
        v40 = (int8x16_t *)((char *)v40 + 1);
        *(_WORD *)v43 = v53;
        v43 += 2;
      }
    }
    else if ((_DWORD)v41 == 1)
    {
      *(_WORD *)v39 = v40->i16[0];
    }
    else if ((_DWORD)v41)
    {
      __dst = memcpy(v39, v40, 2 * v41);
    }
    v44 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v44 = 0;
  }
  *(_WORD *)&v39[2 * v44] = a5;
  return __dst;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowJavaScriptURLs(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowJavaScriptURLs(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowJavaScriptURLs(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowJavaScriptURLs(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E3403168;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowJavaScriptURLs(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowJavaScriptURLs(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3403168;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowJavaScriptURLs(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowJavaScriptURLs(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  WTF::String *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *result;
  uint64_t v23;
  Inspector::InspectorDebuggerAgent *v24;
  int32x2_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27[5];
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v4 = *(_QWORD *)(a1 + 8);
  v27[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v27);
  WebCore::consoleMessageForViolation((uint64_t *)&v28, a2, (WTF::URL *)v27, "Refused to execute a script", 28, "its hash or 'unsafe-inline'", 28);
  v6 = v27[0];
  v27[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v27[0];
  v26 = v27[0];
  v8 = *(_QWORD *)(a1 + 16);
  v9 = **(_QWORD **)(a1 + 24);
  if (v9)
  {
    v10 = *(const char **)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 4);
    v12 = (unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0x100000000;
  }
  v25 = (int32x2_t)**(unsigned int **)(a1 + 32);
  v27[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v27);
  v13 = **(_QWORD **)(a1 + 40);
  v14 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v14);
  if ((_DWORD)v11)
  {
    if (v11 < 0x29)
    {
      v15 = v12 | v11;
    }
    else if ((v12 & 0x100000000) != 0)
    {
      v15 = 0x100000028;
    }
    else
    {
      v15 = 40;
    }
  }
  else
  {
    v15 = 0x100000000;
    v10 = "";
  }
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v29, a2[3], &v26, (uint64_t)&v28, v8, (uint64_t)v10, v15, &v25, 0, (uint64_t)v27, v13);
  v17 = v29;
  v29 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v27[0];
  v27[0] = 0;
  if (!v18)
  {
LABEL_18:
    if (!v7)
      goto LABEL_21;
    goto LABEL_19;
  }
  if (*(_DWORD *)v18 != 2)
  {
    *(_DWORD *)v18 -= 2;
    goto LABEL_18;
  }
  WTF::StringImpl::destroy(v18, v16);
  if (!v7)
    goto LABEL_21;
LABEL_19:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v16);
  else
    *(_DWORD *)v7 -= 2;
LABEL_21:
  if (!**(_BYTE **)(a1 + 48) && *(_BYTE *)(a2[3] + 17))
  {
    v19 = *(_QWORD *)(v4 + 8);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v23 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v20 - 96), v16);
          if (v23)
          {
            v24 = *(Inspector::InspectorDebuggerAgent **)(v23 + 136);
            if (v24)
              Inspector::InspectorDebuggerAgent::scriptExecutionBlockedByCSP(v24, (const WTF::String *)(a2 + 2));
          }
        }
      }
    }
    **(_BYTE **)(a1 + 48) = 1;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::consoleMessageForViolation(uint64_t *a1, _QWORD *a2, WTF::URL *a3, char *a4, uint64_t a5, char *a6, uint64_t a7)
{
  _QWORD *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  WTF *v43;
  int v44;
  uint64_t v45;
  int8x16_t *v46;
  uint64_t v47;
  size_t v48;
  int8x16_t *v49;
  int v50;
  int v51;
  uint64_t v52;
  int8x16_t *v53;
  size_t v54;
  char *v55;
  char *v56;
  size_t v57;
  uint64_t *v58;
  int8x16_t *v59;
  int8x16_t *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  char *v66;
  char *v67;
  __int128 v68;
  int8x16_t v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  char *v73;
  char *v74;
  __int16 v75;
  char *v76;
  int8x16_t *v77;
  char *v78;
  __int128 v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  char *v83;
  char *v84;
  char *v85;
  __int16 v86;
  uint64_t result;
  size_t v88;
  uint64_t v89;
  int v90;
  char *v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  int8x16_t *v95;
  char *__src;
  uint64_t v99;
  uint64_t v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;
  int8x16x2_t v104;
  int8x16x2_t v105;
  int8x16x2_t v106;

  v12 = *(_QWORD **)(a2[3] + 56);
  v13 = *(WTF::StringImpl **)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  if (v13)
    *(_DWORD *)v13 += 2;
  v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  v15 = WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc;
  v16 = qword_1EE2E40F8;
  v17 = qword_1EE2E40F8 - 1;
  if (!qword_1EE2E40F8)
    v17 = 0;
  if (*v14)
  {
    if (WTF::StringImpl::startsWith())
    {
      v15 = WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc;
      v16 = qword_1EE2E40F8;
      goto LABEL_8;
    }
LABEL_11:
    v18 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
    v15 = WebCore::ContentSecurityPolicyDirectiveNames::styleSrc;
    v16 = qword_1EE2E41B8;
    if (qword_1EE2E41B8)
    {
      if (!*v18)
      {
        if ((_DWORD)qword_1EE2E41B8 == 1)
          goto LABEL_16;
        goto LABEL_26;
      }
    }
    else if (!*v18)
    {
      goto LABEL_22;
    }
    if ((WTF::StringImpl::startsWith() & 1) != 0)
    {
      v16 = qword_1EE2E41B8;
      if (qword_1EE2E41B8)
      {
        v15 = WebCore::ContentSecurityPolicyDirectiveNames::styleSrc;
        goto LABEL_16;
      }
LABEL_22:
      v19 = 0;
      goto LABEL_18;
    }
LABEL_26:
    v19 = (uint64_t)v13;
    goto LABEL_27;
  }
  if (v17)
    goto LABEL_11;
LABEL_8:
  if (!v16)
    goto LABEL_22;
LABEL_16:
  if (v16 == 1)
  {
    v19 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = v100;
  }
LABEL_18:
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v13 -= 2;
  }
LABEL_27:
  v20 = "";
  if (*(_BYTE *)(a2[3] + 17))
    v21 = "[Report Only] ";
  else
    v21 = "";
  if (*(_BYTE *)(a2[3] + 17))
    v22 = 15;
  else
    v22 = 1;
  if (*(_QWORD *)a3)
  {
    v24 = *(_DWORD *)(*(_QWORD *)a3 + 4);
    if (v24)
      v20 = " ";
    __src = (char *)v20;
    if (v24)
      v23 = 2;
    else
      v23 = 1;
  }
  else
  {
    __src = "";
    v23 = 1;
  }
  WTF::URL::stringCenterEllipsizedToLength(a3);
  v26 = " does not appear in the ";
  if (v12 == a2)
    v26 = " appears in neither the ";
  v95 = (int8x16_t *)v26;
  if (v19)
    *(_DWORD *)v19 += 2;
  v27 = 43;
  if (v12 == a2)
  {
    v27 = 73;
    v28 = " directive nor the default-src directive of the Content Security Policy.";
  }
  else
  {
    v28 = " directive of the Content Security Policy.";
  }
  v88 = v22 - 1;
  if (v88 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x196083F50);
  }
  if (a5)
  {
    v29 = a5 - 1;
    if ((unint64_t)(a5 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x196083FB8);
    }
  }
  else
  {
    v29 = 0;
  }
  v90 = v23 - 1;
  if ((unint64_t)(v23 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x196084028);
  }
  if (a7)
  {
    v30 = a7 - 1;
    if ((unint64_t)(a7 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x196084078);
    }
  }
  else
  {
    v30 = 0;
  }
  v89 = v27 - 1;
  if ((unint64_t)(v27 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x196083FF0);
  }
  if (v99)
  {
    v31 = *(_DWORD *)(v99 + 4);
    if (!v19)
    {
LABEL_121:
      v32 = 0;
      goto LABEL_51;
    }
  }
  else
  {
    v31 = 0;
    if (!v19)
      goto LABEL_121;
  }
  v32 = *(_DWORD *)(v19 + 4);
  if (v32 < 0)
    goto LABEL_109;
LABEL_51:
  v33 = __OFADD__(v32, (_DWORD)v89);
  v34 = v32 + v89;
  if (v33)
    goto LABEL_109;
  v33 = __OFADD__(24, v34);
  v35 = v34 + 24;
  if (v33)
    goto LABEL_109;
  v33 = __OFADD__((_DWORD)v30, v35);
  v36 = v30 + v35;
  if (v33)
    goto LABEL_109;
  v33 = __OFADD__(v36, 9);
  v37 = v36 + 9;
  v38 = v33;
  if (v31 < 0)
    goto LABEL_109;
  if (v38)
    goto LABEL_109;
  v33 = __OFADD__(v31, v37);
  v39 = v31 + v37;
  if (v33)
    goto LABEL_109;
  v33 = __OFADD__(v90, v39);
  v40 = v90 + v39;
  if (v33)
    goto LABEL_109;
  v33 = __OFADD__((_DWORD)v29, v40);
  v41 = v29 + v40;
  if (v33)
    goto LABEL_109;
  v42 = (v88 + v41);
  if (__OFADD__((_DWORD)v88, v41))
    goto LABEL_109;
  if (v99 && (*(_BYTE *)(v99 + 16) & 4) == 0 || v19 && (*(_BYTE *)(v19 + 16) & 4) == 0)
  {
    if ((_DWORD)v42)
    {
      if (v42 <= 0x7FFFFFEF)
      {
        v43 = (WTF *)(2 * v42 + 20);
        v44 = v30;
        v45 = v29;
        v93 = v88 + v41;
        v46 = (int8x16_t *)a4;
        v47 = v19;
        v48 = v88;
        v49 = (int8x16_t *)v28;
        v50 = v89;
        WTF::tryFastCompactMalloc(v43);
        v51 = v44;
        v52 = v100;
        if (v100)
        {
          v53 = v49;
          v54 = v48;
          v19 = v47;
          v55 = (char *)(v100 + 20);
          *(_DWORD *)v100 = 2;
          *(_DWORD *)(v100 + 4) = v93;
          *(_QWORD *)(v100 + 8) = v100 + 20;
          *(_DWORD *)(v100 + 16) = 0;
          v56 = (char *)(v100 + 20 + 2 * v54);
          v57 = v54 & 0x7FFFFFC0;
          if (v57)
          {
            v67 = &v55[2 * v57];
            v68 = 0uLL;
            v58 = a1;
            v60 = v95;
            v59 = (int8x16_t *)__src;
            do
            {
              v101.val[0] = *(int8x16_t *)v21;
              v69 = *((int8x16_t *)v21 + 1);
              v103.val[0] = (int8x16_t)*((_OWORD *)v21 + 2);
              v70 = *((_OWORD *)v21 + 3);
              v21 += 64;
              v71 = v70;
              v103.val[1] = 0uLL;
              v105.val[0] = v69;
              v101.val[1] = 0uLL;
              v72 = v55;
              vst2q_s8(v72, v101);
              v72 += 32;
              v105.val[1] = 0uLL;
              vst2q_s8(v72, v105);
              v73 = v55 + 64;
              vst2q_s8(v73, v103);
              v74 = v55 + 96;
              vst2q_s8(v74, *(int8x16x2_t *)(&v68 - 1));
              v55 += 128;
            }
            while (v55 != v67);
            v55 = v67;
          }
          else
          {
            v58 = a1;
            v60 = v95;
            v59 = (int8x16_t *)__src;
          }
          while (v55 != v56)
          {
            v75 = *(unsigned __int8 *)v21++;
            *(_WORD *)v55 = v75;
            v55 += 2;
          }
          v76 = &v56[2 * v45];
          if ((v45 & 0x7FFFFFC0) != 0)
          {
            v78 = &v56[2 * (v45 & 0x7FFFFFC0)];
            v79 = 0uLL;
            v77 = (int8x16_t *)a6;
            do
            {
              v102.val[0] = *v46;
              v80 = v46[1];
              v104.val[0] = v46[2];
              v81 = v46[3];
              v46 += 4;
              v82 = v81;
              v104.val[1] = 0uLL;
              v106.val[0] = v80;
              v102.val[1] = 0uLL;
              v83 = v56;
              vst2q_s8(v83, v102);
              v83 += 32;
              v106.val[1] = 0uLL;
              vst2q_s8(v83, v106);
              v84 = v56 + 64;
              vst2q_s8(v84, v104);
              v85 = v56 + 96;
              vst2q_s8(v85, *(int8x16x2_t *)(&v79 - 1));
              v56 += 128;
            }
            while (v56 != v78);
            v56 = v78;
          }
          else
          {
            v77 = (int8x16_t *)a6;
          }
          while (v56 != v76)
          {
            v86 = v46->u8[0];
            v46 = (int8x16_t *)((char *)v46 + 1);
            *(_WORD *)v56 = v86;
            v56 += 2;
          }
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v76, v59, v90, v99, (int8x16_t *)" because ", 9, v77, v51, v60, 24, v47, v53, v50);
          goto LABEL_93;
        }
      }
LABEL_109:
      *a1 = 0;
      __break(0xC471u);
      JUMPOUT(0x196083F20);
    }
    goto LABEL_108;
  }
  if (!(_DWORD)v42)
  {
LABEL_108:
    v52 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_79;
  }
  if ((v42 & 0x80000000) != 0)
    goto LABEL_109;
  v92 = v89;
  v94 = v29;
  WTF::tryFastCompactMalloc((WTF *)(v42 + 20));
  v62 = v92;
  v61 = v94;
  v63 = v99;
  v52 = v100;
  if (!v100)
    goto LABEL_109;
  v64 = v30;
  v65 = v90;
  v91 = (char *)v28;
  v66 = (char *)(v100 + 20);
  *(_DWORD *)v100 = 2;
  *(_DWORD *)(v100 + 4) = v42;
  *(_QWORD *)(v100 + 8) = v100 + 20;
  *(_DWORD *)(v100 + 16) = 4;
  if ((_DWORD)v88)
  {
    if ((_DWORD)v88 == 1)
    {
      *v66 = *v21;
    }
    else
    {
      memcpy((void *)(v100 + 20), v21, v88);
      v62 = v92;
      v61 = v94;
      v63 = v99;
      v64 = v30;
      v65 = v90;
    }
  }
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v66[v88], a4, v61, __src, v65, v63, " because ", 9u, a6, v64, v95, 24, v19, v91, v62);
LABEL_79:
  v58 = a1;
LABEL_93:
  *v58 = v52;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v19, v25);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v99;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)v99, v25);
      if (!v19)
        return result;
      goto LABEL_100;
    }
    *(_DWORD *)v99 -= 2;
  }
  if (!v19)
    return result;
LABEL_100:
  if (*(_DWORD *)v19 == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)v19, v25);
  *(_DWORD *)v19 -= 2;
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowInlineEventHandlers(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowInlineEventHandlers(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowInlineEventHandlers(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowInlineEventHandlers(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E34031B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowInlineEventHandlers(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowInlineEventHandlers(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E34031B0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowInlineEventHandlers(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowInlineEventHandlers(WTF::String const&,WTF::OrdinalNumber const&,WTF::String const&,WebCore::Element *,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  WTF::String *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *result;
  uint64_t v23;
  Inspector::InspectorDebuggerAgent *v24;
  int32x2_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27[5];
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v4 = *(_QWORD *)(a1 + 8);
  v27[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v27);
  WebCore::consoleMessageForViolation((uint64_t *)&v28, a2, (WTF::URL *)v27, "Refused to execute a script for an inline event handler", 56, "'unsafe-inline'", 16);
  v6 = v27[0];
  v27[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v27[0];
  v26 = v27[0];
  v8 = *(_QWORD *)(a1 + 16);
  v9 = **(_QWORD **)(a1 + 24);
  if (v9)
  {
    v10 = *(const char **)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 4);
    v12 = (unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0x100000000;
  }
  v25 = (int32x2_t)**(unsigned int **)(a1 + 32);
  v27[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v27);
  v13 = **(_QWORD **)(a1 + 40);
  v14 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v14);
  if ((_DWORD)v11)
  {
    if (v11 < 0x29)
    {
      v15 = v12 | v11;
    }
    else if ((v12 & 0x100000000) != 0)
    {
      v15 = 0x100000028;
    }
    else
    {
      v15 = 40;
    }
  }
  else
  {
    v15 = 0x100000000;
    v10 = "";
  }
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v29, a2[3], &v26, (uint64_t)&v28, v8, (uint64_t)v10, v15, &v25, 0, (uint64_t)v27, v13);
  v17 = v29;
  v29 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v27[0];
  v27[0] = 0;
  if (!v18)
  {
LABEL_18:
    if (!v7)
      goto LABEL_21;
    goto LABEL_19;
  }
  if (*(_DWORD *)v18 != 2)
  {
    *(_DWORD *)v18 -= 2;
    goto LABEL_18;
  }
  WTF::StringImpl::destroy(v18, v16);
  if (!v7)
    goto LABEL_21;
LABEL_19:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v16);
  else
    *(_DWORD *)v7 -= 2;
LABEL_21:
  if (!**(_BYTE **)(a1 + 48) && !*(_BYTE *)(a2[3] + 17))
  {
    v19 = *(_QWORD *)(v4 + 8);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v23 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v20 - 96), v16);
          if (v23)
          {
            v24 = *(Inspector::InspectorDebuggerAgent **)(v23 + 136);
            if (v24)
              Inspector::InspectorDebuggerAgent::scriptExecutionBlockedByCSP(v24, (const WTF::String *)(a2 + 2));
          }
        }
      }
    }
    **(_BYTE **)(a1 + 48) = 1;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowNonParserInsertedScripts(WTF::URL const&,WTF::URL const&,WTF::OrdinalNumber const&,WTF::String const&,WTF::StringView const&,WebCore::ParserInserted)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowNonParserInsertedScripts(WTF::URL const&,WTF::URL const&,WTF::OrdinalNumber const&,WTF::String const&,WTF::StringView const&,WebCore::ParserInserted)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowNonParserInsertedScripts(WTF::URL const&,WTF::URL const&,WTF::OrdinalNumber const&,WTF::String const&,WTF::StringView const&,WebCore::ParserInserted)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowNonParserInsertedScripts(WTF::URL const&,WTF::URL const&,WTF::OrdinalNumber const&,WTF::String const&,WTF::StringView const&,WebCore::ParserInserted)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E34031F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowNonParserInsertedScripts(WTF::URL const&,WTF::URL const&,WTF::OrdinalNumber const&,WTF::String const&,WTF::StringView const&,WebCore::ParserInserted)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowNonParserInsertedScripts(WTF::URL const&,WTF::URL const&,WTF::OrdinalNumber const&,WTF::String const&,WTF::StringView const&,WebCore::ParserInserted)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E34031F8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowNonParserInsertedScripts(WTF::URL const&,WTF::URL const&,WTF::OrdinalNumber const&,WTF::String const&,WTF::StringView const&,WebCore::ParserInserted)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowNonParserInsertedScripts(WTF::URL const&,WTF::URL const&,WTF::OrdinalNumber const&,WTF::String const&,WTF::StringView const&,WebCore::ParserInserted)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  WTF::URL *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const char **v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  WTF::String *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  WTF::StringImpl *v22[5];
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int32x2_t v25;
  WTF::StringImpl *v26;

  v4 = *(WTF::URL **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v25 = (int32x2_t)**(unsigned int **)(a1 + 8);
  v6 = *(_QWORD *)v4;
  v7 = "Refused to execute a script";
  if (*(_QWORD *)v4)
  {
    if (*(_DWORD *)(v6 + 4))
      v8 = 16;
    else
      v8 = 28;
    if (*(_DWORD *)(v6 + 4))
      v7 = "Refused to load";
  }
  else
  {
    v8 = 28;
  }
  WebCore::consoleMessageForViolation((uint64_t *)&v24, a2, v4, v7, v8, "it", 3);
  v9 = **(WTF::StringImpl ***)(a1 + 16);
  if (v9 && *((_DWORD *)v9 + 1))
  {
    *(_DWORD *)v9 += 2;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = v22[0];
  }
  v23 = v9;
  v11 = *(_QWORD *)(a1 + 32);
  v10 = *(const char ***)(a1 + 40);
  v12 = *v10;
  v13 = (uint64_t)v10[1];
  v22[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v22);
  v14 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v14);
  v15 = 40;
  if ((v13 & 0xFF00000000) != 0)
    v15 = 0x100000028;
  if (v13 < 0x29)
    v15 = v13;
  if ((_DWORD)v13)
    v16 = v12;
  else
    v16 = "";
  if ((_DWORD)v13)
    v17 = v15;
  else
    v17 = 0x100000000;
  WebCore::ContentSecurityPolicy::reportViolation(v5, &v26, a2[3], &v23, (uint64_t)&v24, v11, (uint64_t)v16, v17, &v25, 0, (uint64_t)v22, 0);
  v19 = v26;
  v26 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v22[0];
  v22[0] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::destroy(v20, v18);
      if (!v9)
        goto LABEL_29;
      goto LABEL_27;
    }
    *(_DWORD *)v20 -= 2;
  }
  if (!v9)
    goto LABEL_29;
LABEL_27:
  if (*(_DWORD *)v9 == 2)
    WTF::StringImpl::destroy(v9, v18);
  else
    *(_DWORD *)v9 -= 2;
LABEL_29:
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowInlineScript(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::Element &,WTF::String const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowInlineScript(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::Element &,WTF::String const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowInlineScript(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::Element &,WTF::String const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowInlineScript(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::Element &,WTF::String const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E3403240;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowInlineScript(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::Element &,WTF::String const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowInlineScript(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::Element &,WTF::String const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3403240;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowInlineScript(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::Element &,WTF::String const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowInlineScript(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::Element &,WTF::String const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const char **v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::String *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *result;
  uint64_t v24;
  Inspector::InspectorDebuggerAgent *v25;
  int32x2_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[5];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v4 = *(_QWORD *)(a1 + 8);
  v28[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v28);
  WebCore::consoleMessageForViolation((uint64_t *)&v29, a2, (WTF::URL *)v28, "Refused to execute a script", 28, "its hash, its nonce, or 'unsafe-inline'", 40);
  v6 = v28[0];
  v28[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v28[0];
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(const char ***)(a1 + 24);
  v10 = *v8;
  v11 = (uint64_t)v8[1];
  v26 = (int32x2_t)**(unsigned int **)(a1 + 32);
  v27 = v28[0];
  v28[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v28);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v13);
  v14 = 40;
  if ((v11 & 0xFF00000000) != 0)
    v14 = 0x100000028;
  if (v11 < 0x29)
    v14 = v11;
  if ((_DWORD)v11)
    v15 = v10;
  else
    v15 = "";
  if ((_DWORD)v11)
    v16 = v14;
  else
    v16 = 0x100000000;
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v30, a2[3], &v27, (uint64_t)&v29, v9, (uint64_t)v15, v16, &v26, 0, (uint64_t)v28, v12);
  v18 = v30;
  v30 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v28[0];
  v28[0] = 0;
  if (!v19)
  {
LABEL_20:
    if (!v7)
      goto LABEL_23;
    goto LABEL_21;
  }
  if (*(_DWORD *)v19 != 2)
  {
    *(_DWORD *)v19 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v19, v17);
  if (!v7)
    goto LABEL_23;
LABEL_21:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v17);
  else
    *(_DWORD *)v7 -= 2;
LABEL_23:
  if (!**(_BYTE **)(a1 + 48) && !*(_BYTE *)(a2[3] + 17))
  {
    v20 = *(_QWORD *)(v4 + 8);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v24 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v21 - 96), v17);
          if (v24)
          {
            v25 = *(Inspector::InspectorDebuggerAgent **)(v24 + 136);
            if (v25)
              Inspector::InspectorDebuggerAgent::scriptExecutionBlockedByCSP(v25, (const WTF::String *)(a2 + 2));
          }
        }
      }
    }
    **(_BYTE **)(a1 + 48) = 1;
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowInlineStyle(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::CheckUnsafeHashes,WebCore::Element &,WTF::String const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowInlineStyle(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::CheckUnsafeHashes,WebCore::Element &,WTF::String const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowInlineStyle(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::CheckUnsafeHashes,WebCore::Element &,WTF::String const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowInlineStyle(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::CheckUnsafeHashes,WebCore::Element &,WTF::String const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E3403288;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowInlineStyle(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::CheckUnsafeHashes,WebCore::Element &,WTF::String const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowInlineStyle(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::CheckUnsafeHashes,WebCore::Element &,WTF::String const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3403288;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowInlineStyle(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::CheckUnsafeHashes,WebCore::Element &,WTF::String const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowInlineStyle(WTF::String const&,WTF::OrdinalNumber const&,WTF::StringView,WebCore::CheckUnsafeHashes,WebCore::Element &,WTF::String const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const char **v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::String *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  int32x2_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[5];
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  v4 = *(_QWORD *)(a1 + 8);
  v23[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v23);
  WebCore::consoleMessageForViolation((uint64_t *)&v24, a2, (WTF::URL *)v23, "Refused to apply a stylesheet", 30, "its hash, its nonce, or 'unsafe-inline'", 40);
  v6 = v23[0];
  v23[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v23[0];
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(const char ***)(a1 + 24);
  v10 = *v8;
  v11 = (uint64_t)v8[1];
  v21 = (int32x2_t)**(unsigned int **)(a1 + 32);
  v22 = v23[0];
  v23[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v23);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v13);
  v14 = 40;
  if ((v11 & 0xFF00000000) != 0)
    v14 = 0x100000028;
  if (v11 < 0x29)
    v14 = v11;
  if ((_DWORD)v11)
    v15 = v10;
  else
    v15 = "";
  if ((_DWORD)v11)
    v16 = v14;
  else
    v16 = 0x100000000;
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v25, a2[3], &v22, (uint64_t)&v24, v9, (uint64_t)v15, v16, &v21, 0, (uint64_t)v23, v12);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v23[0];
  v23[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v17);
      if (!v7)
        goto LABEL_23;
      goto LABEL_21;
    }
    *(_DWORD *)v19 -= 2;
  }
  if (!v7)
    goto LABEL_23;
LABEL_21:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v17);
  else
    *(_DWORD *)v7 -= 2;
LABEL_23:
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowEval(JSC::JSGlobalObject *,WebCore::LogToConsole,WTF::StringView,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowEval(JSC::JSGlobalObject *,WebCore::LogToConsole,WTF::StringView,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowEval(JSC::JSGlobalObject *,WebCore::LogToConsole,WTF::StringView,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowEval(JSC::JSGlobalObject *,WebCore::LogToConsole,WTF::StringView,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E34032D0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowEval(JSC::JSGlobalObject *,WebCore::LogToConsole,WTF::StringView,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowEval(JSC::JSGlobalObject *,WebCore::LogToConsole,WTF::StringView,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E34032D0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowEval(JSC::JSGlobalObject *,WebCore::LogToConsole,WTF::StringView,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowEval(JSC::JSGlobalObject *,WebCore::LogToConsole,WTF::StringView,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  WTF::String *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *result;
  uint64_t v24;
  Inspector::InspectorDebuggerAgent *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[5];
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v4 = *(_QWORD *)(a1 + 16);
  if (**(_BYTE **)(a1 + 8))
  {
    v28[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v28);
    WebCore::consoleMessageForViolation((uint64_t *)&v27, a2, (WTF::URL *)v28, "Refused to execute a script", 28, "'unsafe-eval'", 14);
    v6 = v28[0];
    v28[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  else
  {
    v27 = 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v28[0];
  v26 = v28[0];
  v8 = *(_QWORD *)(a1 + 32);
  v9 = **(_QWORD **)(a1 + 24);
  v10 = *(const char **)v8;
  v11 = *(_QWORD *)(v8 + 8);
  v12 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v12);
  v13 = a2[3];
  v30 = 0;
  v14 = 40;
  if ((v11 & 0xFF00000000) != 0)
    v14 = 0x100000028;
  if (v11 < 0x29)
    v14 = v11;
  if ((_DWORD)v11)
  {
    v15 = v14;
  }
  else
  {
    v10 = "";
    v15 = 0x100000000;
  }
  v29 = -1;
  v28[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v28);
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v31, v13, &v26, (uint64_t)&v27, (uint64_t)&v30, (uint64_t)v10, v15, (int32x2_t *)&v29, v9, (uint64_t)v28, 0);
  v17 = v28[0];
  v28[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v30;
  v30 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v31;
  v31 = 0;
  if (!v19)
  {
LABEL_22:
    if (!v7)
      goto LABEL_25;
    goto LABEL_23;
  }
  if (*(_DWORD *)v19 != 2)
  {
    *(_DWORD *)v19 -= 2;
    goto LABEL_22;
  }
  WTF::StringImpl::destroy(v19, v16);
  if (!v7)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v16);
  else
    *(_DWORD *)v7 -= 2;
LABEL_25:
  if (!**(_BYTE **)(a1 + 40) && !*(_BYTE *)(a2[3] + 17))
  {
    v20 = *(_QWORD *)(v4 + 8);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v24 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v21 - 96), v16);
          if (v24)
          {
            v25 = *(Inspector::InspectorDebuggerAgent **)(v24 + 136);
            if (v25)
              Inspector::InspectorDebuggerAgent::scriptExecutionBlockedByCSP(v25, (const WTF::String *)(a2 + 2));
          }
        }
      }
    }
    **(_BYTE **)(a1 + 40) = 1;
  }
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowFrameAncestors(WebCore::LocalFrame const&,WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowFrameAncestors(WebCore::LocalFrame const&,WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowFrameAncestors(WebCore::LocalFrame const&,WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowFrameAncestors(WebCore::LocalFrame const&,WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3403318;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowFrameAncestors(WebCore::LocalFrame const&,WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowFrameAncestors(WebCore::LocalFrame const&,WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3403318;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowFrameAncestors(WebCore::LocalFrame const&,WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowFrameAncestors(WebCore::LocalFrame const&,WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  int32x2_t *v6;
  uint64_t v7;
  WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13[5];
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = *(_QWORD *)(a1 + 16);
  WebCore::consoleMessageForViolation((uint64_t *)&v14, a2, *(WTF::URL **)(a1 + 8), "Refused to load", 16, "it", 3);
  v5 = *(WTF::StringImpl ***)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 24);
  v6 = *(int32x2_t **)(a1 + 32);
  v13[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v13);
  v8 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v8);
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v15, a2[3], v5, (uint64_t)&v14, v7, (uint64_t)"", 0x100000000, v6, 0, (uint64_t)v13, 0);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowFrameAncestors(WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowFrameAncestors(WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowFrameAncestors(WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowFrameAncestors(WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3403360;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowFrameAncestors(WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowFrameAncestors(WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3403360;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowFrameAncestors(WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowFrameAncestors(WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  int32x2_t *v6;
  uint64_t v7;
  WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13[5];
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = *(_QWORD *)(a1 + 16);
  WebCore::consoleMessageForViolation((uint64_t *)&v14, a2, *(WTF::URL **)(a1 + 8), "Refused to load", 16, "it", 3);
  v5 = *(WTF::StringImpl ***)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 24);
  v6 = *(int32x2_t **)(a1 + 32);
  v13[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v13);
  v8 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v8);
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v15, a2[3], v5, (uint64_t)&v14, v7, (uint64_t)"", 0x100000000, v6, 0, (uint64_t)v13, 0);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowPluginType(WTF::String const&,WTF::String const&,WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowPluginType(WTF::String const&,WTF::String const&,WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowPluginType(WTF::String const&,WTF::String const&,WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowPluginType(WTF::String const&,WTF::String const&,WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E34033A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowPluginType(WTF::String const&,WTF::String const&,WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowPluginType(WTF::String const&,WTF::String const&,WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E34033A8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowPluginType(WTF::String const&,WTF::String const&,WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowPluginType(WTF::String const&,WTF::String const&,WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  int32x2_t *v6;
  uint64_t v7;
  WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13[5];
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = *(_QWORD *)(a1 + 16);
  WebCore::consoleMessageForViolation((uint64_t *)&v14, a2, *(WTF::URL **)(a1 + 8), "Refused to load", 16, "its MIME type", 14);
  v5 = *(WTF::StringImpl ***)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 24);
  v6 = *(int32x2_t **)(a1 + 32);
  v13[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v13);
  v8 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v8);
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v15, a2[3], v5, (uint64_t)&v14, v7, (uint64_t)"", 0x100000000, v6, 0, (uint64_t)v13, 0);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowObjectFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowObjectFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowObjectFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowObjectFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E34033F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowObjectFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowObjectFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E34033F0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowObjectFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowObjectFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int32x2_t *v7;
  WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13[5];
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = *(_QWORD *)(a1 + 16);
  WebCore::consoleMessageForViolation((uint64_t *)&v14, a2, *(WTF::URL **)(a1 + 8), "Refused to load", 16, "it", 3);
  v5 = *(WTF::StringImpl ***)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(int32x2_t **)(a1 + 40);
  v13[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v13);
  v8 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v8);
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v15, a2[3], v5, (uint64_t)&v14, v6, (uint64_t)"", 0x100000000, v7, 0, (uint64_t)v13, 0);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowChildFrameFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowChildFrameFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowChildFrameFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowChildFrameFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3403438;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowChildFrameFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowChildFrameFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3403438;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowChildFrameFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowChildFrameFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  int32x2_t *v6;
  uint64_t v7;
  WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13[5];
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = *(_QWORD *)(a1 + 16);
  WebCore::consoleMessageForViolation((uint64_t *)&v14, a2, *(WTF::URL **)(a1 + 8), "Refused to load", 16, "it", 3);
  v5 = *(WTF::StringImpl ***)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 24);
  v6 = *(int32x2_t **)(a1 + 32);
  v13[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v13);
  v8 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v8);
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v15, a2[3], v5, (uint64_t)&v14, v7, (uint64_t)"", 0x100000000, v6, 0, (uint64_t)v13, 0);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowResourceFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL)const,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowResourceFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL)const,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowResourceFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL)const,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowResourceFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL)const,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E3403480;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowResourceFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL)const,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowResourceFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL)const,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3403480;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowResourceFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL)const,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowResourceFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL)const,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int32x2_t *v7;
  WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13[5];
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = *(_QWORD *)(a1 + 16);
  WebCore::consoleMessageForViolation((uint64_t *)&v14, a2, *(WTF::URL **)(a1 + 8), "Refused to load", 16, "it", 3);
  v5 = *(WTF::StringImpl ***)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(int32x2_t **)(a1 + 40);
  v13[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v13);
  v8 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v8);
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v15, a2[3], v5, (uint64_t)&v14, v6, (uint64_t)"", 0x100000000, v7, 0, (uint64_t)v13, 0);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowWorkerFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowWorkerFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowWorkerFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowWorkerFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E34034C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowWorkerFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowWorkerFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E34034C8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowWorkerFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowWorkerFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int32x2_t *v7;
  WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13[5];
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = *(_QWORD *)(a1 + 16);
  WebCore::consoleMessageForViolation((uint64_t *)&v14, a2, *(WTF::URL **)(a1 + 8), "Refused to load", 16, "it", 3);
  v5 = *(WTF::StringImpl ***)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(int32x2_t **)(a1 + 40);
  v13[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v13);
  v8 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v8);
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v15, a2[3], v5, (uint64_t)&v14, v6, (uint64_t)"", 0x100000000, v7, 0, (uint64_t)v13, 0);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowScriptFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&,WTF::String const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowScriptFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&,WTF::String const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowScriptFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&,WTF::String const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowScriptFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&,WTF::String const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E3403510;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowScriptFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&,WTF::String const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowScriptFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&,WTF::String const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3403510;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowScriptFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&,WTF::String const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowScriptFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&,WTF::String const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int32x2_t *v7;
  WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13[5];
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = *(_QWORD *)(a1 + 16);
  WebCore::consoleMessageForViolation((uint64_t *)&v14, a2, *(WTF::URL **)(a1 + 8), "Refused to load", 16, "it", 3);
  v5 = *(WTF::StringImpl ***)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(int32x2_t **)(a1 + 40);
  v13[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v13);
  v8 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v8);
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v15, a2[3], v5, (uint64_t)&v14, v6, (uint64_t)"", 0x100000000, v7, 0, (uint64_t)v13, 0);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowStyleFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowStyleFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowStyleFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowStyleFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E3403558;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowStyleFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowStyleFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3403558;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowStyleFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowStyleFromSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&,WTF::String const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int32x2_t *v7;
  WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13[5];
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = *(_QWORD *)(a1 + 16);
  WebCore::consoleMessageForViolation((uint64_t *)&v14, a2, *(WTF::URL **)(a1 + 8), "Refused to load", 16, "it", 3);
  v5 = *(WTF::StringImpl ***)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(int32x2_t **)(a1 + 40);
  v13[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v13);
  v8 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v8);
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v15, a2[3], v5, (uint64_t)&v14, v6, (uint64_t)"", 0x100000000, v7, 0, (uint64_t)v13, 0);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowConnectToSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowConnectToSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowConnectToSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowConnectToSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E34035A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowConnectToSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowConnectToSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E34035A0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowConnectToSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowConnectToSource(WTF::URL const&,WebCore::ContentSecurityPolicy::RedirectResponseReceived,WTF::URL const&)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int32x2_t *v7;
  uint64_t v8;
  WTF::String *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v4 = *(_QWORD *)(a1 + 16);
  WebCore::consoleMessageForViolation((uint64_t *)&v13, a2, *(WTF::URL **)(a1 + 8), "Refused to connect to", 22, "it", 3);
  v5 = *(WTF::StringImpl ***)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(int32x2_t **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v9);
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v14, a2[3], v5, (uint64_t)&v13, v6, (uint64_t)"", 0x100000000, v7, 0, v8, 0);
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowBaseURI(WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowBaseURI(WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowBaseURI(WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowBaseURI(WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E34035E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowBaseURI(WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowBaseURI(WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E34035E8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowBaseURI(WTF::URL const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowBaseURI(WTF::URL const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  int32x2_t *v6;
  uint64_t v7;
  WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13[5];
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = *(_QWORD *)(a1 + 16);
  WebCore::consoleMessageForViolation((uint64_t *)&v14, a2, *(WTF::URL **)(a1 + 8), "Refused to change the document base URL to", 43, "it", 3);
  v5 = *(WTF::StringImpl ***)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 24);
  v6 = *(int32x2_t **)(a1 + 32);
  v13[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v13);
  v8 = (WTF::String *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v8);
  WebCore::ContentSecurityPolicy::reportViolation(v4, &v15, a2[3], v5, (uint64_t)&v14, v7, (uint64_t)"", 0x100000000, v6, 0, (uint64_t)v13, 0);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::ContentSecurityPolicy::allowTrustedTypesPolicy(WTF::String const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowTrustedTypesPolicy(WTF::String const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowTrustedTypesPolicy(WTF::String const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowTrustedTypesPolicy(WTF::String const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3403630;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<WebCore::ContentSecurityPolicy::allowTrustedTypesPolicy(WTF::String const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowTrustedTypesPolicy(WTF::String const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3403630;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

WTF::StringImpl *std::__function::__func<WebCore::ContentSecurityPolicy::allowTrustedTypesPolicy(WTF::String const&,BOOL)::$_0,std::allocator<WebCore::ContentSecurityPolicy::allowTrustedTypesPolicy(WTF::String const&,BOOL)::$_0>,void ()(WebCore::ContentSecurityPolicyDirective const&)>::operator()(uint64_t a1, WTF::StringImpl *a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  int8x16_t v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  char *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  unint64_t v36;
  int32x2_t *v37;
  WTF::String *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *result;
  size_t v44;
  WTF::StringImpl *v45[5];
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;

  if (*(_BYTE *)(*((_QWORD *)a2 + 3) + 17))
    v4 = "[Report Only] ";
  else
    v4 = "";
  v5 = 15;
  if (!*(_BYTE *)(*((_QWORD *)a2 + 3) + 17))
    v5 = 1;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = **(_QWORD **)(a1 + 8);
  if (v7)
    *(_DWORD *)v7 += 2;
  v8 = *((_QWORD *)a2 + 2);
  if (v8)
    *(_DWORD *)v8 += 2;
  v44 = v5 - 1;
  if ((unint64_t)(v5 - 1) >> 31)
  {
LABEL_87:
    __break(0xC471u);
    JUMPOUT(0x1960865F8);
  }
  if (v7)
  {
    v9 = *(_DWORD *)(v7 + 4);
    if (v8)
      goto LABEL_13;
LABEL_81:
    v10 = 0;
    goto LABEL_14;
  }
  v9 = 0;
  if (!v8)
    goto LABEL_81;
LABEL_13:
  v10 = *(_DWORD *)(v8 + 4);
  if (v10 < 0)
    goto LABEL_87;
LABEL_14:
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    goto LABEL_87;
  v11 = __OFADD__(v12, 72);
  v13 = v12 + 72;
  v14 = v11;
  if (v9 < 0)
    goto LABEL_87;
  if (v14)
    goto LABEL_87;
  v11 = __OFADD__(v9, v13);
  v15 = v9 + v13;
  if (v11)
    goto LABEL_87;
  v11 = __OFADD__(v15, 45);
  v16 = v15 + 45;
  if (v11)
    goto LABEL_87;
  v17 = (v44 + v16);
  if (__OFADD__((_DWORD)v44, v16))
    goto LABEL_87;
  if (v7 && (*(_BYTE *)(v7 + 16) & 4) == 0 || v8 && (*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    if ((_DWORD)v17)
    {
      if (v17 > 0x7FFFFFEF)
        goto LABEL_87;
      WTF::tryFastCompactMalloc((WTF *)(2 * v17 + 20));
      v18 = v45[0];
      if (!v45[0])
        goto LABEL_87;
      v19 = (char *)v45[0] + 20;
      *(_DWORD *)v45[0] = 2;
      *((_DWORD *)v18 + 1) = v17;
      *((_QWORD *)v18 + 1) = (char *)v18 + 20;
      *((_DWORD *)v18 + 4) = 0;
      v20 = (uint64_t)v18 + 2 * v44 + 20;
      if ((v44 & 0x7FFFFFC0) != 0)
      {
        v21 = &v19[2 * (v44 & 0x7FFFFFC0)];
        v22 = 0uLL;
        do
        {
          v49.val[0] = *(int8x16_t *)v4;
          v23 = *((int8x16_t *)v4 + 1);
          v50.val[0] = (int8x16_t)*((_OWORD *)v4 + 2);
          v24 = *((_OWORD *)v4 + 3);
          v4 += 64;
          v25 = v24;
          v50.val[1] = 0uLL;
          v51.val[0] = v23;
          v49.val[1] = 0uLL;
          v26 = v19;
          vst2q_s8(v26, v49);
          v26 += 32;
          v51.val[1] = 0uLL;
          vst2q_s8(v26, v51);
          v27 = v19 + 64;
          vst2q_s8(v27, v50);
          v28 = v19 + 96;
          vst2q_s8(v28, *(int8x16x2_t *)(&v22 - 1));
          v19 += 128;
        }
        while (v19 != v21);
        v19 = v21;
      }
      while (v19 != (char *)v20)
      {
        v29 = *(unsigned __int8 *)v4++;
        *(_WORD *)v19 = v29;
        v19 += 2;
      }
      *(_OWORD *)v20 = xmmword_1969F62A0;
      *(_OWORD *)(v20 + 16) = xmmword_1969F62B0;
      *(_OWORD *)(v20 + 32) = xmmword_1969F62C0;
      *(_OWORD *)(v20 + 48) = xmmword_1969F62D0;
      *(_OWORD *)(v20 + 64) = xmmword_1969F62E0;
      *(_WORD *)(v20 + 88) = 39;
      *(_QWORD *)(v20 + 80) = 0x2000640065006DLL;
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((_WORD *)(v20 + 90), v7, (int8x16_t *)"' because it violates the following Content Security Policy directive: \"", 72, v8, 34);
      goto LABEL_44;
    }
LABEL_84:
    v18 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_44;
  }
  if (!(_DWORD)v17)
    goto LABEL_84;
  if ((v17 & 0x80000000) != 0)
    goto LABEL_87;
  WTF::tryFastCompactMalloc((WTF *)(v17 + 20));
  v18 = v45[0];
  if (!v45[0])
    goto LABEL_87;
  v30 = (char *)v45[0] + 20;
  *(_DWORD *)v45[0] = 2;
  *((_DWORD *)v18 + 1) = v17;
  *((_QWORD *)v18 + 1) = (char *)v18 + 20;
  *((_DWORD *)v18 + 4) = 4;
  if ((_DWORD)v44)
  {
    if ((_DWORD)v44 == 1)
      *v30 = *v4;
    else
      memcpy((char *)v18 + 20, v4, v44);
  }
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v30[v44], "Refused to create a TrustedTypePolicy named '", 0x2Du, v7, "' because it violates the following Content Security Policy directive: \"", 0x48u, v8, 34);
LABEL_44:
  v47 = v18;
  if (!v8)
    goto LABEL_47;
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
LABEL_47:
    if (v7)
      goto LABEL_48;
    goto LABEL_50;
  }
  WTF::StringImpl::destroy((WTF::StringImpl *)v8, a2);
  if (v7)
  {
LABEL_48:
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
LABEL_50:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v31 = v45[0];
  v46 = v45[0];
  v32 = *(_QWORD *)(a1 + 24);
  v33 = **(_QWORD **)(a1 + 8);
  if (v33)
  {
    v34 = *(const char **)(v33 + 8);
    v35 = *(unsigned int *)(v33 + 4);
    v36 = (unint64_t)((*(_DWORD *)(v33 + 16) >> 2) & 1) << 32;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v36 = 0x100000000;
  }
  v37 = *(int32x2_t **)(a1 + 32);
  v45[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v45);
  v38 = (WTF::String *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)a2 + 16))(a2);
  WTF::String::convertToASCIILowercase(v38);
  if ((_DWORD)v35)
  {
    if (v35 < 0x29)
    {
      v39 = v36 | v35;
    }
    else if ((v36 & 0x100000000) != 0)
    {
      v39 = 0x100000028;
    }
    else
    {
      v39 = 40;
    }
  }
  else
  {
    v39 = 0x100000000;
    v34 = "";
  }
  WebCore::ContentSecurityPolicy::reportViolation(v6, &v48, *((_QWORD *)a2 + 3), &v46, (uint64_t)&v47, v32, (uint64_t)v34, v39, v37, 0, (uint64_t)v45, 0);
  v41 = v48;
  v48 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v40);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = v45[0];
  v45[0] = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::destroy(v42, v40);
      if (!v31)
        goto LABEL_67;
      goto LABEL_65;
    }
    *(_DWORD *)v42 -= 2;
  }
  if (!v31)
    goto LABEL_67;
LABEL_65:
  if (*(_DWORD *)v31 == 2)
    WTF::StringImpl::destroy(v31, v40);
  else
    *(_DWORD *)v31 -= 2;
LABEL_67:
  result = v47;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v40);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(_BYTE *result, unsigned int a2, int a3, uint64_t a4, _BYTE *a5, uint64_t a6)
{
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  uint64_t v15;
  _WORD *v16;
  int8x16_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  char *v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned __int128 v34;
  char v35;
  unsigned __int128 *v36;
  unsigned __int128 *v37;
  unsigned __int128 v38;
  char v39;
  _QWORD v40[2];
  int8x16x2_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;

  v10 = result;
  if (a3)
  {
    if ((a2 & 0x80000000) == 0)
    {
      result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
      v11 = v40[0];
      if (v40[0])
      {
        v12 = (_BYTE *)(v40[0] + 20);
        *(_DWORD *)v40[0] = 2;
        *(_DWORD *)(v11 + 4) = a2;
        *(_QWORD *)(v11 + 8) = v11 + 20;
        *(_DWORD *)(v11 + 16) = 4;
        if (a4)
        {
          v13 = *(_BYTE **)(a4 + 8);
          v14 = *(unsigned int *)(a4 + 4);
          if ((*(_BYTE *)(a4 + 16) & 4) != 0)
          {
            if ((_DWORD)v14)
            {
              if ((_DWORD)v14 == 1)
                *v12 = *v13;
              else
                memcpy((void *)(v11 + 20), v13, v14);
            }
          }
          else
          {
            if (v14 < 0x10)
            {
              v36 = (unsigned __int128 *)(v11 + 20);
            }
            else
            {
              v36 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
              v37 = (unsigned __int128 *)(v11 + 20);
              do
              {
                v38 = (unsigned __int128)vld2q_s8(v13);
                v13 += 32;
                *v37++ = v38;
              }
              while (v37 != v36);
            }
            while (v36 != (unsigned __int128 *)&v12[v14])
            {
              v39 = *v13;
              v13 += 2;
              *(_BYTE *)v36 = v39;
              v36 = (unsigned __int128 *)((char *)v36 + 1);
            }
          }
          v15 = *(unsigned int *)(a4 + 4);
        }
        else
        {
          v15 = 0;
        }
        v12[v15] = 124;
        result = &v12[v15 + 1];
        if ((a6 & 0xFF00000000) != 0)
        {
          if ((_DWORD)a6)
          {
            if ((_DWORD)a6 == 1)
              *result = *a5;
            else
              result = memcpy(result, a5, a6);
          }
        }
        else
        {
          v32 = &result[a6];
          if (a6 >= 0x10)
          {
            v33 = &result[a6 & 0xFFFFFFF0];
            do
            {
              v34 = (unsigned __int128)vld2q_s8(a5);
              a5 += 32;
              *(_OWORD *)result = v34;
              result += 16;
            }
            while (result != v33);
            result = v33;
          }
          while (result != v32)
          {
            v35 = *a5;
            a5 += 2;
            *result++ = v35;
          }
        }
      }
      goto LABEL_35;
    }
LABEL_36:
    v11 = 0;
    goto LABEL_35;
  }
  if (a2 > 0x7FFFFFEF)
    goto LABEL_36;
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  v11 = v40[0];
  if (v40[0])
  {
    v16 = (_WORD *)(v40[0] + 20);
    *(_DWORD *)v40[0] = 2;
    *(_DWORD *)(v11 + 4) = a2;
    *(_QWORD *)(v11 + 8) = v11 + 20;
    *(_DWORD *)(v11 + 16) = 0;
    if (a4)
    {
      v17 = *(int8x16_t **)(a4 + 8);
      v18 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) != 0)
      {
        v19 = (char *)&v16[v18];
        if (v18 >= 0x40)
        {
          v20 = (char *)&v16[v18 & 0xFFFFFFC0];
          v22 = 0uLL;
          v23 = (char *)(v11 + 20);
          do
          {
            v41.val[0] = *v17;
            v24 = v17[1];
            v42.val[0] = v17[2];
            v25 = v17[3];
            v17 += 4;
            v26 = v25;
            v42.val[1] = 0uLL;
            v43.val[0] = v24;
            v41.val[1] = 0uLL;
            v27 = v23;
            vst2q_s8(v27, v41);
            v27 += 32;
            v43.val[1] = 0uLL;
            vst2q_s8(v27, v43);
            v28 = v23 + 64;
            vst2q_s8(v28, v42);
            v29 = v23 + 96;
            vst2q_s8(v29, *(int8x16x2_t *)(&v22 - 1));
            v23 += 128;
          }
          while (v23 != v20);
        }
        else
        {
          v20 = (char *)(v11 + 20);
        }
        while (v20 != v19)
        {
          v30 = v17->u8[0];
          v17 = (int8x16_t *)((char *)v17 + 1);
          *(_WORD *)v20 = v30;
          v20 += 2;
        }
      }
      else if ((_DWORD)v18 == 1)
      {
        *v16 = v17->i16[0];
      }
      else if ((_DWORD)v18)
      {
        memcpy((void *)(v11 + 20), v17, 2 * v18);
      }
      v21 = *(unsigned int *)(a4 + 4);
    }
    else
    {
      v21 = 0;
    }
    v31 = (char *)&v16[v21];
    *(_WORD *)v31 = 124;
    v40[0] = a5;
    v40[1] = a6;
    result = WTF::StringView::getCharacters<char16_t>(v40, v31 + 2);
  }
LABEL_35:
  *v10 = v11;
  return result;
}

_QWORD *WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral>(_QWORD *result, _OWORD *a2, uint64_t a3, uint64_t a4, int8x16_t *a5, uint64_t a6, uint64_t a7, int8x16_t *a8, uint64_t a9, int8x16_t *a10, uint64_t a11)
{
  size_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  int v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  int8x16_t v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  char *v42;
  char *v43;
  __int16 v44;
  int8x16_t *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  char *v55;
  char *v56;
  char *v57;
  __int16 v58;
  int v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;

  if (a3)
  {
    v16 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_75;
  }
  else
  {
    v16 = 0;
  }
  if (a6)
  {
    v17 = a6 - 1;
    if ((unint64_t)(a6 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x196086C74);
    }
  }
  else
  {
    v17 = 0;
  }
  if (a9)
  {
    v18 = a9 - 1;
    if ((unint64_t)(a9 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x196086CA4);
    }
  }
  else
  {
    v18 = 0;
  }
  if (!a11)
  {
    v19 = 0;
    goto LABEL_9;
  }
  v19 = a11 - 1;
  if ((unint64_t)(a11 - 1) >> 31)
  {
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x196086C44);
  }
LABEL_9:
  if (a4)
  {
    v20 = *(_DWORD *)(a4 + 4);
    if (a7)
    {
LABEL_11:
      v21 = *(_DWORD *)(a7 + 4);
      goto LABEL_12;
    }
  }
  else
  {
    v20 = 0;
    if (a7)
      goto LABEL_11;
  }
  v21 = 0;
LABEL_12:
  v22 = 0;
  v23 = v18 + v19;
  if (!__OFADD__(v18, (_DWORD)v19) && (v21 & 0x80000000) == 0)
  {
    v24 = __OFADD__(v21, v23);
    v25 = v21 + v23;
    if (v24)
      goto LABEL_66;
    v22 = 0;
    v24 = __OFADD__(v17, v25);
    v26 = v17 + v25;
    v27 = v24;
    if ((v20 & 0x80000000) == 0 && !v27)
    {
      v24 = __OFADD__(v20, v26);
      v28 = v20 + v26;
      if (v24)
        goto LABEL_66;
      v29 = (v16 + v28);
      if (__OFADD__((_DWORD)v16, v28))
        goto LABEL_66;
      v30 = (!a4 || (*(_BYTE *)(a4 + 16) & 4) != 0) && (!a7 || (*(_BYTE *)(a7 + 16) & 4) != 0);
      v62 = v18;
      v63 = result;
      if (v30)
      {
        if ((_DWORD)v29)
        {
          if ((v29 & 0x80000000) == 0)
          {
            v31 = v19;
            WTF::tryFastCompactMalloc((WTF *)(v29 + 20));
            v22 = v64;
            if (v64)
            {
              v33 = (_BYTE *)(v64 + 20);
              *(_DWORD *)v64 = 2;
              *(_DWORD *)(v64 + 4) = v29;
              *(_QWORD *)(v64 + 8) = v64 + 20;
              *(_DWORD *)(v64 + 16) = 4;
              if ((_DWORD)v16)
              {
                if ((_DWORD)v16 == 1)
                  *v33 = *(_BYTE *)a2;
                else
                  memcpy((void *)(v64 + 20), a2, v16);
              }
              WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v33[v16], a4, a5, v17, a7, a8, v62, v32, a10, v31);
            }
LABEL_64:
            result = v63;
            goto LABEL_65;
          }
          goto LABEL_66;
        }
      }
      else if ((_DWORD)v29)
      {
        if (v29 <= 0x7FFFFFEF)
        {
          v61 = v19;
          WTF::tryFastCompactMalloc((WTF *)(2 * v29 + 20));
          v22 = v64;
          if (v64)
          {
            v34 = (char *)(v64 + 20);
            *(_DWORD *)v64 = 2;
            *(_DWORD *)(v64 + 4) = v29;
            *(_QWORD *)(v64 + 8) = v64 + 20;
            *(_DWORD *)(v64 + 16) = 0;
            v35 = (char *)(v64 + 20 + 2 * v16);
            if ((v16 & 0x7FFFFFC0) != 0)
            {
              v36 = &v34[2 * (v16 & 0x7FFFFFC0)];
              v37 = 0uLL;
              do
              {
                v65.val[0] = (int8x16_t)*a2;
                v38 = *((int8x16_t *)a2 + 1);
                v67.val[0] = (int8x16_t)a2[2];
                v39 = a2[3];
                a2 += 4;
                v40 = v39;
                v67.val[1] = 0uLL;
                v69.val[0] = v38;
                v65.val[1] = 0uLL;
                v41 = v34;
                vst2q_s8(v41, v65);
                v41 += 32;
                v69.val[1] = 0uLL;
                vst2q_s8(v41, v69);
                v42 = v34 + 64;
                vst2q_s8(v42, v67);
                v43 = v34 + 96;
                vst2q_s8(v43, *(int8x16x2_t *)(&v37 - 1));
                v34 += 128;
              }
              while (v34 != v36);
              v34 = v36;
            }
            while (v34 != v35)
            {
              v44 = *(unsigned __int8 *)a2;
              a2 = (_OWORD *)((char *)a2 + 1);
              *(_WORD *)v34 = v44;
              v34 += 2;
            }
            if (a4)
            {
              v45 = *(int8x16_t **)(a4 + 8);
              v46 = *(unsigned int *)(a4 + 4);
              if ((*(_BYTE *)(a4 + 16) & 4) != 0)
              {
                v47 = &v35[2 * v46];
                if (v46 >= 0x40)
                {
                  v48 = &v35[2 * (v46 & 0xFFFFFFC0)];
                  v50 = 0uLL;
                  v51 = v64 + 20 + 2 * v16;
                  do
                  {
                    v66.val[0] = *v45;
                    v52 = v45[1];
                    v68.val[0] = v45[2];
                    v53 = v45[3];
                    v45 += 4;
                    v54 = v53;
                    v68.val[1] = 0uLL;
                    v70.val[0] = v52;
                    v66.val[1] = 0uLL;
                    v55 = (char *)v51;
                    vst2q_s8(v55, v66);
                    v55 += 32;
                    v70.val[1] = 0uLL;
                    vst2q_s8(v55, v70);
                    v56 = (char *)(v51 + 64);
                    vst2q_s8(v56, v68);
                    v57 = (char *)(v51 + 96);
                    vst2q_s8(v57, *(int8x16x2_t *)(&v50 - 1));
                    v51 += 128;
                  }
                  while ((char *)v51 != v48);
                }
                else
                {
                  v48 = (char *)(v64 + 20 + 2 * v16);
                }
                while (v48 != v47)
                {
                  v58 = v45->u8[0];
                  v45 = (int8x16_t *)((char *)v45 + 1);
                  *(_WORD *)v48 = v58;
                  v48 += 2;
                }
              }
              else if ((_DWORD)v46 == 1)
              {
                *(_WORD *)v35 = v45->i16[0];
              }
              else if ((_DWORD)v46)
              {
                memcpy((void *)(v64 + 20 + 2 * v16), v45, 2 * v46);
              }
              v49 = *(unsigned int *)(a4 + 4);
            }
            else
            {
              v49 = 0;
            }
            WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v35[2 * v49], a5, v17, a7, a8, v62, a10, v61);
          }
          goto LABEL_64;
        }
LABEL_66:
        v22 = 0;
        goto LABEL_65;
      }
      v22 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
  }
LABEL_65:
  *result = v22;
  return result;
}

WTF::StringImpl *WebCore::ContentSecurityPolicyMediaListDirective::parse(WTF::StringImpl *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t i;
  int v10;
  unsigned __int8 *v11;
  unsigned __int16 j;
  unsigned __int16 v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v20;
  uint64_t v21;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl *v26;
  const WTF::StringImpl *v27;
  int v28;
  unsigned __int16 v29;
  uint64_t v30;
  uint64_t k;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 m;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v47;
  uint64_t v48;
  WTF::StringImpl *v50;
  const WTF::StringImpl *v51;
  int v52;
  char v53;
  WTF::StringImpl *v54[3];
  WTF::StringImpl *v55;

  v2 = this;
  v3 = *a2;
  if (!*a2)
    return (WTF::StringImpl *)WebCore::ContentSecurityPolicy::reportInvalidPluginTypes(**((_QWORD **)this + 3), a2);
  v4 = *((unsigned int *)v3 + 1);
  if (!(_DWORD)v4)
    return (WTF::StringImpl *)WebCore::ContentSecurityPolicy::reportInvalidPluginTypes(**((_QWORD **)this + 3), a2);
  v5 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
  if ((*((_BYTE *)v3 + 16) & 4) == 0)
  {
    v6 = *((unsigned int *)v3 + 1);
    while (1)
    {
      v7 = 0;
      v8 = v5 + 4;
      for (i = v4 - 4; ; --i)
      {
        v10 = *(unsigned __int16 *)&v5[v7];
        if ((v10 - 9) >= 5 && v10 != 32)
          break;
        v7 += 2;
        v8 += 2;
        if (!--v6)
          return this;
      }
      if (v10 == 47)
        break;
      if (!--v6)
      {
        v8 = &v5[v7 + 2];
LABEL_19:
        if (v8 - v5 - v7 <= -2)
          goto LABEL_140;
        v14 = **((_QWORD **)v2 + 3);
        goto LABEL_51;
      }
      v11 = &v5[2 * v4];
      while (1)
      {
        v15 = *((unsigned __int16 *)v8 - 1);
        if ((v15 - 9) < 5)
        {
LABEL_27:
          v8 -= 2;
          while (1)
          {
            v16 = *(unsigned __int16 *)v8;
            v17 = v16 > 0x20;
            v18 = (1 << v16) & 0x100003E00;
            if (!v17 && v18 != 0)
              goto LABEL_19;
            v8 += 2;
            if (!--v6)
              goto LABEL_34;
          }
        }
        if (v15 == 47)
          break;
        if (v15 == 32)
          goto LABEL_27;
        v8 += 2;
        --i;
        if (!--v6)
        {
LABEL_34:
          v8 = &v5[2 * v4];
          goto LABEL_19;
        }
      }
      if (v6 == 1)
      {
        v6 = 0;
        goto LABEL_49;
      }
      v20 = *(unsigned __int16 *)v8;
      v17 = v20 > 0x2F;
      v21 = (1 << v20) & 0x800100003E00;
      if (!v17 && v21 != 0)
      {
        --v6;
        while (1)
        {
          v23 = *(unsigned __int16 *)v8;
          v17 = v23 > 0x20;
          v24 = (1 << v23) & 0x100003E00;
          if (!v17 && v24 != 0)
            goto LABEL_49;
          v8 += 2;
          if (!--v6)
            goto LABEL_48;
        }
      }
      v8 += 2;
      v6 -= 2;
      if (v6)
      {
        while (1)
        {
          v28 = *(unsigned __int16 *)v8;
          if ((v28 - 9) < 5 || v28 == 32)
            break;
          if (v28 == 47)
          {
            while ((unsigned __int16)v28 > 0x20u || ((1 << v28) & 0x100003E00) == 0)
            {
              if (!i)
              {
                v6 = 0;
                goto LABEL_48;
              }
              v29 = *((_WORD *)v8 + 1);
              v8 += 2;
              LOWORD(v28) = v29;
              --i;
            }
            v6 = i + 1;
            goto LABEL_49;
          }
          v8 += 2;
          --i;
          if (!--v6)
          {
            v8 = &v5[2 * v4];
            break;
          }
        }
      }
      if (v8 - v5 - v7 <= -2)
        goto LABEL_140;
      WTF::String::String();
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v2 + 32, &v55, v27, (uint64_t)v54);
      this = v55;
      v55 = 0;
      if (this)
        goto LABEL_52;
LABEL_54:
      v4 = v6;
      v5 = v8;
      if (!v6)
        return this;
    }
    v8 = &v5[2 * v4];
    v11 = &v5[v7];
    for (j = 47; j > 0x20u || ((1 << j) & 0x100003E00) == 0; j = v13)
    {
      if (!--v6)
        goto LABEL_49;
      v13 = *((_WORD *)v11 + 1);
      v11 += 2;
    }
LABEL_48:
    v8 = v11;
LABEL_49:
    if (v8 - v5 - v7 <= -2)
      goto LABEL_140;
    v14 = **((_QWORD **)v2 + 3);
LABEL_51:
    WTF::String::String();
    WebCore::ContentSecurityPolicy::reportInvalidPluginTypes(v14, v54);
    this = v54[0];
    v54[0] = 0;
    if (this)
    {
LABEL_52:
      if (*(_DWORD *)this == 2)
        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v26);
      else
        *(_DWORD *)this -= 2;
    }
    goto LABEL_54;
  }
  while (1)
  {
    v30 = 0;
    for (k = v4 - 4; ; --k)
    {
      v32 = v5[v30];
      if ((v32 - 9) >= 5 && v32 != 32)
        break;
      if (v4 == ++v30)
        return this;
    }
    if (v32 == 47)
    {
      v33 = &v5[v4];
      v34 = &v5[v30];
      v4 -= v30;
      for (m = 47; m > 0x20u || ((1 << m) & 0x100003E00) == 0; m = v36)
      {
        if (!--v4)
          goto LABEL_115;
        v36 = *++v34;
      }
LABEL_114:
      v33 = v34;
LABEL_115:
      if (v33 - v5 - v30 < 0)
        goto LABEL_140;
      v37 = **((_QWORD **)v2 + 3);
LABEL_117:
      WTF::String::String();
      WebCore::ContentSecurityPolicy::reportInvalidPluginTypes(v37, v54);
      this = v54[0];
      v54[0] = 0;
      if (this)
      {
LABEL_118:
        if (*(_DWORD *)this == 2)
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v50);
        else
          *(_DWORD *)this -= 2;
      }
      goto LABEL_120;
    }
    if (v4 - 1 == v30)
      break;
    v34 = &v5[v4];
    v38 = v30;
    while (1)
    {
      v39 = v5[v38 + 1];
      if ((v39 - 9) < 5)
      {
LABEL_93:
        v33 = &v5[v38 + 1];
        v4 += ~v38;
        while (1)
        {
          v40 = *v33;
          v17 = v40 > 0x20;
          v41 = (1 << v40) & 0x100003E00;
          if (!v17 && v41 != 0)
            goto LABEL_85;
          ++v33;
          if (!--v4)
            goto LABEL_100;
        }
      }
      if (v39 == 47)
        break;
      if (v39 == 32)
        goto LABEL_93;
      ++v38;
      --k;
      if (v4 - 1 == v38)
      {
        v4 = 0;
LABEL_100:
        v33 = v34;
        goto LABEL_85;
      }
    }
    v33 = &v5[v38 + 2];
    if (v4 - 2 == v38)
    {
      v4 = 0;
      goto LABEL_115;
    }
    v43 = v4 - v38;
    v44 = *v33;
    v17 = v44 > 0x2F;
    v45 = (1 << v44) & 0x800100003E00;
    if (!v17 && v45 != 0)
    {
      v4 = v43 - 2;
      while (1)
      {
        v47 = *v33;
        v17 = v47 > 0x20;
        v48 = (1 << v47) & 0x100003E00;
        if (!v17 && v48 != 0)
          goto LABEL_115;
        ++v33;
        if (!--v4)
          goto LABEL_114;
      }
    }
    v33 = &v5[v38 + 3];
    if (v4 - 3 == v38)
    {
      v4 = 0;
    }
    else
    {
      v4 = v43 - 3;
      while (1)
      {
        v52 = *v33;
        if ((v52 - 9) < 5 || v52 == 32)
          break;
        if (v52 == 47)
        {
          while (v52 > 0x20u || ((1 << v52) & 0x100003E00) == 0)
          {
            if (!k)
            {
              v4 = 0;
              goto LABEL_114;
            }
            v53 = *++v33;
            LOBYTE(v52) = v53;
            --k;
          }
          v4 = k + 1;
          goto LABEL_115;
        }
        ++v33;
        --k;
        if (!--v4)
        {
          v33 = v34;
          break;
        }
      }
    }
    if (v33 - v5 - v30 < 0)
      goto LABEL_140;
    WTF::String::String();
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v2 + 32, &v55, v51, (uint64_t)v54);
    this = v55;
    v55 = 0;
    if (this)
      goto LABEL_118;
LABEL_120:
    v5 = v33;
    if (!v4)
      return this;
  }
  v4 = 0;
  v33 = &v5[v30 + 1];
LABEL_85:
  if (v33 - v5 - v30 >= 0)
  {
    v37 = **((_QWORD **)v2 + 3);
    goto LABEL_117;
  }
LABEL_140:
  __break(1u);
  return this;
}

WTF::StringImpl *WebCore::ContentSecurityPolicyTrustedTypesDirective::parse(WTF::StringImpl *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v14;
  unsigned int v15;
  WTF::StringImpl *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  const WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int v29;
  WTF::StringImpl *v31;
  unsigned int v32;
  WTF::StringImpl *j;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  const WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  unsigned int v57;
  uint64_t k;
  unsigned int v59;
  BOOL v60;
  uint64_t v61;
  unsigned int v63;
  uint64_t i;
  unsigned int v65;
  uint64_t v66;
  WTF::StringImpl *v68[3];
  WTF::StringImpl *v69;

  v2 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return this;
  v3 = *(unsigned int *)(v2 + 4);
  if (!(_DWORD)v3)
    return this;
  v4 = (uint64_t)this;
  v5 = *(WTF::StringImpl **)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    v10 = *(unsigned int *)(v2 + 4);
    v11 = *(unsigned __int8 **)(v2 + 8);
    do
    {
      v12 = *v11;
      if (v12 > 0x20 || ((1 << v12) & 0x100003600) == 0)
      {
        if (v10 < 6)
          goto LABEL_18;
        v63 = v12 & 0xFFFFFFDF;
        if (v10 == 6)
        {
          if (v63 != 7
            || (v11[1] & 0xDF) != 0x4E
            || (v11[2] & 0xDF) != 0x4F
            || (v11[3] & 0xDF) != 0x4E
            || (v11[4] & 0xDF) != 0x45
            || (v11[5] & 0xDF) != 7)
          {
            goto LABEL_18;
          }
        }
        else
        {
          if (v63 != 7
            || (v11[1] & 0xDF) != 0x4E
            || (v11[2] & 0xDF) != 0x4F
            || (v11[3] & 0xDF) != 0x4E
            || (v11[4] & 0xDF) != 0x45
            || (v11[5] & 0xDF) != 7)
          {
            goto LABEL_18;
          }
          for (i = 6; i != v10; ++i)
          {
            v65 = v11[i];
            v60 = v65 > 0x20;
            v66 = (1 << v65) & 0x100003600;
            if (v60 || v66 == 0)
              goto LABEL_18;
          }
        }
        return this;
      }
      ++v11;
      --v10;
    }
    while (v10);
    while (1)
    {
LABEL_18:
      v14 = 0;
      while (1)
      {
        v15 = *((unsigned __int8 *)v5 + v14);
        if (v15 > 0x20 || ((1 << v15) & 0x100003600) == 0)
          break;
        if (v3 == ++v14)
          return this;
      }
      v17 = (WTF::StringImpl *)((char *)v5 + v3);
      v3 -= v14;
      v18 = *((unsigned __int8 *)v5 + v14);
      v19 = (WTF::StringImpl *)((char *)v5 + v14);
      while (v18 > 0x20 || ((1 << v18) & 0x100003600) == 0)
      {
        if (!--v3)
          goto LABEL_31;
        v20 = *((unsigned __int8 *)v19 + 1);
        v19 = (WTF::StringImpl *)((char *)v19 + 1);
        v18 = v20;
      }
      v17 = v19;
LABEL_31:
      v21 = v17 - v5 - v14;
      if ((v21 & 0x8000000000000000) != 0)
      {
LABEL_226:
        __break(1u);
        return this;
      }
      if (v21 >= 0x12)
        break;
      if (v21 < 6)
        goto LABEL_34;
      v22 = v15 & 0xFFFFFFDF;
      if (v17 - v5 - 6 != v14)
        goto LABEL_63;
      if (v22 == 7
        && (*((_BYTE *)v5 + v14 + 1) & 0xDF) == 0x4E
        && (*((_BYTE *)v5 + v14 + 2) & 0xDF) == 0x4F
        && (*((_BYTE *)v5 + v14 + 3) & 0xDF) == 0x4E
        && (*((_BYTE *)v5 + v14 + 4) & 0xDF) == 0x45)
      {
        v24 = (uint64_t)v5 + v14;
LABEL_69:
        if ((*(_BYTE *)(v24 + 5) & 0xDF) == 7)
        {
          this = WebCore::ContentSecurityPolicy::reportInvalidTrustedTypesNoneKeyword(**(WebCore::ContentSecurityPolicy ***)(v4 + 24));
          goto LABEL_80;
        }
      }
LABEL_34:
      if ((WTF::StringImpl *)((char *)v5 + v14) == v17)
        goto LABEL_77;
      if (v15 == 42)
      {
        *(_BYTE *)(v4 + 33) = 1;
        goto LABEL_80;
      }
      if (v15 - 48 >= 0xA
        && (v15 | 0x20) - 97 >= 0x1A
        && (v15 - 35 > 0x3C || ((1 << (v15 - 35)) & 0x1000000024001C05) == 0))
      {
LABEL_77:
        WTF::String::String();
        WebCore::ContentSecurityPolicy::reportInvalidTrustedTypesPolicy(**(WTF::StringImpl ***)(v4 + 24), (const WTF::String *)v68);
        this = v68[0];
        v68[0] = 0;
        if (this)
        {
LABEL_78:
          if (*(_DWORD *)this == 2)
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v26);
          else
            *(_DWORD *)this -= 2;
        }
      }
      else
      {
        WTF::String::String();
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v4 + 40), &v69, v25, (uint64_t)v68);
        this = v69;
        v69 = 0;
        if (this)
          goto LABEL_78;
      }
LABEL_80:
      v5 = v17;
      if (!v3)
        return this;
    }
    v22 = v15 & 0xFFFFFFDF;
    if ((v15 & 0xFFFFFFDF) == 7)
    {
      v23 = *((unsigned __int8 *)v5 + v14 + 1);
      if ((v23 & 0xFFFFFFDF) == 0x41
        && (*((_BYTE *)v5 + v14 + 2) & 0xDF) == 0x4C
        && (*((_BYTE *)v5 + v14 + 3) & 0xDF) == 0x4C
        && (*((_BYTE *)v5 + v14 + 4) & 0xDF) == 0x4F
        && (*((_BYTE *)v5 + v14 + 5) & 0xDF) == 0x57
        && (*((_BYTE *)v5 + v14 + 6) & 0xDF) == 0xD
        && (*((_BYTE *)v5 + v14 + 7) & 0xDF) == 0x44
        && (*((_BYTE *)v5 + v14 + 8) & 0xDF) == 0x55
        && (*((_BYTE *)v5 + v14 + 9) & 0xDF) == 0x50
        && (*((_BYTE *)v5 + v14 + 10) & 0xDF) == 0x4C
        && (*((_BYTE *)v5 + v14 + 11) & 0xDF) == 0x49
        && (*((_BYTE *)v5 + v14 + 12) & 0xDF) == 0x43
        && (*((_BYTE *)v5 + v14 + 13) & 0xDF) == 0x41
        && (*((_BYTE *)v5 + v14 + 14) & 0xDF) == 0x54
        && (*((_BYTE *)v5 + v14 + 15) & 0xDF) == 0x45
        && (*((_BYTE *)v5 + v14 + 16) & 0xDF) == 0x53
        && (*((_BYTE *)v5 + v14 + 17) & 0xDF) == 7)
      {
        *(_BYTE *)(v4 + 32) = 1;
        goto LABEL_80;
      }
    }
    else
    {
LABEL_63:
      if (v22 != 7)
        goto LABEL_34;
      v23 = *((unsigned __int8 *)v5 + v14 + 1);
    }
    if ((v23 & 0xFFFFFFDF) == 0x4E
      && (*((_BYTE *)v5 + v14 + 2) & 0xDF) == 0x4F
      && (*((_BYTE *)v5 + v14 + 3) & 0xDF) == 0x4E)
    {
      v24 = (uint64_t)v5 + v14;
      if ((*((_BYTE *)v5 + v14 + 4) & 0xDF) == 0x45)
        goto LABEL_69;
    }
    goto LABEL_34;
  }
  v6 = *(unsigned int *)(v2 + 4);
  v7 = *(unsigned __int16 **)(v2 + 8);
  while (1)
  {
    v8 = *v7;
    if (v8 > 0x20 || ((1 << v8) & 0x100003600) == 0)
      break;
    ++v7;
    if (!--v6)
      goto LABEL_84;
  }
  if (v6 < 6)
  {
    while (1)
    {
LABEL_84:
      v27 = 0;
      v28 = v3;
      while (1)
      {
        v29 = *(unsigned __int16 *)((char *)v27 + (_QWORD)v5);
        if (v29 > 0x20 || ((1 << v29) & 0x100003600) == 0)
          break;
        v27 = (WTF::StringImpl *)((char *)v27 + 2);
        if (!--v28)
          return this;
      }
      v31 = (WTF::StringImpl *)((char *)v5 + 2 * v3);
      v32 = *(unsigned __int16 *)((char *)v27 + (_QWORD)v5);
      for (j = (WTF::StringImpl *)((char *)v27 + (_QWORD)v5); ; j = (WTF::StringImpl *)((char *)j + 2))
      {
        if (v32 <= 0x20 && ((1 << v32) & 0x100003600) != 0)
        {
          v31 = j;
          v3 = v28;
          goto LABEL_97;
        }
        if (!--v28)
          break;
        v34 = *((unsigned __int16 *)j + 1);
        v32 = v34;
      }
      v3 = 0;
LABEL_97:
      v35 = v31 - v5;
      v36 = v31 - v5 - (_QWORD)v27;
      if ((uint64_t)v36 <= -2)
        goto LABEL_226;
      v37 = (WTF::StringImpl *)(v35 - 4);
      v38 = (WTF::StringImpl *)(v35 - 10);
      v39 = (WTF::StringImpl *)(v35 - 8);
      v40 = (WTF::StringImpl *)(v35 - 6);
      if (v36 >= 0x24)
      {
        v41 = (WTF::StringImpl *)(v35 - 12);
        v42 = (WTF::StringImpl *)(v35 - 14);
        v43 = (WTF::StringImpl *)(v35 - 16);
        v44 = (WTF::StringImpl *)(v35 - 18);
        v45 = (WTF::StringImpl *)(v35 - 20);
        v46 = (WTF::StringImpl *)(v35 - 22);
        v47 = (WTF::StringImpl *)(v35 - 24);
        v48 = (WTF::StringImpl *)(v35 - 26);
        v49 = (WTF::StringImpl *)(v35 - 28);
        v50 = (WTF::StringImpl *)(v35 - 30);
        this = (WTF::StringImpl *)(v35 - 32);
        v51 = (WTF::StringImpl *)(v35 - 34);
        v52 = v29 & 0xFFFFFFDF;
        if (v36 >= 0x26)
        {
          if (v52 != 7
            || (*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 2) & 0xFFDF) != 0x41
            || (*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 4) & 0xFFDF) != 0x4C)
          {
            goto LABEL_99;
          }
          if (v40 == v27)
            goto LABEL_226;
          if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 6) & 0xFFDF) != 0x4C)
            goto LABEL_99;
          if (v39 == v27)
            goto LABEL_226;
          if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 8) & 0xFFDF) != 0x4F)
            goto LABEL_99;
          if (v38 == v27)
            goto LABEL_226;
          if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 10) & 0xFFDF) != 0x57)
            goto LABEL_99;
          if (v41 == v27)
            goto LABEL_226;
          if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 12) & 0xFFDF) != 0xD)
            goto LABEL_99;
          if (v42 == v27)
            goto LABEL_226;
          if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 14) & 0xFFDF) != 0x44)
            goto LABEL_99;
          if (v43 == v27)
            goto LABEL_226;
          if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 16) & 0xFFDF) != 0x55)
            goto LABEL_99;
        }
        else
        {
          if (v52 != 7 || (*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 2) & 0xFFDF) != 0x41)
            goto LABEL_99;
          if (v37 == v27)
            goto LABEL_226;
          if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 4) & 0xFFDF) != 0x4C)
            goto LABEL_99;
          if (v40 == v27)
            goto LABEL_226;
          if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 6) & 0xFFDF) != 0x4C)
            goto LABEL_99;
          if (v39 == v27)
            goto LABEL_226;
          if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 8) & 0xFFDF) != 0x4F)
            goto LABEL_99;
          if (v38 == v27)
            goto LABEL_226;
          if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 10) & 0xFFDF) != 0x57)
            goto LABEL_99;
          if (v41 == v27)
            goto LABEL_226;
          if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 12) & 0xFFDF) != 0xD)
            goto LABEL_99;
          if (v42 == v27)
            goto LABEL_226;
          if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 14) & 0xFFDF) != 0x44)
            goto LABEL_99;
          if (v43 == v27)
            goto LABEL_226;
          if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 16) & 0xFFDF) != 0x55)
            goto LABEL_99;
        }
        if (v44 == v27)
          goto LABEL_226;
        if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 18) & 0xFFDF) == 0x50)
        {
          if (v45 == v27)
            goto LABEL_226;
          if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 20) & 0xFFDF) == 0x4C)
          {
            if (v46 == v27)
              goto LABEL_226;
            if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 22) & 0xFFDF) == 0x49)
            {
              if (v47 == v27)
                goto LABEL_226;
              if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 24) & 0xFFDF) == 0x43)
              {
                if (v48 == v27)
                  goto LABEL_226;
                if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 26) & 0xFFDF) == 0x41)
                {
                  if (v49 == v27)
                    goto LABEL_226;
                  if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 28) & 0xFFDF) == 0x54)
                  {
                    if (v50 == v27)
                      goto LABEL_226;
                    if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 30) & 0xFFDF) == 0x45)
                    {
                      if (this == v27)
                        goto LABEL_226;
                      this = (WTF::StringImpl *)(*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 32) & 0xFFDF);
                      if ((_DWORD)this == 83)
                      {
                        if (v51 == v27)
                          goto LABEL_226;
                        if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 34) & 0xFFDF) == 7)
                        {
                          *(_BYTE *)(v4 + 32) = 1;
                          goto LABEL_103;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_99:
      if (v36 >= 0xC)
      {
        v53 = v29 & 0xFFFFFFDF;
        if (v36 >= 0xE)
        {
          if (v53 == 7)
          {
            v54 = (uint64_t)v27 + (_QWORD)v5;
            if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 2) & 0xFFDF) == 0x4E)
              goto LABEL_164;
          }
        }
        else if (v53 == 7 && (*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 2) & 0xFFDF) == 0x4E)
        {
          if (v37 == v27)
            goto LABEL_226;
          v54 = (uint64_t)v27 + (_QWORD)v5;
LABEL_164:
          if ((*(_WORD *)(v54 + 4) & 0xFFDF) == 0x4F)
          {
            if (v40 == v27)
              goto LABEL_226;
            if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 6) & 0xFFDF) == 0x4E)
            {
              if (v39 == v27)
                goto LABEL_226;
              if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 8) & 0xFFDF) == 0x45)
              {
                if (v38 == v27)
                  goto LABEL_226;
                if ((*(_WORD *)((_BYTE *)v27 + (_QWORD)v5 + 10) & 0xFFDF) == 7)
                {
                  this = WebCore::ContentSecurityPolicy::reportInvalidTrustedTypesNoneKeyword(**(WebCore::ContentSecurityPolicy ***)(v4 + 24));
                  goto LABEL_103;
                }
              }
            }
          }
        }
      }
      if ((WTF::StringImpl *)((char *)v27 + (_QWORD)v5) == v31)
        goto LABEL_179;
      if (v29 == 42)
      {
        *(_BYTE *)(v4 + 33) = 1;
        goto LABEL_103;
      }
      if (v29 - 48 >= 0xA
        && (v29 | 0x20) - 97 >= 0x1A
        && (v29 - 35 > 0x3C || ((1 << (v29 - 35)) & 0x1000000024001C05) == 0))
      {
LABEL_179:
        WTF::String::String();
        WebCore::ContentSecurityPolicy::reportInvalidTrustedTypesPolicy(**(WTF::StringImpl ***)(v4 + 24), (const WTF::String *)v68);
        this = v68[0];
        v68[0] = 0;
        if (this)
        {
LABEL_180:
          if (*(_DWORD *)this == 2)
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v56);
          else
            *(_DWORD *)this -= 2;
        }
      }
      else
      {
        WTF::String::String();
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v4 + 40), &v69, v55, (uint64_t)v68);
        this = v69;
        v69 = 0;
        if (this)
          goto LABEL_180;
      }
LABEL_103:
      v5 = v31;
      if (!v3)
        return this;
    }
  }
  v57 = v8 & 0xFFFFFFDF;
  if (v6 == 6)
  {
    if (v57 != 7
      || (v7[1] & 0xFFDF) != 0x4E
      || (v7[2] & 0xFFDF) != 0x4F
      || (v7[3] & 0xFFDF) != 0x4E
      || (v7[4] & 0xFFDF) != 0x45
      || (v7[5] & 0xFFDF) != 7)
    {
      goto LABEL_84;
    }
  }
  else
  {
    if (v57 != 7
      || (v7[1] & 0xFFDF) != 0x4E
      || (v7[2] & 0xFFDF) != 0x4F
      || (v7[3] & 0xFFDF) != 0x4E
      || (v7[4] & 0xFFDF) != 0x45
      || (v7[5] & 0xFFDF) != 7)
    {
      goto LABEL_84;
    }
    for (k = 6; k != v6; ++k)
    {
      v59 = v7[k];
      v60 = v59 > 0x20;
      v61 = (1 << v59) & 0x100003600;
      if (v60 || v61 == 0)
        goto LABEL_84;
    }
  }
  return this;
}

uint64_t WebCore::ContentSecurityPolicyTrustedTypesDirective::allows(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, char *a4)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  int v17;
  unsigned int v19;
  uint64_t v20;
  uint64_t result;
  char v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int i;
  int v29;

  v7 = *a2;
  if (!*a2)
    goto LABEL_28;
  v8 = *((_QWORD *)v7 + 1);
  v9 = *((unsigned int *)v7 + 1);
  if ((*((_BYTE *)v7 + 16) & 4) == 0)
  {
    if ((_DWORD)v9)
    {
      v10 = 0;
      do
      {
        v11 = *(unsigned __int16 *)(v8 + 2 * v10);
        if ((v11 - 48) >= 0xA && (v11 | 0x20u) - 97 >= 0x1A)
        {
          v13 = v11 - 35;
          v14 = v13 > 0x3C;
          v15 = (1 << v13) & 0x1000000024001C05;
          if (v14 || v15 == 0)
            goto LABEL_29;
        }
      }
      while (v9 != ++v10);
    }
LABEL_28:
    v10 = -1;
    goto LABEL_29;
  }
  if (!(_DWORD)v9)
    goto LABEL_28;
  v10 = 0;
  while (1)
  {
    v17 = *(unsigned __int8 *)(v8 + v10);
    if ((v17 - 48) >= 0xA && (v17 | 0x20u) - 97 >= 0x1A)
    {
      v19 = v17 - 35;
      v14 = v19 > 0x3C;
      v20 = (1 << v19) & 0x1000000024001C05;
      if (v14 || v20 == 0)
        break;
    }
    if (v9 == ++v10)
      goto LABEL_28;
  }
LABEL_29:
  if ((_DWORD)a3 && (!*(_BYTE *)(a1 + 32) || (MEMORY[0x19AEA53F4]() & 1) != 0))
  {
    result = 0;
    v23 = 2;
  }
  else
  {
    if (v10 != -1)
      goto LABEL_34;
    if (*(_BYTE *)(a1 + 33))
    {
LABEL_37:
      v23 = 0;
      result = 1;
      goto LABEL_38;
    }
    v24 = *(_QWORD *)(a1 + 40);
    if (v24)
    {
      v25 = *(_DWORD *)(v24 - 8);
      v26 = *((_DWORD *)*a2 + 4);
      if (v26 < 0x100)
        v27 = WTF::StringImpl::hashSlowCase(*a2);
      else
        v27 = v26 >> 8;
      for (i = 0; ; v27 = i + v29)
      {
        v29 = v27 & v25;
        result = *(_QWORD *)(v24 + 8 * (v27 & v25));
        if (!result)
          break;
        if (result != -1 && (WTF::equal((WTF *)result, *a2, a3) & 1) != 0)
          goto LABEL_37;
        ++i;
      }
    }
    else
    {
LABEL_34:
      result = 0;
    }
    v23 = 1;
  }
LABEL_38:
  *a4 = v23;
  return result;
}

uint64_t WebCore::ContentChangeObserver::isVisuallyHidden(WebCore::ContentChangeObserver *this, const WebCore::Node *a2)
{
  uint64_t v2;
  WebCore::ContentChangeObserver *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  int v8;
  void *v9;
  float v10;
  int v11;
  uint64_t v12;
  BOOL v14;
  unsigned int *v15;
  unsigned int *v16;
  int v17;
  void *v18;
  float v19;
  int v20;
  float v21;
  float v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int *v28;
  int v29;
  int v30;
  float v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  int v36;
  int v37;
  unint64_t v38;
  float v39;
  int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  char v45;
  float v46;
  uint64_t v47;
  int v48;
  float v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t i;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  int v70;
  int v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  int v93;
  __int16 v94;
  uint64_t v95;
  float v97;
  uint64_t v98;
  int v99;
  int v100;
  unsigned int v101;
  float v102;
  float v103;
  int v104;
  float v105;
  int v106;
  float v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned __int8 v111;
  char v112;
  char v113;
  unsigned int v114;
  unsigned __int8 v115;
  char v116;
  unsigned __int8 v117;
  float v118;
  unsigned __int8 v119;
  char v120;
  char v121;
  float v122;
  unsigned __int8 v123;
  char v124;
  char v125;
  float v126;
  unsigned __int8 v127;
  char v128;
  char v129;

  v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 1;
  v3 = this;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    v51 = *(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v51)
      v2 = *(_QWORD *)(v51 + 8);
    else
      v2 = 0;
  }
  if ((*(_QWORD *)(v2 + 96) & 0x1FLL) == 0x1A)
    return 1;
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 104) + 239) & 4) != 0)
    return 1;
  if ((*(_DWORD *)(v2 + 120) & 0x30) == 0x10)
    return 1;
  v4 = *(_QWORD *)(v2 + 88);
  if (*(float *)(*(_QWORD *)(v4 + 32) + 4) == 0.0)
    return 1;
  v5 = ((*(_DWORD *)(v2 + 124) >> 13) & 6) - 2;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = (unsigned int *)(v6 + 4);
  if (v5 < 4)
    v7 = (unsigned int *)(v6 + 12);
  v126 = 0.0;
  v129 = 0;
  v127 = *((_BYTE *)v7 + 4);
  v8 = v127;
  v128 = *((_BYTE *)v7 + 5);
  if (v127 - 2 >= 9)
  {
    if (v127 == 11)
    {
      v9 = (void *)*v7;
      v126 = *(float *)v7;
      WebCore::Length::ref((int *)&v126);
      v6 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + 8);
      v5 = ((*(_DWORD *)(v2 + 124) >> 13) & 6) - 2;
      goto LABEL_12;
    }
    v9 = 0;
    v11 = 1;
    v10 = 0.0;
  }
  else
  {
    v129 = *((_BYTE *)v7 + 6);
    if (!v129)
    {
      v9 = (void *)*v7;
      v126 = *(float *)v7;
LABEL_12:
      v10 = *(float *)&v9;
      v11 = 1;
      goto LABEL_18;
    }
    v11 = 0;
    v10 = *(float *)v7;
    v126 = v10;
    v9 = (void *)LODWORD(v10);
  }
LABEL_18:
  v14 = v5 >= 4;
  v15 = (unsigned int *)(v6 + 4);
  v16 = (unsigned int *)(v6 + 12);
  if (!v14)
    v16 = v15;
  v122 = 0.0;
  v125 = 0;
  v123 = *((_BYTE *)v16 + 4);
  v17 = v123;
  v124 = *((_BYTE *)v16 + 5);
  if (v123 - 2 >= 9)
  {
    if (v123 != 11)
    {
      v18 = 0;
      v20 = 1;
      v19 = 0.0;
      goto LABEL_27;
    }
    v18 = (void *)*v16;
    v122 = *(float *)v16;
    v105 = v10;
    v71 = v11;
    WebCore::Length::ref((int *)&v122);
    v11 = v71;
    v10 = v105;
  }
  else
  {
    v125 = *((_BYTE *)v16 + 6);
    if (v125)
    {
      v20 = 0;
      v19 = *(float *)v16;
      v122 = v19;
      v18 = (void *)LODWORD(v19);
      goto LABEL_27;
    }
    v18 = (void *)*v16;
    v122 = *(float *)v16;
  }
  v19 = *(float *)&v18;
  v20 = 1;
LABEL_27:
  if (v8 == 4)
  {
    v21 = (float)SLODWORD(v10);
    if (!v11)
      v21 = v10;
    if (v21 == 0.0)
    {
      v12 = 1;
LABEL_119:
      if (v17 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v18);
      }
      goto LABEL_120;
    }
  }
  if (v17 != 4)
    goto LABEL_35;
  v22 = (float)SLODWORD(v19);
  if (!v20)
    v22 = v19;
  if (v22 != 0.0)
  {
LABEL_35:
    v23 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + 24);
    v24 = *(_DWORD *)(v2 + 124);
    v25 = ((unsigned __int16)v24 >> 13) - 1;
    if (v25 > 4)
      v26 = 0;
    else
      v26 = qword_1969F6338[v25];
    v27 = v24 >> 13;
    v28 = (unsigned int *)(v23 + 8 + 8 * v26);
    v121 = 0;
    v119 = *((_BYTE *)v28 + 4);
    v29 = v119;
    v120 = *((_BYTE *)v28 + 5);
    v30 = 1;
    v31 = 0.0;
    if (v119 > 0xDu)
    {
      v32 = 0;
    }
    else
    {
      if (((1 << v119) & 0x7FC) == 0)
      {
        if (((1 << v119) & 0x3003) != 0)
        {
          v32 = 0;
          v118 = 0.0;
          goto LABEL_45;
        }
        v32 = (void *)*v28;
        v118 = *(float *)v28;
        v103 = v19;
        v107 = v10;
        v73 = v11;
        v100 = v20;
        WebCore::Length::ref((int *)&v118);
        v20 = v100;
        v19 = v103;
        v10 = v107;
        v11 = v73;
        v23 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + 24);
        v27 = *(_DWORD *)(v2 + 124) >> 13;
LABEL_42:
        v31 = *(float *)&v32;
LABEL_45:
        v30 = 1;
        goto LABEL_47;
      }
      v121 = *(_BYTE *)(v23 + 8 + 8 * v26 + 6);
      if (!v121)
      {
        v32 = (void *)*v28;
        v118 = *(float *)v28;
        goto LABEL_42;
      }
      v30 = 0;
      v31 = *(float *)v28;
      v118 = v31;
      v32 = (void *)LODWORD(v31);
    }
LABEL_47:
    v33 = (v27 & 7) - 2;
    if (v33 > 3)
      v34 = 3;
    else
      v34 = qword_1969F6360[v33];
    v35 = (unsigned int *)(v23 + 8 + 8 * v34);
    v117 = 0;
    v115 = *((_BYTE *)v35 + 4);
    v36 = v115;
    v116 = *((_BYTE *)v35 + 5);
    if (v115 - 2 >= 9)
    {
      if (v115 == 11)
      {
        v114 = *v35;
        v72 = v114;
        v102 = v19;
        v99 = v20;
        v97 = v31;
        v106 = v30;
        WebCore::Length::ref((int *)&v114);
        v30 = v106;
        v31 = v97;
        v20 = v99;
        v19 = v102;
        v36 = 11;
        v38 = v72;
        v37 = 0;
        LOBYTE(v12) = 0;
        v39 = *(float *)&v72;
        goto LABEL_63;
      }
      v38 = 0;
      v37 = 0;
      v40 = 1;
      v39 = 0.0;
    }
    else
    {
      v117 = *((_BYTE *)v35 + 6);
      v37 = v117;
      if (v117)
      {
        v40 = 0;
        v39 = *(float *)v35;
        v114 = LODWORD(v39);
        v38 = LODWORD(v39);
        v37 = 1;
      }
      else
      {
        v38 = *v35;
        v114 = v38;
        v39 = *(float *)&v38;
        v40 = 1;
      }
    }
    LOBYTE(v12) = v115 == 4;
    if (v115 == 4 && v8 == 4)
    {
      v41 = (float)SLODWORD(v39);
      if (!v40)
        v41 = v39;
      v42 = -v41;
      if (v11)
        v10 = (float)SLODWORD(v10);
      v12 = 1;
      if (v10 <= v42)
        goto LABEL_118;
    }
LABEL_63:
    if (v17 == 4 && v29 == 4)
    {
      v43 = (float)SLODWORD(v31);
      if (!v30)
        v43 = v31;
      v44 = -v43;
      if (v20)
        v19 = (float)SLODWORD(v19);
      if (v19 <= v44)
        goto LABEL_81;
    }
    v45 = v12 ^ 1;
    if ((*(_QWORD *)(v2 + 96) & 0x180000) != 0x100000)
      v45 = 1;
    if ((v45 & 1) == 0)
    {
      v46 = (float)SLODWORD(v39);
      if (v37)
        v46 = v39;
      if (v46 <= -999.0)
      {
        v12 = 1;
LABEL_118:
        if (v29 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v32);
        }
        goto LABEL_119;
      }
    }
    v47 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + 8);
    v113 = 0;
    v111 = *(_BYTE *)(v47 + 48);
    v48 = v111;
    v112 = *(_BYTE *)(v47 + 49);
    if (v111 - 2 >= 9)
    {
      v50 = 0;
      if (v111 == 11)
      {
        v108 = v38;
        v110 = *(_DWORD *)(v47 + 44);
        v74 = v110;
        v75 = v36;
        WebCore::Length::ref((int *)&v110);
        v36 = v75;
        v50 = v74;
        v38 = v108;
      }
    }
    else
    {
      v49 = *(float *)(v47 + 44);
      v50 = LODWORD(v49);
      if (v111 == 4)
      {
        if (!*(_BYTE *)(v47 + 50))
          v49 = (float)SLODWORD(v49);
        if (v49 == 0.0)
        {
LABEL_81:
          v12 = 1;
LABEL_117:
          if (v36 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v38);
          }
          goto LABEL_118;
        }
      }
    }
    v52 = *((_QWORD *)v3 + 4);
    if (v52)
    {
      v53 = 0;
      while (1)
      {
        v54 = *(_QWORD *)(v52 + 64) & 0xFFFFFFFFFFFFLL;
        if (!v54)
          break;
        if ((*(_BYTE *)((*(_QWORD *)(v52 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          v54 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v52 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
        if (*(float *)(*(_QWORD *)(*(_QWORD *)(v54 + 88) + 32) + 4) == 0.0)
          break;
        v52 = *(_QWORD *)(v52 + 32);
        if (v52)
        {
          if (v53++ <= 2)
            continue;
        }
        goto LABEL_99;
      }
      v12 = 1;
      goto LABEL_116;
    }
LABEL_99:
    v56 = (_QWORD *)*((_QWORD *)v3 + 5);
    v57 = v56[1];
    if (*(_BYTE *)(v57 + 3362) || *(_BYTE *)(v57 + 3405))
    {
      v78 = *(_QWORD *)(v57 + 528);
      i = v56[1];
      if (v78)
      {
        v79 = *(_QWORD *)(v78 + 8);
        i = v56[1];
        if (v79)
        {
          v80 = *(_QWORD *)(v79 + 120);
          i = v56[1];
          if (v80)
          {
            v81 = *(_QWORD *)(v80 + 8);
            for (i = v56[1]; v81; v81 = *(_QWORD *)(v84 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v81 + 40) + 8);
              v82 = *(_QWORD *)(i + 528);
              if (!v82)
                break;
              v83 = *(_QWORD *)(v82 + 8);
              if (!v83)
                break;
              v84 = *(_QWORD *)(v83 + 120);
              if (!v84)
                break;
            }
          }
        }
      }
    }
    else
    {
      v58 = *(_QWORD *)(v57 + 528);
      i = v56[1];
      if (v58)
      {
        v60 = *(_QWORD *)(v58 + 8);
        i = v56[1];
        if (v60)
        {
          v61 = *(_QWORD *)(*(_QWORD *)(v60 + 128) + 8);
          v62 = v61 && *(_BYTE *)(v61 + 144) == 0;
          i = v56[1];
          if (v62)
          {
            v63 = *(_QWORD *)(v61 + 296);
            i = v56[1];
            if (v63)
              i = v63;
          }
        }
      }
    }
    v64 = *(_QWORD *)(i + 1992);
    if (!v64)
    {
      v12 = 0;
LABEL_116:
      if (v48 == 11)
      {
        v76 = v36;
        v77 = v38;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v50);
        v38 = v77;
        v36 = v76;
      }
      goto LABEL_117;
    }
    v65 = (_DWORD *)(v64 + 8);
    v66 = *(_DWORD *)(v64 + 8) + 1;
    *(_DWORD *)(v64 + 8) = v66;
    v67 = *(_QWORD *)(*(_QWORD *)(v64 + 16) + 8);
    v68 = *(_QWORD *)(v67 + 3096);
    if (!v68)
    {
      v12 = 0;
      goto LABEL_113;
    }
    v101 = v50;
    v104 = v36;
    v109 = v38;
    v85 = 0;
    while (1)
    {
      v86 = (uint64_t *)(v85 ? v85 + 8 : v67 + 3104);
      v85 = *v86;
      if ((*(_BYTE *)(*(_QWORD *)v85 + 54) & 0x40) != 0)
        break;
      if (v85 == v68)
      {
        v12 = 0;
        v36 = v104;
        v38 = v38;
        v50 = v50;
        goto LABEL_113;
      }
    }
    v98 = *(_QWORD *)(v57 + 1992);
    if (v98)
    {
      ++*(_DWORD *)(v98 + 8);
      if (*v65)
      {
        --*v65;
        v87 = *(_QWORD *)(*(_QWORD *)(v98 + 16) + 8);
        v88 = *(uint64_t **)(v87 + 3096);
        if (!v88)
        {
          v12 = 1;
          goto LABEL_164;
        }
        v89 = 0;
        v90 = (uint64_t *)(v87 + 3104);
        v12 = 1;
        while (1)
        {
          v91 = v89 ? v89 + 1 : v90;
          v89 = (uint64_t *)*v91;
          v92 = *v89;
          if ((*(_BYTE *)(*v89 + 54) & 0x40) != 0)
            break;
          if (v89 == v88)
            goto LABEL_164;
        }
        v93 = *(_DWORD *)(v92 + 24);
        *(_DWORD *)(v92 + 24) = v93 + 2;
        v94 = *(_WORD *)(v92 + 28);
        if ((v94 & 0xF000) == 0x9000)
        {
          if (*v56 == v92 && (*((_WORD *)v3 + 14) & 0xF000) != 0x9000)
          {
            LODWORD(v95) = (*((unsigned __int8 *)v3 + 22) >> 3) & 1;
            goto LABEL_189;
          }
        }
        else if ((v94 & 4) != 0)
        {
          v95 = *(_QWORD *)(v92 + 80);
          if (!v95)
            goto LABEL_189;
          if (((*((unsigned __int8 *)v3 + 22) ^ *(unsigned __int8 *)(v92 + 22)) & 8) == 0)
          {
            do
            {
              v3 = (WebCore::ContentChangeObserver *)*((_QWORD *)v3 + 4);
              LODWORD(v95) = v3 != 0;
            }
            while (v3 != (WebCore::ContentChangeObserver *)v92 && v3 != 0);
LABEL_189:
            v12 = v95 ^ 1;
            if (v93)
            {
              *(_DWORD *)(v92 + 24) = v93;
            }
            else if ((*(_WORD *)(v92 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v92);
            }
LABEL_164:
            v36 = v104;
            v38 = v109;
            v50 = v101;
            v64 = v98;
LABEL_113:
            v70 = *(_DWORD *)(v64 + 8);
            v69 = (_DWORD *)(v64 + 8);
            v66 = v70;
            if (!v70)
            {
              __break(0xC471u);
              JUMPOUT(0x196088808);
            }
            v65 = v69;
            goto LABEL_115;
          }
        }
        LODWORD(v95) = 0;
        goto LABEL_189;
      }
    }
    else if (v66)
    {
      v12 = 0;
      v36 = v104;
      v38 = v38;
      v50 = v50;
LABEL_115:
      *v65 = v66 - 1;
      goto LABEL_116;
    }
    __break(0xC471u);
    JUMPOUT(0x196088970);
  }
  v12 = 1;
LABEL_120:
  if (v8 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v9);
  }
  return v12;
}

uint64_t WebCore::ContentChangeObserver::isConsideredVisible(WebCore::ContentChangeObserver *this, const WebCore::Node *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  float v10;
  void *v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int *v14;
  void *v15;
  float v16;
  int v18;
  char v19;
  char v20;
  char v21;
  float v22;
  unsigned __int8 v23;
  char v24;
  char v25;

  if ((WebCore::ContentChangeObserver::isVisuallyHidden(this, a2) & 1) != 0)
    return 0;
  v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      v4 = *(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
      if (v4)
        v4 = *(_QWORD *)(v4 + 8);
    }
    v5 = v4 + 80;
  }
  else
  {
    v5 = 0;
  }
  v6 = ((*(_DWORD *)(v5 + 44) >> 13) & 6) - 2;
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
  v8 = (unsigned int *)(v7 + 12);
  if (v6 >= 4)
    v8 = (unsigned int *)(v7 + 4);
  v25 = 0;
  v23 = *((_BYTE *)v8 + 4);
  v9 = v23;
  v24 = *((_BYTE *)v8 + 5);
  if (v23 - 2 >= 9)
  {
    v11 = 0;
    if (v23 == 11)
    {
      v11 = (void *)*v8;
      v22 = *(float *)v8;
      WebCore::Length::ref((int *)&v22);
      v7 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
      v6 = ((*(_DWORD *)(v5 + 44) >> 13) & 6) - 2;
    }
  }
  else
  {
    v10 = *(float *)v8;
    v11 = (void *)*v8;
    if (v23 == 4)
    {
      if (!*((_BYTE *)v8 + 6))
        v10 = (float)(int)v11;
      if (v10 <= 1.0)
        return 0;
    }
  }
  v12 = v6 >= 4;
  v13 = (unsigned int *)(v7 + 4);
  v14 = (unsigned int *)(v7 + 12);
  if (!v12)
    v14 = v13;
  v21 = 0;
  v19 = *((_BYTE *)v14 + 4);
  v20 = *((_BYTE *)v14 + 5);
  if (v19 != 4)
  {
    if (v19 == 11)
    {
      v15 = (void *)*v14;
      v18 = *v14;
      WebCore::Length::ref(&v18);
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v15);
    }
LABEL_27:
    v3 = 1;
    goto LABEL_29;
  }
  v16 = *(float *)v14;
  if (!*((_BYTE *)v14 + 6))
    v16 = (float)(int)*v14;
  if (v16 > 1.0)
    goto LABEL_27;
  v3 = 0;
LABEL_29:
  if (v9 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v11);
  }
  return v3;
}

uint64_t WebCore::ContentChangeObserver::isConsideredActionableContent(uint64_t a1, WebCore::Element *a2, int a3)
{
  WebCore::Document *v5;
  WebCore::Quirks *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  const WebCore::RenderObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(WebCore::Document **)(a1 + 8);
  v6 = (WebCore::Quirks *)*((_QWORD *)v5 + 86);
  if (!v6)
    v6 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v5);
  if (!WebCore::Quirks::shouldTooltipPreventFromProceedingWithClick(v6, a2))
  {
    v7 = **((_QWORD **)a2 + 5);
    if (v7)
      v8 = (*(_WORD *)(v7 + 28) & 0x80) == 0;
    else
      v8 = 1;
    if (!v8 && !*(_BYTE *)(v7 + 193))
      return 0;
    if ((*((_WORD *)a2 + 14) & 0x10) == 0)
    {
LABEL_20:
      if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196088F78);
        }
        v13 = WebCore::Node::computeEditabilityWithStyle((uint64_t)a2, (WebCore::RenderStyle *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 80), 1, 1);
        v12 = (*(uint64_t (**)(WebCore::Element *, uint64_t))(*(_QWORD *)a2 + 320))(a2, v13);
        if ((v12 & 1) != 0 || !a3)
          return v12;
        v15 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
        if (v15 && (*(_BYTE *)(v15 + 45) & 2) != 0)
        {
LABEL_63:
          __break(0xC471u);
          JUMPOUT(0x196088F2CLL);
        }
        v16 = *(unsigned int *)(v15 + 64);
        if (v16 | ((unint64_t)*(unsigned __int8 *)(v15 + 68) << 32))
        {
          v12 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v15 + 68) << 32)) + 8);
          if (v12)
          {
            if ((*(_BYTE *)(v12 + 45) & 2) != 0)
            {
              while (1)
              {
                v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 112))(v12);
                if (!v17)
                {
                  if (v12 == v15)
                    return 0;
                  v18 = *(unsigned int *)(v12 + 47);
                  if (!(v18 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32))
                    || (v17 = *(_QWORD *)((v18 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32)) + 8)) == 0)
                  {
                    v19 = *(_QWORD *)(v12 + 32);
                    if (!v19)
                      return 0;
                    v20 = *(_QWORD *)(v19 + 8);
                    if (!v20 || v20 == v15)
                      return 0;
                    while (1)
                    {
                      v22 = *(unsigned int *)(v20 + 47);
                      if (v22 | ((unint64_t)*(unsigned __int8 *)(v20 + 51) << 32))
                      {
                        v17 = *(_QWORD *)((v22 | ((unint64_t)*(unsigned __int8 *)(v20 + 51) << 32)) + 8);
                        if (v17)
                          break;
                      }
                      v23 = *(_QWORD *)(v20 + 32);
                      if (!v23)
                        return 0;
                      v12 = 0;
                      v20 = *(_QWORD *)(v23 + 8);
                      if (v20)
                        v24 = v20 == v15;
                      else
                        v24 = 1;
                      if (v24)
                        return v12;
                    }
                  }
                }
                v12 = v17;
                if ((*(_BYTE *)(v17 + 45) & 2) == 0)
                  goto LABEL_48;
              }
            }
            v17 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v15 + 68) << 32)) + 8);
            do
            {
LABEL_48:
              if ((*(_BYTE *)(v17 + 45) & 1) == 0)
              {
                v25 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8);
                if (v25)
                {
                  if ((*(_WORD *)(v25 + 28) & 8) == 0)
                    goto LABEL_63;
                  if ((*(_QWORD *)(v25 + 64) & 0xFFFFFFFFFFFFLL) != 0)
                  {
                    if ((*(_BYTE *)((*(_QWORD *)(v25 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x196088F4CLL);
                    }
                    v12 = 1;
                    v26 = WebCore::Node::computeEditabilityWithStyle(v25, (WebCore::RenderStyle *)((*(_QWORD *)(v25 + 64) & 0xFFFFFFFFFFFFLL) + 80), 1, 1);
                    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 320))(v25, v26) & 1) != 0)
                      break;
                  }
                }
              }
              v17 = WebCore::RenderTraversal::next<WebCore::RenderElement,WebCore::RenderElement>(v17, (WebCore::RenderObject *)v15, v14);
              v12 = 0;
            }
            while (v17);
          }
          return v12;
        }
      }
      return 0;
    }
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
    if (v9 != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
    {
      if (v9 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
      {
        if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196088F98);
          }
          v10 = WebCore::Node::computeEditabilityWithStyle((uint64_t)a2, (WebCore::RenderStyle *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 80), 1, 1);
          if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0
            && (*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196088FB8);
          }
          if (((*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a2 + 960))(a2) & 1) == 0)
            return WebCore::Node::willRespondToMouseClickEventsWithEditability((uint64_t)a2, v10);
        }
        return 0;
      }
      goto LABEL_20;
    }
  }
  return 1;
}

WebCore::ContentChangeObserver *WebCore::ContentChangeObserver::ContentChangeObserver(WebCore::ContentChangeObserver *this, WebCore::Document *a2)
{
  _QWORD *v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a2;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E3403718;
  v3[1] = this;
  *((_QWORD *)this + 2) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 2) = off_1E31F7378;
  *((_QWORD *)this + 7) = v5;
  *((_QWORD *)this + 8) = v3;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  return this;
}

uint64_t WebCore::ContentChangeObserver::didCancelPotentialTap(uint64_t this, WebCore::LocalFrame *a2)
{
  _QWORD *v2;
  WebCore::Document *v3;
  WebCore::ContentChangeObserver *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  while (1)
  {
    do
    {
LABEL_1:
      v2 = (_QWORD *)this;
      if (!*(_BYTE *)(this + 144))
      {
        v3 = *(WebCore::Document **)(this + 296);
        if (v3)
        {
          v4 = (WebCore::ContentChangeObserver *)WebCore::Document::contentChangeObserver(v3);
          WebCore::ContentChangeObserver::reset(v4, v5);
        }
      }
      this = v2[11];
    }
    while (this);
    v6 = *(_QWORD *)(v2[6] + 8);
    if (!v6)
      return this;
    this = v2[9];
    if (!this)
    {
      while (1)
      {
        v7 = *(_QWORD *)(v6 + 56);
        if (!v7)
          return this;
        v6 = *(_QWORD *)(v7 + 8);
        if (!v6)
          return this;
        this = *(_QWORD *)(v6 + 72);
        if (this)
          goto LABEL_1;
      }
    }
  }
}

uint64_t WebCore::ContentChangeObserver::didRecognizeLongPress(uint64_t this, WebCore::LocalFrame *a2)
{
  _QWORD *v2;
  WebCore::Document *v3;
  WebCore::ContentChangeObserver *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  while (1)
  {
    do
    {
LABEL_1:
      v2 = (_QWORD *)this;
      if (!*(_BYTE *)(this + 144))
      {
        v3 = *(WebCore::Document **)(this + 296);
        if (v3)
        {
          v4 = (WebCore::ContentChangeObserver *)WebCore::Document::contentChangeObserver(v3);
          WebCore::ContentChangeObserver::reset(v4, v5);
        }
      }
      this = v2[11];
    }
    while (this);
    v6 = *(_QWORD *)(v2[6] + 8);
    if (!v6)
      return this;
    this = v2[9];
    if (!this)
    {
      while (1)
      {
        v7 = *(_QWORD *)(v6 + 56);
        if (!v7)
          return this;
        v6 = *(_QWORD *)(v7 + 8);
        if (!v6)
          return this;
        this = *(_QWORD *)(v6 + 72);
        if (this)
          goto LABEL_1;
      }
    }
  }
}

uint64_t WebCore::ContentChangeObserver::didPreventDefaultForEvent(uint64_t this, WebCore::LocalFrame *a2)
{
  _QWORD *v2;
  WebCore::Document *v3;
  WebCore::ContentChangeObserver *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  while (1)
  {
    do
    {
LABEL_1:
      v2 = (_QWORD *)this;
      if (!*(_BYTE *)(this + 144))
      {
        v3 = *(WebCore::Document **)(this + 296);
        if (v3)
        {
          v4 = (WebCore::ContentChangeObserver *)WebCore::Document::contentChangeObserver(v3);
          WebCore::ContentChangeObserver::reset(v4, v5);
        }
      }
      this = v2[11];
    }
    while (this);
    v6 = *(_QWORD *)(v2[6] + 8);
    if (!v6)
      return this;
    this = v2[9];
    if (!this)
    {
      while (1)
      {
        v7 = *(_QWORD *)(v6 + 56);
        if (!v7)
          return this;
        v6 = *(_QWORD *)(v7 + 8);
        if (!v6)
          return this;
        this = *(_QWORD *)(v6 + 72);
        if (this)
          goto LABEL_1;
      }
    }
  }
}

uint64_t WebCore::ContentChangeObserver::startContentObservationForDuration(uint64_t result, double a2)
{
  uint64_t v3;
  double v4;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 680) + 704) & 0x200000000000) != 0)
  {
    *(_DWORD *)(result + 120) = 1;
    v3 = result + 16;
    *(_QWORD *)(result + 40) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    return WebCore::TimerBase::setNextFireTime(v3, a2 + v4);
  }
  return result;
}

uint64_t WebCore::ContentChangeObserver::adjustObservedState(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t k;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = this;
  switch((int)a2)
  {
    case 0:
      *(_DWORD *)(this + 120) = 0;
      v3 = *(_QWORD *)(this + 72);
      if (v3)
      {
        *(_QWORD *)(this + 72) = 0;
        v7 = *(unsigned int *)(v3 - 4);
        if ((_DWORD)v7)
        {
          for (i = 0; i != v7; ++i)
          {
            v9 = *(unsigned int **)(v3 + 8 * i);
            if (v9 != (unsigned int *)-1)
            {
              *(_QWORD *)(v3 + 8 * i) = 0;
              if (v9)
              {
                do
                {
                  v10 = __ldaxr(v9);
                  v11 = v10 - 1;
                }
                while (__stlxr(v11, v9));
                if (!v11)
                {
                  atomic_store(1u, v9);
                  v28 = i;
                  v31 = v3;
                  v25 = v7;
                  WTF::fastFree((WTF *)v9, a2);
                  v7 = v25;
                  i = v28;
                  v3 = v31;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v3 - 16), a2);
        v3 = *(_QWORD *)(v2 + 72);
        *(_DWORD *)(v2 + 80) = 0;
        if (v3)
        {
          LODWORD(v3) = *(_DWORD *)(v3 - 12);
          if (v3 > 0x7FFFFFFE)
            LODWORD(v3) = 0x7FFFFFFF;
        }
      }
      else
      {
        *(_DWORD *)(this + 80) = 0;
      }
      *(_DWORD *)(v2 + 84) = 2 * v3;
      this = (uint64_t)WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t *)(v2 + 88), a2);
      *(_WORD *)(v2 + 158) = 256;
      *(_BYTE *)(v2 + 153) = 0;
      *(_BYTE *)(v2 + 155) = 1;
      break;
    case 1:
      *(_BYTE *)(this + 155) = 0;
      *(_WORD *)(this + 158) = 1;
      break;
    case 3:
      if (!*(_BYTE *)(this + 158))
      {
        *(_DWORD *)(this + 120) = 0;
        v4 = *(_QWORD *)(this + 72);
        if (v4)
        {
          *(_QWORD *)(this + 72) = 0;
          v15 = *(unsigned int *)(v4 - 4);
          if ((_DWORD)v15)
          {
            for (j = 0; j != v15; ++j)
            {
              v17 = *(unsigned int **)(v4 + 8 * j);
              if (v17 != (unsigned int *)-1)
              {
                *(_QWORD *)(v4 + 8 * j) = 0;
                if (v17)
                {
                  do
                  {
                    v18 = __ldaxr(v17);
                    v19 = v18 - 1;
                  }
                  while (__stlxr(v19, v17));
                  if (!v19)
                  {
                    atomic_store(1u, v17);
                    v29 = j;
                    v32 = v4;
                    v26 = v15;
                    WTF::fastFree((WTF *)v17, a2);
                    v15 = v26;
                    j = v29;
                    v4 = v32;
                  }
                }
              }
            }
          }
          WTF::fastFree((WTF *)(v4 - 16), a2);
          v4 = *(_QWORD *)(v2 + 72);
          *(_DWORD *)(v2 + 80) = 0;
          if (v4)
          {
            LODWORD(v4) = *(_DWORD *)(v4 - 12);
            if (v4 > 0x7FFFFFFE)
              LODWORD(v4) = 0x7FFFFFFF;
          }
        }
        else
        {
          *(_DWORD *)(this + 80) = 0;
        }
        *(_DWORD *)(v2 + 84) = 2 * v4;
        this = (uint64_t)WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t *)(v2 + 88), a2);
        *(_BYTE *)(v2 + 153) = 0;
      }
      *(_BYTE *)(v2 + 158) = 0;
      v5 = *(_DWORD *)(v2 + 120) != 2;
      *(_BYTE *)(v2 + 155) = v5;
      *(_BYTE *)(v2 + 159) = v5;
      break;
    case 4:
      *(_BYTE *)(this + 155) = 0;
      *(_BYTE *)(this + 159) = 0;
      break;
    case 5:
    case 11:
    case 15:
      *(_DWORD *)(this + 120) = 1;
      break;
    case 16:
    case 17:
      goto LABEL_14;
    default:
      if ((a2 & 0xFFFFFFF7) == 6)
      {
LABEL_14:
        if (!*(_BYTE *)(this + 152)
          && !*(_BYTE *)(this + 158)
          && !*(_BYTE *)(this + 157)
          && ((*(_QWORD *)(this + 48) & 0xFFFFFFFFFFFFLL) == 0
           || *(double *)((*(_QWORD *)(this + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
        {
          this = WebCore::ContentChangeObserver::hasPendingActivity((WebCore::ContentChangeObserver *)this);
          if ((this & 1) == 0)
          {
            if (*(_DWORD *)(v2 + 120) == 1)
              *(_DWORD *)(v2 + 120) = 0;
            v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 528)
                                                                           + 8)
                                                               + 24)
                                                   + 8)
                                       + 48)
                           + 16);
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 648))(v6);
LABEL_23:
            this = WebCore::ContentChangeObserver::reset((WebCore::ContentChangeObserver *)v2, a2);
          }
        }
      }
      else
      {
        switch((int)a2)
        {
          case 2:
            goto LABEL_23;
          case 8:
            v12 = *(_QWORD *)(this + 8);
            if (*(_BYTE *)(v12 + 3362))
              goto LABEL_14;
            if (!*(_BYTE *)(v12 + 3390) && (*(_BYTE *)(v12 + 70) & 8) == 0 && !*(_QWORD *)(v12 + 1560))
            {
              v13 = *(_QWORD *)(v12 + 1328);
              if (!*(_BYTE *)(v13 + 233) && !*(_BYTE *)(v13 + 234))
                goto LABEL_14;
            }
            if (*(_BYTE *)(v12 + 3391))
              goto LABEL_14;
            goto LABEL_45;
          case 9:
            *(_BYTE *)(this + 153) = 0;
            return this;
          case 10:
            goto LABEL_14;
          case 12:
            if (*(_BYTE *)(*(_QWORD *)(this + 8) + 3391))
              goto LABEL_47;
LABEL_45:
            *(_BYTE *)(this + 153) = 1;
            break;
          case 13:
            if (!*(_BYTE *)(*(_QWORD *)(this + 8) + 3391))
              goto LABEL_14;
LABEL_47:
            *(_BYTE *)(this + 154) = 1;
            break;
          case 18:
            *(_DWORD *)(this + 120) = 2;
            *(_BYTE *)(this + 153) = 0;
            *(_BYTE *)(this + 155) = 0;
            *(_BYTE *)(this + 159) = 0;
            v14 = *(_QWORD *)(this + 72);
            if (v14)
            {
              *(_QWORD *)(this + 72) = 0;
              v20 = *(unsigned int *)(v14 - 4);
              if ((_DWORD)v20)
              {
                for (k = 0; k != v20; ++k)
                {
                  v22 = *(unsigned int **)(v14 + 8 * k);
                  if (v22 != (unsigned int *)-1)
                  {
                    *(_QWORD *)(v14 + 8 * k) = 0;
                    if (v22)
                    {
                      do
                      {
                        v23 = __ldaxr(v22);
                        v24 = v23 - 1;
                      }
                      while (__stlxr(v24, v22));
                      if (!v24)
                      {
                        atomic_store(1u, v22);
                        v30 = k;
                        v33 = v14;
                        v27 = v20;
                        WTF::fastFree((WTF *)v22, a2);
                        v20 = v27;
                        k = v30;
                        v14 = v33;
                      }
                    }
                  }
                }
              }
              WTF::fastFree((WTF *)(v14 - 16), a2);
              v14 = *(_QWORD *)(v2 + 72);
              *(_DWORD *)(v2 + 80) = 0;
              if (v14)
              {
                LODWORD(v14) = *(_DWORD *)(v14 - 12);
                if (v14 > 0x7FFFFFFE)
                  LODWORD(v14) = 0x7FFFFFFF;
              }
            }
            else
            {
              *(_DWORD *)(this + 80) = 0;
            }
            *(_DWORD *)(v2 + 84) = 2 * v14;
            this = (uint64_t)WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t *)(v2 + 88), a2);
            break;
          default:
            return this;
        }
      }
      break;
  }
  return this;
}

uint64_t WTF::WeakHashSet<WebCore::Element const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  void *v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v35;
  uint64_t v37;
  WTF *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_2;
  v20 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_19;
  v30 = *(unsigned int *)(v20 - 4);
  if (!(_DWORD)v30)
    goto LABEL_43;
  v31 = 0;
  v32 = v30 - 1;
  do
  {
    v33 = (uint64_t *)(v20 + 8 * v32);
    if ((unint64_t)(*v33 + 1) >= 2 && !*(_QWORD *)(*v33 + 8))
    {
      v43 = v32;
      v44 = v20;
      v42 = v31;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v33, a2);
      v32 = v43;
      v20 = v44;
      v31 = v42 + 1;
    }
  }
  while ((unint64_t)v32--);
  v20 = *(_QWORD *)a1;
  if (v31)
  {
    v39 = v31;
    *(_DWORD *)(v20 - 16) += v31;
    v40 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v41 = *(_DWORD *)(v40 - 12);
    else
      v41 = 0;
    *(_DWORD *)(v40 - 12) = v41 - v39;
    v20 = *(_QWORD *)a1;
  }
  if (v20)
  {
    v35 = *(_DWORD *)(v20 - 4);
    if (v35 >= 9 && 6 * *(_DWORD *)(v20 - 12) < v35)
    {
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)a1);
      v20 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v20)
        goto LABEL_20;
LABEL_44:
      LODWORD(v20) = *(_DWORD *)(v20 - 12);
      v21 = 0x7FFFFFFF;
      if (v20 >= 0x7FFFFFFF)
        goto LABEL_21;
      goto LABEL_20;
    }
LABEL_43:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_44;
  }
LABEL_19:
  LODWORD(v20) = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_20:
  v21 = v20;
LABEL_21:
  *(_DWORD *)(a1 + 12) = 2 * v21;
LABEL_2:
  if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v22 = 1;
    *(_QWORD *)(v22 + 16) = 0;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)(v22 + 8) = a2;
    *(_BYTE *)(v22 + 32) = 0;
    v24 = a2[2];
    a2[2] = v24 & 0xFFFF000000000000 | v22;
    v25 = v24 & 0xFFFFFFFFFFFFLL;
    if ((v24 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v26 = __ldaxr((unsigned int *)v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unsigned int *)v25));
      if (!v27)
      {
        atomic_store(1u, (unsigned int *)v25);
        v28 = *(unsigned int *)(v25 + 28);
        if ((_DWORD)v28)
        {
          v46 = v25;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v25 + 16), (WTF::StringImpl *)(*(_QWORD *)(v25 + 16) + 32 * v28));
          v25 = v46;
        }
        v29 = *(WTF **)(v25 + 16);
        if (v29)
        {
          *(_QWORD *)(v25 + 16) = 0;
          *(_DWORD *)(v25 + 24) = 0;
          v45 = v25;
          WTF::fastFree(v29, v23);
          v25 = v45;
        }
        WTF::fastFree((WTF *)v25, v23);
      }
    }
  }
  v8 = a2[2] & 0xFFFFFFFFFFFFLL;
  do
    v9 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v9 + 1, (unsigned int *)v8));
  do
    v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  v47 = (WTF *)v8;
  result = (uint64_t)WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)a1, (uint64_t *)&v47, a3);
  v13 = v47;
  v47 = 0;
  if (v13)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v13);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v13));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *((unsigned int *)v13 + 7);
      if ((_DWORD)v18)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v13 + 2), (WTF::StringImpl *)(*((_QWORD *)v13 + 2) + 32 * v18));
      v19 = (WTF *)*((_QWORD *)v13 + 2);
      if (v19)
      {
        *((_QWORD *)v13 + 2) = 0;
        *((_DWORD *)v13 + 6) = 0;
        WTF::fastFree(v19, v12);
      }
      result = WTF::fastFree(v13, v12);
    }
  }
  if (v8)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v8);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v8));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v8);
      v37 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v37)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v37));
      v38 = *(WTF **)(v8 + 16);
      if (v38)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        WTF::fastFree(v38, v12);
      }
      return WTF::fastFree((WTF *)v8, v12);
    }
  }
  return result;
}

uint64_t WebCore::ContentChangeObserver::didRemoveDOMTimer(uint64_t this, const WebCore::DOMTimer *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  ++*(_DWORD *)(this + 80);
  v2 = *((_QWORD *)a2 + 4);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = this;
      v5 = *(_QWORD *)(this + 72);
      this += 72;
      v4 = v5;
      if (v5)
      {
        v6 = *(_DWORD *)(v4 - 8);
        v7 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
        v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
        v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
        v10 = v6 & ((v9 >> 31) ^ v9);
        for (i = 1; ; ++i)
        {
          v12 = *(_QWORD *)(v4 + 8 * v10);
          if (v12 != -1)
          {
            if (!v12)
              return this;
            if (v12 == v2)
              break;
          }
          v10 = (v10 + i) & v6;
        }
        this = WTF::WeakHashSet<WebCore::DOMTimer const,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::DOMTimer>(this, a2);
        if (!*(_BYTE *)(v3 + 152)
          && !*(_BYTE *)(v3 + 158)
          && !*(_BYTE *)(v3 + 157)
          && ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) == 0
           || *(double *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
        {
          this = WebCore::ContentChangeObserver::hasPendingActivity((WebCore::ContentChangeObserver *)v3);
          if ((this & 1) == 0)
          {
            if (*(_DWORD *)(v3 + 120) == 1)
              *(_DWORD *)(v3 + 120) = 0;
            v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 528)
                                                                            + 8)
                                                                + 24)
                                                    + 8)
                                        + 48)
                            + 16);
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 648))(v13);
            return WebCore::ContentChangeObserver::reset((WebCore::ContentChangeObserver *)v3, v14);
          }
        }
      }
    }
  }
  return this;
}

unsigned int *WTF::WeakHashSet<WebCore::DOMTimer const,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::DOMTimer>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int *result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF *v37;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v24 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v24)
      goto LABEL_43;
    v25 = 0;
    do
    {
      while (1)
      {
        v26 = --v24;
        v27 = *(_QWORD *)(v8 + 8 * v24);
        if ((unint64_t)(v27 + 1) >= 2 && !*(_QWORD *)(v27 + 8))
          break;
        if (!(_DWORD)v24)
          goto LABEL_33;
      }
      *(_QWORD *)(v8 + 8 * v24) = 0;
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v35 = v25;
        v34 = v24;
        v36 = v24;
        WTF::fastFree((WTF *)v27, a2);
        v26 = v36;
        v24 = v34;
        v25 = v35;
      }
      *(_QWORD *)(v8 + 8 * v26) = -1;
      ++v25;
    }
    while (v26);
LABEL_33:
    v8 = *(_QWORD *)a1;
    if (v25)
    {
      *(_DWORD *)(v8 - 16) += v25;
      v30 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      *(_DWORD *)(v30 - 12) = v31 - v25;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v32 = *(_DWORD *)(v8 - 4);
    if (v32 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v32)
    {
LABEL_43:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = a2[4];
  if (!v11)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a2;
    v13 = (unsigned int *)a2[4];
    a2[4] = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      v11 = a2[4];
    }
  }
  do
    v16 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v16 + 1, (unsigned int *)v11));
  do
    v17 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v17 + 1, (unsigned int *)v11));
  v37 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v37, a3);
  result = (unsigned int *)v37;
  v37 = 0;
  if (!result)
    goto LABEL_17;
  do
  {
    v20 = __ldaxr(result);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, result));
  if (!v21)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
    if (!v11)
      return result;
  }
  else
  {
LABEL_17:
    if (!v11)
      return result;
  }
  do
  {
    v22 = __ldaxr((unsigned int *)v11);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, (unsigned int *)v11));
  if (!v23)
  {
    atomic_store(1u, (unsigned int *)v11);
    return (unsigned int *)WTF::fastFree((WTF *)v11, v18);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::DOMTimer const,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::DOMTimer>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  WTF *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      LODWORD(v6) = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v7 = v6;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v7;
      goto LABEL_6;
    }
    v10 = *(unsigned int *)(v6 - 4);
    if (!(_DWORD)v10)
      goto LABEL_31;
    v11 = 0;
    do
    {
      while (1)
      {
        v12 = --v10;
        v13 = *(_QWORD *)(v6 + 8 * v10);
        if ((unint64_t)(v13 + 1) >= 2 && !*(_QWORD *)(v13 + 8))
          break;
        if (!(_DWORD)v10)
          goto LABEL_21;
      }
      *(_QWORD *)(v6 + 8 * v10) = 0;
      do
      {
        v14 = __ldaxr((unsigned int *)v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unsigned int *)v13));
      if (!v15)
      {
        atomic_store(1u, (unsigned int *)v13);
        v21 = v10;
        v22 = v6;
        v20 = v11;
        v23 = v10;
        WTF::fastFree((WTF *)v13, a2);
        v6 = v22;
        v12 = v23;
        v10 = v21;
        v11 = v20;
      }
      *(_QWORD *)(v6 + 8 * v12) = -1;
      ++v11;
    }
    while (v12);
LABEL_21:
    v6 = *(_QWORD *)a1;
    if (v11)
    {
      *(_DWORD *)(v6 - 16) += v11;
      v16 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v17 = *(_DWORD *)(v16 - 12);
      else
        v17 = 0;
      *(_DWORD *)(v16 - 12) = v17 - v11;
      v6 = *(_QWORD *)a1;
    }
    if (!v6)
      goto LABEL_3;
    v18 = *(_DWORD *)(v6 - 4);
    if (v18 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v18)
    {
LABEL_31:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v6 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v6)
        goto LABEL_4;
    }
    LODWORD(v6) = *(_DWORD *)(v6 - 12);
    v7 = 0x7FFFFFFF;
    if (v6 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v8 = (WTF *)a2[4];
  if (v8 && *((_QWORD *)v8 + 1))
    return WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)a1, v8);
  else
    return 0;
}

uint64_t *WebCore::ContentChangeObserver::touchEventDidStart(uint64_t *result, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 13)
  {
    v2 = result;
    if ((*(_QWORD *)(*(_QWORD *)(result[1] + 680) + 704) & 0x200000000000) != 0)
    {
      *((_BYTE *)result + 152) = 1;
      *((_DWORD *)result + 30) = 0;
      v3 = result[9];
      if (v3)
      {
        result[9] = 0;
        v4 = *(unsigned int *)(v3 - 4);
        if ((_DWORD)v4)
        {
          for (i = 0; i != v4; ++i)
          {
            v6 = *(unsigned int **)(v3 + 8 * i);
            if (v6 != (unsigned int *)-1)
            {
              *(_QWORD *)(v3 + 8 * i) = 0;
              if (v6)
              {
                do
                {
                  v7 = __ldaxr(v6);
                  v8 = v7 - 1;
                }
                while (__stlxr(v8, v6));
                if (!v8)
                {
                  atomic_store(1u, v6);
                  v10 = i;
                  v11 = v3;
                  v9 = v4;
                  WTF::fastFree((WTF *)v6, a2);
                  v4 = v9;
                  i = v10;
                  v3 = v11;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v3 - 16), a2);
        v3 = v2[9];
        *((_DWORD *)v2 + 20) = 0;
        if (v3)
        {
          LODWORD(v3) = *(_DWORD *)(v3 - 12);
          if (v3 > 0x7FFFFFFE)
            LODWORD(v3) = 0x7FFFFFFF;
        }
      }
      else
      {
        *((_DWORD *)result + 20) = 0;
      }
      *((_DWORD *)v2 + 21) = 2 * v3;
      result = WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(v2 + 11, a2);
      *((_WORD *)v2 + 79) = 256;
      *((_BYTE *)v2 + 153) = 0;
      *((_BYTE *)v2 + 155) = 1;
    }
  }
  return result;
}

uint64_t **WebCore::ContentChangeObserver::TouchEventScope::TouchEventScope(uint64_t **a1, WebCore::Document *this, void *a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)WebCore::Document::contentChangeObserver(this);
  *a1 = v5;
  WebCore::ContentChangeObserver::touchEventDidStart(v5, a3);
  return a1;
}

{
  uint64_t *v5;

  v5 = (uint64_t *)WebCore::Document::contentChangeObserver(this);
  *a1 = v5;
  WebCore::ContentChangeObserver::touchEventDidStart(v5, a3);
  return a1;
}

void WebCore::ContentChangeObserver::TouchEventScope::~TouchEventScope(WebCore::ContentChangeObserver::TouchEventScope *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 152))
  {
    *(_BYTE *)(v1 + 152) = 0;
    *(_BYTE *)(v1 + 155) = 0;
    *(_WORD *)(v1 + 158) = 1;
  }
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 152))
  {
    *(_BYTE *)(v1 + 152) = 0;
    *(_BYTE *)(v1 + 155) = 0;
    *(_WORD *)(v1 + 158) = 1;
  }
}

WebCore::ContentChangeObserver::MouseMovedScope *WebCore::ContentChangeObserver::MouseMovedScope::MouseMovedScope(WebCore::ContentChangeObserver::MouseMovedScope *this, WebCore::Document *a2)
{
  uint64_t v3;

  v3 = WebCore::Document::contentChangeObserver(a2);
  *(_QWORD *)this = v3;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 680) + 704) & 0x200000000000) != 0)
  {
    *(_BYTE *)(v3 + 157) = 1;
    WebCore::ContentChangeObserver::adjustObservedState(v3, (void *)3);
  }
  return this;
}

{
  uint64_t v3;

  v3 = WebCore::Document::contentChangeObserver(a2);
  *(_QWORD *)this = v3;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 680) + 704) & 0x200000000000) != 0)
  {
    *(_BYTE *)(v3 + 157) = 1;
    WebCore::ContentChangeObserver::adjustObservedState(v3, (void *)3);
  }
  return this;
}

void WebCore::ContentChangeObserver::MouseMovedScope::~MouseMovedScope(WebCore::ContentChangeObserver::MouseMovedScope *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 157))
  {
    *(_BYTE *)(v2 + 155) = 0;
    *(_BYTE *)(v2 + 159) = 0;
    *(_BYTE *)(v2 + 157) = 0;
  }
  v3 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v2 + 128) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 157))
  {
    *(_BYTE *)(v2 + 155) = 0;
    *(_BYTE *)(v2 + 159) = 0;
    *(_BYTE *)(v2 + 157) = 0;
  }
  v3 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v2 + 128) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

uint64_t WebCore::DOMTimerHoldingTank::removeAll(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = this;
  if ((*(_QWORD *)(this + 48) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(_QWORD *)(this + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 16));
  }
  v3 = *(_QWORD *)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = *(unsigned int **)(v3 + 8 * i);
        if (v6 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v6)
          {
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
            {
              atomic_store(1u, v6);
              v10 = i;
              v11 = v3;
              v9 = v4;
              WTF::fastFree((WTF *)v6, a2);
              v4 = v9;
              i = v10;
              v3 = v11;
            }
          }
        }
      }
    }
    this = WTF::fastFree((WTF *)(v3 - 16), a2);
    v3 = *(_QWORD *)v2;
    *(_DWORD *)(v2 + 8) = 0;
    if (v3)
    {
      LODWORD(v3) = *(_DWORD *)(v3 - 12);
      if (v3 > 0x7FFFFFFE)
        LODWORD(v3) = 0x7FFFFFFF;
    }
  }
  else
  {
    *(_DWORD *)(v2 + 8) = 0;
  }
  *(_DWORD *)(v2 + 12) = 2 * v3;
  return this;
}

void WebCore::ContentSecurityPolicyMediaListDirective::~ContentSecurityPolicyMediaListDirective(WebCore::ContentSecurityPolicyMediaListDirective *this, WTF::StringImpl *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;

  *(_QWORD *)this = off_1E34036A0;
  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    v6 = *((unsigned int *)this + 10);
    if ((_DWORD)v6)
    {
      v7 = (WTF::StringImpl **)*((_QWORD *)this + 4);
      do
      {
        v8 = *v7;
        *v7 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        ++v7;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = &unk_1E3403678;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;

  *(_QWORD *)this = off_1E34036A0;
  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    v6 = *((unsigned int *)this + 10);
    if ((_DWORD)v6)
    {
      v7 = (WTF::StringImpl **)*((_QWORD *)this + 4);
      do
      {
        v8 = *v7;
        *v7 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        ++v7;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = &unk_1E3403678;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ContentSecurityPolicySourceListDirective::nameForReporting(WebCore::ContentSecurityPolicySourceListDirective *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v4 = *((_QWORD *)this + 4);
  result = (uint64_t)this + 32;
  v3 = v4;
  if (!v4 || !*(_DWORD *)(v3 + 4))
    return (uint64_t)this + 8;
  return result;
}

void WebCore::ContentSecurityPolicyTrustedTypesDirective::~ContentSecurityPolicyTrustedTypesDirective(WebCore::ContentSecurityPolicyTrustedTypesDirective *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = off_1E34036F0;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 5);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  *(_QWORD *)this = &unk_1E3403678;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = off_1E34036F0;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 5);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  *(_QWORD *)this = &unk_1E3403678;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WebCore::ResourceCryptographicDigest,WebCore::ResourceCryptographicDigest,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>>::add(uint64_t result, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  uint64_t *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t *v44;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::ResourceCryptographicDigest,WebCore::ResourceCryptographicDigest,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = ((v9 - 1640531527) ^ (((_DWORD)v9 - 1640531527) << 16))
      + ((((_DWORD)v9 - 1640531527) ^ (((_DWORD)v9 - 1640531527) << 16)) >> 11);
  v11 = (const void *)*((_QWORD *)a3 + 1);
  v12 = *((unsigned int *)a3 + 5);
  v43 = a3;
  v44 = a2;
  if ((_DWORD)v12)
  {
    v13 = *((unsigned int *)a3 + 5);
    v14 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
    do
    {
      v15 = *v14++;
      v10 = ((v10 + v15) ^ ((v10 + v15) << 16)) + (((v10 + v15) ^ ((v10 + v15) << 16)) >> 11);
      --v13;
    }
    while (v13);
  }
  v16 = (v10 ^ (8 * v10)) + ((v10 ^ (8 * v10)) >> 5);
  v17 = (v16 ^ (4 * v16)) + ((v16 ^ (4 * v16)) >> 15);
  v18 = v17 ^ (v17 << 10);
  if (!v18)
    v18 = 0x800000;
  v19 = v18 & v8;
  v20 = (unsigned __int8 *)(v6 + 24 * v19);
  v21 = *v20;
  v22 = *((_DWORD *)v20 + 5);
  if (v21 == 255 && v22 == 0)
  {
LABEL_26:
    result = *((_QWORD *)v20 + 1);
    *v20 = v9;
    v29 = v43;
    v28 = v44;
    if (result)
    {
      *((_QWORD *)v20 + 1) = 0;
      *((_DWORD *)v20 + 4) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
    v24 = v20;
  }
  else
  {
    v41 = v7;
    v42 = v5;
    v24 = 0;
    v25 = 1;
    do
    {
      if (v21 == (_DWORD)v9 && v22 == (_DWORD)v12)
      {
        v26 = v9;
        result = memcmp(*(const void **)(v6 + 24 * v19 + 8), v11, v12);
        v9 = v26;
        if (!(_DWORD)result)
        {
          if ((v41 & 1) != 0)
            v38 = 0;
          else
            v38 = *(_DWORD *)(v6 - 4);
          v5 = v42;
          v40 = 0;
          v39 = v6 + 24 * v38;
          goto LABEL_48;
        }
      }
      if (v21 == 254)
        v24 = v20;
      v19 = ((_DWORD)v19 + v25) & v8;
      v20 = (unsigned __int8 *)(v6 + 24 * v19);
      v21 = *v20;
      v22 = *((_DWORD *)v20 + 5);
      ++v25;
    }
    while (v21 != 255 || v22 != 0);
    v5 = v42;
    if (!v24)
      goto LABEL_26;
    *v24 = -1;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = 0;
    v29 = v43;
    v28 = v44;
    --*(_DWORD *)(*v44 - 16);
    *v24 = *v43;
  }
  v30 = *((_QWORD *)v29 + 1);
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v24 + 1) = v30;
  LODWORD(v30) = *((_DWORD *)v29 + 4);
  *((_DWORD *)v29 + 4) = 0;
  *((_DWORD *)v24 + 4) = v30;
  LODWORD(v30) = *((_DWORD *)v29 + 5);
  *((_DWORD *)v29 + 5) = 0;
  *((_DWORD *)v24 + 5) = v30;
  v31 = *v28;
  if (*v28)
    v32 = *(_DWORD *)(v31 - 12) + 1;
  else
    v32 = 1;
  *(_DWORD *)(v31 - 12) = v32;
  v33 = *v28;
  if (*v28)
    v34 = *(_DWORD *)(v33 - 12);
  else
    v34 = 0;
  v35 = (*(_DWORD *)(v33 - 16) + v34);
  v36 = *(unsigned int *)(v33 - 4);
  if (v36 > 0x400)
  {
    if (v36 <= 2 * v35)
      goto LABEL_38;
  }
  else if (3 * v36 <= 4 * v35)
  {
    if (!(_DWORD)v36)
    {
      v37 = 8;
LABEL_43:
      result = WTF::HashTable<WebCore::ResourceCryptographicDigest,WebCore::ResourceCryptographicDigest,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>>::rehash(v28, v37, v24);
      v24 = (unsigned __int8 *)result;
      v33 = *v28;
      if (*v28)
        LODWORD(v36) = *(_DWORD *)(v33 - 4);
      else
        LODWORD(v36) = 0;
      goto LABEL_47;
    }
LABEL_38:
    v37 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
    goto LABEL_43;
  }
LABEL_47:
  v39 = v33 + 24 * v36;
  v40 = 1;
  v20 = v24;
LABEL_48:
  *(_QWORD *)v5 = v20;
  *(_QWORD *)(v5 + 8) = v39;
  *(_BYTE *)(v5 + 16) = v40;
  return result;
}

uint64_t WTF::HashTable<WebCore::ResourceCryptographicDigest,WebCore::ResourceCryptographicDigest,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>>::rehash(uint64_t *a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  unsigned int v18;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WTF *v23;
  _QWORD *v24;
  WTF *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  WTF **v28;
  unsigned __int8 *v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned __int8 *v37;
  uint64_t v39;
  WTF *v40;
  WTF **v41;
  WTF *v42;
  WTF *v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  int v47;
  WTF *v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;

  v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 24);
    do
    {
      *((_BYTE *)v10 - 8) = -1;
      *v10 = 0;
      v10[1] = 0;
      v10 += 3;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if ((_DWORD)v5)
  {
    v11 = 0;
    v12 = 0;
    v5 = v5;
    v50 = v5;
    v51 = v4;
    do
    {
      v13 = (_BYTE *)(v4 + 24 * v11);
      v14 = *v13;
      if (v14 != 254)
      {
        v15 = v4 + 24 * v11;
        v18 = *(_DWORD *)(v15 + 20);
        v17 = (int *)(v15 + 20);
        v16 = v18;
        if (v14 == 255 && (_DWORD)v16 == 0)
        {
          v22 = v4 + 24 * v11;
          v25 = *(WTF **)(v22 + 8);
          v24 = (_QWORD *)(v22 + 8);
          v23 = v25;
          if (v25)
          {
            *v24 = 0;
            *(_DWORD *)(v4 + 24 * v11 + 16) = 0;
            WTF::fastFree(v23, v8);
          }
        }
        else
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v26 = v4 + 24 * v11;
          v29 = *(unsigned __int8 **)(v26 + 8);
          v28 = (WTF **)(v26 + 8);
          v27 = v29;
          v30 = ((v14 - 1640531527) ^ ((v14 - 1640531527) << 16))
              + (((v14 - 1640531527) ^ ((v14 - 1640531527) << 16)) >> 11);
          if ((_DWORD)v16)
          {
            do
            {
              v31 = *v27++;
              v30 = ((v30 + v31) ^ ((v30 + v31) << 16)) + (((v30 + v31) ^ ((v30 + v31) << 16)) >> 11);
              --v16;
            }
            while (v16);
          }
          v32 = 0;
          v33 = (v30 ^ (8 * v30)) + ((v30 ^ (8 * v30)) >> 5);
          v34 = (v33 ^ (4 * v33)) + ((v33 ^ (4 * v33)) >> 15);
          v35 = v34 ^ (v34 << 10);
          if (!v35)
            v35 = 0x800000;
          do
          {
            v36 = v35 & v21;
            v37 = (unsigned __int8 *)(v20 + 24 * (v35 & v21));
            v35 = ++v32 + (v35 & v21);
          }
          while (*v37 != 255 || *((_DWORD *)v37 + 5) != 0);
          v39 = v20 + 24 * v36;
          v42 = *(WTF **)(v39 + 8);
          v41 = (WTF **)(v39 + 8);
          v40 = v42;
          if (v42)
          {
            *v41 = 0;
            *(_DWORD *)(v20 + 24 * v36 + 16) = 0;
            WTF::fastFree(v40, v8);
            LOBYTE(v14) = *v13;
          }
          *v37 = v14;
          *v41 = 0;
          v41[1] = 0;
          v43 = *v28;
          *v28 = 0;
          *v41 = v43;
          v4 = v51;
          v44 = v51 + 24 * v11;
          v46 = *(_DWORD *)(v44 + 16);
          v45 = (_DWORD *)(v44 + 16);
          *v45 = 0;
          *(_DWORD *)(v20 + 24 * v36 + 16) = v46;
          v47 = *v17;
          *v17 = 0;
          *((_DWORD *)v37 + 5) = v47;
          v48 = *v28;
          if (*v28)
          {
            *v28 = 0;
            *v45 = 0;
            WTF::fastFree(v48, v8);
          }
          if (v13 == a3)
            v12 = v20 + 24 * v36;
          v5 = v50;
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

WTF::StringImpl *WebCore::ContentSecurityPolicySourceList::parsePath<unsigned char>(WTF::StringImpl **a1, WTF::StringImpl *a2, WTF::StringImpl *a3, uint64_t a4, double a5, __n128 a6)
{
  unsigned int v6;
  char *v7;
  int v10;
  WTF::StringImpl *v11;
  int v12;
  WebCore::ContentSecurityPolicy *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;
  __int16 v18;
  WTF::StringImpl *v19[2];

  if (!a4)
  {
    LODWORD(v11) = (_DWORD)a3;
    goto LABEL_12;
  }
  v10 = (_DWORD)a3 + a4;
  v11 = a3;
  while (1)
  {
    v12 = *(unsigned __int8 *)v11;
    if (v12 == 35 || v12 == 63)
      break;
    v11 = (WTF::StringImpl *)((char *)v11 + 1);
    if (!--a4)
    {
      LODWORD(v11) = v10;
      goto LABEL_12;
    }
  }
  if ((WTF::StringImpl *)((char *)v11 + a4) - a3 >= 0)
  {
    v13 = *(WebCore::ContentSecurityPolicy **)a2;
    v14 = (WTF::StringImpl **)((char *)a2 + 64);
    WTF::String::String();
    WebCore::ContentSecurityPolicy::reportInvalidPathCharacter(v13, v14, v19, *(char *)v11);
    v15 = v19[0];
    v19[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, a2);
      else
        *(_DWORD *)v15 -= 2;
    }
LABEL_12:
    v6 = (_DWORD)v11 - (_DWORD)a3;
    v7 = &byte_1ECE86000;
      goto LABEL_13;
    goto LABEL_19;
  }
  __break(1u);
LABEL_19:
  PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
  *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"UTF-8", (const char *)a2);
  *((_QWORD *)&xmmword_1ECE86C80 + 1) = v17;
  v19[0] = (WTF::StringImpl *)xmmword_1ECE86C80;
  v19[1] = v17;
  if (v17 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)v19))
    {
      v18 = 165;
    }
    else
    {
      v18 = 92;
    }
  }
  else
  {
    v18 = 92;
  }
  word_1ECE86C90 = v18;
  v7[3224] = 1;
LABEL_13:
  if (v6)
    return PAL::decodeEscapeSequences<PAL::URLEscapeSequence>(a3, v6 | 0x100000000, (PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding, a1, a6);
  else
    return (WTF::StringImpl *)WTF::String::String();
}

WTF::StringImpl *WebCore::ContentSecurityPolicySourceList::parsePath<char16_t>(WTF::StringImpl **a1, WTF::StringImpl *a2, WTF::StringImpl *a3, uint64_t a4, double a5, __n128 a6)
{
  unint64_t v6;
  char *v7;
  char *v10;
  char *v11;
  int v12;
  WebCore::ContentSecurityPolicy *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;
  __int16 v18;
  WTF::StringImpl *v19[2];

  if (!a4)
  {
    v11 = (char *)a3;
    goto LABEL_12;
  }
  v10 = (char *)a3 + 2 * a4;
  v11 = (char *)a3;
  while (1)
  {
    v12 = *(unsigned __int16 *)v11;
    if (v12 == 35 || v12 == 63)
      break;
    v11 += 2;
    if (!--a4)
    {
      v11 = v10;
      goto LABEL_12;
    }
  }
  if (&v11[2 * a4] - (char *)a3 > -2)
  {
    v13 = *(WebCore::ContentSecurityPolicy **)a2;
    v14 = (WTF::StringImpl **)((char *)a2 + 64);
    WTF::String::String();
    WebCore::ContentSecurityPolicy::reportInvalidPathCharacter(v13, v14, v19, *v11);
    v15 = v19[0];
    v19[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, a2);
      else
        *(_DWORD *)v15 -= 2;
    }
LABEL_12:
    v6 = v11 - (char *)a3;
    v7 = &byte_1ECE86000;
      goto LABEL_13;
    goto LABEL_19;
  }
  __break(1u);
LABEL_19:
  PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
  *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"UTF-8", (const char *)a2);
  *((_QWORD *)&xmmword_1ECE86C80 + 1) = v17;
  v19[0] = (WTF::StringImpl *)xmmword_1ECE86C80;
  v19[1] = v17;
  if (v17 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)v19))
    {
      v18 = 165;
    }
    else
    {
      v18 = 92;
    }
  }
  else
  {
    v18 = 92;
  }
  word_1ECE86C90 = v18;
  v7[3224] = 1;
LABEL_13:
  if ((v6 >> 1))
    return PAL::decodeEscapeSequences<PAL::URLEscapeSequence>(a3, (v6 >> 1), (PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding, a1, a6);
  else
    return (WTF::StringImpl *)WTF::String::String();
}

BOOL WebCore::ContentChangeObserver::hasPendingActivity(WebCore::ContentChangeObserver *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *((_QWORD *)this + 9);
  if (v1 && *(_DWORD *)(v1 - 12))
  {
    v5 = *(unsigned int *)(v1 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      v7 = *((_QWORD *)this + 9);
      while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
      {
        v7 += 8;
        v6 -= 8;
        if (!v6)
          goto LABEL_2;
      }
    }
    else
    {
      v7 = *((_QWORD *)this + 9);
    }
    v11 = v1 + 8 * v5;
    if (v7 != v11)
    {
      if (*(_QWORD *)(*(_QWORD *)v7 + 8))
        return 1;
      while (1)
      {
        v7 += 8;
        if (v7 == v11)
          break;
        if ((unint64_t)(*(_QWORD *)v7 + 1) > 1)
        {
          if (v7 == v11)
            break;
          v3 = 1;
          if (*(_QWORD *)(*(_QWORD *)v7 + 8))
            return v3;
        }
      }
    }
  }
LABEL_2:
  v2 = *((_QWORD *)this + 11);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    v8 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      v10 = *((_QWORD *)this + 11);
      while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
      {
        v10 += 8;
        v9 -= 8;
        if (!v9)
          goto LABEL_3;
      }
    }
    else
    {
      v10 = *((_QWORD *)this + 11);
    }
    v12 = v2 + 8 * v8;
    if (v10 != v12)
    {
      if (*(_QWORD *)(*(_QWORD *)v10 + 8))
        return 1;
      while (1)
      {
        v10 += 8;
        if (v10 == v12)
          break;
        if ((unint64_t)(*(_QWORD *)v10 + 1) > 1)
        {
          if (v10 == v12)
            break;
          v3 = 1;
          if (*(_QWORD *)(*(_QWORD *)v10 + 8))
            return v3;
        }
      }
    }
  }
LABEL_3:
  if (*((_BYTE *)this + 153))
    return 1;
  v3 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL;
  if (v3)
    return *(double *)((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) + 8) != 0.0;
  return v3;
}

uint64_t WTF::HashTable<WebCore::ResourceCryptographicDigest,WebCore::ResourceCryptographicDigest,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>>,WebCore::ResourceCryptographicDigest>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v20;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *a2;
  v4 = ((v3 - 1640531527) ^ ((v3 - 1640531527) << 16))
     + (((v3 - 1640531527) ^ ((v3 - 1640531527) << 16)) >> 11);
  v5 = (const void *)*((_QWORD *)a2 + 1);
  v6 = *((unsigned int *)a2 + 5);
  if ((_DWORD)v6)
  {
    v7 = *((unsigned int *)a2 + 5);
    v8 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    do
    {
      v9 = *v8++;
      v4 = ((v4 + v9) ^ ((v4 + v9) << 16)) + (((v4 + v9) ^ ((v4 + v9) << 16)) >> 11);
      --v7;
    }
    while (v7);
  }
  v10 = 0;
  v11 = *(_DWORD *)(v2 - 8);
  v12 = (v4 ^ (8 * v4)) + ((v4 ^ (8 * v4)) >> 5);
  v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
  v14 = v13 ^ (v13 << 10);
  if (!v14)
    v14 = 0x800000;
  while (1)
  {
    v15 = v14 & v11;
    v16 = (unsigned __int8 *)(v2 + 24 * (v14 & v11));
    v17 = *v16;
    v18 = *((_DWORD *)v16 + 5);
    if (v17 == v3 && v18 == (_DWORD)v6)
    {
      v20 = memcmp(*(const void **)(v2 + 24 * v15 + 8), v5, v6);
      v18 = v6;
      if (!v20)
        break;
    }
    if (v17 == 255 && v18 == 0)
      return 0;
    v14 = ++v10 + v15;
  }
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ContentChangeObserver::ContentChangeObserver(WebCore::Document &)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v1 + 152)
    && !*(_BYTE *)(v1 + 158)
    && !*(_BYTE *)(v1 + 157)
    && ((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
  {
    result = WebCore::ContentChangeObserver::hasPendingActivity(*(WebCore::ContentChangeObserver **)(result + 8));
    if ((result & 1) == 0)
    {
      if (*(_DWORD *)(v1 + 120) == 1)
        *(_DWORD *)(v1 + 120) = 0;
      v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 528) + 8)
                                                         + 24)
                                             + 8)
                                 + 48)
                     + 16);
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 648))(v2);
      return WebCore::ContentChangeObserver::reset((WebCore::ContentChangeObserver *)v1, v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::DOMTimerHoldingTank::*&)(void),WebCore::DOMTimerHoldingTank*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebCore::ScrollingCoordinator::page(WebCore::ScrollingCoordinator *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

void WebCore::AsyncScrollingCoordinator::~AsyncScrollingCoordinator(WebCore::AsyncScrollingCoordinator *this)
{
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;

  *(_QWORD *)this = off_1E3403768;
  *((_QWORD *)this + 12) = off_1E32051C0;
  v2 = (WebCore::AsyncScrollingCoordinator *)((char *)this + 96);
  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  v10 = *((unsigned int *)this + 14);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, char *))off_1E3403C28[v10])(&v14, (char *)this + 32);
  *((_DWORD *)this + 14) = -1;
  *(_QWORD *)this = off_1E34039B8;
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v4);
    }
  }
}

uint64_t WebCore::AsyncScrollingCoordinator::scrollingStateTreePropertiesChanged(WebCore::AsyncScrollingCoordinator *this)
{
  return (*(uint64_t (**)(WebCore::AsyncScrollingCoordinator *))(*(_QWORD *)this + 568))(this);
}

uint64_t WebCore::AsyncScrollingCoordinator::handleWheelEventPhase(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(result + 24);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 8))
    {
      result = WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode(result, a2, a3);
      if (result)
      {
        v8 = result;
        ++*(_DWORD *)(result + 8);
        v9 = *(_QWORD **)(*(_QWORD *)(result + 328) + 296);
        if (v9 && (v9 = (_QWORD *)v9[243]) != 0)
        {
          v10 = *(_QWORD *)(v9[18] + 256);
          if (v10)
          {
            v9 = *(_QWORD **)(v10 + 224);
            v10 = *(_QWORD *)(v10 + 232);
          }
          else
          {
            v9 = 0;
          }
        }
        else
        {
          v10 = 0;
        }
        if (a2 == v9 && a3 == v10)
        {
          v11 = *(_QWORD *)(result + 80);
          if (!v11)
          {
            v12 = result + 64;
            v11 = WTF::fastMalloc((WTF *)0xB0);
            *(_QWORD *)v11 = off_1E3405EF0;
            *(_QWORD *)(v11 + 8) = v12;
            *(_QWORD *)(v11 + 16) = 0;
            *(_QWORD *)(v11 + 24) = &off_1E3406D78;
            *(_OWORD *)(v11 + 32) = 0u;
            *(_OWORD *)(v11 + 48) = 0u;
            *(_OWORD *)(v11 + 64) = 0u;
            *(_QWORD *)(v11 + 80) = 0;
            *(_QWORD *)(v11 + 88) = v11;
            *(_QWORD *)(v11 + 96) = 0;
            *(_QWORD *)(v11 + 104) = 0;
            *(_QWORD *)(v11 + 110) = 0;
            *(_QWORD *)(v11 + 120) = 0;
            v13 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v13 = 0;
            *(_DWORD *)(v13 + 8) = 0;
            *(_QWORD *)(v13 + 16) = v12;
            *(_BYTE *)(v13 + 24) = 0;
            *(_QWORD *)(v11 + 128) = v13;
            *(_BYTE *)(v11 + 136) = 0;
            *(_QWORD *)v11 = off_1E3354B08;
            *(_QWORD *)(v11 + 168) = 0;
            *(_DWORD *)(v11 + 140) = 0;
            *(_DWORD *)(v11 + 143) = 0;
            *(_QWORD *)(v11 + 156) = 0;
            *(_QWORD *)(v11 + 148) = 0;
            v14 = *(_QWORD *)(v8 + 80);
            *(_QWORD *)(v8 + 80) = v11;
            if (v14)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
              v11 = *(_QWORD *)(v8 + 80);
            }
          }
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 200))(v11, a4);
        }
        else
        {
          result = (uint64_t)WebCore::LocalFrameView::scrollableAreaForScrollingNodeID(result, (uint64_t)a2, a3);
          if (result)
          {
            v15 = (_QWORD *)result;
            (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            v16 = v15[2];
            if (!v16)
            {
              v16 = WTF::fastMalloc((WTF *)0xB0);
              *(_QWORD *)v16 = off_1E3405EF0;
              *(_QWORD *)(v16 + 8) = v15;
              *(_QWORD *)(v16 + 16) = 0;
              *(_QWORD *)(v16 + 24) = &off_1E3406D78;
              *(_OWORD *)(v16 + 32) = 0u;
              *(_OWORD *)(v16 + 48) = 0u;
              *(_OWORD *)(v16 + 64) = 0u;
              *(_QWORD *)(v16 + 80) = 0;
              *(_QWORD *)(v16 + 88) = v16;
              *(_QWORD *)(v16 + 96) = 0;
              *(_QWORD *)(v16 + 104) = 0;
              *(_QWORD *)(v16 + 110) = 0;
              *(_QWORD *)(v16 + 120) = 0;
              v17 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v17 = 0;
              *(_DWORD *)(v17 + 8) = 0;
              *(_QWORD *)(v17 + 16) = v15;
              *(_BYTE *)(v17 + 24) = 0;
              *(_QWORD *)(v16 + 128) = v17;
              *(_BYTE *)(v16 + 136) = 0;
              *(_QWORD *)v16 = off_1E3354B08;
              *(_QWORD *)(v16 + 168) = 0;
              *(_DWORD *)(v16 + 140) = 0;
              *(_DWORD *)(v16 + 143) = 0;
              *(_QWORD *)(v16 + 156) = 0;
              *(_QWORD *)(v16 + 148) = 0;
              v18 = v15[2];
              v15[2] = v16;
              if (v18)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
                v16 = v15[2];
              }
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 200))(v16, a4);
            result = (*(uint64_t (**)(_QWORD *))(*v15 + 24))(v15);
          }
        }
        if (*(_DWORD *)(v8 + 8) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        else
          --*(_DWORD *)(v8 + 8);
      }
    }
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  int v53;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  int v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  char v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  int v120;
  int v121;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v136;
  _QWORD v137[2];
  _QWORD v138[2];
  _QWORD *v139;

  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v6 = *(_QWORD *)(v4 + 144);
  if (!v6)
  {
    v9 = 0;
    v7 = 0;
    goto LABEL_250;
  }
  v7 = *(unsigned int *)(v6 - 4);
  v8 = v6 + 8 * v7;
  if (!*(_DWORD *)(v6 - 12))
    goto LABEL_256;
  v9 = v6;
  if ((_DWORD)v7)
  {
    v10 = 8 * v7;
    v9 = v6;
    while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
    {
      v9 += 8;
      v10 -= 8;
      if (!v10)
      {
        v9 = v8;
        goto LABEL_10;
      }
    }
  }
  while (1)
  {
LABEL_10:
    if (v6)
      v11 = v6 + 8 * *(unsigned int *)(v6 - 4);
    else
      v11 = 0;
    if (v11 == v9)
      return 0;
    v12 = (uint64_t *)(a1 + 32);
LABEL_14:
    v13 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    v14 = *(_QWORD *)(v13 + 32);
    v15 = *(_QWORD *)(v13 + 40);
    v16 = *(_DWORD *)(a1 + 56);
    if (v16 == 2)
    {
      v24 = *v12;
      if (!*v12)
        goto LABEL_47;
      v25 = *(_DWORD *)(v24 - 8);
      v26 = (v14 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v14 - 1640531527) << 16) ^ ((unsigned __int16)v14
                                                                                                 - 1640531527);
      v27 = (v14 >> 37) & 0x7FFF800 ^ ((v26 + WORD2(v14) + (v26 >> 11)) << 16) ^ (v26 + WORD2(v14) + (v26 >> 11));
      v28 = (v15 >> 5) & 0x7FFF800 ^ ((v27 + (unsigned __int16)v15 + (v27 >> 11)) << 16) ^ (v27 + (unsigned __int16)v15 + (v27 >> 11));
      v29 = (v15 >> 37) & 0x7FFF800 ^ ((v28 + WORD2(v15) + (v28 >> 11)) << 16) ^ (v28 + WORD2(v15) + (v28 >> 11));
      v30 = (v29 + (v29 >> 11)) ^ (8 * (v29 + (v29 >> 11)));
      v31 = (v30 + (v30 >> 5)) ^ (4 * (v30 + (v30 >> 5)));
      v32 = (v31 + (v31 >> 15)) ^ ((v31 + (v31 >> 15)) << 10);
      if (!v32)
        v32 = 0x800000;
      v33 = v25 & v32;
      v34 = (uint64_t *)(v24 + 24 * v33);
      v35 = *v34;
      v36 = v34[1];
      if (*v34 != v14 || v36 != v15)
      {
        v38 = 1;
        do
        {
          v34 = (uint64_t *)(v35 | v36);
          if (!(v35 | v36))
            break;
          v33 = (v33 + v38) & v25;
          v34 = (uint64_t *)(v24 + 24 * v33);
          v35 = *v34;
          v36 = v34[1];
          ++v38;
        }
        while (*v34 != v14 || v36 != v15);
      }
      v40 = (uint64_t *)(v24 + 24 * *(unsigned int *)(v24 - 4));
      v18 = v34 ? v34 : (uint64_t *)(v24 + 24 * *(unsigned int *)(v24 - 4));
      if (v40 == v18)
        goto LABEL_47;
    }
    else
    {
      if (v16 != 1)
        goto LABEL_47;
      v17 = *(_QWORD *)(a1 + 32) == v14 && *(_QWORD *)(a1 + 40) == v15;
      v18 = v12;
      if (!v17)
        goto LABEL_47;
    }
    v19 = v18[2];
    if (!v19)
      goto LABEL_47;
    v20 = *(_QWORD *)(v19 + 56);
    if (!v20)
      goto LABEL_47;
    v21 = *(_QWORD *)(v20 + 8);
    if (__ldaxr((unsigned __int8 *)v21))
    {
      __clrex();
LABEL_25:
      MEMORY[0x19AEA534C](v21);
      goto LABEL_26;
    }
    if (__stxr(1u, (unsigned __int8 *)v21))
      goto LABEL_25;
LABEL_26:
    ++*(_QWORD *)(v21 + 8);
    v23 = __ldxr((unsigned __int8 *)v21);
    if (v23 != 1)
    {
      __clrex();
LABEL_55:
      WTF::Lock::unlockSlow((WTF::Lock *)v21);
      goto LABEL_56;
    }
    if (__stlxr(0, (unsigned __int8 *)v21))
      goto LABEL_55;
LABEL_56:
    v133 = v12;
    v42 = *(_QWORD *)(v20 + 8);
    if (__ldaxr((unsigned __int8 *)v42))
    {
      v44 = v11;
      __clrex();
LABEL_58:
      MEMORY[0x19AEA534C](v42);
      goto LABEL_59;
    }
    v44 = v11;
    if (__stxr(1u, (unsigned __int8 *)v42))
      goto LABEL_58;
LABEL_59:
    v45 = *(_QWORD *)(v42 + 8);
    v46 = v45 - 1;
    *(_QWORD *)(v42 + 8) = v45 - 1;
    if (v45 == 1)
    {
      v123 = *(_QWORD *)(v42 + 16);
      v47 = *(_QWORD *)(v42 + 24);
      *(_QWORD *)(v42 + 24) = 0;
      v48 = v123 != 0;
    }
    else
    {
      v47 = 0;
      v48 = 1;
    }
    v49 = __ldxr((unsigned __int8 *)v42);
    if (v49 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v42))
        goto LABEL_63;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v42);
LABEL_63:
    if (!v46)
    {
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      if (!v48)
        WTF::fastFree((WTF *)v42, a2);
    }
    v50 = *(_QWORD **)(v19 + 56);
    if (!v50)
      goto LABEL_75;
    v51 = v50[1];
    if (__ldaxr((unsigned __int8 *)v51))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v51))
    {
      goto LABEL_68;
    }
    MEMORY[0x19AEA534C](v51);
LABEL_68:
    ++*(_QWORD *)(v51 + 8);
    v53 = __ldxr((unsigned __int8 *)v51);
    if (v53 != 1)
    {
      __clrex();
LABEL_74:
      WTF::Lock::unlockSlow((WTF::Lock *)v51);
      goto LABEL_75;
    }
    if (__stlxr(0, (unsigned __int8 *)v51))
      goto LABEL_74;
LABEL_75:
    v55 = a2 == (_QWORD *)v50[3] && a3 == v50[4];
    v56 = v50[1];
    if (__ldaxr((unsigned __int8 *)v56))
    {
      __clrex();
LABEL_83:
      MEMORY[0x19AEA534C](v56);
      goto LABEL_84;
    }
    if (__stxr(1u, (unsigned __int8 *)v56))
      goto LABEL_83;
LABEL_84:
    v58 = *(_QWORD *)(v56 + 8);
    v59 = v58 - 1;
    *(_QWORD *)(v56 + 8) = v58 - 1;
    if (v58 == 1)
    {
      v124 = *(_QWORD *)(v56 + 16);
      v60 = *(_QWORD *)(v56 + 24);
      *(_QWORD *)(v56 + 24) = 0;
      v61 = v124 != 0;
    }
    else
    {
      v60 = 0;
      v61 = 1;
    }
    v62 = __ldxr((unsigned __int8 *)v56);
    if (v62 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v56))
        goto LABEL_88;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v56);
LABEL_88:
    if (!v59)
    {
      if (v60)
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
      if (!v61)
        WTF::fastFree((WTF *)v56, a2);
    }
    v11 = v44;
    v12 = v133;
    if (v55)
    {
      v68 = *(_QWORD *)(v13 + 288);
      if (v68)
      {
        v69 = *(_QWORD **)(*(_QWORD *)(v68 + 328) + 296);
        if (v69 && (v69 = (_QWORD *)v69[243]) != 0)
        {
          v70 = *(_QWORD *)(v69[18] + 256);
          if (v70)
          {
            v69 = *(_QWORD **)(v70 + 224);
            v70 = *(_QWORD *)(v70 + 232);
          }
          else
          {
            v69 = 0;
          }
        }
        else
        {
          v70 = 0;
        }
        if (v69 == a2 && v70 == a3)
          goto LABEL_233;
      }
    }
    v137[0] = a2;
    v137[1] = a3;
    v138[0] = v137;
    v138[1] = v137;
    v63 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v63 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_256:
    v9 = v8;
LABEL_250:
    v8 = v6 + 8 * v7;
  }
  v139 = v138;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t *))off_1E3403C68[v63])(&v136, &v139, v133);
  v64 = v136;
  if (!v136)
    goto LABEL_47;
  v65 = *(_QWORD *)(v136 + 8);
  if (__ldaxr((unsigned __int8 *)v65))
  {
    __clrex();
    goto LABEL_94;
  }
  if (__stxr(1u, (unsigned __int8 *)v65))
LABEL_94:
    MEMORY[0x19AEA534C](v65);
  ++*(_QWORD *)(v65 + 8);
  v67 = __ldxr((unsigned __int8 *)v65);
  if (v67 != 1)
  {
    __clrex();
LABEL_125:
    WTF::Lock::unlockSlow((WTF::Lock *)v65);
    goto LABEL_126;
  }
  if (__stlxr(0, (unsigned __int8 *)v65))
    goto LABEL_125;
LABEL_126:
  while (2)
  {
    v71 = (_QWORD *)v64;
    if (*(unsigned __int8 *)(v64 + 16) >= 2u)
    {
      v72 = *(unsigned __int8 **)(v64 + 56);
      if (v72)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::ScrollingStateNode>(v72, *(_QWORD *)(v64 + 64), v138);
        v64 = v138[0];
      }
      else
      {
        v64 = 0;
      }
      v138[0] = 0;
      v73 = v71[1];
      if (__ldaxr((unsigned __int8 *)v73))
      {
        v75 = v11;
        __clrex();
        goto LABEL_131;
      }
      v75 = v11;
      if (__stxr(1u, (unsigned __int8 *)v73))
LABEL_131:
        MEMORY[0x19AEA534C](v73);
      v76 = *(_QWORD *)(v73 + 8);
      v77 = v76 - 1;
      *(_QWORD *)(v73 + 8) = v76 - 1;
      if (v76 == 1)
      {
        v131 = *(_QWORD *)(v73 + 16);
        v78 = *(_QWORD *)(v73 + 24);
        *(_QWORD *)(v73 + 24) = 0;
        v79 = v131 != 0;
      }
      else
      {
        v78 = 0;
        v79 = 1;
      }
      v80 = __ldxr((unsigned __int8 *)v73);
      if (v80 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v73))
          goto LABEL_136;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v73);
LABEL_136:
      if (!v77)
      {
        if (v78)
          (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
        if (!v79)
          WTF::fastFree((WTF *)v73, a2);
      }
      v81 = v138[0];
      v138[0] = 0;
      if (v81)
      {
        v82 = *(_QWORD *)(v81 + 8);
        if (__ldaxr((unsigned __int8 *)v82))
        {
          __clrex();
          goto LABEL_140;
        }
        if (__stxr(1u, (unsigned __int8 *)v82))
LABEL_140:
          MEMORY[0x19AEA534C](v82);
        v84 = *(_QWORD *)(v82 + 8);
        v85 = v84 - 1;
        *(_QWORD *)(v82 + 8) = v84 - 1;
        if (v84 == 1)
        {
          v132 = *(_QWORD *)(v82 + 16);
          v86 = *(_QWORD *)(v82 + 24);
          *(_QWORD *)(v82 + 24) = 0;
          v87 = v132 != 0;
        }
        else
        {
          v86 = 0;
          v87 = 1;
        }
        v88 = __ldxr((unsigned __int8 *)v82);
        if (v88 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v82))
          {
LABEL_145:
            if (!v85)
            {
              if (v86)
                (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
              if (!v87)
                WTF::fastFree((WTF *)v82, a2);
            }
            goto LABEL_146;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v82);
        goto LABEL_145;
      }
LABEL_146:
      v11 = v75;
      v12 = v133;
      if (!v64)
      {
        v68 = 0;
        goto LABEL_206;
      }
      continue;
    }
    break;
  }
  v89 = (unsigned int *)(v13 + 8);
  do
    v90 = __ldaxr(v89);
  while (__stlxr(v90 + 1, v89));
  while (2)
  {
    if (*(_BYTE *)(v13 + 144)
      || (v68 = *(_QWORD *)(v13 + 288)) == 0
      || ((v91 = *(_QWORD *)(*(_QWORD *)(v68 + 328) + 296)) == 0 || (v91 = *(_QWORD *)(v91 + 1944)) == 0
        ? (v92 = 0)
        : (v92 = *(_QWORD *)(*(_QWORD *)(v91 + 144) + 256)) == 0
        ? (v91 = 0)
        : (v91 = *(_QWORD *)(v92 + 224), v92 = *(_QWORD *)(v92 + 232)),
          v91 == v71[3] ? (v93 = v92 == v71[4]) : (v93 = 0),
          !v93))
    {
      v94 = *(_QWORD *)(v13 + 88);
      if (v94)
        goto LABEL_186;
      v95 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8);
      if (!v95)
        goto LABEL_189;
      v94 = *(_QWORD *)(v13 + 72);
      if (v94)
      {
LABEL_186:
        v97 = (unsigned int *)(v94 + 8);
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 + 1, v97));
        v99 = 0;
      }
      else
      {
        while (1)
        {
          v96 = *(_QWORD *)(v95 + 56);
          if (!v96)
            break;
          v95 = *(_QWORD *)(v96 + 8);
          if (!v95)
            break;
          v94 = *(_QWORD *)(v95 + 72);
          if (v94)
            goto LABEL_186;
        }
LABEL_189:
        v94 = 0;
        v99 = 1;
      }
      v100 = (unsigned int *)(v13 + 8);
      do
      {
        v101 = __ldaxr(v100);
        v102 = v101 - 1;
      }
      while (__stlxr(v102, v100));
      if (!v102)
      {
        atomic_store(1u, v100);
        v125 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v125 = off_1E31FE290;
        v125[1] = v100;
        v138[0] = v125;
        WTF::ensureOnMainThread();
        v126 = v138[0];
        v138[0] = 0;
        if (v126)
          (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
      }
      v13 = v94;
      if ((v99 & 1) != 0)
      {
        v68 = 0;
        goto LABEL_198;
      }
      continue;
    }
    break;
  }
  v103 = (unsigned int *)(v13 + 8);
  do
  {
    v104 = __ldaxr(v103);
    v105 = v104 - 1;
  }
  while (__stlxr(v105, v103));
  if (!v105)
  {
    atomic_store(1u, v103);
    v129 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v129 = off_1E31FE290;
    v129[1] = v103;
    v138[0] = v129;
    WTF::ensureOnMainThread();
    v130 = v138[0];
    v138[0] = 0;
    if (v130)
      (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  }
LABEL_198:
  v106 = v71[1];
  if (__ldaxr((unsigned __int8 *)v106))
  {
    __clrex();
    goto LABEL_200;
  }
  if (__stxr(1u, (unsigned __int8 *)v106))
LABEL_200:
    MEMORY[0x19AEA534C](v106);
  v108 = *(_QWORD *)(v106 + 8);
  v109 = v108 - 1;
  *(_QWORD *)(v106 + 8) = v108 - 1;
  if (v108 == 1)
  {
    v128 = *(_QWORD *)(v106 + 16);
    v110 = *(_QWORD *)(v106 + 24);
    *(_QWORD *)(v106 + 24) = 0;
    v111 = v128 != 0;
  }
  else
  {
    v110 = 0;
    v111 = 1;
  }
  v112 = __ldxr((unsigned __int8 *)v106);
  if (v112 != 1)
  {
    __clrex();
LABEL_220:
    WTF::Lock::unlockSlow((WTF::Lock *)v106);
    goto LABEL_205;
  }
  if (__stlxr(0, (unsigned __int8 *)v106))
    goto LABEL_220;
LABEL_205:
  if (!v109)
  {
    if (v110)
      (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
    if (!v111)
      WTF::fastFree((WTF *)v106, a2);
  }
LABEL_206:
  v113 = v136;
  v136 = 0;
  if (v113)
  {
    v114 = *(_QWORD *)(v113 + 8);
    if (__ldaxr((unsigned __int8 *)v114))
    {
      __clrex();
      goto LABEL_209;
    }
    if (__stxr(1u, (unsigned __int8 *)v114))
LABEL_209:
      MEMORY[0x19AEA534C](v114);
    v116 = *(_QWORD *)(v114 + 8);
    v117 = v116 - 1;
    *(_QWORD *)(v114 + 8) = v116 - 1;
    if (v116 == 1)
    {
      v127 = *(_QWORD *)(v114 + 16);
      v118 = *(_QWORD *)(v114 + 24);
      *(_QWORD *)(v114 + 24) = 0;
      v119 = v127 != 0;
    }
    else
    {
      v118 = 0;
      v119 = 1;
    }
    v120 = __ldxr((unsigned __int8 *)v114);
    if (v120 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v114))
      {
LABEL_214:
        if (!v117)
        {
          if (v118)
            (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
          if (!v119)
            WTF::fastFree((WTF *)v114, a2);
        }
        goto LABEL_215;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v114);
    goto LABEL_214;
  }
LABEL_215:
  if (!v68)
  {
LABEL_47:
    v41 = v9 + 8;
    v9 = v8;
    if (v41 != v8)
    {
      v9 = v41;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 8;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
    if (v9 == v11)
      return 0;
    goto LABEL_14;
  }
LABEL_233:
  v121 = *(_DWORD *)(v68 + 8);
  *(_DWORD *)(v68 + 8) = v121 + 1;
  if (v121)
    *(_DWORD *)(v68 + 8) = v121;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  return v68;
}

unint64_t WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea(WebCore::AsyncScrollingCoordinator *this, const WebCore::ScrollableArea *a2, uint64_t a3)
{
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 296))(a3);
  if (!result)
    goto LABEL_23;
  v8 = result;
  v9 = v7;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 784))(a3);
  v11 = (uint64_t *)((char *)a2 + 32);
  v12 = *((_DWORD *)a2 + 14);
  if (v12 == 2)
  {
    v19 = *v11;
    if (!*v11)
      goto LABEL_23;
    result = (unint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*v11, result, v10);
    v11 = (uint64_t *)(result ? result : v19 + 24 * *(unsigned int *)(v19 - 4));
    if ((uint64_t *)(v19 + 24 * *(unsigned int *)(v19 - 4)) == v11)
      goto LABEL_23;
  }
  else
  {
    if (v12 != 1)
      goto LABEL_23;
    if (*((_QWORD *)a2 + 4) != result || *((_QWORD *)a2 + 5) != v10)
      goto LABEL_23;
  }
  v14 = v11[2];
  if (!v14
    || (v21 = v8,
        v22 = v9,
        (result = (unint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v14 + 40), &v21)) == 0)|| (v15 = *(_QWORD **)(result + 16)) == 0)
  {
LABEL_23:
    *(_QWORD *)this = 0;
    return result;
  }
  v16 = v15[1];
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
LABEL_14:
    result = MEMORY[0x19AEA534C](v16);
    goto LABEL_15;
  }
  if (__stxr(1u, (unsigned __int8 *)v16))
    goto LABEL_14;
LABEL_15:
  ++*(_QWORD *)(v16 + 8);
  v18 = __ldxr((unsigned __int8 *)v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v16))
      goto LABEL_27;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v16);
LABEL_27:
  *(_QWORD *)this = v15;
  if (v15[3] != v21 || v15[4] != v22)
  {
    __break(0xC471u);
    JUMPOUT(0x19608C1E0);
  }
  return result;
}

unint64_t WebCore::AsyncScrollingCoordinator::ensureScrollingStateTreeForRootFrameID(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  WebCore::ScrollingStateTree *v32;
  WTF *v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::ScrollingStateTree **v43;
  WebCore::ScrollingStateTree *v44;
  WTF *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  WebCore::ScrollingStateTree *v62;
  WTF *v63;
  void *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t *v72;
  unint64_t *v73;
  int v74;
  uint64_t v75;
  WebCore::ScrollingStateTree *v76;
  WTF *v77;
  void *v78;
  unint64_t *v80;
  int v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  WebCore::ScrollingStateTree *v102;
  WTF *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  WebCore::ScrollingStateTree **v113;
  WebCore::ScrollingStateTree *v114;
  WTF *v115;
  unint64_t *v116;
  int v117;
  uint64_t v118;
  int v120;
  uint64_t v121;
  char v122;
  char v123;

  v6 = (uint64_t *)(a1 + 32);
  v7 = *(_DWORD *)(a1 + 56);
  if (v7 == 2)
  {
    v46 = *v6;
    if (*v6)
      goto LABEL_43;
    goto LABEL_79;
  }
  if (v7 != 1)
  {
    if (v7)
    {
LABEL_78:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_79:
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v6, 8u, 0);
      v46 = *v6;
      if (!*v6)
      {
        v47 = 0;
LABEL_44:
        v48 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                                 - 1640531527);
        v49 = (a2 >> 37) & 0x7FFF800 ^ ((v48 + WORD2(a2) + (v48 >> 11)) << 16) ^ (v48 + WORD2(a2) + (v48 >> 11));
        v50 = (a3 >> 5) & 0x7FFF800 ^ ((v49 + (unsigned __int16)a3 + (v49 >> 11)) << 16) ^ (v49 + (unsigned __int16)a3 + (v49 >> 11));
        v51 = (a3 >> 37) & 0x7FFF800 ^ ((v50 + WORD2(a3) + (v50 >> 11)) << 16) ^ (v50 + WORD2(a3) + (v50 >> 11));
        v52 = (v51 + (v51 >> 11)) ^ (8 * (v51 + (v51 >> 11)));
        v53 = (v52 + (v52 >> 5)) ^ (4 * (v52 + (v52 >> 5)));
        v54 = (v53 + (v53 >> 15)) ^ ((v53 + (v53 >> 15)) << 10);
        if (!v54)
          v54 = 0x800000;
        v55 = v47 & v54;
        v56 = (unint64_t *)(v46 + 24 * (v47 & v54));
        v58 = *v56;
        v57 = v56[1];
        if (*(_OWORD *)v56 != 0)
        {
          v73 = 0;
          v74 = 1;
          while (v58 != a2 || v57 != a3)
          {
            if (v57 == -1)
              v73 = v56;
            v55 = (v55 + v74) & v47;
            v56 = (unint64_t *)(v46 + 24 * v55);
            v58 = *v56;
            v57 = v56[1];
            ++v74;
            if (*(_OWORD *)v56 == 0)
            {
              if (v73)
              {
                *v73 = 0;
                v73[1] = 0;
                v73[2] = 0;
                --*(_DWORD *)(*v6 - 16);
                v56 = v73;
              }
              goto LABEL_47;
            }
          }
          goto LABEL_61;
        }
LABEL_47:
        *v56 = a2;
        v56[1] = a3;
        v60 = WTF::fastMalloc((WTF *)0x50);
        *(_DWORD *)v60 = 0;
        if (!a1 || (v118 = *(_QWORD *)(a1 + 8)) == 0)
        {
          v61 = 0;
          goto LABEL_49;
        }
        if (__ldaxr((unsigned __int8 *)v118))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v118))
        {
LABEL_175:
          if (*(_QWORD *)(v118 + 24))
          {
            ++*(_QWORD *)(v118 + 16);
            v61 = v118;
          }
          else
          {
            v61 = 0;
          }
          v120 = __ldxr((unsigned __int8 *)v118);
          if (v120 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v118))
            {
LABEL_49:
              *(_QWORD *)(v60 + 8) = v61;
              *(_QWORD *)(v60 + 16) = a1;
              *(_OWORD *)(v60 + 24) = 0u;
              *(_OWORD *)(v60 + 40) = 0u;
              *(_OWORD *)(v60 + 52) = 0u;
              *(_DWORD *)(v60 + 68) = 1;
              *(_WORD *)(v60 + 72) = 0;
              v62 = (WebCore::ScrollingStateTree *)v56[2];
              v56[2] = v60;
              if (v62)
              {
                WebCore::ScrollingStateTree::~ScrollingStateTree(v62, v59);
                if (*(_DWORD *)v63)
                {
                  *((_OWORD *)v63 + 3) = 0u;
                  *((_OWORD *)v63 + 4) = 0u;
                  *((_OWORD *)v63 + 1) = 0u;
                  *((_OWORD *)v63 + 2) = 0u;
                  *(_OWORD *)v63 = 0u;
                }
                else
                {
                  WTF::fastFree(v63, v64);
                }
              }
              v65 = *v6;
              if (*v6)
                v66 = *(_DWORD *)(v65 - 12) + 1;
              else
                v66 = 1;
              *(_DWORD *)(v65 - 12) = v66;
              v67 = *v6;
              if (*v6)
                v68 = *(_DWORD *)(v67 - 12);
              else
                v68 = 0;
              v69 = (*(_DWORD *)(v67 - 16) + v68);
              v70 = *(unsigned int *)(v67 - 4);
              if (v70 > 0x400)
              {
                if (v70 > 2 * v69)
                  goto LABEL_61;
              }
              else
              {
                if (3 * v70 > 4 * v69)
                {
LABEL_61:
                  v72 = v56 + 2;
                  return *v72;
                }
                if (!(_DWORD)v70)
                {
                  v71 = 8;
                  goto LABEL_60;
                }
              }
              v71 = (_DWORD)v70 << (6 * *(_DWORD *)(v67 - 12) >= (2 * v70));
LABEL_60:
              v56 = (unint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v6, v71, v56);
              goto LABEL_61;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v118);
          goto LABEL_49;
        }
        MEMORY[0x19AEA534C](v118);
        goto LABEL_175;
      }
LABEL_43:
      v47 = *(_DWORD *)(v46 - 8);
      goto LABEL_44;
    }
    v9 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)v9 = 0;
    v10 = *(_QWORD *)(a1 + 8);
    if (!v10)
    {
      v12 = 0;
      goto LABEL_72;
    }
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
LABEL_8:
      if (*(_QWORD *)(v10 + 24))
      {
        ++*(_QWORD *)(v10 + 16);
        v12 = v10;
      }
      else
      {
        v12 = 0;
      }
      v13 = __ldxr((unsigned __int8 *)v10);
      if (v13 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
        {
LABEL_72:
          *(_QWORD *)(v9 + 8) = v12;
          *(_QWORD *)(v9 + 16) = a1;
          *(_OWORD *)(v9 + 24) = 0u;
          *(_OWORD *)(v9 + 40) = 0u;
          *(_OWORD *)(v9 + 52) = 0u;
          *(_DWORD *)(v9 + 68) = 1;
          *(_WORD *)(v9 + 72) = 0;
          v75 = *(unsigned int *)(a1 + 56);
          if ((_DWORD)v75 != -1)
          {
            if ((_DWORD)v75 == 1)
            {
              *(_QWORD *)(a1 + 32) = a2;
              *(_QWORD *)(a1 + 40) = a3;
              v76 = *(WebCore::ScrollingStateTree **)(a1 + 48);
              *(_QWORD *)(a1 + 48) = v9;
              if (v76)
              {
                WebCore::ScrollingStateTree::~ScrollingStateTree(v76, v8);
                if (*(_DWORD *)v77)
                {
                  *((_OWORD *)v77 + 3) = 0u;
                  *((_OWORD *)v77 + 4) = 0u;
                  *((_OWORD *)v77 + 1) = 0u;
                  *((_OWORD *)v77 + 2) = 0u;
                  *(_OWORD *)v77 = 0u;
                }
                else
                {
                  WTF::fastFree(v77, v78);
                }
              }
              if (*(_DWORD *)(a1 + 56) != 1)
                goto LABEL_78;
LABEL_85:
              v72 = (unint64_t *)(a1 + 48);
              return *v72;
            }
            ((void (*)(char *, uint64_t *))off_1E3403C28[v75])(&v122, v6);
          }
          *(_QWORD *)(a1 + 32) = a2;
          *(_QWORD *)(a1 + 40) = a3;
          *(_QWORD *)(a1 + 48) = v9;
          *(_DWORD *)(a1 + 56) = 1;
          goto LABEL_85;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      goto LABEL_72;
    }
    MEMORY[0x19AEA534C](v10);
    goto LABEL_8;
  }
  if (*(_QWORD *)(a1 + 32) == a2 && *(_QWORD *)(a1 + 40) == a3)
    goto LABEL_85;
  v121 = 0;
  WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(&v121, 8u, 0);
  v16 = v121;
  if (v121)
    v17 = *(_DWORD *)(v121 - 8);
  else
    v17 = 0;
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = (v18 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v18 - 1640531527) << 16) ^ ((unsigned __int16)v18
                                                                                             - 1640531527);
  v21 = (v18 >> 37) & 0x7FFF800 ^ ((v20 + WORD2(v18) + (v20 >> 11)) << 16) ^ (v20 + WORD2(v18) + (v20 >> 11));
  v22 = (v19 >> 5) & 0x7FFF800 ^ ((v21 + (unsigned __int16)v19 + (v21 >> 11)) << 16) ^ (v21 + (unsigned __int16)v19 + (v21 >> 11));
  v23 = (v19 >> 37) & 0x7FFF800 ^ ((v22 + WORD2(v19) + (v22 >> 11)) << 16) ^ (v22 + WORD2(v19) + (v22 >> 11));
  v24 = (v23 + (v23 >> 11)) ^ (8 * (v23 + (v23 >> 11)));
  v25 = (v24 + (v24 >> 5)) ^ (4 * (v24 + (v24 >> 5)));
  v26 = (v25 + (v25 >> 15)) ^ ((v25 + (v25 >> 15)) << 10);
  if (!v26)
    v26 = 0x800000;
  v27 = v26 & v17;
  v28 = (unint64_t *)(v121 + 24 * (v26 & v17));
  v30 = *v28;
  v29 = v28[1];
  if (*(_OWORD *)v28 == 0)
  {
LABEL_22:
    *(_OWORD *)v28 = *(_OWORD *)v6;
    v31 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    v32 = (WebCore::ScrollingStateTree *)v28[2];
    v28[2] = v31;
    if (v32)
    {
      WebCore::ScrollingStateTree::~ScrollingStateTree(v32, v15);
      if (*(_DWORD *)v33)
      {
        *((_OWORD *)v33 + 3) = 0u;
        *((_OWORD *)v33 + 4) = 0u;
        *((_OWORD *)v33 + 1) = 0u;
        *((_OWORD *)v33 + 2) = 0u;
        *(_OWORD *)v33 = 0u;
      }
      else
      {
        WTF::fastFree(v33, v15);
      }
    }
    v34 = *(_DWORD *)(v16 - 16);
    v35 = *(_DWORD *)(v16 - 12) + 1;
    *(_DWORD *)(v16 - 12) = v35;
    v36 = (v34 + v35);
    v37 = *(unsigned int *)(v16 - 4);
    if (v37 <= 0x400)
    {
      if (3 * v37 > 4 * v36)
        goto LABEL_30;
      if (!(_DWORD)v37)
      {
        v38 = 8;
        goto LABEL_29;
      }
LABEL_28:
      v38 = (_DWORD)v37 << (6 * v35 >= (2 * v37));
LABEL_29:
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(&v121, v38, v28);
      goto LABEL_30;
    }
    if (v37 <= 2 * v36)
      goto LABEL_28;
  }
  else
  {
    v80 = 0;
    v81 = 1;
    while (v30 != v18 || v29 != v19)
    {
      if (v29 == -1)
        v80 = v28;
      v27 = (v27 + v81) & v17;
      v28 = (unint64_t *)(v121 + 24 * v27);
      v30 = *v28;
      v29 = v28[1];
      ++v81;
      if (*(_OWORD *)v28 == 0)
      {
        if (v80)
        {
          *v80 = 0;
          v80[1] = 0;
          v80[2] = 0;
          --*(_DWORD *)(v16 - 16);
          v28 = v80;
        }
        goto LABEL_22;
      }
    }
  }
LABEL_30:
  v39 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v39 == -1)
  {
LABEL_99:
    v82 = v121;
    v121 = 0;
    *(_QWORD *)(a1 + 32) = v82;
    *(_DWORD *)(a1 + 56) = 2;
    goto LABEL_100;
  }
  if ((_DWORD)v39 != 2)
  {
    ((void (*)(char *, uint64_t *))off_1E3403C28[v39])(&v123, v6);
    goto LABEL_99;
  }
  v40 = v121;
  v121 = 0;
  v41 = *v6;
  *v6 = v40;
  if (v41)
  {
    v42 = *(unsigned int *)(v41 - 4);
    if ((_DWORD)v42)
    {
      v43 = (WebCore::ScrollingStateTree **)(v41 + 16);
      do
      {
        if (*(v43 - 1) != (WebCore::ScrollingStateTree *)-1)
        {
          v44 = *v43;
          *v43 = 0;
          if (v44)
          {
            WebCore::ScrollingStateTree::~ScrollingStateTree(v44, v15);
            if (*(_DWORD *)v45)
            {
              *((_OWORD *)v45 + 3) = 0u;
              *((_OWORD *)v45 + 4) = 0u;
              *((_OWORD *)v45 + 1) = 0u;
              *((_OWORD *)v45 + 2) = 0u;
              *(_OWORD *)v45 = 0u;
            }
            else
            {
              WTF::fastFree(v45, v15);
            }
          }
        }
        v43 += 3;
        --v42;
      }
      while (v42);
    }
    WTF::fastFree((WTF *)(v41 - 16), v15);
    if (*(_DWORD *)(a1 + 56) != 2)
      goto LABEL_78;
  }
LABEL_100:
  v84 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)v84 = 0;
  v85 = *(_QWORD *)(a1 + 8);
  if (!v85)
  {
    v87 = 0;
    goto LABEL_111;
  }
  if (__ldaxr((unsigned __int8 *)v85))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v85))
  {
    goto LABEL_104;
  }
  MEMORY[0x19AEA534C](v85);
LABEL_104:
  if (*(_QWORD *)(v85 + 24))
  {
    ++*(_QWORD *)(v85 + 16);
    v87 = v85;
  }
  else
  {
    v87 = 0;
  }
  v88 = __ldxr((unsigned __int8 *)v85);
  if (v88 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v85))
      goto LABEL_111;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v85);
LABEL_111:
  *(_QWORD *)(v84 + 8) = v87;
  *(_QWORD *)(v84 + 16) = a1;
  *(_OWORD *)(v84 + 24) = 0u;
  *(_OWORD *)(v84 + 40) = 0u;
  *(_OWORD *)(v84 + 52) = 0u;
  *(_DWORD *)(v84 + 68) = 1;
  *(_WORD *)(v84 + 72) = 0;
  v89 = *(_QWORD *)(a1 + 32);
  if (v89
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v6, 8u, 0), (v89 = *v6) != 0))
  {
    v90 = *(_DWORD *)(v89 - 8);
  }
  else
  {
    v90 = 0;
  }
  v91 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                           - 1640531527);
  v92 = (a2 >> 37) & 0x7FFF800 ^ ((v91 + WORD2(a2) + (v91 >> 11)) << 16) ^ (v91 + WORD2(a2) + (v91 >> 11));
  v93 = (a3 >> 5) & 0x7FFF800 ^ ((v92 + (unsigned __int16)a3 + (v92 >> 11)) << 16) ^ (v92
                                                                                                  + (unsigned __int16)a3
                                                                                                  + (v92 >> 11));
  v94 = (a3 >> 37) & 0x7FFF800 ^ ((v93 + WORD2(a3) + (v93 >> 11)) << 16) ^ (v93 + WORD2(a3) + (v93 >> 11));
  v95 = (v94 + (v94 >> 11)) ^ (8 * (v94 + (v94 >> 11)));
  v96 = (v95 + (v95 >> 5)) ^ (4 * (v95 + (v95 >> 5)));
  v97 = (v96 + (v96 >> 15)) ^ ((v96 + (v96 >> 15)) << 10);
  if (!v97)
    v97 = 0x800000;
  v98 = v90 & v97;
  v99 = (unint64_t *)(v89 + 24 * (v90 & v97));
  v101 = *v99;
  v100 = v99[1];
  if (*(_OWORD *)v99 != 0)
  {
    v116 = 0;
    v117 = 1;
    do
    {
      if (v101 == a2 && v100 == a3)
      {
        v72 = v99 + 2;
        WebCore::ScrollingStateTree::~ScrollingStateTree((WebCore::ScrollingStateTree *)v84, v83);
        if (*(_DWORD *)v84)
        {
          *(_OWORD *)(v84 + 48) = 0u;
          *(_OWORD *)(v84 + 64) = 0u;
          *(_OWORD *)(v84 + 16) = 0u;
          *(_OWORD *)(v84 + 32) = 0u;
          *(_OWORD *)v84 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v84, v83);
        }
        goto LABEL_129;
      }
      if (v100 == -1)
        v116 = v99;
      v98 = (v98 + v117) & v90;
      v99 = (unint64_t *)(v89 + 24 * v98);
      v101 = *v99;
      v100 = v99[1];
      ++v117;
    }
    while (*(_OWORD *)v99 != 0);
    if (v116)
    {
      *v116 = 0;
      v116[1] = 0;
      v116[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v99 = v116;
    }
  }
  *v99 = a2;
  v99[1] = a3;
  v102 = (WebCore::ScrollingStateTree *)v99[2];
  v99[2] = v84;
  if (v102)
  {
    WebCore::ScrollingStateTree::~ScrollingStateTree(v102, v83);
    if (*(_DWORD *)v103)
    {
      *((_OWORD *)v103 + 3) = 0u;
      *((_OWORD *)v103 + 4) = 0u;
      *((_OWORD *)v103 + 1) = 0u;
      *((_OWORD *)v103 + 2) = 0u;
      *(_OWORD *)v103 = 0u;
    }
    else
    {
      WTF::fastFree(v103, v83);
    }
  }
  v104 = *v6;
  if (*v6)
    v105 = *(_DWORD *)(v104 - 12) + 1;
  else
    v105 = 1;
  *(_DWORD *)(v104 - 12) = v105;
  v106 = *v6;
  if (*v6)
    v107 = *(_DWORD *)(v106 - 12);
  else
    v107 = 0;
  v108 = (*(_DWORD *)(v106 - 16) + v107);
  v109 = *(unsigned int *)(v106 - 4);
  if (v109 <= 0x400)
  {
    if (3 * v109 > 4 * v108)
      goto LABEL_128;
    if (!(_DWORD)v109)
    {
      v110 = 8;
      goto LABEL_127;
    }
LABEL_126:
    v110 = (_DWORD)v109 << (6 * *(_DWORD *)(v106 - 12) >= (2 * v109));
LABEL_127:
    v99 = (unint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v6, v110, v99);
    goto LABEL_128;
  }
  if (v109 <= 2 * v108)
    goto LABEL_126;
LABEL_128:
  v72 = v99 + 2;
LABEL_129:
  v111 = v121;
  if (v121)
  {
    v112 = *(unsigned int *)(v121 - 4);
    if ((_DWORD)v112)
    {
      v113 = (WebCore::ScrollingStateTree **)(v121 + 16);
      do
      {
        if (*(v113 - 1) != (WebCore::ScrollingStateTree *)-1)
        {
          v114 = *v113;
          *v113 = 0;
          if (v114)
          {
            WebCore::ScrollingStateTree::~ScrollingStateTree(v114, v83);
            if (*(_DWORD *)v115)
            {
              *((_OWORD *)v115 + 3) = 0u;
              *((_OWORD *)v115 + 4) = 0u;
              *((_OWORD *)v115 + 1) = 0u;
              *((_OWORD *)v115 + 2) = 0u;
              *(_OWORD *)v115 = 0u;
            }
            else
            {
              WTF::fastFree(v115, v83);
            }
          }
        }
        v113 += 3;
        --v112;
      }
      while (v112);
    }
    WTF::fastFree((WTF *)(v111 - 16), v83);
  }
  return *v72;
}

void WebCore::AsyncScrollingCoordinator::rootFrameWasRemoved(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v4;
  WebCore::ScrollingStateTree *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  void **v20;
  unint64_t v21;
  unint64_t v22;
  int v24;
  WebCore::ScrollingStateTree *v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;

  v4 = *(_DWORD *)(a1 + 56);
  if (v4 == 2)
  {
    v10 = (uint64_t *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                               - 1640531527);
      v13 = (a2 >> 37) & 0x7FFF800 ^ ((v12 + WORD2(a2) + (v12 >> 11)) << 16) ^ (v12 + WORD2(a2) + (v12 >> 11));
      v14 = (a3 >> 5) & 0x7FFF800 ^ ((v13 + (unsigned __int16)a3 + (v13 >> 11)) << 16) ^ (v13 + (unsigned __int16)a3 + (v13 >> 11));
      v15 = (a3 >> 37) & 0x7FFF800 ^ ((v14 + WORD2(a3) + (v14 >> 11)) << 16) ^ (v14 + WORD2(a3) + (v14 >> 11));
      v16 = (v15 + (v15 >> 11)) ^ (8 * (v15 + (v15 >> 11)));
      v17 = (v16 + (v16 >> 5)) ^ (4 * (v16 + (v16 >> 5)));
      v18 = (v17 + (v17 >> 15)) ^ ((v17 + (v17 >> 15)) << 10);
      if (!v18)
        v18 = 0x800000;
      v19 = v11 & v18;
      v20 = (void **)(v9 + 24 * (v11 & v18));
      v21 = (unint64_t)*v20;
      v22 = (unint64_t)v20[1];
      if (*v20 == (void *)a2 && v22 == a3)
      {
LABEL_26:
        if (v20 != (void **)(v9 + 24 * *(unsigned int *)(v9 - 4)))
        {
          *(_OWORD *)v20 = xmmword_1968C18F0;
          v26 = (WebCore::ScrollingStateTree *)v20[2];
          v20[2] = 0;
          if (v26)
          {
            WebCore::ScrollingStateTree::~ScrollingStateTree(v26, (void *)a2);
            if (*(_DWORD *)v27)
            {
              *((_OWORD *)v27 + 3) = 0u;
              *((_OWORD *)v27 + 4) = 0u;
              *((_OWORD *)v27 + 1) = 0u;
              *((_OWORD *)v27 + 2) = 0u;
              *(_OWORD *)v27 = 0u;
            }
            else
            {
              WTF::fastFree(v27, v28);
            }
          }
          ++*(_DWORD *)(*v10 - 16);
          v29 = *v10;
          if (*v10)
            v30 = *(_DWORD *)(v29 - 12) - 1;
          else
            v30 = -1;
          *(_DWORD *)(v29 - 12) = v30;
          v31 = *v10;
          if (*v10)
          {
            v32 = 6 * *(_DWORD *)(v31 - 12);
            v33 = *(_DWORD *)(v31 - 4);
            if (v32 < v33 && v33 >= 9)
              WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v10, v33 >> 1, 0);
          }
        }
      }
      else
      {
        v24 = 1;
        while (v21 | v22)
        {
          v19 = (v19 + v24) & v11;
          v20 = (void **)(v9 + 24 * v19);
          v21 = (unint64_t)*v20;
          v22 = (unint64_t)v20[1];
          ++v24;
          if (*v20 == (void *)a2 && v22 == a3)
            goto LABEL_26;
        }
      }
    }
  }
  else if (v4 == 1 && *(_QWORD *)(a1 + 32) == a2 && *(_QWORD *)(a1 + 40) == a3)
  {
    v6 = *(WebCore::ScrollingStateTree **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v6)
    {
      WebCore::ScrollingStateTree::~ScrollingStateTree(v6, (void *)a2);
      if (*(_DWORD *)v7)
      {
        *((_OWORD *)v7 + 3) = 0u;
        *((_OWORD *)v7 + 4) = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        *((_OWORD *)v7 + 2) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree(v7, v8);
      }
    }
    *(_DWORD *)(a1 + 56) = 0;
  }
}

uint64_t WebCore::AsyncScrollingCoordinator::willCommitTree(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  void **v4;
  int v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  void **v22;
  unint64_t v23;
  unint64_t v24;
  int v26;
  void **v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  uint64_t v40;
  WebCore::Document *v41;
  uint64_t v42;
  void *v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  WTF *v48;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WebCore::Region *v61;
  __int128 v62;
  WTF *v63[2];

  if (!*(_BYTE *)(result + 72))
    return result;
  v3 = result;
  v4 = (void **)(result + 32);
  v5 = *(_DWORD *)(result + 56);
  if (v5 != 2)
  {
    if (v5 != 1)
      return result;
    if (*(_QWORD *)(result + 32) != a2 || *(_QWORD *)(result + 40) != a3)
      return result;
LABEL_9:
    v7 = v4[2];
    if (!v7)
      return result;
    v8 = v7[7];
    if (!v8)
      return result;
    v9 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
LABEL_14:
      ++*(_QWORD *)(v9 + 8);
      v11 = __ldxr((unsigned __int8 *)v9);
      if (v11 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
        {
LABEL_38:
          v29 = *(_QWORD *)(v8 + 8);
          if (__ldaxr((unsigned __int8 *)v29))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v29))
          {
LABEL_41:
            v31 = *(_QWORD *)(v29 + 8);
            v32 = v31 - 1;
            *(_QWORD *)(v29 + 8) = v31 - 1;
            if (v31 == 1)
            {
              v57 = *(_QWORD *)(v29 + 16);
              v33 = *(_QWORD *)(v29 + 24);
              *(_QWORD *)(v29 + 24) = 0;
              v34 = v57 != 0;
            }
            else
            {
              v33 = 0;
              v34 = 1;
            }
            v35 = __ldxr((unsigned __int8 *)v29);
            if (v35 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v29))
                goto LABEL_45;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v29);
LABEL_45:
            if (!v32)
            {
              if (v33)
                (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
              if (!v34)
                WTF::fastFree((WTF *)v29, (void *)a2);
            }
            v36 = v7[7];
            if (!v36)
              goto LABEL_57;
            v37 = *(_QWORD *)(v36 + 8);
            if (__ldaxr((unsigned __int8 *)v37))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v37))
            {
              goto LABEL_50;
            }
            MEMORY[0x19AEA534C](v37);
LABEL_50:
            ++*(_QWORD *)(v37 + 8);
            v39 = __ldxr((unsigned __int8 *)v37);
            if (v39 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v37))
                goto LABEL_57;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v37);
LABEL_57:
            v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 160);
            if (v40
              && !*(_BYTE *)(v40 + 144)
              && (v41 = *(WebCore::Document **)(v40 + 296)) != 0
              && (v42 = *((_QWORD *)v41 + 243)) != 0
              && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 24) + 8) + 40) + 8) + 3405))
            {
              WebCore::Document::eventTrackingRegions(v41, (uint64_t)&v62);
            }
            else
            {
              v62 = 0u;
              *(_OWORD *)v63 = 0u;
            }
            result = WebCore::operator==(v36 + 776, (uint64_t)&v62);
            if ((result & 1) == 0)
            {
              result = WebCore::EventTrackingRegions::operator=(v36 + 776, (uint64_t)&v62);
              v59 = *(_QWORD *)(v36 + 40);
              if ((v59 & 0x800000) == 0)
              {
                *(_QWORD *)(v36 + 40) = v59 | 0x800000;
                result = WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v36 + 48), 1);
              }
            }
            v44 = v63[1];
            if (v63[1])
            {
              v60 = *((unsigned int *)v63[1] - 1);
              if ((_DWORD)v60)
              {
                v61 = (WTF *)((char *)v63[1] + 8);
                do
                {
                  if (*((unsigned __int8 *)v61 - 8) != 254)
                    WebCore::Region::~Region(v61, v43);
                  v61 = (WebCore::Region *)((char *)v61 + 32);
                  --v60;
                }
                while (v60);
              }
              result = WTF::fastFree((WTF *)((char *)v44 - 16), v43);
            }
            v45 = v63[0];
            v63[0] = 0;
            if (v45)
            {
              v46 = (WTF *)*((_QWORD *)v45 + 18);
              if ((WTF *)((char *)v45 + 160) != v46 && v46 != 0)
              {
                *((_QWORD *)v45 + 18) = 0;
                *((_DWORD *)v45 + 38) = 0;
                WTF::fastFree(v46, v43);
              }
              v48 = *(WTF **)v45;
              if ((WTF *)((char *)v45 + 16) != *(WTF **)v45 && v48 != 0)
              {
                *(_QWORD *)v45 = 0;
                *((_DWORD *)v45 + 2) = 0;
                WTF::fastFree(v48, v43);
              }
              result = WTF::fastFree(v45, v43);
            }
            if (!v36)
              goto LABEL_86;
            v50 = *(_QWORD *)(v36 + 8);
            if (__ldaxr((unsigned __int8 *)v50))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v50))
            {
LABEL_81:
              v52 = *(_QWORD *)(v50 + 8);
              v53 = v52 - 1;
              *(_QWORD *)(v50 + 8) = v52 - 1;
              if (v52 == 1)
              {
                v58 = *(_QWORD *)(v50 + 16);
                v54 = *(_QWORD *)(v50 + 24);
                *(_QWORD *)(v50 + 24) = 0;
                v55 = v58 != 0;
              }
              else
              {
                v54 = 0;
                v55 = 1;
              }
              v56 = __ldxr((unsigned __int8 *)v50);
              if (v56 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v50))
                  goto LABEL_85;
              }
              else
              {
                __clrex();
              }
              result = WTF::Lock::unlockSlow((WTF::Lock *)v50);
LABEL_85:
              if (!v53)
              {
                if (v54)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
                if (!v55)
                  result = WTF::fastFree((WTF *)v50, v43);
              }
LABEL_86:
              *(_BYTE *)(v3 + 72) = 0;
              return result;
            }
            result = MEMORY[0x19AEA534C](v50);
            goto LABEL_81;
          }
          MEMORY[0x19AEA534C](v29);
          goto LABEL_41;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_38;
    }
    MEMORY[0x19AEA534C](v9);
    goto LABEL_14;
  }
  v12 = *v4;
  if (v12)
  {
    v13 = *(v12 - 2);
    v14 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                             - 1640531527);
    v15 = (a2 >> 37) & 0x7FFF800 ^ ((v14 + WORD2(a2) + (v14 >> 11)) << 16) ^ (v14 + WORD2(a2) + (v14 >> 11));
    v16 = (a3 >> 5) & 0x7FFF800 ^ ((v15 + (unsigned __int16)a3 + (v15 >> 11)) << 16) ^ (v15 + (unsigned __int16)a3 + (v15 >> 11));
    v17 = (a3 >> 37) & 0x7FFF800 ^ ((v16 + WORD2(a3) + (v16 >> 11)) << 16) ^ (v16 + WORD2(a3) + (v16 >> 11));
    v18 = (v17 + (v17 >> 11)) ^ (8 * (v17 + (v17 >> 11)));
    v19 = (v18 + (v18 >> 5)) ^ (4 * (v18 + (v18 >> 5)));
    v20 = (v19 + (v19 >> 15)) ^ ((v19 + (v19 >> 15)) << 10);
    if (!v20)
      v20 = 0x800000;
    v21 = v13 & v20;
    v22 = (void **)&v12[6 * (v13 & v20)];
    v23 = (unint64_t)*v22;
    v24 = (unint64_t)v22[1];
    if (*v22 != (void *)a2 || v24 != a3)
    {
      v26 = 1;
      do
      {
        v22 = (void **)(v23 | v24);
        if (!(v23 | v24))
          break;
        v21 = (v21 + v26) & v13;
        v22 = (void **)&v12[6 * v21];
        v23 = (unint64_t)*v22;
        v24 = (unint64_t)v22[1];
        ++v26;
      }
      while (*v22 != (void *)a2 || v24 != a3);
    }
    v28 = (void **)&v12[6 * *(v12 - 1)];
    v4 = v22 ? v22 : (void **)&v12[6 * *(v12 - 1)];
    if (v28 != v4)
      goto LABEL_9;
  }
  return result;
}

const WebCore::ScrollableArea *WebCore::AsyncScrollingCoordinator::updateIsMonitoringWheelEventsForFrameView(const WebCore::ScrollableArea *this, const WebCore::LocalFrameView *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 41) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      ++*(_DWORD *)v3;
      this = (const WebCore::ScrollableArea *)WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v19, this, (uint64_t)a2 + 64);
      v5 = v19;
      if (!v19)
        goto LABEL_24;
      v6 = *(unsigned __int8 *)(v19 + 16);
      v19 = 0;
      if (v6 < 2)
      {
        v7 = *(_QWORD *)(v3 + 968) != 0;
        if (*(unsigned __int8 *)(v5 + 533) != v7)
        {
          *(_BYTE *)(v5 + 533) = v7;
          v8 = *(_QWORD *)(v5 + 40);
          if ((v8 & 0x800) == 0)
          {
            *(_QWORD *)(v5 + 40) = v8 | 0x800;
            this = (const WebCore::ScrollableArea *)WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v5 + 48), 1);
          }
        }
      }
      v9 = *(_QWORD *)(v5 + 8);
      if (__ldaxr((unsigned __int8 *)v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v9))
      {
        goto LABEL_12;
      }
      this = (const WebCore::ScrollableArea *)MEMORY[0x19AEA534C](v9);
LABEL_12:
      v11 = *(_QWORD *)(v9 + 8);
      v12 = v11 - 1;
      *(_QWORD *)(v9 + 8) = v11 - 1;
      if (v11 == 1)
      {
        v18 = *(_QWORD *)(v9 + 16);
        v13 = *(_QWORD *)(v9 + 24);
        *(_QWORD *)(v9 + 24) = 0;
        v14 = v18 != 0;
      }
      else
      {
        v13 = 0;
        v14 = 1;
      }
      v15 = __ldxr((unsigned __int8 *)v9);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
        {
          if (!v12)
            goto LABEL_20;
          goto LABEL_24;
        }
      }
      else
      {
        __clrex();
      }
      this = (const WebCore::ScrollableArea *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (!v12)
      {
LABEL_20:
        if (v13)
          this = (const WebCore::ScrollableArea *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        if (!v14)
          this = (const WebCore::ScrollableArea *)WTF::fastFree((WTF *)v9, v4);
      }
LABEL_24:
      if (*(_DWORD *)v3 == 1)
      {
        WebCore::Page::~Page(v3);
        return (const WebCore::ScrollableArea *)WTF::fastFree(v16, v17);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
  }
  return this;
}

unsigned __int8 **WebCore::AsyncScrollingCoordinator::ensureRootStateNodeForFrameView(WebCore::AsyncScrollingCoordinator *this, WebCore::LocalFrameView *a2)
{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v13, this, (uint64_t)a2 + 64);
  if (v13)
    return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v13 + 8), v4);
  v6 = *((_QWORD *)a2 + 41);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 632) + 8);
  v8 = *(_QWORD *)(v6 + 296);
  if (v8 && (v9 = *(_QWORD *)(v8 + 1944)) != 0 && (v10 = *(_QWORD *)(*(_QWORD *)(v9 + 144) + 256)) != 0)
  {
    v11 = *(_QWORD *)(v10 + 224);
    v12 = *(_QWORD *)(v10 + 232);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  return (unsigned __int8 **)(*(uint64_t (**)(WebCore::AsyncScrollingCoordinator *, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 240))(this, *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), 0, v11, v12, 0, 0, 0);
}

uint64_t WebCore::ScrollingCoordinator::frameViewRootLayerDidChange(WebCore::ScrollingCoordinator *this, WebCore::LocalFrameView *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ScrollingCoordinator *))(*(_QWORD *)this + 40))(this);
  if ((_DWORD)result)
  {
    (*(void (**)(WebCore::ScrollingCoordinator *, WebCore::LocalFrameView *))(*(_QWORD *)this + 64))(this, a2);
    return WebCore::ScrollingCoordinator::updateSynchronousScrollingReasons(this, a2);
  }
  return result;
}

uint64_t WebCore::ScrollingCoordinator::scrollContainerLayerForFrameView(uint64_t this, WebCore::LocalFrameView *a2)
{
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  WebCore::RenderLayerCompositor *v4;
  WebCore::RenderLayerCompositor *v5;
  WTF *v6;
  void *v7;

  if (this)
  {
    v2 = *(WebCore::RenderView **)(this + 1944);
    if (v2)
    {
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
      if (!v3)
      {
        v4 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v4, v2);
        v5 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
        *((_QWORD *)v2 + 50) = v3;
        if (v5)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v5);
          WTF::fastFree(v6, v7);
          v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
        }
      }
      return *((_QWORD *)v3 + 30);
    }
    else
    {
      return 0;
    }
  }
  return this;
}

WebCore::RenderView *WebCore::ScrollingCoordinator::counterScrollingLayerForFrameView(WebCore::RenderView *this, WebCore::LocalFrameView *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (this)
  {
    this = (WebCore::RenderView *)*((_QWORD *)this + 243);
    if (this)
    {
      v2 = *(_QWORD *)(*(_QWORD *)(WebCore::RenderView::compositor(this) + 8) + 144);
      if (v2 && (v3 = *(_QWORD *)(v2 + 256)) != 0 && *(_BYTE *)(v3 + 294))
        return *(WebCore::RenderView **)(v3 + 88);
      else
        return 0;
    }
  }
  return this;
}

uint64_t WebCore::AsyncScrollingCoordinator::requestStartKeyboardScrollAnimation(WebCore::ScrollableArea *a1, uint64_t a2, _OWORD *a3)
{
  void *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[31];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v14, a1, a2);
  v6 = v14;
  if (!v14)
    return 0;
  v7 = *(unsigned __int8 *)(v14 + 16);
  v8 = v7 > 5;
  v9 = (1 << v7) & 0x2B;
  if (v8 || v9 == 0)
  {
    v12 = 0;
  }
  else
  {
    *(_OWORD *)&v15[3] = *a3;
    *(_OWORD *)&v15[15] = *(_OWORD *)((char *)a3 + 12);
    *(_BYTE *)(v14 + 496) = 0;
    *(_OWORD *)(v6 + 497) = *(_OWORD *)v15;
    *(_OWORD *)(v6 + 512) = *(_OWORD *)&v15[15];
    *(_BYTE *)(v6 + 528) = 1;
    v11 = *(_QWORD *)(v6 + 40);
    if ((v11 & 0x200000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v11 | 0x200000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
    (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)a1 + 176))(a1);
    v12 = 1;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v6 + 8), v5);
  return v12;
}

uint64_t WebCore::AsyncScrollingCoordinator::requestStopKeyboardScrollAnimation(WebCore::AsyncScrollingCoordinator *this, WebCore::ScrollableArea *a2, int a3)
{
  void *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v15, this, (uint64_t)a2);
  v6 = v15;
  if (!v15)
    return 0;
  v7 = *(unsigned __int8 *)(v15 + 16);
  v8 = v7 > 5;
  v9 = (1 << v7) & 0x2B;
  if (v8 || v9 == 0)
  {
    v13 = 0;
  }
  else
  {
    if (a3)
      v11 = 2;
    else
      v11 = 1;
    *(_BYTE *)(v15 + 496) = v11;
    *(_BYTE *)(v6 + 500) = 0;
    *(_BYTE *)(v6 + 528) = 0;
    v12 = *(_QWORD *)(v6 + 40);
    if ((v12 & 0x200000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v12 | 0x200000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
    (*(void (**)(WebCore::AsyncScrollingCoordinator *))(*(_QWORD *)this + 176))(this);
    v13 = 1;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v6 + 8), v5);
  return v13;
}

uint64_t WebCore::AsyncScrollingCoordinator::applyScrollUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
  {
    WebCore::ScrollingTree::takePendingScrollUpdates(v6, &v11);
    v9 = v11;
    if (v13)
    {
      v10 = 40 * v13;
      do
      {
        WebCore::AsyncScrollingCoordinator::applyScrollPositionUpdate(a1, (uint64_t)v9, 0);
        v9 = (WTF *)((char *)v9 + 40);
        v10 -= 40;
      }
      while (v10);
      v9 = v11;
    }
    if (v9)
    {
      v11 = 0;
      v12 = 0;
      WTF::fastFree(v9, v8);
    }
  }
  return WebCore::AsyncScrollingCoordinator::applyScrollPositionUpdate(a1, a2, a3);
}

uint64_t WebCore::AsyncScrollingCoordinator::stopAnimatedScroll(WebCore::AsyncScrollingCoordinator *this, WebCore::ScrollableArea *a2)
{
  uint64_t result;
  uint64_t v5;
  _DWORD *v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  _OWORD *v13;
  uint64_t v14;
  _BYTE v15[19];
  char v16;
  char v17;
  uint64_t v18;

  result = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)a2 + 296))(a2);
  if (result)
  {
    result = WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode((uint64_t)this, (_QWORD *)result, v5);
    if (result)
    {
      v6 = (_DWORD *)result;
      ++*(_DWORD *)(result + 8);
      result = (*(uint64_t (**)(WebCore::AsyncScrollingCoordinator *, uint64_t))(*(_QWORD *)this + 40))(this, result);
      if ((_DWORD)result)
      {
        result = WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v18, this, (uint64_t)a2);
        v8 = v18;
        if (v18)
        {
          v9 = *(unsigned __int8 *)(v18 + 16);
          v10 = v9 > 5;
          v11 = (1 << v9) & 0x2B;
          if (!v10 && v11 != 0)
          {
            v15[0] = 2;
            *(_QWORD *)&v15[4] = 0;
            *(_DWORD *)&v15[12] = 0;
            *(_WORD *)&v15[16] = 256;
            v15[18] = 0;
            v16 = 0;
            v17 = 0;
            v13 = (_OWORD *)(v18 + 452);
            v14 = *(_QWORD *)(v18 + 40);
            if ((v14 & 0x80) != 0)
            {
              WebCore::RequestedScrollData::merge((uint64_t)v13, v15);
            }
            else
            {
              *v13 = *(_OWORD *)v15;
              *(_DWORD *)(v8 + 467) = *(_DWORD *)&v15[15];
              if (*(_BYTE *)(v8 + 492))
                *(_BYTE *)(v8 + 492) = 0;
              *(_QWORD *)(v8 + 40) = v14 | 0x80;
              WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v8 + 48), 1);
            }
            (*(void (**)(WebCore::AsyncScrollingCoordinator *))(*(_QWORD *)this + 176))(this);
          }
          result = (uint64_t)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v8 + 8), v7);
        }
      }
      if (v6[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
    }
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::setScrollbarLayoutDirection(WebCore::ScrollableArea *a1, uint64_t a2, int a3)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  result = WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v20, a1, a2);
  v6 = v20;
  if (!v20)
    return result;
  v7 = *(unsigned __int8 *)(v20 + 16);
  v8 = v7 > 5;
  v9 = (1 << v7) & 0x2B;
  if (v8 || v9 == 0)
  {
    v20 = 0;
  }
  else
  {
    v20 = 0;
    if ((((*(_BYTE *)(v6 + 532) == 0) ^ a3) & 1) == 0)
    {
      *(_BYTE *)(v6 + 532) = a3;
      v11 = *(_QWORD *)(v6 + 40);
      if ((v11 & 0x100000) == 0)
      {
        *(_QWORD *)(v6 + 40) = v11 | 0x100000;
        result = WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
      }
    }
  }
  v12 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_14;
  }
  result = MEMORY[0x19AEA534C](v12);
LABEL_14:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v19 = *(_QWORD *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    v17 = v19 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v12);
  if (v18 != 1)
  {
    __clrex();
LABEL_21:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      return result;
    goto LABEL_22;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
    goto LABEL_21;
  if (v15)
    return result;
LABEL_22:
  if (v16)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!v17)
    return WTF::fastFree((WTF *)v12, v5);
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::setMouseIsOverScrollbar(WebCore::AsyncScrollingCoordinator *this, WebCore::Scrollbar *a2, int a3)
{
  uint64_t result;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  result = WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v27, this, *((_QWORD *)a2 + 8));
  v7 = v27;
  if (!v27)
    return result;
  v8 = *(unsigned __int8 *)(v27 + 16);
  v9 = v8 > 5;
  v10 = (1 << v8) & 0x2B;
  if (v9 || v10 == 0)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    v12 = *((unsigned __int8 *)a2 + 72);
    v13 = v12 == 1;
    if (v12 == 1)
      v14 = 0;
    else
      v14 = a3;
    if (v13)
      v15 = a3;
    else
      v15 = 0;
    if (*(unsigned __int8 *)(v7 + 416) != v14 || *(unsigned __int8 *)(v7 + 417) != v15)
    {
      v17 = v15 ? 256 : 0;
      *(_WORD *)(v7 + 416) = v17 | v14;
      v18 = *(_QWORD *)(v7 + 40);
      if ((v18 & 0x40000) == 0)
      {
        *(_QWORD *)(v7 + 40) = v18 | 0x40000;
        result = WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v7 + 48), 1);
      }
    }
  }
  v19 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_26;
  }
  result = MEMORY[0x19AEA534C](v19);
LABEL_26:
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v21 - 1;
  *(_QWORD *)(v19 + 8) = v21 - 1;
  if (v21 == 1)
  {
    v26 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    v24 = v26 != 0;
  }
  else
  {
    v23 = 0;
    v24 = 1;
  }
  v25 = __ldxr((unsigned __int8 *)v19);
  if (v25 != 1)
  {
    __clrex();
LABEL_33:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v19);
    if (v22)
      return result;
    goto LABEL_34;
  }
  if (__stlxr(0, (unsigned __int8 *)v19))
    goto LABEL_33;
  if (v22)
    return result;
LABEL_34:
  if (v23)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (!v24)
    return WTF::fastFree((WTF *)v19, v6);
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::setMouseIsOverContentArea(WebCore::AsyncScrollingCoordinator *this, WebCore::ScrollableArea *a2, int a3)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  result = WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v20, this, (uint64_t)a2);
  v6 = v20;
  if (!v20)
    return result;
  v7 = *(unsigned __int8 *)(v20 + 16);
  v8 = v7 > 5;
  v9 = (1 << v7) & 0x2B;
  if (v8 || v9 == 0)
  {
    v20 = 0;
  }
  else
  {
    v20 = 0;
    if (*(unsigned __int8 *)(v6 + 534) != a3)
    {
      *(_BYTE *)(v6 + 534) = a3;
      v11 = *(_QWORD *)(v6 + 40);
      if ((v11 & 0x10000) == 0)
      {
        *(_QWORD *)(v6 + 40) = v11 | 0x10000;
        result = WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
      }
    }
  }
  v12 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_14;
  }
  result = MEMORY[0x19AEA534C](v12);
LABEL_14:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v19 = *(_QWORD *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    v17 = v19 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v12);
  if (v18 != 1)
  {
    __clrex();
LABEL_21:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      return result;
    goto LABEL_22;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
    goto LABEL_21;
  if (v15)
    return result;
LABEL_22:
  if (v16)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!v17)
    return WTF::fastFree((WTF *)v12, v5);
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::setMouseMovedInContentArea(WebCore::AsyncScrollingCoordinator *this, WebCore::ScrollableArea *a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  result = WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v24, this, (uint64_t)a2);
  v5 = v24;
  if (!v24)
    return result;
  v6 = *(unsigned __int8 *)(v24 + 16);
  v7 = v6 > 5;
  v8 = (1 << v6) & 0x2B;
  if (v7 || v8 == 0)
  {
    v24 = 0;
  }
  else
  {
    v24 = 0;
    v23 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)a2 + 512))(a2);
    v10 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)a2 + 392))(a2);
    v11 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)a2 + 400))(a2);
    if (v10)
    {
      v12 = (*(uint64_t (**)(unint64_t, uint64_t *))(*(_QWORD *)v10 + 224))(v10, &v23);
      v10 = v12 & 0xFFFFFFFF00000000;
      v13 = v12;
    }
    else
    {
      v13 = 0;
    }
    if (v11)
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 224))(v11, &v23);
    else
      result = 0;
    *(_QWORD *)(v5 + 420) = v13 | v10;
    *(_QWORD *)(v5 + 428) = result;
    v14 = *(_QWORD *)(v5 + 40);
    if ((v14 & 0x20000) == 0)
    {
      *(_QWORD *)(v5 + 40) = v14 | 0x20000;
      result = WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v5 + 48), 1);
    }
  }
  v15 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_19;
  }
  result = MEMORY[0x19AEA534C](v15);
LABEL_19:
  v17 = *(_QWORD *)(v15 + 8);
  v18 = v17 - 1;
  *(_QWORD *)(v15 + 8) = v17 - 1;
  if (v17 == 1)
  {
    v22 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v20 = v22 != 0;
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  v21 = __ldxr((unsigned __int8 *)v15);
  if (v21 != 1)
  {
    __clrex();
LABEL_26:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v18)
      return result;
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
    goto LABEL_26;
  if (v18)
    return result;
LABEL_27:
  if (v19)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (!v20)
    return WTF::fastFree((WTF *)v15, v4);
  return result;
}

_QWORD *WebCore::AsyncScrollingCoordinator::setLayerHostingContextIdentifierForFrameHostingNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  _QWORD *result;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  WebCore::AsyncScrollingCoordinator *v21;
  WebCore::Scrollbar *v22;
  uint64_t v23;
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD *v26;

  v24[0] = a2;
  v24[1] = a3;
  v25[0] = v24;
  v25[1] = v24;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 == -1)
  {
    v21 = (WebCore::AsyncScrollingCoordinator *)std::__throw_bad_variant_access[abi:sn180100]();
    return (_QWORD *)WebCore::AsyncScrollingCoordinator::setScrollbarEnabled(v21, v22);
  }
  v26 = v25;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, _QWORD **, uint64_t))off_1E3403C68[v5])(&v23, &v26, a1 + 32);
  v10 = v23;
  if (v23)
  {
    v11 = *(unsigned __int8 *)(v23 + 16);
    v23 = 0;
    if (v11 != 2)
      goto LABEL_11;
    if (a5 && *(_BYTE *)(v10 + 136))
    {
      if (a4 == *(_QWORD *)(v10 + 128))
        goto LABEL_11;
    }
    else if ((a5 != 0) == (*(_BYTE *)(v10 + 136) != 0))
    {
      goto LABEL_11;
    }
    *(_QWORD *)(v10 + 128) = a4;
    *(_BYTE *)(v10 + 136) = a5;
    v12 = *(_QWORD *)(v10 + 40);
    if ((v12 & 2) == 0)
    {
      *(_QWORD *)(v10 + 40) = v12 | 2;
      result = (_QWORD *)WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v10 + 48), 1);
    }
LABEL_11:
    v13 = *(_QWORD *)(v10 + 8);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_15;
    }
    result = (_QWORD *)MEMORY[0x19AEA534C](v13);
LABEL_15:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v20 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v20 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (v16)
          return result;
LABEL_23:
        if (v17)
          result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        if (!v18)
          return (_QWORD *)WTF::fastFree((WTF *)v13, v9);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      return result;
    goto LABEL_23;
  }
  return result;
}

unsigned __int8 **WebCore::AsyncScrollingCoordinator::setScrollbarEnabled(WebCore::AsyncScrollingCoordinator *this, WebCore::Scrollbar *a2)
{
  unsigned __int8 **result;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  BOOL v9;
  uint64_t v10;

  result = (unsigned __int8 **)WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v10, this, *((_QWORD *)a2 + 8));
  v5 = v10;
  if (v10)
  {
    v6 = *(unsigned __int8 *)(v10 + 16);
    v7 = v6 >= 5;
    v9 = v6 == 5;
    v8 = (1 << v6) & 0x2B;
    v9 = !v9 && v7 || v8 == 0;
    if (!v9)
      WebCore::ScrollingStateScrollingNode::setScrollbarEnabledState(v10, *((unsigned __int8 *)a2 + 72), *((unsigned __int8 *)a2 + 136));
    return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v5 + 8), v4);
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::applyScrollingTreeLayerPositions(WebCore::AsyncScrollingCoordinator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 80))(*((_QWORD *)this + 8));
}

uint64_t WebCore::AsyncScrollingCoordinator::animatedScrollWillStartForNode(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  v3 = *(_QWORD *)(result + 24);
  if (v3)
  {
    v4 = *(_DWORD **)(v3 + 8);
    if (v4)
    {
      v5 = result;
      ++*v4;
      result = WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode(result, a2, a3);
      if (result && !*(_BYTE *)(v5 + 128))
      {
        *(_BYTE *)(v5 + 128) = 1;
        if (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v5 + 96)))
          result = WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v5 + 96));
        else
          result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 80) + 16))(*(_QWORD *)(v5 + 80), 0);
      }
      if (*v4 == 1)
      {
        WebCore::Page::~Page((uint64_t)v4);
        return WTF::fastFree(v6, v7);
      }
      else
      {
        --*v4;
      }
    }
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::animatedScrollDidEndForNode(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 24);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      v6 = result;
      result = WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode(result, a2, a3);
      if (result)
      {
        v7 = result;
        ++*(_DWORD *)(result + 8);
        if (*(_BYTE *)(v6 + 128))
        {
          *(_BYTE *)(v6 + 128) = 0;
          result = WTF::RunLoop::TimerBase::start();
        }
        v8 = *(_QWORD **)(*(_QWORD *)(v7 + 328) + 296);
        if (v8 && (v8 = (_QWORD *)v8[243]) != 0)
        {
          v9 = *(_QWORD *)(v8[18] + 256);
          if (v9)
          {
            v8 = *(_QWORD **)(v9 + 224);
            v9 = *(_QWORD *)(v9 + 232);
          }
          else
          {
            v8 = 0;
          }
        }
        else
        {
          v9 = 0;
        }
        if (a2 == v8 && a3 == v9)
        {
          *(_BYTE *)(v7 + 109) = 0;
        }
        else
        {
          result = (uint64_t)WebCore::LocalFrameView::scrollableAreaForScrollingNodeID(v7, (uint64_t)a2, a3);
          if (result)
          {
            *(_BYTE *)(result + 45) = 0;
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 472))(result);
          }
        }
        if (*(_DWORD *)(v7 + 8) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        else
          --*(_DWORD *)(v7 + 8);
      }
    }
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::wheelEventScrollDidEndForNode(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 24);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      v4 = result;
      result = WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode(result, a2, a3);
      if (result)
      {
        if (*(_BYTE *)(v4 + 128))
        {
          *(_BYTE *)(v4 + 128) = 0;
          return WTF::RunLoop::TimerBase::start();
        }
      }
    }
  }
  return result;
}

unint64_t WebCore::roundedIntPoint(WebCore *this, const WebCore::FloatPoint *a2)
{
  float v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  unint64_t v6;

  v2 = roundf(*(float *)this);
  v3 = 0x7FFFFFFFLL;
  v4 = 0x80000000;
  if (v2 > -2147500000.0)
    v4 = (int)v2;
  if (v2 < 2147500000.0)
    v3 = v4;
  v5 = roundf(*((float *)this + 1));
  if (v5 >= 2147500000.0)
  {
    v6 = 0x7FFFFFFF00000000;
  }
  else if (v5 <= -2147500000.0)
  {
    v6 = 0x8000000000000000;
  }
  else
  {
    v6 = (unint64_t)(int)v5 << 32;
  }
  return v6 | v3;
}

WebCore::RenderView *WebCore::AsyncScrollingCoordinator::reconcileScrollPosition(WebCore::RenderView *result, int a2)
{
  uint64_t v2;
  WebCore::RenderView *v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;

  v2 = *(_QWORD *)(*((_QWORD *)result + 41) + 296);
  if (v2)
  {
    v3 = result;
    result = *(WebCore::RenderView **)(v2 + 1944);
    if (result)
    {
      result = (WebCore::RenderView *)WebCore::RenderView::compositor(result);
      v5 = *((_QWORD *)result + 30);
      if (v5)
      {
        v6 = (char *)v3 + 64;
        if (a2)
        {
          v8 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)v6 + 832))(v6, 0, 1);
          v9 = (float)(int)v8;
          v10 = (float)SHIDWORD(v8);
          return (WebCore::RenderView *)(*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)v5 + 176))(v5, &v9);
        }
        else
        {
          v7 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)v6 + 832))(v6, 0, 1);
          v9 = (float)(int)v7;
          v10 = (float)SHIDWORD(v7);
          return (WebCore::RenderView *)(*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)v5 + 168))(v5, &v9);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::scrollBySimulatingWheelEventForTesting(uint64_t result, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v5;
  unsigned __int8 *v10;
  __n128 v12;
  __n128 v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v18;
  uint64_t v19[2];

  v5 = *(_QWORD *)(result + 64);
  if (v5)
  {
    v10 = (unsigned __int8 *)(v5 + 12);
    if (__ldaxr((unsigned __int8 *)(v5 + 12)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
LABEL_6:
      v19[0] = a2;
      v19[1] = a3;
      if (a2)
      {
        result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v5 + 24), v19);
        if (result)
        {
          result = *(_QWORD *)(result + 16);
          if (result)
          {
            v14 = *(unsigned __int8 *)(result + 40);
            v15 = v14 > 5;
            v16 = (1 << v14) & 0x2B;
            if (!v15 && v16 != 0)
            {
              v13.n128_f32[0] = a5 + *(float *)(result + 148);
              *(float *)v19 = a4 + *(float *)(result + 144);
              v12.n128_f32[0] = *(float *)v19;
              HIDWORD(v19[0]) = v13.n128_u32[0];
              result = WebCore::ScrollingTreeScrollingNode::scrollTo(result, (unsigned __int32 *)v19, 0, 1, v12, v13);
            }
          }
        }
      }
      v18 = __ldxr(v10);
      if (v18 == 1)
      {
        if (!__stlxr(0, v10))
          return result;
      }
      else
      {
        __clrex();
      }
      return WTF::Lock::unlockSlow((WTF::Lock *)(v5 + 12));
    }
    result = MEMORY[0x19AEA534C](v5 + 12);
    goto LABEL_6;
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::scrollableAreaScrollbarLayerDidChange(WebCore::ScrollableArea *a1, _QWORD *a2, int a3)
{
  void *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;

  WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v38, a1, (uint64_t)a2);
  v6 = v38;
  if (!v38)
    goto LABEL_21;
  v7 = *(unsigned __int8 *)(v38 + 16);
  v8 = v7 > 5;
  v9 = (1 << v7) & 0x2B;
  if (v8 || v9 == 0)
  {
    v38 = 0;
  }
  else
  {
    v38 = 0;
    if (a3 == 1)
    {
      v11 = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 680))(a2);
      v12 = v11;
      if (v11)
      {
        ++v11[2];
        v35 = (unint64_t)v11;
        *(_QWORD *)&v36 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 32))(v11);
        *((_QWORD *)&v36 + 1) = v13;
      }
      else
      {
        v35 = 0u;
        v36 = 0u;
      }
      v37 = 1;
      WebCore::ScrollingStateScrollingNode::setVerticalScrollbarLayer((char *)v6, (const WebCore::LayerRepresentation *)&v35);
      if (v12)
      {
        if (v12[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
        else
          --v12[2];
      }
    }
    else
    {
      v25 = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 672))(a2);
      if (v25)
      {
        ++v25[2];
        v35 = (unint64_t)v25;
        *(_QWORD *)&v36 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v25 + 32))(v25);
        *((_QWORD *)&v36 + 1) = v26;
      }
      else
      {
        v35 = 0u;
        v36 = 0u;
      }
      v37 = 1;
      WebCore::ScrollingStateScrollingNode::setHorizontalScrollbarLayer((CFTypeRef)v6, (const WebCore::LayerRepresentation *)&v35);
      WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation *)&v35);
    }
    v14 = (*(uint64_t (**)(_QWORD *))(*a2 + 704))(a2);
    if (((v14 ^ (*(_BYTE *)(v6 + 532) == 0)) & 1) == 0)
    {
      *(_BYTE *)(v6 + 532) = v14;
      v28 = *(_QWORD *)(v6 + 40);
      if ((v28 & 0x100000) == 0)
      {
        *(_QWORD *)(v6 + 40) = v28 | 0x100000;
        WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
      }
    }
  }
  v15 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
LABEL_15:
    MEMORY[0x19AEA534C](v15);
    goto LABEL_16;
  }
  if (__stxr(1u, (unsigned __int8 *)v15))
    goto LABEL_15;
LABEL_16:
  v17 = *(_QWORD *)(v15 + 8);
  v18 = v17 - 1;
  *(_QWORD *)(v15 + 8) = v17 - 1;
  if (v17 == 1)
  {
    v27 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v20 = v27 != 0;
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  v21 = __ldxr((unsigned __int8 *)v15);
  if (v21 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v15))
      goto LABEL_20;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_20:
  if (!v18)
  {
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (!v20)
      WTF::fastFree((WTF *)v15, v5);
  }
LABEL_21:
  v22 = (_QWORD *)a2[3];
  if (a3 == 1)
  {
    if (!v22)
    {
      if ((*(unsigned int (**)(_QWORD *))(*a2 + 688))(a2))
      {
        v39 = a2;
        std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v35, (uint64_t)a2, (uint64_t *)&v39);
        v30 = v35;
        *(_QWORD *)&v35 = 0;
        v31 = a2[3];
        a2[3] = v30;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100]((WTF **)&v35, v29);
      }
      else
      {
        (*(void (**)(_QWORD *))(*a2 + 304))(a2);
      }
      v22 = (_QWORD *)a2[3];
      if (!v22)
      {
        __break(0xC471u);
        JUMPOUT(0x19608E8A4);
      }
    }
    v23 = 29;
  }
  else
  {
    if (!v22)
    {
      if ((*(unsigned int (**)(_QWORD *))(*a2 + 688))(a2))
      {
        v39 = a2;
        std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v35, (uint64_t)a2, (uint64_t *)&v39);
        v33 = v35;
        *(_QWORD *)&v35 = 0;
        v34 = a2[3];
        a2[3] = v33;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100]((WTF **)&v35, v32);
      }
      else
      {
        (*(void (**)(_QWORD *))(*a2 + 304))(a2);
      }
      v22 = (_QWORD *)a2[3];
      if (!v22)
      {
        __break(0xC471u);
        JUMPOUT(0x19608E8F0);
      }
    }
    v23 = 30;
  }
  return (*(uint64_t (**)(void))(*v22 + 8 * v23))();
}

unint64_t WebCore::AsyncScrollingCoordinator::createNode(uint64_t a1, unint64_t a2, unint64_t a3, void *a4, WebCore::ScrollingCoordinator *a5, unint64_t a6)
{
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  WebCore::ScrollingCoordinator *v28;
  void *v29;
  void *v30;

  v10 = (uint64_t *)WebCore::AsyncScrollingCoordinator::ensureScrollingStateTreeForRootFrameID(a1, a2, a3);
  v11 = v10[7];
  if (!v11)
  {
    if ((_DWORD)a4 == 1)
      return WebCore::ScrollingStateTree::insertNode(v10, a4, a5, a6, 0, 0, 0);
    return WebCore::ScrollingStateTree::createUnparentedNode(v10, (int)a4, a5, a6);
  }
  v14 = *(unsigned __int8 **)(v11 + 8);
  v12 = (unsigned __int8 **)(v11 + 8);
  v13 = v14;
  if (__ldaxr(v14))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](v13);
    goto LABEL_5;
  }
  if (__stxr(1u, v13))
    goto LABEL_4;
LABEL_5:
  ++*((_QWORD *)v13 + 1);
  v16 = __ldxr(v13);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v13))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  v17 = v10[7];
  if (!v17)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v12, v9);
    return WebCore::ScrollingStateTree::createUnparentedNode(v10, (int)a4, a5, a6);
  }
  v20 = *(unsigned __int8 **)(v17 + 8);
  v18 = (unsigned __int8 **)(v17 + 8);
  v19 = v20;
  if (__ldaxr(v20))
  {
    __clrex();
LABEL_13:
    MEMORY[0x19AEA534C](v19);
    goto LABEL_14;
  }
  if (__stxr(1u, v19))
    goto LABEL_13;
LABEL_14:
  ++*((_QWORD *)v19 + 1);
  v22 = __ldxr(v19);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v19))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
  v23 = v10[7];
  if (!v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v23 + 8);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_23:
  ++*(_QWORD *)(v24 + 8);
  v26 = __ldxr((unsigned __int8 *)v24);
  if (v26 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v24))
      goto LABEL_28;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  v28 = *(WebCore::ScrollingCoordinator **)(v23 + 24);
  v27 = *(_QWORD *)(v23 + 32);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v23 + 8), v9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v18, v29);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v12, v30);
  if (v28 != a5 || v27 != a6)
    return WebCore::ScrollingStateTree::createUnparentedNode(v10, (int)a4, a5, a6);
  return WebCore::ScrollingStateTree::insertNode(v10, a4, a5, a6, 0, 0, 0);
}

unint64_t WebCore::AsyncScrollingCoordinator::insertNode(uint64_t a1, unint64_t a2, unint64_t a3, void *a4, WebCore::ScrollingCoordinator *a5, unint64_t a6, WebCore::ScrollingCoordinator *a7, unint64_t a8, unint64_t a9)
{
  uint64_t *v14;

  v14 = (uint64_t *)WebCore::AsyncScrollingCoordinator::ensureScrollingStateTreeForRootFrameID(a1, a2, a3);
  return WebCore::ScrollingStateTree::insertNode(v14, a4, a5, a6, a7, a8, a9);
}

uint64_t WebCore::AsyncScrollingCoordinator::unparentNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD *v10;

  v8[0] = a2;
  v8[1] = a3;
  v9[0] = v8;
  v9[1] = v8;
  v3 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v3 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AsyncScrollingCoordinator::unparentChildrenAndDestroyNode(v7);
  }
  else
  {
    v10 = v9;
    result = ((uint64_t (*)(_QWORD **, uint64_t))off_1E3403C80[v3])(&v10, a1 + 32);
    if (result)
      return WebCore::ScrollingStateTree::unparentNode(result, a2, a3);
  }
  return result;
}

uint64_t *WebCore::AsyncScrollingCoordinator::unparentChildrenAndDestroyNode(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD *v10;

  v8[0] = a2;
  v8[1] = a3;
  v9[0] = v8;
  v9[1] = v8;
  v3 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v3 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)WebCore::AsyncScrollingCoordinator::detachAndDestroySubtree(v7);
  }
  else
  {
    v10 = v9;
    result = (uint64_t *)((uint64_t (*)(_QWORD **, uint64_t))off_1E3403C80[v3])(&v10, a1 + 32);
    if (result)
      return WebCore::ScrollingStateTree::unparentChildrenAndDestroyNode(result, a2, a3);
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::detachAndDestroySubtree(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD *v10;

  v8[0] = a2;
  v8[1] = a3;
  v9[0] = v8;
  v9[1] = v8;
  v3 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v3 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AsyncScrollingCoordinator::clearAllNodes(v7);
  }
  else
  {
    v10 = v9;
    result = ((uint64_t (*)(_QWORD **, uint64_t))off_1E3403C80[v3])(&v10, a1 + 32);
    if (result)
      return WebCore::ScrollingStateTree::detachAndDestroySubtree(result, a2, a3);
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::clearAllNodes(uint64_t a1, unint64_t a2, unint64_t a3)
{
  WebCore::ScrollingStateTree *v3;

  v3 = (WebCore::ScrollingStateTree *)WebCore::AsyncScrollingCoordinator::ensureScrollingStateTreeForRootFrameID(a1, a2, a3);
  return WebCore::ScrollingStateTree::clear(v3);
}

uint64_t WebCore::AsyncScrollingCoordinator::parentOfNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD *v15;

  v13[0] = a2;
  v13[1] = a3;
  v14[0] = v13;
  v14[1] = v13;
  v4 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v4 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_24;
  }
  v15 = v14;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))off_1E3403C68[v4])(&v12, &v15, a1 + 32);
  if (!v12)
    return 0;
  v3 = *(_QWORD *)(v12 + 56);
  if (!v3)
    goto LABEL_4;
  v9 = *(_QWORD *)(v12 + 64);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_13:
  if (*(_QWORD *)(v3 + 24))
  {
    ++*(_QWORD *)(v3 + 8);
    goto LABEL_15;
  }
LABEL_24:
  v9 = 0;
LABEL_15:
  v11 = __ldxr((unsigned __int8 *)v3);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v9)
  {
LABEL_4:
    v6 = 0;
    goto LABEL_5;
  }
  v6 = *(_QWORD *)(v9 + 24);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v9 + 8), v5);
LABEL_5:
  v7 = v12;
  v12 = 0;
  if (v7)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v7 + 8), v5);
  return v6;
}

unsigned __int8 **WebCore::AsyncScrollingCoordinator::childrenOfNode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned __int8 **result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD *v15;

  v13[0] = a2;
  v13[1] = a3;
  v14[0] = v13;
  v14[1] = v13;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 == -1)
  {
    result = (unsigned __int8 **)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_14;
  }
  v15 = v14;
  result = (unsigned __int8 **)((unsigned __int8 **(*)(uint64_t *__return_ptr, _QWORD **, uint64_t))off_1E3403C68[v5])(&v12, &v15, a1 + 32);
  v8 = v12;
  if (!v12)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    return result;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *(unsigned int *)(v8 + 84);
  if (!(_DWORD)v9)
    goto LABEL_4;
  if (v9 >> 28)
  {
LABEL_14:
    __break(0xC471u);
    return result;
  }
  result = (unsigned __int8 **)WTF::fastMalloc((WTF *)(16 * v9));
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)a4 = result;
  if (*(_DWORD *)(v8 + 84))
  {
    v11 = 0;
    do
    {
      *(_OWORD *)&result[2 * v11] = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 72) + 8 * v11) + 24);
      ++v11;
    }
    while (v11 < *(unsigned int *)(v8 + 84));
    *(_DWORD *)(a4 + 12) = v11;
  }
LABEL_4:
  v10 = v12;
  v12 = 0;
  if (v10)
    return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v10 + 8), v7);
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::reconcileViewportConstrainedLayerPositions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD *v10;

  v8[0] = a2;
  v8[1] = a3;
  v9[0] = v8;
  v9[1] = v8;
  v3 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v3 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AsyncScrollingCoordinator::setNodeLayers(v7);
  }
  else
  {
    v10 = v9;
    result = ((uint64_t (*)(_QWORD **, uint64_t))off_1E3403C80[v3])(&v10, a1 + 32);
    if (result)
      return WebCore::ScrollingStateTree::reconcileViewportConstrainedLayerPositions(result, a2, a3);
  }
  return result;
}

_DWORD *WebCore::AsyncScrollingCoordinator::setNodeLayers(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _DWORD *result;
  char *v10;
  _DWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  _QWORD v47[2];
  __int128 *v48;

  v47[0] = a2;
  v47[1] = a3;
  *(_QWORD *)&v43 = v47;
  *((_QWORD *)&v43 + 1) = v47;
  v4 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v4 == -1)
  {
    v42 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)WebCore::AsyncScrollingCoordinator::setFrameScrollingNodeState(v42);
  }
  v48 = &v43;
  result = ((_DWORD *(*)(uint64_t *__return_ptr, __int128 **, uint64_t))off_1E3403C68[v4])(&v46, &v48, a1 + 32);
  v10 = (char *)v46;
  if (v46)
  {
    v11 = *(_DWORD **)a4;
    if (*(_QWORD *)a4)
    {
      ++v11[2];
      v43 = (unint64_t)v11;
      *(_QWORD *)&v44 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 32))(v11);
      *((_QWORD *)&v44 + 1) = v12;
    }
    else
    {
      v43 = 0u;
      v44 = 0u;
    }
    v45 = 1;
    result = WebCore::ScrollingStateNode::setLayer(v10, (const WebCore::LayerRepresentation *)&v43);
    if (v11)
    {
      if (v11[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
      else
        --v11[2];
    }
    v14 = v46;
    v15 = *(unsigned __int8 *)(v46 + 16);
    if (v15 > 5 || ((1 << v15) & 0x2B) == 0)
    {
      v46 = 0;
      goto LABEL_53;
    }
    v16 = *(_DWORD **)(a4 + 8);
    if (v16)
    {
      ++v16[2];
      v43 = (unint64_t)v16;
      *(_QWORD *)&v44 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 32))(v16);
      *((_QWORD *)&v44 + 1) = v17;
    }
    else
    {
      v43 = 0u;
      v44 = 0u;
    }
    v45 = 1;
    WebCore::ScrollingStateScrollingNode::setScrollContainerLayer((CFTypeRef)v14, (const WebCore::LayerRepresentation *)&v43);
    if (v16)
    {
      if (v16[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
      else
        --v16[2];
    }
    v18 = *(_DWORD **)(a4 + 16);
    if (v18)
    {
      ++v18[2];
      v43 = (unint64_t)v18;
      *(_QWORD *)&v44 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 32))(v18);
      *((_QWORD *)&v44 + 1) = v19;
    }
    else
    {
      v43 = 0u;
      v44 = 0u;
    }
    v45 = 1;
    WebCore::ScrollingStateScrollingNode::setScrolledContentsLayer((char *)v14, (const WebCore::LayerRepresentation *)&v43);
    if (v18)
    {
      if (v18[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
      else
        --v18[2];
    }
    v20 = *(_DWORD **)(a4 + 48);
    if (v20)
    {
      ++v20[2];
      v43 = (unint64_t)v20;
      *(_QWORD *)&v44 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v20 + 32))(v20);
      *((_QWORD *)&v44 + 1) = v21;
    }
    else
    {
      v43 = 0u;
      v44 = 0u;
    }
    v45 = 1;
    WebCore::ScrollingStateScrollingNode::setHorizontalScrollbarLayer((CFTypeRef)v14, (const WebCore::LayerRepresentation *)&v43);
    if (v20)
    {
      if (v20[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
      else
        --v20[2];
    }
    v22 = *(_DWORD **)(a4 + 56);
    if (v22)
    {
      ++v22[2];
      v43 = (unint64_t)v22;
      *(_QWORD *)&v44 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v22 + 32))(v22);
      *((_QWORD *)&v44 + 1) = v23;
    }
    else
    {
      v43 = 0u;
      v44 = 0u;
    }
    v45 = 1;
    WebCore::ScrollingStateScrollingNode::setVerticalScrollbarLayer((char *)v14, (const WebCore::LayerRepresentation *)&v43);
    if (v22)
    {
      if (v22[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
      else
        --v22[2];
    }
    result = (_DWORD *)WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode(a1, a2, a3);
    if (result)
    {
      v24 = result;
      ++result[2];
      result = WebCore::LocalFrameView::scrollableAreaForScrollingNodeID((uint64_t)result, (uint64_t)a2, a3);
      if (result)
      {
        v25 = result;
        (*(void (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
        v26 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v25 + 704))(v25);
        if (((v26 ^ (*(_BYTE *)(v14 + 532) == 0)) & 1) == 0)
        {
          *(_BYTE *)(v14 + 532) = v26;
          v41 = *(_QWORD *)(v14 + 40);
          if ((v41 & 0x100000) == 0)
          {
            *(_QWORD *)(v14 + 40) = v41 | 0x100000;
            WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v14 + 48), 1);
          }
        }
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v25 + 24))(v25);
      }
      if (v24[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    if (*(unsigned __int8 *)(v14 + 16) <= 1u)
    {
      v27 = *(_DWORD **)(a4 + 32);
      if (v27)
      {
        ++v27[2];
        v43 = (unint64_t)v27;
        *(_QWORD *)&v44 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v27 + 32))(v27);
        *((_QWORD *)&v44 + 1) = v28;
      }
      else
      {
        v43 = 0u;
        v44 = 0u;
      }
      v45 = 1;
      WebCore::ScrollingStateFrameScrollingNode::setInsetClipLayer((char *)v14, (const WebCore::LayerRepresentation *)&v43);
      if (v27)
      {
        if (v27[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
        else
          --v27[2];
      }
      v29 = *(_DWORD **)(a4 + 24);
      if (v29)
      {
        ++v29[2];
        v43 = (unint64_t)v29;
        *(_QWORD *)&v44 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v29 + 32))(v29);
        *((_QWORD *)&v44 + 1) = v30;
      }
      else
      {
        v43 = 0u;
        v44 = 0u;
      }
      v45 = 1;
      WebCore::ScrollingStateFrameScrollingNode::setCounterScrollingLayer((CFTypeRef)v14, (const WebCore::LayerRepresentation *)&v43);
      if (v29)
      {
        if (v29[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 16))(v29);
        else
          --v29[2];
      }
      v31 = *(_DWORD **)(a4 + 40);
      if (v31)
      {
        ++v31[2];
        v43 = (unint64_t)v31;
        *(_QWORD *)&v44 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v31 + 32))(v31);
        *((_QWORD *)&v44 + 1) = v32;
      }
      else
      {
        v43 = 0u;
        v44 = 0u;
      }
      v45 = 1;
      result = WebCore::ScrollingStateFrameScrollingNode::setRootContentsLayer((char *)v14, (const WebCore::LayerRepresentation *)&v43);
      if (v31)
      {
        if (v31[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
        else
          --v31[2];
      }
    }
    v14 = v46;
    v46 = 0;
    if (v14)
    {
LABEL_53:
      v33 = *(_QWORD *)(v14 + 8);
      if (__ldaxr((unsigned __int8 *)v33))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v33))
      {
LABEL_56:
        v35 = *(_QWORD *)(v33 + 8);
        v36 = v35 - 1;
        *(_QWORD *)(v33 + 8) = v35 - 1;
        if (v35 == 1)
        {
          v40 = *(_QWORD *)(v33 + 16);
          v37 = *(_QWORD *)(v33 + 24);
          *(_QWORD *)(v33 + 24) = 0;
          v38 = v40 != 0;
        }
        else
        {
          v37 = 0;
          v38 = 1;
        }
        v39 = __ldxr((unsigned __int8 *)v33);
        if (v39 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v33))
            goto LABEL_60;
        }
        else
        {
          __clrex();
        }
        result = (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_60:
        if (!v36)
        {
          if (v37)
            result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
          if (!v38)
            return (_DWORD *)WTF::fastFree((WTF *)v33, v13);
        }
        return result;
      }
      result = (_DWORD *)MEMORY[0x19AEA534C](v33);
      goto LABEL_56;
    }
  }
  return result;
}

_QWORD *WebCore::AsyncScrollingCoordinator::setFrameScrollingNodeState(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::LocalFrameView *a4)
{
  WebCore::LocalFrameView *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  void *v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  float v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  float v39;
  float v40;
  int v41;
  int v42;
  float v43;
  float v44;
  BOOL v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  float v53;
  float v54;
  unint64_t v56;
  float v57;
  float v58;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  _QWORD v115[2];
  _QWORD v116[2];
  _QWORD *v117;

  v115[0] = a2;
  v115[1] = a3;
  v116[0] = v115;
  v116[1] = v115;
  v7 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v7 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_175:
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    *((_BYTE *)v49 + 2664) = 1;
    goto LABEL_54;
  }
  v4 = a4;
  v117 = v116;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, _QWORD **, uint64_t))off_1E3403C68[v7])(&v114, &v117, a1 + 32);
  v6 = v114;
  if (!v114)
    return result;
  v11 = *(_QWORD *)(v114 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
LABEL_5:
    result = (_QWORD *)MEMORY[0x19AEA534C](v11);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v11))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v11 + 8);
  v13 = __ldxr((unsigned __int8 *)v11);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_10:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
  if (*(unsigned __int8 *)(v6 + 16) >= 2u)
    goto LABEL_84;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 160) + 136);
  v15 = *((_QWORD *)v4 + 41);
  v16 = *(_QWORD *)(v15 + 24);
  v17 = 1.0;
  if (v16)
  {
    v18 = *(_QWORD *)(v16 + 8);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (*(_QWORD *)(*(_QWORD *)(v15 + 128) + 8) == v15 && !*(_BYTE *)(v18 + 1098))
        v17 = *(float *)(v18 + 356);
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::Page::~Page(v18);
        WTF::fastFree(v89, v90);
      }
    }
  }
  if (*(float *)(v6 + 852) != v17)
  {
    *(float *)(v6 + 852) = v17;
    v106 = *(_QWORD *)(v6 + 40);
    if ((v106 & 0x400000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v106 | 0x400000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
  }
  v20 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v4 + 720))(v4);
  v21 = (unsigned int *)(v20 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  if (*(_QWORD *)(*(_QWORD *)(v20 + 128) + 8) == v20
    && (v82 = *(_QWORD *)(v20 + 24)) != 0
    && (v83 = *(_QWORD *)(v82 + 8)) != 0)
  {
    v23 = *(_DWORD *)(v83 + 664);
  }
  else
  {
    v23 = 0;
  }
  do
  {
    v24 = __ldaxr(v21);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v21));
  if (!v25)
  {
    atomic_store(1u, v21);
    v97 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v97 = off_1E31FE290;
    v97[1] = v21;
    v116[0] = v97;
    WTF::ensureOnMainThread();
    v98 = v116[0];
    v116[0] = 0;
    if (v98)
      (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  }
  if (*(_DWORD *)(v6 + 860) != v23)
  {
    *(_DWORD *)(v6 + 860) = v23;
    v107 = *(_QWORD *)(v6 + 40);
    if ((v107 & 0x10000000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v107 | 0x10000000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
  }
  v26 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v4 + 720))(v4);
  v27 = (unsigned int *)(v26 + 8);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  if (*(_QWORD *)(*(_QWORD *)(v26 + 128) + 8) == v26
    && (v84 = *(_QWORD *)(v26 + 24)) != 0
    && (v85 = *(_QWORD *)(v84 + 8)) != 0)
  {
    v29 = *(_DWORD *)(v85 + 668);
  }
  else
  {
    v29 = 0;
  }
  do
  {
    v30 = __ldaxr(v27);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, v27));
  if (!v31)
  {
    atomic_store(1u, v27);
    v99 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v99 = off_1E31FE290;
    v99[1] = v27;
    v116[0] = v99;
    WTF::ensureOnMainThread();
    v100 = v116[0];
    v116[0] = 0;
    if (v100)
      (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  }
  if (*(_DWORD *)(v6 + 864) != v29)
  {
    *(_DWORD *)(v6 + 864) = v29;
    v108 = *(_QWORD *)(v6 + 40);
    if ((v108 & 0x20000000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v108 | 0x20000000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
  }
  v32 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v4 + 720))(v4);
  v33 = (unsigned int *)(v32 + 8);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 + 1, v33));
  v35 = 0.0;
  if (*(_QWORD *)(*(_QWORD *)(v32 + 128) + 8) == v32)
  {
    v87 = *(_QWORD *)(v32 + 24);
    if (v87)
    {
      v88 = *(_QWORD *)(v87 + 8);
      if (v88)
        v35 = *(float *)(v88 + 372);
    }
  }
  do
  {
    v36 = __ldaxr(v33);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, v33));
  if (!v37)
  {
    atomic_store(1u, v33);
    v101 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v101 = off_1E31FE290;
    v101[1] = v33;
    v116[0] = v101;
    WTF::ensureOnMainThread();
    v102 = v116[0];
    v116[0] = 0;
    if (v102)
      (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
  }
  if (*(float *)(v6 + 856) != v35)
  {
    *(float *)(v6 + 856) = v35;
    v96 = *(_QWORD *)(v6 + 40);
    if ((v96 & 0x80000000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v96 | 0x80000000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
  }
  v38 = WebCore::LocalFrameView::layoutViewportRect(v4);
  v39 = (float)(int)v38 * 0.015625;
  v40 = (float)SHIDWORD(v38) * 0.015625;
  v43 = (float)v41 * 0.015625;
  v44 = (float)v42 * 0.015625;
  v45 = *(float *)(v6 + 808) == v39 && *(float *)(v6 + 812) == v40;
  if (!v45 || (*(float *)(v6 + 816) == v43 ? (v46 = *(float *)(v6 + 820) == v44) : (v46 = 0), !v46))
  {
    *(float *)(v6 + 808) = v39;
    *(float *)(v6 + 812) = v40;
    *(float *)(v6 + 816) = v43;
    *(float *)(v6 + 820) = v44;
    v95 = *(_QWORD *)(v6 + 40);
    if ((v95 & 0x2000000000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v95 | 0x2000000000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
  }
  v47 = *(_QWORD *)(v14 + 664);
  if ((v47 & 0x40000000) != 0)
    LODWORD(v48) = 1;
  else
    v48 = (v47 >> 31) & 1;
  v5 = v14 + 664;
  if (*(unsigned __int8 *)(v6 + 871) != (_DWORD)v48)
  {
    *(_BYTE *)(v6 + 871) = v48;
    v91 = *(_QWORD *)(v6 + 40);
    if ((v91 & 0x400000000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v91 | 0x400000000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
  }
  if (*(_BYTE *)(v6 + 873) != ((*(_QWORD *)(v5 + 24) & 0x4000000000000000) != 0))
  {
    *(_BYTE *)(v6 + 873) = (*(_QWORD *)(v5 + 24) & 0x4000000000000000) != 0;
    v109 = *(_QWORD *)(v6 + 40);
    if ((v109 & 0x1000000000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v109 | 0x1000000000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
  }
  v49 = &dword_1ECE90000;
    goto LABEL_175;
  if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
  {
    v50 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
      goto LABEL_55;
    WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
LABEL_177:
    *v113 = 1;
    goto LABEL_55;
  }
LABEL_54:
  v50 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
  {
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
    goto LABEL_177;
  }
LABEL_55:
  v51 = (*(uint64_t (**)(uint64_t *))(*v50 + 64))(v50);
  if (*(unsigned __int8 *)(v6 + 874) != v51)
  {
    *(_BYTE *)(v6 + 874) = v51;
    v92 = *(_QWORD *)(v6 + 40);
    if ((v92 & 0x20000000000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v92 | 0x20000000000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
  }
  if (*(_BYTE *)(v6 + 872) != ((*(_QWORD *)(v5 + 40) >> 35) & 1))
  {
    *(_BYTE *)(v6 + 872) = (*(_QWORD *)(v5 + 40) & 0x800000000) != 0;
    v93 = *(_QWORD *)(v6 + 40);
    if ((v93 & 0x800000000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v93 | 0x800000000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
  }
  v52 = WebCore::LocalFrameView::minStableLayoutViewportOrigin(v4);
  v53 = (float)(int)v52 * 0.015625;
  v54 = (float)SHIDWORD(v52) * 0.015625;
  if (*(float *)(v6 + 824) != v53 || *(float *)(v6 + 828) != v54)
  {
    *(float *)(v6 + 824) = v53;
    *(float *)(v6 + 828) = v54;
    v110 = *(_QWORD *)(v6 + 40);
    if ((v110 & 0x4000000000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v110 | 0x4000000000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
  }
  v56 = WebCore::LocalFrameView::maxStableLayoutViewportOrigin(v4);
  v57 = (float)(int)v56 * 0.015625;
  v58 = (float)SHIDWORD(v56) * 0.015625;
  if (*(float *)(v6 + 832) != v57 || *(float *)(v6 + 836) != v58)
  {
    *(float *)(v6 + 832) = v57;
    *(float *)(v6 + 836) = v58;
    v86 = *(_QWORD *)(v6 + 40);
    if ((v86 & 0x8000000000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v86 | 0x8000000000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
  }
  if (*((_BYTE *)v4 + 1124))
  {
    v60 = COERCE_UNSIGNED_INT((float)*((int *)v4 + 279) * 0.015625) | ((unint64_t)COERCE_UNSIGNED_INT((float)*((int *)v4 + 280)* 0.015625) << 32);
    v61 = 1;
  }
  else
  {
    v60 = 0;
    v61 = 0;
  }
  if (*(_BYTE *)(v6 + 848) && v61)
  {
    if (*(float *)(v6 + 840) != *(float *)&v60 || *(float *)(v6 + 844) != *((float *)&v60 + 1))
    {
LABEL_154:
      *(_QWORD *)(v6 + 840) = v60;
      *(_BYTE *)(v6 + 848) = v61;
      v105 = *(_QWORD *)(v6 + 40);
      if ((v105 & 0x10000000000) == 0)
      {
        *(_QWORD *)(v6 + 40) = v105 | 0x10000000000;
        WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
      }
    }
  }
  else if ((*(_BYTE *)(v6 + 848) != 0) != (v61 != 0))
  {
    goto LABEL_154;
  }
  if (*(_BYTE *)(v6 + 869) != ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 41) + 136) + 680) >> 4) & 1))
  {
    *(_BYTE *)(v6 + 869) = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 41) + 136) + 680) & 0x10) != 0;
    v111 = *(_QWORD *)(v6 + 40);
    if ((v111 & 0x100000000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v111 | 0x100000000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
  }
  WebCore::LocalFrameView::layoutViewportRect(v4);
  v63 = v62;
  result = (_QWORD *)WebCore::LocalFrameView::visualViewportRect(v4);
  v65 = (int)v10 < (int)v63 || SHIDWORD(v10) < SHIDWORD(v63);
  if (*(unsigned __int8 *)(v6 + 870) != v65)
  {
    *(_BYTE *)(v6 + 870) = v65;
    v112 = *(_QWORD *)(v6 + 40);
    if ((v112 & 0x200000000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v112 | 0x200000000;
      result = (_QWORD *)WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
  }
  v66 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 41) + 136) + 664);
  if ((*(_BYTE *)(v6 + 868) == 0) == ((v66 >> 38) & 1))
  {
    *(_BYTE *)(v6 + 868) = (v66 & 0x4000000000) >> 38;
    v94 = *(_QWORD *)(v6 + 40);
    if ((v94 & 0x40000000) == 0)
    {
      *(_QWORD *)(v6 + 40) = v94 | 0x40000000;
      result = (_QWORD *)WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
  }
LABEL_84:
  v67 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v67))
  {
    __clrex();
LABEL_86:
    result = (_QWORD *)MEMORY[0x19AEA534C](v67);
    goto LABEL_87;
  }
  if (__stxr(1u, (unsigned __int8 *)v67))
    goto LABEL_86;
LABEL_87:
  v69 = *(_QWORD *)(v67 + 8);
  v70 = v69 - 1;
  *(_QWORD *)(v67 + 8) = v69 - 1;
  if (v69 == 1)
  {
    v103 = *(_QWORD *)(v67 + 16);
    v71 = *(_QWORD *)(v67 + 24);
    *(_QWORD *)(v67 + 24) = 0;
    v72 = v103 != 0;
  }
  else
  {
    v71 = 0;
    v72 = 1;
  }
  v73 = __ldxr((unsigned __int8 *)v67);
  if (v73 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v67))
      goto LABEL_91;
  }
  else
  {
    __clrex();
  }
  result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v67);
LABEL_91:
  if (!v70)
  {
    if (v71)
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
    if (!v72)
      result = (_QWORD *)WTF::fastFree((WTF *)v67, v10);
  }
  v74 = v114;
  v114 = 0;
  if (v74)
  {
    v75 = *(_QWORD *)(v74 + 8);
    if (__ldaxr((unsigned __int8 *)v75))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v75))
    {
LABEL_96:
      v77 = *(_QWORD *)(v75 + 8);
      v78 = v77 - 1;
      *(_QWORD *)(v75 + 8) = v77 - 1;
      if (v77 == 1)
      {
        v104 = *(_QWORD *)(v75 + 16);
        v79 = *(_QWORD *)(v75 + 24);
        *(_QWORD *)(v75 + 24) = 0;
        v80 = v104 != 0;
      }
      else
      {
        v79 = 0;
        v80 = 1;
      }
      v81 = __ldxr((unsigned __int8 *)v75);
      if (v81 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v75))
          goto LABEL_100;
      }
      else
      {
        __clrex();
      }
      result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v75);
LABEL_100:
      if (!v78)
      {
        if (v79)
          result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
        if (!v80)
          return (_QWORD *)WTF::fastFree((WTF *)v75, v10);
      }
      return result;
    }
    result = (_QWORD *)MEMORY[0x19AEA534C](v75);
    goto LABEL_96;
  }
  return result;
}

_QWORD *WebCore::AsyncScrollingCoordinator::setScrollingNodeScrollableAreaGeometry(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v4;
  _QWORD *result;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  float v18;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  float v24;
  uint64_t v26;
  float v27;
  uint64_t v29;
  float v30;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  _QWORD v82[2];
  _QWORD v83[2];
  _QWORD *v84;

  v82[0] = a2;
  v82[1] = a3;
  v83[0] = v82;
  v83[1] = v82;
  v4 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v4 == -1)
  {
    v76 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_QWORD *)WebCore::AsyncScrollingCoordinator::setViewportConstraintedNodeConstraints(v76);
  }
  v84 = v83;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, _QWORD **, uint64_t))off_1E3403C68[v4])(&v81, &v84, a1 + 32);
  v9 = v81;
  if (v81)
  {
    v10 = *(unsigned __int8 *)(v81 + 16);
    v11 = v10 > 5;
    v12 = (1 << v10) & 0x2B;
    if (v11 || v12 == 0)
    {
      v81 = 0;
      goto LABEL_67;
    }
    v81 = 0;
    v14 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 400))(a4);
    v15 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 392))(a4);
    if (v15)
    {
      if ((*(_BYTE *)(v15 + 136) != 0) != (*(_BYTE *)(v9 + 436) != 0))
      {
        *(_BYTE *)(v9 + 436) = *(_BYTE *)(v15 + 136);
        v66 = *(_QWORD *)(v9 + 40);
        if ((v66 & 0x80000) == 0)
        {
          *(_QWORD *)(v9 + 40) = v66 | 0x80000;
          WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v9 + 48), 1);
        }
      }
    }
    if (v14)
    {
      if ((*(_BYTE *)(v14 + 136) != 0) != (*(_BYTE *)(v9 + 437) != 0))
      {
        *(_BYTE *)(v9 + 437) = *(_BYTE *)(v14 + 136);
        v61 = *(_QWORD *)(v9 + 40);
        if ((v61 & 0x80000) == 0)
        {
          *(_QWORD *)(v9 + 40) = v61 | 0x80000;
          WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v9 + 48), 1);
        }
      }
    }
    if (*(_DWORD *)(v9 + 160) != *((_DWORD *)a4 + 8) || *(_DWORD *)(v9 + 164) != *((_DWORD *)a4 + 9))
    {
      *(_QWORD *)(v9 + 160) = *((_QWORD *)a4 + 4);
      v68 = *(_QWORD *)(v9 + 40);
      if ((v68 & 0x20) == 0)
      {
        *(_QWORD *)(v9 + 40) = v68 | 0x20;
        WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v9 + 48), 1);
      }
    }
    v17 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 416))(a4);
    v18 = (float)SHIDWORD(v17);
    if (*(float *)(v9 + 152) != (float)(int)v17 || *(float *)(v9 + 156) != v18)
    {
      *(float *)(v9 + 152) = (float)(int)v17;
      *(float *)(v9 + 156) = v18;
      v75 = *(_QWORD *)(v9 + 40);
      if ((v75 & 0x10) == 0)
      {
        *(_QWORD *)(v9 + 40) = v75 | 0x10;
        WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v9 + 48), 1);
      }
    }
    v20 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 496))(a4);
    v21 = v20;
    v22 = HIDWORD(v20);
    v23 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 528))(a4);
    v24 = (float)(int)(v23 + (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 536))(a4) + v22);
    if (*(float *)(v9 + 136) != (float)v21 || *(float *)(v9 + 140) != v24)
    {
      *(float *)(v9 + 136) = (float)v21;
      *(float *)(v9 + 140) = v24;
      v62 = *(_QWORD *)(v9 + 40);
      if ((v62 & 4) == 0)
      {
        *(_QWORD *)(v9 + 40) = v62 | 4;
        WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v9 + 48), 1);
      }
    }
    v26 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 544))(a4);
    v27 = (float)SHIDWORD(v26);
    if (*(float *)(v9 + 144) != (float)(int)v26 || *(float *)(v9 + 148) != v27)
    {
      *(float *)(v9 + 144) = (float)(int)v26;
      *(float *)(v9 + 148) = v27;
      v63 = *(_QWORD *)(v9 + 40);
      if ((v63 & 8) == 0)
      {
        *(_QWORD *)(v9 + 40) = v63 | 8;
        WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v9 + 48), 1);
      }
    }
    v29 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 488))(a4);
    v30 = (float)SHIDWORD(v29);
    if (*(float *)(v9 + 128) != (float)(int)v29 || *(float *)(v9 + 132) != v30)
    {
      *(float *)(v9 + 128) = (float)(int)v29;
      *(float *)(v9 + 132) = v30;
      v64 = *(_QWORD *)(v9 + 40);
      if ((v64 & 2) == 0)
      {
        *(_QWORD *)(v9 + 40) = v64 | 2;
        WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v9 + 48), 1);
      }
    }
    v32 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 176))(a4);
    v33 = a4[42];
    if (v32 == 2)
      v33 = 1;
    v80 = v33;
    if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a4 + 184))(a4) == 2)
      v34 = 1;
    else
      v34 = a4[41];
    v35 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 392))(a4);
    if (v35)
      v78 = *(_BYTE *)(v35 + 136) != 0;
    else
      v78 = 0;
    v36 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 400))(a4);
    v79 = a1;
    if (v36)
      v77 = *(_BYTE *)(v36 + 136) != 0;
    else
      v77 = 0;
    v37 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 176))(a4);
    v38 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 184))(a4);
    v39 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 144))(a4);
    v40 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 152))(a4);
    v41 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 160))(a4);
    v42 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 168))(a4);
    v43 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 552))(a4);
    if (a4[43] == 2)
      v44 = 1;
    else
      v44 = v43;
    v45 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a4 + 216))(a4);
    if (*(unsigned __int8 *)(v9 + 438) != v80
      || *(unsigned __int8 *)(v9 + 439) != v34
      || *(unsigned __int8 *)(v9 + 440) != v39
      || *(unsigned __int8 *)(v9 + 441) != v40
      || *(unsigned __int8 *)(v9 + 442) != v37
      || *(unsigned __int8 *)(v9 + 443) != v38
      || *(unsigned __int8 *)(v9 + 444) != v78
      || *(unsigned __int8 *)(v9 + 445) != v77
      || *(unsigned __int8 *)(v9 + 446) != v41
      || *(unsigned __int8 *)(v9 + 447) != v42
      || *(unsigned __int8 *)(v9 + 448) != v44
      || *(unsigned __int8 *)(v9 + 449) != v45)
    {
      *(_BYTE *)(v9 + 438) = v80;
      *(_BYTE *)(v9 + 439) = v34;
      *(_BYTE *)(v9 + 440) = v39;
      *(_BYTE *)(v9 + 441) = v40;
      *(_BYTE *)(v9 + 442) = v37;
      *(_BYTE *)(v9 + 443) = v38;
      *(_BYTE *)(v9 + 444) = v78;
      *(_BYTE *)(v9 + 445) = v77;
      *(_BYTE *)(v9 + 446) = v41;
      *(_BYTE *)(v9 + 447) = v42;
      *(_BYTE *)(v9 + 448) = v44;
      *(_BYTE *)(v9 + 449) = v45;
      v65 = *(_QWORD *)(v9 + 40);
      if ((v65 & 0x40) == 0)
      {
        *(_QWORD *)(v9 + 40) = v65 | 0x40;
        WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v9 + 48), 1);
      }
    }
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)a4 + 96))(a4);
    v46 = *((_QWORD *)a4 + 2);
    if (v46)
    {
      v47 = *(_QWORD *)(v46 + 104);
      v48 = v79;
      if (v47)
        v49 = v47 + 24;
      else
        v49 = 0;
    }
    else
    {
      v49 = 0;
      v48 = v79;
    }
    result = WebCore::setStateScrollingNodeSnapOffsetsAsFloat(v9, v49, *(float *)(*(_QWORD *)(*(_QWORD *)(v48 + 24) + 8) + 364));
    v50 = *((_QWORD *)a4 + 2);
    if (v50 && (v51 = *(_QWORD *)(v50 + 104)) != 0)
    {
      v70 = *(_QWORD *)(v51 + 96);
      v69 = HIDWORD(v70);
      if (*(_BYTE *)(v9 + 244) && BYTE4(v70))
      {
        if (*(_DWORD *)(v9 + 240) == (_DWORD)v70)
          goto LABEL_64;
      }
      else if ((*(_BYTE *)(v9 + 244) != 0) == (BYTE4(v70) != 0))
      {
        goto LABEL_64;
      }
    }
    else
    {
      if (!*(_BYTE *)(v9 + 244))
        goto LABEL_64;
      LOBYTE(v69) = 0;
      LODWORD(v70) = 0;
    }
    *(_DWORD *)(v9 + 240) = v70;
    *(_BYTE *)(v9 + 244) = v69;
    v71 = *(_QWORD *)(v9 + 40);
    if ((v71 & 0x200) == 0)
    {
      *(_QWORD *)(v9 + 40) = v71 | 0x200;
      result = (_QWORD *)WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v9 + 48), 1);
    }
LABEL_64:
    v52 = *((_QWORD *)a4 + 2);
    if (v52 && (v53 = *(_QWORD *)(v52 + 104)) != 0)
    {
      v73 = *(_QWORD *)(v53 + 104);
      v72 = HIDWORD(v73);
      if (*(_BYTE *)(v9 + 252) && BYTE4(v73))
      {
        if (*(_DWORD *)(v9 + 248) == (_DWORD)v73)
          goto LABEL_67;
      }
      else if ((*(_BYTE *)(v9 + 252) != 0) == (BYTE4(v73) != 0))
      {
        goto LABEL_67;
      }
    }
    else
    {
      if (!*(_BYTE *)(v9 + 252))
        goto LABEL_67;
      LOBYTE(v72) = 0;
      LODWORD(v73) = 0;
    }
    *(_DWORD *)(v9 + 248) = v73;
    *(_BYTE *)(v9 + 252) = v72;
    v74 = *(_QWORD *)(v9 + 40);
    if ((v74 & 0x400) == 0)
    {
      *(_QWORD *)(v9 + 40) = v74 | 0x400;
      result = (_QWORD *)WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v9 + 48), 1);
    }
LABEL_67:
    v54 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v54))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v54))
    {
LABEL_70:
      v56 = *(_QWORD *)(v54 + 8);
      v57 = v56 - 1;
      *(_QWORD *)(v54 + 8) = v56 - 1;
      if (v56 == 1)
      {
        v67 = *(_QWORD *)(v54 + 16);
        v58 = *(_QWORD *)(v54 + 24);
        *(_QWORD *)(v54 + 24) = 0;
        v59 = v67 != 0;
      }
      else
      {
        v58 = 0;
        v59 = 1;
      }
      v60 = __ldxr((unsigned __int8 *)v54);
      if (v60 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v54))
          goto LABEL_74;
      }
      else
      {
        __clrex();
      }
      result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v54);
LABEL_74:
      if (!v57)
      {
        if (v58)
          result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
        if (!v59)
          return (_QWORD *)WTF::fastFree((WTF *)v54, v8);
      }
      return result;
    }
    result = (_QWORD *)MEMORY[0x19AEA534C](v54);
    goto LABEL_70;
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::setViewportConstraintedNodeConstraints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::ScrollingStateFixedNode *v36;
  const WebCore::FixedPositionViewportConstraints *v37;
  uint64_t v38;
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD *v41;

  v39[0] = a2;
  v39[1] = a3;
  v40[0] = v39;
  v40[1] = v39;
  v4 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v4 == -1)
  {
    v36 = (WebCore::ScrollingStateFixedNode *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ScrollingStateFixedNode::updateConstraints(v36, v37);
  }
  v41 = v40;
  result = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))off_1E3403C68[v4])(&v38, &v41, a1 + 32);
  if (v38)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    if ((_DWORD)result != 1)
    {
      if (!(_DWORD)result)
      {
        v32 = v38;
        if (!v38)
          return result;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v38 + 8));
        if (*(_BYTE *)(v32 + 16) == 7)
          WebCore::ScrollingStateFixedNode::updateConstraints((WebCore::ScrollingStateFixedNode *)v32, (const WebCore::FixedPositionViewportConstraints *)a4);
        result = (uint64_t)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v32 + 8), v33);
      }
LABEL_25:
      v24 = v38;
      v38 = 0;
      if (!v24)
        return result;
      v25 = *(_QWORD *)(v24 + 8);
      if (__ldaxr((unsigned __int8 *)v25))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v25))
      {
LABEL_29:
        v27 = *(_QWORD *)(v25 + 8);
        v28 = v27 - 1;
        *(_QWORD *)(v25 + 8) = v27 - 1;
        if (v27 == 1)
        {
          v34 = *(_QWORD *)(v25 + 16);
          v29 = *(_QWORD *)(v25 + 24);
          *(_QWORD *)(v25 + 24) = 0;
          v30 = v34 != 0;
        }
        else
        {
          v29 = 0;
          v30 = 1;
        }
        v31 = __ldxr((unsigned __int8 *)v25);
        if (v31 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v25))
            goto LABEL_33;
        }
        else
        {
          __clrex();
        }
        result = WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_33:
        if (!v28)
        {
          if (v29)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          if (!v30)
            return WTF::fastFree((WTF *)v25, v7);
        }
        return result;
      }
      result = MEMORY[0x19AEA534C](v25);
      goto LABEL_29;
    }
    v8 = v38;
    if (!v38)
      return result;
    v9 = *(_QWORD *)(v38 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
LABEL_8:
      ++*(_QWORD *)(v9 + 8);
      v11 = __ldxr((unsigned __int8 *)v9);
      if (v11 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
          goto LABEL_13;
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_13:
      if (*(_BYTE *)(v8 + 16) == 8)
      {
        result = WebCore::operator==(v8 + 128, a4);
        if ((result & 1) == 0)
        {
          v12 = *(_QWORD *)(a4 + 8);
          *(_DWORD *)(v8 + 144) = *(_DWORD *)(a4 + 16);
          *(_QWORD *)(v8 + 136) = v12;
          v13 = *(_OWORD *)(a4 + 52);
          v14 = *(_OWORD *)(a4 + 68);
          v15 = *(_OWORD *)(a4 + 84);
          *(_OWORD *)(v8 + 164) = *(_OWORD *)(a4 + 36);
          *(_OWORD *)(v8 + 212) = v15;
          *(_OWORD *)(v8 + 196) = v14;
          *(_OWORD *)(v8 + 180) = v13;
          *(_OWORD *)(v8 + 148) = *(_OWORD *)(a4 + 20);
          v16 = *(_QWORD *)(v8 + 40);
          if ((v16 & 2) == 0)
          {
            *(_QWORD *)(v8 + 40) = v16 | 2;
            result = WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v8 + 48), 1);
          }
        }
      }
      v17 = *(_QWORD *)(v8 + 8);
      if (__ldaxr((unsigned __int8 *)v17))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v17))
      {
LABEL_20:
        v19 = *(_QWORD *)(v17 + 8);
        v20 = v19 - 1;
        *(_QWORD *)(v17 + 8) = v19 - 1;
        if (v19 == 1)
        {
          v35 = *(_QWORD *)(v17 + 16);
          v21 = *(_QWORD *)(v17 + 24);
          *(_QWORD *)(v17 + 24) = 0;
          v22 = v35 != 0;
        }
        else
        {
          v21 = 0;
          v22 = 1;
        }
        v23 = __ldxr((unsigned __int8 *)v17);
        if (v23 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v17))
            goto LABEL_24;
        }
        else
        {
          __clrex();
        }
        result = WTF::Lock::unlockSlow((WTF::Lock *)v17);
LABEL_24:
        if (!v20)
        {
          if (v21)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          if (!v22)
            result = WTF::fastFree((WTF *)v17, v7);
        }
        goto LABEL_25;
      }
      result = MEMORY[0x19AEA534C](v17);
      goto LABEL_20;
    }
    result = MEMORY[0x19AEA534C](v9);
    goto LABEL_8;
  }
  return result;
}

uint64_t WebCore::ScrollingStateFixedNode::updateConstraints(WebCore::ScrollingStateFixedNode *this, const WebCore::FixedPositionViewportConstraints *a2)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  result = WebCore::operator==((uint64_t)this + 128, (uint64_t)a2);
  if ((result & 1) == 0)
  {
    v5 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 36) = *((_DWORD *)a2 + 4);
    *((_QWORD *)this + 17) = v5;
    v6 = *(_OWORD *)((char *)a2 + 20);
    *(_QWORD *)((char *)this + 164) = *(_QWORD *)((char *)a2 + 36);
    *(_OWORD *)((char *)this + 148) = v6;
    v7 = *((_QWORD *)this + 5);
    if ((v7 & 2) == 0)
    {
      *((_QWORD *)this + 5) = v7 | 2;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*((WebCore::ScrollingStateTree **)this + 6), 1);
    }
  }
  return result;
}

_QWORD *WebCore::AsyncScrollingCoordinator::setPositionedNodeConstraints(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  _QWORD *result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD *v24;

  v22[0] = a2;
  v22[1] = a3;
  v23[0] = v22;
  v23[1] = v22;
  v4 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v4 == -1)
  {
    v20 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_QWORD *)WebCore::AsyncScrollingCoordinator::setRelatedOverflowScrollingNodes(v20);
  }
  v24 = v23;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, _QWORD **, uint64_t))off_1E3403C68[v4])(&v21, &v24, a1 + 32);
  v8 = v21;
  if (v21)
  {
    if (*(_BYTE *)(v21 + 16) != 9
      || (*(float *)(v21 + 144) == *a4 ? (v16 = *(float *)(v21 + 148) == a4[1]) : (v16 = 0),
          v16 && (*(float *)(v21 + 152) == a4[2] ? (v17 = *(float *)(v21 + 156) == a4[3]) : (v17 = 0), v17))
      || (*(_OWORD *)(v21 + 144) = *(_OWORD *)a4, v18 = *(_QWORD *)(v8 + 40), (v18 & 4) != 0))
    {
      v21 = 0;
    }
    else
    {
      *(_QWORD *)(v8 + 40) = v18 | 4;
      result = (_QWORD *)WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v8 + 48), 1);
      v8 = v21;
      v21 = 0;
      if (!v8)
        return result;
    }
    v9 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_9;
    }
    result = (_QWORD *)MEMORY[0x19AEA534C](v9);
LABEL_9:
    v11 = *(_QWORD *)(v9 + 8);
    v12 = v11 - 1;
    *(_QWORD *)(v9 + 8) = v11 - 1;
    if (v11 == 1)
    {
      v19 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 24) = 0;
      v14 = v19 != 0;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    v15 = __ldxr((unsigned __int8 *)v9);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
        if (v12)
          return result;
LABEL_17:
        if (v13)
          result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        if (!v14)
          return (_QWORD *)WTF::fastFree((WTF *)v9, v7);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      return result;
    goto LABEL_17;
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::setRelatedOverflowScrollingNodes(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  void *v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD *v25;

  v23[0] = a2;
  v23[1] = a3;
  v24[0] = v23;
  v24[1] = v23;
  v4 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v4 == -1)
  {
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AsyncScrollingCoordinator::setSynchronousScrollingReasons(v21);
  }
  v25 = v24;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))off_1E3403C68[v4])(&v22, &v25, a1 + 32);
  result = v22;
  if (v22)
  {
    v8 = *(unsigned __int8 *)(v22 + 16);
    if (v8 == 6)
    {
      if (a4[3])
      {
        v9 = **(_QWORD **)a4;
        v10 = *(_QWORD *)(*(_QWORD *)a4 + 8);
        if (v9 != *(_QWORD *)(v22 + 128) || v10 != *(_QWORD *)(v22 + 136))
        {
          *(_QWORD *)(v22 + 128) = v9;
          *(_QWORD *)(result + 136) = v10;
          v19 = *(_QWORD *)(result + 40);
          if ((v19 & 2) == 0)
          {
            *(_QWORD *)(result + 40) = v19 | 2;
            WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(result + 48), 1);
          }
        }
      }
      else
      {
        WebCore::ScrollingStateOverflowScrollProxyNode::setOverflowScrollingNode(v22, 0, 0);
      }
    }
    else
    {
      if (v8 != 9)
      {
        v22 = 0;
        goto LABEL_11;
      }
      WebCore::ScrollingStatePositionedNode::setRelatedOverflowScrollingNodes(v22, a4);
    }
    result = v22;
    v22 = 0;
    if (!result)
      return result;
LABEL_11:
    v12 = *(_QWORD *)(result + 8);
    if (__ldaxr((unsigned __int8 *)v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v12))
    {
LABEL_14:
      v14 = *(_QWORD *)(v12 + 8);
      v15 = v14 - 1;
      *(_QWORD *)(v12 + 8) = v14 - 1;
      if (v14 == 1)
      {
        v20 = *(_QWORD *)(v12 + 16);
        v16 = *(_QWORD *)(v12 + 24);
        *(_QWORD *)(v12 + 24) = 0;
        v17 = v20 != 0;
      }
      else
      {
        v16 = 0;
        v17 = 1;
      }
      v18 = __ldxr((unsigned __int8 *)v12);
      if (v18 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v12))
          goto LABEL_18;
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_18:
      if (!v15)
      {
        if (v16)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        if (!v17)
          return WTF::fastFree((WTF *)v12, v6);
      }
      return result;
    }
    result = MEMORY[0x19AEA534C](v12);
    goto LABEL_14;
  }
  return result;
}

_DWORD *WebCore::AsyncScrollingCoordinator::setSynchronousScrollingReasons(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _DWORD *result;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD *v29;

  v27[0] = a2;
  v27[1] = a3;
  v28[0] = v27;
  v28[1] = v27;
  v4 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v4 == -1)
  {
    v25 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)WebCore::AsyncScrollingCoordinator::synchronousScrollingReasons(v25);
  }
  v29 = v28;
  result = ((_DWORD *(*)(uint64_t *__return_ptr, _QWORD **, uint64_t))off_1E3403C68[v4])(&v26, &v29, a1 + 32);
  v11 = v26;
  if (v26)
  {
    v12 = *(unsigned __int8 *)(v26 + 16);
    if (v12 > 5 || ((1 << v12) & 0x2B) == 0)
    {
      v26 = 0;
    }
    else
    {
      v26 = 0;
      if (a4)
      {
        if (v12 <= 1)
        {
          v22 = a2;
          v23 = v11;
          result = (_DWORD *)WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode(a1, v22, a3);
          v11 = v23;
          if (result)
          {
            v24 = result;
            ++result[2];
            result = WebCore::AsyncScrollingCoordinator::reconcileScrollPosition((WebCore::RenderView *)result, 0);
            if (v24[2] == 1)
              result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
            else
              --v24[2];
            v11 = v23;
          }
        }
      }
    }
    v14 = *(_QWORD *)(v11 + 8);
    if (__ldaxr((unsigned __int8 *)v14))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v14))
    {
LABEL_11:
      v16 = *(_QWORD *)(v14 + 8);
      v17 = v16 - 1;
      *(_QWORD *)(v14 + 8) = v16 - 1;
      if (v16 == 1)
      {
        v21 = *(_QWORD *)(v14 + 16);
        v18 = *(_QWORD *)(v14 + 24);
        *(_QWORD *)(v14 + 24) = 0;
        v19 = v21 != 0;
      }
      else
      {
        v18 = 0;
        v19 = 1;
      }
      v20 = __ldxr((unsigned __int8 *)v14);
      if (v20 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v14))
          goto LABEL_15;
      }
      else
      {
        __clrex();
      }
      result = (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
LABEL_15:
      if (!v17)
      {
        if (v18)
          result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        if (!v19)
          return (_DWORD *)WTF::fastFree((WTF *)v14, v10);
      }
      return result;
    }
    result = (_DWORD *)MEMORY[0x19AEA534C](v14);
    goto LABEL_11;
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::synchronousScrollingReasons(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD *v19;

  v17[0] = a2;
  v17[1] = a3;
  v18[0] = v17;
  v18[1] = v17;
  v3 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v3 != -1)
  {
    v19 = v18;
    ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))off_1E3403C68[v3])(&v16, &v19, a1 + 32);
    v5 = v16;
    if (!v16)
      return 0;
    v16 = 0;
    v6 = *(_QWORD *)(v5 + 8);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
LABEL_6:
      v8 = *(_QWORD *)(v6 + 8);
      v9 = v8 - 1;
      *(_QWORD *)(v6 + 8) = v8 - 1;
      if (v8 == 1)
      {
        v14 = *(_QWORD *)(v6 + 16);
        v10 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = 0;
        v11 = v14 != 0;
      }
      else
      {
        v10 = 0;
        v11 = 1;
      }
      v12 = __ldxr((unsigned __int8 *)v6);
      if (v12 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v6))
          goto LABEL_10;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
      if (!v9)
      {
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        if (!v11)
          WTF::fastFree((WTF *)v6, v4);
      }
      return 0;
    }
    MEMORY[0x19AEA534C](v6);
    goto LABEL_6;
  }
  v15 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::AsyncScrollingCoordinator::hasSubscrollers(v15);
}

BOOL WebCore::AsyncScrollingCoordinator::hasSubscrollers(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = (uint64_t *)(a1 + 32);
  v4 = *(_DWORD *)(a1 + 56);
  if (v4 == 2)
  {
    v6 = *v3;
    if (!*v3)
      return 0;
    v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*v3, a2, a3);
    v8 = *(_DWORD *)(v6 - 4);
    v9 = (uint64_t *)(v6 + 24 * v8);
    v3 = v7 ? v7 : (uint64_t *)(v6 + 24 * v8);
    if (v9 == v3)
      return 0;
  }
  else
  {
    if (v4 != 1)
      return 0;
    if (*(_QWORD *)(a1 + 32) != a2 || *(_QWORD *)(a1 + 40) != a3)
      return 0;
  }
  v10 = v3[2];
  if (v10)
    return *(_DWORD *)(v10 + 64) > 1u;
  return 0;
}

uint64_t WebCore::AsyncScrollingCoordinator::isUserScrollInProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 64);
  if (result)
    return WebCore::ScrollingTree::isUserScrollInProgressForNode(result, a2, a3);
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::isRubberBandInProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 64);
  if (result)
    return WebCore::ScrollingTree::isRubberBandInProgressForNode(result, a2, a3);
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::setScrollPinningBehavior(uint64_t result, char a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;

  v3 = *(_QWORD *)(result + 64);
  v4 = (unsigned __int8 *)(v3 + 264);
  if (__ldaxr((unsigned __int8 *)(v3 + 264)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v3 + 264);
LABEL_5:
  *(_BYTE *)(v3 + 273) = a2;
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 264));
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 264));
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::scrollableContainerNodeID(WebCore::AsyncScrollingCoordinator *this, const WebCore::RenderObject *a2)
{
  WebCore::RenderView *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  WebCore::RenderLayerCompositor *v21;
  WebCore::RenderLayerCompositor *v22;
  WTF *v23;
  void *v24;

  v4 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 1944);
  if (!*((_QWORD *)v4 + 50))
  {
    v21 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    WebCore::RenderLayerCompositor::RenderLayerCompositor(v21, v4);
    v22 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v4 + 50);
    *((_QWORD *)v4 + 50) = v21;
    if (v22)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v22);
      WTF::fastFree(v23, v24);
    }
  }
  v5 = WebCore::RenderLayerCompositor::asyncScrollableContainerNodeID(a2, a2);
  if (v5)
    return v5;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 528)
                 + 8);
  v9 = *(_QWORD *)(v8 + 288);
  if (!v9)
    return 0;
  ++*(_DWORD *)(v9 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 328) + 296);
  if (!v10
    || (v11 = *(_QWORD *)(v10 + 1944)) == 0
    || (v12 = *(_QWORD *)(*(_QWORD *)(v11 + 144) + 256)) == 0
    || (v7 = *(_QWORD *)(v12 + 224)) == 0)
  {
    v13 = *(_QWORD *)(v8 + 120);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v15 = *(_DWORD *)(v14 + 24);
        *(_DWORD *)(v14 + 24) = v15 + 2;
        v16 = *(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL;
        if (v16)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1960913A4);
          }
          ++*(_DWORD *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
          v17 = (*(uint64_t (**)(WebCore::AsyncScrollingCoordinator *, uint64_t))(*(_QWORD *)this + 56))(this, v16);
          v19 = *(_DWORD *)(v16 + 16);
          if (!v19)
          {
            __break(0xC471u);
            JUMPOUT(0x1960913C4);
          }
          v7 = v17;
          *(_DWORD *)(v16 + 16) = v19 - 1;
          v15 = *(_DWORD *)(v14 + 24) - 2;
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14, v18);
            goto LABEL_16;
          }
          goto LABEL_15;
        }
        if (v15)
        {
          v7 = 0;
LABEL_15:
          *(_DWORD *)(v14 + 24) = v15;
          goto LABEL_16;
        }
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v14, v6);
      }
    }
    v7 = 0;
  }
LABEL_16:
  if (*(_DWORD *)(v9 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  else
    --*(_DWORD *)(v9 + 8);
  return v7;
}

WTF::StringImpl *WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText@<X0>(uint64_t a1@<X0>, char a2@<W1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  _QWORD v9[3];
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  char v13;
  char v14;
  _QWORD v15[2];
  _QWORD *v16;

  v14 = a2;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  v9[0] = a1;
  v9[1] = &v10;
  v9[2] = &v14;
  v15[0] = v9;
  v15[1] = v9;
  v4 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v4 == -1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::AsyncScrollingCoordinator::scrollingTreeAsText(v8);
  }
  else
  {
    v16 = v15;
    ((void (*)(_QWORD **, uint64_t))off_1E3403CA8[v4])(&v16, a1 + 32);
    result = v10;
    if (v10
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v10),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v10),
          (result = v10) != 0))
    {
      *(_DWORD *)result += 2;
    }
    *a3 = result;
    v7 = v11;
    v11 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v5);
        result = v10;
      }
      else
      {
        *(_DWORD *)v7 -= 2;
      }
    }
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::AsyncScrollingCoordinator::scrollingTreeAsText@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *result;
  _DWORD *v4;

  result = *(WTF::StringImpl **)(a1 + 64);
  if (result)
    return WebCore::ScrollingTree::scrollingTreeAsText((uint64_t)result, a2);
  v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v4 += 2;
  *a3 = v4;
  return result;
}

BOOL WebCore::AsyncScrollingCoordinator::haveScrollingTree(WebCore::AsyncScrollingCoordinator *this)
{
  return *((_QWORD *)this + 8) != 0;
}

uint64_t WebCore::AsyncScrollingCoordinator::setActiveScrollSnapIndices(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(result + 24);
  if (v5)
  {
    if (*(_QWORD *)(v5 + 8))
    {
      result = WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode(result, a2, a3);
      if (result)
      {
        v10 = (_DWORD *)result;
        ++*(_DWORD *)(result + 8);
        result = (uint64_t)WebCore::LocalFrameView::scrollableAreaForScrollingNodeID(result, (uint64_t)a2, a3);
        if (result)
        {
          v11 = (_QWORD *)result;
          (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          v12 = v11[2];
          if (!v12)
          {
            v12 = WTF::fastMalloc((WTF *)0xB0);
            *(_QWORD *)v12 = off_1E3405EF0;
            *(_QWORD *)(v12 + 8) = v11;
            *(_QWORD *)(v12 + 16) = 0;
            *(_QWORD *)(v12 + 24) = &off_1E3406D78;
            *(_OWORD *)(v12 + 32) = 0u;
            *(_OWORD *)(v12 + 48) = 0u;
            *(_OWORD *)(v12 + 64) = 0u;
            *(_QWORD *)(v12 + 80) = 0;
            *(_QWORD *)(v12 + 88) = v12;
            *(_QWORD *)(v12 + 96) = 0;
            *(_QWORD *)(v12 + 104) = 0;
            *(_QWORD *)(v12 + 110) = 0;
            *(_QWORD *)(v12 + 120) = 0;
            v13 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v13 = 0;
            *(_DWORD *)(v13 + 8) = 0;
            *(_QWORD *)(v13 + 16) = v11;
            *(_BYTE *)(v13 + 24) = 0;
            *(_QWORD *)(v12 + 128) = v13;
            *(_BYTE *)(v12 + 136) = 0;
            *(_QWORD *)v12 = off_1E3354B08;
            *(_QWORD *)(v12 + 168) = 0;
            *(_DWORD *)(v12 + 140) = 0;
            *(_DWORD *)(v12 + 143) = 0;
            *(_QWORD *)(v12 + 156) = 0;
            *(_QWORD *)(v12 + 148) = 0;
            v14 = v11[2];
            v11[2] = v12;
            if (v14)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
              v12 = v11[2];
            }
          }
          v15 = *(_QWORD *)(v12 + 104);
          if (v15)
          {
            *(_DWORD *)(v15 + 96) = a4;
            *(_BYTE *)(v15 + 100) = BYTE4(a4);
            WebCore::ScrollSnapAnimatorState::updateCurrentlySnappedBoxes((WebCore::ScrollSnapAnimatorState *)v15);
            v12 = v11[2];
            if (!v12)
            {
              v12 = WTF::fastMalloc((WTF *)0xB0);
              *(_QWORD *)v12 = off_1E3405EF0;
              *(_QWORD *)(v12 + 8) = v11;
              *(_QWORD *)(v12 + 16) = 0;
              *(_QWORD *)(v12 + 24) = &off_1E3406D78;
              *(_OWORD *)(v12 + 32) = 0u;
              *(_OWORD *)(v12 + 48) = 0u;
              *(_OWORD *)(v12 + 64) = 0u;
              *(_QWORD *)(v12 + 80) = 0;
              *(_QWORD *)(v12 + 88) = v12;
              *(_QWORD *)(v12 + 96) = 0;
              *(_QWORD *)(v12 + 104) = 0;
              *(_QWORD *)(v12 + 110) = 0;
              *(_QWORD *)(v12 + 120) = 0;
              v16 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v16 = 0;
              *(_DWORD *)(v16 + 8) = 0;
              *(_QWORD *)(v16 + 16) = v11;
              *(_BYTE *)(v16 + 24) = 0;
              *(_QWORD *)(v12 + 128) = v16;
              *(_BYTE *)(v12 + 136) = 0;
              *(_QWORD *)v12 = off_1E3354B08;
              *(_QWORD *)(v12 + 168) = 0;
              *(_DWORD *)(v12 + 140) = 0;
              *(_DWORD *)(v12 + 143) = 0;
              *(_QWORD *)(v12 + 156) = 0;
              *(_QWORD *)(v12 + 148) = 0;
              v17 = v11[2];
              v11[2] = v12;
              if (v17)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
                v12 = v11[2];
              }
            }
          }
          v18 = *(_QWORD *)(v12 + 104);
          if (v18)
          {
            *(_DWORD *)(v18 + 104) = a5;
            *(_BYTE *)(v18 + 108) = BYTE4(a5);
            WebCore::ScrollSnapAnimatorState::updateCurrentlySnappedBoxes((WebCore::ScrollSnapAnimatorState *)v18);
          }
          result = (*(uint64_t (**)(_QWORD *))(*v11 + 24))(v11);
        }
        if (v10[2] == 1)
          return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        else
          --v10[2];
      }
    }
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::isScrollSnapInProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 64);
  if (result)
    return WebCore::ScrollingTree::isScrollSnapInProgressForNode(result, a2, a3);
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::updateScrollSnapPropertiesWithFrameView(WebCore::AsyncScrollingCoordinator *this, const WebCore::LocalFrameView *a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  result = WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v34, this, (uint64_t)a2 + 64);
  v6 = v34;
  if (!v34)
    return result;
  v7 = *(unsigned __int8 *)(v34 + 16);
  v34 = 0;
  if (v7 < 2)
  {
    v8 = *((_QWORD *)a2 + 10);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 104);
      if (v9)
        v10 = v9 + 24;
      else
        v10 = 0;
    }
    else
    {
      v10 = 0;
    }
    result = (uint64_t)WebCore::setStateScrollingNodeSnapOffsetsAsFloat(v6, v10, *(float *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 364));
    v11 = *((_QWORD *)a2 + 10);
    if (v11 && (v12 = *(_QWORD *)(v11 + 104)) != 0)
    {
      v24 = *(_QWORD *)(v12 + 96);
      v23 = HIDWORD(v24);
      if (*(_BYTE *)(v6 + 244))
        v29 = BYTE4(v24) == 0;
      else
        v29 = 1;
      if (v29)
      {
        if ((*(_BYTE *)(v6 + 244) != 0) == (BYTE4(v24) != 0))
          goto LABEL_10;
      }
      else if (*(_DWORD *)(v6 + 240) == (_DWORD)v24)
      {
        goto LABEL_10;
      }
    }
    else
    {
      if (!*(_BYTE *)(v6 + 244))
        goto LABEL_10;
      LOBYTE(v23) = 0;
      LODWORD(v24) = 0;
    }
    *(_DWORD *)(v6 + 240) = v24;
    *(_BYTE *)(v6 + 244) = v23;
    v25 = *(_QWORD *)(v6 + 40);
    if ((v25 & 0x200) == 0)
    {
      *(_QWORD *)(v6 + 40) = v25 | 0x200;
      result = WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
LABEL_10:
    v13 = *((_QWORD *)a2 + 10);
    if (v13 && (v14 = *(_QWORD *)(v13 + 104)) != 0)
    {
      v27 = *(_QWORD *)(v14 + 104);
      v26 = HIDWORD(v27);
      if (*(_BYTE *)(v6 + 252) && BYTE4(v27))
      {
        if (*(_DWORD *)(v6 + 248) == (_DWORD)v27)
          goto LABEL_13;
      }
      else if ((*(_BYTE *)(v6 + 252) != 0) == (BYTE4(v27) != 0))
      {
        goto LABEL_13;
      }
    }
    else
    {
      if (!*(_BYTE *)(v6 + 252))
        goto LABEL_13;
      LOBYTE(v26) = 0;
      LODWORD(v27) = 0;
    }
    *(_DWORD *)(v6 + 248) = v27;
    *(_BYTE *)(v6 + 252) = v26;
    v28 = *(_QWORD *)(v6 + 40);
    if ((v28 & 0x400) == 0)
    {
      *(_QWORD *)(v6 + 40) = v28 | 0x400;
      result = WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
    }
LABEL_13:
    v15 = *(_QWORD *)(v6 + 8);
    if (__ldaxr((unsigned __int8 *)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
      goto LABEL_17;
    }
    result = MEMORY[0x19AEA534C](v15);
LABEL_17:
    v17 = *(_QWORD *)(v15 + 8);
    v18 = v17 - 1;
    *(_QWORD *)(v15 + 8) = v17 - 1;
    if (v17 == 1)
    {
      v22 = *(_QWORD *)(v15 + 16);
      v19 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 24) = 0;
      v20 = v22 != 0;
    }
    else
    {
      v19 = 0;
      v20 = 1;
    }
    v21 = __ldxr((unsigned __int8 *)v15);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v18)
      return result;
    goto LABEL_25;
  }
  v15 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_57;
  }
  result = MEMORY[0x19AEA534C](v15);
LABEL_57:
  v31 = *(_QWORD *)(v15 + 8);
  v18 = v31 - 1;
  *(_QWORD *)(v15 + 8) = v31 - 1;
  if (v31 == 1)
  {
    v33 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v20 = v33 != 0;
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  v32 = __ldxr((unsigned __int8 *)v15);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_63;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
LABEL_63:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_21:
  if (v18)
    return result;
LABEL_25:
  if (v19)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (!v20)
    return WTF::fastFree((WTF *)v15, v5);
  return result;
}

uint64_t WebCore::ScrollAnchoringController::ScrollAnchoringController(uint64_t this, WebCore::ScrollableArea *a2)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = a2;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 31) = 0;
  return this;
}

void WebCore::ScrollAnchoringController::~ScrollAnchoringController(WebCore::ScrollAnchoringController *this, const WebCore::RenderObject *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  WebCore::ScrollAnchoringController::invalidateAnchorElement((uint64_t)this, a2);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v10 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v10)
      {
        v13 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v10));
        v4 = v13;
      }
      v11 = *(WTF **)(v4 + 16);
      if (v11)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v12 = v4;
        WTF::fastFree(v11, v3);
        v4 = v12;
      }
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v7 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v3);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t WebCore::ScrollAnchoringController::invalidateAnchorElement(uint64_t this, const WebCore::RenderObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::RenderObject *v8;
  WebCore::ScrollAnchoringController *v9;
  WebCore::ScrollAnchoringController *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_BYTE *)(this + 32))
    return this;
  v2 = this;
  v3 = *(_QWORD *)(this + 16);
  if (!v3 || !*(_QWORD *)(v3 + 8))
  {
    v4 = *(_QWORD **)(this + 8);
    if (!(*(unsigned int (**)(_QWORD *))(*v4 + 40))(v4))
    {
      if (((*(uint64_t (**)(_QWORD *))(*v4 + 32))(v4) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196091D88);
      }
      if (((*(uint64_t (**)(_QWORD *))(*(v4 - 8) + 72))(v4 - 8) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196091DA8);
      }
      v7 = *(_QWORD *)(v4[33] + 296);
      if (!v7)
        goto LABEL_18;
      v6 = *(_QWORD *)(v7 + 1272);
      if (!v6)
        goto LABEL_18;
      goto LABEL_13;
    }
    v5 = *(_QWORD *)(v4[12] + 32);
    if ((*(_BYTE *)(v5 + 45) & 1) == 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
      if (v6)
      {
        if ((*(_WORD *)(v6 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196091BCCLL);
        }
LABEL_13:
        v8 = (WebCore::RenderObject *)(*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL);
        if (v8)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196091D68);
          }
          v9 = (WebCore::ScrollAnchoringController *)WebCore::RenderObject::searchParentChainForScrollAnchoringController(v8, a2);
          if (v9)
          {
            v10 = v9;
            if (WebCore::ScrollAnchoringController::isInScrollAnchoringAncestorChain(v9, v8))
              WebCore::ScrollAnchoringController::invalidateAnchorElement(v10);
          }
        }
      }
    }
  }
LABEL_18:
  v11 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v18 = *(unsigned int *)(v11 + 28);
      if ((_DWORD)v18)
      {
        v21 = v11;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v18));
        v11 = v21;
      }
      v19 = *(WTF **)(v11 + 16);
      if (v19)
      {
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        v20 = v11;
        WTF::fastFree(v19, a2);
        v11 = v20;
      }
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 33) = 0;
  v14 = *(_QWORD **)(v2 + 8);
  if ((*(unsigned int (**)(_QWORD *))(*v14 + 40))(v14))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14[12] + 32) + 24)
                                                                    + 8)
                                                        + 40)
                                            + 8)
                                + 1944)
                    + 248);
  }
  else
  {
    v16 = *(_QWORD *)(v2 + 8);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196091D28);
    }
    v17 = *(_QWORD *)(v16 - 64);
    v15 = v16 - 64;
    if (((*(uint64_t (**)(uint64_t))(v17 + 72))(v15) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196091D48);
    }
  }
  return WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::ScrollableArea>(v15 + 1336, *(_QWORD **)(v2 + 8));
}

uint64_t WebCore::ScrollAnchoringController::isInScrollAnchoringAncestorChain(WebCore::ScrollAnchoringController *this, const WebCore::RenderObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  const WebCore::RenderObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (!v3)
      return v3;
    *(_DWORD *)(v3 + 24) += 2;
    do
    {
      v7 = v3;
      v8 = (const WebCore::RenderObject *)(*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL);
      if (v8)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          result = 105;
          __break(0xC471u);
          return result;
        }
        v3 = v8 == a2;
        if (v8 == a2
          || (*((_BYTE *)v8 + 45) & 4) != 0
          && (v9 = *((_QWORD *)v8 + 18)) != 0
          && *(_QWORD *)(v9 + 264) == *((_QWORD *)this + 1))
        {
          if (*(_DWORD *)(v7 + 24) == 2)
          {
            if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v7);
          }
          else
          {
            *(_DWORD *)(v7 + 24) -= 2;
          }
          return v3;
        }
      }
      v10 = *(_QWORD *)(v7 + 32);
      if (v10)
      {
        if ((*(_WORD *)(v10 + 28) & 8) != 0)
        {
          v11 = *(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL;
          if (v11)
          {
            v15 = *(_QWORD *)(v11 + 88);
            if (v15)
            {
              v16 = *(_QWORD *)(v15 + 224);
              if (v16)
              {
                v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v7);
                if (v3)
                {
LABEL_28:
                  v14 = 0;
                  *(_DWORD *)(v3 + 24) += 2;
                  goto LABEL_29;
                }
              }
            }
          }
        }
      }
      if ((~*(unsigned __int16 *)(v7 + 28) & 0x408) != 0
        || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 368))(v7))
      {
        v3 = *(_QWORD *)(v7 + 32);
        if (!v3)
          goto LABEL_24;
        v13 = *(_WORD *)(v3 + 28);
        if ((v13 & 0x80) == 0)
        {
          if ((v13 & 8) != 0)
            goto LABEL_28;
LABEL_23:
          v3 = 0;
          goto LABEL_24;
        }
        v12 = *(_QWORD *)(v3 + 200);
        if (!v12)
          goto LABEL_23;
      }
      else
      {
        v12 = *(_QWORD *)(v7 + 112);
        if (!v12)
          goto LABEL_23;
      }
      v3 = *(_QWORD *)(v12 + 8);
      if (v3)
        goto LABEL_28;
LABEL_24:
      v14 = 1;
LABEL_29:
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    while ((v14 & 1) == 0);
  }
  return 0;
}

unint64_t WebCore::boundingRectForScrollableArea(WebCore *this, WebCore::ScrollableArea *a2)
{
  WebCore::LocalFrameView *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if ((*(unsigned int (**)(WebCore *, WebCore::ScrollableArea *))(*(_QWORD *)this + 40))(this, a2))
    return WebCore::RenderObject::absoluteBoundingBoxRect(*(WebCore::RenderObject **)(*((_QWORD *)this + 12) + 32), 1, 0);
  if (((*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 32))(this) & 1) == 0
    || (v5 = *((_QWORD *)this - 8),
        v4 = (WebCore *)((char *)this - 64),
        ((*(uint64_t (**)(WebCore::LocalFrameView *))(v5 + 72))(v4) & 1) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x196092088);
  }
  v6 = WebCore::LocalFrameView::layoutViewportRect(v4);
  v7 = HIDWORD(v6);
  if (v6 < 0)
    LODWORD(v7) = HIDWORD(v6) + 63;
  return ((int)v6 / 64) | ((unint64_t)((int)v7 >> 6) << 32);
}

uint64_t WebCore::ScrollAnchoringController::examineAnchorCandidate(WebCore::ScrollAnchoringController *this, WebCore::Element *a2)
{
  _QWORD *v4;
  WebCore::ScrollableArea *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  WebCore::Element *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::RenderBox *v26;
  int32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int32x4_t v30;
  int8x16_t v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  signed int v35;
  int v36;
  int v37;
  unsigned int v38;
  BOOL v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  uint64_t result;
  char v50;
  uint64_t v51;
  unsigned __int16 *v52;
  uint64_t v53;
  char v54;
  int v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  BOOL v65;
  int v66;
  uint64_t v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  WebCore::RenderObject *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int8x16_t v84;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 40))(v4))
  {
    v6 = *(_QWORD *)(v4[12] + 32);
    if ((*(_BYTE *)(v6 + 45) & 1) != 0)
      goto LABEL_21;
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8);
    if (!v7)
      goto LABEL_21;
    if ((*(_WORD *)(v7 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19609212CLL);
    }
  }
  else
  {
    if (((*(uint64_t (**)(_QWORD *))(*v4 + 32))(v4) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196092960);
    }
    if (((*(uint64_t (**)(_QWORD *))(*(v4 - 8) + 72))(v4 - 8) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196092980);
    }
    v8 = *(_QWORD *)(v4[33] + 296);
    if (!v8 || !*(_QWORD *)(v8 + 1272))
      goto LABEL_21;
  }
  v9 = (_QWORD *)*((_QWORD *)this + 1);
  if (!(*(unsigned int (**)(_QWORD *))(*v9 + 40))(v9))
  {
    if (((*(uint64_t (**)(_QWORD *))(*v9 + 32))(v9) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1960929A0);
    }
    if (((*(uint64_t (**)(_QWORD *))(*(v9 - 8) + 72))(v9 - 8) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1960929C0);
    }
    v12 = *(_QWORD *)(v9[33] + 296);
    if (v12)
    {
      v11 = *(WebCore::Element **)(v12 + 1272);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  v10 = *(_QWORD *)(v9[12] + 32);
  if ((*(_BYTE *)(v10 + 45) & 1) != 0)
  {
LABEL_19:
    v11 = 0;
    goto LABEL_20;
  }
  v11 = *(WebCore::Element **)(*(_QWORD *)(v10 + 24) + 8);
  if (v11 && (*((_WORD *)v11 + 14) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1960921C4);
  }
LABEL_20:
  v13 = WebCore::Element::identifier(v11);
  if (v13 == WebCore::Element::identifier(a2))
    return 3;
LABEL_21:
  v14 = WebCore::boundingRectForScrollableArea(*((WebCore **)this + 1), v5);
  v16 = v15;
  v17 = (_QWORD *)*((_QWORD *)this + 1);
  if ((*(unsigned int (**)(_QWORD *))(*v17 + 40))(v17))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17[12] + 32) + 24)
                                                                    + 8)
                                                        + 40)
                                            + 8)
                                + 1944)
                    + 248);
  }
  else
  {
    v19 = *((_QWORD *)this + 1);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1960929E0);
    }
    v20 = *(_QWORD *)(v19 - 64);
    v18 = v19 - 64;
    if (((*(uint64_t (**)(uint64_t))(v20 + 72))(v18) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196092A20);
    }
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v18 + 328) + 296);
  v22 = (_QWORD *)*((_QWORD *)this + 1);
  if (!(*(unsigned int (**)(_QWORD *))(*v22 + 40))(v22))
  {
    if (((*(uint64_t (**)(_QWORD *))(*v22 + 32))(v22) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196092A00);
    }
    if (((*(uint64_t (**)(_QWORD *))(*(v22 - 8) + 72))(v22 - 8) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196092A40);
    }
    v25 = *(_QWORD *)(v22[33] + 296);
    if (!v25)
      goto LABEL_50;
    v24 = *(_QWORD *)(v25 + 1272);
    if (!v24)
      goto LABEL_50;
    goto LABEL_34;
  }
  v23 = *(_QWORD *)(v22[12] + 32);
  if ((*(_BYTE *)(v23 + 45) & 1) == 0)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8);
    if (v24)
    {
      if ((*(_WORD *)(v24 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1960922F8);
      }
LABEL_34:
      v26 = (WebCore::RenderBox *)(*(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL);
      if (v26 && (*(_BYTE *)((*(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      {
        v27.i64[0] = v14;
        v27.i64[1] = v16;
        v28.i64[0] = 0xFE000000FE000000;
        v28.i64[1] = 0xFE000000FE000000;
        v29 = (int8x16_t)vcgtq_s32(v27, v28);
        v30.i64[0] = 0xFE000000FE000000;
        v30.i64[1] = 0xFE000000FE000000;
        v31.i64[0] = 0x8000000080000000;
        v31.i64[1] = 0x8000000080000000;
        v84 = vorrq_s8((int8x16_t)(*(_OWORD *)&v29 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v30, v27), v31, (int8x16_t)vshlq_n_s32(v27, 6uLL)), v29));
        v32 = WebCore::RenderBox::scrollPaddingForViewportRect(v26, (const WebCore::LayoutRect *)&v84);
        v35 = v84.i32[0] + v34;
        if (__OFADD__(v84.i32[0], v34))
          v35 = ((unsigned __int32)v84.i32[0] >> 31) + 0x7FFFFFFF;
        v36 = v84.i32[1] + v32;
        if (__OFADD__(v84.i32[1], (_DWORD)v32))
          v36 = ((unsigned __int32)v84.i32[1] >> 31) + 0x7FFFFFFF;
        v37 = (v34 >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(v34, HIDWORD(v32)))
          v37 = v34 + HIDWORD(v32);
        v38 = v32 + v33;
        if (__OFADD__((_DWORD)v32, v33))
          v38 = (v32 >> 31) + 0x7FFFFFFF;
        v39 = __OFSUB__(v84.i32[2], v37);
        v40 = v84.i32[2] - v37;
        if (v39)
          v40 = ((unsigned __int32)v84.i32[2] >> 31) + 0x7FFFFFFF;
        v39 = __OFSUB__(v84.i32[3], v38);
        v41 = v84.i32[3] - v38;
        if (v39)
          v41 = ((unsigned __int32)v84.i32[3] >> 31) + 0x7FFFFFFF;
        v14 = (v35 / 64) | ((unint64_t)(v36 / 64) << 32);
        v16 = (v40 / 64) | ((unint64_t)(v41 / 64) << 32);
      }
    }
  }
LABEL_50:
  v42 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v42)
    return 3;
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196092940);
  }
  v43 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)(*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL), 1, 0);
  v45 = v43;
  v46 = v44;
  if ((int)v16 < 1 || SHIDWORD(v16) < 1)
    goto LABEL_60;
  v47 = 0;
  if ((int)v44 < 1)
    goto LABEL_61;
  if (SHIDWORD(v44) < 1)
    goto LABEL_61;
  v47 = 0;
  if ((int)v43 + (int)v44 <= (int)v14 || (int)v16 + (int)v14 <= (int)v43)
    goto LABEL_61;
  if (HIDWORD(v43) + HIDWORD(v44) <= SHIDWORD(v14))
LABEL_60:
    v47 = 0;
  else
    v47 = HIDWORD(v16) + HIDWORD(v14) > SHIDWORD(v43);
LABEL_61:
  if (((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v42 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v42 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v42 + 88) + 40) + 642) << 16)) << 32)) & 0x10000000000000) != 0)
    return 0;
  v48 = *(_DWORD *)(v42 + 20) & 0x1800000;
  if (v48 == 25165824)
    return 0;
  if (v48 == 0x1000000)
  {
    v50 = *(_BYTE *)(v42 + 45);
    v51 = v42;
    if ((v50 & 2) != 0)
      v51 = *(_QWORD *)(*(_QWORD *)(v42 + 32) + 8);
    if ((*(_QWORD *)(v51 + 96) & 0x380000) == 0x300000)
      return 0;
  }
  else
  {
    v50 = *(_BYTE *)(v42 + 45);
  }
  if ((v50 & 1) != 0)
    goto LABEL_145;
  v52 = *(unsigned __int16 **)(*(_QWORD *)(v42 + 24) + 8);
  if (v52 && (~v52[14] & 0x408) == 0)
  {
    if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v52 + 368))(v52))
      return 0;
    v50 = *(_BYTE *)(v42 + 45);
    if ((v50 & 1) != 0)
    {
LABEL_145:
      if ((v50 & 2) != 0)
      {
        v79 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 32) + 8) + 96);
        if ((v79 & 0x1F) != 1 && (v79 & 0x1F) != 14)
          goto LABEL_74;
      }
      else
      {
        v79 = *(_QWORD *)(v42 + 96);
        if ((v79 & 0x1F) != 1 && (v79 & 0x1F) != 0xE)
          goto LABEL_74;
      }
      if ((v50 & 0x40) != 0
        && (v79 & 0xF80000000000) == 0
        && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 176))(v42) & 1) == 0)
      {
        v80 = *(unsigned __int8 *)(v42 + 46);
        if (v80 != 20)
        {
          if ((*(_BYTE *)(v42 + 52) & 7) == 1)
          {
            if ((*(_BYTE *)(v42 + 53) & 2) == 0 && v80 != 26 && v80 != 49)
              return 0;
          }
          else if (v80 != 49 && v80 != 26)
          {
            return 0;
          }
        }
      }
    }
  }
LABEL_74:
  if ((*(_DWORD *)(v42 + 20) & 0x1800000) != 0x1000000)
    goto LABEL_75;
  v74 = v42;
  if ((*(_BYTE *)(v42 + 45) & 2) != 0)
    v74 = *(_QWORD *)(*(_QWORD *)(v42 + 32) + 8);
  if ((*(_QWORD *)(v74 + 96) & 0x380000) != 0x100000)
    goto LABEL_75;
  v75 = (_QWORD *)*((_QWORD *)this + 1);
  if (!(*(unsigned int (**)(_QWORD *))(*v75 + 40))(v75) || (*(_BYTE *)(v42 + 21) & 0x80) == 0)
    goto LABEL_75;
  if ((*(_BYTE *)(v42 + 45) & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196092B10);
  }
  v76 = *(_QWORD *)(v42 + 144);
  if (!v76 || (v77 = v75[12], v77 == v76))
  {
LABEL_75:
    if (!v47)
    {
      v53 = *(_QWORD *)(*(_QWORD *)(v42 + 88) + 40);
      v54 = *(_BYTE *)(v53 + 462);
      v55 = *(_BYTE *)(v53 + 642) & 3;
      v56 = v54 | 0x19;
      if (v55 == 1)
        v54 |= 0x15u;
      v57 = v55 == 2 ? v56 : v54;
      if ((v57 & 2) != 0)
        return 0;
    }
    v58 = *(_QWORD *)(v21 + 1272);
    if (v58)
    {
      if ((*(_WORD *)(v58 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v58 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        v59 = *(_QWORD *)(v58 + 80);
        if (v59)
        {
          while ((*(_WORD *)(v59 + 28) & 0x10) == 0)
          {
            v59 = *(_QWORD *)(v59 + 56);
            if (!v59)
              goto LABEL_95;
          }
          v60 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
          v61 = *(_QWORD *)(*(_QWORD *)(v59 + 96) + 24);
          if (v61 != v60)
          {
LABEL_90:
            if (v61 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
            {
              while (1)
              {
                v59 = *(_QWORD *)(v59 + 56);
                if (!v59)
                  goto LABEL_95;
                if ((*(_WORD *)(v59 + 28) & 0x10) != 0)
                {
                  v61 = *(_QWORD *)(*(_QWORD *)(v59 + 96) + 24);
                  if (v61 != v60)
                    goto LABEL_90;
                  break;
                }
              }
            }
          }
          if ((WebCore::Element *)v59 == a2)
            return 3;
        }
      }
    }
LABEL_95:
    if ((*((_WORD *)a2 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      return 3;
    }
    v62 = *(_DWORD *)(v42 + 20);
    if ((v62 & 1) != 0)
    {
      if (!(_DWORD)v46)
        return 3;
    }
    else
    {
      v63 = v42;
      if ((*(_BYTE *)(v42 + 45) & 2) != 0)
        v63 = *(_QWORD *)(*(_QWORD *)(v42 + 32) + 8);
      v64 = *(_DWORD *)(v63 + 96) & 0x1F;
      v65 = v64 > 0x19;
      v66 = (1 << v64) & 0x3528029;
      if (v65 || v66 == 0)
        return 3;
      v68 = v42;
      if ((*(_BYTE *)(v42 + 45) & 2) != 0)
        v68 = *(_QWORD *)(*(_QWORD *)(v42 + 32) + 8);
      result = 3;
      if (!(*(_DWORD *)(v42 + 20) & 2 | *(_BYTE *)(v68 + 96) & 0x1F) || !(_DWORD)v46)
        return result;
    }
    if (!HIDWORD(v46))
      return 3;
    if ((int)v14 <= (int)v45
      && (int)v16 + (int)v14 >= (int)v46 + (int)v45
      && SHIDWORD(v14) <= SHIDWORD(v45)
      && HIDWORD(v16) + HIDWORD(v14) >= HIDWORD(v46) + HIDWORD(v45))
    {
      return 1;
    }
    v69 = 0;
    if ((v62 & 0x10000) != 0 && (*(_BYTE *)(v42 + 45) & 4) != 0)
    {
      if ((*(_BYTE *)(v42 + 45) & 2) != 0)
        v81 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 32) + 8) + 96);
      else
        v81 = *(_QWORD *)(v42 + 96);
      v82 = v81 & 0x1C00;
      v69 = v82 != 2048 && v82 != 0;
    }
    if (v47)
    {
      if (!v69)
        return 2;
      if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196092AD0);
        }
        if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0)
        {
          if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196092AF0);
          }
          v70 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x90);
          if (v70)
          {
            v71 = *(_QWORD *)(v70 + 264);
            if (v71)
            {
              v72 = *(_QWORD *)(v71 + 176);
              if (v72)
              {
                v73 = *(_QWORD *)(v72 + 16);
                if (!v73 || !*(_QWORD *)(v73 + 8))
                  return 2;
              }
            }
          }
        }
      }
      return 1;
    }
    if (!v69)
      return 3;
    return 0;
  }
  result = (uint64_t)WebCore::RenderObject::containingBlock(*(WebCore::RenderObject **)(v76 + 32));
  if (result)
  {
    v78 = (WebCore::RenderObject *)result;
    while (*((_BYTE *)v78 + 46) != 49)
    {
      if (*((_QWORD *)v78 + 18) == v77)
        goto LABEL_75;
      v78 = WebCore::RenderObject::containingBlock(v78);
      result = 0;
      if (!v78)
        return result;
    }
    return 0;
  }
  return result;
}

WebCore::Element *WebCore::ScrollAnchoringController::findAnchorElementRecursive(WebCore::ScrollAnchoringController *this, WebCore::Element *a2)
{
  int v4;
  uint64_t v5;
  WebCore::Element *result;

  if (!a2)
    return 0;
  v4 = WebCore::ScrollAnchoringController::examineAnchorCandidate(this, a2);
  if ((v4 - 2) >= 2)
  {
    result = a2;
    if (v4 != 1)
      return 0;
    return result;
  }
  v5 = *((_QWORD *)a2 + 10);
  if (!v5)
  {
LABEL_6:
    if (v4 == 3)
      return 0;
    else
      return a2;
  }
  while ((*(_WORD *)(v5 + 28) & 8) == 0)
  {
    v5 = *(_QWORD *)(v5 + 56);
    if (!v5)
      goto LABEL_6;
  }
LABEL_15:
  result = (WebCore::Element *)WebCore::ScrollAnchoringController::findAnchorElementRecursive(this, (WebCore::Element *)v5);
  if (!result)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v5 + 56);
      if (!v5)
        goto LABEL_6;
      if ((*(_WORD *)(v5 + 28) & 8) != 0)
        goto LABEL_15;
    }
  }
  return result;
}

uint64_t WebCore::ScrollAnchoringController::updateAnchorElement(WebCore::ScrollAnchoringController *this)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const WebCore::RenderObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  uint64_t v25;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  WebCore::ScrollableArea *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  WebCore::Element *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  WebCore::ScrollableArea *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WebCore::Node *v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  WTF *v79;
  char v80[24];

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 416))(*((_QWORD *)this + 1));
  if (!result || *((_BYTE *)this + 33))
    return result;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  result = (*(uint64_t (**)(_QWORD *))(*v3 + 40))(v3);
  if ((_DWORD)result)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3[12] + 32) + 24) + 8)
                                                       + 40)
                                           + 8)
                               + 1944)
                   + 248);
  }
  else
  {
    v5 = *((_QWORD *)this + 1);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1960934E4);
    }
    v6 = *(_QWORD *)(v5 - 64);
    v4 = v5 - 64;
    result = (*(uint64_t (**)(uint64_t))(v6 + 72))(v4);
    if ((result & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196093504);
    }
  }
  if (*(_BYTE *)(v4 + 480))
    return result;
  v7 = (_QWORD *)*((_QWORD *)this + 1);
  result = (*(uint64_t (**)(_QWORD *))(*v7 + 40))(v7);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7[12] + 32) + 24) + 8)
                                                       + 40)
                                           + 8)
                               + 1944)
                   + 248);
  }
  else
  {
    v10 = *((_QWORD *)this + 1);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1960935ACLL);
    }
    v11 = *(_QWORD *)(v10 - 64);
    v9 = v10 - 64;
    result = (*(uint64_t (**)(uint64_t))(v11 + 72))(v9);
    if ((result & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1960935CCLL);
    }
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 328) + 296);
  if (!v12)
    return result;
  *(_DWORD *)(v12 + 24) += 2;
  v13 = *((_QWORD *)this + 2);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL;
      if (v15)
      {
        if ((*(_BYTE *)(v15 + 45) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196092D38);
        }
        goto LABEL_162;
      }
      WebCore::ScrollAnchoringController::invalidateAnchorElement((uint64_t)this, v8);
      v16 = *((_QWORD *)this + 2);
      if (v16 && *(_QWORD *)(v16 + 8))
        goto LABEL_162;
    }
  }
  v17 = *(_QWORD *)(v12 + 1248);
  if (!v17)
    goto LABEL_135;
  while (1)
  {
    v18 = *(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL;
    if (v18)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1960934BCLL);
      }
      if ((*(_BYTE *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 1) != 0)
      {
        v25 = *(_QWORD *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x60);
        if (((v25 & 0x1F) == 1 || (v25 & 0x1F) == 14)
          && (*(_BYTE *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x40) != 0
          && (v25 & 0xF80000000000) == 0
          && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 176))(*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) & 1) == 0)
        {
          v27 = *(unsigned __int8 *)(v18 + 46);
          if (v27 != 20)
          {
            if ((*(_BYTE *)(v18 + 52) & 7) == 1)
            {
              if ((*(_BYTE *)(v18 + 53) & 2) == 0 && v27 != 26 && v27 != 49)
                goto LABEL_33;
            }
            else if (v27 != 49 && v27 != 26)
            {
              goto LABEL_33;
            }
          }
        }
      }
      v19 = *(_DWORD *)(v18 + 20);
      if ((v19 & 1) != 0)
        goto LABEL_55;
      v20 = v18;
      if ((*(_BYTE *)(v18 + 45) & 2) != 0)
        v20 = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8);
      v21 = *(_DWORD *)(v20 + 96) & 0x1F;
      v22 = v21 > 0x19;
      v23 = (1 << v21) & 0x3528029;
      if (!v22 && v23 != 0)
        break;
    }
LABEL_33:
    v17 = *(_QWORD *)(v17 + 32);
    if (!v17 || (*(_WORD *)(v17 + 28) & 8) == 0)
      goto LABEL_135;
  }
  if ((*(_BYTE *)(v18 + 45) & 2) == 0)
  {
    if ((v19 & 2) != 0)
      goto LABEL_55;
LABEL_32:
    if ((*(_QWORD *)(v18 + 96) & 0x1FLL) != 0)
      goto LABEL_55;
    goto LABEL_33;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8);
  if ((v19 & 2) == 0)
    goto LABEL_32;
LABEL_55:
  *(_DWORD *)(v17 + 24) += 2;
  v28 = (_QWORD *)*((_QWORD *)this + 1);
  if ((*(unsigned int (**)(_QWORD *))(*v28 + 40))(v28))
  {
    v29 = *(_QWORD *)(v28[12] + 32);
    if ((*(_BYTE *)(v29 + 45) & 1) != 0)
    {
      v30 = 0;
    }
    else
    {
      v30 = *(_QWORD *)(*(_QWORD *)(v29 + 24) + 8);
      if (v30 && (*(_WORD *)(v30 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196092ED0);
      }
    }
  }
  else
  {
    if (((*(uint64_t (**)(_QWORD *))(*v28 + 32))(v28) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196093714);
    }
    if (((*(uint64_t (**)(_QWORD *))(*(v28 - 8) + 72))(v28 - 8) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196093734);
    }
    v30 = *(_QWORD *)(v28[33] + 296);
    if (v30)
      v30 = *(_QWORD *)(v30 + 1272);
  }
  if (v17 == v30)
  {
    v39 = 0;
    goto LABEL_122;
  }
  *(_DWORD *)(v17 + 24) += 2;
  v31 = v17;
  do
  {
    v32 = v31;
    v33 = (_QWORD *)*((_QWORD *)this + 1);
    if ((*(unsigned int (**)(_QWORD *))(*v33 + 40))(v33))
    {
      v34 = *(_QWORD *)(v33[12] + 32);
      if ((*(_BYTE *)(v34 + 45) & 1) != 0)
      {
        v35 = 0;
      }
      else
      {
        v35 = *(_QWORD *)(*(_QWORD *)(v34 + 24) + 8);
        if (v35 && (*(_WORD *)(v35 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19609358CLL);
        }
      }
    }
    else
    {
      if (((*(uint64_t (**)(_QWORD *))(*v33 + 32))(v33) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19609354CLL);
      }
      if (((*(uint64_t (**)(_QWORD *))(*(v33 - 8) + 72))(v33 - 8) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19609356CLL);
      }
      v35 = *(_QWORD *)(v33[33] + 296);
      if (v35)
        v35 = *(_QWORD *)(v35 + 1272);
    }
    if (v32 == v35)
      goto LABEL_104;
    v36 = WebCore::ScrollAnchoringController::examineAnchorCandidate(this, (WebCore::Element *)v32);
    v37 = (_QWORD *)(*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL);
    if (v37)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19609352CLL);
      }
      if ((*(_BYTE *)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196093610);
        }
        v37 = *(_QWORD **)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) + 0x90);
        if (v37)
        {
          v37 = (_QWORD *)v37[33];
          if (v37)
            v37 = (_QWORD *)v37[22];
        }
      }
      else
      {
        v37 = 0;
      }
    }
    if (!v36)
    {
LABEL_102:
      v39 = 0;
      goto LABEL_119;
    }
    if (v32 == v17 && v36 == 3)
    {
      v39 = 0;
      v32 = v17;
      goto LABEL_119;
    }
    if (v37)
    {
      v38 = v37[2];
      if (v38)
      {
        if (*(_QWORD *)(v38 + 8))
          goto LABEL_102;
      }
    }
    v31 = *(_QWORD *)(v32 + 32);
    if (v31)
    {
      if ((*(_WORD *)(v31 + 28) & 8) != 0)
        *(_DWORD *)(v31 + 24) += 2;
      else
        v31 = 0;
    }
    if (*(_DWORD *)(v32 + 24) == 2)
    {
      if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v32);
    }
    else
    {
      *(_DWORD *)(v32 + 24) -= 2;
    }
  }
  while (v31);
  v32 = 0;
LABEL_104:
  v40 = (_QWORD *)*((_QWORD *)this + 1);
  if ((*(unsigned int (**)(_QWORD *))(*v40 + 40))(v40))
  {
    v41 = *(_QWORD *)(v40[12] + 32);
    if ((*(_BYTE *)(v41 + 45) & 1) != 0)
    {
      v42 = 0;
    }
    else
    {
      v42 = *(_QWORD *)(*(_QWORD *)(v41 + 24) + 8);
      if (v42 && (*(_WORD *)(v42 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1960930E8);
      }
    }
  }
  else
  {
    if (((*(uint64_t (**)(_QWORD *))(*v40 + 32))(v40) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196093754);
    }
    if (((*(uint64_t (**)(_QWORD *))(*(v40 - 8) + 72))(v40 - 8) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196093774);
    }
    v42 = *(_QWORD *)(v40[33] + 296);
    if (v42)
      v42 = *(_QWORD *)(v42 + 1272);
  }
  if (v32 == v42)
    v39 = v17;
  else
    v39 = 0;
  if (v32 == v42)
    v17 = 0;
  if (v32)
  {
LABEL_119:
    if (*(_DWORD *)(v32 + 24) == 2)
    {
      if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v32);
    }
    else
    {
      *(_DWORD *)(v32 + 24) -= 2;
    }
  }
  if (v17)
  {
LABEL_122:
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
  if (v39)
  {
    v43 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v39);
    if (v43)
    {
      do
        v45 = __ldaxr((unsigned int *)v43);
      while (__stlxr(v45 + 1, (unsigned int *)v43));
    }
    v46 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v43;
    if (v46)
    {
      do
      {
        v47 = __ldaxr((unsigned int *)v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, (unsigned int *)v46));
      if (!v48)
      {
        atomic_store(1u, (unsigned int *)v46);
        v78 = *(unsigned int *)(v46 + 28);
        if ((_DWORD)v78)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v46 + 16), (WTF::StringImpl *)(*(_QWORD *)(v46 + 16) + 32 * v78));
        v79 = *(WTF **)(v46 + 16);
        if (v79)
        {
          *(_QWORD *)(v46 + 16) = 0;
          *(_DWORD *)(v46 + 24) = 0;
          WTF::fastFree(v79, v44);
        }
        WTF::fastFree((WTF *)v46, v44);
      }
      v43 = *((_QWORD *)this + 2);
    }
    v49 = *(_QWORD *)(*(_QWORD *)(v43 + 8) + 64);
    if ((v49 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v49 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1960936F4);
    }
    v50 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)(v49 & 0xFFFFFFFFFFFFLL), 1, 0);
    v51 = v50;
    v52 = HIDWORD(v50);
    result = WebCore::boundingRectForScrollableArea(*((WebCore **)this + 1), v53);
    *((float *)this + 6) = (float)(v51 - result);
    *((float *)this + 7) = (float)((int)v52 - HIDWORD(result));
    if (*(_DWORD *)(v39 + 24) != 2)
    {
      *(_DWORD *)(v39 + 24) -= 2;
      goto LABEL_160;
    }
    if ((*(_WORD *)(v39 + 30) & 0x400) != 0)
      goto LABEL_160;
    v75 = (WebCore::Node *)v39;
LABEL_180:
    result = WebCore::Node::removedLastRef(v75);
    goto LABEL_160;
  }
LABEL_135:
  v54 = *((_QWORD *)this + 2);
  if (v54 && *(_QWORD *)(v54 + 8))
  {
    v55 = 0;
    v56 = 0;
    goto LABEL_151;
  }
  v57 = (_QWORD *)*((_QWORD *)this + 1);
  if ((*(unsigned int (**)(_QWORD *))(*v57 + 40))(v57))
  {
    v58 = *(_QWORD *)(v57[12] + 32);
    if ((*(_BYTE *)(v58 + 45) & 1) == 0)
    {
      v59 = *(WebCore::Element **)(*(_QWORD *)(v58 + 24) + 8);
      if (v59 && (*((_WORD *)v59 + 14) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196093270);
      }
      goto LABEL_148;
    }
LABEL_147:
    v59 = 0;
  }
  else
  {
    if (((*(uint64_t (**)(_QWORD *))(*v57 + 32))(v57) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1960936B4);
    }
    if (((*(uint64_t (**)(_QWORD *))(*(v57 - 8) + 72))(v57 - 8) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1960936D4);
    }
    v60 = *(_QWORD *)(v57[33] + 296);
    if (!v60)
      goto LABEL_147;
    v59 = *(WebCore::Element **)(v60 + 1272);
  }
LABEL_148:
  result = (uint64_t)WebCore::ScrollAnchoringController::findAnchorElementRecursive(this, v59);
  if (!result)
    goto LABEL_160;
  v55 = result;
  *(_DWORD *)(result + 24) += 2;
  v56 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(result);
  if (v56)
  {
    do
      v61 = __ldaxr((unsigned int *)v56);
    while (__stlxr(v61 + 1, (unsigned int *)v56));
  }
LABEL_151:
  v62 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v56;
  if (v62)
  {
    do
    {
      v63 = __ldaxr((unsigned int *)v62);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, (unsigned int *)v62));
    if (!v64)
    {
      atomic_store(1u, (unsigned int *)v62);
      v76 = *(unsigned int *)(v62 + 28);
      if ((_DWORD)v76)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v62 + 16), (WTF::StringImpl *)(*(_QWORD *)(v62 + 16) + 32 * v76));
      v77 = *(WTF **)(v62 + 16);
      if (v77)
      {
        *(_QWORD *)(v62 + 16) = 0;
        *(_DWORD *)(v62 + 24) = 0;
        WTF::fastFree(v77, v8);
      }
      WTF::fastFree((WTF *)v62, v8);
    }
    v56 = *((_QWORD *)this + 2);
  }
  v65 = *(_QWORD *)(*(_QWORD *)(v56 + 8) + 64);
  if ((v65 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v65 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196093630);
  }
  v66 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)(v65 & 0xFFFFFFFFFFFFLL), 1, 0);
  v67 = v66;
  v68 = HIDWORD(v66);
  result = WebCore::boundingRectForScrollableArea(*((WebCore **)this + 1), v69);
  *((float *)this + 6) = (float)(v67 - result);
  *((float *)this + 7) = (float)((int)v68 - HIDWORD(result));
  if (v55)
  {
    if (*(_DWORD *)(v55 + 24) != 2)
    {
      *(_DWORD *)(v55 + 24) -= 2;
      goto LABEL_160;
    }
    if ((*(_WORD *)(v55 + 30) & 0x400) != 0)
      goto LABEL_160;
    v75 = (WebCore::Node *)v55;
    goto LABEL_180;
  }
LABEL_160:
  v70 = *((_QWORD *)this + 2);
  if (v70 && *(_QWORD *)(v70 + 8))
  {
LABEL_162:
    *((_BYTE *)this + 33) = 1;
    v71 = (_QWORD *)*((_QWORD *)this + 1);
    if ((*(unsigned int (**)(_QWORD *))(*v71 + 40))(v71))
    {
      v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v71[12] + 32) + 24)
                                                                      + 8)
                                                          + 40)
                                              + 8)
                                  + 1944)
                      + 248);
    }
    else
    {
      v73 = *((_QWORD *)this + 1);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196093650);
      }
      v74 = *(_QWORD *)(v73 - 64);
      v72 = v73 - 64;
      if (((*(uint64_t (**)(uint64_t))(v74 + 72))(v72) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196093670);
      }
    }
    result = (uint64_t)WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScrollableArea>(v72 + 1336, *((_QWORD **)this + 1), (uint64_t)v80);
  }
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v12);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::ScrollAnchoringController::adjustScrollPositionForAnchoring(uint64_t this, const WebCore::RenderObject *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WebCore::RenderObject *v8;
  char v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  WebCore::ScrollableArea *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  const WebCore::RenderObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  int v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x2_t v39;
  uint64_t v40;
  uint8_t buf[16];
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(this + 33);
  v3 = *(unsigned __int8 *)(this + 34);
  *(_WORD *)(this + 33) = 0;
  v4 = *(_QWORD *)(this + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v2 && v5 != 0)
    {
      v7 = this;
      v8 = (WebCore::RenderObject *)(*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL);
      if (!v8)
      {
LABEL_9:
        WebCore::ScrollAnchoringController::invalidateAnchorElement(v7, a2);
        return WebCore::ScrollAnchoringController::updateAnchorElement((WebCore::ScrollAnchoringController *)v7);
      }
      if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        if (v3)
          goto LABEL_9;
        v9 = *(_BYTE *)(v7 + 32);
        *(_BYTE *)(v7 + 32) = 1;
        v10 = WebCore::RenderObject::absoluteBoundingBoxRect(v8, 1, 0);
        v11 = v10;
        v12 = HIDWORD(v10);
        this = WebCore::boundingRectForScrollableArea(*(WebCore **)(v7 + 8), v13);
        v14 = *(float *)(v7 + 24);
        v15 = *(float *)(v7 + 28);
        v16 = (float)(v11 - this) - v14;
        v17 = (float)((int)v12 - HIDWORD(this)) - v15;
        if (v16 == 0.0)
          goto LABEL_20;
        v18 = -v16;
        if (v16 >= 0.0)
          v18 = (float)(v11 - this) - v14;
        if (v18 < 0.00000011921)
        {
LABEL_20:
          if (v17 == 0.0)
            goto LABEL_12;
          v19 = (float)((int)v12 - HIDWORD(this)) - v15;
          if (v17 < 0.0)
            v19 = -v17;
          if (v19 < 0.00000011921)
            goto LABEL_12;
        }
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 616))(*(_QWORD *)(v7 + 8)))
        {
          WebCore::ScrollAnchoringController::invalidateAnchorElement(v7, v20);
          this = WebCore::ScrollAnchoringController::updateAnchorElement((WebCore::ScrollAnchoringController *)v7);
LABEL_12:
          *(_BYTE *)(v7 + 32) = v9;
          return this;
        }
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 416))(*(_QWORD *)(v7 + 8));
        v22 = (v21 + (int)v16);
        v23 = (HIDWORD(v21) + (int)v17);
        v40 = v22 | (v23 << 32);
        v24 = qword_1ECE7C900;
        if (!os_log_type_enabled((os_log_t)qword_1ECE7C900, OS_LOG_TYPE_DEFAULT))
        {
LABEL_29:
          *(_OWORD *)buf = xmmword_1969F6380;
          *(float *)&buf[4] = v16;
          *(float *)&buf[8] = v17;
          v33 = *(_BYTE **)(v7 + 8);
          v34 = v33[44];
          v33[44] = 1;
          this = (*(uint64_t (**)(_BYTE *, uint64_t *, uint8_t *))(*(_QWORD *)v33 + 56))(v33, &v40, buf);
          if ((this & 1) == 0)
          {
            v35 = *(_QWORD *)(v7 + 8);
            v39 = vcvt_f32_s32((int32x2_t)v40);
            v36 = *(_QWORD *)(v35 + 16);
            if (!v36)
            {
              v36 = WTF::fastMalloc((WTF *)0xB0);
              *(_QWORD *)v36 = off_1E3405EF0;
              *(_QWORD *)(v36 + 8) = v35;
              *(_QWORD *)(v36 + 16) = 0;
              *(_QWORD *)(v36 + 24) = &off_1E3406D78;
              *(_OWORD *)(v36 + 32) = 0u;
              *(_OWORD *)(v36 + 48) = 0u;
              *(_OWORD *)(v36 + 64) = 0u;
              *(_QWORD *)(v36 + 80) = 0;
              *(_QWORD *)(v36 + 88) = v36;
              *(_QWORD *)(v36 + 96) = 0;
              *(_QWORD *)(v36 + 104) = 0;
              *(_QWORD *)(v36 + 110) = 0;
              *(_QWORD *)(v36 + 120) = 0;
              v37 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v37 = 0;
              *(_DWORD *)(v37 + 8) = 0;
              *(_QWORD *)(v37 + 16) = v35;
              *(_BYTE *)(v37 + 24) = 0;
              *(_QWORD *)(v36 + 128) = v37;
              *(_BYTE *)(v36 + 136) = 0;
              *(_QWORD *)v36 = off_1E3354B08;
              *(_QWORD *)(v36 + 168) = 0;
              *(_DWORD *)(v36 + 140) = 0;
              *(_DWORD *)(v36 + 143) = 0;
              *(_QWORD *)(v36 + 156) = 0;
              *(_QWORD *)(v36 + 148) = 0;
              v38 = *(_QWORD *)(v35 + 16);
              *(_QWORD *)(v35 + 16) = v36;
              if (v38)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
                v36 = *(_QWORD *)(v35 + 16);
              }
            }
            this = WebCore::ScrollAnimator::scrollToPositionWithoutAnimation((float32x2_t *)v36, (float *)&v39, 1);
          }
          *(_BYTE *)(*(_QWORD *)(v7 + 8) + 44) = v34;
          goto LABEL_12;
        }
        v25 = *(_QWORD **)(v7 + 8);
        if ((*(unsigned int (**)(_QWORD *))(*v25 + 40))(v25))
        {
          v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25[12] + 32)
                                                                                      + 24)
                                                                          + 8)
                                                              + 40)
                                                  + 8)
                                      + 1944)
                          + 248);
LABEL_28:
          v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 328) + 128) + 8) == *(_QWORD *)(v26 + 328);
          v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 40))(*(_QWORD *)(v7 + 8)) ^ 1;
          v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 416))(*(_QWORD *)(v7 + 8));
          v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 416))(*(_QWORD *)(v7 + 8));
          *(_DWORD *)buf = 67110400;
          *(_DWORD *)&buf[4] = v29;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v30;
          *(_WORD *)&buf[14] = 1024;
          v42 = v31;
          v43 = 1024;
          v44 = HIDWORD(v32);
          v45 = 1024;
          v46 = v22;
          v47 = 1024;
          v48 = v23;
          _os_log_impl(&dword_1940B8000, v24, OS_LOG_TYPE_DEFAULT, "ScrollAnchoringController::updateScrollPosition() is main frame: %d, is main scroller: %d, adjusting from: (%d, %d) to: (%d, %d)", buf, 0x26u);
          goto LABEL_29;
        }
        v27 = *(_QWORD *)(v7 + 8);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196093C1CLL);
        }
        v28 = *(_QWORD *)(v27 - 64);
        v26 = v27 - 64;
        if (((*(uint64_t (**)(uint64_t))(v28 + 72))(v26) & 1) != 0)
          goto LABEL_28;
      }
      __break(0xC471u);
      JUMPOUT(0x196093BF0);
    }
  }
  return this;
}

uint64_t WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1 || !*((_DWORD *)a1 - 3))
    return 1;
  v2 = *((unsigned int *)a1 - 1);
  v3 = &a1[v2];
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    while ((unint64_t)(*a1 + 1) <= 1)
    {
      ++a1;
      v4 -= 8;
      if (!v4)
        goto LABEL_10;
    }
  }
  if (a1 != v3)
  {
    v5 = *a1;
LABEL_13:
    if (*(_QWORD *)(v5 + 8))
      return a1 == v3;
    while (++a1 != v3)
    {
      v5 = *a1;
      if ((unint64_t)(*a1 + 1) > 1)
      {
        if (a1 == v3)
          break;
        goto LABEL_13;
      }
    }
  }
LABEL_10:
  a1 = v3;
  return a1 == v3;
}

uint64_t WebCore::axesFlippedForWritingModeAndDirection(int a1, int a2)
{
  int v2;
  int v3;

  switch(a1)
  {
    case 1:
    case 3:
    case 5:
      v2 = a2;
      v3 = 1;
      break;
    default:
      v2 = a2;
      v3 = 0;
      break;
  }
  return v2 | (v3 << 8);
}

unint64_t WebCore::computeScrollSnapPortOrAreaRect(unsigned int *a1, WebCore::Length *this, int a3)
{
  int v6;
  float v7;
  double v8;
  int v9;
  int v10;
  int v11;
  int v12;
  float v13;
  double v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v23;
  float v24;
  int v25;
  float v26;

  v6 = *((unsigned __int8 *)this + 4);
  if (v6 == 4)
  {
    v7 = *(float *)this;
    if (!*((_BYTE *)this + 6))
      v7 = (float)*(int *)this;
  }
  else
  {
    v23 = a1[3];
    if (v6 == 3)
    {
      v24 = *(float *)this;
      if (!*((_BYTE *)this + 6))
        v24 = (float)*(int *)this;
      v7 = (float)((float)((float)v23 * 0.015625) * v24) / 100.0;
    }
    else
    {
      if (v6 != 11)
      {
        v9 = 0;
        goto LABEL_7;
      }
      WebCore::Length::nonNanCalculatedValue(this, (float)v23 * 0.015625);
    }
  }
  v8 = v7 * 64.0;
  if (v8 >= 2147483650.0)
  {
    v9 = 0x7FFFFFFF;
  }
  else if (v8 <= -2147483650.0)
  {
    v9 = 0x80000000;
  }
  else
  {
    v9 = (int)v8;
  }
LABEL_7:
  v10 = *((unsigned __int8 *)this + 12);
  if (v10 != 4 && v10 != 3 && v10 == 11)
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)((char *)this + 8), (float)(int)a1[2] * 0.015625);
  v11 = *((unsigned __int8 *)this + 20);
  if (v11 != 4 && v11 != 3 && v11 == 11)
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)((char *)this + 16), (float)(int)a1[3] * 0.015625);
  v12 = *((unsigned __int8 *)this + 28);
  if (v12 == 4)
  {
    v13 = *((float *)this + 6);
    if (!*((_BYTE *)this + 30))
      v13 = (float)SLODWORD(v13);
  }
  else
  {
    v25 = a1[2];
    if (v12 == 3)
    {
      v26 = *((float *)this + 6);
      if (!*((_BYTE *)this + 30))
        v26 = (float)SLODWORD(v26);
      v13 = (float)((float)((float)v25 * 0.015625) * v26) / 100.0;
    }
    else
    {
      if (v12 != 11)
      {
        v15 = 0;
        goto LABEL_15;
      }
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)((char *)this + 24), (float)v25 * 0.015625);
    }
  }
  v14 = v13 * 64.0;
  if (v14 >= 2147483650.0)
  {
    v15 = 0x7FFFFFFF;
  }
  else if (v14 <= -2147483650.0)
  {
    v15 = 0x80000000;
  }
  else
  {
    v15 = (int)v14;
  }
LABEL_15:
  v16 = *a1;
  v17 = a1[1];
  if (a3)
  {
    if (v15 == 0x80000000)
      v18 = 0x7FFFFFFF;
    else
      v18 = -v15;
    if (v9 == 0x80000000)
      v19 = 0x7FFFFFFF;
    else
      v19 = -v9;
    v20 = v16 + v18;
    if (__OFADD__(v16, v18))
      v20 = (v16 >> 31) + 0x7FFFFFFF;
    v21 = v17 + v19;
    if (__OFADD__(v17, v19))
      v21 = (v17 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v20 = v16 + v15;
    if (__OFADD__(v16, v15))
      v20 = (v16 >> 31) + 0x7FFFFFFF;
    v21 = v17 + v9;
    if (__OFADD__(v17, v9))
      v21 = (v17 >> 31) + 0x7FFFFFFF;
  }
  return v20 | (unint64_t)(v21 << 32);
}

uint64_t *WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_1::operator()(uint64_t *result, void *a2, int a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  int v7;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  int v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;

  v7 = (int)a2;
  v31 = a7;
  if (((_DWORD)a2 + 0x7FFFFFFF) > 0xFFFFFFFD)
    return result;
  v12 = result;
  v13 = *result;
  if (*result
    || (WTF::HashTable<WebCore::LayoutUnit,WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LayoutUnit>>::rehash(result, 8u, 0), (v13 = *v12) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = 9 * ((~(v7 << 15) + v7) ^ ((~(v7 << 15) + v7) >> 10));
  v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
  v17 = v14 & (v16 ^ HIWORD(v16));
  v18 = (_DWORD *)(v13 + 48 * v17);
  v19 = *v18;
  if (*v18 != 0x80000000)
  {
    v20 = 0;
    v21 = 1;
    while (v19 != v7)
    {
      if (v19 == 0x7FFFFFFF)
        v20 = v18;
      v17 = (v17 + v21) & v14;
      v18 = (_DWORD *)(v13 + 48 * v17);
      v19 = *v18;
      ++v21;
      if (*v18 == 0x80000000)
      {
        if (v20)
        {
          *v20 = 0x80000000;
          *(_OWORD *)(v20 + 2) = 0u;
          *(_OWORD *)(v20 + 6) = 0u;
          *((_QWORD *)v20 + 5) = 0;
          --*(_DWORD *)(*v12 - 16);
          v18 = v20;
        }
        goto LABEL_13;
      }
    }
    goto LABEL_28;
  }
LABEL_13:
  *v18 = v7;
  v18[2] = v7;
  *((_BYTE *)v18 + 12) = a3;
  *((_BYTE *)v18 + 13) = a4;
  *((_QWORD *)v18 + 2) = a5;
  *((_BYTE *)v18 + 24) = a6;
  v22 = (WTF *)*((_QWORD *)v18 + 4);
  if (v22)
  {
    *((_QWORD *)v18 + 4) = 0;
    v18[10] = 0;
    WTF::fastFree(v22, a2);
  }
  *((_QWORD *)v18 + 4) = 0;
  *((_QWORD *)v18 + 5) = 0;
  v23 = *v12;
  if (*v12)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v12;
  if (*v12)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_28;
    goto LABEL_24;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v29 = 8;
      goto LABEL_27;
    }
LABEL_24:
    v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
LABEL_27:
    v18 = WTF::HashTable<WebCore::LayoutUnit,WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LayoutUnit>>::rehash(v12, v29, v18);
  }
LABEL_28:
  if (a3)
    *((_BYTE *)v18 + 12) = 1;
  *((_BYTE *)v18 + 13) |= a4;
  result = (uint64_t *)(v18 + 8);
  v30 = v18[11];
  if ((_DWORD)v30 == v18[10])
  {
    result = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v30 + 1, (unint64_t)&v31);
    v30 = v18[11];
    *(_QWORD *)(*((_QWORD *)v18 + 4) + 8 * v30) = *result;
  }
  else
  {
    *(_QWORD *)(*result + 8 * v30) = v31;
  }
  v18[11] = v30 + 1;
  return result;
}

_QWORD *WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::values(_QWORD *result, _QWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;

  v2 = (_DWORD *)*a2;
  if (!*a2)
  {
    v5 = 0;
    LODWORD(v3) = 0;
LABEL_10:
    v4 = &v2[12 * v3];
    goto LABEL_11;
  }
  v3 = *(v2 - 1);
  v4 = &v2[12 * v3];
  if (!*(v2 - 3))
  {
    v5 = &v2[12 * v3];
    goto LABEL_10;
  }
  v5 = (_DWORD *)*a2;
  if ((_DWORD)v3)
  {
    v6 = 48 * v3;
    v5 = (_DWORD *)*a2;
    while ((*v5 - 0x7FFFFFFF) <= 1)
    {
      v5 += 12;
      v6 -= 48;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  if (v2)
  {
    v7 = *(v2 - 1);
    v8 = &v2[12 * v7];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  *result = a2;
  result[1] = v5;
  result[2] = v4;
  result[3] = v8;
  result[4] = &v2[12 * v7];
  return result;
}

uint64_t std::sort[abi:sn180100]<WebCore::SnapOffset<WebCore::LayoutUnit> *,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0>(uint64_t a1, int *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3));
  if (a2 == (int *)a1)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *,false>(a1, a2, v3, 1);
}

uint64_t WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *v13;

  v3 = a2[3];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >= 0x6666667)
    {
LABEL_10:
      __break(0xC471u);
      JUMPOUT(0x196094650);
    }
    v5 = 40 * v3;
    v6 = WTF::fastMalloc((WTF *)(40 * v3));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v6;
    v7 = a2[3];
    if ((_DWORD)v7)
    {
      v8 = (unsigned int *)(*(_QWORD *)a2 + 36);
      v9 = v6 + 24;
      v10 = 40 * v7;
      do
      {
        v11 = *(_OWORD *)(v8 - 9);
        *(_BYTE *)(v9 - 8) = *((_BYTE *)v8 - 20);
        *(_OWORD *)(v9 - 24) = v11;
        v12 = *v8;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 12) = v12;
        if ((_DWORD)v12)
        {
          if (v12 >> 29)
            goto LABEL_10;
          v13 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
          *(_DWORD *)(v9 + 8) = v12;
          *(_QWORD *)v9 = v13;
          memcpy(v13, *(const void **)(v8 - 3), 8 * *v8);
        }
        v8 += 10;
        v9 += 40;
        v10 -= 40;
      }
      while (v10);
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::LayoutRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 28))
  {
    v5 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(__int128 **)a2;
      v8 = 16 * v6;
      do
      {
        v9 = *v7++;
        *v5++ = v9;
        v8 -= 16;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v2;
  if ((_DWORD)v2)
  {
    v9 = result;
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = v2;
      v4 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v2));
      result = v9;
      *(_DWORD *)(v9 + 8) = v3;
      *(_QWORD *)v9 = v4;
      v5 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v5)
      {
        v6 = *(uint64_t **)a2;
        v7 = 8 * v5;
        do
        {
          v8 = *v6++;
          *v4++ = v8;
          v7 -= 8;
        }
        while (v7);
      }
    }
  }
  return result;
}

WTF **WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF **result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  char *v5;
  WTF *v6;
  char *v7;
  uint64_t v8;
  WTF **v9;
  WTF **v10;

  v2 = *((unsigned int *)result + 3);
  v3 = *result;
  if (!(_DWORD)v2)
  {
    if (!v3)
      return result;
LABEL_9:
    *result = 0;
    *((_DWORD *)result + 2) = 0;
    v10 = result;
    WTF::fastFree(v3, a2);
    return v10;
  }
  v9 = result;
  v4 = 40 * v2;
  v5 = (char *)v3 + 24;
  do
  {
    v6 = *(WTF **)v5;
    if (*(_QWORD *)v5)
    {
      *(_QWORD *)v5 = 0;
      *((_DWORD *)v5 + 2) = 0;
      v7 = v5;
      v8 = v4;
      WTF::fastFree(v6, a2);
      v5 = v7;
      v4 = v8;
    }
    v5 += 40;
    v4 -= 40;
  }
  while (v4);
  result = v9;
  v3 = *v9;
  if (*v9)
    goto LABEL_9;
  return result;
}

uint64_t *WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 32;
      do
      {
        if (*(_DWORD *)(v5 - 32) != 0x7FFFFFFF)
        {
          v6 = *(WTF **)v5;
          if (*(_QWORD *)v5)
          {
            *(_QWORD *)v5 = 0;
            *(_DWORD *)(v5 + 8) = 0;
            WTF::fastFree(v6, a2);
          }
        }
        v5 += 48;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

_QWORD *WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>::convertUnits<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>>(uint64_t a1, uint64_t a2, float a3)
{
  _QWORD *result;
  uint64_t v7;
  int v8;
  double v9;
  int *v10;
  float *v11;
  uint64_t v12;
  int v13;
  double v14;
  double v15;
  int v16;
  double v17;
  double v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  WebCore::convertOffsetInfo<WebCore::LayoutUnit,WebCore::LayoutRect,float,WebCore::FloatRect>(WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect> const&,float)::{lambda(WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}::operator()((_QWORD *)(a1 + 8), (uint64_t *)(a2 + 8), a3);
  result = WebCore::convertOffsetInfo<WebCore::LayoutUnit,WebCore::LayoutRect,float,WebCore::FloatRect>(WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect> const&,float)::{lambda(WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}::operator()((_QWORD *)(a1 + 24), (uint64_t *)(a2 + 24), a3);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v7)
  {
    if (v7 >> 28)
      goto LABEL_26;
    result = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v7));
    *(_DWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 40) = result;
    v8 = *(_DWORD *)(a2 + 52);
    if (v8)
    {
      v9 = a3;
      v10 = (int *)(*(_QWORD *)(a2 + 40) + 8);
      v11 = (float *)(result + 1);
      v12 = *(unsigned int *)(a2 + 52);
      do
      {
        v13 = *(v10 - 2);
        v14 = (double)v13 * 0.015625;
        if (v14 < 0.0)
          v15 = round((v14 + (double)-v13) * v9) / v9 - (double)-v13;
        else
          v15 = round(v14 * v9) / v9;
        v16 = *(v10 - 1);
        v17 = (double)v16 * 0.015625;
        if (v17 < 0.0)
          v18 = round((v17 + (double)-v16) * v9) / v9 - (double)-v16;
        else
          v18 = round(v17 * v9) / v9;
        v19 = *v10;
        v20 = v10[1];
        v10 += 4;
        v21 = (double)v19 * 0.015625;
        v22 = round((v21 + (double)-v19) * v9) / v9 - (double)-v19;
        v23 = round(v21 * v9) / v9;
        if (v21 >= 0.0)
          v24 = v23;
        else
          v24 = v22;
        v25 = (double)v20 * 0.015625;
        v26 = round((v25 + (double)-v20) * v9) / v9 - (double)-v20;
        v27 = round(v25 * v9) / v9;
        if (v25 >= 0.0)
          v28 = v27;
        else
          v28 = v26;
        v29 = v24;
        v30 = v18;
        v31 = v15;
        *(v11 - 2) = v31;
        *(v11 - 1) = v30;
        v32 = v28;
        *v11 = v29;
        v11[1] = v32;
        v11 += 4;
        --v12;
      }
      while (v12);
      *(_DWORD *)(a1 + 52) = v8;
    }
  }
  v33 = *(unsigned int *)(a2 + 68);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v33;
  if (!(_DWORD)v33)
    return result;
  if (v33 >> 29)
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x196094A88);
  }
  v34 = v33;
  result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v33));
  *(_DWORD *)(a1 + 64) = v34;
  *(_QWORD *)(a1 + 56) = result;
  v35 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v35)
  {
    v36 = *(uint64_t **)(a2 + 56);
    v37 = 8 * v35;
    do
    {
      v38 = *v36++;
      *result++ = v38;
      v37 -= 8;
    }
    while (v37);
  }
  return result;
}

uint64_t WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>::closestSnapOffset<WebCore::LayoutSize,WebCore::LayoutPoint>(uint64_t a1, int a2, int *a3, unint64_t a4, uint64_t a5, float a6)
{
  int *v9;
  unint64_t v12;
  int v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  int v47;
  uint64_t v49;
  int v50;
  unint64_t *v51;
  int v52;
  uint64_t v53;
  int *v54;
  int v55;
  int v56;
  unint64_t v58;
  unint64_t v59;
  int v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  signed int v79;
  signed int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  signed int v87;
  unsigned int v88;
  int v89;
  char *v90;
  uint64_t v91;
  char *v92;
  WTF *v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v98;
  int *v99;
  int v100;
  int v101;
  int v103;
  unint64_t *v104;
  uint64_t v106;
  char *v107;
  WTF *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  int *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char v119;
  char v120;
  int v121;
  unint64_t v122;
  int v123;
  unint64_t v124;
  int v125;
  _QWORD v126[2];

  v9 = a3;
  v12 = WebCore::closestSnapOffsetWithInfoAndAxis<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>,WebCore::LayoutSize,WebCore::LayoutUnit,WebCore::LayoutPoint>(a1, 0, a3, a4, a5, a6);
  v124 = v12;
  v120 = v13;
  v125 = v13;
  v112 = a4;
  v15 = WebCore::closestSnapOffsetWithInfoAndAxis<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>,WebCore::LayoutSize,WebCore::LayoutUnit,WebCore::LayoutPoint>(a1, 1, v9, a4, a5, a6);
  v122 = v15;
  v123 = (int)v14;
  v16 = *(unsigned int *)(a1 + 20);
  v121 = a2;
  v119 = (char)v14;
  if ((_DWORD)v16)
  {
    if (v16 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x19609511CLL);
    }
    v17 = (WTF *)WTF::fastMalloc((WTF *)(40 * v16));
    v18 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v18)
    {
      v113 = v9;
      v115 = v15;
      v117 = v12;
      v19 = 0;
      v20 = *(_QWORD *)(a1 + 8);
      v21 = 40 * v18;
      do
      {
        v22 = (char *)v17 + v19;
        v23 = *(_OWORD *)(v20 + v19);
        v22[16] = *(_BYTE *)(v20 + v19 + 16);
        *(_OWORD *)v22 = v23;
        v24 = *(unsigned int *)(v20 + v19 + 36);
        *((_QWORD *)v22 + 3) = 0;
        *((_QWORD *)v22 + 4) = 0;
        *(_DWORD *)((char *)v17 + v19 + 36) = v24;
        if ((_DWORD)v24)
        {
          if (v24 >> 29)
            goto LABEL_150;
          v25 = (void *)WTF::fastMalloc((WTF *)(8 * v24));
          *(_DWORD *)((char *)v17 + v19 + 32) = v24;
          *(_QWORD *)((char *)v17 + v19 + 24) = v25;
          memcpy(v25, *(const void **)(v20 + v19 + 24), 8 * *(unsigned int *)(v20 + v19 + 36));
        }
        v19 += 40;
      }
      while (v21 != v19);
      a2 = v121;
      v15 = v115;
      v12 = v117;
      v9 = v113;
    }
  }
  else
  {
    v17 = 0;
  }
  v26 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v26)
  {
    if (v26 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x196095124);
    }
    v27 = (WTF *)WTF::fastMalloc((WTF *)(40 * v26));
    v28 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v28)
    {
      v114 = v9;
      v116 = v15;
      v118 = v12;
      v109 = v26;
      v110 = v16;
      v29 = 0;
      v30 = *(_QWORD *)(a1 + 24);
      v31 = 40 * v28;
      do
      {
        v32 = (char *)v27 + v29;
        v33 = *(_OWORD *)(v30 + v29);
        v32[16] = *(_BYTE *)(v30 + v29 + 16);
        *(_OWORD *)v32 = v33;
        v34 = *(unsigned int *)(v30 + v29 + 36);
        *((_QWORD *)v32 + 3) = 0;
        *((_QWORD *)v32 + 4) = 0;
        *(_DWORD *)((char *)v27 + v29 + 36) = v34;
        if ((_DWORD)v34)
        {
          if (v34 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x196095104);
          }
          v35 = (void *)WTF::fastMalloc((WTF *)(8 * v34));
          *(_DWORD *)((char *)v27 + v29 + 32) = v34;
          *(_QWORD *)((char *)v27 + v29 + 24) = v35;
          memcpy(v35, *(const void **)(v30 + v29 + 24), 8 * *(unsigned int *)(v30 + v29 + 36));
        }
        v29 += 40;
      }
      while (v31 != v29);
      v26 = v109;
      v16 = v110;
      a2 = v121;
      v15 = v116;
      v12 = v118;
      v9 = v114;
    }
  }
  else
  {
    v27 = 0;
  }
  if (v120 && v119)
  {
    if (v16 <= HIDWORD(v12))
    {
      __break(0xC471u);
      JUMPOUT(0x19609512CLL);
    }
    if (v26 <= HIDWORD(v15))
    {
      __break(0xC471u);
      JUMPOUT(0x196095134);
    }
    v14 = (unsigned int *)((char *)v17 + 40 * HIDWORD(v12));
    v36 = (uint64_t)v27 + 40 * HIDWORD(v15);
    v37 = *(_QWORD *)(a1 + 40);
    v38 = *(unsigned int *)(a1 + 52);
    v39 = v14[9];
    v40 = v9[1];
    if ((_DWORD)v39)
    {
      v41 = (unint64_t *)*((_QWORD *)v14 + 3);
      v42 = *(_DWORD *)v36;
      v43 = 8 * v39;
      if (__OFADD__(*(_DWORD *)v36, v40))
      {
        while (*v41 < v38)
        {
          v94 = v37 + 16 * *v41;
          v95 = *(_DWORD *)(v94 + 4);
          LODWORD(v94) = *(_DWORD *)(v94 + 12);
          v46 = __OFADD__(v95, (_DWORD)v94);
          v96 = v95 + v94;
          if (v46)
            v96 = (v95 >> 31) + 0x7FFFFFFF;
          if ((int)((v42 >> 31) + 0x7FFFFFFF) > v95 && v96 > v42)
            goto LABEL_122;
          ++v41;
          v43 -= 8;
          if (!v43)
            goto LABEL_37;
        }
      }
      else
      {
        while (*v41 < v38)
        {
          v44 = v37 + 16 * *v41;
          v45 = *(_DWORD *)(v44 + 4);
          LODWORD(v44) = *(_DWORD *)(v44 + 12);
          v46 = __OFADD__(v45, (_DWORD)v44);
          v47 = v45 + v44;
          if (v46)
            v47 = (v45 >> 31) + 0x7FFFFFFF;
          if (*(_DWORD *)v36 + v40 > v45 && v47 > v42)
            goto LABEL_122;
          ++v41;
          v43 -= 8;
          if (!v43)
            goto LABEL_37;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x19609510CLL);
    }
LABEL_37:
    v49 = *(unsigned int *)(v36 + 36);
    v50 = *v9;
    if ((_DWORD)v49)
    {
      v51 = *(unint64_t **)(v36 + 24);
      v52 = *v14;
      if (__OFADD__(*v14, v50))
      {
        v98 = 8 * v49;
        while (*v51 < v38)
        {
          v99 = (int *)(v37 + 16 * *v51);
          v100 = *v99;
          LODWORD(v99) = v99[2];
          v46 = __OFADD__(v100, (_DWORD)v99);
          v101 = v100 + (_DWORD)v99;
          if (v46)
            v101 = (v100 >> 31) + 0x7FFFFFFF;
          if ((int)((v52 >> 31) + 0x7FFFFFFF) > v100 && v101 > v52)
            goto LABEL_122;
          ++v51;
          v98 -= 8;
          if (!v98)
            goto LABEL_50;
        }
      }
      else
      {
        v53 = 8 * v49;
        while (*v51 < v38)
        {
          v54 = (int *)(v37 + 16 * *v51);
          v55 = *v54;
          LODWORD(v54) = v54[2];
          v46 = __OFADD__(v55, (_DWORD)v54);
          v56 = v55 + (_DWORD)v54;
          if (v46)
            v56 = (v55 >> 31) + 0x7FFFFFFF;
          if ((int)(*v14 + v50) > v55 && v56 > v52)
            goto LABEL_122;
          ++v51;
          v53 -= 8;
          if (!v53)
            goto LABEL_50;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x196095114);
    }
LABEL_50:
    v111 = v16;
    v58 = WebCore::findCompatibleSnapArea<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>,WebCore::LayoutUnit,WebCore::LayoutPoint,WebCore::LayoutSize>(a1, (uint64_t)v14, 0, v50, v40, v112);
    v59 = WebCore::findCompatibleSnapArea<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>,WebCore::LayoutUnit,WebCore::LayoutPoint,WebCore::LayoutSize>(a1, v36, 1, *v9, v9[1], v112);
    if (v58 == -1)
    {
      v60 = v121;
    }
    else
    {
      v60 = v121;
      if (v59 != -1)
      {
        v61 = (char *)v17 + 40 * HIDWORD(v12);
        if (v58 >= *((unsigned int *)v61 + 9))
        {
          __break(0xC471u);
          JUMPOUT(0x19609513CLL);
        }
        v62 = *(_QWORD *)(*((_QWORD *)v61 + 3) + 8 * v58);
        v63 = *(unsigned int *)(a1 + 52);
        if (v62 >= v63)
        {
          __break(0xC471u);
          JUMPOUT(0x196095144);
        }
        v64 = (char *)v27 + 40 * HIDWORD(v15);
        if (v59 >= *((unsigned int *)v64 + 9))
        {
          __break(0xC471u);
          JUMPOUT(0x19609514CLL);
        }
        v65 = *(_QWORD *)(*((_QWORD *)v64 + 3) + 8 * v59);
        if (v65 >= v63)
        {
LABEL_150:
          __break(0xC471u);
          JUMPOUT(0x1960950FCLL);
        }
        v66 = *(_QWORD *)(a1 + 40);
        v67 = (unsigned int *)(v66 + 16 * v62);
        v68 = *v67;
        v69 = v67[1];
        v70 = (unsigned int *)(v66 + 16 * v65);
        v71 = v68 - v112;
        if (__OFSUB__(v68, (_DWORD)v112))
          v71 = (v68 >> 31) + 0x7FFFFFFF;
        v72 = v71 * (uint64_t)v71;
        v73 = v72 >> 6;
        if (v72 >> 38 != (int)(v72 >> 6) >> 31)
          LODWORD(v73) = 0x7FFFFFFF;
        v74 = *v70;
        v75 = (v69 >> 31) + 0x7FFFFFFF;
        if (!__OFSUB__(v69, HIDWORD(v112)))
          v75 = v69 - HIDWORD(v112);
        v76 = v75 * (uint64_t)v75;
        v77 = v76 >> 6;
        if (v76 >> 38 != (int)(v76 >> 6) >> 31)
          LODWORD(v77) = 0x7FFFFFFF;
        v78 = v70[1];
        v46 = __OFADD__((_DWORD)v73, (_DWORD)v77);
        v79 = v73 + v77;
        v80 = (v73 >> 31) + 0x7FFFFFFF;
        if (!v46)
          v80 = v79;
        v81 = v74 - v112;
        if (__OFSUB__(v74, (_DWORD)v112))
          v81 = (v74 >> 31) + 0x7FFFFFFF;
        v82 = v81 * (uint64_t)v81;
        v83 = v82 >> 6;
        if (v82 >> 38 != (int)(v82 >> 6) >> 31)
          LODWORD(v83) = 0x7FFFFFFF;
        v84 = v78 - HIDWORD(v112);
        if (__OFSUB__(v78, HIDWORD(v112)))
          v84 = (v78 >> 31) + 0x7FFFFFFF;
        v85 = v84 * (uint64_t)v84;
        v86 = v85 >> 6;
        if (v85 >> 38 != (int)(v85 >> 6) >> 31)
          LODWORD(v86) = 0x7FFFFFFF;
        v46 = __OFADD__((_DWORD)v83, (_DWORD)v86);
        v87 = v83 + v86;
        v88 = (v83 >> 31) + 0x7FFFFFFF;
        if (v46)
          v87 = v88;
        BYTE4(v124) = 0;
        LOBYTE(v125) = 0;
        if (v80 <= v87)
          LODWORD(v12) = v68;
        else
          LODWORD(v12) = v74;
        if (v80 <= v87)
          LODWORD(v15) = v69;
        else
          LODWORD(v15) = v78;
        BYTE4(v122) = 0;
        LOBYTE(v123) = 0;
      }
    }
    if (v60)
      v89 = v15;
    else
      v89 = v12;
    LODWORD(v126[0]) = v89;
    v90 = (char *)&v124 + 4;
    if (v60)
      v90 = (char *)&v122 + 4;
    *(_QWORD *)((char *)v126 + 4) = *(_QWORD *)v90;
    v16 = v111;
    goto LABEL_94;
  }
LABEL_122:
  if (a2)
    v103 = v15;
  else
    v103 = v12;
  LODWORD(v126[0]) = v103;
  v104 = &v122;
  if (!a2)
    v104 = &v124;
  *(_QWORD *)((char *)v126 + 4) = *(unint64_t *)((char *)v104 + 4);
  if ((_DWORD)v26)
  {
LABEL_94:
    v91 = 40 * v26;
    v92 = (char *)v27 + 24;
    do
    {
      v93 = *(WTF **)v92;
      if (*(_QWORD *)v92)
      {
        *(_QWORD *)v92 = 0;
        *((_DWORD *)v92 + 2) = 0;
        WTF::fastFree(v93, v14);
      }
      v92 += 40;
      v91 -= 40;
    }
    while (v91);
  }
  if (v27)
  {
    WTF::fastFree(v27, v14);
    if (!(_DWORD)v16)
      goto LABEL_130;
  }
  else if (!(_DWORD)v16)
  {
    goto LABEL_130;
  }
  v106 = 40 * v16;
  v107 = (char *)v17 + 24;
  do
  {
    v108 = *(WTF **)v107;
    if (*(_QWORD *)v107)
    {
      *(_QWORD *)v107 = 0;
      *((_DWORD *)v107 + 2) = 0;
      WTF::fastFree(v108, v14);
    }
    v107 += 40;
    v106 -= 40;
  }
  while (v106);
LABEL_130:
  if (v17)
    WTF::fastFree(v17, v14);
  return v126[0];
}

unint64_t WebCore::closestSnapOffsetWithInfoAndAxis<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>,WebCore::LayoutSize,WebCore::LayoutUnit,WebCore::LayoutPoint>(uint64_t a1, int a2, int *a3, unint64_t a4, uint64_t a5, float a6)
{
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  void *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  void *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  char v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  int v59;
  char v60;
  signed int v61;
  unsigned int v62;
  int v63;
  int v64;
  signed int v65;
  signed int v66;
  unint64_t *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  WTF *v73;
  signed int v75;
  signed int v76;
  uint64_t v77;
  char *v78;
  WTF *v79;
  char v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v89;
  char v90;
  unint64_t v92;
  char v93;
  unint64_t v94;
  char v95;
  int v96;
  int v97;
  char v98;
  char v99;

  v8 = a4;
  v10 = a1;
  if (a2)
  {
    v11 = HIDWORD(a4);
    v12 = *(unsigned int *)(a1 + 36);
    if (!(_DWORD)v12)
    {
      LOBYTE(v32) = 0;
      v33 = 0;
LABEL_132:
      LODWORD(v8) = v11;
      return v8 | ((unint64_t)(v33 & 0xFFFFFF00 | v32) << 32);
    }
    if (v12 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x196095964);
    }
    v13 = (WTF *)WTF::fastMalloc((WTF *)(40 * v12));
    v14 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v14)
    {
      v85 = a5;
      v15 = 0;
      v16 = *(_QWORD *)(v10 + 24);
      v17 = 40 * v14;
      while (1)
      {
        v18 = (char *)v13 + v15;
        v19 = *(_OWORD *)(v16 + v15);
        v18[16] = *(_BYTE *)(v16 + v15 + 16);
        *(_OWORD *)v18 = v19;
        v20 = *(unsigned int *)(v16 + v15 + 36);
        *((_QWORD *)v18 + 3) = 0;
        *((_QWORD *)v18 + 4) = 0;
        *(_DWORD *)((char *)v13 + v15 + 36) = v20;
        if ((_DWORD)v20)
        {
          if (v20 >> 29)
          {
            __break(0xC471u);
            goto LABEL_158;
          }
          v21 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
          *(_DWORD *)((char *)v13 + v15 + 32) = v20;
          *(_QWORD *)((char *)v13 + v15 + 24) = v21;
          memcpy(v21, *(const void **)(v16 + v15 + 24), 8 * *(unsigned int *)(v16 + v15 + 36));
        }
        v15 += 40;
        if (v17 == v15)
        {
          v11 = HIDWORD(v8);
          goto LABEL_20;
        }
      }
    }
    v31 = HIDWORD(v8);
    goto LABEL_24;
  }
  v22 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v22)
  {
    if (v22 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x19609596CLL);
    }
    v13 = (WTF *)WTF::fastMalloc((WTF *)(40 * v22));
    v23 = *(unsigned int *)(v10 + 20);
    if ((_DWORD)v23)
    {
      v85 = a5;
      v24 = 0;
      v25 = *(_QWORD *)(v10 + 8);
      v26 = 40 * v23;
      do
      {
        v27 = (char *)v13 + v24;
        v28 = *(_OWORD *)(v25 + v24);
        v27[16] = *(_BYTE *)(v25 + v24 + 16);
        *(_OWORD *)v27 = v28;
        v29 = *(unsigned int *)(v25 + v24 + 36);
        *((_QWORD *)v27 + 3) = 0;
        *((_QWORD *)v27 + 4) = 0;
        *(_DWORD *)((char *)v13 + v24 + 36) = v29;
        if ((_DWORD)v29)
        {
          if (v29 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19609594CLL);
          }
          v30 = (void *)WTF::fastMalloc((WTF *)(8 * v29));
          *(_DWORD *)((char *)v13 + v24 + 32) = v29;
          *(_QWORD *)((char *)v13 + v24 + 24) = v30;
          memcpy(v30, *(const void **)(v25 + v24 + 24), 8 * *(unsigned int *)(v25 + v24 + 36));
        }
        v24 += 40;
      }
      while (v26 != v24);
      LODWORD(v12) = v22;
      LODWORD(v11) = v8;
LABEL_20:
      LODWORD(v31) = v11;
      LODWORD(v22) = v12;
      a5 = v85;
      v10 = a1;
      if (a2)
      {
LABEL_24:
        v34 = a3[1];
        WebCore::searchForPotentialSnapPoints<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>,WebCore::LayoutUnit>((uint64_t)&v92, v10, 1, v34, v31, a5);
        LODWORD(v22) = v12;
        goto LABEL_28;
      }
    }
    else
    {
      LODWORD(v31) = v8;
      LODWORD(v11) = v8;
    }
    v34 = *a3;
    WebCore::searchForPotentialSnapPoints<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>,WebCore::LayoutUnit>((uint64_t)&v92, v10, 0, *a3, v31, a5);
LABEL_28:
    if (v98)
    {
      LODWORD(v11) = v96;
      v32 = v97;
LABEL_30:
      v33 = v32 & 0xFFFFFF00;
      goto LABEL_127;
    }
    v83 = v34;
    v84 = v11;
    v86 = a5;
    v36 = (_BYTE *)a1;
    if (a2 == 1)
      v37 = 24;
    else
      v37 = 8;
    if (a2 == 1)
      v38 = a1 + 24;
    else
      v38 = a1 + 8;
    v39 = *(unsigned int *)(v38 + 12);
    v87 = v39;
    if ((_DWORD)v39)
    {
      if (v39 >= 0x6666667)
      {
        __break(0xC471u);
LABEL_158:
        JUMPOUT(0x196095944);
      }
      v40 = (WTF *)WTF::fastMalloc((WTF *)(40 * v39));
      v41 = *(unsigned int *)(v38 + 12);
      if ((_DWORD)v41)
      {
        v81 = v22;
        v42 = 0;
        v43 = *(_QWORD *)(a1 + v37);
        v44 = 40 * v41;
        do
        {
          v45 = (char *)v40 + v42;
          v46 = *(_OWORD *)(v43 + v42);
          v45[16] = *(_BYTE *)(v43 + v42 + 16);
          *(_OWORD *)v45 = v46;
          v47 = *(unsigned int *)(v43 + v42 + 36);
          *((_QWORD *)v45 + 3) = 0;
          *((_QWORD *)v45 + 4) = 0;
          *(_DWORD *)((char *)v40 + v42 + 36) = v47;
          if ((_DWORD)v47)
          {
            if (v47 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x196095954);
            }
            v48 = (void *)WTF::fastMalloc((WTF *)(8 * v47));
            *(_DWORD *)((char *)v40 + v42 + 32) = v47;
            *(_QWORD *)((char *)v40 + v42 + 24) = v48;
            memcpy(v48, *(const void **)(v43 + v42 + 24), 8 * *(unsigned int *)(v43 + v42 + 36));
          }
          v42 += 40;
        }
        while (v44 != v42);
        LODWORD(v11) = v84;
        LODWORD(v22) = v81;
        v36 = (_BYTE *)a1;
      }
    }
    else
    {
      v40 = 0;
    }
    if (v93)
    {
      v49 = v22;
      v50 = 0;
      v51 = HIDWORD(v92);
      v52 = HIDWORD(v92);
      while (1)
      {
        if (v87 <= v52)
        {
          __break(0xC471u);
          JUMPOUT(0x19609595CLL);
        }
        if (WebCore::findCompatibleSnapArea<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>,WebCore::LayoutUnit,WebCore::LayoutPoint,WebCore::LayoutSize>(a1, (uint64_t)v40 + 40 * v52, a2, *a3, a3[1], v8) != -1)break;
        ++v50;
        --v52;
        if (v50 > v51)
        {
          v53 = 0;
          v54 = 1;
          goto LABEL_55;
        }
      }
      v54 = 0;
      v92 = *((unsigned int *)v40 + 10 * v52) | ((unint64_t)v52 << 32);
      v53 = 1;
LABEL_55:
      LODWORD(v11) = v84;
      LODWORD(v22) = v49;
      v36 = (_BYTE *)a1;
    }
    else
    {
      v53 = 0;
      v54 = 1;
    }
    if (v95 && v87 > HIDWORD(v94))
    {
      v89 = v54;
      v82 = v53;
      v55 = v22;
      v56 = 0xFFFFFFFF00000000 * HIDWORD(v94);
      v57 = v87 - HIDWORD(v94);
      v58 = (unsigned int *)((char *)v40 + 40 * HIDWORD(v94));
      while (WebCore::findCompatibleSnapArea<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>,WebCore::LayoutUnit,WebCore::LayoutPoint,WebCore::LayoutSize>((uint64_t)v36, (uint64_t)v58, a2, *a3, a3[1], v8) == -1)
      {
        v56 -= 0x100000000;
        v58 += 10;
        if (!--v57)
        {
          v59 = 0;
          v60 = 1;
          goto LABEL_64;
        }
      }
      v60 = 0;
      v94 = *v58 - v56;
      v59 = 1;
LABEL_64:
      LODWORD(v11) = v84;
      LODWORD(v22) = v55;
      v53 = v82;
      v54 = v89;
    }
    else
    {
      v59 = 0;
      v60 = 1;
    }
    if ((_DWORD)v87)
    {
      v77 = 40 * v87;
      v78 = (char *)v40 + 24;
      v90 = v54;
      do
      {
        v79 = *(WTF **)v78;
        if (*(_QWORD *)v78)
        {
          *(_QWORD *)v78 = 0;
          *((_DWORD *)v78 + 2) = 0;
          WTF::fastFree(v79, v35);
          v54 = v90;
        }
        v78 += 40;
        v77 -= 40;
      }
      while (v77);
    }
    if (v40)
    {
      v80 = v54;
      WTF::fastFree(v40, v35);
      v54 = v80;
    }
    if (v99)
    {
      if ((v53 & v59) != 1)
        goto LABEL_126;
      v61 = (v94 >> 31) + 0x7FFFFFFF;
      if (!__OFSUB__((_DWORD)v94, (_DWORD)v92))
        v61 = v94 - v92;
      if (v61 >= v83)
        goto LABEL_126;
    }
    v62 = *(_DWORD *)v13;
    if ((int)v11 <= *(_DWORD *)v13)
    {
      if (*v36 == 1)
      {
        v63 = v62 - v11;
        if (__OFSUB__(v62, (_DWORD)v11))
          v63 = (v62 >> 31) + 0x7FFFFFFF;
        if (fabsf((float)v63 * 0.015625) > (float)((float)((float)v83 * 0.015625) * 0.3))
          goto LABEL_126;
      }
      LOBYTE(v32) = 0;
      v33 = 0;
    }
    else
    {
      v62 = *((_DWORD *)v13 + 10 * v22 - 10);
      if ((int)v11 >= (int)v62)
      {
        if (*v36 == 1)
        {
          v64 = v62 - v11;
          if (__OFSUB__(v62, (_DWORD)v11))
            v64 = (v62 >> 31) + 0x7FFFFFFF;
          if (fabsf((float)v64 * 0.015625) > (float)((float)((float)v83 * 0.015625) * 0.3))
            goto LABEL_126;
        }
        v32 = v22 - 1;
      }
      else
      {
        if ((v54 & 1) != 0)
          goto LABEL_76;
        if (*v36 == 1)
        {
          v65 = (v92 >> 31) + 0x7FFFFFFF;
          if (!__OFSUB__((_DWORD)v92, (_DWORD)v11))
            v65 = v92 - v11;
          if (fabsf((float)v65 * 0.015625) > (float)((float)((float)v83 * 0.015625) * 0.3))
LABEL_76:
            v53 = 0;
        }
        if ((v60 & 1) != 0)
          goto LABEL_94;
        if (*v36 == 1)
        {
          v66 = (v94 >> 31) + 0x7FFFFFFF;
          if (!__OFSUB__((_DWORD)v94, (_DWORD)v11))
            v66 = v94 - v11;
          if (fabsf((float)v66 * 0.015625) > (float)((float)((float)v83 * 0.015625) * 0.3))
LABEL_94:
            v59 = 0;
        }
        if ((v86 & 0xFF00000000) == 0)
          goto LABEL_113;
        v62 = v94;
        if ((int)v94 >= (int)v86 && v59 != 0 && (int)v11 < (int)v86)
          v59 = 0;
        if ((int)v11 > (int)v86 && v53 && (int)v92 <= (int)v86)
        {
          if (!v59)
          {
LABEL_126:
            LOBYTE(v32) = 0;
            v33 = 0;
LABEL_127:
            v71 = 0;
            do
            {
              v72 = (char *)v13 + v71;
              v73 = *(WTF **)((char *)v13 + v71 + 24);
              if (v73)
              {
                *((_QWORD *)v72 + 3) = 0;
                *((_DWORD *)v72 + 8) = 0;
                WTF::fastFree(v73, v35);
              }
              v71 += 40;
            }
            while (40 * v22 != v71);
            WTF::fastFree(v13, v35);
            goto LABEL_132;
          }
        }
        else
        {
LABEL_113:
          if (v53)
          {
            if (v59)
            {
              if (a6 == 0.0)
              {
                v75 = v11 - v92;
                if (__OFSUB__((_DWORD)v11, (_DWORD)v92))
                  v75 = (v11 >> 31) + 0x7FFFFFFF;
                v76 = (v94 >> 31) + 0x7FFFFFFF;
                if (!__OFSUB__((_DWORD)v94, (_DWORD)v11))
                  v76 = v94 - v11;
                if (v75 <= v76)
                  LODWORD(v11) = v92;
                else
                  LODWORD(v11) = v94;
                v70 = (char *)&v92 + 4;
                if (v75 > v76)
                  v70 = (char *)&v94 + 4;
              }
              else
              {
                v69 = &v94;
                if (a6 < 0.0)
                  v69 = &v92;
                LODWORD(v11) = *(_DWORD *)v69;
                v70 = (char *)&v94 + 4;
                if (a6 < 0.0)
                  v70 = (char *)&v92 + 4;
              }
              v32 = *(_DWORD *)v70;
            }
            else
            {
              LODWORD(v11) = v92;
              v32 = HIDWORD(v92);
            }
            goto LABEL_30;
          }
          if (!v59)
            goto LABEL_126;
          v62 = v94;
        }
        v32 = HIDWORD(v94);
      }
      v33 = v32 & 0xFFFFFF00;
    }
    LODWORD(v11) = v62;
    goto LABEL_127;
  }
  LOBYTE(v32) = 0;
  v33 = 0;
  return v8 | ((unint64_t)(v33 & 0xFFFFFF00 | v32) << 32);
}

uint64_t WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>::closestSnapOffset<WebCore::FloatSize,WebCore::FloatPoint>(uint64_t a1, int a2, float *a3, uint64_t a4, float a5, float a6, float a7)
{
  unint64_t v13;
  int v14;
  char v15;
  unint64_t v16;
  float *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  float v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v36;
  float v37;
  unint64_t *v38;
  uint64_t v39;
  float *v40;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  float *v50;
  float v51;
  float v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  float v57;
  char *v58;
  uint64_t v59;
  char *v60;
  WTF *v61;
  float v62;
  unint64_t *v63;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  char *v78;
  WTF *v79;
  unint64_t v80;
  unint64_t v81;
  float *v82;
  float *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v90;
  int v91;
  unint64_t v92;
  int v93;
  float v94[4];

  v13 = WebCore::closestSnapOffsetWithInfoAndAxis<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,WebCore::FloatSize,float,WebCore::FloatPoint>(a1, 0, a3, a4, a5, a6, a7);
  v15 = v14;
  v92 = v13;
  v93 = v14;
  v16 = WebCore::closestSnapOffsetWithInfoAndAxis<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,WebCore::FloatSize,float,WebCore::FloatPoint>(a1, 1, a3, a4, a5, a6, a7);
  v90 = v16;
  v91 = (int)v17;
  v18 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v18)
  {
    v80 = v16;
    v82 = v17;
    if (v18 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x196095EB8);
    }
    v19 = (WTF *)WTF::fastMalloc((WTF *)(40 * v18));
    v65 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v65)
    {
      v66 = 0;
      v86 = 40 * v65;
      v88 = *(_QWORD *)(a1 + 8);
      do
      {
        v67 = (char *)v19 + v66;
        v68 = *(_OWORD *)(v88 + v66);
        v67[16] = *(_BYTE *)(v88 + v66 + 16);
        *(_OWORD *)v67 = v68;
        v69 = *(unsigned int *)(v88 + v66 + 36);
        *((_QWORD *)v67 + 3) = 0;
        *((_QWORD *)v67 + 4) = 0;
        *(_DWORD *)((char *)v19 + v66 + 36) = v69;
        if ((_DWORD)v69)
        {
          if (v69 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x196095EA8);
          }
          v70 = (void *)WTF::fastMalloc((WTF *)(8 * v69));
          *(_DWORD *)((char *)v19 + v66 + 32) = v69;
          *(_QWORD *)((char *)v19 + v66 + 24) = v70;
          memcpy(v70, *(const void **)(v88 + v66 + 24), 8 * *(unsigned int *)(v88 + v66 + 36));
        }
        v66 += 40;
      }
      while (v86 != v66);
    }
    v16 = v80;
    v17 = v82;
  }
  else
  {
    v19 = 0;
  }
  v20 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v20)
  {
    v81 = v16;
    v83 = v17;
    if (v20 >= 0x6666667)
      goto LABEL_95;
    v21 = (WTF *)WTF::fastMalloc((WTF *)(40 * v20));
    v71 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v71)
    {
      v72 = 0;
      v84 = 40 * v71;
      v85 = *(_QWORD *)(a1 + 24);
      do
      {
        v73 = (char *)v21 + v72;
        v74 = *(_OWORD *)(v85 + v72);
        v73[16] = *(_BYTE *)(v85 + v72 + 16);
        *(_OWORD *)v73 = v74;
        v75 = *(unsigned int *)(v85 + v72 + 36);
        *((_QWORD *)v73 + 3) = 0;
        *((_QWORD *)v73 + 4) = 0;
        *(_DWORD *)((char *)v21 + v72 + 36) = v75;
        if ((_DWORD)v75)
        {
          if (v75 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x196095EB0);
          }
          v87 = v75;
          v76 = (void *)WTF::fastMalloc((WTF *)(8 * v75));
          *(_DWORD *)((char *)v21 + v72 + 32) = v87;
          *(_QWORD *)((char *)v21 + v72 + 24) = v76;
          memcpy(v76, *(const void **)(v85 + v72 + 24), 8 * *(unsigned int *)(v85 + v72 + 36));
        }
        v72 += 40;
      }
      while (v84 != v72);
    }
    v16 = v81;
    v17 = v83;
  }
  else
  {
    v21 = 0;
  }
  v22 = *(float *)&v13;
  v23 = *(float *)&v16;
  if (v15 && (_BYTE)v17)
  {
    v24 = HIDWORD(v13);
    if (v18 <= HIDWORD(v13))
    {
      __break(0xC471u);
      JUMPOUT(0x196095E78);
    }
    v25 = HIDWORD(v16);
    if (v20 <= HIDWORD(v16))
    {
      __break(0xC471u);
      JUMPOUT(0x196095E80);
    }
    v17 = (float *)((char *)v19 + 40 * HIDWORD(v13));
    v26 = (char *)v21 + 40 * HIDWORD(v16);
    v27 = *(_QWORD *)(a1 + 40);
    v28 = *(unsigned int *)(a1 + 52);
    v29 = *((unsigned int *)v17 + 9);
    v30 = a3[1];
    if ((_DWORD)v29)
    {
      v31 = (unint64_t *)*((_QWORD *)v17 + 3);
      v32 = 8 * v29;
      while (*v31 < v28)
      {
        v33 = v27 + 16 * *v31;
        v34 = *(float *)(v33 + 4);
        if ((float)(*(float *)v26 + v30) > v34 && (float)(v34 + *(float *)(v33 + 12)) > *(float *)v26)
          goto LABEL_51;
        ++v31;
        v32 -= 8;
        if (!v32)
          goto LABEL_18;
      }
LABEL_95:
      __break(0xC471u);
      JUMPOUT(0x196095E68);
    }
LABEL_18:
    v36 = *((unsigned int *)v26 + 9);
    v37 = *a3;
    if (!(_DWORD)v36)
    {
LABEL_27:
      v42 = WebCore::findCompatibleSnapArea<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,float,WebCore::FloatPoint,WebCore::FloatSize>(a1, (uint64_t)v17, 0, v37, v30, a5, a6);
      v43 = WebCore::findCompatibleSnapArea<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,float,WebCore::FloatPoint,WebCore::FloatSize>(a1, (uint64_t)v21 + 40 * v25, 1, *a3, a3[1], a5, a6);
      if (v42 != -1 && v43 != -1)
      {
        v44 = (char *)v19 + 40 * v24;
        if (v42 >= *((unsigned int *)v44 + 9))
        {
          __break(0xC471u);
          JUMPOUT(0x196095E88);
        }
        v45 = *(_QWORD *)(*((_QWORD *)v44 + 3) + 8 * v42);
        v46 = *(unsigned int *)(a1 + 52);
        if (v45 >= v46)
        {
          __break(0xC471u);
          JUMPOUT(0x196095E90);
        }
        v47 = (char *)v21 + 40 * v25;
        if (v43 >= *((unsigned int *)v47 + 9))
        {
          __break(0xC471u);
          JUMPOUT(0x196095E98);
        }
        v48 = *(_QWORD *)(*((_QWORD *)v47 + 3) + 8 * v43);
        if (v48 >= v46)
        {
          __break(0xC471u);
          JUMPOUT(0x196095EA0);
        }
        v49 = *(_QWORD *)(a1 + 40);
        v50 = (float *)(v49 + 16 * v45);
        v51 = *v50;
        v52 = v50[1];
        v53 = (float *)(v49 + 16 * v48);
        v54 = v53[1];
        v55 = (float)((float)(v52 - a6) * (float)(v52 - a6)) + (float)((float)(v51 - a5) * (float)(v51 - a5));
        v56 = (float)((float)(v54 - a6) * (float)(v54 - a6)) + (float)((float)(*v53 - a5) * (float)(*v53 - a5));
        if (v55 <= v56)
          v22 = v51;
        else
          v22 = *v53;
        BYTE4(v92) = 0;
        LOBYTE(v93) = 0;
        if (v55 <= v56)
          v23 = v52;
        else
          v23 = v54;
        BYTE4(v90) = 0;
        LOBYTE(v91) = 0;
      }
      if (a2)
        v57 = v23;
      else
        v57 = v22;
      v94[0] = v57;
      v58 = (char *)&v92 + 4;
      if (a2)
        v58 = (char *)&v90 + 4;
      *(_QWORD *)&v94[1] = *(_QWORD *)v58;
      goto LABEL_46;
    }
    v38 = (unint64_t *)*((_QWORD *)v26 + 3);
    v39 = 8 * v36;
    while (1)
    {
      if (*v38 >= v28)
      {
        __break(0xC471u);
        JUMPOUT(0x196095E70);
      }
      v40 = (float *)(v27 + 16 * *v38);
      if ((float)(*v17 + v37) > *v40 && (float)(*v40 + v40[2]) > *v17)
        break;
      ++v38;
      v39 -= 8;
      if (!v39)
        goto LABEL_27;
    }
  }
LABEL_51:
  if (a2)
    v62 = *(float *)&v16;
  else
    v62 = v22;
  v94[0] = v62;
  v63 = &v90;
  if (!a2)
    v63 = &v92;
  *(_QWORD *)&v94[1] = *(unint64_t *)((char *)v63 + 4);
  if ((_DWORD)v20)
  {
LABEL_46:
    v59 = 40 * v20;
    v60 = (char *)v21 + 24;
    do
    {
      v61 = *(WTF **)v60;
      if (*(_QWORD *)v60)
      {
        *(_QWORD *)v60 = 0;
        *((_DWORD *)v60 + 2) = 0;
        WTF::fastFree(v61, v17);
      }
      v60 += 40;
      v59 -= 40;
    }
    while (v59);
  }
  if (v21)
  {
    WTF::fastFree(v21, v17);
    if (!(_DWORD)v18)
      goto LABEL_59;
  }
  else if (!(_DWORD)v18)
  {
    goto LABEL_59;
  }
  v77 = 40 * v18;
  v78 = (char *)v19 + 24;
  do
  {
    v79 = *(WTF **)v78;
    if (*(_QWORD *)v78)
    {
      *(_QWORD *)v78 = 0;
      *((_DWORD *)v78 + 2) = 0;
      WTF::fastFree(v79, v17);
    }
    v78 += 40;
    v77 -= 40;
  }
  while (v77);
LABEL_59:
  if (v19)
    WTF::fastFree(v19, v17);
  return *(_QWORD *)v94;
}

unint64_t WebCore::closestSnapOffsetWithInfoAndAxis<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,WebCore::FloatSize,float,WebCore::FloatPoint>(uint64_t a1, int a2, float *a3, uint64_t a4, float a5, float a6, float a7)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  float *v11;
  float v12;
  float v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  void *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  float v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  float *v45;
  int v46;
  float v47;
  int v48;
  int v49;
  int v50;
  uint64_t v53;
  char *v54;
  WTF *v55;
  unsigned int *v56;
  uint64_t v57;
  char *v58;
  WTF *v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  float v69;
  uint64_t v70;
  unsigned int v71;
  _BYTE *v72;
  int v73;
  float v74;
  unsigned int v75;
  char v76;
  float v77;
  unsigned int v78;
  char v79;
  float v80;
  unsigned int v81;
  char v82;
  char v83;

  if (a2)
  {
    v7 = *(unsigned int *)(a1 + 36);
    if (!(_DWORD)v7)
    {
      LOBYTE(v8) = 0;
      a5 = a6;
      return LODWORD(a5) | ((unint64_t)(v7 & 0xFFFFFF00 | v8) << 32);
    }
    v73 = a2;
    v70 = a4;
    v69 = a7;
    if (v7 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1960965A0);
    }
    v11 = a3;
    v12 = a6;
    v13 = a5;
    v14 = a1;
    v15 = (WTF *)WTF::fastMalloc((WTF *)(40 * v7));
    v16 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = *(_QWORD *)(v14 + 24);
      v19 = 40 * v16;
      while (1)
      {
        v20 = (char *)v15 + v17;
        v21 = *(_OWORD *)(v18 + v17);
        v20[16] = *(_BYTE *)(v18 + v17 + 16);
        *(_OWORD *)v20 = v21;
        v22 = *(unsigned int *)(v18 + v17 + 36);
        *((_QWORD *)v20 + 3) = 0;
        *((_QWORD *)v20 + 4) = 0;
        *(_DWORD *)((char *)v15 + v17 + 36) = v22;
        if ((_DWORD)v22)
        {
          if (v22 >> 29)
          {
            __break(0xC471u);
            goto LABEL_141;
          }
          v23 = v22;
          v24 = (void *)WTF::fastMalloc((WTF *)(8 * v22));
          *(_DWORD *)((char *)v15 + v17 + 32) = v23;
          *(_QWORD *)((char *)v15 + v17 + 24) = v24;
          memcpy(v24, *(const void **)(v18 + v17 + 24), 8 * *(unsigned int *)(v18 + v17 + 36));
        }
        v17 += 40;
        if (v19 == v17)
        {
          v25 = v12;
          goto LABEL_23;
        }
      }
    }
    v25 = v12;
    goto LABEL_26;
  }
  v9 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v9)
  {
    LOBYTE(v8) = 0;
    LODWORD(v7) = 0;
    return LODWORD(a5) | ((unint64_t)(v7 & 0xFFFFFF00 | v8) << 32);
  }
  v73 = 0;
  v70 = a4;
  v71 = *(_DWORD *)(a1 + 20);
  v69 = a7;
  if (v9 >= 0x6666667)
  {
    __break(0xC471u);
    JUMPOUT(0x1960965A8);
  }
  v11 = a3;
  v12 = a6;
  v13 = a5;
  v14 = a1;
  v15 = (WTF *)WTF::fastMalloc((WTF *)(40 * v9));
  v26 = *(unsigned int *)(v14 + 20);
  if ((_DWORD)v26)
  {
    v27 = 0;
    v28 = *(_QWORD *)(v14 + 8);
    v29 = 40 * v26;
    do
    {
      v30 = (char *)v15 + v27;
      v31 = *(_OWORD *)(v28 + v27);
      v30[16] = *(_BYTE *)(v28 + v27 + 16);
      *(_OWORD *)v30 = v31;
      v32 = *(unsigned int *)(v28 + v27 + 36);
      *((_QWORD *)v30 + 3) = 0;
      *((_QWORD *)v30 + 4) = 0;
      *(_DWORD *)((char *)v15 + v27 + 36) = v32;
      if ((_DWORD)v32)
      {
        if (v32 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x196096590);
        }
        v33 = (void *)WTF::fastMalloc((WTF *)(8 * v32));
        *(_DWORD *)((char *)v15 + v27 + 32) = v32;
        *(_QWORD *)((char *)v15 + v27 + 24) = v33;
        memcpy(v33, *(const void **)(v28 + v27 + 24), 8 * *(unsigned int *)(v28 + v27 + 36));
      }
      v27 += 40;
    }
    while (v29 != v27);
    LODWORD(v7) = v71;
    v25 = v13;
LABEL_23:
    v71 = v7;
    if (v73)
    {
LABEL_26:
      v34 = v11[1];
      WebCore::searchForPotentialSnapPoints<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,float>((uint64_t)&v74, (char *)v14, 1, v70, v34, v25);
      v71 = v7;
      goto LABEL_29;
    }
  }
  else
  {
    v25 = v13;
  }
  v34 = *v11;
  WebCore::searchForPotentialSnapPoints<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,float>((uint64_t)&v74, (char *)v14, 0, v70, *v11, v25);
LABEL_29:
  if (v82)
  {
    v25 = v80;
    v8 = v81;
LABEL_31:
    LODWORD(v7) = v8 & 0xFFFFFF00;
    goto LABEL_114;
  }
  v72 = (_BYTE *)v14;
  if (v73 == 1)
    v36 = 24;
  else
    v36 = 8;
  if (v73 == 1)
    v37 = v14 + 24;
  else
    v37 = v14 + 8;
  v38 = *(unsigned int *)(v37 + 12);
  if ((_DWORD)v38)
  {
    if (v38 >= 0x6666667)
    {
      __break(0xC471u);
LABEL_141:
      JUMPOUT(0x196096588);
    }
    v39 = (WTF *)WTF::fastMalloc((WTF *)(40 * v38));
    v61 = *(unsigned int *)(v37 + 12);
    if ((_DWORD)v61)
    {
      v62 = 0;
      v63 = *(_QWORD *)&v72[v36];
      v64 = 40 * v61;
      do
      {
        v65 = (char *)v39 + v62;
        v66 = *(_OWORD *)(v63 + v62);
        v65[16] = *(_BYTE *)(v63 + v62 + 16);
        *(_OWORD *)v65 = v66;
        v67 = *(unsigned int *)(v63 + v62 + 36);
        *((_QWORD *)v65 + 3) = 0;
        *((_QWORD *)v65 + 4) = 0;
        *(_DWORD *)((char *)v39 + v62 + 36) = v67;
        if ((_DWORD)v67)
        {
          if (v67 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1960965B0);
          }
          v68 = (void *)WTF::fastMalloc((WTF *)(8 * v67));
          *(_DWORD *)((char *)v39 + v62 + 32) = v67;
          *(_QWORD *)((char *)v39 + v62 + 24) = v68;
          memcpy(v68, *(const void **)(v63 + v62 + 24), 8 * *(unsigned int *)(v63 + v62 + 36));
        }
        v62 += 40;
      }
      while (v64 != v62);
    }
  }
  else
  {
    v39 = 0;
  }
  if (v76)
  {
    v40 = 0;
    v41 = v75;
    v42 = v75;
    while (1)
    {
      if (v38 <= v42)
      {
        __break(0xC471u);
        JUMPOUT(0x196096598);
      }
      if (WebCore::findCompatibleSnapArea<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,float,WebCore::FloatPoint,WebCore::FloatSize>((uint64_t)v72, (uint64_t)v39 + 40 * v42, v73, *v11, v11[1], v13, v12) != -1)break;
      ++v40;
      --v42;
      if (v40 > v41)
        goto LABEL_45;
    }
    v74 = *((float *)v39 + 10 * v42);
    v75 = v42;
    v43 = 1;
  }
  else
  {
LABEL_45:
    v43 = 0;
  }
  if (!v79 || (v44 = v78, v38 <= v78))
  {
LABEL_52:
    v46 = 0;
    if (!(_DWORD)v38)
      goto LABEL_53;
    goto LABEL_91;
  }
  v45 = (float *)((char *)v39 + 40 * v78);
  while (WebCore::findCompatibleSnapArea<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,float,WebCore::FloatPoint,WebCore::FloatSize>((uint64_t)v72, (uint64_t)v45, v73, *v11, v11[1], v13, v12) == -1)
  {
    ++v44;
    v45 += 10;
    if (v38 == v44)
      goto LABEL_52;
  }
  v77 = *v45;
  v78 = v44;
  v46 = 1;
  if ((_DWORD)v38)
  {
LABEL_91:
    v53 = 40 * v38;
    v54 = (char *)v39 + 24;
    do
    {
      v55 = *(WTF **)v54;
      if (*(_QWORD *)v54)
      {
        *(_QWORD *)v54 = 0;
        *((_DWORD *)v54 + 2) = 0;
        WTF::fastFree(v55, v35);
      }
      v54 += 40;
      v53 -= 40;
    }
    while (v53);
  }
LABEL_53:
  if (v39)
    WTF::fastFree(v39, v35);
  if (v83 && ((v43 & v46) != 1 || (float)(v77 - v74) >= v34))
    goto LABEL_113;
  v47 = *(float *)v15;
  if (v25 <= *(float *)v15)
  {
    if (*v72 == 1 && vabds_f32(v47, v25) > (float)(v34 * 0.3))
      goto LABEL_113;
    LOBYTE(v8) = 0;
    LODWORD(v7) = 0;
LABEL_112:
    v25 = v47;
    goto LABEL_114;
  }
  v47 = *((float *)v15 + 10 * v71 - 10);
  if (v25 >= v47)
  {
    if (*v72 == 1 && vabds_f32(v47, v25) > (float)(v34 * 0.3))
      goto LABEL_113;
    v8 = v71 - 1;
    goto LABEL_111;
  }
  v48 = *v72;
  if (v48 == 1)
    v49 = v43;
  else
    v49 = 0;
  if (v49 == 1 && vabds_f32(v74, v25) > (float)(v34 * 0.3))
    v43 = 0;
  if (v48 == 1)
    v50 = v46;
  else
    v50 = 0;
  if (v50 == 1 && vabds_f32(v77, v25) > (float)(v34 * 0.3))
    v46 = 0;
  if ((v70 & 0xFF00000000) == 0)
    goto LABEL_99;
  v47 = v77;
  if (v77 >= *(float *)&v70 && v46 != 0 && v25 < *(float *)&v70)
    v46 = 0;
  if (v25 <= *(float *)&v70 || !v43 || v74 > *(float *)&v70)
  {
LABEL_99:
    if (v43)
    {
      if (v46)
      {
        if (v69 == 0.0)
        {
          v60 = (float)(v25 - v74) > (float)(v77 - v25);
          if ((float)(v25 - v74) <= (float)(v77 - v25))
            v25 = v74;
          else
            v25 = v77;
          v56 = &v75;
          if (v60)
            v56 = &v78;
        }
        else
        {
          if (v69 >= 0.0)
            v25 = v77;
          else
            v25 = v74;
          v56 = &v78;
          if (v69 < 0.0)
            v56 = &v75;
        }
        v8 = *v56;
      }
      else
      {
        v25 = v74;
        v8 = v75;
      }
      goto LABEL_31;
    }
    if (!v46)
      goto LABEL_113;
    v47 = v77;
    goto LABEL_110;
  }
  if (v46)
  {
LABEL_110:
    v8 = v78;
LABEL_111:
    LODWORD(v7) = v8 & 0xFFFFFF00;
    goto LABEL_112;
  }
LABEL_113:
  LOBYTE(v8) = 0;
  LODWORD(v7) = 0;
LABEL_114:
  v57 = 0;
  do
  {
    v58 = (char *)v15 + v57;
    v59 = *(WTF **)((char *)v15 + v57 + 24);
    if (v59)
    {
      *((_QWORD *)v58 + 3) = 0;
      *((_DWORD *)v58 + 8) = 0;
      WTF::fastFree(v59, v35);
    }
    v57 += 40;
  }
  while (40 * v71 != v57);
  WTF::fastFree(v15, v35);
  a5 = v25;
  return LODWORD(a5) | ((unint64_t)(v7 & 0xFFFFFF00 | v8) << 32);
}

_QWORD *WebCore::AbsolutePositionConstraints::AbsolutePositionConstraints(_QWORD *this, const WebCore::FloatSize *a2, const WebCore::FloatPoint *a3)
{
  *this = *(_QWORD *)a2;
  this[1] = *(_QWORD *)a3;
  return this;
}

{
  *this = *(_QWORD *)a2;
  this[1] = *(_QWORD *)a3;
  return this;
}

float WebCore::FixedPositionViewportConstraints::layerPositionForViewportRect(WebCore::FixedPositionViewportConstraints *this, const WebCore::FloatRect *a2)
{
  int v2;
  float v3;
  float v4;
  float v5;

  v2 = *((_DWORD *)this + 4);
  if ((v2 & 1) != 0)
  {
    v4 = *(float *)a2;
    v5 = *((float *)this + 5);
    goto LABEL_5;
  }
  v3 = 0.0;
  if ((v2 & 2) != 0)
  {
    v4 = *(float *)a2 + *((float *)a2 + 2);
    v5 = *((float *)this + 5) + *((float *)this + 7);
LABEL_5:
    v3 = v4 - v5;
  }
  return v3 + *((float *)this + 9);
}

float WebCore::StickyPositionViewportConstraints::computeStickyOffset(WebCore::StickyPositionViewportConstraints *this, const WebCore::FloatRect *a2)
{
  float v2;
  int v3;
  float v4;
  float v6;
  float v7;
  float v8;
  float v9;

  v2 = *((float *)this + 17);
  v3 = *((_DWORD *)this + 4);
  v4 = v2;
  if ((v3 & 2) != 0)
  {
    v8 = fminf((float)((float)(*(float *)a2 + *((float *)a2 + 2)) - *((float *)this + 6))- (float)(v2 + *((float *)this + 19)), 0.0);
    v9 = fminf(*((float *)this + 13) - v2, 0.0);
    if (v8 < v9)
      v8 = v9;
    v4 = v2 + v8;
  }
  if ((v3 & 1) != 0)
  {
    v6 = fmaxf((float)(*(float *)a2 + *((float *)this + 5)) - v2, 0.0);
    v7 = fmaxf((float)(*((float *)this + 13) + *((float *)this + 15)) - (float)(v2 + *((float *)this + 19)), 0.0);
    if (v6 > v7)
      v6 = v7;
    v4 = v4 + v6;
  }
  if ((v3 & 8) != 0)
    v4 = v4 + 0.0;
  if ((v3 & 4) != 0)
    v4 = v4 + 0.0;
  return v4 - v2;
}

float WebCore::StickyPositionViewportConstraints::layerPositionForConstrainingRect(WebCore::StickyPositionViewportConstraints *this, const WebCore::FloatRect *a2)
{
  return (float)(*((float *)this + 23) + WebCore::StickyPositionViewportConstraints::computeStickyOffset(this, a2))
       - *((float *)this + 21);
}

WTF::TextStream *WebCore::operator<<(WTF::TextStream *a1)
{
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  return a1;
}

{
  uint64_t v2;

  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  v2 = WTF::TextStream::operator<<();
  WebCore::operator<<(v2);
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  v2 = WTF::TextStream::operator<<();
  WebCore::operator<<(v2);
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  WebCore::operator<<(v3);
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  v4 = WTF::TextStream::operator<<();
  WebCore::operator<<(v4);
  WTF::TextStream::endGroup(a1);
  return a1;
}

{
  WebCore::operator<<((uint64_t)a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  return a1;
}

{
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  return a1;
}

{
  uint64_t v2;

  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  v2 = WTF::TextStream::operator<<();
  WTF::streamSizedContainer<std::array<float,20ul>>(v2);
  WTF::TextStream::endGroup(a1);
  return a1;
}

{
  WebCore::operator<<((uint64_t)a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  return a1;
}

{
  ++*((_DWORD *)a1 + 6);
  WTF::TextStream::operator<<();
  WTF::TextStream::writeIndent(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::writeIndent(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::writeIndent(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::writeIndent(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  --*((_DWORD *)a1 + 6);
  return a1;
}

WebCore::ScrollingCoordinator *WebCore::ScrollingCoordinator::create@<X0>(WebCore::ScrollingCoordinator *this@<X0>, WebCore::ScrollingCoordinator **a2@<X8>)
{
  WebCore::ScrollingCoordinator *v5;
  WebCore::ScrollingCoordinator *result;

  v5 = (WebCore::ScrollingCoordinator *)WTF::fastMalloc((WTF *)0x20);
  result = WebCore::ScrollingCoordinator::ScrollingCoordinator(v5, this);
  *a2 = result;
  return result;
}

void WebCore::ScrollingCoordinator::~ScrollingCoordinator(WebCore::ScrollingCoordinator *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34039B8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34039B8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

unsigned int *WebCore::ScrollingCoordinator::pageDestroyed(WebCore::ScrollingCoordinator *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

BOOL WebCore::ScrollingCoordinator::coordinatesScrollingForFrameView(WebCore::ScrollingCoordinator *this, const WebCore::LocalFrameView *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v12;
  _QWORD *v13;

  v2 = *((_QWORD *)a2 + 41);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v8 = (*(_QWORD *)(*(_QWORD *)(v2 + 128) + 8) == v2
     || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 112) + 688) & 0x8000000000000000) != 0)
    && (v5 = *(_QWORD *)(v2 + 296)) != 0
    && (v6 = *(_QWORD *)(v5 + 1944)) != 0
    && (v7 = *(_QWORD *)(v6 + 400)) != 0
    && *(unsigned __int8 *)(v7 + 195) != 0;
  do
  {
    v9 = __ldaxr(v3);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v3));
  if (!v10)
  {
    atomic_store(1u, v3);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = off_1E31FE290;
    v12[1] = v3;
    v13 = v12;
    WTF::ensureOnMainThread();
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  }
  return v8;
}

uint64_t WebCore::ScrollingCoordinator::scrollableContainerNodeID(WebCore::ScrollingCoordinator *this, const WebCore::RenderObject *a2)
{
  return 0;
}

uint64_t WebCore::ScrollingCoordinator::updateSynchronousScrollingReasons(WebCore::ScrollingCoordinator *this, WebCore::LocalFrameView *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 41) + 296);
  if (v4 && (v5 = *(_QWORD *)(v4 + 1944)) != 0 && (v6 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 256)) != 0)
  {
    v7 = *(_QWORD *)(v6 + 224);
    v8 = *(_QWORD *)(v6 + 232);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  if (((*(uint64_t (**)(WebCore::ScrollingCoordinator *, uint64_t, uint64_t))(*(_QWORD *)this + 360))(this, v7, v8) & 0x10) != 0)v9 = 16;
  else
    v9 = 0;
  if (*((_BYTE *)this + 16))
    v10 = v9 | 1;
  else
    v10 = v9;
  v11 = (*(uint64_t (**)(WebCore::ScrollingCoordinator *, WebCore::LocalFrameView *))(*(_QWORD *)this + 552))(this, a2);
  v12 = v10 | 4;
  if (!v11)
    v12 = v10;
  v13 = *((_QWORD *)a2 + 41);
  v14 = (unsigned int *)(v13 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v16 = *(_QWORD *)(*(_QWORD *)(v13 + 128) + 8);
  if (v16)
    v17 = *(_BYTE *)(v16 + 144) == 0;
  else
    v17 = 0;
  if (v17 && *(_QWORD *)(v16 + 296) && (*(_WORD *)(*(_QWORD *)(v13 + 296) + 3358) & 4) != 0)
    v12 |= 8u;
  v18 = *(_QWORD *)(*((_QWORD *)a2 + 41) + 296);
  if (v18 && (v19 = *(_QWORD *)(v18 + 1944)) != 0 && (v20 = *(_QWORD *)(*(_QWORD *)(v19 + 144) + 256)) != 0)
  {
    v21 = *(_QWORD *)(v20 + 224);
    v22 = *(_QWORD *)(v20 + 232);
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  result = (*(uint64_t (**)(WebCore::ScrollingCoordinator *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 352))(this, v21, v22, v12);
  do
  {
    v24 = __ldaxr(v14);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v14));
  if (!v25)
  {
    atomic_store(1u, v14);
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v26 = off_1E31FE290;
    v26[1] = v14;
    v27 = (uint64_t)v26;
    WTF::ensureOnMainThread();
    result = v27;
    if (v27)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  return result;
}

uint64_t WebCore::ScrollingCoordinator::hasVisibleSlowRepaintViewportConstrainedObjects(WebCore::ScrollingCoordinator *this, const WebCore::LocalFrameView *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (uint64_t *)*((_QWORD *)a2 + 163);
  if (!v2)
    return 0;
  v3 = *v2;
  if (!*v2)
  {
    v4 = 0;
    v5 = 0;
LABEL_4:
    v6 = v4;
    v4 = v3 + 8 * v5;
    goto LABEL_11;
  }
  v5 = *(unsigned int *)(v3 - 4);
  v4 = v3 + 8 * v5;
  if (!*(_DWORD *)(v3 - 12))
    goto LABEL_4;
  if (!(_DWORD)v5)
  {
    v9 = 0;
    v6 = *v2;
    goto LABEL_14;
  }
  v7 = 8 * v5;
  v6 = *v2;
  while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
  {
    v6 += 8;
    v7 -= 8;
    if (!v7)
    {
      v6 = v4;
      break;
    }
  }
LABEL_11:
  if (v3)
  {
    v9 = *(unsigned int *)(v3 - 4);
LABEL_14:
    v8 = v3 + 8 * v9;
    goto LABEL_15;
  }
  v8 = 0;
LABEL_15:
  if (v8 != v6)
  {
    while (!*(_QWORD *)(*(_QWORD *)v6 + 8))
    {
      v10 = v6 + 8;
      v6 = v4;
      if (v10 != v4)
      {
        v6 = v10;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 8;
          if (v6 == v4)
          {
            v6 = v4;
            break;
          }
        }
      }
      if (v6 == v8)
      {
        v6 = v8;
        break;
      }
    }
  }
  if (v3)
    v3 += 8 * *(unsigned int *)(v3 - 4);
  while (v6 != v3)
  {
    v11 = *(_QWORD *)(*(_QWORD *)v6 + 8);
    if (v11)
      v12 = (*(_BYTE *)(v11 + 45) & 8) == 0;
    else
      v12 = 1;
    if (v12)
      return 1;
    if ((*(_BYTE *)(v11 + 21) & 0x80) == 0)
      return 1;
    v13 = *(_QWORD *)(v11 + 144);
    if (!*(_QWORD *)(v13 + 256) && (*(_WORD *)(v13 + 28) & 0x180) == 0)
      return 1;
    v14 = v6 + 8;
    v15 = v4;
    if (v14 != v4)
    {
      v15 = v14;
      while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
      {
        v15 += 8;
        if (v15 == v4)
        {
          v15 = v4;
          break;
        }
      }
    }
    v6 = v8;
    if (v15 != v8)
    {
      v6 = v15;
      if (!*(_QWORD *)(*(_QWORD *)v15 + 8))
      {
        while (1)
        {
          v16 = v6 + 8;
          v6 = v4;
          if (v16 != v4)
          {
            v6 = v16;
            while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
            {
              v6 += 8;
              if (v6 == v4)
              {
                v6 = v4;
                break;
              }
            }
          }
          if (v6 == v8)
            break;
          if (*(_QWORD *)(*(_QWORD *)v6 + 8))
            goto LABEL_50;
        }
        v6 = v8;
      }
    }
LABEL_50:
    ++*((_DWORD *)v2 + 2);
  }
  return 0;
}

uint64_t WebCore::ScrollingCoordinator::setForceSynchronousScrollLayerPositionUpdates(uint64_t this, int a2)
{
  WebCore::ScrollingCoordinator *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::LocalFrameView *v7;

  if (*(unsigned __int8 *)(this + 16) != a2)
  {
    v2 = (WebCore::ScrollingCoordinator *)this;
    *(_BYTE *)(this + 16) = a2;
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 160);
    if (v3)
    {
      while (1)
      {
        do
        {
LABEL_3:
          v4 = (_QWORD *)v3;
          if (!*(_BYTE *)(v3 + 144))
          {
            v7 = *(WebCore::LocalFrameView **)(v3 + 288);
            if (v7)
            {
              this = (*(uint64_t (**)(WebCore::ScrollingCoordinator *, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(v3 + 288));
              if ((_DWORD)this)
                this = WebCore::ScrollingCoordinator::updateSynchronousScrollingReasons(v2, v7);
            }
          }
          v3 = v4[11];
        }
        while (v3);
        v5 = *(_QWORD *)(v4[6] + 8);
        if (!v5)
          break;
        v3 = v4[9];
        if (!v3)
        {
          while (1)
          {
            v6 = *(_QWORD *)(v5 + 56);
            if (!v6)
              return this;
            v5 = *(_QWORD *)(v6 + 8);
            if (!v5)
              return this;
            v3 = *(_QWORD *)(v5 + 72);
            if (v3)
              goto LABEL_3;
          }
        }
      }
    }
  }
  return this;
}

void WebCore::ScrollingCoordinator::uniqueScrollingNodeID(WebCore::ScrollingCoordinator *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  if (WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
LABEL_7:
    __break(1u);
    return;
  }
  WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v1 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) == 0)
    goto LABEL_7;
}

void WebCore::ScrollingCoordinator::scrollingStateTreeAsText(_QWORD *a1@<X8>)
{
  _DWORD *v1;

  v1 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v1 += 2;
  *a1 = v1;
}

void WebCore::ScrollingCoordinator::scrollingTreeAsText(_QWORD *a1@<X8>)
{
  _DWORD *v1;

  v1 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v1 += 2;
  *a1 = v1;
}

WTF::StringImpl *WebCore::ScrollingCoordinator::synchronousScrollingReasonsAsText@<X0>(char a1@<W0>, WTF::StringImpl **a2@<X8>)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  int v17;
  WTF::StringImpl *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];

  v3 = "Forced on main thread, ";
  if ((a1 & 1) == 0)
    v3 = "";
  v4 = 24;
  if ((a1 & 1) == 0)
    v4 = 1;
  v5 = "Has slow repaint objects, ";
  if ((a1 & 0x10) == 0)
    v5 = "";
  v6 = 27;
  if ((a1 & 0x10) == 0)
    v6 = 1;
  v7 = "Has viewport constrained objects without supporting fixed layers, ";
  if ((a1 & 2) == 0)
    v7 = "";
  v24[0] = v3;
  v24[1] = v4;
  v8 = 67;
  if ((a1 & 2) == 0)
    v8 = 1;
  v23[0] = v5;
  v23[1] = v6;
  v9 = "Has non-layer viewport-constrained objects, ";
  if ((a1 & 4) == 0)
    v9 = "";
  v22[0] = v7;
  v22[1] = v8;
  if ((a1 & 4) != 0)
    v10 = 45;
  else
    v10 = 1;
  v21[0] = v9;
  v21[1] = v10;
  if ((a1 & 8) != 0)
    v11 = "Is image document, ";
  else
    v11 = "";
  v12 = 20;
  if ((a1 & 8) == 0)
    v12 = 1;
  v20[0] = v11;
  v20[1] = v12;
  v13 = "Has slow repaint descendant scrollers, ";
  if ((a1 & 0x20) == 0)
    v13 = "";
  v14 = 40;
  if ((a1 & 0x20) == 0)
    v14 = 1;
  v19[0] = v13;
  v19[1] = v14;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)v24, (uint64_t)v23, (uint64_t)v22, (uint64_t)v21, (uint64_t)v20, (uint64_t)v19, &v18);
  result = v18;
  if (!v18)
  {
    __break(0xC471u);
    return result;
  }
  if (*((_DWORD *)v18 + 1) <= 1u)
  {
    v17 = *(_DWORD *)v18;
    *(_DWORD *)v18 += 2;
    *a2 = result;
    v18 = 0;
    if (v17)
    {
LABEL_30:
      *(_DWORD *)result = v17;
      return result;
    }
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
  }
  WTF::StringImpl::substring(v18);
  result = v18;
  v18 = 0;
  if (result)
  {
    v17 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result != 2)
      goto LABEL_30;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
  }
  return result;
}

uint64_t WebCore::RequestedScrollData::merge(uint64_t result, unsigned __int8 *a2)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[15];

  v2 = *a2;
  if (v2 == 2)
  {
    if (*(_BYTE *)(result + 18))
      goto LABEL_31;
    v3 = *(_QWORD *)(result + 4);
    *((_DWORD *)a2 + 3) = *(_DWORD *)(result + 12);
    goto LABEL_4;
  }
  if (v2 <= 1 && a2[18] != 0)
  {
    if (*(_BYTE *)(result + 18))
    {
      if (a2[40] == *(unsigned __int8 *)(result + 40))
      {
        if (a2[40])
        {
          a2[20] = *(_BYTE *)(result + 20);
          v5 = *(_QWORD *)(result + 24);
          *((_DWORD *)a2 + 8) = *(_DWORD *)(result + 32);
          *((_QWORD *)a2 + 3) = v5;
          *((_WORD *)a2 + 18) = *(_WORD *)(result + 36);
        }
      }
      else if (a2[40])
      {
        a2[40] = 0;
      }
      else
      {
        v10 = *(_OWORD *)(result + 20);
        *((_DWORD *)a2 + 9) = *(_DWORD *)(result + 36);
        *(_OWORD *)(a2 + 20) = v10;
        a2[40] = 1;
      }
    }
    else
    {
      v6 = *(_BYTE *)result;
      *(_QWORD *)&v15[3] = *(_QWORD *)(result + 4);
      v7 = *(_BYTE *)(result + 16);
      v8 = *(_BYTE *)(result + 17);
      if (a2[40])
      {
        v9 = *(_QWORD *)(result + 4);
        *((_DWORD *)a2 + 8) = *(_DWORD *)(result + 12);
        *((_QWORD *)a2 + 3) = v9;
      }
      else
      {
        *(_DWORD *)&v15[11] = *(_DWORD *)(result + 12);
        *(_QWORD *)(a2 + 21) = *(_QWORD *)v15;
        *(_QWORD *)(a2 + 28) = *(_QWORD *)&v15[7];
        a2[40] = 1;
      }
      a2[20] = v6;
      a2[36] = v7;
      a2[37] = v8;
    }
    goto LABEL_31;
  }
  if (v2 == 1 && !*(_BYTE *)(result + 18))
  {
    if (*(_BYTE *)result == 1)
    {
      if (*(_DWORD *)(result + 12) != 1 || *((_DWORD *)a2 + 3) != 1)
        goto LABEL_38;
      *(float32x2_t *)(a2 + 4) = vadd_f32(*(float32x2_t *)(a2 + 4), *(float32x2_t *)(result + 4));
    }
    else if (!*(_BYTE *)result)
    {
      *a2 = 0;
      if (!*(_DWORD *)(result + 12) && *((_DWORD *)a2 + 3) == 1)
      {
        v3 = COERCE_UNSIGNED_INT(*(float *)(result + 4) + *((float *)a2 + 1)) | ((unint64_t)COERCE_UNSIGNED_INT(*(float *)(result + 8) + *((float *)a2 + 2)) << 32);
        *((_DWORD *)a2 + 3) = 0;
LABEL_4:
        *(_QWORD *)(a2 + 4) = v3;
        goto LABEL_31;
      }
LABEL_38:
      v14 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RequestedScrollData::destinationPosition(v14);
    }
  }
LABEL_31:
  v11 = *(_OWORD *)a2;
  *(_DWORD *)(result + 15) = *(_DWORD *)(a2 + 15);
  *(_OWORD *)result = v11;
  if (*(unsigned __int8 *)(result + 40) == a2[40])
  {
    if (*(_BYTE *)(result + 40))
    {
      *(_BYTE *)(result + 20) = a2[20];
      v12 = *((_QWORD *)a2 + 3);
      *(_DWORD *)(result + 32) = *((_DWORD *)a2 + 8);
      *(_QWORD *)(result + 24) = v12;
      *(_WORD *)(result + 36) = *((_WORD *)a2 + 18);
    }
  }
  else if (*(_BYTE *)(result + 40))
  {
    *(_BYTE *)(result + 40) = 0;
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 20);
    *(_DWORD *)(result + 36) = *((_DWORD *)a2 + 9);
    *(_OWORD *)(result + 20) = v13;
    *(_BYTE *)(result + 40) = 1;
  }
  return result;
}

uint64_t WebCore::RequestedScrollData::destinationPosition(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(result + 12);
  if (*(_BYTE *)result != 1)
  {
    if (!v1)
      return result;
    goto LABEL_5;
  }
  if (v1 != 1)
  {
LABEL_5:
    v2 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::RequestedScrollData::computeDestinationPosition(v2);
  }
  return result;
}

uint64_t WebCore::RequestedScrollData::computeDestinationPosition(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a2 + 8);
  if ((_DWORD)result != 1)
  {
    if (!v2)
      return result;
    goto LABEL_5;
  }
  if (v2 != 1)
  {
LABEL_5:
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::operator<<(v3);
  }
  return result;
}

WTF::TextStream *WebCore::operator<<(WTF::TextStream *a1, unsigned __int8 *a2)
{
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*a2 <= 2u)
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (a2[1] <= 2u)
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (a2[2] <= 2u)
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (a2[3] <= 2u)
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  if (a2[6])
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (a2[7])
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (a2[8] == 1)
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (a2[8] <= 2u)
      WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (a2[9] == 1)
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (a2[9] <= 2u)
      WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  return a1;
}

uint64_t WebCore::operator<<(uint64_t a1, unsigned __int8 a2)
{
  int v4;
  unsigned __int8 v5;
  char v6;

  v4 = a2;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (v4)
  {
    v5 = a2 - 1;
    if (((a2 - 1) & ~a2) <= 7u && ((0x8Bu >> ((a2 - 1) & ~a2)) & 1) != 0)
      WTF::TextStream::operator<<();
    v6 = v5 & a2;
    if ((v5 & a2) != 0)
    {
      do
      {
        WTF::TextStream::operator<<();
        if (((v6 - 1) & ~v6) <= 7u && ((0x8Bu >> ((v6 - 1) & ~v6)) & 1) != 0)
          WTF::TextStream::operator<<();
        v6 &= v6 - 1;
      }
      while (v6);
    }
  }
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

uint64_t WebCore::operator<<(WTF::TextStream *a1, char *a2)
{
  int v4;
  unint64_t v5;
  uint64_t v7;

  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((unint64_t)*a2 <= 2)
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  v4 = *a2;
  if (v4 == 2)
    return (uint64_t)a1;
  if (v4 == 1)
  {
    if (*((_DWORD *)a2 + 3) != 1)
      goto LABEL_30;
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  else
  {
    if (*((_DWORD *)a2 + 3))
      goto LABEL_30;
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::endGroup(a1);
  if (a2[16])
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (a2[17])
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (a2[18])
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (!a2[40])
    return (uint64_t)a1;
  v5 = a2[20];
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (v5 >= 3)
  {
    WTF::TextStream::endGroup(a1);
  }
  else
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
    if ((_DWORD)v5 == 1)
    {
      if (a2[40])
      {
        if (*((_DWORD *)a2 + 8) == 1)
        {
          WTF::TextStream::startGroup(a1);
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
LABEL_25:
          WTF::TextStream::endGroup(a1);
          if (a2[40])
          {
            WTF::TextStream::startGroup(a1);
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::endGroup(a1);
            if (a2[40])
            {
              WTF::TextStream::startGroup(a1);
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              WTF::TextStream::operator<<();
              WTF::TextStream::endGroup(a1);
              return (uint64_t)a1;
            }
          }
          goto LABEL_29;
        }
        goto LABEL_30;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  if (!a2[40])
    goto LABEL_29;
  if (!*((_DWORD *)a2 + 8))
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    goto LABEL_25;
  }
LABEL_30:
  v7 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::ScrollingStateFixedNode::ScrollingStateFixedNode(v7);
}

__n128 WebCore::ScrollingStateFixedNode::ScrollingStateFixedNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  uint64_t v12;

  v11 = *(_OWORD *)a6;
  v12 = *(_QWORD *)(a6 + 16);
  v8 = WebCore::ScrollingStateNode::ScrollingStateNode(a1, 7, a2, a3, a4, a5, &v11);
  *(_QWORD *)v8 = off_1E3403BF8;
  *(_QWORD *)(v8 + 128) = off_1E3403D10;
  v9 = *(_QWORD *)(a7 + 8);
  *(_DWORD *)(v8 + 144) = *(_DWORD *)(a7 + 16);
  *(_QWORD *)(v8 + 128) = off_1E3403CE8;
  *(_QWORD *)(v8 + 136) = v9;
  result = *(__n128 *)(a7 + 20);
  *(_QWORD *)(v8 + 164) = *(_QWORD *)(a7 + 36);
  *(__n128 *)(v8 + 148) = result;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  uint64_t v12;

  v11 = *(_OWORD *)a6;
  v12 = *(_QWORD *)(a6 + 16);
  v8 = WebCore::ScrollingStateNode::ScrollingStateNode(a1, 7, a2, a3, a4, a5, &v11);
  *(_QWORD *)v8 = off_1E3403BF8;
  *(_QWORD *)(v8 + 128) = off_1E3403D10;
  v9 = *(_QWORD *)(a7 + 8);
  *(_DWORD *)(v8 + 144) = *(_DWORD *)(a7 + 16);
  *(_QWORD *)(v8 + 128) = off_1E3403CE8;
  *(_QWORD *)(v8 + 136) = v9;
  result = *(__n128 *)(a7 + 20);
  *(_QWORD *)(v8 + 164) = *(_QWORD *)(a7 + 36);
  *(__n128 *)(v8 + 148) = result;
  return result;
}

uint64_t WebCore::ScrollingStateFixedNode::ScrollingStateFixedNode(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = a1;
  *(_BYTE *)(a1 + 16) = 7;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  ++*a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = off_1E3403BF8;
  *(_QWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = off_1E3403CE8;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 156) = 0;
  *(_QWORD *)(a1 + 164) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  return a1;
}

void WebCore::ScrollingStateFixedNode::~ScrollingStateFixedNode(CFTypeRef *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScrollingStateNode::~ScrollingStateNode(this, a2);
  WTF::fastFree(v2, v3);
}

__n128 WebCore::ScrollingStateFixedNode::clone@<Q0>(WebCore::ScrollingStateFixedNode *this@<X0>, WebCore::ScrollingStateTree *a2@<X1>, WebCore::ScrollingStateNode **a3@<X8>)
{
  WebCore::ScrollingStateNode *v6;
  WebCore::ScrollingStateNode *v7;
  uint64_t v8;
  __n128 result;

  v6 = (WebCore::ScrollingStateNode *)WTF::fastMalloc((WTF *)0xB0);
  v7 = WebCore::ScrollingStateNode::ScrollingStateNode(v6, this, a2);
  *(_QWORD *)v7 = off_1E3403BF8;
  *((_QWORD *)v7 + 16) = off_1E3403D10;
  v8 = *((_QWORD *)this + 17);
  *((_DWORD *)v7 + 36) = *((_DWORD *)this + 36);
  *((_QWORD *)v7 + 16) = off_1E3403CE8;
  *((_QWORD *)v7 + 17) = v8;
  result = *(__n128 *)((char *)this + 148);
  *(_QWORD *)((char *)v7 + 164) = *(_QWORD *)((char *)this + 164);
  *(__n128 *)((char *)v7 + 148) = result;
  *a3 = v7;
  return result;
}

uint64_t WebCore::ScrollingStateFixedNode::applicableProperties(WebCore::ScrollingStateFixedNode *this)
{
  return WebCore::ScrollingStateNode::applicableProperties(this) | 2;
}

uint64_t WebCore::ScrollingStateFixedNode::reconcileLayerPositionForViewportRect(uint64_t result, int *a2, unsigned int a3)
{
  float v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  _DWORD *v9;
  int v10;
  float v11[2];

  v3 = (float)*a2 * 0.015625;
  v4 = *(_DWORD *)(result + 144);
  if ((v4 & 1) != 0)
  {
    v5 = v3 - *(float *)(result + 148);
  }
  else
  {
    v5 = 0.0;
    if ((v4 & 2) != 0)
      v5 = (float)(v3 + (float)((float)a2[2] * 0.015625)) - (float)(*(float *)(result + 148) + *(float *)(result + 156));
  }
  v6 = (float)a2[1] * 0.015625;
  if ((v4 & 4) != 0)
  {
    v7 = v6 - *(float *)(result + 152);
  }
  else
  {
    v7 = 0.0;
    if ((v4 & 8) != 0)
      v7 = (float)(v6 + (float)((float)a2[3] * 0.015625)) - (float)(*(float *)(result + 152) + *(float *)(result + 160));
  }
  v8 = v7 + *(float *)(result + 168);
  v11[0] = v5 + *(float *)(result + 164);
  v11[1] = v8;
  if (*(_DWORD *)(result + 120) == 1)
  {
    v9 = *(_DWORD **)(result + 88);
    if (v9)
    {
      v10 = v9[2];
      v9[2] = v10 + 1;
      if (a3 <= 2)
      {
        result = (*(uint64_t (**)(_DWORD *, float *))(*(_QWORD *)v9 + 8 * a3 + 128))(v9, v11);
        v10 = v9[2] - 1;
      }
      if (v10)
        v9[2] = v10;
      else
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    }
  }
  return result;
}

uint64_t WebCore::ScrollingStateFixedNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;

  WTF::TextStream::operator<<();
  result = WebCore::ScrollingStateNode::dumpProperties(a1, a2, a3);
  if (*(_DWORD *)(a1 + 144))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    v7 = *(_DWORD *)(a1 + 144);
    if ((v7 & 1) != 0)
    {
      WTF::TextStream::operator<<();
      v7 = *(_DWORD *)(a1 + 144);
      if ((v7 & 2) == 0)
      {
LABEL_4:
        if ((v7 & 4) == 0)
          goto LABEL_5;
        goto LABEL_20;
      }
    }
    else if ((v7 & 2) == 0)
    {
      goto LABEL_4;
    }
    WTF::TextStream::operator<<();
    v7 = *(_DWORD *)(a1 + 144);
    if ((v7 & 4) == 0)
    {
LABEL_5:
      if ((v7 & 8) == 0)
      {
LABEL_7:
        result = WTF::TextStream::endGroup(a2);
        goto LABEL_8;
      }
LABEL_6:
      WTF::TextStream::operator<<();
      goto LABEL_7;
    }
LABEL_20:
    WTF::TextStream::operator<<();
    if ((*(_DWORD *)(a1 + 144) & 8) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_8:
  if (*(float *)(a1 + 136) > 0.0 && *(float *)(a1 + 140) > 0.0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    result = WTF::TextStream::endGroup(a2);
  }
  if (*(float *)(a1 + 156) > 0.0 && *(float *)(a1 + 160) > 0.0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    v8 = WTF::TextStream::operator<<();
    WebCore::operator<<(v8);
    result = WTF::TextStream::endGroup(a2);
  }
  if (*(float *)(a1 + 164) != 0.0 || *(float *)(a1 + 168) != 0.0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    return WTF::TextStream::endGroup(a2);
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::isAsyncScrollingCoordinator(WebCore::AsyncScrollingCoordinator *this)
{
  return 1;
}

uint64_t WebCore::ScrollingCoordinator::isRemoteScrollingCoordinator(WebCore::ScrollingCoordinator *this)
{
  return 0;
}

uint64_t WebCore::ScrollingCoordinator::handleWheelEventForScrolling()
{
  return 2;
}

uint64_t WebCore::AsyncScrollingCoordinator::hasVisibleSlowRepaintViewportConstrainedObjects(WebCore::AsyncScrollingCoordinator *this, const WebCore::LocalFrameView *a2)
{
  return 0;
}

uint64_t WebCore::ScrollingCoordinator::isAsyncScrollingCoordinator(WebCore::ScrollingCoordinator *this)
{
  return 0;
}

uint64_t WebCore::ScrollingCoordinator::requestStartKeyboardScrollAnimation()
{
  return 0;
}

uint64_t WebCore::ScrollingCoordinator::requestStopKeyboardScrollAnimation(WebCore::ScrollingCoordinator *this, WebCore::ScrollableArea *a2)
{
  return 0;
}

uint64_t WebCore::ScrollingCoordinator::requestScrollToPosition()
{
  return 0;
}

uint64_t WebCore::ScrollingCoordinator::createNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5;
}

uint64_t WebCore::ScrollingCoordinator::insertNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5;
}

uint64_t WebCore::ScrollingCoordinator::parentOfNode()
{
  return 0;
}

void WebCore::ScrollingCoordinator::childrenOfNode(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::ScrollingCoordinator::synchronousScrollingReasons()
{
  return 0;
}

uint64_t WebCore::ScrollingCoordinator::haveScrollingTree(WebCore::ScrollingCoordinator *this)
{
  return 0;
}

uint64_t WebCore::ScrollingCoordinator::isRubberBandInProgress()
{
  return 0;
}

uint64_t WebCore::ScrollingCoordinator::isUserScrollInProgress()
{
  return 0;
}

uint64_t WebCore::ScrollingCoordinator::isScrollSnapInProgress()
{
  return 0;
}

uint64_t WebCore::ScrollingCoordinator::hasSubscrollers()
{
  return 0;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF12KeyValuePairIN7WebCore16ProcessQualifiedINS9_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_9UniqueRefINSB_18ScrollingStateTreeEEEEENS9_7HashMapISI_SL_NS9_11DefaultHashISI_EENS9_10HashTraitsISI_EENSQ_ISL_EENS9_15HashTableTraitsEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSW_1EJS8_SM_SU_EEEEEEDcSY_DpT0_(uint64_t a1, _QWORD *a2)
{
  WebCore::ScrollingStateTree *v2;
  WTF *v3;
  void *v4;
  double result;

  v2 = (WebCore::ScrollingStateTree *)a2[2];
  a2[2] = 0;
  if (v2)
  {
    WebCore::ScrollingStateTree::~ScrollingStateTree(v2, a2);
    if (*(_DWORD *)v3)
    {
      result = 0.0;
      *((_OWORD *)v3 + 3) = 0u;
      *((_OWORD *)v3 + 4) = 0u;
      *((_OWORD *)v3 + 1) = 0u;
      *((_OWORD *)v3 + 2) = 0u;
      *(_OWORD *)v3 = 0u;
    }
    else
    {
      WTF::fastFree(v3, v4);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF12KeyValuePairIN7WebCore16ProcessQualifiedINS9_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_9UniqueRefINSB_18ScrollingStateTreeEEEEENS9_7HashMapISI_SL_NS9_11DefaultHashISI_EENS9_10HashTraitsISI_EENSQ_ISL_EENS9_15HashTableTraitsEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSW_1EJS8_SM_SU_EEEEEEDcSY_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::ScrollingStateTree **v4;
  WebCore::ScrollingStateTree *v5;
  WTF *v6;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = (WebCore::ScrollingStateTree **)(v2 + 16);
      do
      {
        if (*(v4 - 1) != (WebCore::ScrollingStateTree *)-1)
        {
          v5 = *v4;
          *v4 = 0;
          if (v5)
          {
            WebCore::ScrollingStateTree::~ScrollingStateTree(v5, a2);
            if (*(_DWORD *)v6)
            {
              *((_OWORD *)v6 + 3) = 0u;
              *((_OWORD *)v6 + 4) = 0u;
              *((_OWORD *)v6 + 1) = 0u;
              *((_OWORD *)v6 + 2) = 0u;
              *(_OWORD *)v6 = 0u;
            }
            else
            {
              WTF::fastFree(v6, a2);
            }
          }
        }
        v4 += 3;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

_DWORD *WTF::HashTable<WebCore::LayoutUnit,WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LayoutUnit>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int v17;
  uint64_t v18;
  WTF *v19;
  _QWORD *v20;
  WTF *v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  WTF *v31;
  _QWORD *v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  WTF *v41;
  _DWORD *v42;
  _DWORD *result;
  _DWORD *v44;
  _DWORD *v45;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = v7 + 24;
    do
    {
      *(_DWORD *)(v10 - 8) = 0x80000000;
      *(_OWORD *)v10 = 0uLL;
      *(_OWORD *)(v10 + 16) = 0uLL;
      *(_QWORD *)(v10 + 32) = 0;
      v10 += 48;
      --v9;
    }
    while (v9);
  }
  v11 = a1;
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    v15 = a3;
    do
    {
      v16 = (int *)(v4 + 48 * v12);
      v17 = *v16;
      if (*v16 != 0x7FFFFFFF)
      {
        if (v17 == 0x80000000)
        {
          v18 = v4 + 48 * v12;
          v21 = *(WTF **)(v18 + 32);
          v20 = (_QWORD *)(v18 + 32);
          v19 = v21;
          if (v21)
          {
            *v20 = 0;
            *(_DWORD *)(v4 + 48 * v12 + 40) = 0;
            v22 = v13;
            WTF::fastFree(v19, v8);
            v13 = v22;
            v15 = a3;
            v11 = a1;
          }
        }
        else
        {
          v23 = *v11;
          if (*v11)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v25 = 0;
          v26 = 9 * ((v17 + ~(v17 << 15)) ^ ((v17 + ~(v17 << 15)) >> 10));
          v27 = ((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) ^ (((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) >> 16);
          do
          {
            v28 = v27 & v24;
            v29 = (_DWORD *)(v23 + 48 * (v27 & v24));
            v27 = ++v25 + (v27 & v24);
          }
          while (*v29 != 0x80000000);
          v30 = v23 + 48 * v28;
          v33 = *(WTF **)(v30 + 32);
          v32 = (_QWORD *)(v30 + 32);
          v31 = v33;
          if (v33)
          {
            *v32 = 0;
            *(_DWORD *)(v23 + 48 * v28 + 40) = 0;
            v45 = v13;
            WTF::fastFree(v31, v8);
            v13 = v45;
            v15 = a3;
            v11 = a1;
            v17 = *v16;
          }
          *v29 = v17;
          v34 = v23 + 48 * v28;
          v35 = v4 + 48 * v12;
          v36 = *(_OWORD *)(v35 + 8);
          *(_BYTE *)(v34 + 24) = *(_BYTE *)(v35 + 24);
          *(_OWORD *)(v34 + 8) = v36;
          *v32 = 0;
          v32[1] = 0;
          v38 = *(_QWORD *)(v35 + 32);
          v37 = v35 + 32;
          *(_QWORD *)v37 = 0;
          *v32 = v38;
          v39 = *(_DWORD *)(v37 + 8);
          *(_DWORD *)(v37 + 8) = 0;
          *(_DWORD *)(v34 + 40) = v39;
          v40 = *(_DWORD *)(v37 + 12);
          *(_DWORD *)(v37 + 12) = 0;
          *(_DWORD *)(v34 + 44) = v40;
          v41 = *(WTF **)v37;
          if (*(_QWORD *)v37)
          {
            *(_QWORD *)v37 = 0;
            *(_DWORD *)(v37 + 8) = 0;
            v42 = v13;
            WTF::fastFree(v41, v8);
            v13 = v42;
            v15 = a3;
            v11 = a1;
          }
          if (v16 == v15)
            v13 = v29;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  v44 = v13;
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v44;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *,false>(uint64_t result, int *a2, uint64_t a3, char a4)
{
  int *v4;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int **v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  int v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  WTF *v42;
  BOOL v43;
  int *v44;
  int v45;
  unint64_t v46;
  int *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  int v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int64_t v80;
  int64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  WTF *v96;
  uint64_t v97;
  int v98;
  WTF *v99;
  int64_t v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  _QWORD *v110;
  WTF *v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  WTF *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  WTF *v127;
  uint64_t v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int *v139;
  uint64_t v140;
  int v141;
  int *v142;
  int v143;
  int v146;
  int *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE v151[13];
  _BYTE v152[13];
  _BYTE v153[13];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _BYTE v158[13];
  _BYTE v159[13];
  _BYTE v160[13];
  _BYTE v161[13];

  v6 = a2;
  v7 = result;
LABEL_2:
  v147 = v6 - 10;
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)v6 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v6 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v60 = *(_DWORD *)v7;
        if (*(v6 - 10) < *(_DWORD *)v7)
        {
          *(_QWORD *)((char *)&v157 + 5) = *(_QWORD *)(v7 + 9);
          *(_QWORD *)&v157 = *(_QWORD *)(v7 + 4);
          v4 = *(int **)(v7 + 24);
          v25 = *(_QWORD *)(v7 + 32);
          *(_QWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 32) = 0;
          *(_DWORD *)v7 = *(v6 - 10);
          v61 = *(_QWORD *)(v6 - 9);
          *(_QWORD *)(v7 + 9) = *(_QWORD *)((char *)v6 - 31);
          *(_QWORD *)(v7 + 4) = v61;
          v62 = *((_QWORD *)v6 - 2);
          *((_QWORD *)v6 - 2) = 0;
          *(_QWORD *)(v7 + 24) = v62;
          *(_DWORD *)(v7 + 32) = *(v6 - 2);
          LODWORD(v62) = *(v6 - 1);
          *(v6 - 1) = 0;
          *(_DWORD *)(v7 + 36) = v62;
          *(v6 - 10) = v60;
          *(_QWORD *)((char *)v6 - 31) = *(_QWORD *)((char *)&v157 + 5);
          *(_QWORD *)(v6 - 9) = v157;
          result = *((_QWORD *)v6 - 2);
          if (result)
            goto LABEL_182;
          goto LABEL_81;
        }
        return result;
      case 3:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(v7, (int *)(v7 + 40), v147);
      case 4:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(v7, v7 + 40, v7 + 80, (uint64_t)v147);
      case 5:
        return (uint64_t)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *,0>(v7, v7 + 40, v7 + 80, v7 + 120, (uint64_t)v147);
      default:
        if (v9 <= 959)
        {
          v63 = (int *)(v7 + 40);
          v65 = (int *)v7 == v6 || v63 == v6;
          if ((a4 & 1) != 0)
          {
            if (!v65)
            {
              v66 = 0;
              v67 = v7;
              do
              {
                v68 = v63;
                v69 = *(_DWORD *)(v67 + 40);
                if (v69 < *(_DWORD *)v67)
                {
                  *(_QWORD *)&v158[5] = *(_QWORD *)(v67 + 49);
                  *(_QWORD *)v158 = *(_QWORD *)(v67 + 44);
                  v70 = *(_QWORD *)(v67 + 72);
                  *(_QWORD *)(v67 + 72) = 0;
                  *v63 = *(_DWORD *)v67;
                  v72 = (_QWORD *)(v67 + 4);
                  v71 = *(_QWORD *)(v67 + 4);
                  v73 = *(_QWORD *)(v67 + 64);
                  *(_QWORD *)(v67 + 64) = 0;
                  result = *((_QWORD *)v68 + 3);
                  *(_QWORD *)((char *)v68 + 9) = *(_QWORD *)(v67 + 9);
                  *(_QWORD *)(v68 + 1) = v71;
                  if (result)
                  {
                    *((_QWORD *)v68 + 3) = 0;
                    v68[8] = 0;
                    result = WTF::fastFree((WTF *)result, a2);
                  }
                  v74 = *(_QWORD *)(v67 + 24);
                  *(_QWORD *)(v67 + 24) = 0;
                  *((_QWORD *)v68 + 3) = v74;
                  v68[8] = *(_DWORD *)(v67 + 32);
                  LODWORD(v74) = *(_DWORD *)(v67 + 36);
                  *(_QWORD *)(v67 + 32) = 0;
                  v68[9] = v74;
                  if (v67 == v7)
                  {
                    v67 = v7;
                  }
                  else
                  {
                    v75 = *(_DWORD *)(v67 - 40);
                    if (v69 < v75)
                    {
                      v76 = v66;
                      while (1)
                      {
                        v77 = v7 + v76;
                        *(_DWORD *)v77 = v75;
                        *(_QWORD *)(v77 + 4) = *(_QWORD *)(v7 + v76 - 36);
                        *(_QWORD *)(v77 + 9) = *(_QWORD *)(v7 + v76 - 31);
                        *(_QWORD *)(v77 + 24) = *(_QWORD *)(v7 + v76 - 16);
                        v78 = *(_DWORD *)(v7 + v76 - 8);
                        v79 = *(_DWORD *)(v7 + v76 - 4);
                        *(_QWORD *)(v77 - 16) = 0;
                        *(_QWORD *)(v77 - 8) = 0;
                        *(_DWORD *)(v77 + 32) = v78;
                        *(_DWORD *)(v77 + 36) = v79;
                        v76 -= 40;
                        if (!v76)
                          break;
                        v75 = *(_DWORD *)(v77 - 80);
                        if (v69 >= v75)
                        {
                          v67 = v7 + v76;
                          goto LABEL_105;
                        }
                      }
                      v67 = v7;
LABEL_105:
                      v72 = (_QWORD *)(v77 - 36);
                    }
                  }
                  *(_DWORD *)v67 = v69;
                  *(_QWORD *)((char *)v72 + 5) = *(_QWORD *)&v158[5];
                  *v72 = *(_QWORD *)v158;
                  *(_QWORD *)(v67 + 24) = v73;
                  *(_QWORD *)(v67 + 32) = v70;
                }
                v63 = v68 + 10;
                v66 += 40;
                v67 = (uint64_t)v68;
              }
              while (v68 + 10 != v6);
            }
          }
          else if (!v65)
          {
            v130 = 0;
            v4 = (int *)(v7 + 76);
            v131 = -2;
            v132 = 1;
            v133 = v7;
            while (1)
            {
              v134 = v132;
              v135 = *v63;
              if (*v63 < *(_DWORD *)v133)
                break;
LABEL_179:
              v133 = v7 + 40 * v134;
              v132 = v134 + 1;
              v63 = (int *)(v133 + 40);
              v4 += 10;
              --v131;
              v130 = v134;
              if ((int *)(v133 + 40) == v6)
                return result;
            }
            *(_QWORD *)&v161[5] = *(_QWORD *)(v133 + 49);
            *(_QWORD *)v161 = *(_QWORD *)(v133 + 44);
            v136 = *(_QWORD *)(v133 + 64);
            v25 = *(_QWORD *)(v133 + 72);
            *(_QWORD *)(v133 + 64) = 0;
            *(_QWORD *)(v133 + 72) = 0;
            v137 = *(_DWORD *)(v7 + 40 * v130);
            v138 = v131;
            v139 = v4;
            while (1)
            {
              *(v139 - 9) = v137;
              *((_QWORD *)v139 - 4) = *((_QWORD *)v139 - 9);
              *(_QWORD *)((char *)v139 - 27) = *(_QWORD *)((char *)v139 - 67);
              result = *(_QWORD *)(v139 - 3);
              if (result)
              {
                *(_QWORD *)(v139 - 3) = 0;
                *(v139 - 1) = 0;
                result = WTF::fastFree((WTF *)result, a2);
              }
              v140 = *(_QWORD *)(v139 - 13);
              *(_QWORD *)(v139 - 13) = 0;
              *(_QWORD *)(v139 - 3) = v140;
              v141 = *(v139 - 11);
              v142 = v139 - 10;
              v143 = *(v139 - 10);
              *(_QWORD *)(v139 - 11) = 0;
              *(v139 - 1) = v141;
              *v139 = v143;
              if (__CFADD__(v138++, 1))
                break;
              v137 = *(v139 - 29);
              v139 -= 10;
              if (v135 >= v137)
              {
                *(v142 - 9) = v135;
                *(_QWORD *)((char *)v142 - 27) = *(_QWORD *)&v161[5];
                *((_QWORD *)v142 - 4) = *(_QWORD *)v161;
                *(_QWORD *)(v142 - 3) = v136;
                *(_QWORD *)(v142 - 1) = v25;
                goto LABEL_179;
              }
            }
LABEL_181:
            __break(1u);
LABEL_182:
            *((_QWORD *)v6 - 2) = 0;
            *(v6 - 2) = 0;
            result = WTF::fastFree((WTF *)result, a2);
LABEL_81:
            *((_QWORD *)v6 - 2) = v4;
            *((_QWORD *)v6 - 1) = v25;
          }
          return result;
        }
        if (!a3)
        {
          if ((int *)v7 != v6)
          {
            v80 = (unint64_t)(v10 - 2) >> 1;
            v81 = v80;
            do
            {
              v82 = v81;
              if (v80 >= v81)
              {
                v83 = (2 * v81) | 1;
                v84 = v7 + 40 * v83;
                if (2 * v82 + 2 >= v10)
                {
                  v85 = *(_DWORD *)v84;
                }
                else
                {
                  v85 = *(_DWORD *)v84;
                  v86 = *(_DWORD *)(v84 + 40);
                  if (*(_DWORD *)v84 <= v86)
                    v85 = *(_DWORD *)(v84 + 40);
                  if (*(_DWORD *)v84 < v86)
                  {
                    v84 += 40;
                    v83 = 2 * v82 + 2;
                  }
                }
                v87 = v7 + 40 * v82;
                v88 = *(_DWORD *)v87;
                if (v85 >= *(_DWORD *)v87)
                {
                  *(_QWORD *)&v159[5] = *(_QWORD *)(v87 + 9);
                  *(_QWORD *)v159 = *(_QWORD *)(v87 + 4);
                  v89 = v7 + 40 * v82;
                  v90 = *(_QWORD *)(v89 + 24);
                  v91 = *(_QWORD *)(v89 + 32);
                  *(_QWORD *)(v89 + 24) = 0;
                  *(_QWORD *)(v89 + 32) = 0;
                  v92 = *(_DWORD *)v84;
                  do
                  {
                    v93 = v84;
                    *(_DWORD *)v87 = v92;
                    v95 = (_QWORD *)(v84 + 4);
                    v94 = *(_QWORD *)(v84 + 4);
                    *(_QWORD *)(v87 + 9) = *(_QWORD *)((char *)v95 + 5);
                    *(_QWORD *)(v87 + 4) = v94;
                    v96 = *(WTF **)(v87 + 24);
                    if (v96)
                    {
                      *(_QWORD *)(v87 + 24) = 0;
                      *(_DWORD *)(v87 + 32) = 0;
                      v149 = v90;
                      WTF::fastFree(v96, a2);
                      v80 = (unint64_t)(v10 - 2) >> 1;
                      v90 = v149;
                    }
                    v97 = *(_QWORD *)(v93 + 24);
                    *(_QWORD *)(v93 + 24) = 0;
                    *(_QWORD *)(v87 + 24) = v97;
                    LODWORD(v97) = *(_DWORD *)(v93 + 32);
                    *(_DWORD *)(v93 + 32) = 0;
                    *(_DWORD *)(v87 + 32) = v97;
                    LODWORD(v97) = *(_DWORD *)(v93 + 36);
                    *(_DWORD *)(v93 + 36) = 0;
                    *(_DWORD *)(v87 + 36) = v97;
                    if (v80 < v83)
                      break;
                    v84 = v7 + 40 * ((2 * v83) | 1);
                    if (2 * v83 + 2 >= v10)
                    {
                      v92 = *(_DWORD *)v84;
                      v83 = (2 * v83) | 1;
                    }
                    else
                    {
                      v92 = *(_DWORD *)v84;
                      v98 = *(_DWORD *)(v84 + 40);
                      if (*(_DWORD *)v84 <= v98)
                        v92 = *(_DWORD *)(v84 + 40);
                      if (*(_DWORD *)v84 >= v98)
                      {
                        v83 = (2 * v83) | 1;
                      }
                      else
                      {
                        v84 += 40;
                        v83 = 2 * v83 + 2;
                      }
                    }
                    v87 = v93;
                  }
                  while (v92 >= v88);
                  *(_DWORD *)v93 = v88;
                  *(_QWORD *)((char *)v95 + 5) = *(_QWORD *)&v159[5];
                  *v95 = *(_QWORD *)v159;
                  v99 = *(WTF **)(v93 + 24);
                  if (v99)
                  {
                    *(_QWORD *)(v93 + 24) = 0;
                    *(_DWORD *)(v93 + 32) = 0;
                    v100 = v80;
                    v101 = v90;
                    WTF::fastFree(v99, a2);
                    v90 = v101;
                    v80 = v100;
                  }
                  *(_QWORD *)(v93 + 24) = v90;
                  *(_QWORD *)(v93 + 32) = v91;
                }
              }
              v81 = v82 - 1;
            }
            while (v82);
            v102 = v9 / 0x28uLL;
            do
            {
              v103 = 0;
              v104 = *(_DWORD *)v7;
              *(_QWORD *)&v153[5] = *(_QWORD *)(v7 + 9);
              v150 = *(_QWORD *)(v7 + 24);
              *(_QWORD *)v153 = *(_QWORD *)(v7 + 4);
              v146 = *(_DWORD *)(v7 + 36);
              v148 = *(_DWORD *)(v7 + 32);
              v105 = v7;
              *(_QWORD *)(v7 + 24) = 0;
              *(_QWORD *)(v7 + 32) = 0;
              do
              {
                v106 = v105 + 40 * v103 + 40;
                if (2 * v103 + 2 >= v102)
                {
                  v107 = *(_DWORD *)v106;
                  v103 = (2 * v103) | 1;
                }
                else
                {
                  v107 = *(_DWORD *)v106;
                  v108 = *(_DWORD *)(v105 + 40 * v103 + 80);
                  if (*(_DWORD *)v106 <= v108)
                    v107 = *(_DWORD *)(v105 + 40 * v103 + 80);
                  if (*(_DWORD *)v106 >= v108)
                  {
                    v103 = (2 * v103) | 1;
                  }
                  else
                  {
                    v106 = v105 + 40 * v103 + 80;
                    v103 = 2 * v103 + 2;
                  }
                }
                *(_DWORD *)v105 = v107;
                v110 = (_QWORD *)(v106 + 4);
                v109 = *(_QWORD *)(v106 + 4);
                *(_QWORD *)(v105 + 9) = *(_QWORD *)(v106 + 9);
                *(_QWORD *)(v105 + 4) = v109;
                v111 = *(WTF **)(v105 + 24);
                if (v111)
                {
                  *(_QWORD *)(v105 + 24) = 0;
                  *(_DWORD *)(v105 + 32) = 0;
                  WTF::fastFree(v111, a2);
                }
                v112 = *(_QWORD *)(v106 + 24);
                *(_QWORD *)(v106 + 24) = 0;
                *(_QWORD *)(v105 + 24) = v112;
                LODWORD(v112) = *(_DWORD *)(v106 + 32);
                *(_DWORD *)(v106 + 32) = 0;
                *(_DWORD *)(v105 + 32) = v112;
                LODWORD(v112) = *(_DWORD *)(v106 + 36);
                *(_DWORD *)(v106 + 36) = 0;
                *(_DWORD *)(v105 + 36) = v112;
                v105 = v106;
              }
              while (v103 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
              v113 = v6 - 10;
              if ((int *)v106 == v6 - 10)
              {
                *(_DWORD *)v106 = v104;
                *(_QWORD *)(v106 + 9) = *(_QWORD *)&v153[5];
                *v110 = *(_QWORD *)v153;
                result = *(_QWORD *)(v106 + 24);
                if (result)
                {
                  *(_QWORD *)(v106 + 24) = 0;
                  *(_DWORD *)(v106 + 32) = 0;
                  result = WTF::fastFree((WTF *)result, a2);
                }
                *(_QWORD *)(v106 + 24) = v150;
                *(_DWORD *)(v106 + 32) = v148;
                *(_DWORD *)(v106 + 36) = v146;
              }
              else
              {
                *(_DWORD *)v106 = *(v6 - 10);
                v114 = *(_QWORD *)(v6 - 9);
                *(_QWORD *)(v106 + 9) = *(_QWORD *)((char *)v6 - 31);
                *v110 = v114;
                v115 = *(WTF **)(v106 + 24);
                if (v115)
                {
                  *(_QWORD *)(v106 + 24) = 0;
                  *(_DWORD *)(v106 + 32) = 0;
                  WTF::fastFree(v115, a2);
                }
                v116 = *((_QWORD *)v6 - 2);
                *((_QWORD *)v6 - 2) = 0;
                *(_QWORD *)(v106 + 24) = v116;
                *(_DWORD *)(v106 + 32) = *(v6 - 2);
                LODWORD(v116) = *(v6 - 1);
                *(v6 - 1) = 0;
                *(_DWORD *)(v106 + 36) = v116;
                *(v6 - 10) = v104;
                *(_QWORD *)((char *)v6 - 31) = *(_QWORD *)&v153[5];
                *(_QWORD *)(v6 - 9) = *(_QWORD *)v153;
                result = *((_QWORD *)v6 - 2);
                if (result)
                {
                  *((_QWORD *)v6 - 2) = 0;
                  *(v6 - 2) = 0;
                  result = WTF::fastFree((WTF *)result, a2);
                }
                *((_QWORD *)v6 - 2) = v150;
                *(v6 - 2) = v148;
                *(v6 - 1) = v146;
                v117 = v106 + 40 - v7;
                if (v117 >= 41)
                {
                  v118 = (v117 / 0x28uLL - 2) >> 1;
                  v119 = v7 + 40 * v118;
                  v120 = *(_DWORD *)v106;
                  if (*(_DWORD *)v119 < *(_DWORD *)v106)
                  {
                    *(_QWORD *)&v160[5] = *(_QWORD *)(v106 + 9);
                    *(_QWORD *)v160 = *v110;
                    v121 = *(_QWORD *)(v106 + 24);
                    v122 = *(_QWORD *)(v106 + 32);
                    *(_QWORD *)(v106 + 24) = 0;
                    *(_QWORD *)(v106 + 32) = 0;
                    v123 = *(_DWORD *)v119;
                    do
                    {
                      v124 = v119;
                      *(_DWORD *)v106 = v123;
                      v126 = (_QWORD *)(v119 + 4);
                      v125 = *(_QWORD *)(v119 + 4);
                      *(_QWORD *)(v106 + 9) = *(_QWORD *)((char *)v126 + 5);
                      *(_QWORD *)(v106 + 4) = v125;
                      v127 = *(WTF **)(v106 + 24);
                      if (v127)
                      {
                        *(_QWORD *)(v106 + 24) = 0;
                        *(_DWORD *)(v106 + 32) = 0;
                        WTF::fastFree(v127, a2);
                      }
                      v128 = *(_QWORD *)(v124 + 24);
                      *(_QWORD *)(v124 + 24) = 0;
                      *(_QWORD *)(v106 + 24) = v128;
                      LODWORD(v128) = *(_DWORD *)(v124 + 32);
                      *(_DWORD *)(v124 + 32) = 0;
                      *(_DWORD *)(v106 + 32) = v128;
                      LODWORD(v128) = *(_DWORD *)(v124 + 36);
                      *(_DWORD *)(v124 + 36) = 0;
                      *(_DWORD *)(v106 + 36) = v128;
                      if (!v118)
                        break;
                      v118 = (v118 - 1) >> 1;
                      v119 = v7 + 40 * v118;
                      v123 = *(_DWORD *)v119;
                      v106 = v124;
                    }
                    while (*(_DWORD *)v119 < v120);
                    *(_DWORD *)v124 = v120;
                    *(_QWORD *)((char *)v126 + 5) = *(_QWORD *)&v160[5];
                    *v126 = *(_QWORD *)v160;
                    result = *(_QWORD *)(v124 + 24);
                    if (result)
                    {
                      *(_QWORD *)(v124 + 24) = 0;
                      *(_DWORD *)(v124 + 32) = 0;
                      result = WTF::fastFree((WTF *)result, a2);
                    }
                    *(_QWORD *)(v124 + 24) = v121;
                    *(_QWORD *)(v124 + 32) = v122;
                  }
                }
              }
              v6 = v113;
            }
            while (v102-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (int *)(v7 + 40 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x1401)
        {
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>((uint64_t)v12, (int *)v7, v147);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(v7, v12, v147);
          v13 = 5 * v11;
          v14 = v7 + 40 * v11;
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(v7 + 40, (int *)(v14 - 40), v6 - 20);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(v7 + 80, (int *)(v7 + 40 + 8 * v13), v6 - 30);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(v14 - 40, v12, (int *)(v7 + 40 + 8 * v13));
          v15 = *(_DWORD *)v7;
          *(_QWORD *)((char *)&v154 + 5) = *(_QWORD *)(v7 + 9);
          *(_QWORD *)&v154 = *(_QWORD *)(v7 + 4);
          v4 = *(int **)(v7 + 24);
          v16 = *(_QWORD *)(v7 + 32);
          *(_QWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 32) = 0;
          v18 = *(_QWORD *)(v14 + 32);
          v17 = (_DWORD *)(v14 + 32);
          *(_DWORD *)v7 = *v12;
          v19 = *(_QWORD *)(v17 - 7);
          *(_QWORD *)(v7 + 9) = *(_QWORD *)((char *)v17 - 23);
          *(_QWORD *)(v7 + 4) = v19;
          v21 = (int **)(v17 - 2);
          v20 = *((_QWORD *)v17 - 1);
          *((_QWORD *)v17 - 1) = 0;
          *(_QWORD *)(v7 + 24) = v20;
          v17[1] = 0;
          *(_QWORD *)(v7 + 32) = v18;
          *v12 = v15;
          *(_QWORD *)(v17 - 7) = v154;
          *(_QWORD *)((char *)v17 - 23) = *(_QWORD *)((char *)&v154 + 5);
          result = *((_QWORD *)v17 - 1);
          if (result)
          {
            *v21 = 0;
            *v17 = 0;
            result = WTF::fastFree((WTF *)result, a2);
          }
          *v21 = v4;
          *(_QWORD *)v17 = v16;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v22 = *(_DWORD *)v7;
          if (*(_DWORD *)(v7 - 40) < *(_DWORD *)v7)
            goto LABEL_14;
          *(_QWORD *)&v152[5] = *(_QWORD *)(v7 + 9);
          *(_QWORD *)v152 = *(_QWORD *)(v7 + 4);
          v4 = *(int **)(v7 + 24);
          *(_QWORD *)(v7 + 24) = 0;
          v25 = *(_QWORD *)(v7 + 32);
          *(_DWORD *)(v7 + 32) = 0;
          *(_DWORD *)(v7 + 36) = 0;
          if (v22 >= *v147)
          {
            v46 = v7 + 40;
            do
            {
              v8 = v46;
              if (v46 >= (unint64_t)v6)
                break;
              v46 += 40;
            }
            while (v22 >= *(_DWORD *)v8);
          }
          else
          {
            v44 = (int *)(v7 + 40);
            do
            {
              if (v44 == v6)
                goto LABEL_181;
              v45 = *v44;
              v44 += 10;
            }
            while (v22 >= v45);
            v8 = (unint64_t)(v44 - 10);
          }
          v47 = v6;
          if (v8 < (unint64_t)v6)
          {
            v47 = v6;
            while (v47 != (int *)v7)
            {
              v48 = *(v47 - 10);
              v47 -= 10;
              if (v22 >= v48)
                goto LABEL_57;
            }
            goto LABEL_181;
          }
LABEL_57:
          if (v8 < (unint64_t)v47)
          {
            v49 = *(_DWORD *)v8;
            do
            {
              *(_QWORD *)((char *)&v156 + 5) = *(_QWORD *)(v8 + 9);
              *(_QWORD *)&v156 = *(_QWORD *)(v8 + 4);
              v50 = *(_QWORD *)(v8 + 24);
              v51 = *(_QWORD *)(v8 + 32);
              *(_QWORD *)(v8 + 24) = 0;
              *(_QWORD *)(v8 + 32) = 0;
              *(_DWORD *)v8 = *v47;
              v52 = *(_QWORD *)(v47 + 1);
              *(_QWORD *)(v8 + 9) = *(_QWORD *)((char *)v47 + 9);
              *(_QWORD *)(v8 + 4) = v52;
              v53 = *((_QWORD *)v47 + 3);
              *((_QWORD *)v47 + 3) = 0;
              *(_QWORD *)(v8 + 24) = v53;
              *(_DWORD *)(v8 + 32) = v47[8];
              LODWORD(v53) = v47[9];
              v47[9] = 0;
              *(_DWORD *)(v8 + 36) = v53;
              *v47 = v49;
              *(_QWORD *)((char *)v47 + 9) = *(_QWORD *)((char *)&v156 + 5);
              *(_QWORD *)(v47 + 1) = v156;
              result = *((_QWORD *)v47 + 3);
              if (result)
              {
                *((_QWORD *)v47 + 3) = 0;
                v47[8] = 0;
                result = WTF::fastFree((WTF *)result, a2);
              }
              *((_QWORD *)v47 + 3) = v50;
              *((_QWORD *)v47 + 4) = v51;
              v54 = (int *)(v8 + 40);
              do
              {
                if (v54 == v6)
                  goto LABEL_181;
                v55 = *v54;
                v54 += 10;
                v49 = v55;
              }
              while (v22 >= v55);
              v8 = (unint64_t)(v54 - 10);
              do
              {
                if (v47 == (int *)v7)
                  goto LABEL_181;
                v56 = *(v47 - 10);
                v47 -= 10;
              }
              while (v22 < v56);
            }
            while (v8 < (unint64_t)v47);
          }
          if (v8 - 40 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 40);
            v57 = *(_QWORD *)(v8 - 36);
            *(_QWORD *)(v7 + 9) = *(_QWORD *)(v8 - 31);
            *(_QWORD *)(v7 + 4) = v57;
            v58 = *(WTF **)(v7 + 24);
            if (v58)
            {
              *(_QWORD *)(v7 + 24) = 0;
              *(_DWORD *)(v7 + 32) = 0;
              WTF::fastFree(v58, a2);
            }
            v59 = *(_QWORD *)(v8 - 16);
            *(_QWORD *)(v8 - 16) = 0;
            *(_QWORD *)(v7 + 24) = v59;
            LODWORD(v59) = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(v8 - 8) = 0;
            *(_DWORD *)(v7 + 32) = v59;
            LODWORD(v59) = *(_DWORD *)(v8 - 4);
            *(_DWORD *)(v8 - 4) = 0;
            *(_DWORD *)(v7 + 36) = v59;
          }
          *(_DWORD *)(v8 - 40) = v22;
          *(_QWORD *)(v8 - 31) = *(_QWORD *)&v152[5];
          *(_QWORD *)(v8 - 36) = *(_QWORD *)v152;
          result = *(_QWORD *)(v8 - 16);
          if (result)
          {
            *(_QWORD *)(v8 - 16) = 0;
            *(_DWORD *)(v8 - 8) = 0;
            result = WTF::fastFree((WTF *)result, a2);
          }
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v4;
          *(_QWORD *)(v8 - 8) = v25;
          continue;
        }
        v22 = *(_DWORD *)v7;
LABEL_14:
        v23 = 0;
        *(_QWORD *)&v151[5] = *(_QWORD *)(v7 + 9);
        *(_QWORD *)v151 = *(_QWORD *)(v7 + 4);
        v24 = *(_QWORD *)(v7 + 24);
        *(_QWORD *)(v7 + 24) = 0;
        v25 = *(_QWORD *)(v7 + 32);
        *(_DWORD *)(v7 + 32) = 0;
        *(_DWORD *)(v7 + 36) = 0;
        do
        {
          v26 = (int *)(v7 + v23 + 40);
          if (v26 == v6)
            goto LABEL_181;
          v27 = *v26;
          v23 += 40;
        }
        while (v27 < v22);
        v28 = v7 + v23;
        v4 = v6;
        if (v23 != 40)
        {
          while (v4 != (int *)v7)
          {
            v29 = *(v4 - 10);
            v4 -= 10;
            if (v29 < v22)
              goto LABEL_24;
          }
          goto LABEL_181;
        }
        v4 = v6;
        do
        {
          if (v28 >= (unint64_t)v4)
            break;
          v30 = *(v4 - 10);
          v4 -= 10;
        }
        while (v30 >= v22);
LABEL_24:
        v8 = v7 + v23;
        if (v28 < (unint64_t)v4)
        {
          v31 = (unint64_t)v4;
          do
          {
            *(_QWORD *)((char *)&v155 + 5) = *(_QWORD *)(v8 + 9);
            *(_QWORD *)&v155 = *(_QWORD *)(v8 + 4);
            v32 = *(_QWORD *)(v8 + 24);
            v33 = *(_QWORD *)(v8 + 32);
            *(_QWORD *)(v8 + 24) = 0;
            *(_QWORD *)(v8 + 32) = 0;
            *(_DWORD *)v8 = *(_DWORD *)v31;
            v34 = *(_QWORD *)(v31 + 4);
            *(_QWORD *)(v8 + 9) = *(_QWORD *)(v31 + 9);
            *(_QWORD *)(v8 + 4) = v34;
            v35 = *(_QWORD *)(v31 + 24);
            *(_QWORD *)(v31 + 24) = 0;
            *(_QWORD *)(v8 + 24) = v35;
            *(_DWORD *)(v8 + 32) = *(_DWORD *)(v31 + 32);
            LODWORD(v35) = *(_DWORD *)(v31 + 36);
            *(_DWORD *)(v31 + 36) = 0;
            *(_DWORD *)(v8 + 36) = v35;
            *(_DWORD *)v31 = v27;
            *(_QWORD *)(v31 + 9) = *(_QWORD *)((char *)&v155 + 5);
            *(_QWORD *)(v31 + 4) = v155;
            result = *(_QWORD *)(v31 + 24);
            if (result)
            {
              *(_QWORD *)(v31 + 24) = 0;
              *(_DWORD *)(v31 + 32) = 0;
              result = WTF::fastFree((WTF *)result, a2);
            }
            *(_QWORD *)(v31 + 24) = v32;
            *(_QWORD *)(v31 + 32) = v33;
            v36 = (int *)(v8 + 40);
            do
            {
              if (v36 == v6)
                goto LABEL_181;
              v37 = *v36;
              v36 += 10;
              v27 = v37;
            }
            while (v37 < v22);
            v8 = (unint64_t)(v36 - 10);
            do
            {
              if (v31 == v7)
                goto LABEL_181;
              v38 = *(_DWORD *)(v31 - 40);
              v31 -= 40;
            }
            while (v38 >= v22);
          }
          while (v8 < v31);
        }
        if (v8 - 40 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 40);
          v39 = *(_QWORD *)(v8 - 36);
          *(_QWORD *)(v7 + 9) = *(_QWORD *)(v8 - 31);
          *(_QWORD *)(v7 + 4) = v39;
          v40 = *(WTF **)(v7 + 24);
          if (v40)
          {
            *(_QWORD *)(v7 + 24) = 0;
            *(_DWORD *)(v7 + 32) = 0;
            WTF::fastFree(v40, a2);
          }
          v41 = *(_QWORD *)(v8 - 16);
          *(_QWORD *)(v8 - 16) = 0;
          *(_QWORD *)(v7 + 24) = v41;
          LODWORD(v41) = *(_DWORD *)(v8 - 8);
          *(_DWORD *)(v8 - 8) = 0;
          *(_DWORD *)(v7 + 32) = v41;
          LODWORD(v41) = *(_DWORD *)(v8 - 4);
          *(_DWORD *)(v8 - 4) = 0;
          *(_DWORD *)(v7 + 36) = v41;
        }
        *(_DWORD *)(v8 - 40) = v22;
        *(_QWORD *)(v8 - 31) = *(_QWORD *)&v151[5];
        *(_QWORD *)(v8 - 36) = *(_QWORD *)v151;
        v42 = *(WTF **)(v8 - 16);
        if (v42)
        {
          *(_QWORD *)(v8 - 16) = 0;
          *(_DWORD *)(v8 - 8) = 0;
          WTF::fastFree(v42, a2);
        }
        *(_QWORD *)(v8 - 16) = v24;
        *(_QWORD *)(v8 - 8) = v25;
        if (v28 < (unint64_t)v4)
        {
LABEL_44:
          result = std::__introsort<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *,false>(v7, v8 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v43 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(v7, (_DWORD *)(v8 - 40));
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(v8, v6);
        if (!(_DWORD)result)
        {
          if (v43)
            continue;
          goto LABEL_44;
        }
        v6 = (int *)(v8 - 40);
        if (!v43)
          goto LABEL_2;
        return result;
    }
  }
}

WTF *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WTF *result;
  void *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(a1, a2, a3, a4);
  v12 = *(_DWORD *)a4;
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    v13 = (uint64_t *)(a4 + 4);
    *(_QWORD *)&v35 = *(_QWORD *)(a4 + 4);
    *(_QWORD *)((char *)&v35 + 5) = *(_QWORD *)(a4 + 9);
    v14 = *(_QWORD *)(a4 + 24);
    v15 = *(_QWORD *)(a4 + 32);
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    v16 = *(_QWORD *)(a5 + 4);
    *(_QWORD *)(a4 + 9) = *(_QWORD *)(a5 + 9);
    *(_QWORD *)(a4 + 4) = v16;
    v17 = *(_QWORD *)(a5 + 24);
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a4 + 24) = v17;
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(a5 + 32);
    LODWORD(v17) = *(_DWORD *)(a5 + 36);
    *(_DWORD *)(a5 + 36) = 0;
    *(_DWORD *)(a4 + 36) = v17;
    *(_DWORD *)a5 = v12;
    *(_QWORD *)(a5 + 4) = v35;
    *(_QWORD *)(a5 + 9) = *(_QWORD *)((char *)&v35 + 5);
    result = *(WTF **)(a5 + 24);
    if (result)
    {
      *(_QWORD *)(a5 + 24) = 0;
      *(_DWORD *)(a5 + 32) = 0;
      result = (WTF *)WTF::fastFree(result, v11);
    }
    *(_QWORD *)(a5 + 24) = v14;
    *(_QWORD *)(a5 + 32) = v15;
    v18 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      v19 = (uint64_t *)(a3 + 4);
      *(_QWORD *)&v36 = *(_QWORD *)(a3 + 4);
      *(_QWORD *)((char *)&v36 + 5) = *(_QWORD *)(a3 + 9);
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      v22 = *v13;
      *(_QWORD *)(a3 + 9) = *(_QWORD *)(a4 + 9);
      *(_QWORD *)(a3 + 4) = v22;
      v23 = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a3 + 24) = v23;
      *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
      LODWORD(v23) = *(_DWORD *)(a4 + 36);
      *(_DWORD *)(a4 + 36) = 0;
      *(_DWORD *)(a3 + 36) = v23;
      *(_DWORD *)a4 = v18;
      *v13 = v36;
      *(_QWORD *)(a4 + 9) = *(_QWORD *)((char *)&v36 + 5);
      result = *(WTF **)(a4 + 24);
      if (result)
      {
        *(_QWORD *)(a4 + 24) = 0;
        *(_DWORD *)(a4 + 32) = 0;
        result = (WTF *)WTF::fastFree(result, v11);
      }
      *(_QWORD *)(a4 + 24) = v20;
      *(_QWORD *)(a4 + 32) = v21;
      v24 = *(_DWORD *)a2;
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        v25 = (uint64_t *)(a2 + 4);
        *(_QWORD *)&v37 = *(_QWORD *)(a2 + 4);
        *(_QWORD *)((char *)&v37 + 5) = *(_QWORD *)(a2 + 9);
        v26 = *(_QWORD *)(a2 + 24);
        v27 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        v28 = *v19;
        *(_QWORD *)(a2 + 9) = *(_QWORD *)(a3 + 9);
        *(_QWORD *)(a2 + 4) = v28;
        v29 = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a2 + 24) = v29;
        *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
        LODWORD(v29) = *(_DWORD *)(a3 + 36);
        *(_DWORD *)(a3 + 36) = 0;
        *(_DWORD *)(a2 + 36) = v29;
        *(_DWORD *)a3 = v24;
        *v19 = v37;
        *(_QWORD *)(a3 + 9) = *(_QWORD *)((char *)&v37 + 5);
        result = *(WTF **)(a3 + 24);
        if (result)
        {
          *(_QWORD *)(a3 + 24) = 0;
          *(_DWORD *)(a3 + 32) = 0;
          result = (WTF *)WTF::fastFree(result, v11);
        }
        *(_QWORD *)(a3 + 24) = v26;
        *(_QWORD *)(a3 + 32) = v27;
        v30 = *(_DWORD *)a1;
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          *(_QWORD *)&v38 = *(_QWORD *)(a1 + 4);
          *(_QWORD *)((char *)&v38 + 5) = *(_QWORD *)(a1 + 9);
          v31 = *(_QWORD *)(a1 + 24);
          v32 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          v33 = *v25;
          *(_QWORD *)(a1 + 9) = *(_QWORD *)(a2 + 9);
          *(_QWORD *)(a1 + 4) = v33;
          v34 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 24) = 0;
          *(_QWORD *)(a1 + 24) = v34;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
          LODWORD(v34) = *(_DWORD *)(a2 + 36);
          *(_DWORD *)(a2 + 36) = 0;
          *(_DWORD *)(a1 + 36) = v34;
          *(_DWORD *)a2 = v30;
          *v25 = v38;
          *(_QWORD *)(a2 + 9) = *(_QWORD *)((char *)&v38 + 5);
          result = *(WTF **)(a2 + 24);
          if (result)
          {
            *(_QWORD *)(a2 + 24) = 0;
            *(_DWORD *)(a2 + 32) = 0;
            result = (WTF *)WTF::fastFree(result, v11);
          }
          *(_QWORD *)(a2 + 24) = v31;
          *(_QWORD *)(a2 + 32) = v32;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(uint64_t result, int *a2, int *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v5 = result;
  v6 = *a2;
  v7 = *(_DWORD *)result;
  v8 = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v8 < v6)
    {
      v14 = (uint64_t *)(a2 + 1);
      *(_QWORD *)&v34 = *(_QWORD *)(a2 + 1);
      *(_QWORD *)((char *)&v34 + 5) = *(_QWORD *)((char *)a2 + 9);
      v15 = *((_QWORD *)a2 + 3);
      v16 = *((_QWORD *)a2 + 4);
      *((_QWORD *)a2 + 3) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *a2 = *a3;
      v17 = *(_QWORD *)(a3 + 1);
      *(_QWORD *)((char *)a2 + 9) = *(_QWORD *)((char *)a3 + 9);
      *(_QWORD *)(a2 + 1) = v17;
      v18 = *((_QWORD *)a3 + 3);
      *((_QWORD *)a3 + 3) = 0;
      *((_QWORD *)a2 + 3) = v18;
      a2[8] = a3[8];
      LODWORD(v18) = a3[9];
      a3[9] = 0;
      a2[9] = v18;
      *a3 = v6;
      *(_QWORD *)(a3 + 1) = v34;
      *(_QWORD *)((char *)a3 + 9) = *(_QWORD *)((char *)&v34 + 5);
      result = *((_QWORD *)a3 + 3);
      if (result)
      {
        *((_QWORD *)a3 + 3) = 0;
        a3[8] = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      *((_QWORD *)a3 + 3) = v15;
      *((_QWORD *)a3 + 4) = v16;
      v19 = *(_DWORD *)v5;
      if (*a2 < *(_DWORD *)v5)
      {
        *(_QWORD *)&v35 = *(_QWORD *)(v5 + 4);
        *(_QWORD *)((char *)&v35 + 5) = *(_QWORD *)(v5 + 9);
        v20 = *(_QWORD *)(v5 + 24);
        v21 = *(_QWORD *)(v5 + 32);
        *(_QWORD *)(v5 + 24) = 0;
        *(_QWORD *)(v5 + 32) = 0;
        *(_DWORD *)v5 = *a2;
        v22 = *v14;
        *(_QWORD *)(v5 + 9) = *(_QWORD *)((char *)a2 + 9);
        *(_QWORD *)(v5 + 4) = v22;
        v23 = *((_QWORD *)a2 + 3);
        *((_QWORD *)a2 + 3) = 0;
        *(_QWORD *)(v5 + 24) = v23;
        *(_DWORD *)(v5 + 32) = a2[8];
        LODWORD(v23) = a2[9];
        a2[9] = 0;
        *(_DWORD *)(v5 + 36) = v23;
        *a2 = v19;
        *v14 = v35;
        *(_QWORD *)((char *)a2 + 9) = *(_QWORD *)((char *)&v35 + 5);
        result = *((_QWORD *)a2 + 3);
        if (result)
        {
          *((_QWORD *)a2 + 3) = 0;
          a2[8] = 0;
          result = WTF::fastFree((WTF *)result, a2);
        }
        *((_QWORD *)a2 + 3) = v20;
        *((_QWORD *)a2 + 4) = v21;
      }
    }
  }
  else
  {
    v9 = (_QWORD *)(result + 4);
    if (v8 >= v6)
    {
      *(_QWORD *)&v36 = *v9;
      *(_QWORD *)((char *)&v36 + 5) = *(_QWORD *)(result + 9);
      v24 = *(_QWORD *)(result + 24);
      v25 = *(_DWORD *)(result + 32);
      v26 = *(_DWORD *)(result + 36);
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_DWORD *)result = *a2;
      v28 = a2 + 1;
      v27 = *(_QWORD *)(a2 + 1);
      *(_QWORD *)(result + 9) = *(_QWORD *)((char *)a2 + 9);
      *v9 = v27;
      v30 = a2 + 6;
      v29 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = 0;
      *(_QWORD *)(result + 24) = v29;
      *(_DWORD *)(result + 32) = a2[8];
      LODWORD(v29) = a2[9];
      a2[9] = 0;
      *(_DWORD *)(result + 36) = v29;
      *a2 = v7;
      *(_QWORD *)(a2 + 1) = v36;
      *(_QWORD *)((char *)a2 + 9) = *(_QWORD *)((char *)&v36 + 5);
      result = *((_QWORD *)a2 + 3);
      if (result)
      {
        *((_QWORD *)a2 + 3) = 0;
        a2[8] = 0;
        result = WTF::fastFree((WTF *)result, a2);
        v7 = *a2;
      }
      *((_QWORD *)a2 + 3) = v24;
      a2[8] = v25;
      a2[9] = v26;
      if (*a3 < v7)
      {
        *(_QWORD *)&v37 = *v28;
        *(_QWORD *)((char *)&v37 + 5) = *(_QWORD *)((char *)a2 + 9);
        *v30 = 0;
        *((_QWORD *)a2 + 4) = 0;
        *a2 = *a3;
        v31 = *(_QWORD *)(a3 + 1);
        *(_QWORD *)((char *)a2 + 9) = *(_QWORD *)((char *)a3 + 9);
        *v28 = v31;
        v32 = *((_QWORD *)a3 + 3);
        *((_QWORD *)a3 + 3) = 0;
        *((_QWORD *)a2 + 3) = v32;
        a2[8] = a3[8];
        LODWORD(v32) = a3[9];
        a3[9] = 0;
        a2[9] = v32;
        *a3 = v7;
        *(_QWORD *)((char *)a3 + 9) = *(_QWORD *)((char *)&v37 + 5);
        *(_QWORD *)(a3 + 1) = v37;
        result = *((_QWORD *)a3 + 3);
        if (result)
        {
          *((_QWORD *)a3 + 3) = 0;
          a3[8] = 0;
          result = WTF::fastFree((WTF *)result, a2);
        }
        *((_QWORD *)a3 + 3) = v24;
        a3[8] = v25;
        a3[9] = v26;
      }
    }
    else
    {
      *(_QWORD *)&v33 = *v9;
      *(_QWORD *)((char *)&v33 + 5) = *(_QWORD *)(result + 9);
      v10 = *(_QWORD *)(result + 24);
      v11 = *(_QWORD *)(result + 32);
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_DWORD *)result = *a3;
      v12 = *(_QWORD *)(a3 + 1);
      *(_QWORD *)(result + 9) = *(_QWORD *)((char *)a3 + 9);
      *v9 = v12;
      v13 = *((_QWORD *)a3 + 3);
      *((_QWORD *)a3 + 3) = 0;
      *(_QWORD *)(result + 24) = v13;
      *(_DWORD *)(result + 32) = a3[8];
      LODWORD(v13) = a3[9];
      a3[9] = 0;
      *(_DWORD *)(result + 36) = v13;
      *a3 = v7;
      *(_QWORD *)(a3 + 1) = v33;
      *(_QWORD *)((char *)a3 + 9) = *(_QWORD *)((char *)&v33 + 5);
      result = *((_QWORD *)a3 + 3);
      if (result)
      {
        *((_QWORD *)a3 + 3) = 0;
        a3[8] = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      *((_QWORD *)a3 + 3) = v10;
      *((_QWORD *)a3 + 4) = v11;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  _BYTE v26[13];

  v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_DWORD *)a1;
      if (*(a2 - 10) < *(_DWORD *)a1)
      {
        *(_QWORD *)&v25 = *(_QWORD *)(a1 + 4);
        *(_QWORD *)((char *)&v25 + 5) = *(_QWORD *)(a1 + 9);
        v7 = *(_QWORD *)(a1 + 24);
        v8 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_DWORD *)a1 = *(a2 - 10);
        v9 = *(_QWORD *)(a2 - 9);
        *(_QWORD *)(a1 + 9) = *(_QWORD *)((char *)a2 - 31);
        *(_QWORD *)(a1 + 4) = v9;
        v10 = *((_QWORD *)a2 - 2);
        *((_QWORD *)a2 - 2) = 0;
        *(_QWORD *)(a1 + 24) = v10;
        *(_DWORD *)(a1 + 32) = *(a2 - 2);
        LODWORD(v10) = *(a2 - 1);
        *(a2 - 1) = 0;
        *(_DWORD *)(a1 + 36) = v10;
        *(a2 - 10) = v6;
        *(_QWORD *)(a2 - 9) = v25;
        *(_QWORD *)((char *)a2 - 31) = *(_QWORD *)((char *)&v25 + 5);
        v11 = (WTF *)*((_QWORD *)a2 - 2);
        if (v11)
        {
          *((_QWORD *)a2 - 2) = 0;
          *(a2 - 2) = 0;
          WTF::fastFree(v11, a2);
        }
        *((_QWORD *)a2 - 2) = v7;
        *((_QWORD *)a2 - 1) = v8;
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(a1, (int *)(a1 + 40), a2 - 10);
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(a1, a1 + 40, a1 + 80, (uint64_t)(a2 - 10));
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *,0>(a1, a1 + 40, a1 + 80, a1 + 120, (uint64_t)(a2 - 10));
      return 1;
    default:
      v12 = (int *)(a1 + 80);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(a1, (int *)(a1 + 40), (int *)(a1 + 80));
      v13 = a1 + 120;
      if ((_DWORD *)(a1 + 120) == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(_DWORD *)v13;
    if (*(_DWORD *)v13 < *v12)
    {
      *(_QWORD *)&v26[5] = *(_QWORD *)(v13 + 9);
      *(_QWORD *)v26 = *(_QWORD *)(v13 + 4);
      v17 = *(_QWORD *)(v13 + 24);
      v18 = *(_QWORD *)(v13 + 32);
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      v19 = *v12;
      v20 = v14;
      while (1)
      {
        v21 = a1 + v20;
        *(_DWORD *)(v21 + 120) = v19;
        *(_QWORD *)(v21 + 124) = *(_QWORD *)(a1 + v20 + 84);
        *(_QWORD *)(v21 + 129) = *(_QWORD *)(a1 + v20 + 89);
        *(_QWORD *)(v21 + 144) = *(_QWORD *)(a1 + v20 + 104);
        v22 = *(_DWORD *)(a1 + v20 + 112);
        v23 = *(_DWORD *)(a1 + v20 + 116);
        *(_QWORD *)(v21 + 104) = 0;
        *(_QWORD *)(v21 + 112) = 0;
        *(_DWORD *)(v21 + 152) = v22;
        *(_DWORD *)(v21 + 156) = v23;
        if (v20 == -80)
          break;
        v19 = *(_DWORD *)(v21 + 40);
        v20 -= 40;
        if (v16 >= v19)
        {
          v24 = a1 + v20 + 120;
          goto LABEL_14;
        }
      }
      v24 = a1;
LABEL_14:
      *(_DWORD *)v24 = v16;
      *(_QWORD *)(v21 + 84) = *(_QWORD *)v26;
      *(_QWORD *)(v21 + 89) = *(_QWORD *)&v26[5];
      *(_QWORD *)(v24 + 24) = v17;
      *(_QWORD *)(v24 + 32) = v18;
      if (++v15 == 8)
        return v13 + 40 == (_QWORD)a2;
    }
    v12 = (int *)v13;
    v14 += 40;
    v13 += 40;
    if ((_DWORD *)v13 == a2)
      return 1;
  }
}

WTF *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF *result;
  void *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  result = (WTF *)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0 &,WebCore::SnapOffset<WebCore::LayoutUnit> *>(a1, (int *)a2, (int *)a3);
  v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    v11 = (uint64_t *)(a3 + 4);
    *(_QWORD *)&v27 = *(_QWORD *)(a3 + 4);
    *(_QWORD *)((char *)&v27 + 5) = *(_QWORD *)(a3 + 9);
    v12 = *(_QWORD *)(a3 + 24);
    v13 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    v14 = *(_QWORD *)(a4 + 4);
    *(_QWORD *)(a3 + 9) = *(_QWORD *)(a4 + 9);
    *(_QWORD *)(a3 + 4) = v14;
    v15 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a3 + 24) = v15;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
    LODWORD(v15) = *(_DWORD *)(a4 + 36);
    *(_DWORD *)(a4 + 36) = 0;
    *(_DWORD *)(a3 + 36) = v15;
    *(_DWORD *)a4 = v10;
    *(_QWORD *)(a4 + 4) = v27;
    *(_QWORD *)(a4 + 9) = *(_QWORD *)((char *)&v27 + 5);
    result = *(WTF **)(a4 + 24);
    if (result)
    {
      *(_QWORD *)(a4 + 24) = 0;
      *(_DWORD *)(a4 + 32) = 0;
      result = (WTF *)WTF::fastFree(result, v9);
    }
    *(_QWORD *)(a4 + 24) = v12;
    *(_QWORD *)(a4 + 32) = v13;
    v16 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      v17 = (uint64_t *)(a2 + 4);
      *(_QWORD *)&v28 = *(_QWORD *)(a2 + 4);
      *(_QWORD *)((char *)&v28 + 5) = *(_QWORD *)(a2 + 9);
      v18 = *(_QWORD *)(a2 + 24);
      v19 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      v20 = *v11;
      *(_QWORD *)(a2 + 9) = *(_QWORD *)(a3 + 9);
      *(_QWORD *)(a2 + 4) = v20;
      v21 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a2 + 24) = v21;
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
      LODWORD(v21) = *(_DWORD *)(a3 + 36);
      *(_DWORD *)(a3 + 36) = 0;
      *(_DWORD *)(a2 + 36) = v21;
      *(_DWORD *)a3 = v16;
      *v11 = v28;
      *(_QWORD *)(a3 + 9) = *(_QWORD *)((char *)&v28 + 5);
      result = *(WTF **)(a3 + 24);
      if (result)
      {
        *(_QWORD *)(a3 + 24) = 0;
        *(_DWORD *)(a3 + 32) = 0;
        result = (WTF *)WTF::fastFree(result, v9);
      }
      *(_QWORD *)(a3 + 24) = v18;
      *(_QWORD *)(a3 + 32) = v19;
      v22 = *(_DWORD *)a1;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        *(_QWORD *)&v29 = *(_QWORD *)(a1 + 4);
        *(_QWORD *)((char *)&v29 + 5) = *(_QWORD *)(a1 + 9);
        v23 = *(_QWORD *)(a1 + 24);
        v24 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        v25 = *v17;
        *(_QWORD *)(a1 + 9) = *(_QWORD *)(a2 + 9);
        *(_QWORD *)(a1 + 4) = v25;
        v26 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a1 + 24) = v26;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        LODWORD(v26) = *(_DWORD *)(a2 + 36);
        *(_DWORD *)(a2 + 36) = 0;
        *(_DWORD *)(a1 + 36) = v26;
        *(_DWORD *)a2 = v22;
        *v17 = v29;
        *(_QWORD *)(a2 + 9) = *(_QWORD *)((char *)&v29 + 5);
        result = *(WTF **)(a2 + 24);
        if (result)
        {
          *(_QWORD *)(a2 + 24) = 0;
          *(_DWORD *)(a2 + 32) = 0;
          result = (WTF *)WTF::fastFree(result, v9);
        }
        *(_QWORD *)(a2 + 24) = v23;
        *(_QWORD *)(a2 + 32) = v24;
      }
    }
  }
  return result;
}

uint64_t WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>::~ScrollSnapOffsetsInfo(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v10;
  char *v11;
  WTF *v12;
  uint64_t v13;
  char *v14;
  WTF *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(WTF **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(unsigned int *)(a1 + 36);
  v6 = *(WTF **)(a1 + 24);
  if (!(_DWORD)v5)
  {
    if (!v6)
      goto LABEL_7;
    goto LABEL_21;
  }
  v10 = 40 * v5;
  v11 = (char *)v6 + 24;
  do
  {
    v12 = *(WTF **)v11;
    if (*(_QWORD *)v11)
    {
      *(_QWORD *)v11 = 0;
      *((_DWORD *)v11 + 2) = 0;
      v16 = v11;
      v18 = v10;
      WTF::fastFree(v12, a2);
      v11 = v16;
      v10 = v18;
    }
    v11 += 40;
    v10 -= 40;
  }
  while (v10);
  v6 = *(WTF **)(a1 + 24);
  if (v6)
  {
LABEL_21:
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v6, a2);
  }
LABEL_7:
  v7 = *(unsigned int *)(a1 + 20);
  v8 = *(WTF **)(a1 + 8);
  if (!(_DWORD)v7)
  {
    if (!v8)
      return a1;
LABEL_23:
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v8, a2);
    return a1;
  }
  v13 = 40 * v7;
  v14 = (char *)v8 + 24;
  do
  {
    v15 = *(WTF **)v14;
    if (*(_QWORD *)v14)
    {
      *(_QWORD *)v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      v17 = v14;
      v19 = v13;
      WTF::fastFree(v15, a2);
      v14 = v17;
      v13 = v19;
    }
    v14 += 40;
    v13 -= 40;
  }
  while (v13);
  v8 = *(WTF **)(a1 + 8);
  if (v8)
    goto LABEL_23;
  return a1;
}

uint64_t WebCore::FixedPositionViewportConstraints::constraintType(WebCore::FixedPositionViewportConstraints *this)
{
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncScrollingCoordinator::AsyncScrollingCoordinator(WebCore::Page *)::$_0,void,PAL::HysteresisState>::call(uint64_t result)
{
  uint64_t v1;
  int v2;
  WTF *v3;
  void *v4;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  if (v1)
  {
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v2 = (*(_DWORD *)result)++;
      if (v2)
      {
        *(_DWORD *)result = v2;
      }
      else
      {
        WebCore::Page::~Page(result);
        return WTF::fastFree(v3, v4);
      }
    }
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AsyncScrollingCoordinator::stateNodeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,WebCore::AsyncScrollingCoordinator::stateNodeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_1,WebCore::AsyncScrollingCoordinator::stateNodeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ScrollingStateTree,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>><WebCore::ScrollingStateTree>,WTF::HashTableTraits>> const&>(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AsyncScrollingCoordinator::stateNodeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,WebCore::AsyncScrollingCoordinator::stateNodeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_1,WebCore::AsyncScrollingCoordinator::stateNodeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ScrollingStateTree,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>><WebCore::ScrollingStateTree>,WTF::HashTableTraits>> const&>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v8;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = *(_OWORD *)**(_QWORD **)result;
  if (!(_QWORD)v10
    || (result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v4 + 40), (uint64_t *)&v10)) == 0|| (v5 = *(_QWORD **)(result + 16)) == 0)
  {
    *a3 = 0;
    return result;
  }
  v6 = v5[1];
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_8;
  }
  result = MEMORY[0x19AEA534C](v6);
LABEL_8:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_13:
  *a3 = v5;
  if (v5[3] != (_QWORD)v10 || v5[4] != *((_QWORD *)&v10 + 1))
  {
    result = 463;
    __break(0xC471u);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AsyncScrollingCoordinator::stateNodeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,WebCore::AsyncScrollingCoordinator::stateNodeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_1,WebCore::AsyncScrollingCoordinator::stateNodeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ScrollingStateTree,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>><WebCore::ScrollingStateTree>,WTF::HashTableTraits>> const&>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  int v18;
  __int128 v20;

  v4 = *a2;
  if (*a2)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = v4 + 24 * v5;
    if (*(_DWORD *)(v4 - 12))
    {
      v7 = *a2;
      if ((_DWORD)v5)
      {
        v8 = 24 * v5;
        v7 = *a2;
        while (*(_OWORD *)v7 == 0 || *(_QWORD *)(v7 + 8) == -1)
        {
          v7 += 24;
          v8 -= 24;
          if (!v8)
          {
            v7 = v6;
            break;
          }
        }
      }
      if (v4)
        goto LABEL_13;
      goto LABEL_17;
    }
    v7 = v4 + 24 * v5;
  }
  else
  {
    v7 = 0;
    LODWORD(v5) = 0;
  }
  v6 = v4 + 24 * v5;
  if (v4)
  {
LABEL_13:
    v10 = v4 + 24 * *(unsigned int *)(v4 - 4);
    goto LABEL_18;
  }
LABEL_17:
  v10 = 0;
LABEL_18:
  if (v10 == v7)
  {
LABEL_33:
    *a3 = 0;
    return result;
  }
  v11 = *(_QWORD *)result;
  while (1)
  {
    v12 = *(_QWORD *)(v7 + 16);
    v20 = *(_OWORD *)*(_QWORD *)(v11 + 8);
    if ((_QWORD)v20)
    {
      result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v12 + 40), (uint64_t *)&v20);
      if (result)
      {
        v13 = *(_QWORD **)(result + 16);
        if (v13)
          break;
      }
    }
    *a3 = 0;
    v14 = v7 + 24;
    v7 = v6;
    if (v14 != v6)
    {
      v7 = v14;
      while (*(_OWORD *)v7 == 0 || *(_QWORD *)(v7 + 8) == -1)
      {
        v7 += 24;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v7 == v10)
      goto LABEL_33;
  }
  v16 = v13[1];
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
    goto LABEL_38;
  }
  result = MEMORY[0x19AEA534C](v16);
LABEL_38:
  ++*(_QWORD *)(v16 + 8);
  v18 = __ldxr((unsigned __int8 *)v16);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, (unsigned __int8 *)v16))
LABEL_42:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v16);
  *a3 = v13;
  if (v13[3] != (_QWORD)v20 || v13[4] != *((_QWORD *)&v20 + 1))
  {
    result = 463;
    __break(0xC471u);
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  WebCore::ScrollingStateTree *v20;
  WTF *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  _OWORD *v32;
  uint64_t v33;
  WebCore::ScrollingStateTree *v34;
  _QWORD *v35;
  WebCore::ScrollingStateTree *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::ScrollingStateTree *v40;
  WTF *v41;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = (unint64_t *)(v6 + 24 * v11);
      v15 = v14[1];
      if (v15 != -1)
      {
        v16 = *v14;
        if (*(_OWORD *)v14 == 0)
        {
          v19 = v6 + 24 * v11;
          v20 = *(WebCore::ScrollingStateTree **)(v19 + 16);
          *(_QWORD *)(v19 + 16) = 0;
          if (v20)
          {
            WebCore::ScrollingStateTree::~ScrollingStateTree(v20, v10);
            if (*(_DWORD *)v21)
            {
              *((_OWORD *)v21 + 3) = 0u;
              *((_OWORD *)v21 + 4) = 0u;
              *((_OWORD *)v21 + 1) = 0u;
              *((_OWORD *)v21 + 2) = 0u;
              *(_OWORD *)v21 = 0u;
            }
            else
            {
              WTF::fastFree(v21, v10);
            }
          }
        }
        else
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v22 = 0;
          v23 = (v16 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v16 - 1640531527) << 16) ^ ((unsigned __int16)v16 - 1640531527);
          v24 = (v16 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v16) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v16) + (v23 >> 11));
          v25 = (v15 >> 5) & 0x7FFF800 ^ ((v24 + (v24 >> 11) + (unsigned __int16)v15) << 16) ^ (v24 + (v24 >> 11) + (unsigned __int16)v15);
          v26 = (v15 >> 37) & 0x7FFF800 ^ ((v25 + WORD2(v15) + (v25 >> 11)) << 16) ^ (v25 + WORD2(v15) + (v25 >> 11));
          v27 = (v26 + (v26 >> 11)) ^ (8 * (v26 + (v26 >> 11)));
          v28 = (v27 + (v27 >> 5)) ^ (4 * (v27 + (v27 >> 5)));
          v29 = (v28 + (v28 >> 15)) ^ ((v28 + (v28 >> 15)) << 10);
          if (v29)
            v30 = v29;
          else
            v30 = 0x800000;
          do
          {
            v31 = v30 & v18;
            v32 = (_OWORD *)(v17 + 24 * (v30 & v18));
            v30 = ++v22 + (v30 & v18);
          }
          while (*v32 != 0);
          v33 = v17 + 24 * v31;
          v36 = *(WebCore::ScrollingStateTree **)(v33 + 16);
          v35 = (_QWORD *)(v33 + 16);
          v34 = v36;
          *v35 = 0;
          if (v36)
          {
            WebCore::ScrollingStateTree::~ScrollingStateTree(v34, v10);
            if (*(_DWORD *)v37)
            {
              *((_OWORD *)v37 + 3) = 0u;
              *((_OWORD *)v37 + 4) = 0u;
              *((_OWORD *)v37 + 1) = 0u;
              *((_OWORD *)v37 + 2) = 0u;
              *(_OWORD *)v37 = 0u;
            }
            else
            {
              WTF::fastFree(v37, v10);
            }
          }
          *v32 = *(_OWORD *)v14;
          v38 = v6 + 24 * v11;
          v39 = *(_QWORD *)(v38 + 16);
          *(_QWORD *)(v38 + 16) = 0;
          *v35 = v39;
          v40 = *(WebCore::ScrollingStateTree **)(v38 + 16);
          *(_QWORD *)(v38 + 16) = 0;
          if (v40)
          {
            WebCore::ScrollingStateTree::~ScrollingStateTree(v40, v10);
            if (*(_DWORD *)v41)
            {
              *((_OWORD *)v41 + 3) = 0u;
              *((_OWORD *)v41 + 4) = 0u;
              *((_OWORD *)v41 + 1) = 0u;
              *((_OWORD *)v41 + 2) = 0u;
              *(_OWORD *)v41 = 0u;
            }
            else
            {
              WTF::fastFree(v41, v10);
            }
          }
          if (v14 == a3)
            v12 = v32;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v16;

  if (!a1)
    return 0;
  v3 = *(_DWORD *)(a1 - 8);
  v4 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                          - 1640531527);
  v5 = (a2 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(a2) + (v4 >> 11)) << 16) ^ (v4 + WORD2(a2) + (v4 >> 11));
  v6 = (a3 >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)a3 + (v5 >> 11)) << 16) ^ (v5
                                                                                               + (unsigned __int16)a3
                                                                                               + (v5 >> 11));
  v7 = (a3 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(a3) + (v6 >> 11)) << 16) ^ (v6 + WORD2(a3) + (v6 >> 11));
  v8 = (v7 + (v7 >> 11)) ^ (8 * (v7 + (v7 >> 11)));
  v9 = (v8 + (v8 >> 5)) ^ (4 * (v8 + (v8 >> 5)));
  v10 = (v9 + (v9 >> 15)) ^ ((v9 + (v9 >> 15)) << 10);
  if (!v10)
    v10 = 0x800000;
  v11 = v3 & v10;
  v12 = (uint64_t *)(a1 + 24 * (v3 & v10));
  v13 = *v12;
  v14 = v12[1];
  if (*v12 != a2 || v14 != a3)
  {
    v16 = 1;
    do
    {
      v12 = (uint64_t *)(v13 | v14);
      if (!(v13 | v14))
        break;
      v11 = (v11 + v16) & v3;
      v12 = (uint64_t *)(a1 + 24 * v11);
      v13 = *v12;
      v14 = v12[1];
      ++v16;
    }
    while (*v12 != a2 || v14 != a3);
  }
  return v12;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AsyncScrollingCoordinator::stateTreeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,WebCore::AsyncScrollingCoordinator::stateTreeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_1,WebCore::AsyncScrollingCoordinator::stateTreeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ScrollingStateTree,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>><WebCore::ScrollingStateTree>,WTF::HashTableTraits>> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AsyncScrollingCoordinator::stateTreeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,WebCore::AsyncScrollingCoordinator::stateTreeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_1,WebCore::AsyncScrollingCoordinator::stateTreeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ScrollingStateTree,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>><WebCore::ScrollingStateTree>,WTF::HashTableTraits>> const&>(__int128 ***a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v20;
  __int128 v21;

  v2 = *(_QWORD *)(a2 + 16);
  v21 = ***a1;
  if (!(_QWORD)v21)
    return 0;
  v4 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v2 + 40), (uint64_t *)&v21);
  if (!v4)
    return 0;
  v6 = (_QWORD *)v4[2];
  if (!v6)
    return 0;
  v7 = v6[1];
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_8:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (v6[3] != (_QWORD)v21 || v6[4] != *((_QWORD *)&v21 + 1))
  {
    __break(0xC471u);
    JUMPOUT(0x19609AEC8);
  }
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v6[1];
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_22:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v20 = *(_QWORD *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    v17 = v20 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v12);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
    {
      if (v15)
        return v11;
      goto LABEL_30;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v12);
  if (v15)
    return v11;
LABEL_30:
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!v17)
    WTF::fastFree((WTF *)v12, v5);
  return v11;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AsyncScrollingCoordinator::stateTreeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,WebCore::AsyncScrollingCoordinator::stateTreeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_1,WebCore::AsyncScrollingCoordinator::stateTreeForNodeID(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ScrollingStateTree,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>><WebCore::ScrollingStateTree>,WTF::HashTableTraits>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v29;
  __int128 v30;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = v2 + 24 * v3;
    if (*(_DWORD *)(v2 - 12))
    {
      v5 = *a2;
      if ((_DWORD)v3)
      {
        v6 = 24 * v3;
        v5 = *a2;
        while (*(_OWORD *)v5 == 0 || *(_QWORD *)(v5 + 8) == -1)
        {
          v5 += 24;
          v6 -= 24;
          if (!v6)
          {
            v5 = v4;
            break;
          }
        }
      }
      if (v2)
        goto LABEL_13;
      goto LABEL_17;
    }
    v5 = v2 + 24 * v3;
  }
  else
  {
    v5 = 0;
    LODWORD(v3) = 0;
  }
  v4 = v2 + 24 * v3;
  if (v2)
  {
LABEL_13:
    v8 = v2 + 24 * *(unsigned int *)(v2 - 4);
    goto LABEL_18;
  }
LABEL_17:
  v8 = 0;
LABEL_18:
  if (v8 == v5)
    return 0;
  v9 = *a1;
  while (1)
  {
    v10 = *(_QWORD *)(v5 + 16);
    v30 = *(_OWORD *)*(_QWORD *)(v9 + 8);
    if ((_QWORD)v30)
    {
      v11 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v10 + 40), (uint64_t *)&v30);
      if (v11)
      {
        v13 = (_QWORD *)v11[2];
        if (v13)
          break;
      }
    }
    v14 = v5 + 24;
    v5 = v4;
    if (v14 != v4)
    {
      v5 = v14;
      while (*(_OWORD *)v5 == 0 || *(_QWORD *)(v5 + 8) == -1)
      {
        v5 += 24;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
    v16 = 0;
    if (v5 == v8)
      return v16;
  }
  v17 = v13[1];
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](v17);
LABEL_39:
  ++*(_QWORD *)(v17 + 8);
  v19 = __ldxr((unsigned __int8 *)v17);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_43;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
LABEL_43:
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
  if (v13[3] != (_QWORD)v30 || v13[4] != *((_QWORD *)&v30 + 1))
  {
    __break(0xC471u);
    JUMPOUT(0x19609B140);
  }
  v16 = *(_QWORD *)(v5 + 16);
  v21 = v13[1];
  if (__ldaxr((unsigned __int8 *)v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v21))
  {
    goto LABEL_53;
  }
  MEMORY[0x19AEA534C](v21);
LABEL_53:
  v23 = *(_QWORD *)(v21 + 8);
  v24 = v23 - 1;
  *(_QWORD *)(v21 + 8) = v23 - 1;
  if (v23 == 1)
  {
    v29 = *(_QWORD *)(v21 + 16);
    v25 = *(_QWORD *)(v21 + 24);
    *(_QWORD *)(v21 + 24) = 0;
    v26 = v29 != 0;
  }
  else
  {
    v25 = 0;
    v26 = 1;
  }
  v27 = __ldxr((unsigned __int8 *)v21);
  if (v27 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v21))
    {
      if (v24)
        return v16;
      goto LABEL_61;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v21);
  if (v24)
    return v16;
LABEL_61:
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (!v26)
    WTF::fastFree((WTF *)v21, v12);
  return v16;
}

unsigned __int8 *WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>::ref(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  int v3;

  v1 = result;
  if (__ldaxr(result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](result);
    goto LABEL_4;
  }
  if (__stxr(1u, result))
    goto LABEL_3;
LABEL_4:
  ++*((_QWORD *)v1 + 1);
  v3 = __ldxr(v1);
  if (v3 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, v1))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AsyncScrollingCoordinator::reconcileScrollingState(WebCore::LocalFrameView &,WebCore::FloatPoint const&,std::variant<std::optional<WebCore::FloatPoint>,std::optional<WebCore::FloatRect>> const&,WebCore::ScrollType,WebCore::ViewportRectStability,WebCore::ScrollingLayerPositionAction)::$_0,WebCore::AsyncScrollingCoordinator::reconcileScrollingState(WebCore::LocalFrameView &,WebCore::FloatPoint const&,std::variant<std::optional<WebCore::FloatPoint>,std::optional<WebCore::FloatRect>> const&,WebCore::ScrollType,WebCore::ViewportRectStability,WebCore::ScrollingLayerPositionAction)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::optional<WebCore::FloatPoint>,std::optional<WebCore::FloatRect>> const&>(WebCore::LocalFrameView ***a1, uint64_t a2)
{
  WebCore::LocalFrameView *v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  unint64_t v7;

  if (*(_BYTE *)(a2 + 8))
  {
    v2 = **a1;
    v3 = COERCE_FLOAT(*(_QWORD *)a2) * 64.0;
    v4 = 0x7FFFFFFFLL;
    v5 = 0x80000000;
    if (v3 > -2147483650.0)
      v5 = (int)v3;
    if (v3 < 2147483650.0)
      v4 = v5;
    v6 = COERCE_FLOAT(HIDWORD(*(_QWORD *)a2)) * 64.0;
    if (v6 >= 2147483650.0)
    {
      v7 = 0x7FFFFFFF00000000;
    }
    else if (v6 <= -2147483650.0)
    {
      v7 = 0x8000000000000000;
    }
    else
    {
      v7 = (unint64_t)(int)v6 << 32;
    }
    WebCore::LocalFrameView::setBaseLayoutViewportOrigin(v2, v7 | v4, 0);
  }
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AsyncScrollingCoordinator::reconcileScrollingState(WebCore::LocalFrameView &,WebCore::FloatPoint const&,std::variant<std::optional<WebCore::FloatPoint>,std::optional<WebCore::FloatRect>> const&,WebCore::ScrollType,WebCore::ViewportRectStability,WebCore::ScrollingLayerPositionAction)::$_0,WebCore::AsyncScrollingCoordinator::reconcileScrollingState(WebCore::LocalFrameView &,WebCore::FloatPoint const&,std::variant<std::optional<WebCore::FloatPoint>,std::optional<WebCore::FloatRect>> const&,WebCore::ScrollType,WebCore::ViewportRectStability,WebCore::ScrollingLayerPositionAction)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::optional<WebCore::FloatPoint>,std::optional<WebCore::FloatRect>> const&>(uint64_t a1, __n128 *a2)
{
  unsigned __int8 v2;
  __n128 *v3;
  __n128 result;

  v2 = a2[1].n128_u8[0];
  if (v2)
  {
    v3 = *(__n128 **)(*(_QWORD *)a1 + 8);
    result = *a2;
    *v3 = *a2;
    v3[1].n128_u8[0] = v2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::forEach<WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)::$_0>(WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)::$_0 const&)::{lambda(std::monostate const&)#1},void WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::forEach<WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)::$_0>(WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)::$_0 const&)::{lambda(WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>> const&)#1},void WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::forEach<WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)::$_0>(WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)::$_0 const&)::{lambda(WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>> const&>(WTF::StringImpl ***a1, WTF::StringImpl **a2)
{
  return WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)const::$_0::operator()<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const,WTF::UniqueRef<WebCore::ScrollingStateTree> const>(**a1, a2, a2 + 2);
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::forEach<WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)::$_0>(WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)::$_0 const&)::{lambda(std::monostate const&)#1},void WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::forEach<WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)::$_0>(WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)::$_0 const&)::{lambda(WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>> const&)#1},void WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::forEach<WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)::$_0>(WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)::$_0 const&)::{lambda(WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>> const&>(WTF::StringImpl *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a2;
  if (!*a2)
  {
    v5 = 0;
    LODWORD(v3) = 0;
LABEL_14:
    v4 = v2 + 24 * v3;
    goto LABEL_15;
  }
  v3 = *(unsigned int *)(v2 - 4);
  v4 = v2 + 24 * v3;
  if (!*(_DWORD *)(v2 - 12))
  {
    v5 = v2 + 24 * v3;
    goto LABEL_14;
  }
  v5 = *a2;
  if ((_DWORD)v3)
  {
    v6 = 24 * v3;
    v5 = *a2;
    while (*(_OWORD *)v5 == 0 || *(_QWORD *)(v5 + 8) == -1)
    {
      v5 += 24;
      v6 -= 24;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_15:
  if (v2)
    v8 = v2 + 24 * *(unsigned int *)(v2 - 4);
  else
    v8 = 0;
  if (v8 != v5)
  {
    v9 = *(_QWORD *)result;
    do
    {
      result = WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)const::$_0::operator()<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const,WTF::UniqueRef<WebCore::ScrollingStateTree> const>(*(WTF::StringImpl **)(v9 + 8), (WTF::StringImpl **)v5, (WTF::StringImpl **)(v5 + 16));
      v10 = v5 + 24;
      v5 = v4;
      if (v10 != v4)
      {
        v5 = v10;
        while (*(_OWORD *)v5 == 0 || *(_QWORD *)(v5 + 8) == -1)
        {
          v5 += 24;
          if (v5 == v4)
          {
            v5 = v4;
            break;
          }
        }
      }
    }
    while (v5 != v8);
  }
  return result;
}

WTF::StringImpl *WebCore::AsyncScrollingCoordinator::scrollingStateTreeAsText(WTF::OptionSet<WebCore::ScrollingStateTreeAsTextBehavior>)const::$_0::operator()<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const,WTF::UniqueRef<WebCore::ScrollingStateTree> const>(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v3;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  BOOL v23;
  WebCore::Document *v24;
  uint64_t v25;
  void *v26;
  WTF *v27;
  WTF *v28;
  WTF *v30;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  WTF *v60;
  WTF *v62;
  WTF *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66[2];
  WTF *v67[2];
  unint64_t v68;
  char v69;

  v3 = *((_QWORD *)*a3 + 7);
  if (!v3)
    return result;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_6:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v11 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_15;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_15:
  v13 = *(_QWORD *)(v11 + 8);
  v14 = v13 - 1;
  *(_QWORD *)(v11 + 8) = v13 - 1;
  if (v13 == 1)
  {
    v54 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    v16 = v54 != 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  v17 = __ldxr((unsigned __int8 *)v11);
  if (v17 != 1)
  {
    __clrex();
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      goto LABEL_27;
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
    goto LABEL_22;
  if (v14)
    goto LABEL_27;
LABEL_23:
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!v16)
    WTF::fastFree((WTF *)v11, a2);
LABEL_27:
  if (!*(_BYTE *)(v7 + 72))
    goto LABEL_79;
  v18 = *((_QWORD *)*a3 + 7);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if (__ldaxr((unsigned __int8 *)v19))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v19))
    {
      goto LABEL_33;
    }
    MEMORY[0x19AEA534C](v19);
LABEL_33:
    ++*(_QWORD *)(v19 + 8);
    v21 = __ldxr((unsigned __int8 *)v19);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v19))
        goto LABEL_38;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
  }
LABEL_38:
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 160);
  if (v22)
    v23 = *(_BYTE *)(v22 + 144) == 0;
  else
    v23 = 0;
  if (v23
    && (v24 = *(WebCore::Document **)(v22 + 296)) != 0
    && (v25 = *((_QWORD *)v24 + 243)) != 0
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 24) + 8) + 40) + 8) + 3405))
  {
    WebCore::Document::eventTrackingRegions(v24, (uint64_t)v66);
  }
  else
  {
    *(_OWORD *)v66 = 0u;
    *(_OWORD *)v67 = 0u;
  }
  if (!WebCore::operator==(v18 + 776, (uint64_t)v66))
  {
    WebCore::EventTrackingRegions::operator=(v18 + 776, (uint64_t)v66);
    v56 = *(_QWORD *)(v18 + 40);
    if ((v56 & 0x800000) == 0)
    {
      *(_QWORD *)(v18 + 40) = v56 | 0x800000;
      WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v18 + 48), 1);
    }
  }
  if (v67[1])
  {
    v64 = v67[1];
    v57 = *((unsigned int *)v67[1] - 1);
    if ((_DWORD)v57)
    {
      v58 = (uint64_t *)((char *)v67[1] + 24);
      do
      {
        if (*((unsigned __int8 *)v58 - 24) != 254)
        {
          v59 = *v58;
          *v58 = 0;
          if (v59)
          {
            v60 = *(WTF **)(v59 + 144);
            if ((WTF *)(v59 + 160) != v60 && v60 != 0)
            {
              *(_QWORD *)(v59 + 144) = 0;
              *(_DWORD *)(v59 + 152) = 0;
              WTF::fastFree(v60, v26);
            }
            v62 = *(WTF **)v59;
            if (v59 + 16 != *(_QWORD *)v59 && v62 != 0)
            {
              *(_QWORD *)v59 = 0;
              *(_DWORD *)(v59 + 8) = 0;
              WTF::fastFree(v62, v26);
            }
            WTF::fastFree((WTF *)v59, v26);
          }
        }
        v58 += 4;
        --v57;
      }
      while (v57);
    }
    WTF::fastFree((WTF *)((char *)v64 - 16), v26);
  }
  v27 = v67[0];
  v67[0] = 0;
  if (v27)
  {
    v28 = (WTF *)*((_QWORD *)v27 + 18);
    if ((WTF *)((char *)v27 + 160) != v28 && v28 != 0)
    {
      *((_QWORD *)v27 + 18) = 0;
      *((_DWORD *)v27 + 38) = 0;
      WTF::fastFree(v28, v26);
    }
    v30 = *(WTF **)v27;
    if ((WTF *)((char *)v27 + 16) != *(WTF **)v27 && v30 != 0)
    {
      *(_QWORD *)v27 = 0;
      *((_DWORD *)v27 + 2) = 0;
      WTF::fastFree(v30, v26);
    }
    WTF::fastFree(v27, v26);
  }
  if (v18)
  {
    v32 = *(_QWORD *)(v18 + 8);
    if (__ldaxr((unsigned __int8 *)v32))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v32))
    {
      goto LABEL_67;
    }
    MEMORY[0x19AEA534C](v32);
LABEL_67:
    v34 = *(_QWORD *)(v32 + 8);
    v35 = v34 - 1;
    *(_QWORD *)(v32 + 8) = v34 - 1;
    if (v34 == 1)
    {
      v55 = *(_QWORD *)(v32 + 16);
      v36 = *(_QWORD *)(v32 + 24);
      *(_QWORD *)(v32 + 24) = 0;
      v37 = v55 != 0;
    }
    else
    {
      v36 = 0;
      v37 = 1;
    }
    v38 = __ldxr((unsigned __int8 *)v32);
    if (v38 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v32))
      {
        if (v35)
          goto LABEL_79;
LABEL_75:
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        if (!v37)
          WTF::fastFree((WTF *)v32, v26);
        goto LABEL_79;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v32);
    if (v35)
      goto LABEL_79;
    goto LABEL_75;
  }
LABEL_79:
  v39 = *(unsigned int *)(v7 + 56);
  if ((_DWORD)v39 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_149;
  }
  v66[0] = (WTF::StringImpl *)&v68;
  if (((unsigned int (*)(WTF::StringImpl **, uint64_t))off_1E3403CC0[v39])(v66, v7 + 32) < 2)
    goto LABEL_99;
  v40 = *((_QWORD *)v6 + 1);
  v41 = (unint64_t)*a2;
  v66[0] = a2[1];
  v69 = 45;
  v68 = v41;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((unint64_t *)v66, &v69, &v68, &v65);
  if (!v65)
  {
LABEL_150:
    __break(0xC471u);
    JUMPOUT(0x19609B9DCLL);
  }
  v42 = *((_DWORD *)v65 + 1);
  if (v42 < 0 || __OFADD__(v42, 23))
  {
LABEL_149:
    v66[0] = 0;
    goto LABEL_150;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((v42 + 23), (*((_DWORD *)v65 + 4) >> 2) & 1, (int8x16_t *)"Tree-for-root-frameID: ", 0x17u, (uint64_t)v65, v66);
  v44 = v66[0];
  if (!v66[0])
    goto LABEL_150;
  if (*(_DWORD *)(v40 + 16) || *(_QWORD *)(v40 + 8))
  {
    if ((*((_BYTE *)v66[0] + 16) & 4) != 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
  }
  else
  {
    *(_DWORD *)v66[0] += 2;
    v45 = *(WTF::StringImpl **)v40;
    *(_QWORD *)v40 = v44;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v43);
      else
        *(_DWORD *)v45 -= 2;
    }
    v46 = (int)v66[0];
    if (v66[0])
      v46 = *((_DWORD *)v66[0] + 1);
    *(_DWORD *)(v40 + 16) = v46;
  }
  v47 = v66[0];
  v66[0] = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v43);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = v65;
  v65 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v43);
    else
      *(_DWORD *)v48 -= 2;
  }
LABEL_99:
  v49 = *a3;
  v50 = *((_QWORD *)v6 + 1);
  WebCore::ScrollingStateTree::scrollingStateTreeAsText(v49, (void *)**((unsigned __int8 **)v6 + 2), v66);
  if (*(_DWORD *)(v50 + 16) || *(_QWORD *)(v50 + 8))
  {
    if (v66[0] && (*((_BYTE *)v66[0] + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
    goto LABEL_109;
  }
  v52 = v66[0];
  if (v66[0])
    *(_DWORD *)v66[0] += 2;
  v53 = *(WTF::StringImpl **)v50;
  *(_QWORD *)v50 = v52;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::destroy(v53, v51);
      v52 = v66[0];
      if (!v66[0])
        goto LABEL_108;
      goto LABEL_107;
    }
    *(_DWORD *)v53 -= 2;
  }
  if (v52)
LABEL_107:
    LODWORD(v52) = *((_DWORD *)v52 + 1);
LABEL_108:
  *(_DWORD *)(v50 + 16) = (_DWORD)v52;
LABEL_109:
  result = v66[0];
  v66[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v51);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::size(void)::{lambda(std::monostate const&)#1},WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::size(void)::{lambda(WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>> const&)#1},WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::size(void)::{lambda(WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::size(void)::{lambda(std::monostate const&)#1},WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::size(void)::{lambda(WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>> const&)#1},WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::size(void)::{lambda(WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::size(void)::{lambda(std::monostate const&)#1},WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::size(void)::{lambda(WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>> const&)#1},WTF::SmallMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>::size(void)::{lambda(WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>> const&>(uint64_t a1, _QWORD *a2)
{
  if (*a2)
    return *(unsigned int *)(*a2 - 12);
  else
    return 0;
}

char *WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&>(uint64_t a1, unint64_t a2)
{
  char *result;

  result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 12))++) = *(_QWORD *)result;
  return result;
}

uint64_t WTF::Mapper<WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::SizedIteratorRange<WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WebCore::LayoutUnit,WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LayoutUnit>>,WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>>(WTF::SizedIteratorRange<WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WebCore::LayoutUnit,WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LayoutUnit>>,WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>> const&)::{lambda(WebCore::SnapOffset<WebCore::LayoutUnit>&&)#1},WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WebCore::LayoutUnit,WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LayoutUnit>>,WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>> const&,void>::map(uint64_t result, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  char v14;

  v3 = result;
  v4 = **a2;
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 12);
    if ((_DWORD)v5)
    {
      if (v5 >= 0x6666667)
      {
LABEL_19:
        __break(0xC471u);
        JUMPOUT(0x19609BBB0);
      }
      v6 = 40 * v5;
      result = WTF::fastMalloc((WTF *)(40 * v5));
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v3 = result;
    }
  }
  v7 = a2[1];
  v8 = a2[3];
  if (v7 != v8)
  {
    v9 = a2[2];
    do
    {
      v14 = *((_BYTE *)v7 + 24);
      v13 = *(_OWORD *)(v7 + 1);
      v10 = *((unsigned int *)v7 + 11);
      if ((_DWORD)v10)
      {
        if (v10 >> 29)
          goto LABEL_19;
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        result = (uint64_t)memcpy(v11, (const void *)v7[4], 8 * *((unsigned int *)v7 + 11));
      }
      else
      {
        v11 = 0;
      }
      v12 = *(_QWORD *)v3 + 40 * *(unsigned int *)(v3 + 12);
      *(_OWORD *)v12 = v13;
      *(_BYTE *)(v12 + 16) = v14;
      *(_QWORD *)(v12 + 24) = v11;
      *(int32x2_t *)(v12 + 32) = vdup_n_s32(v10);
      ++*(_DWORD *)(v3 + 12);
      while (1)
      {
        v7 += 6;
        if (v7 == v9)
          break;
        if ((*(_DWORD *)v7 - 0x7FFFFFFF) > 1)
          goto LABEL_15;
      }
      v7 = v9;
LABEL_15:
      ;
    }
    while (v7 != v8);
  }
  return result;
}

_QWORD *WebCore::convertOffsetInfo<WebCore::LayoutUnit,WebCore::LayoutRect,float,WebCore::FloatRect>(WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect> const&,float)::{lambda(WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}::operator()(_QWORD *result, uint64_t *a2, float a3)
{
  uint64_t v3;
  uint64_t *v4;
  int v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  double v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  float v20;
  float *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;

  *result = 0;
  result[1] = 0;
  v24 = result;
  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    if (v3 >= 0x6666667)
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x19609BD60);
    }
    v4 = a2;
    v6 = 40 * v3;
    result = (_QWORD *)WTF::fastMalloc((WTF *)(40 * v3));
    *((_DWORD *)v24 + 2) = (v6 & 0xFFFFFFF8) / 0x28;
    v23 = result;
    *v24 = result;
    if (*((_DWORD *)v4 + 3))
    {
      v7 = 0;
      v8 = a3;
      v9 = 36;
      v22 = v4;
      do
      {
        v10 = *v4;
        v11 = *(_DWORD *)(*v4 + v9 - 36);
        v12 = (double)v11 * 0.015625;
        if (v12 < 0.0)
          v13 = round((v12 + (double)-v11) * v8) / v8 - (double)-v11;
        else
          v13 = round(v12 * v8) / v8;
        v14 = *(_BYTE *)(v10 + v9 - 32);
        v15 = *(_BYTE *)(v10 + v9 - 31);
        v16 = *(_QWORD *)(v10 + v9 - 28);
        v17 = *(_BYTE *)(v10 + v9 - 20);
        v18 = *(unsigned int *)(v10 + v9);
        if ((_DWORD)v18)
        {
          if (v18 >> 29)
            goto LABEL_15;
          v19 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
          result = memcpy(v19, *(const void **)(v10 + v9 - 12), 8 * *(unsigned int *)(v10 + v9));
        }
        else
        {
          v19 = 0;
        }
        v20 = v13;
        v4 = v22;
        v21 = (float *)((char *)v23 + v9);
        *(v21 - 9) = v20;
        *((_BYTE *)v21 - 32) = v14;
        *((_BYTE *)v21 - 31) = v15;
        *(_QWORD *)(v21 - 7) = v16;
        *((_BYTE *)v21 - 20) = v17;
        *(_QWORD *)(v21 - 3) = v19;
        *(int32x2_t *)(v21 - 1) = vdup_n_s32(v18);
        *((_DWORD *)v24 + 3) = ++v7;
        v9 += 40;
      }
      while (v7 < *((unsigned int *)v22 + 3));
    }
  }
  return result;
}

uint64_t WebCore::searchForPotentialSnapPoints<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>,WebCore::LayoutUnit>(uint64_t result, unint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v13;
  unint64_t v14;
  WTF *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  char v26;
  int v27;
  _BOOL4 v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  char *v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  int v45;
  _BOOL4 v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  BOOL v50;
  int v53;
  float v54;
  int v55;
  signed int v56;
  uint64_t v57;
  int v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  int *v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned __int8 v77;
  uint64_t v78;

  v8 = result;
  if (a3 == 1)
    v9 = 24;
  else
    v9 = 8;
  if (a3 == 1)
    v10 = (char *)(a2 + 24);
  else
    v10 = (char *)(a2 + 8);
  v11 = *((unsigned int *)v10 + 3);
  if (!(_DWORD)v11)
  {
    LOBYTE(v24) = 0;
    v25 = 0;
    v26 = 0;
    LOBYTE(v27) = 0;
    LOBYTE(v28) = 0;
    v68 = 0;
    v74 = 0;
    v15 = 0;
    goto LABEL_117;
  }
  if (v11 >= 0x6666667)
  {
LABEL_129:
    __break(0xC471u);
    JUMPOUT(0x19609C244);
  }
  v13 = a4;
  v14 = a2;
  result = WTF::fastMalloc((WTF *)(40 * v11));
  v15 = (WTF *)result;
  v16 = *((unsigned int *)v10 + 3);
  if ((_DWORD)v16)
  {
    v17 = (unsigned int *)(*(_QWORD *)(v14 + v9) + 36);
    v18 = result + 24;
    v19 = 40 * v16;
    do
    {
      v20 = *(_OWORD *)(v17 - 9);
      *(_BYTE *)(v18 - 8) = *((_BYTE *)v17 - 20);
      *(_OWORD *)(v18 - 24) = v20;
      v21 = *v17;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_DWORD *)(v18 + 12) = v21;
      if ((_DWORD)v21)
      {
        if (v21 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19609C24CLL);
        }
        v22 = (void *)WTF::fastMalloc((WTF *)(8 * v21));
        *(_DWORD *)(v18 + 8) = v21;
        *(_QWORD *)v18 = v22;
        result = (uint64_t)memcpy(v22, *(const void **)(v17 - 3), 8 * *v17);
      }
      v17 += 10;
      v18 += 40;
      v19 -= 40;
    }
    while (v19);
  }
  v23 = 0;
  LOBYTE(v24) = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v77 = 0;
  v78 = 0;
  v29 = *(unsigned int *)(v14 + 52);
  v30 = *(_QWORD *)(v14 + 40);
  v31 = a5 + v13;
  v32 = __OFADD__(a5, v13);
  if ((int)a6 >= a5)
    v33 = a5;
  else
    v33 = a6;
  if (a5 <= (int)a6)
    v34 = a6;
  else
    v34 = a5;
  v76 = a6;
  v74 = 0;
  v75 = a6;
  v71 = a6;
  do
  {
    if ((v24 & 1) != 0)
    {
LABEL_26:
      LOBYTE(v24) = 1;
      goto LABEL_45;
    }
    if (*((_BYTE *)v15 + 40 * v23 + 5))
    {
      v35 = (char *)v15 + 40 * v23;
      v36 = *((unsigned int *)v35 + 9);
      if ((_DWORD)v36)
      {
        v37 = (unint64_t *)*((_QWORD *)v35 + 3);
        v24 = 8 * v36;
        if (a3)
        {
          v38 = v24 - 8;
          if (v32)
          {
            while (*v37 < v29)
            {
              v57 = v30 + 16 * *v37;
              v58 = *(_DWORD *)(v57 + 4);
              LODWORD(v57) = *(_DWORD *)(v57 + 12);
              v41 = __OFADD__(v58, (_DWORD)v57);
              v59 = v58 + v57;
              if (v41)
                v59 = (v58 >> 31) + 0x7FFFFFFF;
              v60 = v58 <= a5 && (int)((a5 >> 31) + 0x7FFFFFFF) <= v59;
              LOBYTE(v24) = v60;
              if (!v60)
              {
                ++v37;
                v61 = v38;
                v38 -= 8;
                if (v61)
                  continue;
              }
              goto LABEL_45;
            }
          }
          else
          {
            while (*v37 < v29)
            {
              v39 = v30 + 16 * *v37;
              v40 = *(_DWORD *)(v39 + 4);
              LODWORD(v39) = *(_DWORD *)(v39 + 12);
              v41 = __OFADD__(v40, (_DWORD)v39);
              v42 = v40 + v39;
              if (v41)
                v42 = (v40 >> 31) + 0x7FFFFFFF;
              v43 = v40 <= a5 && v31 <= v42;
              LOBYTE(v24) = v43;
              if (!v43)
              {
                ++v37;
                v44 = v38;
                v38 -= 8;
                if (v44)
                  continue;
              }
              goto LABEL_45;
            }
          }
        }
        else
        {
          while (*v37 < v29)
          {
            v62 = (int *)(v30 + 16 * *v37);
            v63 = *v62;
            LODWORD(v62) = v62[2];
            v41 = __OFADD__(v63, (_DWORD)v62);
            v64 = v63 + (_DWORD)v62;
            if (v41)
              v64 = (v63 >> 31) + 0x7FFFFFFF;
            if (v63 <= a5)
            {
              v65 = v31;
              if (v32)
                v65 = (a5 >> 31) + 0x7FFFFFFF;
              if (v65 <= v64)
                goto LABEL_26;
            }
            ++v37;
            v24 -= 8;
            if (!v24)
              goto LABEL_45;
          }
        }
        goto LABEL_129;
      }
    }
    LOBYTE(v24) = 0;
LABEL_45:
    v45 = *((_DWORD *)v15 + 10 * v23);
    if (v45 == a5)
    {
      v76 = a5 >> 8;
      LODWORD(v78) = 1;
      v75 = v23;
      v77 = a5;
    }
    else
    {
      v46 = v45 > a5;
      if (v45 > a5)
        v47 = v23;
      else
        v47 = v7;
      if (v45 > a5)
        v48 = *((_DWORD *)v15 + 10 * v23);
      else
        v48 = v27;
      if (v45 > a5)
        v49 = v45 >> 8;
      else
        v49 = v6;
      if (v28)
      {
        v46 = 1;
        v47 = v7;
        v48 = v27;
        v49 = v6;
      }
      if (v45 < a5)
      {
        v7 = v7;
      }
      else
      {
        v28 = v46;
        v7 = v47;
      }
      if (v45 < a5)
      {
        v26 = 1;
        a2 = v23;
      }
      else
      {
        v27 = v48;
        v6 = v49;
        a2 = a2;
      }
      if (v45 >= a5)
      {
        result = result;
      }
      else
      {
        v25 = *((_DWORD *)v15 + 10 * v23);
        result = v45 >> 8;
      }
    }
    if (*((_BYTE *)v15 + 40 * v23 + 4))
      v50 = (a6 & 0xFF00000000) == 0;
    else
      v50 = 1;
    if (!v50 && v33 < v45 && v34 > v45)
    {
      if (!HIDWORD(v78))
        goto LABEL_88;
      v53 = v45 - a6;
      if (__OFSUB__(v45, (_DWORD)a6))
        v53 = (v45 >> 31) + 0x7FFFFFFF;
      v54 = fabsf((float)v53 * 0.015625);
      v55 = HIDWORD(v74) | ((_DWORD)v74 << 8);
      v41 = __OFSUB__(v55, (_DWORD)a6);
      v56 = v55 - a6;
      if (v41)
        v56 = (v74 >> 23) + 0x7FFFFFFF;
      if (v54 >= fabsf((float)v56 * 0.015625))
      {
        HIDWORD(v78) = 1;
      }
      else
      {
LABEL_88:
        LODWORD(v74) = v45 >> 8;
        HIDWORD(v74) = *((_DWORD *)v15 + 10 * v23);
        HIDWORD(v78) = 1;
        v71 = v23;
      }
    }
    ++v23;
  }
  while (v23 != v11);
  if ((_DWORD)v78)
  {
    v66 = v77 | ((unint64_t)(v76 & 0xFFFFFF) << 8) | (v75 << 32);
    v26 = 1;
    v67 = v66;
    LOBYTE(v28) = 1;
    a4 = v71;
    v68 = BYTE4(v78);
    goto LABEL_118;
  }
  a4 = v71;
  v68 = BYTE4(v78);
LABEL_117:
  v66 = v25 | ((result & 0xFFFFFF) << 8) | (a2 << 32);
  v67 = v27 | ((*(_QWORD *)&v6 & 0xFFFFFFLL) << 8) | (v7 << 32);
LABEL_118:
  *(_QWORD *)v8 = v66;
  *(_BYTE *)(v8 + 8) = v26;
  *(_QWORD *)(v8 + 12) = v67;
  *(_BYTE *)(v8 + 20) = v28;
  *(_QWORD *)(v8 + 24) = HIDWORD(v74) | ((unint64_t)v74 << 8) | (a4 << 32);
  *(_BYTE *)(v8 + 32) = v68;
  *(_BYTE *)(v8 + 36) = v24;
  if ((_DWORD)v11)
  {
    v69 = 40 * v11;
    v70 = (char *)v15 + 24;
    do
    {
      result = *(_QWORD *)v70;
      if (*(_QWORD *)v70)
      {
        *(_QWORD *)v70 = 0;
        *((_DWORD *)v70 + 2) = 0;
        result = WTF::fastFree((WTF *)result, (void *)a2);
      }
      v70 += 40;
      v69 -= 40;
    }
    while (v69);
  }
  if (v15)
    return WTF::fastFree(v15, (void *)a2);
  return result;
}

uint64_t WebCore::findCompatibleSnapArea<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>,WebCore::LayoutUnit,WebCore::LayoutPoint,WebCore::LayoutSize>(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  WTF *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char *v41;
  WTF *v42;
  int v43;
  int v45;
  int v48;
  _BOOL4 v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;

  if (a3)
    v6 = a5;
  else
    v6 = a4;
  v56 = v6;
  if (a3)
    v7 = a6;
  else
    v7 = HIDWORD(a6);
  v8 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v8)
  {
    v10 = 0;
    if (a3)
      v11 = a4;
    else
      v11 = a5;
    v12 = 8;
    if (!a3)
      v12 = 24;
    v52 = v12;
    v53 = a2;
    if (a3)
      v13 = a1 + 8;
    else
      v13 = a1 + 24;
    v50 = v7 + v11;
    v51 = v7;
    v14 = __OFADD__(v7, v11);
    v48 = (v7 >> 31) + 0x7FFFFFFF;
    v49 = v14;
    v55 = a3;
    v54 = v13;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v10);
      if (v15 >= *(unsigned int *)(a1 + 52))
      {
        __break(0xC471u);
        JUMPOUT(0x19609C4C8);
      }
      v16 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 16 * v15);
      v17 = *v16;
      v18 = v16[1];
      v19 = HIDWORD(v17);
      v20 = HIDWORD(v18);
      if (a3)
      {
        if (__OFADD__(HIDWORD(v17), HIDWORD(v18)))
          v21 = (HIDWORD(v17) >> 31) + 0x7FFFFFFF;
        else
          v21 = HIDWORD(v17) + HIDWORD(v18);
        v22 = __OFADD__((_DWORD)v17, (_DWORD)v18);
        v23 = v17 + v18;
        if (v22)
          v23 = (v17 >> 31) + 0x7FFFFFFF;
        v24 = v17 | ((unint64_t)v23 << 32);
      }
      else
      {
        v22 = __OFADD__((_DWORD)v17, (_DWORD)v18);
        v25 = v17 + v18;
        if (v22)
          v21 = (v17 >> 31) + 0x7FFFFFFF;
        else
          v21 = v25;
        LODWORD(v26) = HIDWORD(v17) + v20;
        if (__OFADD__(HIDWORD(v17), (_DWORD)v20))
          v26 = ((HIDWORD(v17) >> 31) + 0x7FFFFFFF);
        else
          v26 = v26;
        v27 = v19 | (v26 << 32);
        LODWORD(v19) = v17;
        v24 = v27;
      }
      v28 = *(unsigned int *)(v13 + 12);
      if ((_DWORD)v28)
      {
        if (v28 >= 0x6666667)
        {
LABEL_69:
          __break(0xC471u);
          JUMPOUT(0x19609C4C0);
        }
        v29 = 40 * v28;
        v30 = WTF::fastMalloc((WTF *)(40 * v28));
        v32 = (WTF *)v30;
        v33 = *(unsigned int *)(v13 + 12);
        if ((_DWORD)v33)
        {
          v34 = (unsigned int *)(*(_QWORD *)(a1 + v52) + 36);
          v35 = v30 + 24;
          v36 = 40 * v33;
          do
          {
            v37 = *(_OWORD *)(v34 - 9);
            *(_BYTE *)(v35 - 8) = *((_BYTE *)v34 - 20);
            *(_OWORD *)(v35 - 24) = v37;
            v38 = *v34;
            *(_QWORD *)v35 = 0;
            *(_QWORD *)(v35 + 8) = 0;
            *(_DWORD *)(v35 + 12) = v38;
            if ((_DWORD)v38)
            {
              if (v38 >> 29)
                goto LABEL_69;
              v39 = (void *)WTF::fastMalloc((WTF *)(8 * v38));
              *(_DWORD *)(v35 + 8) = v38;
              *(_QWORD *)v35 = v39;
              memcpy(v39, *(const void **)(v34 - 3), 8 * *v34);
            }
            v34 += 10;
            v35 += 40;
            v36 -= 40;
          }
          while (v36);
        }
        v40 = 0;
        do
        {
          v41 = (char *)v32 + v40;
          v42 = *(WTF **)((char *)v32 + v40 + 24);
          if (v42)
          {
            *((_QWORD *)v41 + 3) = 0;
            *((_DWORD *)v41 + 8) = 0;
            WTF::fastFree(v42, v31);
          }
          v40 += 40;
        }
        while (v29 != v40);
        WTF::fastFree(v32, v31);
        a3 = v55;
        a2 = v53;
        v13 = v54;
      }
      else
      {
        v43 = v50;
        if (v49)
          v43 = v48;
        if (v43 < (int)v24 || v51 > SHIDWORD(v24))
          goto LABEL_64;
      }
      v45 = *(_DWORD *)a2 + v56;
      if (__OFADD__(*(_DWORD *)a2, v56))
        v45 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
      if (v45 > (int)v19 && *(_DWORD *)a2 < v21)
        return v10;
      v8 = *(unsigned int *)(a2 + 36);
LABEL_64:
      ++v10;
    }
    while (v10 < v8);
  }
  return -1;
}

uint64_t WebCore::searchForPotentialSnapPoints<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,float>(uint64_t result, char *a2, int a3, uint64_t a4, float a5, float a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  _BOOL4 v14;
  int v15;
  WTF *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  int v37;
  float v38;
  char *v39;
  unint64_t *v40;
  uint64_t v41;
  float v42;
  float v43;
  uint64_t v44;
  int v45;
  _BOOL4 v46;
  float v47;
  int v48;
  int v49;
  float v50;
  BOOL v51;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  float v57;
  char *v58;
  unint64_t *v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  int v63;
  _BOOL4 v64;
  float v65;
  int v66;
  int v67;
  float v68;
  BOOL v69;
  uint64_t v75;
  char *v76;

  v8 = 24;
  if (a3 == 1)
    v9 = 24;
  else
    v9 = 8;
  if (a3 == 1)
    v10 = a2 + 24;
  else
    v10 = a2 + 8;
  v11 = *((unsigned int *)v10 + 3);
  if (!(_DWORD)v11)
  {
    LOBYTE(v12) = 0;
    LOBYTE(v13) = 0;
    LOBYTE(v14) = 0;
    LOBYTE(v15) = 0;
    v16 = 0;
    v17 = 0.0;
    v18 = 0.0;
    v19 = 0.0;
LABEL_9:
    v20 = v17;
    v21 = v7;
    goto LABEL_10;
  }
  v75 = result;
  v76 = a2;
  if (v11 >= 0x6666667)
    goto LABEL_137;
  v23 = WTF::fastMalloc((WTF *)(40 * v11));
  v16 = (WTF *)v23;
  v24 = *((unsigned int *)v10 + 3);
  if ((_DWORD)v24)
  {
    v25 = (unsigned int *)(*(_QWORD *)&v76[v9] + 36);
    v26 = v23 + 24;
    v27 = 40 * v24;
    do
    {
      v28 = *(_OWORD *)(v25 - 9);
      *(_BYTE *)(v26 - 8) = *((_BYTE *)v25 - 20);
      *(_OWORD *)(v26 - 24) = v28;
      v29 = *v25;
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v26 + 8) = 0;
      *(_DWORD *)(v26 + 12) = v29;
      if ((_DWORD)v29)
      {
        if (v29 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19609C9ACLL);
        }
        v30 = (void *)WTF::fastMalloc((WTF *)(8 * v29));
        *(_DWORD *)(v26 + 8) = v29;
        *(_QWORD *)v26 = v30;
        memcpy(v30, *(const void **)(v25 - 3), 8 * *v25);
      }
      v25 += 10;
      v26 += 40;
      v27 -= 40;
    }
    while (v27);
  }
  v31 = *((unsigned int *)v76 + 13);
  v32 = *((_QWORD *)v76 + 5);
  v33 = a5 + a6;
  a2 = (char *)(a4 & 0xFF00000000);
  if (*(float *)&a4 >= a6)
    v34 = a6;
  else
    v34 = *(float *)&a4;
  if (*(float *)&a4 <= a6)
    v35 = a6;
  else
    v35 = *(float *)&a4;
  v13 = a3;
  if (a3)
  {
    v36 = 0;
    LOBYTE(v12) = 0;
    v13 = 0;
    v14 = 0;
    v37 = 0;
    v15 = 0;
    v17 = 0.0;
    v18 = 0.0;
    v20 = 0.0;
    v38 = 0.0;
    while (1)
    {
      if ((v12 & 1) != 0)
      {
        LOBYTE(v12) = 1;
      }
      else
      {
        LOBYTE(v12) = *((_BYTE *)v16 + 40 * v36 + 5);
        if ((_BYTE)v12)
        {
          v39 = (char *)v16 + 40 * v36;
          v12 = *((unsigned int *)v39 + 9);
          if ((_DWORD)v12)
          {
            v40 = (unint64_t *)*((_QWORD *)v39 + 3);
            v41 = 8 * v12 - 8;
            while (*v40 < v31)
            {
              v12 = v32 + 16 * *v40;
              v42 = *(float *)(v12 + 4);
              v43 = v42 + *(float *)(v12 + 12);
              LOBYTE(v12) = v42 <= a6;
              if (v43 < v33)
                LOBYTE(v12) = 0;
              if ((v12 & 1) == 0)
              {
                ++v40;
                v44 = v41;
                v41 -= 8;
                if (v44)
                  continue;
              }
              goto LABEL_38;
            }
LABEL_137:
            __break(0xC471u);
            JUMPOUT(0x19609C9A4);
          }
        }
      }
LABEL_38:
      v19 = *((float *)v16 + 10 * v36);
      if (v19 > a6)
        v45 = v36;
      else
        v45 = v8;
      v46 = v19 > a6;
      if (v19 > a6)
        v47 = *((float *)v16 + 10 * v36);
      else
        v47 = v18;
      if (v14)
      {
        v45 = v8;
        v46 = 1;
        v47 = v18;
      }
      if (v19 >= a6)
      {
        v48 = v7;
      }
      else
      {
        v45 = v8;
        v46 = v14;
        v47 = v18;
        v48 = v36;
      }
      if (v19 < a6)
        v49 = 1;
      else
        v49 = v13;
      if (v19 < a6)
        v50 = *((float *)v16 + 10 * v36);
      else
        v50 = v17;
      if (v19 == a6)
      {
        v21 = v36;
        v37 = 1;
        v20 = *((float *)v16 + 10 * v36);
      }
      else
      {
        v8 = v45;
        v14 = v46;
        v18 = v47;
        v7 = v48;
        v13 = v49;
        v17 = v50;
      }
      if (*((_BYTE *)v16 + 40 * v36 + 4))
        v51 = a2 == 0;
      else
        v51 = 1;
      if (v51 || v34 >= v19 || v35 <= v19)
        goto LABEL_73;
      if (v15 && vabds_f32(v19, *(float *)&a4) >= vabds_f32(v38, *(float *)&a4))
        break;
      v15 = 1;
      v6 = v36;
LABEL_74:
      ++v36;
      v38 = v19;
      if (v36 == v11)
        goto LABEL_132;
    }
    v15 = 1;
LABEL_73:
    v19 = v38;
    goto LABEL_74;
  }
  v56 = 0;
  LOBYTE(v12) = 0;
  v14 = 0;
  v37 = 0;
  v15 = 0;
  v17 = 0.0;
  v18 = 0.0;
  v20 = 0.0;
  v57 = 0.0;
  do
  {
    if ((v12 & 1) != 0)
    {
      LOBYTE(v12) = 1;
    }
    else
    {
      LOBYTE(v12) = *((_BYTE *)v16 + 40 * v56 + 5);
      if ((_BYTE)v12)
      {
        v58 = (char *)v16 + 40 * v56;
        v12 = *((unsigned int *)v58 + 9);
        if ((_DWORD)v12)
        {
          v59 = (unint64_t *)*((_QWORD *)v58 + 3);
          v60 = 8 * v12 - 8;
          do
          {
            if (*v59 >= v31)
              goto LABEL_137;
            v12 = v32 + 16 * *v59;
            v61 = *(float *)v12 + *(float *)(v12 + 8);
            LOBYTE(v12) = *(float *)v12 <= a6;
            if (v61 < v33)
              LOBYTE(v12) = 0;
            if ((v12 & 1) != 0)
              break;
            ++v59;
            v62 = v60;
            v60 -= 8;
          }
          while (v62);
        }
      }
    }
    v19 = *((float *)v16 + 10 * v56);
    if (v19 > a6)
      v63 = v56;
    else
      v63 = v8;
    v64 = v19 > a6;
    if (v19 > a6)
      v65 = *((float *)v16 + 10 * v56);
    else
      v65 = v18;
    if (v14)
    {
      v63 = v8;
      v64 = 1;
      v65 = v18;
    }
    if (v19 >= a6)
    {
      v66 = v7;
    }
    else
    {
      v63 = v8;
      v64 = v14;
      v65 = v18;
      v66 = v56;
    }
    if (v19 >= a6)
      v67 = v13;
    else
      v67 = 1;
    if (v19 >= a6)
      v68 = v17;
    else
      v68 = *((float *)v16 + 10 * v56);
    if (v19 == a6)
    {
      v21 = v56;
      v37 = 1;
      v20 = *((float *)v16 + 10 * v56);
    }
    else
    {
      v8 = v63;
    }
    if (v19 != a6)
    {
      v14 = v64;
      v18 = v65;
      v7 = v66;
      v13 = v67;
      v17 = v68;
    }
    if (*((_BYTE *)v16 + 40 * v56 + 4))
      v69 = a2 == 0;
    else
      v69 = 1;
    if (!v69 && v34 < v19 && v35 > v19)
    {
      if (!v15 || vabds_f32(v19, *(float *)&a4) < vabds_f32(v57, *(float *)&a4))
      {
        v15 = 1;
        v6 = v56;
        goto LABEL_131;
      }
      v15 = 1;
    }
    v19 = v57;
LABEL_131:
    ++v56;
    v57 = v19;
  }
  while (v56 != v11);
LABEL_132:
  if (!v37)
  {
    result = v75;
    goto LABEL_9;
  }
  LOBYTE(v13) = 1;
  v18 = v20;
  v8 = v21;
  LOBYTE(v14) = 1;
  result = v75;
LABEL_10:
  *(float *)result = v20;
  *(_DWORD *)(result + 4) = v21;
  *(_BYTE *)(result + 8) = v13;
  *(float *)(result + 12) = v18;
  *(_DWORD *)(result + 16) = v8;
  *(_BYTE *)(result + 20) = v14;
  *(float *)(result + 24) = v19;
  *(_DWORD *)(result + 28) = v6;
  *(_BYTE *)(result + 32) = v15;
  *(_BYTE *)(result + 36) = v12;
  if ((_DWORD)v11)
  {
    v54 = 40 * v11;
    v55 = (char *)v16 + 24;
    do
    {
      result = *(_QWORD *)v55;
      if (*(_QWORD *)v55)
      {
        *(_QWORD *)v55 = 0;
        *((_DWORD *)v55 + 2) = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      v55 += 40;
      v54 -= 40;
    }
    while (v54);
  }
  if (v16)
    return WTF::fastFree(v16, a2);
  return result;
}

uint64_t WebCore::findCompatibleSnapArea<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,float,WebCore::FloatPoint,WebCore::FloatSize>(uint64_t a1, uint64_t a2, int a3, float a4, float a5, float a6, float a7)
{
  float v7;
  unint64_t v9;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char *v37;
  WTF *v38;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;

  if (a3)
    v7 = a5;
  else
    v7 = a4;
  if (a3)
    a7 = a6;
  v9 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v9)
  {
    v13 = 0;
    if (a3)
    {
      v14 = 8;
    }
    else
    {
      a4 = a5;
      v14 = 24;
    }
    if (a3)
      v15 = a1 + 8;
    else
      v15 = a1 + 24;
    v16 = a4 + a7;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v13);
      if (v17 >= *(unsigned int *)(a1 + 52))
      {
LABEL_53:
        __break(0xC471u);
        JUMPOUT(0x19609CBC8);
      }
      v18 = (float *)(*(_QWORD *)(a1 + 40) + 16 * v17);
      v19 = *v18;
      v20 = v18[1];
      v21 = *v18 + v18[2];
      v22 = v20 + v18[3];
      if (a3)
        v23 = v18[1];
      else
        v23 = *v18;
      if (a3)
        v24 = v20 + v18[3];
      else
        v24 = *v18 + v18[2];
      v25 = *(unsigned int *)(v15 + 12);
      if ((_DWORD)v25)
      {
        if (v25 >= 0x6666667)
        {
          __break(0xC471u);
          JUMPOUT(0x19609CBD0);
        }
        v40 = 40 * v25;
        v41 = (WTF *)WTF::fastMalloc((WTF *)(40 * v25));
        v29 = *(unsigned int *)(v15 + 12);
        if ((_DWORD)v29)
        {
          v30 = (unsigned int *)(*(_QWORD *)(a1 + v14) + 36);
          v31 = (char *)v41 + 24;
          v32 = 40 * v29;
          do
          {
            v33 = *(_OWORD *)(v30 - 9);
            *(v31 - 8) = *((_BYTE *)v30 - 20);
            *(_OWORD *)(v31 - 24) = v33;
            v34 = *v30;
            *(_QWORD *)v31 = 0;
            *((_QWORD *)v31 + 1) = 0;
            *((_DWORD *)v31 + 3) = v34;
            if ((_DWORD)v34)
            {
              v42 = v32;
              if (v34 >> 29)
                goto LABEL_53;
              v35 = (void *)WTF::fastMalloc((WTF *)(8 * v34));
              *((_DWORD *)v31 + 2) = v34;
              *(_QWORD *)v31 = v35;
              memcpy(v35, *(const void **)(v30 - 3), 8 * *v30);
              v32 = v42;
            }
            v30 += 10;
            v31 += 40;
            v32 -= 40;
          }
          while (v32);
        }
        v36 = 0;
        do
        {
          v37 = (char *)v41 + v36;
          v38 = *(WTF **)((char *)v41 + v36 + 24);
          if (v38)
          {
            *((_QWORD *)v37 + 3) = 0;
            *((_DWORD *)v37 + 8) = 0;
            WTF::fastFree(v38, v28);
          }
          v36 += 40;
        }
        while (v40 != v36);
        WTF::fastFree(v41, v28);
      }
      else
      {
        if (!a3)
        {
          v21 = v22;
          v19 = v20;
        }
        if (v16 < v19 || a7 > v21)
          goto LABEL_35;
      }
      if ((float)(v7 + *(float *)a2) > v23 && *(float *)a2 < v24)
        return v13;
      v9 = *(unsigned int *)(a2 + 36);
LABEL_35:
      ++v13;
    }
    while (v13 < v9);
  }
  return -1;
}

double WebCore::ScrollingStateFrameHostingNode::create@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double result;

  v8 = WTF::fastMalloc((WTF *)0x90);
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v9 = 0;
  *(_OWORD *)(v9 + 8) = xmmword_19689B170;
  *(_QWORD *)(v9 + 24) = v8;
  *(_BYTE *)(v8 + 16) = 2;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = a1;
  ++*a1;
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_DWORD *)(v8 + 120) = 0;
  *(_QWORD *)v8 = off_1E3403E50;
  *(_QWORD *)(v8 + 8) = v9;
  *(_BYTE *)(v8 + 128) = 0;
  *(_BYTE *)(v8 + 136) = 0;
  *a4 = v8;
  return result;
}

_QWORD *WebCore::ScrollingStateFrameHostingNode::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v16;
  _QWORD *result;
  __int128 v18;
  uint64_t v19;

  v16 = WTF::fastMalloc((WTF *)0x90);
  v18 = *(_OWORD *)a5;
  v19 = *(_QWORD *)(a5 + 16);
  result = (_QWORD *)WebCore::ScrollingStateNode::ScrollingStateNode(v16, 2, a1, a2, a3, a4, &v18);
  *result = off_1E3403E50;
  result[16] = a6;
  result[17] = a7;
  *a8 = result;
  return result;
}

uint64_t WebCore::ScrollingStateNode::ScrollingStateNode(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7)
{
  uint64_t v14;
  __int128 v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t v35;

  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v14 = 0;
  *(_OWORD *)(v14 + 8) = xmmword_19689B170;
  *(_QWORD *)(v14 + 24) = a1;
  *(_QWORD *)a1 = off_1E3403ED0;
  *(_QWORD *)(a1 + 8) = v14;
  *(_BYTE *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a6;
  v15 = 0uLL;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v16 = *(uint64_t **)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a1 + 72) = v16;
  v17 = *(_DWORD *)(a5 + 8);
  *(_DWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a1 + 80) = v17;
  v18 = *(unsigned int *)(a5 + 12);
  *(_DWORD *)(a5 + 12) = 0;
  *(_DWORD *)(a1 + 84) = v18;
  if (*((_BYTE *)a7 + 16))
    v15 = *a7;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = v15;
  *(_DWORD *)(a1 + 120) = 3;
  if ((_DWORD)v18)
  {
    for (i = 8 * v18; i; i -= 8)
    {
      v20 = *v16;
      v21 = *(_QWORD *)(a1 + 8);
      if (__ldaxr((unsigned __int8 *)v21))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v21))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEA534C](v21);
LABEL_9:
      ++*(_QWORD *)(v21 + 8);
      v23 = __ldxr((unsigned __int8 *)v21);
      if (v23 != 1)
      {
        __clrex();
LABEL_13:
        WTF::Lock::unlockSlow((WTF::Lock *)v21);
        goto LABEL_14;
      }
      if (__stlxr(0, (unsigned __int8 *)v21))
        goto LABEL_13;
LABEL_14:
      v35 = a1;
      WTF::ThreadSafeWeakPtr<WebCore::ScrollingStateNode>::operator=<WebCore::ScrollingStateNode>((uint64_t *)(v20 + 56), &v35);
      v25 = v35;
      v35 = 0;
      if (!v25)
        goto LABEL_31;
      v26 = *(_QWORD *)(v25 + 8);
      if (__ldaxr((unsigned __int8 *)v26))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v26))
      {
        goto LABEL_19;
      }
      MEMORY[0x19AEA534C](v26);
LABEL_19:
      v28 = *(_QWORD *)(v26 + 8);
      v29 = v28 - 1;
      *(_QWORD *)(v26 + 8) = v28 - 1;
      if (v28 == 1)
      {
        v33 = *(_QWORD *)(v26 + 16);
        v30 = *(_QWORD *)(v26 + 24);
        *(_QWORD *)(v26 + 24) = 0;
        v31 = v33 != 0;
      }
      else
      {
        v30 = 0;
        v31 = 1;
      }
      v32 = __ldxr((unsigned __int8 *)v26);
      if (v32 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v26))
        {
          if (!v29)
            goto LABEL_27;
          goto LABEL_31;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v26);
      if (!v29)
      {
LABEL_27:
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        if (!v31)
          WTF::fastFree((WTF *)v26, v24);
      }
LABEL_31:
      ++v16;
    }
  }
  return a1;
}

uint64_t WebCore::ScrollingStateNode::ScrollingStateNode(uint64_t a1, char a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_19689B170;
  *(_QWORD *)(v10 + 24) = a1;
  *(_QWORD *)a1 = off_1E3403ED0;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a3;
  ++*a3;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  return a1;
}

uint64_t WebCore::ScrollingStateFrameHostingNode::dumpProperties(int a1, WTF::TextStream *a2, char a3)
{
  WTF::TextStream::operator<<();
  return WebCore::ScrollingStateNode::dumpProperties(a1, a2, a3);
}

uint64_t WebCore::ScrollingStateNode::dumpProperties(int a1, WTF::TextStream *this, char a3)
{
  uint64_t result;

  if ((a3 & 2) != 0)
  {
    WTF::TextStream::startGroup(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::operator<<();
    result = WTF::TextStream::endGroup(this);
  }
  if ((a3 & 1) != 0)
  {
    WTF::TextStream::startGroup(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::operator<<();
    return WTF::TextStream::endGroup(this);
  }
  return result;
}

void WebCore::ScrollingStateFrameScrollingNode::ScrollingStateFrameScrollingNode(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, uint64_t *a17, __int128 *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,_OWORD *a28,_WORD *a29,_WORD *a30,char a31,uint64_t a32,int a33,uint64_t a34,__int128 *a35,__int128 *a36,__int128 *a37,__int128 *a38,int a39,int a40,_BYTE *a41,int a42,char a43,char a44,char a45,char a46,char a47,int a48,int a49,int a50,int a51,int a52,int a53,int a54,int a55,uint64_t a56,int a57,int a58,char a59)
{
  _OWORD *v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;

  v59 = (_OWORD *)(a1 + 552);
  v76 = *a7;
  v77 = *((_QWORD *)a7 + 2);
  v74 = *(_OWORD *)a23;
  v75 = *(_QWORD *)(a23 + 16);
  v72 = *(_OWORD *)a24;
  v73 = *(_QWORD *)(a24 + 16);
  v71 = *(_QWORD *)(a25 + 16);
  v70 = *(_OWORD *)a25;
  v60 = *(_OWORD *)a26;
  v69 = *(_QWORD *)(a26 + 16);
  v68 = v60;
  WebCore::ScrollingStateScrollingNode::ScrollingStateScrollingNode(a1, a2 ^ 1, a3, a4, a5, a6, (uint64_t)&v76, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    &v74,
    &v72,
    &v70,
    &v68,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32);
  *(_QWORD *)v61 = off_1E3403E90;
  v62 = 0uLL;
  v63 = 0uLL;
  if (*((_BYTE *)a35 + 16))
    v63 = *a35;
  *(_OWORD *)(v61 + 536) = 0uLL;
  *v59 = v63;
  *(_DWORD *)(v61 + 568) = 3;
  if (*((_BYTE *)a36 + 16))
    v62 = *a36;
  v64 = 0uLL;
  *(_OWORD *)(v61 + 576) = 0u;
  *(_OWORD *)(v61 + 592) = v62;
  *(_DWORD *)(v61 + 608) = 3;
  v65 = 0uLL;
  if (*((_BYTE *)a37 + 16))
    v65 = *a37;
  *(_OWORD *)(v61 + 616) = 0uLL;
  v59[5] = v65;
  *(_DWORD *)(v61 + 648) = 3;
  if (*((_BYTE *)a38 + 16))
    v64 = *a38;
  *(_OWORD *)(v61 + 656) = 0u;
  *(_OWORD *)(v61 + 672) = v64;
  *(_DWORD *)(v61 + 688) = 3;
  *(_DWORD *)(v61 + 728) = 0;
  *(_OWORD *)(v61 + 696) = 0u;
  *(_OWORD *)(v61 + 712) = 0u;
  *(_OWORD *)(v61 + 736) = 0u;
  *(_OWORD *)(v61 + 752) = 0u;
  *(_DWORD *)(v61 + 768) = 0;
  *(_OWORD *)(v61 + 776) = *(_OWORD *)a34;
  v66 = *(_QWORD *)(a34 + 16);
  *(_QWORD *)(a34 + 16) = 0;
  *(_QWORD *)(v61 + 792) = v66;
  *(_QWORD *)(v61 + 800) = 0;
  v67 = *(_QWORD *)(a34 + 24);
  *(_QWORD *)(a34 + 24) = 0;
  *(_QWORD *)(v61 + 800) = v67;
  *(_DWORD *)(v61 + 808) = a48;
  *(_DWORD *)(v61 + 812) = a49;
  *(_DWORD *)(v61 + 816) = a50;
  *(_DWORD *)(v61 + 820) = a51;
  *(_DWORD *)(v61 + 824) = a52;
  *(_DWORD *)(v61 + 828) = a53;
  *(_DWORD *)(v61 + 832) = a54;
  *(_DWORD *)(v61 + 836) = a55;
  *(_QWORD *)(v61 + 840) = a56;
  *(_DWORD *)(v61 + 848) = a57;
  *(_DWORD *)(v61 + 852) = a33;
  *(_DWORD *)(v61 + 856) = a42;
  *(_DWORD *)(v61 + 860) = a39;
  *(_DWORD *)(v61 + 864) = a40;
  *(_BYTE *)(v61 + 868) = *a41;
  *(_BYTE *)(v61 + 869) = a43;
  *(_BYTE *)(v61 + 870) = a44;
  *(_BYTE *)(v61 + 871) = a45;
  *(_BYTE *)(v61 + 872) = a46;
  *(_BYTE *)(v61 + 873) = a47;
  *(_BYTE *)(v61 + 874) = a59;
}

{
  WebCore::ScrollingStateFrameScrollingNode::ScrollingStateFrameScrollingNode(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48,
    a49,
    a50,
    a51,
    a52,
    a53,
    a54,
    a55,
    a56,
    a57,
    0,
    a59);
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::ScrollingStateFrameScrollingNode(uint64_t a1, _DWORD *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_19689B170;
  *(_QWORD *)(v10 + 24) = a1;
  *(_BYTE *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  ++*a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 252) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 0;
  *(_WORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 153) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 420) = 0u;
  *(_DWORD *)(a1 + 436) = 16842752;
  *(_WORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 452) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_WORD *)(a1 + 468) = 256;
  *(_BYTE *)(a1 + 470) = 0;
  *(_BYTE *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 492) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 500) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_WORD *)(a1 + 532) = 0;
  *(_BYTE *)(a1 + 534) = 0;
  ++a2[16];
  *(_QWORD *)a1 = off_1E3403E90;
  *(_QWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_DWORD *)(a1 + 768) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_BYTE *)(a1 + 840) = 0;
  *(_DWORD *)(a1 + 852) = 1065353216;
  *(_DWORD *)(a1 + 871) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  return a1;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setFrameScaleFactor(uint64_t this, float a2)
{
  uint64_t v2;

  if (*(float *)(this + 852) != a2)
  {
    *(float *)(this + 852) = a2;
    v2 = *(_QWORD *)(this + 40);
    if ((v2 & 0x400000) == 0)
    {
      *(_QWORD *)(this + 40) = v2 | 0x400000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setEventTrackingRegions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = a1 + 776;
  result = WebCore::operator==(a1 + 776, a2);
  if ((result & 1) == 0)
  {
    result = WebCore::EventTrackingRegions::operator=(v4, a2);
    v6 = *(_QWORD *)(a1 + 40);
    if ((v6 & 0x800000) == 0)
    {
      *(_QWORD *)(a1 + 40) = v6 | 0x800000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(a1 + 48), 1);
    }
  }
  return result;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setScrollBehaviorForFixedElements(uint64_t result, int a2)
{
  uint64_t v2;

  if ((((*(_BYTE *)(result + 868) == 0) ^ a2) & 1) == 0)
  {
    *(_BYTE *)(result + 868) = a2;
    v2 = *(_QWORD *)(result + 40);
    if ((v2 & 0x40000000) == 0)
    {
      *(_QWORD *)(result + 40) = v2 | 0x40000000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(result + 48), 1);
    }
  }
  return result;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setLayoutViewport(uint64_t this, const WebCore::FloatRect *a2)
{
  BOOL v2;
  BOOL v3;
  uint64_t v4;

  v2 = *(float *)(this + 808) == *(float *)a2 && *(float *)(this + 812) == *((float *)a2 + 1);
  if (!v2
    || (*(float *)(this + 816) == *((float *)a2 + 2) ? (v3 = *(float *)(this + 820) == *((float *)a2 + 3)) : (v3 = 0),
        !v3))
  {
    *(_OWORD *)(this + 808) = *(_OWORD *)a2;
    v4 = *(_QWORD *)(this + 40);
    if ((v4 & 0x2000000000) == 0)
    {
      *(_QWORD *)(this + 40) = v4 | 0x2000000000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setMinLayoutViewportOrigin(uint64_t this, const WebCore::FloatPoint *a2)
{
  uint64_t v3;

  if (*(float *)(this + 824) != *(float *)a2 || *(float *)(this + 828) != *((float *)a2 + 1))
  {
    *(_QWORD *)(this + 824) = *(_QWORD *)a2;
    v3 = *(_QWORD *)(this + 40);
    if ((v3 & 0x4000000000) == 0)
    {
      *(_QWORD *)(this + 40) = v3 | 0x4000000000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setMaxLayoutViewportOrigin(uint64_t this, const WebCore::FloatPoint *a2)
{
  uint64_t v3;

  if (*(float *)(this + 832) != *(float *)a2 || *(float *)(this + 836) != *((float *)a2 + 1))
  {
    *(_QWORD *)(this + 832) = *(_QWORD *)a2;
    v3 = *(_QWORD *)(this + 40);
    if ((v3 & 0x8000000000) == 0)
    {
      *(_QWORD *)(this + 40) = v3 | 0x8000000000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setOverrideVisualViewportSize(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v4;

  if (!a3 || !*(_BYTE *)(result + 848))
  {
    if ((a3 != 0) == (*(_BYTE *)(result + 848) != 0))
      return result;
    goto LABEL_10;
  }
  if (*(float *)(result + 840) != *(float *)&a2 || *(float *)(result + 844) != *((float *)&a2 + 1))
  {
LABEL_10:
    *(_QWORD *)(result + 840) = a2;
    *(_BYTE *)(result + 848) = a3;
    v4 = *(_QWORD *)(result + 40);
    if ((v4 & 0x10000000000) == 0)
    {
      *(_QWORD *)(result + 40) = v4 | 0x10000000000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(result + 48), 1);
    }
  }
  return result;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setHeaderHeight(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(_DWORD *)(this + 860) != a2)
  {
    *(_DWORD *)(this + 860) = a2;
    v2 = *(_QWORD *)(this + 40);
    if ((v2 & 0x10000000) == 0)
    {
      *(_QWORD *)(this + 40) = v2 | 0x10000000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setFooterHeight(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(_DWORD *)(this + 864) != a2)
  {
    *(_DWORD *)(this + 864) = a2;
    v2 = *(_QWORD *)(this + 40);
    if ((v2 & 0x20000000) == 0)
    {
      *(_QWORD *)(this + 40) = v2 | 0x20000000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setTopContentInset(uint64_t this, float a2)
{
  uint64_t v2;

  if (*(float *)(this + 856) != a2)
  {
    *(float *)(this + 856) = a2;
    v2 = *(_QWORD *)(this + 40);
    if ((v2 & 0x80000000) == 0)
    {
      *(_QWORD *)(this + 40) = v2 | 0x80000000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setVisualViewportIsSmallerThanLayoutViewport(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(this + 870) != a2)
  {
    *(_BYTE *)(this + 870) = a2;
    v2 = *(_QWORD *)(this + 40);
    if ((v2 & 0x200000000) == 0)
    {
      *(_QWORD *)(this + 40) = v2 | 0x200000000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setFixedElementsLayoutRelativeToFrame(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(this + 869) != a2)
  {
    *(_BYTE *)(this + 869) = a2;
    v2 = *(_QWORD *)(this + 40);
    if ((v2 & 0x100000000) == 0)
    {
      *(_QWORD *)(this + 40) = v2 | 0x100000000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setAsyncFrameOrOverflowScrollingEnabled(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(this + 871) != a2)
  {
    *(_BYTE *)(this + 871) = a2;
    v2 = *(_QWORD *)(this + 40);
    if ((v2 & 0x400000000) == 0)
    {
      *(_QWORD *)(this + 40) = v2 | 0x400000000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setWheelEventGesturesBecomeNonBlocking(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(this + 872) != a2)
  {
    *(_BYTE *)(this + 872) = a2;
    v2 = *(_QWORD *)(this + 40);
    if ((v2 & 0x800000000) == 0)
    {
      *(_QWORD *)(this + 40) = v2 | 0x800000000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setScrollingPerformanceTestingEnabled(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(this + 873) != a2)
  {
    *(_BYTE *)(this + 873) = a2;
    v2 = *(_QWORD *)(this + 40);
    if ((v2 & 0x1000000000) == 0)
    {
      *(_QWORD *)(this + 40) = v2 | 0x1000000000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setOverlayScrollbarsEnabled(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(this + 874) != a2)
  {
    *(_BYTE *)(this + 874) = a2;
    v2 = *(_QWORD *)(this + 40);
    if ((v2 & 0x20000000000) == 0)
    {
      *(_QWORD *)(this + 40) = v2 | 0x20000000000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v17;
  uint64_t result;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  WTF *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  void *v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  WTF *v43;
  WTF *v44;
  __int128 v45;
  WTF *v46;
  WTF *v47[2];
  _BYTE v48[16];

  WTF::TextStream::operator<<();
  WebCore::ScrollingStateScrollingNode::dumpProperties(a1, a2, a3);
  if ((a3 & 1) != 0)
  {
    *(_OWORD *)v47 = *(_OWORD *)(a1 + 552);
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::operator<<();
    *(WTF **)&v45 = v47[1];
    WTF::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
    if (*(_QWORD *)(a1 + 592))
    {
      v6 = *(WTF **)(a1 + 600);
      v47[0] = *(WTF **)(a1 + 592);
      v47[1] = v6;
      WTF::TextStream::startGroup(a2);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      *(WTF **)&v45 = v47[1];
      WTF::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::endGroup(a2);
    }
    if (*(_QWORD *)(a1 + 632))
    {
      v7 = *(WTF **)(a1 + 640);
      v47[0] = *(WTF **)(a1 + 632);
      v47[1] = v7;
      WTF::TextStream::startGroup(a2);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      *(WTF **)&v45 = v47[1];
      WTF::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::endGroup(a2);
    }
    if (*(_QWORD *)(a1 + 672))
    {
      v8 = *(WTF **)(a1 + 680);
      v47[0] = *(WTF **)(a1 + 672);
      v47[1] = v8;
      WTF::TextStream::startGroup(a2);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      *(WTF **)&v45 = v47[1];
      WTF::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::endGroup(a2);
    }
    if (*(_QWORD *)(a1 + 712))
    {
      v9 = *(WTF **)(a1 + 720);
      v47[0] = *(WTF **)(a1 + 712);
      v47[1] = v9;
      WTF::TextStream::startGroup(a2);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      *(WTF **)&v45 = v47[1];
      WTF::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::endGroup(a2);
    }
    if (*(_QWORD *)(a1 + 752))
    {
      v10 = *(WTF **)(a1 + 760);
      v47[0] = *(WTF **)(a1 + 752);
      v47[1] = v10;
      WTF::TextStream::startGroup(a2);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      *(WTF **)&v45 = v47[1];
      WTF::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::endGroup(a2);
    }
  }
  if (*(float *)(a1 + 852) != 1.0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(float *)(a1 + 856) != 0.0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(_DWORD *)(a1 + 860))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(_DWORD *)(a1 + 864))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v11 = WTF::TextStream::operator<<();
  WebCore::operator<<(v11);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  *(double *)v47 = *(float *)(a1 + 824);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  *(double *)&v45 = *(float *)(a1 + 828);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  *(double *)v47 = *(float *)(a1 + 832);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  *(double *)&v45 = *(float *)(a1 + 836);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  if (*(_BYTE *)(a1 + 848))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    *(double *)v47 = *(float *)(a1 + 840);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    *(double *)&v45 = *(float *)(a1 + 844);
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(int *)(a1 + 784) >= 1 && *(int *)(a1 + 788) >= 1)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WebCore::Region::rects(a1 + 776, (uint64_t)v47);
    v13 = v47[0];
    if (HIDWORD(v47[1]))
    {
      v14 = 16 * HIDWORD(v47[1]);
      do
      {
        v15 = *(_OWORD *)v13;
        v13 = (WTF *)((char *)v13 + 16);
        v45 = v15;
        WTF::TextStream::operator<<();
        WTF::TextStream::writeIndent(a2);
        WebCore::operator<<((uint64_t)a2);
        v14 -= 16;
      }
      while (v14);
      v13 = v47[0];
    }
    if (v48 != (_BYTE *)v13 && v13 != 0)
    {
      v47[0] = 0;
      LODWORD(v47[1]) = 0;
      WTF::fastFree(v13, v12);
    }
    WTF::TextStream::endGroup(a2);
  }
  v17 = *(_QWORD *)(a1 + 800);
  if (v17)
  {
    v19 = (WTF *)*(unsigned int *)(v17 - 12);
    if ((_DWORD)v19)
    {
      v20 = *(unsigned int *)(v17 - 4);
      if ((_DWORD)v20)
      {
        v21 = 32 * v20;
        v22 = *(_BYTE **)(a1 + 800);
        while (*v22 >= 0xFEu)
        {
          v22 += 32;
          v21 -= 32;
          if (!v21)
          {
            v44 = (WTF *)WTF::fastMalloc(v19);
            goto LABEL_54;
          }
        }
      }
      else
      {
        v22 = *(_BYTE **)(a1 + 800);
      }
      v23 = (_BYTE *)(v17 + 32 * v20);
      v44 = (WTF *)WTF::fastMalloc(v19);
      if (v23 == v22)
      {
LABEL_54:
        v24 = 0;
      }
      else
      {
        v24 = 0;
        LOBYTE(v25) = *v22;
LABEL_49:
        *((_BYTE *)v44 + v24++) = v25;
        while (1)
        {
          v22 += 32;
          if (v22 == v23)
            break;
          v25 = *v22;
          if (v25 < 0xFE)
          {
            if (v22 != v23)
              goto LABEL_49;
            break;
          }
        }
      }
      v26 = 126 - 2 * __clz(v24);
      if (v24)
        v27 = v26;
      else
        v27 = 0;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::EventTrackingRegionsEventType *,false>((uint64_t)v44, (unsigned __int8 *)v44 + v24, v27, 1);
      if (v24)
      {
        v29 = v44;
        while (1)
        {
          v30 = *(_QWORD *)(a1 + 800);
          if (!v30)
            goto LABEL_66;
          v31 = *(_DWORD *)(v30 - 8);
          v32 = *(unsigned __int8 *)v29;
          v33 = 9 * ((~(v32 << 15) + v32) ^ ((~(v32 << 15) + v32) >> 10));
          v34 = (v33 ^ (v33 >> 6)) + ~((v33 ^ (v33 >> 6)) << 11);
          v35 = (v34 ^ HIWORD(v34)) & v31;
          v36 = *(unsigned __int8 *)(v30 + 32 * v35);
          if (v36 != v32)
            break;
LABEL_65:
          WebCore::Region::Region((uint64_t)&v45, (const WebCore::Region *)(v30 + 32 * v35 + 8));
LABEL_67:
          WTF::TextStream::startGroup(a2);
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          WebCore::Region::rects((uint64_t)&v45, (uint64_t)v47);
          v39 = v47[0];
          if (HIDWORD(v47[1]))
          {
            v40 = 16 * HIDWORD(v47[1]);
            do
            {
              v39 = (WTF *)((char *)v39 + 16);
              WTF::TextStream::operator<<();
              WTF::TextStream::writeIndent(a2);
              WebCore::operator<<((uint64_t)a2);
              v40 -= 16;
            }
            while (v40);
            v39 = v47[0];
          }
          if (v48 != (_BYTE *)v39 && v39)
          {
            v47[0] = 0;
            LODWORD(v47[1]) = 0;
            WTF::fastFree(v39, v38);
          }
          WTF::TextStream::endGroup(a2);
          v41 = v46;
          v46 = 0;
          if (v41)
          {
            v42 = (WTF *)*((_QWORD *)v41 + 18);
            if ((WTF *)((char *)v41 + 160) != v42 && v42)
            {
              *((_QWORD *)v41 + 18) = 0;
              *((_DWORD *)v41 + 38) = 0;
              WTF::fastFree(v42, v28);
            }
            v43 = *(WTF **)v41;
            if ((WTF *)((char *)v41 + 16) != *(WTF **)v41 && v43)
            {
              *(_QWORD *)v41 = 0;
              *((_DWORD *)v41 + 2) = 0;
              WTF::fastFree(v43, v28);
            }
            WTF::fastFree(v41, v28);
          }
          v29 = (WTF *)((char *)v29 + 1);
          if (v29 == (WTF *)((char *)v44 + v24))
            goto LABEL_83;
        }
        v37 = 1;
        while (v36 != 255)
        {
          v35 = ((_DWORD)v35 + v37) & v31;
          v36 = *(unsigned __int8 *)(v30 + 32 * v35);
          ++v37;
          if (v36 == v32)
            goto LABEL_65;
        }
LABEL_66:
        v45 = 0uLL;
        v46 = 0;
        goto LABEL_67;
      }
LABEL_83:
      WTF::fastFree(v44, v28);
    }
  }
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  result = WTF::TextStream::endGroup(a2);
  if (*(_BYTE *)(a1 + 870))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    result = WTF::TextStream::endGroup(a2);
  }
  if (*(_BYTE *)(a1 + 869))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    return WTF::TextStream::endGroup(a2);
  }
  return result;
}

WTF *WebCore::ScrollingStateNode::setChildren(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  WTF *result;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v4)
    WTF::VectorTypeOperations<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>::destruct(*(_QWORD *)(a1 + 72), (uint64_t *)(*(_QWORD *)(a1 + 72) + 8 * v4));
  result = *(WTF **)(a1 + 72);
  if (result)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v6 = *(uint64_t **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 72) = v6;
  v7 = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 80) = v7;
  v8 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 84) = v8;
  if ((_DWORD)v8)
  {
    for (i = 8 * v8; i; i -= 8)
    {
      v10 = *v6;
      v11 = *(_QWORD *)(a1 + 8);
      if (__ldaxr((unsigned __int8 *)v11))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v11))
      {
        goto LABEL_11;
      }
      MEMORY[0x19AEA534C](v11);
LABEL_11:
      ++*(_QWORD *)(v11 + 8);
      v13 = __ldxr((unsigned __int8 *)v11);
      if (v13 != 1)
      {
        __clrex();
LABEL_15:
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
        goto LABEL_16;
      }
      if (__stlxr(0, (unsigned __int8 *)v11))
        goto LABEL_15;
LABEL_16:
      v24 = a1;
      result = (WTF *)WTF::ThreadSafeWeakPtr<WebCore::ScrollingStateNode>::operator=<WebCore::ScrollingStateNode>((uint64_t *)(v10 + 56), &v24);
      v15 = v24;
      v24 = 0;
      if (!v15)
        goto LABEL_33;
      v16 = *(_QWORD *)(v15 + 8);
      if (__ldaxr((unsigned __int8 *)v16))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v16))
      {
        goto LABEL_21;
      }
      result = (WTF *)MEMORY[0x19AEA534C](v16);
LABEL_21:
      v18 = *(_QWORD *)(v16 + 8);
      v19 = v18 - 1;
      *(_QWORD *)(v16 + 8) = v18 - 1;
      if (v18 == 1)
      {
        v23 = *(_QWORD *)(v16 + 16);
        v20 = *(_QWORD *)(v16 + 24);
        *(_QWORD *)(v16 + 24) = 0;
        v21 = v23 != 0;
      }
      else
      {
        v20 = 0;
        v21 = 1;
      }
      v22 = __ldxr((unsigned __int8 *)v16);
      if (v22 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v16))
        {
          if (!v19)
            goto LABEL_29;
          goto LABEL_33;
        }
      }
      else
      {
        __clrex();
      }
      result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v16);
      if (!v19)
      {
LABEL_29:
        if (v20)
          result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        if (!v21)
          result = (WTF *)WTF::fastFree((WTF *)v16, v14);
      }
LABEL_33:
      ++v6;
    }
  }
  return result;
}

uint64_t WebCore::ScrollingStateNode::applicableProperties(WebCore::ScrollingStateNode *this)
{
  return 0x100000000001;
}

uint64_t *WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  v5 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_7:
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 - 1;
  *(_QWORD *)(v5 + 8) = v7 - 1;
  if (v7 == 1)
  {
    v12 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v10 = v12 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = __ldxr((unsigned __int8 *)v5);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
    {
      if (v8)
        return a1;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (v8)
    return a1;
LABEL_15:
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (!v10)
    WTF::fastFree((WTF *)v5, a2);
  return a1;
}

uint64_t *WebCore::ScrollingStateNode::appendChild(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t *result;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = a2;
  v4 = *a2;
  if (a1)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
LABEL_5:
      ++*(_QWORD *)(v5 + 8);
      v7 = __ldxr((unsigned __int8 *)v5);
      if (v7 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v5))
          goto LABEL_10;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v5);
    goto LABEL_5;
  }
LABEL_10:
  v23 = a1;
  WTF::ThreadSafeWeakPtr<WebCore::ScrollingStateNode>::operator=<WebCore::ScrollingStateNode>((uint64_t *)(v4 + 56), &v23);
  v9 = v23;
  v23 = 0;
  if (!v9)
    goto LABEL_19;
  v10 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
LABEL_13:
    MEMORY[0x19AEA534C](v10);
    goto LABEL_14;
  }
  if (__stxr(1u, (unsigned __int8 *)v10))
    goto LABEL_13;
LABEL_14:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v22 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v22 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v10))
      goto LABEL_18;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_18:
  if (!v13)
  {
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (!v15)
      WTF::fastFree((WTF *)v10, v8);
  }
LABEL_19:
  result = (uint64_t *)(a1 + 72);
  v18 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v18 == *(_DWORD *)(a1 + 80))
  {
    result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v18 + 1, (unint64_t)v2);
    v2 = result;
    v18 = *(unsigned int *)(a1 + 84);
    v19 = (_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v18);
  }
  else
  {
    v19 = (_QWORD *)(*result + 8 * v18);
  }
  v20 = *v2;
  *v2 = 0;
  *v19 = v20;
  *(_DWORD *)(a1 + 84) = v18 + 1;
  v21 = *(_QWORD *)(a1 + 40);
  if ((v21 & 0x100000000000) == 0)
  {
    *(_QWORD *)(a1 + 40) = v21 | 0x100000000000;
    return (uint64_t *)WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(a1 + 48), 1);
  }
  return result;
}

void *WebCore::ScrollingStateNode::insertChild(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  void *result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a2;
  v6 = *a2;
  if (a1)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
LABEL_5:
      ++*(_QWORD *)(v7 + 8);
      v9 = __ldxr((unsigned __int8 *)v7);
      if (v9 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
          goto LABEL_10;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v7);
    goto LABEL_5;
  }
LABEL_10:
  v29 = a1;
  WTF::ThreadSafeWeakPtr<WebCore::ScrollingStateNode>::operator=<WebCore::ScrollingStateNode>((uint64_t *)(v6 + 56), &v29);
  v11 = v29;
  v29 = 0;
  if (!v11)
    goto LABEL_19;
  v12 = *(_QWORD *)(v11 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
LABEL_13:
    MEMORY[0x19AEA534C](v12);
    goto LABEL_14;
  }
  if (__stxr(1u, (unsigned __int8 *)v12))
    goto LABEL_13;
LABEL_14:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v26 = *(_QWORD *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    v17 = v26 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v12);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_18;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_18:
  if (!v15)
  {
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (!v17)
      WTF::fastFree((WTF *)v12, v10);
  }
LABEL_19:
  result = (void *)(a1 + 72);
  v21 = *(_DWORD *)(a1 + 80);
  v20 = *(unsigned int *)(a1 + 84);
  if (v20 < a3)
  {
    if ((_DWORD)v20 == v21)
    {
      result = WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>((uint64_t)result, (unint64_t)v4);
    }
    else
    {
      v27 = *(_QWORD *)(a1 + 72);
      v28 = *v4;
      *v4 = 0;
      *(_QWORD *)(v27 + 8 * v20) = v28;
      *(_DWORD *)(a1 + 84) = v20 + 1;
    }
  }
  else
  {
    if ((_DWORD)v20 == v21)
    {
      v4 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v20 + 1, (unint64_t)v4);
      v20 = *(unsigned int *)(a1 + 84);
    }
    v22 = *(_QWORD *)(a1 + 72);
    v23 = (_QWORD *)(v22 + 8 * a3);
    result = memmove(v23 + 1, v23, v22 + 8 * v20 - (_QWORD)v23);
    v24 = *v4;
    *v4 = 0;
    *v23 = v24;
    ++*(_DWORD *)(a1 + 84);
  }
  v25 = *(_QWORD *)(a1 + 40);
  if ((v25 & 0x100000000000) == 0)
  {
    *(_QWORD *)(a1 + 40) = v25 | 0x100000000000;
    return (void *)WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(a1 + 48), 1);
  }
  return result;
}

unsigned int *WebCore::ScrollingStateNode::removeChild(unsigned int *this, WebCore::ScrollingStateNode *a2)
{
  unint64_t v2;
  uint64_t v3;
  WebCore::ScrollingStateNode **v4;
  unint64_t v5;
  _BOOL4 v6;
  WebCore::ScrollingStateNode **v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  WebCore::ScrollingStateNode *v16;
  uint64_t v17;

  v2 = this[21];
  if (!(_DWORD)v2)
    return this;
  v3 = (uint64_t)this;
  v4 = (WebCore::ScrollingStateNode **)*((_QWORD *)this + 9);
  if (*v4 == a2)
  {
    v5 = 0;
    v6 = 1;
LABEL_4:
    v7 = &v4[v5];
    *v7 = 0;
    v8 = *((_QWORD *)a2 + 1);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
LABEL_7:
      v10 = *(_QWORD *)(v8 + 8);
      v11 = v10 - 1;
      *(_QWORD *)(v8 + 8) = v10 - 1;
      if (v10 == 1)
      {
        v17 = *(_QWORD *)(v8 + 16);
        v12 = *(_QWORD *)(v8 + 24);
        *(_QWORD *)(v8 + 24) = 0;
        v13 = v17 != 0;
      }
      else
      {
        v12 = 0;
        v13 = 1;
      }
      v14 = __ldxr((unsigned __int8 *)v8);
      if (v14 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v8))
        {
LABEL_11:
          if (!v11)
          {
            if (v12)
              (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
            if (!v13)
              WTF::fastFree((WTF *)v8, a2);
          }
          this = (unsigned int *)memmove(v7, v7 + 1, *(_QWORD *)(v3 + 72) + 8 * *(unsigned int *)(v3 + 84) - (_QWORD)(v7 + 1));
          --*(_DWORD *)(v3 + 84);
          if (v6)
          {
            v15 = *(_QWORD *)(v3 + 40);
            if ((v15 & 0x100000000000) == 0)
            {
              *(_QWORD *)(v3 + 40) = v15 | 0x100000000000;
              return (unsigned int *)WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v3 + 48), 1);
            }
          }
          return this;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v8);
    goto LABEL_7;
  }
  v5 = 0;
  while (v2 - 1 != v5)
  {
    v16 = v4[++v5];
    if (v16 == a2)
    {
      v6 = v5 < v2;
      goto LABEL_4;
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateNode::dump(uint64_t a1, WTF::TextStream *a2, unsigned __int8 a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  WTF::TextStream::operator<<();
  WTF::TextStream::writeIndent(a2);
  WTF::TextStream::operator<<();
  ++*((_DWORD *)a2 + 6);
  (*(void (**)(uint64_t, WTF::TextStream *, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, a3);
  if (*(_DWORD *)(a1 + 84))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::writeIndent(a2);
    WTF::TextStream::operator<<();
    ++*((_DWORD *)a2 + 6);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v6 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v6)
    {
      v7 = *(uint64_t **)(a1 + 72);
      v8 = 8 * v6;
      do
      {
        v9 = *v7++;
        WebCore::ScrollingStateNode::dump(v9, a2, a3);
        v8 -= 8;
      }
      while (v8);
    }
    WTF::TextStream::operator<<();
    --*((_DWORD *)a2 + 6);
    WTF::TextStream::writeIndent(a2);
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::operator<<();
  --*((_DWORD *)a2 + 6);
  WTF::TextStream::writeIndent(a2);
  return WTF::TextStream::operator<<();
}

WTF::StringImpl *WebCore::ScrollingStateNode::scrollingStateTreeAsText(uint64_t a1, unsigned __int8 a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  char v8;
  int v9;
  __int16 v10;
  int v11;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 1;
  v9 = 0;
  v10 = 257;
  v11 = 0;
  WebCore::ScrollingStateNode::dump(a1, (WTF::TextStream *)&v5, a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::release((WTF::TextStream *)&v5);
  v3 = v6;
  v6 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::ScrollingStateOverflowScrollProxyNode::ScrollingStateOverflowScrollProxyNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;
  __int128 v11;
  uint64_t v12;

  v11 = *(_OWORD *)a6;
  v12 = *(_QWORD *)(a6 + 16);
  result = (_QWORD *)WebCore::ScrollingStateNode::ScrollingStateNode(a1, 6, a2, a3, a4, a5, &v11);
  *result = off_1E3403F10;
  result[16] = a7;
  result[17] = a8;
  return result;
}

{
  _QWORD *result;
  __int128 v11;
  uint64_t v12;

  v11 = *(_OWORD *)a6;
  v12 = *(_QWORD *)(a6 + 16);
  result = (_QWORD *)WebCore::ScrollingStateNode::ScrollingStateNode(a1, 6, a2, a3, a4, a5, &v11);
  *result = off_1E3403F10;
  result[16] = a7;
  result[17] = a8;
  return result;
}

uint64_t WebCore::ScrollingStateOverflowScrollProxyNode::ScrollingStateOverflowScrollProxyNode(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = a1;
  *(_BYTE *)(a1 + 16) = 6;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  ++*a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = off_1E3403F10;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

void WebCore::ScrollingStateOverflowScrollProxyNode::~ScrollingStateOverflowScrollProxyNode(CFTypeRef *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScrollingStateNode::~ScrollingStateNode(this, a2);
  WTF::fastFree(v2, v3);
}

__n128 WebCore::ScrollingStateOverflowScrollProxyNode::clone@<Q0>(WebCore::ScrollingStateOverflowScrollProxyNode *this@<X0>, WebCore::ScrollingStateTree *a2@<X1>, __n128 **a3@<X8>)
{
  WebCore::ScrollingStateNode *v6;
  __n128 *v7;
  __n128 result;

  v6 = (WebCore::ScrollingStateNode *)WTF::fastMalloc((WTF *)0x90);
  v7 = (__n128 *)WebCore::ScrollingStateNode::ScrollingStateNode(v6, this, a2);
  v7->n128_u64[0] = (unint64_t)off_1E3403F10;
  result = *((__n128 *)this + 8);
  v7[8] = result;
  *a3 = v7;
  return result;
}

uint64_t WebCore::ScrollingStateOverflowScrollProxyNode::applicableProperties(WebCore::ScrollingStateOverflowScrollProxyNode *this)
{
  return 0x100000000003;
}

uint64_t WebCore::ScrollingStateOverflowScrollProxyNode::setOverflowScrollingNode(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a2 != *(_QWORD *)(result + 128) || a3 != *(_QWORD *)(result + 136))
  {
    *(_QWORD *)(result + 128) = a2;
    *(_QWORD *)(result + 136) = a3;
    v4 = *(_QWORD *)(result + 40);
    if ((v4 & 2) == 0)
    {
      *(_QWORD *)(result + 40) = v4 | 2;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(result + 48), 1);
    }
  }
  return result;
}

uint64_t WebCore::ScrollingStateOverflowScrollProxyNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  double v33[3];
  double v34;

  WTF::TextStream::operator<<();
  result = WebCore::ScrollingStateNode::dumpProperties(a1, a2, a3);
  v7 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)v33 = *(_OWORD *)(a1 + 128);
  if (!*(_QWORD *)&v33[0])
    goto LABEL_60;
  result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v7 + 40), (uint64_t *)v33);
  if (!result)
    goto LABEL_60;
  v9 = *(_QWORD *)(result + 16);
  if (!v9)
    goto LABEL_60;
  v10 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_8;
  }
  result = MEMORY[0x19AEA534C](v10);
LABEL_8:
  ++*(_QWORD *)(v10 + 8);
  v12 = __ldxr((unsigned __int8 *)v10);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_12:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
  if (*(_QWORD *)(v9 + 24) != *(_QWORD *)&v33[0] || *(_QWORD *)(v9 + 32) != *(_QWORD *)&v33[1])
  {
    __break(0xC471u);
    JUMPOUT(0x19609F4F8);
  }
  v14 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_22;
  }
  result = MEMORY[0x19AEA534C](v14);
LABEL_22:
  ++*(_QWORD *)(v14 + 8);
  v16 = __ldxr((unsigned __int8 *)v14);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
LABEL_26:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v14);
  if (*(_BYTE *)(v9 + 16) == 5)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v33[0] = *(float *)(v9 + 152);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v34 = *(float *)(v9 + 156);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    result = WTF::TextStream::endGroup(a2);
  }
  v17 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_33;
  }
  result = MEMORY[0x19AEA534C](v17);
LABEL_33:
  v19 = *(_QWORD *)(v17 + 8);
  v20 = v19 - 1;
  *(_QWORD *)(v17 + 8) = v19 - 1;
  if (v19 == 1)
  {
    v32 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    *(_QWORD *)(v17 + 24) = 0;
    v22 = v32 != 0;
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  v23 = __ldxr((unsigned __int8 *)v17);
  if (v23 != 1)
  {
    __clrex();
LABEL_40:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      goto LABEL_45;
    goto LABEL_41;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
    goto LABEL_40;
  if (v20)
    goto LABEL_45;
LABEL_41:
  if (v21)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (!v22)
    result = WTF::fastFree((WTF *)v17, v8);
LABEL_45:
  v24 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_49;
  }
  result = MEMORY[0x19AEA534C](v24);
LABEL_49:
  v26 = *(_QWORD *)(v24 + 8);
  v27 = v26 - 1;
  *(_QWORD *)(v24 + 8) = v26 - 1;
  if (v26 == 1)
  {
    v31 = *(_QWORD *)(v24 + 16);
    v28 = *(_QWORD *)(v24 + 24);
    *(_QWORD *)(v24 + 24) = 0;
    v29 = v31 != 0;
  }
  else
  {
    v28 = 0;
    v29 = 1;
  }
  v30 = __ldxr((unsigned __int8 *)v24);
  if (v30 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v24))
    {
      if (v27)
        goto LABEL_60;
      goto LABEL_57;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v24);
  if (v27)
    goto LABEL_60;
LABEL_57:
  if (v28)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (v29)
  {
LABEL_60:
    if ((a3 & 2) == 0)
      return result;
    goto LABEL_61;
  }
  result = WTF::fastFree((WTF *)v24, v8);
  if ((a3 & 2) != 0)
  {
LABEL_61:
    *(_OWORD *)v33 = *(_OWORD *)(a1 + 128);
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::operator<<();
    v34 = v33[1];
    WTF::operator<<();
    WTF::TextStream::operator<<();
    return WTF::TextStream::endGroup(a2);
  }
  return result;
}

void WebCore::ScrollingStateOverflowScrollingNode::ScrollingStateOverflowScrollingNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t *a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, __int128 *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_OWORD *a27,_WORD *a28,_WORD *a29,char a30,uint64_t a31)
{
  __int128 v31;
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;

  v41 = *a6;
  v42 = *((_QWORD *)a6 + 2);
  v39 = *(_OWORD *)a22;
  v40 = *(_QWORD *)(a22 + 16);
  v37 = *(_OWORD *)a23;
  v38 = *(_QWORD *)(a23 + 16);
  v36 = *(_QWORD *)(a24 + 16);
  v35 = *(_OWORD *)a24;
  v31 = *(_OWORD *)a25;
  v34 = *(_QWORD *)(a25 + 16);
  v33 = v31;
  WebCore::ScrollingStateScrollingNode::ScrollingStateScrollingNode(a1, 5, a2, a3, a4, a5, (uint64_t)&v41, a7, a9, a10, a11, a12, a13, a14, a15, a16, a8, a17, a18,
    a19,
    a20,
    a21,
    &v39,
    &v37,
    &v35,
    &v33,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31);
  *v32 = off_1E3403F50;
}

{
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;

  v42 = *a6;
  v43 = *((_QWORD *)a6 + 2);
  v40 = *(_OWORD *)a22;
  v41 = *(_QWORD *)(a22 + 16);
  v38 = *(_OWORD *)a23;
  v39 = *(_QWORD *)(a23 + 16);
  v31 = *(_OWORD *)a24;
  v37 = *(_QWORD *)(a24 + 16);
  v36 = v31;
  v32 = *(_OWORD *)a25;
  v35 = *(_QWORD *)(a25 + 16);
  v34 = v32;
  WebCore::ScrollingStateScrollingNode::ScrollingStateScrollingNode(a1, 5, a2, a3, a4, a5, (uint64_t)&v42, a7, a9, a10, a11, a12, a13, a14, a15, a16, a8, a17, a18,
    a19,
    a20,
    a21,
    &v40,
    &v38,
    &v36,
    &v34,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31);
  *v33 = off_1E3403F50;
}

uint64_t WebCore::ScrollingStateOverflowScrollingNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  WTF::TextStream::operator<<();
  return WebCore::ScrollingStateScrollingNode::dumpProperties(a1, a2, a3);
}

double WebCore::ScrollingStatePluginHostingNode::create@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double result;

  v8 = WTF::fastMalloc((WTF *)0x80);
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v9 = 0;
  *(_OWORD *)(v9 + 8) = xmmword_19689B170;
  *(_QWORD *)(v9 + 24) = v8;
  *(_BYTE *)(v8 + 16) = 4;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = a1;
  ++*a1;
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_DWORD *)(v8 + 120) = 0;
  *(_QWORD *)v8 = off_1E3403F90;
  *(_QWORD *)(v8 + 8) = v9;
  *a4 = v8;
  return result;
}

_QWORD *WebCore::ScrollingStatePluginHostingNode::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  _QWORD *result;
  __int128 v14;
  uint64_t v15;

  v12 = WTF::fastMalloc((WTF *)0x80);
  v14 = *(_OWORD *)a5;
  v15 = *(_QWORD *)(a5 + 16);
  result = (_QWORD *)WebCore::ScrollingStateNode::ScrollingStateNode(v12, 4, a1, a2, a3, a4, &v14);
  *result = off_1E3403F90;
  *a6 = result;
  return result;
}

void WebCore::ScrollingStatePluginHostingNode::~ScrollingStatePluginHostingNode(CFTypeRef *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScrollingStateNode::~ScrollingStateNode(this, a2);
  WTF::fastFree(v2, v3);
}

WebCore::ScrollingStateNode *WebCore::ScrollingStatePluginHostingNode::clone@<X0>(WebCore::ScrollingStatePluginHostingNode *this@<X0>, WebCore::ScrollingStateTree *a2@<X1>, WebCore::ScrollingStateNode **a3@<X8>)
{
  WebCore::ScrollingStateNode *v6;
  WebCore::ScrollingStateNode *result;

  v6 = (WebCore::ScrollingStateNode *)WTF::fastMalloc((WTF *)0x80);
  result = WebCore::ScrollingStateNode::ScrollingStateNode(v6, this, a2);
  *(_QWORD *)result = off_1E3403F90;
  *a3 = result;
  return result;
}

uint64_t WebCore::ScrollingStatePluginHostingNode::dumpProperties(int a1, WTF::TextStream *a2, char a3)
{
  WTF::TextStream::operator<<();
  return WebCore::ScrollingStateNode::dumpProperties(a1, a2, a3);
}

void WebCore::ScrollingStatePluginScrollingNode::ScrollingStatePluginScrollingNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t *a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, __int128 *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_OWORD *a27,_WORD *a28,_WORD *a29,char a30,uint64_t a31)
{
  __int128 v31;
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;

  v41 = *a6;
  v42 = *((_QWORD *)a6 + 2);
  v39 = *(_OWORD *)a22;
  v40 = *(_QWORD *)(a22 + 16);
  v37 = *(_OWORD *)a23;
  v38 = *(_QWORD *)(a23 + 16);
  v36 = *(_QWORD *)(a24 + 16);
  v35 = *(_OWORD *)a24;
  v31 = *(_OWORD *)a25;
  v34 = *(_QWORD *)(a25 + 16);
  v33 = v31;
  WebCore::ScrollingStateScrollingNode::ScrollingStateScrollingNode(a1, 3, a2, a3, a4, a5, (uint64_t)&v41, a7, a9, a10, a11, a12, a13, a14, a15, a16, a8, a17, a18,
    a19,
    a20,
    a21,
    &v39,
    &v37,
    &v35,
    &v33,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31);
  *v32 = off_1E3403FD0;
}

{
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;

  v42 = *a6;
  v43 = *((_QWORD *)a6 + 2);
  v40 = *(_OWORD *)a22;
  v41 = *(_QWORD *)(a22 + 16);
  v38 = *(_OWORD *)a23;
  v39 = *(_QWORD *)(a23 + 16);
  v31 = *(_OWORD *)a24;
  v37 = *(_QWORD *)(a24 + 16);
  v36 = v31;
  v32 = *(_OWORD *)a25;
  v35 = *(_QWORD *)(a25 + 16);
  v34 = v32;
  WebCore::ScrollingStateScrollingNode::ScrollingStateScrollingNode(a1, 3, a2, a3, a4, a5, (uint64_t)&v42, a7, a9, a10, a11, a12, a13, a14, a15, a16, a8, a17, a18,
    a19,
    a20,
    a21,
    &v40,
    &v38,
    &v36,
    &v34,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31);
  *v33 = off_1E3403FD0;
}

void WebCore::ScrollingStatePluginScrollingNode::~ScrollingStatePluginScrollingNode(WebCore::ScrollingStatePluginScrollingNode *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScrollingStateScrollingNode::~ScrollingStateScrollingNode(this, a2);
  WTF::fastFree(v2, v3);
}

WebCore::ScrollingStateScrollingNode *WebCore::ScrollingStatePluginScrollingNode::clone@<X0>(WebCore::ScrollingStatePluginScrollingNode *this@<X0>, WebCore::ScrollingStateTree *a2@<X1>, WebCore::ScrollingStateScrollingNode **a3@<X8>)
{
  WebCore::ScrollingStateScrollingNode *v6;
  WebCore::ScrollingStateScrollingNode *result;

  v6 = (WebCore::ScrollingStateScrollingNode *)WTF::fastMalloc((WTF *)0x218);
  result = WebCore::ScrollingStateScrollingNode::ScrollingStateScrollingNode(v6, this, a2);
  *(_QWORD *)result = off_1E3403FD0;
  *a3 = result;
  return result;
}

uint64_t WebCore::ScrollingStatePluginScrollingNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  WTF::TextStream::operator<<();
  return WebCore::ScrollingStateScrollingNode::dumpProperties(a1, a2, a3);
}

__n128 WebCore::ScrollingStatePositionedNode::ScrollingStatePositionedNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, __n128 *a8)
{
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  uint64_t v14;

  v13 = *(_OWORD *)a6;
  v14 = *(_QWORD *)(a6 + 16);
  v10 = WebCore::ScrollingStateNode::ScrollingStateNode(a1, 9, a2, a3, a4, a5, &v13);
  *(_QWORD *)v10 = off_1E3404010;
  *(_QWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = 0;
  v11 = *a7;
  *a7 = 0;
  *(_QWORD *)(v10 + 128) = v11;
  LODWORD(v11) = *((_DWORD *)a7 + 2);
  *((_DWORD *)a7 + 2) = 0;
  *(_DWORD *)(v10 + 136) = v11;
  LODWORD(v11) = *((_DWORD *)a7 + 3);
  *((_DWORD *)a7 + 3) = 0;
  *(_DWORD *)(v10 + 140) = v11;
  result = *a8;
  *(__n128 *)(v10 + 144) = *a8;
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  uint64_t v14;

  v13 = *(_OWORD *)a6;
  v14 = *(_QWORD *)(a6 + 16);
  v10 = WebCore::ScrollingStateNode::ScrollingStateNode(a1, 9, a2, a3, a4, a5, &v13);
  *(_QWORD *)v10 = off_1E3404010;
  *(_QWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = 0;
  v11 = *a7;
  *a7 = 0;
  *(_QWORD *)(v10 + 128) = v11;
  LODWORD(v11) = *((_DWORD *)a7 + 2);
  *((_DWORD *)a7 + 2) = 0;
  *(_DWORD *)(v10 + 136) = v11;
  LODWORD(v11) = *((_DWORD *)a7 + 3);
  *((_DWORD *)a7 + 3) = 0;
  *(_DWORD *)(v10 + 140) = v11;
  result = *a8;
  *(__n128 *)(v10 + 144) = *a8;
  return result;
}

void WebCore::ScrollingStatePositionedNode::~ScrollingStatePositionedNode(WebCore::ScrollingStatePositionedNode *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v3, a2);
  }
  WebCore::ScrollingStateNode::~ScrollingStateNode((CFTypeRef *)this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  v3 = (WTF *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v3, a2);
  }
  WebCore::ScrollingStateNode::~ScrollingStateNode((CFTypeRef *)this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::ScrollingStatePositionedNode::clone@<X0>(__int128 **this@<X0>, WebCore::ScrollingStateTree *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;

  v6 = WTF::fastMalloc((WTF *)0xA0);
  result = (uint64_t)WebCore::ScrollingStateNode::ScrollingStateNode((WebCore::ScrollingStateNode *)v6, (const WebCore::ScrollingStateNode *)this, a2);
  *(_QWORD *)result = off_1E3404010;
  v8 = *((unsigned int *)this + 35);
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_DWORD *)(result + 140) = v8;
  if (!(_DWORD)v8)
  {
LABEL_6:
    *(_OWORD *)(v6 + 144) = *((_OWORD *)this + 9);
    *a3 = v6;
    return result;
  }
  if (!(v8 >> 28))
  {
    result = WTF::fastMalloc((WTF *)(16 * v8));
    *(_DWORD *)(v6 + 136) = v8;
    *(_QWORD *)(v6 + 128) = result;
    v9 = *((unsigned int *)this + 35);
    if ((_DWORD)v9)
    {
      v10 = this[16];
      v11 = 16 * v9;
      do
      {
        v12 = *v10++;
        *(_OWORD *)result = v12;
        result += 16;
        v11 -= 16;
      }
      while (v11);
    }
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ScrollingStatePositionedNode::applicableProperties(WebCore::ScrollingStatePositionedNode *this)
{
  return 0x100000000007;
}

WTF *WebCore::ScrollingStatePositionedNode::setRelatedOverflowScrollingNodes(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  int v5;
  WTF *result;
  unint64_t v8;
  int32x2_t v9;
  _QWORD *v10;
  uint64_t v11;

  v4 = a2[3];
  v5 = *(_DWORD *)(a1 + 140);
  result = *(WTF **)(a1 + 128);
  if ((_DWORD)v4 != v5)
  {
    if (!result)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (!(_DWORD)v4)
    return result;
  if (**(_QWORD **)a2 != *(_QWORD *)result || *(_QWORD *)(*(_QWORD *)a2 + 8) != *((_QWORD *)result + 1))
  {
LABEL_14:
    *(_QWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
LABEL_15:
    v10 = *(_QWORD **)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a1 + 128) = v10;
    LODWORD(v10) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 136) = (_DWORD)v10;
    LODWORD(v10) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 140) = (_DWORD)v10;
    v11 = *(_QWORD *)(a1 + 40);
    if ((v11 & 2) == 0)
    {
      *(_QWORD *)(a1 + 40) = v11 | 2;
      return (WTF *)WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(a1 + 48), 1);
    }
    return result;
  }
  v8 = 0;
  while (v4 - 1 != v8)
  {
    v9 = vmovn_s64(vceqq_s64(*(int64x2_t *)(*(_QWORD *)a2 + 16 + 16 * v8), *((int64x2_t *)result + v8 + 1)));
    ++v8;
    if ((v9.i32[0] & v9.i32[1] & 1) == 0)
    {
      if (v8 < v4)
        goto LABEL_14;
      return result;
    }
  }
  return result;
}

uint64_t WebCore::ScrollingStatePositionedNode::updateConstraints(uint64_t this, const WebCore::AbsolutePositionConstraints *a2)
{
  BOOL v2;
  BOOL v3;
  uint64_t v4;

  v2 = *(float *)(this + 144) == *(float *)a2 && *(float *)(this + 148) == *((float *)a2 + 1);
  if (!v2
    || (*(float *)(this + 152) == *((float *)a2 + 2) ? (v3 = *(float *)(this + 156) == *((float *)a2 + 3)) : (v3 = 0),
        !v3))
  {
    *(_OWORD *)(this + 144) = *(_OWORD *)a2;
    v4 = *(_QWORD *)(this + 40);
    if ((v4 & 4) == 0)
    {
      *(_QWORD *)(this + 40) = v4 | 4;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStatePositionedNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  WTF::TextStream *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::TextStream *v11;

  WTF::TextStream::operator<<();
  WebCore::ScrollingStateNode::dumpProperties(a1, a2, a3);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v6 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WTF::TextStream::startGroup(v6);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v6);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  result = WTF::TextStream::endGroup(a2);
  if ((a3 & 2) != 0 && *(_DWORD *)(a1 + 140))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    v8 = *(unsigned int *)(a1 + 140);
    if ((_DWORD)v8)
    {
      v9 = 16 * v8;
      v10 = *(_QWORD *)(a1 + 128);
      do
      {
        v10 += 16;
        v11 = (WTF::TextStream *)WTF::TextStream::operator<<();
        WTF::TextStream::writeIndent(v11);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::operator<<();
        WTF::TextStream::operator<<();
        WTF::operator<<();
        WTF::TextStream::operator<<();
        v9 -= 16;
      }
      while (v9);
    }
    return WTF::TextStream::endGroup(a2);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::EventTrackingRegionsEventType *,false>(uint64_t result, unsigned __int8 *a2, uint64_t a3, char a4)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned __int8 v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int8 v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned __int8 *v55;
  BOOL v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned __int8 v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned __int8 *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  _BYTE *v73;
  BOOL v75;
  uint64_t v76;
  unsigned __int8 *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  int64_t v83;
  int64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned __int8 *v90;
  unsigned int v91;
  uint64_t v92;
  BOOL v93;
  BOOL v94;
  uint64_t v95;
  unsigned int v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  BOOL v102;
  unint64_t v103;
  unsigned __int8 *v104;
  unsigned int v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;

  v7 = (unsigned __int8 *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v65 = *(a2 - 1);
        v66 = *v8;
        if (v65 < v66)
        {
          *v8 = v65;
          *(a2 - 1) = v66;
        }
        return result;
      case 3:
        v67 = v8[1];
        v68 = *v8;
        v69 = *(a2 - 1);
        if (v67 >= v68)
        {
          if (v69 < v67)
          {
            v8[1] = v69;
            *(a2 - 1) = v67;
            v108 = v8[1];
            v109 = *v8;
            if (v108 < v109)
            {
              *v8 = v108;
              v8[1] = v109;
            }
          }
        }
        else
        {
          if (v69 >= v67)
          {
            *v8 = v67;
            v8[1] = v68;
            v118 = *(a2 - 1);
            if (v118 >= v68)
              return result;
            v8[1] = v118;
          }
          else
          {
            *v8 = v69;
          }
          *(a2 - 1) = v68;
        }
        return result;
      case 4:
        v9 = (uint64_t)(v8 + 1);
        v70 = v8[1];
        v45 = v8 + 2;
        v14 = v8[2];
        v71 = *v8;
        if (v70 >= v71)
        {
          if (v14 >= v70)
            goto LABEL_194;
          *(_BYTE *)v9 = v14;
          *v45 = v70;
          v72 = v8;
          v73 = v8 + 1;
          result = v70;
          if (v14 >= v71)
            goto LABEL_195;
        }
        else
        {
          v72 = v8;
          v73 = v8 + 2;
          result = *v8;
          if (v14 >= v70)
          {
            *v8 = v70;
            v8[1] = v71;
            v72 = v8 + 1;
            v73 = v8 + 2;
            result = v71;
            if (v14 >= v71)
            {
LABEL_194:
              LODWORD(v70) = v14;
LABEL_195:
              v114 = *(a2 - 1);
              if (v114 < v70)
              {
                *v45 = v114;
                *(a2 - 1) = v70;
                v115 = *v45;
                v116 = *(unsigned __int8 *)v9;
                if (v115 < v116)
                {
                  v7[1] = v115;
                  v7[2] = v116;
                  v117 = *v7;
                  if (v115 < v117)
                  {
                    *v7 = v115;
                    v7[1] = v117;
                  }
                }
              }
              return result;
            }
          }
        }
        *v72 = v14;
        *v73 = v71;
        LODWORD(v70) = result;
        goto LABEL_195;
      case 5:
        return (uint64_t)std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::ShapeDetection::BarcodeFormat *>(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 23)
        {
          if (!a3)
          {
            if (v8 == a2)
              return result;
            v83 = (unint64_t)(v9 - 2) >> 1;
            v84 = v83;
            do
            {
              if (v83 >= v84)
              {
                v85 = (2 * v84) | 1;
                v86 = &v8[v85];
                if (2 * v84 + 2 >= v9)
                {
                  v88 = *v86;
                }
                else
                {
                  v87 = *v86;
                  v88 = v86[1];
                  v89 = v87 >= v88;
                  if (v87 > v88)
                    v88 = *v86;
                  if (!v89)
                  {
                    ++v86;
                    v85 = 2 * v84 + 2;
                  }
                }
                v90 = &v8[v84];
                v91 = v8[v84];
                if (v88 >= v91)
                {
                  do
                  {
                    *v90 = v88;
                    v90 = v86;
                    if (v83 < v85)
                      break;
                    v92 = (2 * v85) | 1;
                    v86 = &v8[v92];
                    v85 = 2 * v85 + 2;
                    if (v85 >= v9)
                    {
                      v88 = *v86;
                      v85 = v92;
                    }
                    else
                    {
                      v88 = *v86;
                      result = v86[1];
                      v93 = v88 >= result;
                      if (v88 <= result)
                        v88 = v86[1];
                      if (v93)
                        v85 = v92;
                      else
                        ++v86;
                    }
                  }
                  while (v88 >= v91);
                  *v90 = v91;
                }
              }
              v94 = v84-- <= 0;
            }
            while (!v94);
            while (1)
            {
              v95 = 0;
              LOBYTE(v96) = *v8;
              v97 = v8;
              do
              {
                v98 = &v97[v95 + 1];
                v99 = (2 * v95) | 1;
                v95 = 2 * v95 + 2;
                if (v95 >= v9)
                {
                  LOBYTE(v100) = *v98;
                  v95 = v99;
                }
                else
                {
                  v100 = *v98;
                  v101 = v98[1];
                  v102 = v100 >= v101;
                  if (v100 <= v101)
                    LOBYTE(v100) = v98[1];
                  if (v102)
                    v95 = v99;
                  else
                    ++v98;
                }
                *v97 = v100;
                v97 = v98;
              }
              while (v95 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
              if (v98 != --a2)
              {
                *v98 = *a2;
                *a2 = v96;
                v103 = v98 - v8 - 1;
                if (v98 - v8 + 1 < 2)
                  goto LABEL_175;
                v104 = &v8[v103 >> 1];
                v105 = *v104;
                v96 = *v98;
                if (v105 >= v96)
                  goto LABEL_175;
                v106 = v103 >> 1;
                do
                {
                  *v98 = v105;
                  v98 = v104;
                  if (!v106)
                    break;
                  v107 = v106 - 1;
                  v106 = (v106 - 1) >> 1;
                  v104 = &v8[v107 >> 1];
                  v105 = *v104;
                }
                while (v105 < v96);
              }
              *v98 = v96;
LABEL_175:
              v94 = v9-- <= 2;
              if (v94)
                return result;
            }
          }
          v10 = &v8[(unint64_t)v9 >> 1];
          v11 = *(a2 - 1);
          if ((unint64_t)v9 >= 0x81)
          {
            v12 = *v10;
            v13 = *v8;
            if (v12 >= v13)
            {
              if (v11 < v12)
              {
                *v10 = v11;
                *(a2 - 1) = v12;
                v16 = *v10;
                v17 = *v8;
                if (v16 < v17)
                {
                  *v8 = v16;
                  *v10 = v17;
                }
              }
            }
            else
            {
              if (v11 >= v12)
              {
                *v8 = v12;
                *v10 = v13;
                v20 = *(a2 - 1);
                if (v20 >= v13)
                  goto LABEL_22;
                *v10 = v20;
              }
              else
              {
                *v8 = v11;
              }
              *(a2 - 1) = v13;
            }
LABEL_22:
            v21 = (unint64_t)v9 >> 1;
            v22 = &v8[(unint64_t)v9 >> 1];
            v25 = *(v22 - 1);
            v23 = v22 - 1;
            v24 = v25;
            v26 = v8[1];
            v27 = *(a2 - 2);
            if (v25 >= v26)
            {
              if (v27 < v24)
              {
                *v23 = v27;
                *(a2 - 2) = v24;
                v28 = *v23;
                v29 = v8[1];
                if (v28 < v29)
                {
                  v8[1] = v28;
                  *v23 = v29;
                }
              }
            }
            else
            {
              if (v27 >= v24)
              {
                v8[1] = v24;
                *v23 = v26;
                v31 = *(a2 - 2);
                if (v31 >= v26)
                  goto LABEL_34;
                *v23 = v31;
              }
              else
              {
                v8[1] = v27;
              }
              *(a2 - 2) = v26;
            }
LABEL_34:
            v32 = &v8[v21];
            v35 = v32[1];
            v33 = v32 + 1;
            v34 = v35;
            v36 = v8[2];
            v37 = *(a2 - 3);
            if (v35 >= v36)
            {
              if (v37 < v34)
              {
                *v33 = v37;
                *(a2 - 3) = v34;
                v38 = *v33;
                v39 = v8[2];
                if (v38 < v39)
                {
                  v8[2] = v38;
                  *v33 = v39;
                }
              }
            }
            else
            {
              if (v37 >= v34)
              {
                v8[2] = v34;
                *v33 = v36;
                v40 = *(a2 - 3);
                if (v40 >= v36)
                  goto LABEL_43;
                *v33 = v40;
              }
              else
              {
                v8[2] = v37;
              }
              *(a2 - 3) = v36;
            }
LABEL_43:
            v14 = *v10;
            v41 = *v23;
            v42 = *v33;
            if (v14 >= v41)
            {
              if (v42 >= v14)
                goto LABEL_50;
              *v10 = v42;
              *v33 = v14;
              v33 = v10;
              v14 = v41;
              if (v42 >= v41)
              {
                v14 = v42;
                goto LABEL_50;
              }
            }
            else if (v42 >= v14)
            {
              *v23 = v14;
              *v10 = v41;
              v23 = v10;
              v14 = v42;
              if (v42 >= v41)
              {
                v14 = v41;
LABEL_50:
                v43 = *v8;
                *v8 = v14;
                *v10 = v43;
                goto LABEL_51;
              }
            }
            *v23 = v42;
            *v33 = v41;
            goto LABEL_50;
          }
          v14 = *v8;
          v15 = *v10;
          if (v14 >= v15)
          {
            if (v11 < v14)
            {
              *v8 = v11;
              *(a2 - 1) = v14;
              v18 = *v8;
              v19 = *v10;
              if (v18 < v19)
              {
                *v10 = v18;
                *v8 = v19;
              }
            }
          }
          else
          {
            if (v11 < v14)
            {
              *v10 = v11;
LABEL_30:
              *(a2 - 1) = v15;
              goto LABEL_51;
            }
            *v10 = v14;
            *v8 = v15;
            v30 = *(a2 - 1);
            if (v30 < v15)
            {
              *v8 = v30;
              goto LABEL_30;
            }
          }
LABEL_51:
          --a3;
          v9 = *v8;
          if ((a4 & 1) == 0 && *(v8 - 1) >= v9)
          {
            if (v9 >= *(a2 - 1))
            {
              v58 = v8 + 1;
              do
              {
                v8 = v58;
                if (v58 >= a2)
                  break;
                ++v58;
              }
              while (v9 >= *v8);
            }
            else
            {
              v45 = v8 + 1;
              do
              {
                if (v45 == a2)
                  goto LABEL_193;
                v57 = *v45++;
              }
              while (v9 >= v57);
              v8 = v45 - 1;
            }
            v45 = a2;
            if (v8 < a2)
            {
              v45 = a2;
              while (v45 != v7)
              {
                v59 = *--v45;
                if (v9 >= v59)
                  goto LABEL_93;
              }
              goto LABEL_193;
            }
LABEL_93:
            if (v8 < v45)
            {
              v60 = *v8;
              v14 = *v45;
              do
              {
                *v8 = v14;
                v61 = v8 + 1;
                *v45 = v60;
                do
                {
                  if (v61 == a2)
                    goto LABEL_193;
                  v62 = *v61++;
                  v60 = v62;
                }
                while (v9 >= v62);
                v8 = v61 - 1;
                do
                {
                  if (v45 == v7)
                    goto LABEL_193;
                  v63 = *--v45;
                  v14 = v63;
                }
                while (v9 < v63);
              }
              while (v8 < v45);
            }
            v64 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v64;
            a4 = 0;
            *v64 = v9;
            continue;
          }
          v44 = 0;
          do
          {
            v45 = &v8[v44 + 1];
            if (v45 == a2)
              goto LABEL_193;
            v14 = *v45;
            ++v44;
          }
          while (v14 < v9);
          v45 = &v8[v44];
          v46 = a2;
          if (v44 != 1)
          {
            while (v46 != v8)
            {
              v47 = *--v46;
              if (v47 < v9)
                goto LABEL_63;
            }
            goto LABEL_193;
          }
          v46 = a2;
          do
          {
            if (v45 >= v46)
              break;
            v48 = *--v46;
          }
          while (v48 >= v9);
LABEL_63:
          if (v45 >= v46)
          {
            v55 = v45 - 1;
          }
          else
          {
            v49 = *v46;
            v50 = &v8[v44];
            v51 = v46;
            do
            {
              *v50 = v49;
              *v51 = v14;
              v52 = v50 + 1;
              do
              {
                if (v52 == a2)
                  goto LABEL_193;
                v53 = *v52++;
                v14 = v53;
              }
              while (v53 < v9);
              v50 = v52 - 1;
              do
              {
                if (v51 == v8)
                  goto LABEL_193;
                v54 = *--v51;
                v49 = v54;
              }
              while (v54 >= v9);
            }
            while (v50 < v51);
            v55 = v52 - 2;
          }
          if (v55 != v8)
            *v8 = *v55;
          *v55 = v9;
          if (v45 < v46)
          {
LABEL_79:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::EventTrackingRegionsEventType *,false>(v7, v55, a3, a4 & 1);
            a4 = 0;
            v8 = v55 + 1;
            continue;
          }
          v56 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::EventTrackingRegionsEventType *>(v8, v55);
          v8 = v55 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::EventTrackingRegionsEventType *>(v55 + 1, a2);
          if (!(_DWORD)result)
          {
            if (!v56)
              goto LABEL_79;
            continue;
          }
          a2 = v55;
          if (v56)
            return result;
          goto LABEL_2;
        }
        v45 = v8 + 1;
        v75 = v8 == a2 || v45 == a2;
        if ((a4 & 1) == 0)
        {
          if (v75)
            return result;
          v110 = 0;
          v111 = 1;
          while (1)
          {
            v112 = v8[v110];
            v110 = v111;
            v14 = *v45;
            if (v14 < v112)
              break;
LABEL_191:
            v111 = v110 + 1;
            ++v45;
            if (v110 + 1 == v9)
              return result;
          }
          v113 = 0;
          while (1)
          {
            v45[v113] = v112;
            if (!(v110 + v113))
              break;
            v112 = v45[v113-- - 2];
            if (v14 >= v112)
            {
              v45[v113] = v14;
              goto LABEL_191;
            }
          }
LABEL_193:
          __break(1u);
          goto LABEL_194;
        }
        if (!v75)
        {
          v76 = 1;
          v77 = v8;
          do
          {
            v78 = *v77;
            v77 = v45;
            v79 = *v45;
            if (v79 < v78)
            {
              v80 = v76;
              while (1)
              {
                v8[v80] = v78;
                v81 = v80 - 1;
                if (v80 == 1)
                  break;
                v78 = v8[v80-- - 2];
                if (v79 >= v78)
                {
                  v82 = &v8[v81];
                  goto LABEL_133;
                }
              }
              v82 = v8;
LABEL_133:
              *v82 = v79;
            }
            v45 = v77 + 1;
            ++v76;
          }
          while (v77 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::EventTrackingRegionsEventType *>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t i;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 < v4)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v11 = a1[1];
      v12 = *a1;
      v13 = *(a2 - 1);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          a1[1] = v13;
          *(a2 - 1) = v11;
          v30 = a1[1];
          v31 = *a1;
          if (v30 < v31)
          {
            *a1 = v30;
            a1[1] = v31;
          }
        }
      }
      else
      {
        if (v13 >= v11)
        {
          *a1 = v11;
          a1[1] = v12;
          v36 = *(a2 - 1);
          if (v36 >= v12)
            return 1;
          a1[1] = v36;
        }
        else
        {
          *a1 = v13;
        }
        *(a2 - 1) = v12;
      }
      return 1;
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < v18)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_36;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
        goto LABEL_37;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_37;
        goto LABEL_35;
      }
LABEL_36:
      v15 = v17;
LABEL_37:
      v32 = *(a2 - 1);
      if (v32 < v15)
      {
        *v16 = v32;
        *(a2 - 1) = v15;
        v33 = *v16;
        v34 = *v14;
        if (v33 < v34)
        {
          a1[1] = v33;
          a1[2] = v34;
          v35 = *a1;
          if (v33 < v35)
          {
            *a1 = v33;
            a1[1] = v35;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::ShapeDetection::BarcodeFormat *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 >= v8)
      {
        if (v5 >= v7)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v9 = a1;
        v10 = a1 + 1;
      }
      else
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v5 < v7)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v9 = a1 + 1;
        v10 = a1 + 2;
      }
      if (v5 >= v8)
        goto LABEL_19;
LABEL_18:
      *v9 = v5;
      *v10 = v8;
LABEL_19:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 3; ; ++i)
      {
        v25 = *v22;
        v26 = *v6;
        if (v25 < v26)
        {
          v27 = i;
          while (1)
          {
            a1[v27] = v26;
            v28 = v27 - 1;
            if (v27 == 1)
              break;
            v26 = a1[v27-- - 2];
            if (v25 >= v26)
            {
              v29 = &a1[v28];
              goto LABEL_27;
            }
          }
          v29 = a1;
LABEL_27:
          *v29 = v25;
          if (++v23 == 8)
            break;
        }
        v6 = v22;
        if (++v22 == a2)
          return 1;
      }
      return v22 + 1 == a2;
  }
}

uint64_t WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    while (1)
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
        break;
LABEL_7:
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
      if (!v7)
        goto LABEL_2;
    }
    v9 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
LABEL_12:
      v11 = *(_QWORD *)(v9 + 8);
      v12 = v11 - 1;
      *(_QWORD *)(v9 + 8) = v11 - 1;
      if (v11 == 1)
      {
        v16 = *(_QWORD *)(v9 + 16);
        v13 = *(_QWORD *)(v9 + 24);
        *(_QWORD *)(v9 + 24) = 0;
        v14 = v16 != 0;
      }
      else
      {
        v13 = 0;
        v14 = 1;
      }
      v15 = __ldxr((unsigned __int8 *)v9);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
          goto LABEL_16;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_16:
      if (!v12)
      {
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        if (!v14)
          WTF::fastFree((WTF *)v9, a2);
      }
      goto LABEL_7;
    }
    MEMORY[0x19AEA534C](v9);
    goto LABEL_12;
  }
LABEL_2:
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorTypeOperations<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>::destruct(uint64_t result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;

  if ((uint64_t *)result != a2)
  {
    v3 = (uint64_t *)result;
    while (1)
    {
      v4 = *v3;
      *v3 = 0;
      if (v4)
        break;
LABEL_4:
      if (++v3 == a2)
        return result;
    }
    v5 = *(_QWORD *)(v4 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
LABEL_9:
      v7 = *(_QWORD *)(v5 + 8);
      v8 = v7 - 1;
      *(_QWORD *)(v5 + 8) = v7 - 1;
      if (v7 == 1)
      {
        v12 = *(_QWORD *)(v5 + 16);
        v9 = *(_QWORD *)(v5 + 24);
        *(_QWORD *)(v5 + 24) = 0;
        v10 = v12 != 0;
      }
      else
      {
        v9 = 0;
        v10 = 1;
      }
      v11 = __ldxr((unsigned __int8 *)v5);
      if (v11 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v5))
          goto LABEL_13;
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_13:
      if (!v8)
      {
        if (v9)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        if (!v10)
          result = WTF::fastFree((WTF *)v5, a2);
      }
      goto LABEL_4;
    }
    result = MEMORY[0x19AEA534C](v5);
    goto LABEL_9;
  }
  return result;
}

__n128 WebCore::ScrollingStateScrollingNode::ScrollingStateScrollingNode(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, uint64_t *a17, __int128 *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,__int128 *a23,__int128 *a24,__int128 *a25,__int128 *a26,char a27,_OWORD *a28,_WORD *a29,_WORD *a30,char a31,uint64_t a32)
{
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __n128 result;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v55 = *(_OWORD *)a7;
  v56 = *(_QWORD *)(a7 + 16);
  v41 = WebCore::ScrollingStateNode::ScrollingStateNode(a1, a2, a3, a4, a5, a6, &v55);
  *(_QWORD *)v41 = off_1E3404050;
  *(float *)(v41 + 128) = a9;
  *(float *)(v41 + 132) = a10;
  *(float *)(v41 + 136) = a11;
  *(float *)(v41 + 140) = a12;
  *(float *)(v41 + 144) = a13;
  *(float *)(v41 + 148) = a14;
  *(float *)(v41 + 152) = a15;
  *(float *)(v41 + 156) = a16;
  *(_QWORD *)(v41 + 160) = a8;
  *(_BYTE *)(v41 + 168) = *(_BYTE *)a19;
  v42 = 0uLL;
  *(_OWORD *)(v41 + 176) = 0u;
  v43 = *(_QWORD *)(a19 + 8);
  *(_QWORD *)(a19 + 8) = 0;
  *(_QWORD *)(v41 + 176) = v43;
  LODWORD(v43) = *(_DWORD *)(a19 + 16);
  *(_DWORD *)(a19 + 16) = 0;
  *(_DWORD *)(v41 + 184) = v43;
  LODWORD(v43) = *(_DWORD *)(a19 + 20);
  *(_DWORD *)(a19 + 20) = 0;
  *(_DWORD *)(v41 + 188) = v43;
  *(_OWORD *)(v41 + 192) = 0u;
  v44 = *(_QWORD *)(a19 + 24);
  *(_QWORD *)(a19 + 24) = 0;
  *(_QWORD *)(v41 + 192) = v44;
  LODWORD(v44) = *(_DWORD *)(a19 + 32);
  *(_DWORD *)(a19 + 32) = 0;
  *(_DWORD *)(v41 + 200) = v44;
  LODWORD(v44) = *(_DWORD *)(a19 + 36);
  *(_DWORD *)(a19 + 36) = 0;
  *(_DWORD *)(v41 + 204) = v44;
  *(_OWORD *)(v41 + 208) = 0u;
  v45 = *(_QWORD *)(a19 + 40);
  *(_QWORD *)(a19 + 40) = 0;
  *(_QWORD *)(v41 + 208) = v45;
  LODWORD(v45) = *(_DWORD *)(a19 + 48);
  *(_DWORD *)(a19 + 48) = 0;
  *(_DWORD *)(v41 + 216) = v45;
  LODWORD(v45) = *(_DWORD *)(a19 + 52);
  *(_DWORD *)(a19 + 52) = 0;
  *(_DWORD *)(v41 + 220) = v45;
  *(_OWORD *)(v41 + 224) = 0u;
  v46 = *(_QWORD *)(a19 + 56);
  *(_QWORD *)(a19 + 56) = 0;
  *(_QWORD *)(v41 + 224) = v46;
  LODWORD(v46) = *(_DWORD *)(a19 + 64);
  *(_DWORD *)(a19 + 64) = 0;
  *(_DWORD *)(v41 + 232) = v46;
  LODWORD(v46) = *(_DWORD *)(a19 + 68);
  *(_DWORD *)(a19 + 68) = 0;
  *(_DWORD *)(v41 + 236) = v46;
  *(_QWORD *)(v41 + 240) = a20;
  *(_QWORD *)(v41 + 248) = a21;
  v47 = 0uLL;
  if (*((_BYTE *)a23 + 16))
    v47 = *a23;
  *(_OWORD *)(v41 + 256) = 0uLL;
  *(_OWORD *)(v41 + 272) = v47;
  *(_DWORD *)(v41 + 288) = 3;
  if (*((_BYTE *)a24 + 16))
    v42 = *a24;
  v48 = 0uLL;
  *(_OWORD *)(v41 + 296) = 0u;
  *(_OWORD *)(v41 + 312) = v42;
  *(_DWORD *)(v41 + 328) = 3;
  v49 = 0uLL;
  if (*((_BYTE *)a25 + 16))
    v49 = *a25;
  *(_OWORD *)(v41 + 336) = 0uLL;
  *(_OWORD *)(v41 + 352) = v49;
  *(_DWORD *)(v41 + 368) = 3;
  if (*((_BYTE *)a26 + 16))
    v48 = *a26;
  *(_QWORD *)(v41 + 376) = 0;
  *(_QWORD *)(v41 + 384) = 0;
  *(_OWORD *)(v41 + 392) = v48;
  *(_DWORD *)(v41 + 408) = 3;
  *(_WORD *)(v41 + 416) = *a29;
  *(_OWORD *)(v41 + 420) = *a28;
  *(_WORD *)(v41 + 436) = *a30;
  v50 = *a17;
  *(_DWORD *)(v41 + 446) = *((_DWORD *)a17 + 2);
  *(_QWORD *)(v41 + 438) = v50;
  v51 = *a18;
  v52 = a18[1];
  *(_OWORD *)(v41 + 480) = *(__int128 *)((char *)a18 + 28);
  *(_OWORD *)(v41 + 452) = v51;
  *(_OWORD *)(v41 + 468) = v52;
  result = *(__n128 *)a32;
  v54 = *(_OWORD *)(a32 + 16);
  *(_DWORD *)(v41 + 528) = *(_DWORD *)(a32 + 32);
  *(__n128 *)(v41 + 496) = result;
  *(_OWORD *)(v41 + 512) = v54;
  *(_BYTE *)(v41 + 532) = a31;
  *(_BYTE *)(v41 + 533) = a22;
  *(_BYTE *)(v41 + 534) = a27;
  return result;
}

uint64_t WebCore::ScrollingStateScrollingNode::setScrollableAreaSize(uint64_t this, const WebCore::FloatSize *a2)
{
  uint64_t v3;

  if (*(float *)(this + 128) != *(float *)a2 || *(float *)(this + 132) != *((float *)a2 + 1))
  {
    *(_QWORD *)(this + 128) = *(_QWORD *)a2;
    v3 = *(_QWORD *)(this + 40);
    if ((v3 & 2) == 0)
    {
      *(_QWORD *)(this + 40) = v3 | 2;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateScrollingNode::setTotalContentsSize(uint64_t this, const WebCore::FloatSize *a2)
{
  uint64_t v3;

  if (*(float *)(this + 136) != *(float *)a2 || *(float *)(this + 140) != *((float *)a2 + 1))
  {
    *(_QWORD *)(this + 136) = *(_QWORD *)a2;
    v3 = *(_QWORD *)(this + 40);
    if ((v3 & 4) == 0)
    {
      *(_QWORD *)(this + 40) = v3 | 4;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateScrollingNode::setReachableContentsSize(uint64_t this, const WebCore::FloatSize *a2)
{
  uint64_t v3;

  if (*(float *)(this + 144) != *(float *)a2 || *(float *)(this + 148) != *((float *)a2 + 1))
  {
    *(_QWORD *)(this + 144) = *(_QWORD *)a2;
    v3 = *(_QWORD *)(this + 40);
    if ((v3 & 8) == 0)
    {
      *(_QWORD *)(this + 40) = v3 | 8;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateScrollingNode::setScrollPosition(uint64_t this, const WebCore::FloatPoint *a2)
{
  uint64_t v3;

  if (*(float *)(this + 152) != *(float *)a2 || *(float *)(this + 156) != *((float *)a2 + 1))
  {
    *(_QWORD *)(this + 152) = *(_QWORD *)a2;
    v3 = *(_QWORD *)(this + 40);
    if ((v3 & 0x10) == 0)
    {
      *(_QWORD *)(this + 40) = v3 | 0x10;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateScrollingNode::setScrollOrigin(uint64_t this, const WebCore::IntPoint *a2)
{
  uint64_t v3;

  if (*(_DWORD *)(this + 160) != *(_DWORD *)a2 || *(_DWORD *)(this + 164) != *((_DWORD *)a2 + 1))
  {
    *(_QWORD *)(this + 160) = *(_QWORD *)a2;
    v3 = *(_QWORD *)(this + 40);
    if ((v3 & 0x20) == 0)
    {
      *(_QWORD *)(this + 40) = v3 | 0x20;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateScrollingNode::setSnapOffsetsInfo(uint64_t a1, unsigned __int8 *a2)
{
  _BYTE *v4;
  uint64_t result;
  uint64_t v6;

  v4 = (_BYTE *)(a1 + 168);
  result = WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>::isEqual((unsigned __int8 *)(a1 + 168), a2);
  if ((result & 1) == 0)
  {
    result = (uint64_t)WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>::operator=(v4, (uint64_t)a2);
    v6 = *(_QWORD *)(a1 + 40);
    if ((v6 & 0x100) == 0)
    {
      *(_QWORD *)(a1 + 40) = v6 | 0x100;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(a1 + 48), 1);
    }
  }
  return result;
}

_BYTE *WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>::operator=(_BYTE *a1, uint64_t a2)
{
  WTF *v4;
  WTF *v5;

  v4 = (WTF *)(a2 + 56);
  *a1 = *(_BYTE *)a2;
  v5 = (WTF *)(a1 + 56);
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(a1 + 8), (unsigned int *)(a2 + 8));
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(a1 + 24), (unsigned int *)(a2 + 24));
  WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(a1 + 40), (WTF *)(a2 + 40));
  WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v5, v4);
  return a1;
}

uint64_t WebCore::ScrollingStateScrollingNode::setCurrentHorizontalSnapPointIndex(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (BYTE4(a2) && *(_BYTE *)(result + 244))
  {
    if (*(_DWORD *)(result + 240) == (_DWORD)a2)
      return result;
  }
  else if ((BYTE4(a2) != 0) == (*(_BYTE *)(result + 244) != 0))
  {
    return result;
  }
  *(_DWORD *)(result + 240) = a2;
  *(_BYTE *)(result + 244) = BYTE4(a2);
  v2 = *(_QWORD *)(result + 40);
  if ((v2 & 0x200) == 0)
  {
    *(_QWORD *)(result + 40) = v2 | 0x200;
    return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(result + 48), 1);
  }
  return result;
}

uint64_t WebCore::ScrollingStateScrollingNode::setCurrentVerticalSnapPointIndex(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (BYTE4(a2) && *(_BYTE *)(result + 252))
  {
    if (*(_DWORD *)(result + 248) == (_DWORD)a2)
      return result;
  }
  else if ((BYTE4(a2) != 0) == (*(_BYTE *)(result + 252) != 0))
  {
    return result;
  }
  *(_DWORD *)(result + 248) = a2;
  *(_BYTE *)(result + 252) = BYTE4(a2);
  v2 = *(_QWORD *)(result + 40);
  if ((v2 & 0x400) == 0)
  {
    *(_QWORD *)(result + 40) = v2 | 0x400;
    return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(result + 48), 1);
  }
  return result;
}

uint64_t WebCore::ScrollingStateScrollingNode::setScrollableAreaParameters(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(unsigned __int8 *)(result + 438) != *a2
    || *(unsigned __int8 *)(result + 439) != a2[1]
    || *(unsigned __int8 *)(result + 440) != a2[2]
    || *(unsigned __int8 *)(result + 441) != a2[3]
    || *(unsigned __int8 *)(result + 442) != a2[4]
    || *(unsigned __int8 *)(result + 443) != a2[5]
    || *(unsigned __int8 *)(result + 444) != a2[6]
    || *(unsigned __int8 *)(result + 445) != a2[7]
    || *(unsigned __int8 *)(result + 446) != a2[8]
    || *(unsigned __int8 *)(result + 447) != a2[9]
    || *(unsigned __int8 *)(result + 448) != a2[10]
    || *(unsigned __int8 *)(result + 449) != a2[11])
  {
    v2 = *(_QWORD *)a2;
    *(_DWORD *)(result + 446) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(result + 438) = v2;
    v3 = *(_QWORD *)(result + 40);
    if ((v3 & 0x40) == 0)
    {
      *(_QWORD *)(result + 40) = v3 | 0x40;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(result + 48), 1);
    }
  }
  return result;
}

uint64_t WebCore::ScrollingStateScrollingNode::setKeyboardScrollData(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;

  v2 = *a2;
  v3 = a2[1];
  *(_DWORD *)(result + 528) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(result + 496) = v2;
  *(_OWORD *)(result + 512) = v3;
  v4 = *(_QWORD *)(result + 40);
  if ((v4 & 0x200000) == 0)
  {
    *(_QWORD *)(result + 40) = v4 | 0x200000;
    return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(result + 48), 1);
  }
  return result;
}

BOOL WebCore::ScrollingStateScrollingNode::hasScrollPositionRequest(WebCore::ScrollingStateScrollingNode *this)
{
  return (*((_BYTE *)this + 40) & 0x80) != 0 && *((_BYTE *)this + 452) != 2;
}

uint64_t WebCore::ScrollingStateScrollingNode::setIsMonitoringWheelEvents(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(this + 533) != a2)
  {
    *(_BYTE *)(this + 533) = a2;
    v2 = *(_QWORD *)(this + 40);
    if ((v2 & 0x800) == 0)
    {
      *(_QWORD *)(this + 40) = v2 | 0x800;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateScrollingNode::setMouseIsOverContentArea(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(this + 534) != a2)
  {
    *(_BYTE *)(this + 534) = a2;
    v2 = *(_QWORD *)(this + 40);
    if ((v2 & 0x10000) == 0)
    {
      *(_QWORD *)(this + 40) = v2 | 0x10000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(this + 48), 1);
    }
  }
  return this;
}

uint64_t WebCore::ScrollingStateScrollingNode::setMouseMovedInContentArea(uint64_t result, _OWORD *a2)
{
  uint64_t v2;

  *(_OWORD *)(result + 420) = *a2;
  v2 = *(_QWORD *)(result + 40);
  if ((v2 & 0x20000) == 0)
  {
    *(_QWORD *)(result + 40) = v2 | 0x20000;
    return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(result + 48), 1);
  }
  return result;
}

uint64_t WebCore::ScrollingStateScrollingNode::setScrollbarHoverState(uint64_t result, __int16 a2)
{
  uint64_t v2;

  if (__PAIR64__(*(unsigned __int8 *)(result + 417), *(unsigned __int8 *)(result + 416)) != __PAIR64__(HIBYTE(a2), a2))
  {
    *(_WORD *)(result + 416) = a2;
    v2 = *(_QWORD *)(result + 40);
    if ((v2 & 0x40000) == 0)
    {
      *(_QWORD *)(result + 40) = v2 | 0x40000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(result + 48), 1);
    }
  }
  return result;
}

uint64_t WebCore::ScrollingStateScrollingNode::setScrollbarEnabledState(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = 436;
  if (a2)
    v3 = 437;
  if ((*(_BYTE *)(result + v3) != 0) != a3)
  {
    if (a2)
      *(_BYTE *)(result + 437) = a3;
    else
      *(_BYTE *)(result + 436) = a3;
    v4 = *(_QWORD *)(result + 40);
    if ((v4 & 0x80000) == 0)
    {
      *(_QWORD *)(result + 40) = v4 | 0x80000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(result + 48), 1);
    }
  }
  return result;
}

uint64_t WebCore::ScrollingStateScrollingNode::setScrollbarLayoutDirection(uint64_t result, int a2)
{
  uint64_t v2;

  if ((((*(_BYTE *)(result + 532) == 0) ^ a2) & 1) == 0)
  {
    *(_BYTE *)(result + 532) = a2;
    v2 = *(_QWORD *)(result + 40);
    if ((v2 & 0x100000) == 0)
    {
      *(_QWORD *)(result + 40) = v2 | 0x100000;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(result + 48), 1);
    }
  }
  return result;
}

uint64_t WebCore::ScrollingStateScrollingNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  float v6;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  WTF::TextStream *v12;
  uint64_t result;
  float v14;
  float v15;
  uint64_t v16;

  WebCore::ScrollingStateNode::dumpProperties(a1, a2, a3);
  if (*(float *)(a1 + 152) != 0.0 || *(float *)(a1 + 156) != 0.0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(float *)(a1 + 128) > 0.0 && *(float *)(a1 + 132) > 0.0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  v6 = *(float *)(a1 + 136);
  if (v6 > 0.0 && *(float *)(a1 + 140) > 0.0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
    v6 = *(float *)(a1 + 136);
  }
  if (*(float *)(a1 + 144) != v6 || *(float *)(a1 + 148) != *(float *)(a1 + 140))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(_BYTE *)(a1 + 452) == 1)
  {
    if (*(_DWORD *)(a1 + 464) == 1)
    {
      v8 = *(float *)(a1 + 456);
      v9 = *(float *)(a1 + 460);
      if (v8 == 0.0)
        goto LABEL_60;
      v14 = *(float *)(a1 + 456);
      if (v8 < 0.0)
        v14 = -v8;
      if (v14 < 0.00000011921)
      {
LABEL_60:
        if (v9 == 0.0)
          goto LABEL_24;
        v15 = *(float *)(a1 + 460);
        if (v9 < 0.0)
          v15 = -v9;
        if (v15 < 0.00000011921)
          goto LABEL_24;
      }
LABEL_20:
      WTF::TextStream::startGroup(a2);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::endGroup(a2);
      goto LABEL_24;
    }
LABEL_62:
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ScrollingStateStickyNode::ScrollingStateStickyNode(v16);
  }
  if (!*(_BYTE *)(a1 + 452))
  {
    if (!*(_DWORD *)(a1 + 464))
    {
      if (*(float *)(a1 + 456) == 0.0 && *(float *)(a1 + 460) == 0.0)
        goto LABEL_24;
      goto LABEL_20;
    }
    goto LABEL_62;
  }
LABEL_24:
  if (*(_BYTE *)(a1 + 468))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (!*(_BYTE *)(a1 + 469))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(_BYTE *)(a1 + 470))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(_QWORD *)(a1 + 160))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(_DWORD *)(a1 + 188))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    v10 = WTF::TextStream::operator<<();
    WTF::streamSizedContainer<WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v10, (uint64_t *)(a1 + 176));
    WTF::TextStream::endGroup(a2);
  }
  if (*(_DWORD *)(a1 + 204))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    v11 = WTF::TextStream::operator<<();
    WTF::streamSizedContainer<WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v11, (uint64_t *)(a1 + 192));
    WTF::TextStream::endGroup(a2);
  }
  if (*(_BYTE *)(a1 + 244))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (*(_BYTE *)(a1 + 244))
      WTF::TextStream::operator<<();
    else
      WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(_BYTE *)(a1 + 252))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (*(_BYTE *)(a1 + 252))
      WTF::TextStream::operator<<();
    else
      WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v12 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v12, (unsigned __int8 *)(a1 + 438));
  result = WTF::TextStream::endGroup(a2);
  if (*(_BYTE *)(a1 + 533))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    result = WTF::TextStream::endGroup(a2);
  }
  if ((a3 & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 272))
    {
      WTF::TextStream::startGroup(a2);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      result = WTF::TextStream::endGroup(a2);
    }
    if (*(_QWORD *)(a1 + 312))
    {
      WTF::TextStream::startGroup(a2);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      return WTF::TextStream::endGroup(a2);
    }
  }
  return result;
}

__n128 WebCore::ScrollingStateStickyNode::ScrollingStateStickyNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v13 = *(_OWORD *)a6;
  v14 = *(_QWORD *)(a6 + 16);
  v8 = WebCore::ScrollingStateNode::ScrollingStateNode(a1, 8, a2, a3, a4, a5, &v13);
  *(_QWORD *)v8 = off_1E3404090;
  *(_QWORD *)(v8 + 128) = off_1E3403D10;
  v9 = *(_QWORD *)(a7 + 8);
  *(_DWORD *)(v8 + 144) = *(_DWORD *)(a7 + 16);
  *(_QWORD *)(v8 + 128) = off_1E34043D0;
  *(_QWORD *)(v8 + 136) = v9;
  *(_OWORD *)(v8 + 148) = *(_OWORD *)(a7 + 20);
  result = *(__n128 *)(a7 + 36);
  v11 = *(_OWORD *)(a7 + 52);
  v12 = *(_OWORD *)(a7 + 68);
  *(_OWORD *)(v8 + 212) = *(_OWORD *)(a7 + 84);
  *(_OWORD *)(v8 + 196) = v12;
  *(_OWORD *)(v8 + 180) = v11;
  *(__n128 *)(v8 + 164) = result;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v13 = *(_OWORD *)a6;
  v14 = *(_QWORD *)(a6 + 16);
  v8 = WebCore::ScrollingStateNode::ScrollingStateNode(a1, 8, a2, a3, a4, a5, &v13);
  *(_QWORD *)v8 = off_1E3404090;
  *(_QWORD *)(v8 + 128) = off_1E3403D10;
  v9 = *(_QWORD *)(a7 + 8);
  *(_DWORD *)(v8 + 144) = *(_DWORD *)(a7 + 16);
  *(_QWORD *)(v8 + 128) = off_1E34043D0;
  *(_QWORD *)(v8 + 136) = v9;
  *(_OWORD *)(v8 + 148) = *(_OWORD *)(a7 + 20);
  result = *(__n128 *)(a7 + 36);
  v11 = *(_OWORD *)(a7 + 52);
  v12 = *(_OWORD *)(a7 + 68);
  *(_OWORD *)(v8 + 212) = *(_OWORD *)(a7 + 84);
  *(_OWORD *)(v8 + 196) = v12;
  *(_OWORD *)(v8 + 180) = v11;
  *(__n128 *)(v8 + 164) = result;
  return result;
}

void WebCore::ScrollingStateStickyNode::~ScrollingStateStickyNode(CFTypeRef *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScrollingStateNode::~ScrollingStateNode(this, a2);
  WTF::fastFree(v2, v3);
}

__n128 WebCore::ScrollingStateStickyNode::clone@<Q0>(WebCore::ScrollingStateStickyNode *this@<X0>, WebCore::ScrollingStateTree *a2@<X1>, WebCore::ScrollingStateNode **a3@<X8>)
{
  WebCore::ScrollingStateNode *v6;
  WebCore::ScrollingStateNode *v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v6 = (WebCore::ScrollingStateNode *)WTF::fastMalloc((WTF *)0xE8);
  v7 = WebCore::ScrollingStateNode::ScrollingStateNode(v6, this, a2);
  *(_QWORD *)v7 = off_1E3404090;
  *((_QWORD *)v7 + 16) = off_1E3403D10;
  v8 = *((_QWORD *)this + 17);
  *((_DWORD *)v7 + 36) = *((_DWORD *)this + 36);
  *((_QWORD *)v7 + 16) = off_1E34043D0;
  *((_QWORD *)v7 + 17) = v8;
  *(_OWORD *)((char *)v7 + 148) = *(_OWORD *)((char *)this + 148);
  result = *(__n128 *)((char *)this + 164);
  v10 = *(_OWORD *)((char *)this + 180);
  v11 = *(_OWORD *)((char *)this + 196);
  *(_OWORD *)((char *)v7 + 212) = *(_OWORD *)((char *)this + 212);
  *(_OWORD *)((char *)v7 + 196) = v11;
  *(_OWORD *)((char *)v7 + 180) = v10;
  *(__n128 *)((char *)v7 + 164) = result;
  *a3 = v7;
  return result;
}

uint64_t *WTF::Ref<WebCore::ScrollingStateStickyNode,WTF::RawPtrTraits<WebCore::ScrollingStateStickyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateStickyNode>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  v5 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_7:
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 - 1;
  *(_QWORD *)(v5 + 8) = v7 - 1;
  if (v7 == 1)
  {
    v12 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v10 = v12 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = __ldxr((unsigned __int8 *)v5);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (!v10)
      WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WebCore::ScrollingStateStickyNode::applicableProperties(WebCore::ScrollingStateStickyNode *this)
{
  return 0x100000000003;
}

uint64_t WebCore::ScrollingStateStickyNode::updateConstraints(WebCore::ScrollingStateStickyNode *this, const WebCore::StickyPositionViewportConstraints *a2)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  result = WebCore::operator==((uint64_t)this + 128, (uint64_t)a2);
  if ((result & 1) == 0)
  {
    v5 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 36) = *((_DWORD *)a2 + 4);
    *((_QWORD *)this + 17) = v5;
    v6 = *(_OWORD *)((char *)a2 + 52);
    v7 = *(_OWORD *)((char *)a2 + 68);
    v8 = *(_OWORD *)((char *)a2 + 84);
    *(_OWORD *)((char *)this + 164) = *(_OWORD *)((char *)a2 + 36);
    *(_OWORD *)((char *)this + 212) = v8;
    *(_OWORD *)((char *)this + 196) = v7;
    *(_OWORD *)((char *)this + 180) = v6;
    *(_OWORD *)((char *)this + 148) = *(_OWORD *)((char *)a2 + 20);
    v9 = *((_QWORD *)this + 5);
    if ((v9 & 2) == 0)
    {
      *((_QWORD *)this + 5) = v9 | 2;
      return WebCore::ScrollingStateTree::setHasChangedProperties(*((WebCore::ScrollingStateTree **)this + 6), 1);
    }
  }
  return result;
}

float WebCore::ScrollingStateStickyNode::computeLayerPosition(WebCore::ScrollingStateStickyNode *this, const WebCore::LayoutRect *a2)
{
  uint64_t v3;
  float result;
  uint64_t v6;
  int v8;
  uint64_t v9;
  unsigned int v10;
  __int32 v11;
  float32x2_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  int v38;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  _QWORD v50[3];
  float32x2_t v51;
  __int128 v52;

  v50[0] = a2;
  v50[1] = this;
  v50[2] = &v51;
  v51 = 0;
  v3 = *((_QWORD *)this + 7);
  if (!v3)
    return *((float *)this + 55);
  v6 = *((_QWORD *)this + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_7:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v3);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
    return *((float *)this + 55);
  while (1)
  {
    v9 = v6;
    v10 = *(unsigned __int8 *)(v6 + 16);
    if (v10 > 8)
      goto LABEL_20;
    if (v10 == 8)
    {
      WebCore::ScrollingStateStickyNode::computeLayerPosition((WebCore::ScrollingStateStickyNode *)v6, a2);
      v12.i32[1] = v11;
      v51 = vadd_f32(vsub_f32(v12, *(float32x2_t *)(v6 + 220)), v51);
      v10 = *(unsigned __int8 *)(v6 + 16);
      goto LABEL_20;
    }
    if (((1 << v10) & 0x2B) != 0)
    {
      v49 = WebCore::ScrollingStateStickyNode::computeLayerPosition(WebCore::LayoutRect const&)const::$_0::operator()((uint64_t)v50, v6);
      goto LABEL_55;
    }
    if (v10 == 6)
      break;
LABEL_20:
    if (v10 == 7)
    {
      v25 = 0;
      v49 = *((float *)this + 55);
      goto LABEL_57;
    }
    v13 = *(unsigned __int8 **)(v6 + 56);
    if (!v13)
    {
      v6 = 0;
      goto LABEL_23;
    }
    v6 = *(_QWORD *)(v6 + 64);
    v22 = *(_QWORD *)(v9 + 56);
    if (__ldaxr(v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v22))
    {
      goto LABEL_46;
    }
    MEMORY[0x19AEA534C](v22);
LABEL_46:
    if (*(_QWORD *)(v22 + 24))
      ++*(_QWORD *)(v22 + 8);
    else
      v6 = 0;
    v24 = __ldxr((unsigned __int8 *)v22);
    if (v24 != 1)
    {
      __clrex();
LABEL_52:
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
      goto LABEL_23;
    }
    if (__stlxr(0, (unsigned __int8 *)v22))
      goto LABEL_52;
LABEL_23:
    v14 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v14))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v14))
    {
      goto LABEL_27;
    }
    MEMORY[0x19AEA534C](v14);
LABEL_27:
    v16 = *(_QWORD *)(v14 + 8);
    v17 = v16 - 1;
    *(_QWORD *)(v14 + 8) = v16 - 1;
    if (v16 == 1)
    {
      v21 = *(_QWORD *)(v14 + 16);
      v18 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v14 + 24) = 0;
      v19 = v21 != 0;
    }
    else
    {
      v18 = 0;
      v19 = 1;
    }
    v20 = __ldxr((unsigned __int8 *)v14);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        goto LABEL_34;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
LABEL_34:
    if (!v17)
    {
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      if (!v19)
        WTF::fastFree((WTF *)v14, a2);
    }
    if (!v6)
      return *((float *)this + 55);
  }
  v33 = *((_QWORD *)this + 6);
  v52 = *(_OWORD *)(v6 + 128);
  if ((_QWORD)v52)
  {
    v34 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v33 + 40), (uint64_t *)&v52);
    if (v34)
    {
      v35 = (_QWORD *)v34[2];
      if (v35)
      {
        v36 = v35[1];
        if (__ldaxr((unsigned __int8 *)v36))
        {
          __clrex();
          goto LABEL_81;
        }
        if (__stxr(1u, (unsigned __int8 *)v36))
LABEL_81:
          MEMORY[0x19AEA534C](v36);
        ++*(_QWORD *)(v36 + 8);
        v38 = __ldxr((unsigned __int8 *)v36);
        if (v38 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v36))
          {
LABEL_87:
            if (v35[3] != (_QWORD)v52 || v35[4] != *((_QWORD *)&v52 + 1))
            {
              __break(0xC471u);
              JUMPOUT(0x1960A27B4);
            }
            v49 = WebCore::ScrollingStateStickyNode::computeLayerPosition(WebCore::LayoutRect const&)const::$_0::operator()((uint64_t)v50, (uint64_t)v35);
            v40 = v35[1];
            if (__ldaxr((unsigned __int8 *)v40))
            {
              __clrex();
              goto LABEL_95;
            }
            if (__stxr(1u, (unsigned __int8 *)v40))
LABEL_95:
              MEMORY[0x19AEA534C](v40);
            v42 = *(_QWORD *)(v40 + 8);
            v43 = v42 - 1;
            *(_QWORD *)(v40 + 8) = v42 - 1;
            if (v42 == 1)
            {
              v48 = *(_QWORD *)(v40 + 16);
              v44 = *(_QWORD *)(v40 + 24);
              *(_QWORD *)(v40 + 24) = 0;
              v45 = v48 != 0;
            }
            else
            {
              v44 = 0;
              v45 = 1;
            }
            v46 = __ldxr((unsigned __int8 *)v40);
            if (v46 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v40))
                goto LABEL_103;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v40);
LABEL_103:
            if (!v43)
            {
              if (v44)
                (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
              if (!v45)
                WTF::fastFree((WTF *)v40, a2);
            }
LABEL_55:
            v25 = 0;
            goto LABEL_57;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v36);
        goto LABEL_87;
      }
    }
  }
  v25 = 1;
LABEL_57:
  v26 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
    goto LABEL_60;
  }
  if (__stxr(1u, (unsigned __int8 *)v26))
LABEL_60:
    MEMORY[0x19AEA534C](v26);
  v28 = *(_QWORD *)(v26 + 8);
  v29 = v28 - 1;
  *(_QWORD *)(v26 + 8) = v28 - 1;
  if (v28 == 1)
  {
    v47 = *(_QWORD *)(v26 + 16);
    v30 = *(_QWORD *)(v26 + 24);
    *(_QWORD *)(v26 + 24) = 0;
    v31 = v47 != 0;
  }
  else
  {
    v30 = 0;
    v31 = 1;
  }
  v32 = __ldxr((unsigned __int8 *)v26);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_67;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_67:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
  if (!v29)
  {
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    if (!v31)
      WTF::fastFree((WTF *)v26, a2);
  }
  result = v49;
  if (v25)
    return *((float *)this + 55);
  return result;
}

uint64_t WebCore::ScrollingStateTree::stateNodeForID@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v10 = a2;
  v11 = a3;
  if (!a2
    || (result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(result + 40), &v10)) == 0|| (v5 = *(_QWORD **)(result + 16)) == 0)
  {
    *a4 = 0;
    return result;
  }
  v6 = v5[1];
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_6:
    result = MEMORY[0x19AEA534C](v6);
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_6;
LABEL_7:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_12:
  *a4 = v5;
  if (v5[3] != v10 || v5[4] != v11)
  {
    result = 463;
    __break(0xC471u);
  }
  return result;
}

float WebCore::ScrollingStateStickyNode::computeLayerPosition(WebCore::LayoutRect const&)const::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  float32x4_t v18;

  v3 = *(_QWORD *)(a1 + 8);
  v18 = 0uLL;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 <= 1)
  {
    v18 = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)*(_QWORD *)a1), (float32x4_t)vdupq_n_s32(0x3C800000u));
    goto LABEL_29;
  }
  if (v4 != 5)
    goto LABEL_29;
  v6 = *(_QWORD *)(a2 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_8:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v18.i64[0] = *(_QWORD *)(a2 + 152);
  v18.i64[1] = *(_QWORD *)(v3 + 172);
  v9 = *(_QWORD *)(a2 + 8);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_17:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v9 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v17 = *(_QWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    v14 = v17 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v9))
    {
      if (v12)
        goto LABEL_29;
      goto LABEL_25;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
  if (v12)
    goto LABEL_29;
LABEL_25:
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (!v14)
    WTF::fastFree((WTF *)v9, (void *)a2);
LABEL_29:
  *(float32x2_t *)v18.f32 = vadd_f32(**(float32x2_t **)(a1 + 16), *(float32x2_t *)v18.f32);
  return (float)(*(float *)(v3 + 220)
               + WebCore::StickyPositionViewportConstraints::computeStickyOffset((WebCore::StickyPositionViewportConstraints *)(v3 + 128), (const WebCore::FloatRect *)&v18))- *(float *)(v3 + 212);
}

void WebCore::ScrollingStateStickyNode::reconcileLayerPositionForViewportRect(uint64_t a1, const WebCore::LayoutRect *a2, unsigned int a3)
{
  _QWORD *v5;
  BOOL v6;

  WebCore::ScrollingStateStickyNode::computeLayerPosition((WebCore::ScrollingStateStickyNode *)a1, a2);
  if (*(_DWORD *)(a1 + 120) == 1)
  {
    v5 = *(_QWORD **)(a1 + 88);
    if (v5)
      v6 = a3 > 2;
    else
      v6 = 1;
    if (!v6)
      (*(void (**)(void))(*v5 + 8 * a3 + 128))();
  }
}

uint64_t WebCore::ScrollingStateStickyNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  WTF::TextStream::operator<<();
  WebCore::ScrollingStateNode::dumpProperties(a1, a2, a3);
  if (!*(_DWORD *)(a1 + 144))
    goto LABEL_12;
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v6 = *(_DWORD *)(a1 + 144);
  if ((v6 & 1) != 0)
  {
    WTF::TextStream::operator<<();
    v6 = *(_DWORD *)(a1 + 144);
    if ((v6 & 2) == 0)
    {
LABEL_4:
      if ((v6 & 4) == 0)
        goto LABEL_5;
      goto LABEL_15;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_4;
  }
  WTF::TextStream::operator<<();
  v6 = *(_DWORD *)(a1 + 144);
  if ((v6 & 4) == 0)
  {
LABEL_5:
    if ((v6 & 8) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_15:
  WTF::TextStream::operator<<();
  if ((*(_DWORD *)(a1 + 144) & 8) != 0)
LABEL_6:
    WTF::TextStream::operator<<();
LABEL_7:
  WTF::TextStream::endGroup(a2);
  v7 = *(_DWORD *)(a1 + 144);
  if ((v7 & 1) != 0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
    v7 = *(_DWORD *)(a1 + 144);
    if ((v7 & 2) == 0)
    {
LABEL_9:
      if ((v7 & 4) == 0)
        goto LABEL_10;
LABEL_19:
      WTF::TextStream::startGroup(a2);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::endGroup(a2);
      if ((*(_DWORD *)(a1 + 144) & 8) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_9;
  }
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  v7 = *(_DWORD *)(a1 + 144);
  if ((v7 & 4) != 0)
    goto LABEL_19;
LABEL_10:
  if ((v7 & 8) != 0)
  {
LABEL_11:
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
LABEL_12:
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v8 = WTF::TextStream::operator<<();
  WebCore::operator<<(v8);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v9 = WTF::TextStream::operator<<();
  WebCore::operator<<(v9);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v10 = WTF::TextStream::operator<<();
  WebCore::operator<<(v10);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(a2);
}

uint64_t *WebCore::ScrollingStateTree::createNode(uint64_t *a1, _DWORD *a2, int a3, uint64_t a4, uint64_t a5)
{
  char v9;
  uint64_t v10;
  uint64_t *result;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char v25;
  uint64_t v26[2];

  v26[0] = a4;
  v26[1] = a5;
  v25 = a3;
  v9 = a3;
  switch(a3)
  {
    case 0:
    case 1:
      v10 = WTF::fastMalloc((WTF *)0x370);
      result = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
      *(_BYTE *)result = 0;
      *(_OWORD *)(result + 1) = xmmword_19689B170;
      result[3] = v10;
      *(_QWORD *)(v10 + 8) = result;
      *(_BYTE *)(v10 + 16) = v9;
      *(_QWORD *)(v10 + 24) = a4;
      *(_QWORD *)(v10 + 32) = a5;
      *(_QWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = a2;
      ++*a2;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_DWORD *)(v10 + 120) = 0;
      *(_BYTE *)(v10 + 244) = 0;
      *(_BYTE *)(v10 + 248) = 0;
      *(_BYTE *)(v10 + 252) = 0;
      *(_DWORD *)(v10 + 288) = 0;
      *(_OWORD *)(v10 + 256) = 0u;
      *(_OWORD *)(v10 + 272) = 0u;
      *(_DWORD *)(v10 + 328) = 0;
      *(_OWORD *)(v10 + 296) = 0u;
      *(_OWORD *)(v10 + 312) = 0u;
      *(_DWORD *)(v10 + 368) = 0;
      *(_OWORD *)(v10 + 336) = 0u;
      *(_OWORD *)(v10 + 352) = 0u;
      *(_OWORD *)(v10 + 376) = 0u;
      *(_OWORD *)(v10 + 392) = 0u;
      *(_DWORD *)(v10 + 408) = 0;
      *(_WORD *)(v10 + 416) = 0;
      *(_OWORD *)(v10 + 153) = 0u;
      *(_OWORD *)(v10 + 128) = 0u;
      *(_OWORD *)(v10 + 144) = 0u;
      *(_BYTE *)(v10 + 240) = 0;
      *(_OWORD *)(v10 + 208) = 0u;
      *(_OWORD *)(v10 + 224) = 0u;
      *(_OWORD *)(v10 + 176) = 0u;
      *(_OWORD *)(v10 + 192) = 0u;
      *(_OWORD *)(v10 + 420) = 0u;
      *(_DWORD *)(v10 + 436) = 16842752;
      *(_WORD *)(v10 + 448) = 0;
      *(_QWORD *)(v10 + 440) = 0;
      *(_BYTE *)(v10 + 452) = 0;
      *(_QWORD *)(v10 + 456) = 0;
      *(_DWORD *)(v10 + 464) = 0;
      *(_WORD *)(v10 + 468) = 256;
      *(_BYTE *)(v10 + 470) = 0;
      *(_BYTE *)(v10 + 472) = 0;
      *(_BYTE *)(v10 + 492) = 0;
      *(_BYTE *)(v10 + 496) = 0;
      *(_BYTE *)(v10 + 500) = 0;
      *(_BYTE *)(v10 + 528) = 0;
      *(_WORD *)(v10 + 532) = 0;
      *(_BYTE *)(v10 + 534) = 0;
      ++a2[16];
      *(_QWORD *)v10 = off_1E3403E90;
      *(_DWORD *)(v10 + 568) = 0;
      *(_OWORD *)(v10 + 536) = 0u;
      *(_OWORD *)(v10 + 552) = 0u;
      *(_DWORD *)(v10 + 608) = 0;
      *(_OWORD *)(v10 + 576) = 0u;
      *(_OWORD *)(v10 + 592) = 0u;
      *(_DWORD *)(v10 + 648) = 0;
      *(_OWORD *)(v10 + 616) = 0u;
      *(_OWORD *)(v10 + 632) = 0u;
      *(_DWORD *)(v10 + 688) = 0;
      *(_OWORD *)(v10 + 656) = 0u;
      *(_OWORD *)(v10 + 672) = 0u;
      *(_DWORD *)(v10 + 728) = 0;
      *(_OWORD *)(v10 + 696) = 0u;
      *(_OWORD *)(v10 + 712) = 0u;
      *(_OWORD *)(v10 + 736) = 0u;
      *(_OWORD *)(v10 + 752) = 0u;
      *(_DWORD *)(v10 + 768) = 0;
      *(_BYTE *)(v10 + 848) = 0;
      *(_OWORD *)(v10 + 776) = 0u;
      *(_OWORD *)(v10 + 792) = 0u;
      *(_OWORD *)(v10 + 808) = 0u;
      *(_OWORD *)(v10 + 824) = 0u;
      *(_BYTE *)(v10 + 840) = 0;
      *(_DWORD *)(v10 + 852) = 1065353216;
      *(_DWORD *)(v10 + 871) = 0;
      *(_OWORD *)(v10 + 856) = 0u;
      goto LABEL_3;
    case 2:
      v10 = WTF::fastMalloc((WTF *)0x90);
      result = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
      *(_BYTE *)result = 0;
      *(_OWORD *)(result + 1) = xmmword_19689B170;
      result[3] = v10;
      *(_QWORD *)(v10 + 8) = result;
      *(_BYTE *)(v10 + 16) = 2;
      *(_QWORD *)(v10 + 24) = a4;
      *(_QWORD *)(v10 + 32) = a5;
      *(_QWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = a2;
      ++*a2;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_DWORD *)(v10 + 120) = 0;
      *(_QWORD *)v10 = off_1E3403E50;
      *(_BYTE *)(v10 + 128) = 0;
      *(_BYTE *)(v10 + 136) = 0;
      goto LABEL_3;
    case 3:
      WebCore::ScrollingStatePluginScrollingNode::create<WebCore::ScrollingStateTree &,WebCore::ScrollingNodeType &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &>(&v24, a2, &v25, v26);
      v18 = v24;
      v24 = 0;
      *a1 = v18;
      return WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(&v24, v19);
    case 4:
      WebCore::ScrollingStatePluginHostingNode::create(a2, a4, a5, &v24);
      v20 = v24;
      v24 = 0;
      *a1 = v20;
      return WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(&v24, v21);
    case 5:
      v10 = WTF::fastMalloc((WTF *)0x218);
      result = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
      *(_BYTE *)result = 0;
      *(_OWORD *)(result + 1) = xmmword_19689B170;
      result[3] = v10;
      *(_QWORD *)(v10 + 8) = result;
      *(_BYTE *)(v10 + 16) = 5;
      *(_QWORD *)(v10 + 24) = a4;
      *(_QWORD *)(v10 + 32) = a5;
      *(_QWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = a2;
      ++*a2;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_DWORD *)(v10 + 120) = 0;
      *(_BYTE *)(v10 + 244) = 0;
      *(_BYTE *)(v10 + 248) = 0;
      *(_BYTE *)(v10 + 252) = 0;
      *(_DWORD *)(v10 + 288) = 0;
      *(_OWORD *)(v10 + 256) = 0u;
      *(_OWORD *)(v10 + 272) = 0u;
      *(_DWORD *)(v10 + 328) = 0;
      *(_OWORD *)(v10 + 296) = 0u;
      *(_OWORD *)(v10 + 312) = 0u;
      *(_DWORD *)(v10 + 368) = 0;
      *(_OWORD *)(v10 + 336) = 0u;
      *(_OWORD *)(v10 + 352) = 0u;
      *(_OWORD *)(v10 + 376) = 0u;
      *(_OWORD *)(v10 + 392) = 0u;
      *(_DWORD *)(v10 + 408) = 0;
      *(_WORD *)(v10 + 416) = 0;
      *(_OWORD *)(v10 + 153) = 0u;
      *(_OWORD *)(v10 + 128) = 0u;
      *(_OWORD *)(v10 + 144) = 0u;
      *(_BYTE *)(v10 + 240) = 0;
      *(_OWORD *)(v10 + 208) = 0u;
      *(_OWORD *)(v10 + 224) = 0u;
      *(_OWORD *)(v10 + 176) = 0u;
      *(_OWORD *)(v10 + 192) = 0u;
      *(_QWORD *)(v10 + 420) = 0;
      *(_QWORD *)(v10 + 428) = 0;
      *(_DWORD *)(v10 + 436) = 16842752;
      *(_WORD *)(v10 + 448) = 0;
      *(_QWORD *)(v10 + 440) = 0;
      *(_BYTE *)(v10 + 452) = 0;
      *(_QWORD *)(v10 + 456) = 0;
      *(_DWORD *)(v10 + 464) = 0;
      *(_WORD *)(v10 + 468) = 256;
      *(_BYTE *)(v10 + 470) = 0;
      *(_BYTE *)(v10 + 472) = 0;
      *(_BYTE *)(v10 + 492) = 0;
      *(_BYTE *)(v10 + 496) = 0;
      *(_BYTE *)(v10 + 500) = 0;
      *(_BYTE *)(v10 + 528) = 0;
      *(_WORD *)(v10 + 532) = 0;
      *(_BYTE *)(v10 + 534) = 0;
      ++a2[16];
      *(_QWORD *)v10 = off_1E3403F50;
LABEL_3:
      *a1 = v10;
      break;
    case 6:
      WebCore::ScrollingStateOverflowScrollProxyNode::create<WebCore::ScrollingStateTree &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &>(&v24, a2, v26);
      v12 = v24;
      v24 = 0;
      *a1 = v12;
      result = WTF::Ref<WebCore::ScrollingStateStickyNode,WTF::RawPtrTraits<WebCore::ScrollingStateStickyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateStickyNode>>::~Ref(&v24, v13);
      break;
    case 8:
      WebCore::ScrollingStateStickyNode::create<WebCore::ScrollingStateTree &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &>(&v24, a2, v26);
      v14 = v24;
      v24 = 0;
      *a1 = v14;
      result = WTF::Ref<WebCore::ScrollingStateStickyNode,WTF::RawPtrTraits<WebCore::ScrollingStateStickyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateStickyNode>>::~Ref(&v24, v15);
      break;
    case 9:
      WebCore::ScrollingStatePositionedNode::create<WebCore::ScrollingStateTree &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &>(&v24, a2, v26);
      v22 = v24;
      v24 = 0;
      *a1 = v22;
      result = WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(&v24, v23);
      break;
    default:
      WebCore::ScrollingStateFixedNode::create<WebCore::ScrollingStateTree &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &>(&v24, a2, v26);
      v16 = v24;
      v24 = 0;
      *a1 = v16;
      result = WTF::Ref<WebCore::ScrollingStateStickyNode,WTF::RawPtrTraits<WebCore::ScrollingStateStickyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateStickyNode>>::~Ref(&v24, v17);
      break;
  }
  return result;
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::create<WebCore::ScrollingStateTree &,WebCore::ScrollingNodeType &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &>(uint64_t *a1, _DWORD *a2, char *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0x370);
  result = WebCore::ScrollingStateFrameScrollingNode::ScrollingStateFrameScrollingNode(v8, a2, *a3, *a4, a4[1]);
  *a1 = result;
  return result;
}

_QWORD *WTF::Ref<WebCore::ScrollingStateFrameScrollingNode,WTF::RawPtrTraits<WebCore::ScrollingStateFrameScrollingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateFrameScrollingNode>>::~Ref(_QWORD *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *result;
  *result = 0;
  if (!v2)
    return result;
  v11 = result;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_7:
  v5 = *(_QWORD *)(v3 + 8);
  v6 = v5 - 1;
  *(_QWORD *)(v3 + 8) = v5 - 1;
  if (v5 == 1)
  {
    v10 = *(_QWORD *)(v3 + 16);
    v7 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v8 = v10 != 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v9 = __ldxr((unsigned __int8 *)v3);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  result = v11;
  if (!v6)
  {
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    result = v11;
    if (!v8)
    {
      WTF::fastFree((WTF *)v3, a2);
      return v11;
    }
  }
  return result;
}

double WebCore::ScrollingStatePluginScrollingNode::create<WebCore::ScrollingStateTree &,WebCore::ScrollingNodeType &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &>(uint64_t *a1, _DWORD *a2, _BYTE *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v8 = WTF::fastMalloc((WTF *)0x218);
  LOBYTE(a3) = *a3;
  v10 = *a4;
  v9 = a4[1];
  v11 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v11 = 0;
  *(_OWORD *)(v11 + 8) = xmmword_19689B170;
  *(_QWORD *)(v11 + 24) = v8;
  *(_BYTE *)(v8 + 16) = (_BYTE)a3;
  *(_QWORD *)(v8 + 24) = v10;
  *(_QWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = a2;
  ++*a2;
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_DWORD *)(v8 + 120) = 0;
  *(_BYTE *)(v8 + 244) = 0;
  *(_BYTE *)(v8 + 248) = 0;
  *(_BYTE *)(v8 + 252) = 0;
  *(_DWORD *)(v8 + 288) = 0;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_DWORD *)(v8 + 328) = 0;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_DWORD *)(v8 + 368) = 0;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_DWORD *)(v8 + 408) = 0;
  *(_WORD *)(v8 + 416) = 0;
  *(_OWORD *)(v8 + 153) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_BYTE *)(v8 + 240) = 0;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_QWORD *)(v8 + 420) = 0;
  *(_QWORD *)(v8 + 428) = 0;
  *(_DWORD *)(v8 + 436) = 16842752;
  *(_WORD *)(v8 + 448) = 0;
  *(_QWORD *)(v8 + 440) = 0;
  *(_BYTE *)(v8 + 452) = 0;
  *(_QWORD *)(v8 + 456) = 0;
  *(_DWORD *)(v8 + 464) = 0;
  *(_WORD *)(v8 + 468) = 256;
  *(_BYTE *)(v8 + 470) = 0;
  *(_BYTE *)(v8 + 472) = 0;
  *(_BYTE *)(v8 + 492) = 0;
  *(_BYTE *)(v8 + 496) = 0;
  *(_BYTE *)(v8 + 500) = 0;
  *(_BYTE *)(v8 + 528) = 0;
  *(_WORD *)(v8 + 532) = 0;
  *(_BYTE *)(v8 + 534) = 0;
  ++a2[16];
  *(_QWORD *)v8 = off_1E3403FD0;
  *(_QWORD *)(v8 + 8) = v11;
  *a1 = v8;
  return result;
}

uint64_t WebCore::ScrollingStateOverflowScrollProxyNode::create<WebCore::ScrollingStateTree &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &>(uint64_t *a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x90);
  result = WebCore::ScrollingStateOverflowScrollProxyNode::ScrollingStateOverflowScrollProxyNode(v6, a2, *a3, a3[1]);
  *a1 = result;
  return result;
}

uint64_t WebCore::ScrollingStateFixedNode::create<WebCore::ScrollingStateTree &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &>(uint64_t *a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0xB0);
  result = WebCore::ScrollingStateFixedNode::ScrollingStateFixedNode(v6, a2, *a3, a3[1]);
  *a1 = result;
  return result;
}

double WebCore::ScrollingStateStickyNode::create<WebCore::ScrollingStateTree &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &>(uint64_t *a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  double result;

  v6 = WTF::fastMalloc((WTF *)0xE8);
  v7 = WebCore::ScrollingStateNode::ScrollingStateNode(v6, 8, a2, *a3, a3[1]);
  *(_QWORD *)v7 = off_1E3404090;
  *(_DWORD *)(v7 + 144) = 0;
  *(_QWORD *)(v7 + 128) = off_1E34043D0;
  *(_QWORD *)(v7 + 136) = 0;
  result = 0.0;
  *(_OWORD *)(v7 + 148) = 0u;
  *(_OWORD *)(v7 + 164) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(_OWORD *)(v7 + 196) = 0u;
  *(_OWORD *)(v7 + 212) = 0u;
  *a1 = v7;
  return result;
}

double WebCore::ScrollingStatePositionedNode::create<WebCore::ScrollingStateTree &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &>(uint64_t *a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v6 = WTF::fastMalloc((WTF *)0xA0);
  v8 = *a3;
  v7 = a3[1];
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v9 = 0;
  *(_OWORD *)(v9 + 8) = xmmword_19689B170;
  *(_QWORD *)(v9 + 24) = v6;
  *(_BYTE *)(v6 + 16) = 9;
  *(_QWORD *)(v6 + 24) = v8;
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = a2;
  ++*a2;
  result = 0.0;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_DWORD *)(v6 + 120) = 0;
  *(_QWORD *)v6 = off_1E3404010;
  *(_QWORD *)(v6 + 8) = v9;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *a1 = v6;
  return result;
}

unint64_t WebCore::ScrollingStateTree::createUnparentedNode(uint64_t *a1, int a2, WebCore::ScrollingCoordinator *a3, unint64_t a4)
{
  unint64_t v6;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v15;
  void *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v58;
  int v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  WebCore::ScrollingCoordinator *v71;
  unint64_t v72;
  unint64_t v73;
  WebCore::ScrollingCoordinator *v74;
  unint64_t v75;
  __int128 v76;

  v6 = a4;
  v74 = a3;
  v75 = a4;
  v72 = (unint64_t)a3;
  if (!a3)
    goto LABEL_29;
  v8 = (unint64_t)a3;
  v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1 + 5, (uint64_t *)&v74);
  if (!v9)
    goto LABEL_29;
  v10 = v9[2];
  if (!v10)
    goto LABEL_29;
  v11 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](v11);
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)v11))
    goto LABEL_6;
LABEL_7:
  ++*(_QWORD *)(v11 + 8);
  v13 = __ldxr((unsigned __int8 *)v11);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
  if (*(WebCore::ScrollingCoordinator **)(v10 + 24) != v74 || *(_QWORD *)(v10 + 32) != v75)
  {
    __break(0xC471u);
    JUMPOUT(0x1960A3D04);
  }
  v15 = *(unsigned __int8 *)(v10 + 16);
  if (v15 == a2)
  {
    WebCore::ScrollingStateTree::unparentNode((uint64_t)a1, v8, a4);
  }
  else
  {
    WebCore::ScrollingStateTree::unparentChildrenAndDestroyNode(a1, v8, a4);
    v17 = (unsigned __int8 *)a1[1];
    if (v17)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::ScrollingStateNode>(v17, a1[2], &v74);
      if (v74)
      {
        WebCore::ScrollingCoordinator::uniqueScrollingNodeID(v74);
        v72 = v70;
        v6 = (unint64_t)v16;
        v71 = v74;
        v74 = 0;
        if (v71)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v71 + 1, v16);
      }
    }
  }
  v18 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
LABEL_22:
    MEMORY[0x19AEA534C](v18);
    goto LABEL_23;
  }
  if (__stxr(1u, (unsigned __int8 *)v18))
    goto LABEL_22;
LABEL_23:
  v20 = *(_QWORD *)(v18 + 8);
  v21 = v20 - 1;
  *(_QWORD *)(v18 + 8) = v20 - 1;
  if (v20 == 1)
  {
    v67 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    v23 = v67 != 0;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v24 = __ldxr((unsigned __int8 *)v18);
  if (v24 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v18))
      goto LABEL_27;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_27:
  if (!v21)
  {
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if (!v23)
      WTF::fastFree((WTF *)v18, v16);
  }
  if (v15 != a2)
  {
LABEL_29:
    WebCore::ScrollingStateTree::createNode((uint64_t *)&v73, a1, a2, v72, v6);
    v76 = *(_OWORD *)(v73 + 24);
    WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::add<WebCore::ScrollingStateNode&>(a1 + 5, &v76, v73, (uint64_t)&v74);
    v28 = a1[6];
    v27 = a1 + 6;
    v26 = v28;
    if (v28
      || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v27, 0), (v26 = *v27) != 0))
    {
      v29 = *(_DWORD *)(v26 - 8);
    }
    else
    {
      v29 = 0;
    }
    v30 = (v72 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v72 - 1640531527) << 16) ^ ((unsigned __int16)v72
                                                                                               - 1640531527);
    v31 = (v72 >> 37) & 0x7FFF800 ^ ((v30 + WORD2(v72) + (v30 >> 11)) << 16) ^ (v30 + WORD2(v72) + (v30 >> 11));
    v32 = (v6 >> 5) & 0x7FFF800 ^ ((v31 + (unsigned __int16)v6 + (v31 >> 11)) << 16) ^ (v31 + (unsigned __int16)v6 + (v31 >> 11));
    v33 = (v6 >> 37) & 0x7FFF800 ^ ((v32 + WORD2(v6) + (v32 >> 11)) << 16) ^ (v32 + WORD2(v6) + (v32 >> 11));
    v34 = (v33 + (v33 >> 11)) ^ (8 * (v33 + (v33 >> 11)));
    v35 = (v34 + (v34 >> 5)) ^ (4 * (v34 + (v34 >> 5)));
    v36 = (v35 + (v35 >> 15)) ^ ((v35 + (v35 >> 15)) << 10);
    if (!v36)
      v36 = 0x800000;
    v37 = v29 & v36;
    v38 = (unint64_t *)(v26 + 24 * (v29 & v36));
    v40 = *v38;
    v39 = v38[1];
    if (*(_OWORD *)v38 != 0)
    {
      v58 = 0;
      v59 = 1;
      while (v40 != v72 || v39 != v6)
      {
        if (v39 == -1)
          v58 = v38;
        v37 = (v37 + v59) & v29;
        v38 = (unint64_t *)(v26 + 24 * v37);
        v40 = *v38;
        v39 = v38[1];
        ++v59;
        if (*(_OWORD *)v38 == 0)
        {
          if (v58)
          {
            *v58 = 0;
            v58[1] = 0;
            v58[2] = 0;
            --*(_DWORD *)(*v27 - 16);
            v38 = v58;
          }
          goto LABEL_34;
        }
      }
      goto LABEL_49;
    }
LABEL_34:
    *v38 = v72;
    v38[1] = v6;
    v41 = v73;
    v73 = 0;
    v42 = v38[2];
    v38[2] = v41;
    if (!v42)
    {
LABEL_43:
      v50 = *v27;
      if (*v27)
        v51 = *(_DWORD *)(v50 - 12) + 1;
      else
        v51 = 1;
      *(_DWORD *)(v50 - 12) = v51;
      v52 = *v27;
      if (*v27)
        v53 = *(_DWORD *)(v52 - 12);
      else
        v53 = 0;
      v54 = (*(_DWORD *)(v52 - 16) + v53);
      v55 = *(unsigned int *)(v52 - 4);
      if (v55 > 0x400)
      {
        if (v55 > 2 * v54)
          goto LABEL_49;
      }
      else if (3 * v55 > 4 * v54)
      {
        goto LABEL_49;
      }
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v27, v38);
LABEL_49:
      v56 = v73;
      v73 = 0;
      if (!v56)
        return v72;
      v60 = *(_QWORD *)(v56 + 8);
      if (__ldaxr((unsigned __int8 *)v60))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v60))
      {
LABEL_81:
        v62 = *(_QWORD *)(v60 + 8);
        v63 = v62 - 1;
        *(_QWORD *)(v60 + 8) = v62 - 1;
        if (v62 == 1)
        {
          v69 = *(_QWORD *)(v60 + 16);
          v64 = *(_QWORD *)(v60 + 24);
          *(_QWORD *)(v60 + 24) = 0;
          v65 = v69 != 0;
        }
        else
        {
          v64 = 0;
          v65 = 1;
        }
        v66 = __ldxr((unsigned __int8 *)v60);
        if (v66 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v60))
          {
LABEL_92:
            if (!v63)
            {
              if (v64)
                (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
              if (!v65)
                WTF::fastFree((WTF *)v60, v25);
            }
            return v72;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v60);
        goto LABEL_92;
      }
      MEMORY[0x19AEA534C](v60);
      goto LABEL_81;
    }
    v43 = *(_QWORD *)(v42 + 8);
    if (__ldaxr((unsigned __int8 *)v43))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v43))
    {
LABEL_38:
      v45 = *(_QWORD *)(v43 + 8);
      v46 = v45 - 1;
      *(_QWORD *)(v43 + 8) = v45 - 1;
      if (v45 == 1)
      {
        v68 = *(_QWORD *)(v43 + 16);
        v47 = *(_QWORD *)(v43 + 24);
        *(_QWORD *)(v43 + 24) = 0;
        v48 = v68 != 0;
      }
      else
      {
        v47 = 0;
        v48 = 1;
      }
      v49 = __ldxr((unsigned __int8 *)v43);
      if (v49 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v43))
          goto LABEL_42;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v43);
LABEL_42:
      if (!v46)
      {
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        if (!v48)
          WTF::fastFree((WTF *)v43, v25);
      }
      goto LABEL_43;
    }
    MEMORY[0x19AEA534C](v43);
    goto LABEL_38;
  }
  return v8;
}

uint64_t WebCore::ScrollingStateTree::unparentNode(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  int v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 **v20;
  uint64_t v21[2];

  v21[0] = a2;
  v21[1] = a3;
  if (!a2)
    return result;
  v3 = result;
  result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(result + 40), v21);
  if (!result)
    return result;
  v5 = *(unsigned __int8 ***)(result + 16);
  if (!v5)
    return result;
  v6 = v5[1];
  if (__ldaxr(v6))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](v6);
    goto LABEL_7;
  }
  if (__stxr(1u, v6))
    goto LABEL_6;
LABEL_7:
  ++*((_QWORD *)v6 + 1);
  v8 = __ldxr(v6);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v6))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v20 = v5;
  if (v5 == *(unsigned __int8 ***)(v3 + 56))
  {
    *(_QWORD *)(v3 + 56) = 0;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v5 + 1, v4);
  }
  WebCore::ScrollingStateNode::removeFromParent((WebCore::ScrollingStateNode *)v5);
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::add<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>((uint64_t *)(v3 + 48), v21, (unint64_t *)&v20, (uint64_t)&v19);
  v10 = (unint64_t)v20;
  v20 = 0;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
LABEL_18:
      v13 = *(_QWORD *)(v11 + 8);
      v14 = v13 - 1;
      *(_QWORD *)(v11 + 8) = v13 - 1;
      if (v13 == 1)
      {
        v18 = *(_QWORD *)(v11 + 16);
        v15 = *(_QWORD *)(v11 + 24);
        *(_QWORD *)(v11 + 24) = 0;
        v16 = v18 != 0;
      }
      else
      {
        v15 = 0;
        v16 = 1;
      }
      v17 = __ldxr((unsigned __int8 *)v11);
      if (v17 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v11))
          goto LABEL_22;
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_22:
      if (!v14)
      {
        if (v15)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        if (!v16)
          return WTF::fastFree((WTF *)v11, v9);
      }
      return result;
    }
    result = MEMORY[0x19AEA534C](v11);
    goto LABEL_18;
  }
  return result;
}

uint64_t *WebCore::ScrollingStateTree::unparentChildrenAndDestroyNode(uint64_t *result, unint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  _QWORD v43[3];
  __int128 v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  int v48;

  if (!a2)
    return result;
  v3 = result;
  v4 = result + 5;
  v5 = result[5];
  if (!v5)
    return result;
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(result[5], a2, a3);
  if (!result || result == (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4)))
    return result;
  v9 = result;
  v10 = result[2];
  if (v10 && (result[2] = 0, (v5 = *v4) == 0))
  {
    v11 = 0;
  }
  else
  {
    v11 = (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
    if (v11 == result)
      goto LABEL_14;
  }
  if (v11 != result)
    result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v4, result);
LABEL_14:
  if (!v10)
    return result;
  if (v10 == v3[7])
  {
    v3[7] = 0;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v10 + 8), v9);
  }
  v12 = *(uint64_t **)(v10 + 72);
  v46 = v12;
  v13 = *(unsigned int *)(v10 + 84);
  v47 = *(_DWORD *)(v10 + 80);
  v48 = v13;
  v43[0] = 0;
  *(_QWORD *)(v10 + 72) = 0;
  v43[1] = 0;
  *(_QWORD *)(v10 + 80) = 0;
  WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v9);
  if ((_DWORD)v13)
  {
    v27 = 8 * v13;
    while (1)
    {
      v28 = *v12;
      v29 = *(_QWORD *)(*v12 + 8);
      if (__ldaxr((unsigned __int8 *)v29))
        break;
      if (__stxr(1u, (unsigned __int8 *)v29))
        goto LABEL_46;
LABEL_47:
      ++*(_QWORD *)(v29 + 8);
      v31 = __ldxr((unsigned __int8 *)v29);
      if (v31 != 1)
      {
        __clrex();
LABEL_51:
        WTF::Lock::unlockSlow((WTF::Lock *)v29);
        goto LABEL_52;
      }
      if (__stlxr(0, (unsigned __int8 *)v29))
        goto LABEL_51;
LABEL_52:
      v45 = v28;
      WebCore::ScrollingStateNode::removeFromParent((WebCore::ScrollingStateNode *)v28);
      v44 = *(_OWORD *)(v28 + 24);
      WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>((uint64_t)v43, v3 + 6, (unint64_t *)&v44, &v45);
      v32 = v45;
      v45 = 0;
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 8);
        if (__ldaxr((unsigned __int8 *)v33))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v33))
        {
LABEL_60:
          v35 = *(_QWORD *)(v33 + 8);
          v36 = v35 - 1;
          *(_QWORD *)(v33 + 8) = v35 - 1;
          if (v35 == 1)
          {
            v42 = *(_QWORD *)(v33 + 24);
            v40 = *(_QWORD *)(v33 + 16);
            *(_QWORD *)(v33 + 24) = 0;
            v37 = v40 != 0;
          }
          else
          {
            v42 = 0;
            v37 = 1;
          }
          v41 = v37;
          v38 = __ldxr((unsigned __int8 *)v33);
          if (v38 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v33))
            {
LABEL_65:
              if (!v36)
              {
                if (v42)
                  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
                if (!v41)
                  WTF::fastFree((WTF *)v33, v14);
              }
              goto LABEL_53;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v33);
          goto LABEL_65;
        }
        MEMORY[0x19AEA534C](v33);
        goto LABEL_60;
      }
LABEL_53:
      ++v12;
      v27 -= 8;
      if (!v27)
        goto LABEL_18;
    }
    __clrex();
LABEL_46:
    MEMORY[0x19AEA534C](v29);
    goto LABEL_47;
  }
LABEL_18:
  WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v14);
  WebCore::ScrollingStateNode::removeFromParent((WebCore::ScrollingStateNode *)v10);
  v15 = v3[6];
  if (v15)
  {
    v16 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v3[6], a2, a3);
    if (v16)
    {
      if (v16 != (uint64_t *)(v15 + 24 * *(unsigned int *)(v15 - 4)))
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove((uint64_t)(v3 + 6), v16);
    }
  }
  v17 = *v4;
  if (*v4)
  {
    v18 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*v4, *(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32));
    if (v18)
    {
      if (v18 != (uint64_t *)(v17 + 24 * *(unsigned int *)(v17 - 4)))
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v4, v18);
    }
  }
  result = (uint64_t *)WebCore::ScrollingStateTree::setHasChangedProperties((WebCore::ScrollingStateTree *)v3, 1);
  v20 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
LABEL_28:
    result = (uint64_t *)MEMORY[0x19AEA534C](v20);
    goto LABEL_29;
  }
  if (__stxr(1u, (unsigned __int8 *)v20))
    goto LABEL_28;
LABEL_29:
  v22 = *(_QWORD *)(v20 + 8);
  v23 = v22 - 1;
  *(_QWORD *)(v20 + 8) = v22 - 1;
  if (v22 == 1)
  {
    v39 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v20 + 24) = 0;
    v25 = v39 != 0;
  }
  else
  {
    v24 = 0;
    v25 = 1;
  }
  v26 = __ldxr((unsigned __int8 *)v20);
  if (v26 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v20))
      goto LABEL_33;
  }
  else
  {
    __clrex();
  }
  result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v20);
LABEL_33:
  if (!v23)
  {
    if (v24)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if (!v25)
      return (uint64_t *)WTF::fastFree((WTF *)v20, v19);
  }
  return result;
}

unint64_t WebCore::ScrollingStateTree::insertNode(uint64_t *a1, void *a2, WebCore::ScrollingCoordinator *a3, unint64_t a4, WebCore::ScrollingCoordinator *a5, unint64_t a6, unint64_t a7)
{
  unint64_t v7;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  int v15;
  uint64_t *v17;
  uint64_t v18;
  int v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  WebCore::ScrollingCoordinator *v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  uint64_t *v29;
  char v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  WebCore::ScrollingStateNode *v65;
  WebCore::ScrollingCoordinator *v66;
  uint64_t v67;
  int v69;
  uint64_t v70;
  void *v71;
  WebCore::ScrollingCoordinator *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  int v79;
  void *v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  int v87;
  uint64_t *v89;
  uint64_t v90;
  int v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  int v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  unsigned __int8 *v108;
  void *v109;
  unint64_t v110;
  WebCore::ScrollingCoordinator *v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 v124;
  unint64_t v125;
  unint64_t v126;
  WebCore::ScrollingCoordinator *v127;
  unint64_t v128;
  __int128 v129;

  v9 = a1;
  v125 = (unint64_t)a3;
  v126 = a4;
  v124 = a2;
  v127 = a3;
  v128 = a4;
  if (!a3
    || (v10 = a7,
        (v12 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1 + 5, (uint64_t *)&v127)) == 0)|| (v13 = v12[2]) == 0)
  {
    v29 = v9;
    v13 = 0;
    goto LABEL_90;
  }
  v7 = *(_QWORD *)(v13 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](v7);
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_6;
LABEL_7:
  ++*(_QWORD *)(v7 + 8);
  v15 = __ldxr((unsigned __int8 *)v7);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (*(WebCore::ScrollingCoordinator **)(v13 + 24) != v127 || *(_QWORD *)(v13 + 32) != v128)
  {
    __break(0xC471u);
    JUMPOUT(0x1960A4B84);
  }
  v127 = a5;
  v128 = a6;
  if (!a5
    || (v17 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v9 + 5, (uint64_t *)&v127)) == 0)
  {
    v18 = 0;
    goto LABEL_30;
  }
  v18 = v17[2];
  if (!v18)
    goto LABEL_30;
  v7 = *(_QWORD *)(v18 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_22:
    MEMORY[0x19AEA534C](v7);
    goto LABEL_23;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_22;
LABEL_23:
  ++*(_QWORD *)(v7 + 8);
  v20 = __ldxr((unsigned __int8 *)v7);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_28;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_28:
  if (*(WebCore::ScrollingCoordinator **)(v18 + 24) != v127 || *(_QWORD *)(v18 + 32) != v128)
  {
    __break(0xC471u);
    JUMPOUT(0x1960A4BB8);
  }
LABEL_30:
  v21 = v124;
  v22 = *(unsigned __int8 *)(v13 + 16);
  if (v22 != v124)
    goto LABEL_210;
  v23 = *(unsigned __int8 **)(v13 + 56);
  if (!v23)
  {
    v24 = 0;
    goto LABEL_33;
  }
  v112 = v10;
  v113 = v9;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::ScrollingStateNode>(v23, *(_QWORD *)(v13 + 64), &v127);
  v24 = v127;
  v127 = 0;
  if (v24)
  {
    v7 = *((_QWORD *)v24 + 1);
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
LABEL_237:
      v115 = *(_QWORD *)(v7 + 8);
      v116 = v115 - 1;
      *(_QWORD *)(v7 + 8) = v115 - 1;
      if (v115 == 1)
      {
        v121 = *(_QWORD *)(v7 + 16);
        v117 = *(_QWORD *)(v7 + 24);
        *(_QWORD *)(v7 + 24) = 0;
        v118 = v121 != 0;
      }
      else
      {
        v117 = 0;
        v118 = 1;
      }
      v119 = __ldxr((unsigned __int8 *)v7);
      if (v119 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
        {
LABEL_245:
          if (!v116)
          {
            if (v117)
              (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
            if (!v118)
              WTF::fastFree((WTF *)v7, a2);
          }
          goto LABEL_246;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      goto LABEL_245;
    }
    MEMORY[0x19AEA534C](v7);
    goto LABEL_237;
  }
LABEL_246:
  v9 = v113;
  v10 = v112;
LABEL_33:
  if (v24 != (WebCore::ScrollingCoordinator *)v18)
  {
    v21 = v124;
    v22 = *(unsigned __int8 *)(v13 + 16);
LABEL_210:
    if (v21 != v22)
    {
      v108 = (unsigned __int8 *)v9[1];
      if (v108)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::ScrollingStateNode>(v108, v9[2], &v127);
        if (v127)
        {
          WebCore::ScrollingCoordinator::uniqueScrollingNodeID(v127);
          v125 = v110;
          v126 = (unint64_t)v109;
          v111 = v127;
          v127 = 0;
          if (v111)
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v111 + 1, v109);
        }
      }
    }
    v29 = v9;
    WebCore::ScrollingStateTree::unparentNode((uint64_t)v9, v125, v126);
    v30 = 0;
    goto LABEL_43;
  }
  if (a5)
  {
    if (*(unsigned int *)(v18 + 84) <= v10)
    {
      v29 = v9;
      WebCore::ScrollingStateNode::removeChild((unsigned int *)v18, (WebCore::ScrollingStateNode *)v13);
      if (v10 == -1)
      {
        v127 = (WebCore::ScrollingCoordinator *)v13;
        WebCore::ScrollingStateNode::appendChild(v18, (uint64_t *)&v127);
LABEL_228:
        WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>::~Ref((uint64_t *)&v127, v107);
        v13 = 0;
LABEL_60:
        v30 = 1;
        v7 = v125;
        goto LABEL_61;
      }
LABEL_227:
      v127 = (WebCore::ScrollingCoordinator *)v13;
      WebCore::ScrollingStateNode::insertChild(v18, (uint64_t *)&v127, v10);
      goto LABEL_228;
    }
    v25 = *(_QWORD *)(*(_QWORD *)(v18 + 72) + 8 * v10);
    v26 = *(_QWORD *)(v25 + 8);
    if (__ldaxr((unsigned __int8 *)v26))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v26))
    {
LABEL_39:
      ++*(_QWORD *)(v26 + 8);
      v28 = __ldxr((unsigned __int8 *)v26);
      if (v28 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v26))
        {
LABEL_51:
          v31 = *(_QWORD *)(v25 + 8);
          if (__ldaxr((unsigned __int8 *)v31))
          {
            v29 = v9;
            __clrex();
          }
          else
          {
            v29 = v9;
            if (!__stxr(1u, (unsigned __int8 *)v31))
            {
LABEL_54:
              v33 = *(_QWORD *)(v31 + 8);
              v34 = v33 - 1;
              *(_QWORD *)(v31 + 8) = v33 - 1;
              if (v33 == 1)
              {
                v104 = *(_QWORD *)(v31 + 16);
                v35 = *(_QWORD *)(v31 + 24);
                *(_QWORD *)(v31 + 24) = 0;
                v36 = v104 != 0;
              }
              else
              {
                v35 = 0;
                v36 = 1;
              }
              v37 = __ldxr((unsigned __int8 *)v31);
              if (v37 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v31))
                {
LABEL_58:
                  if (!v34)
                  {
                    if (v35)
                      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
                    if (!v36)
                      WTF::fastFree((WTF *)v31, a2);
                  }
                  if (v25 == v13)
                    goto LABEL_60;
                  WebCore::ScrollingStateNode::removeChild((unsigned int *)v18, (WebCore::ScrollingStateNode *)v13);
                  v10 = a7;
                  goto LABEL_227;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v31);
              goto LABEL_58;
            }
          }
          MEMORY[0x19AEA534C](v31);
          goto LABEL_54;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v26);
      goto LABEL_51;
    }
    MEMORY[0x19AEA534C](v26);
    goto LABEL_39;
  }
  v29 = v9;
  v30 = 1;
  v7 = v125;
LABEL_43:
  if (!v18)
    goto LABEL_69;
LABEL_61:
  v38 = *(_QWORD *)(v18 + 8);
  if (__ldaxr((unsigned __int8 *)v38))
  {
    __clrex();
LABEL_63:
    MEMORY[0x19AEA534C](v38);
    goto LABEL_64;
  }
  if (__stxr(1u, (unsigned __int8 *)v38))
    goto LABEL_63;
LABEL_64:
  v40 = *(_QWORD *)(v38 + 8);
  v41 = v40 - 1;
  *(_QWORD *)(v38 + 8) = v40 - 1;
  if (v40 == 1)
  {
    v102 = *(_QWORD *)(v38 + 16);
    v42 = *(_QWORD *)(v38 + 24);
    *(_QWORD *)(v38 + 24) = 0;
    v43 = v102 != 0;
  }
  else
  {
    v42 = 0;
    v43 = 1;
  }
  v44 = __ldxr((unsigned __int8 *)v38);
  if (v44 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v38))
      goto LABEL_68;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v38);
LABEL_68:
  if (!v41)
  {
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    if (!v43)
      WTF::fastFree((WTF *)v38, a2);
  }
LABEL_69:
  if ((v30 & 1) != 0)
  {
    v45 = 0;
    goto LABEL_91;
  }
LABEL_90:
  v45 = 1;
LABEL_91:
  if (!v13)
    goto LABEL_100;
  v46 = *(_QWORD *)(v13 + 8);
  if (__ldaxr((unsigned __int8 *)v46))
  {
    __clrex();
LABEL_94:
    MEMORY[0x19AEA534C](v46);
    goto LABEL_95;
  }
  if (__stxr(1u, (unsigned __int8 *)v46))
    goto LABEL_94;
LABEL_95:
  v48 = *(_QWORD *)(v46 + 8);
  v49 = v48 - 1;
  *(_QWORD *)(v46 + 8) = v48 - 1;
  if (v48 == 1)
  {
    v101 = *(_QWORD *)(v46 + 16);
    v50 = *(_QWORD *)(v46 + 24);
    *(_QWORD *)(v46 + 24) = 0;
    v51 = v101 != 0;
  }
  else
  {
    v50 = 0;
    v51 = 1;
  }
  v52 = __ldxr((unsigned __int8 *)v46);
  if (v52 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v46))
      goto LABEL_99;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v46);
LABEL_99:
  if (!v49)
  {
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    if (!v51)
      WTF::fastFree((WTF *)v46, a2);
  }
LABEL_100:
  if (!v45)
    return v7;
  if (a5)
  {
    v127 = a5;
    v128 = a6;
    v53 = v29;
    v54 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v29 + 5, (uint64_t *)&v127);
    if (!v54)
      return 0;
    v55 = v54[2];
    if (!v55)
      return 0;
    v56 = *(_QWORD *)(v55 + 8);
    if (__ldaxr((unsigned __int8 *)v56))
    {
      __clrex();
      v58 = a7;
    }
    else
    {
      v58 = a7;
      if (!__stxr(1u, (unsigned __int8 *)v56))
      {
LABEL_107:
        ++*(_QWORD *)(v56 + 8);
        v59 = __ldxr((unsigned __int8 *)v56);
        if (v59 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v56))
            goto LABEL_120;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v56);
LABEL_120:
        if (*(WebCore::ScrollingCoordinator **)(v55 + 24) != v127 || *(_QWORD *)(v55 + 32) != v128)
        {
          __break(0xC471u);
          JUMPOUT(0x1960A4C24);
        }
        v61 = (uint64_t **)(v53 + 6);
        v60 = v53[6];
        v62 = v125;
        v63 = v126;
        if (v60)
        {
          v64 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v53[6], v125, v126);
          if (v64)
          {
            v65 = (WebCore::ScrollingStateNode *)v64;
            if (v64 != (uint64_t *)(v60 + 24 * *(unsigned int *)(v60 - 4)))
            {
              v66 = (WebCore::ScrollingCoordinator *)v64[2];
              v64[2] = 0;
              v89 = *v61;
              if (!*v61 || (v89 += 3 * *((unsigned int *)v89 - 1), v89 != v64))
              {
                if (v89 != v64)
                  WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove((uint64_t)(v53 + 6), v64);
              }
              if (v66)
              {
                v90 = *((_QWORD *)v66 + 1);
                if (__ldaxr((unsigned __int8 *)v90))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v90))
                {
LABEL_182:
                  ++*(_QWORD *)(v90 + 8);
                  v92 = __ldxr((unsigned __int8 *)v90);
                  if (v92 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v90))
                      goto LABEL_196;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v90);
LABEL_196:
                  WebCore::nodeWasReattachedRecursive((WebCore::ScrollingStateTree **)v66, v65);
                  if (v58 == -1)
                  {
                    v127 = v66;
                    WebCore::ScrollingStateNode::appendChild(v55, (uint64_t *)&v127);
                    WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>::~Ref((uint64_t *)&v127, v103);
                    goto LABEL_137;
                  }
                  v127 = v66;
                  v70 = v55;
                  goto LABEL_135;
                }
                MEMORY[0x19AEA534C](v90);
                goto LABEL_182;
              }
            }
          }
        }
        WebCore::ScrollingStateTree::createNode((uint64_t *)&v127, v53, v124, v62, v63);
        v66 = v127;
        if (!v127)
        {
LABEL_134:
          v70 = v55;
          if (v58 == -1)
          {
            WebCore::ScrollingStateNode::appendChild(v55, (uint64_t *)&v127);
LABEL_136:
            v72 = v127;
            v127 = 0;
            if (!v72)
              goto LABEL_137;
            v93 = *((_QWORD *)v72 + 1);
            if (__ldaxr((unsigned __int8 *)v93))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v93))
            {
LABEL_188:
              v95 = *(_QWORD *)(v93 + 8);
              v96 = v95 - 1;
              *(_QWORD *)(v93 + 8) = v95 - 1;
              if (v95 == 1)
              {
                v120 = *(_QWORD *)(v93 + 16);
                v97 = *(_QWORD *)(v93 + 24);
                *(_QWORD *)(v93 + 24) = 0;
                v98 = v120 != 0;
              }
              else
              {
                v97 = 0;
                v98 = 1;
              }
              v99 = __ldxr((unsigned __int8 *)v93);
              if (v99 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v93))
                {
LABEL_200:
                  if (!v96)
                  {
                    if (v97)
                      (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
                    if (!v98)
                      WTF::fastFree((WTF *)v93, v71);
                  }
LABEL_137:
                  v73 = *(_QWORD *)(v55 + 8);
                  if (__ldaxr((unsigned __int8 *)v73))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v73))
                  {
LABEL_140:
                    v75 = *(_QWORD *)(v73 + 8);
                    v76 = v75 - 1;
                    *(_QWORD *)(v73 + 8) = v75 - 1;
                    if (v75 == 1)
                    {
                      v106 = *(_QWORD *)(v73 + 16);
                      v77 = *(_QWORD *)(v73 + 24);
                      *(_QWORD *)(v73 + 24) = 0;
                      v78 = v106 != 0;
                    }
                    else
                    {
                      v77 = 0;
                      v78 = 1;
                    }
                    v79 = __ldxr((unsigned __int8 *)v73);
                    if (v79 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)v73))
                        goto LABEL_144;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v73);
LABEL_144:
                    if (!v76)
                    {
                      if (v77)
                        (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
                      if (!v78)
                        WTF::fastFree((WTF *)v73, v71);
                    }
                    goto LABEL_145;
                  }
                  MEMORY[0x19AEA534C](v73);
                  goto LABEL_140;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v93);
              goto LABEL_200;
            }
            MEMORY[0x19AEA534C](v93);
            goto LABEL_188;
          }
LABEL_135:
          WebCore::ScrollingStateNode::insertChild(v70, (uint64_t *)&v127, v58);
          goto LABEL_136;
        }
        v67 = *((_QWORD *)v127 + 1);
        if (__ldaxr((unsigned __int8 *)v67))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v67))
        {
LABEL_129:
          ++*(_QWORD *)(v67 + 8);
          v69 = __ldxr((unsigned __int8 *)v67);
          if (v69 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v67))
              goto LABEL_134;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v67);
          goto LABEL_134;
        }
        MEMORY[0x19AEA534C](v67);
        goto LABEL_129;
      }
    }
    MEMORY[0x19AEA534C](v56);
    goto LABEL_107;
  }
  if (v124 >= 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x1960A4DC0);
  }
  v53 = v29;
  WebCore::ScrollingStateTree::clear((WebCore::ScrollingStateTree *)v29);
  WebCore::ScrollingStateFrameScrollingNode::create<WebCore::ScrollingStateTree &,WebCore::ScrollingNodeType &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &>((uint64_t *)&v127, v29, (char *)&v124, (uint64_t *)&v125);
  WebCore::ScrollingStateTree::setRootStateNode((uint64_t)v29, (uint64_t *)&v127);
  WTF::Ref<WebCore::ScrollingStateFrameScrollingNode,WTF::RawPtrTraits<WebCore::ScrollingStateFrameScrollingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateFrameScrollingNode>>::~Ref(&v127, v100);
  WebCore::ScrollingStateTree::rootStateNode((uint64_t)v29, &v127);
  v66 = v127;
  *((_BYTE *)v53 + 73) = 1;
LABEL_145:
  v129 = *(_OWORD *)((char *)v66 + 24);
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::add<WebCore::ScrollingStateNode&>(v53 + 5, &v129, (unint64_t)v66, (uint64_t)&v127);
  v7 = v125;
  v81 = *((_QWORD *)v66 + 1);
  if (__ldaxr((unsigned __int8 *)v81))
  {
    __clrex();
LABEL_147:
    MEMORY[0x19AEA534C](v81);
    goto LABEL_148;
  }
  if (__stxr(1u, (unsigned __int8 *)v81))
    goto LABEL_147;
LABEL_148:
  v83 = *(_QWORD *)(v81 + 8);
  v84 = v83 - 1;
  *(_QWORD *)(v81 + 8) = v83 - 1;
  if (v83 == 1)
  {
    v105 = *(_QWORD *)(v81 + 16);
    v85 = *(_QWORD *)(v81 + 24);
    *(_QWORD *)(v81 + 24) = 0;
    v86 = v105 != 0;
  }
  else
  {
    v85 = 0;
    v86 = 1;
  }
  v87 = __ldxr((unsigned __int8 *)v81);
  if (v87 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v81))
      goto LABEL_152;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v81);
LABEL_152:
  if (!v84)
  {
    if (v85)
      (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
    if (!v86)
      WTF::fastFree((WTF *)v81, v80);
  }
  return v7;
}

uint64_t WebCore::ScrollingStateTree::setRootStateNode(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 56) = v2;
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEA534C](v4);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_4;
LABEL_5:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_9:
  if (!v7)
  {
    if (v8)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (!v9)
      return WTF::fastFree((WTF *)v4, a2);
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::take(uint64_t *result, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v4 = result;
  v5 = *a2;
  if (*a2
    && ((result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*a2, a3, a4)) != 0? (uint64_t *)(v8 = result, v7 = *(_DWORD *)(v5 - 4)): (v7 = *(_DWORD *)(v5 - 4), v8 = (uint64_t *)(v5 + 24 * v7)), (uint64_t *)(v5 + 24 * v7) != v8))
  {
    v9 = v8[2];
    v8[2] = 0;
    *v4 = v9;
    v10 = (uint64_t *)*a2;
    if (!*a2 || (v10 += 3 * *((unsigned int *)v10 - 1), v10 != v8))
    {
      if (v10 != v8)
        return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove((uint64_t)a2, v8);
    }
  }
  else
  {
    *v4 = 0;
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::add<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unint64_t *v21;
  uint64_t result;
  unint64_t v23;
  unint64_t *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;

  v5 = a2;
  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = v5[1];
  v12 = (*v5 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*v5 - 1640531527) << 16) ^ ((unsigned __int16)*v5
                                                                                             - 1640531527);
  v13 = v12 + (unsigned __int16)WORD2(*v5) + (v12 >> 11);
  v14 = (*v5 >> 37) & 0x7FFF800 ^ (v13 << 16) ^ v13;
  v15 = (v11 >> 5) & 0x7FFF800 ^ ((v14 + (unsigned __int16)v11 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)v11 + (v14 >> 11));
  v16 = (v11 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v11) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v11) + (v15 >> 11));
  v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
  v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
  v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
  if (!v19)
    v19 = 0x800000;
  v20 = v19 & v10;
  v21 = (unint64_t *)(v8 + 24 * (v19 & v10));
  result = *v21;
  v23 = v21[1];
  if (*(_OWORD *)v21 != 0)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (result == *v5 && v23 == v11)
      {
        if ((v9 & 1) != 0)
          v43 = 0;
        else
          v43 = *(_DWORD *)(v8 - 4);
        v42 = 0;
        v41 = v8 + 24 * v43;
        goto LABEL_30;
      }
      if (v23 == -1)
        v24 = v21;
      v20 = (v20 + v25) & v10;
      v21 = (unint64_t *)(v8 + 24 * v20);
      result = *v21;
      v23 = v21[1];
      ++v25;
      a2 = (_QWORD *)(*v21 | v23);
    }
    while (a2);
    if (v24)
    {
      *v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v21 = v24;
    }
  }
  *(_OWORD *)v21 = *(_OWORD *)v5;
  v26 = *a3;
  *a3 = 0;
  v27 = v21[2];
  v21[2] = v26;
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (__ldaxr((unsigned __int8 *)v28))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v28))
    {
LABEL_18:
      v30 = *(_QWORD *)(v28 + 8);
      v31 = v30 - 1;
      *(_QWORD *)(v28 + 8) = v30 - 1;
      if (v30 == 1)
      {
        v44 = *(_QWORD *)(v28 + 16);
        v32 = *(_QWORD *)(v28 + 24);
        *(_QWORD *)(v28 + 24) = 0;
        v33 = v44 != 0;
      }
      else
      {
        v32 = 0;
        v33 = 1;
      }
      v34 = __ldxr((unsigned __int8 *)v28);
      if (v34 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v28))
          goto LABEL_22;
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_22:
      if (!v31)
      {
        if (v32)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if (!v33)
          result = WTF::fastFree((WTF *)v28, a2);
      }
      goto LABEL_23;
    }
    result = MEMORY[0x19AEA534C](v28);
    goto LABEL_18;
  }
LABEL_23:
  v35 = *a1;
  if (*a1)
    v36 = *(_DWORD *)(v35 - 12) + 1;
  else
    v36 = 1;
  *(_DWORD *)(v35 - 12) = v36;
  v37 = *a1;
  if (*a1)
    v38 = *(_DWORD *)(v37 - 12);
  else
    v38 = 0;
  v39 = (*(_DWORD *)(v37 - 16) + v38);
  v40 = *(unsigned int *)(v37 - 4);
  if (v40 > 0x400)
  {
    if (v40 > 2 * v39)
      goto LABEL_29;
LABEL_43:
    result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, v21);
    v21 = (unint64_t *)result;
    v37 = *a1;
    if (*a1)
      LODWORD(v40) = *(_DWORD *)(v37 - 4);
    else
      LODWORD(v40) = 0;
    goto LABEL_29;
  }
  if (3 * v40 <= 4 * v39)
    goto LABEL_43;
LABEL_29:
  v41 = v37 + 24 * v40;
  v42 = 1;
LABEL_30:
  *(_QWORD *)a4 = v21;
  *(_QWORD *)(a4 + 8) = v41;
  *(_BYTE *)(a4 + 16) = v42;
  return result;
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::take(uint64_t *a1, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *result;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v5 = *a2;
  if (!*a2
    || ((v6 = a2,
         (result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*a2, a3, a4)) != 0)? (uint64_t *)(a2 = result, v8 = *(_DWORD *)(v5 - 4)): (v8 = *(_DWORD *)(v5 - 4), a2 = (uint64_t *)(v5 + 24 * v8)), (uint64_t *)(v5 + 24 * v8) == a2))
  {
    v11 = 0;
    *a1 = 0;
    return WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>::~Ref(&v11, a2);
  }
  v9 = a2[2];
  if (!v9)
  {
    *a1 = 0;
LABEL_8:
    v10 = (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
    if (v10 == a2)
      return result;
    goto LABEL_11;
  }
  a2[2] = 0;
  v5 = *v6;
  *a1 = v9;
  if (v5)
    goto LABEL_8;
  v10 = 0;
LABEL_11:
  if (v10 != a2)
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v6, a2);
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  int v26;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *a3;
  v11 = a3[1];
  result = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>::hash<WebCore::MessagePortIdentifier>(*a3, v11);
  v13 = result & v9;
  v14 = (_QWORD *)(v8 + 24 * (result & v9));
  v16 = *v14;
  v15 = v14[1];
  if (*(_OWORD *)v14 != 0)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v16 == v10 && v15 == v11)
      {
        v24 = 0;
        v23 = v8 + 24 * *(unsigned int *)(v8 - 4);
        goto LABEL_11;
      }
      if (v15 == -1)
        v25 = v14;
      v13 = (v13 + v26) & v9;
      v14 = (_QWORD *)(v8 + 24 * v13);
      v16 = *v14;
      v15 = v14[1];
      ++v26;
    }
    while (*(_OWORD *)v14 != 0);
    if (v25)
    {
      *v25 = 0;
      v25[1] = 0;
      v25[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = v25;
    }
  }
  *(_OWORD *)v14 = *(_OWORD *)a3;
  result = (uint64_t)WTF::GenericHashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>::assignToEmpty<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>(v14 + 2, a4);
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_10;
LABEL_21:
    result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a2, v14);
    v14 = (_QWORD *)result;
    v19 = *a2;
    if (*a2)
      LODWORD(v22) = *(_DWORD *)(v19 - 4);
    else
      LODWORD(v22) = 0;
    goto LABEL_10;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_21;
LABEL_10:
  v23 = v19 + 24 * v22;
  v24 = 1;
LABEL_11:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

uint64_t WebCore::ScrollingStateTree::willRemoveNode(WebCore::ScrollingStateTree *this, WebCore::ScrollingStateNode *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  BOOL v7;

  v4 = (uint64_t *)((char *)this + 40);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*((_QWORD *)this + 5), (unint64_t)a2, a3);
    if (v6)
      v7 = v6 == (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
    else
      v7 = 1;
    if (!v7)
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v4, v6);
  }
  return WebCore::ScrollingStateTree::setHasChangedProperties(this, 1);
}

uint64_t WebCore::ScrollingStateTree::detachAndDestroySubtree(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t *v5;
  WebCore::ScrollingStateNode *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::ScrollingStateNode *v27;

  if (!a2)
    return result;
  v5 = (uint64_t *)result;
  result = (uint64_t)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::take((uint64_t *)&v27, (uint64_t *)(result + 40), a2, a3);
  v6 = v27;
  if (!v27)
    return result;
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::take(&v26, v5 + 6, a2, a3);
  result = WebCore::ScrollingStateTree::removeNodeAndAllDescendants((WebCore::ScrollingStateTree *)v5, v6);
  v8 = v26;
  v26 = 0;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_8;
    }
    result = MEMORY[0x19AEA534C](v9);
LABEL_8:
    v11 = *(_QWORD *)(v9 + 8);
    v12 = v11 - 1;
    *(_QWORD *)(v9 + 8) = v11 - 1;
    if (v11 == 1)
    {
      v24 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 24) = 0;
      v14 = v24 != 0;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    v15 = __ldxr((unsigned __int8 *)v9);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
        if (v12)
          goto LABEL_20;
LABEL_16:
        if (v13)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        if (!v14)
          result = WTF::fastFree((WTF *)v9, v7);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      goto LABEL_20;
    goto LABEL_16;
  }
LABEL_20:
  v16 = (uint64_t)v27;
  v27 = 0;
  if (!v16)
    return result;
  v17 = *(_QWORD *)(v16 + 8);
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_25;
  }
  result = MEMORY[0x19AEA534C](v17);
LABEL_25:
  v19 = *(_QWORD *)(v17 + 8);
  v20 = v19 - 1;
  *(_QWORD *)(v17 + 8) = v19 - 1;
  if (v19 == 1)
  {
    v25 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    *(_QWORD *)(v17 + 24) = 0;
    v22 = v25 != 0;
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  v23 = __ldxr((unsigned __int8 *)v17);
  if (v23 != 1)
  {
    __clrex();
LABEL_32:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      return result;
    goto LABEL_33;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
    goto LABEL_32;
  if (v20)
    return result;
LABEL_33:
  if (v21)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (!v22)
    return WTF::fastFree((WTF *)v17, v7);
  return result;
}

uint64_t WebCore::ScrollingStateTree::removeNodeAndAllDescendants(WebCore::ScrollingStateTree *this, WebCore::ScrollingStateNode *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  WebCore::ScrollingStateNode **v9;
  WebCore::ScrollingStateNode **v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int v36;

  v4 = *((_QWORD *)a2 + 7);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_3;
  }
  v5 = *((_QWORD *)a2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_69;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_69:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v36 = __ldxr((unsigned __int8 *)v4);
  if (v36 != 1)
  {
    __clrex();
    goto LABEL_75;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_75:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_3:
  result = WebCore::ScrollingStateTree::recursiveNodeWillBeRemoved(this, a2);
  if (*((WebCore::ScrollingStateNode **)this + 7) == a2)
  {
    *((_QWORD *)this + 7) = 0;
    v11 = *((_QWORD *)a2 + 1);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_14;
    }
    result = MEMORY[0x19AEA534C](v11);
LABEL_14:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v33 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v33 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
        if (v14)
          goto LABEL_26;
LABEL_22:
        if (v15)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        if (!v16)
          result = WTF::fastFree((WTF *)v11, v7);
LABEL_26:
        if (!v5)
          return result;
        goto LABEL_45;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      goto LABEL_26;
    goto LABEL_22;
  }
  if (!v5)
    return result;
  v8 = *(unsigned int *)(v5 + 84);
  if ((_DWORD)v8)
  {
    v9 = *(WebCore::ScrollingStateNode ***)(v5 + 72);
    v10 = v9 + 1;
    while (*v9 != a2)
    {
      ++v9;
      ++v10;
      if (!--v8)
        goto LABEL_26;
    }
    *v9 = 0;
    v18 = *((_QWORD *)a2 + 1);
    if (__ldaxr((unsigned __int8 *)v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v18))
    {
      goto LABEL_32;
    }
    MEMORY[0x19AEA534C](v18);
LABEL_32:
    v20 = *(_QWORD *)(v18 + 8);
    v21 = v20 - 1;
    *(_QWORD *)(v18 + 8) = v20 - 1;
    if (v20 == 1)
    {
      v35 = *(_QWORD *)(v18 + 16);
      v22 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v18 + 24) = 0;
      v23 = v35 != 0;
    }
    else
    {
      v22 = 0;
      v23 = 1;
    }
    v24 = __ldxr((unsigned __int8 *)v18);
    if (v24 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v18))
        goto LABEL_39;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_39:
    if (!v21)
    {
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      if (!v23)
        WTF::fastFree((WTF *)v18, v7);
    }
    result = (uint64_t)memmove(v9, v9 + 1, *(_QWORD *)(v5 + 72) + 8 * *(unsigned int *)(v5 + 84) - (_QWORD)v10);
    --*(_DWORD *)(v5 + 84);
  }
LABEL_45:
  v25 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_49;
  }
  result = MEMORY[0x19AEA534C](v25);
LABEL_49:
  v27 = *(_QWORD *)(v25 + 8);
  v28 = v27 - 1;
  *(_QWORD *)(v25 + 8) = v27 - 1;
  if (v27 == 1)
  {
    v32 = *(_QWORD *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 24);
    *(_QWORD *)(v25 + 24) = 0;
    v30 = v32 != 0;
  }
  else
  {
    v29 = 0;
    v30 = 1;
  }
  v31 = __ldxr((unsigned __int8 *)v25);
  if (v31 != 1)
  {
    __clrex();
LABEL_56:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v25);
    if (v28)
      return result;
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
    goto LABEL_56;
  if (v28)
    return result;
LABEL_57:
  if (v29)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (!v30)
    return WTF::fastFree((WTF *)v25, v7);
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::add<WebCore::ScrollingStateNode&>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unint64_t *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  unsigned int v43;
  unint64_t *v44;
  int v45;
  unsigned int v46;
  uint64_t v47;

  v5 = a2;
  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = v5[1];
  v12 = (*v5 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*v5 - 1640531527) << 16) ^ ((unsigned __int16)*v5
                                                                                             - 1640531527);
  v13 = v12 + (unsigned __int16)WORD2(*v5) + (v12 >> 11);
  v14 = (*v5 >> 37) & 0x7FFF800 ^ (v13 << 16) ^ v13;
  v15 = (v11 >> 5) & 0x7FFF800 ^ ((v14 + (unsigned __int16)v11 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)v11 + (v14 >> 11));
  v16 = (v11 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v11) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v11) + (v15 >> 11));
  v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
  v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
  v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
  if (!v19)
    v19 = 0x800000;
  v20 = v19 & v10;
  v21 = (unint64_t *)(v8 + 24 * (v19 & v10));
  result = *v21;
  v23 = v21[1];
  if (*(_OWORD *)v21 != 0)
  {
    v44 = 0;
    v45 = 1;
    do
    {
      if (result == *v5 && v23 == v11)
      {
        if ((v9 & 1) != 0)
          v46 = 0;
        else
          v46 = *(_DWORD *)(v8 - 4);
        v35 = 0;
        v34 = v8 + 24 * v46;
        goto LABEL_23;
      }
      if (v23 == -1)
        v44 = v21;
      v20 = (v20 + v45) & v10;
      v21 = (unint64_t *)(v8 + 24 * v20);
      result = *v21;
      v23 = v21[1];
      ++v45;
      a2 = (_QWORD *)(*v21 | v23);
    }
    while (a2);
    if (v44)
    {
      *v44 = 0;
      v44[1] = 0;
      v44[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v21 = v44;
    }
  }
  *(_OWORD *)v21 = *(_OWORD *)v5;
  v24 = *(_QWORD *)(a3 + 8);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
LABEL_9:
    result = MEMORY[0x19AEA534C](v24);
    goto LABEL_10;
  }
  if (__stxr(1u, (unsigned __int8 *)v24))
    goto LABEL_9;
LABEL_10:
  ++*(_QWORD *)(v24 + 8);
  v26 = __ldxr((unsigned __int8 *)v24);
  if (v26 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_14:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v24);
  v27 = v21[2];
  v21[2] = a3;
  if (!v27)
    goto LABEL_16;
  v36 = *(_QWORD *)(v27 + 8);
  if (__ldaxr((unsigned __int8 *)v36))
  {
    __clrex();
LABEL_28:
    result = MEMORY[0x19AEA534C](v36);
    goto LABEL_29;
  }
  if (__stxr(1u, (unsigned __int8 *)v36))
    goto LABEL_28;
LABEL_29:
  v38 = *(_QWORD *)(v36 + 8);
  v39 = v38 - 1;
  *(_QWORD *)(v36 + 8) = v38 - 1;
  if (v38 == 1)
  {
    v47 = *(_QWORD *)(v36 + 16);
    v40 = *(_QWORD *)(v36 + 24);
    *(_QWORD *)(v36 + 24) = 0;
    v41 = v47 != 0;
  }
  else
  {
    v40 = 0;
    v41 = 1;
  }
  v42 = __ldxr((unsigned __int8 *)v36);
  if (v42 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v36))
      goto LABEL_33;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v36);
LABEL_33:
  if (!v39)
  {
    if (v40)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    if (!v41)
      result = WTF::fastFree((WTF *)v36, a2);
  }
LABEL_16:
  v28 = *a1;
  if (*a1)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *a1;
  if (*a1)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 > 2 * v32)
      goto LABEL_22;
    goto LABEL_41;
  }
  if (3 * v33 <= 4 * v32)
  {
    if (!(_DWORD)v33)
    {
      v43 = 8;
LABEL_56:
      result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v43, v21);
      v21 = (unint64_t *)result;
      v30 = *a1;
      if (*a1)
        LODWORD(v33) = *(_DWORD *)(v30 - 4);
      else
        LODWORD(v33) = 0;
      goto LABEL_22;
    }
LABEL_41:
    v43 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
    goto LABEL_56;
  }
LABEL_22:
  v34 = v30 + 24 * v33;
  v35 = 1;
LABEL_23:
  *(_QWORD *)a4 = v21;
  *(_QWORD *)(a4 + 8) = v34;
  *(_BYTE *)(a4 + 16) = v35;
  return result;
}

uint64_t WebCore::ScrollingStateTree::recursiveNodeWillBeRemoved(WebCore::ScrollingStateTree *this, WebCore::ScrollingStateNode *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  WebCore::ScrollingStateNode **v15;
  uint64_t v16;
  WebCore::ScrollingStateNode *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = 0;
  WTF::ThreadSafeWeakPtr<WebCore::ScrollingStateNode>::operator=<WebCore::ScrollingStateNode>((uint64_t *)a2 + 7, &v19);
  v5 = v19;
  v19 = 0;
  if (!v5)
    goto LABEL_18;
  v6 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_6:
  v8 = *(_QWORD *)(v6 + 8);
  v9 = v8 - 1;
  *(_QWORD *)(v6 + 8) = v8 - 1;
  if (v8 == 1)
  {
    v18 = *(_QWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = 0;
    v11 = v18 != 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
  }
  v12 = __ldxr((unsigned __int8 *)v6);
  if (v12 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
    goto LABEL_13;
  if (v9)
    goto LABEL_18;
LABEL_14:
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (!v11)
    WTF::fastFree((WTF *)v6, v4);
LABEL_18:
  result = WebCore::ScrollingStateTree::willRemoveNode(this, *((WebCore::ScrollingStateNode **)a2 + 3), *((_QWORD *)a2 + 4));
  v14 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v14)
  {
    v15 = (WebCore::ScrollingStateNode **)*((_QWORD *)a2 + 9);
    v16 = 8 * v14;
    do
    {
      v17 = *v15++;
      result = WebCore::ScrollingStateTree::recursiveNodeWillBeRemoved(this, v17);
      v16 -= 8;
    }
    while (v16);
  }
  return result;
}

uint64_t WebCore::ScrollingStateTree::reconcileViewportConstrainedLayerPositions(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v6;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a2;
  v18 = a3;
  if (!a2)
    return result;
  result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(result + 40), &v17);
  if (!result)
    return result;
  v3 = *(_QWORD **)(result + 16);
  if (!v3)
    return result;
  v4 = v3[1];
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v3[3] != v17 || v3[4] != v18)
  {
    __break(0xC471u);
    JUMPOUT(0x1960A6034);
  }
  result = WebCore::reconcileLayerPositionsRecursive((uint64_t)v3);
  v9 = v3[1];
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_22;
  }
  result = MEMORY[0x19AEA534C](v9);
LABEL_22:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v9 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v16 = *(_QWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    v14 = v16 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 != 1)
  {
    __clrex();
LABEL_29:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      return result;
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
    goto LABEL_29;
  if (v12)
    return result;
LABEL_30:
  if (v13)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (!v14)
    return WTF::fastFree((WTF *)v9, v8);
  return result;
}

WTF::StringImpl *WebCore::ScrollingStateTree::scrollingStateTreeAsText@<X0>(WTF::StringImpl *result@<X0>, void *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  char v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  int v45;

  v4 = *((_QWORD *)result + 7);
  if (v4)
  {
    v5 = a2;
    v6 = result;
    v7 = *(_QWORD *)(v4 + 8);
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v7);
LABEL_6:
    ++*(_QWORD *)(v7 + 8);
    v9 = __ldxr((unsigned __int8 *)v7);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
      {
LABEL_11:
        v10 = *(_QWORD *)(v4 + 8);
        if (__ldaxr((unsigned __int8 *)v10))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v10))
        {
          goto LABEL_15;
        }
        MEMORY[0x19AEA534C](v10);
LABEL_15:
        v12 = *(_QWORD *)(v10 + 8);
        v13 = v12 - 1;
        *(_QWORD *)(v10 + 8) = v12 - 1;
        if (v12 == 1)
        {
          v37 = *(_QWORD *)(v10 + 16);
          v14 = *(_QWORD *)(v10 + 24);
          *(_QWORD *)(v10 + 24) = 0;
          v15 = v37 != 0;
        }
        else
        {
          v14 = 0;
          v15 = 1;
        }
        v16 = __ldxr((unsigned __int8 *)v10);
        if (v16 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v10))
          {
            if (v13)
              goto LABEL_27;
LABEL_23:
            if (v14)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            if (!v15)
              WTF::fastFree((WTF *)v10, a2);
LABEL_27:
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v42 = 1;
            v17 = *((_QWORD *)v6 + 7);
            if (!v17)
              goto LABEL_37;
            v18 = *(_QWORD *)(v17 + 8);
            if (__ldaxr((unsigned __int8 *)v18))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v18))
            {
LABEL_32:
              ++*(_QWORD *)(v18 + 8);
              v20 = __ldxr((unsigned __int8 *)v18);
              if (v20 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v18))
                  goto LABEL_37;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_37:
              WebCore::ScrollingStateNode::scrollingStateTreeAsText(v17, v5);
              v22 = v44;
              if (v41 || v40)
              {
                if (v44 && (*((_BYTE *)v44 + 16) & 4) == 0)
                  WTF::StringBuilder::append();
                else
                  WTF::StringBuilder::append();
LABEL_47:
                v24 = v44;
                v44 = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2)
                  {
                    WTF::StringImpl::destroy(v24, v21);
                    if (!v17)
                      goto LABEL_67;
LABEL_51:
                    v25 = *(_QWORD *)(v17 + 8);
                    if (__ldaxr((unsigned __int8 *)v25))
                    {
                      __clrex();
                    }
                    else if (!__stxr(1u, (unsigned __int8 *)v25))
                    {
                      goto LABEL_55;
                    }
                    MEMORY[0x19AEA534C](v25);
LABEL_55:
                    v27 = *(_QWORD *)(v25 + 8);
                    v28 = v27 - 1;
                    *(_QWORD *)(v25 + 8) = v27 - 1;
                    if (v27 == 1)
                    {
                      v38 = *(_QWORD *)(v25 + 16);
                      v29 = *(_QWORD *)(v25 + 24);
                      *(_QWORD *)(v25 + 24) = 0;
                      v30 = v38 != 0;
                    }
                    else
                    {
                      v29 = 0;
                      v30 = 1;
                    }
                    v31 = __ldxr((unsigned __int8 *)v25);
                    if (v31 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)v25))
                      {
                        if (!v28)
                          goto LABEL_63;
                        goto LABEL_67;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v25);
                    if (!v28)
                    {
LABEL_63:
                      if (v29)
                        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
                      if (!v30)
                        WTF::fastFree((WTF *)v25, v21);
                    }
LABEL_67:
                    v32 = *((_QWORD *)v6 + 6);
                    if (v32)
                    {
                      v33 = *(_DWORD *)(v32 - 12);
                      if (v33)
                      {
                        v44 = (WTF::StringImpl *)"\nunparented node count: ";
                        v45 = 24;
                        v43 = v33;
                        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>((WTF::StringBuilder *)&v39, (int8x16_t **)&v44, &v43);
                      }
                    }
                    v34 = v39;
                    if (v39
                      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v39),
                          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v39),
                          (v34 = v39) != 0))
                    {
                      *(_DWORD *)v34 += 2;
                    }
                    *a3 = v34;
                    v35 = v40;
                    v40 = 0;
                    if (v35)
                    {
                      if (*(_DWORD *)v35 == 2)
                        WTF::StringImpl::destroy(v35, v21);
                      else
                        *(_DWORD *)v35 -= 2;
                    }
                    result = v39;
                    v39 = 0;
                    if (result)
                    {
                      if (*(_DWORD *)result == 2)
                        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
                      else
                        *(_DWORD *)result -= 2;
                    }
                    return result;
                  }
                  *(_DWORD *)v24 -= 2;
                }
                if (!v17)
                  goto LABEL_67;
                goto LABEL_51;
              }
              if (v44)
                *(_DWORD *)v44 += 2;
              v23 = v39;
              v39 = v22;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                {
                  WTF::StringImpl::destroy(v23, v21);
                  v22 = v44;
                  if (!v44)
                    goto LABEL_46;
                  goto LABEL_45;
                }
                *(_DWORD *)v23 -= 2;
              }
              if (!v22)
              {
LABEL_46:
                v41 = (int)v22;
                goto LABEL_47;
              }
LABEL_45:
              LODWORD(v22) = *((_DWORD *)v22 + 1);
              goto LABEL_46;
            }
            MEMORY[0x19AEA534C](v18);
            goto LABEL_32;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v10);
        if (v13)
          goto LABEL_27;
        goto LABEL_23;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    goto LABEL_11;
  }
  v36 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v36 += 2;
  *a3 = v36;
  return result;
}

uint64_t WebCore::ScrollingThread::isCurrentThread(WebCore::ScrollingThread *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&qword_1ECE839C0);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1ECE839C0, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::ScrollingThread::singleton(void)::$_0 &&>>);
  }
  return WTF::RunLoop::isCurrent((WTF::RunLoop *)_MergedGlobals_215);
}

uint64_t WebCore::ScrollingThread::dispatch()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&qword_1ECE839C0);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&qword_1ECE839C0, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::ScrollingThread::singleton(void)::$_0 &&>>);
  }
  return WTF::RunLoop::dispatch();
}

uint64_t WebCore::ScrollingThread::dispatchBarrier(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t result;
  _QWORD *v5;
  char v6;
  char **v7;
  char *v8;

  v1 = *a1;
  *a1 = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = &off_1E34043A8;
  v2[1] = v1;
  v5 = v2;
  v3 = atomic_load(&qword_1ECE839C0);
  if (v3 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&qword_1ECE839C0, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::ScrollingThread::singleton(void)::$_0 &&>>);
  }
  WTF::RunLoop::dispatch();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

uint64_t WebCore::ScrollingTree::isUserScrollInProgressAtEventLocation(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v5 = (unsigned __int8 *)(a1 + 168);
  if (__ldaxr((unsigned __int8 *)(a1 + 168)))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](a1 + 168);
    goto LABEL_7;
  }
  if (__stxr(1u, v5))
    goto LABEL_6;
LABEL_7:
  v8 = *(_QWORD *)(a1 + 248);
  if (v8 && *(_DWORD *)(v8 - 12))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, float, float))(*(_QWORD *)a1 + 336))(&v34, a1, *(float *)(a1 + 208) + (float)*(int *)(a2 + 52), (float)(*(float *)(a1 + 212)- (float)(*(float *)(*(_QWORD *)(a1 + 16) + 392) + (float)*(int *)(*(_QWORD *)(a1 + 16) + 396)))+ (float)*(int *)(a2 + 56));
    v10 = v34;
    if (!v34)
      goto LABEL_44;
    v33 = *(_OWORD *)(v34 + 48);
    v11 = *(_QWORD *)(a1 + 248);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 - 8);
      v13 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v33) & v12;
      v14 = (uint64_t *)(v11 + 16 * v13);
      v15 = *v14;
      v16 = v14[1];
      if (*v14 == (_QWORD)v33 && v16 == *((_QWORD *)&v33 + 1))
      {
        v2 = 1;
      }
      else
      {
        v18 = 1;
        do
        {
          v19 = v15 | v16;
          v2 = v19 != 0;
          if (!v19)
            break;
          v13 = (v13 + v18) & v12;
          v20 = (uint64_t *)(v11 + 16 * v13);
          v15 = *v20;
          v16 = v20[1];
          ++v18;
        }
        while (v15 != (_QWORD)v33 || v16 != *((_QWORD *)&v33 + 1));
      }
    }
    else
    {
      v2 = 0;
    }
    v22 = v34;
    v34 = 0;
    if (!v22)
      goto LABEL_44;
    v23 = *(_QWORD *)(v22 + 8);
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
      goto LABEL_32;
    }
    MEMORY[0x19AEA534C](v23);
LABEL_32:
    v25 = *(_QWORD *)(v23 + 8);
    v26 = v25 - 1;
    *(_QWORD *)(v23 + 8) = v25 - 1;
    if (v25 == 1)
    {
      v32 = *(_QWORD *)(v23 + 16);
      v27 = *(_QWORD *)(v23 + 24);
      *(_QWORD *)(v23 + 24) = 0;
      v28 = v32 != 0;
    }
    else
    {
      v27 = 0;
      v28 = 1;
    }
    v29 = __ldxr((unsigned __int8 *)v23);
    if (v29 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
      {
        if (!v26)
          goto LABEL_40;
        goto LABEL_44;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    if (!v26)
    {
LABEL_40:
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      if (!v28)
        WTF::fastFree((WTF *)v23, v9);
    }
LABEL_44:
    v7 = (v10 != 0) & v2;
    goto LABEL_45;
  }
  v7 = 0;
LABEL_45:
  v30 = __ldxr(v5);
  if (v30 == 1)
  {
    if (!__stlxr(0, v5))
      return v7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return v7;
}

float WebCore::ScrollingTreeFrameScrollingNode::viewToContentsOffset(WebCore::ScrollingTreeFrameScrollingNode *this, const WebCore::FloatPoint *a2)
{
  return *(float *)a2;
}

uint64_t WebCore::ScrollingTree::determineWheelEventProcessing(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v7;
  int v9;
  int v10;
  int v11;
  double v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v36;
  double v37;
  int v38;
  int v39;
  unint64_t v41;

  v4 = a1;
  v5 = (unsigned __int8 *)(a1 + 168);
  if (__ldaxr((unsigned __int8 *)(a1 + 168)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  a1 = MEMORY[0x19AEA534C](a1 + 168);
LABEL_5:
  v7 = (unsigned __int8 *)(v4 + 48);
  if (!*(_BYTE *)(v4 + 328))
    goto LABEL_28;
  if (__ldaxr(v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_10;
  }
  a1 = MEMORY[0x19AEA534C](v4 + 48);
LABEL_10:
  v9 = *(unsigned __int8 *)(a2 + 92);
  if (v9 == 1
    || v9 == 4
    || (v10 = *(unsigned __int8 *)(a2 + 93), v10 == 1)
    || v10 == 4
    || v9 == 8 && !*(_BYTE *)(a2 + 93)
    || (v11 = 0, !*(_BYTE *)(a2 + 92)) && v10 == 8)
  {
    if (*(_BYTE *)(v4 + 80)
      && (a1 = WTF::MonotonicTime::now((WTF::MonotonicTime *)a1), v12 - *(double *)(v4 + 96) < 0.1))
    {
      v2 = *(unsigned __int8 *)(v4 + 72);
      v11 = *(unsigned __int8 *)(v4 + 80);
    }
    else
    {
      v11 = 0;
    }
  }
  v13 = __ldxr(v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, v7))
    {
      if (v11)
        goto LABEL_96;
      goto LABEL_28;
    }
  }
  else
  {
    __clrex();
  }
  a1 = WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 48));
  if (v11)
    goto LABEL_96;
LABEL_28:
  v14 = *(unsigned __int8 *)(a2 + 92);
  v15 = v14 == 32 || v14 == 1;
  if ((v15 || !*(_BYTE *)(a2 + 92) && !*(_BYTE *)(a2 + 93)) && *(_BYTE *)(v4 + 229))
    *(_BYTE *)(v4 + 229) = 0;
  v16 = *(_QWORD *)(v4 + 16);
  if (!v16)
  {
    v2 = 1;
    goto LABEL_78;
  }
  v17 = *(float *)(v4 + 208) + (float)*(int *)(a2 + 52);
  v18 = (float)(*(float *)(v4 + 212) - (float)(*(float *)(v16 + 392) + (float)*(int *)(v16 + 396)))
      + (float)*(int *)(a2 + 56);
  if (*(int *)(v4 + 184) >= 1 && *(int *)(v4 + 188) > 0 || (v29 = *(_QWORD *)(v4 + 200)) != 0 && *(_DWORD *)(v29 - 12))
  {
    v19 = roundf(v17);
    v20 = 0x7FFFFFFFLL;
    v21 = 0x80000000;
    if (v19 > -2147500000.0)
      v21 = (int)v19;
    if (v19 < 2147500000.0)
      v20 = v21;
    v22 = roundf(v18);
    if (v22 >= 2147500000.0)
    {
      v23 = 0x7FFFFFFF00000000;
    }
    else if (v22 <= -2147500000.0)
    {
      v23 = 0x8000000000000000;
    }
    else
    {
      v23 = (unint64_t)(int)v22 << 32;
    }
    v41 = v23 | v20;
    v24 = *(_QWORD *)(v4 + 200);
    if (v24)
    {
      v25 = *(_DWORD *)(v24 - 8);
      v26 = v25 & 0x22EA40F5;
      v27 = *(unsigned __int8 *)(v24 + 32 * v26);
      if (v27 != 15)
      {
        v28 = 1;
        while (v27 != 255)
        {
          v26 = ((_DWORD)v26 + v28) & v25;
          v27 = *(unsigned __int8 *)(v24 + 32 * v26);
          ++v28;
          if (v27 == 15)
            goto LABEL_58;
        }
        v26 = *(unsigned int *)(v24 - 4);
      }
LABEL_58:
      if (v26 != *(_DWORD *)(v24 - 4))
      {
        a1 = WebCore::Region::contains(v24 + 32 * v26 + 8, (const WebCore::IntPoint *)&v41);
        if ((a1 & 1) != 0)
          goto LABEL_77;
      }
    }
    WebCore::Region::contains(v4 + 176, (const WebCore::IntPoint *)&v41);
    v30 = *(_QWORD *)(v4 + 200);
    if (v30)
    {
      v31 = *(_DWORD *)(v30 - 8);
      v32 = v31 & 0x2BF062CF;
      v33 = *(unsigned __int8 *)(v30 + 32 * v32);
      if (v33 != 3)
      {
        v34 = 1;
        while (v33 != 255)
        {
          v32 = ((_DWORD)v32 + v34) & v31;
          v33 = *(unsigned __int8 *)(v30 + 32 * v32);
          ++v34;
          if (v33 == 3)
            goto LABEL_67;
        }
        v32 = *(unsigned int *)(v30 - 4);
      }
LABEL_67:
      if (v32 != *(_DWORD *)(v30 - 4))
      {
        a1 = WebCore::Region::contains(v30 + 32 * v32 + 8, (const WebCore::IntPoint *)&v41);
        if ((a1 & 1) != 0)
        {
LABEL_77:
          v2 = 10;
          goto LABEL_78;
        }
      }
    }
    WebCore::Region::contains(v4 + 176, (const WebCore::IntPoint *)&v41);
  }
  a1 = (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v4 + 344))(v4, v17, v18);
  if ((a1 & 2) != 0)
  {
    if (*(_BYTE *)(v4 + 229) && *(_BYTE *)(v4 + 228) == 1)
    {
      v2 = 5;
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  if ((a1 & 1) != 0)
    v2 = 5;
  else
    v2 = 1;
LABEL_78:
  if (!*(_BYTE *)(v4 + 328))
    goto LABEL_96;
  if (__ldaxr(v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_83;
  }
  a1 = MEMORY[0x19AEA534C](v4 + 48);
LABEL_83:
  v36 = *(unsigned __int8 *)(a2 + 92);
  if (v36 == 32 || v36 == 1)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    if (v37 - *(double *)(v4 + 96) >= 0.1)
    {
      if (*(_BYTE *)(v4 + 80))
        *(_BYTE *)(v4 + 80) = 0;
      if (!*(_BYTE *)(v4 + 89))
        *(_BYTE *)(v4 + 89) = 1;
      *(_BYTE *)(v4 + 88) = v2;
    }
  }
  v38 = __ldxr(v7);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_95;
  }
  if (__stlxr(0, v7))
LABEL_95:
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 48));
LABEL_96:
  v39 = __ldxr(v5);
  if (v39 == 1)
  {
    if (!__stlxr(0, v5))
      return v2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return v2;
}

uint64_t WebCore::ScrollingTree::handleWheelEvent(unsigned __int8 *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  int v11;
  double v12;
  int v13;
  WTF::MonotonicTime *v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  double v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  __int16 v36;
  int v37;
  uint64_t *v38;
  float v39;
  float v40;
  unsigned __int8 *v41;
  float v43;
  float v44;
  int v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  int v55;
  uint64_t v57;
  uint64_t v58[2];

  v6 = (uint64_t)a1;
  v7 = a1 + 12;
  if (__ldaxr(a1 + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEA534C](a1 + 12);
LABEL_5:
  if (*(_BYTE *)(v6 + 337))
    a1 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 208))(v6, *(unsigned __int8 *)(a2 + 92), *(unsigned __int8 *)(a2 + 93));
  v9 = (unsigned __int8 *)(v6 + 48);
  if (*(_BYTE *)(v6 + 328))
  {
    if (__ldaxr(v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_12;
    }
    a1 = (unsigned __int8 *)MEMORY[0x19AEA534C](v6 + 48);
LABEL_12:
    v11 = *(unsigned __int8 *)(a2 + 92);
    if (v11 == 32 || v11 == 1)
    {
      WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
      if (v12 - *(double *)(v6 + 96) >= 0.1)
      {
        if (*(_BYTE *)(v6 + 80))
          *(_BYTE *)(v6 + 80) = 0;
        if (!*(_BYTE *)(v6 + 89))
          *(_BYTE *)(v6 + 89) = 1;
        *(_BYTE *)(v6 + 88) = a3;
      }
    }
    v13 = __ldxr(v9);
    if (v13 == 1)
    {
      if (!__stlxr(0, v9))
        goto LABEL_25;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 48));
  }
LABEL_25:
  v14 = *(WTF::MonotonicTime **)(v6 + 16);
  if (!v14)
  {
    LOBYTE(v16) = 0;
    v17 = 0;
    goto LABEL_96;
  }
  if (*(_BYTE *)(v6 + 340))
  {
    v15 = *(unsigned __int8 *)(a2 + 92);
    if (v15 == 1 || v15 == 32)
    {
      *(_OWORD *)(v6 + 112) = 0u;
      *(_OWORD *)(v6 + 128) = 0u;
    }
    else if (v15 == 16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
      LOBYTE(v16) = 0;
      v17 = 1;
      goto LABEL_96;
    }
    if (!*(_BYTE *)(v6 + 328))
      goto LABEL_69;
    if (__ldaxr(v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_42;
    }
    v14 = (WTF::MonotonicTime *)MEMORY[0x19AEA534C](v6 + 48);
LABEL_42:
    v25 = *(unsigned __int8 *)(a2 + 92);
    if (v25 == 1
      || v25 == 4
      || (v26 = *(unsigned __int8 *)(a2 + 93), v26 == 1)
      || v26 == 4
      || v25 == 8 && !*(_BYTE *)(a2 + 93)
      || (v27 = 0, v28 = 0, LOBYTE(v29) = 0, !*(_BYTE *)(a2 + 92)) && v26 == 8)
    {
      if (*(_BYTE *)(v6 + 80) && (WTF::MonotonicTime::now(v14), v30 - *(double *)(v6 + 96) < 0.1))
      {
        v29 = *(_QWORD *)(v6 + 56);
        v3 = *(_QWORD *)(v6 + 64);
        v28 = v29 & 0xFFFFFFFFFFFFFF00;
        v27 = *(unsigned __int8 *)(v6 + 80);
      }
      else
      {
        v28 = 0;
        LOBYTE(v29) = 0;
        v27 = 0;
      }
    }
    v31 = __ldxr(v9);
    if (v31 == 1)
    {
      if (!__stlxr(0, v9))
      {
        if (!v27)
          goto LABEL_69;
LABEL_60:
        v32 = v29 | v28;
        v58[0] = v32;
        v58[1] = v3;
        if (v32)
        {
          v33 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v6 + 24), v58);
          if (v33)
          {
            v34 = (unsigned __int8 *)v33[2];
            if (v34)
            {
              v35 = v34[40];
              if (v35 <= 5 && ((1 << v35) & 0x2B) != 0)
              {
                v36 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)v34 + 80))(v34, a2, 1);
                LOBYTE(v16) = v36;
                v17 = HIBYTE(v36);
                if ((v36 & 0x100) == 0)
                  goto LABEL_96;
                WebCore::ScrollingTreeLatchingController::nodeDidHandleEvent((WTF::MonotonicTime *)(v6 + 48), v32, v3, a3, a2, *(unsigned __int8 *)(v6 + 328));
                v37 = *(unsigned __int8 *)(a2 + 92);
                if (v37 == 1)
                {
                  *(_QWORD *)(v6 + 128) = v32;
                  v38 = (uint64_t *)(v6 + 136);
                }
                else
                {
                  if (v37 != 32)
                    goto LABEL_108;
                  *(_QWORD *)(v6 + 112) = v32;
                  v38 = (uint64_t *)(v6 + 120);
                }
                *v38 = v3;
LABEL_108:
                if (*(_BYTE *)(a2 + 93) == 1)
                {
                  *(_QWORD *)(v6 + 128) = v32;
                  *(_QWORD *)(v6 + 136) = v3;
                }
                goto LABEL_96;
              }
            }
          }
        }
LABEL_69:
        v39 = (float)*(int *)(a2 + 52);
        v40 = (float)*(int *)(a2 + 56);
        v41 = (unsigned __int8 *)(v6 + 168);
        if (__ldaxr((unsigned __int8 *)(v6 + 168)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v41))
        {
          goto LABEL_73;
        }
        MEMORY[0x19AEA534C](v6 + 168);
LABEL_73:
        v43 = *(float *)(v6 + 208) + v39;
        v44 = (float)(*(float *)(v6 + 212)
                    - (float)(*(float *)(*(_QWORD *)(v6 + 16) + 392) + (float)*(int *)(*(_QWORD *)(v6 + 16) + 396)))
            + v40;
        v45 = __ldxr(v41);
        if (v45 == 1)
        {
          if (!__stlxr(0, v41))
          {
LABEL_78:
            (*(void (**)(uint64_t *__return_ptr, uint64_t, float, float))(*(_QWORD *)v6 + 336))(v58, v6, v43, v44);
            v16 = WebCore::ScrollingTree::handleWheelEventWithNode(v6, (__int128 *)a2, a3, v58[0], 1);
            v47 = v58[0];
            v58[0] = 0;
            if (!v47)
              goto LABEL_95;
            v48 = *(_QWORD *)(v47 + 8);
            if (__ldaxr((unsigned __int8 *)v48))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v48))
            {
              goto LABEL_83;
            }
            MEMORY[0x19AEA534C](v48);
LABEL_83:
            v50 = *(_QWORD *)(v48 + 8);
            v51 = v50 - 1;
            *(_QWORD *)(v48 + 8) = v50 - 1;
            if (v50 == 1)
            {
              v57 = *(_QWORD *)(v48 + 16);
              v52 = *(_QWORD *)(v48 + 24);
              *(_QWORD *)(v48 + 24) = 0;
              v53 = v57 != 0;
            }
            else
            {
              v52 = 0;
              v53 = 1;
            }
            v54 = __ldxr((unsigned __int8 *)v48);
            if (v54 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v48))
              {
                if (!v51)
                  goto LABEL_91;
                goto LABEL_95;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v48);
            if (!v51)
            {
LABEL_91:
              if (v52)
                (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
              if (!v53)
                WTF::fastFree((WTF *)v48, v46);
            }
LABEL_95:
            v17 = HIBYTE(v16);
            goto LABEL_96;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 168));
        goto LABEL_78;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 48));
    if (!v27)
      goto LABEL_69;
    goto LABEL_60;
  }
  v18 = (*(uint64_t (**)(WTF::MonotonicTime *, uint64_t, uint64_t))(*(_QWORD *)v14 + 80))(v14, a2, 1);
  LOBYTE(v16) = v18;
  v17 = HIBYTE(v18);
  if ((v18 & 0x100) == 0)
    goto LABEL_96;
  v19 = *(_QWORD *)(v6 + 16);
  v20 = *(_QWORD *)(v19 + 48);
  v21 = *(_QWORD *)(v19 + 56);
  v22 = *(unsigned __int8 *)(a2 + 92);
  if (v22 == 1)
  {
    *(_QWORD *)(v6 + 128) = v20;
    v23 = (_QWORD *)(v6 + 136);
  }
  else
  {
    if (v22 != 32)
      goto LABEL_104;
    *(_QWORD *)(v6 + 112) = v20;
    v23 = (_QWORD *)(v6 + 120);
  }
  *v23 = v21;
LABEL_104:
  if (*(_BYTE *)(a2 + 93) == 1)
  {
    *(_QWORD *)(v6 + 128) = v20;
    *(_QWORD *)(v6 + 136) = v21;
  }
LABEL_96:
  v55 = __ldxr(v7);
  if (v55 == 1)
  {
    if (!__stlxr(0, v7))
      return (v16 | a3 & 0xC) | (v17 << 8);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return (v16 | a3 & 0xC) | (v17 << 8);
}

uint64_t WebCore::ScrollingTree::handleWheelEventWithNode(uint64_t a1, __int128 *a2, char a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v10;
  uint64_t v13;
  int v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;
  float v20;
  int v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  int v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[32];
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v5 = a2[5];
  *(_OWORD *)v66 = a2[4];
  *(_OWORD *)&v66[16] = v5;
  v6 = a2[7];
  v67 = a2[6];
  v68 = v6;
  v7 = a2[1];
  v62 = *a2;
  v63 = v7;
  v8 = a2[3];
  v64 = a2[2];
  v65 = v8;
  if (!a4)
    return 0;
  v10 = a4;
  v13 = *(_QWORD *)(a4 + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v13);
LABEL_6:
  ++*(_QWORD *)(v13 + 8);
  v15 = __ldxr((unsigned __int8 *)v13);
  v54 = a3;
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v13))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_11:
  v55 = a1;
  v56 = (uint64_t *)(a1 + 24);
  while (1)
  {
    v16 = *(unsigned __int8 *)(v10 + 40);
    if (v16 <= 5 && ((1 << v16) & 0x2B) != 0)
      break;
LABEL_35:
    if (v16 != 6
      || (v57 = *(_OWORD *)(v10 + 96), !(_QWORD)v57)
      || (v28 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v56, (uint64_t *)&v57)) == 0|| (v29 = v28[2]) == 0)
    {
      v30 = *(_QWORD *)(v10 + 80);
      if (!v30)
      {
        v29 = 0;
        goto LABEL_63;
      }
      v29 = *(_QWORD *)(v10 + 88);
      if (__ldaxr((unsigned __int8 *)v30))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v30))
      {
        goto LABEL_52;
      }
      MEMORY[0x19AEA534C](v30);
LABEL_52:
      if (!*(_QWORD *)(v30 + 24))
      {
        v29 = 0;
        goto LABEL_58;
      }
      goto LABEL_57;
    }
    v30 = *(_QWORD *)(v29 + 8);
    if (__ldaxr((unsigned __int8 *)v30))
    {
      __clrex();
LABEL_56:
      MEMORY[0x19AEA534C](v30);
      goto LABEL_57;
    }
    if (__stxr(1u, (unsigned __int8 *)v30))
      goto LABEL_56;
LABEL_57:
    ++*(_QWORD *)(v30 + 8);
LABEL_58:
    v33 = __ldxr((unsigned __int8 *)v30);
    if (v33 != 1)
    {
      __clrex();
LABEL_62:
      WTF::Lock::unlockSlow((WTF::Lock *)v30);
      goto LABEL_63;
    }
    if (__stlxr(0, (unsigned __int8 *)v30))
      goto LABEL_62;
LABEL_63:
    v34 = *(_QWORD *)(v10 + 8);
    if (__ldaxr((unsigned __int8 *)v34))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v34))
    {
      goto LABEL_67;
    }
    MEMORY[0x19AEA534C](v34);
LABEL_67:
    v36 = *(_QWORD *)(v34 + 8);
    v37 = v36 - 1;
    *(_QWORD *)(v34 + 8) = v36 - 1;
    if (v36 == 1)
    {
      v41 = *(_QWORD *)(v34 + 16);
      v38 = *(_QWORD *)(v34 + 24);
      *(_QWORD *)(v34 + 24) = 0;
      v39 = v41 != 0;
    }
    else
    {
      v38 = 0;
      v39 = 1;
    }
    v40 = __ldxr((unsigned __int8 *)v34);
    if (v40 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v34))
      {
        if (!v37)
          goto LABEL_75;
        goto LABEL_79;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
    if (!v37)
    {
LABEL_75:
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      if (!v39)
        WTF::fastFree((WTF *)v34, a2);
    }
LABEL_79:
    v10 = v29;
    if (!v29)
      return 0;
  }
  v18 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v10 + 80))(v10, &v62, a5);
  v19 = v18;
  if ((unsigned __int16)v18 > 0xFFu)
    goto LABEL_85;
  if ((_DWORD)a5 != 1 || (v18 & 0xE) != 0)
    goto LABEL_92;
  v20 = *(float *)&v66[8];
  v21 = *(_DWORD *)&v66[4];
  v22 = *(unsigned __int8 *)(v10 + 252);
  if (*(_BYTE *)(v10 + 252))
  {
    if (*(float *)&v66[8] == 0.0 && *(float *)&v66[4] != 0.0)
    {
      v19 = 0;
      goto LABEL_92;
    }
    v19 = 256;
    if (*(float *)&v66[8] == 0.0 || *(_BYTE *)(v10 + 253))
      goto LABEL_85;
    goto LABEL_24;
  }
  if (!*(_BYTE *)(v10 + 253) || *(float *)&v66[4] != 0.0)
  {
    if (!*(_BYTE *)(v10 + 253))
    {
      v59 = v64;
      v60 = v65;
      v61 = *(_DWORD *)v66;
      v57 = v62;
      v58 = v63;
      v27 = *(_QWORD *)&v66[12];
      v24 = *(_QWORD *)&v66[20];
LABEL_34:
      v64 = v59;
      v65 = v60;
      *(_DWORD *)v66 = v61;
      v62 = v57;
      v63 = v58;
      *(_DWORD *)&v66[4] = v21;
      *(float *)&v66[8] = v20;
      *(_QWORD *)&v66[12] = v27;
      *(_QWORD *)&v66[20] = v24;
      v16 = *(unsigned __int8 *)(v10 + 40);
      goto LABEL_35;
    }
    if (*(float *)&v66[4] != 0.0)
    {
      v23 = 0;
      goto LABEL_25;
    }
LABEL_24:
    v23 = v22 != 0;
    v21 = 0;
LABEL_25:
    v24 = *(_QWORD *)&v66[20];
    v26 = *(float *)&v66[8] != 0.0 || v22 == 0;
    if (!v23 || !v26)
      v20 = 0.0;
    v59 = v64;
    v60 = v65;
    v61 = *(_DWORD *)v66;
    v57 = v62;
    v58 = v63;
    v27 = *(_QWORD *)&v66[12];
    goto LABEL_34;
  }
  v19 = 256;
LABEL_85:
  WebCore::ScrollingTreeLatchingController::nodeDidHandleEvent((WTF::MonotonicTime *)(v55 + 48), *(_QWORD *)(v10 + 48), *(_QWORD *)(v10 + 56), v54, (uint64_t)&v62, *(unsigned __int8 *)(v55 + 328));
  v42 = *(_QWORD *)(v10 + 48);
  v43 = *(_QWORD *)(v10 + 56);
  if (v66[28] == 1)
  {
    *(_QWORD *)(v55 + 128) = v42;
    v44 = (_QWORD *)(v55 + 136);
LABEL_89:
    *v44 = v43;
  }
  else if (v66[28] == 32)
  {
    *(_QWORD *)(v55 + 112) = v42;
    v44 = (_QWORD *)(v55 + 120);
    goto LABEL_89;
  }
  if (v66[29] == 1)
  {
    *(_QWORD *)(v55 + 128) = v42;
    *(_QWORD *)(v55 + 136) = v43;
  }
LABEL_92:
  v45 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v45))
  {
    __clrex();
    goto LABEL_95;
  }
  if (__stxr(1u, (unsigned __int8 *)v45))
LABEL_95:
    MEMORY[0x19AEA534C](v45);
  v47 = *(_QWORD *)(v45 + 8);
  v48 = v47 - 1;
  *(_QWORD *)(v45 + 8) = v47 - 1;
  if (v47 == 1)
  {
    v53 = *(_QWORD *)(v45 + 16);
    v49 = *(_QWORD *)(v45 + 24);
    *(_QWORD *)(v45 + 24) = 0;
    v50 = v53 != 0;
  }
  else
  {
    v49 = 0;
    v50 = 1;
  }
  v51 = __ldxr((unsigned __int8 *)v45);
  if (v51 != 1)
  {
    __clrex();
LABEL_103:
    WTF::Lock::unlockSlow((WTF::Lock *)v45);
    if (!v48)
      goto LABEL_104;
    return v19;
  }
  if (__stlxr(0, (unsigned __int8 *)v45))
    goto LABEL_103;
  if (!v48)
  {
LABEL_104:
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    if (!v50)
      WTF::fastFree((WTF *)v45, a2);
  }
  return v19;
}

uint64_t *WebCore::ScrollingTree::nodeForID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t v4[2];

  v4[0] = a2;
  v4[1] = a3;
  if (!a2)
    return 0;
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a1 + 24), v4);
  if (result)
    return (uint64_t *)result[2];
  return result;
}

uint64_t WebCore::ScrollingTree::scrollingNodeForPoint@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    goto LABEL_11;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    result = MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  *a2 = v3;
  return result;
}

uint64_t WebCore::ScrollingTree::eventListenerRegionTypesForPoint()
{
  return 0;
}

uint64_t WebCore::ScrollingTree::removeNode(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned __int8 *v8;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  _OWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v46;
  uint64_t *v47;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  int v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  int v97;
  void *v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;

  v7 = result;
  v110 = a2;
  v111 = a3;
  v8 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEA534C](result + 48);
    goto LABEL_5;
  }
  if (__stxr(1u, v8))
    goto LABEL_4;
LABEL_5:
  if (*(_BYTE *)(v7 + 80))
  {
    if (*(_QWORD *)(v7 + 56) == a2 && *(_QWORD *)(v7 + 64) == a3)
      *(_BYTE *)(v7 + 80) = 0;
  }
  v11 = __ldxr(v8);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v8))
LABEL_16:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v13 = (uint64_t *)(v7 + 24);
  v12 = *(_QWORD *)(v7 + 24);
  if (v12)
  {
    result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*(_QWORD *)(v7 + 24), v110, v111);
    if (result)
    {
      v14 = (_OWORD *)result;
      if (result != v12 + 24 * *(unsigned int *)(v12 - 4))
      {
        v15 = *(_QWORD **)(result + 16);
        *(_QWORD *)(result + 16) = 0;
        v16 = *v13;
        if (!*v13 || (v16 += 24 * *(unsigned int *)(v16 - 4), v16 != result))
        {
          if (v16 != result)
            result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v7 + 24, (_QWORD *)result);
        }
        if (v15)
        {
          v17 = (unsigned __int8 *)(v7 + 32);
          if (__ldaxr((unsigned __int8 *)(v7 + 32)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v17))
          {
LABEL_29:
            v19 = *(_QWORD *)(v7 + 40);
            if (v19)
            {
              v20 = v15[8];
              v21 = v15[9];
              v22 = *(_DWORD *)(v19 - 8);
              v23 = (v20 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v20 - 1640531527) << 16) ^ ((unsigned __int16)v20 - 1640531527);
              v24 = (v20 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v20) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v20) + (v23 >> 11));
              v25 = (v21 >> 5) & 0x7FFF800 ^ ((v24 + (unsigned __int16)v21 + (v24 >> 11)) << 16) ^ (v24 + (unsigned __int16)v21 + (v24 >> 11));
              v26 = (v21 >> 37) & 0x7FFF800 ^ ((v25 + WORD2(v21) + (v25 >> 11)) << 16) ^ (v25 + WORD2(v21) + (v25 >> 11));
              v27 = (v26 + (v26 >> 11)) ^ (8 * (v26 + (v26 >> 11)));
              v28 = (v27 + (v27 >> 5)) ^ (4 * (v27 + (v27 >> 5)));
              v29 = (v28 + (v28 >> 15)) ^ ((v28 + (v28 >> 15)) << 10);
              if (!v29)
                v29 = 0x800000;
              v30 = v22 & v29;
              v31 = (uint64_t *)(v19 + 24 * (v22 & v29));
              v32 = *v31;
              v33 = v31[1];
              if (*v31 != v20 || v33 != v21)
              {
                v35 = 1;
                while (v32 | v33)
                {
                  v30 = (v30 + v35) & v22;
                  v31 = (uint64_t *)(v19 + 24 * v30);
                  v32 = *v31;
                  v33 = v31[1];
                  ++v35;
                  if (*v31 == v20 && v33 == v21)
                    goto LABEL_45;
                }
                v31 = (uint64_t *)(v19 + 24 * *(unsigned int *)(v19 - 4));
              }
LABEL_45:
              if ((uint64_t *)(v19 + 24 * *(unsigned int *)(v19 - 4)) != v31)
              {
                v39 = v31[2];
                v37 = v31 + 2;
                v38 = v39;
                if (v39)
                {
                  v40 = *(_DWORD *)(v38 - 8);
                  v41 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v110) & v40;
                  v42 = (uint64_t *)(v38 + 16 * v41);
                  v43 = *v42;
                  v44 = v42[1];
                  if (*v42 == v110 && v44 == v111)
                  {
LABEL_58:
                    v14 = (_OWORD *)(v38 + 16 * v41);
                    v49 = *v37;
                    if (!*v37)
                    {
LABEL_63:
                      if ((_OWORD *)v49 != v14)
                        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v37, v14);
                      goto LABEL_65;
                    }
                    v50 = *(unsigned int *)(v49 - 4);
LABEL_62:
                    v49 += 16 * v50;
                    if ((_OWORD *)v49 == v14)
                      goto LABEL_65;
                    goto LABEL_63;
                  }
                  v46 = 1;
                  while (v43 | v44)
                  {
                    v41 = ((_DWORD)v41 + v46) & v40;
                    v47 = (uint64_t *)(v38 + 16 * v41);
                    v43 = *v47;
                    v44 = v47[1];
                    ++v46;
                    if (v43 == v110 && v44 == v111)
                      goto LABEL_58;
                  }
                  v49 = *v37;
                  if (*v37)
                  {
                    v50 = *(unsigned int *)(v49 - 4);
                    v14 = (_OWORD *)(v49 + 16 * v50);
                    goto LABEL_62;
                  }
                }
              }
            }
LABEL_65:
            v51 = __ldxr(v17);
            if (v51 == 1)
            {
              if (!__stlxr(0, v17))
              {
LABEL_70:
                if (!a4)
                  goto LABEL_155;
                v52 = v15[1];
                if (__ldaxr((unsigned __int8 *)v52))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v52))
                {
                  goto LABEL_75;
                }
                MEMORY[0x19AEA534C](v52);
LABEL_75:
                ++*(_QWORD *)(v52 + 8);
                v54 = __ldxr((unsigned __int8 *)v52);
                if (v54 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v52))
                    goto LABEL_80;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v52);
LABEL_80:
                v56 = (uint64_t *)(a4 + 112);
                v55 = *(_QWORD *)(a4 + 112);
                if (!v55)
                  goto LABEL_115;
                v57 = *(_DWORD *)(v55 - 8);
                v58 = ((unint64_t)v15 + ~((_QWORD)v15 << 32)) ^ (((unint64_t)v15 + ~((_QWORD)v15 << 32)) >> 22);
                v59 = 9 * ((v58 + ~(v58 << 13)) ^ ((v58 + ~(v58 << 13)) >> 8));
                v60 = (v59 ^ (v59 >> 15)) + ~((v59 ^ (v59 >> 15)) << 27);
                v61 = v57 & ((v60 >> 31) ^ v60);
                v62 = *(_QWORD **)(v55 + 8 * v61);
                if (v62 != v15)
                {
                  v63 = 1;
                  while (v62)
                  {
                    v61 = ((_DWORD)v61 + v63) & v57;
                    v62 = *(_QWORD **)(v55 + 8 * v61);
                    ++v63;
                    if (v62 == v15)
                      goto LABEL_87;
                  }
                  v61 = *(unsigned int *)(v55 - 4);
                }
LABEL_87:
                if (v61 == *(_DWORD *)(v55 - 4))
                {
LABEL_115:
                  v78 = *(unsigned int *)(a4 + 28);
                  if (!(_DWORD)v78)
                    goto LABEL_139;
                  v79 = *(_QWORD **)(a4 + 16);
                  if ((_QWORD *)*v79 != v15)
                  {
                    v80 = 0;
                    v81 = v78 - 1;
                    while (v81 != v80)
                    {
                      v82 = (_QWORD *)v79[++v80];
                      if (v82 == v15)
                        goto LABEL_122;
                    }
LABEL_139:
                    v91 = v15[1];
                    if (__ldaxr((unsigned __int8 *)v91))
                    {
                      __clrex();
                    }
                    else if (!__stxr(1u, (unsigned __int8 *)v91))
                    {
                      goto LABEL_143;
                    }
                    MEMORY[0x19AEA534C](v91);
LABEL_143:
                    v93 = *(_QWORD *)(v91 + 8);
                    v94 = v93 - 1;
                    *(_QWORD *)(v91 + 8) = v93 - 1;
                    if (v93 == 1)
                    {
                      v107 = *(_QWORD *)(v91 + 16);
                      v95 = *(_QWORD *)(v91 + 24);
                      *(_QWORD *)(v91 + 24) = 0;
                      v96 = v107 != 0;
                    }
                    else
                    {
                      v95 = 0;
                      v96 = 1;
                    }
                    v97 = __ldxr((unsigned __int8 *)v91);
                    if (v97 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)v91))
                      {
LABEL_150:
                        if (!v94)
                        {
                          if (v95)
                            (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
                          if (!v96)
                            WTF::fastFree((WTF *)v91, v14);
                        }
LABEL_155:
                        result = (*(uint64_t (**)(_QWORD *))(*v15 + 40))(v15);
                        v99 = v15[1];
                        if (__ldaxr((unsigned __int8 *)v99))
                        {
                          __clrex();
                        }
                        else if (!__stxr(1u, (unsigned __int8 *)v99))
                        {
                          goto LABEL_159;
                        }
                        result = MEMORY[0x19AEA534C](v99);
LABEL_159:
                        v101 = *(_QWORD *)(v99 + 8);
                        v102 = v101 - 1;
                        *(_QWORD *)(v99 + 8) = v101 - 1;
                        if (v101 == 1)
                        {
                          v106 = *(_QWORD *)(v99 + 16);
                          v103 = *(_QWORD *)(v99 + 24);
                          *(_QWORD *)(v99 + 24) = 0;
                          v104 = v106 != 0;
                        }
                        else
                        {
                          v103 = 0;
                          v104 = 1;
                        }
                        v105 = __ldxr((unsigned __int8 *)v99);
                        if (v105 == 1)
                        {
                          if (!__stlxr(0, (unsigned __int8 *)v99))
                          {
                            if (v102)
                              return result;
LABEL_167:
                            if (v103)
                              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
                            if (!v104)
                              return WTF::fastFree((WTF *)v99, v98);
                            return result;
                          }
                        }
                        else
                        {
                          __clrex();
                        }
                        result = WTF::Lock::unlockSlow((WTF::Lock *)v99);
                        if (v102)
                          return result;
                        goto LABEL_167;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v91);
                    goto LABEL_150;
                  }
                  v80 = 0;
LABEL_122:
                  v83 = &v79[v80];
                  *v83 = 0;
                  v84 = v15[1];
                  if (__ldaxr((unsigned __int8 *)v84))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v84))
                  {
                    goto LABEL_126;
                  }
                  MEMORY[0x19AEA534C](v84);
LABEL_126:
                  v86 = *(_QWORD *)(v84 + 8);
                  v87 = v86 - 1;
                  *(_QWORD *)(v84 + 8) = v86 - 1;
                  if (v86 == 1)
                  {
                    v108 = *(_QWORD *)(v84 + 16);
                    v88 = *(_QWORD *)(v84 + 24);
                    *(_QWORD *)(v84 + 24) = 0;
                    v89 = v108 != 0;
                  }
                  else
                  {
                    v88 = 0;
                    v89 = 1;
                  }
                  v90 = __ldxr((unsigned __int8 *)v84);
                  if (v90 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v84))
                      goto LABEL_133;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v84);
LABEL_133:
                  if (!v87)
                  {
                    if (v88)
                      (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
                    if (!v89)
                      WTF::fastFree((WTF *)v84, v14);
                  }
                  memmove(v83, v83 + 1, *(_QWORD *)(a4 + 16) + 8 * *(unsigned int *)(a4 + 28) - (_QWORD)(v83 + 1));
                  --*(_DWORD *)(a4 + 28);
                  goto LABEL_139;
                }
                v64 = *(_QWORD *)(v55 + 8 * v61);
                *(_QWORD *)(v55 + 8 * v61) = -1;
                if (!v64)
                {
LABEL_105:
                  ++*(_DWORD *)(*v56 - 16);
                  v72 = *v56;
                  if (*v56)
                    v73 = *(_DWORD *)(v72 - 12) - 1;
                  else
                    v73 = -1;
                  *(_DWORD *)(v72 - 12) = v73;
                  v74 = *v56;
                  if (*v56)
                  {
                    v75 = 6 * *(_DWORD *)(v74 - 12);
                    v76 = *(_DWORD *)(v74 - 4);
                    if (v75 < v76 && v76 >= 9)
                      WTF::HashTable<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>::rehash((uint64_t *)(a4 + 112), v76 >> 1);
                  }
                  goto LABEL_115;
                }
                v65 = *(_QWORD *)(v64 + 8);
                if (__ldaxr((unsigned __int8 *)v65))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v65))
                {
                  goto LABEL_93;
                }
                MEMORY[0x19AEA534C](v65);
LABEL_93:
                v67 = *(_QWORD *)(v65 + 8);
                v68 = v67 - 1;
                *(_QWORD *)(v65 + 8) = v67 - 1;
                if (v67 == 1)
                {
                  v109 = *(_QWORD *)(v65 + 16);
                  v69 = *(_QWORD *)(v65 + 24);
                  *(_QWORD *)(v65 + 24) = 0;
                  v70 = v109 != 0;
                }
                else
                {
                  v69 = 0;
                  v70 = 1;
                }
                v71 = __ldxr((unsigned __int8 *)v65);
                if (v71 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v65))
                  {
LABEL_100:
                    if (!v68)
                    {
                      if (v69)
                        (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
                      if (!v70)
                        WTF::fastFree((WTF *)v65, v14);
                    }
                    goto LABEL_105;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v65);
                goto LABEL_100;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v17);
            goto LABEL_70;
          }
          MEMORY[0x19AEA534C](v7 + 32);
          goto LABEL_29;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::ScrollingTree::commitTreeStateInternal(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 a4)
{
  int v7;
  const WebCore::ScrollingStateNode *v8;
  int v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WebCore::ScrollingTreeFrameHostingNode *v21;
  uint64_t v22;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  WebCore::ScrollingStateTree ***v35;
  uint64_t v36;
  WebCore::ScrollingStateTree **v37;
  uint64_t v38;
  WebCore::ScrollingStateTree *v39;
  WTF *v40;
  unsigned __int8 *v41;
  WTF *v43;
  uint64_t v44;
  int v45;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  int v63;
  uint64_t v64;
  int v65;
  WebCore::ScrollingTreeFrameHostingNode *v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  int v73;
  int v74;
  uint64_t v75;
  char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  int v135;
  int v136;
  uint64_t *v137;
  uint64_t v138;
  int v139;
  const WebCore::ScrollingStateNode *v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v146;
  uint64_t v147;
  WebCore::ScrollingTreeFrameHostingNode *v148;
  WebCore::ScrollingTreeFrameHostingNode *v149;
  uint64_t v151;
  WTF *v152;
  _QWORD *v153;
  WTF *v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int v161;
  unsigned int v162;
  unint64_t v163;
  double v164;
  double v165;
  double v166;
  unsigned int v167;
  uint64_t *v168;
  uint64_t v169;
  int v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v176;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  unsigned int v187;
  uint64_t v188;
  unsigned int v190;
  unsigned int v191;
  unint64_t v192;
  double v193;
  double v194;
  double v195;
  unsigned int v196;
  uint64_t *v197;
  uint64_t v198;
  int v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v205;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  BOOL v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  unsigned int v219;
  unsigned int v220;
  unint64_t v221;
  double v222;
  double v223;
  double v224;
  unsigned int v225;
  unsigned __int8 *v226;
  uint64_t v228;
  int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  unsigned int v237;
  uint64_t v238;
  WebCore::ScrollingTreeFrameHostingNode *v239;
  unint64_t v240;
  int v242;
  uint64_t v243;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v251;
  int v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t *v256;
  uint64_t v257;
  unint64_t *v259;
  unint64_t *v260;
  WTF *v262;
  unsigned int v263;
  WTF *v264;
  WTF *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  WTF *v270;
  uint64_t v271;
  WebCore::ScrollingStateTree **v272;
  uint64_t v273;
  WebCore::ScrollingStateTree *v274;
  WTF *v275;
  WTF *v276;
  void *v277;
  uint64_t v278;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  BOOL v283;
  int v284;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  const WebCore::ScrollingStateNode *v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  WTF *v298;
  WTF *v300;
  const WebCore::ScrollingStateNode *v302;
  const WebCore::ScrollingStateNode *v303;
  uint64_t v304[3];
  _QWORD *v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  WebCore::ScrollingTreeFrameHostingNode *v309[3];

  v7 = a4;
  v8 = *(const WebCore::ScrollingStateNode **)(*a2 + 56);
  if (!v8)
  {
    v308 = 0u;
    memset(v309, 0, sizeof(v309));
    v306 = 0u;
    v307 = 0u;
    if (!a4)
      goto LABEL_278;
LABEL_12:
    v13 = *(_QWORD *)(a1 + 320);
    if (!v13)
      goto LABEL_20;
    v14 = *(_DWORD *)(v13 - 8);
    v15 = (a3 + ~(a3 << 32)) ^ ((unint64_t)(a3 + ~(a3 << 32)) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = *(_QWORD *)(v13 + 16 * v18);
    if (v19 != a3)
    {
      v20 = 1;
      while (v19)
      {
        v18 = ((_DWORD)v18 + v20) & v14;
        v19 = *(_QWORD *)(v13 + 16 * v18);
        ++v20;
        if (v19 == a3)
          goto LABEL_17;
      }
LABEL_20:
      v24 = (uint64_t *)(a1 + 312);
      v25 = *(_QWORD *)(a1 + 312);
      if (v25
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(a1 + 312), 8u, 0), (v25 = *v24) != 0))
      {
        v26 = *(_DWORD *)(v25 - 8);
      }
      else
      {
        v26 = 0;
      }
      v27 = (a3 + ~(a3 << 32)) ^ ((unint64_t)(a3 + ~(a3 << 32)) >> 22);
      v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
      v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
      v30 = v26 & ((v29 >> 31) ^ v29);
      v31 = (uint64_t *)(v25 + 24 * v30);
      v32 = *v31;
      if (*v31)
      {
        v33 = 0;
        v34 = 1;
        do
        {
          if (v32 == a3)
            goto LABEL_121;
          if (v32 == -1)
            v33 = v31;
          v30 = (v30 + v34) & v26;
          v31 = (uint64_t *)(v25 + 24 * v30);
          v32 = *v31;
          ++v34;
        }
        while (*v31);
        if (v33)
        {
          *v33 = 0;
          v33[1] = 0;
          v33[2] = 0;
          --*(_DWORD *)(*v24 - 16);
          v31 = v33;
        }
      }
      *v31 = a3;
      v35 = (WebCore::ScrollingStateTree ***)(v31 + 1);
      v36 = *((unsigned int *)v31 + 5);
      if ((_DWORD)v36)
      {
        v37 = *v35;
        v38 = 8 * v36;
        do
        {
          v39 = *v37;
          *v37 = 0;
          if (v39)
          {
            WebCore::ScrollingStateTree::~ScrollingStateTree(v39, a2);
            if (*(_DWORD *)v40)
            {
              *((_OWORD *)v40 + 3) = 0u;
              *((_OWORD *)v40 + 4) = 0u;
              *((_OWORD *)v40 + 1) = 0u;
              *((_OWORD *)v40 + 2) = 0u;
              *(_OWORD *)v40 = 0u;
            }
            else
            {
              WTF::fastFree(v40, a2);
            }
          }
          ++v37;
          v38 -= 8;
        }
        while (v38);
      }
      v43 = (WTF *)*v35;
      if (*v35)
      {
        v31[1] = 0;
        *((_DWORD *)v31 + 4) = 0;
        WTF::fastFree(v43, a2);
      }
      *v35 = 0;
      v31[2] = 0;
      v44 = *v24;
      if (*v24)
        v45 = *(_DWORD *)(v44 - 12) + 1;
      else
        v45 = 1;
      *(_DWORD *)(v44 - 12) = v45;
      v47 = *v24;
      if (*v24)
        v48 = *(_DWORD *)(v47 - 12);
      else
        v48 = 0;
      v49 = (*(_DWORD *)(v47 - 16) + v48);
      v50 = *(unsigned int *)(v47 - 4);
      if (v50 > 0x400)
      {
        if (v50 > 2 * v49)
          goto LABEL_121;
      }
      else
      {
        if (3 * v50 > 4 * v49)
        {
LABEL_121:
          v75 = *((unsigned int *)v31 + 5);
          if ((_DWORD)v75 == *((_DWORD *)v31 + 4))
          {
            v76 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v31 + 1, v75 + 1, (unint64_t)a2);
            v75 = *((unsigned int *)v31 + 5);
            v77 = v75 + 1;
            v78 = v31[1];
            v79 = *(_QWORD *)v76;
            *(_QWORD *)v76 = 0;
          }
          else
          {
            v77 = v75 + 1;
            v78 = v31[1];
            v79 = *a2;
            *a2 = 0;
          }
          *(_QWORD *)(v78 + 8 * v75) = v79;
          *((_DWORD *)v31 + 5) = v77;
          LOBYTE(v74) = 1;
          goto LABEL_523;
        }
        if (!(_DWORD)v50)
        {
          v51 = 8;
          goto LABEL_120;
        }
      }
      v51 = (_DWORD)v50 << (6 * *(_DWORD *)(v47 - 12) >= (2 * v50));
LABEL_120:
      v31 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v24, v51, v31);
      goto LABEL_121;
    }
LABEL_17:
    v21 = *(WebCore::ScrollingTreeFrameHostingNode **)(v13 + 16 * v18 + 8);
    if (!v21)
      goto LABEL_20;
    v22 = *((_QWORD *)v21 + 1);
    if (__ldaxr((unsigned __int8 *)v22))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v22))
    {
      goto LABEL_92;
    }
    MEMORY[0x19AEA534C](v22);
LABEL_92:
    ++*(_QWORD *)(v22 + 8);
    v65 = __ldxr((unsigned __int8 *)v22);
    if (v65 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v22))
      {
LABEL_97:
        v66 = v309[0];
        v309[0] = v21;
        if (!v66)
          goto LABEL_114;
        v67 = *((_QWORD *)v66 + 1);
        if (__ldaxr((unsigned __int8 *)v67))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v67))
        {
          goto LABEL_102;
        }
        MEMORY[0x19AEA534C](v67);
LABEL_102:
        v69 = *(_QWORD *)(v67 + 8);
        v70 = v69 - 1;
        *(_QWORD *)(v67 + 8) = v69 - 1;
        if (v69 == 1)
        {
          v293 = *(_QWORD *)(v67 + 16);
          v71 = *(_QWORD *)(v67 + 24);
          *(_QWORD *)(v67 + 24) = 0;
          v72 = v293 != 0;
        }
        else
        {
          v71 = 0;
          v72 = 1;
        }
        v73 = __ldxr((unsigned __int8 *)v67);
        if (v73 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v67))
          {
            if (v70)
              goto LABEL_114;
LABEL_110:
            if (v71)
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
            if (!v72)
              WTF::fastFree((WTF *)v67, a2);
LABEL_114:
            if (!v8)
            {
              if (v309[0])
                WebCore::ScrollingTreeFrameHostingNode::removeHostedChildren((uint64_t)v309[0], a2);
              WebCore::CommitTreeState::~CommitTreeState((WebCore::CommitTreeState *)&v306, a2);
              LOBYTE(v74) = 1;
              return v74 & 1;
            }
            goto LABEL_278;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v67);
        if (v70)
          goto LABEL_114;
        goto LABEL_110;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    goto LABEL_97;
  }
  v9 = *(unsigned __int8 *)(*a2 + 73);
  v10 = *((_QWORD *)v8 + 1);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_6:
  ++*(_QWORD *)(v10 + 8);
  v12 = __ldxr((unsigned __int8 *)v10);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  v308 = 0u;
  memset(v309, 0, sizeof(v309));
  v306 = 0u;
  v307 = 0u;
  if (v7)
    goto LABEL_12;
  if (v9)
  {
    v41 = (unsigned __int8 *)(a1 + 168);
    if (__ldaxr((unsigned __int8 *)(a1 + 168)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v41))
    {
LABEL_59:
      *(_QWORD *)(a1 + 208) = 0;
      goto LABEL_60;
    }
    MEMORY[0x19AEA534C](a1 + 168);
    goto LABEL_59;
  }
  if ((*((_QWORD *)v8 + 5) & 0x21C00802800) == 0)
    goto LABEL_278;
  v41 = (unsigned __int8 *)(a1 + 168);
  if (__ldaxr((unsigned __int8 *)(a1 + 168)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v41))
  {
    goto LABEL_129;
  }
  MEMORY[0x19AEA534C](a1 + 168);
LABEL_129:
  v64 = *((_QWORD *)v8 + 5);
  if ((v64 & 0x2000) != 0)
    *(_QWORD *)(a1 + 208) = 0;
  if ((v64 & 0x800000) == 0)
    goto LABEL_132;
LABEL_60:
  v52 = *(_QWORD *)(*a2 + 56);
  if (!v52)
    goto LABEL_70;
  v53 = *(_QWORD *)(v52 + 8);
  if (__ldaxr((unsigned __int8 *)v53))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v53))
  {
    goto LABEL_65;
  }
  MEMORY[0x19AEA534C](v53);
LABEL_65:
  ++*(_QWORD *)(v53 + 8);
  v55 = __ldxr((unsigned __int8 *)v53);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_69;
  }
  if (__stlxr(0, (unsigned __int8 *)v53))
LABEL_69:
    WTF::Lock::unlockSlow((WTF::Lock *)v53);
LABEL_70:
  WebCore::Region::operator=(a1 + 176, (_QWORD *)(v52 + 776));
  WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::HashTable(v304, (unsigned __int8 **)(v52 + 800));
  v56 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v304[0];
  v304[0] = v56;
  if (v56)
  {
    v294 = v8;
    v295 = *(unsigned int *)(v56 - 4);
    if ((_DWORD)v295)
    {
      v296 = (uint64_t *)(v56 + 24);
      do
      {
        if (*((unsigned __int8 *)v296 - 24) != 254)
        {
          v297 = *v296;
          *v296 = 0;
          if (v297)
          {
            v298 = *(WTF **)(v297 + 144);
            if ((WTF *)(v297 + 160) != v298 && v298 != 0)
            {
              *(_QWORD *)(v297 + 144) = 0;
              *(_DWORD *)(v297 + 152) = 0;
              WTF::fastFree(v298, a2);
            }
            v300 = *(WTF **)v297;
            if (v297 + 16 != *(_QWORD *)v297 && v300 != 0)
            {
              *(_QWORD *)v297 = 0;
              *(_DWORD *)(v297 + 8) = 0;
              WTF::fastFree(v300, a2);
            }
            WTF::fastFree((WTF *)v297, a2);
          }
        }
        v296 += 4;
        --v295;
      }
      while (v295);
    }
    WTF::fastFree((WTF *)(v56 - 16), a2);
    v8 = v294;
    if (!v52)
      goto LABEL_88;
  }
  else if (!v52)
  {
    goto LABEL_88;
  }
  v57 = *(_QWORD *)(v52 + 8);
  if (__ldaxr((unsigned __int8 *)v57))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v57))
  {
    goto LABEL_76;
  }
  MEMORY[0x19AEA534C](v57);
LABEL_76:
  v59 = *(_QWORD *)(v57 + 8);
  v60 = v59 - 1;
  *(_QWORD *)(v57 + 8) = v59 - 1;
  if (v59 == 1)
  {
    v287 = *(_QWORD *)(v57 + 16);
    v61 = *(_QWORD *)(v57 + 24);
    *(_QWORD *)(v57 + 24) = 0;
    v62 = v287 != 0;
  }
  else
  {
    v61 = 0;
    v62 = 1;
  }
  v63 = __ldxr((unsigned __int8 *)v57);
  if (v63 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v57))
    {
      if (!v60)
        goto LABEL_84;
      goto LABEL_88;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v57);
  if (!v60)
  {
LABEL_84:
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
    if (!v62)
      WTF::fastFree((WTF *)v57, a2);
  }
LABEL_88:
  if (v9)
    goto LABEL_133;
  v64 = *((_QWORD *)v8 + 5);
LABEL_132:
  if ((v64 & 0x400000000) == 0)
    goto LABEL_160;
LABEL_133:
  v80 = *(_QWORD *)(*a2 + 56);
  if (!v80)
    goto LABEL_143;
  v81 = *(_QWORD *)(v80 + 8);
  if (__ldaxr((unsigned __int8 *)v81))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v81))
  {
    goto LABEL_138;
  }
  MEMORY[0x19AEA534C](v81);
LABEL_138:
  ++*(_QWORD *)(v81 + 8);
  v83 = __ldxr((unsigned __int8 *)v81);
  if (v83 != 1)
  {
    __clrex();
    goto LABEL_142;
  }
  if (__stlxr(0, (unsigned __int8 *)v81))
LABEL_142:
    WTF::Lock::unlockSlow((WTF::Lock *)v81);
LABEL_143:
  *(_BYTE *)(a1 + 340) = *(_BYTE *)(v80 + 871);
  v84 = *(_QWORD *)(v80 + 8);
  if (__ldaxr((unsigned __int8 *)v84))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v84))
  {
    goto LABEL_147;
  }
  MEMORY[0x19AEA534C](v84);
LABEL_147:
  v86 = *(_QWORD *)(v84 + 8);
  v87 = v86 - 1;
  *(_QWORD *)(v84 + 8) = v86 - 1;
  if (v86 == 1)
  {
    v288 = *(_QWORD *)(v84 + 16);
    v88 = *(_QWORD *)(v84 + 24);
    *(_QWORD *)(v84 + 24) = 0;
    v89 = v288 != 0;
  }
  else
  {
    v88 = 0;
    v89 = 1;
  }
  v90 = __ldxr((unsigned __int8 *)v84);
  if (v90 != 1)
  {
    __clrex();
LABEL_154:
    WTF::Lock::unlockSlow((WTF::Lock *)v84);
    if (v87)
      goto LABEL_158;
    goto LABEL_155;
  }
  if (__stlxr(0, (unsigned __int8 *)v84))
    goto LABEL_154;
  if (v87)
    goto LABEL_158;
LABEL_155:
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  if (!v89)
  {
    WTF::fastFree((WTF *)v84, a2);
    if (v9)
      goto LABEL_161;
    goto LABEL_159;
  }
LABEL_158:
  if (v9)
    goto LABEL_161;
LABEL_159:
  v64 = *((_QWORD *)v8 + 5);
LABEL_160:
  if ((v64 & 0x800000000) == 0)
    goto LABEL_188;
LABEL_161:
  v91 = *(_QWORD *)(*a2 + 56);
  if (!v91)
    goto LABEL_171;
  v92 = *(_QWORD *)(v91 + 8);
  if (__ldaxr((unsigned __int8 *)v92))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v92))
  {
    goto LABEL_166;
  }
  MEMORY[0x19AEA534C](v92);
LABEL_166:
  ++*(_QWORD *)(v92 + 8);
  v94 = __ldxr((unsigned __int8 *)v92);
  if (v94 != 1)
  {
    __clrex();
    goto LABEL_170;
  }
  if (__stlxr(0, (unsigned __int8 *)v92))
LABEL_170:
    WTF::Lock::unlockSlow((WTF::Lock *)v92);
LABEL_171:
  *(_BYTE *)(a1 + 341) = *(_BYTE *)(v91 + 872);
  v95 = *(_QWORD *)(v91 + 8);
  if (__ldaxr((unsigned __int8 *)v95))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v95))
  {
    goto LABEL_175;
  }
  MEMORY[0x19AEA534C](v95);
LABEL_175:
  v97 = *(_QWORD *)(v95 + 8);
  v98 = v97 - 1;
  *(_QWORD *)(v95 + 8) = v97 - 1;
  if (v97 == 1)
  {
    v289 = *(_QWORD *)(v95 + 16);
    v99 = *(_QWORD *)(v95 + 24);
    *(_QWORD *)(v95 + 24) = 0;
    v100 = v289 != 0;
  }
  else
  {
    v99 = 0;
    v100 = 1;
  }
  v101 = __ldxr((unsigned __int8 *)v95);
  if (v101 != 1)
  {
    __clrex();
LABEL_182:
    WTF::Lock::unlockSlow((WTF::Lock *)v95);
    if (v98)
      goto LABEL_186;
    goto LABEL_183;
  }
  if (__stlxr(0, (unsigned __int8 *)v95))
    goto LABEL_182;
  if (v98)
    goto LABEL_186;
LABEL_183:
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  if (!v100)
  {
    WTF::fastFree((WTF *)v95, a2);
    if (v9)
      goto LABEL_189;
    goto LABEL_187;
  }
LABEL_186:
  if (v9)
    goto LABEL_189;
LABEL_187:
  v64 = *((_QWORD *)v8 + 5);
LABEL_188:
  if ((v64 & 0x1000000000) == 0)
    goto LABEL_216;
LABEL_189:
  v102 = *(_QWORD *)(*a2 + 56);
  if (!v102)
    goto LABEL_199;
  v103 = *(_QWORD *)(v102 + 8);
  if (__ldaxr((unsigned __int8 *)v103))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v103))
  {
    goto LABEL_194;
  }
  MEMORY[0x19AEA534C](v103);
LABEL_194:
  ++*(_QWORD *)(v103 + 8);
  v105 = __ldxr((unsigned __int8 *)v103);
  if (v105 != 1)
  {
    __clrex();
    goto LABEL_198;
  }
  if (__stlxr(0, (unsigned __int8 *)v103))
LABEL_198:
    WTF::Lock::unlockSlow((WTF::Lock *)v103);
LABEL_199:
  *(_BYTE *)(a1 + 338) = *(_BYTE *)(v102 + 873);
  v106 = *(_QWORD *)(v102 + 8);
  if (__ldaxr((unsigned __int8 *)v106))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v106))
  {
    goto LABEL_203;
  }
  MEMORY[0x19AEA534C](v106);
LABEL_203:
  v108 = *(_QWORD *)(v106 + 8);
  v109 = v108 - 1;
  *(_QWORD *)(v106 + 8) = v108 - 1;
  if (v108 == 1)
  {
    v290 = *(_QWORD *)(v106 + 16);
    v110 = *(_QWORD *)(v106 + 24);
    *(_QWORD *)(v106 + 24) = 0;
    v111 = v290 != 0;
  }
  else
  {
    v110 = 0;
    v111 = 1;
  }
  v112 = __ldxr((unsigned __int8 *)v106);
  if (v112 != 1)
  {
    __clrex();
LABEL_210:
    WTF::Lock::unlockSlow((WTF::Lock *)v106);
    if (v109)
      goto LABEL_214;
    goto LABEL_211;
  }
  if (__stlxr(0, (unsigned __int8 *)v106))
    goto LABEL_210;
  if (v109)
    goto LABEL_214;
LABEL_211:
  if (v110)
    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  if (!v111)
  {
    WTF::fastFree((WTF *)v106, a2);
    if (v9)
      goto LABEL_217;
    goto LABEL_215;
  }
LABEL_214:
  if (v9)
    goto LABEL_217;
LABEL_215:
  v64 = *((_QWORD *)v8 + 5);
LABEL_216:
  if ((v64 & 0x800) == 0)
    goto LABEL_244;
LABEL_217:
  v113 = *(_QWORD *)(*a2 + 56);
  if (!v113)
    goto LABEL_227;
  v114 = *(_QWORD *)(v113 + 8);
  if (__ldaxr((unsigned __int8 *)v114))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v114))
  {
    goto LABEL_222;
  }
  MEMORY[0x19AEA534C](v114);
LABEL_222:
  ++*(_QWORD *)(v114 + 8);
  v116 = __ldxr((unsigned __int8 *)v114);
  if (v116 != 1)
  {
    __clrex();
    goto LABEL_226;
  }
  if (__stlxr(0, (unsigned __int8 *)v114))
LABEL_226:
    WTF::Lock::unlockSlow((WTF::Lock *)v114);
LABEL_227:
  *(_BYTE *)(a1 + 337) = *(_BYTE *)(v113 + 533);
  v117 = *(_QWORD *)(v113 + 8);
  if (__ldaxr((unsigned __int8 *)v117))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v117))
  {
    goto LABEL_231;
  }
  MEMORY[0x19AEA534C](v117);
LABEL_231:
  v119 = *(_QWORD *)(v117 + 8);
  v120 = v119 - 1;
  *(_QWORD *)(v117 + 8) = v119 - 1;
  if (v119 == 1)
  {
    v291 = *(_QWORD *)(v117 + 16);
    v121 = *(_QWORD *)(v117 + 24);
    *(_QWORD *)(v117 + 24) = 0;
    v122 = v291 != 0;
  }
  else
  {
    v121 = 0;
    v122 = 1;
  }
  v123 = __ldxr((unsigned __int8 *)v117);
  if (v123 != 1)
  {
    __clrex();
LABEL_238:
    WTF::Lock::unlockSlow((WTF::Lock *)v117);
    if (v120)
      goto LABEL_242;
    goto LABEL_239;
  }
  if (__stlxr(0, (unsigned __int8 *)v117))
    goto LABEL_238;
  if (v120)
    goto LABEL_242;
LABEL_239:
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  if (!v122)
  {
    WTF::fastFree((WTF *)v117, a2);
    if (v9)
      goto LABEL_245;
    goto LABEL_243;
  }
LABEL_242:
  if (v9)
    goto LABEL_245;
LABEL_243:
  v64 = *((_QWORD *)v8 + 5);
LABEL_244:
  if ((v64 & 0x20000000000) == 0)
    goto LABEL_273;
LABEL_245:
  v124 = *(_QWORD *)(*a2 + 56);
  if (!v124)
    goto LABEL_255;
  v125 = *(_QWORD *)(v124 + 8);
  if (__ldaxr((unsigned __int8 *)v125))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v125))
  {
    goto LABEL_250;
  }
  MEMORY[0x19AEA534C](v125);
LABEL_250:
  ++*(_QWORD *)(v125 + 8);
  v127 = __ldxr((unsigned __int8 *)v125);
  if (v127 != 1)
  {
    __clrex();
    goto LABEL_254;
  }
  if (__stlxr(0, (unsigned __int8 *)v125))
LABEL_254:
    WTF::Lock::unlockSlow((WTF::Lock *)v125);
LABEL_255:
  v128 = *(unsigned __int8 *)(v124 + 874);
  if (*(unsigned __int8 *)(a1 + 339) != v128)
    *(_BYTE *)(a1 + 339) = v128;
  v129 = *(_QWORD *)(v124 + 8);
  if (__ldaxr((unsigned __int8 *)v129))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v129))
  {
    goto LABEL_261;
  }
  MEMORY[0x19AEA534C](v129);
LABEL_261:
  v131 = *(_QWORD *)(v129 + 8);
  v132 = v131 - 1;
  *(_QWORD *)(v129 + 8) = v131 - 1;
  if (v131 == 1)
  {
    v292 = *(_QWORD *)(v129 + 16);
    v133 = *(_QWORD *)(v129 + 24);
    *(_QWORD *)(v129 + 24) = 0;
    v134 = v292 != 0;
  }
  else
  {
    v133 = 0;
    v134 = 1;
  }
  v135 = __ldxr((unsigned __int8 *)v129);
  if (v135 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v129))
    {
      if (!v132)
        goto LABEL_269;
      goto LABEL_273;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v129);
  if (!v132)
  {
LABEL_269:
    if (v133)
      (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
    if (!v134)
      WTF::fastFree((WTF *)v129, a2);
  }
LABEL_273:
  v136 = __ldxr(v41);
  if (v136 == 1)
  {
    if (!__stlxr(0, v41))
      goto LABEL_278;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v41);
LABEL_278:
  *(_OWORD *)&v309[1] = *(_OWORD *)(*a2 + 24);
  v137 = (uint64_t *)(a1 + 144);
  v138 = *(_QWORD *)(a1 + 144);
  if (!v138)
    goto LABEL_327;
  v139 = *(_DWORD *)(v138 - 4);
  if (!v139)
    goto LABEL_327;
  v140 = v8;
  v141 = 0;
  v142 = v139 - 1;
  do
  {
    v143 = v142;
    v144 = v138 + 32 * v142;
    if (*(_OWORD *)v144 != 0 && *(_QWORD *)(v144 + 8) != -1)
    {
      v146 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a1 + 24), (uint64_t *)(v138 + 32 * v142));
      if (v146)
      {
        v147 = v146[2];
        if (v147)
        {
          v149 = *(WebCore::ScrollingTreeFrameHostingNode **)(v147 + 64);
          v148 = *(WebCore::ScrollingTreeFrameHostingNode **)(v147 + 72);
          if (v149 == v309[1] && v148 == v309[2])
          {
            *(_OWORD *)v144 = xmmword_1968C18F0;
            v151 = v138 + 32 * v142;
            v154 = *(WTF **)(v151 + 16);
            v153 = (_QWORD *)(v151 + 16);
            v152 = v154;
            if (v154)
            {
              *v153 = 0;
              *(_DWORD *)(v138 + 32 * v142 + 24) = 0;
              WTF::fastFree(v152, a2);
            }
            ++v141;
          }
        }
      }
    }
    --v142;
  }
  while (v143);
  v155 = *v137;
  if (v141)
  {
    *(_DWORD *)(v155 - 16) += v141;
    v156 = *v137;
    if (*v137)
      v157 = *(_DWORD *)(v156 - 12);
    else
      v157 = 0;
    v8 = v140;
    *(_DWORD *)(v156 - 12) = v157 - v141;
    v155 = *v137;
    if (!*v137)
      goto LABEL_327;
  }
  else
  {
    v8 = v140;
    if (!v155)
      goto LABEL_327;
  }
  v158 = *(_DWORD *)(v155 - 4);
  v159 = *(unsigned int *)(v155 - 12);
  if (v158 >= 9 && 6 * (int)v159 < v158)
  {
    v161 = (v159 - 1) | ((v159 - 1) >> 1) | ((((_DWORD)v159 - 1) | ((v159 - 1) >> 1)) >> 2);
    v162 = v161 | (v161 >> 4) | ((v161 | (v161 >> 4)) >> 8);
    v163 = (v162 | HIWORD(v162)) + 1;
    if (v163 > 0x400)
    {
      if (v163 > 2 * v159)
        goto LABEL_320;
    }
    else if (3 * v163 > 4 * v159)
    {
LABEL_310:
      v164 = (double)v159;
      v165 = (double)v163;
      v166 = 0.604166667;
LABEL_321:
      if (v165 * v166 <= v164)
        LODWORD(v163) = 2 * v163;
      if (v163 <= 8)
        v167 = 8;
      else
        v167 = v163;
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash((uint64_t *)(a1 + 144), v167, 0);
      goto LABEL_327;
    }
    LODWORD(v163) = 2 * v163;
    if (v163 <= 0x400)
      goto LABEL_310;
LABEL_320:
    v164 = (double)v159;
    v165 = (double)v163;
    v166 = 0.416666667;
    goto LABEL_321;
  }
LABEL_327:
  v168 = (uint64_t *)(a1 + 152);
  v169 = *(_QWORD *)(a1 + 152);
  if (!v169)
    goto LABEL_379;
  v170 = *(_DWORD *)(v169 - 4);
  if (!v170)
    goto LABEL_379;
  v302 = v8;
  v171 = 0;
  v172 = v170 - 1;
  do
  {
    v173 = v172;
    v174 = *(_QWORD *)(v169 + 8 * v172);
    if ((unint64_t)(v174 + 1) >= 2
      && *(WebCore::ScrollingTreeFrameHostingNode **)(v174 + 64) == v309[1]
      && *(WebCore::ScrollingTreeFrameHostingNode **)(v174 + 72) == v309[2])
    {
      *(_QWORD *)(v169 + 8 * v172) = 0;
      v176 = *(_QWORD *)(v174 + 8);
      if (__ldaxr((unsigned __int8 *)v176))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v176))
      {
        goto LABEL_342;
      }
      MEMORY[0x19AEA534C](v176);
LABEL_342:
      v178 = *(_QWORD *)(v176 + 8);
      v179 = v178 - 1;
      *(_QWORD *)(v176 + 8) = v178 - 1;
      if (v178 == 1)
      {
        v183 = *(_QWORD *)(v176 + 16);
        v180 = *(_QWORD *)(v176 + 24);
        *(_QWORD *)(v176 + 24) = 0;
        v181 = v183 != 0;
      }
      else
      {
        v180 = 0;
        v181 = 1;
      }
      v182 = __ldxr((unsigned __int8 *)v176);
      if (v182 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v176))
        {
          if (!v179)
            goto LABEL_350;
          goto LABEL_354;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v176);
      if (!v179)
      {
LABEL_350:
        if (v180)
          (*(void (**)(uint64_t))(*(_QWORD *)v180 + 8))(v180);
        if (!v181)
          WTF::fastFree((WTF *)v176, a2);
      }
LABEL_354:
      *(_QWORD *)(v169 + 8 * v172) = -1;
      ++v171;
    }
    --v172;
  }
  while (v173);
  v184 = *v168;
  if (v171)
  {
    *(_DWORD *)(v184 - 16) += v171;
    v185 = *v168;
    if (*v168)
      v186 = *(_DWORD *)(v185 - 12);
    else
      v186 = 0;
    v8 = v302;
    *(_DWORD *)(v185 - 12) = v186 - v171;
    v184 = *v168;
    if (*v168)
    {
LABEL_363:
      v187 = *(_DWORD *)(v184 - 4);
      v188 = *(unsigned int *)(v184 - 12);
      if (v187 >= 9 && 6 * (int)v188 < v187)
      {
        v190 = (v188 - 1) | ((v188 - 1) >> 1) | ((((_DWORD)v188 - 1) | ((v188 - 1) >> 1)) >> 2);
        v191 = v190 | (v190 >> 4) | ((v190 | (v190 >> 4)) >> 8);
        v192 = (v191 | HIWORD(v191)) + 1;
        if (v192 > 0x400)
        {
          if (v192 <= 2 * v188)
          {
LABEL_369:
            LODWORD(v192) = 2 * v192;
            if (v192 <= 0x400)
              goto LABEL_370;
          }
          v193 = (double)v188;
          v194 = (double)v192;
          v195 = 0.416666667;
        }
        else
        {
          if (3 * v192 <= 4 * v188)
            goto LABEL_369;
LABEL_370:
          v193 = (double)v188;
          v194 = (double)v192;
          v195 = 0.604166667;
        }
        if (v194 * v195 <= v193)
          LODWORD(v192) = 2 * v192;
        if (v192 <= 8)
          v196 = 8;
        else
          v196 = v192;
        WTF::HashTable<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>,WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>>::rehash((uint64_t *)(a1 + 152), v196, 0);
      }
    }
  }
  else
  {
    v8 = v302;
    if (v184)
      goto LABEL_363;
  }
LABEL_379:
  v197 = (uint64_t *)(a1 + 160);
  v198 = *(_QWORD *)(a1 + 160);
  if (!v198)
    goto LABEL_431;
  v199 = *(_DWORD *)(v198 - 4);
  if (!v199)
    goto LABEL_431;
  v303 = v8;
  v200 = 0;
  v201 = v199 - 1;
  while (2)
  {
    v202 = v201;
    v203 = *(_QWORD *)(v198 + 8 * v201);
    if ((unint64_t)(v203 + 1) >= 2
      && *(WebCore::ScrollingTreeFrameHostingNode **)(v203 + 64) == v309[1]
      && *(WebCore::ScrollingTreeFrameHostingNode **)(v203 + 72) == v309[2])
    {
      *(_QWORD *)(v198 + 8 * v201) = 0;
      v205 = *(_QWORD *)(v203 + 8);
      if (__ldaxr((unsigned __int8 *)v205))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v205))
      {
        goto LABEL_394;
      }
      MEMORY[0x19AEA534C](v205);
LABEL_394:
      v207 = *(_QWORD *)(v205 + 8);
      v208 = v207 - 1;
      *(_QWORD *)(v205 + 8) = v207 - 1;
      if (v207 == 1)
      {
        v212 = *(_QWORD *)(v205 + 16);
        v209 = *(_QWORD *)(v205 + 24);
        *(_QWORD *)(v205 + 24) = 0;
        v210 = v212 != 0;
      }
      else
      {
        v209 = 0;
        v210 = 1;
      }
      v211 = __ldxr((unsigned __int8 *)v205);
      if (v211 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v205))
        {
          if (!v208)
            goto LABEL_402;
          goto LABEL_406;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v205);
      if (!v208)
      {
LABEL_402:
        if (v209)
          (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
        if (!v210)
          WTF::fastFree((WTF *)v205, a2);
      }
LABEL_406:
      *(_QWORD *)(v198 + 8 * v201) = -1;
      ++v200;
    }
    --v201;
    if (v202)
      continue;
    break;
  }
  v213 = *v197;
  if (v200)
  {
    *(_DWORD *)(v213 - 16) += v200;
    v214 = *v197;
    if (*v197)
      v215 = *(_DWORD *)(v214 - 12);
    else
      v215 = 0;
    v8 = v303;
    *(_DWORD *)(v214 - 12) = v215 - v200;
    v213 = *v197;
    if (*v197)
    {
LABEL_415:
      v216 = *(_DWORD *)(v213 - 4);
      v217 = *(unsigned int *)(v213 - 12);
      if (v216 >= 9 && 6 * (int)v217 < v216)
      {
        v219 = (v217 - 1) | ((v217 - 1) >> 1) | ((((_DWORD)v217 - 1) | ((v217 - 1) >> 1)) >> 2);
        v220 = v219 | (v219 >> 4) | ((v219 | (v219 >> 4)) >> 8);
        v221 = (v220 | HIWORD(v220)) + 1;
        if (v221 > 0x400)
        {
          if (v221 <= 2 * v217)
          {
LABEL_421:
            LODWORD(v221) = 2 * v221;
            if (v221 <= 0x400)
              goto LABEL_422;
          }
          v222 = (double)v217;
          v223 = (double)v221;
          v224 = 0.416666667;
        }
        else
        {
          if (3 * v221 <= 4 * v217)
            goto LABEL_421;
LABEL_422:
          v222 = (double)v217;
          v223 = (double)v221;
          v224 = 0.604166667;
        }
        if (v223 * v224 <= v222)
          LODWORD(v221) = 2 * v221;
        if (v221 <= 8)
          v225 = 8;
        else
          v225 = v221;
        WTF::HashTable<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>,WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>>::rehash((uint64_t *)(a1 + 160), v225, 0);
      }
    }
  }
  else
  {
    v8 = v303;
    if (v213)
      goto LABEL_415;
  }
LABEL_431:
  v226 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
    goto LABEL_434;
  }
  if (__stxr(1u, v226))
LABEL_434:
    MEMORY[0x19AEA534C](a1 + 32);
  v228 = *(_QWORD *)(a1 + 40);
  if (v228)
  {
    v229 = *(_DWORD *)(v228 - 8);
    v230 = (LODWORD(v309[1]) >> 5) & 0x7FFF800 ^ ((LOWORD(v309[1]) - 1640531527) << 16) ^ (LOWORD(v309[1]) - 1640531527);
    v231 = ((unint64_t)v309[1] >> 37) & 0x7FFF800 ^ ((v230 + WORD2(v309[1]) + (v230 >> 11)) << 16) ^ (v230 + WORD2(v309[1]) + (v230 >> 11));
    v232 = (LODWORD(v309[2]) >> 5) & 0x7FFF800 ^ ((v231 + LOWORD(v309[2]) + (v231 >> 11)) << 16) ^ (v231
                                                                                                  + LOWORD(v309[2])
                                                                                                  + (v231 >> 11));
    v233 = ((unint64_t)v309[2] >> 37) & 0x7FFF800 ^ ((v232 + WORD2(v309[2]) + (v232 >> 11)) << 16) ^ (v232 + WORD2(v309[2]) + (v232 >> 11));
    v234 = (v233 + (v233 >> 11)) ^ (8 * (v233 + (v233 >> 11)));
    v235 = (v234 + (v234 >> 5)) ^ (4 * (v234 + (v234 >> 5)));
    v236 = (v235 + (v235 >> 15)) ^ ((v235 + (v235 >> 15)) << 10);
    if (!v236)
      v236 = 0x800000;
    v237 = v229 & v236;
    v238 = v228 + 24 * v237;
    v239 = *(WebCore::ScrollingTreeFrameHostingNode **)v238;
    v240 = *(_QWORD *)(v238 + 8);
    if (*(WebCore::ScrollingTreeFrameHostingNode **)v238 == v309[1]
      && (WebCore::ScrollingTreeFrameHostingNode *)v240 == v309[2])
    {
LABEL_449:
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::HashTable((uint64_t *)&v305, (uint64_t *)(v228 + 24 * v237 + 16));
      v246 = (uint64_t)v305;
      if (v305)
      {
        if (!*((_DWORD *)v305 - 3))
          goto LABEL_470;
        v247 = *((unsigned int *)v305 - 1);
        v248 = v305;
        if ((_DWORD)v247)
        {
          v249 = 0;
          while (1)
          {
            v248 = &v305[v249];
            if (*(_OWORD *)&v305[v249] != 0 && v305[v249 + 1] != -1)
              break;
            v249 += 2;
            if (2 * v247 == v249)
              goto LABEL_469;
          }
        }
        v251 = &v305[2 * v247];
        if (v248 != v251)
        {
LABEL_461:
          WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add((uint64_t *)&v306, v248, (uint64_t)v304);
          while (1)
          {
            v248 += 2;
            if (v248 == v251)
              break;
            if (*(_OWORD *)v248 != 0 && v248[1] != -1)
            {
              if (v248 != v251)
                goto LABEL_461;
              break;
            }
          }
          v246 = (uint64_t)v305;
        }
LABEL_469:
        if (v246)
LABEL_470:
          WTF::fastFree((WTF *)(v246 - 16), v245);
      }
    }
    else
    {
      v242 = 1;
      while ((unint64_t)v239 | v240)
      {
        v237 = (v237 + v242) & v229;
        v243 = v228 + 24 * v237;
        v239 = *(WebCore::ScrollingTreeFrameHostingNode **)v243;
        v240 = *(_QWORD *)(v243 + 8);
        ++v242;
        if (v239 == v309[1] && (WebCore::ScrollingTreeFrameHostingNode *)v240 == v309[2])
          goto LABEL_449;
      }
    }
  }
  v253 = __ldxr(v226);
  if (v253 != 1)
  {
    __clrex();
    goto LABEL_475;
  }
  if (__stlxr(0, v226))
LABEL_475:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 32));
  if ((WebCore::ScrollingTree::updateTreeFromStateNodeRecursive((WebCore::ScrollingTree *)a1, v8, (WebCore::CommitTreeState *)&v306) & 1) == 0)
  {
    LOBYTE(v74) = 0;
    goto LABEL_523;
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 320))(a1, (char *)&v306 + 8);
  if ((_QWORD)v306)
  {
    v254 = *(unsigned int *)(v306 - 4);
    v255 = (unint64_t *)(v306 + 16 * v254);
    if (*(_DWORD *)(v306 - 12))
    {
      v256 = (unint64_t *)v306;
      if ((_DWORD)v254)
      {
        v257 = 16 * v254;
        v256 = (unint64_t *)v306;
        while (*(_OWORD *)v256 == 0 || v256[1] == -1)
        {
          v256 += 2;
          v257 -= 16;
          if (!v257)
          {
            v256 = v255;
            break;
          }
        }
      }
LABEL_488:
      v259 = (unint64_t *)(v306 + 16 * *(unsigned int *)(v306 - 4));
      goto LABEL_489;
    }
    v256 = (unint64_t *)(v306 + 16 * v254);
  }
  else
  {
    v256 = 0;
    v254 = 0;
  }
  v255 = (unint64_t *)(v306 + 16 * v254);
  if ((_QWORD)v306)
    goto LABEL_488;
  v259 = 0;
LABEL_489:
  while (v256 != v259)
  {
    WebCore::ScrollingTree::removeNode(a1, *v256, v256[1], (uint64_t)v309[0]);
    v260 = v256 + 2;
    v256 = v255;
    if (v260 != v255)
    {
      v256 = v260;
      while (*(_OWORD *)v256 == 0 || v256[1] == -1)
      {
        v256 += 2;
        if (v256 == v255)
        {
          v256 = v255;
          break;
        }
      }
    }
  }
  v262 = (WTF *)*((_QWORD *)&v307 + 1);
  v263 = DWORD1(v308);
  *((_QWORD *)&v307 + 1) = 0;
  *(_QWORD *)&v308 = 0;
  if (!v263)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
    LOBYTE(v74) = 1;
    if (!v262)
      goto LABEL_523;
    goto LABEL_522;
  }
  v264 = (WTF *)((char *)v262 + 24 * v263);
  v74 = 1;
  v265 = v262;
  do
  {
    v266 = *((unsigned int *)v265 + 5);
    if ((_DWORD)v266)
    {
      v268 = *(_QWORD *)v265;
      v267 = *((_QWORD *)v265 + 1);
      v269 = 8 * v266;
      do
      {
        v74 &= WebCore::ScrollingTree::commitTreeStateInternal(a1, v267, v268, 1);
        v267 += 8;
        v269 -= 8;
      }
      while (v269);
    }
    v265 = (WTF *)((char *)v265 + 24);
  }
  while (v265 != v264);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
  v270 = v262;
  do
  {
    v271 = *((unsigned int *)v270 + 5);
    if ((_DWORD)v271)
    {
      v272 = (WebCore::ScrollingStateTree **)*((_QWORD *)v270 + 1);
      v273 = 8 * v271;
      do
      {
        v274 = *v272;
        *v272 = 0;
        if (v274)
        {
          WebCore::ScrollingStateTree::~ScrollingStateTree(v274, a2);
          if (*(_DWORD *)v275)
          {
            *((_OWORD *)v275 + 3) = 0u;
            *((_OWORD *)v275 + 4) = 0u;
            *((_OWORD *)v275 + 1) = 0u;
            *((_OWORD *)v275 + 2) = 0u;
            *(_OWORD *)v275 = 0u;
          }
          else
          {
            WTF::fastFree(v275, a2);
          }
        }
        ++v272;
        v273 -= 8;
      }
      while (v273);
    }
    v276 = (WTF *)*((_QWORD *)v270 + 1);
    if (v276)
    {
      *((_QWORD *)v270 + 1) = 0;
      *((_DWORD *)v270 + 4) = 0;
      WTF::fastFree(v276, a2);
    }
    v270 = (WTF *)((char *)v270 + 24);
  }
  while (v270 != v264);
  if (v262)
LABEL_522:
    WTF::fastFree(v262, a2);
LABEL_523:
  WebCore::CommitTreeState::~CommitTreeState((WebCore::CommitTreeState *)&v306, a2);
  if (!v8)
    return v74 & 1;
  v278 = *((_QWORD *)v8 + 1);
  if (__ldaxr((unsigned __int8 *)v278))
  {
    __clrex();
    goto LABEL_527;
  }
  if (__stxr(1u, (unsigned __int8 *)v278))
LABEL_527:
    MEMORY[0x19AEA534C](v278);
  v280 = *(_QWORD *)(v278 + 8);
  v281 = v280 - 1;
  *(_QWORD *)(v278 + 8) = v280 - 1;
  if (v280 == 1)
  {
    v286 = *(_QWORD *)(v278 + 16);
    v282 = *(_QWORD *)(v278 + 24);
    *(_QWORD *)(v278 + 24) = 0;
    v283 = v286 != 0;
  }
  else
  {
    v282 = 0;
    v283 = 1;
  }
  v284 = __ldxr((unsigned __int8 *)v278);
  if (v284 != 1)
  {
    __clrex();
LABEL_535:
    WTF::Lock::unlockSlow((WTF::Lock *)v278);
    if (!v281)
      goto LABEL_536;
    return v74 & 1;
  }
  if (__stlxr(0, (unsigned __int8 *)v278))
    goto LABEL_535;
  if (!v281)
  {
LABEL_536:
    if (v282)
      (*(void (**)(uint64_t))(*(_QWORD *)v282 + 8))(v282);
    if (!v283)
      WTF::fastFree((WTF *)v278, v277);
  }
  return v74 & 1;
}

uint64_t WebCore::ScrollingTreeFrameHostingNode::removeHostedChildren(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;

  v2 = this;
  v3 = *(uint64_t **)(this + 112);
  *(_QWORD *)(this + 112) = 0;
  if (v3)
  {
    v4 = *((unsigned int *)v3 - 1);
    v5 = &v3[v4];
    if (*((_DWORD *)v3 - 3))
    {
      v6 = v3;
      if ((_DWORD)v4)
      {
        v7 = 8 * v4;
        v6 = v3;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          ++v6;
          v7 -= 8;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = &v3[v4];
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = &v3[v4];
  if (v3)
  {
LABEL_8:
    v8 = &v3[*((unsigned int *)v3 - 1)];
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  while (v6 != v8)
  {
    v9 = v6 + 1;
    this = WebCore::ScrollingTree::removeNode(*(_QWORD *)(v2 + 32), *(_QWORD *)(*v6 + 48), *(_QWORD *)(*v6 + 56), 0);
    v6 = v5;
    if (v9 != v5)
    {
      v6 = v9;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        if (++v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  if (v3)
    return WTF::HashTable<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>::deallocateTable(v3, a2);
  return this;
}

uint64_t WebCore::ScrollingTree::commitTreeState(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 a4)
{
  char v8;
  unsigned __int8 *v9;
  uint64_t v11;
  int v12;

  v8 = *(_BYTE *)(a1 + 343);
  *(_BYTE *)(a1 + 343) = 1;
  v9 = (unsigned __int8 *)(a1 + 12);
  if (__ldaxr((unsigned __int8 *)(a1 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 12);
LABEL_5:
  v11 = WebCore::ScrollingTree::commitTreeStateInternal(a1, a2, a3, a4);
  v12 = __ldxr(v9);
  if (v12 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_10:
  *(_BYTE *)(a1 + 343) = v8;
  return v11;
}

uint64_t WebCore::ScrollingTree::clearLatchedNode(uint64_t this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v4;

  v1 = this;
  v2 = (unsigned __int8 *)(this + 48);
  if (__ldaxr((unsigned __int8 *)(this + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](this + 48);
LABEL_5:
  if (*(_BYTE *)(v1 + 80))
    *(_BYTE *)(v1 + 80) = 0;
  v4 = __ldxr(v2);
  if (v4 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return this;
}

float WebCore::ScrollingTree::mainFrameTopContentInset(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  float v5;
  int v6;

  v2 = (unsigned __int8 *)this + 168;
  if (__ldaxr((unsigned __int8 *)this + 168))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 168);
LABEL_5:
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = *(float *)(v4 + 392);
  else
    v5 = 0.0;
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

float WebCore::ScrollingTree::mainFrameScrollPosition(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  float v5;
  int v6;

  v2 = (unsigned __int8 *)this + 168;
  if (__ldaxr((unsigned __int8 *)this + 168))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 168);
LABEL_5:
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = *(float *)(v4 + 144);
  else
    v5 = 0.0;
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

unint64_t WebCore::ScrollingTree::mainFrameScrollOrigin(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 152);
    v6 = v5 & 0xFFFFFFFF00000000;
    v7 = v5;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v8 = __ldxr(v2);
  if (v8 == 1)
  {
    if (!__stlxr(0, v2))
      return v6 | v7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v6 | v7;
}

uint64_t WebCore::ScrollingTree::mainFrameHeaderHeight(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = *(unsigned int *)(v4 + 396);
  else
    v5 = 0;
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

uint64_t WebCore::ScrollingTree::mainFrameFooterHeight(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = *(unsigned int *)(v4 + 400);
  else
    v5 = 0;
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

float WebCore::ScrollingTree::mainFrameScaleFactor(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  float v5;
  int v6;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = *(float *)(v4 + 388);
  else
    v5 = 1.0;
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

float WebCore::ScrollingTree::totalContentsSize(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  float v5;
  int v6;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = *(float *)(v4 + 112);
  else
    v5 = 0.0;
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

float WebCore::ScrollingTree::layoutViewport(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  float v5;
  int v6;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = *(float *)(v4 + 344);
  else
    v5 = 0.0;
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

uint64_t WebCore::ScrollingTree::viewWillStartLiveResize(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 192))(result);
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WebCore::ScrollingTree::viewWillEndLiveResize(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WebCore::ScrollingTree::setGestureState(uint64_t result, __int16 a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 168);
  if (__ldaxr((unsigned __int8 *)(result + 168)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 168);
LABEL_5:
  *(_WORD *)(v3 + 228) = a2;
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::ScrollingTree::gestureState(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;

  v2 = (unsigned __int8 *)this + 168;
  if (__ldaxr((unsigned __int8 *)this + 168))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 168);
LABEL_5:
  v4 = *((unsigned __int16 *)this + 114);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4;
}

uint64_t WebCore::ScrollingTree::eventTrackingTypeForPoint(uint64_t a1, int a2, uint64_t a3)
{
  unsigned __int8 *v5;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v17;

  v17 = a3;
  v5 = (unsigned __int8 *)(a1 + 168);
  if (__ldaxr((unsigned __int8 *)(a1 + 168)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 168);
    goto LABEL_5;
  }
  if (__stxr(1u, v5))
    goto LABEL_4;
LABEL_5:
  v7 = *(_QWORD *)(a1 + 200);
  if (!v7)
    goto LABEL_15;
  v8 = *(_DWORD *)(v7 - 8);
  v9 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  v11 = v8 & (v10 ^ HIWORD(v10));
  v12 = *(unsigned __int8 *)(v7 + 32 * v11);
  if (v12 != a2)
  {
    v13 = 1;
    while (v12 != 255)
    {
      v11 = ((_DWORD)v11 + v13) & v8;
      v12 = *(unsigned __int8 *)(v7 + 32 * v11);
      ++v13;
      if (v12 == a2)
        goto LABEL_12;
    }
    v11 = *(unsigned int *)(v7 - 4);
  }
LABEL_12:
  if (v11 != *(_DWORD *)(v7 - 4)
    && (WebCore::Region::contains(v7 + 32 * v11 + 8, (const WebCore::IntPoint *)&v17) & 1) != 0)
  {
    v14 = 2;
  }
  else
  {
LABEL_15:
    v14 = WebCore::Region::contains(a1 + 176, (const WebCore::IntPoint *)&v17);
  }
  v15 = __ldxr(v5);
  if (v15 == 1)
  {
    if (!__stlxr(0, v5))
      return v14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return v14;
}

BOOL WebCore::ScrollingTree::isRubberBandInProgressForNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v4;
  _BOOL8 v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  int v18;
  uint64_t v20;
  uint64_t v21;

  v20 = a2;
  v21 = a3;
  if (!a2)
    return 0;
  v4 = (unsigned __int8 *)(a1 + 168);
  if (__ldaxr((unsigned __int8 *)(a1 + 168)))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](a1 + 168);
    goto LABEL_7;
  }
  if (__stxr(1u, v4))
    goto LABEL_6;
LABEL_7:
  v7 = *(_QWORD *)(a1 + 232);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v20) & v8;
    v10 = (uint64_t *)(v7 + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == v20 && v12 == v21)
    {
      v6 = 1;
    }
    else
    {
      v14 = 1;
      do
      {
        v15 = v11 | v12;
        v6 = v15 != 0;
        if (!v15)
          break;
        v9 = (v9 + v14) & v8;
        v16 = (uint64_t *)(v7 + 16 * v9);
        v11 = *v16;
        v12 = v16[1];
        ++v14;
      }
      while (v11 != v20 || v12 != v21);
    }
  }
  else
  {
    v6 = 0;
  }
  v18 = __ldxr(v4);
  if (v18 == 1)
  {
    if (!__stlxr(0, v4))
      return v6;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return v6;
}

uint64_t WebCore::ScrollingTree::setRubberBandingInProgressForNode(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t *v17;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BYTE v23[24];
  uint64_t v24;
  uint64_t v25;

  v5 = result;
  v24 = a2;
  v25 = a3;
  v6 = (unsigned __int8 *)(result + 168);
  if (__ldaxr((unsigned __int8 *)(result + 168)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 168);
LABEL_5:
  v8 = (uint64_t *)(v5 + 232);
  if (a4)
  {
    result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add(v8, &v24, (uint64_t)v23);
    goto LABEL_26;
  }
  v9 = *v8;
  if (*v8)
  {
    v10 = *(_DWORD *)(v9 - 8);
    result = WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v24);
    v11 = result & v10;
    v12 = (uint64_t *)(v9 + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    if (*v12 == v24 && v14 == v25)
    {
LABEL_19:
      v19 = (_OWORD *)(v9 + 16 * v11);
      v20 = *v8;
      if (!*v8)
      {
LABEL_24:
        if ((_OWORD *)v20 != v19)
          result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v8, v19);
        goto LABEL_26;
      }
      v21 = *(unsigned int *)(v20 - 4);
LABEL_23:
      v20 += 16 * v21;
      if ((_OWORD *)v20 == v19)
        goto LABEL_26;
      goto LABEL_24;
    }
    v16 = 1;
    while (v13 | v14)
    {
      v11 = ((_DWORD)v11 + v16) & v10;
      v17 = (uint64_t *)(v9 + 16 * v11);
      v13 = *v17;
      v14 = v17[1];
      ++v16;
      if (v13 == v24 && v14 == v25)
        goto LABEL_19;
    }
    v20 = *v8;
    if (*v8)
    {
      v21 = *(unsigned int *)(v20 - 4);
      v19 = (_OWORD *)(v20 + 16 * v21);
      goto LABEL_23;
    }
  }
LABEL_26:
  v22 = __ldxr(v6);
  if (v22 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

BOOL WebCore::ScrollingTree::isUserScrollInProgressForNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v4;
  _BOOL8 v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  int v18;
  uint64_t v20;
  uint64_t v21;

  v20 = a2;
  v21 = a3;
  if (!a2)
    return 0;
  v4 = (unsigned __int8 *)(a1 + 168);
  if (__ldaxr((unsigned __int8 *)(a1 + 168)))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](a1 + 168);
    goto LABEL_7;
  }
  if (__stxr(1u, v4))
    goto LABEL_6;
LABEL_7:
  v7 = *(_QWORD *)(a1 + 248);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v20) & v8;
    v10 = (uint64_t *)(v7 + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == v20 && v12 == v21)
    {
      v6 = 1;
    }
    else
    {
      v14 = 1;
      do
      {
        v15 = v11 | v12;
        v6 = v15 != 0;
        if (!v15)
          break;
        v9 = (v9 + v14) & v8;
        v16 = (uint64_t *)(v7 + 16 * v9);
        v11 = *v16;
        v12 = v16[1];
        ++v14;
      }
      while (v11 != v20 || v12 != v21);
    }
  }
  else
  {
    v6 = 0;
  }
  v18 = __ldxr(v4);
  if (v18 == 1)
  {
    if (!__stlxr(0, v4))
      return v6;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return v6;
}

uint64_t WebCore::ScrollingTree::setUserScrollInProgressForNode(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned __int8 *v6;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t *v18;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t result;
  int v24;
  char v25[24];
  uint64_t v26;
  uint64_t v27;

  v26 = a2;
  v27 = a3;
  v6 = (unsigned __int8 *)(a1 + 168);
  if (__ldaxr((unsigned __int8 *)(a1 + 168)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 168);
LABEL_5:
  v8 = (_QWORD *)(a1 + 248);
  if (a4)
  {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add((uint64_t *)(a1 + 248), &v26, (uint64_t)v25);
    v9 = 22;
    goto LABEL_27;
  }
  v10 = (_OWORD *)*v8;
  if (*v8)
  {
    v11 = *((_DWORD *)v10 - 2);
    v12 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v26) & v11;
    v13 = (uint64_t *)&v10[v12];
    v14 = *v13;
    v15 = v13[1];
    if (*v13 == v26 && v15 == v27)
    {
LABEL_19:
      v20 = &v10[v12];
      v21 = (_OWORD *)*v8;
      if (!*v8)
        goto LABEL_24;
      v22 = *((unsigned int *)v21 - 1);
    }
    else
    {
      v17 = 1;
      while (v14 | v15)
      {
        v12 = ((_DWORD)v12 + v17) & v11;
        v18 = (uint64_t *)&v10[v12];
        v14 = *v18;
        v15 = v18[1];
        ++v17;
        if (v14 == v26 && v15 == v27)
          goto LABEL_19;
      }
      v21 = (_OWORD *)*v8;
      if (!*v8)
        goto LABEL_26;
      v22 = *((unsigned int *)v21 - 1);
      v20 = &v21[v22];
    }
    v21 += v22;
    if (v21 != v20)
    {
LABEL_24:
      if (v21 != v20)
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove((uint64_t *)(a1 + 248), v20);
    }
  }
LABEL_26:
  v9 = 23;
LABEL_27:
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 8 * v9))(a1, v26, v27);
  v24 = __ldxr(v6);
  if (v24 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

uint64_t WebCore::ScrollingTree::clearNodesWithUserScrollInProgress(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  int v6;

  v2 = this;
  v3 = (unsigned __int8 *)(this + 168);
  if (__ldaxr((unsigned __int8 *)(this + 168)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](this + 168);
LABEL_5:
  v5 = *(_QWORD *)(v2 + 248);
  if (v5)
  {
    *(_QWORD *)(v2 + 248) = 0;
    this = WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v6 = __ldxr(v3);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return this;
}

BOOL WebCore::ScrollingTree::isScrollSnapInProgressForNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v4;
  _BOOL8 v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  int v18;
  uint64_t v20;
  uint64_t v21;

  v20 = a2;
  v21 = a3;
  if (!a2)
    return 0;
  v4 = (unsigned __int8 *)(a1 + 168);
  if (__ldaxr((unsigned __int8 *)(a1 + 168)))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](a1 + 168);
    goto LABEL_7;
  }
  if (__stxr(1u, v4))
    goto LABEL_6;
LABEL_7:
  v7 = *(_QWORD *)(a1 + 240);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v20) & v8;
    v10 = (uint64_t *)(v7 + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == v20 && v12 == v21)
    {
      v6 = 1;
    }
    else
    {
      v14 = 1;
      do
      {
        v15 = v11 | v12;
        v6 = v15 != 0;
        if (!v15)
          break;
        v9 = (v9 + v14) & v8;
        v16 = (uint64_t *)(v7 + 16 * v9);
        v11 = *v16;
        v12 = v16[1];
        ++v14;
      }
      while (v11 != v20 || v12 != v21);
    }
  }
  else
  {
    v6 = 0;
  }
  v18 = __ldxr(v4);
  if (v18 == 1)
  {
    if (!__stlxr(0, v4))
      return v6;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return v6;
}

uint64_t WebCore::ScrollingTree::setNodeScrollSnapInProgress(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t *v20;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[24];
  uint64_t v27;
  uint64_t v28;

  v5 = (_QWORD *)result;
  v27 = a2;
  v28 = a3;
  v6 = (unsigned __int8 *)(result + 168);
  if (__ldaxr((unsigned __int8 *)(result + 168)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 168);
LABEL_5:
  if (a4)
  {
    result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add(v5 + 30, &v27, (uint64_t)v26);
    if (!v26[16])
      goto LABEL_29;
    v8 = v27;
    v9 = v28;
    v10 = 24;
    goto LABEL_28;
  }
  v11 = v5 + 30;
  v12 = v5[30];
  if (!v12)
    goto LABEL_29;
  v13 = *(_DWORD *)(v12 - 8);
  result = WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v27);
  v8 = v27;
  v9 = v28;
  v14 = result & v13;
  v15 = (uint64_t *)(v12 + 16 * v14);
  v16 = *v15;
  v17 = v15[1];
  if (*v15 == v27 && v17 == v28)
  {
LABEL_20:
    v22 = (_OWORD *)(v12 + 16 * v14);
    v23 = (_OWORD *)*v11;
    if (!*v11)
    {
LABEL_25:
      if (v23 == v22)
      {
        v10 = 25;
      }
      else
      {
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v5 + 30, v22);
        v10 = 25;
        v8 = v27;
        v9 = v28;
      }
LABEL_28:
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v5 + 8 * v10))(v5, v8, v9);
      goto LABEL_29;
    }
    v24 = *((unsigned int *)v23 - 1);
LABEL_24:
    v23 += v24;
    if (v23 == v22)
      goto LABEL_29;
    goto LABEL_25;
  }
  v19 = 1;
  while (v16 | v17)
  {
    v14 = ((_DWORD)v14 + v19) & v13;
    v20 = (uint64_t *)(v12 + 16 * v14);
    v16 = *v20;
    v17 = v20[1];
    ++v19;
    if (v16 == v27 && v17 == v28)
      goto LABEL_20;
  }
  v23 = (_OWORD *)*v11;
  if (*v11)
  {
    v24 = *((unsigned int *)v23 - 1);
    v22 = &v23[v24];
    goto LABEL_24;
  }
LABEL_29:
  v25 = __ldxr(v6);
  if (v25 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

uint64_t WebCore::ScrollingTree::setScrollAnimationInProgressForNode(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v5;
  unsigned __int8 *v6;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t *v18;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  _BYTE v25[24];
  uint64_t v26;
  uint64_t v27;

  v26 = a2;
  v27 = a3;
  if (!a2)
    return result;
  v5 = (uint64_t *)result;
  v6 = (unsigned __int8 *)(result + 168);
  if (__ldaxr((unsigned __int8 *)(result + 168)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](result + 168);
LABEL_6:
  v8 = v5 + 32;
  v9 = v5[32];
  if (!v9)
  {
    if ((a4 & 1) == 0)
      goto LABEL_30;
    v10 = 1;
    goto LABEL_8;
  }
  v10 = *(_DWORD *)(v9 - 12) == 0;
  if (a4)
  {
LABEL_8:
    result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add(v5 + 32, &v26, (uint64_t)v25);
    goto LABEL_27;
  }
  v11 = *(_DWORD *)(v9 - 8);
  result = WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v26);
  v12 = result & v11;
  v13 = (uint64_t *)(v9 + 16 * v12);
  v14 = *v13;
  v15 = v13[1];
  if (*v13 != v26 || v15 != v27)
  {
    v17 = 1;
    while (v14 | v15)
    {
      v12 = ((_DWORD)v12 + v17) & v11;
      v18 = (uint64_t *)(v9 + 16 * v12);
      v14 = *v18;
      v15 = v18[1];
      ++v17;
      if (v14 == v26 && v15 == v27)
        goto LABEL_20;
    }
    v21 = (_OWORD *)*v8;
    if (!*v8)
      goto LABEL_38;
    v22 = *((unsigned int *)v21 - 1);
    v20 = &v21[v22];
LABEL_24:
    v21 += v22;
    if (v21 == v20)
      goto LABEL_27;
    goto LABEL_25;
  }
LABEL_20:
  v20 = (_OWORD *)(v9 + 16 * v12);
  v21 = (_OWORD *)*v8;
  if (*v8)
  {
    v22 = *((unsigned int *)v21 - 1);
    goto LABEL_24;
  }
LABEL_25:
  if (v21 != v20)
    result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v5 + 32, v20);
LABEL_27:
  if (!*v8)
  {
LABEL_38:
    if ((v10 & 1) != 0)
      goto LABEL_30;
    v23 = 1;
    goto LABEL_29;
  }
  v23 = *(_DWORD *)(*v8 - 12) == 0;
  if (v10 != v23)
LABEL_29:
    result = (*(uint64_t (**)(uint64_t *, _QWORD))(*v5 + 312))(v5, v23 ^ 1u);
LABEL_30:
  v24 = __ldxr(v6);
  if (v24 == 1)
  {
    if (!__stlxr(0, v6))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v6);
}

BOOL WebCore::ScrollingTree::hasNodeWithActiveScrollAnimations(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  _BOOL8 v5;
  int v6;

  v2 = (unsigned __int8 *)this + 168;
  if (__ldaxr((unsigned __int8 *)this + 168))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 168);
LABEL_5:
  v4 = *((_QWORD *)this + 32);
  if (v4)
    v5 = *(_DWORD *)(v4 - 12) != 0;
  else
    v5 = 0;
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

uint64_t WebCore::ScrollingTree::serviceScrollAnimations(uint64_t a1, double a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  uint64_t v22;
  int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;

  v4 = (unsigned __int8 *)(a1 + 168);
  if (__ldaxr((unsigned __int8 *)(a1 + 168)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 168);
LABEL_5:
  result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::HashTable(&v35, (uint64_t *)(a1 + 256));
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v4))
LABEL_9:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v9 = v35;
  if (v35)
  {
    v10 = *(unsigned int *)(v35 - 4);
    v11 = v35 + 16 * v10;
    if (*(_DWORD *)(v35 - 12))
    {
      v12 = v35;
      if ((_DWORD)v10)
      {
        v13 = 16 * v10;
        v12 = v35;
        while (*(_OWORD *)v12 == 0 || *(_QWORD *)(v12 + 8) == -1)
        {
          v12 += 16;
          v13 -= 16;
          if (!v13)
          {
            v12 = v11;
            goto LABEL_21;
          }
        }
      }
      goto LABEL_21;
    }
    v12 = v35 + 16 * v10;
  }
  else
  {
    v12 = 0;
    v10 = 0;
  }
  v11 = v35 + 16 * v10;
  if (!v35)
  {
    v15 = 0;
    goto LABEL_22;
  }
LABEL_21:
  v15 = v35 + 16 * *(unsigned int *)(v35 - 4);
LABEL_22:
  if (v15 == v12)
    goto LABEL_68;
  v16 = (uint64_t *)(a1 + 24);
  do
  {
    v36 = *(_OWORD *)v12;
    if (!(_QWORD)v36)
      goto LABEL_56;
    result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v16, (uint64_t *)&v36);
    if (!result)
      goto LABEL_56;
    v17 = *(_QWORD *)(result + 16);
    if (!v17)
      goto LABEL_56;
    v18 = *(unsigned __int8 *)(v17 + 40);
    v19 = v18 > 5;
    v20 = (1 << v18) & 0x2B;
    if (v19 || v20 == 0)
      goto LABEL_56;
    v22 = *(_QWORD *)(v17 + 8);
    if (__ldaxr((unsigned __int8 *)v22))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v22))
    {
      goto LABEL_35;
    }
    MEMORY[0x19AEA534C](v22);
LABEL_35:
    ++*(_QWORD *)(v22 + 8);
    v24 = __ldxr((unsigned __int8 *)v22);
    if (v24 != 1)
    {
      __clrex();
LABEL_39:
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
      goto LABEL_40;
    }
    if (__stlxr(0, (unsigned __int8 *)v22))
      goto LABEL_39;
LABEL_40:
    result = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v17 + 112))(v17, a2);
    v25 = *(_QWORD *)(v17 + 8);
    if (__ldaxr((unsigned __int8 *)v25))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v25))
    {
      goto LABEL_44;
    }
    result = MEMORY[0x19AEA534C](v25);
LABEL_44:
    v27 = *(_QWORD *)(v25 + 8);
    v28 = v27 - 1;
    *(_QWORD *)(v25 + 8) = v27 - 1;
    if (v27 == 1)
    {
      v34 = *(_QWORD *)(v25 + 16);
      v29 = *(_QWORD *)(v25 + 24);
      *(_QWORD *)(v25 + 24) = 0;
      v30 = v34 != 0;
    }
    else
    {
      v29 = 0;
      v30 = 1;
    }
    v31 = __ldxr((unsigned __int8 *)v25);
    if (v31 != 1)
    {
      __clrex();
LABEL_51:
      result = WTF::Lock::unlockSlow((WTF::Lock *)v25);
      if (v28)
        goto LABEL_56;
      goto LABEL_52;
    }
    if (__stlxr(0, (unsigned __int8 *)v25))
      goto LABEL_51;
    if (v28)
      goto LABEL_56;
LABEL_52:
    if (v29)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    if (!v30)
      result = WTF::fastFree((WTF *)v25, v7);
LABEL_56:
    v32 = v12 + 16;
    v12 = v11;
    if (v32 != v11)
    {
      v12 = v32;
      while (*(_OWORD *)v12 == 0 || *(_QWORD *)(v12 + 8) == -1)
      {
        v12 += 16;
        if (v12 == v11)
        {
          v12 = v11;
          break;
        }
      }
    }
  }
  while (v12 != v15);
  v9 = v35;
LABEL_68:
  if (v9)
    return WTF::fastFree((WTF *)(v9 - 16), v7);
  return result;
}

uint64_t WebCore::ScrollingTree::setClientAllowedMainFrameRubberBandableEdges(uint64_t result, int a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 264);
  if (__ldaxr((unsigned __int8 *)(result + 264)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 264);
LABEL_5:
  *(_DWORD *)(v3 + 265) = a2;
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

char *WebCore::ScrollingTree::addPendingScrollUpdate(char *result, unint64_t a2)
{
  char *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 274);
  if (__ldaxr((unsigned __int8 *)result + 274))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = (char *)MEMORY[0x19AEA534C](result + 274);
LABEL_5:
  v6 = *((_QWORD *)v3 + 35);
  v7 = *((unsigned int *)v3 + 73);
  v8 = v6 + 40 * v7;
  if ((_DWORD)v7)
  {
    v9 = (unsigned __int8 *)(v6 + 37);
    while (1)
    {
      v10 = v9 - 37;
      v11 = *(_QWORD *)(v9 - 37) == *(_QWORD *)a2 && *(_QWORD *)(v9 - 29) == *(_QWORD *)(a2 + 8);
      if (v11 && *v9 == *(unsigned __int8 *)(a2 + 37) && *(v9 - 1) == *(unsigned __int8 *)(a2 + 36))
        break;
      v9 += 40;
      if (v10 + 40 == (unsigned __int8 *)v8)
        goto LABEL_15;
    }
    *(_QWORD *)(v9 - 21) = *(_QWORD *)(a2 + 16);
    v18 = *(_QWORD *)(a2 + 24);
    *(v9 - 5) = *(_BYTE *)(a2 + 32);
    *(_QWORD *)(v9 - 13) = v18;
  }
  else
  {
LABEL_15:
    if ((_DWORD)v7 == *((_DWORD *)v3 + 72))
    {
      result = WTF::Vector<std::variant<double,WebCore::DOMPointInit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v3 + 280), v7 + 1, a2);
      v12 = *((_QWORD *)v3 + 35) + 40 * *((unsigned int *)v3 + 73);
      v13 = *((_QWORD *)result + 4);
      v14 = *((_OWORD *)result + 1);
      *(_OWORD *)v12 = *(_OWORD *)result;
      *(_OWORD *)(v12 + 16) = v14;
      *(_QWORD *)(v12 + 32) = v13;
    }
    else
    {
      v15 = *(_OWORD *)a2;
      v16 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v8 = v15;
      *(_OWORD *)(v8 + 16) = v16;
    }
    ++*((_DWORD *)v3 + 73);
  }
  v17 = __ldxr(v4);
  if (v17 != 1)
  {
    __clrex();
    return (char *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (char *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

BOOL WebCore::ScrollingTree::hasPendingScrollUpdates(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)this + 274;
  if (__ldaxr((unsigned __int8 *)this + 274))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 274);
LABEL_5:
  v4 = *((_DWORD *)this + 73);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 != 0;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 != 0;
}

uint64_t WebCore::ScrollingTree::scrollPinningBehavior(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;

  v2 = (unsigned __int8 *)this + 264;
  if (__ldaxr((unsigned __int8 *)this + 264))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 264);
LABEL_5:
  v4 = *((unsigned __int8 *)this + 273);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4;
}

BOOL WebCore::ScrollingTree::willWheelEventStartSwipeGesture(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  _BOOL8 v6;
  float v7;
  float v8;
  int v9;

  if (*(_BYTE *)(a2 + 92) != 1)
    return 0;
  v4 = a1 + 264;
  if (__ldaxr(a1 + 264))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](a1 + 264);
    goto LABEL_7;
  }
  if (__stxr(1u, v4))
    goto LABEL_6;
LABEL_7:
  v7 = *(float *)(a2 + 68);
  v6 = 1;
  if ((v7 <= 0.0 || !a1[272] || a1[268]) && (v7 >= 0.0 || !a1[270] || a1[266]))
  {
    v8 = *(float *)(a2 + 72);
    if ((v8 <= 0.0 || !a1[269] || a1[265]) && (v8 >= 0.0 || !a1[271] || a1[267]))
      v6 = 0;
  }
  v9 = __ldxr(v4);
  if (v9 == 1)
  {
    if (!__stlxr(0, v4))
      return v6;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return v6;
}

uint64_t WebCore::ScrollingTree::windowScreenDidChange(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v8;

  v5 = result;
  v6 = (unsigned __int8 *)(result + 168);
  if (__ldaxr((unsigned __int8 *)(result + 168)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 168);
LABEL_5:
  *(_DWORD *)(v5 + 216) = a2;
  *(_DWORD *)(v5 + 220) = a3;
  *(_BYTE *)(v5 + 224) = BYTE4(a3);
  v8 = __ldxr(v6);
  if (v8 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

BOOL WebCore::ScrollingTree::hasRecentActivity(WebCore::ScrollingTree *this)
{
  WebCore::ScrollingTree *v1;
  unsigned __int8 *v2;
  __n128 v4;
  double v5;
  double v6;
  int v7;
  _BOOL8 v8;
  unsigned __int8 *v9;
  uint64_t v11;
  int v12;

  v1 = this;
  v2 = (unsigned __int8 *)this + 296;
  if (__ldaxr((unsigned __int8 *)this + 296))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  this = (WebCore::ScrollingTree *)MEMORY[0x19AEA534C]((char *)this + 296);
LABEL_5:
  WTF::MonotonicTime::now(this);
  v5 = v4.n128_f64[0];
  v6 = *((double *)v1 + 38);
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v2))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v5 - v6 < 0.05)
    return 1;
  v9 = (unsigned __int8 *)v1 + 168;
  if (__ldaxr((unsigned __int8 *)v1 + 168))
  {
    __clrex();
LABEL_15:
    v4.n128_f64[0] = v5 - v6;
    MEMORY[0x19AEA534C]((char *)v1 + 168, v4);
    goto LABEL_16;
  }
  if (__stxr(1u, v9))
    goto LABEL_15;
LABEL_16:
  v11 = *((_QWORD *)v1 + 32);
  if (v11)
    v8 = *(_DWORD *)(v11 - 12) != 0;
  else
    v8 = 0;
  v12 = __ldxr(v9);
  if (v12 == 1)
  {
    if (!__stlxr(0, v9))
      return v8;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
  return v8;
}

uint64_t WebCore::ScrollingTree::willProcessWheelEvent(WebCore::ScrollingTree *this)
{
  WebCore::ScrollingTree *v1;
  unsigned __int8 *v2;
  uint64_t result;
  uint64_t v5;
  int v6;

  v1 = this;
  v2 = (unsigned __int8 *)this + 296;
  if (__ldaxr((unsigned __int8 *)this + 296))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  this = (WebCore::ScrollingTree *)MEMORY[0x19AEA534C]((char *)this + 296);
LABEL_5:
  result = WTF::MonotonicTime::now(this);
  *((_QWORD *)v1 + 38) = v5;
  v6 = __ldxr(v2);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

BOOL WebCore::ScrollingTree::overlayScrollbarsEnabled(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)this + 168;
  if (__ldaxr((unsigned __int8 *)this + 168))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 168);
LABEL_5:
  v4 = *((unsigned __int8 *)this + 339);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 != 0;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 != 0;
}

double WebCore::ScrollingTree::frameDuration(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  unsigned int v4;
  int v5;
  int v6;
  double result;

  v2 = (unsigned __int8 *)this + 168;
  if (__ldaxr((unsigned __int8 *)this + 168))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 168);
LABEL_5:
  v4 = *((_DWORD *)this + 55);
  v5 = *((unsigned __int8 *)this + 224);
  v6 = __ldxr(v2);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v2))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  result = 1.0 / (double)v4;
  if (!v5)
    return 0.0166666667;
  return result;
}

double WebCore::ScrollingTree::maxAllowableRenderingUpdateDurationForSynchronization(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  unsigned int v4;
  int v5;
  int v6;
  double result;

  v2 = (unsigned __int8 *)this + 168;
  if (__ldaxr((unsigned __int8 *)this + 168))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 168);
LABEL_5:
  v4 = *((_DWORD *)this + 55);
  v5 = *((unsigned __int8 *)this + 224);
  v6 = __ldxr(v2);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v2))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  result = 1.0 / (double)v4 * 0.5;
  if (!v5)
    return 0.00833333333;
  return result;
}

uint64_t WebCore::ScrollingTree::frameIDForScrollingNodeID@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t *v23;
  uint64_t v25;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v4 = result;
  v29 = a2;
  v30 = a3;
  v6 = (unsigned __int8 *)(result + 32);
  if (__ldaxr((unsigned __int8 *)(result + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 32);
LABEL_5:
  v8 = *(_QWORD *)(v4 + 40);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    v10 = v8 + 24 * v9;
    if (*(_DWORD *)(v8 - 12))
    {
      v11 = v8;
      if ((_DWORD)v9)
      {
        v12 = 24 * v9;
        v11 = v8;
        while (*(_OWORD *)v11 == 0 || *(_QWORD *)(v11 + 8) == -1)
        {
          v11 += 24;
          v12 -= 24;
          if (!v12)
          {
            v11 = v10;
            goto LABEL_19;
          }
        }
      }
      goto LABEL_19;
    }
    v11 = v8 + 24 * v9;
  }
  else
  {
    v11 = 0;
    LODWORD(v9) = 0;
  }
  v10 = v8 + 24 * v9;
LABEL_19:
  if (v8)
    v14 = v8 + 24 * *(unsigned int *)(v8 - 4);
  else
    v14 = 0;
  if (v14 == v11)
  {
LABEL_46:
    v27 = 0;
    *a4 = 0;
    goto LABEL_48;
  }
  while (1)
  {
    v15 = *(_QWORD *)(v11 + 16);
    if (v15)
      break;
LABEL_36:
    v25 = v11 + 24;
    v11 = v10;
    if (v25 != v10)
    {
      v11 = v25;
      while (*(_OWORD *)v11 == 0 || *(_QWORD *)(v11 + 8) == -1)
      {
        v11 += 24;
        if (v11 == v10)
        {
          v11 = v10;
          break;
        }
      }
    }
    if (v11 == v14)
      goto LABEL_46;
  }
  v16 = *(_DWORD *)(v15 - 8);
  result = WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v29);
  v17 = result & v16;
  v18 = (uint64_t *)(v15 + 16 * (result & v16));
  v19 = *v18;
  v20 = v18[1];
  if (*v18 != v29 || v20 != v30)
  {
    v22 = 1;
    while (v19 | v20)
    {
      v17 = (v17 + v22) & v16;
      v23 = (uint64_t *)(v15 + 16 * v17);
      v19 = *v23;
      v20 = v23[1];
      ++v22;
      if (v19 == v29 && v20 == v30)
        goto LABEL_47;
    }
    goto LABEL_36;
  }
LABEL_47:
  *(_OWORD *)a4 = *(_OWORD *)v11;
  v27 = 1;
LABEL_48:
  a4[16] = v27;
  v28 = __ldxr(v6);
  if (v28 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

WTF::StringImpl *WebCore::ScrollingTree::scrollingTreeAsText(uint64_t a1, char a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  const char *v19;
  WTF::TextStream *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *result;
  uint64_t v34;
  __int128 v35;
  char v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  char v40;
  int v41;
  __int16 v42;
  int v43;
  double v44;

  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 1;
  v41 = 0;
  v42 = 256;
  v43 = 0;
  WTF::TextStream::startGroup((WTF::TextStream *)&v37);
  WTF::TextStream::operator<<();
  v4 = (unsigned __int8 *)(a1 + 168);
  if (__ldaxr((unsigned __int8 *)(a1 + 168)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 168);
LABEL_5:
  v6 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](a1 + 48);
LABEL_9:
  v8 = *(_BYTE *)(a1 + 80);
  if (v8)
  {
    v35 = *(_OWORD *)(a1 + 56);
    v8 = 1;
  }
  v36 = v8;
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v6))
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 48));
  if (v36)
  {
    WTF::TextStream::startGroup((WTF::TextStream *)&v37);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::operator<<();
    v44 = *((double *)&v35 + 1);
    WTF::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup((WTF::TextStream *)&v37);
  }
  if (*(float *)(a1 + 208) != 0.0 || *(float *)(a1 + 212) != 0.0)
  {
    WTF::TextStream::startGroup((WTF::TextStream *)&v37);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v44 = *(float *)(a1 + 212);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup((WTF::TextStream *)&v37);
  }
  if (*(_QWORD *)(a1 + 16))
  {
    WTF::TextStream::startGroup((WTF::TextStream *)&v37);
    WebCore::ScrollingTreeNode::dump(*(_QWORD *)(a1 + 16), (WTF::TextStream *)&v37, a2 | 4);
    WTF::TextStream::endGroup((WTF::TextStream *)&v37);
  }
  if ((a2 & 2) == 0)
    goto LABEL_67;
  v10 = *(_QWORD *)(a1 + 144);
  if (!v10 || !*(_DWORD *)(v10 - 12))
    goto LABEL_67;
  WTF::TextStream::startGroup((WTF::TextStream *)&v37);
  WTF::TextStream::operator<<();
  v11 = v41++;
  v12 = *(_QWORD *)(a1 + 144);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 - 4);
    v14 = v12 + 32 * v13;
    if (*(_DWORD *)(v12 - 12))
    {
      v15 = *(_QWORD *)(a1 + 144);
      if ((_DWORD)v13)
      {
        v16 = 32 * v13;
        v15 = v12;
        while (*(_OWORD *)v15 == 0 || *(_QWORD *)(v15 + 8) == -1)
        {
          v15 += 32;
          v16 -= 32;
          if (!v16)
          {
            v15 = v14;
            goto LABEL_40;
          }
        }
      }
      goto LABEL_40;
    }
    v15 = v12 + 32 * v13;
  }
  else
  {
    v15 = 0;
    v13 = 0;
  }
  v14 = v12 + 32 * v13;
LABEL_40:
  if (v12)
    v18 = v12 + 32 * *(unsigned int *)(v12 - 4);
  else
    v18 = 0;
  if (v18 != v15)
  {
    v19 = "\n";
    v34 = v18;
    do
    {
      v20 = (WTF::TextStream *)WTF::TextStream::operator<<();
      WTF::TextStream::writeIndent(v20);
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      WTF::operator<<();
      WTF::TextStream::operator<<();
      v21 = WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      v22 = *(unsigned int *)(v15 + 28);
      if ((_DWORD)v22)
      {
        v23 = *(_QWORD *)(v15 + 16);
        WTF::TextStream::operator<<();
        WTF::operator<<();
        WTF::TextStream::operator<<();
        WTF::operator<<();
        WTF::TextStream::operator<<();
        v24 = 1;
        if ((_DWORD)v22 != 1 && *(_DWORD *)(v21 + 32) != 1)
        {
          v25 = v19;
          v26 = v23 + 16 * v22;
          v27 = v23 + 16;
          v24 = 2;
          while (1)
          {
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::operator<<();
            WTF::TextStream::operator<<();
            WTF::operator<<();
            WTF::TextStream::operator<<();
            if (v24 == *(_DWORD *)(v21 + 32))
              break;
            ++v24;
            v27 += 16;
            if (v27 == v26)
            {
              v24 = v22;
              break;
            }
          }
          v19 = v25;
          v18 = v34;
        }
        if (*(_DWORD *)(v15 + 28) != v24)
          WTF::TextStream::operator<<();
      }
      WTF::TextStream::operator<<();
      v28 = v15 + 32;
      v15 = v14;
      if (v28 != v14)
      {
        v15 = v28;
        while (*(_OWORD *)v15 == 0 || *(_QWORD *)(v15 + 8) == -1)
        {
          v15 += 32;
          if (v15 == v14)
          {
            v15 = v14;
            break;
          }
        }
      }
    }
    while (v15 != v18);
    v11 = v41 - 1;
  }
  v41 = v11;
  WTF::TextStream::endGroup((WTF::TextStream *)&v37);
LABEL_67:
  v30 = __ldxr(v4);
  if (v30 != 1)
  {
    __clrex();
    goto LABEL_71;
  }
  if (__stlxr(0, v4))
LABEL_71:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  WTF::TextStream::endGroup((WTF::TextStream *)&v37);
  WTF::TextStream::release((WTF::TextStream *)&v37);
  v32 = v38;
  v38 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  result = v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ScrollingTreeFixedNode::~ScrollingTreeFixedNode(WebCore::ScrollingTreeFixedNode *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  --*(_DWORD *)(*((_QWORD *)this + 4) + 332);
  *(_QWORD *)this = off_1E34043F8;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v3)
    goto LABEL_14;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v8 = __ldxr((unsigned __int8 *)v3);
    if (v8 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
LABEL_14:
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

void WebCore::ScrollingTreeFixedNode::computeLayerPosition(WebCore::ScrollingTreeFixedNode *this, void *a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v5;
  int v7;
  uint64_t v8;
  float32x2_t v9;
  _QWORD *v10;
  float32x2_t v11;
  float32x2_t v12;
  uint64_t v13;
  uint64_t *v14;
  float32x2_t *v15;
  unsigned __int32 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  uint64_t v21;
  float32x2_t v22;
  uint64_t v23;
  uint64_t *v24;
  float32x2_t *v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  __n128 v45;

  v3 = *((_QWORD *)this + 10);
  a3.n128_u64[0] = 0;
  if (!v3)
    return;
  v5 = *((_QWORD *)this + 11);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3, a3);
  a3.n128_u64[0] = 0;
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  a3.n128_u64[0] = 0;
  if (!v5)
    return;
LABEL_15:
  v8 = 0;
  v9 = 0;
  while (2)
  {
    v10 = (_QWORD *)v5;
    if (*(unsigned __int8 *)(v5 + 40) > 1u)
    {
      switch(*(_BYTE *)(v5 + 40))
      {
        case 5:
          v12 = *(float32x2_t *)(v5 + 136);
          v11 = *(float32x2_t *)(v5 + 144);
          goto LABEL_19;
        case 6:
          v13 = *(_QWORD *)(v5 + 32);
          a3 = *(__n128 *)(v5 + 96);
          v45 = a3;
          if (a3.n128_u64[0]
            && (v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v13 + 24), (uint64_t *)&v45)) != 0)
          {
            v15 = (float32x2_t *)v14[2];
            a3.n128_u64[0] = 0;
            if (v15 && v15[5].i8[0] == 5)
            {
              v12 = v15[17];
              v11 = v15[18];
LABEL_19:
              a3.n128_u64[0] = (unint64_t)vsub_f32(v11, v12);
            }
          }
          else
          {
            a3.n128_u64[0] = 0;
          }
          v9 = vsub_f32(v9, (float32x2_t)a3.n128_u64[0]);
LABEL_40:
          v26 = v10[10];
          if (!v26)
          {
            v5 = 0;
            goto LABEL_54;
          }
          v5 = v10[11];
          if (__ldaxr((unsigned __int8 *)v26))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v26))
          {
            goto LABEL_46;
          }
          MEMORY[0x19AEA534C](v26, a3);
LABEL_46:
          if (*(_QWORD *)(v26 + 24))
            ++*(_QWORD *)(v26 + 8);
          else
            v5 = 0;
          v28 = __ldxr((unsigned __int8 *)v26);
          if (v28 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v26))
              goto LABEL_54;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_54:
          v29 = v10[1];
          if (__ldaxr((unsigned __int8 *)v29))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v29))
          {
            goto LABEL_58;
          }
          MEMORY[0x19AEA534C](v29, a3);
LABEL_58:
          v31 = *(_QWORD *)(v29 + 8);
          v32 = v31 - 1;
          *(_QWORD *)(v29 + 8) = v31 - 1;
          if (v31 == 1)
          {
            v36 = *(_QWORD *)(v29 + 16);
            v33 = *(_QWORD *)(v29 + 24);
            *(_QWORD *)(v29 + 24) = 0;
            v34 = v36 != 0;
          }
          else
          {
            v33 = 0;
            v34 = 1;
          }
          v35 = __ldxr((unsigned __int8 *)v29);
          if (v35 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v29))
            {
              if (v32)
                goto LABEL_70;
              goto LABEL_66;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v29);
          if (v32)
            goto LABEL_70;
LABEL_66:
          if (v33)
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v33 + 8))(v33, a3);
          if (!v34)
            WTF::fastFree((WTF *)v29, a2);
LABEL_70:
          if (!v5)
            return;
          continue;
        case 7:
          goto LABEL_75;
        case 8:
          WebCore::ScrollingTreeStickyNode::computeLayerPosition((WebCore::ScrollingTreeStickyNode *)v5, a2);
          a3.n128_u32[1] = v16;
          a3.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)a3.n128_u64[0], *(float32x2_t *)(v5 + 188));
          v9 = vadd_f32(v9, (float32x2_t)a3.n128_u64[0]);
          v8 = v5;
          goto LABEL_40;
        case 9:
          if (!v8
            || (v17 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 72))(v8, a3),
                v17 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5)))
          {
            v18 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 72))(v5, a3);
            if (v18 != (*(uint64_t (**)(WebCore::ScrollingTreeFixedNode *))(*(_QWORD *)this + 72))(this))
            {
              v19 = *(unsigned int *)(v5 + 108);
              if ((_DWORD)v19)
              {
                v20 = *(__n128 **)(v5 + 96);
                v21 = 16 * v19;
                v22 = 0;
                do
                {
                  v23 = v10[4];
                  a3 = *v20;
                  v45 = a3;
                  if (a3.n128_u64[0])
                  {
                    v24 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v23 + 24), (uint64_t *)&v45);
                    if (v24)
                    {
                      v25 = (float32x2_t *)v24[2];
                      if (v25)
                      {
                        if (v25[5].i8[0] == 5)
                        {
                          a3.n128_u64[0] = (unint64_t)vsub_f32(v25[18], v25[17]);
                          v22 = vadd_f32(v22, (float32x2_t)a3.n128_u64[0]);
                        }
                      }
                    }
                  }
                  ++v20;
                  v21 -= 16;
                }
                while (v21);
              }
              else
              {
                v22 = 0;
              }
              v9 = vadd_f32(v9, v22);
            }
          }
          goto LABEL_40;
        default:
          goto LABEL_40;
      }
    }
    break;
  }
LABEL_75:
  v37 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v37))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v37))
  {
    goto LABEL_79;
  }
  MEMORY[0x19AEA534C](v37);
LABEL_79:
  v39 = *(_QWORD *)(v37 + 8);
  v40 = v39 - 1;
  *(_QWORD *)(v37 + 8) = v39 - 1;
  if (v39 == 1)
  {
    v44 = *(_QWORD *)(v37 + 16);
    v41 = *(_QWORD *)(v37 + 24);
    *(_QWORD *)(v37 + 24) = 0;
    v42 = v44 != 0;
  }
  else
  {
    v41 = 0;
    v42 = 1;
  }
  v43 = __ldxr((unsigned __int8 *)v37);
  if (v43 != 1)
  {
    __clrex();
    goto LABEL_85;
  }
  if (__stlxr(0, (unsigned __int8 *)v37))
LABEL_85:
    WTF::Lock::unlockSlow((WTF::Lock *)v37);
  if (!v40)
  {
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    if (!v42)
      WTF::fastFree((WTF *)v37, a2);
  }
}

double WebCore::ScrollingTreeFrameHostingNode::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double result;

  v8 = WTF::fastMalloc((WTF *)0x78);
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v9 = 0;
  *(_OWORD *)(v9 + 8) = xmmword_19689B170;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = a1;
  *(_BYTE *)(v8 + 40) = 2;
  *(_QWORD *)(v8 + 48) = a2;
  *(_QWORD *)(v8 + 56) = a3;
  result = 0.0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)v8 = off_1E3404240;
  *(_QWORD *)(v8 + 8) = v9;
  *(_BYTE *)(v8 + 96) = 0;
  *(_BYTE *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *a4 = v8;
  return result;
}

void WebCore::ScrollingTreeFrameHostingNode::~ScrollingTreeFrameHostingNode(WebCore::ScrollingTreeFrameHostingNode *this, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  *(_QWORD *)this = off_1E3404240;
  v3 = (uint64_t *)*((_QWORD *)this + 14);
  if (v3)
    WTF::HashTable<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>::deallocateTable(v3, a2);
  *(_QWORD *)this = off_1E34043F8;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v4)
    goto LABEL_16;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v9 = __ldxr((unsigned __int8 *)v4);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
LABEL_16:
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  int v10;

  *(_QWORD *)this = off_1E3404240;
  v3 = (uint64_t *)*((_QWORD *)this + 14);
  if (v3)
    WTF::HashTable<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>::deallocateTable(v3, a2);
  *(_QWORD *)this = off_1E34043F8;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v4)
    goto LABEL_16;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
LABEL_16:
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  WTF::fastFree(this, v9);
}

uint64_t WebCore::ScrollingTreeFrameHostingNode::willBeDestroyed(WebCore::ScrollingTreeFrameHostingNode *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v30;

  if (*((_BYTE *)this + 104))
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *(_QWORD *)(v3 + 320);
    if (v4)
    {
      v5 = *((_QWORD *)this + 12);
      v6 = *(_DWORD *)(v4 - 8);
      v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      v11 = *(_QWORD *)(v4 + 16 * v10);
      if (v11 != v5)
      {
        v12 = 1;
        while (v11)
        {
          v10 = ((_DWORD)v10 + v12) & v6;
          v11 = *(_QWORD *)(v4 + 16 * v10);
          ++v12;
          if (v11 == v5)
            goto LABEL_9;
        }
        v10 = *(unsigned int *)(v4 - 4);
      }
LABEL_9:
      if (v10 != *(_DWORD *)(v4 - 4))
      {
        v13 = (uint64_t *)(v3 + 320);
        v14 = (_QWORD *)(v4 + 16 * v10);
        v15 = v14[1];
        *v14 = -1;
        v14[1] = 0;
        if (!v15)
        {
LABEL_27:
          ++*(_DWORD *)(*v13 - 16);
          v23 = *v13;
          if (*v13)
            v24 = *(_DWORD *)(v23 - 12) - 1;
          else
            v24 = -1;
          *(_DWORD *)(v23 - 12) = v24;
          v25 = *v13;
          if (*v13)
          {
            v26 = 6 * *(_DWORD *)(v25 - 12);
            v27 = *(_DWORD *)(v25 - 4);
            if (v26 < v27 && v27 >= 9)
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v13, v27 >> 1);
          }
          return WebCore::ScrollingTreeFrameHostingNode::removeHostedChildren((uint64_t)this, a2);
        }
        v16 = *(_QWORD *)(v15 + 8);
        if (__ldaxr((unsigned __int8 *)v16))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v16))
        {
          goto LABEL_15;
        }
        MEMORY[0x19AEA534C](v16);
LABEL_15:
        v18 = *(_QWORD *)(v16 + 8);
        v19 = v18 - 1;
        *(_QWORD *)(v16 + 8) = v18 - 1;
        if (v18 == 1)
        {
          v30 = *(_QWORD *)(v16 + 16);
          v20 = *(_QWORD *)(v16 + 24);
          *(_QWORD *)(v16 + 24) = 0;
          v21 = v30 != 0;
        }
        else
        {
          v20 = 0;
          v21 = 1;
        }
        v22 = __ldxr((unsigned __int8 *)v16);
        if (v22 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v16))
          {
LABEL_22:
            if (!v19)
            {
              if (v20)
                (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
              if (!v21)
                WTF::fastFree((WTF *)v16, a2);
            }
            goto LABEL_27;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v16);
        goto LABEL_22;
      }
    }
  }
  return WebCore::ScrollingTreeFrameHostingNode::removeHostedChildren((uint64_t)this, a2);
}

uint64_t WebCore::ScrollingTreeFrameHostingNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  WTF::TextStream::operator<<();
  if (*(_BYTE *)(a1 + 104))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if ((a3 & 2) != 0)
      WTF::operator<<();
    else
      WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  return WebCore::ScrollingTreeNode::dumpProperties(a1, a2, a3);
}

uint64_t WebCore::ScrollingTreeFrameScrollingNode::ScrollingTreeFrameScrollingNode(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_19689B170;
  *(_QWORD *)(v10 + 24) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_WORD *)(a1 + 248) = 257;
  *(_QWORD *)(a1 + 250) = 0;
  *(_DWORD *)(a1 + 258) = 0x10000;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 0;
  *(_QWORD *)a1 = off_1E3404298;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_BYTE *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 388) = 1065353216;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 399) = 0;
  return a1;
}

{
  uint64_t v10;

  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_19689B170;
  *(_QWORD *)(v10 + 24) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_WORD *)(a1 + 248) = 257;
  *(_QWORD *)(a1 + 250) = 0;
  *(_DWORD *)(a1 + 258) = 0x10000;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 0;
  *(_QWORD *)a1 = off_1E3404298;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_BYTE *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 388) = 1065353216;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 399) = 0;
  return a1;
}

void WebCore::ScrollingTreeFrameScrollingNode::~ScrollingTreeFrameScrollingNode(WebCore::ScrollingTreeFrameScrollingNode *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScrollingTreeScrollingNode::~ScrollingTreeScrollingNode(this, a2);
  WTF::fastFree(v2, v3);
}

float WebCore::ScrollingTreeFrameScrollingNode::layoutViewportRespectingRubberBanding(WebCore::ScrollingTreeFrameScrollingNode *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 18);
  return WebCore::ScrollingTreeFrameScrollingNode::layoutViewportForScrollPosition((uint64_t)this, &v2, (const WebCore::FloatSize *)1, *((float *)this + 97));
}

uint64_t WebCore::ScrollingTreeFrameScrollingNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  uint64_t v6;
  uint64_t result;

  WTF::TextStream::operator<<();
  WebCore::ScrollingTreeScrollingNode::dumpProperties(a1, a2, a3);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v6 = WTF::TextStream::operator<<();
  WebCore::operator<<(v6);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  if (*(_BYTE *)(a1 + 384))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(float *)(a1 + 388) != 1.0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(float *)(a1 + 392) != 0.0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(_DWORD *)(a1 + 396))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(_DWORD *)(a1 + 400))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  result = WTF::TextStream::endGroup(a2);
  if (*(_BYTE *)(a1 + 405))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    result = WTF::TextStream::endGroup(a2);
  }
  if (*(_BYTE *)(a1 + 406))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    return WTF::TextStream::endGroup(a2);
  }
  return result;
}

uint64_t WebCore::ScrollingTree::isThreadedScrollingTree(WebCore::ScrollingTree *this)
{
  return 0;
}

uint64_t WebCore::ScrollingTree::isScrollingTreeMac(WebCore::ScrollingTree *this)
{
  return 0;
}

uint64_t WebCore::ScrollingTree::isRemoteScrollingTree(WebCore::ScrollingTree *this)
{
  return 0;
}

uint64_t WebCore::ScrollingTree::isScrollingTreeIOS(WebCore::ScrollingTree *this)
{
  return 0;
}

uint64_t WebCore::ScrollingTree::scrollingTreeNodeRequestsScroll()
{
  return 0;
}

uint64_t WebCore::ScrollingTree::scrollingTreeNodeRequestsKeyboardScroll()
{
  return 0;
}

uint64_t WebCore::ScrollingTree::isScrollingSynchronizedWithMainThread(WebCore::ScrollingTree *this)
{
  return 1;
}

uint64_t WebCore::ScrollingTreeFrameHostingNode::isRootOfHostedSubtree(WebCore::ScrollingTreeFrameHostingNode *this)
{
  return *((unsigned __int8 *)this + 104);
}

void WebCore::ScrollingTreeScrollingNode::scrollbarStateForOrientation(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  *a1 = v1;
}

WTF *WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, WTF *a2)
{
  WTF *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 > v5)
  {
    *((_DWORD *)result + 3) = v5;
LABEL_17:
    v15 = *(WTF **)v2;
    if (v5)
    {
      memmove(v15, *(const void **)a2, 8 * v5);
      v16 = *((_DWORD *)v2 + 3);
      v15 = *(WTF **)v2;
    }
    else
    {
      v16 = 0;
    }
    v17 = *((unsigned int *)a2 + 3);
    if (v16 != (_DWORD)v17)
    {
      v18 = (_QWORD *)((char *)v15 + 8 * v16);
      v19 = (uint64_t *)(*(_QWORD *)a2 + 8 * v16);
      v20 = 8 * v17 - 8 * v16;
      do
      {
        v21 = *v19++;
        *v18++ = v21;
        v20 -= 8;
      }
      while (v20);
      v16 = *((_DWORD *)a2 + 3);
    }
    *((_DWORD *)v2 + 3) = v16;
    return v2;
  }
  v6 = *((_DWORD *)result + 2);
  if (v5 <= v6)
    goto LABEL_16;
  if (v6)
  {
    if (v4)
      *((_DWORD *)result + 3) = 0;
    result = *(WTF **)result;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
      v6 = *((_DWORD *)v2 + 2);
    }
  }
  v7 = *((unsigned int *)a2 + 3);
  if (v6 >= v7)
  {
LABEL_16:
    v5 = *((_DWORD *)v2 + 3);
    goto LABEL_17;
  }
  if (!(v7 >> 29))
  {
    v8 = *(WTF **)v2;
    v9 = *((unsigned int *)v2 + 3);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v7));
    *((_DWORD *)v2 + 2) = v7;
    *(_QWORD *)v2 = v10;
    if ((_DWORD)v9)
    {
      v12 = 8 * v9;
      v13 = v8;
      do
      {
        v14 = *(_QWORD *)v13;
        v13 = (WTF *)((char *)v13 + 8);
        *v10++ = v14;
        v12 -= 8;
      }
      while (v12);
    }
    if (v8)
    {
      if (*(WTF **)v2 == v8)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v8, v11);
    }
    goto LABEL_16;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  WTF *v12;
  WTF *v13;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x6666667)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(unsigned int *)(result + 12);
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    if ((_DWORD)v4)
    {
      v8 = v6;
      v9 = 40 * v4;
      v10 = (char *)v3 + 24;
      do
      {
        v11 = *(_OWORD *)(v10 - 24);
        *(_BYTE *)(v8 + 16) = *(v10 - 8);
        *(_OWORD *)v8 = v11;
        *(_QWORD *)(v8 + 24) = 0;
        *(_QWORD *)(v8 + 32) = 0;
        v12 = *(WTF **)v10;
        *(_QWORD *)v10 = 0;
        *(_QWORD *)(v8 + 24) = v12;
        LODWORD(v12) = *((_DWORD *)v10 + 2);
        *((_DWORD *)v10 + 2) = 0;
        *(_DWORD *)(v8 + 32) = (_DWORD)v12;
        LODWORD(v12) = *((_DWORD *)v10 + 3);
        *((_DWORD *)v10 + 3) = 0;
        *(_DWORD *)(v8 + 36) = (_DWORD)v12;
        v13 = *(WTF **)v10;
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          WTF::fastFree(v13, v7);
        }
        v10 += 40;
        v8 += 40;
        v9 -= 40;
      }
      while (v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF *WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, WTF *a2)
{
  WTF *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  char *v12;
  uint64_t v13;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 > v5)
  {
    *((_DWORD *)result + 3) = v5;
LABEL_14:
    v12 = *(char **)v2;
    if (v5)
    {
      memmove(v12, *(const void **)a2, 8 * v5);
      v13 = *((unsigned int *)v2 + 3);
      v12 = *(char **)v2;
    }
    else
    {
      v13 = 0;
    }
    memcpy(&v12[8 * v13], (const void *)(*(_QWORD *)a2 + 8 * v13), *(_QWORD *)a2 + 8 * *((unsigned int *)a2 + 3) - (*(_QWORD *)a2 + 8 * v13));
    *((_DWORD *)v2 + 3) = *((_DWORD *)a2 + 3);
    return v2;
  }
  v6 = *((_DWORD *)result + 2);
  if (v5 <= v6)
    goto LABEL_13;
  if (v6)
  {
    if (v4)
      *((_DWORD *)result + 3) = 0;
    result = *(WTF **)result;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
      v6 = *((_DWORD *)v2 + 2);
    }
  }
  v7 = *((unsigned int *)a2 + 3);
  if (v6 >= v7)
  {
LABEL_13:
    v5 = *((_DWORD *)v2 + 3);
    goto LABEL_14;
  }
  if (!(v7 >> 29))
  {
    v8 = *(char **)v2;
    v9 = *((unsigned int *)v2 + 3);
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    *((_DWORD *)v2 + 2) = v7;
    *(_QWORD *)v2 = v10;
    memcpy(v10, v8, 8 * v9);
    if (v8)
    {
      if (*(char **)v2 == v8)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree((WTF *)v8, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::StickyPositionViewportConstraints::constraintType(WebCore::StickyPositionViewportConstraints *this)
{
  return 1;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 1) == -1)
        goto LABEL_21;
      v5 = *v4;
      *v4 = 0;
      if (!v5)
        goto LABEL_21;
      v6 = *(_QWORD *)(v5 + 8);
      if (__ldaxr((unsigned __int8 *)v6))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v6))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEA534C](v6);
LABEL_9:
      v8 = *(_QWORD *)(v6 + 8);
      v9 = v8 - 1;
      *(_QWORD *)(v6 + 8) = v8 - 1;
      if (v8 == 1)
      {
        v13 = *(_QWORD *)(v6 + 16);
        v10 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = 0;
        v11 = v13 != 0;
      }
      else
      {
        v10 = 0;
        v11 = 1;
      }
      v12 = __ldxr((unsigned __int8 *)v6);
      if (v12 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v6))
        {
          if (!v9)
            goto LABEL_17;
          goto LABEL_21;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      if (!v9)
      {
LABEL_17:
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        if (!v11)
          WTF::fastFree((WTF *)v6, a2);
      }
LABEL_21:
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>::~KeyValuePair(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = (uint64_t *)(a1 + 16); ; i += 3)
    {
      if (*(i - 1) != -1)
      {
        v5 = *i;
        *i = 0;
        if (v5)
          break;
      }
LABEL_5:
      if (!--v3)
        return WTF::fastFree((WTF *)(a1 - 16), a2);
    }
    v6 = *(_QWORD *)(v5 + 8);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
LABEL_10:
      v8 = *(_QWORD *)(v6 + 8);
      v9 = v8 - 1;
      *(_QWORD *)(v6 + 8) = v8 - 1;
      if (v8 == 1)
      {
        v14 = *(_QWORD *)(v6 + 16);
        v10 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = 0;
        v11 = v14 != 0;
      }
      else
      {
        v10 = 0;
        v11 = 1;
      }
      v12 = __ldxr((unsigned __int8 *)v6);
      if (v12 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v6))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_14:
      if (!v9)
      {
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        if (!v11)
          WTF::fastFree((WTF *)v6, a2);
      }
      goto LABEL_5;
    }
    MEMORY[0x19AEA534C](v6);
    goto LABEL_10;
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::CommitTreeState::~CommitTreeState(WebCore::CommitTreeState *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::ScrollingStateTree **v16;
  uint64_t v17;
  WebCore::ScrollingStateTree *v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v23 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v23 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = *((_QWORD *)this + 5);
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), a2);
  v12 = *((_DWORD *)this + 9);
  v13 = *((_QWORD *)this + 3);
  if (v12)
  {
    v14 = v13 + 24 * v12;
    do
    {
      v15 = *(unsigned int *)(v13 + 20);
      if ((_DWORD)v15)
      {
        v16 = *(WebCore::ScrollingStateTree ***)(v13 + 8);
        v17 = 8 * v15;
        do
        {
          v18 = *v16;
          *v16 = 0;
          if (v18)
          {
            WebCore::ScrollingStateTree::~ScrollingStateTree(v18, a2);
            if (*(_DWORD *)v19)
            {
              *((_OWORD *)v19 + 3) = 0u;
              *((_OWORD *)v19 + 4) = 0u;
              *((_OWORD *)v19 + 1) = 0u;
              *((_OWORD *)v19 + 2) = 0u;
              *(_OWORD *)v19 = 0u;
            }
            else
            {
              WTF::fastFree(v19, a2);
            }
          }
          ++v16;
          v17 -= 8;
        }
        while (v17);
      }
      v20 = *(WTF **)(v13 + 8);
      if (v20)
      {
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 16) = 0;
        WTF::fastFree(v20, a2);
      }
      v13 += 24;
    }
    while (v13 != v14);
    v13 = *((_QWORD *)this + 3);
  }
  if (v13)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree((WTF *)v13, a2);
  }
  v21 = *((_QWORD *)this + 2);
  if (v21)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v21, a2);
  v22 = *((_QWORD *)this + 1);
  if (v22)
    WTF::fastFree((WTF *)(v22 - 16), a2);
  if (*(_QWORD *)this)
    WTF::fastFree((WTF *)(*(_QWORD *)this - 16), a2);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v8 = 0;
    v9 = v4;
    while (1)
    {
      v10 = (uint64_t *)(v3 + 8 * v8);
      v11 = *v10;
      if (*v10 == -1)
        goto LABEL_31;
      if (!v11)
      {
        *v10 = 0;
        goto LABEL_31;
      }
      v12 = *a1;
      if (*a1)
        v13 = *(_DWORD *)(v12 - 8);
      else
        v13 = 0;
      v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = 1;
      do
      {
        v19 = v17;
        v20 = *(_QWORD *)(v12 + 8 * v17);
        v17 = (v17 + v18++) & v13;
      }
      while (v20);
      v21 = (_QWORD *)(v12 + 8 * v19);
      *v21 = 0;
      v22 = *v10;
      *v10 = 0;
      *v21 = v22;
      v23 = *v10;
      *v10 = 0;
      if (!v23)
        goto LABEL_31;
      v24 = *(_QWORD *)(v23 + 8);
      if (__ldaxr((unsigned __int8 *)v24))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v24))
      {
        goto LABEL_19;
      }
      MEMORY[0x19AEA534C](v24);
LABEL_19:
      v26 = *(_QWORD *)(v24 + 8);
      v27 = v26 - 1;
      *(_QWORD *)(v24 + 8) = v26 - 1;
      if (v26 == 1)
      {
        v31 = *(_QWORD *)(v24 + 16);
        v28 = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v24 + 24) = 0;
        v29 = v31 != 0;
      }
      else
      {
        v28 = 0;
        v29 = 1;
      }
      v30 = __ldxr((unsigned __int8 *)v24);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v24))
        {
          if (!v27)
            goto LABEL_27;
          goto LABEL_31;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
      if (!v27)
      {
LABEL_27:
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        if (!v29)
          WTF::fastFree((WTF *)v24, v7);
      }
LABEL_31:
      if (++v8 == v9)
        return WTF::fastFree((WTF *)(v3 - 16), v7);
    }
  }
  if (v3)
    return WTF::fastFree((WTF *)(v3 - 16), v7);
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_46;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_46:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_7:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastZeroedMalloc((WTF *)(16 * v11 + 16));
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v13 = *a2;
  if (*a2)
  {
    v14 = *(unsigned int *)(v13 - 4);
    v15 = v13 + 16 * v14;
    if (*(_DWORD *)(v13 - 12))
    {
      v16 = *a2;
      if ((_DWORD)v14)
      {
        v17 = 16 * v14;
        v16 = *a2;
        while (*(_OWORD *)v16 == 0 || *(_QWORD *)(v16 + 8) == -1)
        {
          v16 += 16;
          v17 -= 16;
          if (!v17)
          {
            v16 = v15;
            break;
          }
        }
      }
      if (!v13)
        goto LABEL_25;
      goto LABEL_24;
    }
    v16 = v13 + 16 * v14;
  }
  else
  {
    v16 = 0;
    v14 = 0;
  }
  v15 = v13 + 16 * v14;
  if (v13)
LABEL_24:
    v13 += 16 * *(unsigned int *)(v13 - 4);
LABEL_25:
  while (v16 != v13)
  {
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 8);
    else
      v20 = 0;
    v21 = 0;
    v22 = *(_QWORD *)(v16 + 8);
    v23 = (*(_QWORD *)v16 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*(_QWORD *)v16 - 1640531527) << 16) ^ ((unsigned __int16)*(_QWORD *)v16 - 1640531527);
    v24 = v23 + (unsigned __int16)WORD2(*(_QWORD *)v16);
    v25 = (*(_QWORD *)v16 >> 37) & 0x7FFF800 ^ ((v24 + (v23 >> 11)) << 16) ^ (v24 + (v23 >> 11));
    v26 = (v22 >> 5) & 0x7FFF800 ^ ((v25 + (unsigned __int16)v22 + (v25 >> 11)) << 16) ^ (v25 + (unsigned __int16)v22 + (v25 >> 11));
    v27 = v26 + WORD2(v22) + (v26 >> 11);
    LODWORD(v22) = (v22 >> 37) & 0x7FFF800 ^ (v27 << 16);
    v28 = ((v22 ^ v27) + ((v22 ^ v27) >> 11)) ^ (8 * ((v22 ^ v27) + ((v22 ^ v27) >> 11)));
    v29 = (v28 + (v28 >> 5)) ^ (4 * (v28 + (v28 >> 5)));
    v30 = (v29 + (v29 >> 15)) ^ ((v29 + (v29 >> 15)) << 10);
    if (v30)
      v31 = v30;
    else
      v31 = 0x800000;
    do
    {
      v32 = v31 & v20;
      v33 = (uint64_t *)(v19 + 16 * v32);
      v34 = *v33;
      v35 = v33[1];
      v31 = ++v21 + v32;
    }
    while (v34 | v35);
    *(_OWORD *)(v19 + 16 * v32) = *(_OWORD *)v16;
    v36 = v16 + 16;
    v16 = v15;
    if (v36 != v15)
    {
      v16 = v36;
      while (*(_OWORD *)v16 == 0 || *(_QWORD *)(v16 + 8) == -1)
      {
        v16 += 16;
        if (v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 == -1)
        goto LABEL_21;
      *v4 = 0;
      if (!v5)
        goto LABEL_21;
      v6 = *(_QWORD *)(v5 + 8);
      if (__ldaxr((unsigned __int8 *)v6))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v6))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEA534C](v6);
LABEL_9:
      v8 = *(_QWORD *)(v6 + 8);
      v9 = v8 - 1;
      *(_QWORD *)(v6 + 8) = v8 - 1;
      if (v8 == 1)
      {
        v13 = *(_QWORD *)(v6 + 16);
        v10 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = 0;
        v11 = v13 != 0;
      }
      else
      {
        v10 = 0;
        v11 = 1;
      }
      v12 = __ldxr((unsigned __int8 *)v6);
      if (v12 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v6))
        {
          if (!v9)
            goto LABEL_17;
          goto LABEL_21;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      if (!v9)
      {
LABEL_17:
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        if (!v11)
          WTF::fastFree((WTF *)v6, a2);
      }
LABEL_21:
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

BOOL WebCore::operator==<float>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(float *)a1 == *(float *)a2
    && (*(_BYTE *)(a1 + 4) == 0) != (*(_BYTE *)(a2 + 4) != 0)
    && (v2 = *(unsigned int *)(a1 + 36), (_DWORD)v2 == *(_DWORD *)(a2 + 36)))
  {
    return memcmp(*(const void **)(a1 + 24), *(const void **)(a2 + 24), 8 * v2) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t WTF::streamSizedContainer<WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unsigned int v5;
  __int128 *v6;
  uint64_t v7;
  void *v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  __int128 v15;
  __int128 v16;
  WTF *v17;
  WTF *v18;

  result = WTF::TextStream::operator<<();
  v5 = *((_DWORD *)a2 + 3);
  if (!v5)
    return WTF::TextStream::operator<<();
  v14 = a2;
  v6 = (__int128 *)*a2;
  v7 = *((unsigned int *)v6 + 9);
  v15 = *v6;
  v17 = 0;
  if (!(_DWORD)v7)
  {
LABEL_5:
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (BYTE4(v15))
      WTF::TextStream::operator<<();
    if (v17)
      WTF::fastFree(v17, v8);
    v9 = 1;
    if (v5 != 1 && *(_DWORD *)(a1 + 32) != 1)
    {
      v10 = (unsigned int *)v6 + 19;
      v11 = 40 * v5 - 40;
      v9 = 2;
      while (1)
      {
        result = WTF::TextStream::operator<<();
        v16 = *(_OWORD *)(v10 - 9);
        v12 = *v10;
        v18 = 0;
        if ((_DWORD)v12)
        {
          if (v12 >> 29)
            goto LABEL_25;
          v18 = (WTF *)WTF::fastMalloc((WTF *)(8 * v12));
          memcpy(v18, *(const void **)(v10 - 3), 8 * *v10);
        }
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        if (BYTE4(v16))
          WTF::TextStream::operator<<();
        if (v18)
          WTF::fastFree(v18, v13);
        if (v9 == *(_DWORD *)(a1 + 32))
          break;
        ++v9;
        v10 += 10;
        v11 -= 40;
        if (!v11)
        {
          v9 = v5;
          break;
        }
      }
    }
    if (*((_DWORD *)v14 + 3) != v9)
      WTF::TextStream::operator<<();
    return WTF::TextStream::operator<<();
  }
  if (!(v7 >> 29))
  {
    v17 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
    memcpy(v17, *((const void **)v6 + 3), 8 * *((unsigned int *)v6 + 9));
    goto LABEL_5;
  }
LABEL_25:
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScrollingStateTree::createAfterReconstruction(BOOL,BOOL,WTF::RefPtr<WebCore::ScrollingStateFrameScrollingNode,WTF::RawPtrTraits<WebCore::ScrollingStateFrameScrollingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateFrameScrollingNode>> &&)::$_0,void,WebCore::ScrollingStateNode &>::call(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  __int128 v5;
  _BYTE v6[24];

  v3 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 40);
  v5 = *(_OWORD *)(a2 + 24);
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::add<WebCore::ScrollingStateNode&>(v3, &v5, a2, (uint64_t)v6);
  if (!v6[16])
    **(_BYTE **)(a1 + 16) = 0;
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, unint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t result;
  uint64_t v26;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = (unint64_t *)v6;
    v13 = v7;
    while (1)
    {
      if (v12[1] != -1)
      {
        if (*(_OWORD *)v12 != 0)
        {
          WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::reinsert(*a1, v12);
          v23 = v22;
          WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>::~KeyValuePair((uint64_t)v12, v24);
          if (v12 == a3)
            v11 = v23;
          goto LABEL_6;
        }
        v14 = v12[2];
        v12[2] = 0;
        if (v14)
          break;
      }
LABEL_6:
      v12 += 3;
      if (!--v13)
        goto LABEL_30;
    }
    v15 = *(_QWORD *)(v14 + 8);
    if (__ldaxr((unsigned __int8 *)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
LABEL_13:
      v17 = *(_QWORD *)(v15 + 8);
      v18 = v17 - 1;
      *(_QWORD *)(v15 + 8) = v17 - 1;
      if (v17 == 1)
      {
        v26 = *(_QWORD *)(v15 + 16);
        v19 = *(_QWORD *)(v15 + 24);
        *(_QWORD *)(v15 + 24) = 0;
        v20 = v26 != 0;
      }
      else
      {
        v19 = 0;
        v20 = 1;
      }
      v21 = __ldxr((unsigned __int8 *)v15);
      if (v21 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v15))
          goto LABEL_17;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_17:
      if (!v18)
      {
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        if (!v20)
          WTF::fastFree((WTF *)v15, v10);
      }
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v15);
    goto LABEL_13;
  }
  result = 0;
  if (v6)
  {
LABEL_30:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

__n128 WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::reinsert(uint64_t a1, unint64_t *a2)
{
  _OWORD *v3;
  void *v4;
  uint64_t v5;
  __n128 result;
  unint64_t v7;

  v3 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(a1, *a2, a2[1]);
  v5 = WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>::~KeyValuePair((uint64_t)v3, v4);
  result = *(__n128 *)a2;
  *(_OWORD *)v5 = *(_OWORD *)a2;
  v7 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(v5 + 16) = v7;
  return result;
}

uint64_t *WTF::GenericHashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>::assignToEmpty<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = *a2;
  *a2 = 0;
  v3 = *result;
  *result = v2;
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_4:
    result = (uint64_t *)MEMORY[0x19AEA534C](v4);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_4;
LABEL_5:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_9:
  if (!v7)
  {
    if (v8)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (!v9)
      return (uint64_t *)WTF::fastFree((WTF *)v4, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;

  v2 = (uint64_t *)result;
  *(_OWORD *)a2 = xmmword_1968C18F0;
  v3 = a2[2];
  a2[2] = 0;
  if (!v3)
    goto LABEL_10;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEA534C](v4);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_4;
LABEL_5:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v17 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v17 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_9:
  if (!v7)
  {
    if (v8)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (!v9)
      result = WTF::fastFree((WTF *)v4, a2);
  }
LABEL_10:
  ++*(_DWORD *)(*v2 - 16);
  v11 = *v2;
  if (*v2)
    v12 = *(_DWORD *)(v11 - 12) - 1;
  else
    v12 = -1;
  *(_DWORD *)(v11 - 12) = v12;
  v13 = *v2;
  if (*v2)
  {
    v14 = 6 * *(_DWORD *)(v13 - 12);
    v15 = *(_DWORD *)(v13 - 4);
    if (v14 < v15 && v15 >= 9)
      return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v2, v15 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v16;

  if (!a1)
    return 0;
  v3 = *(_DWORD *)(a1 - 8);
  v4 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                          - 1640531527);
  v5 = (a2 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(a2) + (v4 >> 11)) << 16) ^ (v4 + WORD2(a2) + (v4 >> 11));
  v6 = (a3 >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)a3 + (v5 >> 11)) << 16) ^ (v5
                                                                                               + (unsigned __int16)a3
                                                                                               + (v5 >> 11));
  v7 = (a3 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(a3) + (v6 >> 11)) << 16) ^ (v6 + WORD2(a3) + (v6 >> 11));
  v8 = (v7 + (v7 >> 11)) ^ (8 * (v7 + (v7 >> 11)));
  v9 = (v8 + (v8 >> 5)) ^ (4 * (v8 + (v8 >> 5)));
  v10 = (v9 + (v9 >> 15)) ^ ((v9 + (v9 >> 15)) << 10);
  if (!v10)
    v10 = 0x800000;
  v11 = v3 & v10;
  v12 = (uint64_t *)(a1 + 24 * (v3 & v10));
  v13 = *v12;
  v14 = v12[1];
  if (*v12 != a2 || v14 != a3)
  {
    v16 = 1;
    do
    {
      v12 = (uint64_t *)(v13 | v14);
      if (!(v13 | v14))
        break;
      v11 = (v11 + v16) & v3;
      v12 = (uint64_t *)(a1 + 24 * v11);
      v13 = *v12;
      v14 = v12[1];
      ++v16;
    }
    while (*v12 != a2 || v14 != a3);
  }
  return v12;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t *result;
  uint64_t v16;
  uint64_t v17;
  int v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = a2[1];
  v6 = (*a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a2 - 1640531527) << 16) ^ ((unsigned __int16)*a2
                                                                                            - 1640531527);
  v7 = v6 + (unsigned __int16)WORD2(*a2) + (v6 >> 11);
  v8 = ((unint64_t)*a2 >> 37) & 0x7FFF800 ^ (v7 << 16) ^ v7;
  v9 = (v5 >> 5) & 0x7FFF800 ^ ((v8 + (unsigned __int16)v5 + (v8 >> 11)) << 16) ^ (v8
                                                                                               + (unsigned __int16)v5
                                                                                               + (v8 >> 11));
  v10 = (v5 >> 37) & 0x7FFF800 ^ ((v9 + WORD2(v5) + (v9 >> 11)) << 16) ^ (v9 + WORD2(v5) + (v9 >> 11));
  v11 = (v10 + (v10 >> 11)) ^ (8 * (v10 + (v10 >> 11)));
  v12 = (v11 + (v11 >> 5)) ^ (4 * (v11 + (v11 >> 5)));
  v13 = (v12 + (v12 >> 15)) ^ ((v12 + (v12 >> 15)) << 10);
  if (!v13)
    v13 = 0x800000;
  v14 = v13 & v3;
  result = (uint64_t *)(v2 + 24 * (v13 & v3));
  v16 = *result;
  v17 = result[1];
  if (*result != v4 || v17 != v5)
  {
    v19 = 1;
    while (v16 | v17)
    {
      v14 = (v14 + v19) & v3;
      result = (uint64_t *)(v2 + 24 * v14);
      v16 = *result;
      v17 = result[1];
      ++v19;
      if (*result == v4 && v17 == v5)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;

  v2 = result;
  *(_OWORD *)a2 = xmmword_1968C18F0;
  v3 = a2[2];
  a2[2] = 0;
  if (!v3)
    goto LABEL_2;
  v10 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
LABEL_12:
    result = (uint64_t *)MEMORY[0x19AEA534C](v10);
    goto LABEL_13;
  }
  if (__stxr(1u, (unsigned __int8 *)v10))
    goto LABEL_12;
LABEL_13:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v17 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v17 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v10))
      goto LABEL_17;
  }
  else
  {
    __clrex();
  }
  result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_17:
  if (!v13)
  {
    if (v14)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (!v15)
      result = (uint64_t *)WTF::fastFree((WTF *)v10, a2);
  }
LABEL_2:
  ++*(_DWORD *)(*v2 - 16);
  v4 = *v2;
  if (*v2)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *v2;
  if (*v2)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v2, v8 >> 1, 0);
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _OWORD *v11;
  _OWORD *result;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  BOOL v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t v68;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v11 = 0;
    v14 = v7;
    while (1)
    {
      v15 = (unint64_t *)(v6 + 24 * v13);
      v16 = v15[1];
      if (v16 != -1)
        break;
LABEL_20:
      if (++v13 == v14)
        goto LABEL_31;
    }
    v17 = *v15;
    if (*(_OWORD *)v15 != 0)
    {
      v18 = *a1;
      if (*a1)
        v19 = *(_DWORD *)(v18 - 8);
      else
        v19 = 0;
      v68 = v14;
      v20 = 0;
      v21 = (v17 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v17 - 1640531527) << 16) ^ ((unsigned __int16)v17
                                                                                                 - 1640531527);
      v22 = (v17 >> 37) & 0x7FFF800 ^ ((v21 + WORD2(v17) + (v21 >> 11)) << 16) ^ (v21 + WORD2(v17) + (v21 >> 11));
      v23 = (v16 >> 5) & 0x7FFF800 ^ ((v22 + (v22 >> 11) + (unsigned __int16)v16) << 16) ^ (v22 + (v22 >> 11) + (unsigned __int16)v16);
      v24 = (v16 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v16) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v16) + (v23 >> 11));
      v25 = (v24 + (v24 >> 11)) ^ (8 * (v24 + (v24 >> 11)));
      v26 = (v25 + (v25 >> 5)) ^ (4 * (v25 + (v25 >> 5)));
      v27 = (v26 + (v26 >> 15)) ^ ((v26 + (v26 >> 15)) << 10);
      if (v27)
        v28 = v27;
      else
        v28 = 0x800000;
      do
      {
        v29 = v28 & v19;
        v30 = (_OWORD *)(v18 + 24 * (v28 & v19));
        v28 = ++v20 + (v28 & v19);
      }
      while (*v30 != 0);
      v31 = v18 + 24 * v29;
      v34 = *(_QWORD *)(v31 + 16);
      v33 = (_QWORD *)(v31 + 16);
      v32 = v34;
      *v33 = 0;
      if (!v34)
        goto LABEL_16;
      v47 = *(_QWORD *)(v32 + 8);
      if (__ldaxr((unsigned __int8 *)v47))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v47))
      {
LABEL_36:
        v49 = *(_QWORD *)(v47 + 8);
        v50 = v49 - 1;
        *(_QWORD *)(v47 + 8) = v49 - 1;
        if (v49 == 1)
        {
          v64 = *(_QWORD *)(v47 + 24);
          v60 = *(_QWORD *)(v47 + 16);
          *(_QWORD *)(v47 + 24) = 0;
          v51 = v60 != 0;
        }
        else
        {
          v64 = 0;
          v51 = 1;
        }
        v63 = v51;
        v66 = a3;
        v52 = __ldxr((unsigned __int8 *)v47);
        if (v52 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v47))
          {
LABEL_51:
            a3 = v66;
            if (!v50)
            {
              if (v64)
                (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
              if (!v63)
                WTF::fastFree((WTF *)v47, v10);
            }
LABEL_16:
            *v30 = *(_OWORD *)v15;
            v35 = v6 + 24 * v13;
            v36 = *(_QWORD *)(v35 + 16);
            *(_QWORD *)(v35 + 16) = 0;
            *v33 = v36;
            v37 = *(_QWORD *)(v35 + 16);
            *(_QWORD *)(v35 + 16) = 0;
            if (!v37)
            {
LABEL_17:
              if (v15 == a3)
                v11 = v30;
LABEL_19:
              v14 = v68;
              goto LABEL_20;
            }
            v53 = *(_QWORD *)(v37 + 8);
            if (__ldaxr((unsigned __int8 *)v53))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v53))
            {
LABEL_44:
              v55 = *(_QWORD *)(v53 + 8);
              v56 = v55 - 1;
              *(_QWORD *)(v53 + 8) = v55 - 1;
              if (v55 == 1)
              {
                v67 = *(_QWORD *)(v53 + 24);
                v61 = *(_QWORD *)(v53 + 16);
                *(_QWORD *)(v53 + 24) = 0;
                v57 = v61 != 0;
              }
              else
              {
                v67 = 0;
                v57 = 1;
              }
              v65 = v57;
              v58 = __ldxr((unsigned __int8 *)v53);
              if (v58 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v53))
                {
LABEL_58:
                  if (!v56)
                  {
                    if (v67)
                      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
                    if (!v65)
                      WTF::fastFree((WTF *)v53, v10);
                  }
                  goto LABEL_17;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v53);
              goto LABEL_58;
            }
            MEMORY[0x19AEA534C](v53);
            goto LABEL_44;
          }
        }
        else
        {
          __clrex();
        }
        v59 = v50;
        WTF::Lock::unlockSlow((WTF::Lock *)v47);
        v50 = v59;
        goto LABEL_51;
      }
      MEMORY[0x19AEA534C](v47);
      goto LABEL_36;
    }
    v38 = v6 + 24 * v13;
    v39 = *(_QWORD *)(v38 + 16);
    *(_QWORD *)(v38 + 16) = 0;
    if (!v39)
      goto LABEL_20;
    v68 = v14;
    v40 = *(_QWORD *)(v39 + 8);
    if (__ldaxr((unsigned __int8 *)v40))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v40))
    {
LABEL_26:
      v42 = *(_QWORD *)(v40 + 8);
      v43 = v42 - 1;
      *(_QWORD *)(v40 + 8) = v42 - 1;
      if (v42 == 1)
      {
        v62 = *(_QWORD *)(v40 + 16);
        v44 = *(_QWORD *)(v40 + 24);
        *(_QWORD *)(v40 + 24) = 0;
        v45 = v62 != 0;
      }
      else
      {
        v44 = 0;
        v45 = 1;
      }
      v46 = __ldxr((unsigned __int8 *)v40);
      if (v46 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v40))
        {
LABEL_69:
          if (!v43)
          {
            if (v44)
              (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
            if (!v45)
              WTF::fastFree((WTF *)v40, v10);
          }
          goto LABEL_19;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v40);
      goto LABEL_69;
    }
    MEMORY[0x19AEA534C](v40);
    goto LABEL_26;
  }
  v11 = 0;
  result = 0;
  if (v6)
  {
LABEL_31:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::ScrollingThread::singleton(void)::$_0 &&>>()
{
  return WTF::RunLoop::create();
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScrollingThread::dispatchBarrier(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34043A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScrollingThread::dispatchBarrier(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34043A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScrollingThread::dispatchBarrier(WTF::Function<void ()(void)> &&)::$_0,void>::call()
{
  return WTF::callOnMainThread();
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;

  v2 = (uint64_t *)result;
  *(_OWORD *)a2 = xmmword_1968C18F0;
  v3 = a2[2];
  a2[2] = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v17 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v17 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    result = WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  ++*(_DWORD *)(*v2 - 16);
  v11 = *v2;
  if (*v2)
    v12 = *(_DWORD *)(v11 - 12) - 1;
  else
    v12 = -1;
  *(_DWORD *)(v11 - 12) = v12;
  v13 = *v2;
  if (*v2)
  {
    v14 = 6 * *(_DWORD *)(v13 - 12);
    v15 = *(_DWORD *)(v13 - 4);
    if (v14 < v15 && v15 >= 9)
      return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v2, v15 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v64;
  uint64_t v65;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v65 = v4;
    while (1)
    {
      v12 = (unint64_t *)(v4 + 24 * v9);
      v13 = v12[1];
      if (v13 == -1)
        goto LABEL_69;
      v14 = *v12;
      if (*(_OWORD *)v12 != 0)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v21 = v11;
        v64 = v10;
        v22 = 0;
        v23 = (v14 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v14 - 1640531527) << 16) ^ ((unsigned __int16)v14 - 1640531527);
        v24 = (v14 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v14) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v14) + (v23 >> 11));
        v25 = (v13 >> 5) & 0x7FFF800 ^ ((v24 + (v24 >> 11) + (unsigned __int16)v13) << 16) ^ (v24 + (v24 >> 11) + (unsigned __int16)v13);
        v26 = (v13 >> 37) & 0x7FFF800 ^ ((v25 + WORD2(v13) + (v25 >> 11)) << 16) ^ (v25 + WORD2(v13) + (v25 >> 11));
        v27 = (v26 + (v26 >> 11)) ^ (8 * (v26 + (v26 >> 11)));
        v28 = (v27 + (v27 >> 5)) ^ (4 * (v27 + (v27 >> 5)));
        v29 = (v28 + (v28 >> 15)) ^ ((v28 + (v28 >> 15)) << 10);
        if (v29)
          v30 = v29;
        else
          v30 = 0x800000;
        do
        {
          v31 = v30 & v16;
          v32 = (_OWORD *)(v15 + 24 * (v30 & v16));
          v30 = ++v22 + (v30 & v16);
        }
        while (*v32 != 0);
        v33 = v15 + 24 * v31;
        v36 = *(_QWORD *)(v33 + 16);
        v35 = (_QWORD *)(v33 + 16);
        v34 = v36;
        *v35 = 0;
        if (!v36)
          goto LABEL_35;
        v37 = *(_QWORD *)(v34 + 8);
        if (__ldaxr((unsigned __int8 *)v37))
        {
          __clrex();
          goto LABEL_22;
        }
        if (__stxr(1u, (unsigned __int8 *)v37))
LABEL_22:
          MEMORY[0x19AEA534C](v37);
        v39 = *(_QWORD *)(v37 + 8);
        v40 = v39 - 1;
        *(_QWORD *)(v37 + 8) = v39 - 1;
        if (v39 == 1)
        {
          v59 = *(_QWORD *)(v37 + 16);
          v41 = *(_QWORD *)(v37 + 24);
          *(_QWORD *)(v37 + 24) = 0;
          v42 = v59 != 0;
        }
        else
        {
          v41 = 0;
          v42 = 1;
        }
        v43 = __ldxr((unsigned __int8 *)v37);
        if (v43 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v37))
          {
            if (!v40)
            {
LABEL_31:
              if (v41)
                (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
              if (!v42)
                WTF::fastFree((WTF *)v37, v8);
            }
LABEL_35:
            *v32 = *(_OWORD *)v12;
            v44 = v65 + 24 * v9;
            v45 = *(_QWORD *)(v44 + 16);
            *(_QWORD *)(v44 + 16) = 0;
            *v35 = v45;
            v46 = *(_QWORD *)(v44 + 16);
            *(_QWORD *)(v44 + 16) = 0;
            v11 = v21;
            if (!v46)
              goto LABEL_52;
            v47 = *(_QWORD *)(v46 + 8);
            if (__ldaxr((unsigned __int8 *)v47))
            {
              __clrex();
              goto LABEL_39;
            }
            if (__stxr(1u, (unsigned __int8 *)v47))
LABEL_39:
              MEMORY[0x19AEA534C](v47);
            v49 = *(_QWORD *)(v47 + 8);
            v50 = v49 - 1;
            *(_QWORD *)(v47 + 8) = v49 - 1;
            if (v49 == 1)
            {
              v60 = *(_QWORD *)(v47 + 16);
              v51 = *(_QWORD *)(v47 + 24);
              *(_QWORD *)(v47 + 24) = 0;
              v52 = v60 != 0;
            }
            else
            {
              v51 = 0;
              v52 = 1;
            }
            v53 = __ldxr((unsigned __int8 *)v47);
            if (v53 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v47))
              {
                if (!v50)
                {
LABEL_48:
                  if (v51)
                    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
                  if (!v52)
                    WTF::fastFree((WTF *)v47, v8);
                }
LABEL_52:
                v10 = v64;
                v4 = v65;
                if (v12 == a3)
                  v10 = v32;
                goto LABEL_69;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v47);
            if (!v50)
              goto LABEL_48;
            goto LABEL_52;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v37);
        if (!v40)
          goto LABEL_31;
        goto LABEL_35;
      }
      v17 = v4 + 24 * v9;
      v18 = *(_QWORD *)(v17 + 16);
      *(_QWORD *)(v17 + 16) = 0;
      if (!v18)
        goto LABEL_69;
      v19 = *(_QWORD *)(v18 + 8);
      if (__ldaxr((unsigned __int8 *)v19))
        break;
      if (__stxr(1u, (unsigned __int8 *)v19))
        goto LABEL_56;
LABEL_57:
      v54 = *(_QWORD *)(v19 + 8);
      v55 = v54 - 1;
      *(_QWORD *)(v19 + 8) = v54 - 1;
      if (v54 == 1)
      {
        v61 = *(_QWORD *)(v19 + 16);
        v56 = *(_QWORD *)(v19 + 24);
        *(_QWORD *)(v19 + 24) = 0;
        v57 = v61 != 0;
      }
      else
      {
        v56 = 0;
        v57 = 1;
      }
      v58 = __ldxr((unsigned __int8 *)v19);
      if (v58 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v19))
        {
          if (!v55)
            goto LABEL_65;
          goto LABEL_69;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      if (!v55)
      {
LABEL_65:
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
        if (!v57)
          WTF::fastFree((WTF *)v19, v8);
      }
LABEL_69:
      if (++v9 == v11)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    __clrex();
LABEL_56:
    MEMORY[0x19AEA534C](v19);
    goto LABEL_57;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *result, _OWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  uint64_t v9;
  void *v10;
  _QWORD *v11;

  v2 = result;
  *a2 = xmmword_1968C18F0;
  ++*(_DWORD *)(*result - 16);
  v3 = *result;
  if (*result)
    v4 = *(_DWORD *)(v3 - 12) - 1;
  else
    v4 = -1;
  *(_DWORD *)(v3 - 12) = v4;
  v5 = (_QWORD *)*result;
  if (*result)
  {
    v6 = *((_DWORD *)v5 - 3);
    v7 = *((unsigned int *)v5 - 1);
    if (6 * v6 < v7 && v7 >= 9)
    {
      v9 = WTF::fastZeroedMalloc((WTF *)(16 * (v7 >> 1) + 16));
      *v2 = v9 + 16;
      *(_DWORD *)(v9 + 12) = v7 >> 1;
      *(_DWORD *)(*v2 - 8) = (v7 >> 1) - 1;
      *(_DWORD *)(*v2 - 16) = 0;
      *(_DWORD *)(*v2 - 12) = v6;
      v11 = v5;
      do
      {
        if (v11[1] != -1 && *(_OWORD *)v11 != 0)
          *(_OWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookupForReinsert(v2, v11) = *(_OWORD *)v11;
        v11 += 2;
        --v7;
      }
      while (v7);
      return (uint64_t *)WTF::fastFree((WTF *)(v5 - 2), v10);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = a2[1];
  v6 = (*a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a2 - 1640531527) << 16) ^ ((unsigned __int16)*a2
                                                                                            - 1640531527);
  v7 = v6 + (unsigned __int16)WORD2(*a2);
  v8 = (*a2 >> 37) & 0x7FFF800 ^ ((v7 + (v6 >> 11)) << 16) ^ (v7 + (v6 >> 11));
  v9 = (v5 >> 5) & 0x7FFF800 ^ ((v8 + (unsigned __int16)v5 + (v8 >> 11)) << 16) ^ (v8
                                                                                               + (unsigned __int16)v5
                                                                                               + (v8 >> 11));
  v10 = (v5 >> 37) & 0x7FFF800 ^ ((v9 + WORD2(v5) + (v9 >> 11)) << 16) ^ (v9 + WORD2(v5) + (v9 >> 11));
  v11 = (v10 + (v10 >> 11)) ^ (8 * (v10 + (v10 >> 11)));
  v12 = (v11 + (v11 >> 5)) ^ (4 * (v11 + (v11 >> 5)));
  v13 = (v12 + (v12 >> 15)) ^ ((v12 + (v12 >> 15)) << 10);
  if (v13)
    v14 = v13;
  else
    v14 = 0x800000;
  do
  {
    v15 = v14 & v3;
    v16 = (uint64_t *)(v2 + 16 * v15);
    v17 = *v16;
    v18 = v16[1];
    v14 = ++v4 + v15;
  }
  while (v17 | v18);
  return v2 + 16 * v15;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v8 = 0;
    v9 = v4;
    v52 = v4;
    while (1)
    {
      v10 = (uint64_t *)(v3 + 16 * v8);
      v11 = *v10;
      if (*v10 == -1)
        goto LABEL_65;
      if (v11)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = v21;
          v24 = *(_QWORD *)(v16 + 16 * v21);
          v21 = (v21 + v22++) & v17;
        }
        while (v24);
        v25 = (uint64_t *)(v16 + 16 * v23);
        v26 = v25[1];
        v25[1] = 0;
        if (!v26)
          goto LABEL_47;
        v27 = *(_QWORD *)(v26 + 8);
        if (__ldaxr((unsigned __int8 *)v27))
        {
          __clrex();
          goto LABEL_34;
        }
        if (__stxr(1u, (unsigned __int8 *)v27))
LABEL_34:
          MEMORY[0x19AEA534C](v27);
        v34 = *(_QWORD *)(v27 + 8);
        v35 = v34 - 1;
        *(_QWORD *)(v27 + 8) = v34 - 1;
        if (v34 == 1)
        {
          v50 = *(_QWORD *)(v27 + 16);
          v36 = *(_QWORD *)(v27 + 24);
          *(_QWORD *)(v27 + 24) = 0;
          v37 = v50 != 0;
        }
        else
        {
          v36 = 0;
          v37 = 1;
        }
        v38 = __ldxr((unsigned __int8 *)v27);
        if (v38 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v27))
          {
            if (!v35)
            {
LABEL_43:
              if (v36)
                (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
              if (!v37)
                WTF::fastFree((WTF *)v27, v7);
            }
LABEL_47:
            *v25 = *v10;
            v39 = v3 + 16 * v8;
            v40 = *(_QWORD *)(v39 + 8);
            *(_QWORD *)(v39 + 8) = 0;
            v25[1] = v40;
            v41 = *(_QWORD *)(v39 + 8);
            *(_QWORD *)(v39 + 8) = 0;
            if (!v41)
              goto LABEL_64;
            v42 = *(_QWORD *)(v41 + 8);
            if (__ldaxr((unsigned __int8 *)v42))
            {
              __clrex();
              goto LABEL_51;
            }
            if (__stxr(1u, (unsigned __int8 *)v42))
LABEL_51:
              MEMORY[0x19AEA534C](v42);
            v44 = *(_QWORD *)(v42 + 8);
            v45 = v44 - 1;
            *(_QWORD *)(v42 + 8) = v44 - 1;
            if (v44 == 1)
            {
              v51 = *(_QWORD *)(v42 + 16);
              v46 = *(_QWORD *)(v42 + 24);
              *(_QWORD *)(v42 + 24) = 0;
              v47 = v51 != 0;
            }
            else
            {
              v46 = 0;
              v47 = 1;
            }
            v48 = __ldxr((unsigned __int8 *)v42);
            if (v48 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v42))
              {
                if (!v45)
                {
LABEL_60:
                  if (v46)
                    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
                  if (!v47)
                    WTF::fastFree((WTF *)v42, v7);
                }
LABEL_64:
                v9 = v52;
                goto LABEL_65;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v42);
            if (!v45)
              goto LABEL_60;
            goto LABEL_64;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v27);
        if (!v35)
          goto LABEL_43;
        goto LABEL_47;
      }
      v12 = v3 + 16 * v8;
      v13 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (!v13)
        goto LABEL_65;
      v14 = *(_QWORD *)(v13 + 8);
      if (__ldaxr((unsigned __int8 *)v14))
        break;
      if (__stxr(1u, (unsigned __int8 *)v14))
        goto LABEL_20;
LABEL_21:
      v29 = *(_QWORD *)(v14 + 8);
      v30 = v29 - 1;
      *(_QWORD *)(v14 + 8) = v29 - 1;
      if (v29 == 1)
      {
        v49 = *(_QWORD *)(v14 + 16);
        v31 = *(_QWORD *)(v14 + 24);
        *(_QWORD *)(v14 + 24) = 0;
        v32 = v49 != 0;
      }
      else
      {
        v31 = 0;
        v32 = 1;
      }
      v33 = __ldxr((unsigned __int8 *)v14);
      if (v33 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v14))
        {
          if (!v30)
            goto LABEL_29;
          goto LABEL_65;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v14);
      if (!v30)
      {
LABEL_29:
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        if (!v32)
          WTF::fastFree((WTF *)v14, v7);
      }
LABEL_65:
      if (++v8 == v9)
        return WTF::fastFree((WTF *)(v3 - 16), v7);
    }
    __clrex();
LABEL_20:
    MEMORY[0x19AEA534C](v14);
    goto LABEL_21;
  }
  if (v3)
    return WTF::fastFree((WTF *)(v3 - 16), v7);
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::ScrollingStateTree ***v15;
  uint64_t v16;
  WebCore::ScrollingStateTree **v17;
  uint64_t v18;
  WebCore::ScrollingStateTree *v19;
  WTF *v20;
  uint64_t v21;
  int v22;
  WTF *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  WebCore::ScrollingStateTree ***v36;
  WebCore::ScrollingStateTree **v37;
  uint64_t v38;
  WebCore::ScrollingStateTree *v39;
  WTF *v40;
  WTF *v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  WebCore::ScrollingStateTree **v45;
  WebCore::ScrollingStateTree ***v46;
  int v47;
  uint64_t v48;
  WebCore::ScrollingStateTree **v49;
  uint64_t v50;
  WebCore::ScrollingStateTree *v51;
  WTF *v52;
  WTF *v53;
  uint64_t *result;
  uint64_t v55;
  uint64_t *v58;
  uint64_t v59;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v59 = v4;
    v55 = v5;
    do
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v58 = v10;
          v24 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
          v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
          v27 = v22 & ((v26 >> 31) ^ v26);
          v28 = 1;
          do
          {
            v29 = v27;
            v30 = (uint64_t *)(v21 + 24 * v27);
            v27 = (v27 + v28++) & v22;
          }
          while (*v30);
          v31 = v29;
          v32 = v21 + 24 * v29;
          v35 = *(_DWORD *)(v32 + 20);
          v34 = (_DWORD *)(v32 + 20);
          v33 = v35;
          v36 = (WebCore::ScrollingStateTree ***)(v34 - 3);
          if (v35)
          {
            v37 = *v36;
            v38 = 8 * v33;
            do
            {
              v39 = *v37;
              *v37 = 0;
              if (v39)
              {
                WebCore::ScrollingStateTree::~ScrollingStateTree(v39, v8);
                if (*(_DWORD *)v40)
                {
                  *((_OWORD *)v40 + 3) = 0u;
                  *((_OWORD *)v40 + 4) = 0u;
                  *((_OWORD *)v40 + 1) = 0u;
                  *((_OWORD *)v40 + 2) = 0u;
                  *(_OWORD *)v40 = 0u;
                }
                else
                {
                  WTF::fastFree(v40, v8);
                }
              }
              ++v37;
              v38 -= 8;
            }
            while (v38);
          }
          v41 = (WTF *)*v36;
          if (*v36)
          {
            *v36 = 0;
            *(_DWORD *)(v21 + 24 * v31 + 16) = 0;
            WTF::fastFree(v41, v8);
          }
          *v30 = *v12;
          v42 = v59 + 24 * v9;
          *v36 = 0;
          *(_QWORD *)(v34 - 1) = 0;
          v44 = *(_DWORD *)(v42 + 16);
          v43 = (_DWORD *)(v42 + 16);
          v46 = (WebCore::ScrollingStateTree ***)(v43 - 2);
          v45 = (WebCore::ScrollingStateTree **)*((_QWORD *)v43 - 1);
          *((_QWORD *)v43 - 1) = 0;
          *v36 = v45;
          *v43 = 0;
          *(_DWORD *)(v21 + 24 * v31 + 16) = v44;
          v47 = v43[1];
          v43[1] = 0;
          *v34 = v47;
          v48 = v43[1];
          v10 = v58;
          if ((_DWORD)v48)
          {
            v49 = *v46;
            v50 = 8 * v48;
            do
            {
              v51 = *v49;
              *v49 = 0;
              if (v51)
              {
                WebCore::ScrollingStateTree::~ScrollingStateTree(v51, v8);
                if (*(_DWORD *)v52)
                {
                  *((_OWORD *)v52 + 3) = 0u;
                  *((_OWORD *)v52 + 4) = 0u;
                  *((_OWORD *)v52 + 1) = 0u;
                  *((_OWORD *)v52 + 2) = 0u;
                  *(_OWORD *)v52 = 0u;
                }
                else
                {
                  WTF::fastFree(v52, v8);
                }
              }
              ++v49;
              v50 -= 8;
            }
            while (v50);
          }
          v53 = (WTF *)*v46;
          if (*v46)
          {
            *v46 = 0;
            *v43 = 0;
            WTF::fastFree(v53, v8);
          }
          v11 = v55;
          if (v12 == a3)
            v10 = v30;
          v4 = v59;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v15 = (WebCore::ScrollingStateTree ***)(v14 + 8);
          v16 = *(unsigned int *)(v14 + 20);
          if ((_DWORD)v16)
          {
            v17 = *v15;
            v18 = 8 * v16;
            do
            {
              v19 = *v17;
              *v17 = 0;
              if (v19)
              {
                WebCore::ScrollingStateTree::~ScrollingStateTree(v19, v8);
                if (*(_DWORD *)v20)
                {
                  *((_OWORD *)v20 + 3) = 0u;
                  *((_OWORD *)v20 + 4) = 0u;
                  *((_OWORD *)v20 + 1) = 0u;
                  *((_OWORD *)v20 + 2) = 0u;
                  *(_OWORD *)v20 = 0u;
                }
                else
                {
                  WTF::fastFree(v20, v8);
                }
              }
              ++v17;
              v18 -= 8;
            }
            while (v18);
          }
          v23 = (WTF *)*v15;
          if (*v15)
          {
            *v15 = 0;
            *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
            WTF::fastFree(v23, v8);
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)((32 * a2) | 0x10));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = v6;
    do
    {
      if (*(_QWORD *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          v18 = *(WTF **)(v13 + 16);
          if (v18)
          {
            *(_QWORD *)(v13 + 16) = 0;
            *(_DWORD *)(v13 + 24) = 0;
            WTF::fastFree(v18, v10);
          }
        }
        else
        {
          v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookupForReinsert(a1, (_QWORD *)v13);
          v15 = (WTF *)*((_QWORD *)v14 + 2);
          if (v15)
          {
            *((_QWORD *)v14 + 2) = 0;
            *((_DWORD *)v14 + 6) = 0;
            WTF::fastFree(v15, v10);
          }
          *v14 = *(_OWORD *)v13;
          *((_QWORD *)v14 + 2) = 0;
          *((_QWORD *)v14 + 3) = 0;
          v16 = *(_QWORD *)(v13 + 16);
          *(_QWORD *)(v13 + 16) = 0;
          *((_QWORD *)v14 + 2) = v16;
          LODWORD(v16) = *(_DWORD *)(v13 + 24);
          *(_DWORD *)(v13 + 24) = 0;
          *((_DWORD *)v14 + 6) = v16;
          LODWORD(v16) = *(_DWORD *)(v13 + 28);
          *(_DWORD *)(v13 + 28) = 0;
          *((_DWORD *)v14 + 7) = v16;
          v17 = *(WTF **)(v13 + 16);
          if (v17)
          {
            *(_QWORD *)(v13 + 16) = 0;
            *(_DWORD *)(v13 + 24) = 0;
            WTF::fastFree(v17, v10);
          }
          if (v13 == a3)
            v11 = v14;
        }
      }
      v13 += 32;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _OWORD *result;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = a2[1];
  v6 = (*a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a2 - 1640531527) << 16) ^ ((unsigned __int16)*a2
                                                                                            - 1640531527);
  v7 = v6 + (unsigned __int16)WORD2(*a2);
  v8 = (*a2 >> 37) & 0x7FFF800 ^ ((v7 + (v6 >> 11)) << 16) ^ (v7 + (v6 >> 11));
  v9 = (v5 >> 5) & 0x7FFF800 ^ ((v8 + (unsigned __int16)v5 + (v8 >> 11)) << 16) ^ (v8
                                                                                               + (unsigned __int16)v5
                                                                                               + (v8 >> 11));
  v10 = (v5 >> 37) & 0x7FFF800 ^ ((v9 + WORD2(v5) + (v9 >> 11)) << 16) ^ (v9 + WORD2(v5) + (v9 >> 11));
  v11 = (v10 + (v10 >> 11)) ^ (8 * (v10 + (v10 >> 11)));
  v12 = (v11 + (v11 >> 5)) ^ (4 * (v11 + (v11 >> 5)));
  v13 = (v12 + (v12 >> 15)) ^ ((v12 + (v12 >> 15)) << 10);
  if (!v13)
    v13 = 0x800000;
  do
  {
    v14 = v13 & v3;
    result = (_OWORD *)(v2 + 32 * v14);
    v13 = ++v4 + v14;
  }
  while (*result != 0);
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>,WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  _QWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    while (1)
    {
      v12 = (uint64_t *)(v4 + 8 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 8 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (_QWORD *)(v14 + 8 * v21);
          *v23 = 0;
          v24 = *v12;
          *v12 = 0;
          *v23 = v24;
          v25 = *v12;
          *v12 = 0;
          if (!v25)
            goto LABEL_31;
          v26 = *(_QWORD *)(v25 + 8);
          if (__ldaxr((unsigned __int8 *)v26))
          {
            __clrex();
            goto LABEL_18;
          }
          if (__stxr(1u, (unsigned __int8 *)v26))
LABEL_18:
            MEMORY[0x19AEA534C](v26);
          v28 = *(_QWORD *)(v26 + 8);
          v29 = v28 - 1;
          *(_QWORD *)(v26 + 8) = v28 - 1;
          if (v28 == 1)
          {
            v33 = *(_QWORD *)(v26 + 16);
            v30 = *(_QWORD *)(v26 + 24);
            *(_QWORD *)(v26 + 24) = 0;
            v31 = v33 != 0;
          }
          else
          {
            v30 = 0;
            v31 = 1;
          }
          v32 = __ldxr((unsigned __int8 *)v26);
          if (v32 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v26))
            {
              if (!v29)
              {
LABEL_27:
                if (v30)
                  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
                if (!v31)
                  WTF::fastFree((WTF *)v26, v8);
              }
LABEL_31:
              if (v12 == a3)
                v10 = v23;
              goto LABEL_33;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v26);
          if (!v29)
            goto LABEL_27;
          goto LABEL_31;
        }
        *v12 = 0;
      }
LABEL_33:
      if (++v9 == v11)
        goto LABEL_37;
    }
  }
  v10 = 0;
  result = 0;
  if (v4)
  {
LABEL_37:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v10;
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  int v30;

  v3 = a2;
  v4 = result;
  v6 = *result;
  if (!*result)
  {
    result = (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(result, 0);
    v3 = a2;
    v6 = *v4;
  }
  v7 = *(_DWORD *)(v6 - 8);
  v8 = v3[1];
  v9 = (*v3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*v3 - 1640531527) << 16) ^ ((unsigned __int16)*v3
                                                                                            - 1640531527);
  v10 = v9 + (unsigned __int16)WORD2(*v3) + (v9 >> 11);
  v11 = (*v3 >> 37) & 0x7FFF800 ^ (v10 << 16) ^ v10;
  v12 = (v8 >> 5) & 0x7FFF800 ^ ((v11 + (unsigned __int16)v8 + (v11 >> 11)) << 16) ^ (v11
                                                                                                  + (unsigned __int16)v8
                                                                                                  + (v11 >> 11));
  v13 = (v8 >> 37) & 0x7FFF800 ^ ((v12 + WORD2(v8) + (v12 >> 11)) << 16) ^ (v12 + WORD2(v8) + (v12 >> 11));
  v14 = (v13 + (v13 >> 11)) ^ (8 * (v13 + (v13 >> 11)));
  v15 = (v14 + (v14 >> 5)) ^ (4 * (v14 + (v14 >> 5)));
  v16 = (v15 + (v15 >> 15)) ^ ((v15 + (v15 >> 15)) << 10);
  if (!v16)
    v16 = 0x800000;
  v17 = v16 & v7;
  v18 = (uint64_t *)(v6 + 16 * (v16 & v7));
  v20 = *v18;
  v19 = v18[1];
  if (*(_OWORD *)v18 != 0)
  {
    v29 = 0;
    v30 = 1;
    do
    {
      if (v20 == *v3 && v19 == v8)
      {
        v28 = 0;
        v27 = v6 + 16 * *(unsigned int *)(v6 - 4);
        goto LABEL_13;
      }
      if (v19 == -1)
        v29 = v18;
      v17 = (v17 + v30) & v7;
      v18 = (uint64_t *)(v6 + 16 * v17);
      v20 = *v18;
      v19 = v18[1];
      ++v30;
      result = (uint64_t *)(*v18 | v19);
    }
    while (result);
    if (v29)
    {
      *v29 = 0;
      v29[1] = 0;
      --*(_DWORD *)(*v4 - 16);
      v18 = v29;
    }
  }
  *(_OWORD *)v18 = *(_OWORD *)v3;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v4;
  if (*v4)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_12;
LABEL_15:
    result = (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v4, v18);
    v18 = result;
    v23 = *v4;
    if (*v4)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
    goto LABEL_12;
  }
  if (3 * v26 <= 4 * v25)
    goto LABEL_15;
LABEL_12:
  v27 = v23 + 16 * v26;
  v28 = 1;
LABEL_13:
  *(_QWORD *)a3 = v18;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v28;
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  _OWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _OWORD *v13;
  _OWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= 2 * v5);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v10 = 0;
  if (v5)
  {
    v11 = v5;
    v12 = (_QWORD *)v4;
    do
    {
      if (v12[1] != -1 && *(_OWORD *)v12 != 0)
      {
        v13 = (_OWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookupForReinsert(a1, v12);
        *v13 = *(_OWORD *)v12;
        if (v12 == a2)
          v10 = v13;
      }
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  else
  {
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v10;
}

uint64_t WTF::GenericHashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>::assignToEmpty<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WebCore::ScrollingTreeNode*>(uint64_t result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  v3 = (uint64_t *)result;
  if (a2)
  {
    v4 = a2[1];
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_6;
    }
    result = MEMORY[0x19AEA534C](v4);
LABEL_6:
    ++*(_QWORD *)(v4 + 8);
    v6 = __ldxr((unsigned __int8 *)v4);
    if (v6 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
LABEL_11:
  v7 = *v3;
  *v3 = (uint64_t)a2;
  if (!v7)
    return result;
  v8 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_16;
  }
  result = MEMORY[0x19AEA534C](v8);
LABEL_16:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v15 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v15 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 != 1)
  {
    __clrex();
LABEL_23:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return result;
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
    goto LABEL_23;
  if (v11)
    return result;
LABEL_24:
  if (v12)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (!v13)
    return WTF::fastFree((WTF *)v8, a2);
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unint64_t *)(v6 + 24 * v13);
      v16 = v15[1];
      if (v16 != -1)
      {
        v17 = *v15;
        if (*(_OWORD *)v15 == 0)
        {
          v20 = *(_QWORD *)(v6 + 24 * v13 + 16);
          if (v20)
            WTF::fastFree((WTF *)(v20 - 16), v10);
        }
        else
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v21 = 0;
          v22 = (v17 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v17 - 1640531527) << 16) ^ ((unsigned __int16)v17 - 1640531527);
          v23 = (v17 >> 37) & 0x7FFF800 ^ ((v22 + WORD2(v17) + (v22 >> 11)) << 16) ^ (v22 + WORD2(v17) + (v22 >> 11));
          v24 = (v16 >> 5) & 0x7FFF800 ^ ((v23 + (v23 >> 11) + (unsigned __int16)v16) << 16) ^ (v23 + (v23 >> 11) + (unsigned __int16)v16);
          v25 = (v16 >> 37) & 0x7FFF800 ^ ((v24 + WORD2(v16) + (v24 >> 11)) << 16) ^ (v24 + WORD2(v16) + (v24 >> 11));
          v26 = (v25 + (v25 >> 11)) ^ (8 * (v25 + (v25 >> 11)));
          v27 = (v26 + (v26 >> 5)) ^ (4 * (v26 + (v26 >> 5)));
          v28 = (v27 + (v27 >> 15)) ^ ((v27 + (v27 >> 15)) << 10);
          if (v28)
            v29 = v28;
          else
            v29 = 0x800000;
          do
          {
            v30 = v29 & v19;
            v31 = (_OWORD *)(v18 + 24 * (v29 & v19));
            v29 = ++v21 + (v29 & v19);
          }
          while (*v31 != 0);
          v32 = v18 + 24 * v30;
          v35 = *(_QWORD *)(v32 + 16);
          v34 = (_QWORD *)(v32 + 16);
          v33 = v35;
          if (v35)
            WTF::fastFree((WTF *)(v33 - 16), v10);
          *v31 = *(_OWORD *)v15;
          v36 = v6 + 24 * v13;
          *v34 = 0;
          v37 = *(_QWORD *)(v36 + 16);
          *(_QWORD *)(v36 + 16) = 0;
          *v34 = v37;
          v38 = *(_QWORD *)(v36 + 16);
          if (v38)
            WTF::fastFree((WTF *)(v38 - 16), v10);
          if (v15 == a3)
            v14 = v31;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

unint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::ScrollingStateTree **v13;
  uint64_t v14;
  WebCore::ScrollingStateTree *v15;
  WTF *v16;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          v10 = *(_QWORD *)v9;
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v7 + 1) = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 4);
          *((_DWORD *)v9 + 4) = 0;
          v7[4] = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 5);
          *((_DWORD *)v9 + 5) = 0;
          v7[5] = v11;
          v12 = *((unsigned int *)v9 + 5);
          if ((_DWORD)v12)
          {
            v13 = (WebCore::ScrollingStateTree **)*((_QWORD *)v9 + 1);
            v14 = 8 * v12;
            do
            {
              v15 = *v13;
              *v13 = 0;
              if (v15)
              {
                WebCore::ScrollingStateTree::~ScrollingStateTree(v15, v6);
                if (*(_DWORD *)v16)
                {
                  *((_OWORD *)v16 + 3) = 0u;
                  *((_OWORD *)v16 + 4) = 0u;
                  *((_OWORD *)v16 + 1) = 0u;
                  *((_OWORD *)v16 + 2) = 0u;
                  *(_OWORD *)v16 = 0u;
                }
                else
                {
                  WTF::fastFree(v16, v6);
                }
              }
              ++v13;
              v14 -= 8;
            }
            while (v14);
          }
          result = (unsigned int *)*((_QWORD *)v9 + 1);
          if (result)
          {
            *((_QWORD *)v9 + 1) = 0;
            *((_DWORD *)v9 + 4) = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v7 += 6;
          v9 = (WTF *)((char *)v9 + 24);
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t *result;
  uint64_t v16;
  uint64_t v17;
  int v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = a2[1];
  v6 = (*a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a2 - 1640531527) << 16) ^ ((unsigned __int16)*a2
                                                                                            - 1640531527);
  v7 = v6 + (unsigned __int16)WORD2(*a2) + (v6 >> 11);
  v8 = ((unint64_t)*a2 >> 37) & 0x7FFF800 ^ (v7 << 16) ^ v7;
  v9 = (v5 >> 5) & 0x7FFF800 ^ ((v8 + (unsigned __int16)v5 + (v8 >> 11)) << 16) ^ (v8
                                                                                               + (unsigned __int16)v5
                                                                                               + (v8 >> 11));
  v10 = (v5 >> 37) & 0x7FFF800 ^ ((v9 + WORD2(v5) + (v9 >> 11)) << 16) ^ (v9 + WORD2(v5) + (v9 >> 11));
  v11 = (v10 + (v10 >> 11)) ^ (8 * (v10 + (v10 >> 11)));
  v12 = (v11 + (v11 >> 5)) ^ (4 * (v11 + (v11 >> 5)));
  v13 = (v12 + (v12 >> 15)) ^ ((v12 + (v12 >> 15)) << 10);
  if (!v13)
    v13 = 0x800000;
  v14 = v13 & v3;
  result = (uint64_t *)(v2 + 24 * (v13 & v3));
  v16 = *result;
  v17 = result[1];
  if (*result != v4 || v17 != v5)
  {
    v19 = 1;
    while (v16 | v17)
    {
      v14 = (v14 + v19) & v3;
      result = (uint64_t *)(v2 + 24 * v14);
      v16 = *result;
      v17 = result[1];
      ++v19;
      if (*result == v4 && v17 == v5)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t *result;
  uint64_t v16;
  uint64_t v17;
  int v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = a2[1];
  v6 = (*a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a2 - 1640531527) << 16) ^ ((unsigned __int16)*a2
                                                                                            - 1640531527);
  v7 = v6 + (unsigned __int16)WORD2(*a2) + (v6 >> 11);
  v8 = ((unint64_t)*a2 >> 37) & 0x7FFF800 ^ (v7 << 16) ^ v7;
  v9 = (v5 >> 5) & 0x7FFF800 ^ ((v8 + (unsigned __int16)v5 + (v8 >> 11)) << 16) ^ (v8
                                                                                               + (unsigned __int16)v5
                                                                                               + (v8 >> 11));
  v10 = (v5 >> 37) & 0x7FFF800 ^ ((v9 + WORD2(v5) + (v9 >> 11)) << 16) ^ (v9 + WORD2(v5) + (v9 >> 11));
  v11 = (v10 + (v10 >> 11)) ^ (8 * (v10 + (v10 >> 11)));
  v12 = (v11 + (v11 >> 5)) ^ (4 * (v11 + (v11 >> 5)));
  v13 = (v12 + (v12 >> 15)) ^ ((v12 + (v12 >> 15)) << 10);
  if (!v13)
    v13 = 0x800000;
  v14 = v13 & v3;
  result = (uint64_t *)(v2 + 32 * v14);
  v16 = *result;
  v17 = result[1];
  if (*result != v4 || v17 != v5)
  {
    v19 = 1;
    while (v16 | v17)
    {
      v14 = ((_DWORD)v14 + v19) & v3;
      result = (uint64_t *)(v2 + 32 * v14);
      v16 = *result;
      v17 = result[1];
      ++v19;
      if (*result == v4 && v17 == v5)
        return result;
    }
    return 0;
  }
  return result;
}

WTF::MonotonicTime *WebCore::ScrollingTreeLatchingController::nodeDidHandleEvent(WTF::MonotonicTime *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6)
{
  uint64_t v10;
  int v12;
  BOOL v13;
  int v14;
  float v15;
  float v16;
  uint64_t v17;
  int v18;

  if (a6)
  {
    v10 = (uint64_t)this;
    if (__ldaxr((unsigned __int8 *)this))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)this))
    {
LABEL_6:
      v12 = *(unsigned __int8 *)(a5 + 92);
      v13 = v12 == 1 || v12 == 4;
      if ((v13
         || (v14 = *(unsigned __int8 *)(a5 + 93), v14 == 1)
         || v14 == 4
         || v12 == 8 && !*(_BYTE *)(a5 + 93)
         || !*(_BYTE *)(a5 + 92) && v14 == 8)
        && *(_BYTE *)(v10 + 32)
        && *(_QWORD *)(v10 + 8) == a2
        && *(_QWORD *)(v10 + 16) == a3)
      {
        if (!*(_BYTE *)(a5 + 92) && *(_BYTE *)(a5 + 93) == 8)
        {
          *(_QWORD *)(v10 + 48) = 0;
          goto LABEL_44;
        }
      }
      else
      {
        v16 = *(float *)(a5 + 68);
        v15 = *(float *)(a5 + 72);
        if (v16 == 0.0)
          goto LABEL_27;
        if (v16 < 0.0)
          v16 = -v16;
        if (v16 < 0.00000011921)
        {
LABEL_27:
          if (v15 == 0.0)
            goto LABEL_44;
          if (v15 < 0.0)
            v15 = -v15;
          if (v15 < 0.00000011921)
            goto LABEL_44;
        }
        if (v12 != 1
          && v12 != 32
          && (v12 != 4 || !*(_BYTE *)(v10 + 41) || (*(_BYTE *)(v10 + 40) & 2) == 0 || (a4 & 1) == 0))
        {
LABEL_44:
          v18 = __ldxr((unsigned __int8 *)v10);
          if (v18 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v10))
              return this;
          }
          else
          {
            __clrex();
          }
          return (WTF::MonotonicTime *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
        }
        if (!*(_BYTE *)(v10 + 41))
          *(_BYTE *)(v10 + 41) = 1;
        *(_BYTE *)(v10 + 40) = a4;
        if (!*(_BYTE *)(v10 + 32))
          *(_BYTE *)(v10 + 32) = 1;
        *(_QWORD *)(v10 + 8) = a2;
        *(_QWORD *)(v10 + 16) = a3;
        *(_BYTE *)(v10 + 24) = a4;
      }
      this = (WTF::MonotonicTime *)WTF::MonotonicTime::now(this);
      *(_QWORD *)(v10 + 48) = v17;
      goto LABEL_44;
    }
    this = (WTF::MonotonicTime *)MEMORY[0x19AEA534C](this);
    goto LABEL_6;
  }
  return this;
}

char *WebCore::ScrollingTreeNode::appendChild(uint64_t a1, char *a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  char *result;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 343))
  {
    __break(0xC471u);
    JUMPOUT(0x1960B0B50);
  }
  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_6:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    v10 = 0;
    goto LABEL_23;
  }
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_16:
  if (*(_QWORD *)(v8 + 24))
  {
    ++*(_QWORD *)(v8 + 16);
    v10 = v8;
  }
  else
  {
    v10 = 0;
  }
  v11 = __ldxr((unsigned __int8 *)v8);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_23:
  v12 = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(v4 + 80) = v10;
  if (!v12)
    goto LABEL_36;
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_28;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_28:
  v14 = *(_QWORD *)(v12 + 16) - 1;
  *(_QWORD *)(v12 + 16) = v14;
  if (!v14)
  {
    v15 = *(_QWORD *)(v12 + 8);
    v16 = __ldxr((unsigned __int8 *)v12);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
        if (v15)
          goto LABEL_36;
LABEL_35:
        WTF::fastFree((WTF *)v12, a2);
        goto LABEL_36;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      goto LABEL_36;
    goto LABEL_35;
  }
  v28 = __ldxr((unsigned __int8 *)v12);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_60;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
LABEL_60:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_36:
  *(_QWORD *)(v4 + 88) = a1;
  v17 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_40;
  }
  MEMORY[0x19AEA534C](v17);
LABEL_40:
  v19 = *(_QWORD *)(v17 + 8);
  v20 = v19 - 1;
  *(_QWORD *)(v17 + 8) = v19 - 1;
  if (v19 == 1)
  {
    v29 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    *(_QWORD *)(v17 + 24) = 0;
    v22 = v29 != 0;
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  v23 = __ldxr((unsigned __int8 *)v17);
  if (v23 != 1)
  {
    __clrex();
LABEL_47:
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      goto LABEL_52;
    goto LABEL_48;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
    goto LABEL_47;
  if (v20)
    goto LABEL_52;
LABEL_48:
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (!v22)
    WTF::fastFree((WTF *)v17, a2);
LABEL_52:
  result = (char *)(a1 + 16);
  v25 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v25 == *(_DWORD *)(a1 + 24))
  {
    result = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)v2);
    v2 = result;
    v25 = *(unsigned int *)(a1 + 28);
    v26 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v25);
  }
  else
  {
    v26 = (_QWORD *)(*(_QWORD *)result + 8 * v25);
  }
  v27 = *(_QWORD *)v2;
  *(_QWORD *)v2 = 0;
  *v26 = v27;
  *(_DWORD *)(a1 + 28) = v25 + 1;
  return result;
}

unsigned int *WebCore::ScrollingTreeNode::removeChild(unsigned int *this, WebCore::ScrollingTreeNode *a2)
{
  _QWORD *v2;
  uint64_t v3;
  WebCore::ScrollingTreeNode **v5;
  WebCore::ScrollingTreeNode **v6;
  uint64_t v7;
  WebCore::ScrollingTreeNode **i;
  uint64_t v9;
  WebCore::ScrollingTreeNode *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;

  if (!*(_BYTE *)(*((_QWORD *)this + 4) + 343))
  {
    __break(0xC471u);
    JUMPOUT(0x1960B0CE0);
  }
  v2 = this;
  v3 = this[7];
  if ((_DWORD)v3)
  {
    v5 = (WebCore::ScrollingTreeNode **)*((_QWORD *)this + 2);
    v6 = v5 + 1;
    v7 = this[7];
    for (i = v5; *i != a2; ++i)
    {
      ++v6;
      if (!--v7)
      {
        v9 = 8 * v3;
        do
        {
          v10 = *v5++;
          this = (unsigned int *)WebCore::ScrollingTreeNode::removeChild(v10, a2);
          v9 -= 8;
        }
        while (v9);
        return this;
      }
    }
    *i = 0;
    v11 = *((_QWORD *)a2 + 1);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_13;
    }
    MEMORY[0x19AEA534C](v11);
LABEL_13:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v18 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v18 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
        if (!v14)
          goto LABEL_21;
        goto LABEL_25;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (!v14)
    {
LABEL_21:
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      if (!v16)
        WTF::fastFree((WTF *)v11, a2);
    }
LABEL_25:
    this = (unsigned int *)memmove(i, i + 1, v2[2] + 8 * *((unsigned int *)v2 + 7) - (_QWORD)v6);
    --*((_DWORD *)v2 + 7);
  }
  return this;
}

BOOL WebCore::ScrollingTreeNode::isRootNode(WebCore::ScrollingTreeNode *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 4) + 16) == (_QWORD)this;
}

uint64_t WebCore::ScrollingTreeNode::dumpProperties(int a1, WTF::TextStream *this, char a3)
{
  uint64_t result;

  if ((a3 & 2) != 0)
  {
    WTF::TextStream::startGroup(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::operator<<();
    return WTF::TextStream::endGroup(this);
  }
  return result;
}

uint64_t WebCore::ScrollingTreeNode::enclosingFrameNodeIncludingSelf@<X0>(uint64_t this@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;

  if (!this)
  {
LABEL_71:
    *a3 = 0;
    return this;
  }
  v4 = this;
  v5 = *(_QWORD *)(this + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  this = MEMORY[0x19AEA534C](v5);
LABEL_6:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_10:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  while (1)
  {
    v8 = v4;
    if (*(unsigned __int8 *)(v4 + 40) < 2u)
      break;
    v9 = *(_QWORD *)(v4 + 80);
    if (!v9)
    {
      v4 = 0;
      goto LABEL_26;
    }
    v4 = *(_QWORD *)(v4 + 88);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_18;
    }
    this = MEMORY[0x19AEA534C](v9);
LABEL_18:
    if (*(_QWORD *)(v9 + 24))
      ++*(_QWORD *)(v9 + 8);
    else
      v4 = 0;
    v11 = __ldxr((unsigned __int8 *)v9);
    if (v11 != 1)
    {
      __clrex();
LABEL_25:
      this = WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_26;
    }
    if (__stlxr(0, (unsigned __int8 *)v9))
      goto LABEL_25;
LABEL_26:
    v12 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v12))
    {
      goto LABEL_30;
    }
    this = MEMORY[0x19AEA534C](v12);
LABEL_30:
    v14 = *(_QWORD *)(v12 + 8);
    v15 = v14 - 1;
    *(_QWORD *)(v12 + 8) = v14 - 1;
    if (v14 == 1)
    {
      v19 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v19 != 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = __ldxr((unsigned __int8 *)v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
        if (!v15)
          goto LABEL_38;
        goto LABEL_42;
      }
    }
    else
    {
      __clrex();
    }
    this = WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (!v15)
    {
LABEL_38:
      if (v16)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      if (!v17)
        this = WTF::fastFree((WTF *)v12, a2);
    }
LABEL_42:
    if (!v4)
      goto LABEL_71;
  }
  v20 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
    goto LABEL_48;
  }
  if (__stxr(1u, (unsigned __int8 *)v20))
LABEL_48:
    this = MEMORY[0x19AEA534C](v20);
  ++*(_QWORD *)(v20 + 8);
  v22 = __ldxr((unsigned __int8 *)v20);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_53;
  }
  if (__stlxr(0, (unsigned __int8 *)v20))
LABEL_53:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v20);
  *a3 = v8;
  v23 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v23))
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stxr(1u, (unsigned __int8 *)v23))
LABEL_57:
    this = MEMORY[0x19AEA534C](v23);
  v25 = *(_QWORD *)(v23 + 8);
  v26 = v25 - 1;
  *(_QWORD *)(v23 + 8) = v25 - 1;
  if (v25 == 1)
  {
    v30 = *(_QWORD *)(v23 + 16);
    v27 = *(_QWORD *)(v23 + 24);
    *(_QWORD *)(v23 + 24) = 0;
    v28 = v30 != 0;
  }
  else
  {
    v27 = 0;
    v28 = 1;
  }
  v29 = __ldxr((unsigned __int8 *)v23);
  if (v29 != 1)
  {
    __clrex();
LABEL_65:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v23);
    if (!v26)
      goto LABEL_66;
    return this;
  }
  if (__stlxr(0, (unsigned __int8 *)v23))
    goto LABEL_65;
  if (!v26)
  {
LABEL_66:
    if (v27)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    if (!v28)
      return WTF::fastFree((WTF *)v23, a2);
  }
  return this;
}

uint64_t WebCore::ScrollingTreeNode::enclosingScrollingNodeIncludingSelf@<X0>(uint64_t this@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  uint64_t v34;

  if (!this)
  {
LABEL_75:
    *a3 = 0;
    return this;
  }
  v4 = this;
  v5 = *(_QWORD *)(this + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  this = MEMORY[0x19AEA534C](v5);
LABEL_6:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_10:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  while (1)
  {
    v8 = v4;
    v9 = *(unsigned __int8 *)(v4 + 40);
    v10 = v9 > 5;
    v11 = (1 << v9) & 0x2B;
    if (!v10 && v11 != 0)
      break;
    v13 = *(_QWORD *)(v4 + 80);
    if (!v13)
    {
      v4 = 0;
      goto LABEL_30;
    }
    v4 = *(_QWORD *)(v4 + 88);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_22;
    }
    this = MEMORY[0x19AEA534C](v13);
LABEL_22:
    if (*(_QWORD *)(v13 + 24))
      ++*(_QWORD *)(v13 + 8);
    else
      v4 = 0;
    v15 = __ldxr((unsigned __int8 *)v13);
    if (v15 != 1)
    {
      __clrex();
LABEL_29:
      this = WTF::Lock::unlockSlow((WTF::Lock *)v13);
      goto LABEL_30;
    }
    if (__stlxr(0, (unsigned __int8 *)v13))
      goto LABEL_29;
LABEL_30:
    v16 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
      goto LABEL_34;
    }
    this = MEMORY[0x19AEA534C](v16);
LABEL_34:
    v18 = *(_QWORD *)(v16 + 8);
    v19 = v18 - 1;
    *(_QWORD *)(v16 + 8) = v18 - 1;
    if (v18 == 1)
    {
      v23 = *(_QWORD *)(v16 + 16);
      v20 = *(_QWORD *)(v16 + 24);
      *(_QWORD *)(v16 + 24) = 0;
      v21 = v23 != 0;
    }
    else
    {
      v20 = 0;
      v21 = 1;
    }
    v22 = __ldxr((unsigned __int8 *)v16);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
        if (!v19)
          goto LABEL_42;
        goto LABEL_46;
      }
    }
    else
    {
      __clrex();
    }
    this = WTF::Lock::unlockSlow((WTF::Lock *)v16);
    if (!v19)
    {
LABEL_42:
      if (v20)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      if (!v21)
        this = WTF::fastFree((WTF *)v16, a2);
    }
LABEL_46:
    if (!v4)
      goto LABEL_75;
  }
  v24 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
    goto LABEL_52;
  }
  if (__stxr(1u, (unsigned __int8 *)v24))
LABEL_52:
    this = MEMORY[0x19AEA534C](v24);
  ++*(_QWORD *)(v24 + 8);
  v26 = __ldxr((unsigned __int8 *)v24);
  if (v26 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_57:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v24);
  *a3 = v8;
  v27 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
    goto LABEL_61;
  }
  if (__stxr(1u, (unsigned __int8 *)v27))
LABEL_61:
    this = MEMORY[0x19AEA534C](v27);
  v29 = *(_QWORD *)(v27 + 8);
  v30 = v29 - 1;
  *(_QWORD *)(v27 + 8) = v29 - 1;
  if (v29 == 1)
  {
    v34 = *(_QWORD *)(v27 + 16);
    v31 = *(_QWORD *)(v27 + 24);
    *(_QWORD *)(v27 + 24) = 0;
    v32 = v34 != 0;
  }
  else
  {
    v31 = 0;
    v32 = 1;
  }
  v33 = __ldxr((unsigned __int8 *)v27);
  if (v33 != 1)
  {
    __clrex();
LABEL_69:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v27);
    if (!v30)
      goto LABEL_70;
    return this;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
    goto LABEL_69;
  if (!v30)
  {
LABEL_70:
    if (v31)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    if (!v32)
      return WTF::fastFree((WTF *)v27, a2);
  }
  return this;
}

uint64_t WebCore::ScrollingTreeNode::dump(uint64_t a1, WTF::TextStream *a2, unsigned __int8 a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a3;
  result = (*(uint64_t (**)(uint64_t, WTF::TextStream *, _QWORD))(*(_QWORD *)a1 + 64))(a1, a2, a3);
  v7 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)(a1 + 16);
    v9 = 8 * v7;
    do
    {
      WTF::TextStream::startGroup(a2);
      v10 = *v8++;
      WebCore::ScrollingTreeNode::dump(v10, a2, v5);
      result = WTF::TextStream::endGroup(a2);
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

uint64_t WebCore::ScrollingTreeOverflowScrollProxyNode::ScrollingTreeOverflowScrollProxyNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = 6;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)a1 = off_1E3404450;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  return a1;
}

void WebCore::ScrollingTreeOverflowScrollProxyNode::~ScrollingTreeOverflowScrollProxyNode(WebCore::ScrollingTreeOverflowScrollProxyNode *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_1E34043F8;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v3)
    goto LABEL_14;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v8 = __ldxr((unsigned __int8 *)v3);
    if (v8 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
LABEL_14:
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

BOOL WebCore::ScrollingTreeOverflowScrollProxyNode::commitStateBeforeChildren(uint64_t this, const WebCore::ScrollingStateNode *a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  int v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  int i;
  unsigned int v51;
  WebCore::ScrollingTreeOverflowScrollProxyNode **v52;
  WebCore::ScrollingTreeOverflowScrollProxyNode *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v69;
  __int128 v70;

  v2 = *((unsigned __int8 *)a2 + 16);
  if (v2 != 6)
    return v2 == 6;
  if ((*((_BYTE *)a2 + 40) & 2) != 0)
  {
    v4 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(this + 96) = v4;
    if (!(_QWORD)v4)
      return v2 == 6;
  }
  else if (!*(_QWORD *)(this + 96))
  {
    return v2 == 6;
  }
  v5 = *(_QWORD *)(this + 32);
  v8 = *(_QWORD *)(v5 + 144);
  v7 = (uint64_t *)(v5 + 144);
  v6 = v8;
  if (v8
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v7, 8u, 0), (v6 = *v7) != 0))
  {
    v9 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_QWORD *)(this + 96);
  v11 = *(_QWORD *)(this + 104);
  v12 = (v10 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v10 - 1640531527) << 16) ^ ((unsigned __int16)v10
                                                                                             - 1640531527);
  v13 = (v10 >> 37) & 0x7FFF800 ^ ((v12 + WORD2(v10) + (v12 >> 11)) << 16) ^ (v12 + WORD2(v10) + (v12 >> 11));
  v14 = (v11 >> 5) & 0x7FFF800 ^ ((v13 + (unsigned __int16)v11 + (v13 >> 11)) << 16) ^ (v13 + (unsigned __int16)v11 + (v13 >> 11));
  v15 = (v11 >> 37) & 0x7FFF800 ^ ((v14 + WORD2(v11) + (v14 >> 11)) << 16) ^ (v14 + WORD2(v11) + (v14 >> 11));
  v16 = (v15 + (v15 >> 11)) ^ (8 * (v15 + (v15 >> 11)));
  v17 = (v16 + (v16 >> 5)) ^ (4 * (v16 + (v16 >> 5)));
  v18 = (v17 + (v17 >> 15)) ^ ((v17 + (v17 >> 15)) << 10);
  if (!v18)
    v18 = 0x800000;
  v19 = v18 & v9;
  v20 = (_OWORD *)(v6 + 32 * v19);
  v22 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  if (*v20 == 0)
  {
LABEL_20:
    *v20 = *(_OWORD *)(this + 96);
    v25 = (WTF *)*((_QWORD *)v20 + 2);
    if (v25)
    {
      *((_QWORD *)v20 + 2) = 0;
      *((_DWORD *)v20 + 6) = 0;
      WTF::fastFree(v25, a2);
    }
    *((_QWORD *)v20 + 2) = 0;
    *((_QWORD *)v20 + 3) = 0;
    v26 = *v7;
    if (*v7)
      v27 = *(_DWORD *)(v26 - 12) + 1;
    else
      v27 = 1;
    *(_DWORD *)(v26 - 12) = v27;
    v28 = *v7;
    if (*v7)
      v29 = *(_DWORD *)(v28 - 12);
    else
      v29 = 0;
    v30 = (*(_DWORD *)(v28 - 16) + v29);
    v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30)
        goto LABEL_35;
    }
    else
    {
      if (3 * v31 > 4 * v30)
        goto LABEL_35;
      if (!(_DWORD)v31)
      {
        v32 = 8;
        goto LABEL_34;
      }
    }
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_34:
    v20 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v7, v32, (uint64_t)v20);
    goto LABEL_35;
  }
  v23 = 0;
  v24 = 1;
  while (v22 != v10 || v21 != v11)
  {
    if (v21 == -1)
      v23 = v20;
    v19 = ((_DWORD)v19 + v24) & v9;
    v20 = (_OWORD *)(v6 + 32 * v19);
    v22 = *(_QWORD *)v20;
    v21 = *((_QWORD *)v20 + 1);
    ++v24;
    if (*v20 == 0)
    {
      if (v23)
      {
        *v23 = 0u;
        v23[1] = 0u;
        --*(_DWORD *)(*v7 - 16);
        v20 = v23;
      }
      goto LABEL_20;
    }
  }
LABEL_35:
  v33 = (uint64_t *)(v20 + 1);
  v70 = *(_OWORD *)(this + 48);
  v34 = *((unsigned int *)v20 + 7);
  if ((_DWORD)v34 == *((_DWORD *)v20 + 6))
  {
    v35 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)&v70);
    v34 = *((unsigned int *)v20 + 7);
    v36 = *((_QWORD *)v20 + 2);
    v37 = *(_OWORD *)v35;
  }
  else
  {
    v36 = *v33;
    v37 = v70;
  }
  *(_OWORD *)(v36 + 16 * v34) = v37;
  ++*((_DWORD *)v20 + 7);
  v38 = *(_QWORD *)(this + 32);
  v39 = *(_QWORD *)(this + 8);
  if (__ldaxr((unsigned __int8 *)v39))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v39))
  {
    goto LABEL_42;
  }
  MEMORY[0x19AEA534C](v39);
LABEL_42:
  v41 = (uint64_t *)(v38 + 152);
  ++*(_QWORD *)(v39 + 8);
  v42 = __ldxr((unsigned __int8 *)v39);
  if (v42 != 1)
  {
    __clrex();
    goto LABEL_46;
  }
  if (__stlxr(0, (unsigned __int8 *)v39))
LABEL_46:
    WTF::Lock::unlockSlow((WTF::Lock *)v39);
  v43 = *v41;
  if (*v41
    || (WTF::HashTable<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>,WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>>::rehash(v41, 8u, 0), (v43 = *v41) != 0))
  {
    v44 = *(_DWORD *)(v43 - 8);
  }
  else
  {
    v44 = 0;
  }
  v45 = 0;
  v46 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
  v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
  v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
  v49 = (v48 >> 31) ^ v48;
  for (i = 1; ; ++i)
  {
    v51 = v49 & v44;
    v52 = (WebCore::ScrollingTreeOverflowScrollProxyNode **)(v43 + 8 * v51);
    v53 = *v52;
    if (*v52 != (WebCore::ScrollingTreeOverflowScrollProxyNode *)-1)
      break;
    v45 = (uint64_t *)(v43 + 8 * v51);
LABEL_56:
    v49 = i + v51;
  }
  if (!v53)
  {
    if (v45)
    {
      *v45 = 0;
      --*(_DWORD *)(*v41 - 16);
      *v45 = this;
    }
    else
    {
      *v52 = (WebCore::ScrollingTreeOverflowScrollProxyNode *)this;
      v45 = (uint64_t *)(v43 + 8 * v51);
    }
    v61 = *v41;
    if (*v41)
      v62 = *(_DWORD *)(v61 - 12) + 1;
    else
      v62 = 1;
    *(_DWORD *)(v61 - 12) = v62;
    v63 = *v41;
    if (*v41)
      v64 = *(_DWORD *)(v63 - 12);
    else
      v64 = 0;
    v65 = (*(_DWORD *)(v63 - 16) + v64);
    v66 = *(unsigned int *)(v63 - 4);
    if (v66 > 0x400)
    {
      if (v66 > 2 * v65)
        return v2 == 6;
    }
    else
    {
      if (3 * v66 > 4 * v65)
        return v2 == 6;
      if (!(_DWORD)v66)
      {
        v67 = 8;
        goto LABEL_91;
      }
    }
    v67 = (_DWORD)v66 << (6 * *(_DWORD *)(v63 - 12) >= (2 * v66));
LABEL_91:
    WTF::HashTable<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>,WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>>::rehash(v41, v67, v45);
    return v2 == 6;
  }
  if (v53 != (WebCore::ScrollingTreeOverflowScrollProxyNode *)this)
    goto LABEL_56;
  if (!this)
    return v2 == 6;
  v54 = *(_QWORD *)(this + 8);
  if (__ldaxr((unsigned __int8 *)v54))
  {
    __clrex();
    goto LABEL_65;
  }
  if (__stxr(1u, (unsigned __int8 *)v54))
LABEL_65:
    MEMORY[0x19AEA534C](v54);
  v56 = *(_QWORD *)(v54 + 8);
  v57 = v56 - 1;
  *(_QWORD *)(v54 + 8) = v56 - 1;
  if (v56 == 1)
  {
    v69 = *(_QWORD *)(v54 + 16);
    v58 = *(_QWORD *)(v54 + 24);
    *(_QWORD *)(v54 + 24) = 0;
    v59 = v69 != 0;
  }
  else
  {
    v58 = 0;
    v59 = 1;
  }
  v60 = __ldxr((unsigned __int8 *)v54);
  if (v60 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v54))
      goto LABEL_73;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v54);
LABEL_73:
  if (!v57)
  {
    if (v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
    if (!v59)
      WTF::fastFree((WTF *)v54, a2);
  }
  return v2 == 6;
}

uint64_t WebCore::ScrollingTreeOverflowScrollProxyNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  float v12;
  float v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  double v23[3];
  double v24;

  WTF::TextStream::operator<<();
  result = WebCore::ScrollingTreeNode::dumpProperties(a1, a2, a3);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v23 = *(_OWORD *)(a1 + 96);
  if (!*(_QWORD *)&v23[0])
    goto LABEL_30;
  result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v7 + 24), (uint64_t *)v23);
  if (!result)
    goto LABEL_30;
  v8 = *(_QWORD *)(result + 16);
  if (!v8 || *(_BYTE *)(v8 + 40) != 5)
    goto LABEL_30;
  v9 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_9:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  v12 = *(float *)(v8 + 144);
  v13 = *(float *)(v8 + 148);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v23[0] = v12;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v24 = v13;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  result = WTF::TextStream::endGroup(a2);
  v15 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_18;
  }
  result = MEMORY[0x19AEA534C](v15);
LABEL_18:
  v17 = *(_QWORD *)(v15 + 8);
  v18 = v17 - 1;
  *(_QWORD *)(v15 + 8) = v17 - 1;
  if (v17 == 1)
  {
    v22 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v20 = v22 != 0;
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  v21 = __ldxr((unsigned __int8 *)v15);
  if (v21 != 1)
  {
    __clrex();
LABEL_25:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v18)
      goto LABEL_30;
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
    goto LABEL_25;
  if (v18)
    goto LABEL_30;
LABEL_26:
  if (v19)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (!v20)
    result = WTF::fastFree((WTF *)v15, v14);
LABEL_30:
  if ((a3 & 2) != 0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::operator<<();
    v23[0] = *(double *)(a1 + 104);
    WTF::operator<<();
    WTF::TextStream::operator<<();
    return WTF::TextStream::endGroup(a2);
  }
  return result;
}

uint64_t WebCore::ScrollingTreeOverflowScrollingNode::ScrollingTreeOverflowScrollingNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = 5;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_WORD *)(a1 + 248) = 257;
  *(_QWORD *)(a1 + 250) = 0;
  *(_DWORD *)(a1 + 258) = 0x10000;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 0;
  *(_QWORD *)a1 = off_1E34044B0;
  *(_QWORD *)(a1 + 8) = v8;
  return a1;
}

{
  uint64_t v8;

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = 5;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_WORD *)(a1 + 248) = 257;
  *(_QWORD *)(a1 + 250) = 0;
  *(_DWORD *)(a1 + 258) = 0x10000;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 0;
  *(_QWORD *)a1 = off_1E34044B0;
  *(_QWORD *)(a1 + 8) = v8;
  return a1;
}

void WebCore::ScrollingTreeOverflowScrollingNode::~ScrollingTreeOverflowScrollingNode(WebCore::ScrollingTreeOverflowScrollingNode *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScrollingTreeScrollingNode::~ScrollingTreeScrollingNode(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::ScrollingTreeOverflowScrollingNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  WTF::TextStream::operator<<();
  return WebCore::ScrollingTreeScrollingNode::dumpProperties(a1, a2, a3);
}

double WebCore::ScrollingTreePluginHostingNode::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double result;

  v8 = WTF::fastMalloc((WTF *)0x60);
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v9 = 0;
  *(_OWORD *)(v9 + 8) = xmmword_19689B170;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = a1;
  *(_BYTE *)(v8 + 40) = 4;
  *(_QWORD *)(v8 + 48) = a2;
  *(_QWORD *)(v8 + 56) = a3;
  result = 0.0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)v8 = off_1E3404580;
  *(_QWORD *)(v8 + 8) = v9;
  *a4 = v8;
  return result;
}

void WebCore::ScrollingTreePluginHostingNode::~ScrollingTreePluginHostingNode(WebCore::ScrollingTreePluginHostingNode *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_1E34043F8;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v3)
    goto LABEL_14;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v8 = __ldxr((unsigned __int8 *)v3);
    if (v8 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
LABEL_14:
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  int v9;

  *(_QWORD *)this = off_1E34043F8;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v3)
    goto LABEL_14;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
LABEL_14:
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  WTF::fastFree(this, v8);
}

uint64_t WebCore::ScrollingTreePluginHostingNode::commitStateBeforeChildren(WebCore::ScrollingTreePluginHostingNode *this, const WebCore::ScrollingStateNode *a2)
{
  return 1;
}

uint64_t WebCore::ScrollingTreePluginHostingNode::dumpProperties(int a1, WTF::TextStream *a2, char a3)
{
  WTF::TextStream::operator<<();
  return WebCore::ScrollingTreeNode::dumpProperties(a1, a2, a3);
}

uint64_t WebCore::ScrollingTreePluginScrollingNode::ScrollingTreePluginScrollingNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = 3;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_WORD *)(a1 + 248) = 257;
  *(_QWORD *)(a1 + 250) = 0;
  *(_DWORD *)(a1 + 258) = 0x10000;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 0;
  *(_QWORD *)a1 = off_1E34045D8;
  *(_QWORD *)(a1 + 8) = v8;
  return a1;
}

{
  uint64_t v8;

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = 3;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_WORD *)(a1 + 248) = 257;
  *(_QWORD *)(a1 + 250) = 0;
  *(_DWORD *)(a1 + 258) = 0x10000;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 0;
  *(_QWORD *)a1 = off_1E34045D8;
  *(_QWORD *)(a1 + 8) = v8;
  return a1;
}

void WebCore::ScrollingTreePluginScrollingNode::~ScrollingTreePluginScrollingNode(WebCore::ScrollingTreePluginScrollingNode *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScrollingTreeScrollingNode::~ScrollingTreeScrollingNode(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::ScrollingTreePluginScrollingNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  WTF::TextStream::operator<<();
  return WebCore::ScrollingTreeScrollingNode::dumpProperties(a1, a2, a3);
}

void WebCore::ScrollingTreePositionedNode::~ScrollingTreePositionedNode(WebCore::ScrollingTreePositionedNode *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  *(_QWORD *)this = off_1E34046A8;
  v3 = (WTF *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E34043F8;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v4)
    goto LABEL_16;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v9 = __ldxr((unsigned __int8 *)v4);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
LABEL_16:
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

BOOL WebCore::ScrollingTreePositionedNode::commitStateBeforeChildren(WebCore::ScrollingTreePositionedNode *this, const WebCore::ScrollingStateNode *a2)
{
  int v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WebCore::ScrollingTreePositionedNode *v22;

  v2 = *((unsigned __int8 *)a2 + 16);
  if (v2 == 9)
  {
    v5 = *((_QWORD *)a2 + 5);
    if ((v5 & 2) != 0)
    {
      WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WebCore::ScrollingTreePositionedNode *)((char *)this + 96), (const WebCore::ScrollingStateNode *)((char *)a2 + 128));
      v5 = *((_QWORD *)a2 + 5);
    }
    if ((v5 & 4) != 0)
      *((_OWORD *)this + 7) = *((_OWORD *)a2 + 9);
    if (*((_DWORD *)this + 27))
    {
      v6 = (uint64_t *)(*((_QWORD *)this + 4) + 160);
      v7 = *((_QWORD *)this + 1);
      if (__ldaxr((unsigned __int8 *)v7))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v7))
      {
        goto LABEL_11;
      }
      MEMORY[0x19AEA534C](v7);
LABEL_11:
      ++*(_QWORD *)(v7 + 8);
      v9 = __ldxr((unsigned __int8 *)v7);
      if (v9 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
        {
LABEL_16:
          v22 = this;
          WTF::HashTable<WTF::Ref<WebCore::ScrollingTreePositionedNode,WTF::RawPtrTraits<WebCore::ScrollingTreePositionedNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreePositionedNode>>,WTF::Ref<WebCore::ScrollingTreePositionedNode,WTF::RawPtrTraits<WebCore::ScrollingTreePositionedNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreePositionedNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ScrollingTreePositionedNode,WTF::RawPtrTraits<WebCore::ScrollingTreePositionedNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreePositionedNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreePositionedNode,WTF::RawPtrTraits<WebCore::ScrollingTreePositionedNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreePositionedNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreePositionedNode,WTF::RawPtrTraits<WebCore::ScrollingTreePositionedNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreePositionedNode>>>>::add(v6, (uint64_t *)&v22, (uint64_t)&v21);
          v11 = (uint64_t)v22;
          v22 = 0;
          if (!v11)
            return v2 == 9;
          v12 = *(_QWORD *)(v11 + 8);
          if (__ldaxr((unsigned __int8 *)v12))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v12))
          {
            goto LABEL_21;
          }
          MEMORY[0x19AEA534C](v12);
LABEL_21:
          v14 = *(_QWORD *)(v12 + 8);
          v15 = v14 - 1;
          *(_QWORD *)(v12 + 8) = v14 - 1;
          if (v14 == 1)
          {
            v20 = *(_QWORD *)(v12 + 16);
            v16 = *(_QWORD *)(v12 + 24);
            *(_QWORD *)(v12 + 24) = 0;
            v17 = v20 != 0;
          }
          else
          {
            v16 = 0;
            v17 = 1;
          }
          v18 = __ldxr((unsigned __int8 *)v12);
          if (v18 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v12))
            {
              if (v15)
                return v2 == 9;
              goto LABEL_29;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v12);
          if (v15)
            return v2 == 9;
LABEL_29:
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          if (!v17)
            WTF::fastFree((WTF *)v12, v10);
          return v2 == 9;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      goto LABEL_16;
    }
  }
  return v2 == 9;
}

uint64_t WebCore::ScrollingTreePositionedNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  WTF::TextStream *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::TextStream *v11;

  WTF::TextStream::operator<<();
  WebCore::ScrollingTreeNode::dumpProperties(a1, a2, a3);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v6 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WTF::TextStream::startGroup(v6);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v6);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  result = WTF::TextStream::endGroup(a2);
  if ((a3 & 2) != 0 && *(_DWORD *)(a1 + 108))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    v8 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v8)
    {
      v9 = 16 * v8;
      v10 = *(_QWORD *)(a1 + 96);
      do
      {
        v10 += 16;
        v11 = (WTF::TextStream *)WTF::TextStream::operator<<();
        WTF::TextStream::writeIndent(v11);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::operator<<();
        WTF::TextStream::operator<<();
        WTF::operator<<();
        WTF::TextStream::operator<<();
        v9 -= 16;
      }
      while (v9);
    }
    return WTF::TextStream::endGroup(a2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::ScrollingTreePositionedNode,WTF::RawPtrTraits<WebCore::ScrollingTreePositionedNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreePositionedNode>>,WTF::Ref<WebCore::ScrollingTreePositionedNode,WTF::RawPtrTraits<WebCore::ScrollingTreePositionedNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreePositionedNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ScrollingTreePositionedNode,WTF::RawPtrTraits<WebCore::ScrollingTreePositionedNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreePositionedNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreePositionedNode,WTF::RawPtrTraits<WebCore::ScrollingTreePositionedNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreePositionedNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreePositionedNode,WTF::RawPtrTraits<WebCore::ScrollingTreePositionedNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreePositionedNode>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>,WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = *v17;
    if (*v17 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      v10 = *a2;
      v17 = v9;
    }
    *a2 = 0;
    v19 = *v17;
    *v17 = v10;
    if (!v19)
    {
LABEL_35:
      v30 = *v4;
      if (*v4)
        v31 = *(_DWORD *)(v30 - 12) + 1;
      else
        v31 = 1;
      *(_DWORD *)(v30 - 12) = v31;
      v32 = *v4;
      if (*v4)
        v33 = *(_DWORD *)(v32 - 12);
      else
        v33 = 0;
      v34 = (*(_DWORD *)(v32 - 16) + v33);
      v35 = *(unsigned int *)(v32 - 4);
      if (v35 > 0x400)
      {
        if (v35 <= 2 * v34)
          goto LABEL_44;
      }
      else if (3 * v35 <= 4 * v34)
      {
        if (!(_DWORD)v35)
        {
          v36 = 8;
LABEL_46:
          result = WTF::HashTable<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>,WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeOverflowScrollProxyNode,WTF::RawPtrTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeOverflowScrollProxyNode>>>>::rehash(v4, v36, v17);
          v17 = result;
          v32 = *v4;
          if (*v4)
            v35 = *(unsigned int *)(v32 - 4);
          else
            v35 = 0;
          goto LABEL_50;
        }
LABEL_44:
        v36 = (_DWORD)v35 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v35));
        goto LABEL_46;
      }
LABEL_50:
      v24 = v32 + 8 * v35;
      v23 = 1;
      goto LABEL_51;
    }
    v20 = *(_QWORD *)(v19 + 8);
    if (__ldaxr((unsigned __int8 *)v20))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v20))
    {
      goto LABEL_23;
    }
    result = (uint64_t *)MEMORY[0x19AEA534C](v20);
LABEL_23:
    v25 = *(_QWORD *)(v20 + 8);
    v26 = v25 - 1;
    *(_QWORD *)(v20 + 8) = v25 - 1;
    if (v25 == 1)
    {
      v37 = *(_QWORD *)(v20 + 16);
      v27 = *(_QWORD *)(v20 + 24);
      *(_QWORD *)(v20 + 24) = 0;
      v28 = v37 != 0;
    }
    else
    {
      v27 = 0;
      v28 = 1;
    }
    v29 = __ldxr((unsigned __int8 *)v20);
    if (v29 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
      {
        if (v26)
          goto LABEL_35;
LABEL_31:
        if (v27)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        if (!v28)
          result = (uint64_t *)WTF::fastFree((WTF *)v20, a2);
        goto LABEL_35;
      }
    }
    else
    {
      __clrex();
    }
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v20);
    if (v26)
      goto LABEL_35;
    goto LABEL_31;
  }
  if (v18 != v10)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v6 - 4);
  v23 = 0;
  v24 = v6 + 8 * v22;
LABEL_51:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = v23;
  return result;
}

uint64_t WebCore::ScrollingTreeScrollingNode::ScrollingTreeScrollingNode(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_19689B170;
  *(_QWORD *)(v10 + 24) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)a1 = off_1E3404708;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_WORD *)(a1 + 248) = 257;
  *(_QWORD *)(a1 + 250) = 0;
  *(_DWORD *)(a1 + 258) = 0x10000;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 0;
  return a1;
}

{
  uint64_t v10;

  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_19689B170;
  *(_QWORD *)(v10 + 24) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)a1 = off_1E3404708;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_WORD *)(a1 + 248) = 257;
  *(_QWORD *)(a1 + 250) = 0;
  *(_DWORD *)(a1 + 258) = 0x10000;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 0;
  return a1;
}

uint64_t WebCore::ScrollingTreeScrollingNode::handleScrollPositionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  __n128 v6;
  __n128 v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v4 = **(_QWORD **)(a1 + 32);
  if (*(_BYTE *)a2 == 2)
    return (*(uint64_t (**)(void))(v4 + 280))();
  result = (*(uint64_t (**)(void))(v4 + 136))();
  if ((result & 1) == 0)
  {
    if (*(_BYTE *)(a2 + 40))
    {
      v8 = *(unsigned __int8 *)(a2 + 20);
      if (v8 >= 2)
      {
        if (v8 == 2)
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
      }
      else
      {
        v9 = *(_DWORD *)(a2 + 32);
        if (v8 == 1)
        {
          if (v9 != 1)
            goto LABEL_23;
          v7.n128_u64[0] = *(_QWORD *)(a2 + 24);
          v6.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)(a1 + 144), (float32x2_t)v7.n128_u64[0]);
        }
        else
        {
          if (v9)
            goto LABEL_23;
          v6.n128_u64[0] = *(_QWORD *)(a2 + 24);
        }
        v13 = v6.n128_u64[0];
        WebCore::ScrollingTreeScrollingNode::scrollTo(a1, (unsigned __int32 *)&v13, *(unsigned __int8 *)(a2 + 36), *(unsigned __int8 *)(a2 + 37), v6, v7);
      }
    }
    v10 = *(_DWORD *)(a2 + 12);
    if (*(_BYTE *)a2 == 1)
    {
      if (v10 == 1)
      {
        v7.n128_u64[0] = *(_QWORD *)(a2 + 4);
        v6.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)(a1 + 144), (float32x2_t)v7.n128_u64[0]);
        goto LABEL_19;
      }
    }
    else if (!v10)
    {
      v6.n128_u64[0] = *(_QWORD *)(a2 + 4);
LABEL_19:
      v13 = v6.n128_u64[0];
      if (*(_BYTE *)(a2 + 18))
        return (*(uint64_t (**)(uint64_t, __n128, float))(*(_QWORD *)a1 + 96))(a1, v6, v6.n128_f32[1]);
      else
        return WebCore::ScrollingTreeScrollingNode::scrollTo(a1, (unsigned __int32 *)&v13, *(unsigned __int8 *)(a2 + 16), *(unsigned __int8 *)(a2 + 17), v6, v7);
    }
LABEL_23:
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ScrollingTreeScrollingNode::requestKeyboardScroll(v11, v12);
  }
  return result;
}

uint64_t WebCore::ScrollingTreeScrollingNode::requestKeyboardScroll(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a2);
}

BOOL WebCore::ScrollingTreeScrollingNode::isLatchedNode(WebCore::ScrollingTreeScrollingNode *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *((_QWORD *)this + 4);
  v3 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_5:
  v5 = *(unsigned __int8 *)(v2 + 80);
  if (*(_BYTE *)(v2 + 80))
  {
    v6 = *(_QWORD *)(v2 + 56);
    v2 = *(_QWORD *)(v2 + 64);
    v7 = v6 & 0xFFFFFFFFFFFFFF00;
    v8 = v6;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v9 = __ldxr(v3);
  if (v9 != 1)
  {
    __clrex();
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v5)
      return (v7 | v8) == *((_QWORD *)this + 6) && v2 == *((_QWORD *)this + 7);
    return 0;
  }
  if (__stlxr(0, v3))
    goto LABEL_18;
  if (!v5)
    return 0;
  return (v7 | v8) == *((_QWORD *)this + 6) && v2 == *((_QWORD *)this + 7);
}

BOOL WebCore::ScrollingTreeScrollingNode::shouldRubberBand(uint64_t a1, uint64_t a2, int a3)
{
  float v6;
  float v7;
  int v8;
  int v9;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v20;
  _BOOL8 result;

  v6 = *(float *)(a2 + 68);
  if (*(_BYTE *)(a1 + 252))
  {
    v7 = *(float *)(a2 + 72);
    if (v7 == 0.0 && v6 != 0.0)
    {
      v8 = 0;
      v9 = 1;
      goto LABEL_15;
    }
    if (v7 == 0.0 || *(_BYTE *)(a1 + 253) != 0)
      goto LABEL_12;
    v9 = 1;
    goto LABEL_14;
  }
  v9 = 1;
  if (!*(_BYTE *)(a1 + 253))
  {
LABEL_14:
    v8 = 1;
    goto LABEL_15;
  }
  v8 = 1;
  if (v6 == 0.0)
  {
LABEL_12:
    v9 = 0;
    v8 = 0;
  }
LABEL_15:
  v11 = *(_QWORD *)(a1 + 32);
  v12 = (unsigned __int8 *)(v11 + 48);
  if (__ldaxr((unsigned __int8 *)(v11 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v11 + 48);
LABEL_19:
  v14 = *(unsigned __int8 *)(v11 + 80);
  if (*(_BYTE *)(v11 + 80))
  {
    v15 = *(_QWORD *)(v11 + 56);
    v11 = *(_QWORD *)(v11 + 64);
    v16 = v15 & 0xFFFFFFFFFFFFFF00;
    v17 = v15;
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  v18 = __ldxr(v12);
  if (v18 != 1)
  {
    __clrex();
LABEL_32:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v14)
      goto LABEL_25;
    goto LABEL_33;
  }
  if (__stlxr(0, v12))
    goto LABEL_32;
  if (v14)
  {
LABEL_25:
    v20 = (v16 | v17) == *(_QWORD *)(a1 + 48) && v11 == *(_QWORD *)(a1 + 56);
    goto LABEL_34;
  }
LABEL_33:
  v20 = 0;
LABEL_34:
  result = 1;
  if (a3
    && !v20
    && (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) != a1
     || !(*(unsigned __int8 *)(a2 + 92) | *(unsigned __int8 *)(a2 + 93))))
  {
    if (((v9 | v8) & 1) != 0)
    {
      return 0;
    }
    else if (*(_BYTE *)(a1 + 252) == 2)
    {
      return *(_BYTE *)(a1 + 253) != 2;
    }
  }
  return result;
}

uint64_t WebCore::ScrollingTreeScrollingNode::computeScrollPropagation(WebCore::ScrollingTreeScrollingNode *this, const WebCore::FloatSize *a2)
{
  int v2;
  float v3;
  float v4;
  int v5;

  v2 = *((unsigned __int8 *)this + 252);
  v3 = *(float *)a2;
  if (!*((_BYTE *)this + 252))
  {
    if (!*((_BYTE *)this + 253))
    {
      v5 = *((unsigned __int8 *)this + 252);
      return v5 | (v2 << 8);
    }
    v5 = *((unsigned __int8 *)this + 252);
    if (v3 != 0.0)
      return v5 | (v2 << 8);
LABEL_12:
    v2 = 1;
    goto LABEL_13;
  }
  v4 = *((float *)a2 + 1);
  if (v4 != 0.0 || v3 == 0.0)
  {
    if (v4 != 0.0 && *((_BYTE *)this + 253) == 0)
    {
      v2 = 0;
      v5 = 0;
      return v5 | (v2 << 8);
    }
    goto LABEL_12;
  }
  v2 = 0;
LABEL_13:
  v5 = 1;
  return v5 | (v2 << 8);
}

BOOL WebCore::ScrollingTreeScrollingNode::canHandleWheelEvent(uint64_t a1, uint64_t a2, int a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;

  if (*(_BYTE *)(a1 + 250) == 1 && *(_BYTE *)(a1 + 251) == 1)
    return 0;
  if (*(_BYTE *)(a2 + 92) == 32 || WebCore::ScrollingTreeScrollingNode::shouldRubberBand(a1, a2, a3))
    return 1;
  v7 = *(float *)(a2 + 68);
  v6 = *(float *)(a2 + 72);
  if (v7 == 0.0)
    goto LABEL_15;
  v8 = *(float *)(a2 + 68);
  if (v7 < 0.0)
    v8 = -v7;
  if (v8 < 0.00000011921)
  {
LABEL_15:
    if (v6 == 0.0)
      return 0;
    v9 = *(float *)(a2 + 72);
    if (v6 < 0.0)
      v9 = -v6;
    if (v9 < 0.00000011921)
      return 0;
  }
  if (!*(_BYTE *)(a1 + 254))
    v7 = 0.0;
  if (!*(_BYTE *)(a1 + 255))
    v6 = 0.0;
  v10 = *(float *)(a1 + 144);
  v11 = *(float *)(a1 + 148);
  v12 = v10 - v7;
  v13 = v11 - v6;
  v14 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  v16 = v15;
  v17 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  if (v12 < v17)
    v17 = v12;
  if (v14 >= v17)
    v17 = v14;
  if (v13 < v18)
    v18 = v13;
  if (v16 >= v18)
    v18 = v16;
  return v18 != v11 || v17 != v10;
}

BOOL WebCore::ScrollingTreeScrollingNode::eventCanScrollContents(uint64_t a1, uint64_t a2)
{
  float v3;
  float v4;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v4 = *(float *)(a2 + 68);
  v3 = *(float *)(a2 + 72);
  if (v4 == 0.0)
    goto LABEL_10;
  v6 = *(float *)(a2 + 68);
  if (v4 < 0.0)
    v6 = -v4;
  if (v6 < 0.00000011921)
  {
LABEL_10:
    if (v3 == 0.0)
      return 0;
    v7 = *(float *)(a2 + 72);
    if (v3 < 0.0)
      v7 = -v3;
    if (v7 < 0.00000011921)
      return 0;
  }
  if (!*(_BYTE *)(a1 + 254))
    v4 = 0.0;
  if (!*(_BYTE *)(a1 + 255))
    v3 = 0.0;
  v8 = *(float *)(a1 + 144);
  v9 = *(float *)(a1 + 148);
  v10 = v8 - v4;
  v11 = v9 - v3;
  v12 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  v14 = v13;
  v15 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  if (v10 < v15)
    v15 = v10;
  if (v12 >= v15)
    v15 = v12;
  if (v11 < v16)
    v16 = v11;
  if (v14 >= v16)
    v16 = v14;
  return v16 != v9 || v15 != v8;
}

uint64_t WebCore::ScrollingTreeScrollingNode::handleWheelEvent()
{
  return 0;
}

void WebCore::ScrollingTreeScrollingNode::clampScrollPosition(WebCore::ScrollingTreeScrollingNode *this, const WebCore::FloatPoint *a2)
{
  (*(void (**)(WebCore::ScrollingTreeScrollingNode *))(*(_QWORD *)this + 128))(this);
  (*(float (**)(WebCore::ScrollingTreeScrollingNode *))(*(_QWORD *)this + 136))(this);
}

float WebCore::ScrollingTreeScrollingNode::minimumScrollPosition(WebCore::ScrollingTreeScrollingNode *this)
{
  return 0.0 - (float)*((int *)this + 38);
}

float32x2_t WebCore::ScrollingTreeScrollingNode::maximumScrollPosition(WebCore::ScrollingTreeScrollingNode *this)
{
  float32x2_t v1;

  v1 = vsub_f32(*(float32x2_t *)((char *)this + 112), *(float32x2_t *)((char *)this + 104));
  return vsub_f32((float32x2_t)vbic_s8((int8x8_t)v1, (int8x8_t)vcltz_f32(v1)), vcvt_f32_s32(*(int32x2_t *)((char *)this + 152)));
}

uint64_t WebCore::ScrollingTreeScrollingNode::edgePinnedState(WebCore::ScrollingTreeScrollingNode *this)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  int v14;
  int v15;

  v2 = *((float *)this + 36);
  v3 = *((float *)this + 37);
  v4 = (*(float (**)(WebCore::ScrollingTreeScrollingNode *))(*(_QWORD *)this + 128))(this);
  v6 = v5;
  (*(void (**)(WebCore::ScrollingTreeScrollingNode *))(*(_QWORD *)this + 136))(this);
  v9 = *((_BYTE *)this + 254) == 0;
  v10 = *((_BYTE *)this + 255) == 0;
  v11 = v3 <= v6 || *((_BYTE *)this + 255) == 0;
  v12 = v2 >= v7 || *((_BYTE *)this + 254) == 0;
  if (v3 >= v8)
    v10 = 1;
  if (v2 <= v4)
    v9 = 1;
  if (v9)
    v13 = 0x1000000;
  else
    v13 = 0;
  if (v10)
    v14 = 0x10000;
  else
    v14 = 0;
  if (v12)
    v15 = 256;
  else
    v15 = 0;
  return v15 | v13 | v14 | v11;
}

BOOL WebCore::ScrollingTreeScrollingNode::isUserScrollInProgress(WebCore::ScrollingTreeScrollingNode *this)
{
  return WebCore::ScrollingTree::isUserScrollInProgressForNode(*((_QWORD *)this + 4), *((_QWORD *)this + 6), *((_QWORD *)this + 7));
}

uint64_t WebCore::ScrollingTreeScrollingNode::setUserScrollInProgress(WebCore::ScrollingTreeScrollingNode *this, int a2)
{
  return WebCore::ScrollingTree::setUserScrollInProgressForNode(*((_QWORD *)this + 4), *((_QWORD *)this + 6), *((_QWORD *)this + 7), a2);
}

BOOL WebCore::ScrollingTreeScrollingNode::isScrollSnapInProgress(WebCore::ScrollingTreeScrollingNode *this)
{
  return WebCore::ScrollingTree::isScrollSnapInProgressForNode(*((_QWORD *)this + 4), *((_QWORD *)this + 6), *((_QWORD *)this + 7));
}

uint64_t WebCore::ScrollingTreeScrollingNode::setScrollSnapInProgress(WebCore::ScrollingTreeScrollingNode *this, int a2)
{
  return WebCore::ScrollingTree::setNodeScrollSnapInProgress(*((_QWORD *)this + 4), *((_QWORD *)this + 6), *((_QWORD *)this + 7), a2);
}

uint64_t WebCore::ScrollingTreeScrollingNode::willStartAnimatedScroll(WebCore::ScrollingTreeScrollingNode *this)
{
  return (*(uint64_t (**)(_QWORD, WebCore::ScrollingTreeScrollingNode *))(**((_QWORD **)this + 4) + 104))(*((_QWORD *)this + 4), this);
}

uint64_t WebCore::ScrollingTreeScrollingNode::didStopAnimatedScroll(WebCore::ScrollingTreeScrollingNode *this)
{
  return (*(uint64_t (**)(_QWORD, WebCore::ScrollingTreeScrollingNode *))(**((_QWORD **)this + 4) + 112))(*((_QWORD *)this + 4), this);
}

uint64_t WebCore::ScrollingTreeScrollingNode::willStartWheelEventScroll(WebCore::ScrollingTreeScrollingNode *this)
{
  return (*(uint64_t (**)(_QWORD, WebCore::ScrollingTreeScrollingNode *))(**((_QWORD **)this + 4) + 120))(*((_QWORD *)this + 4), this);
}

uint64_t WebCore::ScrollingTreeScrollingNode::didStopWheelEventScroll(WebCore::ScrollingTreeScrollingNode *this)
{
  return (*(uint64_t (**)(_QWORD, WebCore::ScrollingTreeScrollingNode *))(**((_QWORD **)this + 4) + 128))(*((_QWORD *)this + 4), this);
}

uint64_t WebCore::ScrollingTreeScrollingNode::startAnimatedScrollToPosition(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t WebCore::ScrollingTreeScrollingNode::stopAnimatedScroll(WebCore::ScrollingTreeScrollingNode *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t WebCore::ScrollingTreeScrollingNode::serviceScrollAnimation(WebCore::ScrollingTreeScrollingNode *this, __n128 a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 32))(result, a2);
  return result;
}

uint64_t WebCore::ScrollingTreeScrollingNode::setScrollAnimationInProgress(WebCore::ScrollingTreeScrollingNode *this, int a2)
{
  return WebCore::ScrollingTree::setScrollAnimationInProgressForNode(*((_QWORD *)this + 4), *((_QWORD *)this + 6), *((_QWORD *)this + 7), a2);
}

uint64_t WebCore::ScrollingTreeScrollingNode::handleKeyboardScrollRequest(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

uint64_t WebCore::ScrollingTreeScrollingNode::scrollTo(uint64_t result, unsigned __int32 *a2, uint64_t a3, int a4, __n128 a5, __n128 a6)
{
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  _BYTE v21[20];

  a5.n128_u32[0] = *a2;
  a6.n128_u32[0] = a2[1];
  if (*(float *)a2 != *(float *)(result + 144) || a6.n128_f32[0] != *(float *)(result + 148))
  {
    v10 = result;
    *(_BYTE *)(*(_QWORD *)(result + 32) + 336) = a3;
    if ((_DWORD)a3)
      (*(void (**)(uint64_t, unsigned __int32 *, __n128, __n128))(*(_QWORD *)result + 144))(result, a2, a5, a6);
    v11 = *(_QWORD *)(v10 + 96);
    if (v11)
    {
      v12 = (*(float (**)(uint64_t, unsigned __int32 *, __n128, __n128))(*(_QWORD *)v11 + 104))(v11, a2, a5, a6);
      v14 = v13;
      if (a4)
      {
LABEL_9:
        v15 = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 128))(v10);
        v17 = v16;
        v18 = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
        if (v12 < v18)
          v18 = v12;
        if (v15 >= v18)
          v12 = v15;
        else
          v12 = v18;
        if (v14 >= v19)
          v20 = v19;
        else
          v20 = v14;
        if (v17 >= v20)
          v14 = v17;
        else
          v14 = v20;
      }
    }
    else
    {
      v12 = *(float *)a2;
      v14 = *((float *)a2 + 1);
      if (a4)
        goto LABEL_9;
    }
    *(float *)(v10 + 144) = v12;
    *(float *)(v10 + 148) = v14;
    v21[0] = 0;
    v21[16] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 160))(v10, v21);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 152))(v10, a3, 2);
    *(_BYTE *)(*(_QWORD *)(v10 + 32) + 336) = 0;
  }
  return result;
}

float WebCore::ScrollingTreeScrollingNode::adjustedScrollPosition(_QWORD *a1, float *a2, int a3)
{
  uint64_t v5;
  float v6;
  float v7;
  float v8;

  v5 = a1[12];
  if (v5)
  {
    v6 = (*(float (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
    if (!a3)
      return v6;
  }
  else
  {
    v6 = *a2;
    if (!a3)
      return v6;
  }
  v7 = (*(float (**)(_QWORD *))(*a1 + 128))(a1);
  v8 = (*(float (**)(_QWORD *))(*a1 + 136))(a1);
  if (v6 < v8)
    v8 = v6;
  if (v7 >= v8)
    return v7;
  else
    return v8;
}

uint64_t WebCore::ScrollingTreeScrollingNode::scrollBy(uint64_t result, float *a2, int a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  _BYTE v18[20];

  v3 = *(float *)(result + 144);
  v4 = *(float *)(result + 148);
  v5 = v3 + *a2;
  v6 = v4 + a2[1];
  v16 = v5;
  v17 = v6;
  if (v5 != v3 || v6 != v4)
  {
    v9 = result;
    *(_BYTE *)(*(_QWORD *)(result + 32) + 336) = 0;
    v10 = *(_QWORD *)(result + 96);
    if (v10)
    {
      v11 = (*(float (**)(uint64_t, float *))(*(_QWORD *)v10 + 104))(v10, &v16);
      v5 = v11;
      v6 = v12;
      if (a3)
      {
LABEL_7:
        v13 = (*(float (**)(uint64_t))(*(_QWORD *)v9 + 128))(v9);
        v15 = v14;
        v11 = (*(float (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9);
        if (v5 < v11)
          v11 = v5;
        if (v13 >= v11)
          v11 = v13;
        if (v6 < v12)
          v12 = v6;
        if (v15 >= v12)
          v12 = v15;
      }
    }
    else
    {
      v11 = v16;
      v12 = v17;
      if (a3)
        goto LABEL_7;
    }
    *(float *)(v9 + 144) = v11;
    *(float *)(v9 + 148) = v12;
    v18[0] = 0;
    v18[16] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 160))(v9, v18);
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 152))(v9, 0, 2);
    *(_BYTE *)(*(_QWORD *)(v9 + 32) + 336) = 0;
  }
  return result;
}

uint64_t WebCore::ScrollingTreeScrollingNode::currentScrollPositionChanged(uint64_t a1)
{
  *(_BYTE *)(a1 + 261) = 1;
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 96))(*(_QWORD *)(a1 + 32), a1);
}

BOOL WebCore::ScrollingTreeScrollingNode::scrollPositionAndLayoutViewportMatch(uint64_t a1, float *a2)
{
  return a2[1] == *(float *)(a1 + 148) && *a2 == *(float *)(a1 + 144);
}

uint64_t WebCore::ScrollingTreeScrollingNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  WTF::TextStream *v9;

  WebCore::ScrollingTreeNode::dumpProperties(a1, a2, a3);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  v5 = *(float *)(a1 + 112);
  if (*(float *)(a1 + 120) != v5 || (v6 = *(float *)(a1 + 116), *(float *)(a1 + 124) != v6))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
    v5 = *(float *)(a1 + 112);
    v6 = *(float *)(a1 + 116);
  }
  if (*(float *)(a1 + 128) != v5 || *(float *)(a1 + 132) != v6)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  if (*(float *)(a1 + 144) != 0.0 || *(float *)(a1 + 148) != 0.0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(_DWORD *)(a1 + 152) || *(_DWORD *)(a1 + 156))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(_DWORD *)(a1 + 180))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    v7 = WTF::TextStream::operator<<();
    WTF::streamSizedContainer<WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v7, (uint64_t *)(a1 + 168));
    WTF::TextStream::endGroup(a2);
  }
  if (*(_DWORD *)(a1 + 196))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    v8 = WTF::TextStream::operator<<();
    WTF::streamSizedContainer<WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, (uint64_t *)(a1 + 184));
    WTF::TextStream::endGroup(a2);
  }
  if (*(_BYTE *)(a1 + 236))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (*(_BYTE *)(a1 + 236))
      WTF::TextStream::operator<<();
    else
      WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if (*(_BYTE *)(a1 + 244))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (*(_BYTE *)(a1 + 244))
      WTF::TextStream::operator<<();
    else
      WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v9 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v9, (unsigned __int8 *)(a1 + 248));
  return WTF::TextStream::endGroup(a2);
}

uint64_t WebCore::ScrollingTreeScrollingNode::currentHorizontalSnapPointIndex(WebCore::ScrollingTreeScrollingNode *this)
{
  return *((_QWORD *)this + 29);
}

uint64_t WebCore::ScrollingTreeScrollingNode::currentVerticalSnapPointIndex(WebCore::ScrollingTreeScrollingNode *this)
{
  return *((_QWORD *)this + 30);
}

uint64_t WebCore::ScrollingTreeScrollingNode::setCurrentHorizontalSnapPointIndex(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 232) = a2;
  *(_BYTE *)(result + 236) = BYTE4(a2);
  return result;
}

uint64_t WebCore::ScrollingTreeScrollingNode::setCurrentVerticalSnapPointIndex(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 240) = a2;
  *(_BYTE *)(result + 244) = BYTE4(a2);
  return result;
}

__n128 WebCore::ScrollingTreeScrollingNode::eventForPropagation@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v3;
  _BOOL4 v4;
  __n128 result;
  uint64_t v6;
  _BOOL4 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v3 = *(float *)(a2 + 72);
  if (*(_BYTE *)(a1 + 252))
    goto LABEL_2;
  if (!*(_BYTE *)(a1 + 253))
  {
    v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a3 + 80) = v13;
    v14 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a3 + 112) = v14;
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v15;
    result = *(__n128 *)(a2 + 32);
    v16 = *(_OWORD *)(a2 + 48);
    *(__n128 *)(a3 + 32) = result;
    *(_OWORD *)(a3 + 48) = v16;
    return result;
  }
  result.n128_u32[0] = *(_DWORD *)(a2 + 68);
  if (result.n128_f32[0] == 0.0)
  {
LABEL_2:
    v4 = *(unsigned __int8 *)(a1 + 253) == 0;
    result.n128_u32[0] = 0;
  }
  else
  {
    v4 = 0;
  }
  v6 = *(_QWORD *)(a2 + 84);
  v8 = v3 != 0.0 || *(_BYTE *)(a1 + 252) == 0;
  if (!v4 || !v8)
    v3 = 0.0;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v10;
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v11;
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 48) = v12;
  *(_DWORD *)(a3 + 68) = result.n128_u32[0];
  *(float *)(a3 + 72) = v3;
  *(_QWORD *)(a3 + 84) = v6;
  return result;
}

uint64_t WebCore::ScrollingTreeScrollingNode::scrollbarVisibilityDidChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 288))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a2, a3);
}

uint64_t WebCore::ScrollingTreeScrollingNode::scrollbarMinimumThumbLengthDidChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 296))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a2, a3);
}

uint64_t WebCore::ScrollingTreeScrollingNodeDelegate::scrollingTree(WebCore::ScrollingTreeScrollingNodeDelegate *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 32);
}

float WebCore::ScrollingTreeScrollingNodeDelegate::lastCommittedScrollPosition(WebCore::ScrollingTreeScrollingNodeDelegate *this)
{
  return *(float *)(*((_QWORD *)this + 1) + 136);
}

float WebCore::ScrollingTreeScrollingNodeDelegate::totalContentsSize(WebCore::ScrollingTreeScrollingNodeDelegate *this)
{
  return *(float *)(*((_QWORD *)this + 1) + 112);
}

float WebCore::ScrollingTreeScrollingNodeDelegate::reachableContentsSize(WebCore::ScrollingTreeScrollingNodeDelegate *this)
{
  return *(float *)(*((_QWORD *)this + 1) + 128);
}

uint64_t WebCore::ScrollingTreeStickyNode::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  WTF::TextStream *v6;
  uint64_t result;

  WTF::TextStream::operator<<();
  WebCore::ScrollingTreeNode::dumpProperties(a1, a2, a3);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v6 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v6);
  result = WTF::TextStream::endGroup(a2);
  if ((a3 & 4) != 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    return WTF::TextStream::endGroup(a2);
  }
  return result;
}

void WebCore::ScrollingTreeStickyNode::computeLayerPosition(WebCore::ScrollingTreeStickyNode *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  float32x2_t v7;
  uint64_t v8;
  unsigned int v9;
  __int32 v10;
  float32x2_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  uint64_t v28;
  uint64_t *v29;
  float32x2_t *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  __int128 v40;

  v3 = *((_QWORD *)this + 10);
  if (!v3)
    return;
  v4 = *((_QWORD *)this + 11);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 != 1)
  {
    __clrex();
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v4)
      return;
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_14;
  if (!v4)
    return;
LABEL_15:
  v7 = 0;
  while (1)
  {
    v8 = v4;
    v9 = *(unsigned __int8 *)(v4 + 40);
    if (v9 > 8)
      goto LABEL_21;
    if (v9 == 8)
    {
      WebCore::ScrollingTreeStickyNode::computeLayerPosition((WebCore::ScrollingTreeStickyNode *)v4);
      v11.i32[1] = v10;
      v7 = vadd_f32(v7, vsub_f32(v11, *(float32x2_t *)(v4 + 188)));
      v9 = *(unsigned __int8 *)(v4 + 40);
      goto LABEL_21;
    }
    if (((1 << v9) & 0x2B) != 0)
    {
      *((_QWORD *)&v40 + 1) = 0;
      if (v9 > 1)
      {
        v23 = 0;
        if (v9 == 5)
        {
          *((_QWORD *)&v40 + 1) = *(_QWORD *)((char *)this + 140);
          v24 = *(float32x2_t *)((char *)this + 132);
          v26 = *(float32x2_t *)(v4 + 136);
          v25 = *(float32x2_t *)(v4 + 144);
          goto LABEL_58;
        }
LABEL_61:
        *(float32x2_t *)&v40 = vsub_f32(v23, v7);
        WebCore::StickyPositionViewportConstraints::computeStickyOffset((WebCore::ScrollingTreeStickyNode *)((char *)this + 96), (const WebCore::FloatRect *)&v40);
        goto LABEL_69;
      }
      v23 = *(float32x2_t *)(v4 + 344);
      v27 = *(float32x2_t *)(v4 + 352);
LABEL_60:
      *((float32x2_t *)&v40 + 1) = v27;
      goto LABEL_61;
    }
    if (v9 == 6)
      break;
LABEL_21:
    if (v9 == 7)
      goto LABEL_69;
    v12 = *(_QWORD *)(v4 + 80);
    if (!v12)
    {
      v4 = 0;
      goto LABEL_36;
    }
    v4 = *(_QWORD *)(v4 + 88);
    if (__ldaxr((unsigned __int8 *)v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v12))
    {
      goto LABEL_28;
    }
    MEMORY[0x19AEA534C](v12);
LABEL_28:
    if (*(_QWORD *)(v12 + 24))
      ++*(_QWORD *)(v12 + 8);
    else
      v4 = 0;
    v14 = __ldxr((unsigned __int8 *)v12);
    if (v14 != 1)
    {
      __clrex();
LABEL_35:
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
      goto LABEL_36;
    }
    if (__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_35;
LABEL_36:
    v15 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
      goto LABEL_40;
    }
    MEMORY[0x19AEA534C](v15);
LABEL_40:
    v17 = *(_QWORD *)(v15 + 8);
    v18 = v17 - 1;
    *(_QWORD *)(v15 + 8) = v17 - 1;
    if (v17 == 1)
    {
      v22 = *(_QWORD *)(v15 + 16);
      v19 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 24) = 0;
      v20 = v22 != 0;
    }
    else
    {
      v19 = 0;
      v20 = 1;
    }
    v21 = __ldxr((unsigned __int8 *)v15);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
      {
        if (!v18)
          goto LABEL_48;
        goto LABEL_52;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (!v18)
    {
LABEL_48:
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      if (!v20)
        WTF::fastFree((WTF *)v15, a2);
    }
LABEL_52:
    if (!v4)
      return;
  }
  v28 = *((_QWORD *)this + 4);
  v40 = *(_OWORD *)(v4 + 96);
  if ((_QWORD)v40)
  {
    v29 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v28 + 24), (uint64_t *)&v40);
    if (v29)
    {
      v30 = (float32x2_t *)v29[2];
      if (v30)
      {
        *((_QWORD *)&v40 + 1) = 0;
        v31 = v30[5].u8[0];
        if (v31 > 1)
        {
          v23 = 0;
          if (v31 == 5)
          {
            *((_QWORD *)&v40 + 1) = *(_QWORD *)((char *)this + 140);
            v24 = *(float32x2_t *)((char *)this + 132);
            v26 = v30[17];
            v25 = v30[18];
LABEL_58:
            v23 = vadd_f32(v24, vsub_f32(v25, v26));
          }
          goto LABEL_61;
        }
        v23 = v30[43];
        v27 = v30[44];
        goto LABEL_60;
      }
    }
  }
LABEL_69:
  v32 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v32))
  {
    __clrex();
    goto LABEL_72;
  }
  if (__stxr(1u, (unsigned __int8 *)v32))
LABEL_72:
    MEMORY[0x19AEA534C](v32);
  v34 = *(_QWORD *)(v32 + 8);
  v35 = v34 - 1;
  *(_QWORD *)(v32 + 8) = v34 - 1;
  if (v34 == 1)
  {
    v39 = *(_QWORD *)(v32 + 16);
    v36 = *(_QWORD *)(v32 + 24);
    *(_QWORD *)(v32 + 24) = 0;
    v37 = v39 != 0;
  }
  else
  {
    v36 = 0;
    v37 = 1;
  }
  v38 = __ldxr((unsigned __int8 *)v32);
  if (v38 != 1)
  {
    __clrex();
LABEL_80:
    WTF::Lock::unlockSlow((WTF::Lock *)v32);
    if (!v35)
      goto LABEL_81;
    return;
  }
  if (__stlxr(0, (unsigned __int8 *)v32))
    goto LABEL_80;
  if (!v35)
  {
LABEL_81:
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    if (!v37)
      WTF::fastFree((WTF *)v32, a2);
  }
}

uint64_t WebCore::TextExtraction::extractItem@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  BOOL v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  WebCore::ScrollView *v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t i;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  WebCore::Node *v37;
  int v38;
  WTF *v39;
  unsigned int v40;
  WTF *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  WebCore::Node *v45;
  WebCore::Node *v46;
  uint64_t v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF *v57;
  WTF *v58;
  WebCore::Node *v59;
  WTF::StringImpl *v60;
  char v61;
  WTF *v62;
  WTF *v63;
  WebCore::Node *v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  char *v70;
  uint64_t v71;
  int v72;
  unsigned int *v73;
  WebCore::Node *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  WTF::StringImpl *v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  WTF::StringImpl *v88;
  WTF *v89;
  char v90;
  WTF *v91;
  uint64_t v92;
  WTF *v93;
  WebCore::Node *v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unsigned int v99;
  WebCore::Node **v100;
  WebCore::Node *v101;
  int v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  WTF::StringImpl **v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl **v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl **v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  void *v126;
  WebCore::Node *v127;
  WebCore::Node *v128;
  WTF::StringImpl *v129;
  WebCore::Node *v130;
  uint64_t v131;
  WebCore::Node *v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  unsigned int v135;
  unsigned int v136;
  _QWORD *v137;
  WTF *v138;
  uint64_t v139;
  unsigned int v140;
  WTF *v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  WTF *v145;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  char v151;
  uint64_t v152;
  int v153;
  char v154;
  uint64_t v155;
  int v156;
  char v157;
  uint64_t v158;
  int v159;
  char v160;
  uint64_t v161;
  int v162;
  char v163;
  __int16 v164;
  char v165;
  WebCore::Node *v166;
  int v167;
  WebCore::Node *v168;
  int v169;
  WebCore::Node *v170;
  int v171;
  WebCore::Node *v172;
  int v173;
  char v174;
  WebCore::Node *v175;
  __int128 v176;
  char v177;
  int v178;
  char v179;
  WTF::StringImpl *v180;
  uint64_t v181;
  WebCore::Node *v182;
  int v183;
  char v184;
  uint64_t v185;
  int v186;
  char v187;
  uint64_t v188;
  int v189;
  char v190;
  WebCore::Node *v191;
  int v192;
  unsigned int v193;
  char v194;

  *(_BYTE *)a3 = 0;
  *(_DWORD *)(a3 + 80) = 0;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  v3 = a2[20];
  if (v3)
    v4 = *(_BYTE *)(v3 + 144) == 0;
  else
    v4 = 0;
  if (!v4)
    return result;
  v5 = (unsigned int *)(v3 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(v3 + 296);
  if (!v7)
    goto LABEL_328;
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *(_QWORD *)(v7 + 1272);
  if (!v8)
    goto LABEL_326;
  if ((*(_WORD *)(v8 + 28) & 0x10) == 0)
    goto LABEL_326;
  if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    goto LABEL_326;
  v9 = *(_QWORD *)(v8 + 80);
  if (!v9)
    goto LABEL_326;
  while ((*(_WORD *)(v9 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    v9 = *(_QWORD *)(v9 + 56);
    if (!v9)
      goto LABEL_326;
  }
  v139 = result;
  *(_DWORD *)(v9 + 24) += 2;
  WebCore::Document::updateLayout(v7, 2u, 0);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 528);
  v11 = 0.0;
  if (v10 && (v12 = *(_QWORD *)(v10 + 8)) != 0)
  {
    v13 = *(WebCore::ScrollView **)(v12 + 288);
    v14 = 0.0;
    v15 = 0.0;
    v16 = 0.0;
    if (v13)
    {
      v17 = *(_QWORD *)(v9 + 64);
      v18 = *((_DWORD *)v13 + 2);
      *((_DWORD *)v13 + 2) = v18 + 1;
      if ((v17 & 0xFFFFFFFFFFFFLL) != 0)
      {
        v147 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)(v17 & 0xFFFFFFFFFFFFLL), 1, 0);
        v148 = v19;
        v20 = WebCore::ScrollView::contentsToRootView(v13, (const WebCore::IntRect *)&v147);
        v16 = (float)(int)v20;
        v15 = (float)SHIDWORD(v20);
        v11 = (float)v21;
        v14 = (float)v22;
        v18 = *((_DWORD *)v13 + 2) - 1;
      }
      if (v18)
        *((_DWORD *)v13 + 2) = v18;
      else
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  else
  {
    v14 = 0.0;
    v15 = 0.0;
    v16 = 0.0;
  }
  *(float *)(a3 + 88) = v16;
  *(float *)(a3 + 92) = v15;
  *(float *)(a3 + 96) = v11;
  *(float *)(a3 + 100) = v14;
  v23 = *(_QWORD *)(v7 + 1272);
  if (v23
    && (*(_WORD *)(v23 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v23 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    for (i = *(_QWORD *)(v23 + 80); i; i = *(_QWORD *)(i + 56))
    {
      if ((*(_WORD *)(i + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        break;
      }
    }
  }
  else
  {
    i = 0;
  }
  *(_DWORD *)(i + 24) += 4;
  v25 = *(_WORD *)(i + 28);
  if ((v25 & 1) != 0)
  {
    v27 = *(_QWORD *)(i + 80);
    if (v27)
      LODWORD(v27) = *(_DWORD *)(v27 + 4);
  }
  else if ((v25 & 4) != 0 && (v26 = *(_QWORD *)(i + 80)) != 0)
  {
    LODWORD(v27) = 0;
    do
    {
      LODWORD(v27) = v27 + 1;
      v26 = *(_QWORD *)(v26 + 56);
    }
    while (v26);
  }
  else
  {
    LODWORD(v27) = 0;
  }
  v166 = (WebCore::Node *)i;
  v167 = 0;
  v168 = (WebCore::Node *)i;
  v169 = v27;
  v28 = *(_QWORD *)(v7 + 3064);
  v29 = *(_QWORD *)(v28 + 56);
  if (v29)
    *(_DWORD *)(v29 + 24) += 2;
  v147 = v29;
  LODWORD(v148) = *(_DWORD *)(v28 + 64);
  BYTE4(v148) = *(_BYTE *)(v28 + 68);
  v30 = *(_QWORD *)(v28 + 72);
  if (v30)
    *(_DWORD *)(v30 + 24) += 2;
  v149 = v30;
  v150 = *(_DWORD *)(v28 + 80);
  v151 = *(_BYTE *)(v28 + 84);
  v31 = *(_QWORD *)(v28 + 88);
  if (v31)
    *(_DWORD *)(v31 + 24) += 2;
  v152 = v31;
  v153 = *(_DWORD *)(v28 + 96);
  v154 = *(_BYTE *)(v28 + 100);
  v32 = *(_QWORD *)(v28 + 104);
  if (v32)
    *(_DWORD *)(v32 + 24) += 2;
  v155 = v32;
  v156 = *(_DWORD *)(v28 + 112);
  v157 = *(_BYTE *)(v28 + 116);
  v33 = *(_QWORD *)(v28 + 120);
  if (v33)
    *(_DWORD *)(v33 + 24) += 2;
  v158 = v33;
  v159 = *(_DWORD *)(v28 + 128);
  v160 = *(_BYTE *)(v28 + 132);
  v34 = *(_QWORD *)(v28 + 136);
  if (v34)
    *(_DWORD *)(v34 + 24) += 2;
  v161 = v34;
  v162 = *(_DWORD *)(v28 + 144);
  v163 = *(_BYTE *)(v28 + 148);
  v164 = *(_WORD *)(v28 + 152);
  v165 = *(_BYTE *)(v28 + 154);
  if (HIBYTE(v164) == 2)
  {
    if (v33)
      *(_DWORD *)(v33 + 24) += 2;
    v188 = v33;
    v189 = v159;
    v190 = v160;
    if (v34)
      *(_DWORD *)(v34 + 24) += 2;
    v185 = v34;
    v186 = v162;
    v187 = v163;
    *(_DWORD *)(i + 24) += 2;
    WebCore::makeBoundaryPoint(&v188, (uint64_t)&v175);
    if (BYTE8(v176))
    {
      v180 = (WTF::StringImpl *)i;
      LODWORD(v181) = 0;
      v182 = v175;
      v183 = v176;
      v184 = 1;
    }
    else
    {
      LOBYTE(v180) = 0;
      v184 = 0;
      if (*(_DWORD *)(i + 24) == 2)
      {
        if ((*(_WORD *)(i + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)i, v35);
      }
      else
      {
        *(_DWORD *)(i + 24) -= 2;
      }
    }
    WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>(&v188, &v185, (uint64_t)&v175);
    WebCore::makeBoundaryPoint(&v185, (uint64_t)&v191);
    v37 = v168;
    v38 = *((_DWORD *)v168 + 6);
    *((_DWORD *)v168 + 6) = v38 + 2;
    if (v194)
    {
      v170 = v191;
      v171 = v192;
      v172 = v37;
      v173 = v169;
      v174 = 1;
    }
    else
    {
      LOBYTE(v170) = 0;
      v174 = 0;
      if (v38)
      {
        *((_DWORD *)v37 + 6) = v38;
      }
      else if ((*((_WORD *)v37 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v37, v36);
      }
    }
    if (v184 && v179 && v174)
    {
      WebCore::TextExtraction::collectText((WebCore::TextExtraction *)&v191, (const WebCore::SimpleRange *)&v180);
      if (!v179
        || (v39 = v191,
            v40 = v193,
            WebCore::TextExtraction::collectText((WebCore::TextExtraction *)&v191, (const WebCore::SimpleRange *)&v175),
            !v174))
      {
        __break(1u);
LABEL_368:
        v180 = 0;
        goto LABEL_371;
      }
      v41 = v191;
      v42 = v193;
      WebCore::TextExtraction::collectText((WebCore::TextExtraction *)&v191, (const WebCore::SimpleRange *)&v170);
      v43 = 0;
      v141 = v191;
      v44 = v193;
    }
    else
    {
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v141 = 0;
      v44 = 0;
      v43 = 1;
    }
    if (v174)
    {
      v45 = v172;
      v172 = 0;
      if (v45)
      {
        if (*((_DWORD *)v45 + 6) == 2)
        {
          if ((*((_WORD *)v45 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v45, v36);
        }
        else
        {
          *((_DWORD *)v45 + 6) -= 2;
        }
      }
      v46 = v170;
      v170 = 0;
      if (v46)
      {
        if (*((_DWORD *)v46 + 6) == 2)
        {
          if ((*((_WORD *)v46 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v46, v36);
        }
        else
        {
          *((_DWORD *)v46 + 6) -= 2;
        }
      }
    }
    if (v179)
    {
      v47 = *((_QWORD *)&v176 + 1);
      *((_QWORD *)&v176 + 1) = 0;
      if (v47)
      {
        if (*(_DWORD *)(v47 + 24) == 2)
        {
          if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v47, v36);
        }
        else
        {
          *(_DWORD *)(v47 + 24) -= 2;
        }
      }
      v48 = v175;
      v175 = 0;
      if (v48)
      {
        if (*((_DWORD *)v48 + 6) == 2)
        {
          if ((*((_WORD *)v48 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v48, v36);
        }
        else
        {
          *((_DWORD *)v48 + 6) -= 2;
        }
      }
    }
    if (v184)
    {
      v49 = v182;
      v182 = 0;
      if (v49)
      {
        if (*((_DWORD *)v49 + 6) == 2)
        {
          if ((*((_WORD *)v49 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v49, v36);
        }
        else
        {
          *((_DWORD *)v49 + 6) -= 2;
        }
      }
      v50 = v180;
      v180 = 0;
      if (v50)
      {
        if (*((_DWORD *)v50 + 6) == 2)
        {
          if ((*((_WORD *)v50 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v50, v36);
        }
        else
        {
          *((_DWORD *)v50 + 6) -= 2;
        }
      }
    }
    v51 = v185;
    v185 = 0;
    if (v51)
    {
      if (*(_DWORD *)(v51 + 24) == 2)
      {
        if ((*(_WORD *)(v51 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v51, v36);
      }
      else
      {
        *(_DWORD *)(v51 + 24) -= 2;
      }
    }
    v52 = v188;
    v188 = 0;
    if (v52)
    {
      if (*(_DWORD *)(v52 + 24) == 2)
      {
        if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v52, v36);
      }
      else
      {
        *(_DWORD *)(v52 + 24) -= 2;
      }
    }
    if (!v43)
      goto LABEL_115;
    WebCore::TextExtraction::collectText((WebCore::TextExtraction *)&v180, (const WebCore::SimpleRange *)&v166);
    if (v40)
    {
      v53 = 16 * v40;
      v54 = (WTF::StringImpl **)((char *)v39 + 8);
      do
      {
        v55 = *v54;
        *v54 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v36);
          else
            *(_DWORD *)v55 -= 2;
        }
        v56 = (uint64_t)*(v54 - 1);
        *(v54 - 1) = 0;
        if (v56)
        {
          if (*(_DWORD *)(v56 + 24) == 2)
          {
            if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v56, v36);
          }
          else
          {
            *(_DWORD *)(v56 + 24) -= 2;
          }
        }
        v54 += 2;
        v53 -= 16;
      }
      while (v53);
    }
    if (v39)
      WTF::fastFree(v39, v36);
  }
  else
  {
    WebCore::TextExtraction::collectText((WebCore::TextExtraction *)&v180, (const WebCore::SimpleRange *)&v166);
    v41 = 0;
    v42 = 0;
    v141 = 0;
    v44 = 0;
  }
  v39 = v180;
  v40 = HIDWORD(v181);
LABEL_115:
  v175 = 0;
  v142 = v40;
  if (v40)
  {
    v57 = (WTF *)((char *)v39 + 16 * v40);
    v58 = v39;
    do
    {
      v59 = *(WebCore::Node **)v58;
      *((_DWORD *)v59 + 6) = *(_DWORD *)(*(_QWORD *)v58 + 24) + 2;
      v191 = v59;
      v60 = (WTF::StringImpl *)*((_QWORD *)v58 + 1);
      if (v60)
        *(_DWORD *)v60 += 2;
      v180 = v60;
      LOBYTE(v181) = 0;
      LOBYTE(v183) = 0;
      WTF::HashMap<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,std::pair<WTF::String,std::optional<WebCore::CharacterRange>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashTraits<std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>,WTF::HashTableTraits>::add<std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>((WTF::StringImpl *)&v170, (uint64_t *)&v175, (uint64_t *)&v191, (uint64_t *)&v180);
      if (v180)
      {
        if (*(_DWORD *)v180 == 2)
          WTF::StringImpl::destroy(v180, (WTF::StringImpl *)v36);
        else
          *(_DWORD *)v180 -= 2;
      }
      if (v191)
      {
        if (*((_DWORD *)v191 + 6) == 2)
        {
          if ((*((_WORD *)v191 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v191, v36);
        }
        else
        {
          *((_DWORD *)v191 + 6) -= 2;
        }
      }
      v58 = (WTF *)((char *)v58 + 16);
    }
    while (v58 != v57);
  }
  v138 = v39;
  v144 = v7;
  v145 = v41;
  v143 = v42;
  if (v42)
  {
    v61 = 0;
    v62 = v41;
    v63 = (WTF *)((char *)v41 + 16 * v143);
    v140 = v44;
    while (1)
    {
      v64 = *(WebCore::Node **)v62;
      if ((v61 & 1) == 0 && v175)
      {
        v65 = *((_DWORD *)v175 - 2);
        v66 = ((unint64_t)v64 + ~((_QWORD)v64 << 32)) ^ (((unint64_t)v64 + ~((_QWORD)v64 << 32)) >> 22);
        v67 = 9 * ((v66 + ~(v66 << 13)) ^ ((v66 + ~(v66 << 13)) >> 8));
        v68 = (v67 ^ (v67 >> 15)) + ~((v67 ^ (v67 >> 15)) << 27);
        v69 = v65 & ((v68 >> 31) ^ v68);
        v70 = (char *)v175 + 40 * v69;
        v71 = *(_QWORD *)v70;
        if (*(WebCore::Node **)v70 != v64)
        {
          v72 = 1;
          while (v71)
          {
            v69 = (v69 + v72) & v65;
            v70 = (char *)v175 + 40 * v69;
            v71 = *(_QWORD *)v70;
            ++v72;
            if (*(WebCore::Node **)v70 == v64)
              goto LABEL_140;
          }
          v70 = (char *)v175 + 40 * *((unsigned int *)v175 - 1);
        }
LABEL_140:
        if (v70 != (char *)v175 + 40 * *((unsigned int *)v175 - 1) && *(WebCore::Node **)v70 == v64)
          break;
      }
      *((_DWORD *)v64 + 6) += 2;
      v191 = v64;
      v73 = (unsigned int *)*((_QWORD *)v62 + 1);
      if (v73)
      {
        v74 = (WebCore::Node *)v73[1];
        *v73 += 2;
      }
      else
      {
        v74 = 0;
      }
      v180 = (WTF::StringImpl *)v73;
      v181 = 0;
      v182 = v74;
      LOBYTE(v183) = 1;
      WTF::HashMap<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,std::pair<WTF::String,std::optional<WebCore::CharacterRange>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashTraits<std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>,WTF::HashTableTraits>::add<std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>((WTF::StringImpl *)&v170, (uint64_t *)&v175, (uint64_t *)&v191, (uint64_t *)&v180);
      if (v180)
      {
        if (*(_DWORD *)v180 == 2)
          WTF::StringImpl::destroy(v180, (WTF::StringImpl *)v36);
        else
          *(_DWORD *)v180 -= 2;
      }
      if (v191)
      {
        if (*((_DWORD *)v191 + 6) == 2)
        {
          if ((*((_WORD *)v191 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v191, v36);
        }
        else
        {
          *((_DWORD *)v191 + 6) -= 2;
        }
      }
LABEL_150:
      v62 = (WTF *)((char *)v62 + 16);
      v61 = 1;
      if (v62 == v63)
        goto LABEL_200;
    }
    v75 = (WTF::StringImpl *)*((_QWORD *)v70 + 1);
    if (v75)
      *(_DWORD *)v75 += 2;
    v76 = *((_QWORD *)v62 + 1);
    if (v76)
      *(_DWORD *)v76 += 2;
    if (v75)
    {
      v77 = *((_DWORD *)v75 + 1);
      if (v76)
      {
LABEL_158:
        v78 = *(_DWORD *)(v76 + 4);
LABEL_159:
        if ((v78 | v77) < 0)
          goto LABEL_368;
        v79 = (v77 + v78);
        if (__OFADD__(v77, v78))
          goto LABEL_368;
        if (v75)
        {
          v80 = *((_DWORD *)v75 + 4);
          v81 = (v80 >> 2) & 1;
          if (v76 && (v80 & 4) != 0)
            goto LABEL_164;
        }
        else
        {
          if (v76)
          {
LABEL_164:
            v81 = (*(unsigned __int8 *)(v76 + 16) >> 2) & 1;
            goto LABEL_165;
          }
          v81 = 1;
        }
LABEL_165:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v79, v81, (uint64_t)v75, v76, &v180);
        v82 = v180;
        if (!v180)
          goto LABEL_371;
        v83 = (unsigned int *)*((_QWORD *)v70 + 1);
        if (v83)
          v84 = v83[1];
        else
          v84 = 0;
        v85 = *((_QWORD *)v62 + 1);
        if (v85)
          v86 = *(unsigned int *)(v85 + 4);
        else
          v86 = 0;
        v180 = 0;
        *((_QWORD *)v70 + 1) = v82;
        if (v83)
        {
          if (*v83 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v83, (WTF::StringImpl *)v36);
          else
            *v83 -= 2;
        }
        v87 = v70[32];
        *((_QWORD *)v70 + 2) = v84;
        *((_QWORD *)v70 + 3) = v86;
        if (!v87)
          v70[32] = 1;
        v88 = v180;
        v180 = 0;
        v41 = v145;
        if (v88)
        {
          if (*(_DWORD *)v88 == 2)
          {
            WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v36);
            if (v76)
            {
LABEL_179:
              if (*(_DWORD *)v76 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v76, (WTF::StringImpl *)v36);
              else
                *(_DWORD *)v76 -= 2;
            }
LABEL_181:
            if (v75)
            {
              if (*(_DWORD *)v75 == 2)
                WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v36);
              else
                *(_DWORD *)v75 -= 2;
            }
            v44 = v140;
            goto LABEL_150;
          }
          *(_DWORD *)v88 -= 2;
        }
        if (v76)
          goto LABEL_179;
        goto LABEL_181;
      }
    }
    else
    {
      v77 = 0;
      if (v76)
        goto LABEL_158;
    }
    v78 = 0;
    goto LABEL_159;
  }
LABEL_200:
  v89 = v141;
  if (!v44)
    goto LABEL_270;
  v90 = 0;
  v91 = v141;
  v92 = v44;
  v93 = (WTF *)((char *)v141 + 16 * v44);
  do
  {
    v94 = *(WebCore::Node **)v91;
    if ((v90 & 1) == 0 && v175)
    {
      v95 = *((_DWORD *)v175 - 2);
      v96 = ((unint64_t)v94 + ~((_QWORD)v94 << 32)) ^ (((unint64_t)v94 + ~((_QWORD)v94 << 32)) >> 22);
      v97 = 9 * ((v96 + ~(v96 << 13)) ^ ((v96 + ~(v96 << 13)) >> 8));
      v98 = (v97 ^ (v97 >> 15)) + ~((v97 ^ (v97 >> 15)) << 27);
      v99 = v95 & ((v98 >> 31) ^ v98);
      v100 = (WebCore::Node **)((char *)v175 + 40 * v99);
      v101 = *v100;
      if (*v100 != v94)
      {
        v102 = 1;
        while (v101)
        {
          v99 = (v99 + v102) & v95;
          v100 = (WebCore::Node **)((char *)v175 + 40 * v99);
          v101 = *v100;
          ++v102;
          if (*v100 == v94)
            goto LABEL_210;
        }
        v100 = (WebCore::Node **)((char *)v175 + 40 * *((unsigned int *)v175 - 1));
      }
LABEL_210:
      if (v100 != (WebCore::Node **)((char *)v175 + 40 * *((unsigned int *)v175 - 1)) && *v100 == v94)
      {
        v104 = v100[1];
        if (v104)
          *(_DWORD *)v104 += 2;
        v105 = *((_QWORD *)v91 + 1);
        if (v105)
          *(_DWORD *)v105 += 2;
        if (v104)
        {
          v106 = *((_DWORD *)v104 + 1);
          if (v105)
          {
LABEL_228:
            v107 = *(_DWORD *)(v105 + 4);
LABEL_229:
            if ((v107 | v106) < 0 || (v108 = (v106 + v107), __OFADD__(v106, v107)))
            {
              v180 = 0;
LABEL_371:
              __break(0xC471u);
              JUMPOUT(0x1960B55ACLL);
            }
            if (v104)
            {
              v109 = *((_DWORD *)v104 + 4);
              v110 = (v109 >> 2) & 1;
              if (v105 && (v109 & 4) != 0)
                goto LABEL_234;
            }
            else
            {
              if (v105)
              {
LABEL_234:
                v110 = (*(unsigned __int8 *)(v105 + 16) >> 2) & 1;
                goto LABEL_235;
              }
              v110 = 1;
            }
LABEL_235:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v108, v110, (uint64_t)v104, v105, &v180);
            v111 = v180;
            if (!v180)
              goto LABEL_371;
            v180 = 0;
            v112 = v100[1];
            v100[1] = v111;
            if (v112)
            {
              if (*(_DWORD *)v112 == 2)
              {
                WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v36);
                v113 = v180;
                v180 = 0;
                if (v113)
                {
                  if (*(_DWORD *)v113 == 2)
                    WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v36);
                  else
                    *(_DWORD *)v113 -= 2;
                }
              }
              else
              {
                *(_DWORD *)v112 -= 2;
                v180 = 0;
              }
            }
            if (v105)
            {
              if (*(_DWORD *)v105 == 2)
              {
                WTF::StringImpl::destroy((WTF::StringImpl *)v105, (WTF::StringImpl *)v36);
                if (!v104)
                  goto LABEL_220;
                goto LABEL_243;
              }
              *(_DWORD *)v105 -= 2;
            }
            if (!v104)
              goto LABEL_220;
LABEL_243:
            if (*(_DWORD *)v104 == 2)
              WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v36);
            else
              *(_DWORD *)v104 -= 2;
            goto LABEL_220;
          }
        }
        else
        {
          v106 = 0;
          if (v105)
            goto LABEL_228;
        }
        v107 = 0;
        goto LABEL_229;
      }
    }
    *((_DWORD *)v94 + 6) += 2;
    v191 = v94;
    v103 = (WTF::StringImpl *)*((_QWORD *)v91 + 1);
    if (v103)
      *(_DWORD *)v103 += 2;
    v180 = v103;
    LOBYTE(v181) = 0;
    LOBYTE(v183) = 0;
    WTF::HashMap<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,std::pair<WTF::String,std::optional<WebCore::CharacterRange>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashTraits<std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>,WTF::HashTableTraits>::add<std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>((WTF::StringImpl *)&v170, (uint64_t *)&v175, (uint64_t *)&v191, (uint64_t *)&v180);
    if (v180)
    {
      if (*(_DWORD *)v180 == 2)
        WTF::StringImpl::destroy(v180, (WTF::StringImpl *)v36);
      else
        *(_DWORD *)v180 -= 2;
    }
    if (v191)
    {
      if (*((_DWORD *)v191 + 6) == 2)
      {
        if ((*((_WORD *)v191 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v191, v36);
      }
      else
      {
        *((_DWORD *)v191 + 6) -= 2;
      }
    }
LABEL_220:
    v91 = (WTF *)((char *)v91 + 16);
    v90 = 1;
  }
  while (v91 != v93);
  v114 = 16 * v92;
  v89 = v141;
  v115 = (WTF::StringImpl **)((char *)v141 + 8);
  v7 = v144;
  v41 = v145;
  do
  {
    v116 = *v115;
    *v115 = 0;
    if (v116)
    {
      if (*(_DWORD *)v116 == 2)
        WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v36);
      else
        *(_DWORD *)v116 -= 2;
    }
    v117 = (uint64_t)*(v115 - 1);
    *(v115 - 1) = 0;
    if (v117)
    {
      if (*(_DWORD *)(v117 + 24) == 2)
      {
        if ((*(_WORD *)(v117 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v117, v36);
      }
      else
      {
        *(_DWORD *)(v117 + 24) -= 2;
      }
    }
    v115 += 2;
    v114 -= 16;
  }
  while (v114);
LABEL_270:
  if (v89)
    WTF::fastFree(v89, v36);
  if (v143)
  {
    v118 = 16 * v143;
    v119 = (WTF::StringImpl **)((char *)v41 + 8);
    do
    {
      v120 = *v119;
      *v119 = 0;
      if (v120)
      {
        if (*(_DWORD *)v120 == 2)
          WTF::StringImpl::destroy(v120, (WTF::StringImpl *)v36);
        else
          *(_DWORD *)v120 -= 2;
      }
      v121 = (uint64_t)*(v119 - 1);
      *(v119 - 1) = 0;
      if (v121)
      {
        if (*(_DWORD *)(v121 + 24) == 2)
        {
          if ((*(_WORD *)(v121 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v121, v36);
        }
        else
        {
          *(_DWORD *)(v121 + 24) -= 2;
        }
      }
      v119 += 2;
      v118 -= 16;
    }
    while (v118);
  }
  if (v41)
    WTF::fastFree(v41, v36);
  if (v142)
  {
    v122 = 16 * v142;
    v123 = (WTF::StringImpl **)((char *)v138 + 8);
    do
    {
      v124 = *v123;
      *v123 = 0;
      if (v124)
      {
        if (*(_DWORD *)v124 == 2)
          WTF::StringImpl::destroy(v124, (WTF::StringImpl *)v36);
        else
          *(_DWORD *)v124 -= 2;
      }
      v125 = (uint64_t)*(v123 - 1);
      *(v123 - 1) = 0;
      if (v125)
      {
        if (*(_DWORD *)(v125 + 24) == 2)
        {
          if ((*(_WORD *)(v125 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v125, v36);
        }
        else
        {
          *(_DWORD *)(v125 + 24) -= 2;
        }
      }
      v123 += 2;
      v122 -= 16;
    }
    while (v122);
  }
  if (v138)
    WTF::fastFree(v138, v36);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v147);
  v127 = v168;
  v168 = 0;
  if (v127)
  {
    if (*((_DWORD *)v127 + 6) == 2)
    {
      if ((*((_WORD *)v127 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v127, v126);
    }
    else
    {
      *((_DWORD *)v127 + 6) -= 2;
    }
  }
  v128 = v166;
  v166 = 0;
  if (v128)
  {
    if (*((_DWORD *)v128 + 6) == 2)
    {
      if ((*((_WORD *)v128 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v128, v126);
    }
    else
    {
      *((_DWORD *)v128 + 6) -= 2;
    }
  }
  v176 = *(_OWORD *)v139;
  v177 = *(_BYTE *)(v139 + 16);
  v178 = 0;
  WebCore::TextExtraction::extractRecursive(v9, a3);
  v130 = v175;
  if (v175)
  {
    v131 = *((unsigned int *)v175 - 1);
    if ((_DWORD)v131)
    {
      v132 = v175;
      do
      {
        v133 = *(_QWORD *)v132;
        if (*(_QWORD *)v132 != -1)
        {
          v134 = (WTF::StringImpl *)*((_QWORD *)v132 + 1);
          *((_QWORD *)v132 + 1) = 0;
          if (v134)
          {
            if (*(_DWORD *)v134 == 2)
            {
              WTF::StringImpl::destroy(v134, v129);
              v133 = *(_QWORD *)v132;
            }
            else
            {
              *(_DWORD *)v134 -= 2;
            }
          }
          *(_QWORD *)v132 = 0;
          if (v133)
          {
            if (*(_DWORD *)(v133 + 24) == 2)
            {
              if ((*(_WORD *)(v133 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v133, v129);
            }
            else
            {
              *(_DWORD *)(v133 + 24) -= 2;
            }
          }
        }
        v132 = (WebCore::Node *)((char *)v132 + 40);
        --v131;
      }
      while (v131);
    }
    WTF::fastFree((WebCore::Node *)((char *)v130 - 16), v129);
  }
  result = WebCore::TextExtraction::pruneRedundantItemsRecursive(a3, v129);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
LABEL_326:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  do
  {
LABEL_328:
    v135 = __ldaxr(v5);
    v136 = v135 - 1;
  }
  while (__stlxr(v136, v5));
  if (!v136)
  {
    atomic_store(1u, v5);
    v137 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v137 = off_1E31FE290;
    v137[1] = v5;
    v147 = (unint64_t)v137;
    WTF::ensureOnMainThread();
    result = v147;
    v147 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void WebCore::TextExtraction::extractRecursive(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  int v9;
  char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  __int128 v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  _BOOL4 v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  _DWORD *v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  WTF *v77;
  WTF *v79;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  char *v85;
  WTF *v86;
  WTF *v88;
  int v90;
  unsigned int v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t *v106;
  unsigned int v107;
  uint64_t v108;
  BOOL v109;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  WTF *v127;
  uint64_t v128;
  BOOL v129;
  WTF::StringImpl *v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  int v141;
  WTF::StringBuilder *v142;
  __n128 v143;
  int v144;
  __int16 v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  unint64_t v151;
  int v152;
  unint64_t v153;
  int v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  WebCore::Node *v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _DWORD *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  _DWORD *v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  char *v179;
  int v180;
  char v181;
  char *v182;
  _BYTE v183[40];
  float32x2_t *v184;
  char v185;
  char v186;
  _QWORD *v187;
  int v188;
  _QWORD v189[545];
  _BYTE v190[9];
  __int128 v191;
  __int128 v192;
  unsigned __int8 v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  unsigned __int8 v196;
  float32x2_t v197;
  int v198;
  unsigned int v199;
  __int128 v200;
  uint64_t v201;
  _DWORD *v202;
  char v203[24];
  char v204;
  unsigned int v205;
  __int128 v206;
  WTF *v207;
  uint64_t v208;
  unsigned __int8 v209;
  WTF::StringImpl *v210[2];
  WTF::StringImpl *v211;
  _BYTE v212[48];
  char v213;
  char v214;
  unsigned int v215;
  __int128 v216;
  WTF *v217;
  uint64_t v218;
  uint64_t v219;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = v3;
  v7 = v2;
  v219 = *MEMORY[0x1E0C80C00];
  v197.i8[0] = 0;
  v209 = 0;
  LOBYTE(v194) = 0;
  v196 = 0;
  *(_WORD *)v190 = 0;
  v193 = 0;
  v8 = (char *)(*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL);
  if (!v8)
    goto LABEL_4;
  v9 = *(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
  *(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v9;
  if ((v8[45] & 2) != 0)
  {
    v10 = *(char **)(*((_QWORD *)v8 + 4) + 8);
    if (*(float *)(*(_QWORD *)(*((_QWORD *)v10 + 11) + 32) + 4) < 0.05)
      goto LABEL_4;
LABEL_6:
    if ((*(_BYTE *)(*((_QWORD *)v10 + 13) + 239) & 4) != 0 || (*((_DWORD *)v10 + 30) & 0x30) == 0x10)
      goto LABEL_8;
    v11 = *(_WORD *)(v2 + 28);
    if ((v11 & 2) != 0)
      v12 = v2;
    else
      v12 = 0;
    if ((v11 & 2) != 0)
    {
      *(_DWORD *)(v2 + 24) += 2;
      v13 = **(_QWORD **)(v2 + 40);
      if (v13)
      {
        if ((*(_WORD *)(v13 + 28) & 0x80) != 0)
        {
          v14 = *(_QWORD *)(v13 + 200);
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 8);
            if (v15)
            {
              if ((*(_WORD *)(v15 + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
              {
                v16 = *(_DWORD *)(v15 + 24);
                *(_DWORD *)(v15 + 24) = v16 + 2;
                v17 = *(_WORD *)(v15 + 232);
                if (v16)
                {
                  *(_DWORD *)(v15 + 24) = v16;
                }
                else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v15, v3);
                }
                if ((v17 & 0x4000) != 0)
                  goto LABEL_62;
              }
            }
          }
        }
      }
      v18 = *v5;
      if (!*v5)
        goto LABEL_62;
      v19 = *(_DWORD *)(v18 - 8);
      v20 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = v18 + 40 * v23;
      v25 = *(_BYTE **)v24;
      if (*(_QWORD *)v24 != v7)
      {
        v26 = 1;
        while (v25)
        {
          v23 = (v23 + v26) & v19;
          v24 = v18 + 40 * v23;
          v25 = *(_BYTE **)v24;
          ++v26;
          if (*(_QWORD *)v24 == v12)
            goto LABEL_29;
        }
        v24 = v18 + 40 * *(unsigned int *)(v18 - 4);
      }
LABEL_29:
      if (v24 != v18 + 40 * *(unsigned int *)(v18 - 4))
      {
        v27 = *(_OWORD *)(v24 + 16);
        v183[32] = *(_BYTE *)(v24 + 32);
        *(_OWORD *)&v183[16] = v27;
        v28 = *(_DWORD **)(v24 + 8);
        if (v28)
          *v28 += 2;
        v185 = 0;
        v186 = 0;
        *(_QWORD *)v183 = 0;
        *(_QWORD *)v212 = 0;
        *(_QWORD *)&v183[8] = 0;
        *(_QWORD *)&v212[8] = 0;
        *(_OWORD *)&v212[16] = *(_OWORD *)&v183[16];
        v184 = 0;
        *(_QWORD *)&v212[32] = *(_QWORD *)&v183[32];
        *(_QWORD *)&v212[40] = v28;
        v213 = 0;
        LOBYTE(v215) = 0;
        LODWORD(v216) = 1;
        DWORD2(v216) = 1;
        WebCore::TextExtraction::TextItemData::~TextItemData((WebCore::TextExtraction::TextItemData *)v183, (WTF::StringImpl *)v3);
        goto LABEL_63;
      }
      goto LABEL_62;
    }
    v12 = (v11 & 8) != 0 ? v2 : 0;
    if ((v11 & 8) == 0)
    {
LABEL_8:
      v212[0] = 0;
      DWORD2(v216) = 0;
      goto LABEL_67;
    }
    *(_DWORD *)(v2 + 24) += 2;
    if ((*(_WORD *)(v2 + 30) & 1) == 0)
      goto LABEL_61;
    v29 = *(_QWORD *)(v2 + 104);
    if (v29
      && ((v30 = *(_DWORD *)(v29 + 4), (v30 & 1) != 0)
        ? (v31 = *(_QWORD *)(v29 + 40), LODWORD(v32) = *(_DWORD *)(v29 + 52))
        : (v31 = v29 + 32, LODWORD(v32) = v30 >> 5),
          (_DWORD)v32))
    {
      v32 = v32;
      v33 = (WTF::StringImpl **)(v31 + 8);
      do
      {
        v34 = (uint64_t)*(v33 - 1);
        if (v34 == WebCore::HTMLNames::hrefAttr
          || *(_QWORD *)(v34 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
          && *(_QWORD *)(v34 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
        {
          goto LABEL_53;
        }
        v33 += 2;
        --v32;
      }
      while (v32);
      v33 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    }
    else
    {
      v33 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    }
LABEL_53:
    v35 = *v33;
    if (*v33)
    {
      v36 = *(_DWORD *)v35 + 2;
      *(_DWORD *)v35 = v36;
      v210[0] = v35;
      if (!*((_DWORD *)v35 + 1))
      {
        v210[0] = 0;
        goto LABEL_59;
      }
      WebCore::Document::completeURL(*(WebCore::Document **)(*(_QWORD *)(v12 + 40) + 8), v210, *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 848, 0, (WTF::URL *)v183);
      v37 = *(WTF::StringImpl **)v183;
      if (!*(_QWORD *)v183)
        goto LABEL_56;
      goto LABEL_244;
    }
    goto LABEL_61;
  }
  v10 = v8;
  if (*(float *)(*(_QWORD *)(*((_QWORD *)v8 + 11) + 32) + 4) >= 0.05)
    goto LABEL_6;
LABEL_4:
  v212[0] = 1;
  DWORD2(v216) = 0;
  while (1)
  {
    if (v8)
    {
      v9 = *((_DWORD *)v8 + 4);
LABEL_67:
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x1960B659CLL);
      }
      *((_DWORD *)v8 + 4) = v9 - 1;
    }
    *(_QWORD *)&v183[32] = v5;
    v184 = &v197;
    *(_QWORD *)v183 = v190;
    *(_QWORD *)&v183[8] = &v190[1];
    *(_QWORD *)&v183[16] = &v194;
    *(_QWORD *)&v183[24] = v7;
    if (DWORD2(v216) == -1)
      goto LABEL_254;
    v210[0] = (WTF::StringImpl *)v183;
    v12 = (uint64_t)v212;
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3404850[DWORD2(v216)])(v210, v212);
    if (DWORD2(v216) != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E34048D0[DWORD2(v216)])(v183, v212);
    if (v190[0])
      goto LABEL_73;
    v42 = v193 | v196;
    v43 = v42 != 0;
    if (v42)
    {
      v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 528);
      v45 = 0.0;
      if (v44 && (v46 = *(_QWORD *)(v44 + 8)) != 0)
      {
        v12 = *(_QWORD *)(v46 + 288);
        v47 = 0.0;
        v48 = 0.0;
        v49 = 0.0;
        if (v12)
        {
          v50 = *(_QWORD *)(v7 + 64);
          v51 = *(_DWORD *)(v12 + 8);
          *(_DWORD *)(v12 + 8) = v51 + 1;
          if ((v50 & 0xFFFFFFFFFFFFLL) != 0)
          {
            v211 = (WTF::StringImpl *)WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)(v50 & 0xFFFFFFFFFFFFLL), 1, 0);
            *(_QWORD *)v212 = v52;
            v53 = WebCore::ScrollView::contentsToRootView((WebCore::ScrollView *)v12, (const WebCore::IntRect *)&v211);
            v49 = (float)(int)v53;
            v48 = (float)SHIDWORD(v53);
            v45 = (float)(int)v3;
            v47 = (float)SHIDWORD(v3);
            v51 = *(_DWORD *)(v12 + 8) - 1;
          }
          if (v51)
            *(_DWORD *)(v12 + 8) = v51;
          else
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
      }
      else
      {
        v47 = 0.0;
        v48 = 0.0;
        v49 = 0.0;
      }
      if (!*((_BYTE *)v5 + 24)
        || (v54 = *((float *)v5 + 4), v54 > 0.0)
        && (v55 = *((float *)v5 + 5), v55 > 0.0)
        && v45 > 0.0
        && v47 > 0.0
        && (v56 = *((float *)v5 + 2), v56 < (float)(v45 + v49))
        && v49 < (float)(v54 + v56)
        && (v57 = *((float *)v5 + 3), v57 < (float)(v47 + v48))
        && v48 < (float)(v55 + v57))
      {
        v183[32] = 0;
        memset(v183, 0, 17);
        v58 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
        {
          *v58 += 2;
          v59 = *(_DWORD *)&v183[8];
          v60 = *(_DWORD *)&v183[12];
        }
        else
        {
          v60 = 0;
          v59 = 0;
        }
        v185 = 0;
        v186 = 0;
        *(_QWORD *)v183 = 0;
        *(_QWORD *)&v183[8] = 0;
        v211 = 0;
        *(_DWORD *)v212 = v59;
        *(_DWORD *)&v212[4] = v60;
        *(_OWORD *)&v212[8] = *(_OWORD *)&v183[16];
        v184 = 0;
        *(_QWORD *)&v212[24] = *(_QWORD *)&v183[32];
        *(_QWORD *)&v212[32] = v58;
        v212[40] = 0;
        v214 = 0;
        v215 = 1;
        v8 = (char *)&v216;
        *(_QWORD *)&v216 = __PAIR64__(LODWORD(v48), LODWORD(v49));
        *((_QWORD *)&v216 + 1) = __PAIR64__(LODWORD(v47), LODWORD(v45));
        v12 = (uint64_t)&v217;
        v218 = 0;
        v217 = 0;
        if (v209)
        {
          v210[0] = (WTF::StringImpl *)&v197;
          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_((uint64_t)v210, (uint64_t)&v197, (uint64_t *)&v211);
          v206 = v216;
          if (HIDWORD(v208))
          {
            v61 = 120 * HIDWORD(v208);
            v8 = (char *)v207 + 104;
            do
            {
              WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v3);
              v62 = *((unsigned int *)v8 - 6);
              if ((_DWORD)v62 != -1)
                ((void (*)(WTF::StringImpl **, char *))*(&off_1E3404870 + v62))(v210, v8 - 104);
              *((_DWORD *)v8 - 6) = -1;
              v8 += 120;
              v61 -= 120;
            }
            while (v61);
          }
          v63 = v207;
          if (v207)
          {
            v207 = 0;
            LODWORD(v208) = 0;
            WTF::fastFree(v63, v3);
          }
          v64 = v217;
          v217 = 0;
          v207 = v64;
          v65 = v218;
          v218 = 0;
          v208 = v65;
        }
        else
        {
          v211 = 0;
          v197 = 0;
          *(_QWORD *)v212 = 0;
          v198 = v59;
          v199 = v60;
          v200 = *(_OWORD *)&v183[16];
          *(_QWORD *)&v212[32] = 0;
          v201 = *(_QWORD *)&v183[32];
          v202 = v58;
          v203[0] = 0;
          v204 = 0;
          v205 = 1;
          v206 = v216;
          v207 = 0;
          v208 = 0;
          v209 = 1;
        }
        WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v217, v3);
        if (v215 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))*(&off_1E3404870 + v215))(v210, &v211);
        v215 = -1;
        WebCore::TextExtraction::TextItemData::~TextItemData((WebCore::TextExtraction::TextItemData *)v183, v66);
      }
      ++*((_DWORD *)v5 + 7);
    }
    if ((*(_WORD *)(v7 + 28) & 4) != 0)
    {
      *(_DWORD *)(v7 + 24) += 2;
      WebCore::ComposedTreeIterator::ComposedTreeIterator((uint64_t)&v211, v7);
      bzero(v183, 0x1258uLL);
      *(_QWORD *)&v183[8] = &v183[24];
      *(_QWORD *)&v183[32] = &v185;
      LODWORD(v184) = 16;
      v187 = v189;
      v188 = 16;
      v189[33] = -1;
      *(_QWORD *)&v183[16] = 0x100000008;
      v67 = *(unsigned int *)&v212[12];
      if (!*(_DWORD *)&v212[12])
      {
LABEL_423:
        __break(0xC471u);
        JUMPOUT(0x1960B6FACLL);
      }
      while (1)
      {
        if (!*(_DWORD *)&v183[20])
        {
          __break(0xC471u);
          JUMPOUT(0x1960B6FA4);
        }
        v68 = *(_QWORD *)v212 + 584 * v67 - 584;
        v69 = *(_QWORD *)&v183[8];
        if (*(_QWORD *)v68 == *(_QWORD *)(*(_QWORD *)&v183[8] + 584 * *(unsigned int *)&v183[20] - 584)
          || !*(_DWORD *)(v68 + 280) && !*(_DWORD *)(*(_QWORD *)&v183[8] + 584 * *(unsigned int *)&v183[20] - 304))
        {
          break;
        }
        WebCore::TextExtraction::extractRecursive();
        v67 = *(unsigned int *)&v212[12];
        if (!*(_DWORD *)&v212[12])
        {
          __break(0xC471u);
          JUMPOUT(0x1960B6FB4);
        }
        v70 = *(_QWORD *)v212 + 584 * *(unsigned int *)&v212[12] - 584;
        v71 = *(_QWORD *)v70;
        v72 = *(_QWORD *)(*(_QWORD *)v70 + 32);
        if (v72)
          v73 = (*(_WORD *)(v72 + 28) & 8) == 0;
        else
          v73 = 1;
        if (!v73 && (v74 = *(_QWORD *)(v72 + 72) & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)(v74 + 88))
        {
          WebCore::ComposedTreeIterator::traverseSiblingInSlot((WebCore::ComposedTreeIterator *)&v211, 1);
          v67 = *(unsigned int *)&v212[12];
          if (!*(_DWORD *)&v212[12])
            goto LABEL_423;
        }
        else
        {
          do
            v71 = *(_QWORD *)(v71 + 56);
          while (v71 && (*(_WORD *)(v71 + 28) & 0xA) == 0);
          *(_QWORD *)v70 = v71;
          if (!v67)
            goto LABEL_423;
        }
      }
      v8 = 0;
      v75 = 584 * *(unsigned int *)&v183[20];
      do
      {
        v76 = &v8[v69];
        v77 = *(WTF **)&v8[v69 + 296];
        if (&v8[v69 + 312] != (char *)v77 && v77 != 0)
        {
          *((_QWORD *)v76 + 37) = 0;
          *((_DWORD *)v76 + 76) = 0;
          v81 = v69;
          WTF::fastFree(v77, v3);
          v69 = v81;
        }
        v79 = (WTF *)*((_QWORD *)v76 + 1);
        if (v76 + 24 != (char *)v79 && v79 != 0)
        {
          *((_QWORD *)v76 + 1) = 0;
          *(_DWORD *)&v8[v69 + 16] = 0;
          v82 = v69;
          WTF::fastFree(v79, v3);
          v69 = v82;
        }
        v8 += 584;
      }
      while ((char *)v75 != v8);
      v83 = *(WTF **)&v183[8];
      if (&v183[24] != *(_BYTE **)&v183[8] && *(_QWORD *)&v183[8])
      {
        *(_QWORD *)&v183[8] = 0;
        *(_DWORD *)&v183[16] = 0;
        WTF::fastFree(v83, v3);
      }
      v12 = *(_QWORD *)v212;
      if (*(_DWORD *)&v212[12])
      {
        v8 = 0;
        v84 = 584 * *(unsigned int *)&v212[12];
        do
        {
          v85 = &v8[v12];
          v86 = *(WTF **)&v8[v12 + 296];
          if (&v8[v12 + 312] != (char *)v86 && v86 != 0)
          {
            *((_QWORD *)v85 + 37) = 0;
            *((_DWORD *)v85 + 76) = 0;
            WTF::fastFree(v86, v3);
          }
          v88 = (WTF *)*((_QWORD *)v85 + 1);
          if (v85 + 24 != (char *)v88 && v88 != 0)
          {
            *((_QWORD *)v85 + 1) = 0;
            *(_DWORD *)&v8[v12 + 16] = 0;
            WTF::fastFree(v88, v3);
          }
          v8 += 584;
        }
        while ((char *)v84 != v8);
        v12 = *(_QWORD *)v212;
      }
      if (&v212[16] != (_BYTE *)v12 && v12)
      {
        *(_QWORD *)v212 = 0;
        *(_DWORD *)&v212[8] = 0;
        WTF::fastFree((WTF *)v12, v3);
      }
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, v3);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    v90 = v209;
    if (!v43)
      goto LABEL_192;
    if (!v209)
      goto LABEL_191;
    if (!v193)
      break;
    if (v205 != 1)
      goto LABEL_254;
    v91 = v202;
    if (v202)
      v91 = v202[1];
    v92 = v91;
    v93 = *(WTF::StringImpl **)&v190[1];
    *(_QWORD *)&v190[1] = 0;
    *(_OWORD *)v212 = v191;
    *(_OWORD *)&v212[16] = v192;
    LODWORD(v191) = v191 & 0xFFFFFFFE;
    v211 = v93;
    *(_QWORD *)&v212[32] = 0;
    *(_QWORD *)&v212[40] = v92;
    if (v199 == v198)
    {
      v94 = WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v197, v199 + 1, (unint64_t)&v211);
      v95 = *(_QWORD *)&v197 + 56 * v199;
      v96 = *(_QWORD *)v94;
      *(_QWORD *)v94 = 0;
      *(_QWORD *)v95 = v96;
      v97 = *(_DWORD *)(v95 + 8) & 0xFFFFFFFE | *((_DWORD *)v94 + 2) & 1;
      *(_DWORD *)(v95 + 8) = v97;
      v98 = v97 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v94 + 2) >> 1) & 1));
      *(_DWORD *)(v95 + 8) = v98;
      v99 = v98 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v94 + 2) >> 2) & 1));
      *(_DWORD *)(v95 + 8) = v99;
      v100 = v99 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v94 + 2) >> 3) & 7));
      *(_DWORD *)(v95 + 8) = v100;
      *(_DWORD *)(v95 + 8) = *((_DWORD *)v94 + 2) & 0xFFFFFFC0 | v100 & 0x3F;
      *(_OWORD *)(v95 + 12) = *(_OWORD *)(v94 + 12);
      *(_QWORD *)(v95 + 28) = *(_QWORD *)(v94 + 28);
      *(_DWORD *)(v95 + 36) = *((_DWORD *)v94 + 9);
      *((_DWORD *)v94 + 2) &= ~1u;
      *(_OWORD *)(v95 + 40) = *(_OWORD *)(v94 + 40);
    }
    else
    {
      v101 = *(_QWORD *)&v197 + 56 * v199;
      v211 = 0;
      *(_QWORD *)v101 = v93;
      v102 = *(_DWORD *)(v101 + 8) & 0xFFFFFFFE | v212[0] & 1;
      *(_DWORD *)(v101 + 8) = v102;
      v103 = v102 & 0xFFFFFFFD | (2 * ((*(_DWORD *)v212 >> 1) & 1));
      *(_DWORD *)(v101 + 8) = v103;
      v104 = v103 & 0xFFFFFFFB | (4 * ((*(_DWORD *)v212 >> 2) & 1));
      *(_DWORD *)(v101 + 8) = v104;
      v105 = v104 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)v212 >> 3) & 7));
      *(_DWORD *)(v101 + 8) = v105;
      *(_DWORD *)(v101 + 8) = *(_DWORD *)v212 & 0xFFFFFFC0 | v105 & 0x3F;
      *(_OWORD *)(v101 + 12) = *(_OWORD *)&v212[4];
      *(_QWORD *)(v101 + 28) = *(_QWORD *)&v212[20];
      *(_DWORD *)(v101 + 36) = *(_DWORD *)&v212[28];
      *(_DWORD *)v212 &= ~1u;
      *(_OWORD *)(v101 + 40) = *(_OWORD *)&v212[32];
    }
    ++v199;
    v37 = v211;
    v211 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        v37 = (WTF::StringImpl *)WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v37 -= 2;
    }
    v90 = v209;
    if (!v196)
      goto LABEL_191;
    if (v209)
      goto LABEL_189;
    __break(1u);
LABEL_244:
    if (*((_DWORD *)v37 + 1))
    {
      *(_DWORD *)v37 += 2;
      *(_QWORD *)v212 = v37;
      *(_OWORD *)&v212[24] = *(_OWORD *)&v183[24];
      *(_OWORD *)&v212[8] = *(_OWORD *)&v183[8];
      DWORD2(v216) = 2;
      *(_QWORD *)v183 = 0;
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v37 -= 2;
      v130 = v210[0];
      v210[0] = 0;
      if (v130)
      {
        if (*(_DWORD *)v130 == 2)
          WTF::StringImpl::destroy(v130, (WTF::StringImpl *)v3);
        else
          *(_DWORD *)v130 -= 2;
      }
      goto LABEL_63;
    }
    *(_QWORD *)v183 = 0;
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v37 -= 2;
LABEL_56:
    v35 = v210[0];
    v210[0] = 0;
    if (v35)
    {
      v36 = *(_DWORD *)v35;
LABEL_59:
      v38 = v36 - 2;
      if (v38)
        *(_DWORD *)v35 = v38;
      else
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v3);
    }
LABEL_61:
    if (*((_DWORD *)v5 + 7))
    {
LABEL_62:
      v212[0] = 0;
      DWORD2(v216) = 0;
      goto LABEL_63;
    }
    v182 = v8;
    v128 = **(_QWORD **)(v12 + 40);
    if (v128)
      v129 = (*(_WORD *)(v128 + 28) & 0x80) == 0;
    else
      v129 = 1;
    if ((v129 || *(_BYTE *)(v128 + 193)) && WebCore::Node::isRootEditableElement((WebCore::Node *)v12))
    {
      memset(v212, 0, 18);
      DWORD2(v216) = 3;
LABEL_349:
      v8 = v182;
      goto LABEL_63;
    }
    v131 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v131 + 2;
    if ((*(_WORD *)(v7 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      v158 = *(_QWORD *)(v7 + 104);
      if (v158
        && ((v159 = *(_DWORD *)(v158 + 4), (v159 & 1) != 0)
          ? (v160 = *(_QWORD *)(v158 + 40), LODWORD(v161) = *(_DWORD *)(v158 + 52))
          : (v160 = v158 + 32, LODWORD(v161) = v159 >> 5),
            (_DWORD)v161))
      {
        v161 = v161;
        v163 = (_QWORD *)(v160 + 8);
        while (1)
        {
          v164 = *(v163 - 1);
          if (v164 == WebCore::HTMLNames::srcAttr
            || *(_QWORD *)(v164 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
            && *(_QWORD *)(v164 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
          {
            break;
          }
          v163 += 2;
          if (!--v161)
          {
            v163 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v163 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      }
      WebCore::Document::completeURL(*(WebCore::Document **)(*(_QWORD *)(v7 + 40) + 8), v163, *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 848, 0, (WTF::URL *)v183);
      WTF::URL::lastPathComponent((WTF::URL *)v183);
      if ((v165 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      v166 = (_DWORD *)*WebCore::HTMLImageElement::altText((WebCore::HTMLImageElement *)v7);
      if (v166)
        *v166 += 2;
      *(WTF::StringImpl **)v212 = v210[0];
      *(_QWORD *)&v212[8] = v166;
      LODWORD(v216) = 3;
      DWORD2(v216) = 1;
      v210[1] = 0;
      v210[0] = 0;
      v167 = *(WTF::StringImpl **)v183;
      *(_QWORD *)v183 = 0;
      if (v167)
      {
        if (*(_DWORD *)v167 == 2)
          WTF::StringImpl::destroy(v167, (WTF::StringImpl *)v3);
        else
          *(_DWORD *)v167 -= 2;
      }
      v144 = *(_DWORD *)(v7 + 24) - 2;
      if (*(_DWORD *)(v7 + 24) != 2)
      {
LABEL_325:
        *(_DWORD *)(v7 + 24) = v144;
        goto LABEL_349;
      }
      goto LABEL_305;
    }
    if (!v131)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) != 0)
      {
        v131 = 2;
      }
      else
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v3);
        v131 = *(_DWORD *)(v7 + 24);
      }
    }
    *(_DWORD *)(v7 + 24) = v131 + 2;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 872))(v7) & 1) == 0)
    {
      v133 = *(_DWORD *)(v7 + 24);
LABEL_284:
      v144 = v133 - 2;
      if (!v144)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) != 0)
        {
          v144 = 2;
        }
        else
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v7, v3);
          v144 = *(_DWORD *)(v7 + 24);
        }
      }
      *(_DWORD *)(v7 + 24) = v144 + 2;
      v145 = *(_WORD *)(v7 + 28);
      if ((v145 & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24))
      {
        v146 = v145 & 0x10;
        if (!v144)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) != 0)
          {
            v144 = 2;
          }
          else
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v7, v3);
            v144 = *(_DWORD *)(v7 + 24);
            v146 = *(_WORD *)(v7 + 28) & 0x10;
          }
        }
        *(_DWORD *)(v7 + 24) = v144 + 2;
        if (!v146
          || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
          || (*(_DWORD *)(*(_QWORD *)(v7 + 240) + 12) & 0x14001) == 0)
        {
          if (v144)
          {
            *(_DWORD *)(v7 + 24) = v144;
          }
          else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v7, v3);
          }
          v147 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
          if (v147 && (*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
          {
            ++*(_DWORD *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
            if (WebCore::RenderBox::canBeScrolledAndHasScrollableArea((WebCore::RenderBox *)v147))
            {
              v148 = *(_QWORD *)(v147 + 144);
              if (v148)
              {
                v149 = *(_DWORD *)(v148 + 8);
                *(_DWORD *)(v148 + 8) = v149 + 1;
                v150 = *(_QWORD *)(v148 + 264);
                if (v150)
                {
                  v151 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v150 + 496))(*(_QWORD *)(v148 + 264));
                  v152 = v151;
                  v153 = HIDWORD(v151);
                  v154 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v150 + 528))(v150);
                  v155 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v150 + 536))(v150);
                  *(float *)v212 = (float)v152;
                  *(float *)&v212[4] = (float)(v154 + v155 + (int)v153);
                  LODWORD(v216) = 2;
                  DWORD2(v216) = 1;
                  v156 = *(_DWORD *)(v148 + 8);
                  if (!v156)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1960B7014);
                  }
                  *(_DWORD *)(v148 + 8) = v156 - 1;
                  v157 = *(_DWORD *)(v147 + 16);
                  if (!v157)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1960B7034);
                  }
                  *(_DWORD *)(v147 + 16) = v157 - 1;
                  goto LABEL_349;
                }
                if (v149 == -1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1960B7054);
                }
                *(_DWORD *)(v148 + 8) = v149;
              }
            }
            v177 = *(_DWORD *)(v147 + 16);
            if (!v177)
            {
              __break(0xC471u);
              JUMPOUT(0x1960B6FF4);
            }
            *(_DWORD *)(v147 + 16) = v177 - 1;
          }
          if ((*(_WORD *)(v12 + 28) & 0x10) != 0)
          {
            v178 = *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24);
            if (v178 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
              || v178 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24))
            {
              v181 = 2;
            }
            else if (v178 == *(_QWORD *)(WebCore::HTMLNames::liTag + 24))
            {
              v181 = 3;
            }
            else if (v178 == *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24))
            {
              v181 = 4;
            }
            else if (v178 == *(_QWORD *)(WebCore::HTMLNames::articleTag + 24))
            {
              v181 = 5;
            }
            else if (v178 == *(_QWORD *)(WebCore::HTMLNames::sectionTag + 24))
            {
              v181 = 6;
            }
            else
            {
              if (v178 != *(_QWORD *)(WebCore::HTMLNames::navTag + 24))
                goto LABEL_379;
              v181 = 7;
            }
            v212[0] = v181;
          }
          else
          {
LABEL_379:
            v179 = v182;
            if ((v182[45] & 2) != 0)
              v179 = *(char **)(*((_QWORD *)v182 + 4) + 8);
            v180 = (*((_DWORD *)v179 + 24) >> 19) & 7;
            if (v180 != 6 && v180 != 3)
            {
              v212[0] = 0;
              DWORD2(v216) = 0;
              goto LABEL_349;
            }
            v212[0] = 1;
          }
          LODWORD(v216) = 0;
          DWORD2(v216) = 1;
          goto LABEL_349;
        }
      }
      v212[0] = 8;
      LODWORD(v216) = 0;
      DWORD2(v216) = 1;
      if (v144)
        goto LABEL_325;
LABEL_305:
      v8 = v182;
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      {
        v162 = (WebCore::Node *)v7;
LABEL_407:
        WebCore::Node::removedLastRef(v162, v3);
        goto LABEL_63;
      }
      goto LABEL_63;
    }
    v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 880))(v7);
    v133 = *(_DWORD *)(v7 + 24);
    if (!v132)
      goto LABEL_284;
    *(_DWORD *)(v7 + 24) = v133 + 2;
    v134 = v7;
    if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      if (v133)
      {
        v134 = 0;
        *(_DWORD *)(v7 + 24) = v133;
      }
      else
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, v3);
        v134 = 0;
      }
    }
    WebCore::HTMLElement::labels((WebCore::HTMLElement *)v7, &v211);
    if (!v211)
    {
      *(_QWORD *)v183 = 0;
LABEL_337:
      if (!v134)
        goto LABEL_333;
      goto LABEL_338;
    }
    if (!(*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)v211 + 16))(v211))
      goto LABEL_329;
    v136 = 0;
    v137 = 0;
    do
    {
      v138 = (*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v211 + 24))(v211, v136);
      if (v138)
      {
        v140 = v138;
        if ((*(_WORD *)(v138 + 28) & 8) != 0)
        {
          v141 = *(_DWORD *)(v138 + 24);
          *(_DWORD *)(v138 + 24) = v141 + 2;
          if ((*(_QWORD *)(v138 + 64) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)((*(_QWORD *)(v138 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1960B6FD4);
            }
            if (v137)
            {
              if (*(_DWORD *)(v137 + 24) == 2)
              {
                if ((*(_WORD *)(v137 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v137, v139);
              }
              else
              {
                *(_DWORD *)(v137 + 24) -= 2;
              }
            }
            v137 = v140;
          }
          else if (v141)
          {
            *(_DWORD *)(v138 + 24) = v141;
          }
          else if ((*(_WORD *)(v138 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v138, v139);
          }
        }
      }
      v136 = (v136 + 1);
    }
    while (v136 < (*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)v211 + 16))(v211));
    if (v137)
    {
      WebCore::Node::textContent((WebCore::Node *)v137, 0, v142, (WTF::StringImpl **)v183, v143);
      if (*(_DWORD *)(v137 + 24) == 2)
      {
        if ((*(_WORD *)(v137 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v137, v135);
      }
      else
      {
        *(_DWORD *)(v137 + 24) -= 2;
      }
    }
    else
    {
LABEL_329:
      *(_QWORD *)v183 = 0;
    }
    v168 = v211;
    v211 = 0;
    if (!v168)
      goto LABEL_337;
    if (*((_DWORD *)v168 + 4) == 1)
    {
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v168 + 8))(v168);
      if (!v134)
      {
LABEL_333:
        v169 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
        if (*MEMORY[0x1E0CBF6F0])
          *v169 += 2;
        *(_QWORD *)&v183[8] = v169;
        goto LABEL_339;
      }
    }
    else
    {
      --*((_DWORD *)v168 + 4);
      if (!v134)
        goto LABEL_333;
    }
LABEL_338:
    WebCore::HTMLInputElement::placeholder((WTF *)v134, (WTF::StringImpl *)v135, &v183[8]);
LABEL_339:
    if ((*(_WORD *)(v7 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      v170 = *(_DWORD *)(v7 + 24);
      *(_DWORD *)(v7 + 24) = v170 + 2;
      v171 = (*(unsigned __int16 *)(v7 + 232) >> 14) & 1;
      if (v170)
      {
        *(_DWORD *)(v7 + 24) = v170;
      }
      else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v135);
      }
    }
    else
    {
      LOBYTE(v171) = 0;
    }
    v183[16] = v171;
    v172 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
    v173 = WebCore::TreeScope::focusedElementInScope(*(WebCore::TreeScope **)(v172 + 40));
    if (!v173)
    {
      v174 = *(_QWORD *)(v172 + 1272);
      if (v174
        && (*(_WORD *)(v174 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v174 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        v173 = *(_QWORD *)(v174 + 80);
        if (v173)
        {
          while ((*(_WORD *)(v173 + 28) & 0x10) == 0)
          {
            v173 = *(_QWORD *)(v173 + 56);
            if (!v173)
              goto LABEL_344;
          }
          v175 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
          v176 = *(_QWORD *)(*(_QWORD *)(v173 + 96) + 24);
          if (v176 != v175)
          {
LABEL_358:
            if (v176 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
            {
              while (1)
              {
                v173 = *(_QWORD *)(v173 + 56);
                if (!v173)
                  break;
                if ((*(_WORD *)(v173 + 28) & 0x10) != 0)
                {
                  v176 = *(_QWORD *)(*(_QWORD *)(v173 + 96) + 24);
                  if (v176 != v175)
                    goto LABEL_358;
                  break;
                }
              }
            }
          }
        }
      }
      else
      {
        v173 = 0;
      }
    }
LABEL_344:
    v183[17] = v12 == v173;
    *(_OWORD *)v212 = *(_OWORD *)v183;
    *(_WORD *)&v212[16] = *(_WORD *)&v183[16];
    DWORD2(v216) = 3;
    if (v134)
    {
      if (*(_DWORD *)(v134 + 24) == 2)
      {
        if ((*(_WORD *)(v134 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v134, v3);
      }
      else
      {
        *(_DWORD *)(v134 + 24) -= 2;
      }
    }
    if (*(_DWORD *)(v12 + 24) != 2)
    {
      *(_DWORD *)(v12 + 24) -= 2;
      goto LABEL_349;
    }
    v8 = v182;
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
    {
      v162 = (WebCore::Node *)v12;
      goto LABEL_407;
    }
LABEL_63:
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v3);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  if (v196)
  {
LABEL_189:
    if (v205 != 1)
LABEL_254:
      std::__throw_bad_variant_access[abi:sn180100]();
    std::__optional_storage_base<WebCore::TextExtraction::Editable,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::TextExtraction::Editable,false>>((uint64_t)v203, (WTF::StringImpl *)&v194);
    v90 = v209;
  }
  else
  {
    v90 = 1;
  }
LABEL_191:
  --*((_DWORD *)v5 + 7);
LABEL_192:
  if (v90)
  {
    v106 = (uint64_t *)(v6 + 104);
    v107 = *((_DWORD *)v6 + 29);
    if (v107)
    {
      v108 = *v106 + 120 * v107;
      if (*(_DWORD *)(v108 - 4))
        v109 = 0;
      else
        v109 = HIDWORD(v208) == 0;
      v113 = v109 && *(_DWORD *)(v108 - 40) == 1 && v205 == 1 && *(_BYTE *)(v108 - 48) == 0 && v204 == 0;
      v114 = *((unsigned int *)v6 + 29);
      if (!v113)
      {
LABEL_219:
        if (v107 == *((_DWORD *)v6 + 28))
        {
          v116 = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, v114 + 1, (unint64_t)&v197);
          v117 = *((_DWORD *)v6 + 29);
          v118 = *((_QWORD *)v6 + 13);
          v119 = v118 + 120 * v117;
          *(_BYTE *)v119 = 0;
          *(_DWORD *)(v119 + 80) = -1;
          v120 = *(unsigned int *)(v116 + 80);
          if ((_DWORD)v120 != -1)
          {
            ((void (*)(WTF::StringImpl **, uint64_t, unint64_t))off_1E3404890[v120])(&v211, v118 + 120 * v117, v116);
            *(_DWORD *)(v119 + 80) = v120;
          }
          v121 = v118 + 120 * v117;
          *(_OWORD *)(v121 + 88) = *(_OWORD *)(v116 + 88);
          *(_QWORD *)(v121 + 104) = 0;
          *(_QWORD *)(v121 + 112) = 0;
          v122 = *(_QWORD *)(v116 + 104);
          *(_QWORD *)(v116 + 104) = 0;
          *(_QWORD *)(v121 + 104) = v122;
          LODWORD(v122) = *(_DWORD *)(v116 + 112);
          *(_DWORD *)(v116 + 112) = 0;
          *(_DWORD *)(v121 + 112) = v122;
          v123 = *(_DWORD *)(v116 + 116);
          *(_DWORD *)(v116 + 116) = 0;
        }
        else
        {
          v124 = *v106;
          v125 = *v106 + 120 * v114;
          *(_BYTE *)v125 = 0;
          *(_DWORD *)(v125 + 80) = -1;
          v126 = v205;
          if (v205 != -1)
          {
            ((void (*)(WTF::StringImpl **, uint64_t, float32x2_t *))off_1E3404890[v205])(&v211, v125, &v197);
            *(_DWORD *)(v125 + 80) = v126;
          }
          v121 = v124 + 120 * v114;
          *(_OWORD *)(v121 + 88) = v206;
          *(_QWORD *)(v121 + 104) = 0;
          *(_QWORD *)(v121 + 112) = 0;
          v127 = v207;
          v207 = 0;
          *(_QWORD *)(v121 + 104) = v127;
          LODWORD(v127) = v208;
          LODWORD(v208) = 0;
          *(_DWORD *)(v121 + 112) = (_DWORD)v127;
          v123 = HIDWORD(v208);
          HIDWORD(v208) = 0;
        }
        *(_DWORD *)(v121 + 116) = v123;
        ++*((_DWORD *)v6 + 29);
        goto LABEL_73;
      }
      v115 = v108 - 120;
    }
    else
    {
      v114 = 0;
      if (HIDWORD(v208) || *((_DWORD *)v6 + 20) != 1 || v205 != 1 || v6[72] || v204)
        goto LABEL_219;
      v115 = (uint64_t)v6;
    }
    WebCore::TextExtraction::merge(v115, &v197);
  }
LABEL_73:
  if (v193)
  {
    v39 = *(WTF::StringImpl **)&v190[1];
    *(_QWORD *)&v190[1] = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
  if (v196)
  {
    v40 = v195;
    v195 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = v194;
    v194 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v41 -= 2;
    }
  }
  if (v209)
  {
    WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v207, v3);
    if (v205 != -1)
      ((void (*)(WTF::StringImpl **, float32x2_t *))*(&off_1E3404870 + v205))(&v211, &v197);
  }
}

uint64_t WebCore::TextExtraction::pruneRedundantItemsRecursive(uint64_t result, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v2 = result;
  v3 = *(_QWORD *)(result + 104);
  v4 = *(_DWORD *)(result + 116);
  v5 = v3 + 120 * v4;
  v6 = 0;
  if (v4)
  {
    v7 = v3 + 120 * v4;
    v8 = v7;
    while (1)
    {
      if (*(_DWORD *)(v3 + 116))
        v9 = 0;
      else
        v9 = *(_DWORD *)(v3 + 80) == 1;
      if (v9 && *(_BYTE *)(v3 + 72) == 0)
      {
        v11 = *(_QWORD *)(v3 + 40);
        if (v11)
        {
          v12 = *(unsigned __int8 **)(v11 + 8);
          v13 = *(unsigned int *)(v11 + 4);
          if ((*(_BYTE *)(v11 + 16) & 4) != 0)
          {
            if ((_DWORD)v13)
            {
              do
              {
                v14 = *v12;
                v15 = v14 > 0x20;
                v16 = (1 << v14) & 0x100003600;
                if (v15 || v16 == 0)
                  goto LABEL_34;
                ++v12;
              }
              while (--v13);
            }
          }
          else if ((_DWORD)v13)
          {
            v18 = 2 * v13;
            do
            {
              v19 = *(unsigned __int16 *)v12;
              v15 = v19 > 0x20;
              v20 = (1 << v19) & 0x100003600;
              if (v15 || v20 == 0)
                goto LABEL_34;
              v12 += 2;
              v18 -= 2;
            }
            while (v18);
          }
        }
        v22 = v3;
        if (v8 != *(_QWORD *)(v2 + 104) + 120 * *(unsigned int *)(v2 + 116))
        {
          if (v7 == v3)
          {
            v22 = v8;
          }
          else
          {
            WTF::VectorMover<false,WebCore::TextExtraction::Item>::moveOverlapping(v7, (char *)v3, v8);
            v22 = v8 + v3 - v7;
          }
        }
        result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 104, a2);
        v23 = *(unsigned int *)(v3 + 80);
        if ((_DWORD)v23 != -1)
          result = ((uint64_t (*)(char *, unint64_t))*(&off_1E3404870 + v23))(&v27, v3);
        v7 = v3 + 120;
        *(_DWORD *)(v3 + 80) = -1;
        ++v6;
        v8 = v22;
      }
LABEL_34:
      v3 += 120;
      if (v3 >= v5)
      {
        v3 = *(_QWORD *)(v2 + 104);
        v4 = *(_DWORD *)(v2 + 116);
        v5 = v8;
        goto LABEL_37;
      }
    }
  }
  v7 = *(_QWORD *)(result + 104);
LABEL_37:
  v24 = (char *)(v3 + 120 * v4);
  if ((char *)v7 != v24)
  {
    result = WTF::VectorMover<false,WebCore::TextExtraction::Item>::moveOverlapping(v7, v24, v5);
    v4 = *(_DWORD *)(v2 + 116);
    v3 = *(_QWORD *)(v2 + 104);
  }
  v25 = v4 - v6;
  *(_DWORD *)(v2 + 116) = v25;
  if ((_DWORD)v25)
  {
    v26 = 120 * v25;
    do
    {
      result = WebCore::TextExtraction::pruneRedundantItemsRecursive(v3);
      v3 += 120;
      v26 -= 120;
    }
    while (v26);
  }
  return result;
}

_QWORD *WebCore::TextExtraction::extractRenderedText@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  int32x4_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  WTF *v43;
  float32x4_t v44;
  char v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  char v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  char v53;
  char v54;
  BOOL v55;
  WTF *v56;
  uint64_t v57;
  float32x4_t v58;
  unsigned __int8 *v59[7];
  unsigned __int8 **v60;

  v4 = this[8] & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    if ((*(_BYTE *)((this[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1960B76D4);
    }
    v5 = this;
    ++*(_DWORD *)((this[8] & 0xFFFFFFFFFFFFLL) + 0x10);
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 40) + 8) + 1944)
                   + 248);
    ++*(_DWORD *)(v6 + 8);
    v7 = (unsigned __int16)*(_DWORD *)(v4 + 124) >> 13;
    if (v7 >= 6)
      v8 = 0;
    else
      v8 = 0x30203020100uLL >> (8 * v7);
    v9.i64[0] = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)v4, 1, 0);
    v9.i64[1] = v10;
    v11 = vcvtq_f32_s32(v9);
    v12 = *(_QWORD *)(v6 + 328);
    v13 = *(float *)(v12 + 592);
    v14 = *(_QWORD *)(v12 + 24);
    v15 = 1.0;
    if (v14)
    {
      v16 = *(_QWORD *)(v14 + 8);
      if (v16)
      {
        v17 = (*(_DWORD *)v16)++;
        if (*(_QWORD *)(*(_QWORD *)(v12 + 128) + 8) == v12 && !*(_BYTE *)(v16 + 1098))
          v15 = *(float *)(v16 + 356);
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          v44 = v11;
          WebCore::Page::~Page(v16);
          WTF::fastFree(v38, v39);
          v11 = v44;
        }
      }
    }
    v58 = vmulq_n_f32(v11, 1.0 / (float)(v13 * v15));
    v56 = 0;
    v57 = 0;
    WebCore::TextExtraction::extractRenderedTokens((uint64_t)&v56, v5[8], v8);
    v55 = ((v8 - 1) & 0xFD) != 0;
    v59[0] = (unsigned __int8 *)&v55;
    v18 = 126 - 2 * __clz(HIDWORD(v57));
    if (HIDWORD(v57))
      v19 = v18;
    else
      v19 = 0;
    std::__introsort<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *,false>((uint64_t)v56, (unsigned int **)v56 + 3 * HIDWORD(v57), v59, v19, 1);
    v54 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 1;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 1;
    v45 = 0;
    if (HIDWORD(v57))
    {
      v21 = v56;
      v43 = (WTF *)((char *)v56 + 24 * HIDWORD(v57));
      do
      {
        v22 = *((unsigned int *)v21 + 3);
        if ((_DWORD)v22)
        {
          v23 = *(_QWORD *)v21;
          v24 = 16 * v22;
          while (1)
          {
            v59[0] = (unsigned __int8 *)&v45;
            v59[1] = (unsigned __int8 *)&v50;
            v59[2] = (unsigned __int8 *)&v46;
            v59[3] = (unsigned __int8 *)&v58;
            v59[4] = (unsigned __int8 *)&v54;
            v59[5] = (unsigned __int8 *)&v45;
            v59[6] = (unsigned __int8 *)&v50;
            v25 = *(unsigned int *)(v23 + 8);
            if ((_DWORD)v25 == -1)
              break;
            v60 = v59;
            ((void (*)(unsigned __int8 ***, uint64_t))off_1E3404910[v25])(&v60, v23);
            v23 += 16;
            v24 -= 16;
            if (!v24)
              goto LABEL_20;
          }
          v40 = std::__throw_bad_variant_access[abi:sn180100]();
          return (_QWORD *)WebCore::TextExtraction::extractRenderedTokens(v40, v41, v42);
        }
LABEL_20:
        v21 = (WTF *)((char *)v21 + 24);
      }
      while (v21 != v43);
      v26 = v50;
      if (v50)
        goto LABEL_23;
    }
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v50);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v50);
    v26 = v50;
    if (v50)
LABEL_23:
      *(_DWORD *)v26 += 2;
    *(_QWORD *)a2 = v26;
    v27 = v46;
    if (v46
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v46),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v46),
          (v27 = v46) != 0))
    {
      *(_DWORD *)v27 += 2;
    }
    *(_QWORD *)(a2 + 8) = v27;
    *(_BYTE *)(a2 + 16) = v54;
    v28 = v47;
    v47 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v20);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = v46;
    v46 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v20);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v51;
    v51 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v20);
      else
        *(_DWORD *)v30 -= 2;
    }
    this = v50;
    v50 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v20);
      else
        *(_DWORD *)this -= 2;
    }
    v31 = v56;
    if (HIDWORD(v57))
    {
      v32 = (WTF *)((char *)v56 + 24 * HIDWORD(v57));
      do
      {
        v33 = *((unsigned int *)v31 + 3);
        v34 = *(unsigned int **)v31;
        if ((_DWORD)v33)
        {
          v35 = 16 * v33;
          do
          {
            v36 = v34[2];
            if ((_DWORD)v36 != -1)
              this = (_QWORD *)((uint64_t (*)(unsigned __int8 **, unsigned int *))off_1E34048F0[v36])(v59, v34);
            v34[2] = -1;
            v34 += 4;
            v35 -= 16;
          }
          while (v35);
          v34 = *(unsigned int **)v31;
        }
        if (v34)
        {
          *(_QWORD *)v31 = 0;
          *((_DWORD *)v31 + 2) = 0;
          this = (_QWORD *)WTF::fastFree((WTF *)v34, v20);
        }
        v31 = (WTF *)((char *)v31 + 24);
      }
      while (v31 != v32);
      v31 = v56;
    }
    if (v31)
    {
      v56 = 0;
      LODWORD(v57) = 0;
      this = (_QWORD *)WTF::fastFree(v31, v20);
    }
    if (v6)
    {
      if (*(_DWORD *)(v6 + 8) == 1)
        this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      else
        --*(_DWORD *)(v6 + 8);
    }
    v37 = *(_DWORD *)(v4 + 16);
    if (!v37)
    {
      __break(0xC471u);
      JUMPOUT(0x1960B76F4);
    }
    *(_DWORD *)(v4 + 16) = v37 - 1;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return this;
}

uint64_t WebCore::TextExtraction::extractRenderedTokens(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  int v12;
  WebCore::ScrollView *v13;
  const WebCore::Node *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isInsideOverlay;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  uint64_t v27;
  size_t v28;
  _WORD *v29;
  size_t v30;
  uint64_t v31;
  UChar32 v32;
  size_t v33;
  unsigned __int8 *v34;
  UChar32 v35;
  WTF::StringImpl *v36;
  int v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  unsigned __int16 *v47;
  unsigned int v48;
  unsigned __int16 *v49;
  UChar32 v50;
  UChar32 v51;
  __int16 v52;
  unsigned __int8 *v53;
  int v54;
  UChar32 v55;
  uint64_t v56;
  UChar32 v57;
  void *v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  int v65;
  WTF::StringImpl **v66;
  WebCore::ScrollView *v67;
  WTF *v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  WTF *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  WTF::StringImpl *v84;
  WebCore::RenderObject *v85;
  uint64_t v86;
  unsigned __int16 *v87;
  WTF *v88;
  unsigned int v89;
  WTF *v90;
  uint64_t v91;
  WebCore::ScrollView **v92[2];
  WebCore::ScrollView *v93;
  _QWORD v94[2];
  unsigned __int8 v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF *v98;

  v95 = a3;
  v3 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((a2 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      goto LABEL_195;
    }
    v4 = result;
    v5 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 0x10) = v5 + 1;
    v94[0] = &v95;
    v94[1] = result;
    if (*(_BYTE *)((a2 & 0xFFFFFFFFFFFFLL) + 0x2E) == 14)
    {
      *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 0x10) = v5 + 2;
      v6 = *(_QWORD **)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 0x18) + 8);
      result = (*(uint64_t (**)(_QWORD *))(*v6 + 192))(v6);
      if ((result & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1960B810CLL);
      }
      if (*(_QWORD *)(v6[12] + 24) != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x1960B812CLL);
      }
      v7 = v6[14];
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          if (!*(_BYTE *)(v8 + 144))
          {
            v9 = *(_QWORD *)(v8 + 296);
            if (v9)
            {
              *(_DWORD *)(v9 + 24) += 2;
              result = WebCore::TextExtraction::extractRenderedTokens(v4, *(_QWORD *)(v9 + 64), v95);
              if (*(_DWORD *)(v9 + 24) == 2)
              {
                if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
                  result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
              }
              else
              {
                *(_DWORD *)(v9 + 24) -= 2;
              }
            }
          }
        }
      }
      v11 = *(_DWORD *)(v3 + 16);
      if (!v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1960B814CLL);
      }
      v12 = v11 - 1;
      *(_DWORD *)(v3 + 16) = v12;
      if (v12)
      {
LABEL_14:
        *(_DWORD *)(v3 + 16) = v12 - 1;
        return result;
      }
LABEL_184:
      __break(0xC471u);
      JUMPOUT(0x1960B80ECLL);
    }
    v13 = *(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFLL)
                                                                                              + 0x18)
                                                                                  + 8)
                                                                      + 40)
                                                          + 8)
                                              + 1944)
                                  + 248);
    ++*((_DWORD *)v13 + 2);
    v92[0] = &v93;
    v92[1] = (WebCore::ScrollView **)v94;
    v93 = v13;
    WebCore::TextExtraction::extractRenderedTokens(WTF::Vector<WebCore::TextExtraction::TokenAndBlockOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::ContainerNode &,WebCore::BlockFlowDirection)::$_2::operator()(v92, (WebCore::RenderObject *)(a2 & 0xFFFFFFFFFFFFLL));
    v15 = *(unsigned int *)(v3 + 64);
    if (!(v15 | ((unint64_t)*(unsigned __int8 *)(v3 + 68) << 32))
      || (v16 = *(_QWORD *)((v15 | ((unint64_t)*(unsigned __int8 *)(v3 + 68) << 32)) + 8)) == 0)
    {
LABEL_180:
      result = (uint64_t)v93;
      v93 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 8) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 8);
      }
      v12 = *(_DWORD *)(v3 + 16);
      if (v12)
        goto LABEL_14;
      goto LABEL_184;
    }
    while (1)
    {
      v17 = v16;
      v18 = v16;
      if ((*(_BYTE *)(v16 + 45) & 2) != 0)
      {
        v18 = *(_QWORD *)(v16 + 32);
        if (v18)
          v18 = *(_QWORD *)(v18 + 8);
      }
      if ((*(_BYTE *)(*(_QWORD *)(v18 + 104) + 239) & 4) == 0 && (*(_DWORD *)(v18 + 120) & 0x30) != 0x10)
      {
        v19 = v16;
        if ((*(_BYTE *)(v16 + 45) & 2) != 0)
          v19 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8);
        if (*(float *)(*(_QWORD *)(*(_QWORD *)(v19 + 88) + 32) + 4) >= 0.05)
        {
          if ((*(_BYTE *)(v16 + 45) & 1) == 0)
          {
            v20 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8);
            if (v20)
            {
              *(_DWORD *)(v20 + 24) += 2;
              isInsideOverlay = WebCore::ImageOverlay::isInsideOverlay((WebCore::ImageOverlay *)v20, v14);
              v22 = *(_DWORD *)(v20 + 24) - 2;
              if ((isInsideOverlay & 1) != 0)
              {
                if (*(_DWORD *)(v20 + 24) == 2)
                {
                  if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v20, v14);
                }
                else
                {
                  *(_DWORD *)(v20 + 24) = v22;
                }
                goto LABEL_146;
              }
              if (*(_DWORD *)(v20 + 24) == 2)
              {
                if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v20, v14);
              }
              else
              {
                *(_DWORD *)(v20 + 24) = v22;
              }
            }
          }
          if ((*(_BYTE *)(v17 + 45) & 2) != 0)
            v23 = v17;
          else
            v23 = 0;
          v86 = v23;
          if ((*(_BYTE *)(v17 + 45) & 2) != 0)
          {
            ++*(_DWORD *)(v17 + 16);
            if (WebCore::RenderText::hasRenderedText((WebCore::RenderText *)v17, v14))
            {
              v90 = 0;
              v91 = 0;
              v85 = (WebCore::RenderObject *)v17;
              WTF::String::simplifyWhiteSpace();
              WTF::String::split();
              v25 = v97;
              v97 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v24);
                else
                  *(_DWORD *)v25 -= 2;
              }
              v26 = v88;
              if (!v89)
              {
                if (v88)
                  goto LABEL_178;
                goto LABEL_137;
              }
              while (1)
              {
                v27 = *(_QWORD *)v26;
                if (*(_QWORD *)v26)
                  break;
LABEL_117:
                v26 = (WTF *)((char *)v26 + 8);
                if (v26 == (WTF *)((char *)v88 + 8 * v89))
                {
                  v66 = (WTF::StringImpl **)v88;
                  v83 = 8 * v89;
                  do
                  {
                    v84 = *v66;
                    *v66 = 0;
                    if (v84)
                    {
                      if (*(_DWORD *)v84 == 2)
                        WTF::StringImpl::destroy(v84, v24);
                      else
                        *(_DWORD *)v84 -= 2;
                    }
                    ++v66;
                    v83 -= 8;
                  }
                  while (v83);
                  v26 = v88;
                  if (v88)
                  {
LABEL_178:
                    v88 = 0;
                    WTF::fastFree(v26, v24);
                  }
LABEL_137:
                  v67 = v93;
                  v97 = (WTF::StringImpl *)WebCore::RenderObject::absoluteBoundingBoxRect(v85, 1, 0);
                  v98 = v68;
                  v69 = WebCore::ScrollView::contentsToRootView(v67, (const WebCore::IntRect *)&v97);
                  WebCore::TextExtraction::extractRenderedTokens(WTF::Vector<WebCore::TextExtraction::TokenAndBlockOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::ContainerNode &,WebCore::BlockFlowDirection)::$_0::operator()((uint64_t)v94, (uint64_t)&v90, v69, v70);
                  v72 = v90;
                  if (HIDWORD(v91))
                  {
                    v73 = 16 * HIDWORD(v91);
                    v74 = v90;
                    do
                    {
                      v75 = *((unsigned int *)v74 + 2);
                      if ((_DWORD)v75 != -1)
                        ((void (*)(WTF::StringImpl **, WTF *))off_1E34048F0[v75])(&v97, v74);
                      *((_DWORD *)v74 + 2) = -1;
                      v74 = (WTF *)((char *)v74 + 16);
                      v73 -= 16;
                    }
                    while (v73);
                  }
                  if (v72)
                    WTF::fastFree(v72, v71);
                  v76 = *(_DWORD *)(v86 + 16);
                  if (v76)
                  {
                    v17 = (uint64_t)v85;
                    *(_DWORD *)(v86 + 16) = v76 - 1;
                    goto LABEL_146;
                  }
                  __break(0xC471u);
LABEL_194:
                  __break(1u);
LABEL_195:
                  JUMPOUT(0x1960B7858);
                }
              }
              v28 = *(unsigned int *)(v27 + 4);
              *(_DWORD *)v27 += 2;
              v29 = *(_WORD **)(v27 + 8);
              if ((*(_BYTE *)(v27 + 16) & 4) == 0)
              {
                if ((_DWORD)v28)
                {
                  v30 = 0;
                  v31 = 0;
                  v87 = &v29[v28];
                  while (1)
                  {
                    v32 = (unsigned __int16)v29[v30];
                    if (!u_isalpha(v32) && !u_isdigit(v32))
                      break;
                    v31 -= 2;
                    ++v30;
                    if (-2 * v28 == v31)
                      goto LABEL_56;
                  }
                  v43 = *(unsigned int *)(v27 + 4);
                  LODWORD(v97) = v43;
                  if ((_DWORD)v43)
                    v44 = (WTF *)WTF::fastMalloc((WTF *)(2 * v43));
                  else
                    v44 = 0;
                  v98 = v44;
                  if (v30 > v28)
                    goto LABEL_194;
                  if ((_DWORD)v30 == 1)
                  {
                    *(_WORD *)v44 = *v29;
                  }
                  else if ((_DWORD)v30)
                  {
                    memcpy(v44, v29, -v31);
                  }
                  if (-2 * v28 != v31)
                  {
                    v47 = &v29[v31 / 0xFFFFFFFFFFFFFFFELL];
                    v48 = v30;
                    v49 = v87;
                    while (1)
                    {
                      while (1)
                      {
                        v50 = *v47;
                        if (u_isalpha(v50) || u_isdigit(v50))
                          break;
                        if (++v47 == v49)
                          goto LABEL_112;
                      }
                      if (v47 == v49)
                        break;
                      v49 = v87;
                      while (1)
                      {
                        v51 = *v47;
                        if (!u_isalpha(v51) && !u_isdigit(v51))
                          break;
                        v52 = *v47++;
                        LODWORD(v30) = v48 + 1;
                        *((_WORD *)v44 + v48++) = v52;
                        if (v47 == v87)
                          goto LABEL_113;
                      }
                      LODWORD(v30) = v48;
                      if (v47 == v87)
                        goto LABEL_113;
                    }
LABEL_112:
                    LODWORD(v30) = v48;
                  }
LABEL_113:
                  LODWORD(v97) = v30;
                  WTF::StringImpl::adopt();
                  goto LABEL_114;
                }
LABEL_56:
                *(_DWORD *)v27 += 2;
                v36 = (WTF::StringImpl *)v27;
                goto LABEL_57;
              }
              if (!(_DWORD)v28)
                goto LABEL_56;
              v33 = 0;
              v34 = (unsigned __int8 *)v29 + v28;
              while (1)
              {
                v35 = *((unsigned __int8 *)v29 + v33);
                if (!u_isalpha(v35) && !u_isdigit(v35))
                  break;
                if (v28 == ++v33)
                  goto LABEL_56;
              }
              v45 = (WTF *)*(unsigned int *)(v27 + 4);
              LODWORD(v97) = (_DWORD)v45;
              if ((_DWORD)v45)
                v46 = (WTF *)WTF::fastMalloc(v45);
              else
                v46 = 0;
              v98 = v46;
              if (v33 > v28)
                goto LABEL_194;
              if ((_DWORD)v33)
              {
                if ((_DWORD)v33 == 1)
                  *(_BYTE *)v46 = *(_BYTE *)v29;
                else
                  memcpy(v46, v29, v33);
              }
              if (v28 != v33)
              {
                v53 = (unsigned __int8 *)v29 + v33;
                v54 = v33;
                while (2)
                {
                  LODWORD(v33) = v54;
                  while (1)
                  {
                    v55 = *v53;
                    if (u_isalpha(v55) || u_isdigit(v55))
                      break;
                    if (++v53 == v34)
                      goto LABEL_110;
                  }
                  if (v53 != v34)
                  {
                    v56 = 0;
                    while (1)
                    {
                      v57 = v53[v56];
                      if (!u_isalpha(v57) && !u_isdigit(v57))
                        break;
                      *((_BYTE *)v46 + (v33 + v56)) = v53[v56];
                      if (&v53[++v56] == v34)
                        goto LABEL_109;
                    }
                    v53 += v56;
                    v54 = v33 + v56;
                    if (v53 != v34)
                      continue;
LABEL_109:
                    LODWORD(v33) = v33 + v56;
                  }
                  break;
                }
              }
LABEL_110:
              LODWORD(v97) = v33;
              WTF::StringImpl::adopt();
LABEL_114:
              WTF::fastFree(v98, v58);
              v36 = v96;
              if (!v96)
              {
LABEL_115:
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v27, v24);
                else
                  *(_DWORD *)v27 -= 2;
                goto LABEL_117;
              }
LABEL_57:
              if (!*((_DWORD *)v36 + 1))
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, v24);
                else
                  *(_DWORD *)v36 -= 2;
                goto LABEL_115;
              }
              v97 = v36;
              LODWORD(v98) = 0;
              v37 = HIDWORD(v91);
              if (HIDWORD(v91) == (_DWORD)v91)
              {
                v38 = WTF::Vector<std::variant<WTF::String,WebCore::IntSize>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v90, HIDWORD(v91) + 1, (unint64_t)&v97);
                v37 = HIDWORD(v91);
                v39 = (char *)v90 + 16 * HIDWORD(v91);
                *v39 = 0;
                *((_DWORD *)v39 + 2) = -1;
                v40 = *(unsigned int *)(v38 + 8);
                if ((_DWORD)v40 != -1)
                {
                  ((void (*)(WTF::StringImpl **, char *, unint64_t))off_1E3404900[v40])(&v96, v39, v38);
                  *((_DWORD *)v39 + 2) = v40;
                }
              }
              else
              {
                v41 = (char *)v90 + 16 * HIDWORD(v91);
                *v41 = 0;
                *((_DWORD *)v41 + 2) = -1;
                v42 = (int)v98;
                if ((_DWORD)v98 == -1)
                {
                  HIDWORD(v91) = v37 + 1;
                  goto LABEL_115;
                }
                ((void (*)(WTF::StringImpl **, char *, WTF::StringImpl **))off_1E3404900[v98])(&v96, v41, &v97);
                *((_DWORD *)v41 + 2) = v42;
              }
              HIDWORD(v91) = v37 + 1;
              if ((_DWORD)v98 != -1)
                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34048F0[v98])(&v96, &v97);
              goto LABEL_115;
            }
            v59 = *(_DWORD *)(v17 + 16);
            if (!v59)
            {
              __break(0xC471u);
              JUMPOUT(0x1960B817CLL);
            }
            *(_DWORD *)(v17 + 16) = v59 - 1;
          }
          if (*(_BYTE *)(v17 + 46) == 14)
          {
            ++*(_DWORD *)(v17 + 16);
            v60 = *(_QWORD **)(*(_QWORD *)(v17 + 24) + 8);
            if (((*(uint64_t (**)(_QWORD *))(*v60 + 192))(v60) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1960B819CLL);
            }
            if (*(_QWORD *)(v60[12] + 24) != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
            {
              __break(0xC471u);
              JUMPOUT(0x1960B81BCLL);
            }
            v61 = v60[14];
            if (v61)
            {
              v62 = *(_QWORD *)(v61 + 8);
              if (v62)
              {
                if (!*(_BYTE *)(v62 + 144))
                {
                  v63 = *(_QWORD *)(v62 + 296);
                  if (v63)
                  {
                    *(_DWORD *)(v63 + 24) += 2;
                    WebCore::TextExtraction::extractRenderedTokens(v4, *(_QWORD *)(v63 + 64), v95);
                    if (*(_DWORD *)(v63 + 24) == 2)
                    {
                      if ((*(_WORD *)(v63 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v63, v64);
                    }
                    else
                    {
                      *(_DWORD *)(v63 + 24) -= 2;
                    }
                  }
                }
              }
            }
            v65 = *(_DWORD *)(v17 + 16);
            if (!v65)
            {
              __break(0xC471u);
              JUMPOUT(0x1960B81DCLL);
            }
            *(_DWORD *)(v17 + 16) = v65 - 1;
          }
          else
          {
            WebCore::TextExtraction::extractRenderedTokens(WTF::Vector<WebCore::TextExtraction::TokenAndBlockOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::ContainerNode &,WebCore::BlockFlowDirection)::$_2::operator()(v92, (WebCore::RenderObject *)v17);
          }
        }
      }
LABEL_146:
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 112))(v17);
      if (!v16)
      {
        if (v17 == v3)
          goto LABEL_180;
        v77 = *(unsigned int *)(v17 + 47);
        if (!(v77 | ((unint64_t)*(unsigned __int8 *)(v17 + 51) << 32))
          || (v16 = *(_QWORD *)((v77 | ((unint64_t)*(unsigned __int8 *)(v17 + 51) << 32)) + 8)) == 0)
        {
          v78 = *(_QWORD *)(v17 + 32);
          if (!v78)
            goto LABEL_180;
          v79 = *(_QWORD *)(v78 + 8);
          if (!v79 || v79 == v3)
            goto LABEL_180;
          while (1)
          {
            v80 = *(unsigned int *)(v79 + 47);
            if (v80 | ((unint64_t)*(unsigned __int8 *)(v79 + 51) << 32))
            {
              v16 = *(_QWORD *)((v80 | ((unint64_t)*(unsigned __int8 *)(v79 + 51) << 32)) + 8);
              if (v16)
                break;
            }
            v81 = *(_QWORD *)(v79 + 32);
            if (v81)
            {
              v79 = *(_QWORD *)(v81 + 8);
              if (v79 && v79 != v3)
                continue;
            }
            goto LABEL_180;
          }
        }
      }
    }
  }
  return result;
}

float WebCore::ScrollingTreeScrollingNodeDelegate::adjustedScrollPosition(WebCore::ScrollingTreeScrollingNodeDelegate *this, const WebCore::FloatPoint *a2)
{
  return *(float *)a2;
}

void WebCore::ScrollingTreeScrollingNodeDelegate::scrollbarStateForOrientation(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  *a1 = v1;
}

WTF::StringImpl *WTF::HashMap<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,std::pair<WTF::String,std::optional<WebCore::CharacterRange>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashTraits<std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>,WTF::HashTableTraits>::add<std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>(WTF::StringImpl *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = (WTF::StringImpl *)WTF::HashTable<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashMap<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,std::pair<WTF::String,std::optional<WebCore::CharacterRange>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashTraits<std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (WTF::StringImpl *)(v8 + 40 * v15);
  v17 = *(_QWORD *)v16;
  if (*(_QWORD *)v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v25 = 0;
        else
          v25 = *(_DWORD *)(v8 - 4);
        v31 = 0;
        v32 = v8 + 40 * v25;
        goto LABEL_39;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (WTF::StringImpl *)(v8 + 40 * v15);
      v17 = *(_QWORD *)v16;
      ++v19;
    }
    while (*(_QWORD *)v16);
    if (v18)
    {
      *((_BYTE *)v18 + 32) = 0;
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      *((_BYTE *)v18 + 16) = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *a3 = 0;
  v20 = *(_QWORD *)v16;
  *(_QWORD *)v16 = v11;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  v21 = *a4;
  *a4 = 0;
  result = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
  *((_QWORD *)v16 + 1) = v21;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v22 = *(_OWORD *)(a4 + 1);
  *((_BYTE *)v16 + 32) = *((_BYTE *)a4 + 24);
  *((_OWORD *)v16 + 1) = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
      goto LABEL_29;
  }
  else if (3 * v29 <= 4 * v28)
  {
    if (!(_DWORD)v29)
    {
      v30 = 8;
LABEL_34:
      result = (WTF::StringImpl *)WTF::HashTable<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashMap<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,std::pair<WTF::String,std::optional<WebCore::CharacterRange>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashTraits<std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>>::rehash(a2, v30, (uint64_t *)v16);
      v16 = result;
      v26 = *a2;
      if (*a2)
        LODWORD(v29) = *(_DWORD *)(v26 - 4);
      else
        LODWORD(v29) = 0;
      goto LABEL_38;
    }
LABEL_29:
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
    goto LABEL_34;
  }
LABEL_38:
  v32 = v26 + 40 * v29;
  v31 = 1;
LABEL_39:
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v32;
  *((_BYTE *)v7 + 16) = v31;
  return result;
}

unsigned int *WebCore::TextExtraction::collectText(WebCore::TextExtraction *this, const WebCore::SimpleRange *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int *result;
  int32x2_t v14[18];
  uint64_t v15;
  WTF::StringBuilder *v16[3];
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  char v20;
  unsigned int *v21;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v21 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  v16[0] = (WTF::StringBuilder *)&v17;
  v16[1] = this;
  v16[2] = (WTF::StringBuilder *)&v21;
  WebCore::TextIterator::TextIterator((uint64_t)v14, a2, 2);
  while (v14[12])
  {
    if (!(_DWORD)v15)
      goto LABEL_26;
    v3 = WebCore::TextIterator::node(v14);
    if (!v3 || (v4 = v3, (*(_WORD *)(v3 + 28) & 2) == 0))
    {
      if ((v15 & 0xFF00000000) != 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
      goto LABEL_26;
    }
    v5 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v5 + 2;
    if (v21)
    {
      if (v21 != (unsigned int *)v3)
      {
        WebCore::TextExtraction::collectText(WebCore::SimpleRange const&)::{lambda(void)#1}::operator()(v16);
        v7 = v17;
        v17 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v6);
          else
            *(_DWORD *)v7 -= 2;
        }
        v8 = v18;
        v18 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v6);
          else
            *(_DWORD *)v8 -= 2;
        }
        v19 = 0;
        if ((v15 & 0xFF00000000) != 0)
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
        *(_DWORD *)(v4 + 24) += 2;
        v9 = v21;
        v21 = (unsigned int *)v4;
        if (v9)
        {
          if (v9[6] == 2)
          {
            if ((*((_WORD *)v9 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v9, v2);
          }
          else
          {
            v9[6] -= 2;
          }
        }
        goto LABEL_24;
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) = v5 + 4;
      v21 = (unsigned int *)v3;
    }
    if ((v15 & 0xFF00000000) != 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
LABEL_24:
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
LABEL_26:
    WebCore::TextIterator::advance((WebCore::TextIterator *)v14, (WTF::StringImpl *)v2);
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v14, v2);
  if (v21)
    WebCore::TextExtraction::collectText(WebCore::SimpleRange const&)::{lambda(void)#1}::operator()(v16);
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v21;
  v21 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v10);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::TextExtraction::collectText(WebCore::SimpleRange const&)::{lambda(void)#1}::operator()(WTF::StringBuilder **a1)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  unsigned int *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  WTF::StringBuilder *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v2 = (WTF::StringImpl **)*a1;
  v3 = *(WTF::StringImpl **)*a1;
  if (v3
    || (WTF::StringBuilder::shrinkToFit(*a1),
        result = (unsigned int *)WTF::StringBuilder::reifyString((WTF::StringBuilder *)v2),
        (v3 = *v2) != 0))
  {
    *(_DWORD *)v3 += 2;
    result = (unsigned int *)WTF::StringImpl::replace();
    v6 = v19;
    if (*(_DWORD *)v3 == 2)
    {
      result = (unsigned int *)WTF::StringImpl::destroy(v3, v5);
      if (!v19)
        return result;
    }
    else
    {
      *(_DWORD *)v3 -= 2;
      if (!v6)
        return result;
    }
    if (*((_DWORD *)v6 + 1))
    {
      v8 = a1[1];
      v7 = (WTF::StringImpl **)a1[2];
      v9 = *v7;
      *v7 = 0;
      v19 = v9;
      v20 = v6;
      v10 = *((unsigned int *)v8 + 3);
      if ((_DWORD)v10 == *((_DWORD *)v8 + 2))
      {
        v11 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v8, v10 + 1, (unint64_t)&v19);
        v12 = *((unsigned int *)v8 + 3);
        v13 = (_QWORD *)(*(_QWORD *)v8 + 16 * v12);
        v14 = *(_QWORD *)v11;
        *(_QWORD *)v11 = 0;
        *v13 = v14;
        v15 = *((_QWORD *)v11 + 1);
        *((_QWORD *)v11 + 1) = 0;
        v13[1] = v15;
        v16 = v20;
        *((_DWORD *)v8 + 3) = v12 + 1;
        v20 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v5);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
      else
      {
        v17 = *(char **)v8;
        v19 = 0;
        v18 = (WTF::StringImpl **)&v17[16 * v10];
        *v18 = v9;
        v18[1] = v6;
        *((_DWORD *)v8 + 3) = v10 + 1;
        v20 = 0;
      }
      result = (unsigned int *)v19;
      v19 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
    else if (*(_DWORD *)v6 == 2)
    {
      return (unsigned int *)WTF::StringImpl::destroy(v6, v5);
    }
    else
    {
      *(_DWORD *)v6 -= 2;
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashMap<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>,std::pair<WTF::String,std::optional<WebCore::CharacterRange>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>,WTF::HashTraits<std::pair<WTF::String,std::optional<WebCore::CharacterRange>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _QWORD *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_BYTE *)(v7 + 48);
    do
    {
      *v10 = 0;
      *((_QWORD *)v10 - 4) = 0;
      *((_QWORD *)v10 - 3) = 0;
      *(v10 - 16) = 0;
      v10 += 40;
      --v9;
    }
    while (v9);
  }
  v11 = a1;
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    v15 = a3;
    while (1)
    {
      v16 = (uint64_t *)(v4 + 40 * v12);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v20 = *v11;
          if (*v11)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = (_QWORD *)(v20 + 40 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (*v28);
          v29 = v27;
          v30 = v20 + 40 * v27;
          v33 = *(WTF::StringImpl **)(v30 + 8);
          v32 = (_QWORD *)(v30 + 8);
          v31 = v33;
          *v32 = 0;
          if (v33)
          {
            if (*(_DWORD *)v31 != 2)
            {
              *(_DWORD *)v31 -= 2;
              goto LABEL_25;
            }
            WTF::StringImpl::destroy(v31, v8);
            v15 = a3;
            v11 = a1;
            v41 = *v28;
            *v28 = 0;
            if (v41)
            {
              if (*(_DWORD *)(v41 + 24) == 2)
              {
                if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v41, v8);
                  v15 = a3;
                  v11 = a1;
                }
              }
              else
              {
                *(_DWORD *)(v41 + 24) -= 2;
              }
            }
          }
          else
          {
LABEL_25:
            *v28 = 0;
          }
          v34 = *v16;
          *v16 = 0;
          *v28 = v34;
          v35 = v4 + 40 * v12;
          v36 = *(_QWORD *)(v35 + 8);
          *(_QWORD *)(v35 + 8) = 0;
          *v32 = v36;
          v37 = v20 + 40 * v29;
          v38 = *(_OWORD *)(v35 + 16);
          *(_QWORD *)(v37 + 32) = *(_QWORD *)(v35 + 32);
          *(_OWORD *)(v37 + 16) = v38;
          v39 = *(WTF::StringImpl **)(v35 + 8);
          *(_QWORD *)(v35 + 8) = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
            {
              WTF::StringImpl::destroy(v39, v8);
              v15 = a3;
              v11 = a1;
            }
            else
            {
              *(_DWORD *)v39 -= 2;
            }
          }
          v40 = *v16;
          *v16 = 0;
          if (v40)
          {
            if (*(_DWORD *)(v40 + 24) == 2)
            {
              if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v40, v8);
                v15 = a3;
                v11 = a1;
              }
            }
            else
            {
              *(_DWORD *)(v40 + 24) -= 2;
            }
          }
          if (v16 == v15)
            v13 = v28;
          goto LABEL_34;
        }
        v18 = v4 + 40 * v12;
        v19 = *(WTF::StringImpl **)(v18 + 8);
        *(_QWORD *)(v18 + 8) = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
          {
            WTF::StringImpl::destroy(v19, v8);
            v15 = a3;
            v11 = a1;
            v17 = *v16;
          }
          else
          {
            *(_DWORD *)v19 -= 2;
          }
        }
        *v16 = 0;
        if (v17)
        {
          if (*(_DWORD *)(v17 + 24) == 2)
          {
            if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v17, v8);
            v15 = a3;
            v11 = a1;
          }
          else
          {
            *(_DWORD *)(v17 + 24) -= 2;
          }
        }
      }
LABEL_34:
      if (++v12 == v14)
        goto LABEL_49;
    }
  }
  v13 = 0;
  result = 0;
  if (v4)
  {
LABEL_49:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v13;
  }
  return result;
}

__n128 WebCore::TextExtraction::merge(uint64_t a1, float32x2_t *a2)
{
  float32x2_t v4;
  float32x2_t *v5;
  float32x2_t v6;
  int8x8_t v7;
  float32x2_t v8;
  int8x8_t v9;
  int8x8_t v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  WTF::StringImpl *v18;
  __n128 result;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  float32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;

  if (*(_DWORD *)(a1 + 80) != 1 || a2[10].i32[0] != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_63:
    v47 = 0;
    goto LABEL_64;
  }
  v4 = a2[12];
  if (v4.f32[0] > 0.0 && v4.f32[1] > 0.0)
  {
    v5 = a2 + 11;
    v6.i32[0] = *(_DWORD *)(a1 + 96);
    if (v6.f32[0] <= 0.0 || *(float *)(a1 + 100) <= 0.0)
    {
      *(_OWORD *)(a1 + 88) = *(_OWORD *)v5->f32;
    }
    else
    {
      v7 = *(int8x8_t *)(a1 + 88);
      v8 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v7, *v5), (int8x8_t)*v5, v7);
      v6.i32[1] = *(_DWORD *)(a1 + 100);
      v9 = (int8x8_t)vadd_f32(v6, (float32x2_t)v7);
      v10 = (int8x8_t)vadd_f32(v4, *v5);
      *(float32x2_t *)(a1 + 88) = v8;
      *(float32x2_t *)(a1 + 96) = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v10, (float32x2_t)v9), v10, v9), v8);
    }
  }
  v11 = *(WTF::StringImpl **)(a1 + 40);
  if (v11)
  {
    v12 = *((_DWORD *)v11 + 1);
    *(_DWORD *)v11 += 2;
  }
  else
  {
    v12 = 0;
  }
  v13 = (uint64_t)a2[5];
  a2[5] = 0;
  if (v13)
    v14 = *(_DWORD *)(v13 + 4);
  else
    v14 = 0;
  if (((v14 | v12) & 0x80000000) != 0)
    goto LABEL_63;
  v15 = v12 + v14;
  if (__OFADD__(v12, v14))
    goto LABEL_63;
  if (v11)
  {
    v16 = *((_DWORD *)v11 + 4);
    v17 = (v16 >> 2) & 1;
    if (v13 && (v16 & 4) != 0)
      goto LABEL_17;
  }
  else
  {
    if (v13)
    {
LABEL_17:
      v17 = (*(unsigned __int8 *)(v13 + 16) >> 2) & 1;
      goto LABEL_18;
    }
    v17 = 1;
  }
LABEL_18:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v15, v17, (uint64_t)v11, v13, &v47);
  v20 = v47;
  if (!v47)
    goto LABEL_64;
  v47 = 0;
  v21 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v20;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, v18);
      v46 = v47;
      v47 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v18);
        else
          *(_DWORD *)v46 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v21 -= 2;
      v47 = 0;
    }
  }
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v13, v18);
      if (!v11)
        goto LABEL_28;
      goto LABEL_26;
    }
    *(_DWORD *)v13 -= 2;
  }
  if (!v11)
    goto LABEL_28;
LABEL_26:
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(v11, v18);
  else
    *(_DWORD *)v11 -= 2;
LABEL_28:
  if (a2[4].i8[0])
  {
    if (*(_BYTE *)(a1 + 32))
    {
      *(_QWORD *)(a1 + 24) += *(_QWORD *)&a2[3];
    }
    else
    {
      v22 = a2[3];
      *(_QWORD *)(a1 + 16) = *(_QWORD *)&a2[2] + v12;
      *(float32x2_t *)(a1 + 24) = v22;
      *(_BYTE *)(a1 + 32) = 1;
    }
  }
  v23 = a2[1].u32[1];
  if ((_DWORD)v23)
  {
    v24 = 56 * v23;
    v25 = (_QWORD *)(*(_QWORD *)a2 + 40);
    do
    {
      *v25 += v12;
      v25 += 7;
      v24 -= 56;
    }
    while (v24);
    v27 = *(unsigned int *)(a1 + 8);
    v26 = *(unsigned int *)(a1 + 12);
    v28 = v26 + v23;
    if (v28 <= v27)
    {
LABEL_46:
      v36 = a2[1].u32[1];
      if (v36)
      {
        v37 = (uint64_t *)*a2;
        v38 = *(_QWORD *)a2 + 56 * v36;
        v39 = *(_DWORD *)(a1 + 12);
        do
        {
          v40 = *(_QWORD *)a1 + 56 * v39;
          v41 = *v37;
          *v37 = 0;
          *(_QWORD *)v40 = v41;
          v42 = *(_DWORD *)(v40 + 8) & 0xFFFFFFFE | v37[1] & 1;
          *(_DWORD *)(v40 + 8) = v42;
          v43 = v42 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v37 + 2) >> 1) & 1));
          *(_DWORD *)(v40 + 8) = v43;
          v44 = v43 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v37 + 2) >> 2) & 1));
          *(_DWORD *)(v40 + 8) = v44;
          v45 = v44 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v37 + 2) >> 3) & 7));
          *(_DWORD *)(v40 + 8) = v45;
          *(_DWORD *)(v40 + 8) = v37[1] & 0xFFFFFFC0 | v45 & 0x3F;
          *(_OWORD *)(v40 + 12) = *(_OWORD *)((char *)v37 + 12);
          *(_QWORD *)(v40 + 28) = *(uint64_t *)((char *)v37 + 28);
          *(_DWORD *)(v40 + 36) = *((_DWORD *)v37 + 9);
          *((_DWORD *)v37 + 2) &= ~1u;
          result = *(__n128 *)(v37 + 5);
          *(__n128 *)(v40 + 40) = result;
          v39 = *(_DWORD *)(a1 + 12) + 1;
          *(_DWORD *)(a1 + 12) = v39;
          v37 += 7;
        }
        while (v37 != (uint64_t *)v38);
      }
      return result;
    }
    v29 = v27 + (v27 >> 2);
    if (v29 >= 0x10)
      v30 = v29 + 1;
    else
      v30 = 16;
    if (v30 > v28)
      v28 = v30;
    if (v28 < 0x4924925)
    {
      v31 = *(WTF::StringImpl **)a1;
      v32 = (WTF::StringImpl *)(*(_QWORD *)a1 + 56 * v26);
      v33 = 56 * v28;
      v34 = WTF::fastMalloc((WTF *)(56 * v28));
      *(_DWORD *)(a1 + 8) = v33 / 0x38;
      *(_QWORD *)a1 = v34;
      WTF::VectorMover<false,std::pair<WTF::URL,WebCore::CharacterRange>>::move(v31, v32, v34);
      if (v31)
      {
        if (*(WTF::StringImpl **)a1 == v31)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v31, v35);
      }
      goto LABEL_46;
    }
LABEL_64:
    __break(0xC471u);
    JUMPOUT(0x1960B8F10);
  }
  return result;
}

_BYTE ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WebCore::TextExtraction::SkipExtraction)#1},WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WTF::URL &&)#1},WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WebCore::TextExtraction::Editable &&)#1},WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> &&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::TextExtraction::SkipExtraction,WebCore::TextExtraction::ScrollableItemData,WTF::URL,WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WTF::URL &&)#1}> &&>(_BYTE ***result, _BYTE *a2)
{
  if (*a2)
    ***result = 1;
  return result;
}

WebCore::RenderObject *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WebCore::TextExtraction::SkipExtraction)#1},WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WTF::URL &&)#1},WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WebCore::TextExtraction::Editable &&)#1},WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> &&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::TextExtraction::SkipExtraction,WebCore::TextExtraction::ScrollableItemData,WTF::URL,WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WTF::URL &&)#1}> &&>(WebCore::RenderObject *result, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  WebCore::ScrollView *v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v21;
  float v22;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  _BYTE v38[80];
  unsigned int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[10];
  unsigned int v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(*(_QWORD *)result + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 528);
  v6 = 0.0;
  if (v5 && (v7 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v8 = *(WebCore::ScrollView **)(v7 + 288);
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    if (v8)
    {
      v12 = *(_QWORD *)(v4 + 64);
      v13 = *((_DWORD *)v8 + 2);
      *((_DWORD *)v8 + 2) = v13 + 1;
      result = (WebCore::RenderObject *)(v12 & 0xFFFFFFFFFFFFLL);
      if ((v12 & 0xFFFFFFFFFFFFLL) != 0)
      {
        v43[0] = WebCore::RenderObject::absoluteBoundingBoxRect(result, 1, 0);
        v43[1] = v14;
        result = (WebCore::RenderObject *)WebCore::ScrollView::contentsToRootView(v8, (const WebCore::IntRect *)v43);
        v11 = (float)(int)result;
        v10 = (float)SHIDWORD(result);
        v6 = (float)(int)a2;
        v9 = (float)SHIDWORD(a2);
        v13 = *((_DWORD *)v8 + 2) - 1;
      }
      if (v13)
        *((_DWORD *)v8 + 2) = v13;
      else
        result = (WebCore::RenderObject *)(*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  else
  {
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
  }
  v15 = *(_QWORD *)(v3 + 32);
  if (!*(_BYTE *)(v15 + 24))
    goto LABEL_23;
  v16 = *(float *)(v15 + 16);
  if (v16 > 0.0)
  {
    v17 = *(float *)(v15 + 20);
    if (v17 > 0.0 && v6 > 0.0 && v9 > 0.0)
    {
      v18 = *(float *)(v15 + 8);
      v19 = v16 + v18;
      if (v18 < (float)(v6 + v11) && v11 < v19)
      {
        v21 = *(float *)(v15 + 12);
        v22 = v17 + v21;
        if (v21 < (float)(v9 + v10) && v10 < v22)
        {
LABEL_23:
          v38[0] = 0;
          v39 = -1;
          v24 = a2[20];
          if ((_DWORD)v24 == -1)
          {
            v26 = 0;
            *(_QWORD *)&v40 = __PAIR64__(LODWORD(v10), LODWORD(v11));
            *((_QWORD *)&v40 + 1) = __PAIR64__(LODWORD(v9), LODWORD(v6));
            LOBYTE(v43[0]) = 0;
            v27 = 0;
            v44 = -1;
          }
          else
          {
            v25 = off_1E3404890[v24];
            ((void (*)(_QWORD *, _BYTE *, unsigned int *))v25)(v43, v38, a2);
            v39 = v24;
            *(_QWORD *)&v40 = __PAIR64__(LODWORD(v10), LODWORD(v11));
            *((_QWORD *)&v40 + 1) = __PAIR64__(LODWORD(v9), LODWORD(v6));
            v41 = 0;
            v42 = 0;
            LOBYTE(v43[0]) = 0;
            v44 = -1;
            ((void (*)(uint64_t *, _QWORD *, _BYTE *))v25)(&v49, v43, v38);
            v44 = v24;
            v26 = v41;
            v27 = v42;
          }
          v45 = v40;
          v41 = 0;
          v42 = 0;
          v46 = v26;
          v47 = v27;
          v48 = 1;
          v28 = *(_QWORD *)(v3 + 40);
          if (!*(_BYTE *)(v28 + 120))
          {
            *(_BYTE *)v28 = 0;
            *(_DWORD *)(v28 + 80) = -1;
            v30 = v44;
            if (v44 != -1)
            {
              ((void (*)(uint64_t *, uint64_t, _QWORD *))off_1E3404890[v44])(&v49, v28, v43);
              *(_DWORD *)(v28 + 80) = v30;
            }
            *(_OWORD *)(v28 + 88) = v45;
            *(_QWORD *)(v28 + 104) = 0;
            *(_QWORD *)(v28 + 112) = 0;
            v31 = v46;
            v46 = 0;
            *(_QWORD *)(v28 + 104) = v31;
            LODWORD(v31) = v47;
            LODWORD(v47) = 0;
            *(_DWORD *)(v28 + 112) = v31;
            LODWORD(v31) = HIDWORD(v47);
            HIDWORD(v47) = 0;
            *(_DWORD *)(v28 + 116) = v31;
            *(_BYTE *)(v28 + 120) = 1;
            goto LABEL_43;
          }
          v29 = *(unsigned int *)(v28 + 80);
          if ((_DWORD)v29 == -1)
          {
            if ((_DWORD)v24 == -1)
              goto LABEL_35;
          }
          else if ((_DWORD)v24 == -1)
          {
            ((void (*)(uint64_t *, _QWORD))*(&off_1E3404870 + v29))(&v49, *(_QWORD *)(v3 + 40));
            *(_DWORD *)(v28 + 80) = -1;
LABEL_35:
            *(_OWORD *)(v28 + 88) = v45;
            v32 = *(unsigned int *)(v28 + 116);
            if ((_DWORD)v32)
            {
              v33 = 120 * v32;
              v34 = *(_QWORD *)(v28 + 104) + 104;
              do
              {
                WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v34, a2);
                v35 = *(unsigned int *)(v34 - 24);
                if ((_DWORD)v35 != -1)
                  ((void (*)(uint64_t *, uint64_t))*(&off_1E3404870 + v35))(&v49, v34 - 104);
                *(_DWORD *)(v34 - 24) = -1;
                v34 += 120;
                v33 -= 120;
              }
              while (v33);
            }
            v36 = *(WTF **)(v28 + 104);
            if (v36)
            {
              *(_QWORD *)(v28 + 104) = 0;
              *(_DWORD *)(v28 + 112) = 0;
              WTF::fastFree(v36, a2);
            }
            v37 = v46;
            v46 = 0;
            *(_QWORD *)(v28 + 104) = v37;
            LODWORD(v37) = v47;
            LODWORD(v47) = 0;
            *(_DWORD *)(v28 + 112) = v37;
            LODWORD(v37) = HIDWORD(v47);
            HIDWORD(v47) = 0;
            *(_DWORD *)(v28 + 116) = v37;
LABEL_43:
            if (v48)
            {
              WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, a2);
              if (v44 != -1)
                ((void (*)(uint64_t *, _QWORD *))*(&off_1E3404870 + v44))(&v49, v43);
              v44 = -1;
            }
            result = (WebCore::RenderObject *)WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, a2);
            if (v39 != -1)
              return (WebCore::RenderObject *)((uint64_t (*)(uint64_t *, _BYTE *))*(&off_1E3404870 + v39))(&v49, v38);
            return result;
          }
          v49 = *(_QWORD *)(v3 + 40);
          ((void (*)(uint64_t *, uint64_t, _QWORD *))off_1E34048B0[v24])(&v49, v28, v43);
          goto LABEL_35;
        }
      }
    }
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WebCore::TextExtraction::SkipExtraction)#1},WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WTF::URL &&)#1},WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WebCore::TextExtraction::Editable &&)#1},WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> &&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::TextExtraction::SkipExtraction,WebCore::TextExtraction::ScrollableItemData,WTF::URL,WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WTF::URL &&)#1}> &&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  double result;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v4 = *(unsigned __int8 *)(v3 + 40);
  v5 = *a2;
  *a2 = 0;
  if (v4)
  {
    v6 = *(WTF::StringImpl **)v3;
    *(_QWORD *)v3 = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    *(_DWORD *)(v3 + 8) = *(_DWORD *)(v3 + 8) & 0xFFFFFFFE | a2[1] & 1;
    v7 = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v7 & 0xFFFFFFFE;
    v8 = *(_DWORD *)(v3 + 8) & 0xFFFFFFFD | (2 * ((v7 >> 1) & 1));
    *(_DWORD *)(v3 + 8) = v8;
    v9 = v8 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
    *(_DWORD *)(v3 + 8) = v9;
    v10 = v9 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
    *(_DWORD *)(v3 + 8) = v10;
    *(_DWORD *)(v3 + 8) = a2[1] & 0xFFFFFFC0 | v10 & 0x3F;
    *(_OWORD *)(v3 + 12) = *(_OWORD *)((char *)a2 + 12);
    result = *(double *)((char *)a2 + 28);
    *(double *)(v3 + 28) = result;
    *(_DWORD *)(v3 + 36) = *((_DWORD *)a2 + 9);
  }
  else
  {
    *(_QWORD *)v3 = v5;
    v12 = *(_DWORD *)(v3 + 8) & 0xFFFFFFFE | a2[1] & 1;
    *(_DWORD *)(v3 + 8) = v12;
    v13 = v12 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
    *(_DWORD *)(v3 + 8) = v13;
    v14 = v13 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
    *(_DWORD *)(v3 + 8) = v14;
    v15 = v14 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
    *(_DWORD *)(v3 + 8) = v15;
    *(_DWORD *)(v3 + 8) = a2[1] & 0xFFFFFFC0 | v15 & 0x3F;
    *(_OWORD *)(v3 + 12) = *(_OWORD *)((char *)a2 + 12);
    result = *(double *)((char *)a2 + 28);
    *(double *)(v3 + 28) = result;
    *(_DWORD *)(v3 + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 2) &= ~1u;
    *(_BYTE *)(v3 + 40) = 1;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WebCore::TextExtraction::SkipExtraction)#1},WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WTF::URL &&)#1},WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WebCore::TextExtraction::Editable &&)#1},WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> &&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::TextExtraction::SkipExtraction,WebCore::TextExtraction::ScrollableItemData,WTF::URL,WebCore::TextExtraction::extractRecursive(WebCore::Node &,WebCore::TextExtraction::Item &,WebCore::TextExtraction::TraversalContext &)::{lambda(WTF::URL &&)#1}> &&>(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  v4 = *(unsigned __int8 *)(v3 + 24);
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v4)
  {
    v6 = *(WTF::StringImpl **)v3;
    *(_QWORD *)v3 = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    result = *(WTF::StringImpl **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v7;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_WORD *)(v3 + 16) = *((_WORD *)a2 + 8);
  }
  else
  {
    *(_QWORD *)v3 = v5;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)(v3 + 8) = v8;
    *(_WORD *)(v3 + 16) = *((_WORD *)a2 + 8);
    *(_BYTE *)(v3 + 24) = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSA_SB_SC_SD_EEEEEEDcSH_DpT0_(int a1, WebCore::TextExtraction::TextItemData *this)
{
  WebCore::TextExtraction::TextItemData::~TextItemData(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  v4 = *((_OWORD *)a3 + 1);
  *(_QWORD *)(a2 + 32) = a3[4];
  *(_OWORD *)(a2 + 16) = v4;
  v5 = a3[5];
  a3[5] = 0;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*((_BYTE *)a3 + 72))
  {
    v6 = a3[6];
    a3[6] = 0;
    *(_QWORD *)(a2 + 48) = v6;
    v7 = a3[7];
    a3[7] = 0;
    *(_QWORD *)(a2 + 56) = v7;
    *(_WORD *)(a2 + 64) = *((_WORD *)a3 + 32);
    *(_BYTE *)(a2 + 72) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E3404870 + v5))(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 80) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v7 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v7)
      {
        v8 = *(WTF::StringImpl ***)a2;
        v9 = 56 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          v8 += 7;
          v9 -= 56;
        }
        while (v9);
      }
      v16 = *(WTF **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
        WTF::fastFree(v16, (void *)a2);
      }
      v17 = *a3;
      *a3 = 0;
      *(_QWORD *)a2 = v17;
      LODWORD(v17) = *((_DWORD *)a3 + 2);
      *((_DWORD *)a3 + 2) = 0;
      *(_DWORD *)(a2 + 8) = v17;
      LODWORD(v17) = *((_DWORD *)a3 + 3);
      *((_DWORD *)a3 + 3) = 0;
      *(_DWORD *)(a2 + 12) = v17;
      v18 = *((_OWORD *)a3 + 1);
      *(_BYTE *)(a2 + 32) = *((_BYTE *)a3 + 32);
      *(_OWORD *)(a2 + 16) = v18;
      v19 = a3[5];
      a3[5] = 0;
      v20 = *(WTF::StringImpl **)(a2 + 40);
      *(_QWORD *)(a2 + 40) = v19;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v20 -= 2;
      }
      return std::__optional_storage_base<WebCore::TextExtraction::Editable,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::TextExtraction::Editable,false>>(a2 + 48, (WTF::StringImpl *)(a3 + 6));
    }
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E3404870 + v5))(&v21, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)v4 = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(v4 + 8) = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(v4 + 12) = v11;
  v12 = *((_OWORD *)a3 + 1);
  *(_QWORD *)(v4 + 32) = a3[4];
  *(_OWORD *)(v4 + 16) = v12;
  v13 = a3[5];
  a3[5] = 0;
  *(_QWORD *)(v4 + 40) = v13;
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*((_BYTE *)a3 + 72))
  {
    v14 = a3[6];
    a3[6] = 0;
    *(_QWORD *)(v4 + 48) = v14;
    v15 = a3[7];
    a3[7] = 0;
    *(_QWORD *)(v4 + 56) = v15;
    *(_WORD *)(v4 + 64) = *((_WORD *)a3 + 32);
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_DWORD *)(v4 + 80) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E3404870 + v5))(&v6, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 80) = 2;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 3)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))*(&off_1E3404870 + v5))(&v12, v4);
LABEL_10:
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    v11 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(v4 + 8) = v11;
    *(_DWORD *)(v4 + 80) = 3;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = *a2;
  *a2 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = a3[1];
  a3[1] = 0;
  result = a2[1];
  a2[1] = v9;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction14SkipExtractionENS_7variantIJNS9_13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEN3WTF3URLENS9_8EditableEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSA_SG_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E3404870 + v3))(&v5, a2);
  *(_DWORD *)(a2 + 80) = -1;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction14SkipExtractionENS_7variantIJNS9_13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEN3WTF3URLENS9_8EditableEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSA_SG_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction14SkipExtractionENS_7variantIJNS9_13ContainerTypeENS9_12TextItemDataENS9_18ScrollableItemDataENS9_13ImageItemDataEEEEN3WTF3URLENS9_8EditableEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSA_SG_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::TextExtraction::TextItemData::~TextItemData(WebCore::TextExtraction::TextItemData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;

  if (*((_BYTE *)this + 72))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((unsigned int *)this + 3);
  if ((_DWORD)v6)
  {
    v7 = *(WTF::StringImpl ***)this;
    v8 = 56 * v6;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v7 += 7;
      v8 -= 56;
    }
    while (v8);
  }
  v10 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v10, a2);
  }
}

char *WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 56 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x4924925)
      {
        __break(0xC471u);
        JUMPOUT(0x1960B9D80);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 56 * *(unsigned int *)(a1 + 12));
      v18 = 56 * v16;
      v19 = WTF::fastMalloc((WTF *)(56 * v16));
      *(_DWORD *)(a1 + 8) = v18 / 0x38;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,std::pair<WTF::URL,WebCore::CharacterRange>>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x4924925)
      {
        __break(0xC471u);
        JUMPOUT(0x1960B9D88);
      }
      v10 = 56 * v9;
      v11 = WTF::fastMalloc((WTF *)(56 * v9));
      *(_DWORD *)(a1 + 8) = v10 / 0x38;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,std::pair<WTF::URL,WebCore::CharacterRange>>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<WTF::URL,WebCore::CharacterRange>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *(_DWORD *)(a3 + 8) & 0xFFFFFFFE | *((_DWORD *)v5 + 2) & 1;
      *(_DWORD *)(a3 + 8) = v7;
      v8 = v7 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v5 + 2) >> 1) & 1));
      *(_DWORD *)(a3 + 8) = v8;
      v9 = v8 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v5 + 2) >> 2) & 1));
      *(_DWORD *)(a3 + 8) = v9;
      v10 = v9 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v5 + 2) >> 3) & 7));
      *(_DWORD *)(a3 + 8) = v10;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2) & 0xFFFFFFC0 | v10 & 0x3F;
      *(_OWORD *)(a3 + 12) = *(_OWORD *)((char *)v5 + 12);
      *(_QWORD *)(a3 + 28) = *(_QWORD *)((char *)v5 + 28);
      *(_DWORD *)(a3 + 36) = *((_DWORD *)v5 + 9);
      *((_DWORD *)v5 + 2) &= ~1u;
      *(_OWORD *)(a3 + 40) = *(_OWORD *)((char *)v5 + 40);
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 56);
      a3 += 56;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::TextExtraction::Editable,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::TextExtraction::Editable,false>>(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  if (*(unsigned __int8 *)(result + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if (*(_BYTE *)(result + 24))
    {
      v4 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v5 = *(WTF::StringImpl **)result;
      *(_QWORD *)v3 = v4;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      result = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = v6;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      *(_WORD *)(v3 + 16) = *((_WORD *)a2 + 8);
    }
  }
  else if (*(_BYTE *)(result + 24))
  {
    v7 = *(WTF::StringImpl **)(result + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    result = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v3 + 24) = 0;
  }
  else
  {
    v8 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)result = v8;
    v9 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)(result + 8) = v9;
    *(_WORD *)(result + 16) = *((_WORD *)a2 + 8);
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

unint64_t WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 120 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x2222223)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 120 * a2;
      result = WTF::fastMalloc((WTF *)(120 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x78;
      v15 = v2;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 0;
        v9 = 120 * v4;
        do
        {
          v10 = v7 + v8;
          v11 = (char *)v3 + v8;
          *(_BYTE *)v10 = 0;
          *(_DWORD *)(v10 + 80) = -1;
          v12 = *(unsigned int *)((char *)v3 + v8 + 80);
          if ((_DWORD)v12 != -1)
          {
            ((void (*)(char *, uint64_t, char *))off_1E3404890[v12])(&v16, v7 + v8, (char *)v3 + v8);
            *(_DWORD *)(v10 + 80) = v12;
          }
          *(_OWORD *)(v10 + 88) = *(_OWORD *)(v11 + 88);
          *(_QWORD *)(v10 + 104) = 0;
          *(_QWORD *)(v10 + 112) = 0;
          v13 = *((_QWORD *)v11 + 13);
          *((_QWORD *)v11 + 13) = 0;
          *(_QWORD *)(v10 + 104) = v13;
          LODWORD(v13) = *((_DWORD *)v11 + 28);
          *((_DWORD *)v11 + 28) = 0;
          *(_DWORD *)(v10 + 112) = v13;
          LODWORD(v13) = *((_DWORD *)v11 + 29);
          *((_DWORD *)v11 + 29) = 0;
          *(_DWORD *)(v10 + 116) = v13;
          result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v11 + 104), v6);
          v14 = *((unsigned int *)v11 + 20);
          if ((_DWORD)v14 != -1)
            result = ((uint64_t (*)(char *, char *))*(&off_1E3404870 + v14))(&v17, (char *)v3 + v8);
          *((_DWORD *)v11 + 20) = -1;
          v8 += 120;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v15 == v3)
        {
          *(_QWORD *)v15 = 0;
          *(_DWORD *)(v15 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::VectorMover<false,WebCore::TextExtraction::Item>::moveOverlapping(unint64_t result, char *a2, unint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v5 = (char *)result;
  if (result <= a3)
  {
    if (a2 != (char *)result)
    {
      v12 = 0;
      v13 = &a2[a3 - result];
      do
      {
        v14 = &a2[v12];
        v15 = &v13[v12];
        v13[v12 - 120] = 0;
        v16 = &v13[v12 - 120];
        *(_DWORD *)&v13[v12 - 40] = -1;
        v17 = *(unsigned int *)&a2[v12 - 40];
        if ((_DWORD)v17 != -1)
        {
          ((void (*)(char *, char *, char *))off_1E3404890[v17])(&v23, v16, &a2[v12 - 120]);
          *((_DWORD *)v15 - 10) = v17;
        }
        *((_OWORD *)v15 - 2) = *((_OWORD *)v14 - 2);
        *((_QWORD *)v15 - 2) = 0;
        *((_QWORD *)v15 - 1) = 0;
        v18 = v14 - 16;
        v19 = *((_QWORD *)v14 - 2);
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v15 - 2) = v19;
        LODWORD(v19) = *((_DWORD *)v14 - 2);
        *((_DWORD *)v18 + 2) = 0;
        *((_DWORD *)v15 - 2) = v19;
        LODWORD(v19) = *((_DWORD *)v14 - 1);
        *((_DWORD *)v18 + 3) = 0;
        *((_DWORD *)v15 - 1) = v19;
        result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v14 - 16), v16);
        v20 = *((unsigned int *)v14 - 10);
        if ((_DWORD)v20 != -1)
          result = ((uint64_t (*)(char *, char *))*(&off_1E3404870 + v20))(&v24, &a2[v12 - 120]);
        *((_DWORD *)v14 - 10) = -1;
        v12 -= 120;
      }
      while (&a2[v12] != v5);
    }
  }
  else if ((char *)result != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = &v5[v6];
      *(_BYTE *)v7 = 0;
      *(_DWORD *)(v7 + 80) = -1;
      v9 = *(unsigned int *)&v5[v6 + 80];
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(char *, unint64_t, char *))off_1E3404890[v9])(&v21, a3 + v6, &v5[v6]);
        *(_DWORD *)(v7 + 80) = v9;
      }
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
      *(_QWORD *)(v7 + 104) = 0;
      *(_QWORD *)(v7 + 112) = 0;
      v10 = *((_QWORD *)v8 + 13);
      *((_QWORD *)v8 + 13) = 0;
      *(_QWORD *)(v7 + 104) = v10;
      LODWORD(v10) = *((_DWORD *)v8 + 28);
      *((_DWORD *)v8 + 28) = 0;
      *(_DWORD *)(v7 + 112) = v10;
      LODWORD(v10) = *((_DWORD *)v8 + 29);
      *((_DWORD *)v8 + 29) = 0;
      *(_DWORD *)(v7 + 116) = v10;
      result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v8 + 104), a2);
      v11 = *((unsigned int *)v8 + 20);
      if ((_DWORD)v11 != -1)
        result = ((uint64_t (*)(char *, char *))*(&off_1E3404870 + v11))(&v22, &v5[v6]);
      *((_DWORD *)v8 + 20) = -1;
      v6 += 120;
    }
    while (&v5[v6] != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v9;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 120 * v3;
    v6 = (char *)v4 + 104;
    do
    {
      WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6);
      v7 = *((unsigned int *)v6 - 6);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, char *))*(&off_1E3404870 + v7))(&v9, v6 - 104);
      *((_DWORD *)v6 - 6) = -1;
      v6 += 120;
      v5 -= 120;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WebCore::ScrollView ***WebCore::TextExtraction::extractRenderedTokens(WTF::Vector<WebCore::TextExtraction::TokenAndBlockOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::ContainerNode &,WebCore::BlockFlowDirection)::$_2::operator()(WebCore::ScrollView ***result, WebCore::RenderObject *this)
{
  WebCore::ScrollView ***v2;
  WebCore::RenderObject *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  uint64_t v27;
  _QWORD v28[2];
  char v29;

  v2 = result;
  v3 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v3 = *(WebCore::RenderObject **)(*((_QWORD *)this + 4) + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 11) + 16) + 8);
  if (*(_QWORD *)(v4 + 8))
  {
    while (!*(_QWORD *)(v4 + 16))
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        goto LABEL_8;
    }
  }
  else
  {
    if (*(_QWORD *)(v4 + 16))
      v5 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v5 = 0;
    if (!v5)
    {
LABEL_8:
      if ((*((_BYTE *)this + 52) & 7) != 3)
        return result;
    }
  }
  v28[0] = WebCore::RenderObject::absoluteBoundingBoxRect(this, 1, 0);
  v28[1] = v6;
  v7 = (float)(int)v6;
  v8 = (float)SHIDWORD(v6);
  v9 = *((_QWORD *)**v2 + 41);
  v10 = *(float *)(v9 + 592);
  v11 = *(_QWORD *)(v9 + 24);
  v12 = 1.0;
  if (v11)
  {
    v13 = *(_QWORD *)(v11 + 8);
    if (v13)
    {
      v14 = (*(_DWORD *)v13)++;
      if (*(_QWORD *)(*(_QWORD *)(v9 + 128) + 8) == v9 && !*(_BYTE *)(v13 + 1098))
        v12 = *(float *)(v13 + 356);
      if (v14)
      {
        *(_DWORD *)v13 = v14;
      }
      else
      {
        WebCore::Page::~Page(v13);
        WTF::fastFree(v24, v25);
      }
    }
  }
  v15 = (uint64_t)v2[1];
  v16 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v26 = v16;
  *(_QWORD *)v16 = (10 * llroundf((float)((float)(1.0 / (float)(v10 * v12)) * v7) / 10.0)) | ((unint64_t)((10 * llroundf((float)((float)(1.0 / (float)(v10 * v12)) * v8) / 10.0)) >> 1) << 33);
  *((_DWORD *)v16 + 2) = 1;
  v27 = 0x100000001;
  v17 = WebCore::ScrollView::contentsToRootView(**v2, (const WebCore::IntRect *)v28);
  result = (WebCore::ScrollView ***)WebCore::TextExtraction::extractRenderedTokens(WTF::Vector<WebCore::TextExtraction::TokenAndBlockOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::ContainerNode &,WebCore::BlockFlowDirection)::$_0::operator()(v15, (uint64_t)&v26, v17, v18);
  v20 = v26;
  if (HIDWORD(v27))
  {
    v21 = 16 * HIDWORD(v27);
    v22 = v26;
    do
    {
      v23 = *((unsigned int *)v22 + 2);
      if ((_DWORD)v23 != -1)
        result = (WebCore::ScrollView ***)((uint64_t (*)(char *, WTF *))off_1E34048F0[v23])(&v29, v22);
      *((_DWORD *)v22 + 2) = -1;
      v22 = (WTF *)((char *)v22 + 16);
      v21 -= 16;
    }
    while (v21);
  }
  if (v20)
    return (WebCore::ScrollView ***)WTF::fastFree(v20, v19);
  return result;
}

uint64_t WebCore::TextExtraction::extractRenderedTokens(WTF::Vector<WebCore::TextExtraction::TokenAndBlockOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::ContainerNode &,WebCore::BlockFlowDirection)::$_0::operator()(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  WTF *v16;
  int v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  WTF *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  int v40;
  unsigned int v41;
  int v42;
  char v43;

  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
    v5 = (int)a4 < 6;
  else
    v5 = 1;
  if (!v5 && SHIDWORD(a4) >= 6)
  {
    v8 = HIDWORD(a3);
    switch(**(_BYTE **)result)
    {
      case 0:
        break;
      case 1:
        LODWORD(v8) = HIDWORD(a4) + HIDWORD(a3);
        break;
      case 2:
        LODWORD(v8) = a3;
        break;
      case 3:
        LODWORD(v8) = a4 + a3;
        break;
      default:
        LODWORD(v8) = 0;
        break;
    }
    v9 = *(_QWORD *)(result + 8);
    v10 = *(unsigned int *)(v9 + 12);
    if (!(_DWORD)v10)
      goto LABEL_21;
    v11 = 0;
    v12 = *(_QWORD *)v9;
    v13 = 24 * v10;
    v14 = 1;
    while (1)
    {
      v15 = v8 - *(_DWORD *)(v12 + v13 - 8);
      if (v15 < 0)
        v15 = *(_DWORD *)(v12 + v13 - 8) - v8;
      if (v15 <= 5)
        break;
      ++v14;
      v12 -= 24;
      v11 += 24;
      if (v13 == v11)
        goto LABEL_21;
    }
    if (24 * v10 != v11)
    {
      if (v14 > v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1960BA8F4);
      }
      v28 = v12 + 24 * v10;
      v29 = *(unsigned int *)(v28 - 16);
      v30 = *(unsigned int *)(v28 - 12) + v4;
      if (v30 > v29)
      {
        v31 = v29 + (v29 >> 2);
        if (v31 >= 0x10)
          v32 = v31 + 1;
        else
          v32 = 16;
        if (v32 <= v30)
          v33 = v30;
        else
          v33 = v32;
        result = WTF::Vector<std::variant<WTF::String,WebCore::IntSize>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v28 - 24, v33);
        v4 = *(unsigned int *)(a2 + 12);
      }
      if ((_DWORD)v4)
      {
        v34 = *(WTF **)a2;
        v35 = *(_DWORD *)(v28 - 12);
        v36 = 16 * v4;
        do
        {
          v37 = *(_QWORD *)(v28 - 24) + 16 * v35;
          *(_BYTE *)v37 = 0;
          *(_DWORD *)(v37 + 8) = -1;
          v38 = *((unsigned int *)v34 + 2);
          if ((_DWORD)v38 != -1)
          {
            result = ((uint64_t (*)(WTF **, uint64_t, WTF *))off_1E3404900[v38])(&v39, v37, v34);
            *(_DWORD *)(v37 + 8) = v38;
          }
          v35 = *(_DWORD *)(v28 - 12) + 1;
          *(_DWORD *)(v28 - 12) = v35;
          v34 = (WTF *)((char *)v34 + 16);
          v36 -= 16;
        }
        while (v36);
      }
    }
    else
    {
LABEL_21:
      v16 = *(WTF **)a2;
      v39 = *(WTF **)a2;
      v17 = *(_DWORD *)(a2 + 8);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v40 = v17;
      v41 = v4;
      v42 = v8;
      v18 = *(unsigned int *)(v9 + 12);
      if ((_DWORD)v18 == *(_DWORD *)(v9 + 8))
      {
        result = WTF::Vector<WebCore::TextExtraction::TokenAndBlockOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v18 + 1, (unint64_t)&v39);
        v20 = (_QWORD *)(*(_QWORD *)v9 + 24 * *(unsigned int *)(v9 + 12));
        *v20 = 0;
        v20[1] = 0;
        v21 = *(_BYTE **)result;
        *(_QWORD *)result = 0;
        *v20 = v21;
        LODWORD(v21) = *(_DWORD *)(result + 8);
        *(_DWORD *)(result + 8) = 0;
        *((_DWORD *)v20 + 2) = (_DWORD)v21;
        v22 = *(_QWORD *)(result + 12);
        *(_DWORD *)(result + 12) = 0;
        *(_QWORD *)((char *)v20 + 12) = v22;
        v23 = v41;
        v24 = (unsigned int *)v39;
        ++*(_DWORD *)(v9 + 12);
        if ((_DWORD)v23)
        {
          v25 = 16 * v23;
          do
          {
            v26 = v24[2];
            if ((_DWORD)v26 != -1)
              result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v26])(&v43, v24);
            v24[2] = -1;
            v24 += 4;
            v25 -= 16;
          }
          while (v25);
          v24 = (unsigned int *)v39;
        }
        if (v24)
        {
          v39 = 0;
          v40 = 0;
          return WTF::fastFree((WTF *)v24, v19);
        }
      }
      else
      {
        v27 = *(_QWORD *)v9 + 24 * v18;
        *(_QWORD *)v27 = v16;
        *(_DWORD *)(v27 + 8) = v17;
        *(_DWORD *)(v27 + 12) = v4;
        *(_DWORD *)(v27 + 16) = v8;
        *(_DWORD *)(v9 + 12) = v18 + 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore7IntSizeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore7IntSizeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

unint64_t WTF::Vector<std::variant<WTF::String,WebCore::IntSize>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::variant<WTF::String,WebCore::IntSize>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::variant<WTF::String,WebCore::IntSize>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::variant<WTF::String,WebCore::IntSize>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 16 * v5;
        v9 = v4;
        do
        {
          *(_BYTE *)v7 = 0;
          *(_DWORD *)(v7 + 8) = -1;
          v10 = *((unsigned int *)v9 + 2);
          if ((_DWORD)v10 != -1)
          {
            result = ((uint64_t (*)(char *, uint64_t, WTF *))off_1E3404900[v10])(&v12, v7, v9);
            *(_DWORD *)(v7 + 8) = v10;
            v11 = *((unsigned int *)v9 + 2);
            if ((_DWORD)v11 != -1)
              result = ((uint64_t (*)(char *, WTF *))off_1E34048F0[v11])(&v13, v9);
          }
          *((_DWORD *)v9 + 2) = -1;
          v7 += 16;
          v9 = (WTF *)((char *)v9 + 16);
          v8 -= 16;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::TextExtraction::TokenAndBlockOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::TextExtraction::TokenAndBlockOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::TextExtraction::TokenAndBlockOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TextExtraction::TokenAndBlockOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  _QWORD *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 24 * a2;
      result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = (_QWORD *)result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          *v7 = 0;
          v7[1] = 0;
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *v7 = v10;
          LODWORD(v10) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = 0;
          *((_DWORD *)v7 + 2) = (_DWORD)v10;
          v11 = *(_QWORD *)((char *)v9 + 12);
          *((_DWORD *)v9 + 3) = 0;
          *(_QWORD *)((char *)v7 + 12) = v11;
          v12 = *((unsigned int *)v9 + 3);
          v13 = *(unsigned int **)v9;
          if ((_DWORD)v12)
          {
            v14 = 16 * v12;
            do
            {
              v15 = v13[2];
              if ((_DWORD)v15 != -1)
                result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v15])(&v16, v13);
              v13[2] = -1;
              v13 += 4;
              v14 -= 16;
            }
            while (v14);
            v13 = *(unsigned int **)v9;
          }
          if (v13)
          {
            *(_QWORD *)v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            result = WTF::fastFree((WTF *)v13, v6);
          }
          v7 += 3;
          v9 = (WTF *)((char *)v9 + 24);
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *,false>(uint64_t result, unsigned int **a2, unsigned __int8 **a3, uint64_t a4, char a5)
{
  uint64_t v6;
  unsigned int **v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v25;
  BOOL v26;
  char v27;
  char v28;
  unsigned int *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL4 v33;
  int v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  char v38;
  unsigned int **v39;
  unsigned int **v40;
  int v41;
  _BOOL4 v42;
  int v43;
  unsigned int **v44;
  int v45;
  BOOL v46;
  char v47;
  unint64_t v48;
  unsigned int **v49;
  unsigned int *v50;
  unsigned int *v51;
  int v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _BOOL4 v60;
  int v61;
  unsigned int **v62;
  int v63;
  BOOL v64;
  char v65;
  unint64_t v66;
  int v67;
  _BOOL4 v68;
  int v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  unsigned int *v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  char v85;
  unsigned int **v86;
  int v87;
  BOOL v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  BOOL v93;
  char v94;
  unsigned int **v95;
  unsigned int **v96;
  int v97;
  BOOL v98;
  char v99;
  unsigned int *v100;
  unsigned int *v101;
  int v102;
  unsigned int *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  BOOL v110;
  char v111;
  unsigned int **v112;
  int v113;
  _BOOL4 v114;
  int v115;
  unint64_t v116;
  int v117;
  BOOL v118;
  char v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  _BOOL4 v132;
  int v133;
  int v134;
  unsigned int *v135;
  unsigned int *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int **v143;
  BOOL v145;
  unint64_t v146;
  unsigned int **v147;
  int v148;
  int v149;
  _BOOL4 v150;
  int v151;
  int v152;
  unsigned int *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  BOOL v164;
  char v165;
  char v166;
  int64_t v167;
  int64_t v168;
  uint64_t v169;
  unint64_t v170;
  int v171;
  int v172;
  _BOOL4 v173;
  int v174;
  unint64_t v175;
  int v176;
  BOOL v177;
  char v178;
  char v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int *v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int v190;
  _BOOL4 v191;
  int v192;
  int v193;
  _BOOL4 v194;
  _BOOL4 v195;
  _BOOL4 v196;
  uint64_t v197;
  unsigned int *v198;
  uint64_t v199;
  uint64_t v200;
  int64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int v208;
  _BOOL4 v209;
  _BOOL4 v210;
  _BOOL4 v211;
  uint64_t v212;
  unsigned int *v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int *v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  int v231;
  _BOOL4 v232;
  _BOOL4 v233;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int *v241;
  uint64_t v242;
  int v243;
  BOOL v244;
  BOOL v245;
  BOOL v246;
  uint64_t v247;
  unsigned int *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  int v258;
  int v259;
  _BOOL4 v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int *v269;
  unsigned int *v270;
  int v271;
  BOOL v272;
  char v273;
  uint64_t v274;
  unsigned int **v275;
  unsigned int *v277;
  int v278;
  unsigned int *v279;
  int64_t v280;
  int v281;
  uint64_t v282;
  int v283;
  int v284;
  unsigned int *v285;
  unint64_t v286;
  unsigned int *v287;
  int64_t v288;
  unsigned int *v289;
  int v290;
  unsigned int *v291;
  unsigned int **v292;
  char v294;

  v292 = a2;
  v6 = result;
LABEL_2:
  v7 = v292;
  v274 = (uint64_t)(v292 - 3);
  v8 = v6;
  while (2)
  {
    v6 = v8;
    v9 = (uint64_t)v7 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v8) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v130 = *((_DWORD *)v292 - 2);
        v131 = *(_DWORD *)(v8 + 16);
        v25 = v130 <= v131;
        v132 = v130 < v131;
        v133 = !v25;
        if (**a3)
          v134 = v132;
        else
          v134 = v133;
        if (v134 == 1)
        {
          v135 = *(unsigned int **)v8;
          v136 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          v137 = (uint64_t)*(v292 - 3);
          *(v292 - 3) = 0;
          *(_QWORD *)v8 = v137;
          LODWORD(v137) = *((_DWORD *)v292 - 4);
          *((_DWORD *)v292 - 4) = 0;
          *(_DWORD *)(v8 + 8) = v137;
          v138 = *(uint64_t *)((char *)v292 - 12);
          *((_DWORD *)v292 - 3) = 0;
          *(_QWORD *)(v8 + 12) = v138;
          v139 = *((unsigned int *)v292 - 3);
          v140 = *(v292 - 3);
          if ((_DWORD)v139)
          {
            v141 = 16 * v139;
            do
            {
              v142 = v140[2];
              if ((_DWORD)v142 != -1)
                result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v142])(&v294, v140);
              v140[2] = -1;
              v140 += 4;
              v141 -= 16;
            }
            while (v141);
            v140 = *(v292 - 3);
          }
          if (v140)
          {
            *(v292 - 3) = 0;
            *((_DWORD *)v292 - 4) = 0;
            result = WTF::fastFree((WTF *)v140, a2);
          }
          *(v292 - 3) = v135;
          *(v292 - 2) = v136;
          *((_DWORD *)v292 - 2) = v131;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(v8, (_DWORD *)(v8 + 24), v274, a3);
      case 4uLL:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(v8, (unsigned int **)(v8 + 24), v8 + 48, v274, a3);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *,0>(v8, v8 + 24, v8 + 48, v8 + 72, v274, a3);
      default:
        if (v9 <= 575)
        {
          v143 = (unsigned int **)(v8 + 24);
          v145 = (unsigned int **)v8 == v7 || v143 == v7;
          if ((a5 & 1) != 0)
          {
            if (!v145)
            {
              v146 = v8;
              do
              {
                v147 = v143;
                v148 = *(_DWORD *)(v146 + 40);
                v149 = *(_DWORD *)(v146 + 16);
                v25 = v148 <= v149;
                v150 = v148 < v149;
                v151 = !v25;
                if (**a3)
                  v152 = v150;
                else
                  v152 = v151;
                if (v152 == 1)
                {
                  v153 = *v147;
                  *v147 = 0;
                  v154 = *(_QWORD *)(v146 + 32);
                  *(_QWORD *)(v146 + 32) = 0;
                  v155 = *((unsigned int *)v147 + 3);
                  v156 = (uint64_t)v147;
                  while (1)
                  {
                    v157 = v146;
                    if (v155)
                    {
                      v158 = 0;
                      v159 = 16 * v155;
                      do
                      {
                        v160 = *(unsigned int *)(v158 + 8);
                        if ((_DWORD)v160 != -1)
                          ((void (*)(char *, uint64_t))off_1E34048F0[v160])(&v294, v158);
                        *(_DWORD *)(v158 + 8) = -1;
                        v158 += 16;
                        v159 -= 16;
                      }
                      while (v159);
                      result = *(_QWORD *)v156;
                      if (*(_QWORD *)v156)
                      {
                        *(_QWORD *)v156 = 0;
                        *(_DWORD *)(v156 + 8) = 0;
                        result = WTF::fastFree((WTF *)result, a2);
                      }
                    }
                    v161 = *(_QWORD *)v157;
                    *(_QWORD *)v157 = 0;
                    *(_QWORD *)v156 = v161;
                    *(_DWORD *)(v156 + 8) = *(_DWORD *)(v157 + 8);
                    v162 = *(_QWORD *)(v157 + 12);
                    *(_QWORD *)(v157 + 8) = 0;
                    *(_QWORD *)(v156 + 12) = v162;
                    if (v157 == v6)
                      break;
                    v155 = 0;
                    v146 = v157 - 24;
                    v163 = *(_DWORD *)(v157 - 8);
                    v25 = v148 <= v163;
                    v164 = v148 < v163;
                    v165 = !v25;
                    if (**a3)
                      v166 = v164;
                    else
                      v166 = v165;
                    v156 = v157;
                    if ((v166 & 1) == 0)
                      goto LABEL_257;
                  }
                  v157 = v6;
LABEL_257:
                  *(_QWORD *)v157 = v153;
                  *(_QWORD *)(v157 + 8) = v154;
                  *(_DWORD *)(v157 + 16) = v148;
                }
                v143 = v147 + 3;
                v146 = (unint64_t)v147;
              }
              while (v147 + 3 != v292);
            }
            return result;
          }
          if (v145)
            return result;
          v253 = 0;
          v254 = **a3;
          v255 = 1;
          v256 = v8;
          while (1)
          {
            v257 = v255;
            v258 = *(_DWORD *)(v256 + 40);
            v259 = *(_DWORD *)(v256 + 16);
            v25 = v258 <= v259;
            v260 = v258 < v259;
            v261 = !v25;
            if (!v254)
              v260 = v261;
            if (v260)
              break;
LABEL_421:
            v256 = v6 + 24 * v257;
            v255 = v257 + 1;
            v143 = (unsigned int **)(v256 + 24);
            v253 = v257;
            if ((unsigned int **)(v256 + 24) == v292)
              return result;
          }
          v291 = *v143;
          *v143 = 0;
          v262 = *(_QWORD *)(v256 + 32);
          *(_QWORD *)(v256 + 32) = 0;
          while (1)
          {
            v263 = v253;
            v264 = *((unsigned int *)v143 + 3);
            v265 = *v143;
            if ((_DWORD)v264)
            {
              v266 = 16 * v264;
              do
              {
                v267 = v265[2];
                if ((_DWORD)v267 != -1)
                  result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v267])(&v294, v265);
                v265[2] = -1;
                v265 += 4;
                v266 -= 16;
              }
              while (v266);
              v265 = *v143;
            }
            if (v265)
            {
              *v143 = 0;
              *((_DWORD *)v143 + 2) = 0;
              result = WTF::fastFree((WTF *)v265, a2);
            }
            v268 = v6 + 24 * v263;
            v269 = *(unsigned int **)v268;
            *(_QWORD *)v268 = 0;
            *v143 = v269;
            LODWORD(v269) = *(_DWORD *)(v268 + 8);
            *(_DWORD *)(v268 + 8) = 0;
            *((_DWORD *)v143 + 2) = (_DWORD)v269;
            v270 = *(unsigned int **)(v268 + 12);
            *(_DWORD *)(v268 + 12) = 0;
            *(unsigned int **)((char *)v143 + 12) = v270;
            if (v263 == -1)
              break;
            v253 = v263 - 1;
            v271 = *(_DWORD *)(v6 + 24 * (v263 - 1) + 16);
            v254 = **a3;
            v25 = v258 <= v271;
            v272 = v258 < v271;
            v273 = !v25;
            if (!**a3)
              v272 = v273;
            v143 = (unsigned int **)(v6 + 24 * v263);
            if (!v272)
            {
              *(_QWORD *)v268 = v291;
              *(_QWORD *)(v268 + 8) = v262;
              *(_DWORD *)(v6 + 24 * v263 + 16) = v258;
              goto LABEL_421;
            }
          }
LABEL_423:
          __break(1u);
          return result;
        }
        if (!a4)
        {
          if ((unsigned int **)v8 != v7)
          {
            v167 = (v10 - 2) >> 1;
            v288 = v167;
            do
            {
              v168 = v167;
              if (v288 >= v167)
              {
                v169 = (2 * v167) | 1;
                v170 = v8 + 24 * v169;
                if (2 * v168 + 2 < (uint64_t)v10)
                {
                  v171 = *(_DWORD *)(v170 + 16);
                  v172 = *(_DWORD *)(v170 + 40);
                  v25 = v171 <= v172;
                  v173 = v171 < v172;
                  v174 = !v25;
                  if (!**a3)
                    v173 = v174;
                  v170 += 24 * v173;
                  if (v173)
                    v169 = 2 * v168 + 2;
                }
                v175 = v8 + 24 * v168;
                v176 = *(_DWORD *)(v170 + 16);
                v283 = *(_DWORD *)(v175 + 16);
                v25 = v176 <= v283;
                v177 = v176 < v283;
                v178 = !v25;
                if (**a3)
                  v179 = v177;
                else
                  v179 = v178;
                if ((v179 & 1) == 0)
                {
                  v277 = *(unsigned int **)v175;
                  v280 = v168;
                  v180 = *(_QWORD *)(v175 + 8);
                  *(_QWORD *)v175 = 0;
                  *(_QWORD *)(v175 + 8) = 0;
                  do
                  {
                    v181 = v170;
                    v182 = *(unsigned int *)(v175 + 12);
                    v183 = *(unsigned int **)v175;
                    if ((_DWORD)v182)
                    {
                      v184 = 16 * v182;
                      do
                      {
                        v185 = v183[2];
                        if ((_DWORD)v185 != -1)
                          result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v185])(&v294, v183);
                        v183[2] = -1;
                        v183 += 4;
                        v184 -= 16;
                      }
                      while (v184);
                      v183 = *(unsigned int **)v175;
                    }
                    if (v183)
                    {
                      *(_QWORD *)v175 = 0;
                      *(_DWORD *)(v175 + 8) = 0;
                      result = WTF::fastFree((WTF *)v183, a2);
                    }
                    v186 = *(unsigned int **)v181;
                    *(_QWORD *)v181 = 0;
                    *(_QWORD *)v175 = v186;
                    LODWORD(v186) = *(_DWORD *)(v181 + 8);
                    *(_DWORD *)(v181 + 8) = 0;
                    *(_DWORD *)(v175 + 8) = (_DWORD)v186;
                    v187 = *(_QWORD *)(v181 + 12);
                    *(_DWORD *)(v181 + 12) = 0;
                    *(_QWORD *)(v175 + 12) = v187;
                    if (v288 < v169)
                      break;
                    v188 = (2 * v169) | 1;
                    v170 = v8 + 24 * v188;
                    if (2 * v169 + 2 < (uint64_t)v10)
                    {
                      v189 = *(_DWORD *)(v170 + 16);
                      v190 = *(_DWORD *)(v170 + 40);
                      v25 = v189 <= v190;
                      v191 = v189 < v190;
                      v192 = !v25;
                      if (!**a3)
                        v191 = v192;
                      v170 += 24 * v191;
                      if (v191)
                        v188 = 2 * v169 + 2;
                    }
                    v193 = *(_DWORD *)(v170 + 16);
                    v25 = v193 <= v283;
                    v194 = v193 < v283;
                    v195 = !v25;
                    v196 = **a3 ? v194 : v195;
                    v175 = v181;
                    v169 = v188;
                  }
                  while (!v196);
                  v197 = *(unsigned int *)(v181 + 12);
                  v198 = *(unsigned int **)v181;
                  if ((_DWORD)v197)
                  {
                    v199 = 16 * v197;
                    do
                    {
                      v200 = v198[2];
                      if ((_DWORD)v200 != -1)
                        result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v200])(&v294, v198);
                      v198[2] = -1;
                      v198 += 4;
                      v199 -= 16;
                    }
                    while (v199);
                    v198 = *(unsigned int **)v181;
                  }
                  if (v198)
                  {
                    *(_QWORD *)v181 = 0;
                    *(_DWORD *)(v181 + 8) = 0;
                    result = WTF::fastFree((WTF *)v198, a2);
                  }
                  v168 = v280;
                  *(_QWORD *)v181 = v277;
                  *(_QWORD *)(v181 + 8) = v180;
                  *(_DWORD *)(v181 + 16) = v283;
                }
              }
              v167 = v168 - 1;
            }
            while (v168);
            v201 = v9 / 0x18uLL;
            do
            {
              v202 = 0;
              v275 = v292;
              v289 = *(unsigned int **)v8;
              v284 = *(_DWORD *)(v8 + 8);
              v281 = *(_DWORD *)(v8 + 12);
              *(_QWORD *)v8 = 0;
              *(_QWORD *)(v8 + 8) = 0;
              v203 = v8;
              v278 = *(_DWORD *)(v8 + 16);
              do
              {
                v204 = v203 + 24 * v202 + 24;
                v205 = 2 * v202;
                v202 = (2 * v202) | 1;
                v206 = v205 + 2;
                if (v205 + 2 < v201)
                {
                  v207 = *(_DWORD *)(v204 + 16);
                  v208 = *(_DWORD *)(v204 + 40);
                  v25 = v207 <= v208;
                  v209 = v207 < v208;
                  v210 = !v25;
                  v211 = **a3 ? v209 : v210;
                  v204 += 24 * v211;
                  if (v211)
                    v202 = v206;
                }
                v212 = *(unsigned int *)(v203 + 12);
                v213 = *(unsigned int **)v203;
                if ((_DWORD)v212)
                {
                  v214 = 16 * v212;
                  do
                  {
                    v215 = v213[2];
                    if ((_DWORD)v215 != -1)
                      result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v215])(&v294, v213);
                    v213[2] = -1;
                    v213 += 4;
                    v214 -= 16;
                  }
                  while (v214);
                  v213 = *(unsigned int **)v203;
                }
                if (v213)
                {
                  *(_QWORD *)v203 = 0;
                  *(_DWORD *)(v203 + 8) = 0;
                  result = WTF::fastFree((WTF *)v213, a2);
                }
                v216 = *(unsigned int **)v204;
                *(_QWORD *)v204 = 0;
                *(_QWORD *)v203 = v216;
                LODWORD(v216) = *(_DWORD *)(v204 + 8);
                *(_DWORD *)(v204 + 8) = 0;
                *(_DWORD *)(v203 + 8) = (_DWORD)v216;
                v217 = *(_QWORD *)(v204 + 12);
                *(_DWORD *)(v204 + 12) = 0;
                *(_QWORD *)(v203 + 12) = v217;
                v203 = v204;
              }
              while (v202 <= (uint64_t)((unint64_t)(v201 - 2) >> 1));
              v218 = *(unsigned int *)(v204 + 12);
              v219 = *(unsigned int **)v204;
              v292 -= 3;
              if ((unsigned int **)v204 == v275 - 3)
              {
                if ((_DWORD)v218)
                {
                  v251 = 16 * v218;
                  do
                  {
                    v252 = v219[2];
                    if ((_DWORD)v252 != -1)
                      result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v252])(&v294, v219);
                    v219[2] = -1;
                    v219 += 4;
                    v251 -= 16;
                  }
                  while (v251);
                  v219 = *(unsigned int **)v204;
                }
                if (v219)
                {
                  *(_QWORD *)v204 = 0;
                  *(_DWORD *)(v204 + 8) = 0;
                  result = WTF::fastFree((WTF *)v219, a2);
                }
                *(_QWORD *)v204 = v289;
                *(_DWORD *)(v204 + 8) = v284;
                *(_DWORD *)(v204 + 12) = v281;
                *(_DWORD *)(v204 + 16) = v278;
              }
              else
              {
                if ((_DWORD)v218)
                {
                  v220 = 16 * v218;
                  do
                  {
                    v221 = v219[2];
                    if ((_DWORD)v221 != -1)
                      result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v221])(&v294, v219);
                    v219[2] = -1;
                    v219 += 4;
                    v220 -= 16;
                  }
                  while (v220);
                  v219 = *(unsigned int **)v204;
                }
                if (v219)
                {
                  *(_QWORD *)v204 = 0;
                  *(_DWORD *)(v204 + 8) = 0;
                  result = WTF::fastFree((WTF *)v219, a2);
                }
                v222 = (uint64_t)*(v275 - 3);
                *(v275 - 3) = 0;
                *(_QWORD *)v204 = v222;
                LODWORD(v222) = *((_DWORD *)v275 - 4);
                *((_DWORD *)v275 - 4) = 0;
                *(_DWORD *)(v204 + 8) = v222;
                v223 = *(uint64_t *)((char *)v275 - 12);
                *((_DWORD *)v275 - 3) = 0;
                *(_QWORD *)(v204 + 12) = v223;
                v224 = *((unsigned int *)v275 - 3);
                v225 = *(v275 - 3);
                if ((_DWORD)v224)
                {
                  v226 = 16 * v224;
                  do
                  {
                    v227 = v225[2];
                    if ((_DWORD)v227 != -1)
                      result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v227])(&v294, v225);
                    v225[2] = -1;
                    v225 += 4;
                    v226 -= 16;
                  }
                  while (v226);
                  v225 = *v292;
                }
                if (v225)
                {
                  *(v275 - 3) = 0;
                  *((_DWORD *)v275 - 4) = 0;
                  result = WTF::fastFree((WTF *)v225, a2);
                }
                *(v275 - 3) = v289;
                *((_DWORD *)v275 - 4) = v284;
                *((_DWORD *)v275 - 3) = v281;
                *((_DWORD *)v275 - 2) = v278;
                v228 = v204 + 24 - v8;
                if (v228 >= 25)
                {
                  v229 = (v228 / 0x18uLL - 2) >> 1;
                  v230 = v8 + 24 * v229;
                  v231 = *(_DWORD *)(v230 + 16);
                  v290 = *(_DWORD *)(v204 + 16);
                  v25 = v231 <= v290;
                  v232 = v231 < v290;
                  v233 = !v25;
                  if (**a3 ? v232 : v233)
                  {
                    v285 = *(unsigned int **)v204;
                    v235 = *(_QWORD *)(v204 + 8);
                    *(_QWORD *)v204 = 0;
                    *(_QWORD *)(v204 + 8) = 0;
                    do
                    {
                      v236 = v230;
                      v237 = *(unsigned int *)(v204 + 12);
                      v238 = *(unsigned int **)v204;
                      if ((_DWORD)v237)
                      {
                        v239 = 16 * v237;
                        do
                        {
                          v240 = v238[2];
                          if ((_DWORD)v240 != -1)
                            result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v240])(&v294, v238);
                          v238[2] = -1;
                          v238 += 4;
                          v239 -= 16;
                        }
                        while (v239);
                        v238 = *(unsigned int **)v204;
                      }
                      if (v238)
                      {
                        *(_QWORD *)v204 = 0;
                        *(_DWORD *)(v204 + 8) = 0;
                        result = WTF::fastFree((WTF *)v238, a2);
                      }
                      v241 = *(unsigned int **)v236;
                      *(_QWORD *)v236 = 0;
                      *(_QWORD *)v204 = v241;
                      LODWORD(v241) = *(_DWORD *)(v236 + 8);
                      *(_DWORD *)(v236 + 8) = 0;
                      *(_DWORD *)(v204 + 8) = (_DWORD)v241;
                      v242 = *(_QWORD *)(v236 + 12);
                      *(_DWORD *)(v236 + 12) = 0;
                      *(_QWORD *)(v204 + 12) = v242;
                      if (!v229)
                        break;
                      v229 = (v229 - 1) >> 1;
                      v230 = v8 + 24 * v229;
                      v243 = *(_DWORD *)(v230 + 16);
                      v25 = v243 <= v290;
                      v244 = v243 < v290;
                      v245 = !v25;
                      v246 = **a3 ? v244 : v245;
                      v204 = v236;
                    }
                    while (v246);
                    v247 = *(unsigned int *)(v236 + 12);
                    v248 = *(unsigned int **)v236;
                    if ((_DWORD)v247)
                    {
                      v249 = 16 * v247;
                      do
                      {
                        v250 = v248[2];
                        if ((_DWORD)v250 != -1)
                          result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v250])(&v294, v248);
                        v248[2] = -1;
                        v248 += 4;
                        v249 -= 16;
                      }
                      while (v249);
                      v248 = *(unsigned int **)v236;
                    }
                    if (v248)
                    {
                      *(_QWORD *)v236 = 0;
                      *(_DWORD *)(v236 + 8) = 0;
                      result = WTF::fastFree((WTF *)v248, a2);
                    }
                    *(_QWORD *)v236 = v285;
                    *(_QWORD *)(v236 + 8) = v235;
                    *(_DWORD *)(v236 + 16) = v290;
                  }
                }
              }
              v25 = v201-- <= 2;
            }
            while (!v25);
          }
          return result;
        }
        v11 = v8 + 24 * (v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(v6 + 24 * (v10 >> 1), (_DWORD *)v6, v274, a3);
        }
        else
        {
          v12 = a4;
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(v6, (_DWORD *)(v6 + 24 * (v10 >> 1)), v274, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(v6 + 24, (_DWORD *)(v6 + 24 * (v10 >> 1) - 24), (uint64_t)(v292 - 6), a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(v6 + 48, (_DWORD *)(v6 + 24 + 24 * (v10 >> 1)), (uint64_t)(v292 - 9), a3);
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(v6 + 24 * (v10 >> 1) - 24, (_DWORD *)(v6 + 24 * (v10 >> 1)), v6 + 24 + 24 * (v10 >> 1), a3);
          v13 = *(unsigned int **)v6;
          *(_QWORD *)v6 = 0;
          v14 = *(_QWORD *)(v6 + 8);
          v15 = *(_DWORD *)(v6 + 16);
          *(_QWORD *)(v6 + 8) = 0;
          v16 = *(unsigned int **)v11;
          *(_QWORD *)v11 = 0;
          *(_QWORD *)v6 = v16;
          v17 = *(_QWORD *)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          *(_QWORD *)(v6 + 8) = v17;
          v18 = (_DWORD *)(v6 + 16 + 24 * (v10 >> 1));
          *(_DWORD *)(v6 + 16) = *v18;
          v19 = *(unsigned int *)(v11 + 12);
          v20 = *(unsigned int **)v11;
          if ((_DWORD)v19)
          {
            v21 = 16 * v19;
            do
            {
              v22 = v20[2];
              if ((_DWORD)v22 != -1)
                result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v22])(&v294, v20);
              v20[2] = -1;
              v20 += 4;
              v21 -= 16;
            }
            while (v21);
            v20 = *(unsigned int **)v11;
          }
          if (v20)
          {
            *(_QWORD *)v11 = 0;
            *(_DWORD *)(v11 + 8) = 0;
            result = WTF::fastFree((WTF *)v20, a2);
          }
          *(_QWORD *)v11 = v13;
          *(_QWORD *)(v11 + 8) = v14;
          *v18 = v15;
          a4 = v12;
        }
        v282 = a4 - 1;
        if ((a5 & 1) == 0)
        {
          v24 = *(_DWORD *)(v6 - 8);
          v23 = *(_DWORD *)(v6 + 16);
          v25 = v24 <= v23;
          v26 = v24 < v23;
          v27 = !v25;
          if (**a3)
            v28 = v26;
          else
            v28 = v27;
          if ((v28 & 1) != 0)
            goto LABEL_26;
          v81 = *(unsigned int **)v6;
          v82 = *(_QWORD *)(v6 + 8);
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          v83 = *((_DWORD *)v7 - 2);
          v25 = v23 <= v83;
          v84 = v23 < v83;
          v85 = !v25;
          if (!**a3)
            v84 = v85;
          if (v84)
          {
            v86 = (unsigned int **)(v6 + 24);
            do
            {
              if (v86 == v7)
                goto LABEL_423;
              v87 = *((_DWORD *)v86 + 4);
              v25 = v23 <= v87;
              v88 = v23 < v87;
              v89 = !v25;
              if (!**a3)
                v88 = v89;
              v86 += 3;
            }
            while (!v88);
            v90 = (unint64_t)(v86 - 3);
          }
          else
          {
            v91 = v6 + 24;
            do
            {
              v90 = v91;
              if (v91 >= (unint64_t)v7)
                break;
              v92 = *(_DWORD *)(v91 + 16);
              v25 = v23 <= v92;
              v93 = v23 < v92;
              v94 = !v25;
              if (**a3)
                v94 = v93;
              v91 = v90 + 24;
            }
            while ((v94 & 1) == 0);
          }
          v95 = v7;
          if (v90 < (unint64_t)v7)
          {
            v96 = v7;
            while (v96 != (unsigned int **)v6)
            {
              v95 = v96 - 3;
              v97 = *((_DWORD *)v96 - 2);
              v25 = v23 <= v97;
              v98 = v23 < v97;
              v99 = !v25;
              if (**a3)
                v99 = v98;
              v96 = v95;
              if ((v99 & 1) == 0)
                goto LABEL_147;
            }
            goto LABEL_423;
          }
LABEL_147:
          v287 = v81;
          if (v90 < (unint64_t)v95)
          {
            while (1)
            {
              v100 = *(unsigned int **)v90;
              v101 = *(unsigned int **)(v90 + 8);
              *(_QWORD *)v90 = 0;
              *(_QWORD *)(v90 + 8) = 0;
              v102 = *(_DWORD *)(v90 + 16);
              v103 = *v95;
              *v95 = 0;
              *(_QWORD *)v90 = v103;
              LODWORD(v103) = *((_DWORD *)v95 + 2);
              *((_DWORD *)v95 + 2) = 0;
              *(_DWORD *)(v90 + 8) = (_DWORD)v103;
              v104 = *(uint64_t *)((char *)v95 + 12);
              *((_DWORD *)v95 + 3) = 0;
              *(_QWORD *)(v90 + 12) = v104;
              v105 = *((unsigned int *)v95 + 3);
              v106 = *v95;
              if ((_DWORD)v105)
              {
                v107 = 16 * v105;
                do
                {
                  v108 = v106[2];
                  if ((_DWORD)v108 != -1)
                    result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v108])(&v294, v106);
                  v106[2] = -1;
                  v106 += 4;
                  v107 -= 16;
                }
                while (v107);
                v106 = *v95;
              }
              if (v106)
              {
                *v95 = 0;
                *((_DWORD *)v95 + 2) = 0;
                result = WTF::fastFree((WTF *)v106, a2);
              }
              *v95 = v100;
              v95[1] = v101;
              *((_DWORD *)v95 + 4) = v102;
              v8 = v90 + 24;
              if ((unsigned int **)(v90 + 24) == v7)
                goto LABEL_423;
              v109 = *(_DWORD *)(v90 + 40);
              v25 = v23 <= v109;
              v110 = v23 < v109;
              v111 = !v25;
              if (!**a3)
                v110 = v111;
              if (!v110)
              {
                v112 = (unsigned int **)(v90 + 48);
                while (v112 != v7)
                {
                  v113 = *((_DWORD *)v112 + 4);
                  v25 = v23 <= v113;
                  v114 = v23 < v113;
                  v115 = !v25;
                  if (!**a3)
                    v114 = v115;
                  v112 += 3;
                  if (v114)
                  {
                    v8 = (unint64_t)(v112 - 3);
                    goto LABEL_172;
                  }
                }
                goto LABEL_423;
              }
              do
              {
LABEL_172:
                if (v95 == (unsigned int **)v6)
                  goto LABEL_423;
                v116 = (unint64_t)(v95 - 3);
                v117 = *((_DWORD *)v95 - 2);
                v25 = v23 <= v117;
                v118 = v23 < v117;
                v119 = !v25;
                if (!**a3)
                  v118 = v119;
                v95 -= 3;
              }
              while (v118);
              v90 = v8;
              v95 = (unsigned int **)v116;
              if (v8 >= v116)
                goto LABEL_182;
            }
          }
          v8 = v90;
LABEL_182:
          if (v8 - 24 != v6)
          {
            v120 = *(unsigned int *)(v6 + 12);
            v121 = *(unsigned int **)v6;
            if ((_DWORD)v120)
            {
              v122 = 16 * v120;
              do
              {
                v123 = v121[2];
                if ((_DWORD)v123 != -1)
                  result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v123])(&v294, v121);
                v121[2] = -1;
                v121 += 4;
                v122 -= 16;
              }
              while (v122);
              v121 = *(unsigned int **)v6;
            }
            if (v121)
            {
              *(_QWORD *)v6 = 0;
              *(_DWORD *)(v6 + 8) = 0;
              result = WTF::fastFree((WTF *)v121, a2);
            }
            v124 = *(_QWORD *)(v8 - 24);
            *(_QWORD *)(v8 - 24) = 0;
            *(_QWORD *)v6 = v124;
            LODWORD(v124) = *(_DWORD *)(v8 - 16);
            *(_DWORD *)(v8 - 16) = 0;
            *(_DWORD *)(v6 + 8) = v124;
            v125 = *(_QWORD *)(v8 - 12);
            *(_DWORD *)(v8 - 12) = 0;
            *(_QWORD *)(v6 + 12) = v125;
          }
          v126 = *(unsigned int *)(v8 - 12);
          v127 = *(unsigned int **)(v8 - 24);
          if ((_DWORD)v126)
          {
            v128 = 16 * v126;
            do
            {
              v129 = v127[2];
              if ((_DWORD)v129 != -1)
                result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v129])(&v294, v127);
              v127[2] = -1;
              v127 += 4;
              v128 -= 16;
            }
            while (v128);
            v127 = *(unsigned int **)(v8 - 24);
          }
          if (v127)
          {
            *(_QWORD *)(v8 - 24) = 0;
            *(_DWORD *)(v8 - 16) = 0;
            result = WTF::fastFree((WTF *)v127, a2);
          }
          a5 = 0;
          *(_QWORD *)(v8 - 24) = v287;
          *(_QWORD *)(v8 - 16) = v82;
          *(_DWORD *)(v8 - 8) = v23;
          a4 = v282;
          continue;
        }
        v23 = *(_DWORD *)(v6 + 16);
LABEL_26:
        v29 = *(unsigned int **)v6;
        v30 = *(_QWORD *)(v6 + 8);
        v31 = v6 + 24;
        *(_QWORD *)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        if ((unsigned int **)(v6 + 24) == v7)
          goto LABEL_423;
        v32 = *(_DWORD *)(v6 + 40);
        v25 = v32 <= v23;
        v33 = v32 < v23;
        v34 = !v25;
        if (!**a3)
          v33 = v34;
        v279 = v29;
        if (v33)
        {
          v35 = 0;
          do
          {
            if ((unsigned int **)(v6 + v35 + 48) == v7)
              goto LABEL_423;
            v36 = *(_DWORD *)(v6 + v35 + 64);
            v25 = v36 <= v23;
            v37 = v36 < v23;
            v38 = !v25;
            if (!**a3)
              v37 = v38;
            v35 += 24;
          }
          while (v37);
          v31 = v6 + v35 + 24;
          v39 = v7;
          if (v35)
          {
            while (v39 != (unsigned int **)v6)
            {
              v40 = v39 - 3;
              v41 = *((_DWORD *)v39 - 2);
              v25 = v41 <= v23;
              v42 = v41 < v23;
              v43 = !v25;
              if (!**a3)
                v42 = v43;
              v39 = v40;
              if (v42)
                goto LABEL_59;
            }
            goto LABEL_423;
          }
        }
        v40 = v7;
        while (v31 < (unint64_t)v40)
        {
          v44 = v40 - 3;
          v45 = *((_DWORD *)v40 - 2);
          v25 = v45 <= v23;
          v46 = v45 < v23;
          v47 = !v25;
          if (!**a3)
            v46 = v47;
          v40 -= 3;
          if (v46)
          {
            v40 = v44;
            break;
          }
        }
LABEL_59:
        v8 = v31;
        v286 = v31;
        if (v31 < (unint64_t)v40)
        {
          v48 = v31;
          v49 = v40;
          do
          {
            v50 = *(unsigned int **)v48;
            v51 = *(unsigned int **)(v48 + 8);
            *(_QWORD *)v48 = 0;
            *(_QWORD *)(v48 + 8) = 0;
            v52 = *(_DWORD *)(v48 + 16);
            v53 = *v49;
            *v49 = 0;
            *(_QWORD *)v48 = v53;
            LODWORD(v53) = *((_DWORD *)v49 + 2);
            *((_DWORD *)v49 + 2) = 0;
            *(_DWORD *)(v48 + 8) = (_DWORD)v53;
            v54 = *(uint64_t *)((char *)v49 + 12);
            *((_DWORD *)v49 + 3) = 0;
            *(_QWORD *)(v48 + 12) = v54;
            v55 = *((unsigned int *)v49 + 3);
            v56 = *v49;
            if ((_DWORD)v55)
            {
              v57 = 16 * v55;
              do
              {
                v58 = v56[2];
                if ((_DWORD)v58 != -1)
                  result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v58])(&v294, v56);
                v56[2] = -1;
                v56 += 4;
                v57 -= 16;
              }
              while (v57);
              v56 = *v49;
              v7 = v292;
            }
            if (v56)
            {
              *v49 = 0;
              *((_DWORD *)v49 + 2) = 0;
              result = WTF::fastFree((WTF *)v56, a2);
            }
            *v49 = v50;
            v49[1] = v51;
            *((_DWORD *)v49 + 4) = v52;
            v8 = v48 + 24;
            if ((unsigned int **)(v48 + 24) == v7)
              goto LABEL_423;
            v59 = *(_DWORD *)(v48 + 40);
            v25 = v59 <= v23;
            v60 = v59 < v23;
            v61 = !v25;
            if (!**a3)
              v60 = v61;
            if (v60)
            {
              v62 = (unsigned int **)(v48 + 48);
              while (v62 != v7)
              {
                v63 = *((_DWORD *)v62 + 4);
                v25 = v63 <= v23;
                v64 = v63 < v23;
                v65 = !v25;
                if (!**a3)
                  v64 = v65;
                v62 += 3;
                if (!v64)
                {
                  v8 = (unint64_t)(v62 - 3);
                  goto LABEL_85;
                }
              }
              goto LABEL_423;
            }
            do
            {
LABEL_85:
              if (v49 == (unsigned int **)v6)
                goto LABEL_423;
              v66 = (unint64_t)(v49 - 3);
              v67 = *((_DWORD *)v49 - 2);
              v25 = v67 <= v23;
              v68 = v67 < v23;
              v69 = !v25;
              if (!**a3)
                v68 = v69;
              v49 -= 3;
            }
            while (!v68);
            v48 = v8;
            v49 = (unsigned int **)v66;
          }
          while (v8 < v66);
        }
        if (v8 - 24 != v6)
        {
          v70 = *(unsigned int *)(v6 + 12);
          v71 = *(unsigned int **)v6;
          if ((_DWORD)v70)
          {
            v72 = 16 * v70;
            do
            {
              v73 = v71[2];
              if ((_DWORD)v73 != -1)
                ((void (*)(char *, unsigned int *))off_1E34048F0[v73])(&v294, v71);
              v71[2] = -1;
              v71 += 4;
              v72 -= 16;
            }
            while (v72);
            v71 = *(unsigned int **)v6;
          }
          if (v71)
          {
            *(_QWORD *)v6 = 0;
            *(_DWORD *)(v6 + 8) = 0;
            WTF::fastFree((WTF *)v71, a2);
          }
          v74 = *(_QWORD *)(v8 - 24);
          *(_QWORD *)(v8 - 24) = 0;
          *(_QWORD *)v6 = v74;
          LODWORD(v74) = *(_DWORD *)(v8 - 16);
          *(_DWORD *)(v8 - 16) = 0;
          *(_DWORD *)(v6 + 8) = v74;
          v75 = *(_QWORD *)(v8 - 12);
          *(_DWORD *)(v8 - 12) = 0;
          *(_QWORD *)(v6 + 12) = v75;
        }
        v76 = *(unsigned int *)(v8 - 12);
        v77 = *(unsigned int **)(v8 - 24);
        if ((_DWORD)v76)
        {
          v78 = 16 * v76;
          do
          {
            v79 = v77[2];
            if ((_DWORD)v79 != -1)
              ((void (*)(char *, unsigned int *))off_1E34048F0[v79])(&v294, v77);
            v77[2] = -1;
            v77 += 4;
            v78 -= 16;
          }
          while (v78);
          v77 = *(unsigned int **)(v8 - 24);
        }
        if (v77)
        {
          *(_QWORD *)(v8 - 24) = 0;
          *(_DWORD *)(v8 - 16) = 0;
          WTF::fastFree((WTF *)v77, a2);
        }
        *(_QWORD *)(v8 - 24) = v279;
        *(_QWORD *)(v8 - 16) = v30;
        *(_DWORD *)(v8 - 8) = v23;
        a4 = v282;
        if (v286 < (unint64_t)v40)
        {
LABEL_114:
          result = std::__introsort<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *,false>(v6, v8 - 24, a3, v282, a5 & 1);
          a5 = 0;
          continue;
        }
        v80 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(v6, (_DWORD *)(v8 - 24), a3);
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(v8, v7, a3);
        if (!(_DWORD)result)
        {
          if (v80)
            continue;
          goto LABEL_114;
        }
        v292 = (unsigned int **)(v8 - 24);
        if (!v80)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 **a6)
{
  uint64_t v11;
  uint64_t result;
  void *v13;
  int v14;
  int v15;
  BOOL v16;
  _BOOL4 v17;
  int v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  _BOOL4 v30;
  int v31;
  int v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  _BOOL4 v43;
  int v44;
  int v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  int v56;
  int v57;
  _BOOL4 v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;

  v11 = a1;
  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(a1, (unsigned int **)a2, a3, a4, a6);
  v14 = *(_DWORD *)(a5 + 16);
  v15 = *(_DWORD *)(a4 + 16);
  v16 = v14 <= v15;
  v17 = v14 < v15;
  v18 = !v16;
  if (**a6)
    v19 = v17;
  else
    v19 = v18;
  if (v19 == 1)
  {
    v20 = *(unsigned int **)a4;
    v21 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v22 = *(unsigned int **)a5;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)a4 = v22;
    LODWORD(v22) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a4 + 8) = (_DWORD)v22;
    v23 = *(_QWORD *)(a5 + 12);
    *(_DWORD *)(a5 + 12) = 0;
    *(_QWORD *)(a4 + 12) = v23;
    v24 = *(unsigned int *)(a5 + 12);
    v25 = *(unsigned int **)a5;
    if ((_DWORD)v24)
    {
      v69 = v11;
      v26 = 16 * v24;
      do
      {
        v27 = v25[2];
        if ((_DWORD)v27 != -1)
          result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v27])(&v70, v25);
        v25[2] = -1;
        v25 += 4;
        v26 -= 16;
      }
      while (v26);
      v25 = *(unsigned int **)a5;
      v11 = v69;
    }
    if (v25)
    {
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      result = WTF::fastFree((WTF *)v25, v13);
    }
    *(_QWORD *)a5 = v20;
    *(_QWORD *)(a5 + 8) = v21;
    *(_DWORD *)(a5 + 16) = v15;
    v28 = *(_DWORD *)(a4 + 16);
    v29 = *(_DWORD *)(a3 + 16);
    v16 = v28 <= v29;
    v30 = v28 < v29;
    v31 = !v16;
    if (**a6)
      v32 = v30;
    else
      v32 = v31;
    if (v32 == 1)
    {
      v33 = *(unsigned int **)a3;
      v34 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v35 = *(unsigned int **)a4;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)a3 = v35;
      LODWORD(v35) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a3 + 8) = (_DWORD)v35;
      v36 = *(_QWORD *)(a4 + 12);
      *(_DWORD *)(a4 + 12) = 0;
      *(_QWORD *)(a3 + 12) = v36;
      v37 = *(unsigned int *)(a4 + 12);
      v38 = *(unsigned int **)a4;
      if ((_DWORD)v37)
      {
        v39 = 16 * v37;
        do
        {
          v40 = v38[2];
          if ((_DWORD)v40 != -1)
            result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v40])(&v71, v38);
          v38[2] = -1;
          v38 += 4;
          v39 -= 16;
        }
        while (v39);
        v38 = *(unsigned int **)a4;
      }
      if (v38)
      {
        *(_QWORD *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
        result = WTF::fastFree((WTF *)v38, v13);
      }
      *(_QWORD *)a4 = v33;
      *(_QWORD *)(a4 + 8) = v34;
      *(_DWORD *)(a4 + 16) = v29;
      v41 = *(_DWORD *)(a3 + 16);
      v42 = *(_DWORD *)(a2 + 16);
      v16 = v41 <= v42;
      v43 = v41 < v42;
      v44 = !v16;
      if (**a6)
        v45 = v43;
      else
        v45 = v44;
      if (v45 == 1)
      {
        v46 = *(unsigned int **)a2;
        v47 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        v48 = *(unsigned int **)a3;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)a2 = v48;
        LODWORD(v48) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = 0;
        *(_DWORD *)(a2 + 8) = (_DWORD)v48;
        v49 = *(_QWORD *)(a3 + 12);
        *(_DWORD *)(a3 + 12) = 0;
        *(_QWORD *)(a2 + 12) = v49;
        v50 = *(unsigned int *)(a3 + 12);
        v51 = *(unsigned int **)a3;
        if ((_DWORD)v50)
        {
          v52 = 16 * v50;
          do
          {
            v53 = v51[2];
            if ((_DWORD)v53 != -1)
              result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v53])(&v72, v51);
            v51[2] = -1;
            v51 += 4;
            v52 -= 16;
          }
          while (v52);
          v51 = *(unsigned int **)a3;
        }
        if (v51)
        {
          *(_QWORD *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
          result = WTF::fastFree((WTF *)v51, v13);
        }
        *(_QWORD *)a3 = v46;
        *(_QWORD *)(a3 + 8) = v47;
        *(_DWORD *)(a3 + 16) = v42;
        v54 = *a6;
        v55 = *(_DWORD *)(a2 + 16);
        v56 = *(_DWORD *)(v11 + 16);
        v57 = *v54;
        v16 = v55 <= v56;
        v58 = v55 < v56;
        v59 = !v16;
        if (v57)
          v60 = v58;
        else
          v60 = v59;
        if (v60 == 1)
        {
          v61 = *(_QWORD *)v11;
          v62 = *(_QWORD *)(v11 + 8);
          *(_QWORD *)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
          v63 = *(unsigned int **)a2;
          *(_QWORD *)a2 = 0;
          *(_QWORD *)v11 = v63;
          LODWORD(v63) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = 0;
          *(_DWORD *)(v11 + 8) = (_DWORD)v63;
          v64 = *(_QWORD *)(a2 + 12);
          *(_DWORD *)(a2 + 12) = 0;
          *(_QWORD *)(v11 + 12) = v64;
          v65 = *(unsigned int *)(a2 + 12);
          v66 = *(unsigned int **)a2;
          if ((_DWORD)v65)
          {
            v67 = 16 * v65;
            do
            {
              v68 = v66[2];
              if ((_DWORD)v68 != -1)
                result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v68])(&v73, v66);
              v66[2] = -1;
              v66 += 4;
              v67 -= 16;
            }
            while (v67);
            v66 = *(unsigned int **)a2;
          }
          if (v66)
          {
            *(_QWORD *)a2 = 0;
            *(_DWORD *)(a2 + 8) = 0;
            result = WTF::fastFree((WTF *)v66, v13);
          }
          *(_QWORD *)a2 = v61;
          *(_QWORD *)(a2 + 8) = v62;
          *(_DWORD *)(a2 + 16) = v56;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(uint64_t result, _DWORD *a2, uint64_t a3, unsigned __int8 **a4)
{
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  _BOOL4 v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  int v36;
  _BOOL4 v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _BOOL4 v57;
  int v58;
  int v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;

  v7 = result;
  v8 = a2[4];
  v9 = *(_DWORD *)(result + 16);
  v10 = v8 < v9;
  v11 = *(_DWORD *)(a3 + 16);
  v12 = v11 <= v8;
  v13 = v11 < v8;
  v14 = !v12;
  if (**a4)
  {
    v15 = v13;
  }
  else
  {
    v10 = v8 > v9;
    v15 = v14;
  }
  if (v10)
  {
    v16 = *(_QWORD *)result;
    v18 = *(_DWORD *)(result + 8);
    v17 = *(_DWORD *)(result + 12);
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    if (v15)
    {
      v19 = *(unsigned int **)a3;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)result = v19;
      LODWORD(v19) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = 0;
      *(_DWORD *)(result + 8) = (_DWORD)v19;
      v20 = *(_QWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = 0;
      *(_QWORD *)(result + 12) = v20;
      v21 = *(unsigned int *)(a3 + 12);
      v22 = *(unsigned int **)a3;
      if ((_DWORD)v21)
      {
        v23 = 16 * v21;
        do
        {
          v24 = v22[2];
          if ((_DWORD)v24 != -1)
            result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v24])(&v68, v22);
          v22[2] = -1;
          v22 += 4;
          v23 -= 16;
        }
        while (v23);
LABEL_60:
        v22 = *(unsigned int **)a3;
        goto LABEL_61;
      }
      goto LABEL_61;
    }
    v48 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)result = v48;
    LODWORD(v48) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(result + 8) = v48;
    v49 = *(_QWORD *)(a2 + 3);
    a2[3] = 0;
    *(_QWORD *)(result + 12) = v49;
    v50 = a2[3];
    v51 = *(unsigned int **)a2;
    if ((_DWORD)v50)
    {
      v65 = v18;
      v52 = v17;
      v53 = v16;
      v54 = 16 * v50;
      do
      {
        v55 = v51[2];
        if ((_DWORD)v55 != -1)
          result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v55])(&v69, v51);
        v51[2] = -1;
        v51 += 4;
        v54 -= 16;
      }
      while (v54);
      v51 = *(unsigned int **)a2;
      v16 = v53;
      v17 = v52;
      v18 = v65;
    }
    if (v51)
    {
      *(_QWORD *)a2 = 0;
      a2[2] = 0;
      result = WTF::fastFree((WTF *)v51, a2);
    }
    *(_QWORD *)a2 = v16;
    a2[2] = v18;
    a2[3] = v17;
    a2[4] = v9;
    v56 = *(_DWORD *)(a3 + 16);
    v12 = v56 <= v9;
    v57 = v56 < v9;
    v58 = !v12;
    if (**a4)
      v59 = v57;
    else
      v59 = v58;
    if (v59 == 1)
    {
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      v60 = *(unsigned int **)a3;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)a2 = v60;
      LODWORD(v60) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = 0;
      a2[2] = (_DWORD)v60;
      v61 = *(_QWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = 0;
      *(_QWORD *)(a2 + 3) = v61;
      v62 = *(unsigned int *)(a3 + 12);
      v22 = *(unsigned int **)a3;
      if ((_DWORD)v62)
      {
        v63 = 16 * v62;
        do
        {
          v64 = v22[2];
          if ((_DWORD)v64 != -1)
            result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v64])(&v70, v22);
          v22[2] = -1;
          v22 += 4;
          v63 -= 16;
        }
        while (v63);
        goto LABEL_60;
      }
LABEL_61:
      if (v22)
      {
        *(_QWORD *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
        result = WTF::fastFree((WTF *)v22, a2);
      }
      *(_QWORD *)a3 = v16;
      *(_DWORD *)(a3 + 8) = v18;
      *(_DWORD *)(a3 + 12) = v17;
      *(_DWORD *)(a3 + 16) = v9;
    }
  }
  else if (v15)
  {
    v25 = *(_QWORD *)a2;
    v26 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v27 = *(unsigned int **)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)a2 = v27;
    LODWORD(v27) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = 0;
    a2[2] = (_DWORD)v27;
    v28 = *(_QWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 12) = 0;
    *(_QWORD *)(a2 + 3) = v28;
    v29 = *(unsigned int *)(a3 + 12);
    v30 = *(unsigned int **)a3;
    if ((_DWORD)v29)
    {
      v31 = 16 * v29;
      do
      {
        v32 = v30[2];
        if ((_DWORD)v32 != -1)
          result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v32])(&v66, v30);
        v30[2] = -1;
        v30 += 4;
        v31 -= 16;
      }
      while (v31);
      v30 = *(unsigned int **)a3;
    }
    if (v30)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      result = WTF::fastFree((WTF *)v30, a2);
    }
    *(_QWORD *)a3 = v25;
    *(_QWORD *)(a3 + 8) = v26;
    *(_DWORD *)(a3 + 16) = v8;
    v33 = *a4;
    v34 = a2[4];
    v35 = *(_DWORD *)(v7 + 16);
    v36 = *v33;
    v12 = v34 <= v35;
    v37 = v34 < v35;
    v38 = !v12;
    if (v36)
      v39 = v37;
    else
      v39 = v38;
    if (v39 == 1)
    {
      v40 = *(_QWORD *)v7;
      v41 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      v42 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)v7 = v42;
      LODWORD(v42) = a2[2];
      a2[2] = 0;
      *(_DWORD *)(v7 + 8) = v42;
      v43 = *(_QWORD *)(a2 + 3);
      a2[3] = 0;
      *(_QWORD *)(v7 + 12) = v43;
      v44 = a2[3];
      v45 = *(unsigned int **)a2;
      if ((_DWORD)v44)
      {
        v46 = 16 * v44;
        do
        {
          v47 = v45[2];
          if ((_DWORD)v47 != -1)
            result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v47])(&v67, v45);
          v45[2] = -1;
          v45 += 4;
          v46 -= 16;
        }
        while (v46);
        v45 = *(unsigned int **)a2;
      }
      if (v45)
      {
        *(_QWORD *)a2 = 0;
        a2[2] = 0;
        result = WTF::fastFree((WTF *)v45, a2);
      }
      *(_QWORD *)a2 = v40;
      *((_QWORD *)a2 + 1) = v41;
      a2[4] = v35;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(uint64_t a1, _DWORD *a2, unsigned __int8 **a3)
{
  unint64_t v6;
  _BOOL8 result;
  int v8;
  int v9;
  BOOL v10;
  _BOOL4 v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  char v41;

  v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(a2 - 2);
      v9 = *(_DWORD *)(a1 + 16);
      v10 = v8 <= v9;
      v11 = v8 < v9;
      v12 = !v10;
      if (**a3)
        v13 = v11;
      else
        v13 = v12;
      if (v13 == 1)
      {
        v14 = *(_QWORD *)a1;
        v15 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v16 = *((_QWORD *)a2 - 3);
        *((_QWORD *)a2 - 3) = 0;
        *(_QWORD *)a1 = v16;
        LODWORD(v16) = *(a2 - 4);
        *(a2 - 4) = 0;
        *(_DWORD *)(a1 + 8) = v16;
        v17 = *(_QWORD *)(a2 - 3);
        *(a2 - 3) = 0;
        *(_QWORD *)(a1 + 12) = v17;
        v18 = *(a2 - 3);
        v19 = (unsigned int *)*((_QWORD *)a2 - 3);
        if ((_DWORD)v18)
        {
          v20 = 16 * v18;
          do
          {
            v21 = v19[2];
            if ((_DWORD)v21 != -1)
              ((void (*)(char *, unsigned int *))off_1E34048F0[v21])(&v41, v19);
            v19[2] = -1;
            v19 += 4;
            v20 -= 16;
          }
          while (v20);
          v19 = (unsigned int *)*((_QWORD *)a2 - 3);
        }
        if (v19)
        {
          *((_QWORD *)a2 - 3) = 0;
          *(a2 - 4) = 0;
          WTF::fastFree((WTF *)v19, a2);
        }
        *((_QWORD *)a2 - 3) = v14;
        *((_QWORD *)a2 - 2) = v15;
        result = 1;
        *(a2 - 2) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(a1, (_DWORD *)(a1 + 24), (uint64_t)(a2 - 6), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(a1, (unsigned int **)(a1 + 24), a1 + 48, (uint64_t)(a2 - 6), a3);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *,0>(a1, a1 + 24, a1 + 48, a1 + 72, (uint64_t)(a2 - 6), a3);
      return 1;
    default:
      v22 = a1 + 48;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(a1, (_DWORD *)(a1 + 24), a1 + 48, a3);
      v23 = (_DWORD *)(a1 + 72);
      if ((_DWORD *)(a1 + 72) == a2)
        return 1;
      v24 = 0;
      v25 = 0;
      break;
  }
  while (1)
  {
    v26 = v23[4];
    v27 = *(_DWORD *)(v22 + 16);
    v10 = v26 <= v27;
    v28 = v26 < v27;
    v29 = !v10;
    if (**a3 ? v28 : v29)
    {
      v31 = *(_QWORD *)v23;
      v32 = *((_QWORD *)v23 + 1);
      v33 = v24;
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      while (1)
      {
        v34 = a1 + v33;
        v35 = *(_DWORD *)(a1 + v33 + 56);
        *(_QWORD *)(v34 + 72) = *(_QWORD *)(a1 + v33 + 48);
        *(_DWORD *)(v34 + 80) = v35;
        v36 = *(_QWORD *)(a1 + v33 + 60);
        *(_QWORD *)(v34 + 48) = 0;
        *(_QWORD *)(v34 + 56) = 0;
        *(_QWORD *)(v34 + 84) = v36;
        if (v33 == -48)
          break;
        v37 = *(_DWORD *)(v34 + 40);
        v10 = v26 <= v37;
        v38 = v26 < v37;
        v39 = !v10;
        if (!**a3)
          v38 = v39;
        v33 -= 24;
        if (!v38)
        {
          v40 = a1 + v33 + 72;
          goto LABEL_37;
        }
      }
      v40 = a1;
LABEL_37:
      *(_QWORD *)v40 = v31;
      *(_QWORD *)(v40 + 8) = v32;
      *(_DWORD *)(v40 + 16) = v26;
      if (++v25 == 8)
        return v23 + 6 == a2;
    }
    v22 = (uint64_t)v23;
    v24 += 24;
    v23 += 6;
    if (v23 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5)
{
  uint64_t result;
  void *v11;
  int v12;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  int v16;
  int v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  _BOOL4 v43;
  int v44;
  int v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_0 &,WebCore::TextExtraction::TokenAndBlockOffset *>(a1, a2, a3, a5);
  v12 = *(_DWORD *)(a4 + 16);
  v13 = *(_DWORD *)(a3 + 16);
  v14 = v12 <= v13;
  v15 = v12 < v13;
  v16 = !v14;
  if (**a5)
    v17 = v15;
  else
    v17 = v16;
  if (v17 == 1)
  {
    v18 = *(unsigned int **)a3;
    v19 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v20 = *(unsigned int **)a4;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)a3 = v20;
    LODWORD(v20) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a3 + 8) = (_DWORD)v20;
    v21 = *(_QWORD *)(a4 + 12);
    *(_DWORD *)(a4 + 12) = 0;
    *(_QWORD *)(a3 + 12) = v21;
    v22 = *(unsigned int *)(a4 + 12);
    v23 = *(unsigned int **)a4;
    if ((_DWORD)v22)
    {
      v24 = 16 * v22;
      do
      {
        v25 = v23[2];
        if ((_DWORD)v25 != -1)
          result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v25])(&v54, v23);
        v23[2] = -1;
        v23 += 4;
        v24 -= 16;
      }
      while (v24);
      v23 = *(unsigned int **)a4;
    }
    if (v23)
    {
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      result = WTF::fastFree((WTF *)v23, v11);
    }
    *(_QWORD *)a4 = v18;
    *(_QWORD *)(a4 + 8) = v19;
    *(_DWORD *)(a4 + 16) = v13;
    v26 = *(_DWORD *)(a3 + 16);
    v27 = *((_DWORD *)a2 + 4);
    v14 = v26 <= v27;
    v28 = v26 < v27;
    v29 = !v14;
    if (**a5)
      v30 = v28;
    else
      v30 = v29;
    if (v30 == 1)
    {
      v31 = *a2;
      v32 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v33 = *(unsigned int **)a3;
      *(_QWORD *)a3 = 0;
      *a2 = v33;
      LODWORD(v33) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = 0;
      *((_DWORD *)a2 + 2) = (_DWORD)v33;
      v34 = *(unsigned int **)(a3 + 12);
      *(_DWORD *)(a3 + 12) = 0;
      *(unsigned int **)((char *)a2 + 12) = v34;
      v35 = *(unsigned int *)(a3 + 12);
      v36 = *(unsigned int **)a3;
      if ((_DWORD)v35)
      {
        v37 = 16 * v35;
        do
        {
          v38 = v36[2];
          if ((_DWORD)v38 != -1)
            result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v38])(&v55, v36);
          v36[2] = -1;
          v36 += 4;
          v37 -= 16;
        }
        while (v37);
        v36 = *(unsigned int **)a3;
      }
      if (v36)
      {
        *(_QWORD *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
        result = WTF::fastFree((WTF *)v36, v11);
      }
      *(_QWORD *)a3 = v31;
      *(_QWORD *)(a3 + 8) = v32;
      *(_DWORD *)(a3 + 16) = v27;
      v39 = *a5;
      v40 = *((_DWORD *)a2 + 4);
      v41 = *(_DWORD *)(a1 + 16);
      v42 = *v39;
      v14 = v40 <= v41;
      v43 = v40 < v41;
      v44 = !v14;
      if (v42)
        v45 = v43;
      else
        v45 = v44;
      if (v45 == 1)
      {
        v46 = *(unsigned int **)a1;
        v47 = *(unsigned int **)(a1 + 8);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v48 = *a2;
        *a2 = 0;
        *(_QWORD *)a1 = v48;
        LODWORD(v48) = *((_DWORD *)a2 + 2);
        *((_DWORD *)a2 + 2) = 0;
        *(_DWORD *)(a1 + 8) = (_DWORD)v48;
        v49 = *(uint64_t *)((char *)a2 + 12);
        *((_DWORD *)a2 + 3) = 0;
        *(_QWORD *)(a1 + 12) = v49;
        v50 = *((unsigned int *)a2 + 3);
        v51 = *a2;
        if ((_DWORD)v50)
        {
          v52 = 16 * v50;
          do
          {
            v53 = v51[2];
            if ((_DWORD)v53 != -1)
              result = ((uint64_t (*)(char *, unsigned int *))off_1E34048F0[v53])(&v56, v51);
            v51[2] = -1;
            v51 += 4;
            v52 -= 16;
          }
          while (v52);
          v51 = *a2;
        }
        if (v51)
        {
          *a2 = 0;
          *((_DWORD *)a2 + 2) = 0;
          result = WTF::fastFree((WTF *)v51, v11);
        }
        *a2 = v46;
        a2[1] = v47;
        *((_DWORD *)a2 + 4) = v41;
      }
    }
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_1,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WebCore::IntSize> &>(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  v3 = *a1;
  WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_4::operator()(*(_QWORD *)(*a1 + 8), a2);
  return WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_4::operator()(*(_QWORD *)(v3 + 16), a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_1,WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WebCore::IntSize> &>(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _BYTE *v21;
  size_t v22;
  unsigned int v23;
  _BYTE *v24;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  _BYTE *v28;
  size_t v29;
  unsigned int v30;
  BOOL v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)result;
  v4 = *a2;
  v3 = a2[1];
  v5 = *(_QWORD *)(*(_QWORD *)result + 24);
  if (*(float *)(v5 + 8) * 0.9 < (double)(int)*a2 && *(float *)(v5 + 12) * 0.9 < (double)(int)v3)
    **(_BYTE **)(v2 + 32) = 1;
  if ((v4 & 0x80000000) != 0)
  {
    v37 = -v4;
    v6 = 1;
    do
    {
      ++v6;
      v31 = v37 >= 0xA;
      v37 /= 0xAu;
    }
    while (v31);
  }
  else
  {
    v6 = 0;
    v7 = v4;
    do
    {
      ++v6;
      v8 = v7 > 9;
      v7 /= 0xAu;
    }
    while (v8);
  }
  if ((v3 & 0x80000000) != 0)
  {
    v38 = -v3;
    v9 = 1;
    do
    {
      ++v9;
      v31 = v38 >= 0xA;
      v38 /= 0xAu;
    }
    while (v31);
  }
  else
  {
    v9 = 0;
    v10 = v3;
    do
    {
      ++v9;
      v8 = v10 > 9;
      v10 /= 0xAu;
    }
    while (v8);
  }
  if (v9 < 0)
    goto LABEL_67;
  v11 = __OFADD__(v9, 1);
  v12 = v9 + 1;
  if (v11)
    goto LABEL_67;
  v11 = __OFADD__(v12, 1);
  v13 = v12 + 1;
  v14 = v11;
  if (v6 < 0
    || v14
    || (v11 = __OFADD__(v6, v13), v15 = v6 + v13, v11)
    || (v16 = (v15 + 1), __OFADD__(v15, 1))
    || (v16 & 0x80000000) != 0
    || (v17 = *(_QWORD *)(v2 + 48), result = WTF::tryFastCompactMalloc((WTF *)(v16 + 20)), (v18 = v41[0]) == 0))
  {
LABEL_67:
    __break(0xC471u);
    return result;
  }
  *(_DWORD *)v41[0] = 2;
  *(_DWORD *)(v18 + 4) = v16;
  *(_BYTE *)(v18 + 20) = 123;
  *(_QWORD *)(v18 + 8) = v18 + 20;
  *(_DWORD *)(v18 + 16) = 4;
  v19 = 0;
  if ((v4 & 0x80000000) != 0)
  {
    v33 = -v4;
    do
    {
      *((_BYTE *)&v41[1] + v19-- + 4) = (v33 % 0xA) | 0x30;
      v8 = v33 > 9;
      v33 /= 0xAu;
    }
    while (v8);
    v34 = v19 + 12;
    v21 = (char *)&v41[1] + v19 + 4;
    *v21 = 45;
    if (v19 + 14 > 14)
      goto LABEL_27;
    if (v34 <= 12)
      v34 = 12;
    v22 = v34 - v19 - 11;
  }
  else
  {
    v20 = v4;
    do
    {
      *((_BYTE *)&v41[1] + v19-- + 4) = (v20 % 0xA) | 0x30;
      v8 = v20 > 9;
      v20 /= 0xAu;
    }
    while (v8);
    if (v19 + 14 > 13)
      goto LABEL_27;
    v21 = (char *)&v41[1] + v19 + 5;
    v22 = -v19;
  }
  memcpy((void *)(v18 + 21), v21, v22);
LABEL_27:
  if ((v4 & 0x80000000) != 0)
  {
    v39 = -v4;
    v23 = 1;
    do
    {
      ++v23;
      v31 = v39 >= 0xA;
      v39 /= 0xAu;
    }
    while (v31);
  }
  else
  {
    v23 = 0;
    do
    {
      ++v23;
      v8 = v4 > 9;
      v4 /= 0xAu;
    }
    while (v8);
  }
  v24 = (_BYTE *)(v18 + 21 + v23);
  *v24 = 44;
  v25 = v24 + 1;
  v26 = 0;
  if ((v3 & 0x80000000) != 0)
  {
    v35 = -v3;
    do
    {
      *((_BYTE *)&v41[1] + v26-- + 4) = (v35 % 0xA) | 0x30;
      v8 = v35 > 9;
      v35 /= 0xAu;
    }
    while (v8);
    v36 = v26 + 12;
    v28 = (char *)&v41[1] + v26 + 4;
    *v28 = 45;
    if (v26 + 14 <= 14)
    {
      if (v36 <= 12)
        v36 = 12;
      v29 = v36 - v26 - 11;
      goto LABEL_35;
    }
  }
  else
  {
    v27 = v3;
    do
    {
      *((_BYTE *)&v41[1] + v26-- + 4) = (v27 % 0xA) | 0x30;
      v8 = v27 > 9;
      v27 /= 0xAu;
    }
    while (v8);
    if (v26 + 14 <= 13)
    {
      v28 = (char *)&v41[1] + v26 + 5;
      v29 = -v26;
LABEL_35:
      memcpy(v25, v28, v29);
    }
  }
  if ((v3 & 0x80000000) != 0)
  {
    v40 = -v3;
    v30 = 1;
    do
    {
      ++v30;
      v31 = v40 >= 0xA;
      v40 /= 0xAu;
    }
    while (v31);
  }
  else
  {
    v30 = 0;
    do
    {
      ++v30;
      v31 = v3 >= 0xA;
      v3 /= 0xAu;
    }
    while (v31);
  }
  *((_BYTE *)v25 + v30) = 125;
  v41[0] = v18;
  result = (uint64_t)WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_4::operator()(v17, (WTF::StringImpl *)v41);
  if (*(_DWORD *)v18 == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)v18, v32);
  *(_DWORD *)v18 -= 2;
  return result;
}

WTF::StringImpl *WebCore::TextExtraction::extractRenderedText(WebCore::Element &)::$_4::operator()(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _DWORD *v7;
  WTF::StringImpl *result;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 && (v4 < *(_DWORD *)(v5 + 4) ? (v6 = *(_QWORD *)a1 == 0) : (v6 = 0), v6))
    {
      v10 = *(_DWORD *)(v5 + 16);
      v11 = *(_QWORD *)(v5 + 8);
      *(_DWORD *)(a1 + 16) = v4 + 1;
      if ((v10 & 4) == 0)
      {
        *(_WORD *)(v11 + 2 * v4) = 32;
        goto LABEL_20;
      }
      *(_BYTE *)(v11 + v4) = 32;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    if (*(_DWORD *)(a1 + 16))
      goto LABEL_20;
  }
  if (*(_QWORD *)(a1 + 8))
  {
LABEL_20:
    if (*(_QWORD *)a2 && (*(_BYTE *)(*(_QWORD *)a2 + 16) & 4) == 0)
      return (WTF::StringImpl *)WTF::StringBuilder::append();
    else
      return (WTF::StringImpl *)WTF::StringBuilder::append();
  }
  v7 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v7 += 2;
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v7;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v9 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    LODWORD(v9) = *(_DWORD *)(v9 + 4);
  *(_DWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t WebCore::AudioDecoder::isCodecSupported(const char **this, const WTF::StringView *a2)
{
  const char *v2;
  const char *v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  char v8;
  char v10;
  BOOL v12;
  _BOOL4 v13;
  BOOL v14;
  char v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;

  v2 = *this;
  v3 = this[1];
  v4 = (_DWORD)v3 != 9;
  if (*this != "mp4a.40.2" && (_DWORD)v3 == 9)
  {
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 == 109 && *(_DWORD *)(v2 + 1) == 778122352 && *(_DWORD *)(v2 + 5) == 841887796)
        return 0;
    }
    else if (*(_WORD *)v2 == 109)
    {
      v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DF200);
      v16.i16[0] = vminvq_u16(v16);
      v5 = v16.i8[0];
      if (v16.i32[0])
        return 0;
      goto LABEL_8;
    }
    v5 = 0;
LABEL_8:
    v6 = 1;
    goto LABEL_20;
  }
  if (v2 == "mp4a.40.2" && (_DWORD)v3 == 9)
    return 0;
  v5 = (_DWORD)v3 == 10;
  v6 = (_DWORD)v3 != 10;
  if (v2 == "mp4a.40.02" || (_DWORD)v3 != 10)
  {
    if (v2 == "mp4a.40.02" && (_DWORD)v3 == 10)
      return 0;
    goto LABEL_20;
  }
  if (((unint64_t)v3 & 0xFF00000000) != 0)
  {
    if (*v2 == 109 && *(_QWORD *)(v2 + 1) == 0x302E30342E613470 && *(_QWORD *)(v2 + 2) == 0x32302E30342E6134)
      return 0;
  }
  else if (*(_WORD *)v2 == 109)
  {
    v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DF210);
    v18.i16[0] = vminvq_u16(v18);
    v6 = v18.i8[0];
    if (v18.i32[0])
    {
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 4), (int16x8_t)xmmword_1968DF220);
      v19.i16[0] = vminvq_u16(v19);
      v6 = v19.i8[0];
      if (v19.i32[0])
        return 0;
    }
    goto LABEL_20;
  }
  v6 = 0;
LABEL_20:
  if (v2 == "mp4a.40.5")
    v4 = 1;
  if (v4)
  {
    if (v2 == "mp4a.40.5" && (_DWORD)v3 == 9)
      return 0;
  }
  else if (((unint64_t)v3 & 0xFF00000000) != 0)
  {
    if (*v2 == 109 && *(_DWORD *)(v2 + 1) == 778122352 && *(_DWORD *)(v2 + 5) == 892219444)
      return 0;
  }
  else if (*(_WORD *)v2 == 109)
  {
    v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DF230);
    v17.i16[0] = vminvq_u16(v17);
    if (v17.i32[0])
      return 0;
  }
  v8 = v2 == "mp4a.40.05" || v6;
  if ((v8 & 1) != 0)
  {
    if (v2 == "mp4a.40.05" && v5)
      return 0;
  }
  else
  {
    if (!(_DWORD)v3)
      return 0;
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 == 109 && *(_QWORD *)(v2 + 1) == 0x302E30342E613470 && *(_QWORD *)(v2 + 2) == 0x35302E30342E6134)
        return 0;
    }
    else if (*(_WORD *)v2 == 109)
    {
      v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DF210);
      v20.i16[0] = vminvq_u16(v20);
      if (v20.i32[0])
      {
        v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 4), (int16x8_t)xmmword_1968DF240);
        v21.i16[0] = vminvq_u16(v21);
        if (v21.i32[0])
          return 0;
      }
    }
  }
  v10 = v2 == "mp4a.40.29" || v6;
  if ((v10 & 1) != 0)
  {
    if (v2 == "mp4a.40.29" && v5)
      return 0;
  }
  else
  {
    if (!(_DWORD)v3)
      return 0;
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 == 109 && *(_QWORD *)(v2 + 1) == 0x322E30342E613470 && *(_QWORD *)(v2 + 2) == 0x39322E30342E6134)
        return 0;
    }
    else if (*(_WORD *)v2 == 109)
    {
      v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DF200);
      v22.i16[0] = vminvq_u16(v22);
      if (v22.i32[0])
      {
        v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 4), (int16x8_t)xmmword_1968DF250);
        v23.i16[0] = vminvq_u16(v23);
        if (v23.i32[0])
          return 0;
      }
    }
  }
  if (v2 == "mp4a.40.42")
    v6 = 1;
  if (!v6)
  {
    if (!(_DWORD)v3)
      return 0;
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 == 109 && *(_QWORD *)(v2 + 1) == 0x342E30342E613470 && *(_QWORD *)(v2 + 2) == 0x32342E30342E6134)
        return 0;
    }
    else if (*(_WORD *)v2 == 109)
    {
      v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DF260);
      v24.i16[0] = vminvq_u16(v24);
      if (v24.i32[0])
      {
        v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 4), (int16x8_t)xmmword_1968DF270);
        v25.i16[0] = vminvq_u16(v25);
        if (v25.i32[0])
          return 0;
      }
    }
LABEL_70:
    if (v2 != "mp3" && (_DWORD)v3 == 3)
    {
      if (((unint64_t)v3 & 0xFF00000000) != 0)
      {
        if (*v2 == 109 && *(_WORD *)(v2 + 1) == 13168)
          return 0;
      }
      else if (*(_WORD *)v2 == 109 && *(_DWORD *)(v2 + 2) == 3342448)
      {
        return 0;
      }
      v12 = 0;
      v13 = v2 == "vorbis";
      goto LABEL_76;
    }
    if (v2 == "mp3" && (_DWORD)v3 == 3)
      return 0;
    v14 = (_DWORD)v3 != 4;
    if (v2 == "opus" || (_DWORD)v3 != 4)
    {
      if (v2 == "opus" && (_DWORD)v3 == 4)
        return 0;
    }
    else
    {
      if (((unint64_t)v3 & 0xFF00000000) != 0)
      {
        if (*v2 == 111 && *(_WORD *)(v2 + 1) == 30064 && *((_WORD *)v2 + 1) == 29557)
          return 0;
        goto LABEL_87;
      }
      if (*(_WORD *)v2 != 111)
      {
LABEL_87:
        v14 = 0;
        goto LABEL_88;
      }
      v14 = 0;
      if (*(_DWORD *)(v2 + 2) == 7667824 && *((_DWORD *)v2 + 1) == 7536757)
        return 0;
    }
LABEL_88:
    if (v2 == "alaw" || v14)
    {
      if (v2 == "alaw" && (_DWORD)v3 == 4)
        return 0;
    }
    else
    {
      if (!(_DWORD)v3)
        return 0;
      if (((unint64_t)v3 & 0xFF00000000) != 0)
      {
        if (*v2 == 97 && *(_WORD *)(v2 + 1) == 24940 && *((_WORD *)v2 + 1) == 30561)
          return 0;
      }
      else if (*(_WORD *)v2 == 97 && *(_DWORD *)(v2 + 2) == 6357100 && *((_DWORD *)v2 + 1) == 7798881)
      {
        return 0;
      }
    }
    v15 = v2 == "ulaw" || v14;
    if ((v15 & 1) != 0)
    {
      if (v2 == "ulaw" && (_DWORD)v3 == 4)
        return 0;
    }
    else
    {
      if (!(_DWORD)v3)
        return 0;
      if (((unint64_t)v3 & 0xFF00000000) != 0)
      {
        if (*v2 == 117 && *(_WORD *)(v2 + 1) == 24940 && *((_WORD *)v2 + 1) == 30561)
          return 0;
      }
      else if (*(_WORD *)v2 == 117 && *(_DWORD *)(v2 + 2) == 6357100 && *((_DWORD *)v2 + 1) == 7798881)
      {
        return 0;
      }
    }
    if (v2 == "flac")
      v14 = 1;
    if (v14)
    {
      if (v2 == "flac" && (_DWORD)v3 == 4)
        return 0;
    }
    else
    {
      if (!(_DWORD)v3)
        return 0;
      if (((unint64_t)v3 & 0xFF00000000) != 0)
      {
        if (*v2 == 102 && *(_WORD *)(v2 + 1) == 24940 && *((_WORD *)v2 + 1) == 25441)
          return 0;
      }
      else if (*(_WORD *)v2 == 102 && *(_DWORD *)(v2 + 2) == 6357100 && *((_DWORD *)v2 + 1) == 6488161)
      {
        return 0;
      }
    }
    v12 = (_DWORD)v3 == 6;
    v13 = v2 == "vorbis";
    if (v2 != "vorbis" && (_DWORD)v3 == 6)
    {
      if (((unint64_t)v3 & 0xFF00000000) != 0)
      {
        if (*v2 == 118 && *(_DWORD *)(v2 + 1) == 1768059503 && *(_DWORD *)(v2 + 2) == 1936286322)
          return 0;
      }
      else if (*(_WORD *)v2 == 118
             && *(_QWORD *)(v2 + 2) == 0x6900620072006FLL
             && *(_QWORD *)(v2 + 4) == 0x73006900620072)
      {
        return 0;
      }
LABEL_78:
      WTF::StringView::startsWith();
      return 0;
    }
LABEL_76:
    if (v13 && v12)
      return 0;
    goto LABEL_78;
  }
  if (v2 != "mp4a.40.42")
    v5 = 0;
  if (!v5)
    goto LABEL_70;
  return 0;
}

_QWORD *WebCore::AudioDecoder::AudioDecoder(_QWORD *this)
{
  *this = off_1E3404930;
  return this;
}

uint64_t WebCore::CaretAnimator::page(WebCore::CaretAnimator *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  if (result)
  {
    v2 = *(_QWORD *)(result + 528);
    if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 24)) != 0)
      return *(_QWORD *)(v4 + 8);
    else
      return 0;
  }
  return result;
}

uint64_t WebCore::CaretAnimator::stop(uint64_t result)
{
  if (*(_BYTE *)(result + 88))
  {
    *(_BYTE *)(result + 88) = 0;
    if ((*(_QWORD *)(result + 56) & 0xFFFFFFFFFFFFLL) != 0)
      return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(result + 24));
  }
  return result;
}

uint64_t WebCore::CaretAnimator::scheduleAnimation(WebCore::CaretAnimator *this)
{
  uint64_t result;

  result = WebCore::CaretAnimator::page(this);
  if (result)
    return WebCore::Page::scheduleRenderingUpdate(result, 0x80000);
  return result;
}

uint64_t WebCore::CaretAnimator::paint(WebCore::CaretAnimator *this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3, const WebCore::Color *a4, const WebCore::LayoutPoint *a5)
{
  return (*(uint64_t (**)(WebCore::GraphicsContext *, const WebCore::FloatRect *, const WebCore::Color *))(*(_QWORD *)a2 + 224))(a2, a3, a4);
}

uint64_t WebCore::CaretAnimator::caretRepaintRectForLocalRect(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t WebCore::ContentType::ContentType(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_BYTE *)(result + 8) = 0;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_BYTE *)(result + 8) = 0;
  return result;
}

uint64_t WebCore::ContentType::ContentType(uint64_t this, const WTF::String *a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)this = v2;
  *(_BYTE *)(this + 8) = 0;
  return this;
}

{
  _DWORD *v2;

  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)this = v2;
  *(_BYTE *)(this + 8) = 0;
  return this;
}

uint64_t WebCore::ContentType::ContentType(uint64_t this, const WTF::String *a2, char a3)
{
  _DWORD *v3;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *(_QWORD *)this = v3;
  *(_BYTE *)(this + 8) = a3;
  return this;
}

{
  _DWORD *v3;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *(_QWORD *)this = v3;
  *(_BYTE *)(this + 8) = a3;
  return this;
}

WTF::StringImpl *WebCore::ContentType::fromURL@<X0>(WebCore::ContentType *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  unint64_t v4;
  WTF::StringImpl *result;
  uint64_t v6;
  WebCore *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t PathComponent;
  unint64_t v14;

  PathComponent = WTF::URL::lastPathComponent(this);
  v14 = v4;
  result = (WTF::StringImpl *)WTF::StringView::reverseFind((uint64_t)&PathComponent, 0x2Eu, 0xFFFFFFFF);
  if (result == (WTF::StringImpl *)-1)
    goto LABEL_6;
  v6 = ((_DWORD)result + 1);
  if (v14 <= v6)
  {
    v8 = 0x100000000;
    v7 = (WebCore *)&str_18_37;
    goto LABEL_5;
  }
  if ((_DWORD)result != -1)
  {
    v8 = (v14 - v6);
    v11 = v14 - (unint64_t)v6;
    if (BYTE4(v14))
    {
      if (v11 >= v8)
      {
        v7 = (WebCore *)(PathComponent + v6);
        v8 |= 0x100000000uLL;
        goto LABEL_5;
      }
    }
    else if (v11 >= v8)
    {
      v7 = (WebCore *)(PathComponent + 2 * v6);
      goto LABEL_5;
    }
    __break(1u);
    return result;
  }
  v7 = (WebCore *)PathComponent;
  v8 = v14;
LABEL_5:
  WebCore::MIMETypeRegistry::mediaMIMETypeForExtension(v7, v8, &v12);
  result = v12;
  if (!v12)
  {
LABEL_6:
    *a2 = 0;
    a2[1] = 0;
    return result;
  }
  if (!*((_DWORD *)v12 + 1))
  {
    v12 = 0;
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
    goto LABEL_6;
  }
  v10 = *(_DWORD *)v12;
  *(_DWORD *)v12 += 2;
  *a2 = result;
  *((_BYTE *)a2 + 8) = 1;
  v12 = 0;
  if (!v10)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
  *(_DWORD *)result = v10;
  return result;
}

uint64_t *WebCore::ContentType::codecsParameter(WebCore::ContentType *this)
{
  uint64_t v2;

  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::ContentType::codecsParameter(void)::codecs = v2;
  }
  return &WebCore::ContentType::codecsParameter(void)::codecs;
}

uint64_t *WebCore::ContentType::parameter@<X0>(uint64_t *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>, float a4@<S2>)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  int16x8_t *v42;
  int16x8_t v43;
  int16x8_t *v44;
  int8x16_t v45;
  int16x8_t *v46;
  char *v47;
  int16x8_t v48;
  __int16 *v49;
  uint64_t v50;
  int16x8_t *v51;
  unint64_t v52;
  unint64_t v53;
  int16x8_t v54;
  int8x16_t v55;
  int16x8_t *v56;
  __int8 *v57;
  int16x8_t *v58;
  unint64_t v59;
  unint64_t v60;
  int16x8_t v61;
  int8x16_t v62;
  int16x8_t *v63;
  __int8 *v64;
  int16x8_t *v65;
  unint64_t v66;
  unint64_t v67;
  int16x8_t v68;
  int8x16_t v69;
  int16x8_t *v70;
  __int8 *v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  BOOL v84;
  uint64_t v85;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v91;
  uint64_t v92;
  char *i;
  unsigned int v94;
  uint64_t v95;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  int16x8_t *v101;
  unint64_t v102;
  unint64_t v103;
  int16x8_t v104;
  int8x16_t v105;
  int16x8_t *v106;
  __int8 *v107;
  int16x8_t v108;

  v7 = *this;
  if (!*this)
    goto LABEL_111;
  v9 = this;
  v10 = *(_QWORD *)(v7 + 8);
  v11 = *(unsigned int *)(v7 + 4);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if (!(_DWORD)v11)
      goto LABEL_111;
    v12 = 16;
    if (v11 < 0x10)
      v12 = *(unsigned int *)(v7 + 4);
    v13 = v12;
    this = *(uint64_t **)(v7 + 8);
    do
    {
      if (*(_BYTE *)this == 59)
        goto LABEL_11;
      this = (uint64_t *)((char *)this + 1);
      --v13;
    }
    while (v13);
    if (v11 < 0x11)
      goto LABEL_111;
    this = (uint64_t *)memchr((void *)(v10 + v12), 59, v11 - v12);
    if (!this)
      goto LABEL_111;
LABEL_11:
    v14 = (uint64_t)this - v10;
  }
  else
  {
    if (!(_DWORD)v11)
      goto LABEL_111;
    v42 = (int16x8_t *)(v10 + 2 * v11);
    if (v11 <= 0x1F)
    {
      v50 = 2 * v11;
      v49 = *(__int16 **)(v7 + 8);
      while (*v49 != 59)
      {
        ++v49;
        v50 -= 2;
        if (!v50)
          goto LABEL_111;
      }
    }
    else
    {
      v43.i64[0] = 0x3B003B003B003BLL;
      v43.i64[1] = 0x3B003B003B003BLL;
      v44 = *(int16x8_t **)(v7 + 8);
      do
      {
        v45 = (int8x16_t)vceqq_s16(*v44, v43);
        LOWORD(a4) = vmaxvq_u16((uint16x8_t)v45);
        if (a4 != 0.0)
          goto LABEL_63;
        v46 = v44 + 1;
        v47 = &v44[1].i8[14];
        ++v44;
      }
      while (v47 < (char *)v42);
      if (v46 >= v42)
        goto LABEL_111;
      v48.i64[0] = 0x3B003B003B003BLL;
      v48.i64[1] = 0x3B003B003B003BLL;
      v45 = (int8x16_t)vceqq_s16(v42[-1], v48);
      v48.i16[0] = vmaxvq_u16((uint16x8_t)v45);
      if (!v48.i32[0])
        goto LABEL_111;
      v44 = v42 - 1;
LABEL_63:
      v49 = &v44->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v45))];
    }
    if (v49 == (__int16 *)v42)
      goto LABEL_111;
    v14 = ((uint64_t)v49 - v10) >> 1;
  }
  if (v14 == -1)
    goto LABEL_111;
  this = (uint64_t *)WTF::StringImpl::findIgnoringASCIICase();
  if (this == (uint64_t *)-1)
    goto LABEL_111;
  v16 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    LODWORD(v16) = *(_DWORD *)(v16 + 4);
  v17 = *v9;
  if (!*v9)
    goto LABEL_111;
  v18 = (v16 + (_DWORD)this);
  v19 = *(unsigned int *)(v17 + 16);
  v20 = *(char **)(v17 + 8);
  v21 = *(unsigned int *)(v17 + 4);
  if ((v19 & 4) == 0)
  {
    if (v21 > v18)
    {
      v51 = (int16x8_t *)&v20[2 * v18];
      v52 = (unint64_t)&v20[2 * v21];
      v53 = v52 - (_QWORD)v51;
      if ((uint64_t)(v52 - (_QWORD)v51) <= -2)
      {
        do
        {
LABEL_195:
          __break(1u);
LABEL_196:
          if (v21 <= v5)
            goto LABEL_214;
          v101 = (int16x8_t *)&v20[2 * v5];
          v102 = (unint64_t)&v20[2 * v21];
          v103 = v102 - (_QWORD)v101;
        }
        while ((uint64_t)(v102 - (_QWORD)v101) <= -2);
        if (v103 <= 0x3E)
        {
          while (v101->i16[0] != 59)
          {
            v101 = (int16x8_t *)((char *)v101 + 2);
            LODWORD(v41) = -1;
            v103 -= 2;
            if (!v103)
              goto LABEL_137;
          }
        }
        else
        {
          if ((unint64_t)&v101->u64[1] + 6 >= v102)
          {
            v106 = (int16x8_t *)&v20[2 * v5];
LABEL_208:
            if ((unint64_t)v106 >= v102)
              goto LABEL_214;
            v101 = (int16x8_t *)(v102 - 16);
            v108.i64[0] = 0x3B003B003B003BLL;
            v108.i64[1] = 0x3B003B003B003BLL;
            v105 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v102 - 16), v108);
            v108.i16[0] = vmaxvq_u16((uint16x8_t)v105);
            if (!v108.i32[0])
              goto LABEL_214;
          }
          else
          {
            v104.i64[0] = 0x3B003B003B003BLL;
            v104.i64[1] = 0x3B003B003B003BLL;
            while (1)
            {
              v105 = (int8x16_t)vceqq_s16(*v101, v104);
              LOWORD(v15) = vmaxvq_u16((uint16x8_t)v105);
              if (v15)
                break;
              v106 = v101 + 1;
              v107 = &v101[1].i8[14];
              ++v101;
              if ((unint64_t)v107 >= v102)
                goto LABEL_208;
            }
          }
          v101 = (int16x8_t *)((char *)v101
                             + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v105)));
        }
        LODWORD(v41) = -1;
        if (v101 != (int16x8_t *)v102)
          v41 = ((char *)v101 - v20) >> 1;
        goto LABEL_137;
      }
      if (v53 <= 0x3E)
      {
        while (v51->i16[0] != 61)
        {
          v51 = (int16x8_t *)((char *)v51 + 2);
          v53 -= 2;
          if (!v53)
            goto LABEL_111;
        }
      }
      else
      {
        if ((unint64_t)&v51->u64[1] + 6 >= v52)
        {
          v56 = v51;
LABEL_106:
          if ((unint64_t)v56 >= v52)
            goto LABEL_111;
          v51 = (int16x8_t *)(v52 - 16);
          v72.i64[0] = 0x3D003D003D003DLL;
          v72.i64[1] = 0x3D003D003D003DLL;
          v55 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v52 - 16), v72);
          v72.i16[0] = vmaxvq_u16((uint16x8_t)v55);
          if (!v72.i32[0])
            goto LABEL_111;
        }
        else
        {
          v54.i64[0] = 0x3D003D003D003DLL;
          v54.i64[1] = 0x3D003D003D003DLL;
          while (1)
          {
            v55 = (int8x16_t)vceqq_s16(*v51, v54);
            LOWORD(v15) = vmaxvq_u16((uint16x8_t)v55);
            if (v15)
              break;
            v56 = v51 + 1;
            v57 = &v51[1].i8[14];
            ++v51;
            if ((unint64_t)v57 >= v52)
              goto LABEL_106;
          }
        }
        v51 = (int16x8_t *)((char *)v51
                          + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v55)));
      }
      if (v51 != (int16x8_t *)v52)
      {
        v26 = ((char *)v51 - v20) >> 1;
        goto LABEL_28;
      }
    }
LABEL_111:
    *a3 = 0;
    return this;
  }
  if (v21 <= v18)
    goto LABEL_111;
  v22 = &v20[v18];
  v23 = v21 - v18;
  v24 = 16;
  if (v23 < 0x10)
    v24 = v23;
  if (v24)
  {
    v25 = v24;
    this = (uint64_t *)v22;
    while (*(_BYTE *)this != 61)
    {
      this = (uint64_t *)((char *)this + 1);
      if (!--v25)
        goto LABEL_25;
    }
  }
  else
  {
LABEL_25:
    if (v23 < 0x11)
      goto LABEL_111;
    this = (uint64_t *)memchr(&v22[v24], 61, v23 - v24);
    if (!this)
      goto LABEL_111;
  }
  v26 = (char *)this - v20;
LABEL_28:
  if (v26 == -1)
    goto LABEL_111;
  LODWORD(v10) = v26 + 1;
  v4 = v26 + 1;
  v5 = (v26 + 1);
  if ((v19 & 4) != 0)
  {
    if (v21 <= v4)
    {
      v33 = 0;
      v32 = 0;
      v34 = 0;
      v31 = -1;
      goto LABEL_41;
    }
    v27 = v21 - v5;
    v28 = 16;
    if (v21 - v5 < 0x10)
      v28 = v21 - v5;
    if (v28)
    {
      v29 = v28;
      v30 = &v20[v5];
      while (*v30 != 34)
      {
        ++v30;
        if (!--v29)
          goto LABEL_37;
      }
      goto LABEL_39;
    }
LABEL_37:
    if (v27 >= 0x11)
    {
      v30 = (char *)memchr(&v20[v5 + v28], 34, v27 - v28);
      if (v30)
      {
LABEL_39:
        v31 = v30 - v20;
        goto LABEL_40;
      }
    }
    goto LABEL_119;
  }
  if (v21 <= v5)
  {
    v33 = 0;
    v32 = 0;
    v35 = 0;
    v31 = -1;
    goto LABEL_90;
  }
  v58 = (int16x8_t *)&v20[2 * v5];
  v59 = (unint64_t)&v20[2 * v21];
  v60 = v59 - (_QWORD)v58;
  if ((uint64_t)(v59 - (_QWORD)v58) <= -2)
    goto LABEL_195;
  if (v60 <= 0x3E)
  {
    v31 = -1;
    while (v58->i16[0] != 34)
    {
      v58 = (int16x8_t *)((char *)v58 + 2);
      v60 -= 2;
      if (!v60)
        goto LABEL_40;
    }
  }
  else
  {
    if ((unint64_t)&v58->u64[1] + 6 >= v59)
    {
      v63 = (int16x8_t *)&v20[2 * v5];
LABEL_113:
      if ((unint64_t)v63 >= v59
        || (v58 = (int16x8_t *)(v59 - 16),
            v73.i64[0] = 0x22002200220022,
            v73.i64[1] = 0x22002200220022,
            v62 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v59 - 16), v73),
            v73.i16[0] = vmaxvq_u16((uint16x8_t)v62),
            !v73.i32[0]))
      {
LABEL_119:
        v31 = -1;
        goto LABEL_40;
      }
    }
    else
    {
      v61.i64[0] = 0x22002200220022;
      v61.i64[1] = 0x22002200220022;
      while (1)
      {
        v62 = (int8x16_t)vceqq_s16(*v58, v61);
        LOWORD(v15) = vmaxvq_u16((uint16x8_t)v62);
        if (v15)
          break;
        v63 = v58 + 1;
        v64 = &v58[1].i8[14];
        ++v58;
        if ((unint64_t)v64 >= v59)
          goto LABEL_113;
      }
    }
    v58 = (int16x8_t *)((char *)v58
                      + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v62)));
  }
  if (v58 == (int16x8_t *)v59)
    v31 = -1;
  else
    v31 = ((char *)v58 - v20) >> 1;
LABEL_40:
  v32 = v31 + 1;
  v33 = (v31 + 1);
  v34 = v31 + 1;
  v35 = v31 + 1;
  if ((v19 & 4) != 0)
  {
LABEL_41:
    if (v21 <= v34)
      goto LABEL_127;
    v36 = &v20[v33];
    v37 = v21 - v33;
    v38 = 16;
    if (v37 < 0x10)
      v38 = v37;
    if (v38)
    {
      v39 = v38;
      v40 = v36;
      while (*v40 != 34)
      {
        ++v40;
        if (!--v39)
          goto LABEL_48;
      }
      goto LABEL_50;
    }
LABEL_48:
    if (v37 >= 0x11)
    {
      v40 = memchr(&v36[v38], 34, v37 - v38);
      if (v40)
      {
LABEL_50:
        v41 = v40 - v20;
LABEL_51:
        if (v31 != -1 && v41 != -1)
        {
          v4 = v32;
          LODWORD(v10) = v32;
          goto LABEL_137;
        }
        goto LABEL_126;
      }
    }
    goto LABEL_126;
  }
LABEL_90:
  if (v21 <= v35)
    goto LABEL_196;
  v65 = (int16x8_t *)&v20[2 * v33];
  v66 = (unint64_t)&v20[2 * v21];
  v67 = v66 - (_QWORD)v65;
  if ((uint64_t)(v66 - (_QWORD)v65) <= -2)
    goto LABEL_195;
  if (v67 <= 0x3E)
  {
    while (v65->i16[0] != 34)
    {
      v65 = (int16x8_t *)((char *)v65 + 2);
      v67 -= 2;
      if (!v67)
        goto LABEL_126;
    }
  }
  else
  {
    if ((unint64_t)&v65->u64[1] + 6 >= v66)
    {
      v70 = v65;
LABEL_121:
      if ((unint64_t)v70 >= v66)
        goto LABEL_126;
      v65 = (int16x8_t *)(v66 - 16);
      v74.i64[0] = 0x22002200220022;
      v74.i64[1] = 0x22002200220022;
      v69 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v66 - 16), v74);
      v74.i16[0] = vmaxvq_u16((uint16x8_t)v69);
      if (!v74.i32[0])
        goto LABEL_126;
    }
    else
    {
      v68.i64[0] = 0x22002200220022;
      v68.i64[1] = 0x22002200220022;
      while (1)
      {
        v69 = (int8x16_t)vceqq_s16(*v65, v68);
        LOWORD(v15) = vmaxvq_u16((uint16x8_t)v69);
        if (v15)
          break;
        v70 = v65 + 1;
        v71 = &v65[1].i8[14];
        ++v65;
        if ((unint64_t)v71 >= v66)
          goto LABEL_121;
      }
    }
    v65 = (int16x8_t *)((char *)v65
                      + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v69)));
  }
  if (v65 != (int16x8_t *)v66)
  {
    v41 = ((char *)v65 - v20) >> 1;
    goto LABEL_51;
  }
LABEL_126:
  if ((v19 & 4) == 0)
    goto LABEL_196;
LABEL_127:
  if (v21 > v4)
  {
    v75 = v21 - v5;
    v76 = 16;
    if (v21 - v5 < 0x10)
      v76 = v21 - v5;
    if (v76)
    {
      v77 = v76;
      v78 = &v20[v5];
      while (*v78 != 59)
      {
        ++v78;
        if (!--v77)
          goto LABEL_134;
      }
      goto LABEL_136;
    }
LABEL_134:
    if (v75 >= 0x11)
    {
      v78 = (char *)memchr(&v20[v5 + v76], 59, v75 - v76);
      if (v78)
      {
LABEL_136:
        LODWORD(v41) = (_DWORD)v78 - (_DWORD)v20;
        goto LABEL_137;
      }
    }
  }
LABEL_214:
  LODWORD(v41) = -1;
LABEL_137:
  if (v21 <= v4)
    return (uint64_t *)WTF::String::String();
  LODWORD(v79) = v41 - v10;
  if (v21 - v4 <= (int)v41 - (int)v10)
  {
    if (!v4)
    {
      v21 = v21 & 0xFFFFFFFEFFFFFFFFLL | (((v19 >> 2) & 1) << 32);
      v79 = v21;
      goto LABEL_146;
    }
    LODWORD(v79) = v21 - v4;
  }
  v79 = v79;
  v80 = v21 - v10;
  if (((v19 >> 2) & 1) != 0)
  {
    if (v80 < v79)
      goto LABEL_195;
    v20 += v10;
    v79 = v79 | 0x100000000;
  }
  else
  {
    if (v80 < v79)
      goto LABEL_195;
    v20 += 2 * v10;
  }
LABEL_146:
  v81 = v79;
  if ((v79 & 0x100000000) == 0)
  {
    if (!(_DWORD)v79)
      goto LABEL_185;
    v92 = 0;
    for (i = v20; ; i += 2)
    {
      v94 = *(unsigned __int16 *)i;
      v84 = v94 > 0x20;
      v95 = (1 << v94) & 0x100003600;
      if (v84 || v95 == 0)
        break;
      if (v79 == ++v92)
        return (uint64_t *)WTF::String::String();
    }
    if ((_DWORD)v79 == 1)
    {
      if (!(_DWORD)v92)
        goto LABEL_185;
      LODWORD(v97) = 0;
    }
    else
    {
      v97 = (v79 - 1);
      do
      {
        if (v97 >= v79)
          goto LABEL_195;
        v98 = *(unsigned __int16 *)&v20[2 * v97];
        v84 = v98 > 0x20;
        v99 = (1 << v98) & 0x100003600;
        if (v84 || v99 == 0)
          break;
        --v97;
      }
      while ((_DWORD)v97);
      if (!(_DWORD)v92 && (_DWORD)v97 == (_DWORD)v79 - 1)
        goto LABEL_185;
    }
    v79 = (v97 - v92 + 1);
    v20 = i;
    if (v81 - v92 < v79)
      goto LABEL_195;
    goto LABEL_185;
  }
  if (!(_DWORD)v79)
    goto LABEL_185;
  v82 = 0;
  while (1)
  {
    v83 = v20[v82];
    v84 = v83 > 0x20;
    v85 = (1 << v83) & 0x100003600;
    if (v84 || v85 == 0)
      break;
    if (v79 == ++v82)
      return (uint64_t *)WTF::String::String();
  }
  if ((_DWORD)v79 == 1)
  {
    if (!(_DWORD)v82)
      goto LABEL_185;
    LODWORD(v87) = 0;
    goto LABEL_165;
  }
  v87 = (v79 - 1);
  do
  {
    if (v87 >= v79)
      goto LABEL_195;
    v88 = v20[v87];
    v84 = v88 > 0x20;
    v89 = (1 << v88) & 0x100003600;
    if (v84 || v89 == 0)
      break;
    --v87;
  }
  while ((_DWORD)v87);
  if ((_DWORD)v82 || (_DWORD)v87 != (_DWORD)v79 - 1)
  {
LABEL_165:
    v91 = (v87 - v82 + 1);
    if (v81 - v82 < v91)
      goto LABEL_195;
    v79 = v91 | 0x100000000;
  }
LABEL_185:
  if ((v79 & 0x100000000) != 0)
    return (uint64_t *)WTF::String::String();
  return (uint64_t *)WTF::String::String();
}

WTF::StringImpl *WebCore::ContentType::containerType(WebCore::ContentType *this, double a2, double a3, float a4)
{
  unsigned int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  v5 = WTF::String::find(this, 0x3Bu, 0, a2, a3, a4);
  WTF::String::left((WTF::StringImpl **)this, v5, &v8);
  WTF::String::trim();
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::String::left@<X0>(WTF::StringImpl **this@<X0>, unsigned int a2@<W1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *result;

  result = *this;
  if (result)
  {
    if (*((_DWORD *)result + 1) > a2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::substring(result);
    }
    else
    {
      *(_DWORD *)result += 2;
      *a3 = result;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::ContentType::codecs@<X0>(WebCore::ContentType *this@<X0>, uint64_t a2@<X8>, float a3@<S2>)
{
  uint64_t v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WebCore::ContentType *v8;
  WTF::StringImpl *v9;

  {
    v8 = this;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    this = v8;
    WebCore::ContentType::codecsParameter(void)::codecs = (uint64_t)v9;
  }
  WebCore::ContentType::parameter((uint64_t *)this, (const WTF::String *)&WebCore::ContentType::codecsParameter(void)::codecs, &v9, a3);
  if (v9)
  {
    v4 = *((_QWORD *)v9 + 1);
    v5 = *((unsigned int *)v9 + 1) | ((unint64_t)((*((_DWORD *)v9 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  WebCore::splitParameters(a2, v4, v5);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::splitParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  char v44;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v41 = a2;
  v42 = a3;
  v43 = 44;
  v44 = 0;
  v37 = &v41;
  v38 = 0;
  v40 = (_DWORD)a3 == 0;
  result = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v37);
  v5 = v42;
  while (v38 != v5 || !v40)
  {
    v6 = *((unsigned int *)v37 + 2);
    if (v6 <= v38)
      goto LABEL_53;
    LODWORD(v7) = v39;
    if (v6 - v38 <= v39)
    {
      if (!v38)
      {
        v9 = *v37;
        v7 = v37[1];
        goto LABEL_13;
      }
      LODWORD(v7) = v6 - v38;
    }
    v7 = v7;
    v8 = v6 - v38;
    if (*((_BYTE *)v37 + 12))
    {
      if (v8 < v7)
        goto LABEL_70;
      v9 = *v37 + v38;
      v7 = v7 | 0x100000000;
    }
    else
    {
      if (v8 < v7)
        goto LABEL_70;
      v9 = *v37 + 2 * v38;
    }
LABEL_13:
    v10 = v7;
    if ((v7 & 0xFF00000000) != 0)
    {
      if ((_DWORD)v7)
      {
        v11 = 0;
        while (1)
        {
          v12 = *(unsigned __int8 *)(v9 + v11);
          v13 = v12 > 0x20;
          v14 = (1 << v12) & 0x100003600;
          if (v13 || v14 == 0)
            break;
          if (v7 == ++v11)
            goto LABEL_53;
        }
        if ((_DWORD)v7 != 1)
        {
          v16 = (v7 - 1);
          while (v16 < v7)
          {
            v17 = *(unsigned __int8 *)(v9 + v16);
            v13 = v17 > 0x20;
            v18 = (1 << v17) & 0x100003600;
            if (!v13 && v18 != 0)
            {
              if ((_DWORD)--v16)
                continue;
            }
            if (!(_DWORD)v11 && (_DWORD)v16 == (_DWORD)v7 - 1)
              goto LABEL_52;
            goto LABEL_32;
          }
LABEL_70:
          __break(1u);
          return result;
        }
        if ((_DWORD)v11)
        {
          LODWORD(v16) = 0;
LABEL_32:
          v20 = (v16 - v11 + 1);
          if (v10 - v11 < v20)
            goto LABEL_70;
          v7 = v20 | 0x100000000;
        }
      }
    }
    else if ((_DWORD)v7)
    {
      v21 = 0;
      v22 = (unsigned __int16 *)v9;
      while (1)
      {
        v23 = *v22;
        v13 = v23 > 0x20;
        v24 = (1 << v23) & 0x100003600;
        if (v13 || v24 == 0)
          break;
        ++v21;
        ++v22;
        if (v7 == v21)
          goto LABEL_53;
      }
      if ((_DWORD)v7 != 1)
      {
        v26 = (v7 - 1);
        while (v26 < v7)
        {
          v27 = *(unsigned __int16 *)(v9 + 2 * v26);
          v13 = v27 > 0x20;
          v28 = (1 << v27) & 0x100003600;
          if (!v13 && v28 != 0)
          {
            if ((_DWORD)--v26)
              continue;
          }
          if ((_DWORD)v21 || (_DWORD)v26 != (_DWORD)v7 - 1)
            goto LABEL_69;
          goto LABEL_52;
        }
        goto LABEL_70;
      }
      if ((_DWORD)v21)
      {
        LODWORD(v26) = 0;
LABEL_69:
        v7 = (v26 - v21 + 1);
        if (v10 - v21 < v7)
          goto LABEL_70;
      }
    }
LABEL_52:
    if ((v7 & 0xFF00000000) != 0)
    {
LABEL_53:
      WTF::String::String();
      goto LABEL_54;
    }
    WTF::String::String();
LABEL_54:
    v31 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 8))
    {
      v35 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v31 + 1, (unint64_t)&v36);
      v31 = *(unsigned int *)(a1 + 12);
      v32 = *(_QWORD *)a1;
      v33 = *v35;
      *v35 = 0;
    }
    else
    {
      v32 = *(_QWORD *)a1;
      v33 = v36;
      v36 = 0;
    }
    *(_QWORD *)(v32 + 8 * v31) = v33;
    *(_DWORD *)(a1 + 12) = v31 + 1;
    v34 = v36;
    v36 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v30);
      else
        *(_DWORD *)v34 -= 2;
    }
    result = WTF::StringView::SplitResult::Iterator::operator++();
  }
  return result;
}

WTF::JSONImpl::Value *WebCore::ContentType::toJSONString(WebCore::ContentType *this)
{
  WTF::JSONImpl::Value *v2;
  double v3;
  double v4;
  float v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::JSONImpl::Value *v16;
  const WTF::String *v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::JSONImpl::Value *v26;
  const WTF::String *v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::JSONImpl::Value *result;
  _DWORD **v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD **v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD **v45;
  uint64_t v46;
  _DWORD *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::JSONImpl::Value *v51;
  _DWORD *v52;
  _QWORD v53[2];
  char v54;

  WTF::JSONImpl::Object::create(this);
  v2 = v51;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::ContentType::containerType(this, v3, v4, v5);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v49, v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v2 + 2, &v50, (const WTF::StringImpl *)&v52, (uint64_t)v53);
  if (v54)
  {
    v8 = (uint64_t *)((char *)v2 + 24);
    v9 = *((unsigned int *)v2 + 9);
    if ((_DWORD)v9 == *((_DWORD *)v2 + 8))
    {
      v39 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v50);
      v9 = *((unsigned int *)v2 + 9);
      v40 = *((_QWORD *)v2 + 3);
      v41 = *v39;
      if (*v39)
        *v41 += 2;
      *(_QWORD *)(v40 + 8 * v9) = v41;
    }
    else
    {
      v10 = *v8;
      v11 = v50;
      if (v50)
        *(_DWORD *)v50 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
    }
    *((_DWORD *)v2 + 9) = v9 + 1;
  }
  v12 = v52;
  v52 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  v13 = v49;
  v49 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v7);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v50;
  v50 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v7);
    else
      *(_DWORD *)v14 -= 2;
  }
  {
    v15 = (WTF::StringImpl *)WebCore::ContentType::codecsParameter(void)::codecs;
    if (WebCore::ContentType::codecsParameter(void)::codecs)
      goto LABEL_18;
LABEL_76:
    v50 = 0;
    goto LABEL_31;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = (WTF::StringImpl *)v53[0];
  WebCore::ContentType::codecsParameter(void)::codecs = v53[0];
  if (!v53[0])
    goto LABEL_76;
LABEL_18:
  *(_DWORD *)v15 += 2;
  v50 = v15;
  if (*((_DWORD *)v15 + 1))
  {
    v16 = v51;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v49 = (WTF::StringImpl *)v53[0];
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v50, v17);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v16 + 2, &v49, (const WTF::StringImpl *)&v52, (uint64_t)v53);
    if (v54)
    {
      v19 = (uint64_t *)((char *)v16 + 24);
      v20 = *((unsigned int *)v16 + 9);
      if ((_DWORD)v20 == *((_DWORD *)v16 + 8))
      {
        v42 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v49);
        v20 = *((unsigned int *)v16 + 9);
        v43 = *((_QWORD *)v16 + 3);
        v44 = *v42;
        if (*v42)
          *v44 += 2;
        *(_QWORD *)(v43 + 8 * v20) = v44;
      }
      else
      {
        v21 = *v19;
        v22 = v49;
        if (v49)
          *(_DWORD *)v49 += 2;
        *(_QWORD *)(v21 + 8 * v20) = v22;
      }
      *((_DWORD *)v16 + 9) = v20 + 1;
    }
    v23 = v52;
    v52 = 0;
    if (v23)
    {
      if (*v23 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v23;
    }
    v24 = v49;
    v49 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v18);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
LABEL_31:
  if ((_MergedGlobals_216 & 1) != 0)
  {
    v25 = (WTF::StringImpl *)qword_1ECE839E8;
    if (qword_1ECE839E8)
      goto LABEL_33;
LABEL_78:
    v49 = 0;
    goto LABEL_46;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = (WTF::StringImpl *)v53[0];
  qword_1ECE839E8 = v53[0];
  _MergedGlobals_216 = 1;
  if (!v53[0])
    goto LABEL_78;
LABEL_33:
  *(_DWORD *)v25 += 2;
  v49 = v25;
  if (*((_DWORD *)v25 + 1))
  {
    v26 = v51;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v49, v27);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v26 + 2, &v48, (const WTF::StringImpl *)&v52, (uint64_t)v53);
    if (v54)
    {
      v29 = (uint64_t *)((char *)v26 + 24);
      v30 = *((unsigned int *)v26 + 9);
      if ((_DWORD)v30 == *((_DWORD *)v26 + 8))
      {
        v45 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v30 + 1, (unint64_t)&v48);
        v30 = *((unsigned int *)v26 + 9);
        v46 = *((_QWORD *)v26 + 3);
        v47 = *v45;
        if (*v45)
          *v47 += 2;
        *(_QWORD *)(v46 + 8 * v30) = v47;
      }
      else
      {
        v31 = *v29;
        v32 = v48;
        if (v48)
          *(_DWORD *)v48 += 2;
        *(_QWORD *)(v31 + 8 * v30) = v32;
      }
      *((_DWORD *)v26 + 9) = v30 + 1;
    }
    v33 = v52;
    v52 = 0;
    if (v33)
    {
      if (*v33 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v33;
    }
    v34 = v48;
    v48 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v28);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
LABEL_46:
  WTF::JSONImpl::Value::toJSONString(v51);
  v36 = v49;
  v49 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v35);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = v50;
  v50 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  result = v51;
  v51 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

unint64_t WebCore::determineHotSpot(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  BOOL v15;

  v4 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, 0);
  LODWORD(v6) = 0;
  if (v4 <= 0.0)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    if (v5 > 0.0)
    {
      v8 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, 0);
      if (v8 > -2147500000.0)
        v10 = (int)v8;
      else
        v10 = 0x80000000;
      if (v8 < 2147500000.0)
        v11 = v10;
      else
        v11 = 0x7FFFFFFF;
      if (v9 >= 2147500000.0)
      {
        v12 = 0x7FFFFFFF;
      }
      else if (v9 <= -2147500000.0)
      {
        v12 = 0x80000000;
      }
      else
      {
        v12 = (int)v9;
      }
      if ((*(_DWORD *)a2 & 0x80000000) != 0
        || v11 <= *(_DWORD *)a2
        || (v13 = *(_DWORD *)(a2 + 4), v13 < 0)
        || v12 <= v13)
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
        v7 = HIDWORD(v6);
        if (v14)
          v15 = (v6 & 0x8000000080000000) == 0;
        else
          v15 = 0;
        if (!v15 || v11 <= (int)v6 || v12 <= SHIDWORD(v6))
        {
          LODWORD(v6) = 0;
          LODWORD(v7) = 0;
        }
      }
      else
      {
        v6 = *(_QWORD *)a2;
        v7 = HIDWORD(*(_QWORD *)a2);
      }
    }
  }
  return v6 | ((unint64_t)v7 << 32);
}

char *WebCore::Cursor::fromType(int a1)
{
  char *result;
  char *v2;

  switch(a1)
  {
    case 2:
      result = &WebCore::crossCursor(void)::c;
      {
        WebCore::crossCursor(void)::c = 2;
        qword_1EE2F7FE0 = 0;
        unk_1EE2F7FE8 = 0;
        qword_1EE2F7FD8 = 0;
        goto LABEL_96;
      }
      break;
    case 3:
      result = &WebCore::handCursor(void)::c;
      {
        WebCore::handCursor(void)::c = 3;
        xmmword_1ECE90BC0 = 0uLL;
        qword_1ECE90BB8 = 0;
        goto LABEL_96;
      }
      break;
    case 4:
      result = &WebCore::iBeamCursor(void)::c;
      {
        WebCore::iBeamCursor(void)::c = 4;
        qword_1ECE90BE8 = 0;
        unk_1ECE90BF0 = 0;
        qword_1ECE90BE0 = 0;
        goto LABEL_96;
      }
      break;
    case 5:
      result = &WebCore::waitCursor(void)::c;
      {
        WebCore::waitCursor(void)::c = 5;
        qword_1EE2F81E8 = 0;
        unk_1EE2F81F0 = 0;
        qword_1EE2F81E0 = 0;
        goto LABEL_96;
      }
      break;
    case 6:
      result = &WebCore::helpCursor(void)::c;
      {
        WebCore::helpCursor(void)::c = 6;
        qword_1EE2F8210 = 0;
        unk_1EE2F8218 = 0;
        qword_1EE2F8208 = 0;
        goto LABEL_96;
      }
      break;
    case 7:
      result = &WebCore::eastResizeCursor(void)::c;
      {
        WebCore::eastResizeCursor(void)::c = 7;
        qword_1EE2F8238 = 0;
        unk_1EE2F8240 = 0;
        qword_1EE2F8230 = 0;
        goto LABEL_96;
      }
      break;
    case 8:
      result = &WebCore::northResizeCursor(void)::c;
      {
        WebCore::northResizeCursor(void)::c = 8;
        qword_1EE2F8260 = 0;
        unk_1EE2F8268 = 0;
        qword_1EE2F8258 = 0;
        goto LABEL_96;
      }
      break;
    case 9:
      result = &WebCore::northEastResizeCursor(void)::c;
      {
        WebCore::northEastResizeCursor(void)::c = 9;
        qword_1EE2F8288 = 0;
        unk_1EE2F8290 = 0;
        qword_1EE2F8280 = 0;
        goto LABEL_96;
      }
      break;
    case 10:
      result = &WebCore::northWestResizeCursor(void)::c;
      {
        WebCore::northWestResizeCursor(void)::c = 10;
        qword_1EE2F82B0 = 0;
        unk_1EE2F82B8 = 0;
        qword_1EE2F82A8 = 0;
        goto LABEL_96;
      }
      break;
    case 11:
      result = &WebCore::southResizeCursor(void)::c;
      {
        WebCore::southResizeCursor(void)::c = 11;
        qword_1EE2F82D8 = 0;
        unk_1EE2F82E0 = 0;
        qword_1EE2F82D0 = 0;
        goto LABEL_96;
      }
      break;
    case 12:
      result = &WebCore::southEastResizeCursor(void)::c;
      {
        WebCore::southEastResizeCursor(void)::c = 12;
        xmmword_1EE2F8300 = 0uLL;
        qword_1EE2F82F8 = 0;
        goto LABEL_96;
      }
      break;
    case 13:
      result = &WebCore::southWestResizeCursor(void)::c;
      {
        WebCore::southWestResizeCursor(void)::c = 13;
        qword_1EE2F8328 = 0;
        unk_1EE2F8330 = 0;
        qword_1EE2F8320 = 0;
        goto LABEL_96;
      }
      break;
    case 14:
      result = &WebCore::westResizeCursor(void)::c;
      {
        WebCore::westResizeCursor(void)::c = 14;
        qword_1EE2F8350 = 0;
        unk_1EE2F8358 = 0;
        qword_1EE2F8348 = 0;
        goto LABEL_96;
      }
      break;
    case 15:
      result = &WebCore::northSouthResizeCursor(void)::c;
      {
        WebCore::northSouthResizeCursor(void)::c = 15;
        qword_1EE2F8378 = 0;
        unk_1EE2F8380 = 0;
        qword_1EE2F8370 = 0;
        goto LABEL_96;
      }
      break;
    case 16:
      result = &WebCore::eastWestResizeCursor(void)::c;
      {
        WebCore::eastWestResizeCursor(void)::c = 16;
        qword_1EE2F83A0 = 0;
        unk_1EE2F83A8 = 0;
        qword_1EE2F8398 = 0;
        goto LABEL_96;
      }
      break;
    case 17:
      result = &WebCore::northEastSouthWestResizeCursor(void)::c;
      {
        WebCore::northEastSouthWestResizeCursor(void)::c = 17;
        qword_1EE2F83C8 = 0;
        unk_1EE2F83D0 = 0;
        qword_1EE2F83C0 = 0;
        goto LABEL_96;
      }
      break;
    case 18:
      result = &WebCore::northWestSouthEastResizeCursor(void)::c;
      {
        WebCore::northWestSouthEastResizeCursor(void)::c = 18;
        qword_1EE2F83F0 = 0;
        unk_1EE2F83F8 = 0;
        qword_1EE2F83E8 = 0;
        goto LABEL_96;
      }
      break;
    case 19:
      result = &WebCore::columnResizeCursor(void)::c;
      {
        WebCore::columnResizeCursor(void)::c = 19;
        xmmword_1EE2F8418 = 0uLL;
        qword_1EE2F8410 = 0;
        goto LABEL_96;
      }
      break;
    case 20:
      result = &WebCore::rowResizeCursor(void)::c;
      {
        WebCore::rowResizeCursor(void)::c = 20;
        xmmword_1EE2F8440 = 0uLL;
        qword_1EE2F8438 = 0;
        goto LABEL_96;
      }
      break;
    case 21:
      v2 = &byte_1ECE839C9;
      if ((byte_1ECE839C9 & 1) == 0)
      {
        byte_1ECE839F0 = 21;
        result = &byte_1ECE839F0;
        unk_1ECE839F8 = 0;
        unk_1ECE83A08 = 0;
        unk_1ECE83A00 = 0;
        goto LABEL_96;
      }
      result = &byte_1ECE839F0;
      break;
    case 22:
      v2 = &byte_1ECE839CA;
      if ((byte_1ECE839CA & 1) == 0)
      {
        byte_1ECE83A10 = 22;
        result = &byte_1ECE83A10;
        unk_1ECE83A18 = 0;
        unk_1ECE83A28 = 0;
        unk_1ECE83A20 = 0;
        goto LABEL_96;
      }
      result = &byte_1ECE83A10;
      break;
    case 23:
      v2 = &byte_1ECE839CB;
      if ((byte_1ECE839CB & 1) == 0)
      {
        byte_1ECE83A30 = 23;
        result = &byte_1ECE83A30;
        unk_1ECE83A38 = 0;
        unk_1ECE83A48 = 0;
        unk_1ECE83A40 = 0;
        goto LABEL_96;
      }
      result = &byte_1ECE83A30;
      break;
    case 24:
      v2 = &byte_1ECE839CC;
      if ((byte_1ECE839CC & 1) == 0)
      {
        byte_1ECE83A50 = 24;
        result = &byte_1ECE83A50;
        unk_1ECE83A58 = 0;
        unk_1ECE83A68 = 0;
        unk_1ECE83A60 = 0;
        goto LABEL_96;
      }
      result = &byte_1ECE83A50;
      break;
    case 25:
      v2 = &byte_1ECE839CD;
      if ((byte_1ECE839CD & 1) == 0)
      {
        byte_1ECE83A70 = 25;
        result = &byte_1ECE83A70;
        unk_1ECE83A78 = 0;
        unk_1ECE83A88 = 0;
        unk_1ECE83A80 = 0;
        goto LABEL_96;
      }
      result = &byte_1ECE83A70;
      break;
    case 26:
      v2 = &byte_1ECE839CE;
      if ((byte_1ECE839CE & 1) == 0)
      {
        byte_1ECE83A90 = 26;
        result = &byte_1ECE83A90;
        unk_1ECE83A98 = 0;
        unk_1ECE83AA8 = 0;
        unk_1ECE83AA0 = 0;
        goto LABEL_96;
      }
      result = &byte_1ECE83A90;
      break;
    case 27:
      v2 = &byte_1ECE839CF;
      if ((byte_1ECE839CF & 1) == 0)
      {
        byte_1ECE83AB0 = 27;
        result = &byte_1ECE83AB0;
        unk_1ECE83AB8 = 0;
        unk_1ECE83AC8 = 0;
        unk_1ECE83AC0 = 0;
        goto LABEL_96;
      }
      result = &byte_1ECE83AB0;
      break;
    case 28:
      v2 = &byte_1ECE839D0;
      result = &byte_1ECE83AD0;
      if ((byte_1ECE839D0 & 1) == 0)
      {
        byte_1ECE83AD0 = 28;
        qword_1ECE83AE0 = 0;
        unk_1ECE83AE8 = 0;
        qword_1ECE83AD8 = 0;
        goto LABEL_96;
      }
      break;
    case 29:
      v2 = &byte_1ECE839D1;
      result = &byte_1ECE83AF0;
      if ((byte_1ECE839D1 & 1) == 0)
      {
        byte_1ECE83AF0 = 29;
        qword_1ECE83B00 = 0;
        unk_1ECE83B08 = 0;
        qword_1ECE83AF8 = 0;
        goto LABEL_96;
      }
      break;
    case 30:
      result = &WebCore::moveCursor(void)::c;
      {
        WebCore::moveCursor(void)::c = 30;
        qword_1EE2F8008 = 0;
        unk_1EE2F8010 = 0;
        qword_1EE2F8000 = 0;
        goto LABEL_96;
      }
      break;
    case 31:
      result = &WebCore::verticalTextCursor(void)::c;
      {
        WebCore::verticalTextCursor(void)::c = 31;
        qword_1EE2F8030 = 0;
        unk_1EE2F8038 = 0;
        qword_1EE2F8028 = 0;
        goto LABEL_96;
      }
      break;
    case 32:
      result = &WebCore::cellCursor(void)::c;
      {
        WebCore::cellCursor(void)::c = 32;
        qword_1EE2F8058 = 0;
        unk_1EE2F8060 = 0;
        qword_1EE2F8050 = 0;
        goto LABEL_96;
      }
      break;
    case 33:
      result = &WebCore::contextMenuCursor(void)::c;
      {
        WebCore::contextMenuCursor(void)::c = 33;
        qword_1EE2F8080 = 0;
        unk_1EE2F8088 = 0;
        qword_1EE2F8078 = 0;
        goto LABEL_96;
      }
      break;
    case 34:
      result = &WebCore::aliasCursor(void)::c;
      {
        WebCore::aliasCursor(void)::c = 34;
        qword_1EE2F80A8 = 0;
        unk_1EE2F80B0 = 0;
        qword_1EE2F80A0 = 0;
        goto LABEL_96;
      }
      break;
    case 35:
      result = &WebCore::progressCursor(void)::c;
      {
        WebCore::progressCursor(void)::c = 35;
        qword_1EE2F8170 = 0;
        unk_1EE2F8178 = 0;
        qword_1EE2F8168 = 0;
        goto LABEL_96;
      }
      break;
    case 36:
      result = &WebCore::noDropCursor(void)::c;
      {
        WebCore::noDropCursor(void)::c = 36;
        qword_1EE2F8198 = 0;
        unk_1EE2F81A0 = 0;
        qword_1EE2F8190 = 0;
        goto LABEL_96;
      }
      break;
    case 37:
      result = &WebCore::copyCursor(void)::c;
      {
        WebCore::copyCursor(void)::c = 37;
        qword_1EE2F8120 = 0;
        unk_1EE2F8128 = 0;
        qword_1EE2F8118 = 0;
        goto LABEL_96;
      }
      break;
    case 38:
      result = &WebCore::noneCursor(void)::c;
      {
        WebCore::noneCursor(void)::c = 38;
        xmmword_1EE2F8148 = 0uLL;
        qword_1EE2F8140 = 0;
        goto LABEL_96;
      }
      break;
    case 39:
      result = &WebCore::notAllowedCursor(void)::c;
      {
        WebCore::notAllowedCursor(void)::c = 39;
        qword_1EE2F81C0 = 0;
        unk_1EE2F81C8 = 0;
        qword_1EE2F81B8 = 0;
        goto LABEL_96;
      }
      break;
    case 40:
      result = &WebCore::zoomInCursor(void)::c;
      {
        WebCore::zoomInCursor(void)::c = 40;
        qword_1EE2F80D0 = 0;
        unk_1EE2F80D8 = 0;
        qword_1EE2F80C8 = 0;
        goto LABEL_96;
      }
      break;
    case 41:
      result = &WebCore::zoomOutCursor(void)::c;
      {
        WebCore::zoomOutCursor(void)::c = 41;
        qword_1EE2F80F8 = 0;
        unk_1EE2F8100 = 0;
        qword_1EE2F80F0 = 0;
        goto LABEL_96;
      }
      break;
    case 42:
      result = &WebCore::grabCursor(void)::c;
      {
        WebCore::grabCursor(void)::c = 42;
        qword_1EE2F8468 = 0;
        unk_1EE2F8470 = 0;
        qword_1EE2F8460 = 0;
        goto LABEL_96;
      }
      break;
    case 43:
      result = &WebCore::grabbingCursor(void)::c;
      {
        WebCore::grabbingCursor(void)::c = 43;
        qword_1EE2F8490 = 0;
        unk_1EE2F8498 = 0;
        qword_1EE2F8488 = 0;
        goto LABEL_96;
      }
      break;
    default:
      result = &WebCore::pointerCursor(void)::c;
      {
        WebCore::pointerCursor(void)::c = 1;
        xmmword_1EE2F7FC0 = 0uLL;
        qword_1EE2F7FB8 = 0;
LABEL_96:
        *v2 = 1;
      }
      break;
  }
  return result;
}

char *WebCore::pointerCursor(WebCore *this)
{
  {
    WebCore::pointerCursor(void)::c = 1;
    xmmword_1EE2F7FC0 = 0uLL;
    qword_1EE2F7FB8 = 0;
  }
  return &WebCore::pointerCursor(void)::c;
}

char *WebCore::handCursor(WebCore *this)
{
  {
    WebCore::handCursor(void)::c = 3;
    xmmword_1ECE90BC0 = 0uLL;
    qword_1ECE90BB8 = 0;
  }
  return &WebCore::handCursor(void)::c;
}

char *WebCore::iBeamCursor(WebCore *this)
{
  {
    WebCore::iBeamCursor(void)::c = 4;
    qword_1ECE90BE8 = 0;
    unk_1ECE90BF0 = 0;
    qword_1ECE90BE0 = 0;
  }
  return &WebCore::iBeamCursor(void)::c;
}

uint64_t WebCore::Cursor::Cursor(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  float v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;
  BOOL v17;

  *(_BYTE *)a1 = 44;
  if (a2)
    ++a2[2];
  *(_QWORD *)(a1 + 8) = a2;
  v6 = (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0);
  LODWORD(v8) = 0;
  if (v6 <= 0.0)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    LODWORD(v9) = 0;
    if (v7 > 0.0)
    {
      v10 = (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0);
      if (v10 > -2147500000.0)
        v12 = (int)v10;
      else
        v12 = 0x80000000;
      if (v10 < 2147500000.0)
        v13 = v12;
      else
        v13 = 0x7FFFFFFF;
      if (v11 >= 2147500000.0)
      {
        v14 = 0x7FFFFFFF;
      }
      else if (v11 <= -2147500000.0)
      {
        v14 = 0x80000000;
      }
      else
      {
        v14 = (int)v11;
      }
      if ((*(_DWORD *)a3 & 0x80000000) != 0
        || v13 <= *(_DWORD *)a3
        || (v15 = *(_DWORD *)(a3 + 4), v15 < 0)
        || v14 <= v15)
      {
        v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 192))(a2);
        v9 = HIDWORD(v8);
        if (v16)
          v17 = (v8 & 0x8000000080000000) == 0;
        else
          v17 = 0;
        if (!v17 || v13 <= (int)v8 || v14 <= SHIDWORD(v8))
        {
          LODWORD(v8) = 0;
          LODWORD(v9) = 0;
        }
      }
      else
      {
        v8 = *(_QWORD *)a3;
        v9 = HIDWORD(*(_QWORD *)a3);
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v8 | ((unint64_t)v9 << 32);
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

{
  float v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;
  BOOL v17;

  *(_BYTE *)a1 = 44;
  if (a2)
    ++a2[2];
  *(_QWORD *)(a1 + 8) = a2;
  v6 = (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0);
  LODWORD(v8) = 0;
  if (v6 <= 0.0)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    LODWORD(v9) = 0;
    if (v7 > 0.0)
    {
      v10 = (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0);
      if (v10 > -2147500000.0)
        v12 = (int)v10;
      else
        v12 = 0x80000000;
      if (v10 < 2147500000.0)
        v13 = v12;
      else
        v13 = 0x7FFFFFFF;
      if (v11 >= 2147500000.0)
      {
        v14 = 0x7FFFFFFF;
      }
      else if (v11 <= -2147500000.0)
      {
        v14 = 0x80000000;
      }
      else
      {
        v14 = (int)v11;
      }
      if ((*(_DWORD *)a3 & 0x80000000) != 0
        || v13 <= *(_DWORD *)a3
        || (v15 = *(_DWORD *)(a3 + 4), v15 < 0)
        || v14 <= v15)
      {
        v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 192))(a2);
        v9 = HIDWORD(v8);
        if (v16)
          v17 = (v8 & 0x8000000080000000) == 0;
        else
          v17 = 0;
        if (!v17 || v13 <= (int)v8 || v14 <= SHIDWORD(v8))
        {
          LODWORD(v8) = 0;
          LODWORD(v9) = 0;
        }
      }
      else
      {
        v8 = *(_QWORD *)a3;
        v9 = HIDWORD(*(_QWORD *)a3);
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v8 | ((unint64_t)v9 << 32);
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t WebCore::Cursor::platformCursor(WebCore::Cursor *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t WebCore::CaretAnimator::setBlinkingSuspended(uint64_t this, char a2)
{
  *(_BYTE *)(this + 89) = a2;
  return this;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12AudioDecoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12AudioDecoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12AudioEncoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12AudioEncoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned __int16 *WebCore::DateComponents::fromParsingMonth@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  __int128 v8;
  int v9;
  char *v10;
  unint64_t v11;
  int v12;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  __int128 v20;
  __int128 v21;
  int v22;
  unsigned __int16 *v23;
  uint64_t v24;

  if ((_DWORD)a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      v4 = result;
      v5 = a2;
      while (*(unsigned __int8 *)v4 - 48 <= 9)
      {
        v4 = (unsigned __int16 *)((char *)v4 + 1);
        if (!--v5)
        {
          LODWORD(v4) = (_DWORD)result + a2;
          break;
        }
      }
      v6 = (_DWORD)v4 - (_DWORD)result;
      if (((_DWORD)v4 - (_DWORD)result) >= 4 && a2 >= (unint64_t)v6)
      {
        v9 = 0;
        v10 = (char *)result + ((_DWORD)v4 + ~(_DWORD)result);
        v11 = a2 + 1;
        do
        {
          if (!--v11)
          {
            __break(1u);
            return result;
          }
          v12 = *(unsigned __int8 *)result;
          if ((v12 - 48) > 9 || v9 > (int)((-2147483601 - v12) / 0xAu))
            goto LABEL_8;
          v9 = v12 + 10 * v9 - 48;
          result = (unsigned __int16 *)((char *)result + 1);
          --v6;
        }
        while (v6);
        if ((v9 - 275761) >= 0xFFFBCAD0 && v11 != 1 && v11 >= 4 && *(_BYTE *)result == 45)
        {
          v14 = v10[2];
          if ((v14 - 48) <= 9)
          {
            v15 = v10[3];
            if ((v15 - 48) <= 9)
            {
              v16 = v15 + 10 * v14;
              if ((v16 - 541) >= 0xFFFFFFF4)
              {
                v17 = v16 - 528;
                v18 = v9 >= 0x43530 && v17 >= 0xA;
                v19 = !v18;
                if (v11 == 4 && v19)
                {
                  *(_QWORD *)a3 = 0;
                  *(_QWORD *)(a3 + 8) = 0;
                  *(_DWORD *)(a3 + 16) = 0;
                  *(_DWORD *)(a3 + 20) = v17 - 1;
                  *(_DWORD *)(a3 + 24) = v9;
                  *(_DWORD *)(a3 + 28) = 0;
                  v7 = 1;
                  *(_BYTE *)(a3 + 32) = 3;
                  goto LABEL_9;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v23 = result;
      v24 = a2;
      LOBYTE(v22) = 0;
      v20 = 0u;
      v21 = 0u;
      result = (unsigned __int16 *)WebCore::DateComponents::parseMonth<char16_t>((uint64_t)&v20, &v23);
      if ((_DWORD)result && !v24)
      {
        v8 = v21;
        *(_OWORD *)a3 = v20;
        *(_OWORD *)(a3 + 16) = v8;
        *(_DWORD *)(a3 + 32) = v22;
        v7 = 1;
        goto LABEL_9;
      }
    }
LABEL_8:
    v7 = 0;
    *(_BYTE *)a3 = 0;
LABEL_9:
    *(_BYTE *)(a3 + 36) = v7;
    return result;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 36) = 0;
  return result;
}

unsigned __int8 *WebCore::DateComponents::fromParsingDateTimeLocal@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  int v5;
  __int128 v6;
  int v7;
  __int128 v8;
  __int128 v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if ((_DWORD)a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      v11 = result;
      v12 = a2;
      LOBYTE(v10) = 0;
      v8 = 0u;
      v9 = 0u;
      result = (unsigned __int8 *)WebCore::DateComponents::parseDate<unsigned char>((uint64_t)&v8, (uint64_t)&v11);
      if (!(_DWORD)result)
        goto LABEL_4;
      if (!v12)
        goto LABEL_4;
      v7 = *v11;
      if (v7 != 84 && v7 != 32)
        goto LABEL_4;
      ++v11;
      --v12;
      result = (unsigned __int8 *)WebCore::DateComponents::parseTime<unsigned char>((uint64_t)&v8, &v11);
      if (!(_DWORD)result)
        goto LABEL_4;
    }
    else
    {
      v11 = result;
      v12 = a2;
      LOBYTE(v10) = 0;
      v8 = 0u;
      v9 = 0u;
      result = (unsigned __int8 *)WebCore::DateComponents::parseDate<char16_t>((uint64_t)&v8, (uint64_t)&v11);
      if (!(_DWORD)result)
        goto LABEL_4;
      if (!v12)
        goto LABEL_4;
      v5 = *(unsigned __int16 *)v11;
      if (v5 != 84 && v5 != 32)
        goto LABEL_4;
      v11 += 2;
      --v12;
      result = (unsigned __int8 *)WebCore::DateComponents::parseTime<char16_t>((uint64_t)&v8, (unsigned __int16 **)&v11);
      if (!(_DWORD)result)
        goto LABEL_4;
    }
    if (SDWORD2(v9) >= 1
      && (DWORD2(v9) < 0x43530
       || SDWORD1(v9) < 8
       || (int)v9 < 13
       || (_DWORD)v9 == 13 && !(DWORD2(v8) | HIDWORD(v8) | DWORD1(v8) | v8)))
    {
      LOBYTE(v10) = 2;
      if (!v12)
      {
        v6 = v9;
        *(_OWORD *)a3 = v8;
        *(_OWORD *)(a3 + 16) = v6;
        *(_DWORD *)(a3 + 32) = v10;
        v4 = 1;
        goto LABEL_5;
      }
    }
LABEL_4:
    v4 = 0;
    *(_BYTE *)a3 = 0;
LABEL_5:
    *(_BYTE *)(a3 + 36) = v4;
    return result;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 36) = 0;
  return result;
}

uint64_t WebCore::DateComponents::fromMillisecondsSinceEpochForDateTimeLocal@<X0>(double a1@<D0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  long double v7;
  long double v8;
  uint64_t result;
  __int128 v10;
  char v11;
  __int128 v12;
  __int128 v13;
  int v14;

  v13 = 0uLL;
  LOBYTE(v14) = 0;
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_12;
  v4 = round(a1);
  v5 = fmod(v4, 86400000.0);
  v6 = v5;
  if (v5 < 0.0)
    v6 = v5 + 86400000.0;
  LODWORD(v12) = (int)fmod(v6, 1000.0);
  v7 = floor(v6 / 1000.0);
  DWORD1(v12) = (int)fmod(v7, 60.0);
  v8 = floor(v7 / 60.0);
  DWORD2(v12) = (int)fmod(v8, 60.0);
  HIDWORD(v12) = (int)(v8 / 60.0);
  result = WebCore::DateComponents::setMillisecondsSinceEpochForDateInternal((WebCore::DateComponents *)&v12, v4);
  if (SDWORD2(v13) >= 1
    && (DWORD2(v13) < 0x43530
     || SDWORD1(v13) < 8
     || (int)v13 < 13
     || (_DWORD)v13 == 13 && !(DWORD2(v12) | HIDWORD(v12) | DWORD1(v12) | v12)))
  {
    LOBYTE(v14) = 2;
    v10 = v13;
    *(_OWORD *)a2 = v12;
    *(_OWORD *)(a2 + 16) = v10;
    *(_DWORD *)(a2 + 32) = v14;
    v11 = 1;
  }
  else
  {
LABEL_12:
    v11 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 36) = v11;
  return result;
}

void WebCore::DateComponents::fromMillisecondsSinceMidnight(double a1@<D0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  int v6;
  long double v7;
  int v8;
  long double v9;
  int v10;
  char v11;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v11 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v4 = fmod(round(a1), 86400000.0);
    v5 = v4;
    if (v4 < 0.0)
      v5 = v4 + 86400000.0;
    v6 = (int)fmod(v5, 1000.0);
    v7 = floor(v5 / 1000.0);
    v8 = (int)fmod(v7, 60.0);
    v9 = floor(v7 / 60.0);
    v10 = (int)fmod(v9, 60.0);
    *(_DWORD *)a2 = v6;
    *(_DWORD *)(a2 + 4) = v8;
    *(_DWORD *)(a2 + 8) = v10;
    *(_DWORD *)(a2 + 12) = (int)(v9 / 60.0);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 4;
    v11 = 1;
  }
  *(_BYTE *)(a2 + 36) = v11;
}

uint64_t WebCore::DateComponents::setMillisecondsSinceEpochForDateInternal(WebCore::DateComponents *this, double a2)
{
  int v2;
  double v3;
  double v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  BOOL v28;

  v2 = (int)(floor(a2 / 3.1556952e10) + 1970.0);
  v3 = 365.0;
  v4 = (floor(((double)v2 + -1.0) / 400.0)
      + -4.0
      + floor(((double)v2 + -1.0) * 0.25)
      + -492.0
      + ((double)v2 + -1970.0) * 365.0
      - (floor(((double)v2 + -1.0) / 100.0)
       + -19.0))
     * 86400000.0;
  if (v4 > a2)
  {
    --v2;
  }
  else
  {
    if ((v2 & 3) == 0)
    {
      HIDWORD(v27) = -1030792151 * v2 + 85899344;
      LODWORD(v27) = HIDWORD(v27);
      v26 = v27 >> 4;
      LODWORD(v27) = HIDWORD(v27);
      v28 = (v27 >> 2) <= 0x28F5C28 && v26 >= 0xA3D70B;
      v3 = 365.0;
      if (!v28)
        v3 = 366.0;
    }
    if (v4 + v3 * 86400000.0 <= a2)
      ++v2;
  }
  *((_DWORD *)this + 6) = v2;
  v5 = (int)(floor(a2 / 86400000.0)
           - (floor(((double)v2 + -1.0) / 400.0)
            + -4.0
            + floor(((double)v2 + -1.0) * 0.25)
            + -492.0
            + ((double)v2 + -1970.0) * 365.0
            - (floor(((double)v2 + -1.0) / 100.0)
             + -19.0)));
  HIDWORD(v7) = -1030792151 * v2 + 85899344;
  LODWORD(v7) = HIDWORD(v7);
  v6 = v7 >> 4;
  LODWORD(v7) = HIDWORD(v7);
  if ((v7 >> 2) < 0x28F5C29)
    v8 = 59;
  else
    v8 = 60;
  if (v6 < 0xA3D70B)
    v8 = 60;
  if ((v2 & 3) != 0)
    v8 = 59;
  if ((int)v5 >= 31)
  {
    if (v8 <= v5)
    {
      if (v8 + 31 <= v5)
      {
        if (v8 + 61 <= v5)
        {
          if (v8 + 92 <= v5)
          {
            if (v8 + 122 <= v5)
            {
              if (v8 + 153 <= v5)
              {
                if (v8 + 184 <= v5)
                {
                  if (v8 + 214 <= v5)
                  {
                    if (v8 + 245 <= v5)
                    {
                      if (v8 + 275 > v5)
                        v9 = 10;
                      else
                        v9 = 11;
                    }
                    else
                    {
                      v9 = 9;
                    }
                  }
                  else
                  {
                    v9 = 8;
                  }
                }
                else
                {
                  v9 = 7;
                }
              }
              else
              {
                v9 = 6;
              }
            }
            else
            {
              v9 = 5;
            }
          }
          else
          {
            v9 = 4;
          }
        }
        else
        {
          v9 = 3;
        }
      }
      else
      {
        v9 = 2;
      }
    }
    else
    {
      v9 = 1;
    }
  }
  else
  {
    v9 = 0;
  }
  *((_DWORD *)this + 5) = v9;
  v10 = 58;
  if ((v2 & 3) == 0)
  {
    v22 = -1030792151 * v2 + 85899344;
    HIDWORD(v24) = v22;
    LODWORD(v24) = v22;
    v23 = v24 >> 4;
    HIDWORD(v24) = v22;
    LODWORD(v24) = v22;
    if ((v24 >> 2) < 0x28F5C29)
      v25 = 58;
    else
      v25 = 59;
    if (v23 >= 0xA3D70B)
      v10 = v25;
    else
      v10 = 59;
  }
  if ((int)v5 > 30)
  {
    if (v10 >= v5)
    {
      v13 = 30;
    }
    else
    {
      v13 = v10 + 31;
      if (v10 + 31 >= v5)
      {
        v13 = v10;
      }
      else
      {
        v14 = v10 + 61;
        if (v10 + 61 < v5)
        {
          v15 = v10 + 92;
          v16 = v10 + 122;
          v17 = v10 + 153;
          v18 = v10 + 184;
          v19 = v10 + 214;
          v20 = v10 + 245;
          v21 = v10 + 275;
          if (v21 >= v5)
            v21 = v20;
          if (v20 >= v5)
            v21 = v19;
          if (v19 >= v5)
            v21 = v18;
          if (v18 >= v5)
            v21 = v17;
          if (v17 >= v5)
            v21 = v16;
          if (v16 >= v5)
            v21 = v15;
          if (v15 < v5)
            v13 = v21;
          else
            v13 = v14;
        }
      }
    }
    v11 = v5 - v13;
  }
  else
  {
    v11 = v5 + 1;
  }
  *((_DWORD *)this + 4) = v11;
  return 1;
}

uint64_t WTF::msToYear(WTF *this, double a2)
{
  uint64_t result;
  double v3;
  double v4;
  unsigned int v5;
  unint64_t v6;
  BOOL v7;

  result = (int)(floor(a2 / 3.1556952e10) + 1970.0);
  v3 = 365.0;
  v4 = (floor(((double)(int)result + -1.0) / 400.0)
      + -4.0
      + floor(((double)(int)result + -1.0) * 0.25)
      + -492.0
      + ((double)(int)result + -1970.0) * 365.0
      - (floor(((double)(int)result + -1.0) / 100.0)
       + -19.0))
     * 86400000.0;
  if (v4 > a2)
    return (result - 1);
  if ((result & 3) == 0)
  {
    HIDWORD(v6) = -1030792151 * result + 85899344;
    LODWORD(v6) = HIDWORD(v6);
    v5 = v6 >> 4;
    LODWORD(v6) = HIDWORD(v6);
    v7 = (v6 >> 2) <= 0x28F5C28 && v5 >= 0xA3D70B;
    v3 = 365.0;
    if (!v7)
      v3 = 366.0;
  }
  if (v4 + v3 * 86400000.0 <= a2)
    return (result + 1);
  return result;
}

uint64_t WTF::dayInYear(WTF *this, double a2)
{
  return (int)(floor(a2 / 86400000.0)
                           - (floor(((double)(int)this + -1.0) / 400.0)
                            + -4.0
                            + floor(((double)(int)this + -1.0) * 0.25)
                            + -492.0
                            + ((double)(int)this + -1970.0) * 365.0
                            - (floor(((double)(int)this + -1.0) / 100.0)
                             + -19.0)));
}

uint64_t WebCore::DateComponents::setMillisecondsSinceEpochForWeek(WebCore::DateComponents *this, double a2)
{
  uint64_t result;
  double v4;
  WTF *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  unint64_t v24;

  result = 0;
  *((_BYTE *)this + 32) = 0;
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v4 = round(a2);
    v5 = (WTF *)WTF::msToYear(0, v4);
    *((_DWORD *)this + 6) = (_DWORD)v5;
    if (((_DWORD)v5 - 275761) >= 0xFFFBCAD0)
    {
      v6 = v5;
      v7 = WTF::dayInYear(v5, v4);
      v8 = v6 - 1;
      v9 = (v6 - 1) % 0x64;
      v10 = (v6 - 1) / 0x190;
      v11 = (unsigned __int16)(v9 + v10 + 5 * ((v6 - 1) / 0x64) + (v9 >> 2) + 43) % 7u;
      if (v11 <= 4)
        v12 = 1;
      else
        v12 = 8;
      v13 = v12 - v11;
      v14 = __OFSUB__(v7, v13);
      v15 = v7 - v13;
      if (v15 < 0 != v14)
      {
        *((_DWORD *)this + 6) = v8;
        if (v6 >= 3)
        {
          v16 = (v6 - 2) % 0x64 + (v6 - 2) / 0x190 + 5 * ((v6 - 2) / 0x64) + (((v6 - 2) % 0x64) >> 2) + 43;
          v17 = 9363
              * (unsigned __int16)((v6 - 2) % 0x64
                                 + (v6 - 2) / 0x190
                                 + 5 * ((v6 - 2) / 0x64)
                                 + (((v6 - 2) % 0x64) >> 2)
                                 + 43);
          v18 = (unsigned __int16)(v16
                                 - 7 * ((((unsigned __int16)(v16 - HIWORD(v17)) >> 1) + HIWORD(v17)) >> 2));
          if (v18 == 4)
          {
            v19 = 53;
          }
          else if (v18 == 3)
          {
            v19 = 52;
            if ((v8 & 3) == 0)
            {
              v20 = v8 - 400 * v10;
              if (v9)
                v21 = 1;
              else
                v21 = v20 == 0;
              if (v21)
                v19 = 53;
              else
                v19 = 52;
            }
          }
          else
          {
            v19 = 52;
          }
          *((_DWORD *)this + 7) = v19;
          goto LABEL_37;
        }
      }
      else
      {
        *((_DWORD *)this + 7) = v15 / 7 + 1;
        if (v11 == 4)
        {
          v22 = 53;
        }
        else
        {
          v22 = 52;
          if (v11 == 3 && (v6 & 3) == 0)
          {
            HIDWORD(v24) = -1030792151 * v6;
            LODWORD(v24) = -1030792151 * v6;
            v23 = v24 >> 4;
            HIDWORD(v24) = -1030792151 * v6;
            LODWORD(v24) = -1030792151 * v6;
            if ((v24 >> 2) < 0x28F5C29 && v23 > 0xA3D70A)
              v22 = 52;
            else
              v22 = 53;
          }
        }
        if (v15 / 7 >= v22)
        {
          *((_DWORD *)this + 6) = v6 + 1;
          *((_DWORD *)this + 7) = 1;
          if (v6 <= 0x4352F)
          {
LABEL_37:
            *((_BYTE *)this + 32) = 5;
            return 1;
          }
        }
        else if (v6 != 275760 || v15 <= 258)
        {
          goto LABEL_37;
        }
      }
    }
    return 0;
  }
  return result;
}

double WebCore::DateComponents::millisecondsSinceEpoch(WebCore::DateComponents *this)
{
  int v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  _BOOL4 v8;
  double v9;
  unsigned int v10;
  int v11;
  double result;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  _BOOL4 v20;
  double v21;
  unsigned int v22;
  double v23;
  double v24;
  double v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  _BOOL4 v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unint64_t v38;
  _BOOL4 v39;
  double v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int v45;

  switch(*((_BYTE *)this + 32))
  {
    case 1:
      v1 = *((_DWORD *)this + 5);
      v2 = v1 / 12 + *((_DWORD *)this + 6);
      v3 = v1 % 12;
      v4 = v2 + (v3 >> 31);
      v5 = 1;
      HIDWORD(v7) = -1030792151 * v4 + 85899344;
      LODWORD(v7) = HIDWORD(v7);
      v6 = v7 >> 4;
      LODWORD(v7) = HIDWORD(v7);
      v8 = (v7 >> 2) > 0x28F5C28;
      if (v6 >= 0xA3D70B)
        v5 = v8;
      if ((v4 & 3) != 0)
        v5 = 0;
      v9 = floor(floor(((double)v4 + -1.0) / 400.0)+ -4.0+ floor(((double)v4 + -1.0) * 0.25)+ -492.0+ ((double)v4 + -1970.0) * 365.0- (floor(((double)v4 + -1.0) / 100.0)+ -19.0));
      v10 = v3 + 12;
      if (v3 >= 0)
        v10 = v3;
      v11 = *((_DWORD *)this + 4) + *(_DWORD *)(MEMORY[0x1E0CBF748] + 48 * v5 + 4 * v10) - 1;
      goto LABEL_34;
    case 2:
      v13 = *((_DWORD *)this + 5);
      v14 = v13 / 12 + *((_DWORD *)this + 6);
      v15 = v13 % 12;
      v16 = v14 + (v15 >> 31);
      v17 = 1;
      HIDWORD(v19) = -1030792151 * v16 + 85899344;
      LODWORD(v19) = HIDWORD(v19);
      v18 = v19 >> 4;
      LODWORD(v19) = HIDWORD(v19);
      v20 = (v19 >> 2) > 0x28F5C28;
      if (v18 >= 0xA3D70B)
        v17 = v20;
      if ((v16 & 3) != 0)
        v17 = 0;
      v21 = floor(floor(((double)v16 + -1.0) / 400.0)+ -4.0+ floor(((double)v16 + -1.0) * 0.25)+ -492.0+ ((double)v16 + -1970.0) * 365.0- (floor(((double)v16 + -1.0) / 100.0)+ -19.0));
      v22 = v15 + 12;
      if (v15 >= 0)
        v22 = v15;
      v23 = v21 + (double)(*((_DWORD *)this + 4) + *(_DWORD *)(MEMORY[0x1E0CBF748] + 48 * v17 + 4 * v22) - 1);
      v24 = (double)*(int *)this
          + ((double)*((int *)this + 1) + ((double)*((int *)this + 2) + (double)*((int *)this + 3) * 60.0) * 60.0)
          * 1000.0;
      v25 = 86400000.0;
      goto LABEL_25;
    case 3:
      v26 = *((_DWORD *)this + 5);
      v27 = v26 / 12 + *((_DWORD *)this + 6);
      v28 = v26 % 12;
      v29 = v27 + (v28 >> 31);
      v30 = 1;
      HIDWORD(v32) = -1030792151 * v29 + 85899344;
      LODWORD(v32) = HIDWORD(v32);
      v31 = v32 >> 4;
      LODWORD(v32) = HIDWORD(v32);
      v33 = (v32 >> 2) > 0x28F5C28;
      if (v31 >= 0xA3D70B)
        v30 = v33;
      if ((v29 & 3) != 0)
        v30 = 0;
      v9 = floor(floor(((double)v29 + -1.0) / 400.0)+ -4.0+ floor(((double)v29 + -1.0) * 0.25)+ -492.0+ ((double)v29 + -1970.0) * 365.0- (floor(((double)v29 + -1.0) / 100.0)+ -19.0));
      v34 = v28 + 12;
      if (v28 >= 0)
        v34 = v28;
      v11 = *(_DWORD *)(MEMORY[0x1E0CBF748] + 48 * v30 + 4 * v34);
      goto LABEL_34;
    case 4:
      v23 = (double)*((int *)this + 1) + ((double)*((int *)this + 2) + (double)*((int *)this + 3) * 60.0) * 60.0;
      v24 = (double)*(int *)this;
      v25 = 1000.0;
LABEL_25:
      result = v24 + v23 * v25;
      break;
    case 5:
      v35 = 1;
      v36 = *((_DWORD *)this + 6);
      HIDWORD(v38) = -1030792151 * v36 + 85899344;
      LODWORD(v38) = HIDWORD(v38);
      v37 = v38 >> 4;
      LODWORD(v38) = HIDWORD(v38);
      v39 = (v38 >> 2) > 0x28F5C28;
      if (v37 >= 0xA3D70B)
        v35 = v39;
      if ((v36 & 3) != 0)
        v35 = 0;
      v40 = floor(floor(((double)v36 + -1.0) / 400.0)+ -4.0+ floor(((double)v36 + -1.0) * 0.25)+ -492.0+ ((double)v36 + -1970.0) * 365.0- (floor(((double)v36 + -1.0) / 100.0)+ -19.0))+ (double)*(int *)(MEMORY[0x1E0CBF748] + 48 * v35);
      v41 = v36 - 1;
      v42 = 1374389535 * v41;
      v43 = HIDWORD(v42);
      v42 >>= 63;
      v44 = (v41
           - 100 * ((int)v42 + ((int)v43 >> 5))
           + (int)v42
           + ((int)v43 >> 7)
           + 5 * ((int)v42 + ((int)v43 >> 5))
           + ((char)(v41
                   - 100 * (v42 + ((int)v43 >> 5))
                   + (((char)(v41 - 100 * (v42 + ((int)v43 >> 5))) >> 13) & 3)) >> 2)
           + 43)
          % 7;
      if (v44 <= 4)
        v45 = 1;
      else
        v45 = 8;
      v9 = v40 + (double)(v45 - v44);
      v11 = 7 * *((_DWORD *)this + 7) - 7;
LABEL_34:
      result = (v9 + (double)v11) * 86400000.0;
      break;
    default:
      result = NAN;
      break;
  }
  return result;
}

uint64_t *WebCore::DateComponents::toStringForTime(uint64_t *result, int8x16_t *a2, int a3)
{
  signed int *v3;
  uint64_t *v4;
  signed int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  __int32 v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _WORD *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  _BYTE *v53;
  size_t v54;
  uint64_t v55;
  size_t v56;
  __int32 v57;
  __int32 v58;
  __int32 v59;
  __int32 v60;
  char *v61;
  char *v62;
  __int128 v63;
  char *v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  char *v68;
  char *v69;
  char *v70;
  __int16 v71;
  _WORD *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned __int128 *v89;
  unsigned __int128 *v90;
  unsigned __int128 v91;
  __int8 v92;
  uint64_t v93;
  __int32 v94;
  uint64_t v95;
  __int32 v96;
  uint64_t v97;
  __int32 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  int8x16x2_t v105;
  int8x16x2_t v106;
  int8x16x2_t v107;

  v3 = (signed int *)a2;
  v4 = result;
  v104[1] = *MEMORY[0x1E0C80C00];
  v5 = a2->i32[0];
  if (a2->i32[0])
    goto LABEL_2;
  if (a3)
  {
    if (a3 == 2)
    {
LABEL_2:
      v6 = a2->u32[2];
      v7 = a2->u32[3];
      v8 = a2->u32[1];
      v97 = 0x200000030;
      v98 = v7;
      v95 = 0x200000030;
      v96 = v6;
      v93 = 0x200000030;
      v94 = v8;
      if ((v7 & 0x80000000) != 0)
      {
        v77 = -(int)v7;
        v9 = 1;
        do
        {
          ++v9;
          v76 = v77 >= 0xA;
          v77 /= 0xAu;
        }
        while (v76);
      }
      else
      {
        v9 = 0;
        v10 = v7;
        do
        {
          ++v9;
          v11 = v10 > 9;
          v10 /= 0xAu;
        }
        while (v11);
      }
      if (v9 <= 2)
        v9 = 2;
      if ((v6 & 0x80000000) != 0)
      {
        v78 = -(int)v6;
        v12 = 1;
        do
        {
          ++v12;
          v76 = v78 >= 0xA;
          v78 /= 0xAu;
        }
        while (v76);
      }
      else
      {
        v12 = 0;
        v13 = v6;
        do
        {
          ++v12;
          v11 = v13 > 9;
          v13 /= 0xAu;
        }
        while (v11);
      }
      if (v12 <= 2)
        v12 = 2;
      if ((v8 & 0x80000000) != 0)
      {
        v79 = -(int)v8;
        v14 = 1;
        do
        {
          ++v14;
          v76 = v79 >= 0xA;
          v79 /= 0xAu;
        }
        while (v76);
      }
      else
      {
        v14 = 0;
        v15 = v8;
        do
        {
          ++v14;
          v11 = v15 > 9;
          v15 /= 0xAu;
        }
        while (v11);
      }
      if (v14 <= 2)
        v14 = 2;
      if ((v14 & 0x80000000) == 0)
      {
        v16 = __OFADD__(v14, 1);
        v17 = v14 + 1;
        if (!v16)
        {
          v16 = __OFADD__(v17, 1);
          v18 = v17 + 1;
          v19 = v16;
          if ((v12 & 0x80000000) == 0 && !v19)
          {
            v16 = __OFADD__(v12, v18);
            v20 = v12 + v18;
            if (!v16)
            {
              v16 = __OFADD__(v20, 1);
              v21 = v20 + 1;
              v22 = v16;
              if ((v9 & 0x80000000) == 0 && !v22)
              {
                v23 = v9 + v21;
                if (!__OFADD__(v9, v21))
                {
                  if (!(_DWORD)v23)
                  {
                    v24 = MEMORY[0x1E0CBEF70];
                    *MEMORY[0x1E0CBEF70] += 2;
                    goto LABEL_52;
                  }
                  if ((v23 & 0x80000000) == 0)
                  {
                    WTF::tryFastCompactMalloc((WTF *)(v23 + 20));
                    v24 = v103;
                    if (v103)
                    {
                      *(_DWORD *)v103 = 2;
                      *(_DWORD *)(v24 + 4) = v23;
                      *(_QWORD *)(v24 + 8) = v24 + 20;
                      *(_DWORD *)(v24 + 16) = 4;
                      v99 = (uint64_t)&v97;
                      v100 = v7;
                      WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(&v99, (_BYTE *)(v24 + 20));
                      v25 = v100;
                      if ((v100 & 0x80000000) != 0)
                      {
                        v80 = -(int)v100;
                        v26 = 1;
                        do
                        {
                          ++v26;
                          v76 = v80 >= 0xA;
                          v80 /= 0xAu;
                        }
                        while (v76);
                      }
                      else
                      {
                        v26 = 0;
                        do
                        {
                          ++v26;
                          v11 = v25 > 9;
                          v25 /= 0xAu;
                        }
                        while (v11);
                      }
                      LODWORD(v27) = *(_DWORD *)(v99 + 4);
                      if (v27 <= v26)
                        v27 = v26;
                      else
                        v27 = v27;
                      v28 = (_BYTE *)(v24 + 20 + v27);
                      *v28 = 58;
                      v29 = v28 + 1;
                      v101 = &v95;
                      v102 = v6;
                      WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(&v101, v29);
                      v30 = v102;
                      if ((v102 & 0x80000000) != 0)
                      {
                        v81 = -(int)v102;
                        v31 = 1;
                        do
                        {
                          ++v31;
                          v76 = v81 >= 0xA;
                          v81 /= 0xAu;
                        }
                        while (v76);
                      }
                      else
                      {
                        v31 = 0;
                        do
                        {
                          ++v31;
                          v11 = v30 > 9;
                          v30 /= 0xAu;
                        }
                        while (v11);
                      }
                      LODWORD(v32) = *((_DWORD *)v101 + 1);
                      if (v32 <= v31)
                        v32 = v31;
                      else
                        v32 = v32;
                      v33 = &v29[v32];
                      *v33 = 58;
                      v34 = v33 + 1;
                      v103 = (uint64_t)&v93;
                      v104[0] = v8;
                      result = (uint64_t *)WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(&v103, v34);
                      v35 = v104[0];
                      if ((v104[0] & 0x80000000) != 0)
                      {
                        v82 = -LODWORD(v104[0]);
                        v36 = 1;
                        do
                        {
                          ++v36;
                          v76 = v82 >= 0xA;
                          v82 /= 0xAu;
                        }
                        while (v76);
                      }
                      else
                      {
                        v36 = 0;
                        do
                        {
                          ++v36;
                          v11 = v35 > 9;
                          v35 /= 0xAu;
                        }
                        while (v11);
                      }
                      v37 = *(_DWORD *)(v103 + 4);
                      if (v37 <= v36)
                        v37 = v36;
                      v34[v37] = 46;
                      v5 = *v3;
LABEL_52:
                      v38 = v5 / 100;
                      if (v5 % 100)
                      {
                        *(_DWORD *)v24 += 2;
                        if (v5 % 10)
                        {
                          v103 = 0x300000030;
                          LODWORD(v104[0]) = v5;
                          v39 = *(_DWORD *)(v24 + 4);
                          if (v5 < 0)
                          {
                            v83 = -v5;
                            v40 = 1;
                            do
                            {
                              ++v40;
                              v76 = v83 >= 0xA;
                              v83 /= 0xAu;
                            }
                            while (v76);
                          }
                          else
                          {
                            v40 = 0;
                            v41 = v5;
                            do
                            {
                              ++v40;
                              v11 = v41 > 9;
                              v41 /= 0xAu;
                            }
                            while (v11);
                          }
                          if (v40 <= 3)
                            v40 = 3;
                          if (((v40 | v39) & 0x80000000) != 0 || __OFADD__(v39, v40))
                          {
                            *v4 = 0;
LABEL_181:
                            __break(0xC471u);
                            JUMPOUT(0x1960C1BA8);
                          }
                          result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>(v4, v39 + v40, (*(_DWORD *)(v24 + 16) >> 2) & 1, v24, (unsigned __int8 *)&v103, v5);
                          if (!*v4)
                            goto LABEL_181;
                          goto LABEL_128;
                        }
                        v103 = 0x200000030;
                        LODWORD(v104[0]) = v5 / 10;
                        v50 = *(_DWORD *)(v24 + 4);
                        if (v5 < -9)
                        {
                          v88 = v5 / -10;
                          v51 = 1;
                          do
                          {
                            ++v51;
                            v76 = v88 >= 0xA;
                            v88 /= 0xAu;
                          }
                          while (v76);
                        }
                        else
                        {
                          v51 = 0;
                          v52 = v5 / 10;
                          do
                          {
                            ++v51;
                            v11 = v52 > 9;
                            v52 /= 0xAu;
                          }
                          while (v11);
                        }
                        if (v51 <= 2)
                          v51 = 2;
                        if (((v51 | v50) & 0x80000000) == 0 && !__OFADD__(v50, v51))
                        {
                          result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>(v4, v50 + v51, (*(_DWORD *)(v24 + 16) >> 2) & 1, v24, (unsigned __int8 *)&v103, v5 / 10);
                          if (!*v4)
                            goto LABEL_183;
LABEL_128:
                          if (*(_DWORD *)v24 == 2)
                            result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)v24, (WTF::StringImpl *)a2);
                          else
                            *(_DWORD *)v24 -= 2;
                          if (*(_DWORD *)v24 == 2)
                            return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)v24, (WTF::StringImpl *)a2);
                          *(_DWORD *)v24 -= 2;
                          return result;
                        }
                        *v4 = 0;
LABEL_183:
                        __break(0xC471u);
                        JUMPOUT(0x1960C16C4);
                      }
                      v43 = *(_DWORD *)(v24 + 4);
                      *(_DWORD *)v24 += 2;
                      if (v5 < -99)
                      {
                        v84 = v5 / -100;
                        v44 = 1;
                        do
                        {
                          ++v44;
                          v76 = v84 >= 0xA;
                          v84 /= 0xAu;
                        }
                        while (v76);
                      }
                      else
                      {
                        v44 = 0;
                        v45 = v5 / 100;
                        do
                        {
                          ++v44;
                          v11 = v45 > 9;
                          v45 /= 0xAu;
                        }
                        while (v11);
                      }
                      if ((v44 | v43) < 0)
                        goto LABEL_179;
                      v46 = (v43 + v44);
                      if (__OFADD__(v43, v44))
                        goto LABEL_179;
                      if ((*(_BYTE *)(v24 + 16) & 4) != 0)
                      {
                        if ((_DWORD)v46)
                        {
                          if ((v46 & 0x80000000) != 0)
                            goto LABEL_179;
                          WTF::tryFastCompactMalloc((WTF *)(v46 + 20));
                          v47 = v103;
                          if (!v103)
                            goto LABEL_179;
                          v53 = (_BYTE *)(v103 + 20);
                          *(_DWORD *)v103 = 2;
                          *(_DWORD *)(v47 + 4) = v46;
                          *(_QWORD *)(v47 + 8) = v47 + 20;
                          *(_DWORD *)(v47 + 16) = 4;
                          a2 = *(int8x16_t **)(v24 + 8);
                          v54 = *(unsigned int *)(v24 + 4);
                          if ((*(_BYTE *)(v24 + 16) & 4) != 0)
                          {
                            if ((_DWORD)v54)
                            {
                              if ((_DWORD)v54 == 1)
                                *v53 = a2->i8[0];
                              else
                                memcpy((void *)(v47 + 20), a2, v54);
                            }
                          }
                          else
                          {
                            if (v54 < 0x10)
                            {
                              v89 = (unsigned __int128 *)(v47 + 20);
                            }
                            else
                            {
                              v89 = (unsigned __int128 *)&v53[v54 & 0xFFFFFFF0];
                              v90 = (unsigned __int128 *)(v47 + 20);
                              do
                              {
                                v91 = (unsigned __int128)vld2q_s8(a2->i8);
                                a2 += 2;
                                *v90++ = v91;
                              }
                              while (v90 != v89);
                            }
                            while (v89 != (unsigned __int128 *)&v53[v54])
                            {
                              v92 = a2->i8[0];
                              a2 = (int8x16_t *)((char *)a2 + 2);
                              *(_BYTE *)v89 = v92;
                              v89 = (unsigned __int128 *)((char *)v89 + 1);
                            }
                          }
                          result = (uint64_t *)&v53[*(unsigned int *)(v24 + 4)];
                          if (v5 <= -100)
                          {
                            v85 = 0;
                            v86 = v5 / -100;
                            do
                            {
                              *((_BYTE *)v104 + v85-- + 4) = (v86 % 0xA) | 0x30;
                              v11 = v86 > 9;
                              v86 /= 0xAu;
                            }
                            while (v11);
                            v87 = v85 + 12;
                            a2 = (int8x16_t *)((char *)&v103 + v85 + 12);
                            a2->i8[0] = 45;
                            if (v85 + 14 > 14)
                              goto LABEL_127;
                            if (v87 <= 12)
                              v87 = 12;
                            v56 = v87 - v85 - 11;
                          }
                          else
                          {
                            v55 = 0;
                            do
                            {
                              *((_BYTE *)v104 + v55-- + 4) = (v38 % 0xA) | 0x30;
                              v11 = v38 > 9;
                              v38 /= 0xAu;
                            }
                            while (v11);
                            if (v55 + 14 > 13)
                              goto LABEL_127;
                            a2 = (int8x16_t *)((char *)v104 + v55 + 5);
                            v56 = -v55;
                          }
                          result = (uint64_t *)memcpy(result, a2, v56);
LABEL_127:
                          *v4 = v47;
                          goto LABEL_128;
                        }
                      }
                      else if ((_DWORD)v46)
                      {
                        if (v46 <= 0x7FFFFFEF)
                        {
                          result = (uint64_t *)WTF::tryFastCompactMalloc((WTF *)(2 * v46 + 20));
                          v47 = v103;
                          if (v103)
                          {
                            v48 = (_WORD *)(v103 + 20);
                            *(_DWORD *)v103 = 2;
                            *(_DWORD *)(v47 + 4) = v46;
                            *(_QWORD *)(v47 + 8) = v47 + 20;
                            *(_DWORD *)(v47 + 16) = 0;
                            a2 = *(int8x16_t **)(v24 + 8);
                            v49 = *(unsigned int *)(v24 + 4);
                            if ((*(_BYTE *)(v24 + 16) & 4) != 0)
                            {
                              v61 = (char *)&v48[v49];
                              if (v49 >= 0x40)
                              {
                                v62 = (char *)&v48[v49 & 0xFFFFFFC0];
                                v63 = 0uLL;
                                v64 = (char *)(v47 + 20);
                                do
                                {
                                  v105.val[0] = *a2;
                                  v65 = a2[1];
                                  v106.val[0] = a2[2];
                                  v66 = a2[3];
                                  a2 += 4;
                                  v67 = v66;
                                  v106.val[1] = 0uLL;
                                  v107.val[0] = v65;
                                  v105.val[1] = 0uLL;
                                  v68 = v64;
                                  vst2q_s8(v68, v105);
                                  v68 += 32;
                                  v107.val[1] = 0uLL;
                                  vst2q_s8(v68, v107);
                                  v69 = v64 + 64;
                                  vst2q_s8(v69, v106);
                                  v70 = v64 + 96;
                                  vst2q_s8(v70, *(int8x16x2_t *)(&v63 - 1));
                                  v64 += 128;
                                }
                                while (v64 != v62);
                              }
                              else
                              {
                                v62 = (char *)(v47 + 20);
                              }
                              while (v62 != v61)
                              {
                                v71 = a2->u8[0];
                                a2 = (int8x16_t *)((char *)a2 + 1);
                                *(_WORD *)v62 = v71;
                                v62 += 2;
                              }
                            }
                            else if ((_DWORD)v49 == 1)
                            {
                              *v48 = a2->i16[0];
                            }
                            else if ((_DWORD)v49)
                            {
                              result = (uint64_t *)memcpy((void *)(v47 + 20), a2, 2 * v49);
                            }
                            v72 = &v48[*(unsigned int *)(v24 + 4)];
                            if (v5 > -100)
                            {
                              v75 = 0;
                              do
                              {
                                *((_BYTE *)v104 + v75-- + 4) = (v38 % 0xA) | 0x30;
                                v11 = v38 > 9;
                                v38 /= 0xAu;
                              }
                              while (v11);
                              if (v75 + 14 <= 13)
                              {
                                do
                                {
                                  *v72++ = *((unsigned __int8 *)v104 + v75 + 5);
                                  v76 = __CFADD__(v75++, 1);
                                }
                                while (!v76);
                              }
                            }
                            else
                            {
                              v73 = v5 / -100;
                              v74 = 12;
                              do
                              {
                                *((_BYTE *)&v104[-1] + v74--) = (v73 % 0xA) | 0x30;
                                v11 = v73 > 9;
                                v73 /= 0xAu;
                              }
                              while (v11);
                              *((_BYTE *)&v104[-1] + v74) = 45;
                              if (v74 + 2 <= 14)
                              {
                                do
                                {
                                  *v72++ = *((unsigned __int8 *)&v104[-1] + v74);
                                  v11 = v74++ < 12;
                                }
                                while (v11);
                              }
                            }
                            goto LABEL_127;
                          }
                        }
LABEL_179:
                        *v4 = 0;
                        __break(0xC471u);
                        JUMPOUT(0x1960C1B9CLL);
                      }
                      v47 = MEMORY[0x1E0CBEF70];
                      *MEMORY[0x1E0CBEF70] += 2;
                      goto LABEL_127;
                    }
                  }
                }
              }
            }
          }
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1960C1B90);
    }
    if (a3 == 1)
    {
      v42 = a2->i32[1];
      goto LABEL_102;
    }
  }
  else
  {
    v42 = a2->i32[1];
    if (v42)
    {
LABEL_102:
      v58 = a2->i32[2];
      v57 = a2->i32[3];
      v97 = 0x200000030;
      v98 = v57;
      v95 = 0x200000030;
      v96 = v58;
      v93 = 0x200000030;
      v94 = v42;
      v103 = (uint64_t)&v97;
      LODWORD(v104[0]) = v57;
      v101 = &v95;
      LODWORD(v102) = v58;
      v99 = (uint64_t)&v93;
      LODWORD(v100) = v42;
      result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>(result, (uint64_t)&v103, 58, (uint64_t)&v101, 58, &v99);
      if (*v4)
        return result;
      goto LABEL_183;
    }
  }
  v60 = a2->i32[2];
  v59 = a2->i32[3];
  v99 = 0x200000030;
  LODWORD(v100) = v59;
  v97 = 0x200000030;
  v98 = v60;
  v103 = (uint64_t)&v99;
  LODWORD(v104[0]) = v59;
  v101 = &v97;
  LODWORD(v102) = v60;
  result = (uint64_t *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>((uint64_t)result, (uint64_t)&v103, 58, (uint64_t)&v101);
  if (!*v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1960C171CLL);
  }
  return result;
}

uint64_t *WebCore::DateComponents::toString@<X0>(int8x16_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  __int32 v4;
  __int32 v5;
  int v6;
  uint64_t *result;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _WORD *v23;
  char *v24;
  unsigned int v25;
  unsigned int v26;
  size_t v27;
  __int32 v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  char v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  uint64_t *v52;
  char *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  __int16 v59;
  _WORD *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  size_t v75;
  char *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  _BYTE *v80;
  size_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  char *v85;
  _WORD *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  __int16 v91;
  _WORD *v92;
  uint64_t v93;
  _WORD *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  _WORD *v100;
  _WORD *v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  __int16 v106;
  _WORD *v107;
  uint64_t v108;
  _WORD *v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  _WORD *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  __int128 v119;
  int8x16_t v120;
  __int128 v121;
  __int128 v122;
  char *v123;
  char *v124;
  char *v125;
  __int16 v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t *v145;
  uint64_t *v146;
  unsigned __int128 v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  __int32 v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  _QWORD v161[2];
  int8x16x2_t v162;
  int8x16x2_t v163;
  int8x16x2_t v164;

  v161[1] = *MEMORY[0x1E0C80C00];
  switch(a1[2].i8[0])
  {
    case 1:
      v4 = a1[1].i32[2];
      v5 = a1[1].i32[0];
      v6 = a1[1].i32[1] + 1;
      v154 = 0x400000030;
      v155 = v4;
      v152 = 0x200000030;
      v153 = v6;
      v150 = 0x200000030;
      v151 = v5;
      v160 = &v154;
      LODWORD(v161[0]) = v4;
      v158 = &v152;
      LODWORD(v159) = v6;
      v156 = (uint64_t)&v150;
      LODWORD(v157) = v5;
      result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>(a3, (uint64_t)&v160, 45, (uint64_t)&v158, 45, &v156);
      if (!*a3)
      {
        __break(0xC471u);
        JUMPOUT(0x1960C1C98);
      }
      return result;
    case 2:
      v30 = a1[1].i32[1];
      v31 = a1[1].u32[2];
      v32 = a1[1].u32[0];
      v33 = (v30 + 1);
      result = WebCore::DateComponents::toStringForTime(&v149, a1, a2);
      v154 = 0x400000030;
      v155 = v31;
      v152 = 0x200000030;
      v153 = v30 + 1;
      v150 = 0x200000030;
      v151 = v32;
      if ((v31 & 0x80000000) != 0)
      {
        v133 = -(int)v31;
        v35 = 1;
        do
        {
          ++v35;
          v57 = v133 >= 0xA;
          v133 /= 0xAu;
        }
        while (v57);
      }
      else
      {
        v35 = 0;
        v36 = v31;
        do
        {
          ++v35;
          v12 = v36 > 9;
          v36 /= 0xAu;
        }
        while (v12);
      }
      v37 = v149;
      if (v35 <= 4)
        v35 = 4;
      if (v30 < -1)
      {
        v134 = ~v30;
        v38 = 1;
        do
        {
          ++v38;
          v57 = v134 >= 0xA;
          v134 /= 0xAu;
        }
        while (v57);
      }
      else
      {
        v38 = 0;
        v39 = v30 + 1;
        do
        {
          ++v38;
          v12 = v39 > 9;
          v39 /= 0xAu;
        }
        while (v12);
      }
      if (v38 <= 2)
        v38 = 2;
      if ((v32 & 0x80000000) != 0)
      {
        v135 = -(int)v32;
        v40 = 1;
        do
        {
          ++v40;
          v57 = v135 >= 0xA;
          v135 /= 0xAu;
        }
        while (v57);
      }
      else
      {
        v40 = 0;
        v41 = v32;
        do
        {
          ++v40;
          v12 = v41 > 9;
          v41 /= 0xAu;
        }
        while (v12);
      }
      if (v40 <= 2)
        v40 = 2;
      if (v149)
      {
        v42 = *(_DWORD *)(v149 + 4);
        if (v42 < 0)
          goto LABEL_264;
      }
      else
      {
        v42 = 0;
      }
      v15 = __OFADD__(v42, 1);
      v43 = v42 + 1;
      v44 = v15;
      if ((v40 & 0x80000000) != 0)
        goto LABEL_264;
      if ((v44 & 1) != 0)
        goto LABEL_264;
      v15 = __OFADD__(v40, v43);
      v45 = v40 + v43;
      if (v15)
        goto LABEL_264;
      v15 = __OFADD__(v45, 1);
      v46 = v45 + 1;
      v47 = v15;
      if ((v38 & 0x80000000) != 0)
        goto LABEL_264;
      if (v47)
        goto LABEL_264;
      v15 = __OFADD__(v38, v46);
      v48 = v38 + v46;
      if (v15)
        goto LABEL_264;
      v15 = __OFADD__(v48, 1);
      v49 = v48 + 1;
      v50 = v15;
      if ((v35 & 0x80000000) != 0)
        goto LABEL_264;
      if (v50)
        goto LABEL_264;
      v51 = v35 + v49;
      if (__OFADD__(v35, v49))
        goto LABEL_264;
      if (!v149 || (*(_BYTE *)(v149 + 16) & 4) != 0)
      {
        if (!(_DWORD)v51)
        {
          v52 = (uint64_t *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
LABEL_192:
          *a3 = (uint64_t)v52;
          v149 = 0;
          if (!v37)
            return result;
          goto LABEL_193;
        }
        if ((v51 & 0x80000000) == 0)
        {
          WTF::tryFastCompactMalloc((WTF *)(v51 + 20));
          v52 = v160;
          if (v160)
          {
            *(_DWORD *)v160 = 2;
            *((_DWORD *)v52 + 1) = v51;
            v52[1] = (uint64_t)v52 + 20;
            *((_DWORD *)v52 + 4) = 4;
            v156 = (uint64_t)&v154;
            v157 = v31;
            WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(&v156, (_BYTE *)v52 + 20);
            v62 = v157;
            if ((v157 & 0x80000000) != 0)
            {
              v136 = -(int)v157;
              v63 = 1;
              do
              {
                ++v63;
                v57 = v136 >= 0xA;
                v136 /= 0xAu;
              }
              while (v57);
            }
            else
            {
              v63 = 0;
              do
              {
                ++v63;
                v12 = v62 > 9;
                v62 /= 0xAu;
              }
              while (v12);
            }
            LODWORD(v64) = *(_DWORD *)(v156 + 4);
            if (v64 <= v63)
              v64 = v63;
            else
              v64 = v64;
            v65 = (char *)v52 + v64 + 20;
            *v65 = 45;
            v66 = v65 + 1;
            v158 = &v152;
            v159 = v33;
            WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(&v158, v66);
            v67 = v159;
            if ((v159 & 0x80000000) != 0)
            {
              v137 = -(int)v159;
              v68 = 1;
              do
              {
                ++v68;
                v57 = v137 >= 0xA;
                v137 /= 0xAu;
              }
              while (v57);
            }
            else
            {
              v68 = 0;
              do
              {
                ++v68;
                v12 = v67 > 9;
                v67 /= 0xAu;
              }
              while (v12);
            }
            LODWORD(v69) = *((_DWORD *)v158 + 1);
            if (v69 <= v68)
              v69 = v68;
            else
              v69 = v69;
            v70 = &v66[v69];
            *v70 = 45;
            v71 = v70 + 1;
            v160 = &v150;
            v161[0] = v32;
            WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(&v160, v71);
            v72 = v161[0];
            if ((v161[0] & 0x80000000) != 0)
            {
              v138 = -LODWORD(v161[0]);
              v73 = 1;
              do
              {
                ++v73;
                v57 = v138 >= 0xA;
                v138 /= 0xAu;
              }
              while (v57);
            }
            else
            {
              v73 = 0;
              do
              {
                ++v73;
                v12 = v72 > 9;
                v72 /= 0xAu;
              }
              while (v12);
            }
            LODWORD(v74) = *((_DWORD *)v160 + 1);
            if (v74 <= v73)
              v74 = v73;
            else
              v74 = v74;
            v71[v74] = 84;
            result = (uint64_t *)&v71[v74 + 1];
            if (v37)
            {
              v34 = *(_OWORD **)(v37 + 8);
              v75 = *(unsigned int *)(v37 + 4);
              if ((*(_BYTE *)(v37 + 16) & 4) != 0)
              {
                if ((_DWORD)v75)
                {
                  if ((_DWORD)v75 == 1)
                    *(_BYTE *)result = *(_BYTE *)v34;
                  else
                    result = (uint64_t *)memcpy(result, v34, v75);
                }
              }
              else
              {
                v145 = (uint64_t *)((char *)result + v75);
                if (v75 >= 0x10)
                {
                  v146 = (uint64_t *)((char *)result + (v75 & 0xFFFFFFF0));
                  do
                  {
                    v147 = (unsigned __int128)vld2q_s8((const char *)v34);
                    v34 += 2;
                    *(_OWORD *)result = v147;
                    result += 2;
                  }
                  while (result != v146);
                  result = v146;
                }
                while (result != v145)
                {
                  v148 = *(_BYTE *)v34;
                  v34 = (_OWORD *)((char *)v34 + 2);
                  *(_BYTE *)result = v148;
                  result = (uint64_t *)((char *)result + 1);
                }
              }
            }
LABEL_191:
            v37 = v149;
            goto LABEL_192;
          }
        }
LABEL_264:
        *a3 = 0;
        __break(0xC471u);
        JUMPOUT(0x1960C2B90);
      }
      if ((_DWORD)v51)
      {
        if (v51 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v51 + 20));
          v52 = v160;
          if (v160)
          {
            v53 = (char *)v160 + 20;
            *(_DWORD *)v160 = 2;
            *((_DWORD *)v52 + 1) = v51;
            v52[1] = (uint64_t)v52 + 20;
            *((_DWORD *)v52 + 4) = 0;
            if ((v31 & 0x80000000) != 0)
            {
              v139 = -(int)v31;
              v54 = 1;
              do
              {
                ++v54;
                v57 = v139 >= 0xA;
                v139 /= 0xAu;
              }
              while (v57);
            }
            else
            {
              v54 = 0;
              v55 = v31;
              do
              {
                ++v54;
                v12 = v55 > 9;
                v55 /= 0xAu;
              }
              while (v12);
            }
            v56 = HIDWORD(v154);
            v57 = HIDWORD(v154) >= v54;
            v58 = HIDWORD(v154) - v54;
            if ((_DWORD)v58 != 0 && v57)
            {
              v59 = v154;
              v60 = (_WORD *)v52 + 10;
              v61 = v58;
              do
              {
                *v60++ = v59;
                --v61;
              }
              while (v61);
            }
            else
            {
              v58 = 0;
            }
            v76 = &v53[2 * v58];
            if ((v31 & 0x80000000) != 0)
            {
              v82 = -(int)v31;
              v83 = 12;
              do
              {
                *((_BYTE *)&v161[-1] + v83--) = (v82 % 0xA) | 0x30;
                v12 = v82 > 9;
                v82 /= 0xAu;
              }
              while (v12);
              *((_BYTE *)&v161[-1] + v83) = 45;
              if (v83 + 2 <= 14)
              {
                do
                {
                  *(_WORD *)v76 = *((unsigned __int8 *)&v161[-1] + v83);
                  v76 += 2;
                  v12 = v83++ < 12;
                }
                while (v12);
              }
            }
            else
            {
              v77 = 0;
              v78 = v31;
              do
              {
                *((_BYTE *)v161 + v77-- + 4) = (v78 % 0xA) | 0x30;
                v12 = v78 > 9;
                v78 /= 0xAu;
              }
              while (v12);
              if (v77 + 14 <= 13)
              {
                do
                {
                  *(_WORD *)v76 = *((unsigned __int8 *)v161 + v77 + 5);
                  v76 += 2;
                  v57 = __CFADD__(v77++, 1);
                }
                while (!v57);
              }
            }
            if ((v31 & 0x80000000) != 0)
            {
              v140 = -(int)v31;
              v84 = 1;
              do
              {
                ++v84;
                v57 = v140 >= 0xA;
                v140 /= 0xAu;
              }
              while (v57);
            }
            else
            {
              v84 = 0;
              do
              {
                ++v84;
                v12 = v31 > 9;
                LODWORD(v31) = v31 / 0xA;
              }
              while (v12);
            }
            if (v56 <= v84)
              v56 = v84;
            v85 = &v53[2 * v56];
            *(_WORD *)v85 = 45;
            v86 = v85 + 2;
            if (v30 < -1)
            {
              v141 = ~v30;
              v87 = 1;
              do
              {
                ++v87;
                v57 = v141 >= 0xA;
                v141 /= 0xAu;
              }
              while (v57);
            }
            else
            {
              v87 = 0;
              v88 = v30 + 1;
              do
              {
                ++v87;
                v12 = v88 > 9;
                v88 /= 0xAu;
              }
              while (v12);
            }
            v89 = HIDWORD(v152);
            v57 = HIDWORD(v152) >= v87;
            v90 = HIDWORD(v152) - v87;
            if ((_DWORD)v90 != 0 && v57)
            {
              v91 = v152;
              v92 = v86;
              v93 = v90;
              do
              {
                *v92++ = v91;
                --v93;
              }
              while (v93);
            }
            else
            {
              v90 = 0;
            }
            v94 = &v86[v90];
            if (v30 > -2)
            {
              v97 = 0;
              v98 = v30 + 1;
              do
              {
                *((_BYTE *)v161 + v97-- + 4) = (v98 % 0xA) | 0x30;
                v12 = v98 > 9;
                v98 /= 0xAu;
              }
              while (v12);
              if (v97 + 14 <= 13)
              {
                do
                {
                  *v94++ = *((unsigned __int8 *)v161 + v97 + 5);
                  v57 = __CFADD__(v97++, 1);
                }
                while (!v57);
              }
            }
            else
            {
              v95 = ~v30;
              v96 = 12;
              do
              {
                *((_BYTE *)&v161[-1] + v96--) = (v95 % 0xA) | 0x30;
                v12 = v95 > 9;
                v95 /= 0xAu;
              }
              while (v12);
              *((_BYTE *)&v161[-1] + v96) = 45;
              if (v96 + 2 <= 14)
              {
                do
                {
                  *v94++ = *((unsigned __int8 *)&v161[-1] + v96);
                  v12 = v96++ < 12;
                }
                while (v12);
              }
            }
            if (v30 < -1)
            {
              v142 = ~v30;
              v99 = 1;
              do
              {
                ++v99;
                v57 = v142 >= 0xA;
                v142 /= 0xAu;
              }
              while (v57);
            }
            else
            {
              v99 = 0;
              do
              {
                ++v99;
                v12 = v33 > 9;
                LODWORD(v33) = v33 / 0xA;
              }
              while (v12);
            }
            if (v89 <= v99)
              v89 = v99;
            v100 = &v86[v89];
            *v100 = 45;
            v101 = v100 + 1;
            if ((v32 & 0x80000000) != 0)
            {
              v143 = -(int)v32;
              v102 = 1;
              do
              {
                ++v102;
                v57 = v143 >= 0xA;
                v143 /= 0xAu;
              }
              while (v57);
            }
            else
            {
              v102 = 0;
              v103 = v32;
              do
              {
                ++v102;
                v12 = v103 > 9;
                v103 /= 0xAu;
              }
              while (v12);
            }
            v104 = HIDWORD(v150);
            v57 = HIDWORD(v150) >= v102;
            v105 = HIDWORD(v150) - v102;
            if ((_DWORD)v105 != 0 && v57)
            {
              v106 = v150;
              v107 = v101;
              v108 = v105;
              do
              {
                *v107++ = v106;
                --v108;
              }
              while (v108);
            }
            else
            {
              v105 = 0;
            }
            v109 = &v101[v105];
            if ((v32 & 0x80000000) != 0)
            {
              v112 = -(int)v32;
              v113 = 12;
              do
              {
                *((_BYTE *)&v161[-1] + v113--) = (v112 % 0xA) | 0x30;
                v12 = v112 > 9;
                v112 /= 0xAu;
              }
              while (v12);
              *((_BYTE *)&v161[-1] + v113) = 45;
              if (v113 + 2 <= 14)
              {
                do
                {
                  *v109++ = *((unsigned __int8 *)&v161[-1] + v113);
                  v12 = v113++ < 12;
                }
                while (v12);
              }
            }
            else
            {
              v110 = 0;
              v111 = v32;
              do
              {
                *((_BYTE *)v161 + v110-- + 4) = (v111 % 0xA) | 0x30;
                v12 = v111 > 9;
                v111 /= 0xAu;
              }
              while (v12);
              if (v110 + 14 <= 13)
              {
                do
                {
                  *v109++ = *((unsigned __int8 *)v161 + v110 + 5);
                  v57 = __CFADD__(v110++, 1);
                }
                while (!v57);
              }
            }
            if ((v32 & 0x80000000) != 0)
            {
              v144 = -(int)v32;
              v114 = 1;
              do
              {
                ++v114;
                v57 = v144 >= 0xA;
                v144 /= 0xAu;
              }
              while (v57);
            }
            else
            {
              v114 = 0;
              do
              {
                ++v114;
                v12 = v32 > 9;
                LODWORD(v32) = v32 / 0xA;
              }
              while (v12);
            }
            if (v104 <= v114)
              v104 = v114;
            v115 = &v101[v104];
            *v115 = 84;
            result = (uint64_t *)(v115 + 1);
            v34 = *(_OWORD **)(v37 + 8);
            v116 = *(unsigned int *)(v37 + 4);
            if ((*(_BYTE *)(v37 + 16) & 4) == 0)
            {
              if ((_DWORD)v116 == 1)
              {
                *(_WORD *)result = *(_WORD *)v34;
              }
              else if ((_DWORD)v116)
              {
                result = (uint64_t *)memcpy(result, v34, 2 * v116);
              }
              goto LABEL_184;
            }
            v117 = (uint64_t *)((char *)result + 2 * v116);
            if (v116 >= 0x40)
            {
              v118 = (uint64_t *)((char *)result + 2 * (v116 & 0xFFFFFFC0));
              v119 = 0uLL;
              do
              {
                v162.val[0] = (int8x16_t)*v34;
                v120 = *((int8x16_t *)v34 + 1);
                v163.val[0] = (int8x16_t)v34[2];
                v121 = v34[3];
                v34 += 4;
                v122 = v121;
                v163.val[1] = 0uLL;
                v164.val[0] = v120;
                v162.val[1] = 0uLL;
                v123 = (char *)result;
                vst2q_s8(v123, v162);
                v123 += 32;
                v164.val[1] = 0uLL;
                vst2q_s8(v123, v164);
                v124 = (char *)(result + 8);
                vst2q_s8(v124, v163);
                v125 = (char *)(result + 12);
                vst2q_s8(v125, *(int8x16x2_t *)(&v119 - 1));
                result += 16;
              }
              while (result != v118);
              result = v118;
            }
            while (result != v117)
            {
              v126 = *(unsigned __int8 *)v34;
              v34 = (_OWORD *)((char *)v34 + 1);
              *(_WORD *)result = v126;
              result = (uint64_t *)((char *)result + 2);
            }
            goto LABEL_191;
          }
        }
        goto LABEL_264;
      }
      v52 = (uint64_t *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
LABEL_184:
      *a3 = (uint64_t)v52;
      v149 = 0;
LABEL_193:
      if (*(_DWORD *)v37 == 2)
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)v37, (WTF::StringImpl *)v34);
      *(_DWORD *)v37 -= 2;
      return result;
    case 3:
      v28 = a1[1].i32[2];
      v29 = a1[1].i32[1] + 1;
      v156 = 0x400000030;
      LODWORD(v157) = v28;
      v154 = 0x200000030;
      v155 = v29;
      v160 = &v156;
      LODWORD(v161[0]) = v28;
      v158 = &v154;
      LODWORD(v159) = v29;
      result = (uint64_t *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>((uint64_t)a3, (uint64_t)&v160, 45, (uint64_t)&v158);
      if (!*a3)
      {
        __break(0xC471u);
        JUMPOUT(0x1960C1E64);
      }
      return result;
    case 4:
      return WebCore::DateComponents::toStringForTime(a3, a1, a2);
    case 5:
      v8 = a1[1].u32[2];
      v9 = a1[1].u32[3];
      v156 = 0x400000030;
      LODWORD(v157) = v8;
      if ((v8 & 0x80000000) != 0)
      {
        v129 = -(int)v8;
        v10 = 1;
        do
        {
          ++v10;
          v57 = v129 >= 0xA;
          v129 /= 0xAu;
        }
        while (v57);
      }
      else
      {
        v10 = 0;
        v11 = v8;
        do
        {
          ++v10;
          v12 = v11 > 9;
          v11 /= 0xAu;
        }
        while (v12);
      }
      if (v10 <= 4)
        v10 = 4;
      if ((v9 & 0x80000000) != 0)
      {
        v130 = -v9;
        v13 = 1;
        do
        {
          ++v13;
          v57 = v130 >= 0xA;
          v130 /= 0xAu;
        }
        while (v57);
      }
      else
      {
        v13 = 0;
        v14 = v9;
        do
        {
          ++v13;
          v12 = v14 > 9;
          v14 /= 0xAu;
        }
        while (v12);
      }
      if (v13 <= 2)
        v13 = 2;
      if ((v13 & 0x80000000) != 0
        || ((v15 = __OFADD__(v13, 2), v16 = v13 + 2, !v15) ? (v17 = 0) : (v17 = 1),
            (v10 & 0x80000000) != 0
         || (v17 & 1) != 0
         || (v18 = v10 + v16, __OFADD__(v10, v16))
         || (v18 & 0x80000000) != 0
         || (WTF::tryFastCompactMalloc((WTF *)(v18 + 20)), (v19 = v160) == 0)))
      {
        *a3 = 0;
        __break(0xC471u);
        JUMPOUT(0x1960C2B9CLL);
      }
      *(_DWORD *)v160 = 2;
      *((_DWORD *)v19 + 1) = v18;
      v19[1] = (uint64_t)v19 + 20;
      *((_DWORD *)v19 + 4) = 4;
      v160 = &v156;
      v161[0] = v8;
      WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(&v160, (_BYTE *)v19 + 20);
      v20 = v161[0];
      if ((v161[0] & 0x80000000) != 0)
      {
        v131 = -LODWORD(v161[0]);
        v21 = 1;
        do
        {
          ++v21;
          v57 = v131 >= 0xA;
          v131 /= 0xAu;
        }
        while (v57);
      }
      else
      {
        v21 = 0;
        do
        {
          ++v21;
          v12 = v20 > 9;
          v20 /= 0xAu;
        }
        while (v12);
      }
      LODWORD(v22) = *((_DWORD *)v160 + 1);
      if (v22 <= v21)
        v22 = v21;
      else
        v22 = v22;
      v23 = (_WORD *)((char *)v19 + v22 + 20);
      *v23 = 22317;
      v24 = (char *)(v23 + 1);
      if ((v9 & 0x80000000) != 0)
      {
        v132 = -v9;
        v25 = 1;
        do
        {
          ++v25;
          v57 = v132 >= 0xA;
          v132 /= 0xAu;
        }
        while (v57);
      }
      else
      {
        v25 = 0;
        v26 = v9;
        do
        {
          ++v25;
          v12 = v26 > 9;
          v26 /= 0xAu;
        }
        while (v12);
      }
      if (v25 <= 1)
      {
        v27 = 2 - v25;
        memset(v24, 48, v27);
      }
      else
      {
        v27 = 0;
      }
      result = (uint64_t *)&v24[v27];
      v79 = 0;
      if ((v9 & 0x80000000) != 0)
      {
        v127 = -v9;
        do
        {
          *((_BYTE *)&v159 + v79-- + 4) = (v127 % 0xA) | 0x30;
          v12 = v127 > 9;
          v127 /= 0xAu;
        }
        while (v12);
        v128 = v79 + 12;
        v80 = (char *)&v158 + v79 + 12;
        *v80 = 45;
        if (v79 + 14 <= 14)
        {
          if (v128 <= 12)
            v128 = 12;
          v81 = v128 - v79 - 11;
          goto LABEL_124;
        }
      }
      else
      {
        do
        {
          *((_BYTE *)&v159 + v79-- + 4) = (v9 % 0xA) | 0x30;
          v12 = v9 > 9;
          v9 /= 0xAu;
        }
        while (v12);
        if (v79 + 14 <= 13)
        {
          v80 = (char *)&v159 + v79 + 5;
          v81 = -v79;
LABEL_124:
          result = (uint64_t *)memcpy(result, v80, v81);
        }
      }
      *a3 = (uint64_t)v19;
      return result;
    default:
      return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
}

double WebCore::Decimal::operator+@<D0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  __int128 v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *((_DWORD *)a1 + 3);
  v5 = *((_DWORD *)a1 + 4);
  v6 = *((_DWORD *)a2 + 3);
  v7 = *((_DWORD *)a2 + 4);
  if ((v4 & 0xFFFFFFFD) != 0 && (v6 & 0xFFFFFFFD) != 0)
    goto LABEL_5;
  if (v4 == 2)
    goto LABEL_33;
  if (v6 == 2)
  {
    a1 = a2;
LABEL_33:
    v9 = *a1;
    *(_OWORD *)a3 = *a1;
    v17 = *((_QWORD *)a1 + 2);
LABEL_34:
    *(_QWORD *)(a3 + 16) = v17;
    return *(double *)&v9;
  }
  if (!v4)
  {
    if (!v6 && v5 != v7)
    {
      *(_QWORD *)a3 = 0;
      *(_WORD *)(a3 + 8) = 0;
      *(_QWORD *)&v9 = 2;
      *(_QWORD *)(a3 + 12) = 2;
      return *(double *)&v9;
    }
    goto LABEL_33;
  }
  if (!v6)
  {
    v9 = *a2;
    *(_OWORD *)a3 = *a2;
    v17 = *((_QWORD *)a2 + 2);
    goto LABEL_34;
  }
LABEL_5:
  v19 = 0;
  v20 = 0;
  v21 = 0;
  WebCore::Decimal::alignOperands((uint64_t)&v19, *(_QWORD *)a1, *((_WORD *)a1 + 4), *(_QWORD *)a2, *((_WORD *)a2 + 4));
  if (v5 == v7)
    v10 = v20 + v19;
  else
    v10 = v19 - v20;
  if (v5 != 1 || v7 || v10)
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      WTF::NeverDestroyed<WebCore::Decimal const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::Decimal::Sign,int,unsigned long long>(a3, v5, v21, v10);
      return *(double *)&v9;
    }
    v11 = v21;
    v12 = -(uint64_t)v10;
    *(_DWORD *)(a3 + 12) = 1;
    *(_DWORD *)(a3 + 16) = v5 != 1;
    if ((v11 + 1023) > 0x7FE)
      v13 = v11;
    else
      v13 = v11 + 1;
    if ((v11 + 1023) > 0x7FE)
      v14 = -(uint64_t)v10;
    else
      v14 = -(uint64_t)v10 / 0xAuLL;
    if (v12 >= 0xDE0B6B3A7640000)
      v15 = v13;
    else
      v15 = v11;
    if (v12 < 0xDE0B6B3A7640000)
      v16 = -(uint64_t)v10;
    else
      v16 = v14;
    if (v15 < 1024)
    {
      if (v15 <= -1024)
      {
        *(_QWORD *)a3 = 0;
        *(_WORD *)(a3 + 8) = 0;
        *(_DWORD *)(a3 + 12) = 3;
        return *(double *)&v9;
      }
      *(_QWORD *)a3 = v16;
      goto LABEL_25;
    }
LABEL_37:
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = 0;
    return *(double *)&v9;
  }
  v15 = v21;
  *(_QWORD *)&v9 = 3;
  *(_QWORD *)(a3 + 12) = 3;
  if (v15 >= 1024)
    goto LABEL_37;
  *(_QWORD *)a3 = 0;
  if (v15 <= -1024)
  {
    *(_WORD *)(a3 + 8) = 0;
    return *(double *)&v9;
  }
LABEL_25:
  *(_WORD *)(a3 + 8) = v15;
  return *(double *)&v9;
}

double WebCore::Decimal::operator-@<D0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *((_DWORD *)a1 + 3);
  v5 = *((_DWORD *)a1 + 4);
  v6 = *((_DWORD *)a2 + 3);
  v7 = *((_DWORD *)a2 + 4);
  if ((v4 & 0xFFFFFFFD) != 0 && (v6 & 0xFFFFFFFD) != 0)
    goto LABEL_5;
  if (v4 == 2)
  {
LABEL_31:
    v9 = *a1;
    *(_OWORD *)a3 = *a1;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)a1 + 2);
    return *(double *)&v9;
  }
  if (v6 == 2)
  {
    a1 = a2;
    goto LABEL_31;
  }
  if (!v4)
  {
    if (!v6 && v5 == v7)
    {
      *(_QWORD *)a3 = 0;
      *(_WORD *)(a3 + 8) = 0;
      *(_QWORD *)&v9 = 2;
      *(_QWORD *)(a3 + 12) = 2;
      return *(double *)&v9;
    }
    goto LABEL_31;
  }
  if (!v6)
  {
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = 0;
    *(_DWORD *)(a3 + 16) = v7 != 1;
    return *(double *)&v9;
  }
LABEL_5:
  v19 = 0;
  v20 = 0;
  v21 = 0;
  WebCore::Decimal::alignOperands((uint64_t)&v19, *(_QWORD *)a1, *((_WORD *)a1 + 4), *(_QWORD *)a2, *((_WORD *)a2 + 4));
  v10 = v20;
  if (v5 == v7)
    v10 = -v20;
  v11 = v10 + v19;
  if (v5 != 1 || v7 != 1 || v11)
  {
    if ((v11 & 0x8000000000000000) == 0)
    {
      WTF::NeverDestroyed<WebCore::Decimal const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::Decimal::Sign,int,unsigned long long>(a3, v5, v21, v11);
      return *(double *)&v9;
    }
    v12 = v21;
    v13 = -(uint64_t)v11;
    *(_DWORD *)(a3 + 12) = 1;
    *(_DWORD *)(a3 + 16) = v5 != 1;
    if ((v12 + 1023) > 0x7FE)
      v14 = v12;
    else
      v14 = v12 + 1;
    if ((v12 + 1023) > 0x7FE)
      v15 = -(uint64_t)v11;
    else
      v15 = -(uint64_t)v11 / 0xAuLL;
    if (v13 >= 0xDE0B6B3A7640000)
      v16 = v14;
    else
      v16 = v12;
    if (v13 < 0xDE0B6B3A7640000)
      v17 = -(uint64_t)v11;
    else
      v17 = v15;
    if (v16 < 1024)
    {
      if (v16 <= -1024)
      {
        *(_QWORD *)a3 = 0;
        *(_WORD *)(a3 + 8) = 0;
        *(_DWORD *)(a3 + 12) = 3;
        return *(double *)&v9;
      }
      *(_QWORD *)a3 = v17;
      goto LABEL_26;
    }
LABEL_35:
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = 0;
    return *(double *)&v9;
  }
  v16 = v21;
  *(_QWORD *)&v9 = 3;
  *(_QWORD *)(a3 + 12) = 3;
  if (v16 >= 1024)
    goto LABEL_35;
  *(_QWORD *)a3 = 0;
  if (v16 <= -1024)
  {
    *(_WORD *)(a3 + 8) = 0;
    return *(double *)&v9;
  }
LABEL_26:
  *(_WORD *)(a3 + 8) = v16;
  return *(double *)&v9;
}

unint64_t *WebCore::Decimal::operator*=(unint64_t *result, unint64_t *a2)
{
  __int16 v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  unint64_t *v19;
  _BOOL4 v20;

  v3 = *((_DWORD *)result + 3);
  v4 = *((_DWORD *)a2 + 3);
  v5 = *((_DWORD *)result + 4) != *((_DWORD *)a2 + 4);
  v6 = (v3 & 0xFFFFFFFD) == 0 || (v4 & 0xFFFFFFFD) == 0;
  if (!v6)
  {
LABEL_5:
    v7 = *((__int16 *)a2 + 4) + *((__int16 *)result + 4);
    v8 = (*a2 * (unsigned __int128)*result) >> 64;
    v9 = *a2 * *result;
    if (!is_mul_ok(*a2, *result))
    {
      v20 = *((_DWORD *)result + 4) != *((_DWORD *)a2 + 4);
      v19 = result;
      do
      {
        v18 = v7;
        v9 = __udivti3();
        v7 = v18 + 1;
        v13 = v8 > 9;
        v8 = v14;
      }
      while (v13);
      result = v19;
      v5 = v20;
    }
    if (v9)
      v10 = 1;
    else
      v10 = 3;
    if ((v7 + 1023) <= 0x7FE && v9 >= 0xDE0B6B3A7640000)
    {
      v2 = -13107;
      do
      {
        v11 = v9 / 0xA;
        ++v7;
        v13 = v9 > 0x8AC7230489E7FFFFLL;
        v9 /= 0xAuLL;
      }
      while (v13);
    }
    else
    {
      v11 = v9;
    }
    if (v7 > 1023)
    {
      v10 = 0;
      LOWORD(v4) = 0;
      v12 = 0;
    }
    else
    {
      if (v7 >= -1023)
      {
        LOWORD(v4) = v7;
      }
      else
      {
        v10 = 3;
        LOWORD(v4) = 0;
      }
      if (v7 >= -1023)
        v12 = v11;
      else
        v12 = 0;
    }
    goto LABEL_19;
  }
  v15 = result;
  if (v3 == 2)
  {
LABEL_24:
    v12 = *v15;
    LOWORD(v4) = *((_WORD *)v15 + 4);
    v2 = *((_WORD *)v15 + 5);
    v10 = *((_DWORD *)v15 + 3);
    v5 = *((_DWORD *)v15 + 4);
    goto LABEL_19;
  }
  if (v4 == 2)
  {
    v15 = a2;
    goto LABEL_24;
  }
  if (!v3)
  {
    v17 = v4 != 3 && *((_DWORD *)result + 4) != *((_DWORD *)a2 + 4);
    if (v4)
    {
      v5 = v17;
      v10 = 2 * (v4 == 3);
    }
    else
    {
      v10 = 0;
    }
    LOWORD(v4) = 0;
    v12 = 0;
    goto LABEL_19;
  }
  if (v4)
    goto LABEL_5;
  v12 = 0;
  v6 = v3 == 3;
  v16 = v3 == 3;
  if (v6)
    v5 = 0;
  v10 = 2 * v16;
LABEL_19:
  *result = v12;
  *((_WORD *)result + 4) = v4;
  *((_WORD *)result + 5) = v2;
  *((_DWORD *)result + 3) = v10;
  *((_DWORD *)result + 4) = v5;
  return result;
}

unint64_t WebCore::Decimal::operator*@<X0>(unint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  _BOOL4 v5;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  _BOOL4 v15;

  v3 = *(_DWORD *)(result + 12);
  v4 = *((_DWORD *)a2 + 3);
  v5 = *(_DWORD *)(result + 16) != *((_DWORD *)a2 + 4);
  if ((v3 & 0xFFFFFFFD) != 0 && (v4 & 0xFFFFFFFD) != 0)
    goto LABEL_5;
  if (v3 == 2)
  {
LABEL_19:
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(result + 16);
    return result;
  }
  if (v4 == 2)
  {
    result = (unint64_t)a2;
    goto LABEL_19;
  }
  if (!v3)
  {
    if (v4)
    {
      *(_QWORD *)a3 = 0;
      *(_WORD *)(a3 + 8) = 0;
      if (v4 == 3)
        goto LABEL_33;
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_WORD *)(a3 + 8) = 0;
    }
LABEL_35:
    *(_DWORD *)(a3 + 12) = 0;
    *(_DWORD *)(a3 + 16) = v5;
    return result;
  }
  if (!v4)
  {
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    if (v3 != 3)
      goto LABEL_35;
LABEL_33:
    *(_QWORD *)(a3 + 12) = 2;
    return result;
  }
LABEL_5:
  v7 = *((__int16 *)a2 + 4) + *(__int16 *)(result + 8);
  v8 = (*a2 * (unsigned __int128)*(unint64_t *)result) >> 64;
  result = *a2 * *(_QWORD *)result;
  if (v8)
  {
    v15 = v5;
    v14 = a3;
    do
    {
      v13 = v7;
      result = __udivti3();
      v7 = v13 + 1;
      v11 = v8 > 9;
      v8 = v12;
    }
    while (v11);
    a3 = v14;
    v5 = v15;
  }
  if (result)
    v9 = 1;
  else
    v9 = 3;
  *(_DWORD *)(a3 + 12) = v9;
  *(_DWORD *)(a3 + 16) = v5;
  if ((v7 + 1023) <= 0x7FE && result >= 0xDE0B6B3A7640000)
  {
    do
    {
      v10 = result / 0xA;
      ++v7;
      v11 = result > 0x8AC7230489E7FFFFLL;
      result /= 0xAuLL;
    }
    while (v11);
  }
  else
  {
    v10 = result;
  }
  if (v7 >= 1024)
  {
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = 0;
  }
  else if (v7 <= -1024)
  {
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = 3;
  }
  else
  {
    *(_QWORD *)a3 = v10;
    *(_WORD *)(a3 + 8) = v7;
  }
  return result;
}

unint64_t WebCore::Decimal::operator/@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  _BOOL4 v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  BOOL v16;

  v3 = *(_DWORD *)(result + 12);
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(result + 16) != *(_DWORD *)(a2 + 16);
  if ((v3 & 0xFFFFFFFD) != 0 && (v4 & 0xFFFFFFFD) != 0)
    goto LABEL_5;
  if (v3 == 2)
  {
LABEL_37:
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(result + 16);
    return result;
  }
  if (v4 == 2)
  {
    result = a2;
    goto LABEL_37;
  }
  if (!v3)
  {
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    if (!v4)
      goto LABEL_35;
    goto LABEL_49;
  }
  if (!v4)
  {
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = 3;
    *(_DWORD *)(a3 + 16) = v5;
    return result;
  }
LABEL_5:
  if (v4 == 3)
  {
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    if (v3 == 3)
    {
LABEL_35:
      *(_QWORD *)(a3 + 12) = 2;
      return result;
    }
LABEL_49:
    *(_DWORD *)(a3 + 12) = 0;
    *(_DWORD *)(a3 + 16) = v5;
    return result;
  }
  v7 = *(__int16 *)(result + 8) - *(__int16 *)(a2 + 8);
  if (v3 == 3)
  {
    *(_DWORD *)(a3 + 12) = 3;
    *(_DWORD *)(a3 + 16) = v5;
    if (v7 < 1024)
    {
      *(_QWORD *)a3 = 0;
      if (v7 > -1024)
        goto LABEL_30;
      *(_WORD *)(a3 + 8) = 0;
      return result;
    }
LABEL_40:
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = 0;
    return result;
  }
  v8 = 0;
  v9 = *(_QWORD *)result;
  v10 = *(_QWORD *)a2;
  do
  {
    v11 = v9 < v10;
    if (v9 < v10 && v8 <= 0x16345785D89FFFELL)
    {
      do
      {
        v9 *= 10;
        result = 5 * v8;
        v11 = v9 < v10;
        v12 = v9 >= v10 || v8 >= 0x2386F26FC10000;
        v8 *= 10;
        --v7;
      }
      while (!v12);
    }
    if (v11)
      break;
    result = 0xDE0B6B3A763FFFFLL - v9 / v10;
    if (v8 > result)
      break;
    v8 += v9 / v10;
    v9 %= v10;
  }
  while (v9);
  if (v9 <= v10 >> 1)
    v13 = v8;
  else
    v13 = v8 + 1;
  if (v13)
    v14 = 1;
  else
    v14 = 3;
  *(_DWORD *)(a3 + 12) = v14;
  *(_DWORD *)(a3 + 16) = v5;
  if ((v7 + 1023) <= 0x7FE && v13 > 0xDE0B6B3A763FFFFLL)
  {
    do
    {
      v15 = v13 / 0xA;
      ++v7;
      v16 = v13 > 0x8AC7230489E7FFFFLL;
      v13 /= 0xAuLL;
    }
    while (v16);
  }
  else
  {
    v15 = v13;
  }
  if (v7 >= 1024)
    goto LABEL_40;
  if (v7 > -1024)
  {
    *(_QWORD *)a3 = v15;
LABEL_30:
    *(_WORD *)(a3 + 8) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_WORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 12) = 3;
  return result;
}

uint64_t WebCore::Decimal::alignOperands(uint64_t result, unint64_t a2, __int16 a3, unint64_t a4, __int16 a5)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unint64_t j;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  unint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a5 >= a3)
    v5 = a3;
  else
    v5 = a5;
  if (a5 < a3)
  {
    if (a2)
    {
      v16 = a3 - a5;
      v17 = v16 - 18;
      v18 = 18;
      for (i = 1; i <= a2; i *= 10)
      {
        ++v17;
        --v18;
        if (i > 0x1999999999999998)
          break;
      }
      if ((int)(v17 + 18) > 18)
      {
        v26 = 10;
        if ((v18 & 1) == 0)
          v26 = 1;
        if (v18 >= 2)
        {
          v29 = 10;
          do
          {
            v29 *= v29;
            if ((v18 & 2) != 0)
              v30 = v29;
            else
              v30 = 1;
            v26 *= v30;
            v13 = v18 > 3;
            v18 >>= 1;
          }
          while (v13);
        }
        a2 *= v26;
        if (a4)
        {
          v27 = v17;
          do
          {
            v28 = a4 / 0xA;
            if (v27 < 2)
              break;
            --v27;
            v13 = a4 > 9;
            a4 /= 0xAuLL;
          }
          while (v13);
        }
        else
        {
          v28 = 0;
        }
        v5 += v17;
        a4 = v28;
      }
      else
      {
        v20 = 10;
        if ((v16 & 1) == 0)
          v20 = 1;
        if (v16 >= 2)
        {
          v22 = 10;
          do
          {
            v22 *= v22;
            if ((v16 & 2) != 0)
              v23 = v22;
            else
              v23 = 1;
            v20 *= v23;
            v13 = v16 > 3;
            v16 >>= 1;
          }
          while (v13);
        }
        a2 *= v20;
      }
    }
    else
    {
      v5 = a5;
    }
  }
  else if (a3 < a5 && a4)
  {
    v6 = a5 - a3;
    v7 = v6 - 18;
    v8 = 18;
    for (j = 1; j <= a4; j *= 10)
    {
      ++v7;
      --v8;
      if (j > 0x1999999999999998)
        break;
    }
    if ((int)(v7 + 18) <= 18)
    {
      v21 = 10;
      if ((v6 & 1) == 0)
        v21 = 1;
      if (v6 >= 2)
      {
        v24 = 10;
        do
        {
          v24 *= v24;
          if ((v6 & 2) != 0)
            v25 = v24;
          else
            v25 = 1;
          v21 *= v25;
          v13 = v6 > 3;
          v6 >>= 1;
        }
        while (v13);
      }
      a4 *= v21;
    }
    else
    {
      v10 = 10;
      if ((v8 & 1) == 0)
        v10 = 1;
      if (v8 >= 2)
      {
        v14 = 10;
        do
        {
          v14 *= v14;
          if ((v8 & 2) != 0)
            v15 = v14;
          else
            v15 = 1;
          v10 *= v15;
          v13 = v8 > 3;
          v8 >>= 1;
        }
        while (v13);
      }
      a4 *= v10;
      if (a2)
      {
        v11 = v7;
        do
        {
          v12 = a2 / 0xA;
          if (v11 < 2)
            break;
          --v11;
          v13 = a2 > 9;
          a2 /= 0xAuLL;
        }
        while (v13);
      }
      else
      {
        v12 = 0;
      }
      v5 += v7;
      a2 = v12;
    }
  }
  else
  {
    v5 = a3;
  }
  *(_DWORD *)(result + 16) = v5;
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a4;
  return result;
}

void WebCore::Decimal::compareTo(WebCore::Decimal *this@<X0>, const WebCore::Decimal *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v7;

  WebCore::Decimal::operator-((__int128 *)this, (__int128 *)a2, (uint64_t)&v6);
  if ((HIDWORD(v6) - 1) < 2)
  {
    *(_OWORD *)a3 = v6;
    *(_QWORD *)(a3 + 16) = v7;
    return;
  }
  if (HIDWORD(v6) == 3)
  {
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    v4 = 3;
LABEL_6:
    *(_QWORD *)(a3 + 12) = v4;
    return;
  }
  if (HIDWORD(v6))
  {
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    v4 = 2;
    goto LABEL_6;
  }
  v5 = v7;
  *(_DWORD *)(a3 + 12) = 1;
  *(_DWORD *)(a3 + 16) = v5 == 1;
  *(_QWORD *)a3 = 1;
  *(_WORD *)(a3 + 8) = 0;
}

BOOL WebCore::Decimal::operator<(__int128 *a1, __int128 *a2)
{
  _BYTE v4[12];
  int v5;
  int v6;

  WebCore::Decimal::operator-(a1, a2, (uint64_t)v4);
  if ((v5 - 1) >= 2)
  {
    if (!v5)
      return v6 == 1;
    return 0;
  }
  if (v5 == 2)
    return 0;
  return v6;
}

BOOL WebCore::Decimal::operator<=(uint64_t a1, uint64_t a2)
{
  _BYTE v4[12];
  int v5;
  int v6;

  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    return 1;
  }
  WebCore::Decimal::operator-((__int128 *)a1, (__int128 *)a2, (uint64_t)v4);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 3)
    {
      if (!v5)
        return v6 == 1;
      return 0;
    }
    return 1;
  }
  if (v5 != 2)
    return v6;
  return 0;
}

BOOL WebCore::Decimal::operator>(__int128 *a1, __int128 *a2)
{
  _BOOL4 v2;
  _BYTE v4[12];
  int v5;
  _BOOL4 v6;

  WebCore::Decimal::operator-(a1, a2, (uint64_t)v4);
  if ((v5 - 1) >= 2)
  {
    if (!v5)
    {
      v2 = v6;
      return !v2;
    }
    return 0;
  }
  if (v5 == 2)
    return 0;
  v2 = v6;
  return !v2;
}

BOOL WebCore::Decimal::operator>=(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;
  _BYTE v4[12];
  int v5;
  _BOOL4 v6;

  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    return 1;
  }
  WebCore::Decimal::operator-((__int128 *)a1, (__int128 *)a2, (uint64_t)v4);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 3)
    {
      if (!v5)
      {
        v2 = v6;
        return !v2;
      }
      return 0;
    }
    return 1;
  }
  if (v5 != 2)
  {
    v2 = v6;
    return !v2;
  }
  return 0;
}

uint64_t WebCore::Decimal::ceil@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  _BOOL4 isMultiplePowersOfTen;
  unint64_t v11;
  uint64_t v12;

  if ((*(_DWORD *)(this + 12) & 0xFFFFFFFD) != 0 && (v2 = *(__int16 *)(this + 8), v2 < 0))
  {
    v3 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      goto LABEL_21;
    v4 = -1;
    v5 = 1;
    do
    {
      ++v4;
      if (v5 > 0x1999999999999998)
        break;
      v5 *= 10;
    }
    while (v5 <= v3);
    if (v4 >= -v2)
    {
      v6 = -v2;
      do
      {
        v7 = v3 / 0xA;
        if (v6 < 2)
          break;
        --v6;
        v8 = v3 > 9;
        v3 /= 0xAuLL;
      }
      while (v8);
      v9 = *(_DWORD *)(this + 16);
      if (!v9)
      {
        v12 = a2;
        v11 = v7;
        isMultiplePowersOfTen = WebCore::isMultiplePowersOfTen(v7, -v2);
        v9 = 0;
        a2 = v12;
        v7 = v11 + !isMultiplePowersOfTen;
      }
      return WTF::NeverDestroyed<WebCore::Decimal const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::Decimal::Sign,int,unsigned long long>(a2, v9, 0, v7);
    }
    else
    {
LABEL_21:
      if (*(_DWORD *)(this + 16))
      {
        *(_QWORD *)a2 = 0;
        *(_WORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 12) = 3;
      }
      else
      {
        *(_QWORD *)(a2 + 12) = 1;
        *(_QWORD *)a2 = 1;
        *(_WORD *)(a2 + 8) = 0;
      }
    }
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(this + 16);
  }
  return this;
}

BOOL WebCore::isMultiplePowersOfTen(unint64_t this, int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  if (!this)
    return 1;
  v2 = 10;
  if ((a2 & 1) == 0)
    v2 = 1;
  if (a2 >= 2)
  {
    v3 = 10;
    do
    {
      v3 *= v3;
      if ((a2 & 2) != 0)
        v4 = v3;
      else
        v4 = 1;
      v2 *= v4;
      v5 = a2 > 3;
      a2 >>= 1;
    }
    while (v5);
  }
  return this % v2 == 0;
}

double WebCore::Decimal::fromDouble@<D0>(double result@<D0>, uint64_t a2@<X8>)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    *(_QWORD *)a2 = 0;
    *(_WORD *)(a2 + 8) = 0;
    if (fabs(result) == INFINITY)
    {
      *(_DWORD *)(a2 + 12) = 0;
      *(_DWORD *)(a2 + 16) = result < 0.0;
    }
    else
    {
      *(_QWORD *)&result = 2;
      *(_QWORD *)(a2 + 12) = 2;
    }
  }
  else
  {
    v4 = (const char *)WTF::numberToString();
    v5 = (uint64_t)v4;
    v6 = 0x100000000;
    if (v4)
      v6 = strlen(v4) | 0x100000000;
    WebCore::Decimal::fromString(v5, v6, a2);
  }
  return result;
}

uint64_t WebCore::Decimal::fromString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v3 = a2;
  if (!(_DWORD)a2)
    goto LABEL_50;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2 & 0xFF00000000;
  v13 = 7;
  do
  {
    if (v12)
      v14 = *(unsigned __int8 *)(result + v4);
    else
      v14 = *(unsigned __int16 *)(result + 2 * v4);
    if (v13)
    {
      switch(v13)
      {
        case 1:
        case 2:
          if (v14 - 48 > 9)
            goto LABEL_65;
          v15 = v9 <= 17;
          v16 = 10 * v5 + v14 - 48;
          if (v9 <= 17)
          {
            ++v9;
            ++v8;
          }
          v17 = 0;
          v18 = 1;
          v19 = 0;
          v13 = 2;
          goto LABEL_11;
        case 3:
          if (v14 == 43)
          {
            v10 = 0;
            v17 = 0;
            v18 = 0;
            v19 = 0;
            v13 = 5;
          }
          else if (v14 == 45)
          {
            v17 = 0;
            v18 = 0;
            v19 = 0;
            v13 = 5;
            v10 = 1;
          }
          else
          {
LABEL_55:
            v11 = v14 - 48;
            if (v14 - 48 >= 0xA)
              goto LABEL_50;
LABEL_56:
            v17 = 0;
            v18 = 0;
            v13 = 4;
            v19 = 1;
          }
          break;
        case 4:
          if (v14 - 48 > 9)
            goto LABEL_50;
          v11 = v14 - 48 + 10 * v11;
          if (v11 < 1042)
            goto LABEL_56;
          if (!v5)
            goto LABEL_62;
          *(_QWORD *)a3 = 0;
          *(_WORD *)(a3 + 8) = 0;
          if (v10 != 1)
            goto LABEL_71;
          goto LABEL_68;
        case 5:
          goto LABEL_55;
        case 6:
          if (v14 - 49 <= 8)
            goto LABEL_19;
          if (v14 == 48)
            goto LABEL_25;
          goto LABEL_49;
        case 7:
          if (v14 - 49 <= 8)
          {
LABEL_19:
            v17 = 0;
            v19 = 0;
            v13 = 0;
            v5 = v14 - 48;
            v9 = 1;
            v18 = 1;
            break;
          }
          switch(v14)
          {
            case '0':
LABEL_25:
              v18 = 0;
              v19 = 0;
              v13 = 8;
              v17 = 1;
              goto LABEL_14;
            case '-':
              v17 = 0;
              v18 = 0;
              v19 = 0;
              v13 = 6;
              v6 = 1;
              goto LABEL_14;
            case '+':
              v6 = 0;
              v17 = 0;
              v18 = 0;
              v19 = 0;
              v13 = 6;
              goto LABEL_14;
          }
LABEL_49:
          if (v14 != 46)
            goto LABEL_50;
          goto LABEL_46;
        case 8:
          if (v14 == 48)
            goto LABEL_25;
          if (v14 < 0x31)
            goto LABEL_45;
          v29 = v14 - 48;
          if (v14 > 0x39)
            goto LABEL_65;
          v17 = 0;
          v19 = 0;
          v13 = 0;
          v9 = 1;
          v18 = 1;
          v5 = v29;
          break;
        default:
          goto LABEL_50;
      }
    }
    else if (v14 - 48 > 9)
    {
LABEL_45:
      if (v14 == 46)
      {
LABEL_46:
        v17 = 0;
        v19 = 0;
        v18 = 1;
        v13 = 1;
      }
      else
      {
LABEL_65:
        if ((v14 & 0xFFFFFFDF) != 0x45)
          goto LABEL_50;
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v13 = 3;
      }
    }
    else
    {
      v15 = v9 <= 17;
      v16 = 10 * v5 + v14 - 48;
      if (v9 > 17)
        ++v7;
      else
        ++v9;
      v17 = 0;
      v18 = 1;
      v19 = 0;
      v13 = 0;
LABEL_11:
      if (v15)
        v5 = v16;
    }
LABEL_14:
    ++v4;
  }
  while (v3 != v4);
  if (v17)
  {
LABEL_62:
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = 3;
    *(_DWORD *)(a3 + 16) = v6;
    return result;
  }
  if ((v18 | v19) != 1)
  {
LABEL_50:
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    v23 = 2;
LABEL_51:
    *(_QWORD *)(a3 + 12) = v23;
    return result;
  }
  if (v10 == 1)
    v20 = -v11;
  else
    v20 = v11;
  v21 = v20 - v8 + v7;
  if (v21 <= -1024)
  {
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
LABEL_68:
    v23 = 3;
    goto LABEL_51;
  }
  if (v21 >= 1023)
  {
    v24 = v21 - 1022;
    if (v9 - v8 + v21 - 1022 >= 19)
    {
      *(_QWORD *)a3 = 0;
      *(_WORD *)(a3 + 8) = 0;
LABEL_71:
      *(_DWORD *)(a3 + 12) = 0;
      *(_DWORD *)(a3 + 16) = v6;
      return result;
    }
    v25 = 10;
    if ((v21 & 1) == 0)
      v25 = 1;
    if (v24 >= 2)
    {
      v27 = 10;
      do
      {
        v27 *= v27;
        if ((v24 & 2) != 0)
          v28 = v27;
        else
          v28 = 1;
        v25 *= v28;
        v15 = v24 > 3;
        v24 >>= 1;
      }
      while (v15);
    }
    v5 *= v25;
    v21 = 1022;
  }
  if (v5)
    v22 = 1;
  else
    v22 = 3;
  *(_DWORD *)(a3 + 12) = v22;
  *(_DWORD *)(a3 + 16) = v6;
  if (v5 < 0xDE0B6B3A7640000)
    goto LABEL_37;
  do
  {
    v26 = v5;
    v5 /= 0xAuLL;
    ++v21;
  }
  while (v26 > 0x8AC7230489E7FFFFLL);
  if (v21 - 1 < 1023)
  {
    if (v21 - 1 > -1025)
    {
LABEL_37:
      *(_QWORD *)a3 = v5;
      *(_WORD *)(a3 + 8) = v21;
      return result;
    }
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = 3;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = 0;
  }
  return result;
}

double WebCore::Decimal::remainder@<D0>(WebCore::Decimal *this@<X0>, const WebCore::Decimal *a2@<X1>, uint64_t a3@<X8>)
{
  const WebCore::Decimal *v3;
  int v6;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  double result;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  int v24;
  _BOOL4 v25;
  _BYTE v26[24];
  _BYTE v27[24];
  __int128 v28;
  uint64_t v29;

  v3 = a2;
  WebCore::Decimal::operator/((unint64_t)this, (unint64_t)a2, (uint64_t)&v28);
  if ((HIDWORD(v28) & 0xFFFFFFFD) != 0)
  {
    if ((_DWORD)v29 == 1)
    {
      WebCore::Decimal::ceil((uint64_t)&v28, (uint64_t)v26);
    }
    else if (SWORD4(v28) < 0)
    {
      v15 = v28;
      if (!(_QWORD)v28)
        goto LABEL_23;
      v16 = 0;
      v17 = 1;
      do
      {
        ++v16;
        if (v17 > 0x1999999999999998)
          break;
        v17 *= 10;
      }
      while (v17 <= (unint64_t)v28);
      v18 = -SWORD4(v28);
      if (v16 >= v18)
      {
        do
        {
          v19 = v15;
          v15 /= 0xAuLL;
          if (v18 < 2)
            break;
          --v18;
        }
        while (v19 > 9);
        if (v19 >= 0xA)
          v20 = 1;
        else
          v20 = 3;
        *(_DWORD *)&v26[12] = v20;
        *(_DWORD *)&v26[16] = v29;
        v21 = v19 / 0x64;
        if (v19 <= 0x8AC7230489E7FFFFLL)
          v21 = v15;
        *(_QWORD *)v26 = v21;
        *(_WORD *)&v26[8] = v19 > 0x8AC7230489E7FFFFLL;
      }
      else
      {
LABEL_23:
        if ((_DWORD)v29)
        {
          *(_QWORD *)&v26[12] = 0x100000001;
          *(_QWORD *)v26 = 1;
          *(_WORD *)&v26[8] = 0;
        }
        else
        {
          *(_QWORD *)v26 = 0;
          *(_WORD *)&v26[8] = 0;
          *(_QWORD *)&v26[12] = 3;
        }
      }
    }
    else
    {
      *(_OWORD *)v26 = v28;
      *(_QWORD *)&v26[16] = v29;
    }
    v6 = *((_DWORD *)v3 + 3);
    v7 = *(_DWORD *)&v26[16] != *((_DWORD *)v3 + 4);
    if ((*(_DWORD *)&v26[12] & 0xFFFFFFFD) != 0 && (v6 & 0xFFFFFFFD) != 0)
      goto LABEL_7;
    if (*(_DWORD *)&v26[12] == 2)
    {
      v3 = (const WebCore::Decimal *)v26;
LABEL_41:
      *(_OWORD *)v27 = *(_OWORD *)v3;
      *(_QWORD *)&v27[16] = *((_QWORD *)v3 + 2);
      return WebCore::Decimal::operator-((__int128 *)this, (__int128 *)v27, a3);
    }
    if (v6 == 2)
      goto LABEL_41;
    if (*(_DWORD *)&v26[12])
    {
      if (v6)
      {
LABEL_7:
        v8 = *(_QWORD *)v3;
        v9 = *((__int16 *)v3 + 4) + *(__int16 *)&v26[8];
        v10 = (*(unint64_t *)v3 * (unsigned __int128)*(unint64_t *)v26) >> 64;
        v11 = v8 * *(_QWORD *)v26;
        if (v10)
        {
          v25 = v7;
          do
          {
            v24 = v9;
            v11 = __udivti3();
            v9 = v24 + 1;
            v22 = v10 > 9;
            v10 = v23;
          }
          while (v22);
          v7 = v25;
        }
        if (v11)
          v12 = 1;
        else
          v12 = 3;
        *(_DWORD *)&v27[12] = v12;
        *(_DWORD *)&v27[16] = v7;
        if ((v9 + 1023) <= 0x7FE && v11 >= 0xDE0B6B3A7640000)
        {
          do
          {
            v13 = v11 / 0xA;
            ++v9;
            v22 = v11 > 0x8AC7230489E7FFFFLL;
            v11 /= 0xAuLL;
          }
          while (v22);
        }
        else
        {
          v13 = v11;
        }
        if (v9 >= 1024)
        {
          *(_QWORD *)v27 = 0;
          *(_WORD *)&v27[8] = 0;
          *(_DWORD *)&v27[12] = 0;
        }
        else if (v9 <= -1024)
        {
          *(_QWORD *)v27 = 0;
          *(_WORD *)&v27[8] = 0;
          *(_DWORD *)&v27[12] = 3;
        }
        else
        {
          *(_QWORD *)v27 = v13;
          *(_WORD *)&v27[8] = v9;
        }
        return WebCore::Decimal::operator-((__int128 *)this, (__int128 *)v27, a3);
      }
      *(_QWORD *)v27 = 0;
      *(_WORD *)&v27[8] = 0;
      if (*(_DWORD *)&v26[12] != 3)
        goto LABEL_56;
LABEL_54:
      *(_QWORD *)&v27[12] = 2;
      return WebCore::Decimal::operator-((__int128 *)this, (__int128 *)v27, a3);
    }
    if (v6)
    {
      *(_QWORD *)v27 = 0;
      *(_WORD *)&v27[8] = 0;
      if (v6 == 3)
        goto LABEL_54;
    }
    else
    {
      *(_QWORD *)v27 = 0;
      *(_WORD *)&v27[8] = 0;
    }
LABEL_56:
    *(_DWORD *)&v27[12] = 0;
    *(_DWORD *)&v27[16] = v7;
    return WebCore::Decimal::operator-((__int128 *)this, (__int128 *)v27, a3);
  }
  result = *(double *)&v28;
  *(_OWORD *)a3 = v28;
  *(_QWORD *)(a3 + 16) = v29;
  return result;
}

uint64_t WebCore::Decimal::round@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  unint64_t v13;
  __int16 v14;

  if ((*(_DWORD *)(this + 12) & 0xFFFFFFFD) != 0 && (v2 = *(__int16 *)(this + 8), v2 < 0))
  {
    v3 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v4 = 0;
      v5 = 1;
      do
      {
        ++v4;
        if (v5 > 0x1999999999999998)
          break;
        v5 *= 10;
      }
      while (v5 <= v3);
    }
    else
    {
      v4 = 0;
    }
    if (v4 < -v2)
    {
      *(_QWORD *)a2 = 0;
      *(_WORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 12) = 3;
    }
    else
    {
      if (v2 <= -2 && v3)
      {
        v6 = ~v2;
        do
        {
          v7 = v3 / 0xA;
          if (v6 < 2)
            break;
          --v6;
          v8 = v3 > 9;
          v3 /= 0xAuLL;
        }
        while (v8);
      }
      else
      {
        v7 = *(_QWORD *)this;
      }
      if (v7 % 0xA > 4)
        v7 += 10;
      v9 = v7 / 0xA;
      v10 = *(_DWORD *)(this + 16);
      if (v7 >= 0xA)
        v11 = 1;
      else
        v11 = 3;
      *(_DWORD *)(a2 + 12) = v11;
      *(_DWORD *)(a2 + 16) = v10;
      v12 = v7 >= 0x8AC7230489E80000;
      v13 = v7 / 0x64;
      v14 = v12;
      if (v12)
        v9 = v13;
      *(_QWORD *)a2 = v9;
      *(_WORD *)(a2 + 8) = v14;
    }
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(this + 16);
  }
  return this;
}

WTF::StringImpl *WebCore::Decimal::toString@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v2;
  int v4;
  int v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  int v11;
  signed int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v22;
  int v23;
  unint64_t i;
  __int16 v25;
  uint64_t v26;
  int v27;
  const char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  WTF::StringImpl *v37;
  int v38;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int8x16_t *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  char v49;
  __int16 v50;

  v2 = this;
  v4 = *((_DWORD *)this + 3);
  if (v4 != 1 && v4 != 3)
  {
    if (v4 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v4)
    {
      v37 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v37 += 2;
      *a2 = v37;
    }
    else
    {
      v27 = *((_DWORD *)this + 4);
      if (v27)
        v28 = "-Infinity";
      else
        v28 = "Infinity";
      if (v27)
        v29 = 10;
      else
        v29 = 9;
      return (WTF::StringImpl *)WTF::String::String(a2, (uint64_t)v28, v29);
    }
    return this;
  }
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 1;
  if (*((_DWORD *)this + 4))
  {
    LOBYTE(v45) = 45;
    WTF::StringBuilder::append();
  }
  v6 = *((__int16 *)v2 + 4);
  v7 = *(_QWORD *)v2;
  if (v6 < 0)
  {
    if (v7)
    {
      v16 = 0;
      while (1)
      {
        v17 = -1;
        v18 = 1;
        do
        {
          ++v17;
          if (v18 > 0x1999999999999998)
            break;
          v18 *= 10;
        }
        while (v18 <= v7);
        if (v17 < 0xF)
          break;
        v19 = v7 / 0xA;
        v16 = v7 % 0xA;
        ++v6;
        v20 = v7 > 9;
        v7 /= 0xAuLL;
        if (!v20)
          goto LABEL_56;
      }
      v19 = v7;
    }
    else
    {
      v19 = 0;
      v16 = 0;
    }
LABEL_56:
    if (v16 <= 4)
      v22 = v19;
    else
      v22 = v19 + 1;
    if (v6 < 0 && v22 && !(v22 % 0xA))
    {
      v23 = -v6;
      do
      {
        v7 = v22 / 0xA;
        if (!--v23)
          break;
        if (v22 < 0xA)
          break;
        v22 /= 0xAuLL;
      }
      while (v7 == 10 * ((v7 * (unsigned __int128)0x199999999999999AuLL) >> 64));
      v6 = -v23;
    }
    else
    {
      v7 = v22;
    }
  }
  WTF::String::number((WTF::String *)v7);
  v9 = v45;
  if (v45)
  {
    v10 = *((_DWORD *)v45 + 1);
    v11 = v10 + v6;
    v12 = v10 + v6 - 1;
    if (v6 <= 0 && v11 >= -5)
      goto LABEL_12;
    if (v10)
    {
      v30 = (unsigned __int8 *)*((_QWORD *)v45 + 1);
      if ((*((_BYTE *)v45 + 16) & 4) != 0)
        v31 = *v30;
      else
        v31 = *(unsigned __int16 *)v30;
LABEL_96:
      WTF::StringBuilder::append((uint64_t)&v46, v31);
      v32 = v10;
      v33 = (v10 - 1);
      while (1)
      {
        v34 = v32;
        if ((int)v32 < 2)
          break;
        if (v45 && *((_DWORD *)v45 + 1) > v33)
        {
          v35 = *((_QWORD *)v45 + 1);
          v36 = (*((_BYTE *)v45 + 16) & 4) != 0 ? *(unsigned __int8 *)(v35 + v33) : *(unsigned __int16 *)(v35 + 2 * v33);
          --v33;
          v32 = v34 - 1;
          if (v36 == 48)
            continue;
        }
        WTF::StringBuilder::append((uint64_t)&v46, 0x2Eu);
        v40 = 1;
        do
        {
          if (v45 && v40 < *((unsigned int *)v45 + 1))
          {
            v41 = *((_QWORD *)v45 + 1);
            if ((*((_BYTE *)v45 + 16) & 4) != 0)
              v42 = *(unsigned __int8 *)(v41 + v40);
            else
              v42 = *(unsigned __int16 *)(v41 + 2 * v40);
          }
          else
          {
            v42 = 0;
          }
          WTF::StringBuilder::append((uint64_t)&v46, v42);
          ++v40;
        }
        while (v34 != v40);
        break;
      }
      if (v12)
      {
        if (v12 >= 0)
          v43 = (int8x16_t *)"e+";
        else
          v43 = (int8x16_t *)"e";
        if (v12 < 0)
          v44 = 2;
        else
          v44 = 3;
        WTF::StringBuilder::append<WTF::ASCIILiteral,int>((WTF::StringBuilder *)&v46, v43, v44, v12);
      }
      goto LABEL_21;
    }
LABEL_130:
    v31 = 0;
    goto LABEL_96;
  }
  v12 = v6 - 1;
  if ((v6 + 5) >= 6)
  {
    v10 = 0;
    goto LABEL_130;
  }
  v10 = 0;
  v11 = v6;
LABEL_12:
  if (!v6)
    goto LABEL_13;
  if (v11 >= 1)
  {
    if (v10 >= 1)
    {
      for (i = 0; i != v10; ++i)
      {
        v25 = (__int16)v45;
        if (v45)
        {
          if (i >= *((unsigned int *)v45 + 1))
          {
            v25 = 0;
          }
          else
          {
            v26 = *((_QWORD *)v45 + 1);
            if ((*((_BYTE *)v45 + 16) & 4) != 0)
              v25 = *(unsigned __int8 *)(v26 + i);
            else
              v25 = *(_WORD *)(v26 + 2 * i);
          }
        }
        v50 = v25;
        WTF::StringBuilder::append();
        if (v12 == i)
        {
          LOBYTE(v50) = 46;
          WTF::StringBuilder::append();
        }
      }
    }
    goto LABEL_21;
  }
  WTF::StringBuilder::append();
  if (v12 <= -2)
  {
    v38 = v12 + 1;
    do
      WTF::StringBuilder::append((uint64_t)&v46, 0x30u);
    while (!__CFADD__(v38++, 1));
  }
  v9 = v45;
  if (!v48 && v47 == 0)
  {
LABEL_13:
    if (v9)
      *(_DWORD *)v9 += 2;
    v13 = v46;
    v46 = v9;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v8);
        v9 = v45;
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
    if (v9)
      LODWORD(v9) = *((_DWORD *)v9 + 1);
    v48 = (int)v9;
  }
  else if (v45 && (*((_BYTE *)v45 + 16) & 4) == 0)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    WTF::StringBuilder::append();
  }
LABEL_21:
  v14 = v46;
  if (v46
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v46),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v46),
        (v14 = v46) != 0))
  {
    *(_DWORD *)v14 += 2;
  }
  *a2 = v14;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v8);
    else
      *(_DWORD *)v45 -= 2;
  }
  v15 = v47;
  v47 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v8);
    else
      *(_DWORD *)v15 -= 2;
  }
  this = v46;
  v46 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v8);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WTF::StringBuilder::append<WTF::ASCIILiteral,int>(WTF::StringBuilder *a1, int8x16_t *a2, uint64_t a3, unsigned int a4)
{
  int v4;
  uint64_t result;
  unsigned int v6;
  int8x16_t *v7;
  int v8;

  if (!a3)
  {
    v4 = 0;
    v7 = a2;
LABEL_3:
    v8 = v4;
    v6 = a4;
    return (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>(a1, &v7, &v6);
  }
  v4 = a3 - 1;
  v7 = a2;
  if (!((unint64_t)(a3 - 1) >> 31))
    goto LABEL_3;
  result = 124;
  __break(0xC471u);
  return result;
}

void WebCore::fitDragImageToMaxSize(CFTypeRef *a1@<X0>, int *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  CGImage *v8;
  int Width;
  int Height;
  float v11;
  float v12;
  int v13;
  int v14;
  float v15;
  CFTypeRef v17;
  CGImageRef *v18;
  _QWORD *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  CGImageRef *v25;
  _QWORD *v26;
  float v27;
  CFTypeRef v28;
  CFTypeRef v29;

  v8 = (CGImage *)*a1;
  if (*a1)
    CFRetain(*a1);
  Width = CGImageGetWidth(v8);
  Height = CGImageGetHeight(v8);
  if (v8)
    CFRelease(v8);
  v11 = -1.0;
  v12 = (float)*a2;
  if (*a2 > *a3)
    v11 = (float)*a3 / v12;
  v13 = a2[1];
  v14 = a3[1];
  v15 = (float)v13;
  if (v13 > v14 && (v11 > (float)((float)v14 / v15) || v11 < 0.0))
    v11 = (float)v14 / v15;
  if (*a2 != Width || v13 != Height)
  {
    v21 = v12 / (float)Width;
    v22 = v15 / (float)Height;
    v23 = 1.0;
    if (v11 > 0.0)
      v23 = v11;
    v24 = v21 * v23;
    v11 = v22 * v23;
    v17 = *a1;
    v28 = v17;
    if (v17)
    {
      CFRetain(v17);
      v18 = (CGImageRef *)&v28;
      v19 = a4;
      v20 = v24;
      goto LABEL_22;
    }
    v25 = (CGImageRef *)&v28;
    v26 = a4;
    v27 = v21 * v23;
    goto LABEL_27;
  }
  v17 = *a1;
  if (v11 > 0.0)
  {
    v29 = v17;
    if (v17)
    {
      CFRetain(v17);
      v18 = (CGImageRef *)&v29;
      v19 = a4;
      v20 = v11;
LABEL_22:
      WebCore::scaleDragImage(v18, v19, v20, v11);
      CFRelease(v17);
      return;
    }
    v25 = (CGImageRef *)&v29;
    v26 = a4;
    v27 = v11;
LABEL_27:
    WebCore::scaleDragImage(v25, v26, v27, v11);
    return;
  }
  *a4 = v17;
  if (v17)
    CFRetain(v17);
}

void WebCore::createDragImageForNode(WebCore *this@<X0>, WebCore::LocalFrame *a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::LocalFrame *v7;
  unint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  CFTypeRef v18;
  void *v19;
  uint64_t v20;
  unsigned __int16 v21;
  char v22;
  CFTypeRef cf;
  _QWORD *v24;
  char v25;
  char **v26;
  char *v27;

  if ((*((_WORD *)a2 + 14) & 8) != 0)
  {
    *((_DWORD *)a2 + 6) += 2;
    WebCore::Element::setBeingDragged((unsigned int *)a2, (void *)1);
    v7 = a2;
  }
  else
  {
    v7 = 0;
  }
  WebCore::Document::updateLayout(*((_QWORD *)this + 37), 0, 0);
  v21 = 0;
  v22 = 1;
  v8 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v8 != -1)
  {
    v27 = &v25;
    v26 = &v27;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v26, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
  WebCore::snapshotNode((WebCore::LocalFrameView **)this, a2, &v21, (uint64_t *)&v24);
  WebCore::createDragImageFromSnapshot(a3, &v24, (uint64_t)a2);
  v10 = v24;
  v24 = 0;
  if (v10)
  {
    v11 = v10[1];
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v11);
LABEL_12:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v20 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v20 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
        if (v14)
          goto LABEL_24;
LABEL_20:
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        if (!v16)
          WTF::fastFree((WTF *)v11, v9);
        goto LABEL_24;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      goto LABEL_24;
    goto LABEL_20;
  }
LABEL_24:
  v18 = cf;
  cf = 0;
  if (v18)
    CFRelease(v18);
  if (v7)
  {
    WebCore::Element::setBeingDragged((unsigned int *)v7, 0);
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v19);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
}

void WebCore::createDragImageFromSnapshot(_QWORD *a1, _QWORD **a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;

  v4 = *a2;
  if (!*a2)
    goto LABEL_51;
  if (a3)
  {
    if ((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) == 0
      || (*(_BYTE *)((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      goto LABEL_51;
    }
    if ((*(_BYTE *)((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 1) != 0)
      goto LABEL_13;
    v5 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8);
    if (!v5)
      goto LABEL_13;
    v6 = *(_WORD *)(v5 + 28);
    if ((v6 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1960C51F4);
    }
    if ((v6 & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
      && (v7 = *(_QWORD *)(*(_QWORD *)(v5 + 176) + 24)) != 0
      && (v8 = *(_QWORD *)(v7 + 8)) != 0
      && (*(char *)(v8 + 720) & 0x80000000) == 0)
    {
      LOBYTE(v9) = 0;
    }
    else
    {
LABEL_13:
      v9 = ((unint64_t)*(unsigned int *)(*(_QWORD *)((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x68) + 232) >> 15) & 1;
    }
  }
  else
  {
    LOBYTE(v9) = 1;
  }
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + 136))(&v29, v4);
  WebCore::BitmapImage::create(&v29, (uint64_t *)&v30);
  v11 = v29;
  v29 = 0;
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (__ldaxr((unsigned __int8 *)v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v12);
LABEL_20:
    v14 = *(_QWORD *)(v12 + 8);
    v15 = v14 - 1;
    *(_QWORD *)(v12 + 8) = v14 - 1;
    if (v14 == 1)
    {
      v28 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v28 != 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = __ldxr((unsigned __int8 *)v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
        if (v15)
          goto LABEL_32;
LABEL_28:
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        if (!v17)
          WTF::fastFree((WTF *)v12, v10);
        goto LABEL_32;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      goto LABEL_32;
    goto LABEL_28;
  }
LABEL_32:
  v19 = v4[1];
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_36;
  }
  MEMORY[0x19AEA534C](v19);
LABEL_36:
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v21 - 1;
  *(_QWORD *)(v19 + 8) = v21 - 1;
  if (v21 == 1)
  {
    v27 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    v24 = v27 != 0;
  }
  else
  {
    v23 = 0;
    v24 = 1;
  }
  v25 = __ldxr((unsigned __int8 *)v19);
  if (v25 != 1)
  {
    __clrex();
LABEL_43:
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
    if (v22)
      goto LABEL_48;
    goto LABEL_44;
  }
  if (__stlxr(0, (unsigned __int8 *)v19))
    goto LABEL_43;
  if (v22)
    goto LABEL_48;
LABEL_44:
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (!v24)
    WTF::fastFree((WTF *)v19, v10);
LABEL_48:
  v26 = v30;
  if (!v30)
  {
LABEL_51:
    *a1 = 0;
    return;
  }
  WebCore::createDragImageFromImage((uint64_t)v30, v9, a1);
  if (v26[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
  else
    --v26[2];
}

uint64_t WebCore::DragImage::DragImage(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 8) = 0;
  *(_BYTE *)(this + 120) = 0;
  *(_BYTE *)(this + 128) = 0;
  *(_BYTE *)(this + 200) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 8) = 0;
  *(_BYTE *)(this + 120) = 0;
  *(_BYTE *)(this + 128) = 0;
  *(_BYTE *)(this + 200) = 0;
  return this;
}

uint64_t WebCore::DragImage::DragImage(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v3 = *(_OWORD *)(a2 + 8);
    v4 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    v5 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a1 + 56) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a1 + 64) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    *(_DWORD *)(a1 + 68) = v5;
    v6 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a1 + 80) = v6;
    v7 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a1 + 88) = v7;
    *(_QWORD *)(a1 + 104) = 0;
    v9 = *(_QWORD *)(a2 + 96);
    v8 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a1 + 96) = v9;
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    if (v8)
    {
      *(_QWORD *)(a1 + 104) = v8;
      *(_QWORD *)(a2 + 104) = 0;
    }
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    *(_BYTE *)(a1 + 136) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    v10 = *(unsigned int *)(a2 + 192);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E34049F8[v10])(&v12, a1 + 136, a2 + 136);
      *(_DWORD *)(a1 + 192) = v10;
    }
    *(_BYTE *)(a1 + 200) = 1;
  }
  return a1;
}

uint64_t WebCore::DragImage::operator=(uint64_t a1, uint64_t *a2)
{
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef v6;
  unint64_t *v7;
  _OWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  WTF *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;

  v4 = *(CFTypeRef *)a1;
  if (*(_QWORD *)a1)
  {
    CFRetain(*(CFTypeRef *)a1);
    CFRelease(v4);
  }
  v5 = *a2;
  *a2 = 0;
  v6 = *(CFTypeRef *)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    CFRelease(v6);
  v7 = (unint64_t *)(a2 + 1);
  v8 = (_OWORD *)(a1 + 8);
  if (*(unsigned __int8 *)(a1 + 120) == *((unsigned __int8 *)a2 + 120))
  {
    if (*(_BYTE *)(a1 + 120))
      WebCore::TextIndicatorData::operator=((uint64_t)v8, v7);
  }
  else if (*(_BYTE *)(a1 + 120))
  {
    v9 = *(_QWORD *)(a1 + 104);
    if ((v9 & 0x8000000000000) != 0)
    {
      v26 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, v7);
      }
    }
    v10 = *(_DWORD **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (v10)
    {
      if (v10[2] == 1)
        (*(void (**)(_DWORD *, unint64_t *))(*(_QWORD *)v10 + 8))(v10, v7);
      else
        --v10[2];
    }
    v11 = *(_DWORD **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    if (v11)
    {
      if (v11[2] == 1)
        (*(void (**)(_DWORD *, unint64_t *))(*(_QWORD *)v11 + 8))(v11, v7);
      else
        --v11[2];
    }
    v12 = *(_DWORD **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v12)
    {
      if (v12[2] == 1)
        (*(void (**)(_DWORD *, unint64_t *))(*(_QWORD *)v12 + 8))(v12, v7);
      else
        --v12[2];
    }
    v13 = *(WTF **)(a1 + 56);
    if (v13)
    {
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 64) = 0;
      WTF::fastFree(v13, v7);
    }
    *(_BYTE *)(a1 + 120) = 0;
  }
  else
  {
    v14 = *(_OWORD *)v7;
    v15 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = v15;
    *v8 = v14;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    v16 = a2[7];
    a2[7] = 0;
    *(_QWORD *)(a1 + 56) = v16;
    LODWORD(v16) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = 0;
    *(_DWORD *)(a1 + 64) = v16;
    LODWORD(v16) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = 0;
    *(_DWORD *)(a1 + 68) = v16;
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    v17 = a2[10];
    a2[10] = 0;
    *(_QWORD *)(a1 + 80) = v17;
    v18 = a2[11];
    a2[11] = 0;
    *(_QWORD *)(a1 + 88) = v18;
    *(_QWORD *)(a1 + 104) = 0;
    v20 = a2[12];
    v19 = a2[13];
    a2[12] = 0;
    *(_QWORD *)(a1 + 96) = v20;
    if (v19)
    {
      *(_QWORD *)(a1 + 104) = v19;
      a2[13] = 0;
    }
    *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
    *(_BYTE *)(a1 + 120) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 200) == *((unsigned __int8 *)a2 + 200))
  {
    if (*(_BYTE *)(a1 + 200))
    {
      v21 = *(unsigned int *)(a1 + 192);
      v22 = *((unsigned int *)a2 + 48);
      if ((_DWORD)v21 == -1)
      {
        if ((_DWORD)v22 == -1)
          return a1;
      }
      else if ((_DWORD)v22 == -1)
      {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v21])(&v30, a1 + 136);
        *(_DWORD *)(a1 + 192) = -1;
        return a1;
      }
      v29 = a1 + 136;
      ((void (*)(uint64_t *))off_1E3404A10[v22])(&v29);
    }
  }
  else if (*(_BYTE *)(a1 + 200))
  {
    v23 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v23 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v23])(&v31, a1 + 136);
    *(_DWORD *)(a1 + 192) = -1;
    *(_BYTE *)(a1 + 200) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 136) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    v24 = *((unsigned int *)a2 + 48);
    if ((_DWORD)v24 != -1)
    {
      ((void (*)(char *))off_1E34049F8[v24])(&v32);
      *(_DWORD *)(a1 + 192) = v24;
    }
    *(_BYTE *)(a1 + 200) = 1;
  }
  return a1;
}

void WebCore::DragImage::~DragImage(CFTypeRef *this, void *a2)
{
  CFTypeRef v3;
  uint64_t v4;
  CFTypeRef v5;
  char v6;

  v3 = *this;
  if (*this)
  {
    CFRetain(*this);
    CFRelease(v3);
  }
  if (*((_BYTE *)this + 200))
  {
    v4 = *((unsigned int *)this + 48);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, CFTypeRef *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v4])(&v6, this + 17);
    *((_DWORD *)this + 48) = -1;
  }
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 1), a2);
  v5 = *this;
  *this = 0;
  if (v5)
    CFRelease(v5);
}

{
  CFTypeRef v3;
  uint64_t v4;
  CFTypeRef v5;
  char v6;

  v3 = *this;
  if (*this)
  {
    CFRetain(*this);
    CFRelease(v3);
  }
  if (*((_BYTE *)this + 200))
  {
    v4 = *((unsigned int *)this + 48);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, CFTypeRef *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v4])(&v6, this + 17);
    *((_DWORD *)this + 48) = -1;
  }
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 1), a2);
  v5 = *this;
  *this = 0;
  if (v5)
    CFRelease(v5);
}

const char *WebCore::EventTrackingRegions::eventName(int a1)
{
  const char *result;

  switch(a1)
  {
    case 0:
      result = "mousedown";
      break;
    case 1:
      result = "mousemove";
      break;
    case 2:
      result = "mouseup";
      break;
    case 3:
      result = "mousewheel";
      break;
    case 4:
      result = "pointerdown";
      break;
    case 5:
      result = "pointerenter";
      break;
    case 6:
      result = "pointerleave";
      break;
    case 7:
      result = "pointermove";
      break;
    case 8:
      result = "pointerout";
      break;
    case 9:
      result = "pointerover";
      break;
    case 10:
      result = "pointerup";
      break;
    case 11:
      result = "touchend";
      break;
    case 12:
      result = "touchforcechange";
      break;
    case 13:
      result = "touchmove";
      break;
    case 14:
      result = "touchstart";
      break;
    case 15:
      result = "wheel";
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t WebCore::EventTrackingRegions::eventNameAtomString(uint64_t a1, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      result = a1 + 1208;
      break;
    case 1:
      result = a1 + 1232;
      break;
    case 2:
      result = a1 + 1256;
      break;
    case 3:
      result = a1 + 1264;
      break;
    case 4:
      result = a1 + 1488;
      break;
    case 5:
      result = a1 + 1496;
      break;
    case 6:
      result = a1 + 1504;
      break;
    case 7:
      result = a1 + 1528;
      break;
    case 8:
      result = a1 + 1536;
      break;
    case 9:
      result = a1 + 1544;
      break;
    case 10:
      result = a1 + 1552;
      break;
    case 11:
      result = a1 + 2080;
      break;
    case 12:
      result = a1 + 2088;
      break;
    case 13:
      result = a1 + 2096;
      break;
    case 14:
      result = a1 + 2104;
      break;
    case 15:
      result = a1 + 2512;
      break;
    default:
      result = MEMORY[0x1E0CBF2F8];
      break;
  }
  return result;
}

void WebCore::FileChooser::~FileChooser(WebCore::FileChooser *this, WTF::StringImpl *a2)
{
  WebCore::FileChooserSettings::~FileChooserSettings((WebCore::FileChooser *)((char *)this + 16), a2);
}

{
  WebCore::FileChooserSettings::~FileChooserSettings((WebCore::FileChooser *)((char *)this + 16), a2);
}

uint64_t WebCore::FileChooser::chooseFile(WebCore::FileChooser *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  _QWORD v9[2];
  uint64_t v10[2];

  v3 = *a2;
  if (*a2)
  {
    *(_DWORD *)v3 += 2;
    v4 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_DWORD *)v3 += 2;
  }
  else
  {
    v4 = (WTF *)WTF::fastMalloc((WTF *)8);
  }
  v10[0] = (uint64_t)v4;
  v10[1] = 0x100000001;
  *(_QWORD *)v4 = v3;
  v9[0] = 0;
  v9[1] = 0;
  WebCore::FileChooser::chooseFiles((uint64_t)this, v10, (uint64_t)v9);
  v6 = *(WTF::StringImpl **)v4;
  *(_QWORD *)v4 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = WTF::fastFree(v4, v5);
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return WTF::StringImpl::destroy(v3, v8);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

unsigned int *WebCore::FileChooser::chooseFiles(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int *result;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  _DWORD **v15;
  _DWORD *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;

  result = *(unsigned int **)(a1 + 8);
  if (result)
  {
    v6 = *((unsigned int *)a2 + 3);
    v21 = 0;
    v22 = 0;
    if ((_DWORD)v6)
    {
      if (v6 >= 0xAAAAAAB)
      {
LABEL_20:
        __break(0xC471u);
        JUMPOUT(0x1960C5B88);
      }
      v8 = WTF::fastMalloc((WTF *)(24 * v6));
      v9 = 0;
      LODWORD(v22) = 24 * (int)v6 / 0x18u;
      v21 = v8;
      v10 = *((unsigned int *)a2 + 3);
      v11 = *a2;
      v12 = *(unsigned int *)(a3 + 12);
      v13 = (_DWORD **)MEMORY[0x1E0CBF6F0];
      do
      {
        if (v9 == v10)
          goto LABEL_20;
        v14 = *(_DWORD **)(v11 + 8 * v9);
        if (v14)
          *v14 += 2;
        v15 = (_DWORD **)(*(_QWORD *)a3 + 8 * v9);
        if (v9 >= v12)
          v15 = v13;
        v16 = *v15;
        if (v16)
          *v16 += 2;
        v17 = (_QWORD *)(v8 + 24 * v9);
        *v17 = v14;
        v17[1] = v16;
        v17[2] = 0;
        ++v9;
      }
      while (v9 != v6);
      HIDWORD(v22) = v6;
      result = *(unsigned int **)(a1 + 8);
    }
    v20 = 0;
    (*(void (**)(unsigned int *, uint64_t *, WTF::StringImpl **, _QWORD))(*(_QWORD *)result + 16))(result, &v21, &v20, 0);
    v19 = v20;
    v20 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    return WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v21, v18);
  }
  return result;
}

uint64_t WebCore::FileChooser::cancelFileChoosing(WebCore::FileChooser *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

unsigned int *WebCore::FileChooser::chooseMediaFiles(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  _DWORD **v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;

  if (*((_QWORD *)result + 1))
  {
    v7 = result;
    v17 = 0;
    v18 = 0;
    v8 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v8)
    {
      if (v8 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      v9 = 24 * v8;
      v10 = WTF::fastMalloc((WTF *)(24 * v8));
      LODWORD(v18) = (v9 & 0xFFFFFFF8) / 0x18;
      v17 = v10;
      v11 = *(_DWORD *)(a2 + 12);
      if (v11)
      {
        v12 = *(_DWORD ***)a2;
        v13 = (_QWORD *)(v10 + 8);
        v14 = *(unsigned int *)(a2 + 12);
        do
        {
          v15 = *v12;
          if (*v12)
            *v15 += 2;
          *(v13 - 1) = v15;
          *v13 = 0;
          v13[1] = 0;
          v13 += 3;
          ++v12;
          --v14;
        }
        while (v14);
        HIDWORD(v18) = v11;
      }
    }
    (*(void (**)(_QWORD, uint64_t *, uint64_t, uint64_t))(**((_QWORD **)v7 + 1) + 16))(*((_QWORD *)v7 + 1), &v17, a3, a4);
    return WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v17, v16);
  }
  return result;
}

double WebCore::FileHandle::FileHandle(uint64_t a1, _DWORD **a2, int a3)
{
  _DWORD *v3;
  double result;

  v3 = *a2;
  if (*a2)
    *v3 += 2;
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 12) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 20) = 0;
  return result;
}

{
  _DWORD *v3;
  double result;

  v3 = *a2;
  if (*a2)
    *v3 += 2;
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 12) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 20) = 0;
  return result;
}

double WebCore::FileHandle::FileHandle(uint64_t a1, double *a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)a2;
  *a2 = 0.0;
  *(_QWORD *)a1 = v2;
  result = a2[1];
  *((_DWORD *)a2 + 3) = -1;
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  return result;
}

{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)a2;
  *a2 = 0.0;
  *(_QWORD *)a1 = v2;
  result = a2[1];
  *((_DWORD *)a2 + 3) = -1;
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  return result;
}

uint64_t WebCore::FileHandle::FileHandle(uint64_t result, _DWORD **a2, int a3, int a4)
{
  _DWORD *v4;

  v4 = *a2;
  if (*a2)
    *v4 += 2;
  *(_QWORD *)result = v4;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = -1;
  *(_DWORD *)(result + 16) = a4;
  *(_BYTE *)(result + 20) = 1;
  return result;
}

{
  _DWORD *v4;

  v4 = *a2;
  if (*a2)
    *v4 += 2;
  *(_QWORD *)result = v4;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = -1;
  *(_DWORD *)(result + 16) = a4;
  *(_BYTE *)(result + 20) = 1;
  return result;
}

uint64_t WebCore::FileHandle::FileHandle(uint64_t this, int a2)
{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 20) = 0;
  return this;
}

void WebCore::FileHandle::~FileHandle(WebCore::FileHandle *this, int *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  WebCore::FileHandle::close(this, a2);
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
}

uint64_t WebCore::FileHandle::close(WebCore::FileHandle *this, int *a2)
{
  if (!*((_BYTE *)this + 20) || *((_DWORD *)this + 3) == -1)
    return WTF::FileSystemImpl::closeFile((WebCore::FileHandle *)((char *)this + 12), a2);
  else
    return WTF::FileSystemImpl::unlockAndCloseFile((WTF::FileSystemImpl *)*((unsigned int *)this + 3));
}

uint64_t WebCore::FileHandle::operator=(uint64_t a1, int *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  WebCore::FileHandle::close((WebCore::FileHandle *)a1, a2);
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((_QWORD *)a2 + 1);
  a2[3] = -1;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 20) = *((_BYTE *)a2 + 20);
  *(_DWORD *)(a1 + 16) = a2[4];
  return a1;
}

BOOL WebCore::FileHandle::operator BOOL(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) != -1;
}

BOOL WebCore::FileHandle::open(WebCore::FileHandle *this, WTF **a2, const WTF::StringImpl *a3)
{
  int v3;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  int v10;

  v3 = (int)a3;
  if (*((_DWORD *)this + 3) != -1
    && WTF::equal(*a2, *(const WTF::StringImpl **)this, a3)
    && *((_DWORD *)this + 2) == v3)
  {
    return 1;
  }
  WebCore::FileHandle::close(this, (int *)a2);
  v8 = *a2;
  if (*a2)
    *(_DWORD *)v8 += 2;
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v7);
      v8 = *(WTF **)this;
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  *((_DWORD *)this + 2) = v3;
  if (!v8 || !*((_DWORD *)v8 + 1))
    return 0;
  v10 = *((_DWORD *)this + 3);
  if (v10 == -1)
  {
    if (*((_BYTE *)this + 20))
      v10 = WTF::FileSystemImpl::openAndLockFile();
    else
      v10 = WTF::FileSystemImpl::openFile();
    *((_DWORD *)this + 3) = v10;
  }
  return v10 != -1;
}

BOOL WebCore::FileHandle::open(WebCore::FileHandle *this)
{
  int v3;

  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
    return 0;
  v3 = *((_DWORD *)this + 3);
  if (v3 == -1)
  {
    if (*((_BYTE *)this + 20))
      v3 = WTF::FileSystemImpl::openAndLockFile();
    else
      v3 = WTF::FileSystemImpl::openFile();
    *((_DWORD *)this + 3) = v3;
  }
  return v3 != -1;
}

uint64_t WebCore::FileHandle::read(WebCore::FileHandle *this, void *a2)
{
  int v4;

  if (*(_QWORD *)this
    && *(_DWORD *)(*(_QWORD *)this + 4)
    && (*((_DWORD *)this + 3) != -1
     || (*((_BYTE *)this + 20) ? (v4 = WTF::FileSystemImpl::openAndLockFile()) : (v4 = WTF::FileSystemImpl::openFile()),
         *((_DWORD *)this + 3) = v4,
         v4 != -1)))
  {
    return WTF::FileSystemImpl::readFromFile();
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t WebCore::FileHandle::write(WebCore::FileHandle *a1)
{
  if (WebCore::FileHandle::open(a1))
    return WTF::FileSystemImpl::writeToFile();
  else
    return 0xFFFFFFFFLL;
}

char *WebCore::FileHandle::printf(WebCore::FileHandle *this, const char *__format, ...)
{
  size_t v4;
  char *result;
  void *v6;
  int v7;
  WTF *v8;
  _QWORD v9[129];
  va_list v10;
  va_list va;

  va_start(va, __format);
  va_copy((va_list)&v9[128], va);
  va_copy(v10, va);
  v4 = vsnprintf(0, 0, __format, va) + 1;
  v8 = (WTF *)v9;
  result = (char *)v9;
  if (v4 >= 0x401)
  {
    if (HIDWORD(v4))
    {
      __break(0xC471u);
      return result;
    }
    result = (char *)WTF::fastMalloc((WTF *)v4);
    v8 = (WTF *)result;
  }
  vsnprintf(result, v4, __format, v10);
  if (WebCore::FileHandle::open(this))
    v7 = WTF::FileSystemImpl::writeToFile();
  else
    v7 = -1;
  if (v9 != (_QWORD *)v8)
  {
    if (v8)
      WTF::fastFree(v8, v6);
  }
  return (char *)(v7 >= 0);
}

uint64_t WebCore::FileHandle::handle(WebCore::FileHandle *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  WTF *v7;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  if (*(_BYTE *)(a1 + 112))
  {
    v3 = *(_QWORD *)(a1 + 96);
    if ((v3 & 0x8000000000000) != 0)
    {
      v9 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
    v4 = *(_DWORD **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    if (v4)
    {
      if (v4[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      else
        --v4[2];
    }
    v5 = *(_DWORD **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v5)
    {
      if (v5[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      else
        --v5[2];
    }
    v6 = *(_DWORD **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v6)
    {
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
    }
    v7 = *(WTF **)(a1 + 48);
    if (v7)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  return a1;
}

WebCore::FileChooserSettings *WebCore::FileChooserSettings::FileChooserSettings(WebCore::FileChooserSettings *this, const WebCore::FileChooserSettings *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD **v15;
  uint64_t v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _DWORD **v20;
  uint64_t v21;
  _DWORD *v22;

  *(_WORD *)this = *(_WORD *)a2;
  v4 = *((unsigned int *)a2 + 5);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 5) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
      goto LABEL_28;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v4));
    *((_DWORD *)this + 4) = v4;
    *((_QWORD *)this + 1) = v8;
    v9 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v9)
    {
      v10 = (_DWORD **)*((_QWORD *)a2 + 1);
      v11 = 8 * v9;
      do
      {
        v12 = *v10;
        if (*v10)
          *v12 += 2;
        *v8++ = v12;
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  v5 = *((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1960C6490);
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
    *((_DWORD *)this + 8) = v5;
    *((_QWORD *)this + 3) = v13;
    v14 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v14)
    {
      v15 = (_DWORD **)*((_QWORD *)a2 + 3);
      v16 = 8 * v14;
      do
      {
        v17 = *v15;
        if (*v15)
          *v17 += 2;
        *v13++ = v17;
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
  }
  v6 = *((unsigned int *)a2 + 13);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 13) = v6;
  if ((_DWORD)v6)
  {
    if (!(v6 >> 29))
    {
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v6));
      *((_DWORD *)this + 12) = v6;
      *((_QWORD *)this + 5) = v18;
      v19 = *((unsigned int *)a2 + 13);
      if ((_DWORD)v19)
      {
        v20 = (_DWORD **)*((_QWORD *)a2 + 5);
        v21 = 8 * v19;
        do
        {
          v22 = *v20;
          if (*v20)
            *v22 += 2;
          *v18++ = v22;
          ++v20;
          v21 -= 8;
        }
        while (v21);
      }
      goto LABEL_4;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x1960C6488);
  }
LABEL_4:
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  return this;
}

uint64_t WebCore::DateComponents::parseMonth<unsigned char>(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  unsigned __int8 **v11;
  int v12;

  v4 = *a2;
  v5 = a2[1];
  if (v5)
  {
    v6 = (_DWORD)v4 + (_DWORD)v5;
    v7 = *a2;
    while (*v7 - 48 <= 9)
    {
      ++v7;
      if (!--v5)
      {
        LODWORD(v7) = v6;
        break;
      }
    }
  }
  else
  {
    v7 = *a2;
  }
  if (((_DWORD)v7 - (_DWORD)v4) < 4)
    return 0;
  v9 = WebCore::parseIntWithinLimits<unsigned char>(a2, (int)v7 - (int)v4, 1, 275760);
  if (!((unint64_t)v9 >> 32))
    return 0;
  *(_DWORD *)(a1 + 24) = (_DWORD)v9;
  v10 = a2[1];
  if (!v10)
    return 0;
  if (**a2 != 45)
    return 0;
  ++*a2;
  a2[1] = v10 - 1;
  v11 = WebCore::parseIntWithinLimits<unsigned char>(a2, 2u, 1, 12);
  if (!((unint64_t)v11 >> 32))
    return 0;
  v12 = *(_DWORD *)(a1 + 24);
  if (v12 < 1 || (int)v11 >= 10 && v12 >= 0x43530)
    return 0;
  *(_DWORD *)(a1 + 20) = (_DWORD)v11 - 1;
  *(_BYTE *)(a1 + 32) = 3;
  return 1;
}

uint64_t WebCore::DateComponents::parseYear<unsigned char>(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned __int8 **v9;

  v3 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v5 = (_DWORD)v3 + (_DWORD)v4;
    v6 = *a2;
    while (*v6 - 48 <= 9)
    {
      ++v6;
      if (!--v4)
      {
        LODWORD(v6) = v5;
        break;
      }
    }
  }
  else
  {
    v6 = *a2;
  }
  v7 = (_DWORD)v6 - (_DWORD)v3;
  if (v7 < 4)
    return 0;
  v9 = WebCore::parseIntWithinLimits<unsigned char>(a2, v7, 1, 275760);
  if (!((unint64_t)v9 >> 32))
    return 0;
  *(_DWORD *)(a1 + 24) = (_DWORD)v9;
  return 1;
}

unsigned __int8 **WebCore::parseIntWithinLimits<unsigned char>(unsigned __int8 **result, unsigned int a2, int a3, int a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v4 = (unint64_t)result[1];
  if (v4 < a2)
  {
LABEL_2:
    v5 = 0;
    v6 = 0;
    v7 = 0;
    return (unsigned __int8 **)(v6 | v5 | v7);
  }
  v8 = 0;
  if (!a2)
  {
LABEL_10:
    v7 = v8 & 0xFFFFFF00;
    v11 = v8;
    v12 = 0x100000000;
    if (v8 > a4)
    {
      v11 = 0;
      v12 = 0;
      v7 = 0;
    }
    v13 = v8 < a3;
    if (v8 >= a3)
      v5 = v11;
    else
      v5 = 0;
    if (v13)
      v6 = 0;
    else
      v6 = v12;
    if (v13)
      v7 = 0;
    return (unsigned __int8 **)(v6 | v5 | v7);
  }
  v9 = (unsigned __int8 *)(v4 - 1);
  while (v9 != (unsigned __int8 *)-1)
  {
    v10 = **result;
    if ((v10 - 48) > 9 || v8 > (int)((-2147483601 - v10) / 0xAu))
      goto LABEL_2;
    v8 = v10 + 10 * v8 - 48;
    ++*result;
    result[1] = v9--;
    if (!--a2)
      goto LABEL_10;
  }
  __break(1u);
  return result;
}

unsigned __int8 **WebCore::parseInt<unsigned char>(unsigned __int8 **result, unsigned int a2)
{
  unint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;

  v2 = (unint64_t)result[1];
  if (v2 >= a2)
  {
    v3 = 0;
    v6 = (unsigned __int8 *)(v2 - 1);
    while (v6 != (unsigned __int8 *)-1)
    {
      v7 = **result;
      if ((v7 - 48) > 9 || v3 > (int)((-2147483601 - v7) / 0xAu))
        goto LABEL_2;
      v3 = v7 + 10 * v3 - 48;
      ++*result;
      result[1] = v6--;
      if (!--a2)
      {
        v4 = v3 & 0xFFFFFF00;
        v3 = v3;
        v5 = 0x100000000;
        return (unsigned __int8 **)(v5 | v4 | v3);
      }
    }
    __break(1u);
  }
  else
  {
LABEL_2:
    v3 = 0;
    v4 = 0;
    v5 = 0;
    return (unsigned __int8 **)(v5 | v4 | v3);
  }
  return result;
}

uint64_t WebCore::DateComponents::parseMonth<char16_t>(uint64_t result, unsigned __int16 **a2)
{
  char *v2;
  unint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  int v8;
  unsigned __int16 *v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;

  v2 = (char *)*a2;
  v3 = (unint64_t)a2[1];
  if (v3)
  {
    v4 = (char *)*a2;
    v5 = (char *)a2[1];
    while (*(unsigned __int16 *)v4 - 48 <= 9)
    {
      v4 += 2;
      if (!--v5)
      {
        v4 = &v2[2 * v3];
        break;
      }
    }
  }
  else
  {
    v4 = (char *)*a2;
  }
  v6 = (unint64_t)(v4 - v2) >> 1;
  if (v6 >= 4 && v3 >= v6)
  {
    v8 = 0;
    v9 = (unsigned __int16 *)(v2 + 6);
    v10 = v3 - 3;
    do
    {
      if (v10 == -3)
      {
        __break(1u);
        return result;
      }
      v11 = *(unsigned __int16 *)v2;
      if ((v11 - 48) > 9 || v8 > (int)((-2147483601 - v11) / 0xAu))
        return 0;
      v8 = v11 + 10 * v8 - 48;
      v2 += 2;
      *a2 = v9 - 2;
      a2[1] = (unsigned __int16 *)(v10 + 2);
      ++v9;
      --v10;
      LODWORD(v6) = v6 - 1;
    }
    while ((_DWORD)v6);
    if ((v8 - 275761) >= 0xFFFBCAD0)
    {
      *(_DWORD *)(result + 24) = v8;
      if (v10 != -3 && *(_WORD *)v2 == 45)
      {
        *a2 = v9 - 2;
        a2[1] = (unsigned __int16 *)(v10 + 2);
        if (v10 < 0xFFFFFFFFFFFFFFFCLL)
        {
          v12 = *((unsigned __int16 *)v2 + 1);
          if ((v12 - 48) <= 9)
          {
            *a2 = v9 - 1;
            a2[1] = (unsigned __int16 *)(v10 + 1);
            v13 = *((unsigned __int16 *)v2 + 2);
            if ((v13 - 48) <= 9)
            {
              v14 = v13 + 10 * v12;
              *a2 = v9;
              a2[1] = (unsigned __int16 *)v10;
              if ((v14 - 541) >= 0xFFFFFFF4)
              {
                v15 = v14 - 528;
                if (v8 < 0x43530 || v15 <= 9)
                {
                  *(_DWORD *)(result + 20) = v15 - 1;
                  *(_BYTE *)(result + 32) = 3;
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::DateComponents::parseDate<unsigned char>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  unsigned __int8 **v13;
  int v14;
  BOOL v15;

  result = WebCore::DateComponents::parseMonth<unsigned char>(a1, (unsigned __int8 **)a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (!v5 || **(_BYTE **)a2 != 45)
      return 0;
    ++*(_QWORD *)a2;
    *(_QWORD *)(a2 + 8) = v5 - 1;
    v6 = *(int *)(a1 + 20);
    if ((_DWORD)v6 == 1)
    {
      v7 = *(_DWORD *)(a1 + 24);
      HIDWORD(v9) = -1030792151 * v7 + 85899344;
      LODWORD(v9) = HIDWORD(v9);
      v8 = v9 >> 4;
      LODWORD(v9) = HIDWORD(v9);
      v10 = (v9 >> 2) <= 0x28F5C28 && v8 >= 0xA3D70B;
      v11 = v10 ? 28 : 29;
      v12 = (v7 & 3) != 0 ? 28 : v11;
    }
    else
    {
      v12 = WebCore::daysInMonth[v6];
    }
    if ((v13 = WebCore::parseIntWithinLimits<unsigned char>((unsigned __int8 **)a2, 2u, 1, v12),
          (unint64_t)v13 >> 32)
      && (v14 = *(_DWORD *)(a1 + 24), v14 >= 1)
      && (v14 < 0x43530 || ((int)v13 >= 14 ? (v15 = *(_DWORD *)(a1 + 20) <= 7) : (v15 = 1), v15)))
    {
      *(_DWORD *)(a1 + 16) = (_DWORD)v13;
      result = 1;
      *(_BYTE *)(a1 + 32) = 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::DateComponents::parseDate<char16_t>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unsigned __int16 *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;

  result = WebCore::DateComponents::parseMonth<char16_t>(a1, (unsigned __int16 **)a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (!v5)
      return 0;
    v6 = *(unsigned __int16 **)a2;
    if (**(_WORD **)a2 != 45)
      return 0;
    *(_QWORD *)a2 = v6 + 1;
    *(_QWORD *)(a2 + 8) = v5 - 1;
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(int *)(a1 + 20);
    if ((_DWORD)v8 == 1)
    {
      HIDWORD(v10) = -1030792151 * v7 + 85899344;
      LODWORD(v10) = HIDWORD(v10);
      v9 = v10 >> 4;
      LODWORD(v10) = HIDWORD(v10);
      if ((v10 >> 2) <= 0x28F5C28 && v9 >= 0xA3D70B)
        v12 = 28;
      else
        v12 = 29;
      if ((v7 & 3) != 0)
        v12 = 28;
    }
    else
    {
      v12 = WebCore::daysInMonth[v8];
    }
    v13 = v5 - 3;
    if (v5 < 3
      || (v14 = v6[1], (v14 - 48) > 9)
      || (v15 = v5 - 2, v16 = v6[2], *(_QWORD *)a2 = v6 + 2, *(_QWORD *)(a2 + 8) = v15, (v16 - 48) > 9))
    {
      v18 = 0;
      v17 = 1;
    }
    else
    {
      v17 = 0;
      v18 = v16 + 10 * v14 - 528;
      *(_QWORD *)a2 = v6 + 3;
      *(_QWORD *)(a2 + 8) = v13;
    }
    result = 0;
    if (v18)
      v19 = v17;
    else
      v19 = 1;
    if (v18 > v12)
      v19 = 1;
    v20 = v19 ? 0 : v18;
    if ((v19 & 1) == 0 && v7 >= 1)
    {
      if (v7 >= 0x43530 && (int)v8 >= 8 && v20 > 0xD)
        return 0;
      *(_DWORD *)(a1 + 16) = v20;
      result = 1;
      *(_BYTE *)(a1 + 32) = 1;
    }
  }
  return result;
}

uint64_t WebCore::DateComponents::parseWeek<unsigned char>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  int v16;
  int v17;
  int v18;
  unsigned int v19;

  result = WebCore::DateComponents::parseYear<unsigned char>(a1, (unsigned __int8 **)a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (!v5)
      return 0;
    v6 = *(unsigned __int8 **)a2;
    if (**(_BYTE **)a2 != 45)
      return 0;
    *(_QWORD *)a2 = v6 + 1;
    *(_QWORD *)(a2 + 8) = v5 - 1;
    if (v5 == 1 || v6[1] != 87)
      return 0;
    *(_QWORD *)a2 = v6 + 2;
    *(_QWORD *)(a2 + 8) = v5 - 2;
    v7 = *(_DWORD *)(a1 + 24);
    v8 = 1374389535 * (v7 - 1);
    v9 = HIDWORD(v8);
    v8 >>= 63;
    v10 = v8 + ((int)v9 >> 5);
    v11 = (v7
         - 1
         - 100 * v10
         + (int)v8
         + ((int)v9 >> 7)
         + 5 * v10
         + ((char)(v7 - 1 - 100 * v10 + (((char)(v7 - 1 - 100 * v10) >> 13) & 3)) >> 2)
         + 43)
        % 7;
    if (v11 == 4)
    {
      v12 = 53;
    }
    else if (v11 == 3)
    {
      v12 = 52;
      if ((v7 & 3) == 0)
      {
        HIDWORD(v14) = -1030792151 * v7 + 85899344;
        LODWORD(v14) = HIDWORD(v14);
        v13 = v14 >> 4;
        LODWORD(v14) = HIDWORD(v14);
        if ((v14 >> 2) < 0x28F5C29 && v13 > 0xA3D70A)
          v12 = 52;
        else
          v12 = 53;
      }
    }
    else
    {
      v12 = 52;
    }
    if ((unint64_t)(v5 - 2) < 2)
      return 0;
    v16 = v6[2];
    if ((v16 - 48) > 9)
      return 0;
    *(_QWORD *)a2 = v6 + 3;
    *(_QWORD *)(a2 + 8) = v5 - 3;
    v17 = v6[3];
    if ((v17 - 48) <= 9
      && (v18 = v17 + 10 * v16, *(_QWORD *)a2 = v6 + 4, *(_QWORD *)(a2 + 8) = v5 - 4, v18 - 529 < v12)
      && ((v19 = v18 - 528, v7 != 275760) || v19 <= 0x25))
    {
      *(_DWORD *)(a1 + 28) = v19;
      *(_BYTE *)(a1 + 32) = 5;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::DateComponents::parseWeek<char16_t>(uint64_t result, unsigned __int16 **a2)
{
  char *v2;
  unint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  int v8;
  unsigned __int16 *v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  int v19;
  int v20;
  int v21;
  unsigned int v22;

  v2 = (char *)*a2;
  v3 = (unint64_t)a2[1];
  if (v3)
  {
    v4 = (char *)*a2;
    v5 = (char *)a2[1];
    while (*(unsigned __int16 *)v4 - 48 <= 9)
    {
      v4 += 2;
      if (!--v5)
      {
        v4 = &v2[2 * v3];
        break;
      }
    }
  }
  else
  {
    v4 = (char *)*a2;
  }
  v6 = (unint64_t)(v4 - v2) >> 1;
  if (v6 >= 4 && v3 >= v6)
  {
    v8 = 0;
    v9 = (unsigned __int16 *)(v2 + 8);
    v10 = v3 - 4;
    do
    {
      if (v10 == -4)
      {
        __break(1u);
        return result;
      }
      v11 = *(unsigned __int16 *)v2;
      if ((v11 - 48) > 9 || v8 > (int)((-2147483601 - v11) / 0xAu))
        return 0;
      v8 = v11 + 10 * v8 - 48;
      v2 += 2;
      *a2 = v9 - 3;
      a2[1] = (unsigned __int16 *)(v10 + 3);
      ++v9;
      --v10;
      LODWORD(v6) = v6 - 1;
    }
    while ((_DWORD)v6);
    if ((v8 - 275761) >= 0xFFFBCAD0)
    {
      *(_DWORD *)(result + 24) = v8;
      if (v10 != -4 && *(_WORD *)v2 == 45)
      {
        *a2 = v9 - 3;
        a2[1] = (unsigned __int16 *)(v10 + 3);
        if (v10 != -3 && *((_WORD *)v2 + 1) == 87)
        {
          *a2 = v9 - 2;
          a2[1] = (unsigned __int16 *)(v10 + 2);
          v12 = (v8 - 1) % 0x64u + (v8 - 1) / 0x190u + 5 * ((v8 - 1) / 0x64u) + (((v8 - 1) % 0x64u) >> 2) + 43;
          v13 = 9363
              * (unsigned __int16)((v8 - 1) % 0x64u
                                 + (v8 - 1) / 0x190u
                                 + 5 * ((v8 - 1) / 0x64u)
                                 + (((v8 - 1) % 0x64u) >> 2)
                                 + 43);
          v14 = (unsigned __int16)(v12
                                 - 7 * ((((unsigned __int16)(v12 - HIWORD(v13)) >> 1) + HIWORD(v13)) >> 2));
          if (v14 == 4)
          {
            v15 = 53;
          }
          else if (v14 == 3)
          {
            v15 = 52;
            if ((v8 & 3) == 0)
            {
              HIDWORD(v17) = -1030792151 * v8;
              LODWORD(v17) = -1030792151 * v8;
              v16 = v17 >> 4;
              HIDWORD(v17) = -1030792151 * v8;
              LODWORD(v17) = -1030792151 * v8;
              if ((v17 >> 2) < 0x28F5C29 && v16 > 0xA3D70A)
                v15 = 52;
              else
                v15 = 53;
            }
          }
          else
          {
            v15 = 52;
          }
          if (v10 + 2 >= 2)
          {
            v19 = *((unsigned __int16 *)v2 + 2);
            if ((v19 - 48) <= 9)
            {
              *a2 = v9 - 1;
              a2[1] = (unsigned __int16 *)(v10 + 1);
              v20 = *((unsigned __int16 *)v2 + 3);
              if ((v20 - 48) <= 9)
              {
                v21 = v20 + 10 * v19;
                *a2 = v9;
                a2[1] = (unsigned __int16 *)v10;
                if (v21 - 529 < v15)
                {
                  v22 = v21 - 528;
                  if (v8 != 275760 || v22 <= 0x25)
                  {
                    *(_DWORD *)(result + 28) = v22;
                    *(_BYTE *)(result + 32) = 5;
                    return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

unint64_t WebCore::DateComponents::parseTime<unsigned char>(uint64_t a1, unsigned __int8 **a2)
{
  unint64_t v2;
  unint64_t result;
  unsigned __int8 *v5;
  int v6;
  int v7;
  unsigned int v9;
  int v10;
  unsigned __int8 **v11;
  int v12;
  _BYTE *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  BOOL v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  __int128 v28;

  v2 = (unint64_t)a2[1];
  if (v2 < 2)
    return 0;
  v5 = *a2;
  v6 = **a2;
  if ((v6 - 48) > 9)
    return 0;
  *a2 = v5 + 1;
  a2[1] = (unsigned __int8 *)(v2 - 1);
  v7 = v5[1];
  if ((v7 - 48) > 9)
    return 0;
  result = 0;
  v9 = v7 + 10 * v6 - 528;
  *a2 = v5 + 2;
  a2[1] = (unsigned __int8 *)(v2 - 2);
  if (v9 <= 0x17)
    v10 = v7 + 10 * v6 - 528;
  else
    v10 = 0;
  if (v2 == 2 || v9 > 0x17)
    return result;
  if (v5[2] != 58)
    return 0;
  *a2 = v5 + 3;
  a2[1] = (unsigned __int8 *)(v2 - 3);
  v11 = WebCore::parseIntWithinLimits<unsigned char>(a2, 2u, 0, 59);
  result = 0;
  if ((unint64_t)v11 >> 32)
  {
    v28 = *(_OWORD *)a2;
    v12 = DWORD2(v28);
    if (*((_QWORD *)&v28 + 1))
    {
      if (*(_BYTE *)v28 == 58)
      {
        *(_QWORD *)&v28 = v28 + 1;
        --*((_QWORD *)&v28 + 1);
        result = (unint64_t)WebCore::parseIntWithinLimits<unsigned char>((unsigned __int8 **)&v28, 2u, 0, 59);
        if ((result & 0xFF00000000) != 0)
        {
          v27 = result;
          v13 = (_BYTE *)v28;
          v14 = (unint64_t)a2[1];
          v15 = v28 - *a2;
          if (v14 < v15)
          {
LABEL_42:
            __break(1u);
            return result;
          }
          *a2 += v15;
          a2[1] = (unsigned __int8 *)(v14 - v15);
          v16 = *((_QWORD *)&v28 + 1);
          if (*((_QWORD *)&v28 + 1) && *v13 == 46)
          {
            v17 = *((_QWORD *)&v28 + 1) - 1;
            v18 = (_DWORD)v13 + 1;
            *(_QWORD *)&v28 = v13 + 1;
            --*((_QWORD *)&v28 + 1);
            if (v16 == 1)
            {
              LODWORD(v13) = (_DWORD)v13 + 1;
            }
            else
            {
              v19 = (_DWORD)v13++ + v16;
              while (*v13 - 48 <= 9)
              {
                ++v13;
                if (!--v17)
                {
                  LODWORD(v13) = v19;
                  break;
                }
              }
            }
            v26 = (_DWORD)v13 - v18;
            v12 = (_DWORD)v13 - v18;
            v20 = result;
            switch(v12)
            {
              case 0:
                goto LABEL_29;
              case 1:
                result = (unint64_t)WebCore::parseInt<unsigned char>((unsigned __int8 **)&v28, 1u);
                if (!HIDWORD(result))
                  goto LABEL_42;
                v21 = (100 * result);
                goto LABEL_34;
              case 2:
                result = (unint64_t)WebCore::parseInt<unsigned char>((unsigned __int8 **)&v28, 2u);
                if (!HIDWORD(result))
                  goto LABEL_42;
                v21 = (10 * result);
LABEL_34:
                result = result & 0x100000000 | v21;
                break;
              case 3:
                result = (unint64_t)WebCore::parseInt<unsigned char>((unsigned __int8 **)&v28, 3u);
                break;
              default:
                return 0;
            }
            v22 = (v26 + 1);
            v23 = a2[1];
            v24 = (unint64_t)v23 >= v22;
            v25 = &v23[-v22];
            if (!v24)
              goto LABEL_42;
            *a2 += v22;
            a2[1] = v25;
            v12 = result;
            if ((result & 0xFFFFFFFFFFLL) <= 0x100000000)
              v12 = 0;
          }
          else
          {
            v12 = 0;
          }
          v20 = v27;
        }
        else
        {
          v12 = 0;
          v20 = 0;
        }
LABEL_29:
        *(_DWORD *)(a1 + 8) = (_DWORD)v11;
        *(_DWORD *)(a1 + 12) = v10;
        *(_DWORD *)a1 = v12;
        *(_DWORD *)(a1 + 4) = v20;
        result = 1;
        *(_BYTE *)(a1 + 32) = 4;
        return result;
      }
      v12 = 0;
    }
    v20 = 0;
    v10 = v9;
    goto LABEL_29;
  }
  return result;
}

uint64_t WebCore::DateComponents::parseTime<char16_t>(uint64_t a1, unsigned __int16 **a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned __int16 *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;

  v2 = (unint64_t)a2[1];
  v3 = v2 - 2;
  if (v2 < 2)
    return 0;
  v4 = *a2;
  v5 = **a2;
  if ((v5 - 48) > 9)
    return 0;
  v6 = v4[1];
  *a2 = v4 + 1;
  a2[1] = (unsigned __int16 *)(v2 - 1);
  if ((v6 - 48) > 9)
    return 0;
  v7 = 0;
  v8 = v6 + 10 * v5 - 528;
  *a2 = v4 + 2;
  a2[1] = (unsigned __int16 *)v3;
  if (v8 <= 0x17)
    v9 = v8;
  else
    v9 = 0;
  if (v2 == 2 || v8 > 0x17)
    return v7;
  if (v4[2] != 58)
    return 0;
  *a2 = v4 + 3;
  a2[1] = (unsigned __int16 *)(v2 - 3);
  if (v3 < 3)
    return 0;
  v10 = v4[3];
  if ((v10 - 48) > 9)
    return 0;
  v11 = v4[4];
  *a2 = v4 + 4;
  a2[1] = (unsigned __int16 *)(v2 - 4);
  if ((v11 - 48) > 9)
    return 0;
  v7 = 0;
  v12 = v11 + 10 * v10 - 528;
  *a2 = v4 + 5;
  a2[1] = (unsigned __int16 *)(v2 - 5);
  if (v12 <= 0x3B)
  {
    if (v2 == 5)
      goto LABEL_22;
    if (v2 - 5 < 3 || v4[5] != 58)
    {
      v9 = v8;
      v16 = v11 + 10 * v10 - 528;
      v15 = 0;
LABEL_24:
      *(_DWORD *)(a1 + 8) = v16;
      *(_DWORD *)(a1 + 12) = v9;
      *(_DWORD *)a1 = 0;
      *(_DWORD *)(a1 + 4) = v15;
      v7 = 1;
      *(_BYTE *)(a1 + 32) = 4;
      return v7;
    }
    v13 = v4[6];
    if ((v13 - 48) > 9 || (v14 = v4[7], (v14 - 48) > 9))
    {
LABEL_22:
      v15 = 0;
      v9 = v8;
      goto LABEL_23;
    }
    v15 = v14 + 10 * v13 - 528;
    if (v15 > 0x3B)
    {
      v15 = 0;
LABEL_23:
      v16 = v12;
      goto LABEL_24;
    }
    *a2 = v4 + 8;
    a2[1] = (unsigned __int16 *)(v2 - 8);
    if (v2 == 8 || v4[8] != 46)
      goto LABEL_23;
    v17 = v4 + 9;
    v18 = v2 - 9;
    if (v2 == 9)
    {
      v19 = (char *)(v4 + 9);
    }
    else
    {
      v19 = (char *)(v4 + 9);
      v20 = v18;
      while (*(unsigned __int16 *)v19 - 48 <= 9)
      {
        v19 += 2;
        if (!--v20)
        {
          v19 = (char *)&v17[v18];
          break;
        }
      }
    }
    v21 = v19 - (char *)v17;
    if ((v21 >> 1) <= 3)
      return ((uint64_t (*)(void))((char *)&loc_1960C73D4 + 4 * byte_1969F64D1[(v21 >> 1)]))();
    return 0;
  }
  return v7;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;

  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 8);
  if ((v7 & 0x80000000) != 0)
  {
    v20 = -v7;
    v8 = 1;
    do
    {
      ++v8;
      v21 = v20 >= 0xA;
      v20 /= 0xAu;
    }
    while (v21);
  }
  else
  {
    v8 = 0;
    do
    {
      ++v8;
      v9 = v7 > 9;
      v7 /= 0xAu;
    }
    while (v9);
  }
  if (*(_DWORD *)(v6 + 4) > v8)
    v8 = *(_DWORD *)(v6 + 4);
  v10 = *(_QWORD *)a4;
  v11 = *(_DWORD *)(a4 + 8);
  if ((v11 & 0x80000000) != 0)
  {
    v22 = -v11;
    v12 = 1;
    do
    {
      ++v12;
      v21 = v22 >= 0xA;
      v22 /= 0xAu;
    }
    while (v21);
  }
  else
  {
    v12 = 0;
    do
    {
      ++v12;
      v9 = v11 > 9;
      v11 /= 0xAu;
    }
    while (v9);
  }
  if (*(_DWORD *)(v10 + 4) > v12)
    v12 = *(_DWORD *)(v10 + 4);
  if ((v12 & 0x80000000) != 0)
    goto LABEL_22;
  v13 = 0;
  v14 = __OFADD__(v12, 1);
  v15 = v12 + 1;
  v16 = v14;
  if ((v8 & 0x80000000) == 0 && (v16 & 1) == 0)
  {
    v17 = v8 + v15;
    if (!__OFADD__(v8, v15) && (v17 & 0x80000000) == 0)
    {
      v18 = *(_QWORD *)(a2 + 8);
      v19 = *(_QWORD *)(a4 + 8);
      result = WTF::tryFastCompactMalloc((WTF *)(v17 + 20));
      v13 = v23;
      if (v23)
      {
        *(_DWORD *)v23 = 2;
        *(_DWORD *)(v23 + 4) = v17;
        *(_QWORD *)(v23 + 8) = v23 + 20;
        *(_DWORD *)(v23 + 16) = 4;
        result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>((_BYTE *)(v23 + 20), v6, v18, a3, v10, v19);
      }
      goto LABEL_21;
    }
LABEL_22:
    v13 = 0;
  }
LABEL_21:
  *v5 = v13;
  return result;
}

_QWORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>(_QWORD *result, uint64_t a2, char a3, uint64_t a4, char a5, _DWORD *a6)
{
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  BOOL v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  _DWORD *v39;
  uint64_t v40;

  v7 = *(_DWORD **)a2;
  v8 = *(_DWORD *)(a2 + 8);
  if ((v8 & 0x80000000) != 0)
  {
    v32 = -v8;
    v9 = 1;
    do
    {
      ++v9;
      v33 = v32 >= 0xA;
      v32 /= 0xAu;
    }
    while (v33);
  }
  else
  {
    v9 = 0;
    do
    {
      ++v9;
      v10 = v8 > 9;
      v8 /= 0xAu;
    }
    while (v10);
  }
  if (v7[1] > v9)
    v9 = v7[1];
  v11 = *(_QWORD *)a4;
  v12 = *(_DWORD *)(a4 + 8);
  if ((v12 & 0x80000000) != 0)
  {
    v34 = -v12;
    v13 = 1;
    do
    {
      ++v13;
      v33 = v34 >= 0xA;
      v34 /= 0xAu;
    }
    while (v33);
  }
  else
  {
    v13 = 0;
    do
    {
      ++v13;
      v10 = v12 > 9;
      v12 /= 0xAu;
    }
    while (v10);
  }
  if (*(_DWORD *)(v11 + 4) > v13)
    v13 = *(_DWORD *)(v11 + 4);
  v14 = a6[2];
  if ((v14 & 0x80000000) != 0)
  {
    v35 = -v14;
    v15 = 1;
    do
    {
      ++v15;
      v33 = v35 >= 0xA;
      v35 /= 0xAu;
    }
    while (v33);
  }
  else
  {
    v15 = 0;
    do
    {
      ++v15;
      v10 = v14 > 9;
      v14 /= 0xAu;
    }
    while (v10);
  }
  if (*(_DWORD *)(*(_QWORD *)a6 + 4) > v15)
    v15 = *(_DWORD *)(*(_QWORD *)a6 + 4);
  if ((v15 & 0x80000000) != 0)
    goto LABEL_41;
  v16 = 0;
  v17 = __OFADD__(v15, 1);
  v18 = v15 + 1;
  v19 = v17;
  if ((v13 & 0x80000000) != 0 || (v19 & 1) != 0)
    goto LABEL_40;
  v17 = __OFADD__(v13, v18);
  v20 = v13 + v18;
  if (v17)
    goto LABEL_41;
  v16 = 0;
  v17 = __OFADD__(v20, 1);
  v21 = v20 + 1;
  v22 = v17;
  if ((v9 & 0x80000000) != 0 || (v22 & 1) != 0)
    goto LABEL_40;
  v23 = v9 + v21;
  if (__OFADD__(v9, v21))
    goto LABEL_41;
  if (!(_DWORD)v23)
  {
    v16 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_40;
  }
  if ((v23 & 0x80000000) != 0)
  {
LABEL_41:
    v16 = 0;
    goto LABEL_40;
  }
  v37 = *(_QWORD *)a6;
  v38 = result;
  v25 = *(_QWORD *)(a2 + 8);
  v26 = *(_QWORD *)(a4 + 8);
  v27 = *((_QWORD *)a6 + 1);
  WTF::tryFastCompactMalloc((WTF *)(v23 + 20));
  v16 = v39;
  if (v39)
  {
    v28 = v39 + 5;
    *v39 = 2;
    v16[1] = v23;
    *((_QWORD *)v16 + 1) = v16 + 5;
    v16[4] = 4;
    v39 = v7;
    v40 = v25;
    WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(&v39, (_BYTE *)v16 + 20);
    v29 = v40;
    if ((v40 & 0x80000000) != 0)
    {
      v36 = -(int)v40;
      v30 = 1;
      do
      {
        ++v30;
        v33 = v36 >= 0xA;
        v36 /= 0xAu;
      }
      while (v33);
    }
    else
    {
      v30 = 0;
      do
      {
        ++v30;
        v10 = v29 > 9;
        v29 /= 0xAu;
      }
      while (v10);
    }
    LODWORD(v31) = v39[1];
    if (v31 <= v30)
      v31 = v30;
    else
      v31 = v31;
    *((_BYTE *)v28 + v31) = a3;
    WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>((_BYTE *)v28 + v31 + 1, v11, v26, a5, v37, v27);
  }
  result = v38;
LABEL_40:
  *result = v16;
  return result;
}

_QWORD *WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>(_QWORD *result, unsigned int a2, int a3, uint64_t a4, unsigned __int8 *a5, unsigned int a6)
{
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  _BYTE *v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  _WORD *v23;
  int8x16_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  size_t v32;
  unsigned int v33;
  uint64_t v34;
  __int128 v35;
  char *v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  unsigned int v44;
  unsigned int v45;
  _WORD *v46;
  unsigned int v47;
  uint64_t v48;
  __int16 v49;
  _WORD *v50;
  uint64_t v51;
  _WORD *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int128 *v59;
  unsigned __int128 *v60;
  unsigned __int128 v61;
  char v62;
  _QWORD v63[3];
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;

  v10 = result;
  v63[2] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if (a2)
    {
      if (a2 <= 0x7FFFFFEF)
      {
        result = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
        v11 = v63[0];
        if (v63[0])
        {
          v23 = (_WORD *)(v63[0] + 20);
          *(_DWORD *)v63[0] = 2;
          *(_DWORD *)(v11 + 4) = a2;
          *(_QWORD *)(v11 + 8) = v11 + 20;
          *(_DWORD *)(v11 + 16) = 0;
          if (a4)
          {
            v24 = *(int8x16_t **)(a4 + 8);
            v25 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              v26 = (char *)&v23[v25];
              if (v25 >= 0x40)
              {
                v27 = (char *)&v23[v25 & 0xFFFFFFC0];
                v35 = 0uLL;
                v36 = (char *)(v11 + 20);
                do
                {
                  v64.val[0] = *v24;
                  v37 = v24[1];
                  v65.val[0] = v24[2];
                  v38 = v24[3];
                  v24 += 4;
                  v39 = v38;
                  v65.val[1] = 0uLL;
                  v66.val[0] = v37;
                  v64.val[1] = 0uLL;
                  v40 = v36;
                  vst2q_s8(v40, v64);
                  v40 += 32;
                  v66.val[1] = 0uLL;
                  vst2q_s8(v40, v66);
                  v41 = v36 + 64;
                  vst2q_s8(v41, v65);
                  v42 = v36 + 96;
                  vst2q_s8(v42, *(int8x16x2_t *)(&v35 - 1));
                  v36 += 128;
                }
                while (v36 != v27);
              }
              else
              {
                v27 = (char *)(v11 + 20);
              }
              while (v27 != v26)
              {
                v43 = v24->u8[0];
                v24 = (int8x16_t *)((char *)v24 + 1);
                *(_WORD *)v27 = v43;
                v27 += 2;
              }
            }
            else if ((_DWORD)v25 == 1)
            {
              *v23 = v24->i16[0];
            }
            else if ((_DWORD)v25)
            {
              result = memcpy((void *)(v11 + 20), v24, 2 * v25);
            }
            v34 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v34 = 0;
          }
          if ((a6 & 0x80000000) != 0)
          {
            v58 = -a6;
            v44 = 1;
            do
            {
              ++v44;
              v21 = v58 >= 0xA;
              v58 /= 0xAu;
            }
            while (v21);
          }
          else
          {
            v44 = 0;
            v45 = a6;
            do
            {
              ++v44;
              v18 = v45 > 9;
              v45 /= 0xAu;
            }
            while (v18);
          }
          v46 = &v23[v34];
          v47 = *((_DWORD *)a5 + 1);
          v21 = v47 >= v44;
          v48 = v47 - v44;
          if ((_DWORD)v48 != 0 && v21)
          {
            v49 = *a5;
            v50 = v46;
            v51 = v48;
            do
            {
              *v50++ = v49;
              --v51;
            }
            while (v51);
          }
          else
          {
            v48 = 0;
          }
          v52 = &v46[v48];
          if ((a6 & 0x80000000) != 0)
          {
            v54 = -a6;
            v55 = 12;
            do
            {
              *((_BYTE *)v63 + v55--) = (v54 % 0xA) | 0x30;
              v18 = v54 > 9;
              v54 /= 0xAu;
            }
            while (v18);
            *((_BYTE *)v63 + v55) = 45;
            if (v55 + 2 <= 14)
            {
              do
              {
                *v52++ = *((unsigned __int8 *)v63 + v55);
                v18 = v55++ < 12;
              }
              while (v18);
            }
          }
          else
          {
            v53 = 0;
            do
            {
              *((_BYTE *)&v63[1] + v53-- + 4) = (a6 % 0xA) | 0x30;
              v18 = a6 > 9;
              a6 /= 0xAu;
            }
            while (v18);
            if (v53 + 14 <= 13)
            {
              do
              {
                *v52++ = *((unsigned __int8 *)&v63[1] + v53 + 5);
                v21 = __CFADD__(v53++, 1);
              }
              while (!v21);
            }
          }
        }
        goto LABEL_63;
      }
LABEL_65:
      v11 = 0;
      goto LABEL_63;
    }
LABEL_64:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_63;
  }
  if (!a2)
    goto LABEL_64;
  if ((a2 & 0x80000000) != 0)
    goto LABEL_65;
  result = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
  v11 = v63[0];
  if (!v63[0])
    goto LABEL_63;
  v12 = (_BYTE *)(v63[0] + 20);
  *(_DWORD *)v63[0] = 2;
  *(_DWORD *)(v11 + 4) = a2;
  *(_QWORD *)(v11 + 8) = v11 + 20;
  *(_DWORD *)(v11 + 16) = 4;
  if (a4)
  {
    v13 = *(_BYTE **)(a4 + 8);
    v14 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v14)
      {
        if ((_DWORD)v14 == 1)
          *v12 = *v13;
        else
          memcpy((void *)(v11 + 20), v13, v14);
      }
    }
    else
    {
      if (v14 < 0x10)
      {
        v59 = (unsigned __int128 *)(v11 + 20);
      }
      else
      {
        v59 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
        v60 = (unsigned __int128 *)(v11 + 20);
        do
        {
          v61 = (unsigned __int128)vld2q_s8(v13);
          v13 += 32;
          *v60++ = v61;
        }
        while (v60 != v59);
      }
      while (v59 != (unsigned __int128 *)&v12[v14])
      {
        v62 = *v13;
        v13 += 2;
        *(_BYTE *)v59 = v62;
        v59 = (unsigned __int128 *)((char *)v59 + 1);
      }
    }
    v15 = *(unsigned int *)(a4 + 4);
    if ((a6 & 0x80000000) == 0)
      goto LABEL_11;
LABEL_35:
    v33 = -a6;
    v16 = 1;
    do
    {
      ++v16;
      v21 = v33 >= 0xA;
      v33 /= 0xAu;
    }
    while (v21);
    goto LABEL_13;
  }
  v15 = 0;
  if ((a6 & 0x80000000) != 0)
    goto LABEL_35;
LABEL_11:
  v16 = 0;
  v17 = a6;
  do
  {
    ++v16;
    v18 = v17 > 9;
    v17 /= 0xAu;
  }
  while (v18);
LABEL_13:
  v19 = &v12[v15];
  v20 = *((_DWORD *)a5 + 1);
  v21 = v20 >= v16;
  v22 = v20 - v16;
  if ((_DWORD)v22 != 0 && v21)
  {
    v28 = v19;
    v29 = v22;
    do
    {
      *v28++ = *a5;
      --v29;
    }
    while (v29);
  }
  else
  {
    v22 = 0;
  }
  result = &v19[v22];
  v30 = 0;
  if ((a6 & 0x80000000) != 0)
  {
    v56 = -a6;
    do
    {
      *((_BYTE *)&v63[1] + v30-- + 4) = (v56 % 0xA) | 0x30;
      v18 = v56 > 9;
      v56 /= 0xAu;
    }
    while (v18);
    v57 = v30 + 12;
    v31 = (char *)&v63[1] + v30 + 4;
    *v31 = 45;
    if (v30 + 14 <= 14)
    {
      if (v57 <= 12)
        v57 = 12;
      v32 = v57 - v30 - 11;
      goto LABEL_30;
    }
  }
  else
  {
    do
    {
      *((_BYTE *)&v63[1] + v30-- + 4) = (a6 % 0xA) | 0x30;
      v18 = a6 > 9;
      a6 /= 0xAu;
    }
    while (v18);
    if (v30 + 14 <= 13)
    {
      v31 = (char *)&v63[1] + v30 + 5;
      v32 = -v30;
LABEL_30:
      result = memcpy(result, v31, v32);
    }
  }
LABEL_63:
  *v10 = v11;
  return result;
}

uint64_t WebCore::FrameRateMonitor::update(WebCore::FrameRateMonitor *this)
{
  uint64_t result;
  double v3;
  double v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  double *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double *v28;
  double v29;
  double *v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  double v42;
  unint64_t v43;
  _QWORD v44[4];

  ++*((_QWORD *)this + 126);
  result = WTF::MonotonicTime::now(this);
  v4 = v3;
  v5 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  if (v5 != v6)
  {
    v7 = *((_QWORD *)this + 2);
    if (!v6)
      v7 = *((unsigned int *)this + 8);
    v3 = *(double *)(*((_QWORD *)this + 3) + 8 * v7 - 8);
  }
  v8 = *((double *)this + 125);
  if (v8 != 0.0 && v4 - v3 > 3.0 / v8)
  {
    v9 = *((_QWORD *)this + 126);
    v10 = *(_QWORD *)this;
    *(double *)v44 = v4;
    *(double *)&v44[1] = v3;
    *(double *)&v44[2] = v8;
    v44[3] = v9;
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 16))(v10, v44);
    v5 = *((_QWORD *)this + 1);
    v6 = *((_QWORD *)this + 2);
  }
  if (v5)
  {
    if (v6 + 1 != v5)
      goto LABEL_30;
    LODWORD(v11) = *((_DWORD *)this + 8);
  }
  else
  {
    v11 = *((unsigned int *)this + 8);
    if (v6)
    {
      if (v6 != v11 - 1)
        goto LABEL_30;
    }
    else
    {
      if ((_DWORD)v11)
        goto LABEL_30;
      v6 = 0;
    }
  }
  v12 = v11;
  v13 = (char *)*((_QWORD *)this + 3);
  v14 = ((unint64_t)v11 >> 2) + v11;
  if (v14 <= 0xF)
    v14 = 15;
  if (v14 < 0x78)
  {
    v16 = (char *)this + 40;
    *((_QWORD *)this + 3) = (char *)this + 40;
    *((_DWORD *)this + 8) = 120;
  }
  else
  {
    if (v14 >= 0x1FFFFFFF)
    {
      __break(0xC471u);
      JUMPOUT(0x1960C8308);
    }
    v15 = v14 + 1;
    v16 = (char *)WTF::fastMalloc((WTF *)(8 * (v14 + 1)));
    *((_DWORD *)this + 8) = v15;
    *((_QWORD *)this + 3) = v16;
    v5 = *((_QWORD *)this + 1);
    v6 = *((_QWORD *)this + 2);
  }
  if (v5 <= v6)
  {
    result = (uint64_t)memcpy(&v16[8 * v5], &v13[8 * v5], 8 * v6 - 8 * v5);
  }
  else
  {
    memcpy(v16, v13, 8 * v6);
    v17 = *((_QWORD *)this + 1);
    v18 = v17 - v12 + *((unsigned int *)this + 8);
    result = (uint64_t)memcpy((void *)(*((_QWORD *)this + 3) + 8 * v18), &v13[8 * v17], 8 * v12 - 8 * v17);
    *((_QWORD *)this + 1) = v18;
  }
  if ((char *)this + 40 != v13 && v13)
  {
    if (*((char **)this + 3) == v13)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
    }
    result = WTF::fastFree((WTF *)v13, v19);
  }
LABEL_30:
  v20 = *((_QWORD *)this + 2);
  v21 = (double *)*((_QWORD *)this + 3);
  v21[v20] = v4;
  v22 = *((unsigned int *)this + 8);
  if (v20 == v22 - 1)
    v23 = 0;
  else
    v23 = v20 + 1;
  *((_QWORD *)this + 2) = v23;
  v24 = *((_QWORD *)this + 1);
  if (v24 <= v23)
    v25 = 0;
  else
    v25 = v22;
  v26 = v23 + v25;
  v27 = v26 - v24;
  if (v26 != v24)
  {
    v28 = (double *)((char *)this + 40);
    v29 = v4 + -2.0;
    v30 = v21;
    while (1)
    {
      v31 = *((_QWORD *)this + 1);
      if (v31 == v23)
      {
        __break(0xC471u);
        JUMPOUT(0x1960C82D8);
      }
      v32 = v30[v31];
      if (v31 == v22 - 1)
        v33 = 0;
      else
        v33 = v31 + 1;
      *((_QWORD *)this + 1) = v33;
      if (v29 >= v32)
        goto LABEL_67;
      if (v33)
      {
        if (v23 + 1 == v33)
          goto LABEL_50;
      }
      else if (v23)
      {
        if (v23 == v22 - 1)
          goto LABEL_50;
      }
      else if (!v22)
      {
LABEL_50:
        v34 = v22 + (v22 >> 2);
        if (v34 <= 0xF)
          v34 = 15;
        if (v34 < 0x78)
        {
          *((_QWORD *)this + 3) = v28;
          *((_DWORD *)this + 8) = 120;
          v36 = (char *)this + 40;
        }
        else
        {
          if (v34 >= 0x1FFFFFFF)
          {
            __break(0xC471u);
            JUMPOUT(0x1960C8300);
          }
          v35 = v34 + 1;
          v36 = (char *)WTF::fastMalloc((WTF *)(8 * (v34 + 1)));
          *((_DWORD *)this + 8) = v35;
          *((_QWORD *)this + 3) = v36;
          v33 = *((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
        }
        if (v33 <= v23)
        {
          result = (uint64_t)memcpy(&v36[8 * v33], &v30[v33], 8 * v23 - 8 * v33);
        }
        else
        {
          memcpy(v36, v30, 8 * v23);
          v37 = *((_QWORD *)this + 1);
          v38 = v37 - v22 + *((unsigned int *)this + 8);
          result = (uint64_t)memcpy((void *)(*((_QWORD *)this + 3) + 8 * v38), &v30[v37], 8 * v22 - 8 * v37);
          *((_QWORD *)this + 1) = v38;
        }
        v21 = (double *)*((_QWORD *)this + 3);
        if (v28 != v30)
        {
          if (v21 == v30)
          {
            *((_QWORD *)this + 3) = 0;
            *((_DWORD *)this + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v30, v39);
          v21 = (double *)*((_QWORD *)this + 3);
        }
      }
      v40 = *((_QWORD *)this + 2);
      v21[v40] = v32;
      v22 = *((unsigned int *)this + 8);
      if (v40 == v22 - 1)
        v23 = 0;
      else
        v23 = v40 + 1;
      *((_QWORD *)this + 2) = v23;
      v30 = v21;
LABEL_67:
      if (!--v27)
      {
        v24 = *((_QWORD *)this + 1);
        break;
      }
    }
  }
  if (v24 == v23)
  {
    __break(0xC471u);
    JUMPOUT(0x1960C82F8);
  }
  if (v23)
    v41 = v23;
  else
    v41 = v22;
  v42 = v21[v41 - 1] - v21[v24];
  if (v42 > 1.0)
  {
    if (v24 <= v23)
      v43 = 0;
    else
      v43 = v22;
    *((double *)this + 125) = (double)(v23 + v43 - v24) / v42;
  }
  return result;
}

uint64_t WebCore::unitVectorForScrollDirection(uint64_t result)
{
  if (result >= 4)
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::keyboardScrollingKeyForKeyboardEvent(WebCore *this, const WebCore::KeyboardEvent *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v26;

  v2 = *((_QWORD *)this + 11);
  if (!v2 || *(unsigned __int8 *)(v2 + 8) - 3 > 1)
  {
    v11 = 0;
    v12 = 0;
    return v11 | (v12 << 8);
  }
  v3 = *(_QWORD *)(v2 + 88);
  if (!v3)
    goto LABEL_19;
  v4 = *(unsigned int *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  v5 = *(unsigned __int16 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (v4 > 8)
      goto LABEL_13;
    if ((_DWORD)v4)
    {
      v6 = 0;
      v16 = 8 * v4;
      v17 = 56;
      while (1)
      {
        v19 = *(char *)v5;
        v5 = (unsigned __int16 *)((char *)v5 + 1);
        v18 = v19;
        if (v19 < 0)
          goto LABEL_13;
        v6 |= (unint64_t)v18 << v17;
        v17 -= 8;
        if (v16 + v17 == 56)
          goto LABEL_20;
      }
    }
LABEL_19:
    v6 = 0;
    goto LABEL_20;
  }
  if (v4 > 8)
  {
LABEL_13:
    v13 = 0;
    v14 = 0;
    v15 = 0;
    goto LABEL_21;
  }
  v6 = 0;
  if ((_DWORD)v4)
  {
    v7 = 8 * v4;
    v8 = 56;
    do
    {
      v10 = *v5++;
      v9 = v10;
      if (v10 > 0x7FuLL)
        goto LABEL_13;
      v6 |= v9 << v8;
      v8 -= 8;
    }
    while (v7 + v8 != 56);
  }
LABEL_20:
  v15 = v6 & 0xFFFFFFFFFFFFFF00;
  v13 = v6;
  v14 = 1;
LABEL_21:
  v20 = v15 | v13;
  if (!v14)
    goto LABEL_37;
  if (v20 > 0x50616765446F776DLL)
  {
    if (v20 > 0x5269676873FFFFFFLL)
    {
      if (v20 == 0x5269676874000000)
      {
        v21 = 6;
        goto LABEL_47;
      }
      if (v20 == 0x5570000000000000)
      {
        v21 = 7;
        goto LABEL_47;
      }
    }
    else
    {
      if (v20 == 0x50616765446F776ELL)
      {
        v21 = 4;
        goto LABEL_47;
      }
      if (v20 == 0x5061676555700000)
      {
        v21 = 5;
        goto LABEL_47;
      }
    }
LABEL_37:
    v22 = *(WTF::StringImpl **)(v2 + 56);
    if (v22)
      *(_DWORD *)v22 += 2;
    v26 = v22;
    v23 = WTF::String::characterStartingAt((WTF::String *)&v26);
    v24 = v26;
    v26 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, a2);
      else
        *(_DWORD *)v24 -= 2;
    }
    v12 = v23 == 32;
    v11 = 4 * v12;
    goto LABEL_48;
  }
  if (v20 > 0x486F6D64FFFFFFFFLL)
  {
    if (v20 == 0x486F6D6500000000)
    {
      v21 = 2;
      goto LABEL_47;
    }
    if (v20 == 0x4C65667400000000)
    {
      v21 = 3;
      goto LABEL_47;
    }
    goto LABEL_37;
  }
  if (v20 == 0x446F776E00000000)
  {
    v21 = 0;
    goto LABEL_47;
  }
  if (v20 != 0x456E640000000000)
    goto LABEL_37;
  v21 = 1;
LABEL_47:
  v11 = *((unsigned __int8 *)&WebCore::keyboardScrollingKeyForKeyboardEvent(WebCore::KeyboardEvent const&)::mappings
        + 16 * v21
        + 8);
  v12 = 1;
LABEL_48:
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v11 | (v12 << 8);
}

uint64_t WebCore::KeyboardScrollingAnimator::makeKeyboardScroll@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  char v14;

  if (a2 > 3)
    goto LABEL_11;
  v6 = a2;
  v7 = result;
  v8 = (char)a2;
  result = (*(uint64_t (**)(void))(**(_QWORD **)(result + 16) + 8 * qword_1969F65A0[(char)a2]))();
  switch(a3)
  {
    case 0:
      v9 = *(_DWORD *)(result + 104);
      goto LABEL_7;
    case 1:
      v10 = (float)*(int *)(result + 108);
      if ((v6 & 0xFE) != 2)
        result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v7 + 16) + 744))(*(_QWORD *)(v7 + 16), v10);
      break;
    case 2:
      v9 = *(_DWORD *)(result + 92);
LABEL_7:
      v10 = (float)v9;
      break;
    case 3:
      v10 = *(float *)(result + 112);
      break;
    default:
      goto LABEL_11;
  }
  if (v10 == 0.0)
  {
LABEL_11:
    v14 = 0;
    *(_BYTE *)a4 = 0;
  }
  else
  {
    v11 = v10 * flt_1969F6600[v8];
    v12 = v10 * flt_1969F65F0[v8];
    *(float *)a4 = v11;
    *(float *)(a4 + 4) = v12;
    v13 = v12 * 25.0;
    *(float *)(a4 + 8) = v11 * 25.0;
    *(float *)(a4 + 12) = v13;
    *(float *)(a4 + 16) = v11 * 25.0;
    *(float *)(a4 + 20) = v13;
    *(_BYTE *)(a4 + 24) = a3;
    *(_BYTE *)(a4 + 25) = v6;
    v14 = 1;
  }
  *(_BYTE *)(a4 + 28) = v14;
  return result;
}

uint64_t WebCore::KeyboardScrollingAnimator::beginKeyboardScrollGesture(uint64_t a1, unsigned int a2, int a3, char a4)
{
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  char v17;
  _BYTE *v18;
  _BYTE *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  unint64_t v43;
  float v44[7];
  char v45;
  float32x2_t v46;
  float32x2_t v47;

  WebCore::KeyboardScrollingAnimator::makeKeyboardScroll(a1, a2, a3, (uint64_t)v44);
  if (!v45)
    return 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 616))(*(_QWORD *)(a1 + 16)))
  {
    *(_BYTE *)(a1 + 24) = 0;
    v8 = *(_BYTE **)(a1 + 16);
    v9 = 1;
    if ((*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)v8 + 80))(v8, 1))
      v8[45] = 0;
    return v9;
  }
  if (*(_BYTE *)(a1 + 24))
    return 1;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 400))(*(_QWORD *)(a1 + 16));
  v11 = v10 && *(_BYTE *)(v10 + 136) != 0;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 392))(*(_QWORD *)(a1 + 16));
  if (v12)
  {
    v13 = (*(_BYTE *)(v12 + 136) != 0) << 24;
    v14 = *(unsigned __int8 *)(v12 + 136) << 8;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v15 = v11 ? 0x10000 : 0;
  v47.i32[0] = v15 | v11 | v13 | v14;
  v16 = a2 - 1 > 2 ? 0 : qword_1969F65C0[(char)(a2 - 1)];
  if (!v47.i8[v16])
    return 0;
  if (a3 == 1)
    v17 = a4;
  else
    v17 = 1;
  if (a3 == 2 || (v17 & 1) == 0)
  {
    v20 = *(_BYTE **)(a1 + 16);
    if ((*(unsigned int (**)(_BYTE *, _QWORD))(*(_QWORD *)v20 + 80))(v20, 0))
      v20[45] = 0;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_QWORD *)(v22 + 16);
    if (!v23)
    {
      v23 = WTF::fastMalloc((WTF *)0xB0);
      *(_QWORD *)v23 = off_1E3405EF0;
      *(_QWORD *)(v23 + 8) = v22;
      *(_QWORD *)(v23 + 16) = 0;
      *(_QWORD *)(v23 + 24) = &off_1E3406D78;
      *(_OWORD *)(v23 + 32) = 0u;
      *(_OWORD *)(v23 + 48) = 0u;
      *(_OWORD *)(v23 + 64) = 0u;
      *(_QWORD *)(v23 + 80) = 0;
      *(_QWORD *)(v23 + 88) = v23;
      *(_QWORD *)(v23 + 96) = 0;
      *(_QWORD *)(v23 + 104) = 0;
      *(_QWORD *)(v23 + 110) = 0;
      *(_QWORD *)(v23 + 120) = 0;
      v24 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v24 = 0;
      *(_DWORD *)(v24 + 8) = 0;
      *(_QWORD *)(v24 + 16) = v22;
      *(_BYTE *)(v24 + 24) = 0;
      *(_QWORD *)(v23 + 128) = v24;
      *(_BYTE *)(v23 + 136) = 0;
      *(_QWORD *)v23 = off_1E3354B08;
      *(_QWORD *)(v23 + 168) = 0;
      *(_DWORD *)(v23 + 140) = 0;
      *(_DWORD *)(v23 + 143) = 0;
      *(_QWORD *)(v23 + 156) = 0;
      *(_QWORD *)(v23 + 148) = 0;
      v25 = *(_QWORD *)(v22 + 16);
      *(_QWORD *)(v22 + 16) = v23;
      if (v25)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        v23 = *(_QWORD *)(v22 + 16);
      }
    }
    v26 = *(float *)(v23 + 120) + v44[0];
    v27 = *(float *)(v23 + 124) + v44[1];
    v28 = -2147500000.0;
    if (v26 > -2147500000.0)
      v28 = (float)(int)v26;
    if (v26 < 2147500000.0)
      v29 = v28;
    else
      v29 = 2147500000.0;
    v21.n128_u64[0] = 0x4F0000004F000000;
    v30 = -2147500000.0;
    if (v27 > -2147500000.0)
      v30 = (float)(int)v27;
    if (v27 < 2147500000.0)
      v31 = v30;
    else
      v31 = 2147500000.0;
    v32 = *(_QWORD *)(a1 + 16);
    v33 = *(_QWORD *)(v32 + 16);
    if (!v33)
    {
      v33 = WTF::fastMalloc((WTF *)0xB0);
      *(_QWORD *)v33 = off_1E3405EF0;
      *(_QWORD *)(v33 + 8) = v32;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 24) = &off_1E3406D78;
      *(_OWORD *)(v33 + 32) = 0u;
      *(_OWORD *)(v33 + 48) = 0u;
      *(_OWORD *)(v33 + 64) = 0u;
      *(_QWORD *)(v33 + 80) = 0;
      *(_QWORD *)(v33 + 88) = v33;
      *(_QWORD *)(v33 + 96) = 0;
      *(_QWORD *)(v33 + 104) = 0;
      *(_QWORD *)(v33 + 110) = 0;
      *(_QWORD *)(v33 + 120) = 0;
      v34 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v34 = 0;
      *(_DWORD *)(v34 + 8) = 0;
      *(_QWORD *)(v34 + 16) = v32;
      *(_BYTE *)(v34 + 24) = 0;
      *(_QWORD *)(v33 + 128) = v34;
      *(_BYTE *)(v33 + 136) = 0;
      *(_QWORD *)v33 = off_1E3354B08;
      *(_QWORD *)(v33 + 168) = 0;
      *(_DWORD *)(v33 + 140) = 0;
      *(_DWORD *)(v33 + 143) = 0;
      *(_QWORD *)(v33 + 156) = 0;
      *(_QWORD *)(v33 + 148) = 0;
      v35 = *(_QWORD *)(v32 + 16);
      *(_QWORD *)(v32 + 16) = v33;
      if (v35)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v33 = *(_QWORD *)(v32 + 16);
      }
    }
    v43 = __PAIR64__(LODWORD(v31), LODWORD(v29));
    v36 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(v33 + 8) + 424))(*(_QWORD *)(v33 + 8), v21);
    v47.f32[0] = (float)(int)v36;
    v47.f32[1] = (float)SHIDWORD(v36);
    v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v33 + 8) + 432))(*(_QWORD *)(v33 + 8));
    v46.f32[0] = (float)(int)v37;
    v46.f32[1] = (float)SHIDWORD(v37);
    v38 = *(float *)WebCore::FloatPoint::constrainedBetween((float32x2_t *)&v43, &v47, &v46).i32;
    v40 = *(float *)(v33 + 120);
    v41 = *(float *)(v33 + 124);
    v42 = *(_QWORD *)(v33 + 8);
    if (v38 != v40 || v39 != v41 || *(_BYTE *)(v42 + 47))
      WebCore::ScrollingEffectsController::startAnimatedScrollToDestination(v33 + 24, v40 + (float)*(int *)(v42 + 32), v41 + (float)*(int *)(v42 + 36), v38 + (float)*(int *)(v42 + 32), v39 + (float)*(int *)(v42 + 36));
    return 1;
  }
  v9 = 1;
  *(_BYTE *)(a1 + 24) = 1;
  v18 = *(_BYTE **)(a1 + 16);
  if ((*(unsigned int (**)(_BYTE *, float *))(*(_QWORD *)v18 + 72))(v18, v44))
    v18[45] = 1;
  return v9;
}

uint64_t WebCore::KeyboardScrollingAnimator::stopScrollingImmediately(WebCore::KeyboardScrollingAnimator *this)
{
  _BYTE *v1;
  uint64_t result;

  *((_BYTE *)this + 24) = 0;
  v1 = (_BYTE *)*((_QWORD *)this + 2);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v1 + 80))(v1, 1);
  if ((_DWORD)result)
    v1[45] = 0;
  return result;
}

WTF::StringImpl **WebCore::LegacySchemeRegistry::registerURLSchemeAsLocal(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::ASCIICaseInsensitiveHash *v2;
  int v4;
  _BYTE v5[24];

  if (*this)
  {
    v2 = (WTF::ASCIICaseInsensitiveHash *)this;
    if (__ldaxr(WebCore::schemeRegistryLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::schemeRegistryLock))
    {
      goto LABEL_6;
    }
    this = (WTF::StringImpl **)MEMORY[0x19AEA534C](WebCore::schemeRegistryLock, a2);
LABEL_6:
    {
      WebCore::builtinLocalURLSchemes((WebCore *)this);
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(&WebCore::localURLSchemes(void)::localSchemes, (WTF::ASCIICaseInsensitiveHash **)&qword_1ECE83B18);
    }
    this = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v2, &WebCore::localURLSchemes(void)::localSchemes, (uint64_t)v5);
    v4 = __ldxr(WebCore::schemeRegistryLock);
    if (v4 == 1)
    {
      if (!__stlxr(0, WebCore::schemeRegistryLock))
        return this;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl **)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
  }
  return this;
}

WTF::StringImpl **WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(WTF::StringImpl **this)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  int v4;
  unsigned int v5;
  uint64_t v7;

  if (!WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes)
    return this;
  this = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes, (WTF::ASCIICaseInsensitiveHash *)this);
  v2 = WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes;
  if (!this)
  {
    if (!WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes)
      return this;
    v7 = *(unsigned int *)(WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes - 4);
    this = (WTF::StringImpl **)(WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes + 8 * v7);
    goto LABEL_23;
  }
  if (WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes)
  {
    v7 = *(unsigned int *)(WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes - 4);
LABEL_23:
    v2 = WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes + 8 * v7;
    if ((WTF::StringImpl **)v2 == this)
      return this;
  }
  if ((WTF::StringImpl **)v2 != this)
  {
    v3 = *this;
    *this = (WTF::StringImpl *)-1;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        this = (WTF::StringImpl **)WTF::StringImpl::destroy(v3, v1);
      else
        *(_DWORD *)v3 -= 2;
    }
    ++*(_DWORD *)(WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes - 16);
    if (WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes)
      v4 = *(_DWORD *)(WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes - 12) - 1;
    else
      v4 = -1;
    *(_DWORD *)(WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes - 12) = v4;
    if (WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes)
    {
      v5 = *(_DWORD *)(WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes - 4);
      if (6 * *(_DWORD *)(WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes - 12) < v5 && v5 >= 9)
        return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(&WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes, v5 >> 1, 0);
    }
  }
  return this;
}

BOOL WebCore::LegacySchemeRegistry::schemeIsHandledBySchemeHandler(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  int v4;
  _QWORD v6[2];

  v6[0] = a1;
  v6[1] = a2;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::schemeRegistryLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
LABEL_5:
  {
    if (WebCore::schemesHandledBySchemeHandler(void)::set)
      v3 = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::lookup<WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>,WTF::StringView>((uint64_t)&WebCore::schemesHandledBySchemeHandler(void)::set, (uint64_t)v6) != 0;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
    WebCore::schemesHandledBySchemeHandler(void)::set = 0;
    unk_1EE2F84B0 = 0;
    qword_1EE2F84B8 = 0;
  }
  v4 = __ldxr(WebCore::schemeRegistryLock);
  if (v4 == 1)
  {
    if (!__stlxr(0, WebCore::schemeRegistryLock))
      return v3;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
  return v3;
}

uint64_t WebCore::LegacySchemeRegistry::shouldTreatURLSchemeAsLocal(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned __int8 *v8[2];

  v8[0] = a1;
  v8[1] = a2;
  if (!a1)
    return 0;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::schemeRegistryLock))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
LABEL_5:
  {
    WebCore::builtinLocalURLSchemes((WebCore *)a1);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(&WebCore::localURLSchemes(void)::localSchemes, (WTF::ASCIICaseInsensitiveHash **)&qword_1ECE83B18);
  }
  v5 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::localURLSchemes(void)::localSchemes, v8, a3, a4);
  v6 = __ldxr(WebCore::schemeRegistryLock);
  if (v6 == 1)
  {
    if (!__stlxr(0, WebCore::schemeRegistryLock))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
  return v5;
}

WTF::StringImpl **WebCore::LegacySchemeRegistry::registerURLSchemeAsNoAccess(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::ASCIICaseInsensitiveHash *v2;
  int v4;
  _BYTE v5[24];

  if (*this)
  {
    v2 = (WTF::ASCIICaseInsensitiveHash *)this;
    if (__ldaxr(WebCore::schemeRegistryLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::schemeRegistryLock))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](WebCore::schemeRegistryLock, a2);
LABEL_6:
    {
      WebCore::schemesWithUniqueOrigins(void)::schemesWithUniqueOrigins = (uint64_t)WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinSchemesWithUniqueOrigins);
    }
    this = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v2, &WebCore::schemesWithUniqueOrigins(void)::schemesWithUniqueOrigins, (uint64_t)v5);
    v4 = __ldxr(WebCore::schemeRegistryLock);
    if (v4 == 1)
    {
      if (!__stlxr(0, WebCore::schemeRegistryLock))
        return this;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl **)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
  }
  return this;
}

WTF::StringImpl **WebCore::LegacySchemeRegistry::registerURLSchemeAsDisplayIsolated(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::ASCIICaseInsensitiveHash *v2;
  int v4;
  _BYTE v5[24];

  if (*this)
  {
    v2 = (WTF::ASCIICaseInsensitiveHash *)this;
    if (__ldaxr(WebCore::schemeRegistryLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::schemeRegistryLock))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](WebCore::schemeRegistryLock, a2);
LABEL_6:
    {
      WebCore::displayIsolatedURLSchemes(void)::displayIsolatedSchemes = 0;
    }
    this = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v2, &WebCore::displayIsolatedURLSchemes(void)::displayIsolatedSchemes, (uint64_t)v5);
    v4 = __ldxr(WebCore::schemeRegistryLock);
    if (v4 == 1)
    {
      if (!__stlxr(0, WebCore::schemeRegistryLock))
        return this;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl **)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
  }
  return this;
}

WTF::StringImpl **WebCore::LegacySchemeRegistry::registerURLSchemeAsEmptyDocument(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::ASCIICaseInsensitiveHash *v2;
  WTF::StringImpl **NeverDestroyedSchemeSet;
  WTF::StringImpl **v4;
  _BYTE v5[24];

  if (*this)
  {
    v2 = (WTF::ASCIICaseInsensitiveHash *)this;
    {
      v4 = this;
      NeverDestroyedSchemeSet = WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinEmptyDocumentSchemes);
      v2 = (WTF::ASCIICaseInsensitiveHash *)v4;
      WebCore::emptyDocumentSchemes(void)::emptyDocumentSchemes = (uint64_t)NeverDestroyedSchemeSet;
    }
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v2, &WebCore::emptyDocumentSchemes(void)::emptyDocumentSchemes, (uint64_t)v5);
  }
  return this;
}

WTF::StringImpl **WebCore::LegacySchemeRegistry::registerAsCanDisplayOnlyIfCanRequest(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::ASCIICaseInsensitiveHash *v2;
  int v4;
  _BYTE v5[24];

  if (*this)
  {
    v2 = (WTF::ASCIICaseInsensitiveHash *)this;
    if (__ldaxr(WebCore::schemeRegistryLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::schemeRegistryLock))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](WebCore::schemeRegistryLock, a2);
LABEL_6:
    {
      WebCore::canDisplayOnlyIfCanRequestSchemes(void)::canDisplayOnlyIfCanRequestSchemes = (uint64_t)WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinCanDisplayOnlyIfCanRequestSchemes);
    }
    this = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v2, &WebCore::canDisplayOnlyIfCanRequestSchemes(void)::canDisplayOnlyIfCanRequestSchemes, (uint64_t)v5);
    v4 = __ldxr(WebCore::schemeRegistryLock);
    if (v4 == 1)
    {
      if (!__stlxr(0, WebCore::schemeRegistryLock))
        return this;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl **)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
  }
  return this;
}

WTF::StringImpl **WebCore::LegacySchemeRegistry::registerURLSchemeAsAllowingDatabaseAccessInPrivateBrowsing(WTF::StringImpl **this, const WTF::String *a2)
{
  _BYTE v2[24];

  if (*this)
  {
    {
      WebCore::schemesAllowingDatabaseAccessInPrivateBrowsing(void)::schemesAllowingDatabaseAccessInPrivateBrowsing = 0;
    }
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)this, &WebCore::schemesAllowingDatabaseAccessInPrivateBrowsing(void)::schemesAllowingDatabaseAccessInPrivateBrowsing, (uint64_t)v2);
  }
  return this;
}

WTF::StringImpl **WebCore::LegacySchemeRegistry::removeURLSchemeRegisteredAsBypassingContentSecurityPolicy(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::ASCIICaseInsensitiveHash *v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;

  if (*this)
  {
    v2 = (WTF::ASCIICaseInsensitiveHash *)this;
    if (__ldaxr(WebCore::schemeRegistryLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::schemeRegistryLock))
    {
      goto LABEL_6;
    }
    this = (WTF::StringImpl **)MEMORY[0x19AEA534C](WebCore::schemeRegistryLock, a2);
LABEL_6:
    {
      WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes = 0;
      goto LABEL_21;
    }
    if (!WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes)
      goto LABEL_21;
    this = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes, v2);
    v5 = WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes;
    if (this)
    {
      if (!WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes)
      {
LABEL_10:
        if ((WTF::StringImpl **)v5 != this)
        {
          v6 = *this;
          *this = (WTF::StringImpl *)-1;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              this = (WTF::StringImpl **)WTF::StringImpl::destroy(v6, v4);
            else
              *(_DWORD *)v6 -= 2;
          }
          ++*(_DWORD *)(WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes - 16);
          if (WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes)
            v7 = *(_DWORD *)(WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes - 12) - 1;
          else
            v7 = -1;
          *(_DWORD *)(WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes - 12) = v7;
          if (WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes)
          {
            v8 = *(_DWORD *)(WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes - 4);
            if (6 * *(_DWORD *)(WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes - 12) < v8 && v8 >= 9)
              this = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(&WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes, v8 >> 1, 0);
          }
        }
LABEL_21:
        v9 = __ldxr(WebCore::schemeRegistryLock);
        if (v9 == 1)
        {
          if (!__stlxr(0, WebCore::schemeRegistryLock))
            return this;
        }
        else
        {
          __clrex();
        }
        return (WTF::StringImpl **)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
      }
      v10 = *(unsigned int *)(WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes - 4);
    }
    else
    {
      if (!WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes)
        goto LABEL_21;
      v10 = *(unsigned int *)(WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes - 4);
      this = (WTF::StringImpl **)(WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes + 8 * v10);
    }
    v5 = WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes + 8 * v10;
    if ((WTF::StringImpl **)v5 == this)
      goto LABEL_21;
    goto LABEL_10;
  }
  return this;
}

uint64_t WebCore::LegacySchemeRegistry::schemeShouldBypassContentSecurityPolicy(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned __int8 *v8[2];

  v8[0] = a1;
  v8[1] = a2;
  if (!a1)
    return 0;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
    goto LABEL_7;
  }
  if (__stxr(1u, WebCore::schemeRegistryLock))
    goto LABEL_6;
LABEL_7:
  {
    WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes = 0;
  }
  v5 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes, v8, a3, a4);
  v6 = __ldxr(WebCore::schemeRegistryLock);
  if (v6 == 1)
  {
    if (!__stlxr(0, WebCore::schemeRegistryLock))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
  return v5;
}

WTF::StringImpl **WebCore::LegacySchemeRegistry::registerURLSchemeAsAlwaysRevalidated(WTF::StringImpl **this, const WTF::String *a2)
{
  _BYTE v2[24];

  if (*this)
  {
    {
      WebCore::alwaysRevalidatedSchemes(void)::schemes = 0;
    }
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)this, &WebCore::alwaysRevalidatedSchemes(void)::schemes, (uint64_t)v2);
  }
  return this;
}

BOOL WebCore::LegacySchemeRegistry::shouldPartitionCacheForURLScheme(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  _BOOL8 v4;
  int v5;

  if (!*(_QWORD *)this)
    return 0;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](WebCore::schemeRegistryLock, a2);
    goto LABEL_7;
  }
  if (__stxr(1u, WebCore::schemeRegistryLock))
    goto LABEL_6;
LABEL_7:
  if ((byte_1ECE83B11 & 1) != 0)
  {
    if (qword_1ECE83B20)
      v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&qword_1ECE83B20, this) != 0;
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
    qword_1ECE83B20 = 0;
    byte_1ECE83B11 = 1;
  }
  v5 = __ldxr(WebCore::schemeRegistryLock);
  if (v5 == 1)
  {
    if (!__stlxr(0, WebCore::schemeRegistryLock))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
  return v4;
}

WTF *WebCore::newLengthArray@<X0>(const WTF::String *a1@<X1>, _QWORD *a2@<X8>)
{
  WTF *result;
  void *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  __int16 v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int *v39;
  unsigned int v40;
  int v41;
  int16x8_t *v42;
  unint64_t v43;
  int16x8_t v44;
  int8x16_t v45;
  int16x8_t *v46;
  __int8 *v47;
  int16x8_t v48;
  int v49;
  _QWORD *v50;
  int v51;
  int v53;
  unint64_t v54;
  __int128 v55;
  WTF::StringImpl *v56;
  int8x16_t v57;
  __int128 v58;
  __int128 v59;
  char *v60;
  char *v61;
  char *v62;
  int v63;
  unsigned __int8 v64;
  char v65;
  unsigned __int8 v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  _BYTE v69[64];
  WTF::StringImpl *v70;
  unint64_t v71;
  int8x16x2_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;

  result = (WTF *)WTF::StringImpl::simplifyWhiteSpace();
  v8 = v67;
  v9 = *((unsigned int *)v67 + 1);
  if (!(_DWORD)v9)
  {
    *(_DWORD *)a1 = 1;
    *a2 = 0;
    goto LABEL_86;
  }
  v10 = (unsigned __int16 *)*((_QWORD *)v67 + 1);
  if ((*((_BYTE *)v67 + 16) & 4) != 0)
  {
    v11 = 0;
    do
    {
      v12 = *(unsigned __int8 *)v10;
      v10 = (unsigned __int16 *)((char *)v10 + 1);
      if (v12 == 44)
        ++v11;
      --v9;
    }
    while (v9);
  }
  else
  {
    v11 = 0;
    do
    {
      v53 = *v10++;
      if (v53 == 44)
        ++v11;
      --v9;
    }
    while (v9);
  }
  v13 = v11 + 1;
  v14 = v11 == -1;
  *(_DWORD *)a1 = v11 + 1;
  v15 = v11 + 1 < 0;
  if ((unint64_t)(8 * (v11 + 1)) >= 0xFFFFFFFFFFFFFFF0)
    v15 = 1;
  if (v15)
    v16 = -1;
  else
    v16 = 8 * v13 + 16;
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)v16);
  *v17 = 8;
  v17[1] = v13;
  v18 = v17 + 2;
  if (!v14)
    bzero(v17 + 2, 8 * v13);
  *a2 = v18;
  if (v8)
  {
    v19 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
    v20 = *((unsigned int *)v8 + 1) | ((unint64_t)((*((_DWORD *)v8 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v19 = 0;
    v20 = 0x100000000;
  }
  v67 = (WTF::StringImpl *)v69;
  v68 = 32;
  v70 = 0;
  v71 = 0;
  v21 = v20;
  if ((v20 & 0x100000000) != 0)
  {
    if (v20 > 0x20uLL)
    {
      if (v20 <= 0x29uLL)
        v54 = 41;
      else
        v54 = v20;
      WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v67, v54);
      HIDWORD(v68) = v20;
      v22 = v67;
      if (v20 < 0x40uLL)
      {
        v23 = v67;
      }
      else
      {
        v23 = (WTF::StringImpl *)((char *)v67 + 2 * (v20 & 0xFFFFFFC0));
        v55 = 0uLL;
        v56 = v67;
        do
        {
          v72.val[0] = *(int8x16_t *)v19;
          v57 = *((int8x16_t *)v19 + 1);
          v73.val[0] = (int8x16_t)*((_OWORD *)v19 + 2);
          v58 = *((_OWORD *)v19 + 3);
          v19 = (WTF::StringImpl *)((char *)v19 + 64);
          v59 = v58;
          v73.val[1] = 0uLL;
          v74.val[0] = v57;
          v72.val[1] = 0uLL;
          v60 = (char *)v56;
          vst2q_s8(v60, v72);
          v60 += 32;
          v74.val[1] = 0uLL;
          vst2q_s8(v60, v74);
          v61 = (char *)v56 + 64;
          vst2q_s8(v61, v73);
          v62 = (char *)v56 + 96;
          vst2q_s8(v62, *(int8x16x2_t *)(&v55 - 1));
          v56 = (WTF::StringImpl *)((char *)v56 + 128);
        }
        while (v56 != v23);
      }
    }
    else
    {
      HIDWORD(v68) = v20;
      v22 = (WTF::StringImpl *)v69;
      v23 = (WTF::StringImpl *)v69;
    }
    v24 = (WTF::StringImpl *)((char *)v22 + 2 * v20);
    while (v23 != v24)
    {
      v25 = *(unsigned __int8 *)v19;
      v19 = (WTF::StringImpl *)((char *)v19 + 1);
      *(_WORD *)v23 = v25;
      v23 = (WTF::StringImpl *)((char *)v23 + 2);
    }
    v19 = v67;
    v21 = HIDWORD(v68);
    v18 = (_QWORD *)*a2;
  }
  v26 = 0;
  v27 = 0;
  v70 = v19;
  v71 = v21;
  while (1)
  {
    v28 = v27;
    v29 = *((_QWORD *)v8 + 1);
    v30 = *((unsigned int *)v8 + 1);
    if ((*((_BYTE *)v8 + 16) & 4) == 0)
      break;
    if (v30 <= v27)
      goto LABEL_71;
    v31 = v29 + v27;
    v32 = v30 - v28;
    if (v30 - v28 >= 0x10)
      v33 = 16;
    else
      v33 = v30 - v28;
    if (v33)
    {
      v34 = v33;
      v35 = (_BYTE *)(v29 + v28);
      while (*v35 != 44)
      {
        ++v35;
        if (!--v34)
          goto LABEL_33;
      }
    }
    else
    {
LABEL_33:
      if (v32 < 0x11)
        goto LABEL_71;
      v35 = memchr((void *)(v31 + v33), 44, v32 - v33);
      if (!v35)
        goto LABEL_71;
    }
    v36 = (uint64_t)&v35[-v29];
LABEL_36:
    if (v36 == -1)
      goto LABEL_71;
    LODWORD(v37) = v71;
    if (v71 < v28)
      goto LABEL_95;
    LODWORD(v37) = (_DWORD)v70;
    v38 = v36 - v28;
    if (v36 - v28 == -1)
    {
      v38 = v71 - v28;
    }
    else if (v71 - v28 < v38)
    {
      goto LABEL_95;
    }
    WebCore::parseLength((uint64_t)&v63, (uint64_t)v70 + 2 * v28, v38);
    v39 = (int *)&v18[v26];
    if (*((_BYTE *)v39 + 4) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v39);
    }
    v40 = v64;
    *((_BYTE *)v39 + 4) = v64;
    *((_BYTE *)v39 + 5) = v65;
    if (v40 - 2 < 9)
    {
      v41 = v66;
      BYTE6(v18[v26]) = v66;
      if (v41)
      {
        *v39 = v63;
        goto LABEL_46;
      }
LABEL_51:
      *v39 = v63;
      goto LABEL_46;
    }
    if (v40 > 0xD)
      goto LABEL_46;
    if (((1 << v40) & 0x3003) != 0)
    {
      *v39 = 0;
      goto LABEL_46;
    }
    if (v40 == 11)
      goto LABEL_51;
LABEL_46:
    ++v26;
    v27 = v36 + 1;
  }
  if (v30 <= v27)
    goto LABEL_71;
  v42 = (int16x8_t *)(v29 + 2 * v27);
  v37 = v29 + 2 * v30;
  v43 = v37 - (_QWORD)v42;
  if ((uint64_t)(v37 - (_QWORD)v42) <= -2)
    goto LABEL_95;
  if (v43 <= 0x3E)
  {
    while (v42->i16[0] != 44)
    {
      v42 = (int16x8_t *)((char *)v42 + 2);
      v43 -= 2;
      if (!v43)
        goto LABEL_71;
    }
    goto LABEL_66;
  }
  if ((unint64_t)&v42->u64[1] + 6 < v37)
  {
    while (1)
    {
      v44.i64[0] = 0x2C002C002C002CLL;
      v44.i64[1] = 0x2C002C002C002CLL;
      v45 = (int8x16_t)vceqq_s16(*v42, v44);
      v44.i16[0] = vmaxvq_u16((uint16x8_t)v45);
      if (v44.i32[0])
        break;
      v46 = v42 + 1;
      v47 = &v42[1].i8[14];
      ++v42;
      if ((unint64_t)v47 >= v37)
        goto LABEL_63;
    }
LABEL_65:
    v42 = (int16x8_t *)((char *)v42
                      + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v45)));
LABEL_66:
    if (v42 == (int16x8_t *)v37)
      goto LABEL_71;
    v36 = ((uint64_t)v42->i64 - v29) >> 1;
    goto LABEL_36;
  }
  v46 = (int16x8_t *)(v29 + 2 * v28);
LABEL_63:
  if ((unint64_t)v46 < v37)
  {
    v42 = (int16x8_t *)(v37 - 16);
    v48.i64[0] = 0x2C002C002C002CLL;
    v48.i64[1] = 0x2C002C002C002CLL;
    v45 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v37 - 16), v48);
    v48.i16[0] = vmaxvq_u16((uint16x8_t)v45);
    if (v48.i32[0])
      goto LABEL_65;
  }
LABEL_71:
  if ((_DWORD)v30 == (_DWORD)v28)
  {
    v49 = *(_DWORD *)a1 - 1;
LABEL_73:
    *(_DWORD *)a1 = v49;
    goto LABEL_80;
  }
  LODWORD(v37) = v71;
  if (v71 < v28)
  {
LABEL_95:
    __break(1u);
  }
  else
  {
    WebCore::parseLength((uint64_t)&v63, (uint64_t)v70 + 2 * v28, v71 - v28);
    a1 = (const WTF::String *)&v18[v26];
    if (*((_BYTE *)a1 + 4) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a1);
    }
    LODWORD(v37) = v64;
    *((_BYTE *)a1 + 4) = v64;
    v50 = &v18[v26];
    *((_BYTE *)v50 + 5) = v65;
    if ((v37 - 2) < 9)
    {
      v51 = v66;
      *((_BYTE *)v50 + 6) = v66;
      if (v51)
      {
        *(_DWORD *)a1 = v63;
        goto LABEL_80;
      }
LABEL_108:
      v49 = v63;
      goto LABEL_73;
    }
  }
  if (v37 <= 0xD)
  {
    if (((1 << v37) & 0x3003) != 0)
    {
      *(_DWORD *)a1 = 0;
    }
    else if ((_DWORD)v37 == 11)
    {
      goto LABEL_108;
    }
  }
LABEL_80:
  result = v67;
  if (v69 == (_BYTE *)v67 || v67 == 0)
  {
    if (!v8)
      return result;
    goto LABEL_86;
  }
  v67 = 0;
  LODWORD(v68) = 0;
  result = (WTF *)WTF::fastFree(result, v7);
  if (v8)
  {
LABEL_86:
    if (*(_DWORD *)v8 == 2)
      return (WTF *)WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

uint64_t WebCore::parseLength(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  int v19;
  __int16 v20;

  v3 = result;
  if (!a3)
  {
LABEL_51:
    v19 = 1;
    goto LABEL_52;
  }
  v6 = 0;
  v7 = 0;
  while (1)
  {
    result = *(unsigned __int16 *)(a2 + 2 * v6);
    if (result > 0xFF)
      break;
    if ((result - 9) >= 5 && (_DWORD)result != 32)
      goto LABEL_11;
LABEL_5:
    v6 = ++v7;
    if (a3 <= v7)
      goto LABEL_15;
  }
  result = MEMORY[0x19AEA858C]();
  if ((_DWORD)result == 9)
    goto LABEL_5;
  result = *(unsigned __int16 *)(a2 + 2 * v6);
LABEL_11:
  if ((_DWORD)result == 43 || (_DWORD)result == 45)
    LODWORD(v6) = v7 + 1;
  else
    LODWORD(v6) = v7;
LABEL_15:
  v8 = v6;
  if (a3 <= v6)
  {
    v9 = v6;
  }
  else
  {
    while (*(unsigned __int16 *)(a2 + 2 * v8) - 48 < 0xA)
    {
      LODWORD(v6) = v6 + 1;
      v8 = v6;
      v9 = v6;
      v10 = v6;
      if (a3 <= v6)
        goto LABEL_22;
    }
    v9 = v6;
  }
  v10 = v6;
LABEL_22:
  if (a3 <= v9)
  {
    v13 = v9;
  }
  else
  {
    while (1)
    {
      v11 = *(unsigned __int16 *)(a2 + 2 * v9);
      if (v11 != 46 && (v11 - 48) >= 0xA)
        break;
      v9 = ++v10;
      v13 = v10;
      v14 = v10;
      if (a3 <= v10)
        goto LABEL_32;
    }
    v13 = v10;
  }
  v14 = v10;
LABEL_32:
  if (a3 <= v13)
  {
LABEL_45:
    v16 = 32;
LABEL_46:
    if (a3 < v8)
      goto LABEL_58;
    result = WTF::parseInteger<int,char16_t>(a2, v8, 10, 0);
    v18 = result & 0xFF00000000;
    if (v16 != 42)
    {
      if (v18)
      {
        *(_DWORD *)v3 = result;
        v20 = 4;
        goto LABEL_54;
      }
      *(_DWORD *)v3 = 0;
LABEL_53:
      v20 = 2;
LABEL_54:
      *(_WORD *)(v3 + 4) = v20;
      *(_BYTE *)(v3 + 6) = 0;
      return result;
    }
    if (v18)
      v19 = result;
    else
      v19 = 1;
LABEL_52:
    *(_DWORD *)v3 = v19;
    goto LABEL_53;
  }
  v15 = v14 + 1;
  while (1)
  {
    v16 = *(unsigned __int16 *)(a2 + 2 * v13);
    if (v16 > 0xFF)
      break;
    if (v16 - 9 >= 5 && v16 != 32)
      goto LABEL_42;
LABEL_36:
    v13 = v15;
    if (a3 <= v15++)
      goto LABEL_45;
  }
  result = MEMORY[0x19AEA858C](*(unsigned __int16 *)(a2 + 2 * v13));
  if ((_DWORD)result == 9)
    goto LABEL_36;
  v16 = *(unsigned __int16 *)(a2 + 2 * v13);
LABEL_42:
  if (v16 != 37)
    goto LABEL_46;
  if (a3 >= v9)
  {
    result = WTF::charactersToDouble();
    goto LABEL_51;
  }
LABEL_58:
  __break(1u);
  return result;
}

uint64_t WebCore::Length::Length(uint64_t a1, WTF **a2)
{
  int v3;
  WTF *v4;
  void *v5;
  WTF *v6;
  uint64_t v8;
  _BYTE v9[24];
  uint64_t v10;
  WTF *v11;

  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 4) = 11;
  *(_BYTE *)(a1 + 6) = 0;
  {
    v3 = WebCore::calculationValues(void)::map;
  }
  else
  {
    v3 = 1;
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
  }
  v4 = *a2;
  *a2 = 0;
  v10 = 0;
  v11 = v4;
  while (1)
  {
    if ((v3 - 1) <= 0xFFFFFFFD)
    {
      WTF::HashMap<unsigned int,WebCore::CalculationValueMap::Entry,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::CalculationValueMap::Entry>,WTF::HashTableTraits>::add<WebCore::CalculationValueMap::Entry&>(&qword_1ECE90C98, &WebCore::calculationValues(void)::map, &v10, (uint64_t)v9);
      v3 = WebCore::calculationValues(void)::map;
      if (v9[16])
        break;
    }
    WebCore::calculationValues(void)::map = ++v3;
  }
  ++WebCore::calculationValues(void)::map;
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v8 = *((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      WTF::fastFree(v6, v5);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  *(_DWORD *)a1 = v3;
  return a1;
}

uint64_t WebCore::Length::calculationValue(WebCore::Length *this)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v9;

  v1 = *(_DWORD *)this;
  v2 = *(_DWORD *)(qword_1ECE90C98 - 8);
  v3 = 9 * ((v1 + ~(v1 << 15)) ^ ((v1 + ~(v1 << 15)) >> 10));
  v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
  v5 = (v4 ^ HIWORD(v4)) & v2;
  v6 = qword_1ECE90C98 + 24 * v5;
  v7 = *(_DWORD *)v6;
  if (*(_DWORD *)v6 != *(_DWORD *)this)
  {
    v9 = 1;
    while (v7)
    {
      v5 = (v5 + v9) & v2;
      v6 = qword_1ECE90C98 + 24 * v5;
      v7 = *(_DWORD *)v6;
      ++v9;
      if (*(_DWORD *)v6 == v1)
        return *(_QWORD *)(v6 + 16);
    }
    v6 = qword_1ECE90C98 + 24 * *(unsigned int *)(qword_1ECE90C98 - 4);
  }
  return *(_QWORD *)(v6 + 16);
}

int *WebCore::Length::protectedCalculationValue@<X0>(int *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  int v10;

  v2 = *this;
  v3 = *(_DWORD *)(qword_1ECE90C98 - 8);
  v4 = 9 * ((v2 + ~(v2 << 15)) ^ ((v2 + ~(v2 << 15)) >> 10));
  v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  v6 = (v5 ^ HIWORD(v5)) & v3;
  v7 = qword_1ECE90C98 + 24 * v6;
  v8 = *(_DWORD *)v7;
  if (*(_DWORD *)v7 != *this)
  {
    v10 = 1;
    while (v8)
    {
      v6 = (v6 + v10) & v3;
      v7 = qword_1ECE90C98 + 24 * v6;
      v8 = *(_DWORD *)v7;
      ++v10;
      if (*(_DWORD *)v7 == v2)
        goto LABEL_2;
    }
    v7 = qword_1ECE90C98 + 24 * *(unsigned int *)(qword_1ECE90C98 - 4);
  }
LABEL_2:
  v9 = *(_DWORD **)(v7 + 16);
  ++*v9;
  *a2 = v9;
  return this;
}

int *WebCore::Length::ref(int *this)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;

  v1 = *this;
  v2 = *(_DWORD *)(qword_1ECE90C98 - 8);
  v3 = 9 * ((v1 + ~(v1 << 15)) ^ ((v1 + ~(v1 << 15)) >> 10));
  v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
  v5 = (v4 ^ HIWORD(v4)) & v2;
  v6 = qword_1ECE90C98 + 24 * v5;
  v7 = *(_DWORD *)v6;
  if (*(_DWORD *)v6 != *this)
  {
    v8 = 1;
    while (v7)
    {
      v5 = (v5 + v8) & v2;
      v6 = qword_1ECE90C98 + 24 * v5;
      v7 = *(_DWORD *)v6;
      ++v8;
      if (*(_DWORD *)v6 == v1)
        goto LABEL_2;
    }
    v6 = qword_1ECE90C98 + 24 * *(unsigned int *)(qword_1ECE90C98 - 4);
  }
LABEL_2:
  ++*(_QWORD *)(v6 + 8);
  return this;
}

int *WebCore::Length::deref(WebCore::Length *this)
{
  {
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
  }
  return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)this);
}

int *WebCore::CalculationValueMap::deref(int *this, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WTF *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;

  v3 = (uint64_t *)(this + 2);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = 9 * ((~((_DWORD)a2 << 15) + (_DWORD)a2) ^ ((~((_DWORD)a2 << 15) + (_DWORD)a2) >> 10));
    v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
    v7 = v4 & (v6 ^ HIWORD(v6));
    v8 = (int *)(v2 + 24 * v7);
    v9 = *v8;
    if (*v8 != (_DWORD)a2)
    {
      v12 = 1;
      while (v9)
      {
        v7 = (v7 + v12) & v4;
        v8 = (int *)(v2 + 24 * v7);
        v9 = *v8;
        ++v12;
        if (*v8 == (_DWORD)a2)
          goto LABEL_3;
      }
      v8 = (int *)(v2 + 24 * *(unsigned int *)(v2 - 4));
    }
LABEL_3:
    v10 = (uint64_t)(v8 + 2);
    v11 = *((_QWORD *)v8 + 1);
    if (v11)
      goto LABEL_4;
    if ((int *)(v2 + 24 * *(unsigned int *)(v2 - 4)) != v8)
    {
      *v8 = -1;
      v13 = (WTF *)*((_QWORD *)v8 + 2);
      *((_QWORD *)v8 + 2) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
        {
          v20 = *((_QWORD *)v13 + 1);
          *((_QWORD *)v13 + 1) = 0;
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          this = (int *)WTF::fastFree(v13, a2);
        }
        else
        {
          --*(_DWORD *)v13;
        }
      }
      ++*(_DWORD *)(*v3 - 16);
      v14 = *v3;
      if (*v3)
        v15 = *(_DWORD *)(v14 - 12) - 1;
      else
        v15 = -1;
      *(_DWORD *)(v14 - 12) = v15;
      v16 = *v3;
      if (*v3)
      {
        v17 = 6 * *(_DWORD *)(v16 - 12);
        v18 = *(_DWORD *)(v16 - 4);
        if (v17 < v18 && v18 >= 9)
          return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::CalculationValueMap::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::CalculationValueMap::Entry>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::CalculationValueMap::Entry,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::CalculationValueMap::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v3, v18 >> 1, 0);
      }
    }
  }
  else
  {
    v10 = 8;
    v11 = MEMORY[8];
    if (MEMORY[8])
LABEL_4:
      *(_QWORD *)v10 = v11 - 1;
  }
  return this;
}

uint64_t WebCore::Length::nonNanCalculatedValue(WebCore::Length *this, float a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  WTF *v9;
  uint64_t result;
  void *v11;
  int v12;
  _QWORD *v13;

  v2 = *(_DWORD *)this;
  v3 = *(_DWORD *)(qword_1ECE90C98 - 8);
  v4 = 9 * ((v2 + ~(v2 << 15)) ^ ((v2 + ~(v2 << 15)) >> 10));
  v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  v6 = (v5 ^ HIWORD(v5)) & v3;
  v7 = qword_1ECE90C98 + 24 * v6;
  v8 = *(_DWORD *)v7;
  if (*(_DWORD *)v7 != *(_DWORD *)this)
  {
    v12 = 1;
    while (v8)
    {
      v6 = (v6 + v12) & v3;
      v7 = qword_1ECE90C98 + 24 * v6;
      v8 = *(_DWORD *)v7;
      ++v12;
      if (*(_DWORD *)v7 == v2)
        goto LABEL_2;
    }
    v7 = qword_1ECE90C98 + 24 * *(unsigned int *)(qword_1ECE90C98 - 4);
  }
LABEL_2:
  v9 = *(WTF **)(v7 + 16);
  ++*(_DWORD *)v9;
  result = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v9 + 1) + 16))(*((_QWORD **)v9 + 1));
  if (*(_DWORD *)v9 == 1)
  {
    v13 = (_QWORD *)*((_QWORD *)v9 + 1);
    *((_QWORD *)v9 + 1) = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    return WTF::fastFree(v9, v11);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return result;
}

uint64_t WebCore::Length::isCalculatedEqual(WebCore::Length *this, const WebCore::Length *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v17;
  int v18;

  v2 = *(_DWORD *)this;
  v3 = *(_DWORD *)(qword_1ECE90C98 - 8);
  v4 = 9 * ((v2 + ~(v2 << 15)) ^ ((v2 + ~(v2 << 15)) >> 10));
  v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  v6 = (v5 ^ HIWORD(v5)) & v3;
  v7 = qword_1ECE90C98 + 24 * v6;
  v8 = *(_DWORD *)v7;
  if (*(_DWORD *)v7 != *(_DWORD *)this)
  {
    v17 = 1;
    while (v8)
    {
      v6 = (v6 + v17) & v3;
      v7 = qword_1ECE90C98 + 24 * v6;
      v8 = *(_DWORD *)v7;
      ++v17;
      if (*(_DWORD *)v7 == v2)
        goto LABEL_2;
    }
    v7 = qword_1ECE90C98 + 24 * *(unsigned int *)(qword_1ECE90C98 - 4);
  }
LABEL_2:
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_DWORD *)a2;
  v11 = 9 * ((v10 + ~(v10 << 15)) ^ ((v10 + ~(v10 << 15)) >> 10));
  v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
  v13 = (v12 ^ HIWORD(v12)) & v3;
  v14 = qword_1ECE90C98 + 24 * v13;
  v15 = *(_DWORD *)v14;
  if (*(_DWORD *)v14 != *(_DWORD *)a2)
  {
    v18 = 1;
    while (v15)
    {
      v13 = (v13 + v18) & v3;
      v14 = qword_1ECE90C98 + 24 * v13;
      v15 = *(_DWORD *)v14;
      ++v18;
      if (*(_DWORD *)v14 == v10)
        return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 8) + 24))(*(_QWORD *)(v9 + 8), *(_QWORD *)(*(_QWORD *)(v14 + 16) + 8));
    }
    v14 = qword_1ECE90C98 + 24 * *(unsigned int *)(qword_1ECE90C98 - 4);
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 8) + 24))(*(_QWORD *)(v9 + 8), *(_QWORD *)(*(_QWORD *)(v14 + 16) + 8));
}

uint64_t WebCore::makeCalculated(uint64_t a1, char a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void *v12;
  WTF *v13;
  uint64_t v14;
  int *v15;
  WTF *v16;

  std::make_unique[abi:sn180100]<WebCore::CalcExpressionLength,WebCore::Length const&>((int **)&v16, a3);
  std::make_unique[abi:sn180100]<WebCore::CalcExpressionLength,WebCore::Length const&>(&v15, a4);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v8 = v15;
  *v7 = v16;
  v7[1] = v8;
  v9 = WTF::fastMalloc((WTF *)0x28);
  *(_BYTE *)(v9 + 8) = 3;
  *(_QWORD *)v9 = off_1E34088E8;
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = 0x200000002;
  *(_BYTE *)(v9 + 32) = a2;
  *(_BYTE *)(v9 + 33) = 9;
  v10 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = v9;
  *(_BYTE *)(v10 + 16) = 0;
  v16 = (WTF *)v10;
  result = WebCore::Length::Length(a1, &v16);
  v13 = v16;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      v14 = *((_QWORD *)v16 + 1);
      *((_QWORD *)v16 + 1) = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      return WTF::fastFree(v13, v12);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  return result;
}

unsigned __int8 *WebCore::convertTo100PercentMinusLengthSum@<X0>(unsigned __int8 *this@<X0>, const WebCore::Length *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  unsigned int v16;
  char v17;
  char v18;
  int v19;
  __int16 v20;
  char v21;

  v4 = (unsigned __int8 *)a2;
  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 4);
  if (this[4] == 3)
  {
    if (v7 == 3)
    {
      v8 = *(float *)this;
      if (!this[6])
        v8 = (float)*(int *)this;
      v9 = 100.0 - v8;
      v10 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v10 = (float)*(int *)a2;
      v11 = v9 - v10;
LABEL_20:
      *(float *)a3 = v11;
      *(_WORD *)(a3 + 4) = 3;
      *(_BYTE *)(a3 + 6) = 1;
      return this;
    }
    v14 = *(float *)this;
    if (!this[6])
      v14 = (float)*(int *)this;
    *(float *)&v19 = 100.0 - v14;
    v20 = 3;
    v21 = 1;
    v13 = a3;
    return (unsigned __int8 *)WebCore::makeCalculated(v13, 45, (unsigned __int8 *)&v19, v4);
  }
  if (v7 == 3)
  {
    v12 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v12 = (float)*(int *)a2;
    *(float *)&v19 = 100.0 - v12;
    v20 = 3;
    v21 = 1;
    v13 = a3;
    v4 = v5;
    return (unsigned __int8 *)WebCore::makeCalculated(v13, 45, (unsigned __int8 *)&v19, v4);
  }
  this = (unsigned __int8 *)WebCore::makeCalculated((uint64_t)&v16, 43, this, (unsigned __int8 *)a2);
  if (v17 == 3)
  {
    v15 = *(float *)&v16;
    if (!v18)
      v15 = (float)(int)v16;
    v11 = 100.0 - v15;
    goto LABEL_20;
  }
  v19 = 100;
  v20 = 3;
  v21 = 0;
  this = (unsigned __int8 *)WebCore::makeCalculated(a3, 45, (unsigned __int8 *)&v19, (unsigned __int8 *)&v16);
  if (v17 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return (unsigned __int8 *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
  }
  return this;
}

void WebCore::blend(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  const WebCore::Length *v7;
  int v8;
  int v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  double v16;
  int v17;
  int v18;
  int v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  float v47;
  float v48;
  double v49;
  float v50;

  v7 = (const WebCore::Length *)a1;
  v8 = a1[4];
  if (a1[4])
  {
    v9 = a2[4];
    v10 = v9 == 1 || v8 == 1;
    v11 = v10 || v9 == 13;
    v12 = v11 || v8 == 13;
    if (!v12 && v9 != 0)
    {
      if (v8 != v9 || v8 == 11 || v9 == 11)
      {
        WebCore::blendMixedTypes((int *)a4, a1, a2, a3, a5);
        return;
      }
      v16 = *(double *)a3;
      v17 = *(unsigned __int8 *)(a3 + 9);
      v18 = *(unsigned __int8 *)(a3 + 10);
      if (*(double *)a3 == 0.0 && v17 == 0 && v18 == 0)
      {
        *(_DWORD *)a4 = 0;
        *(_BYTE *)(a4 + 6) = 0;
        *(_BYTE *)(a4 + 4) = v8;
        *(_BYTE *)(a4 + 5) = a1[5];
        if ((v8 - 2) < 9)
        {
          v21 = a1[6];
          *(_BYTE *)(a4 + 6) = v21;
          if (!v21)
          {
            v22 = *(float *)a1;
LABEL_33:
            *(float *)a4 = v22;
            return;
          }
          v23 = *(float *)a1;
LABEL_35:
          *(float *)a4 = v23;
          return;
        }
        if (v8 != 11)
          return;
        v24 = *(float *)a1;
        *(_DWORD *)a4 = *(_DWORD *)a1;
        v25 = qword_1ECE90C98;
        v26 = *(_DWORD *)(qword_1ECE90C98 - 8);
        v27 = 9
            * ((LODWORD(v24) + ~(LODWORD(v24) << 15)) ^ ((LODWORD(v24) + ~(LODWORD(v24) << 15)) >> 10));
        v28 = (v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11);
        v29 = (v28 ^ HIWORD(v28)) & v26;
        v30 = qword_1ECE90C98 + 24 * v29;
        v31 = *(_DWORD *)v30;
        if (*(_DWORD *)v30 != LODWORD(v24))
        {
          v46 = 1;
          while (v31)
          {
            v29 = (v29 + v46) & v26;
            v30 = qword_1ECE90C98 + 24 * v29;
            v31 = *(_DWORD *)v30;
            ++v46;
            if (*(_DWORD *)v30 == LODWORD(v24))
              goto LABEL_39;
          }
          goto LABEL_92;
        }
      }
      else
      {
        if (v16 != 1.0 || v17 != 0 || v18 != 0)
        {
          if (v8 == 3)
          {
            if (a1[6])
            {
              v47 = *(float *)a1;
              if (*(float *)a1 == 0.0)
                v47 = 0.0;
            }
            else
            {
              v47 = (float)*(int *)a1;
            }
            if (a2[6])
            {
              v48 = 0.0;
              if (*(float *)a2 != 0.0)
                v48 = *(float *)a2;
            }
            else
            {
              v48 = (float)*(int *)a2;
            }
            *(float *)a4 = WebCore::blend(a3, v47, v48);
            *(_WORD *)(a4 + 4) = 3;
            *(_BYTE *)(a4 + 6) = 1;
          }
          else
          {
            if (a1[6])
            {
              v35 = *(float *)a1;
              if (*(float *)a1 == 0.0)
                v35 = 0.0;
            }
            else
            {
              v35 = (float)*(int *)a1;
            }
            if (a2[6])
            {
              v36 = 0.0;
              if (*(float *)a2 != 0.0)
                v36 = *(float *)a2;
            }
            else
            {
              v36 = 0.0;
              if (*(_DWORD *)a2)
                v36 = (float)*(int *)a2;
            }
            if (v18 == 1)
            {
              v49 = *(double *)(a3 + 16);
              if (v49 != 0.0)
              {
                v50 = v49 * v36;
                v35 = v35 + v50;
                v36 = v36 + v50;
              }
            }
            v37 = v35 + v35;
            if (!*(_BYTE *)(a3 + 9))
              v37 = v35;
            v38 = v37 + (float)(v36 - v35) * v16;
            *(float *)a4 = v38;
            *(_BYTE *)(a4 + 4) = v8;
            *(_WORD *)(a4 + 5) = 256;
          }
          return;
        }
        *(_DWORD *)a4 = 0;
        *(_BYTE *)(a4 + 6) = 0;
        *(_BYTE *)(a4 + 4) = v8;
        *(_BYTE *)(a4 + 5) = a2[5];
        if ((v8 - 2) < 9)
        {
          v34 = a2[6];
          *(_BYTE *)(a4 + 6) = v34;
          if (!v34)
          {
            v22 = *(float *)a2;
            goto LABEL_33;
          }
          v23 = *(float *)a2;
          goto LABEL_35;
        }
        if (v8 != 11)
          return;
        v39 = *(float *)a2;
        *(_DWORD *)a4 = *(_DWORD *)a2;
        v25 = qword_1ECE90C98;
        v40 = *(_DWORD *)(qword_1ECE90C98 - 8);
        v41 = 9
            * ((LODWORD(v39) + ~(LODWORD(v39) << 15)) ^ ((LODWORD(v39) + ~(LODWORD(v39) << 15)) >> 10));
        v42 = (v41 ^ (v41 >> 6)) + ~((v41 ^ (v41 >> 6)) << 11);
        v43 = (v42 ^ HIWORD(v42)) & v40;
        v30 = qword_1ECE90C98 + 24 * v43;
        v44 = *(_DWORD *)v30;
        if (*(_DWORD *)v30 != LODWORD(v39))
        {
          v45 = 1;
          while (v44)
          {
            v43 = (v43 + v45) & v40;
            v30 = qword_1ECE90C98 + 24 * v43;
            v44 = *(_DWORD *)v30;
            ++v45;
            if (*(_DWORD *)v30 == LODWORD(v39))
              goto LABEL_39;
          }
LABEL_92:
          v30 = v25 + 24 * *(unsigned int *)(v25 - 4);
        }
      }
LABEL_39:
      ++*(_QWORD *)(v30 + 8);
      return;
    }
  }
  if (*(double *)a3 >= 0.5)
    v7 = (const WebCore::Length *)a2;
  WebCore::Length::Length((WebCore::Length *)a4, v7);
}

int *WebCore::blendMixedTypes(int *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, __n128 a5)
{
  WTF *v7;
  int v9;
  BOOL v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  WTF **v29;
  WTF **v30;
  unsigned __int8 *v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned __int32 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  WTF *v55;

  v7 = (WTF *)result;
  if (*(_BYTE *)(a4 + 9))
    return (int *)WebCore::makeCalculated((uint64_t)result, 43, a2, a3);
  v9 = a2[4];
  v10 = (v9 - 7) < 4 || v9 == 0;
  if (!v10 && (v9 - 5) >= 2)
  {
    v23 = a3[4];
    v24 = (v23 - 7) < 4 || v23 == 0;
    if (!v24 && (v23 - 5) > 1)
    {
      if (v9 == 2 || v23 == 2)
      {
        *result = 0;
        *((_WORD *)result + 2) = 4;
        *((_BYTE *)result + 6) = 0;
        return result;
      }
      if (v23 == 11)
      {
LABEL_32:
        if (v9 == 11)
          goto LABEL_42;
        goto LABEL_36;
      }
      if (v9 == 3)
      {
LABEL_36:
        if (v23 == 3)
          goto LABEL_42;
        a5.n128_u64[0] = *(_QWORD *)a4;
        if (*(double *)a4 != 0.0)
        {
          if (!a3[4] || v23 == 11)
          {
LABEL_42:
            v25 = WTF::fastMalloc((WTF *)0x28);
            v26 = v25;
            LODWORD(v55) = 0;
            BYTE6(v55) = 0;
            BYTE4(v55) = a2[4];
            v27 = BYTE4(v55);
            BYTE5(v55) = a2[5];
            if (BYTE4(v55) - 2 >= 9)
            {
              v31 = a2;
              v28 = 0;
              if (BYTE4(v55) == 11)
              {
                v28 = *(unsigned int *)v31;
                LODWORD(v55) = v28;
                v32 = *(_DWORD *)(qword_1ECE90C98 - 8);
                v33 = 9 * ((v28 + ~((_DWORD)v28 << 15)) ^ ((v28 + ~((_DWORD)v28 << 15)) >> 10));
                v34 = (v33 ^ (v33 >> 6)) + ~((v33 ^ (v33 >> 6)) << 11);
                v35 = (v34 ^ HIWORD(v34)) & v32;
                v36 = qword_1ECE90C98 + 24 * v35;
                v37 = *(_DWORD *)v36;
                if (*(_DWORD *)v36 != (_DWORD)v28)
                {
                  v38 = 1;
                  while (v37)
                  {
                    v35 = (v35 + v38) & v32;
                    v36 = qword_1ECE90C98 + 24 * v35;
                    v37 = *(_DWORD *)v36;
                    ++v38;
                    if (*(_DWORD *)v36 == (_DWORD)v28)
                      goto LABEL_52;
                  }
                  v36 = qword_1ECE90C98 + 24 * *(unsigned int *)(qword_1ECE90C98 - 4);
                }
LABEL_52:
                ++*(_QWORD *)(v36 + 8);
              }
            }
            else
            {
              BYTE6(v55) = a2[6];
              if (BYTE6(v55))
              {
                LODWORD(v55) = *(_DWORD *)a2;
                v28 = v55;
              }
              else
              {
                v28 = *(unsigned int *)a2;
                LODWORD(v55) = v28;
              }
            }
            v51 = 0;
            v54 = 0;
            v52 = a3[4];
            v39 = v52;
            v53 = a3[5];
            if (v52 - 2 >= 9)
            {
              v40 = 0;
              if (v52 == 11)
              {
                v40 = (void *)*(unsigned int *)a3;
                v51 = v40;
                v44 = *(_DWORD *)(qword_1ECE90C98 - 8);
                v45 = 9
                    * (((_DWORD)v40 + ~((_DWORD)v40 << 15)) ^ (((_DWORD)v40 + ~((_DWORD)v40 << 15)) >> 10));
                v46 = (v45 ^ (v45 >> 6)) + ~((v45 ^ (v45 >> 6)) << 11);
                v47 = (v46 ^ HIWORD(v46)) & v44;
                v48 = qword_1ECE90C98 + 24 * v47;
                v49 = *(_DWORD *)v48;
                if (*(_DWORD *)v48 != (_DWORD)v40)
                {
                  v50 = 1;
                  while (v49)
                  {
                    v47 = (v47 + v50) & v44;
                    v48 = qword_1ECE90C98 + 24 * v47;
                    v49 = *(_DWORD *)v48;
                    ++v50;
                    if (*(_DWORD *)v48 == (_DWORD)v40)
                      goto LABEL_81;
                  }
                  v48 = qword_1ECE90C98 + 24 * *(unsigned int *)(qword_1ECE90C98 - 4);
                }
LABEL_81:
                ++*(_QWORD *)(v48 + 8);
              }
              WebCore::CalcExpressionBlendLength::CalcExpressionBlendLength(v25, (uint64_t)&v55, (uint64_t)&v51, *(double *)a4);
              if (v39 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v40);
              }
            }
            else
            {
              v54 = a3[6];
              v51 = *(_DWORD *)a3;
              WebCore::CalcExpressionBlendLength::CalcExpressionBlendLength(v25, (uint64_t)&v55, (uint64_t)&v51, *(double *)a4);
            }
            if (v27 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v28);
            }
            v41 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)v41 = 1;
            *(_QWORD *)(v41 + 8) = v26;
            *(_BYTE *)(v41 + 16) = 0;
            v55 = (WTF *)v41;
            result = (int *)WebCore::Length::Length((uint64_t)v7, &v55);
            v7 = v55;
            if (v55)
            {
              v14 = *(_DWORD *)v55 - 1;
              if (*(_DWORD *)v55 == 1)
              {
                v43 = *((_QWORD *)v55 + 1);
                *((_QWORD *)v55 + 1) = 0;
                if (v43)
                  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
                return (int *)WTF::fastFree(v7, v42);
              }
LABEL_14:
              *(_DWORD *)v7 = v14;
              return result;
            }
            return result;
          }
          if (a3[6])
          {
            a5.n128_u32[0] = *(_DWORD *)a3;
            if (*(float *)a3 != 0.0)
              goto LABEL_42;
          }
          else if (*(_DWORD *)a3)
          {
            goto LABEL_42;
          }
        }
        LODWORD(v55) = 0;
        BYTE4(v55) = v9;
        *(_WORD *)((char *)&v55 + 5) = 0;
        v30 = &v55;
        v29 = (WTF **)a2;
LABEL_71:
        result = (int *)WebCore::blend(v29, v30, a4, a5);
        if (BYTE4(v55) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v55);
        }
        return result;
      }
      a5.n128_u64[0] = *(_QWORD *)a4;
      if (*(double *)a4 != 1.0)
      {
        if (!a2[4])
          goto LABEL_36;
        if (v9 == 11)
          goto LABEL_42;
        if (a2[6])
        {
          a5.n128_u32[0] = *(_DWORD *)a2;
          if (*(float *)a2 != 0.0)
            goto LABEL_32;
        }
        else if (*(_DWORD *)a2)
        {
          goto LABEL_32;
        }
      }
      LODWORD(v55) = 0;
      BYTE4(v55) = v23;
      *(_WORD *)((char *)&v55 + 5) = 0;
      v29 = &v55;
      v30 = (WTF **)a3;
      goto LABEL_71;
    }
  }
  if (*(double *)a4 == 0.0)
    v11 = a2;
  else
    v11 = a3;
  *result = 0;
  *((_BYTE *)result + 6) = 0;
  v12 = v11[4];
  *((_BYTE *)result + 4) = v12;
  *((_BYTE *)result + 5) = v11[5];
  if ((v12 - 2) < 9)
  {
    v13 = v11[6];
    *((_BYTE *)result + 6) = v13;
    if (v13)
    {
      *result = *(_DWORD *)v11;
      return result;
    }
    v14 = *(_DWORD *)v11;
    goto LABEL_14;
  }
  if (v12 == 11)
  {
    v15 = *(_DWORD *)v11;
    *result = *(_DWORD *)v11;
    v16 = *(_DWORD *)(qword_1ECE90C98 - 8);
    v17 = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
    v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
    v19 = (v18 ^ HIWORD(v18)) & v16;
    v20 = qword_1ECE90C98 + 24 * v19;
    v21 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 != v15)
    {
      v22 = 1;
      while (v21)
      {
        v19 = (v19 + v22) & v16;
        v20 = qword_1ECE90C98 + 24 * v19;
        v21 = *(_DWORD *)v20;
        ++v22;
        if (*(_DWORD *)v20 == v15)
          goto LABEL_20;
      }
      v20 = qword_1ECE90C98 + 24 * *(unsigned int *)(qword_1ECE90C98 - 4);
    }
LABEL_20:
    ++*(_QWORD *)(v20 + 8);
  }
  return result;
}

float WebCore::blend(uint64_t a1, float a2, float a3)
{
  float v3;
  double v5;
  float v6;

  if (*(_BYTE *)(a1 + 10) == 1)
  {
    v5 = *(double *)(a1 + 16);
    if (v5 != 0.0)
    {
      v6 = v5 * a3;
      a2 = v6 + a2;
      a3 = v6 + a3;
    }
  }
  v3 = a2 + a2;
  if (!*(_BYTE *)(a1 + 9))
    v3 = a2;
  return v3 + (float)(a3 - a2) * *(double *)a1;
}

void WebCore::blend(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  int v10;
  int v11;
  int v13;
  float v14;
  unsigned __int8 v15;
  char v16;
  unsigned __int8 v17;

  WebCore::blend(a1, a2, a3, (uint64_t)&v14, a6);
  v10 = v15;
  if (a4 != 1)
    goto LABEL_2;
  if (v15 == 11 || v15 == 13)
    goto LABEL_2;
  if (!v17)
  {
    if ((LODWORD(v14) & 0x80000000) != 0)
      goto LABEL_14;
LABEL_2:
    *(_DWORD *)a5 = 0;
    *(_BYTE *)(a5 + 6) = 0;
    *(_BYTE *)(a5 + 4) = v10;
    *(_BYTE *)(a5 + 5) = v16;
    if ((v10 - 2) >= 9)
    {
      if (v10 != 11)
        return;
    }
    else
    {
      v11 = v17;
      *(_BYTE *)(a5 + 6) = v17;
      if (v11)
      {
        *(float *)a5 = v14;
        return;
      }
    }
    *(float *)a5 = v14;
    return;
  }
  if (v14 >= 0.0)
    goto LABEL_2;
LABEL_14:
  v13 = a1[4];
  if (!a1[4] || v13 == 11)
    goto LABEL_19;
  if (!a1[6])
  {
    if (*(_DWORD *)a1)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (*(float *)a1 == 0.0)
LABEL_18:
    v13 = a2[4];
LABEL_19:
  *(_DWORD *)a5 = 0;
  if (v13 == 11)
  {
    *(_WORD *)(a5 + 4) = 4;
    *(_BYTE *)(a5 + 6) = 0;
  }
  else
  {
    *(_BYTE *)(a5 + 4) = v13;
    *(_WORD *)(a5 + 5) = 0;
  }
}

uint64_t WebCore::operator<<(uint64_t a1, WebCore::Length *this)
{
  float v4;
  float v5;
  double v6;
  uint64_t v7;
  void *v8;
  _QWORD *v10;
  double v11;

  switch(*((_BYTE *)this + 4))
  {
    case 0:
    case 1:
    case 0xC:
    case 0xD:
      goto LABEL_15;
    case 2:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      if (*((_BYTE *)this + 6))
        v5 = *(float *)this;
      else
        v5 = (float)*(int *)this;
      v11 = v5;
      WTF::TextStream::operator<<();
      break;
    case 3:
      if (*((_BYTE *)this + 6))
        v4 = *(float *)this;
      else
        v4 = (float)*(int *)this;
      goto LABEL_14;
    case 4:
      if (*((_BYTE *)this + 6))
        v4 = *(float *)this;
      else
        v4 = (float)*(int *)this;
LABEL_14:
      v11 = v4;
      WTF::TextStream::operator<<();
LABEL_15:
      WTF::TextStream::operator<<();
      break;
    case 0xB:
      WebCore::Length::protectedCalculationValue((int *)this, &v11);
      v6 = v11;
      v7 = WTF::TextStream::operator<<();
      (*(void (**)(_QWORD *, uint64_t))(**(_QWORD **)(*(_QWORD *)&v6 + 8) + 32))(*(_QWORD **)(*(_QWORD *)&v6 + 8), v7);
      WTF::TextStream::operator<<();
      if (**(_DWORD **)&v6 == 1)
      {
        v10 = *(_QWORD **)(*(_QWORD *)&v6 + 8);
        *(_QWORD *)(*(_QWORD *)&v6 + 8) = 0;
        if (v10)
          (*(void (**)(_QWORD *))(*v10 + 8))(v10);
        WTF::fastFree(*(WTF **)&v6, v8);
      }
      else
      {
        --**(_DWORD **)&v6;
      }
      break;
    default:
      break;
  }
  if (*((_BYTE *)this + 5))
    WTF::TextStream::operator<<();
  return a1;
}

uint64_t *WTF::HashMap<unsigned int,WebCore::CalculationValueMap::Entry,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::CalculationValueMap::Entry>,WTF::HashTableTraits>::add<WebCore::CalculationValueMap::Entry&>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unsigned int v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::CalculationValueMap::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::CalculationValueMap::Entry>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::CalculationValueMap::Entry,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::CalculationValueMap::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (uint64_t *)(v8 + 24 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v30 = 0;
        else
          v30 = *(_DWORD *)(v8 - 4);
        v28 = 0;
        v27 = v8 + 24 * v30;
        goto LABEL_23;
      }
      if (v16 == -1)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (uint64_t *)(v8 + 24 * v14);
      v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15);
    if (v17)
    {
      *(_DWORD *)v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v15 = v17;
    }
  }
  *(_DWORD *)v15 = v11;
  v19 = (_DWORD *)a3[1];
  v15[1] = *a3;
  if (v19)
    ++*v19;
  v20 = (WTF *)v15[2];
  v15[2] = (uint64_t)v19;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
    {
      v29 = *((_QWORD *)v20 + 1);
      *((_QWORD *)v20 + 1) = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      result = (uint64_t *)WTF::fastFree(v20, a2);
    }
    else
    {
      --*(_DWORD *)v20;
    }
  }
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_22;
LABEL_25:
    result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::CalculationValueMap::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::CalculationValueMap::Entry>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::CalculationValueMap::Entry,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::CalculationValueMap::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(v6, (int *)v15);
    v15 = result;
    v23 = *v6;
    if (*v6)
      LODWORD(v26) = *(_DWORD *)(v23 - 4);
    else
      LODWORD(v26) = 0;
    goto LABEL_22;
  }
  if (3 * v26 <= 4 * v25)
    goto LABEL_25;
LABEL_22:
  v27 = v23 + 24 * v26;
  v28 = 1;
LABEL_23:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

int *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::CalculationValueMap::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::CalculationValueMap::Entry>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::CalculationValueMap::Entry,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::CalculationValueMap::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, int *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::CalculationValueMap::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::CalculationValueMap::Entry>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::CalculationValueMap::Entry,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::CalculationValueMap::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v5, a2);
}

int *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::CalculationValueMap::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::CalculationValueMap::Entry>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::CalculationValueMap::Entry,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::CalculationValueMap::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int *v24;
  uint64_t v25;
  WTF *v26;
  _QWORD *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  int *result;
  int *v40;
  int *v41;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 24);
    do
    {
      *((_DWORD *)v10 - 2) = 0;
      *v10 = 0;
      v10[1] = 0;
      v10 += 3;
      --v9;
    }
    while (v9);
  }
  v11 = a1;
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    v15 = a3;
    do
    {
      v16 = (int *)(v4 + 24 * v12);
      v17 = *v16;
      if (*v16)
      {
        if (v17 != -1)
        {
          v18 = *v11;
          if (*v11)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = 0;
          v21 = 9 * ((v17 + ~(v17 << 15)) ^ ((v17 + ~(v17 << 15)) >> 10));
          v22 = ((v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11)) ^ (((v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11)) >> 16);
          do
          {
            v23 = v22 & v19;
            v24 = (int *)(v18 + 24 * (v22 & v19));
            v22 = ++v20 + (v22 & v19);
          }
          while (*v24);
          v25 = v18 + 24 * v23;
          v28 = *(WTF **)(v25 + 16);
          v27 = (_QWORD *)(v25 + 16);
          v26 = v28;
          *v27 = 0;
          if (v28)
          {
            if (*(_DWORD *)v26 == 1)
            {
              v41 = v13;
              v36 = *((_QWORD *)v26 + 1);
              *((_QWORD *)v26 + 1) = 0;
              if (v36)
                (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
              WTF::fastFree(v26, v8);
              v15 = a3;
              v11 = a1;
              v13 = v41;
            }
            else
            {
              --*(_DWORD *)v26;
            }
          }
          *v24 = *v16;
          v29 = v4 + 24 * v12;
          v30 = *(_QWORD *)(v29 + 16);
          *(_QWORD *)(v18 + 24 * v23 + 8) = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 16) = 0;
          *v27 = v30;
          v31 = *(WTF **)(v29 + 16);
          *(_QWORD *)(v29 + 16) = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 1)
            {
              v37 = v13;
              v38 = *((_QWORD *)v31 + 1);
              *((_QWORD *)v31 + 1) = 0;
              if (v38)
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
              WTF::fastFree(v31, v8);
              v15 = a3;
              v11 = a1;
              v13 = v37;
            }
            else
            {
              --*(_DWORD *)v31;
            }
          }
          if (v16 == v15)
            v13 = v24;
        }
      }
      else
      {
        v32 = v4 + 24 * v12;
        v33 = *(WTF **)(v32 + 16);
        *(_QWORD *)(v32 + 16) = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 1)
          {
            v34 = v13;
            v35 = *((_QWORD *)v33 + 1);
            *((_QWORD *)v33 + 1) = 0;
            if (v35)
              (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
            WTF::fastFree(v33, v8);
            v15 = a3;
            v11 = a1;
            v13 = v34;
          }
          else
          {
            --*(_DWORD *)v33;
          }
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  v40 = v13;
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v40;
}

int *std::make_unique[abi:sn180100]<WebCore::CalcExpressionLength,WebCore::Length const&>(int **a1, unsigned __int8 *a2)
{
  int *result;
  int v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  void *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;

  result = (int *)WTF::fastMalloc((WTF *)0x18);
  v5 = a2[4];
  v6 = a2[5];
  if ((v5 - 2) >= 9)
  {
    if (v5 == 11)
    {
      v8 = (void *)*(unsigned int *)a2;
      v9 = *(_DWORD *)(qword_1ECE90C98 - 8);
      v10 = 9 * (((_DWORD)v8 + ~((_DWORD)v8 << 15)) ^ (((_DWORD)v8 + ~((_DWORD)v8 << 15)) >> 10));
      v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
      v12 = (v11 ^ HIWORD(v11)) & v9;
      v13 = qword_1ECE90C98 + 24 * v12;
      v14 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 != (_DWORD)v8)
      {
        v15 = 1;
        while (v14)
        {
          v12 = (v12 + v15) & v9;
          v13 = qword_1ECE90C98 + 24 * v12;
          v14 = *(_DWORD *)v13;
          ++v15;
          if (*(_DWORD *)v13 == (_DWORD)v8)
            goto LABEL_14;
        }
        v13 = qword_1ECE90C98 + 24 * *(unsigned int *)(qword_1ECE90C98 - 4);
      }
LABEL_14:
      v7 = 0;
      ++*(_QWORD *)(v13 + 8);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
  }
  else
  {
    v7 = a2[6];
    v8 = (void *)*(unsigned int *)a2;
  }
  *((_BYTE *)result + 8) = 2;
  *(_QWORD *)result = off_1E34088B0;
  result[3] = 0;
  *((_BYTE *)result + 18) = 0;
  *((_BYTE *)result + 16) = v5;
  *((_BYTE *)result + 17) = v6;
  if ((v5 - 2) >= 9)
  {
    if (v5 == 11)
    {
      result[3] = (int)v8;
      v16 = *(_DWORD *)(qword_1ECE90C98 - 8);
      v17 = 9 * (((_DWORD)v8 + ~((_DWORD)v8 << 15)) ^ (((_DWORD)v8 + ~((_DWORD)v8 << 15)) >> 10));
      v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
      v19 = v16 & (v18 ^ HIWORD(v18));
      v20 = qword_1ECE90C98 + 24 * v19;
      v21 = *(_DWORD *)v20;
      if (*(_DWORD *)v20 != (_DWORD)v8)
      {
        v22 = 1;
        while (v21)
        {
          v19 = (v19 + v22) & v16;
          v20 = qword_1ECE90C98 + 24 * v19;
          v21 = *(_DWORD *)v20;
          ++v22;
          if (*(_DWORD *)v20 == (_DWORD)v8)
            goto LABEL_19;
        }
        v20 = qword_1ECE90C98 + 24 * *(unsigned int *)(qword_1ECE90C98 - 4);
      }
LABEL_19:
      ++*(_QWORD *)(v20 + 8);
    }
    *a1 = result;
    if (v5 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v8);
    }
  }
  else
  {
    *((_BYTE *)result + 18) = v7;
    result[3] = (int)v8;
    *a1 = result;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(uint64_t **a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD v8[2];
  _QWORD *v9;

  v2 = *((_DWORD *)a2 + 2);
  v3 = **a1;
  v6 = *a2;
  v7 = v2;
  v8[0] = v3;
  v8[1] = v3;
  if (HIDWORD(v6) == 0xFFFFFFFF)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(v5);
  }
  else
  {
    v9 = v8;
    result = ((uint64_t (*)(_QWORD **, unint64_t *))off_1E3404B40[HIDWORD(v6)])(&v9, &v6);
    *(_BYTE *)(v3 + 5) = v7;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(uint64_t **a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD v8[2];
  _QWORD *v9;

  v2 = *((_DWORD *)a2 + 2);
  v3 = **a1;
  v6 = *a2;
  v7 = v2;
  v8[0] = v3;
  v8[1] = v3;
  if (HIDWORD(v6) == 0xFFFFFFFF)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(v5);
  }
  else
  {
    v9 = v8;
    result = ((uint64_t (*)(_QWORD **, unint64_t *))off_1E3404B50[HIDWORD(v6)])(&v9, &v6);
    *(_BYTE *)(v3 + 5) = v7;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(uint64_t **a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD v8[2];
  _QWORD *v9;

  v2 = *((_DWORD *)a2 + 2);
  v3 = **a1;
  v6 = *a2;
  v7 = v2;
  v8[0] = v3;
  v8[1] = v3;
  if (HIDWORD(v6) == 0xFFFFFFFF)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(v5);
  }
  else
  {
    v9 = v8;
    result = ((uint64_t (*)(_QWORD **, unint64_t *))off_1E3404B60[HIDWORD(v6)])(&v9, &v6);
    *(_BYTE *)(v3 + 5) = v7;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(uint64_t **a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD v8[2];
  _QWORD *v9;

  v2 = *((_DWORD *)a2 + 2);
  v3 = **a1;
  v6 = *a2;
  v7 = v2;
  v8[0] = v3;
  v8[1] = v3;
  if (HIDWORD(v6) == 0xFFFFFFFF)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(v5);
  }
  else
  {
    v9 = v8;
    result = ((uint64_t (*)(_QWORD **, unint64_t *))off_1E3404B70[HIDWORD(v6)])(&v9, &v6);
    *(_BYTE *)(v3 + 5) = v7;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(uint64_t **a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD v8[2];
  _QWORD *v9;

  v2 = *((_DWORD *)a2 + 2);
  v3 = **a1;
  v6 = *a2;
  v7 = v2;
  v8[0] = v3;
  v8[1] = v3;
  if (HIDWORD(v6) == 0xFFFFFFFF)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(v5);
  }
  else
  {
    v9 = v8;
    result = ((uint64_t (*)(_QWORD **, unint64_t *))off_1E3404B80[HIDWORD(v6)])(&v9, &v6);
    *(_BYTE *)(v3 + 5) = v7;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(uint64_t **a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD v8[2];
  _QWORD *v9;

  v2 = *((_DWORD *)a2 + 2);
  v3 = **a1;
  v6 = *a2;
  v7 = v2;
  v8[0] = v3;
  v8[1] = v3;
  if (HIDWORD(v6) == 0xFFFFFFFF)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(v5);
  }
  else
  {
    v9 = v8;
    result = ((uint64_t (*)(_QWORD **, unint64_t *))off_1E3404B90[HIDWORD(v6)])(&v9, &v6);
    *(_BYTE *)(v3 + 5) = v7;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(uint64_t **a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD v8[2];
  _QWORD *v9;

  v2 = *((_DWORD *)a2 + 2);
  v3 = **a1;
  v6 = *a2;
  v7 = v2;
  v8[0] = v3;
  v8[1] = v3;
  if (HIDWORD(v6) == 0xFFFFFFFF)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(v5);
  }
  else
  {
    v9 = v8;
    result = ((uint64_t (*)(_QWORD **, unint64_t *))off_1E3404BA0[HIDWORD(v6)])(&v9, &v6);
    *(_BYTE *)(v3 + 5) = v7;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(uint64_t **a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD v8[2];
  _QWORD *v9;

  v2 = *((_DWORD *)a2 + 2);
  v3 = **a1;
  v6 = *a2;
  v7 = v2;
  v8[0] = v3;
  v8[1] = v3;
  if (HIDWORD(v6) == 0xFFFFFFFF)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(v5);
  }
  else
  {
    v9 = v8;
    result = ((uint64_t (*)(_QWORD **, unint64_t *))off_1E3404BB0[HIDWORD(v6)])(&v9, &v6);
    *(_BYTE *)(v3 + 5) = v7;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Length::Length(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &&)::$_0,WebCore::Length::(std::variant<WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Length::AutoData,WebCore::Length::NormalData,WebCore::Length::RelativeData,WebCore::Length::PercentData,WebCore::Length::FixedData,WebCore::Length::IntrinsicData,WebCore::Length::MinIntrinsicData,WebCore::Length::MinContentData,WebCore::Length::MaxContentData,WebCore::Length::FillAvailableData,WebCore::Length::FitContentData,WebCore::Length::ContentData,WebCore::Length::UndefinedData> &>(uint64_t **a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  int v6;
  _QWORD v7[2];
  _QWORD *v8;

  v2 = *((_DWORD *)a2 + 2);
  v3 = **a1;
  v5 = *a2;
  v6 = v2;
  v7[0] = v3;
  v7[1] = v3;
  if (HIDWORD(v5) == 0xFFFFFFFF)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1960CC0E4);
  }
  v8 = v7;
  result = ((uint64_t (*)(_QWORD **, unint64_t *))off_1E3404BC0[HIDWORD(v5)])(&v8, &v5);
  *(_BYTE *)(v3 + 5) = v6;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISF_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISF_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t **a1, float *a2)
{
  float result;
  uint64_t v3;

  result = *a2;
  v3 = **a1;
  *(_BYTE *)(v3 + 6) = 1;
  *(float *)v3 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISF_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISF_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)result + 8);
  *(_BYTE *)(v3 + 6) = 0;
  *(_DWORD *)v3 = v2;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISG_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISG_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t **a1, float *a2)
{
  float result;
  uint64_t v3;

  result = *a2;
  v3 = **a1;
  *(_BYTE *)(v3 + 6) = 1;
  *(float *)v3 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISG_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISG_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)result + 8);
  *(_BYTE *)(v3 + 6) = 0;
  *(_DWORD *)v3 = v2;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISH_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISH_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t **a1, float *a2)
{
  float result;
  uint64_t v3;

  result = *a2;
  v3 = **a1;
  *(_BYTE *)(v3 + 6) = 1;
  *(float *)v3 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISH_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISH_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)result + 8);
  *(_BYTE *)(v3 + 6) = 0;
  *(_DWORD *)v3 = v2;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISI_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISI_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t **a1, float *a2)
{
  float result;
  uint64_t v3;

  result = *a2;
  v3 = **a1;
  *(_BYTE *)(v3 + 6) = 1;
  *(float *)v3 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISI_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISI_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)result + 8);
  *(_BYTE *)(v3 + 6) = 0;
  *(_DWORD *)v3 = v2;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISJ_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISJ_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t **a1, float *a2)
{
  float result;
  uint64_t v3;

  result = *a2;
  v3 = **a1;
  *(_BYTE *)(v3 + 6) = 1;
  *(float *)v3 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISJ_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISJ_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)result + 8);
  *(_BYTE *)(v3 + 6) = 0;
  *(_DWORD *)v3 = v2;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISK_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISK_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t **a1, float *a2)
{
  float result;
  uint64_t v3;

  result = *a2;
  v3 = **a1;
  *(_BYTE *)(v3 + 6) = 1;
  *(float *)v3 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISK_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISK_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)result + 8);
  *(_BYTE *)(v3 + 6) = 0;
  *(_DWORD *)v3 = v2;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISL_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISL_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t **a1, float *a2)
{
  float result;
  uint64_t v3;

  result = *a2;
  v3 = **a1;
  *(_BYTE *)(v3 + 6) = 1;
  *(float *)v3 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISL_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISL_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)result + 8);
  *(_BYTE *)(v3 + 6) = 0;
  *(_DWORD *)v3 = v2;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISM_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISM_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t **a1, float *a2)
{
  float result;
  uint64_t v3;

  result = *a2;
  v3 = **a1;
  *(_BYTE *)(v3 + 6) = 1;
  *(float *)v3 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISM_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISM_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)result + 8);
  *(_BYTE *)(v3 + 6) = 0;
  *(_DWORD *)v3 = v2;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISN_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISN_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t **a1, float *a2)
{
  float result;
  uint64_t v3;

  result = *a2;
  v3 = **a1;
  *(_BYTE *)(v3 + 6) = 1;
  *(float *)v3 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN7WebCore6LengthC1EONS_7variantIJNSB_8AutoDataENSB_10NormalDataENSB_12RelativeDataENSB_11PercentDataENSB_9FixedDataENSB_13IntrinsicDataENSB_16MinIntrinsicDataENSB_14MinContentDataENSB_14MaxContentDataENSB_17FillAvailableDataENSB_14FitContentDataENSB_11ContentDataENSB_13UndefinedDataEEEEENK3__0clISN_EEDaT_EUlfE_JZZNSB_C1ESR_ENKST_ISN_EESU_SV_EUliE_EEEEEJRNS0_6__baseILNS0_6_TraitE0EJfiEEEEEEDcSV_DpT0_(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)result + 8);
  *(_BYTE *)(v3 + 6) = 0;
  *(_DWORD *)v3 = v2;
  return result;
}

float WebCore::floatValueForLength(WebCore::Length *a1, int a2)
{
  float v2;
  float result;

  if (*((_BYTE *)a1 + 4) == 3)
  {
    v2 = *(float *)a1;
    if (!*((_BYTE *)a1 + 6))
      v2 = (float)*(int *)a1;
    return (float)((float)((float)a2 * 0.015625) * v2) / 100.0;
  }
  else
  {
    result = 0.0;
    switch(*((_BYTE *)a1 + 4))
    {
      case 0:
      case 1:
      case 9:
        result = (float)a2 * 0.015625;
        break;
      case 4:
        if (*((_BYTE *)a1 + 6))
          result = *(float *)a1;
        else
          result = (float)*(int *)a1;
        break;
      case 0xB:
        WebCore::Length::nonNanCalculatedValue(a1, (float)a2 * 0.015625);
        break;
      default:
        return result;
    }
  }
  return result;
}

float WebCore::floatValueForLength(WebCore *this, const WebCore::Length *a2, float result)
{
  float v3;

  switch(*((_BYTE *)this + 4))
  {
    case 0:
    case 1:
    case 9:
      return result;
    case 3:
      v3 = *(float *)this;
      if (!*((_BYTE *)this + 6))
        v3 = (float)*(int *)this;
      result = (float)(v3 * result) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 6))
        result = *(float *)this;
      else
        result = (float)*(int *)this;
      break;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue(this, result);
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

float WebCore::floatSizeForLengthSize(WebCore *this, const WebCore::LengthSize *a2, const WebCore::FloatSize *a3)
{
  float result;
  float v4;
  const WebCore::LengthSize *v5;
  WebCore *v6;
  float v7;

  result = *(float *)a2;
  switch(*((_BYTE *)this + 4))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v4 = *(float *)this;
      if (!*((_BYTE *)this + 6))
        v4 = (float)*(int *)this;
      result = (float)(result * v4) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 6))
        result = *(float *)this;
      else
        result = (float)*(int *)this;
      break;
    case 0xB:
      v5 = a2;
      v6 = this;
      WebCore::Length::nonNanCalculatedValue(this, result);
      a2 = v5;
      this = v6;
      break;
    default:
      result = 0.0;
      break;
  }
  switch(*((_BYTE *)this + 12))
  {
    case 0xB:
      v7 = result;
      WebCore::Length::nonNanCalculatedValue((WebCore *)((char *)this + 8), *((float *)a2 + 1));
      result = v7;
      break;
    default:
      return result;
  }
  return result;
}

float WebCore::floatPointForLengthPoint(_BYTE *a1, float *a2)
{
  float result;
  float v3;
  float *v4;
  _BYTE *v5;
  float v6;

  result = *a2;
  switch(a1[4])
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v3 = *(float *)a1;
      if (!a1[6])
        v3 = (float)*(int *)a1;
      result = (float)(result * v3) / 100.0;
      break;
    case 4:
      if (a1[6])
        result = *(float *)a1;
      else
        result = (float)*(int *)a1;
      break;
    case 0xB:
      v4 = a2;
      v5 = a1;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a1, result);
      a2 = v4;
      a1 = v5;
      break;
    default:
      result = 0.0;
      break;
  }
  switch(a1[12])
  {
    case 0xB:
      v6 = result;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(a1 + 8), a2[1]);
      result = v6;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WebCore::operator<<(uint64_t a1, unsigned int *a2)
{
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  unsigned int v10;
  unsigned __int8 v11;
  char v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  char v16;
  char v17;

  v14 = 0;
  v17 = 0;
  v15 = *((_BYTE *)a2 + 4);
  v4 = v15;
  v16 = *((_BYTE *)a2 + 5);
  if (v15 - 2 >= 9)
  {
    v5 = 0;
    if (v15 == 11)
    {
      v5 = (void *)*a2;
      v14 = *a2;
      WebCore::Length::ref((int *)&v14);
    }
  }
  else
  {
    v17 = *((_BYTE *)a2 + 6);
    if (v17)
    {
      v14 = *a2;
      v5 = (void *)v14;
    }
    else
    {
      v5 = (void *)*a2;
      v14 = *a2;
    }
  }
  WebCore::operator<<(a1, (WebCore::Length *)&v14);
  v6 = WTF::TextStream::operator<<();
  v7 = v6;
  v10 = 0;
  v13 = 0;
  v11 = *((_BYTE *)a2 + 12);
  v12 = *((_BYTE *)a2 + 13);
  if (v11 - 2 < 9)
  {
    v13 = *((_BYTE *)a2 + 14);
    v10 = a2[2];
LABEL_10:
    WebCore::operator<<(v6, (WebCore::Length *)&v10);
    goto LABEL_11;
  }
  if (v11 != 11)
    goto LABEL_10;
  v9 = (void *)a2[2];
  v10 = v9;
  WebCore::Length::ref((int *)&v10);
  WebCore::operator<<(v7, (WebCore::Length *)&v10);
  {
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
  }
  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v9);
LABEL_11:
  if (v4 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v5);
  }
  return v7;
}

void WebCore::formatLocalizedString(CFStringRef key@<X0>, uint64_t a2@<X8>, ...)
{
  const __CFString *v3;
  const __CFString *v5;
  CFStringRef v6;
  CFBundleRef BundleWithIdentifier;
  va_list va;

  va_start(va, a2);
  v3 = key;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = key;
  }
  v5 = CFBundleCopyLocalizedString((CFBundleRef)qword_1ECE83B48, v3, CFSTR("localized string not found"), 0);
  v6 = CFStringCreateWithFormatAndArguments(0, 0, v5, va);
  MEMORY[0x19AEA5508](a2, v6);
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
}

CFStringRef WebCore::copyLocalizedString@<X0>(CFStringRef key@<X0>, CFStringRef *a2@<X8>)
{
  const __CFString *v3;
  uint64_t *v5;
  CFStringRef result;
  CFBundleRef BundleWithIdentifier;

  v3 = key;
  v5 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = key;
    v5 = &qword_1ECE83000;
  }
  result = CFBundleCopyLocalizedString((CFBundleRef)v5[361], v3, CFSTR("localized string not found"), 0);
  *a2 = result;
  return result;
}

WTF::StringImpl *WebCore::truncatedStringForMenuItem@<X0>(WTF::StringImpl **a1@<X8>)
{
  unsigned int v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  WTF::String::trim();
  v4 = WTF::numCodeUnitsInGraphemeClusters();
  v6 = (uint64_t)v11;
  if (v11)
  {
    v7 = *((_DWORD *)v11 + 1);
    if (v4 == v7)
    {
      *(_DWORD *)v11 += 2;
LABEL_4:
      *a1 = v11;
      goto LABEL_12;
    }
    if (v7 <= v4)
    {
      *(_DWORD *)v11 += 2;
      v10 = v11;
      if ((v7 & 0x80000000) != 0)
        goto LABEL_21;
      goto LABEL_7;
    }
    WTF::StringImpl::substring(v11);
    v6 = (uint64_t)v10;
    if (v10)
    {
      v7 = *((_DWORD *)v10 + 1);
      if ((v7 & 0x80000000) != 0)
        goto LABEL_21;
LABEL_7:
      v8 = v7 + 1;
      if (!__OFADD__(v7, 1))
        goto LABEL_8;
LABEL_21:
      *a1 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    if (!v4)
      goto LABEL_4;
    v6 = 0;
    v10 = 0;
  }
  v8 = 1;
LABEL_8:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char16_t,void>>(v8, 0, v6, 8230, a1);
  if (!*a1)
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x1960CCA90);
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v5);
    else
      *(_DWORD *)v10 -= 2;
  }
LABEL_12:
  result = v11;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  return result;
}

void WebCore::inputElementAltText(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("Submit (input element)"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::resetButtonDefaultLabel(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("Reset"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::submitButtonDefaultLabel(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("Submit"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::fileButtonChooseFileLabel(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("Choose File"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::fileButtonChooseMultipleFilesLabel(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("Choose Files"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::fileButtonNoFileSelectedLabel(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("no file selected"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::fileButtonNoFilesSelectedLabel(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("no files selected"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::defaultDetailsSummaryText(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("Details"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::AXColorWellText(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("color well"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::AXFooterRoleDescriptionText(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("footer"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::AXSuggestionRoleDescriptionText(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("suggestion"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::AXAttachmentRoleText(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("attachment"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::AXFigureText(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("figure"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::AXDateFieldMonthText(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("month"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::AXDateFieldDayText(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("day"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::AXDateFieldYearText(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("year"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::AXTimeFieldHourText(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("hour"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::AXTimeFieldMinuteText(uint64_t a1@<X8>)
{
  uint64_t *v3;
  CFStringRef v4;
  CFBundleRef BundleWithIdentifier;

  v3 = &qword_1ECE83000;
  if ((byte_1ECE83B32 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    qword_1ECE83B48 = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
      CFRetain(BundleWithIdentifier);
    byte_1ECE83B32 = 1;
    v3 = &qword_1ECE83000;
  }
  v4 = CFBundleCopyLocalizedString((CFBundleRef)v3[361], CFSTR("minutes"), CFSTR("localized string not found"), 0);
  MEMORY[0x19AEA5508](a1, v4);
  if (v4)
    CFRelease(v4);
}

void WebCore::AXTimeFieldSecondText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("seconds"), a1);
}

void WebCore::AXTimeFieldMillisecondText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("milliseconds"), a1);
}

void WebCore::AXARIAContentGroupText(const char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  BOOL v3;
  uint8x16_t v4;
  _BOOL4 v5;
  const __CFString *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint8x16_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  _BOOL4 v13;
  BOOL v14;
  _BOOL4 v15;
  uint8x16_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  BOOL v21;
  _BOOL4 v22;
  _BOOL4 v23;
  BOOL v24;
  _BOOL4 v25;
  uint8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint8x16_t v37;
  _BOOL4 v38;
  BOOL v39;
  _BOOL4 v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  _BOOL4 v44;
  _BOOL4 v45;
  uint8x16_t v46;
  _BOOL4 v47;
  uint16x8_t v48;
  uint16x8_t v49;
  _BOOL4 v50;
  BOOL v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  char v55;
  uint16x8_t v56;
  uint16x8_t v58;
  uint16x8_t v59;
  char v60;
  uint16x8_t v61;
  uint16x8_t v63;
  uint16x8_t v64;
  uint8x16_t v65;
  _BOOL4 v66;
  _BOOL4 v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  char v74;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  char v81;
  uint16x8_t v82;
  uint16x8_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint8x16_t v89;
  char v90;
  __int32 v91;
  uint16x8_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  char v95;
  uint16x8_t v96;
  uint16x8_t v97;
  char v98;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint16x8_t v103;
  uint16x8_t v104;
  uint16x8_t v105;

  v3 = (_DWORD)a2 != 20;
  if (a1 != "ARIAApplicationAlert" && (_DWORD)a2 == 20)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 65)
      {
        v4 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 4), (int8x16_t)xmmword_1969F6690), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F6680));
        v4.i8[0] = vminvq_u8(v4);
        v5 = v4.i32[0];
        if (!v4.i32[0])
          goto LABEL_39;
        goto LABEL_9;
      }
LABEL_40:
      v13 = 0;
      v5 = 0;
      goto LABEL_41;
    }
    if (*(_WORD *)a1 != 65)
      goto LABEL_40;
    v10 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F66A0);
    v10.i16[0] = vminvq_u16(v10);
    v5 = v10.i32[0];
    if (v10.i32[0])
    {
      v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 8), (int16x8_t)xmmword_1969F66B0);
      v11.i16[0] = vminvq_u16(v11);
      if (!v11.i32[0]
        || (v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 24), (int16x8_t)xmmword_1969F66C0),
            v12.i16[0] = vminvq_u16(v12),
            !v12.i32[0]))
      {
        v7 = 0;
        v8 = a1 == "ARIAApplicationAlertDialog";
        goto LABEL_22;
      }
LABEL_9:
      v6 = CFSTR("alert");
LABEL_10:
      WebCore::localizedString(v6, (uint64_t)a3);
      return;
    }
LABEL_39:
    v13 = 0;
LABEL_41:
    v14 = 1;
    goto LABEL_42;
  }
  if (a1 == "ARIAApplicationAlert" && (_DWORD)a2 == 20)
    goto LABEL_9;
  v7 = a2 == 26;
  v8 = a1 == "ARIAApplicationAlertDialog";
  if (a1 != "ARIAApplicationAlertDialog" && (_DWORD)a2 == 26)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 != 65)
        goto LABEL_40;
      v9 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 10), (int8x16_t)xmmword_1969F66D0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F6680));
      v9.i8[0] = vminvq_u8(v9);
      v5 = v9.i32[0];
      if (!v9.i32[0])
        goto LABEL_39;
    }
    else
    {
      if (*(_WORD *)a1 != 65)
        goto LABEL_40;
      v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F66A0);
      v17.i16[0] = vminvq_u16(v17);
      v5 = v17.i32[0];
      if (!v17.i32[0])
        goto LABEL_39;
      v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1969F66E0);
      v18.i16[0] = vminvq_u16(v18);
      if (!v18.i32[0]
        || (v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 20), (int16x8_t)xmmword_1969F66F0),
            v19.i16[0] = vminvq_u16(v19),
            !v19.i32[0])
        || (v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 36), (int16x8_t)xmmword_1969F6700),
            v20.i16[0] = vminvq_u16(v20),
            !v20.i32[0]))
      {
        v13 = 0;
        v15 = a1 == "ARIAApplicationDialog";
        v14 = 1;
        goto LABEL_36;
      }
    }
LABEL_16:
    v6 = CFSTR("web alert dialog");
    goto LABEL_10;
  }
LABEL_22:
  if (v8 && v7)
    goto LABEL_16;
  v13 = a2 == 21;
  v14 = (_DWORD)a2 != 21;
  v15 = a1 == "ARIAApplicationDialog";
  if (a1 == "ARIAApplicationDialog" || (_DWORD)a2 != 21)
  {
LABEL_36:
    if (v15 && v13)
      goto LABEL_38;
    v5 = a2 == 18;
    v21 = (_DWORD)a2 != 18;
    v25 = a1 == "ARIAApplicationLog";
    if (a1 == "ARIAApplicationLog" || (_DWORD)a2 != 18)
      goto LABEL_58;
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 65)
      {
        v26 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1969F6750), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F6740));
        v26.i8[0] = vminvq_u8(v26);
        v21 = v26.i8[0];
        if (v26.i32[0])
          goto LABEL_52;
        goto LABEL_74;
      }
    }
    else if (*(_WORD *)a1 == 65)
    {
      v31 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F66A0);
      v31.i16[0] = vminvq_u16(v31);
      v21 = v31.i8[0];
      if (v31.i32[0])
      {
        v32 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1969F66E0);
        v32.i16[0] = vminvq_u16(v32);
        v21 = v32.i8[0];
        if (!v32.i32[0])
          goto LABEL_43;
        v33 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 20), (int16x8_t)xmmword_1969F6760);
        v33.i16[0] = vminvq_u16(v33);
        v21 = v33.i8[0];
        if (!v33.i32[0])
          goto LABEL_43;
LABEL_52:
        v6 = CFSTR("log");
        goto LABEL_10;
      }
LABEL_74:
      v22 = 0;
      v24 = 1;
      goto LABEL_75;
    }
    v21 = 0;
    goto LABEL_74;
  }
  if ((a2 & 0xFF00000000) != 0)
  {
    if (*a1 == 65)
    {
      v16 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 5), (int8x16_t)xmmword_1969F6720), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F6710));
      v16.i8[0] = vminvq_u8(v16);
      v5 = v16.i32[0];
      if (!v16.i32[0])
      {
LABEL_29:
        v14 = 0;
LABEL_42:
        v21 = 1;
LABEL_43:
        v22 = 0;
        v23 = a1 == "ARIAApplicationMarquee";
        v24 = 1;
        goto LABEL_44;
      }
      goto LABEL_38;
    }
LABEL_67:
    v14 = 0;
    v5 = 0;
    goto LABEL_42;
  }
  if (*(_WORD *)a1 != 65)
    goto LABEL_67;
  v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F66A0);
  v27.i16[0] = vminvq_u16(v27);
  v5 = v27.i32[0];
  if (!v27.i32[0])
    goto LABEL_29;
  v28 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968DE290);
  v28.i16[0] = vminvq_u16(v28);
  if (v28.i32[0])
  {
    v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 26), (int16x8_t)xmmword_1969F6730);
    v29.i16[0] = vminvq_u16(v29);
    if (v29.i32[0])
    {
LABEL_38:
      v6 = CFSTR("web dialog");
      goto LABEL_10;
    }
  }
  v5 = 0;
  v14 = 0;
  v25 = a1 == "ARIAApplicationLog";
  v21 = 1;
LABEL_58:
  if (v25 && v5)
    goto LABEL_52;
  v22 = a2 == 22;
  v24 = (_DWORD)a2 != 22;
  v23 = a1 == "ARIAApplicationMarquee";
  if (a1 == "ARIAApplicationMarquee" || (_DWORD)a2 != 22)
  {
LABEL_44:
    if (v23 && v22)
      goto LABEL_46;
    goto LABEL_75;
  }
  if ((a2 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)a1 == 65)
    {
      v104 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F66A0);
      v104.i16[0] = vminvq_u16(v104);
      v24 = v104.i8[0];
      if (!v104.i32[0])
        goto LABEL_75;
      v105 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1969F6790);
      v105.i16[0] = vminvq_u16(v105);
      v24 = v105.i8[0];
      if (!v105.i32[0])
        goto LABEL_75;
      v30 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 28), (int16x8_t)xmmword_1969F67A0);
      v30.i16[0] = vminvq_u16(v30);
      goto LABEL_65;
    }
LABEL_351:
    v24 = 0;
    goto LABEL_75;
  }
  if (*a1 != 65)
    goto LABEL_351;
  v30 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 6), (int8x16_t)xmmword_1969F6780), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F6770));
  v30.i8[0] = vminvq_u8((uint8x16_t)v30);
LABEL_65:
  v24 = v30.i8[0];
  if (v30.i32[0])
  {
LABEL_46:
    v6 = CFSTR("marquee");
    goto LABEL_10;
  }
LABEL_75:
  if (a1 == "ARIAApplicationStatus" || v14)
  {
    if (a1 != "ARIAApplicationStatus")
      v13 = 0;
    if (v13)
      goto LABEL_86;
  }
  else
  {
    if (!(_DWORD)a2)
      goto LABEL_86;
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 != 65)
        goto LABEL_91;
      v34 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 5), (int8x16_t)xmmword_1969F67C0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F67B0));
      v34.i8[0] = vminvq_u8((uint8x16_t)v34);
LABEL_81:
      if (!v34.i32[0])
        goto LABEL_91;
LABEL_86:
      v6 = CFSTR("application status");
      goto LABEL_10;
    }
    if (*(_WORD *)a1 == 65)
    {
      v35 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F66A0);
      v35.i16[0] = vminvq_u16(v35);
      if (v35.i32[0])
      {
        v36 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968DE290);
        v36.i16[0] = vminvq_u16(v36);
        if (v36.i32[0])
        {
          v34 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 26), (int16x8_t)xmmword_1969F67D0);
          v34.i16[0] = vminvq_u16(v34);
          goto LABEL_81;
        }
      }
    }
  }
LABEL_91:
  if (a1 == "ARIAApplicationTimer")
    v3 = 1;
  if (v3)
  {
    if (a1 == "ARIAApplicationTimer" && (_DWORD)a2 == 20)
      goto LABEL_100;
    v38 = a2 == 12;
    v39 = (_DWORD)a2 != 12;
    v40 = a1 == "ARIADocument";
    if (a1 != "ARIADocument" && (_DWORD)a2 == 12)
    {
      if ((a2 & 0xFF00000000) != 0)
      {
        if (*a1 == 65 && *(_QWORD *)(a1 + 1) == 0x6D75636F44414952 && *(_QWORD *)(a1 + 4) == 0x746E656D75636F44)
          goto LABEL_107;
      }
      else if (*(_WORD *)a1 == 65)
      {
        v48 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F6810);
        v48.i16[0] = vminvq_u16(v48);
        v39 = v48.i8[0];
        if (!v48.i32[0])
          goto LABEL_131;
        v49 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 8), (int16x8_t)xmmword_1969F6820);
        v49.i16[0] = vminvq_u16(v49);
        v39 = v49.i8[0];
        if (!v49.i32[0])
        {
          v44 = 0;
          v45 = a1 == "ARIADocumentArticle";
          goto LABEL_127;
        }
LABEL_107:
        v6 = CFSTR("document");
        goto LABEL_10;
      }
      v39 = 0;
      goto LABEL_131;
    }
  }
  else
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 65)
      {
        v37 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 4), (int8x16_t)xmmword_1969F67F0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F67E0));
        v37.i8[0] = vminvq_u8(v37);
        v38 = v37.i32[0];
        if (!v37.i32[0])
          goto LABEL_122;
LABEL_100:
        v6 = CFSTR("timer");
        goto LABEL_10;
      }
      goto LABEL_121;
    }
    if (*(_WORD *)a1 != 65)
    {
LABEL_121:
      v38 = 0;
      goto LABEL_122;
    }
    v41 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F66A0);
    v41.i16[0] = vminvq_u16(v41);
    v38 = v41.i32[0];
    if (!v41.i32[0])
    {
LABEL_122:
      v39 = 1;
LABEL_131:
      v47 = 0;
      v50 = a1 == "ARIADocumentNote";
      v51 = 1;
      goto LABEL_132;
    }
    v42 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 8), (int16x8_t)xmmword_1969F66B0);
    v42.i16[0] = vminvq_u16(v42);
    if (v42.i32[0])
    {
      v43 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 24), (int16x8_t)xmmword_1969F6800);
      v43.i16[0] = vminvq_u16(v43);
      if (v43.i32[0])
        goto LABEL_100;
    }
    v38 = 0;
    v40 = a1 == "ARIADocument";
    v39 = 1;
  }
  if (v40 && v38)
    goto LABEL_107;
  v44 = a2 == 19;
  v45 = a1 == "ARIADocumentArticle";
  if (a1 != "ARIADocumentArticle" && (_DWORD)a2 == 19)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 65)
      {
        v46 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 3), (int8x16_t)xmmword_1969F6840), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F6830));
        v46.i8[0] = vminvq_u8(v46);
        v47 = v46.i32[0];
        if (!v46.i32[0])
          goto LABEL_148;
LABEL_129:
        v6 = CFSTR("article");
        goto LABEL_10;
      }
    }
    else if (*(_WORD *)a1 == 65)
    {
      v52 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F6810);
      v52.i16[0] = vminvq_u16(v52);
      v47 = v52.i32[0];
      if (v52.i32[0])
      {
        v53 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1969F6850);
        v53.i16[0] = vminvq_u16(v53);
        if (!v53.i32[0])
          goto LABEL_131;
        v54 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 22), (int16x8_t)xmmword_1969F6860);
        v54.i16[0] = vminvq_u16(v54);
        if (!v54.i32[0])
          goto LABEL_131;
        goto LABEL_129;
      }
LABEL_148:
      v51 = 1;
      goto LABEL_149;
    }
    v47 = 0;
    goto LABEL_148;
  }
LABEL_127:
  if (v45 && v44)
    goto LABEL_129;
  v47 = a2 == 16;
  v51 = (_DWORD)a2 != 16;
  v50 = a1 == "ARIADocumentNote";
  if (a1 != "ARIADocumentNote" && (_DWORD)a2 == 16)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 65 && *(_QWORD *)(a1 + 1) == 0x6D75636F44414952 && *((_QWORD *)a1 + 1) == 0x65746F4E746E656DLL)
        goto LABEL_134;
    }
    else if (*(_WORD *)a1 == 65)
    {
      v102 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F6810);
      v102.i16[0] = vminvq_u16(v102);
      v51 = v102.i8[0];
      if (v102.i32[0])
      {
        v103 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1969F6870);
        v103.i16[0] = vminvq_u16(v103);
        v51 = v103.i8[0];
        if (v103.i32[0])
          goto LABEL_134;
      }
      goto LABEL_149;
    }
    v51 = 0;
    goto LABEL_149;
  }
LABEL_132:
  if (v50 && v47)
  {
LABEL_134:
    v6 = CFSTR("note");
    goto LABEL_10;
  }
LABEL_149:
  v55 = a1 == "ARIAWebApplication" || v21;
  if ((v55 & 1) != 0)
  {
    if (a1 != "ARIAWebApplication" || !v5)
      goto LABEL_168;
LABEL_163:
    v6 = CFSTR("web application");
    goto LABEL_10;
  }
  if (!(_DWORD)a2)
    goto LABEL_163;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (*a1 != 65)
      goto LABEL_168;
    v56 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1969F6890), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F6880));
    v56.i8[0] = vminvq_u8((uint8x16_t)v56);
  }
  else
  {
    if (*(_WORD *)a1 != 65)
      goto LABEL_168;
    v58 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F68A0);
    v58.i16[0] = vminvq_u16(v58);
    if (!v58.i32[0])
      goto LABEL_168;
    v59 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1969F68B0);
    v59.i16[0] = vminvq_u16(v59);
    if (!v59.i32[0])
      goto LABEL_168;
    v56 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 20), (int16x8_t)xmmword_1969F68C0);
    v56.i16[0] = vminvq_u16(v56);
  }
  if (v56.i32[0])
    goto LABEL_163;
LABEL_168:
  v60 = a1 == "ARIALandmarkBanner" || v21;
  if ((v60 & 1) != 0)
  {
    if (a1 == "ARIALandmarkBanner" && v5)
      goto LABEL_182;
  }
  else
  {
    if (!(_DWORD)a2)
      goto LABEL_182;
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 65)
      {
        v61 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1969F68E0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F68D0));
        v61.i8[0] = vminvq_u8((uint8x16_t)v61);
        goto LABEL_176;
      }
    }
    else if (*(_WORD *)a1 == 65)
    {
      v63 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F68F0);
      v63.i16[0] = vminvq_u16(v63);
      if (v63.i32[0])
      {
        v64 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1969F6900);
        v64.i16[0] = vminvq_u16(v64);
        if (v64.i32[0])
        {
          v61 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 20), (int16x8_t)xmmword_1969F6910);
          v61.i16[0] = vminvq_u16(v61);
LABEL_176:
          if (!v61.i32[0])
            goto LABEL_187;
LABEL_182:
          v6 = CFSTR("banner");
          goto LABEL_10;
        }
      }
    }
  }
LABEL_187:
  if (a1 != "ARIALandmarkComplementary" && (_DWORD)a2 == 25)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 != 65)
        goto LABEL_215;
      v65 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 9), (int8x16_t)xmmword_1969F6930), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F6920));
      v65.i8[0] = vminvq_u8(v65);
      if (!v65.i32[0])
        goto LABEL_215;
LABEL_195:
      v6 = CFSTR("complementary");
      goto LABEL_10;
    }
    if (*(_WORD *)a1 != 65)
      goto LABEL_215;
    v69 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F68F0);
    v69.i16[0] = vminvq_u16(v69);
    if (!v69.i32[0])
      goto LABEL_215;
    v70 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 18), (int16x8_t)xmmword_1969F6940);
    v70.i16[0] = vminvq_u16(v70);
    if (v70.i32[0])
    {
      v71 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 34), (int16x8_t)xmmword_1969F6950);
      v71.i16[0] = vminvq_u16(v71);
      if (v71.i32[0])
        goto LABEL_195;
    }
    v66 = 0;
    v67 = a1 == "ARIALandmarkContentInfo";
LABEL_209:
    if (!v67)
      goto LABEL_215;
    goto LABEL_202;
  }
  if (a1 == "ARIALandmarkComplementary" && (_DWORD)a2 == 25)
    goto LABEL_195;
  v66 = a2 == 23;
  v67 = a1 == "ARIALandmarkContentInfo";
  if (a1 == "ARIALandmarkContentInfo" || (_DWORD)a2 != 23)
    goto LABEL_209;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (*a1 != 65)
      goto LABEL_215;
    v68 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 7), (int8x16_t)xmmword_1969F6970), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F6960));
    v68.i8[0] = vminvq_u8((uint8x16_t)v68);
  }
  else
  {
    if (*(_WORD *)a1 != 65)
      goto LABEL_215;
    v72 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F68F0);
    v72.i16[0] = vminvq_u16(v72);
    if (!v72.i32[0])
      goto LABEL_215;
    v73 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 14), (int16x8_t)xmmword_1969F6980);
    v73.i16[0] = vminvq_u16(v73);
    if (!v73.i32[0])
      goto LABEL_215;
    v68 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 30), (int16x8_t)xmmword_1969F6990);
    v68.i16[0] = vminvq_u16(v68);
  }
  v66 = v68.i32[0];
LABEL_202:
  if (v66)
  {
    v6 = CFSTR("content information");
    goto LABEL_10;
  }
LABEL_215:
  v74 = a1 == "ARIALandmarkMain" || v51;
  if ((v74 & 1) != 0)
  {
    if (a1 == "ARIALandmarkMain" && v47)
      goto LABEL_229;
  }
  else
  {
    if (!(_DWORD)a2)
      goto LABEL_229;
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 != 65 || *(_QWORD *)(a1 + 1) != 0x6D646E614C414952 || *((_QWORD *)a1 + 1) != 0x6E69614D6B72616DLL)
        goto LABEL_233;
LABEL_229:
      v6 = CFSTR("main");
      goto LABEL_10;
    }
    if (*(_WORD *)a1 == 65)
    {
      v76 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F68F0);
      v76.i16[0] = vminvq_u16(v76);
      if (v76.i32[0])
      {
        v77 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1969F69A0);
        v77.i16[0] = vminvq_u16(v77);
        if (v77.i32[0])
          goto LABEL_229;
      }
    }
  }
LABEL_233:
  if (a1 == "ARIALandmarkNavigation")
    v24 = 1;
  if (v24)
  {
    if (a1 != "ARIALandmarkNavigation")
      v22 = 0;
    if (!v22)
      goto LABEL_250;
LABEL_245:
    v6 = CFSTR("navigation");
    goto LABEL_10;
  }
  if (!(_DWORD)a2)
    goto LABEL_245;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (*a1 != 65)
      goto LABEL_250;
    v78 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 6), (int8x16_t)xmmword_1969F69C0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F69B0));
    v78.i8[0] = vminvq_u8((uint8x16_t)v78);
  }
  else
  {
    if (*(_WORD *)a1 != 65)
      goto LABEL_250;
    v79 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F68F0);
    v79.i16[0] = vminvq_u16(v79);
    if (!v79.i32[0])
      goto LABEL_250;
    v80 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1969F69D0);
    v80.i16[0] = vminvq_u16(v80);
    if (!v80.i32[0])
      goto LABEL_250;
    v78 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 28), (int16x8_t)xmmword_1969F69E0);
    v78.i16[0] = vminvq_u16(v78);
  }
  if (v78.i32[0])
    goto LABEL_245;
LABEL_250:
  v81 = a1 == "ARIALandmarkRegion" || v21;
  if ((v81 & 1) != 0)
  {
    if (a1 == "ARIALandmarkRegion" && v5)
      goto LABEL_264;
  }
  else
  {
    if (!(_DWORD)a2)
      goto LABEL_264;
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 != 65)
        goto LABEL_269;
      v82 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1969F6A00), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F69F0));
      v82.i8[0] = vminvq_u8((uint8x16_t)v82);
LABEL_258:
      if (!v82.i32[0])
        goto LABEL_269;
LABEL_264:
      v6 = CFSTR("region");
      goto LABEL_10;
    }
    if (*(_WORD *)a1 == 65)
    {
      v84 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F68F0);
      v84.i16[0] = vminvq_u16(v84);
      if (v84.i32[0])
      {
        v85 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1969F6900);
        v85.i16[0] = vminvq_u16(v85);
        if (v85.i32[0])
        {
          v82 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 20), (int16x8_t)xmmword_1969F6A10);
          v82.i16[0] = vminvq_u16(v82);
          goto LABEL_258;
        }
      }
    }
  }
LABEL_269:
  if (a1 == "ARIALandmarkSearch")
    v21 = 1;
  if (v21)
  {
    if (a1 != "ARIALandmarkSearch")
      v5 = 0;
    if (v5)
      goto LABEL_281;
  }
  else
  {
    if (!(_DWORD)a2)
      goto LABEL_281;
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 65)
      {
        v86 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1969F6A30), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F6A20));
        v86.i8[0] = vminvq_u8((uint8x16_t)v86);
        goto LABEL_276;
      }
    }
    else if (*(_WORD *)a1 == 65)
    {
      v87 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F68F0);
      v87.i16[0] = vminvq_u16(v87);
      if (v87.i32[0])
      {
        v88 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1969F6900);
        v88.i16[0] = vminvq_u16(v88);
        if (v88.i32[0])
        {
          v86 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 20), (int16x8_t)xmmword_1969F6A40);
          v86.i16[0] = vminvq_u16(v86);
LABEL_276:
          if (!v86.i32[0])
            goto LABEL_286;
LABEL_281:
          v6 = CFSTR("search");
          goto LABEL_10;
        }
      }
    }
  }
LABEL_286:
  if (a1 == "ARIAUserInterfaceTooltip" || (_DWORD)a2 != 24)
  {
    if (a1 == "ARIAUserInterfaceTooltip" && (_DWORD)a2 == 24)
      goto LABEL_301;
  }
  else if ((a2 & 0xFF00000000) != 0)
  {
    if (*a1 == 65)
    {
      v89 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 8), (int8x16_t)xmmword_1969F6A60), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969F6A50));
      v89.i8[0] = vminvq_u8(v89);
      if (!v89.i32[0])
      {
        v90 = a1 == "ARIATabPanel" || v39;
        v91 = a1 == "ARIATabPanel" && v38;
        if ((v90 & 1) != 0)
          goto LABEL_322;
LABEL_315:
        if (*a1 == 65 && *(_QWORD *)(a1 + 1) == 0x6150626154414952 && *(_QWORD *)(a1 + 4) == 0x6C656E6150626154)
          goto LABEL_323;
        goto LABEL_324;
      }
LABEL_301:
      v6 = CFSTR("tooltip");
      goto LABEL_10;
    }
  }
  else if (*(_WORD *)a1 == 65)
  {
    v92 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F6A70);
    v92.i16[0] = vminvq_u16(v92);
    if (v92.i32[0])
    {
      v93 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1969F6A80);
      v93.i16[0] = vminvq_u16(v93);
      if (v93.i32[0])
      {
        v94 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 2), (int16x8_t)xmmword_1969F6A90);
        v94.i16[0] = vminvq_u16(v94);
        if (v94.i32[0])
          goto LABEL_301;
      }
    }
  }
  v95 = a1 == "ARIATabPanel" || v39;
  v91 = a1 == "ARIATabPanel" && v38;
  if ((v95 & 1) == 0)
  {
    if (!(_DWORD)a2)
    {
LABEL_323:
      v6 = CFSTR("tab panel");
      goto LABEL_10;
    }
    if ((a2 & 0xFF00000000) == 0)
    {
      if (*(_WORD *)a1 != 65)
        goto LABEL_324;
      v96 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F6AA0);
      v96.i16[0] = vminvq_u16(v96);
      if (!v96.i32[0])
        goto LABEL_324;
      v97 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 8), (int16x8_t)xmmword_1969F6AB0);
      v97.i16[0] = vminvq_u16(v97);
      v91 = v97.i32[0];
      goto LABEL_322;
    }
    goto LABEL_315;
  }
LABEL_322:
  if (v91)
    goto LABEL_323;
LABEL_324:
  v98 = a1 == "ARIADocumentMath" || v51;
  if ((v98 & 1) != 0)
  {
    if (a1 != "ARIADocumentMath" || !v47)
      goto LABEL_342;
    goto LABEL_338;
  }
  if (!(_DWORD)a2)
    goto LABEL_338;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)a1 != 65)
      goto LABEL_342;
    v100 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F6810);
    v100.i16[0] = vminvq_u16(v100);
    if (!v100.i32[0])
      goto LABEL_342;
    v101 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1969F6AC0);
    v101.i16[0] = vminvq_u16(v101);
    if (!v101.i32[0])
      goto LABEL_342;
LABEL_338:
    v6 = CFSTR("math");
    goto LABEL_10;
  }
  if (*a1 == 65 && *(_QWORD *)(a1 + 1) == 0x6D75636F44414952 && *((_QWORD *)a1 + 1) == 0x6874614D746E656DLL)
    goto LABEL_338;
LABEL_342:
  *a3 = 0;
}

void WebCore::AXHorizontalRuleDescriptionText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("separator"), a1);
}

void WebCore::AXApplePayPlainLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Apple Pay"), a1);
}

void WebCore::AXApplePayBuyLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Buy with Apple Pay"), a1);
}

void WebCore::AXApplePaySetupLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Set up with Apple Pay"), a1);
}

void WebCore::AXApplePayDonateLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Donate with Apple Pay"), a1);
}

void WebCore::AXApplePayCheckOutLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Check out with Apple Pay"), a1);
}

void WebCore::AXApplePayBookLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Book with Apple Pay"), a1);
}

void WebCore::AXApplePaySubscribeLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Subscribe with Apple Pay"), a1);
}

void WebCore::AXApplePayReloadLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Reload with Apple Pay"), a1);
}

void WebCore::AXApplePayAddMoneyLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Add money with Apple Pay"), a1);
}

void WebCore::AXApplePayTopUpLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Top up with Apple Pay"), a1);
}

void WebCore::AXApplePayOrderLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Order with Apple Pay"), a1);
}

void WebCore::AXApplePayRentLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Rent with Apple Pay"), a1);
}

void WebCore::AXApplePaySupportLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Support with Apple Pay"), a1);
}

void WebCore::AXApplePayContributeLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Contribute with Apple Pay"), a1);
}

void WebCore::AXApplePayTipLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Tip with Apple Pay"), a1);
}

void WebCore::AXAutoFillCredentialsLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("password AutoFill"), a1);
}

void WebCore::AXAutoFillContactsLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("contact info AutoFill"), a1);
}

void WebCore::AXAutoFillStrongPasswordLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("strong password AutoFill"), a1);
}

void WebCore::AXAutoFillCreditCardLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("credit card AutoFill"), a1);
}

void WebCore::AXAutoFillLoadingLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("loading AutoFill"), a1);
}

void WebCore::autoFillStrongPasswordLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Strong Password"), a1);
}

void WebCore::pluginTooSmallText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Plug-In too small"), a1);
}

void WebCore::multipleFileUploadText(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::formatLocalizedString(CFSTR("%d files"), a2, this);
}

void WebCore::unknownFileSizeText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Unknown (filesize)"), a1);
}

void WebCore::imageTitle(WebCore *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  const __CFLocale *v7;
  __CFNumberFormatter *v8;
  const __CFNumber *v9;
  CFStringRef StringWithNumber;
  const __CFNumber *v11;
  CFStringRef v12;
  CFTypeRef cf;
  int v14;
  int valuePtr;

  v7 = CFLocaleCopyCurrent();
  v8 = CFNumberFormatterCreate(0, v7, kCFNumberFormatterDecimalStyle);
  valuePtr = *(_DWORD *)a2;
  v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  StringWithNumber = CFNumberFormatterCreateStringWithNumber(0, v8, v9);
  v14 = *((_DWORD *)a2 + 1);
  v11 = CFNumberCreate(0, kCFNumberIntType, &v14);
  v12 = CFNumberFormatterCreateStringWithNumber(0, v8, v11);
  WTF::String::createCFString(this);
  WebCore::formatLocalizedString(CFSTR("%@ %@×%@ pixels"), a3, cf, StringWithNumber, v12);
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  if (StringWithNumber)
    CFRelease(StringWithNumber);
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
}

void WebCore::localizedMediaTimeDescription(float a1@<S0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((LODWORD(a1) & 0x7FFFFFFFu) >= 0x7F800000)
  {
    WebCore::localizedString(CFSTR("indefinite time"), a2);
  }
  else
  {
    v3 = (int)fabsf(a1);
    v4 = (v3 / 3600);
    v5 = (v3 / 60 % 60);
    v6 = (v3 % 60);
    if ((v3 + 86399) >= 0x2A2FF)
    {
      WebCore::formatLocalizedString(CFSTR("%1$d days %2$d hours %3$d minutes %4$d seconds"), a2, (v3 / 86400), v4, v5, v6);
    }
    else if ((v3 + 3599) >= 0x1C1F)
    {
      WebCore::formatLocalizedString(CFSTR("%1$d hours %2$d minutes %3$d seconds"), a2, v4, v5, v6);
    }
    else if ((_DWORD)v5)
    {
      WebCore::formatLocalizedString(CFSTR("%1$d minutes %2$d seconds"), a2, v5, v6);
    }
    else
    {
      WebCore::formatLocalizedString(CFSTR("%1$d seconds"), a2, v6);
    }
  }
}

void WebCore::validationMessageValueMissingText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Fill out this field"), a1);
}

void WebCore::validationMessageValueMissingForCheckboxText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Select this checkbox"), a1);
}

void WebCore::validationMessageValueMissingForFileText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Select a file"), a1);
}

void WebCore::validationMessageValueMissingForRadioText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Select one of these options"), a1);
}

void WebCore::validationMessageValueMissingForSelectText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Select an item in the list"), a1);
}

void WebCore::validationMessageValueMissingForSwitchText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Tap this switch"), a1);
}

void WebCore::validationMessageTypeMismatchText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Invalid value"), a1);
}

void WebCore::validationMessageTypeMismatchForEmailText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Enter an email address"), a1);
}

void WebCore::validationMessageTypeMismatchForURLText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Enter a URL"), a1);
}

void WebCore::validationMessagePatternMismatchText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Match the requested format"), a1);
}

void WebCore::validationMessagePatternMismatchText(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  WTF::String::createCFString(this);
  WebCore::formatLocalizedString(CFSTR("Match the requested format: %@"), a2);
  if (cf)
    CFRelease(cf);
}

void WebCore::validationMessageTooShortText(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  WebCore::formatLocalizedString(CFSTR("Use at least %d characters"), a2, a1);
}

void WebCore::validationMessageRangeUnderflowText(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  WTF::String::createCFString(this);
  WebCore::formatLocalizedString(CFSTR("Value must be greater than or equal to %@"), a2);
  if (cf)
    CFRelease(cf);
}

void WebCore::validationMessageRangeOverflowText(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  WTF::String::createCFString(this);
  WebCore::formatLocalizedString(CFSTR("Value must be less than or equal to %@"), a2);
  if (cf)
    CFRelease(cf);
}

void WebCore::validationMessageStepMismatchText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Enter a valid value"), a1);
}

void WebCore::validationMessageBadInputForNumberText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Enter a number"), a1);
}

void WebCore::trackNoLabelText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Unknown (audio/text track)"), a1);
}

void WebCore::textTrackOffMenuItemText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Off (text track)"), a1);
}

void WebCore::textTrackAutomaticMenuItemText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Auto (Recommended) (text track)"), a1);
}

void WebCore::addTrackLabelAsSuffix(WebCore *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  CFTypeRef cf;
  CFTypeRef v7;

  WTF::String::createCFString(this);
  WTF::String::createCFString(a2);
  WebCore::formatLocalizedString(CFSTR("%@ (%@) (audio/text track)"), a3);
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
}

void WebCore::textTrackKindClosedCaptionsDisplayName(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("CC (text track)"), a1);
}

void WebCore::addTextTrackKindClosedCaptionsSuffix(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::String::createCFString(this);
    WebCore::formatLocalizedString(CFSTR("%@ CC (text track)"), a2);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    WebCore::localizedString(CFSTR("CC (text track)"), a2);
  }
}

void WebCore::textTrackKindCaptionsDisplayName(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Captions (text track)"), a1);
}

void WebCore::addTextTrackKindCaptionsSuffix(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::String::createCFString(this);
    WebCore::formatLocalizedString(CFSTR("%@ Captions (text track)"), a2);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    WebCore::localizedString(CFSTR("Captions (text track)"), a2);
  }
}

void WebCore::textTrackKindDescriptionsDisplayName(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Descriptions (text track)"), a1);
}

void WebCore::addTextTrackKindDescriptionsSuffix(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::String::createCFString(this);
    WebCore::formatLocalizedString(CFSTR("%@ Descriptions (text track)"), a2);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    WebCore::localizedString(CFSTR("Descriptions (text track)"), a2);
  }
}

void WebCore::textTrackKindChaptersDisplayName(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Chapters (text track)"), a1);
}

void WebCore::addTextTrackKindChaptersSuffix(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::String::createCFString(this);
    WebCore::formatLocalizedString(CFSTR("%@ Chapters (text track)"), a2);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    WebCore::localizedString(CFSTR("Chapters (text track)"), a2);
  }
}

void WebCore::textTrackKindMetadataDisplayName(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Metadata (text track)"), a1);
}

void WebCore::addTextTrackKindMetadataSuffix(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::String::createCFString(this);
    WebCore::formatLocalizedString(CFSTR("%@ Metadata (text track)"), a2);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    WebCore::localizedString(CFSTR("Metadata (text track)"), a2);
  }
}

void WebCore::textTrackKindSDHDisplayName(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("SDH (text track)"), a1);
}

void WebCore::addTextTrackKindSDHSuffix(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::String::createCFString(this);
    WebCore::formatLocalizedString(CFSTR("%@ SDH (text track)"), a2);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    WebCore::localizedString(CFSTR("SDH (text track)"), a2);
  }
}

void WebCore::textTrackKindEasyReaderDisplayName(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Easy Reader (text track)"), a1);
}

void WebCore::addTextTrackKindEasyReaderSuffix(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::String::createCFString(this);
    WebCore::formatLocalizedString(CFSTR("%@ Easy Reader (text track)"), a2);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    WebCore::localizedString(CFSTR("Easy Reader (text track)"), a2);
  }
}

void WebCore::textTrackKindForcedDisplayName(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Forced (text track)"), a1);
}

void WebCore::addTextTrackKindForcedSuffix(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::String::createCFString(this);
    WebCore::formatLocalizedString(CFSTR("%@ Forced (text track)"), a2);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    WebCore::localizedString(CFSTR("Forced (text track)"), a2);
  }
}

void WebCore::audioTrackKindDescriptionsDisplayName(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Descriptions (audio track)"), a1);
}

void WebCore::addAudioTrackKindDescriptionsSuffix(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::String::createCFString(this);
    WebCore::formatLocalizedString(CFSTR("%@ Descriptions (audio track)"), a2);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    WebCore::localizedString(CFSTR("Descriptions (audio track)"), a2);
  }
}

void WebCore::audioTrackKindCommentaryDisplayName(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Commentary (audio track)"), a1);
}

void WebCore::addAudioTrackKindCommentarySuffix(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::String::createCFString(this);
    WebCore::formatLocalizedString(CFSTR("%@ Commentary (audio track)"), a2);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    WebCore::localizedString(CFSTR("Commentary (audio track)"), a2);
  }
}

void WebCore::contextMenuItemTagShowMediaStats(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Show Media Stats"), a1);
}

void WebCore::useBlockedPlugInContextMenuTitle(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Show in blocked plug-in"), a1);
}

void WebCore::webCryptoMasterKeyKeychainLabel(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  WTF::String::createCFString(this);
  WebCore::formatLocalizedString(CFSTR("%@ WebCrypto Master Key"), a2);
  if (cf)
    CFRelease(cf);
}

void WebCore::webCryptoMasterKeyKeychainComment(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Used to encrypt WebCrypto keys in persistent storage, such as IndexedDB"), a1);
}

void WebCore::makeCredentialTouchIDPromptTitle(WebCore *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  CFTypeRef cf;
  CFTypeRef v7;

  WTF::String::createCFString(this);
  WTF::String::createCFString(a2);
  WebCore::formatLocalizedString(CFSTR("“%@” would like to use Touch ID for “%@”."), a3);
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
}

void WebCore::getAssertionTouchIDPromptTitle(WebCore *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  CFTypeRef cf;
  CFTypeRef v7;

  WTF::String::createCFString(this);
  WTF::String::createCFString(a2);
  WebCore::formatLocalizedString(CFSTR("“%@” would like to sign in to “%@”."), a3);
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
}

void WebCore::genericTouchIDPromptTitle(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Continue with Touch ID."), a1);
}

void WebCore::pdfPasswordFormTitle(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("This document is password protected."), a1);
}

void WebCore::pdfPasswordFormSubtitle(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Please enter the password below."), a1);
}

void WebCore::pdfPasswordFormInvalidPasswordSubtitle(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Invalid Password"), a1);
}

void WebCore::contextMenuItemTagCopyLinkToHighlight(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Copy Link to Highlight"), a1);
}

uint64_t WebCore::getLogChannel(WebCore *this, const WTF::String *a2)
{
  const WTF::String *v2;

  v2 = this;
  {
    WebCore::LogChannels::LogChannels((WebCore::LogChannels *)&WebCore::logChannels(void)::logChannels);
    v2 = this;
  }
  return WTF::LogChannels::getLogChannel((WTF::LogChannels *)&WebCore::logChannels(void)::logChannels, v2);
}

uint64_t WebCore::MIMETypeRegistry::supportedImageMIMETypes@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x2B8);
  *(_DWORD *)result = 43;
  *a1 = result;
  *(_QWORD *)(result + 8) = "application/bmp";
  *(_QWORD *)(result + 16) = 16;
  *(_QWORD *)(result + 24) = "application/jpg";
  *(_QWORD *)(result + 32) = 16;
  *(_QWORD *)(result + 40) = "application/png";
  *(_QWORD *)(result + 48) = 16;
  *(_QWORD *)(result + 56) = "application/tif";
  *(_QWORD *)(result + 64) = 16;
  *(_QWORD *)(result + 72) = "application/tiff";
  *(_QWORD *)(result + 80) = 17;
  *(_QWORD *)(result + 88) = "application/x-bmp";
  *(_QWORD *)(result + 96) = 18;
  *(_QWORD *)(result + 104) = "application/x-jpg";
  *(_QWORD *)(result + 112) = 18;
  *(_QWORD *)(result + 120) = "application/x-png";
  *(_QWORD *)(result + 128) = 18;
  *(_QWORD *)(result + 136) = "application/x-tif";
  *(_QWORD *)(result + 144) = 18;
  *(_QWORD *)(result + 152) = "application/x-tiff";
  *(_QWORD *)(result + 160) = 19;
  *(_QWORD *)(result + 168) = "application/x-win-bitmap";
  *(_QWORD *)(result + 176) = 25;
  *(_QWORD *)(result + 184) = "image/apng";
  *(_QWORD *)(result + 192) = 11;
  *(_QWORD *)(result + 200) = "image/avif";
  *(_QWORD *)(result + 208) = 11;
  *(_QWORD *)(result + 216) = "image/bmp";
  *(_QWORD *)(result + 224) = 10;
  *(_QWORD *)(result + 232) = "image/gi_";
  *(_QWORD *)(result + 240) = 10;
  *(_QWORD *)(result + 248) = "image/gif";
  *(_QWORD *)(result + 256) = 10;
  *(_QWORD *)(result + 264) = "image/heic";
  *(_QWORD *)(result + 272) = 11;
  *(_QWORD *)(result + 280) = "image/heic-sequence";
  *(_QWORD *)(result + 288) = 20;
  *(_QWORD *)(result + 296) = "image/heif";
  *(_QWORD *)(result + 304) = 11;
  *(_QWORD *)(result + 312) = "image/heif-sequence";
  *(_QWORD *)(result + 320) = 20;
  *(_QWORD *)(result + 328) = "image/jp_";
  *(_QWORD *)(result + 336) = 10;
  *(_QWORD *)(result + 344) = "image/jpe_";
  *(_QWORD *)(result + 352) = 11;
  *(_QWORD *)(result + 360) = "image/jpeg";
  *(_QWORD *)(result + 368) = 11;
  *(_QWORD *)(result + 376) = "image/jpg";
  *(_QWORD *)(result + 384) = 10;
  *(_QWORD *)(result + 392) = "image/jxl";
  *(_QWORD *)(result + 400) = 10;
  *(_QWORD *)(result + 408) = "image/ms-bmp";
  *(_QWORD *)(result + 416) = 13;
  *(_QWORD *)(result + 424) = "image/pipeg";
  *(_QWORD *)(result + 432) = 12;
  *(_QWORD *)(result + 440) = "image/pjpeg";
  *(_QWORD *)(result + 448) = 12;
  *(_QWORD *)(result + 456) = "image/png";
  *(_QWORD *)(result + 464) = 10;
  *(_QWORD *)(result + 472) = "image/tif";
  *(_QWORD *)(result + 480) = 10;
  *(_QWORD *)(result + 488) = "image/tiff";
  *(_QWORD *)(result + 496) = 11;
  *(_QWORD *)(result + 504) = "image/vnd.microsoft.icon";
  *(_QWORD *)(result + 512) = 25;
  *(_QWORD *)(result + 520) = "image/vnd.switfview-jpeg";
  *(_QWORD *)(result + 528) = 25;
  *(_QWORD *)(result + 536) = "image/webp";
  *(_QWORD *)(result + 544) = 11;
  *(_QWORD *)(result + 552) = "image/x-apple-adaptive-glyph";
  *(_QWORD *)(result + 560) = 29;
  *(_QWORD *)(result + 568) = "image/x-bmp";
  *(_QWORD *)(result + 576) = 12;
  *(_QWORD *)(result + 584) = "image/x-icon";
  *(_QWORD *)(result + 592) = 13;
  *(_QWORD *)(result + 600) = "image/x-ms-bmp";
  *(_QWORD *)(result + 608) = 15;
  *(_QWORD *)(result + 616) = "image/x-tif";
  *(_QWORD *)(result + 624) = 12;
  *(_QWORD *)(result + 632) = "image/x-tiff";
  *(_QWORD *)(result + 640) = 13;
  *(_QWORD *)(result + 648) = "image/x-win-bitmap";
  *(_QWORD *)(result + 656) = 19;
  *(_QWORD *)(result + 664) = "image/x-windows-bmp";
  *(_QWORD *)(result + 672) = 20;
  *(_QWORD *)(result + 680) = "image/x-xbitmap";
  *(_QWORD *)(result + 688) = 16;
  return result;
}

uint64_t *WebCore::MIMETypeRegistry::supportedMediaMIMETypes(WebCore::MIMETypeRegistry *this)
{
  uint64_t v2;

  if ((byte_1ECE83B31 & 1) == 0)
  {
    v2 = 0;
    WebCore::MediaPlayer::getSupportedTypes((WebCore *)&v2);
    qword_1ECE83B40 = v2;
    byte_1ECE83B31 = 1;
  }
  return &qword_1ECE83B40;
}

uint64_t WebCore::MIMETypeRegistry::unsupportedTextMIMETypes@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0xD8);
  *(_DWORD *)result = 13;
  *a1 = result;
  *(_QWORD *)(result + 8) = "text/calendar";
  *(_QWORD *)(result + 16) = 14;
  *(_QWORD *)(result + 24) = "text/directory";
  *(_QWORD *)(result + 32) = 15;
  *(_QWORD *)(result + 40) = "text/ldif";
  *(_QWORD *)(result + 48) = 10;
  *(_QWORD *)(result + 56) = "text/qif";
  *(_QWORD *)(result + 64) = 9;
  *(_QWORD *)(result + 72) = "text/vcalendar";
  *(_QWORD *)(result + 80) = 15;
  *(_QWORD *)(result + 88) = "text/vcard";
  *(_QWORD *)(result + 96) = 11;
  *(_QWORD *)(result + 104) = "text/vnd.sun.j2me.app-descriptor";
  *(_QWORD *)(result + 112) = 33;
  *(_QWORD *)(result + 120) = "text/x-calendar";
  *(_QWORD *)(result + 128) = 16;
  *(_QWORD *)(result + 136) = "text/x-csv";
  *(_QWORD *)(result + 144) = 11;
  *(_QWORD *)(result + 152) = "text/x-qif";
  *(_QWORD *)(result + 160) = 11;
  *(_QWORD *)(result + 168) = "text/x-vcalendar";
  *(_QWORD *)(result + 176) = 17;
  *(_QWORD *)(result + 184) = "text/x-vcard";
  *(_QWORD *)(result + 192) = 13;
  *(_QWORD *)(result + 200) = "text/x-vcf";
  *(_QWORD *)(result + 208) = 11;
  return result;
}

void WebCore::MIMETypeRegistry::mediaMIMETypeForExtension(WebCore *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)&v15 = a1;
  *((_QWORD *)&v15 + 1) = a2;
  v6 = WebCore::commonMimeTypesMap(a1, a2);
  v8 = qword_1ECE83B50;
  if (!qword_1ECE83B50)
    goto LABEL_9;
  v9 = *(_DWORD *)(qword_1ECE83B50 - 8);
  v6 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveStringViewHashTranslator>::hash<WTF::StringView>((uint64_t *)&v15);
  for (i = 0; ; v6 = i + v11)
  {
    v11 = v6 & v9;
    v12 = v8 + 24 * (v6 & v9);
    if (*(_QWORD *)v12 == -1)
      goto LABEL_6;
    if (!*(_QWORD *)v12)
      break;
    v16 = v15;
    v6 = WTF::equalIgnoringASCIICaseCommon<WTF::String,WTF::StringView>((uint64_t *)(v8 + 24 * v11), (unsigned __int8 **)&v16);
    if ((v6 & 1) != 0)
      goto LABEL_10;
LABEL_6:
    ++i;
  }
  if (qword_1ECE83B50)
  {
    v12 = qword_1ECE83B50 + 24 * *(unsigned int *)(qword_1ECE83B50 - 4);
    goto LABEL_10;
  }
LABEL_9:
  v12 = 0;
LABEL_10:
  WebCore::commonMimeTypesMap((WebCore *)v6, v7);
  v13 = qword_1ECE83B50;
  if (qword_1ECE83B50)
    v13 = qword_1ECE83B50 + 24 * *(unsigned int *)(qword_1ECE83B50 - 4);
  if (v13 == v12)
  {
    WebCore::MIMETypeRegistry::mimeTypeForExtension((uint64_t)a1, a2, a3);
  }
  else if (*(_DWORD *)(v12 + 20))
  {
    v14 = **(_DWORD ***)(v12 + 8);
    if (v14)
      *v14 += 2;
    *a3 = v14;
  }
  else
  {
    __break(0xC471u);
  }
}

WTF::StringImpl *WebCore::MIMETypeRegistry::mimeTypeForPath@<X0>(const char *a1@<X0>, unint64_t a2@<X1>, int **a3@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  const char *v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  uint64_t *v9;
  int *v10;
  int v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;

  v13 = a1;
  v14 = a2;
  result = (WTF::StringImpl *)WTF::StringView::reverseFind((uint64_t)&v13, 0x2Eu, 0xFFFFFFFF);
  if (result == (WTF::StringImpl *)-1)
    goto LABEL_9;
  v5 = ((_DWORD)result + 1);
  if (v14 <= v5)
  {
    v7 = 0x100000000;
    v6 = "";
  }
  else
  {
    if ((_DWORD)result == -1)
    {
      v6 = v13;
      v7 = v14;
      goto LABEL_5;
    }
    v7 = (v14 - v5);
    v9 = (uint64_t *)BYTE4(v14);
    v12 = v14 - (unint64_t)v5;
    if (BYTE4(v14))
    {
      if (v12 >= v7)
      {
        v6 = &v13[v5];
        v7 |= 0x100000000uLL;
        goto LABEL_5;
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if (v12 < v7)
      goto LABEL_22;
    v6 = &v13[2 * v5];
  }
LABEL_5:
  WebCore::MIMETypeRegistry::mimeTypeForExtension((uint64_t)v6, v7, a3);
  result = (WTF::StringImpl *)*a3;
  if (*a3)
  {
    if (*((_DWORD *)result + 1))
      return result;
    *a3 = 0;
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_9:
  v9 = &qword_1EE2F8000;
  {
LABEL_23:
    v10 = &WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl;
    v11 = WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::defaultMIMEType(void)::defaultMIMEType = (uint64_t)&WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl;
    *((_BYTE *)v9 + 1272) = 1;
    goto LABEL_12;
  }
  v10 = (int *)WebCore::defaultMIMEType(void)::defaultMIMEType;
  if (WebCore::defaultMIMEType(void)::defaultMIMEType)
  {
    v11 = *(_DWORD *)WebCore::defaultMIMEType(void)::defaultMIMEType;
LABEL_12:
    *v10 = v11 + 2;
  }
  *a3 = v10;
  return result;
}

uint64_t *WebCore::defaultMIMEType(WebCore *this)
{
  {
    WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::defaultMIMEType(void)::defaultMIMEType = (uint64_t)&WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl;
  }
  return &WebCore::defaultMIMEType(void)::defaultMIMEType;
}

BOOL WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  _BOOL8 v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v2 = *this;
  if (!*this || !*((_DWORD *)v2 + 1))
    return 0;
  *(_DWORD *)v2 += 2;
  v7 = v2;
  if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)&v7) & 1) != 0)
  {
    v3 = 1;
  }
  {
    if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes)
      v3 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)&v7) != 0;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
    WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
  }
  v6 = v7;
  v7 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v3;
}

uint64_t WebCore::MIMETypeRegistry::isSupportedImageVideoOrSVGMIMEType(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  BOOL v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;

  v3 = *this;
  if (!*this || !*((_DWORD *)v3 + 1))
    goto LABEL_2;
  *(_DWORD *)v3 += 2;
  v11 = v3;
  if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)&v11) & 1) != 0)
  {
    v6 = 1;
  }
  {
    if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes)
      v6 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)&v11) != 0;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
    WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
  }
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v5);
      if (v6)
        return 1;
      goto LABEL_18;
    }
    *(_DWORD *)v7 -= 2;
  }
  if (v6)
    return 1;
LABEL_18:
  v8 = *this;
  if (*this && *((_DWORD *)v8 + 1) == 13)
  {
    v9 = *((_QWORD *)v8 + 1);
    if ((*((_BYTE *)v8 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v9 & 0xDF) != 0x49
        || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x4D
        || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x41
        || (*(_BYTE *)(v9 + 3) & 0xDF) != 0x47
        || (*(_BYTE *)(v9 + 4) & 0xDF) != 0x45
        || (*(_BYTE *)(v9 + 5) & 0xDF) != 0xF
        || (*(_BYTE *)(v9 + 6) & 0xDF) != 0x53
        || (*(_BYTE *)(v9 + 7) & 0xDF) != 0x56
        || (*(_BYTE *)(v9 + 8) & 0xDF) != 0x47
        || (*(_BYTE *)(v9 + 9) & 0xDF) != 0xB
        || (*(_BYTE *)(v9 + 10) & 0xDF) != 0x58
        || (*(_BYTE *)(v9 + 11) & 0xDF) != 0x4D)
      {
        goto LABEL_2;
      }
      v10 = *(unsigned __int8 *)(v9 + 12);
    }
    else
    {
      if ((*(_WORD *)v9 & 0xFFDF) != 0x49
        || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x4D
        || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x41
        || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0x47
        || (*(_WORD *)(v9 + 8) & 0xFFDF) != 0x45
        || (*(_WORD *)(v9 + 10) & 0xFFDF) != 0xF
        || (*(_WORD *)(v9 + 12) & 0xFFDF) != 0x53
        || (*(_WORD *)(v9 + 14) & 0xFFDF) != 0x56
        || (*(_WORD *)(v9 + 16) & 0xFFDF) != 0x47
        || (*(_WORD *)(v9 + 18) & 0xFFDF) != 0xB
        || (*(_WORD *)(v9 + 20) & 0xFFDF) != 0x58
        || (*(_WORD *)(v9 + 22) & 0xFFDF) != 0x4D)
      {
        goto LABEL_2;
      }
      v10 = *(unsigned __int16 *)(v9 + 24);
    }
    if ((v10 & 0xFFFFFFDF) == 0x4C)
      return 1;
  }
LABEL_2:
  {
    qword_1ECE88A28 = 0;
    qword_1ECE88A30 = 0;
    unk_1ECE88A18 = 0u;
    *(__int128 *)((char *)&xmmword_1ECE88A00 + 8) = 0u;
    *(_OWORD *)&qword_1ECE889F8 = 0u;
    WebCore::AVAssetMIMETypeCache::singleton(void)::cache = (uint64_t)off_1E334D010;
  }
  return WebCore::MIMETypeCache::supportsContainerType((WebCore::MIMETypeCache *)&WebCore::AVAssetMIMETypeCache::singleton(void)::cache, this);
}

void WebCore::MIMETypeRegistry::createMIMETypeRegistryThreadGlobalData(_QWORD *a1@<X8>)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;
  const WTF::String *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[3];
  WTF::StringImpl *v24;
  WTF::StringImpl **v25;

  v3 = CGImageDestinationCopyTypeIdentifiers();
  v25 = 0;
  Count = CFArrayGetCount(v3);
  if (Count >= 1)
  {
    v5 = Count;
    v6 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
      MEMORY[0x19AEA5508](v23, ValueAtIndex);
      v11 = WebCore::isSupportedImageType(v23, v8, v9);
      v12 = v23[0];
      v23[0] = 0;
      if (!v12)
        goto LABEL_6;
      if (*(_DWORD *)v12 != 2)
        break;
      WTF::StringImpl::destroy(v12, v10);
      if (!v11)
        goto LABEL_19;
LABEL_7:
      MEMORY[0x19AEA5508](v23, ValueAtIndex);
      WebCore::MIMETypeFromUTI((WebCore *)v23, (uint64_t)&v24);
      v14 = v23[0];
      v23[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v24;
      if (!v24)
        goto LABEL_19;
      if (!*((_DWORD *)v24 + 1))
      {
        v24 = 0;
LABEL_17:
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
        goto LABEL_19;
      }
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v24, (uint64_t *)&v25, (uint64_t)v23);
      v15 = v24;
      v24 = 0;
      if (v15)
        goto LABEL_17;
LABEL_19:
      if (v5 == ++v6)
        goto LABEL_23;
    }
    *(_DWORD *)v12 -= 2;
LABEL_6:
    if (!v11)
      goto LABEL_19;
    goto LABEL_7;
  }
LABEL_23:
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v16 = 0;
  v18 = (uint64_t)v25;
  v25 = 0;
  *v16 = v18;
  *a1 = v16;
  v19 = (uint64_t)v25;
  if (!v25)
  {
    if (!v3)
      return;
    goto LABEL_25;
  }
  v20 = *((unsigned int *)v25 - 1);
  if ((_DWORD)v20)
  {
    v21 = v25;
    do
    {
      v22 = *v21;
      if (*v21 != (WTF::StringImpl *)-1)
      {
        *v21 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v17);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      ++v21;
      --v20;
    }
    while (v20);
  }
  WTF::fastFree((WTF *)(v19 - 16), v17);
  if (v3)
LABEL_25:
    CFRelease(v3);
}

BOOL WebCore::MIMETypeRegistry::isSupportedImageMIMETypeForEncoding(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF *v13;
  uint64_t *v14;

  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
    return 0;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(this);
  v6 = *(uint64_t **)(v5 + 72);
  if (!v6)
  {
    WebCore::MIMETypeRegistry::createMIMETypeRegistryThreadGlobalData(&v14);
    v6 = v14;
    v8 = *(WTF **)(v5 + 72);
    *(_QWORD *)(v5 + 72) = v14;
    if (v8)
    {
      v13 = v8;
      v9 = *(WTF::StringImpl ***)v8;
      if (*(_QWORD *)v8)
      {
        v10 = *((unsigned int *)v9 - 1);
        if ((_DWORD)v10)
        {
          v11 = *(WTF::StringImpl ***)v8;
          do
          {
            v12 = *v11;
            if (*v11 != (WTF::StringImpl *)-1)
            {
              *v11 = 0;
              if (v12)
              {
                if (*(_DWORD *)v12 == 2)
                  WTF::StringImpl::destroy(v12, v7);
                else
                  *(_DWORD *)v12 -= 2;
              }
            }
            ++v11;
            --v10;
          }
          while (v10);
        }
        WTF::fastFree((WTF *)(v9 - 2), v7);
      }
      WTF::fastFree(v13, v7);
      v6 = *(uint64_t **)(v5 + 72);
    }
  }
  return *v6
      && WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(v6, this) != 0;
}

BOOL WebCore::MIMETypeRegistry::isSupportedJavaScriptMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [16]>::contains<WTF::String>(WebCore::MIMETypeRegistry::isSupportedJavaScriptMIMEType(WTF::String const&)::supportedJavaScriptMIMETypes, (uint64_t *)this);
}

BOOL WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [16]>::contains<WTF::String>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int16 v19;
  int v20;
  unint64_t v21;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(unsigned __int8 **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4) | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32);
    v5 = (_QWORD *)*a1;
    v6 = *a1 + 256;
    v7 = v4;
    if ((v4 & 0xFF00000000) != 0)
    {
      if ((_DWORD)v4)
      {
        v8 = 0;
        while (1)
        {
          v9 = (char **)&v5[2 * v8];
          v10 = (unsigned __int8 *)v9[1];
          v11 = v10 ? (uint64_t)(v10 - 1) : 0;
          if (v11 == v7 && (*v3 | 0x20) == **v9)
            break;
LABEL_9:
          if (++v8 == 16)
            return v6 - (_QWORD)v5 != 256;
        }
        v12 = 0;
        while (v7 - 1 != v12)
        {
          v13 = (*v9)[v12 + 1];
          v14 = v3[++v12] | 0x20;
          if (v14 != v13)
          {
            if (v12 < v7)
              goto LABEL_9;
            break;
          }
        }
LABEL_16:
        v6 = (uint64_t)v9;
        return v6 - (_QWORD)v5 != 256;
      }
    }
    else if ((_DWORD)v4)
    {
      v16 = 0;
      while (1)
      {
        v9 = (char **)&v5[2 * v16];
        v17 = (unsigned __int8 *)v9[1];
        v18 = v17 ? (uint64_t)(v17 - 1) : 0;
        if (v18 == v7 && (*(unsigned __int16 *)v3 | 0x20) == (unsigned __int16)**v9)
          break;
LABEL_27:
        if (++v16 == 16)
          return v6 - (_QWORD)v5 != 256;
      }
      v21 = 0;
      while (v7 - 1 != v21)
      {
        v19 = (*v9)[v21 + 1];
        v20 = *(unsigned __int16 *)&v3[2 * v21++ + 2] | 0x20;
        if (v20 != v19)
        {
          if (v21 < v7)
            goto LABEL_27;
          goto LABEL_16;
        }
      }
      goto LABEL_16;
    }
  }
  else
  {
    v5 = (_QWORD *)*a1;
    v6 = *a1 + 256;
  }
  if (v5[1] >= 2uLL)
  {
    if (v5[3] >= 2uLL)
    {
      if (v5[5] >= 2uLL)
      {
        if (v5[7] >= 2uLL)
        {
          if (v5[9] >= 2uLL)
          {
            if (v5[11] >= 2uLL)
            {
              if (v5[13] >= 2uLL)
              {
                if (v5[15] >= 2uLL)
                {
                  if (v5[17] >= 2uLL)
                  {
                    if (v5[19] >= 2uLL)
                    {
                      if (v5[21] >= 2uLL)
                      {
                        if (v5[23] >= 2uLL)
                        {
                          if (v5[25] >= 2uLL)
                          {
                            if (v5[27] >= 2uLL)
                            {
                              if (v5[29] >= 2uLL)
                              {
                                if (v5[31] < 2uLL)
                                  v6 = (uint64_t)(v5 + 30);
                              }
                              else
                              {
                                v6 = (uint64_t)(v5 + 28);
                              }
                            }
                            else
                            {
                              v6 = (uint64_t)(v5 + 26);
                            }
                          }
                          else
                          {
                            v6 = (uint64_t)(v5 + 24);
                          }
                        }
                        else
                        {
                          v6 = (uint64_t)(v5 + 22);
                        }
                      }
                      else
                      {
                        v6 = (uint64_t)(v5 + 20);
                      }
                    }
                    else
                    {
                      v6 = (uint64_t)(v5 + 18);
                    }
                  }
                  else
                  {
                    v6 = (uint64_t)(v5 + 16);
                  }
                }
                else
                {
                  v6 = (uint64_t)(v5 + 14);
                }
              }
              else
              {
                v6 = (uint64_t)(v5 + 12);
              }
            }
            else
            {
              v6 = (uint64_t)(v5 + 10);
            }
          }
          else
          {
            v6 = (uint64_t)(v5 + 8);
          }
        }
        else
        {
          v6 = (uint64_t)(v5 + 6);
        }
      }
      else
      {
        v6 = (uint64_t)(v5 + 4);
      }
    }
    else
    {
      v6 = (uint64_t)(v5 + 2);
    }
  }
  else
  {
    v6 = (uint64_t)v5;
  }
  return v6 - (_QWORD)v5 != 256;
}

BOOL WebCore::MIMETypeRegistry::isSupportedWebAssemblyMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this || *(_DWORD *)(v2 + 4) != 16)
    return 0;
  v4 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v4 & 0xFFDF) == 0x41
      && (*(_WORD *)(v4 + 2) & 0xFFDF) == 0x50
      && (*(_WORD *)(v4 + 4) & 0xFFDF) == 0x50
      && (*(_WORD *)(v4 + 6) & 0xFFDF) == 0x4C
      && (*(_WORD *)(v4 + 8) & 0xFFDF) == 0x49
      && (*(_WORD *)(v4 + 10) & 0xFFDF) == 0x43
      && (*(_WORD *)(v4 + 12) & 0xFFDF) == 0x41
      && (*(_WORD *)(v4 + 14) & 0xFFDF) == 0x54
      && (*(_WORD *)(v4 + 16) & 0xFFDF) == 0x49
      && (*(_WORD *)(v4 + 18) & 0xFFDF) == 0x4F
      && (*(_WORD *)(v4 + 20) & 0xFFDF) == 0x4E
      && (*(_WORD *)(v4 + 22) & 0xFFDF) == 0xF
      && (*(_WORD *)(v4 + 24) & 0xFFDF) == 0x57
      && (*(_WORD *)(v4 + 26) & 0xFFDF) == 0x41
      && (*(_WORD *)(v4 + 28) & 0xFFDF) == 0x53)
    {
      v5 = *(unsigned __int16 *)(v4 + 30);
      return (v5 & 0xFFFFFFDF) == 77;
    }
    return 0;
  }
  if ((*(_BYTE *)v4 & 0xDF) != 0x41
    || (*(_BYTE *)(v4 + 1) & 0xDF) != 0x50
    || (*(_BYTE *)(v4 + 2) & 0xDF) != 0x50
    || (*(_BYTE *)(v4 + 3) & 0xDF) != 0x4C
    || (*(_BYTE *)(v4 + 4) & 0xDF) != 0x49
    || (*(_BYTE *)(v4 + 5) & 0xDF) != 0x43
    || (*(_BYTE *)(v4 + 6) & 0xDF) != 0x41
    || (*(_BYTE *)(v4 + 7) & 0xDF) != 0x54
    || (*(_BYTE *)(v4 + 8) & 0xDF) != 0x49
    || (*(_BYTE *)(v4 + 9) & 0xDF) != 0x4F
    || (*(_BYTE *)(v4 + 10) & 0xDF) != 0x4E
    || (*(_BYTE *)(v4 + 11) & 0xDF) != 0xF
    || (*(_BYTE *)(v4 + 12) & 0xDF) != 0x57
    || (*(_BYTE *)(v4 + 13) & 0xDF) != 0x41
    || (*(_BYTE *)(v4 + 14) & 0xDF) != 0x53)
  {
    return 0;
  }
  v5 = *(unsigned __int8 *)(v4 + 15);
  return (v5 & 0xFFFFFFDF) == 77;
}

BOOL WebCore::MIMETypeRegistry::isSupportedStyleSheetMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this || *(_DWORD *)(v2 + 4) != 8)
    return 0;
  v4 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v4 & 0xFFDF) == 0x54
      && (*(_WORD *)(v4 + 2) & 0xFFDF) == 0x45
      && (*(_WORD *)(v4 + 4) & 0xFFDF) == 0x58
      && (*(_WORD *)(v4 + 6) & 0xFFDF) == 0x54
      && (*(_WORD *)(v4 + 8) & 0xFFDF) == 0xF
      && (*(_WORD *)(v4 + 10) & 0xFFDF) == 0x43
      && (*(_WORD *)(v4 + 12) & 0xFFDF) == 0x53)
    {
      v5 = *(unsigned __int16 *)(v4 + 14);
      return (v5 & 0xFFFFFFDF) == 83;
    }
    return 0;
  }
  if ((*(_BYTE *)v4 & 0xDF) != 0x54
    || (*(_BYTE *)(v4 + 1) & 0xDF) != 0x45
    || (*(_BYTE *)(v4 + 2) & 0xDF) != 0x58
    || (*(_BYTE *)(v4 + 3) & 0xDF) != 0x54
    || (*(_BYTE *)(v4 + 4) & 0xDF) != 0xF
    || (*(_BYTE *)(v4 + 5) & 0xDF) != 0x43
    || (*(_BYTE *)(v4 + 6) & 0xDF) != 0x53)
  {
    return 0;
  }
  v5 = *(unsigned __int8 *)(v4 + 7);
  return (v5 & 0xFFFFFFDF) == 83;
}

BOOL WebCore::MIMETypeRegistry::isSupportedFontMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v3 = *(unsigned int *)(v2 + 4);
  if (v3 < 5)
    return 0;
  v4 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    result = 0;
    if ((_DWORD)v3 != 5 && (*(_BYTE *)v4 & 0xDF) == 0x46)
    {
      if ((*(_BYTE *)(v4 + 1) & 0xDF) != 0x4F
        || (*(_BYTE *)(v4 + 2) & 0xDF) != 0x4E
        || (*(_BYTE *)(v4 + 3) & 0xDF) != 0x54
        || (*(_BYTE *)(v4 + 4) & 0xDF) != 0xF)
      {
        return 0;
      }
      v6 = v3 - 5;
      if (v6 >= v6)
      {
        v4 += 5;
        v7 = v6 | 0x100000000;
        goto LABEL_12;
      }
      goto LABEL_51;
    }
  }
  else
  {
    result = 0;
    if ((_DWORD)v3 != 5 && (*(_WORD *)v4 & 0xFFDF) == 0x46)
    {
      if ((*(_WORD *)(v4 + 2) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v4 + 4) & 0xFFDF) != 0x4E
        || (*(_WORD *)(v4 + 6) & 0xFFDF) != 0x54
        || (*(_WORD *)(v4 + 8) & 0xFFDF) != 0xF)
      {
        return 0;
      }
      v12 = v3 - 5;
      v7 = v12;
      if (v12 >= v12)
      {
        v4 += 10;
LABEL_12:
        if ((_DWORD)v7 != 4)
        {
          if ((_DWORD)v7 == 5)
          {
            if ((v7 & 0x100000000) != 0)
            {
              if ((*(_BYTE *)v4 & 0xDF) != 0x57
                || (*(_BYTE *)(v4 + 1) & 0xDF) != 0x4F
                || (*(_BYTE *)(v4 + 2) & 0xDF) != 0x46
                || (*(_BYTE *)(v4 + 3) & 0xDF) != 0x46)
              {
                return 0;
              }
              v9 = *(unsigned __int8 *)(v4 + 4);
            }
            else
            {
              if ((*(_WORD *)v4 & 0xFFDF) != 0x57
                || (*(_WORD *)(v4 + 2) & 0xFFDF) != 0x4F
                || (*(_WORD *)(v4 + 4) & 0xFFDF) != 0x46
                || (*(_WORD *)(v4 + 6) & 0xFFDF) != 0x46)
              {
                return 0;
              }
              v9 = *(unsigned __int16 *)(v4 + 8);
            }
            return (v9 & 0xFFFFFFDF) == 0x12;
          }
          if ((_DWORD)v7 != 3)
            return 0;
          if ((v7 & 0x100000000) != 0)
          {
            v10 = *(_BYTE *)v4 & 0xDF;
            if (v10 != 79 && v10 != 84 || (*(_BYTE *)(v4 + 1) & 0xDF) != 0x54)
              return 0;
            v11 = *(unsigned __int8 *)(v4 + 2);
          }
          else
          {
            v14 = *(_WORD *)v4 & 0xFFDF;
            if (v14 != 79 && v14 != 84 || (*(_WORD *)(v4 + 2) & 0xFFDF) != 0x54)
              return 0;
            v11 = *(unsigned __int16 *)(v4 + 4);
          }
          return (v11 & 0xFFFFFFDF) == 0x46;
        }
        if ((v7 & 0x100000000) != 0)
        {
          if ((*(_BYTE *)v4 & 0xDF) == 0x57
            && (*(_BYTE *)(v4 + 1) & 0xDF) == 0x4F
            && (*(_BYTE *)(v4 + 2) & 0xDF) == 0x46
            && (*(_BYTE *)(v4 + 3) & 0xDF) == 0x46)
          {
            return 1;
          }
          if ((*(_BYTE *)v4 & 0xDF) != 0x53
            || (*(_BYTE *)(v4 + 1) & 0xDF) != 0x46
            || (*(_BYTE *)(v4 + 2) & 0xDF) != 0x4E)
          {
            return 0;
          }
          v8 = *(unsigned __int8 *)(v4 + 3);
          return (v8 & 0xFFFFFFDF) == 84;
        }
LABEL_52:
        v13 = *(_WORD *)v4 & 0xFFDF;
        if (v13 == 87)
        {
          if ((*(_WORD *)(v4 + 2) & 0xFFDF) != 0x4F || (*(_WORD *)(v4 + 4) & 0xFFDF) != 0x46)
            return 0;
          v11 = *(unsigned __int16 *)(v4 + 6);
          return (v11 & 0xFFFFFFDF) == 0x46;
        }
        if (v13 != 83 || (*(_WORD *)(v4 + 2) & 0xFFDF) != 0x46 || (*(_WORD *)(v4 + 4) & 0xFFDF) != 0x4E)
          return 0;
        v8 = *(unsigned __int16 *)(v4 + 6);
        return (v8 & 0xFFFFFFDF) == 84;
      }
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
  }
  return result;
}

BOOL WebCore::MIMETypeRegistry::isTextMediaPlaylistMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v3 = *(unsigned int *)(v2 + 4);
  if (v3 >= 0xC)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v5 = *(_BYTE *)v4 & 0xDF;
      if ((_DWORD)v3 == 12)
      {
        if (v5 != 65
          || (*(_BYTE *)(v4 + 1) & 0xDF) != 0x50
          || (*(_BYTE *)(v4 + 2) & 0xDF) != 0x50
          || (*(_BYTE *)(v4 + 3) & 0xDF) != 0x4C
          || (*(_BYTE *)(v4 + 4) & 0xDF) != 0x49
          || (*(_BYTE *)(v4 + 5) & 0xDF) != 0x43
          || (*(_BYTE *)(v4 + 6) & 0xDF) != 0x41
          || (*(_BYTE *)(v4 + 7) & 0xDF) != 0x54
          || (*(_BYTE *)(v4 + 8) & 0xDF) != 0x49
          || (*(_BYTE *)(v4 + 9) & 0xDF) != 0x4F
          || (*(_BYTE *)(v4 + 10) & 0xDF) != 0x4E)
        {
          goto LABEL_97;
        }
        v6 = *(unsigned __int8 *)(v4 + 11);
LABEL_17:
        if ((v6 & 0xFFFFFFDF) != 0xF)
          goto LABEL_97;
        return 0;
      }
      if (v5 != 65
        || (*(_BYTE *)(v4 + 1) & 0xDF) != 0x50
        || (*(_BYTE *)(v4 + 2) & 0xDF) != 0x50
        || (*(_BYTE *)(v4 + 3) & 0xDF) != 0x4C
        || (*(_BYTE *)(v4 + 4) & 0xDF) != 0x49
        || (*(_BYTE *)(v4 + 5) & 0xDF) != 0x43
        || (*(_BYTE *)(v4 + 6) & 0xDF) != 0x41
        || (*(_BYTE *)(v4 + 7) & 0xDF) != 0x54
        || (*(_BYTE *)(v4 + 8) & 0xDF) != 0x49
        || (*(_BYTE *)(v4 + 9) & 0xDF) != 0x4F
        || (*(_BYTE *)(v4 + 10) & 0xDF) != 0x4E
        || (*(_BYTE *)(v4 + 11) & 0xDF) != 0xF)
      {
        goto LABEL_97;
      }
      v8 = v3 - 12;
      v7 = v8;
      if (v8 < v8)
        goto LABEL_140;
      v8 = v4 + 12;
      v9 = v7 | 0x100000000;
    }
    else
    {
      v11 = *(_WORD *)v4 & 0xFFDF;
      if ((_DWORD)v3 == 12)
      {
        if (v11 != 65
          || (*(_WORD *)(v4 + 2) & 0xFFDF) != 0x50
          || (*(_WORD *)(v4 + 4) & 0xFFDF) != 0x50
          || (*(_WORD *)(v4 + 6) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v4 + 8) & 0xFFDF) != 0x49
          || (*(_WORD *)(v4 + 10) & 0xFFDF) != 0x43
          || (*(_WORD *)(v4 + 12) & 0xFFDF) != 0x41
          || (*(_WORD *)(v4 + 14) & 0xFFDF) != 0x54
          || (*(_WORD *)(v4 + 16) & 0xFFDF) != 0x49
          || (*(_WORD *)(v4 + 18) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v4 + 20) & 0xFFDF) != 0x4E)
        {
          goto LABEL_97;
        }
        v6 = *(unsigned __int16 *)(v4 + 22);
        goto LABEL_17;
      }
      if (v11 != 65
        || (*(_WORD *)(v4 + 2) & 0xFFDF) != 0x50
        || (*(_WORD *)(v4 + 4) & 0xFFDF) != 0x50
        || (*(_WORD *)(v4 + 6) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v4 + 8) & 0xFFDF) != 0x49
        || (*(_WORD *)(v4 + 10) & 0xFFDF) != 0x43
        || (*(_WORD *)(v4 + 12) & 0xFFDF) != 0x41
        || (*(_WORD *)(v4 + 14) & 0xFFDF) != 0x54
        || (*(_WORD *)(v4 + 16) & 0xFFDF) != 0x49
        || (*(_WORD *)(v4 + 18) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v4 + 20) & 0xFFDF) != 0x4E
        || (*(_WORD *)(v4 + 22) & 0xFFDF) != 0xF)
      {
        goto LABEL_97;
      }
      v8 = v3 - 12;
      v9 = v8;
      if (v8 < v8)
        goto LABEL_140;
      v8 = v4 + 24;
    }
    if ((_DWORD)v9 == 17)
    {
      if ((v9 & 0x100000000) != 0)
      {
        if ((*(_BYTE *)v8 & 0xDF) != 0x56
          || (*(_BYTE *)(v8 + 1) & 0xDF) != 0x4E
          || (*(_BYTE *)(v8 + 2) & 0xDF) != 0x44
          || (*(_BYTE *)(v8 + 3) & 0xDF) != 0xE
          || (*(_BYTE *)(v8 + 4) & 0xDF) != 0x41
          || (*(_BYTE *)(v8 + 5) & 0xDF) != 0x50
          || (*(_BYTE *)(v8 + 6) & 0xDF) != 0x50
          || (*(_BYTE *)(v8 + 7) & 0xDF) != 0x4C
          || (*(_BYTE *)(v8 + 8) & 0xDF) != 0x45
          || (*(_BYTE *)(v8 + 9) & 0xDF) != 0xE
          || (*(_BYTE *)(v8 + 10) & 0xDF) != 0x4D
          || (*(_BYTE *)(v8 + 11) & 0xDF) != 0x50
          || (*(_BYTE *)(v8 + 12) & 0xDF) != 0x45
          || (*(_BYTE *)(v8 + 13) & 0xDF) != 0x47
          || (*(_BYTE *)(v8 + 14) & 0xDF) != 0x55
          || (*(_BYTE *)(v8 + 15) & 0xDF) != 0x52)
        {
          return 0;
        }
        v10 = *(unsigned __int8 *)(v8 + 16);
      }
      else
      {
        if ((*(_WORD *)v8 & 0xFFDF) != 0x56
          || (*(_WORD *)(v8 + 2) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v8 + 4) & 0xFFDF) != 0x44
          || (*(_WORD *)(v8 + 6) & 0xFFDF) != 0xE
          || (*(_WORD *)(v8 + 8) & 0xFFDF) != 0x41
          || (*(_WORD *)(v8 + 10) & 0xFFDF) != 0x50
          || (*(_WORD *)(v8 + 12) & 0xFFDF) != 0x50
          || (*(_WORD *)(v8 + 14) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v8 + 16) & 0xFFDF) != 0x45
          || (*(_WORD *)(v8 + 18) & 0xFFDF) != 0xE
          || (*(_WORD *)(v8 + 20) & 0xFFDF) != 0x4D
          || (*(_WORD *)(v8 + 22) & 0xFFDF) != 0x50
          || (*(_WORD *)(v8 + 24) & 0xFFDF) != 0x45
          || (*(_WORD *)(v8 + 26) & 0xFFDF) != 0x47
          || (*(_WORD *)(v8 + 28) & 0xFFDF) != 0x55
          || (*(_WORD *)(v8 + 30) & 0xFFDF) != 0x52)
        {
          return 0;
        }
        v10 = *(unsigned __int16 *)(v8 + 32);
      }
      return (v10 & 0xFFFFFFDF) == 0x4C;
    }
    goto LABEL_107;
  }
  if (v3 < 6)
    return 0;
LABEL_97:
  v12 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    if ((_DWORD)v3 == 6
      || (*(_BYTE *)v12 & 0xDF) != 0x41
      || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x55
      || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x44
      || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x49
      || (*(_BYTE *)(v12 + 4) & 0xDF) != 0x4F
      || (*(_BYTE *)(v12 + 5) & 0xDF) != 0xF)
    {
      return 0;
    }
    v8 = v3 - 6;
    v13 = v8;
    if (v8 >= v8)
    {
      v8 = v12 + 6;
      v9 = v13 | 0x100000000;
      goto LABEL_107;
    }
LABEL_140:
    __break(1u);
LABEL_141:
    if ((*(_WORD *)v8 & 0xFFDF) != 0x4D
      || (*(_WORD *)(v8 + 2) & 0xFFDF) != 0x50
      || (*(_WORD *)(v8 + 4) & 0xFFDF) != 0x45
      || (*(_WORD *)(v8 + 6) & 0xFFDF) != 0x47
      || (*(_WORD *)(v8 + 8) & 0xFFDF) != 0x55
      || (*(_WORD *)(v8 + 10) & 0xFFDF) != 0x52)
    {
      return 0;
    }
    v10 = *(unsigned __int16 *)(v8 + 12);
    return (v10 & 0xFFFFFFDF) == 0x4C;
  }
  if ((_DWORD)v3 == 6
    || (*(_WORD *)v12 & 0xFFDF) != 0x41
    || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x55
    || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x44
    || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x49
    || (*(_WORD *)(v12 + 8) & 0xFFDF) != 0x4F
    || (*(_WORD *)(v12 + 10) & 0xFFDF) != 0xF)
  {
    return 0;
  }
  v8 = v3 - 6;
  v9 = v8;
  if (v8 < v8)
    goto LABEL_140;
  v8 = v12 + 12;
LABEL_107:
  if ((_DWORD)v9 == 7)
  {
    if ((v9 & 0x100000000) != 0)
    {
      if ((*(_BYTE *)v8 & 0xDF) != 0x4D
        || (*(_BYTE *)(v8 + 1) & 0xDF) != 0x50
        || (*(_BYTE *)(v8 + 2) & 0xDF) != 0x45
        || (*(_BYTE *)(v8 + 3) & 0xDF) != 0x47
        || (*(_BYTE *)(v8 + 4) & 0xDF) != 0x55
        || (*(_BYTE *)(v8 + 5) & 0xDF) != 0x52)
      {
        return 0;
      }
      v10 = *(unsigned __int8 *)(v8 + 6);
      return (v10 & 0xFFFFFFDF) == 0x4C;
    }
    goto LABEL_141;
  }
  if ((_DWORD)v9 != 9)
    return 0;
  if ((v9 & 0x100000000) != 0)
  {
    if ((*(_BYTE *)v8 & 0xDF) != 0x58
      || (*(_BYTE *)(v8 + 1) & 0xDF) != 0xD
      || (*(_BYTE *)(v8 + 2) & 0xDF) != 0x4D
      || (*(_BYTE *)(v8 + 3) & 0xDF) != 0x50
      || (*(_BYTE *)(v8 + 4) & 0xDF) != 0x45
      || (*(_BYTE *)(v8 + 5) & 0xDF) != 0x47
      || (*(_BYTE *)(v8 + 6) & 0xDF) != 0x55
      || (*(_BYTE *)(v8 + 7) & 0xDF) != 0x52)
    {
      return 0;
    }
    v15 = *(unsigned __int8 *)(v8 + 8);
  }
  else
  {
    if ((*(_WORD *)v8 & 0xFFDF) != 0x58
      || (*(_WORD *)(v8 + 2) & 0xFFDF) != 0xD
      || (*(_WORD *)(v8 + 4) & 0xFFDF) != 0x4D
      || (*(_WORD *)(v8 + 6) & 0xFFDF) != 0x50
      || (*(_WORD *)(v8 + 8) & 0xFFDF) != 0x45
      || (*(_WORD *)(v8 + 10) & 0xFFDF) != 0x47
      || (*(_WORD *)(v8 + 12) & 0xFFDF) != 0x55
      || (*(_WORD *)(v8 + 14) & 0xFFDF) != 0x52)
    {
      return 0;
    }
    v15 = *(unsigned __int16 *)(v8 + 16);
  }
  return (v15 & 0xFFFFFFDF) == 76;
}

uint64_t WebCore::MIMETypeRegistry::isSupportedJSONMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  uint64_t result;
  double v4;
  double v5;
  float v6;
  unint64_t v7;
  unint64_t v8;

  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
    return 0;
  if ((WTF::equalLettersIgnoringASCIICase((uint64_t *)this, "application/json", 0x11uLL) & 1) != 0
    || (WTF::equalLettersIgnoringASCIICase((uint64_t *)this, "text/json", 0xAuLL) & 1) != 0)
  {
    return 1;
  }
  result = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    result = WTF::StringImpl::endsWithIgnoringASCIICase();
    if ((_DWORD)result)
    {
      if (*(_QWORD *)this)
      {
        if (*(_DWORD *)(*(_QWORD *)this + 4) >= 8u)
        {
          v7 = WTF::String::find(this, 0x2Fu, 0, v4, v5, v6);
          if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v8 = *(_QWORD *)this ? (*(_DWORD *)(*(_QWORD *)this + 4) - 6) : 4294967290;
            if (v7 <= v8)
              return 1;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

BOOL WebCore::MIMETypeRegistry::isSupportedNonImageMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  if (*(_QWORD *)this
    && *(_DWORD *)(*(_QWORD *)this + 4)
    && (WebCore::MIMETypeRegistry::supportedNonImageMIMETypes(this), qword_1ECE83B38))
  {
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&qword_1ECE83B38, this) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::MIMETypeRegistry::isSupportedMediaMIMEType(WTF::StringImpl **this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  int v10;
  uint64_t v11;

  if (!*this || !*((_DWORD *)*this + 1))
    return 0;
  if ((byte_1ECE83B31 & 1) != 0)
  {
    v5 = qword_1ECE83B40;
    if (qword_1ECE83B40)
      goto LABEL_7;
    return 0;
  }
  v11 = 0;
  WebCore::MediaPlayer::getSupportedTypes((WebCore *)&v11);
  v5 = v11;
  qword_1ECE83B40 = v11;
  byte_1ECE83B31 = 1;
  if (!v11)
    return 0;
LABEL_7:
  v6 = *(_DWORD *)(v5 - 8);
  v7 = *((_DWORD *)*this + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*this);
  else
    v8 = v7 >> 8;
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    result = *(_QWORD *)(v5 + 8 * (v8 & v6));
    if (!result)
      break;
    if (result != -1 && (WTF::equal((WTF *)result, *this, a3) & 1) != 0)
      return 1;
    ++i;
  }
  return result;
}

BOOL WebCore::MIMETypeRegistry::isSupportedTextTrackMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this || *(_DWORD *)(v2 + 4) != 8)
    return 0;
  v4 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v4 & 0xFFDF) == 0x54
      && (*(_WORD *)(v4 + 2) & 0xFFDF) == 0x45
      && (*(_WORD *)(v4 + 4) & 0xFFDF) == 0x58
      && (*(_WORD *)(v4 + 6) & 0xFFDF) == 0x54
      && (*(_WORD *)(v4 + 8) & 0xFFDF) == 0xF
      && (*(_WORD *)(v4 + 10) & 0xFFDF) == 0x56
      && (*(_WORD *)(v4 + 12) & 0xFFDF) == 0x54)
    {
      v5 = *(unsigned __int16 *)(v4 + 14);
      return (v5 & 0xFFFFFFDF) == 84;
    }
    return 0;
  }
  if ((*(_BYTE *)v4 & 0xDF) != 0x54
    || (*(_BYTE *)(v4 + 1) & 0xDF) != 0x45
    || (*(_BYTE *)(v4 + 2) & 0xDF) != 0x58
    || (*(_BYTE *)(v4 + 3) & 0xDF) != 0x54
    || (*(_BYTE *)(v4 + 4) & 0xDF) != 0xF
    || (*(_BYTE *)(v4 + 5) & 0xDF) != 0x56
    || (*(_BYTE *)(v4 + 6) & 0xDF) != 0x54)
  {
    return 0;
  }
  v5 = *(unsigned __int8 *)(v4 + 7);
  return (v5 & 0xFFFFFFDF) == 84;
}

uint64_t WebCore::MIMETypeRegistry::isTextMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  const WTF::String *v3;
  uint64_t result;

  if (WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [16]>::contains<WTF::String>(WebCore::MIMETypeRegistry::isSupportedJavaScriptMIMEType(WTF::String const&)::supportedJavaScriptMIMETypes, (uint64_t *)this)|| (WebCore::MIMETypeRegistry::isSupportedJSONMIMEType(this, v3) & 1) != 0)
  {
    return 1;
  }
  result = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    result = WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(result, (uint64_t)"text/", 5uLL);
    if ((_DWORD)result)
    {
      if ((WTF::equalLettersIgnoringASCIICase((uint64_t *)this, "text/html", 0xAuLL) & 1) != 0
        || (WTF::equalLettersIgnoringASCIICase((uint64_t *)this, "text/xml", 9uLL) & 1) != 0)
      {
        return 0;
      }
      else
      {
        return WTF::equalLettersIgnoringASCIICase((uint64_t *)this, "text/xsl", 9uLL) ^ 1;
      }
    }
  }
  return result;
}

BOOL WebCore::MIMETypeRegistry::isXMLEntityMIMEType(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;

  if ((_DWORD)a2 == 31)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a1 & 0xDF) != 0x54
        || (*(_BYTE *)(a1 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(a1 + 2) & 0xDF) != 0x58
        || (*(_BYTE *)(a1 + 3) & 0xDF) != 0x54
        || (*(_BYTE *)(a1 + 4) & 0xDF) != 0xF
        || (*(_BYTE *)(a1 + 5) & 0xDF) != 0x58
        || (*(_BYTE *)(a1 + 6) & 0xDF) != 0x4D
        || (*(_BYTE *)(a1 + 7) & 0xDF) != 0x4C
        || (*(_BYTE *)(a1 + 8) & 0xDF) != 0xD
        || (*(_BYTE *)(a1 + 9) & 0xDF) != 0x45
        || (*(_BYTE *)(a1 + 10) & 0xDF) != 0x58
        || (*(_BYTE *)(a1 + 11) & 0xDF) != 0x54
        || (*(_BYTE *)(a1 + 12) & 0xDF) != 0x45
        || (*(_BYTE *)(a1 + 13) & 0xDF) != 0x52
        || (*(_BYTE *)(a1 + 14) & 0xDF) != 0x4E
        || (*(_BYTE *)(a1 + 15) & 0xDF) != 0x41
        || (*(_BYTE *)(a1 + 16) & 0xDF) != 0x4C
        || (*(_BYTE *)(a1 + 17) & 0xDF) != 0xD
        || (*(_BYTE *)(a1 + 18) & 0xDF) != 0x50
        || (*(_BYTE *)(a1 + 19) & 0xDF) != 0x41
        || (*(_BYTE *)(a1 + 20) & 0xDF) != 0x52
        || (*(_BYTE *)(a1 + 21) & 0xDF) != 0x53
        || (*(_BYTE *)(a1 + 22) & 0xDF) != 0x45
        || (*(_BYTE *)(a1 + 23) & 0xDF) != 0x44
        || (*(_BYTE *)(a1 + 24) & 0xDF) != 0xD
        || (*(_BYTE *)(a1 + 25) & 0xDF) != 0x45
        || (*(_BYTE *)(a1 + 26) & 0xDF) != 0x4E
        || (*(_BYTE *)(a1 + 27) & 0xDF) != 0x54
        || (*(_BYTE *)(a1 + 28) & 0xDF) != 0x49
        || (*(_BYTE *)(a1 + 29) & 0xDF) != 0x54)
      {
        return 0;
      }
      v3 = *(unsigned __int8 *)(a1 + 30);
    }
    else
    {
      if ((*(_WORD *)a1 & 0xFFDF) != 0x54
        || (*(_WORD *)(a1 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(a1 + 4) & 0xFFDF) != 0x58
        || (*(_WORD *)(a1 + 6) & 0xFFDF) != 0x54
        || (*(_WORD *)(a1 + 8) & 0xFFDF) != 0xF
        || (*(_WORD *)(a1 + 10) & 0xFFDF) != 0x58
        || (*(_WORD *)(a1 + 12) & 0xFFDF) != 0x4D
        || (*(_WORD *)(a1 + 14) & 0xFFDF) != 0x4C
        || (*(_WORD *)(a1 + 16) & 0xFFDF) != 0xD
        || (*(_WORD *)(a1 + 18) & 0xFFDF) != 0x45
        || (*(_WORD *)(a1 + 20) & 0xFFDF) != 0x58
        || (*(_WORD *)(a1 + 22) & 0xFFDF) != 0x54
        || (*(_WORD *)(a1 + 24) & 0xFFDF) != 0x45
        || (*(_WORD *)(a1 + 26) & 0xFFDF) != 0x52
        || (*(_WORD *)(a1 + 28) & 0xFFDF) != 0x4E
        || (*(_WORD *)(a1 + 30) & 0xFFDF) != 0x41
        || (*(_WORD *)(a1 + 32) & 0xFFDF) != 0x4C
        || (*(_WORD *)(a1 + 34) & 0xFFDF) != 0xD
        || (*(_WORD *)(a1 + 36) & 0xFFDF) != 0x50
        || (*(_WORD *)(a1 + 38) & 0xFFDF) != 0x41
        || (*(_WORD *)(a1 + 40) & 0xFFDF) != 0x52
        || (*(_WORD *)(a1 + 42) & 0xFFDF) != 0x53
        || (*(_WORD *)(a1 + 44) & 0xFFDF) != 0x45
        || (*(_WORD *)(a1 + 46) & 0xFFDF) != 0x44
        || (*(_WORD *)(a1 + 48) & 0xFFDF) != 0xD
        || (*(_WORD *)(a1 + 50) & 0xFFDF) != 0x45
        || (*(_WORD *)(a1 + 52) & 0xFFDF) != 0x4E
        || (*(_WORD *)(a1 + 54) & 0xFFDF) != 0x54
        || (*(_WORD *)(a1 + 56) & 0xFFDF) != 0x49
        || (*(_WORD *)(a1 + 58) & 0xFFDF) != 0x54)
      {
        return 0;
      }
      v3 = *(unsigned __int16 *)(a1 + 60);
    }
    return (v3 & 0xFFFFFFDF) == 0x59;
  }
  else
  {
    if ((_DWORD)a2 != 38)
      return 0;
    if ((a2 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a1 & 0xDF) != 0x41
        || (*(_BYTE *)(a1 + 1) & 0xDF) != 0x50
        || (*(_BYTE *)(a1 + 2) & 0xDF) != 0x50
        || (*(_BYTE *)(a1 + 3) & 0xDF) != 0x4C
        || (*(_BYTE *)(a1 + 4) & 0xDF) != 0x49
        || (*(_BYTE *)(a1 + 5) & 0xDF) != 0x43
        || (*(_BYTE *)(a1 + 6) & 0xDF) != 0x41
        || (*(_BYTE *)(a1 + 7) & 0xDF) != 0x54
        || (*(_BYTE *)(a1 + 8) & 0xDF) != 0x49
        || (*(_BYTE *)(a1 + 9) & 0xDF) != 0x4F
        || (*(_BYTE *)(a1 + 10) & 0xDF) != 0x4E
        || (*(_BYTE *)(a1 + 11) & 0xDF) != 0xF
        || (*(_BYTE *)(a1 + 12) & 0xDF) != 0x58
        || (*(_BYTE *)(a1 + 13) & 0xDF) != 0x4D
        || (*(_BYTE *)(a1 + 14) & 0xDF) != 0x4C
        || (*(_BYTE *)(a1 + 15) & 0xDF) != 0xD
        || (*(_BYTE *)(a1 + 16) & 0xDF) != 0x45
        || (*(_BYTE *)(a1 + 17) & 0xDF) != 0x58
        || (*(_BYTE *)(a1 + 18) & 0xDF) != 0x54
        || (*(_BYTE *)(a1 + 19) & 0xDF) != 0x45
        || (*(_BYTE *)(a1 + 20) & 0xDF) != 0x52
        || (*(_BYTE *)(a1 + 21) & 0xDF) != 0x4E
        || (*(_BYTE *)(a1 + 22) & 0xDF) != 0x41
        || (*(_BYTE *)(a1 + 23) & 0xDF) != 0x4C
        || (*(_BYTE *)(a1 + 24) & 0xDF) != 0xD
        || (*(_BYTE *)(a1 + 25) & 0xDF) != 0x50
        || (*(_BYTE *)(a1 + 26) & 0xDF) != 0x41
        || (*(_BYTE *)(a1 + 27) & 0xDF) != 0x52
        || (*(_BYTE *)(a1 + 28) & 0xDF) != 0x53
        || (*(_BYTE *)(a1 + 29) & 0xDF) != 0x45
        || (*(_BYTE *)(a1 + 30) & 0xDF) != 0x44
        || (*(_BYTE *)(a1 + 31) & 0xDF) != 0xD
        || (*(_BYTE *)(a1 + 32) & 0xDF) != 0x45
        || (*(_BYTE *)(a1 + 33) & 0xDF) != 0x4E
        || (*(_BYTE *)(a1 + 34) & 0xDF) != 0x54
        || (*(_BYTE *)(a1 + 35) & 0xDF) != 0x49
        || (*(_BYTE *)(a1 + 36) & 0xDF) != 0x54)
      {
        return 0;
      }
      v4 = *(unsigned __int8 *)(a1 + 37);
    }
    else
    {
      if ((*(_WORD *)a1 & 0xFFDF) != 0x41
        || (*(_WORD *)(a1 + 2) & 0xFFDF) != 0x50
        || (*(_WORD *)(a1 + 4) & 0xFFDF) != 0x50
        || (*(_WORD *)(a1 + 6) & 0xFFDF) != 0x4C
        || (*(_WORD *)(a1 + 8) & 0xFFDF) != 0x49
        || (*(_WORD *)(a1 + 10) & 0xFFDF) != 0x43
        || (*(_WORD *)(a1 + 12) & 0xFFDF) != 0x41
        || (*(_WORD *)(a1 + 14) & 0xFFDF) != 0x54
        || (*(_WORD *)(a1 + 16) & 0xFFDF) != 0x49
        || (*(_WORD *)(a1 + 18) & 0xFFDF) != 0x4F
        || (*(_WORD *)(a1 + 20) & 0xFFDF) != 0x4E
        || (*(_WORD *)(a1 + 22) & 0xFFDF) != 0xF
        || (*(_WORD *)(a1 + 24) & 0xFFDF) != 0x58
        || (*(_WORD *)(a1 + 26) & 0xFFDF) != 0x4D
        || (*(_WORD *)(a1 + 28) & 0xFFDF) != 0x4C
        || (*(_WORD *)(a1 + 30) & 0xFFDF) != 0xD
        || (*(_WORD *)(a1 + 32) & 0xFFDF) != 0x45
        || (*(_WORD *)(a1 + 34) & 0xFFDF) != 0x58
        || (*(_WORD *)(a1 + 36) & 0xFFDF) != 0x54
        || (*(_WORD *)(a1 + 38) & 0xFFDF) != 0x45
        || (*(_WORD *)(a1 + 40) & 0xFFDF) != 0x52
        || (*(_WORD *)(a1 + 42) & 0xFFDF) != 0x4E
        || (*(_WORD *)(a1 + 44) & 0xFFDF) != 0x41
        || (*(_WORD *)(a1 + 46) & 0xFFDF) != 0x4C
        || (*(_WORD *)(a1 + 48) & 0xFFDF) != 0xD
        || (*(_WORD *)(a1 + 50) & 0xFFDF) != 0x50
        || (*(_WORD *)(a1 + 52) & 0xFFDF) != 0x41
        || (*(_WORD *)(a1 + 54) & 0xFFDF) != 0x52
        || (*(_WORD *)(a1 + 56) & 0xFFDF) != 0x53
        || (*(_WORD *)(a1 + 58) & 0xFFDF) != 0x45
        || (*(_WORD *)(a1 + 60) & 0xFFDF) != 0x44
        || (*(_WORD *)(a1 + 62) & 0xFFDF) != 0xD
        || (*(_WORD *)(a1 + 64) & 0xFFDF) != 0x45
        || (*(_WORD *)(a1 + 66) & 0xFFDF) != 0x4E
        || (*(_WORD *)(a1 + 68) & 0xFFDF) != 0x54
        || (*(_WORD *)(a1 + 70) & 0xFFDF) != 0x49
        || (*(_WORD *)(a1 + 72) & 0xFFDF) != 0x54)
      {
        return 0;
      }
      v4 = *(unsigned __int16 *)(a1 + 74);
    }
    return (v4 & 0xFFFFFFDF) == 89;
  }
}

BOOL WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [2]>::contains<WTF::String>(unsigned __int8 ***a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v16;
  char *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  char *v24;
  unsigned __int16 v25;
  int v26;
  unint64_t v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  unint64_t v36;
  char *v37;
  unsigned __int16 v38;
  int v39;

  v2 = *a2;
  if (!*a2)
  {
    v5 = *a1;
    v6 = (uint64_t)(*a1 + 4);
    goto LABEL_14;
  }
  v3 = *(unsigned __int8 **)(v2 + 8);
  v4 = *(unsigned int *)(v2 + 4) | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32);
  v5 = *a1;
  v6 = (uint64_t)(*a1 + 4);
  v7 = v4;
  if ((v4 & 0xFF00000000) != 0)
  {
    if ((_DWORD)v4)
    {
      v9 = (char *)*v5;
      v8 = v5[1];
      if (v8)
        v10 = v8 - 1;
      else
        v10 = 0;
      if (v10 == (unsigned __int8 *)v7 && (*v3 | 0x20) == *v9)
      {
        v27 = 0;
        v28 = (unsigned __int8 *)(v9 + 1);
        while (v7 - 1 != v27)
        {
          v29 = v28[v27];
          v30 = v3[++v27] | 0x20;
          if (v30 != v29)
          {
            if (v27 < v7)
              goto LABEL_8;
            goto LABEL_15;
          }
        }
        goto LABEL_15;
      }
LABEL_8:
      v13 = v5[2];
      v12 = v5[3];
      v11 = (uint64_t)(v5 + 2);
      if (v12)
        v14 = v12 - 1;
      else
        v14 = 0;
      if (v14 == (unsigned __int8 *)v7 && (*v3 | 0x20) == *v13)
      {
        v31 = 0;
        v32 = v3 + 1;
        v33 = v13 + 1;
        while (v7 - 1 != v31)
        {
          v34 = v33[v31];
          v35 = v32[v31++] | 0x20;
          if (v35 != v34)
          {
            if (v31 < v7)
              return v6 - (_QWORD)v5 != 32;
            break;
          }
        }
LABEL_43:
        v6 = v11;
        return v6 - (_QWORD)v5 != 32;
      }
      return v6 - (_QWORD)v5 != 32;
    }
LABEL_14:
    if ((unint64_t)v5[1] < 2)
    {
LABEL_15:
      v6 = (uint64_t)v5;
      return v6 - (_QWORD)v5 != 32;
    }
    if ((unint64_t)v5[3] < 2)
      v6 = (uint64_t)(v5 + 2);
    return v6 - (_QWORD)v5 != 32;
  }
  if (!(_DWORD)v4)
    goto LABEL_14;
  v17 = (char *)*v5;
  v16 = v5[1];
  if (v16)
    v18 = v16 - 1;
  else
    v18 = 0;
  if (v18 == (unsigned __int8 *)v7 && (*(unsigned __int16 *)v3 | 0x20) == (unsigned __int16)*v17)
  {
    v36 = 0;
    v37 = v17 + 1;
    while (v7 - 1 != v36)
    {
      v38 = v37[v36];
      v39 = *(unsigned __int16 *)&v3[2 * v36++ + 2] | 0x20;
      if (v39 != v38)
      {
        if (v36 >= v7)
          goto LABEL_15;
        goto LABEL_21;
      }
    }
    goto LABEL_15;
  }
LABEL_21:
  v20 = v5[2];
  v19 = v5[3];
  v11 = (uint64_t)(v5 + 2);
  if (v19)
    v21 = v19 - 1;
  else
    v21 = 0;
  if (v21 == (unsigned __int8 *)v7 && (*(unsigned __int16 *)v3 | 0x20) == (unsigned __int16)(char)*v20)
  {
    v22 = 0;
    v23 = v3 + 2;
    v24 = (char *)(v20 + 1);
    while (v7 - 1 != v22)
    {
      v25 = v24[v22];
      v26 = *(unsigned __int16 *)&v23[2 * v22++] | 0x20;
      if (v26 != v25)
      {
        if (v22 >= v7)
          v6 = (uint64_t)(v5 + 2);
        return v6 - (_QWORD)v5 != 32;
      }
    }
    goto LABEL_43;
  }
  return v6 - (_QWORD)v5 != 32;
}

BOOL WebCore::MIMETypeRegistry::isSupportedModelMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [4]>::contains<WTF::String>((char ***)WebCore::MIMETypeRegistry::isUSDMIMEType(WTF::String const&)::usdMIMETypeSet, (uint64_t *)this);
}

BOOL WebCore::MIMETypeRegistry::isUSDMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [4]>::contains<WTF::String>((char ***)WebCore::MIMETypeRegistry::isUSDMIMEType(WTF::String const&)::usdMIMETypeSet, (uint64_t *)this);
}

BOOL WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [4]>::contains<WTF::String>(char ***a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 *v6;
  int v7;
  char v8;
  char v9;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(unsigned __int8 **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4) | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v3 = 0;
    v4 = 0x100000000;
  }
  v6 = v3;
  v7 = v4;
  v8 = BYTE4(v4);
  v9 = 1;
  return std::find[abi:sn180100]<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> const*,WTF::ComparableStringView>(*a1, (unsigned __int8 **)*a1 + 8, &v6) != *a1 + 8;
}

void WebCore::MIMETypeRegistry::appendFileExtensionIfNecessary(WebCore::MIMETypeRegistry *this@<X0>, WTF **a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  uint64_t v9;
  _DWORD *v10;
  const WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned __int8 *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  WTF::StringImpl *v24;

  v9 = *(_QWORD *)this;
  if (!v9)
  {
    v10 = 0;
LABEL_10:
    *a3 = v10;
    return;
  }
  if (!*(_DWORD *)(v9 + 4)
    || WTF::StringImpl::find(v9, 0x2Eu, 0, a4, a5, a6) != -1
      ? (const WTF::StringImpl *)(v13 = (const WTF::StringImpl *)&WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl,
                                  WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl += 2,
                                  WebCore::defaultMIMEType(void)::defaultMIMEType = (uint64_t)&WebCore::defaultMIMEType(void)::$_0::operator() const(void)::impl,
      : (v13 = (const WTF::StringImpl *)WebCore::defaultMIMEType(void)::defaultMIMEType),
        WTF::equalIgnoringASCIICase(*a2, v13, v12)))
  {
    v10 = *(_DWORD **)this;
    if (*(_QWORD *)this)
      *v10 += 2;
    goto LABEL_10;
  }
  WebCore::MIMETypeRegistry::preferredExtensionForMIMEType((WebCore::MIMETypeRegistry *)a2, &v24);
  v15 = (unsigned __int8 *)v24;
  if (!v24 || (v18 = *((_DWORD *)v24 + 1)) == 0)
  {
    v16 = *(_DWORD **)this;
    if (*(_QWORD *)this)
      *v16 += 2;
    *a3 = v16;
    goto LABEL_16;
  }
  v19 = *(_QWORD *)this;
  if (v19)
  {
    v20 = *(_DWORD *)(v19 + 4);
    *(_DWORD *)v19 += 2;
  }
  else
  {
    v20 = 0;
  }
  *(_DWORD *)v15 += 2;
  if (v18 < 0 || (v21 = __OFADD__(v18, 1), v22 = v18 + 1, v21) || v20 < 0 || __OFADD__(v20, v22))
  {
    *a3 = 0;
LABEL_42:
    __break(0xC471u);
    return;
  }
  if (v19 && (*(_BYTE *)(v19 + 16) & 4) == 0)
    v23 = 0;
  else
    v23 = (v15[16] >> 2) & 1;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((v20 + v22), v23, v19, 46, (uint64_t)v15, a3);
  if (!*a3)
    goto LABEL_42;
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v15, v14);
    if (!v19)
      goto LABEL_16;
  }
  else
  {
    *(_DWORD *)v15 -= 2;
    if (!v19)
      goto LABEL_16;
  }
  if (*(_DWORD *)v19 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v19, v14);
  else
    *(_DWORD *)v19 -= 2;
LABEL_16:
  v17 = v24;
  v24 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
}

WebCore *WebCore::MIMETypeRegistry::preferredImageMIMETypeForEncoding@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore *result;
  WTF::StringImpl *v5;
  unint64_t v6;
  unint64_t v7;
  _DWORD **v8;
  unint64_t StatusReg;
  WTF::ASCIICaseInsensitiveHash *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  WTF *v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF *v22;
  WTF::StringImpl **v23;
  WTF *v24;
  int v25;
  unsigned int v26;
  WebCore *v27;

  result = (WebCore *)WebCore::MIMETypeRegistry::allowedMIMETypes(a1, a2, (uint64_t)&v24);
  v6 = v26;
  if (!v26)
  {
    v6 = 0;
    v8 = (_DWORD **)MEMORY[0x1E0CBF6F0];
    goto LABEL_28;
  }
  v7 = 0;
  v8 = (_DWORD **)MEMORY[0x1E0CBF6F0];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v10 = (WTF *)((char *)v24 + 8 * v7);
    if (!*(_QWORD *)v10 || !*(_DWORD *)(*(_QWORD *)v10 + 4))
      goto LABEL_4;
    v11 = *(_QWORD *)(StatusReg + 736);
    if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
      v12 = WebCore::threadGlobalDataSlow(result);
    result = *(WebCore **)(v12 + 72);
    if (!result)
    {
      WebCore::MIMETypeRegistry::createMIMETypeRegistryThreadGlobalData(&v27);
      result = v27;
      v13 = *(WTF **)(v12 + 72);
      *(_QWORD *)(v12 + 72) = v27;
      if (v13)
      {
        v14 = *(WTF::StringImpl ***)v13;
        if (*(_QWORD *)v13)
        {
          v22 = v13;
          v23 = *(WTF::StringImpl ***)v13;
          v15 = *((unsigned int *)v14 - 1);
          if ((_DWORD)v15)
          {
            do
            {
              v16 = *v14;
              if (*v14 != (WTF::StringImpl *)-1)
              {
                *v14 = 0;
                if (v16)
                {
                  if (*(_DWORD *)v16 == 2)
                  {
                    v20 = v14;
                    v21 = v15;
                    WTF::StringImpl::destroy(v16, v5);
                    v14 = v20;
                    v15 = v21;
                  }
                  else
                  {
                    *(_DWORD *)v16 -= 2;
                  }
                }
              }
              ++v14;
              --v15;
            }
            while (v15);
          }
          WTF::fastFree((WTF *)(v23 - 2), v5);
          v13 = v22;
        }
        WTF::fastFree(v13, v5);
        result = *(WebCore **)(v12 + 72);
      }
    }
    if (!*(_QWORD *)result)
    {
      v6 = v26;
      goto LABEL_4;
    }
    result = (WebCore *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>((uint64_t *)result, v10);
    v6 = v26;
    if (result)
      break;
LABEL_4:
    if (++v7 >= v6)
      goto LABEL_28;
  }
  if (v7 >= v26)
  {
    __break(0xC471u);
    return result;
  }
  v8 = (_DWORD **)((char *)v24 + 8 * v7);
LABEL_28:
  v17 = *v8;
  if (*v8)
    *v17 += 2;
  *a3 = v17;
  v18 = v24;
  if (!v6)
  {
    if (!v24)
      return result;
LABEL_43:
    v24 = 0;
    v25 = 0;
    return (WebCore *)WTF::fastFree(v18, v5);
  }
  v19 = 8 * v6;
  do
  {
    result = *(WebCore **)v18;
    *(_QWORD *)v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WebCore *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
    v18 = (WTF *)((char *)v18 + 8);
    v19 -= 8;
  }
  while (v19);
  v18 = v24;
  if (v24)
    goto LABEL_43;
  return result;
}

unsigned int *WebCore::MIMETypeRegistry::allowedMIMETypes@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  WTF::String *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  const WTF::StringImpl *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  _DWORD **v33;
  uint64_t v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = result[3];
  if ((_DWORD)v5)
  {
    v6 = *(WTF::String **)result;
    v7 = *(_QWORD *)result + 8 * v5;
    do
    {
      WTF::String::convertToASCIILowercase(v6);
      LODWORD(v10) = *(_DWORD *)(a3 + 12);
      if ((_DWORD)v10)
      {
        v11 = 0;
        while ((WTF::equal(*(WTF **)(*(_QWORD *)a3 + 8 * v11), v37, v9) & 1) == 0)
        {
          ++v11;
          v10 = *(unsigned int *)(a3 + 12);
          if (v11 >= v10)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        if ((_DWORD)v10 == *(_DWORD *)(a3 + 8))
        {
          v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v10 + 1, (unint64_t)&v37);
          v10 = *(unsigned int *)(a3 + 12);
          v15 = *(_QWORD *)a3;
          v16 = *v14;
          if (*v14)
            *v16 += 2;
          *(_QWORD *)(v15 + 8 * v10) = v16;
        }
        else
        {
          v12 = *(_QWORD *)a3;
          v13 = v37;
          if (v37)
            *(_DWORD *)v37 += 2;
          *(_QWORD *)(v12 + 8 * v10) = v13;
        }
        *(_DWORD *)(a3 + 12) = v10 + 1;
      }
      result = (unsigned int *)v37;
      v37 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
        else
          *result -= 2;
      }
      v6 = (WTF::String *)((char *)v6 + 8);
    }
    while (v6 != (WTF::String *)v7);
  }
  v17 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v17)
  {
    v18 = *(WTF::StringImpl ***)a2;
    v19 = &v18[v17];
    do
    {
      v20 = *v18;
      if (*v18)
      {
        v21 = WTF::StringImpl::startsWith();
        v20 = *v18;
        if (v21)
        {
          if (!v20)
          {
            v22 = 0;
            v23 = 0;
            v36 = 0;
            goto LABEL_28;
          }
          WTF::StringImpl::substring(v20);
          v20 = v36;
          if (!v36)
            goto LABEL_27;
          goto LABEL_32;
        }
        if (v20)
          *(_DWORD *)v20 += 2;
      }
      v36 = v20;
      if (!v20)
      {
LABEL_27:
        v22 = 0;
        v23 = 0;
LABEL_28:
        v24 = 1;
        goto LABEL_33;
      }
LABEL_32:
      v22 = *((_QWORD *)v20 + 1);
      v23 = *((unsigned int *)v20 + 1);
      v24 = ((unint64_t)*((unsigned int *)v20 + 4) >> 2) & 1;
LABEL_33:
      WebCore::MIMETypeRegistry::mimeTypeForExtension(v22, v23 | (v24 << 32), &v37);
      v26 = v36;
      v36 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
      result = (unsigned int *)v37;
      if (v37)
      {
        if (*((_DWORD *)v37 + 1))
        {
          WTF::String::convertToASCIILowercase((WTF::String *)&v37);
          LODWORD(v28) = *(_DWORD *)(a3 + 12);
          if ((_DWORD)v28)
          {
            v29 = 0;
            while ((WTF::equal(*(WTF **)(*(_QWORD *)a3 + 8 * v29), v36, v27) & 1) == 0)
            {
              ++v29;
              v28 = *(unsigned int *)(a3 + 12);
              if (v29 >= v28)
                goto LABEL_42;
            }
          }
          else
          {
LABEL_42:
            if ((_DWORD)v28 == *(_DWORD *)(a3 + 8))
            {
              v33 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v28 + 1, (unint64_t)&v36);
              v28 = *(unsigned int *)(a3 + 12);
              v34 = *(_QWORD *)a3;
              v35 = *v33;
              if (*v33)
                *v35 += 2;
              *(_QWORD *)(v34 + 8 * v28) = v35;
            }
            else
            {
              v30 = *(_QWORD *)a3;
              v31 = v36;
              if (v36)
                *(_DWORD *)v36 += 2;
              *(_QWORD *)(v30 + 8 * v28) = v31;
            }
            *(_DWORD *)(a3 + 12) = v28 + 1;
          }
          v32 = v36;
          v36 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v25);
            else
              *(_DWORD *)v32 -= 2;
          }
          result = (unsigned int *)v37;
          v37 = 0;
          if (!result)
            goto LABEL_55;
        }
        else
        {
          v37 = 0;
        }
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v25);
        else
          *result -= 2;
      }
LABEL_55:
      ++v18;
    }
    while (v18 != v19);
  }
  return result;
}

BOOL WebCore::MIMETypeRegistry::containsImageMIMETypeForEncoding(unsigned int *a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;

  WebCore::MIMETypeRegistry::preferredImageMIMETypeForEncoding(a1, a2, &v5);
  v3 = v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3 != 0;
}

void WebCore::MIMETypeRegistry::allowedFileExtensions(uint64_t a1@<X0>, unsigned int *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  WebCore::MIMETypeRegistry *v7;
  uint64_t v8;
  const WTF::StringImpl **v9;
  const WTF::StringImpl **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  _DWORD **v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _DWORD **v30;
  uint64_t v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  int v34;
  unsigned int v35;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(WebCore::MIMETypeRegistry **)a1;
    v8 = *(_QWORD *)a1 + 8 * v6;
    while (1)
    {
      WebCore::MIMETypeRegistry::extensionsForMIMEType(v7, (uint64_t)&v33);
      v9 = (const WTF::StringImpl **)v33;
      v10 = (const WTF::StringImpl **)((char *)v33 + 8 * v35);
      if (v35)
      {
        do
        {
          LODWORD(v11) = *(_DWORD *)(a4 + 12);
          if ((_DWORD)v11)
          {
            v12 = 0;
            while ((WTF::equal(*(WTF **)(*(_QWORD *)a4 + 8 * v12), *v9, a3) & 1) == 0)
            {
              ++v12;
              v11 = *(unsigned int *)(a4 + 12);
              if (v12 >= v11)
                goto LABEL_8;
            }
          }
          else
          {
LABEL_8:
            if ((_DWORD)v11 == *(_DWORD *)(a4 + 8))
            {
              v15 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v11 + 1, (unint64_t)v9);
              v11 = *(unsigned int *)(a4 + 12);
              v16 = *(_QWORD *)a4;
              v17 = *v15;
              if (*v15)
                *v17 += 2;
              *(_QWORD *)(v16 + 8 * v11) = v17;
            }
            else
            {
              v13 = *(_QWORD *)a4;
              v14 = *v9;
              if (*v9)
                *(_DWORD *)v14 += 2;
              *(_QWORD *)(v13 + 8 * v11) = v14;
            }
            *(_DWORD *)(a4 + 12) = v11 + 1;
          }
          ++v9;
        }
        while (v9 != v10);
        v9 = (const WTF::StringImpl **)v33;
        if (v35)
          break;
      }
      if (v9)
        goto LABEL_30;
LABEL_20:
      v7 = (WebCore::MIMETypeRegistry *)((char *)v7 + 8);
      if (v7 == (WebCore::MIMETypeRegistry *)v8)
        goto LABEL_31;
    }
    v18 = 8 * v35;
    do
    {
      v19 = *v9;
      *v9 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v19 -= 2;
      }
      ++v9;
      v18 -= 8;
    }
    while (v18);
    v9 = (const WTF::StringImpl **)v33;
    if (!v33)
      goto LABEL_20;
LABEL_30:
    v33 = 0;
    v34 = 0;
    WTF::fastFree((WTF *)v9, a2);
    goto LABEL_20;
  }
LABEL_31:
  v20 = a2[3];
  if ((_DWORD)v20)
  {
    v21 = *(WTF::StringImpl ***)a2;
    v22 = &v21[v20];
    do
    {
      v23 = *v21;
      if (*v21)
      {
        v24 = WTF::StringImpl::startsWith();
        v23 = *v21;
        if (v24)
        {
          if (v23)
            WTF::StringImpl::substring(v23);
          else
            v33 = 0;
          goto LABEL_40;
        }
        if (v23)
          *(_DWORD *)v23 += 2;
      }
      v33 = v23;
LABEL_40:
      LODWORD(v25) = *(_DWORD *)(a4 + 12);
      if ((_DWORD)v25)
      {
        v26 = 0;
        while ((WTF::equal(*(WTF **)(*(_QWORD *)a4 + 8 * v26), v33, a3) & 1) == 0)
        {
          ++v26;
          v25 = *(unsigned int *)(a4 + 12);
          if (v26 >= v25)
            goto LABEL_44;
        }
      }
      else
      {
LABEL_44:
        if ((_DWORD)v25 == *(_DWORD *)(a4 + 8))
        {
          v30 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v25 + 1, (unint64_t)&v33);
          v25 = *(unsigned int *)(a4 + 12);
          v31 = *(_QWORD *)a4;
          v32 = *v30;
          if (*v30)
            *v32 += 2;
          *(_QWORD *)(v31 + 8 * v25) = v32;
        }
        else
        {
          v27 = *(_QWORD *)a4;
          v28 = v33;
          if (v33)
            *(_DWORD *)v33 += 2;
          *(_QWORD *)(v27 + 8 * v25) = v28;
        }
        *(_DWORD *)(a4 + 12) = v25 + 1;
      }
      v29 = v33;
      v33 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v29 -= 2;
      }
      ++v21;
    }
    while (v21 != v22);
  }
}

unint64_t WebCore::MIMETypeRegistry::isJPEGMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  WebCore *v2;
  unint64_t v3;
  const __CFString *v4;
  CFTypeRef v5;
  CFTypeRef cf;

  v2 = (WebCore *)WebCore::utiFromImageBufferMIMEType(this, (const __CFString **)&cf);
  v3 = (unint64_t)cf;
  if (cf)
  {
    v4 = WebCore::jpegUTI(v2);
    v3 = CFEqual((CFTypeRef)v3, v4) != 0;
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
  }
  return v3;
}

BOOL WebCore::MIMETypeRegistry::isWebArchiveMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  WebCore::MIMETypeRegistry *v2;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v11;
  _QWORD v12[3];
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[2];

  v2 = this;
  v15[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = (WTF::StringImpl *)v12[0];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15[0] = (WTF::StringImpl *)v12[0];
    v11 = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v13, (uint64_t *)&v11, (uint64_t)v12);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v14, (uint64_t *)&v11, (uint64_t)v12);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)v15, (uint64_t *)&v11, (uint64_t)v12);
    v4 = v11;
    v11 = 0;
    WebCore::MIMETypeRegistry::isWebArchiveMIMEType(WTF::String const&)::webArchiveMIMETypes = (uint64_t)v4;
    WTF::HashSet<WebCore::PublicSuffix,WTF::DefaultHash<WebCore::PublicSuffix>,WTF::HashTraits<WebCore::PublicSuffix>,WTF::HashTableTraits>::~HashSet(&v11, v5);
    v7 = v15[0];
    v15[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v14;
    v14 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    v2 = this;
  }
  return (unint64_t)(*(_QWORD *)v2 + 1) >= 2
      && WebCore::MIMETypeRegistry::isWebArchiveMIMEType(WTF::String const&)::webArchiveMIMETypes
      && WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::isWebArchiveMIMEType(WTF::String const&)::webArchiveMIMETypes, v2) != 0;
}

uint64_t WebCore::commonMimeTypesMap(WebCore *this, unint64_t a2)
{
  uint64_t result;
  char **v3;
  char *v4;
  uint64_t v5;
  char *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  int v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  int v17;
  unsigned __int16 *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unsigned __int16 *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  unsigned __int16 *v29;
  unsigned __int8 *v30;
  int v31;
  char *v32;
  unsigned __int8 *v33;
  int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  _DWORD **v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF::StringImpl *v70;

  if ((byte_1ECE83B33 & 1) != 0)
    return (uint64_t)&qword_1ECE83B50;
  v66 = 0;
  v3 = &WebCore::commonMimeTypesMap(void)::$_0::operator() const(void)::commonMediaTypes;
  while (2)
  {
    v4 = v3[1];
    v5 = (uint64_t)v3[2];
    v6 = v3[3];
    if (v6)
    {
      a2 = (unint64_t)(v6 - 1);
      if (v6 == (char *)1)
      {
        v64 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        v7 = v64;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v7 = v68;
      }
      v67 = v7;
    }
    else
    {
      v67 = 0;
    }
    v8 = v66;
    if (v66
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v66, 8u, 0), (v8 = v66) != 0))
    {
      v9 = *(_DWORD *)(v8 - 8);
    }
    else
    {
      v9 = 0;
    }
    result = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)&v67, (const WTF::String *)a2);
    v10 = 0;
    v11 = 0;
    v12 = v67;
    while (1)
    {
      v13 = result & v9;
      v14 = v8 + 24 * (result & v9);
      v15 = *(WTF::StringImpl **)v14;
      if (*(_QWORD *)v14 == -1)
      {
        v10 = (_QWORD *)(v8 + 24 * v13);
        goto LABEL_24;
      }
      if (!v15)
      {
        if (v10)
        {
          v10[1] = 0;
          v10[2] = 0;
          *v10 = 0;
          --*(_DWORD *)(v66 - 16);
          v14 = (uint64_t)v10;
        }
        v67 = 0;
        v35 = *(WTF::StringImpl **)v14;
        *(_QWORD *)v14 = v12;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v35 -= 2;
        }
        v68 = 0;
        v69 = 0;
        if (v6)
          v36 = ((_DWORD)v6 - 1) | 0x100000000;
        else
          v36 = 0x100000000;
        WebCore::MIMETypeRegistry::mimeTypeForExtension(v5, v36, &v70);
        if (v70)
        {
          if (*((_DWORD *)v70 + 1) && (MEMORY[0x19AEA53F4]() & 1) == 0)
          {
            v37 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v68, 1uLL, (unint64_t)&v70);
            v38 = HIDWORD(v69);
            v39 = v68;
            v40 = *v37;
            if (*v37)
              *v40 += 2;
            *((_QWORD *)v39 + v38) = v40;
            HIDWORD(v69) = v38 + 1;
          }
          v41 = v70;
          v70 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v41 -= 2;
          }
        }
        v42 = *(unsigned int *)(v14 + 20);
        if ((_DWORD)v42)
        {
          v48 = *(WTF::StringImpl ***)(v14 + 8);
          v49 = 8 * v42;
          do
          {
            v50 = *v48;
            *v48 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
                WTF::StringImpl::destroy(v50, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v50 -= 2;
            }
            ++v48;
            v49 -= 8;
          }
          while (v49);
        }
        result = *(_QWORD *)(v14 + 8);
        if (result)
        {
          *(_QWORD *)(v14 + 8) = 0;
          *(_DWORD *)(v14 + 16) = 0;
          result = WTF::fastFree((WTF *)result, (void *)a2);
        }
        *(_QWORD *)(v14 + 8) = v68;
        *(_QWORD *)(v14 + 16) = v69;
        if (v66)
          v43 = *(_DWORD *)(v66 - 12) + 1;
        else
          v43 = 1;
        *(_DWORD *)(v66 - 12) = v43;
        if (v66)
          v44 = *(_DWORD *)(v66 - 12);
        else
          v44 = 0;
        v45 = (*(_DWORD *)(v66 - 16) + v44);
        v46 = *(unsigned int *)(v66 - 4);
        if (v46 > 0x400)
        {
          if (v46 > 2 * v45)
            goto LABEL_85;
        }
        else
        {
          if (3 * v46 > 4 * v45)
            goto LABEL_85;
          if (!(_DWORD)v46)
          {
            v47 = 8;
            goto LABEL_84;
          }
        }
        v47 = (_DWORD)v46 << (6 * *(_DWORD *)(v66 - 12) >= (2 * v46));
LABEL_84:
        result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v66, v47, (WTF::StringImpl **)v14);
        v14 = result;
        goto LABEL_85;
      }
      v16 = *((unsigned int *)v15 + 1);
      if ((_DWORD)v16 != *((_DWORD *)v67 + 1))
        goto LABEL_24;
      v17 = *((_DWORD *)v67 + 4);
      v18 = (unsigned __int16 *)*((_QWORD *)v15 + 1);
      v19 = (unsigned __int8 *)*((_QWORD *)v67 + 1);
      if ((*((_BYTE *)v15 + 16) & 4) == 0)
      {
        if ((v17 & 4) != 0)
        {
          if (!(_DWORD)v16)
            goto LABEL_85;
          if ((*v18 | (32 * (*v18 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v19))
          {
            v20 = 0;
            v29 = v18 + 1;
            v30 = v19 + 1;
            while (v16 - 1 != v20)
            {
              v31 = v29[v20] | (32 * (v29[v20] - 65 < 0x1A));
              a2 = MEMORY[0x1E0CBF868];
              result = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[v20++]);
              if (v31 != (_DWORD)result)
                goto LABEL_43;
            }
            goto LABEL_85;
          }
        }
        else
        {
          if (!(_DWORD)v16)
            goto LABEL_85;
          if ((*v18 | (32 * (*v18 - 65 < 0x1A))) == (*(unsigned __int16 *)v19 | (32
                                                                                              * (*(unsigned __int16 *)v19
                                                                                               - 65 < 0x1A))))
          {
            v20 = 0;
            v21 = v18 + 1;
            v22 = v19 + 2;
            while (v16 - 1 != v20)
            {
              v23 = v21[v20] | (32 * (v21[v20] - 65 < 0x1A));
              v24 = *(unsigned __int16 *)&v22[2 * v20];
              a2 = (v24 - 65) < 0x1A;
              result = v24 | (32 * a2);
              ++v20;
              if (v23 != (_DWORD)result)
                goto LABEL_43;
            }
            goto LABEL_85;
          }
        }
        goto LABEL_24;
      }
      if ((v17 & 4) != 0)
        break;
      if (!(_DWORD)v16)
        goto LABEL_85;
      if ((*(unsigned __int16 *)v19 | (32 * (*(unsigned __int16 *)v19 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v18))
      {
        v20 = 0;
        v25 = (char *)v18 + 1;
        v26 = v19 + 2;
        while (v16 - 1 != v20)
        {
          v27 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v25[v20]);
          v28 = *(unsigned __int16 *)&v26[2 * v20];
          a2 = (v28 - 65) < 0x1A;
          result = v28 | (32 * a2);
          ++v20;
          if ((_DWORD)result != v27)
            goto LABEL_43;
        }
        goto LABEL_85;
      }
LABEL_24:
      ++v11;
      result = v13 + v11;
    }
    if (!(_DWORD)v16)
      goto LABEL_85;
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v18) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v19))
      goto LABEL_24;
    v20 = 0;
    v32 = (char *)v18 + 1;
    v33 = v19 + 1;
    while (v16 - 1 != v20)
    {
      a2 = MEMORY[0x1E0CBF868];
      v34 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[v20]);
      result = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v33[v20++]);
      if (v34 != (_DWORD)result)
      {
LABEL_43:
        if (v20 < v16)
          goto LABEL_24;
        break;
      }
    }
LABEL_85:
    v51 = *(unsigned int *)(v14 + 20);
    if ((_DWORD)v51 != *(_DWORD *)(v14 + 16))
    {
      v60 = *(_QWORD *)(v14 + 8);
      if (v4)
      {
        a2 = (unint64_t)(v4 - 1);
        if (v4 == (char *)1)
        {
          v61 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          v62 = v51;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v61 = v68;
          v62 = *(_DWORD *)(v14 + 20);
        }
        *(_QWORD *)(v60 + 8 * v51) = v61;
        LODWORD(v51) = v62;
      }
      else
      {
        *(_QWORD *)(v60 + 8 * v51) = 0;
      }
      goto LABEL_102;
    }
    v52 = v51 + (v51 >> 2);
    if (v52 >= 0x10)
      v53 = v52 + 1;
    else
      v53 = 16;
    if (v53 <= v51 + 1)
      v54 = v51 + 1;
    else
      v54 = v53;
    if (!(v54 >> 29))
    {
      v55 = *(void **)(v14 + 8);
      v56 = (void *)WTF::fastMalloc((WTF *)(8 * v54));
      *(_DWORD *)(v14 + 16) = v54;
      *(_QWORD *)(v14 + 8) = v56;
      memcpy(v56, v55, 8 * v51);
      if (v55)
      {
        if (*(void **)(v14 + 8) == v55)
        {
          *(_QWORD *)(v14 + 8) = 0;
          *(_DWORD *)(v14 + 16) = 0;
        }
        WTF::fastFree((WTF *)v55, (void *)a2);
      }
      v57 = *(unsigned int *)(v14 + 20);
      LODWORD(v51) = *(_DWORD *)(v14 + 20);
      v58 = *(_QWORD *)(v14 + 8);
      if (v4)
      {
        a2 = (unint64_t)(v4 - 1);
        if (v4 == (char *)1)
        {
          v65 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          v59 = v65;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v59 = v68;
          LODWORD(v51) = *(_DWORD *)(v14 + 20);
        }
        *(_QWORD *)(v58 + 8 * v57) = v59;
      }
      else
      {
        *(_QWORD *)(v58 + 8 * v57) = 0;
      }
LABEL_102:
      *(_DWORD *)(v14 + 20) = v51 + 1;
      v63 = v67;
      v67 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v63 -= 2;
      }
      v3 += 4;
      {
        qword_1ECE83B50 = v66;
        byte_1ECE83B33 = 1;
        return (uint64_t)&qword_1ECE83B50;
      }
      continue;
    }
    break;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveStringViewHashTranslator>::hash<WTF::StringView>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  unsigned __int16 *v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  int v18;

  v1 = *a1;
  v2 = a1[1];
  v3 = -1640531527;
  if ((v2 & 0xFF00000000) != 0)
  {
    if (v2 >= 2uLL)
    {
      v4 = 0;
      do
      {
        v5 = v3 + *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v1 + v4));
        v6 = (v5 << 16) ^ (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v1 + v4 + 1)) << 11) ^ v5;
        v3 = v6 + (v6 >> 11);
        v7 = v4 + 3;
        v4 += 2;
      }
      while (v7 < v2);
    }
    if ((v2 & 1) != 0)
    {
      v8 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v2 + v1 - 1));
LABEL_7:
      v3 = ((v3 + v8) ^ ((v3 + v8) << 11)) + (((v3 + v8) ^ ((v3 + v8) << 11)) >> 17);
    }
  }
  else
  {
    if (v2 >= 2uLL)
    {
      v13 = 0;
      do
      {
        v14 = (unsigned __int16 *)(v1 + 2 * v13);
        v15 = *v14 | (32 * (*v14 - 65 < 0x1A));
        v16 = (((v14[1] - 65 < 0x1A) << 16) | (v14[1] << 11)) ^ ((v3 + v15) << 16) ^ (v3 + v15);
        v3 = v16 + (v16 >> 11);
        v17 = v13 + 3;
        v13 += 2;
      }
      while (v17 < v2);
    }
    if ((v2 & 1) != 0)
    {
      v18 = *(unsigned __int16 *)(v1 + 2 * v2 - 2);
      v8 = v18 | (32 * ((v18 - 65) < 0x1A));
      goto LABEL_7;
    }
  }
  v9 = (v3 ^ (8 * v3)) + ((v3 ^ (8 * v3)) >> 5);
  v10 = (v9 ^ (4 * v9)) + ((v9 ^ (4 * v9)) >> 15);
  v11 = (v10 ^ (v10 << 10)) & 0xFFFFFF;
  if (v11)
    return v11;
  else
    return 0x800000;
}

void WebCore::LogChannels::~LogChannels(WebCore::LogChannels *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E3405B28;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E3405B28;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  JUMPOUT(0x19AEA7644);
}

char **std::find[abi:sn180100]<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> const*,WTF::ComparableStringView>(char **result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  int v14;

  if (result != (char **)a2)
  {
    v3 = *a3;
    v4 = a3[1];
    if (((unint64_t)a3[1] & 0xFF00000000) != 0)
    {
      if (a3[1])
      {
        while (1)
        {
          v5 = (unsigned __int8 *)result[1];
          v6 = v5 ? (uint64_t)(v5 - 1) : 0;
          if (v6 == v4 && (*v3 | 0x20) == **result)
            break;
LABEL_8:
          result += 2;
          if (result == (char **)a2)
            return (char **)a2;
        }
        v7 = 0;
        while (v4 - 1 != v7)
        {
          v8 = (*result)[v7 + 1];
          v9 = v3[++v7] | 0x20;
          if (v9 != v8)
          {
            if (v7 < v4)
              goto LABEL_8;
            return result;
          }
        }
      }
      else
      {
        while ((unint64_t)result[1] >= 2)
        {
          result += 2;
          if (result == (char **)a2)
            return (char **)a2;
        }
      }
    }
    else if (a3[1])
    {
      while (1)
      {
        v10 = (unsigned __int8 *)result[1];
        v11 = v10 ? (uint64_t)(v10 - 1) : 0;
        if (v11 == v4 && (*(unsigned __int16 *)v3 | 0x20) == (unsigned __int16)**result)
          break;
LABEL_21:
        result += 2;
        if (result == (char **)a2)
          return (char **)a2;
      }
      v12 = 0;
      while (v4 - 1 != v12)
      {
        v13 = (*result)[v12 + 1];
        v14 = *(unsigned __int16 *)&v3[2 * v12++ + 2] | 0x20;
        if (v14 != v13)
        {
          if (v12 < v4)
            goto LABEL_21;
          return result;
        }
      }
    }
    else
    {
      while ((unint64_t)result[1] >= 2)
      {
        result += 2;
        if (result == (char **)a2)
          return (char **)a2;
      }
    }
  }
  return result;
}

uint64_t WebCore::MediaStrategy::createNowPlayingManager@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0xB0);
  *(_BYTE *)(result + 136) = 0;
  *(_BYTE *)(result + 144) = 0;
  *(_BYTE *)(result + 160) = 0;
  *(_BYTE *)(result + 168) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1E3405BD0;
  *(_BYTE *)(result + 24) = 0;
  *a1 = result;
  return result;
}

uint64_t WebCore::MediaStrategy::resetMediaEngines(uint64_t this, void *a2)
{
  uint64_t v2;
  WTF *v4;
  uint64_t v5;
  int v6;

  v2 = this;
  if (__ldaxr(WebCore::mediaEngineVectorLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::mediaEngineVectorLock))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](WebCore::mediaEngineVectorLock);
LABEL_5:
  {
    if (dword_1ECE90EB0)
    {
      v4 = (WTF *)WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
      if (dword_1ECE90EB4)
      {
        v5 = 8 * dword_1ECE90EB4;
        do
        {
          this = *(_QWORD *)v4;
          *(_QWORD *)v4 = 0;
          if (this)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          v4 = (WTF *)((char *)v4 + 8);
          v5 -= 8;
        }
        while (v5);
        dword_1ECE90EB4 = 0;
        v4 = (WTF *)WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
      }
      if (v4)
      {
        WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines = 0;
        dword_1ECE90EB0 = 0;
        this = WTF::fastFree(v4, a2);
      }
    }
  }
  else
  {
    WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines = 0;
    *(_QWORD *)&dword_1ECE90EB0 = 0;
  }
  WebCore::haveMediaEnginesVector(void)::haveVector = 0;
  v6 = __ldxr(WebCore::mediaEngineVectorLock);
  if (v6 == 1)
  {
    if (!__stlxr(0, WebCore::mediaEngineVectorLock))
      goto LABEL_20;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)WebCore::mediaEngineVectorLock);
LABEL_20:
  *(_BYTE *)(v2 + 8) = 0;
  return this;
}

uint64_t WebCore::MediaStrategy::hasThreadSafeMediaSourceSupport(WebCore::MediaStrategy *this)
{
  return 0;
}

uint64_t WebCore::MediaStrategy::enableMockMediaSource(WebCore::MediaStrategy *this)
{
  WebCore::DeprecatedGlobalSettings::setAVFoundationEnabled(0);
  return WebCore::MockMediaPlayerMediaSource::registerMediaEngine((void (*)(_QWORD **))WebCore::addMediaEngine);
}

uint64_t WebCore::MediaStrategy::addMockMediaSourceEngine(WebCore::MediaStrategy *this)
{
  return WebCore::MockMediaPlayerMediaSource::registerMediaEngine((void (*)(_QWORD **))WebCore::addMediaEngine);
}

uint64_t WebCore::MediaStrategy::mockMediaSourceEnabled(WebCore::MediaStrategy *this)
{
  return *((unsigned __int8 *)this + 8);
}

void WebCore::NowPlayingManager::~NowPlayingManager(WebCore::NowPlayingManager *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E3405BD0;
  if (*((_BYTE *)this + 160))
  {
    v3 = (_DWORD *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v3)
    {
      if (v3[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[2];
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  if (*((_BYTE *)this + 136))
    WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::NowPlayingManager *)((char *)this + 24), a2);
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
}

{
  WTF *v2;
  void *v3;

  WebCore::NowPlayingManager::~NowPlayingManager(this, a2);
  WTF::fastFree(v2, v3);
}

_QWORD *WebCore::NowPlayingManager::didReceiveRemoteControlCommand(_QWORD *result)
{
  uint64_t v1;

  v1 = result[2];
  if (v1)
  {
    result = *(_QWORD **)(v1 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  return result;
}

uint64_t WebCore::NowPlayingManager::addClient(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = a2[1];
  if (result)
    goto LABEL_24;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2;
  v5 = (unsigned int *)a2[1];
  a2[1] = result;
  if (!v5)
    goto LABEL_24;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  result = a2[1];
  if (result)
  {
LABEL_24:
    do
      v8 = __ldaxr((unsigned int *)result);
    while (__stlxr(v8 + 1, (unsigned int *)result));
  }
  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = result;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      result = WTF::fastFree((WTF *)v9, a2);
    }
  }
  if (!*(_QWORD *)(a1 + 8))
  {
    {
      v12 = WebCore::remoteCommandListenerCreationFunction(void)::creationFunction;
      if (WebCore::remoteCommandListenerCreationFunction(void)::creationFunction)
      {
LABEL_17:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(&v15, v12, a1);
        v14 = v15;
        v15 = 0;
        result = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v14;
        if (result)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)result + 24))(result);
          result = v15;
          v15 = 0;
          if (result)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
        }
        return result;
      }
    }
    else
    {
      WebCore::remoteCommandListenerCreationFunction(void)::creationFunction = 0;
    }
    v12 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v12 = off_1E3405D98;
    v13 = WebCore::remoteCommandListenerCreationFunction(void)::creationFunction;
    WebCore::remoteCommandListenerCreationFunction(void)::creationFunction = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v12 = WebCore::remoteCommandListenerCreationFunction(void)::creationFunction;
    }
    goto LABEL_17;
  }
  return result;
}

_QWORD *WebCore::NowPlayingManager::ensureRemoteCommandListenerCreated(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  if (this[1])
    return this;
  v1 = this;
  {
    WebCore::remoteCommandListenerCreationFunction(void)::creationFunction = 0;
LABEL_4:
    v2 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v2 = off_1E3405D98;
    v3 = WebCore::remoteCommandListenerCreationFunction(void)::creationFunction;
    WebCore::remoteCommandListenerCreationFunction(void)::creationFunction = v2;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v2 = WebCore::remoteCommandListenerCreationFunction(void)::creationFunction;
    }
    goto LABEL_6;
  }
  v2 = WebCore::remoteCommandListenerCreationFunction(void)::creationFunction;
  if (!WebCore::remoteCommandListenerCreationFunction(void)::creationFunction)
    goto LABEL_4;
LABEL_6:
  (*(void (**)(_QWORD **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(&v5, v2, v1);
  v4 = v5;
  v5 = 0;
  this = (_QWORD *)v1[1];
  v1[1] = v4;
  if (this)
  {
    (*(void (**)(_QWORD *))(*this + 24))(this);
    this = v5;
    v5 = 0;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 24))(this);
  }
  return this;
}

uint64_t WebCore::NowPlayingManager::removeClient(uint64_t a1, void *a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  result = *(_QWORD *)(a1 + 16);
  if (!result || *(void **)(result + 8) != a2)
    return result;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (!v4)
  {
    *(_QWORD *)(a1 + 16) = 0;
    do
    {
LABEL_5:
      v5 = __ldaxr((unsigned int *)result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)result));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)result);
      WTF::fastFree((WTF *)result, a2);
    }
    goto LABEL_8;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    goto LABEL_5;
LABEL_8:
  if (*(_BYTE *)(a1 + 136))
  {
    WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::NowPlayingMetadata *)(a1 + 24), (WTF::StringImpl *)a2);
    *(_BYTE *)(a1 + 136) = 0;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *(_BYTE *)(a1 + 168) = 0;
  return result;
}

uint64_t WebCore::NowPlayingManager::clearNowPlayingInfo(WebCore::NowPlayingManager *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::NowPlayingManager *))(*(_QWORD *)this + 24))(this);
  *((_BYTE *)this + 168) = 0;
  return result;
}

WebCore *WebCore::NowPlayingManager::clearNowPlayingInfoPrivate(WebCore::NowPlayingManager *this)
{
  WebCore *result;
  _BOOL8 canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility;
  unsigned __int8 v3;
  uint64_t LocalOrigin;
  const __CFDictionary *v5;
  WebCore *v6;
  uint64_t v7;

  result = (WebCore *)WebCore::MediaRemoteLibrary((WebCore *)1);
  if (result)
  {
    canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility = WebCore::canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility(result);
    if (canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility)
    {
      LocalOrigin = WebCore::softLinkMediaRemoteMRMediaRemoteGetLocalOrigin((WebCore *)canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility);
      WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingVisibility(LocalOrigin, 3);
    }
    WebCore::softLinkMediaRemoteMRMediaRemoteSetCanBeNowPlayingApplication(0, v3);
    v6 = (WebCore *)WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingInfo(0, v5);
    v7 = WebCore::softLinkMediaRemoteMRMediaRemoteGetLocalOrigin(v6);
    return (WebCore *)WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingApplicationPlaybackStateForOrigin(v7, 3, MEMORY[0x1E0C80D38], &__block_literal_global_15_4);
  }
  return result;
}

uint64_t WebCore::NowPlayingManager::setNowPlayingInfo(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  __int128 v6;
  __int128 v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v4 = result;
  v5 = (WTF::StringImpl **)(result + 24);
  if (!*(_BYTE *)(result + 136))
    goto LABEL_13;
  result = WebCore::operator==(result + 24, a2, a3);
  if ((_DWORD)result
    && *(double *)(v4 + 88) == *(double *)(a2 + 64)
    && *(double *)(v4 + 96) == *(double *)(a2 + 72)
    && *(double *)(v4 + 104) == *(double *)(a2 + 80)
    && *(unsigned __int8 *)(v4 + 112) == *(unsigned __int8 *)(a2 + 88)
    && *(_QWORD *)(v4 + 120) == *(_QWORD *)(a2 + 96)
    && *(unsigned __int8 *)(v4 + 128) == *(unsigned __int8 *)(a2 + 104)
    && *(unsigned __int8 *)(v4 + 129) == *(unsigned __int8 *)(a2 + 105))
  {
    return 0;
  }
  if (*(_BYTE *)(v4 + 136))
  {
    result = (uint64_t)WebCore::NowPlayingMetadata::operator=(v5, (WTF::StringImpl *)a2);
    v6 = *(_OWORD *)(a2 + 90);
    v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v4 + 104) = v7;
    *(_OWORD *)(v4 + 114) = v6;
  }
  else
  {
LABEL_13:
    v8 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v8 += 2;
    *(_QWORD *)(v4 + 24) = v8;
    v9 = *(_DWORD **)(a2 + 8);
    if (v9)
      *v9 += 2;
    *(_QWORD *)(v4 + 32) = v9;
    v10 = *(_DWORD **)(a2 + 16);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(v4 + 40) = v10;
    v11 = *(_DWORD **)(a2 + 24);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(v4 + 48) = v11;
    *(_BYTE *)(v4 + 56) = 0;
    *(_BYTE *)(v4 + 80) = 0;
    if (*(_BYTE *)(a2 + 56))
    {
      v12 = *(_DWORD **)(a2 + 32);
      if (v12)
        *v12 += 2;
      *(_QWORD *)(v4 + 56) = v12;
      v13 = *(_DWORD **)(a2 + 40);
      if (v13)
        *v13 += 2;
      *(_QWORD *)(v4 + 64) = v13;
      v14 = *(_QWORD *)(a2 + 48);
      if (v14)
        ++*(_DWORD *)(v14 + 8);
      *(_QWORD *)(v4 + 72) = v14;
      *(_BYTE *)(v4 + 80) = 1;
    }
    v15 = *(_OWORD *)(a2 + 64);
    v16 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v4 + 114) = *(_OWORD *)(a2 + 90);
    *(_OWORD *)(v4 + 104) = v16;
    *(_OWORD *)(v4 + 88) = v15;
    *(_BYTE *)(v4 + 136) = 1;
  }
  if (*(_BYTE *)(a2 + 56))
  {
    if (*(_BYTE *)(v4 + 160))
    {
      result = WTF::equal(*(WTF **)(a2 + 32), *(const WTF::StringImpl **)(v4 + 144), a3);
      if ((result & 1) != 0)
      {
        if (!*(_BYTE *)(v4 + 136) || !*(_BYTE *)(v4 + 80))
          goto LABEL_64;
        result = *(_QWORD *)(v4 + 72);
        *(_QWORD *)(v4 + 72) = 0;
        if (!result)
          goto LABEL_58;
LABEL_55:
        if (*(_DWORD *)(result + 8) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 8);
        goto LABEL_58;
      }
      if (!*(_BYTE *)(a2 + 56))
        goto LABEL_64;
    }
    v18 = *(_DWORD **)(a2 + 32);
    if (v18)
      *v18 += 2;
    v19 = *(_QWORD *)(a2 + 48);
    if (v19)
      ++*(_DWORD *)(v19 + 8);
    if (!*(_BYTE *)(v4 + 160))
    {
      *(_QWORD *)(v4 + 144) = v18;
      *(_QWORD *)(v4 + 152) = v19;
      *(_BYTE *)(v4 + 160) = 1;
      goto LABEL_58;
    }
    v20 = *(WTF::StringImpl **)(v4 + 144);
    *(_QWORD *)(v4 + 144) = v18;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v20 -= 2;
    }
    result = *(_QWORD *)(v4 + 152);
    *(_QWORD *)(v4 + 152) = v19;
    if (result)
      goto LABEL_55;
  }
  else if (*(_BYTE *)(v4 + 160))
  {
    v17 = *(_DWORD **)(v4 + 152);
    *(_QWORD *)(v4 + 152) = 0;
    if (v17)
    {
      if (v17[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
      else
        --v17[2];
    }
    result = *(_QWORD *)(v4 + 144);
    *(_QWORD *)(v4 + 144) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v4 + 160) = 0;
  }
LABEL_58:
  if (*(_BYTE *)(v4 + 136))
  {
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 32))(v4, v5);
    result = 1;
    *(_BYTE *)(v4 + 168) = 1;
    return result;
  }
LABEL_64:
  __break(1u);
  return result;
}

void WebCore::NowPlayingManager::setNowPlayingInfoPrivate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  __int128 v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18[7];
  char v19;
  __int128 v20;
  _OWORD v21[2];

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    if (*(unsigned __int8 *)(v4 + 40) != v5)
    {
      *(_BYTE *)(v4 + 40) = v5;
      if (!*(_BYTE *)(v4 + 32))
      {
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v6 = off_1E3405DC0;
        v6[1] = v4;
        v18[0] = (uint64_t)v6;
        WebCore::MainThreadDeferrableTask::scheduleTask(v4 + 24, v18);
        v7 = v18[0];
        v18[0] = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  if (*(_BYTE *)(a2 + 56))
    v8 = *(_QWORD *)(a2 + 48) == 0;
  else
    v8 = 0;
  if (v8)
  {
    v9 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v9 += 2;
    v18[0] = (uint64_t)v9;
    v10 = *(_DWORD **)(a2 + 8);
    if (v10)
      *v10 += 2;
    v18[1] = (uint64_t)v10;
    v11 = *(_DWORD **)(a2 + 16);
    if (v11)
      *v11 += 2;
    v18[2] = (uint64_t)v11;
    v12 = *(_DWORD **)(a2 + 24);
    if (v12)
      *v12 += 2;
    v18[3] = (uint64_t)v12;
    v13 = *(_DWORD **)(a2 + 32);
    if (v13)
      *v13 += 2;
    v18[4] = (uint64_t)v13;
    v14 = *(_DWORD **)(a2 + 40);
    if (v14)
      *v14 += 2;
    v18[5] = (uint64_t)v14;
    v19 = 1;
    v15 = *(_OWORD *)(a2 + 80);
    v20 = *(_OWORD *)(a2 + 64);
    v21[0] = v15;
    *(_OWORD *)((char *)v21 + 10) = *(_OWORD *)(a2 + 90);
    if (*(_BYTE *)(a1 + 160))
    {
      v16 = *(_QWORD *)(a1 + 152);
      if (v16)
        ++*(_DWORD *)(v16 + 8);
      v18[6] = v16;
      WebCore::MediaSessionManagerCocoa::setNowPlayingInfo(*(_BYTE *)(a1 + 168) == 0, (uint64_t)v18);
      WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::NowPlayingMetadata *)v18, v17);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    WebCore::MediaSessionManagerCocoa::setNowPlayingInfo(*(_BYTE *)(a1 + 168) == 0, a2);
  }
}

_QWORD *WebCore::NowPlayingManager::setSupportsSeeking(_QWORD *this, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = this[1];
  if (v2)
  {
    if (*(unsigned __int8 *)(v2 + 40) != a2)
    {
      *(_BYTE *)(v2 + 40) = a2;
      if (!*(_BYTE *)(v2 + 32))
      {
        v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v3 = off_1E3405DC0;
        v3[1] = v2;
        v4 = v3;
        WebCore::MainThreadDeferrableTask::scheduleTask(v2 + 24, (uint64_t *)&v4);
        this = v4;
        v4 = 0;
        if (this)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
      }
    }
  }
  return this;
}

uint64_t *WebCore::NowPlayingManager::addSupportedCommand(uint64_t *result, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4[3];
  char v5;

  v2 = result[1];
  if (v2)
  {
    v5 = a2;
    result = WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add((uint64_t *)(v2 + 16), &v5, (uint64_t)v4);
    if (!*(_BYTE *)(v2 + 32))
    {
      v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v3 = off_1E3405DC0;
      v3[1] = v2;
      v4[0] = (uint64_t)v3;
      WebCore::MainThreadDeferrableTask::scheduleTask(v2 + 24, v4);
      result = (uint64_t *)v4[0];
      v4[0] = 0;
      if (result)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t *WebCore::NowPlayingManager::removeSupportedCommand(uint64_t a1, int a2)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 8);
  if (result)
    return WebCore::RemoteCommandListener::removeSupportedCommand((uint64_t)result, a2);
  return result;
}

uint64_t *WebCore::NowPlayingManager::supportedCommands@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = this[1];
  if (v2)
    return WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::HashTable(a2, (unsigned __int8 **)(v2 + 16));
  *a2 = 0;
  return this;
}

_QWORD *WebCore::NowPlayingManager::setSupportedRemoteCommands(_QWORD *result, unsigned __int8 **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = result[1];
  if (v2)
  {
    result = WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::HashTable((uint64_t *)&v6, a2);
    v4 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = v6;
    v6 = (_QWORD *)v4;
    if (v4)
      result = (_QWORD *)WTF::fastFree((WTF *)(v4 - 16), v3);
    if (!*(_BYTE *)(v2 + 32))
    {
      v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v5 = off_1E3405DC0;
      v5[1] = v2;
      v6 = v5;
      WebCore::MainThreadDeferrableTask::scheduleTask(v2 + 24, (uint64_t *)&v6);
      result = v6;
      v6 = 0;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::NowPlayingManager::updateSupportedCommands(WebCore::NowPlayingManager *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t WebCore::Pasteboard::canExposeURLToDOMWhenPasteboardContainsFiles(WebCore::Pasteboard *this, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[5];
  WTF::StringImpl *v9;
  char v10;

  v8[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v8);
  MEMORY[0x19AEA52F8](&v9, v8, this, 0);
  v4 = v8[0];
  v8[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  if ((v10 & 2) != 0 || (WTF::URL::protocolIs() & 1) != 0)
    v5 = 1;
  else
    v5 = WTF::URL::protocolIs();
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v5;
}

WebCore::PasteboardCustomData::Entry *WebCore::PasteboardCustomData::Entry::Entry(WebCore::PasteboardCustomData::Entry *this, const WebCore::PasteboardCustomData::Entry *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  unsigned int *v5;
  int v6;
  unsigned int v7;
  uint64_t v9;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *(_QWORD *)this = v3;
  v4 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v4)
    *v4 += 2;
  *((_QWORD *)this + 1) = v4;
  v5 = (unsigned int *)*((_QWORD *)a2 + 2);
  v6 = *((_DWORD *)a2 + 6);
  if (v6 == 1)
  {
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 + 1, v5));
    v9 = 0;
    *((_QWORD *)this + 2) = v5;
    *((_DWORD *)this + 6) = 1;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v9, a2);
  }
  else
  {
    if (v6)
    {
      *((_QWORD *)this + 2) = 0;
    }
    else
    {
      if (v5)
        *v5 += 2;
      *((_QWORD *)this + 2) = v5;
    }
    *((_DWORD *)this + 6) = 0;
  }
  return this;
}

{
  _DWORD *v3;
  _DWORD *v4;
  unsigned int *v5;
  int v6;
  unsigned int v7;
  uint64_t v9;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *(_QWORD *)this = v3;
  v4 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v4)
    *v4 += 2;
  *((_QWORD *)this + 1) = v4;
  v5 = (unsigned int *)*((_QWORD *)a2 + 2);
  v6 = *((_DWORD *)a2 + 6);
  if (v6 == 1)
  {
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 + 1, v5));
    v9 = 0;
    *((_QWORD *)this + 2) = v5;
    *((_DWORD *)this + 6) = 1;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v9, a2);
  }
  else
  {
    if (v6)
    {
      *((_QWORD *)this + 2) = 0;
    }
    else
    {
      if (v5)
        *v5 += 2;
      *((_QWORD *)this + 2) = v5;
    }
    *((_DWORD *)this + 6) = 0;
  }
  return this;
}

uint64_t WebCore::PasteboardCustomData::Entry::Entry(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t WebCore::PasteboardCustomData::Entry::Entry(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  v4 = a2[1];
  a2[1] = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 24) = -1;
  v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1E3405C08[v5])(&v7, a1 + 16, a2 + 2);
    *(_DWORD *)(a1 + 24) = v5;
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  v4 = a2[1];
  a2[1] = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 24) = -1;
  v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1E3405C08[v5])(&v7, a1 + 16, a2 + 2);
    *(_DWORD *)(a1 + 24) = v5;
  }
  return a1;
}

uint64_t WebCore::PasteboardCustomData::Entry::Entry(uint64_t a1, _DWORD **a2, _DWORD **a3, uint64_t a4)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  char v9;

  v5 = *a2;
  if (*a2)
    *v5 += 2;
  *(_QWORD *)a1 = v5;
  v6 = *a3;
  if (*a3)
    *v6 += 2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 24) = -1;
  v7 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *))off_1E3405C18[v7])(&v9);
    *(_DWORD *)(a1 + 24) = v7;
  }
  return a1;
}

{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  char v9;

  v5 = *a2;
  if (*a2)
    *v5 += 2;
  *(_QWORD *)a1 = v5;
  v6 = *a3;
  if (*a3)
    *v6 += 2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 24) = -1;
  v7 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *))off_1E3405C18[v7])(&v9);
    *(_DWORD *)(a1 + 24) = v7;
  }
  return a1;
}

WTF::StringImpl **WebCore::PasteboardCustomData::Entry::operator=(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v13;
  int v14;
  WTF::StringImpl **v15;

  v4 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v4 += 2;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(a2 + 8);
  if (v6)
    *(_DWORD *)v6 += 2;
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(unsigned int **)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 24);
  if (v9 == 1)
  {
    do
      v11 = __ldaxr(v8);
    while (__stlxr(v11 + 1, v8));
    v15 = 0;
    v13 = v8;
    v10 = 1;
    v14 = 1;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v15, (void *)a2);
  }
  else
  {
    if (v9)
    {
      v10 = 0;
      v13 = 0;
    }
    else
    {
      if (v8)
        *v8 += 2;
      v10 = 0;
      v13 = v8;
    }
    v14 = 0;
  }
  v15 = a1 + 2;
  ((void (*)(WTF::StringImpl ***))off_1E3405C28[v10])(&v15);
  ((void (*)(WTF::StringImpl ***, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v14])(&v15, &v13);
  return a1;
}

uint64_t WebCore::PasteboardCustomData::Entry::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v7 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(unsigned int *)(a1 + 24);
  v9 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v8 == -1)
  {
    if ((_DWORD)v9 == -1)
      return a1;
LABEL_11:
    v11 = a1 + 16;
    ((void (*)(uint64_t *))off_1E3405C28[v9])(&v11);
    return a1;
  }
  if ((_DWORD)v9 != -1)
    goto LABEL_11;
  ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v8])(&v12, a1 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

_QWORD *WebCore::PasteboardCustomData::PasteboardCustomData(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

WebCore::PasteboardCustomData *WebCore::PasteboardCustomData::PasteboardCustomData(WebCore::PasteboardCustomData *this, const WebCore::PasteboardCustomData *a2)
{
  _DWORD *v3;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *(_QWORD *)this = v3;
  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 8, (uint64_t *)a2 + 1);
  return this;
}

{
  _DWORD *v3;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *(_QWORD *)this = v3;
  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 8, (uint64_t *)a2 + 1);
  return this;
}

uint64_t WebCore::PasteboardCustomData::PasteboardCustomData(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(result + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(result + 16) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(result + 20) = v3;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(result + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(result + 16) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(result + 20) = v3;
  return result;
}

void WebCore::PasteboardCustomData::~PasteboardCustomData(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 1), a2);
  v4 = *this;
  *this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 1), a2);
  v4 = *this;
  *this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
}

uint64_t WebCore::PasteboardCustomData::PasteboardCustomData(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v3;
  v4 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(result + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(result + 20) = v4;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v3;
  v4 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(result + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(result + 20) = v4;
  return result;
}

void WebCore::PasteboardCustomData::createSharedBuffer(WebCore::PasteboardCustomData *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  _DWORD **v19;
  uint64_t v20;
  _QWORD *v21;
  _DWORD *v22;
  WTF *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  WTF *v40;
  unsigned int v41;
  uint64_t v42[3];

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v4 = v3;
  WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&v40);
  MEMORY[0x19AEA46E0](&v40, 1);
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  v39 = 0;
  v5 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v5)
  {
    v6 = *(WTF::StringImpl ***)(v2 + 8);
    v7 = &v6[4 * v5];
    do
    {
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::String const&>((uint64_t *)&v39, v6, (const WTF::StringImpl *)(v6 + 1), (uint64_t)v42);
      v6 += 4;
    }
    while (v6 != v7);
  }
  WTF::Persistence::Encoder::operator<<();
  v9 = (uint64_t)v39;
  if (!v39)
  {
    v10 = 0;
    v11 = 0;
LABEL_6:
    v12 = &v39[2 * v11];
    goto LABEL_7;
  }
  v11 = *((unsigned int *)v39 - 1);
  v12 = &v39[2 * v11];
  if (!*((_DWORD *)v39 - 3))
  {
    v10 = &v39[2 * v11];
    goto LABEL_6;
  }
  v10 = v39;
  if ((_DWORD)v11)
  {
    v34 = 16 * v11;
    v10 = v39;
    while ((unint64_t)(*v10 + 1) <= 1)
    {
      v10 += 2;
      v34 -= 16;
      if (!v34)
      {
        v10 = v12;
        break;
      }
    }
  }
LABEL_7:
  if (v39)
    v13 = &v39[2 * *((unsigned int *)v39 - 1)];
  else
    v13 = 0;
  if (v13 != v10)
  {
    do
    {
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      v14 = v10 + 2;
      v10 = v12;
      if (v14 != v12)
      {
        v10 = v14;
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 2;
          if (v10 == v12)
          {
            v10 = v12;
            break;
          }
        }
      }
    }
    while (v10 != v13);
    v9 = (uint64_t)v39;
  }
  if (v9)
  {
    v35 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v35)
    {
      v36 = (WTF::StringImpl **)v9;
      do
      {
        v37 = *v36;
        if (*v36 != (WTF::StringImpl *)-1)
        {
          v38 = v36[1];
          v36[1] = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
            {
              WTF::StringImpl::destroy(v38, v8);
              v37 = *v36;
            }
            else
            {
              *(_DWORD *)v38 -= 2;
            }
          }
          *v36 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v8);
            else
              *(_DWORD *)v37 -= 2;
          }
        }
        v36 += 2;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree((WTF *)(v9 - 16), v8);
  }
  v15 = *(unsigned int *)(v2 + 20);
  if (!(_DWORD)v15)
  {
    WTF::Persistence::Encoder::operator<<();
LABEL_36:
    v29 = v40;
    v30 = (WTF *)v41;
    v31 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v31 = 1;
    *(_QWORD *)(v31 + 8) = v31 + 24;
    *(_QWORD *)(v31 + 16) = 1;
    *(_BYTE *)(v31 + 40) = 0;
    *(_QWORD *)(v31 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v31, v29, v30);
    v42[0] = v31;
    v32 = WTF::fastMalloc((WTF *)0x38);
    *v4 = WebCore::SharedBuffer::SharedBuffer(v32, v42);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v42, v33);
    WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&v40);
    return;
  }
  if (!(v15 >> 29))
  {
    v16 = WTF::fastMalloc((WTF *)(8 * v15));
    v17 = (WTF *)v16;
    v18 = *(unsigned int *)(v2 + 20);
    if ((_DWORD)v18)
    {
      v19 = *(_DWORD ***)(v2 + 8);
      v20 = *(unsigned int *)(v2 + 20);
      v21 = (_QWORD *)v16;
      do
      {
        v22 = *v19;
        if (*v19)
          *v22 += 2;
        *v21++ = v22;
        v19 += 4;
        --v20;
      }
      while (v20);
      WTF::Persistence::Encoder::operator<<();
      v23 = v17;
      v24 = v18;
      do
      {
        WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
        v23 = (WTF *)((char *)v23 + 8);
        --v24;
      }
      while (v24);
      v26 = 8 * v18;
      v27 = (WTF::StringImpl **)v17;
      do
      {
        v28 = *v27;
        *v27 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v25);
          else
            *(_DWORD *)v28 -= 2;
        }
        ++v27;
        v26 -= 8;
      }
      while (v26);
    }
    else
    {
      WTF::Persistence::Encoder::operator<<();
    }
    WTF::fastFree(v17, v25);
    goto LABEL_36;
  }
  __break(0xC471u);
}

WTF::StringImpl *WebCore::PasteboardCustomData::fromPersistenceDecoder@<X0>(_QWORD *a1@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  int v4;
  char v5;
  WTF::StringImpl *v6[2];
  uint64_t v7;

  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  LOBYTE(v4) = 0;
  v5 = 0;
  WTF::Persistence::Decoder::operator>>();
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = v6[0];
  if (v6[0])
  {
    if (*(_DWORD *)v6[0] == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v6[0], v2);
    else
      *(_DWORD *)v6[0] -= 2;
  }
  return result;
}

void WebCore::PasteboardCustomData::fromSharedBuffer(WebCore::PasteboardCustomData *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::PasteboardCustomData *v6;
  const WTF::StringImpl **v7;
  const WTF::StringImpl *v8;
  _QWORD v9[15];
  char v10;

  if (!*((_DWORD *)this + 5))
    goto LABEL_4;
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v5 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v5 != -1)
  {
    v9[0] = &v10;
    ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v5])(v9, v4 + 8);
LABEL_4:
    WTF::Persistence::Decoder::Decoder();
    WebCore::PasteboardCustomData::fromPersistenceDecoder(a2);
    WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v9);
    return;
  }
  v6 = (WebCore::PasteboardCustomData *)std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::PasteboardCustomData::addOrMoveEntryToEnd(v6, v7, v8);
}

uint64_t WebCore::PasteboardCustomData::addOrMoveEntryToEnd(WebCore::PasteboardCustomData *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  int *v16;
  unsigned int *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;

  v5 = (uint64_t *)((char *)this + 8);
  LODWORD(v6) = *((_DWORD *)this + 5);
  if (!(_DWORD)v6)
  {
LABEL_5:
    v10 = *a2;
    if (*a2)
      *(_DWORD *)v10 += 2;
    v38 = 0;
    v39 = 0;
    v37 = v10;
    v40 = 0;
    goto LABEL_30;
  }
  v7 = 0;
  v8 = 0;
  while ((WTF::equal(*(WTF **)(*v5 + v7), *a2, a3) & 1) == 0)
  {
    ++v8;
    v6 = *((unsigned int *)this + 5);
    v7 += 32;
    if (v8 >= v6)
      goto LABEL_5;
  }
  if (v8 >= *((unsigned int *)this + 5))
  {
    __break(0xC471u);
LABEL_51:
    JUMPOUT(0x1960D62D8);
  }
  v11 = *v5;
  v12 = (WTF::StringImpl **)(*v5 + v7);
  v13 = *v12;
  if (*v12)
    *(_DWORD *)v13 += 2;
  v37 = v13;
  v14 = v12[1];
  if (v14)
    *(_DWORD *)v14 += 2;
  v38 = v14;
  v16 = (int *)(v11 + v7 + 24);
  v15 = *v16;
  v17 = *(unsigned int **)(v11 + v7 + 16);
  if (*v16 == 1)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v41 = 0;
    v39 = v17;
    v40 = 1;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v41, v9);
    v11 = *v5;
    v15 = *(_DWORD *)(*v5 + v7 + 24);
  }
  else
  {
    if (!v15)
    {
      if (v17)
        *v17 += 2;
      v15 = 0;
      v39 = v17;
      v40 = 0;
      goto LABEL_22;
    }
    v39 = 0;
    v40 = 0;
  }
  v12 = (WTF::StringImpl **)(v11 + v7);
  v16 = (int *)(v11 + v7 + 24);
  if (v15 != -1)
LABEL_22:
    ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v15])(&v41, v11 + v7 + 16);
  *v16 = -1;
  v19 = *(WTF::StringImpl **)(v11 + v7 + 8);
  *(_QWORD *)(v11 + v7 + 8) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *v12;
  *v12 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v20 -= 2;
  }
  WTF::VectorMover<false,WebCore::PasteboardCustomData::Entry>::move((WTF::StringImpl *)(v12 + 4), (WTF::StringImpl *)(*((_QWORD *)this + 1) + 32 * *((unsigned int *)this + 5)), (uint64_t)v12);
  LODWORD(v6) = *((_DWORD *)this + 5) - 1;
  *((_DWORD *)this + 5) = v6;
LABEL_30:
  if ((_DWORD)v6 == *((_DWORD *)this + 4))
  {
    v21 = WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, (unint64_t)&v37);
    v22 = *((_QWORD *)this + 1) + 32 * *((unsigned int *)this + 5);
    v23 = *(_QWORD *)v21;
    *(_QWORD *)v21 = 0;
    *(_QWORD *)v22 = v23;
    v24 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = 0;
    *(_BYTE *)(v22 + 16) = 0;
    v25 = (_DWORD *)(v22 + 16);
    *((_QWORD *)v25 - 1) = v24;
    v25[2] = -1;
    v26 = v25 + 2;
    v27 = *((unsigned int *)v21 + 6);
    if ((_DWORD)v27 == -1)
      goto LABEL_35;
  }
  else
  {
    v28 = *v5 + 32 * v6;
    v29 = v37;
    v37 = 0;
    *(_QWORD *)v28 = v29;
    v30 = v38;
    v38 = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v25 = (_DWORD *)(v28 + 16);
    *((_QWORD *)v25 - 1) = v30;
    v25[2] = -1;
    v26 = v25 + 2;
    v27 = v40;
    if (v40 == -1)
      goto LABEL_35;
  }
  ((void (*)(uint64_t *))off_1E3405C08[v27])(&v41);
  *v26 = v27;
LABEL_35:
  v31 = *((_DWORD *)this + 5);
  v32 = (v31 + 1);
  *((_DWORD *)this + 5) = v32;
  if (v31 == -1)
  {
    __break(0xC471u);
    goto LABEL_51;
  }
  v33 = *v5;
  if (v40 != -1)
    ((void (*)(uint64_t *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v40])(&v41, &v39);
  v40 = -1;
  v34 = v38;
  v38 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v25);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v37;
  v37 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v25);
    else
      *(_DWORD *)v35 -= 2;
  }
  return v33 + 32 * v32 - 32;
}

uint64_t WebCore::PasteboardCustomData::clear(uint64_t this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;

  if (*(_DWORD *)(this + 20))
  {
    v4 = this;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      this = WTF::equal(*(WTF **)(*(_QWORD *)(v4 + 8) + v5), *a2, a3);
      if ((_DWORD)this)
        break;
      ++v6;
      v5 += 32;
      if (v6 >= *(unsigned int *)(v4 + 20))
        return this;
    }
    v8 = *(_QWORD *)(v4 + 8);
    v9 = v8 + v5;
    v10 = *(unsigned int *)(v8 + v5 + 24);
    if ((_DWORD)v10 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v10])(&v13, v9 + 16);
    *(_DWORD *)(v9 + 24) = -1;
    v11 = *(WTF::StringImpl **)(v9 + 8);
    *(_QWORD *)(v9 + 8) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = *(WTF::StringImpl **)v9;
    *(_QWORD *)v9 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v7);
      else
        *(_DWORD *)v12 -= 2;
    }
    this = (uint64_t)WTF::VectorMover<false,WebCore::PasteboardCustomData::Entry>::moveOverlapping((WTF::StringImpl *)(v8 + v5 + 32), (WTF::StringImpl *)(*(_QWORD *)(v4 + 8) + 32 * *(unsigned int *)(v4 + 20)), v8 + v5);
    --*(_DWORD *)(v4 + 20);
  }
  return this;
}

uint64_t WebCore::PasteboardCustomData::operator=(uint64_t a1, unsigned int *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 8), a2 + 2);
  return a1;
}

unsigned int *WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int *result;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unsigned int *v27;
  int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;

  if (a2 == a1)
    return a1;
  v4 = a1[3];
  v5 = a2[3];
  if (v4 > v5)
  {
    v6 = 32 * v4 - 32 * v5;
    v7 = *(_QWORD *)a1 + 32 * v5 + 16;
    do
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v8])(&v30, v7);
      *(_DWORD *)(v7 + 8) = -1;
      v9 = *(WTF::StringImpl **)(v7 - 8);
      *(_QWORD *)(v7 - 8) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = *(WTF::StringImpl **)(v7 - 16);
      *(_QWORD *)(v7 - 16) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v7 += 32;
      v6 -= 32;
    }
    while (v6);
    a1[3] = v5;
    goto LABEL_24;
  }
  if (v5 <= a1[2]
    || (result = WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0), v12 = a2[3], a1[2] >= v12))
  {
LABEL_23:
    v5 = a1[3];
LABEL_24:
    v16 = *(_QWORD *)a2;
    v17 = *(WTF::StringImpl ***)a1;
    if ((_DWORD)v5)
    {
      v18 = 32 * v5;
      do
      {
        v19 = WebCore::PasteboardCustomData::Entry::operator=(v17, v16);
        v16 += 32;
        v17 = v19 + 4;
        v18 -= 32;
      }
      while (v18);
      v16 = *(_QWORD *)a2;
      v20 = a1[3];
      v17 = *(WTF::StringImpl ***)a1;
    }
    else
    {
      v20 = 0;
    }
    v21 = a2[3];
    if (v20 != (_DWORD)v21)
    {
      v22 = v16 + 32 * v21;
      v23 = &v17[4 * v20];
      v24 = v16 + 32 * v20;
      do
      {
        v25 = *(WTF::StringImpl **)v24;
        if (*(_QWORD *)v24)
          *(_DWORD *)v25 += 2;
        *v23 = v25;
        v26 = *(WTF::StringImpl **)(v24 + 8);
        if (v26)
          *(_DWORD *)v26 += 2;
        v23[1] = v26;
        v27 = *(unsigned int **)(v24 + 16);
        v28 = *(_DWORD *)(v24 + 24);
        if (v28 == 1)
        {
          do
            v29 = __ldaxr(v27);
          while (__stlxr(v29 + 1, v27));
          v31 = 0;
          v23[2] = (WTF::StringImpl *)v27;
          *((_DWORD *)v23 + 6) = 1;
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v31, a2);
        }
        else
        {
          if (v28)
          {
            v23[2] = 0;
          }
          else
          {
            if (v27)
              *v27 += 2;
            v23[2] = (WTF::StringImpl *)v27;
          }
          *((_DWORD *)v23 + 6) = 0;
        }
        v23 += 4;
        v24 += 32;
      }
      while (v24 != v22);
      v20 = a2[3];
    }
    a1[3] = v20;
    return a1;
  }
  if (!(v12 >> 27))
  {
    v13 = *(WTF::StringImpl **)a1;
    v14 = (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * a1[3]);
    v15 = WTF::fastMalloc((WTF *)(32 * v12));
    a1[2] = v12;
    *(_QWORD *)a1 = v15;
    WTF::VectorMover<false,WebCore::PasteboardCustomData::Entry>::move(v13, v14, v15);
    if (v13)
    {
      if (*(WTF::StringImpl **)a1 == v13)
      {
        *(_QWORD *)a1 = 0;
        a1[2] = 0;
      }
      WTF::fastFree(v13, a2);
    }
    goto LABEL_23;
  }
  __break(0xC471u);
  return result;
}

_BYTE *WebCore::PasteboardWriterData::PasteboardWriterData(_BYTE *this)
{
  *this = 0;
  this[16] = 0;
  this[24] = 0;
  this[72] = 0;
  this[80] = 0;
  this[160] = 0;
  return this;
}

{
  *this = 0;
  this[16] = 0;
  this[24] = 0;
  this[72] = 0;
  this[80] = 0;
  this[160] = 0;
  return this;
}

void WebCore::PasteboardWriterData::~PasteboardWriterData(WebCore::PasteboardWriterData *this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*((_BYTE *)this + 160))
    WebCore::PasteboardWriterData::WebContent::~WebContent((WebCore::PasteboardWriterData *)((char *)this + 80), a2);
  if (*((_BYTE *)this + 72))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  if (*((_BYTE *)this + 16))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
}

void WebCore::PasteboardWriterData::WebContent::~WebContent(WebCore::PasteboardWriterData::WebContent *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  uint64_t v53;
  WTF *v54;
  WTF *v56;
  WTF *v58;
  WTF *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;

  v3 = *((unsigned int *)this + 19);
  if ((_DWORD)v3)
  {
    v4 = *((_QWORD *)this + 8);
    v5 = 16 * v3;
    do
    {
      v4 = std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair(v4, a2)+ 16;
      v5 -= 16;
    }
    while (v5);
  }
  v6 = (WTF *)*((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v22 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v22)
      {
        v23 = *(_QWORD *)(v9 + 8);
        v24 = v23 + 16 * v22;
        do
        {
          v25 = *(unsigned int **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v70 = v24;
              v74 = v23;
              v66 = v9;
              atomic_store(1u, v25);
              v28 = v25;
              v29 = v25[6];
              if ((_DWORD)v29 != -1)
                ((void (*)(char *, unsigned int *))off_1E3405C38[v29])(&v78, v25 + 2);
              v28[6] = -1;
              WTF::fastFree((WTF *)v28, a2);
              v9 = v66;
              v24 = v70;
              v23 = v74;
            }
          }
          v23 += 16;
        }
        while (v23 != v24);
      }
      v54 = *(WTF **)(v9 + 8);
      if ((WTF *)(v9 + 24) != v54 && v54 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        v62 = v9;
        WTF::fastFree(v54, a2);
        v9 = v62;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v30 = *(unsigned int *)(v12 + 20);
      if ((_DWORD)v30)
      {
        v31 = *(_QWORD *)(v12 + 8);
        v32 = v31 + 16 * v30;
        do
        {
          v33 = *(unsigned int **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
          {
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              v71 = v32;
              v75 = v31;
              v67 = v12;
              atomic_store(1u, v33);
              v36 = v33;
              v37 = v33[6];
              if ((_DWORD)v37 != -1)
                ((void (*)(char *, unsigned int *))off_1E3405C38[v37])(&v79, v33 + 2);
              v36[6] = -1;
              WTF::fastFree((WTF *)v36, a2);
              v12 = v67;
              v32 = v71;
              v31 = v75;
            }
          }
          v31 += 16;
        }
        while (v31 != v32);
      }
      v56 = *(WTF **)(v12 + 8);
      if ((WTF *)(v12 + 24) != v56 && v56 != 0)
      {
        *(_QWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 16) = 0;
        v63 = v12;
        WTF::fastFree(v56, a2);
        v12 = v63;
      }
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  v15 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v15));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v15);
      v38 = *(unsigned int *)(v15 + 20);
      if ((_DWORD)v38)
      {
        v39 = *(_QWORD *)(v15 + 8);
        v40 = v39 + 16 * v38;
        do
        {
          v41 = *(unsigned int **)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          if (v41)
          {
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              v72 = v40;
              v76 = v39;
              v68 = v15;
              atomic_store(1u, v41);
              v44 = v41;
              v45 = v41[6];
              if ((_DWORD)v45 != -1)
                ((void (*)(char *, unsigned int *))off_1E3405C38[v45])(&v80, v41 + 2);
              v44[6] = -1;
              WTF::fastFree((WTF *)v44, a2);
              v15 = v68;
              v40 = v72;
              v39 = v76;
            }
          }
          v39 += 16;
        }
        while (v39 != v40);
      }
      v58 = *(WTF **)(v15 + 8);
      if ((WTF *)(v15 + 24) != v58 && v58 != 0)
      {
        *(_QWORD *)(v15 + 8) = 0;
        *(_DWORD *)(v15 + 16) = 0;
        v64 = v15;
        WTF::fastFree(v58, a2);
        v15 = v64;
      }
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  v18 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v18));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v18);
      v46 = *(unsigned int *)(v18 + 20);
      if ((_DWORD)v46)
      {
        v47 = *(_QWORD *)(v18 + 8);
        v48 = v47 + 16 * v46;
        do
        {
          v49 = *(unsigned int **)(v47 + 8);
          *(_QWORD *)(v47 + 8) = 0;
          if (v49)
          {
            do
            {
              v50 = __ldaxr(v49);
              v51 = v50 - 1;
            }
            while (__stlxr(v51, v49));
            if (!v51)
            {
              v73 = v48;
              v77 = v47;
              v69 = v18;
              atomic_store(1u, v49);
              v52 = v49;
              v53 = v49[6];
              if ((_DWORD)v53 != -1)
                ((void (*)(char *, unsigned int *))off_1E3405C38[v53])(&v81, v49 + 2);
              v52[6] = -1;
              WTF::fastFree((WTF *)v52, a2);
              v18 = v69;
              v48 = v73;
              v47 = v77;
            }
          }
          v47 += 16;
        }
        while (v47 != v48);
      }
      v60 = *(WTF **)(v18 + 8);
      if ((WTF *)(v18 + 24) != v60 && v60 != 0)
      {
        *(_QWORD *)(v18 + 8) = 0;
        *(_DWORD *)(v18 + 16) = 0;
        v65 = v18;
        WTF::fastFree(v60, a2);
        v18 = v65;
      }
      WTF::fastFree((WTF *)v18, a2);
    }
  }
  v21 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v21 -= 2;
  }
}

BOOL WebCore::PasteboardWriterData::isEmpty(WebCore::PasteboardWriterData *this)
{
  return !*((_BYTE *)this + 16) && !*((_BYTE *)this + 72) && *((_BYTE *)this + 160) == 0;
}

uint64_t std::optional<WebCore::PasteboardWriterData::URLData>::operator=[abi:sn180100]<WebCore::PasteboardWriterData::URLData,void>(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  v4 = *(unsigned __int8 *)(a1 + 48);
  v5 = *a2;
  *a2 = 0;
  if (v4)
  {
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
    v7 = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v7 & 0xFFFFFFFE;
    v8 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((v7 >> 1) & 1));
    *(_DWORD *)(a1 + 8) = v8;
    v9 = v8 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
    *(_DWORD *)(a1 + 8) = v9;
    v10 = v9 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
    *(_DWORD *)(a1 + 8) = v10;
    *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v10 & 0x3F;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
    *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
    v11 = a2[5];
    a2[5] = 0;
    v12 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    *(_QWORD *)a1 = v5;
    v13 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
    *(_DWORD *)(a1 + 8) = v13;
    v14 = v13 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
    *(_DWORD *)(a1 + 8) = v14;
    v15 = v14 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
    *(_DWORD *)(a1 + 8) = v15;
    v16 = v15 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
    *(_DWORD *)(a1 + 8) = v16;
    *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v16 & 0x3F;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
    *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 2) &= ~1u;
    v17 = a2[5];
    a2[5] = 0;
    *(_QWORD *)(a1 + 40) = v17;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

uint64_t WebCore::PlatformKeyboardEvent::currentCapsLockState(WebCore::PlatformKeyboardEvent *this)
{
  return (WebCore::PlatformKeyboardEvent::currentStateOfModifierKeys(this) >> 4) & 1;
}

uint64_t WebCore::PlatformKeyboardEvent::getCurrentModifierState(WebCore::PlatformKeyboardEvent *this, BOOL *a2, BOOL *a3, BOOL *a4, BOOL *a5)
{
  uint64_t result;

  result = WebCore::PlatformKeyboardEvent::currentStateOfModifierKeys(this);
  *(_BYTE *)this = (result & 8) != 0;
  *a2 = (result & 2) != 0;
  *a3 = result & 1;
  *a4 = (result & 4) != 0;
  return result;
}

void WebCore::MainThreadSharedTimer::~MainThreadSharedTimer(WebCore::MainThreadSharedTimer *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::MainThreadSharedTimer::~MainThreadSharedTimer(WebCore::MainThreadSharedTimer *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::fastFree(this, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_3RefIN7WebCore12SharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_3RefIN7WebCore12SharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_3RefIN7WebCore12SharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_3RefIN7WebCore12SharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v3;
  unsigned int v4;

  v3 = *a3;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *a2 = v3;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_3RefIN7WebCore12SharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSW_EEEDcSO_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_3RefIN7WebCore12SharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *result;
  v5 = *(unsigned int *)(*result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      *a3 = 0;
      v7 = *a2;
      *a2 = v6;
      v9 = v7;
      return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v9, a2);
    }
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v10, v4);
  }
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)v4 = v8;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

uint64_t WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  char v11;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    v5 = *(_QWORD *)a1 + 16;
    do
    {
      v6 = *(unsigned int *)(v5 + 8);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v6])(&v11, v5);
      *(_DWORD *)(v5 + 8) = -1;
      v7 = *(WTF::StringImpl **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(WTF::StringImpl **)(v5 - 16);
      *(_QWORD *)(v5 - 16) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v5 += 32;
      v4 -= 32;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unsigned int *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 27))
  {
    v5 = WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v7 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v7)
    {
      v8 = v5;
      v9 = *a2;
      v10 = v9 + 32 * v7;
      do
      {
        v11 = *(_DWORD **)v9;
        if (*(_QWORD *)v9)
          *v11 += 2;
        *(_QWORD *)v8 = v11;
        v12 = *(_DWORD **)(v9 + 8);
        if (v12)
          *v12 += 2;
        *(_QWORD *)(v8 + 8) = v12;
        v13 = *(unsigned int **)(v9 + 16);
        v14 = *(_DWORD *)(v9 + 24);
        if (v14 == 1)
        {
          do
            v15 = __ldaxr(v13);
          while (__stlxr(v15 + 1, v13));
          v16 = 0;
          *(_QWORD *)(v8 + 16) = v13;
          *(_DWORD *)(v8 + 24) = 1;
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v16, v6);
        }
        else
        {
          if (v14)
          {
            *(_QWORD *)(v8 + 16) = 0;
          }
          else
          {
            if (v13)
              *v13 += 2;
            *(_QWORD *)(v8 + 16) = v13;
          }
          *(_DWORD *)(v8 + 24) = 0;
        }
        v8 += 32;
        v9 += 32;
      }
      while (v9 != v10);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Persistence::VectorCoder<false,WTF::String,0ul>::decodeForPersistence<WTF::Persistence::Decoder>@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = WTF::Persistence::Decoder::operator>>();
  *a1 = 0;
  a1[16] = 0;
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::PasteboardCustomData::Entry>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, unint64_t a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  char v15;
  char v16;

  v4 = result;
  if ((unint64_t)result > a3)
    return WTF::VectorMover<false,WebCore::PasteboardCustomData::Entry>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = 0;
    v6 = a3 + a2 - result;
    do
    {
      v7 = (char *)a2 + v5;
      v8 = v6 + v5;
      v9 = *(_QWORD *)((char *)a2 + v5 - 32);
      *((_QWORD *)v7 - 4) = 0;
      *(_QWORD *)(v8 - 32) = v9;
      v10 = *(_QWORD *)((char *)a2 + v5 - 24);
      *((_QWORD *)v7 - 3) = 0;
      *(_QWORD *)(v8 - 24) = v10;
      *(_BYTE *)(v6 + v5 - 16) = 0;
      v11 = (WTF::StringImpl *)(v6 + v5 - 16);
      *(_DWORD *)(v8 - 8) = -1;
      v12 = *(unsigned int *)((char *)a2 + v5 - 8);
      if ((_DWORD)v12 != -1)
      {
        ((void (*)(char *, WTF::StringImpl *, char *))off_1E3405C08[v12])(&v15, v11, v7 - 16);
        *(_DWORD *)(v8 - 8) = v12;
        v13 = *((unsigned int *)v7 - 2);
        if ((_DWORD)v13 != -1)
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v13])(&v16, v7 - 16);
      }
      *((_DWORD *)v7 - 2) = -1;
      v14 = (WTF::StringImpl *)*((_QWORD *)v7 - 3);
      *((_QWORD *)v7 - 3) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v11);
        else
          *(_DWORD *)v14 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v7 - 4);
      *((_QWORD *)v7 - 4) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
      v5 -= 32;
    }
    while ((WTF::StringImpl *)((char *)a2 + v5) != v4);
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::PasteboardCustomData::Entry>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  if (result != a2)
  {
    v19 = v3;
    v20 = v4;
    v7 = result;
    v8 = 0;
    do
    {
      v9 = a3 + v8;
      v10 = (char *)v7 + v8;
      v11 = *(_QWORD *)((char *)v7 + v8);
      *(_QWORD *)v10 = 0;
      *(_QWORD *)v9 = v11;
      v12 = *(_QWORD *)((char *)v7 + v8 + 8);
      *((_QWORD *)v10 + 1) = 0;
      *(_QWORD *)(v9 + 8) = v12;
      *(_BYTE *)(a3 + v8 + 16) = 0;
      v13 = (WTF::StringImpl *)(a3 + v8 + 16);
      *(_DWORD *)(v9 + 24) = -1;
      v14 = *(unsigned int *)((char *)v7 + v8 + 24);
      if ((_DWORD)v14 != -1)
      {
        ((void (*)(char *, WTF::StringImpl *, char *))off_1E3405C08[v14])(&v17, v13, v10 + 16);
        *(_DWORD *)(v9 + 24) = v14;
        v15 = *((unsigned int *)v10 + 6);
        if ((_DWORD)v15 != -1)
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v15])(&v18, v10 + 16);
      }
      *((_DWORD *)v10 + 6) = -1;
      v16 = (WTF::StringImpl *)*((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v13);
        else
          *(_DWORD *)v16 -= 2;
      }
      result = *(WTF::StringImpl **)((char *)v7 + v8);
      *(_QWORD *)((char *)v7 + v8) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        else
          *(_DWORD *)result -= 2;
      }
      v8 += 32;
    }
    while ((WTF::StringImpl *)((char *)v7 + v8) != a2);
  }
  return result;
}

char *WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (WTF::StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *(WTF::StringImpl **)a1;
        return (char *)v13 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
      }
      if (!(v10 >> 27))
      {
        v11 = WTF::fastMalloc((WTF *)(32 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        WTF::VectorMover<false,WebCore::PasteboardCustomData::Entry>::move(v5, v6, v11);
        v13 = *(WTF::StringImpl **)a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v13 = *(WTF::StringImpl **)a1;
        }
        return (char *)v13 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x1960D7800);
    }
  }
  v14 = *(unsigned int *)(a1 + 8);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    if (v17 >> 27)
      goto LABEL_30;
    v18 = (WTF::StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12));
    v19 = WTF::fastMalloc((WTF *)(32 * v17));
    *(_DWORD *)(a1 + 8) = v17;
    *(_QWORD *)a1 = v19;
    WTF::VectorMover<false,WebCore::PasteboardCustomData::Entry>::move(v5, v18, v19);
    if (v5)
    {
      if (*(WTF::StringImpl **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v20);
    }
  }
  return (char *)v3;
}

unsigned int *WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;

  if (result[2] > (unint64_t)a2)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > (unint64_t)a2)
    {
      v5 = 32 * v4 - 32 * (_QWORD)a2;
      v6 = *(_QWORD *)result + 32 * (_QWORD)a2 + 16;
      do
      {
        v7 = *(unsigned int *)(v6 + 8);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v7])(&v10, v6);
        *(_DWORD *)(v6 + 8) = -1;
        v8 = *(WTF::StringImpl **)(v6 - 8);
        *(_QWORD *)(v6 - 8) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        result = *(unsigned int **)(v6 - 16);
        *(_QWORD *)(v6 - 16) = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *result -= 2;
        }
        v6 += 32;
        v5 -= 32;
      }
      while (v5);
      v3[3] = a2;
      LODWORD(v4) = (_DWORD)a2;
    }
    v9 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if ((unint64_t)a2 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * (_QWORD)a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v9)
        result = (unsigned int *)WTF::VectorMover<false,WebCore::PasteboardCustomData::Entry>::move(v9, (WTF::StringImpl *)((char *)v9 + 32 * v4), (uint64_t)result);
    }
    if (v9)
    {
      if (*(WTF::StringImpl **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v9, a2);
    }
  }
  return result;
}

uint64_t WebCore::primaryScreenDisplayID(WebCore *this)
{
  uint64_t result;

    return WebCore::screenProperties(void)::screenProperties;
  result = 0;
  WebCore::screenProperties(void)::screenProperties = 0;
  qword_1ECE90D08 = 0;
  return result;
}

double WebCore::PlatformSpeechSynthesisUtterance::create@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  double result;

  v4 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)v4 = 1;
  v5 = *a1;
  if (*a1)
    goto LABEL_11;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = a1;
  v7 = (unsigned int *)*a1;
  *a1 = v5;
  if (!v7)
    goto LABEL_11;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  v5 = *a1;
  if (*a1)
  {
LABEL_11:
    do
      v10 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v10 + 1, (unsigned int *)v5));
  }
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v4 + 40) = result;
  *(_DWORD *)(v4 + 48) = 1065353216;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *a2 = v4;
  return result;
}

uint64_t WebCore::PlatformSpeechSynthesisVoice::create@<X0>(WebCore::PlatformSpeechSynthesisVoice *this@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  char v7;
  uint64_t result;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;

  v7 = (char)a4;
  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)result = 1;
  v13 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v13 += 2;
  *(_QWORD *)(result + 8) = v13;
  v14 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v14 += 2;
  *(_QWORD *)(result + 16) = v14;
  v15 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v15 += 2;
  *(_QWORD *)(result + 24) = v15;
  *(_BYTE *)(result + 32) = v7;
  *(_BYTE *)(result + 33) = a5;
  *a6 = result;
  return result;
}

uint64_t WebCore::PlatformSpeechSynthesizer::voiceList(WebCore::PlatformSpeechSynthesizer *this)
{
  if (!*((_BYTE *)this + 32))
  {
    (*(void (**)(WebCore::PlatformSpeechSynthesizer *))(*(_QWORD *)this + 64))(this);
    *((_BYTE *)this + 32) = 1;
  }
  return (uint64_t)this + 16;
}

uint64_t WebCore::PlatformSpeechSynthesizer::resetVoiceList(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t v5;
  WTF::StringImpl **v6;

  if (*(_BYTE *)(this + 32))
  {
    v2 = this;
    *(_BYTE *)(this + 32) = 0;
    if (*(_DWORD *)(this + 24))
    {
      v3 = *(unsigned int *)(this + 28);
      if ((_DWORD)v3)
      {
        v4 = *(WTF::StringImpl ****)(this + 16);
        v5 = 8 * v3;
        do
        {
          v6 = *v4;
          *v4 = 0;
          if (v6)
            WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v6, a2);
          ++v4;
          v5 -= 8;
        }
        while (v5);
        *(_DWORD *)(v2 + 28) = 0;
      }
      this = *(_QWORD *)(v2 + 16);
      if (this)
      {
        *(_QWORD *)(v2 + 16) = 0;
        *(_DWORD *)(v2 + 24) = 0;
        return WTF::fastFree((WTF *)this, a2);
      }
    }
  }
  return this;
}

uint64_t WebCore::PlatformSpeechSynthesizer::voicesDidChange(WebCore::PlatformSpeechSynthesizer *this)
{
  (*(void (**)(WebCore::PlatformSpeechSynthesizer *))(*(_QWORD *)this + 72))(this);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 48))(*((_QWORD *)this + 5));
}

void WebCore::PreviewConverter::~PreviewConverter(WebCore::PreviewConverter *this, void *a2)
{
  const void *v3;
  const void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int **v9;
  unsigned int **v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  WebCore::ResourceResponseBase *v16;
  const void *v17;
  WTF::StringImpl *v18;
  const void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (**v33)();
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t (**v37)();
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v3 = (const void *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = *((unsigned int *)this + 97);
  if ((_DWORD)v8)
  {
    v9 = (unsigned int **)*((_QWORD *)this + 47);
    v10 = &v9[v8];
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, a2);
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  v14 = (WTF *)*((_QWORD *)this + 47);
  if ((WebCore::PreviewConverter *)((char *)this + 392) != v14 && v14 != 0)
  {
    *((_QWORD *)this + 47) = 0;
    *((_DWORD *)this + 96) = 0;
    WTF::fastFree(v14, a2);
  }
  v16 = (WebCore::PreviewConverter *)((char *)this + 112);
  v17 = (const void *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v17)
  {
    CFRelease(v17);
    v16 = (WebCore::PreviewConverter *)((char *)this + 112);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v16, (WTF::StringImpl *)a2);
  v19 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v19)
    CFRelease(v19);
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v18);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v23));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)v23);
      v30 = *(unsigned int *)(v23 + 20);
      if ((_DWORD)v30)
      {
        v31 = *(_QWORD *)(v23 + 8);
        v32 = v31 + 16 * v30;
        v33 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_7;
        do
        {
          v34 = *(unsigned int **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              v37 = v33;
              v44 = v32;
              v45 = v31;
              v38 = v23;
              atomic_store(1u, v34);
              v39 = v34;
              v40 = v34[6];
              if ((_DWORD)v40 != -1)
                ((void (*)(char *, unsigned int *))v33[v40])(&v46, v34 + 2);
              v39[6] = -1;
              WTF::fastFree((WTF *)v39, v18);
              v23 = v38;
              v32 = v44;
              v31 = v45;
              v33 = v37;
            }
          }
          v31 += 16;
        }
        while (v31 != v32);
      }
      v41 = *(WTF **)(v23 + 8);
      if ((WTF *)(v23 + 24) != v41 && v41 != 0)
      {
        *(_QWORD *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 16) = 0;
        v43 = v23;
        WTF::fastFree(v41, v18);
        v23 = v43;
      }
      WTF::fastFree((WTF *)v23, v18);
    }
  }
  v26 = *((_QWORD *)this + 1);
  if (v26)
  {
    *(_QWORD *)(v26 + 8) = 0;
    v27 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v27)
    {
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v18);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::PreviewConverter::~PreviewConverter(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::PreviewConverter::previewData(WebCore::PreviewConverter *this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  char v19;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    do
      v3 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v3 + 1, (unsigned int *)v2));
    do
    {
      v4 = __ldaxr((unsigned int *)v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v2));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v2);
      v7 = *(unsigned int *)(v2 + 20);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(v2 + 8);
        v9 = v8 + 16 * v7;
        do
        {
          v10 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v16 = v8;
              v17 = v9;
              atomic_store(1u, v10);
              v18 = (WTF *)v10;
              v13 = v10[6];
              if ((_DWORD)v13 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_7[v13])(&v19, v10 + 2);
              *((_DWORD *)v18 + 6) = -1;
              WTF::fastFree(v18, a2);
              v8 = v16;
              v9 = v17;
            }
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      v14 = *(WTF **)(v2 + 8);
      if ((WTF *)(v2 + 24) != v14 && v14 != 0)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v14, a2);
      }
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  return v2;
}

unsigned int *WebCore::PreviewConverter::didFailUpdating(unsigned int *this, void *a2)
{
  unsigned int *v2;
  char v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int **v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v18;
  void *v19;
  WTF *v20;
  unsigned int v21;
  uint64_t v22;

  v2 = this;
  v3 = 1;
  if (!*((_BYTE *)this + 408))
  {
    if (*((_BYTE *)this + 368))
    {
      v3 = 0;
    }
    else
    {
      *((_BYTE *)this + 368) = 1;
      this = (unsigned int *)objc_msgSend(*((id *)this + 54), "finishConverting");
      v3 = *((_BYTE *)v2 + 408);
    }
  }
  *((_BYTE *)v2 + 408) = 1;
  v4 = v2[97];
  v20 = (WTF *)&v22;
  v21 = v4;
  if (v4 < 2)
  {
    v5 = (unsigned int *)&v22;
    if (!(_DWORD)v4)
      goto LABEL_15;
    goto LABEL_10;
  }
  if (v4 >> 29)
  {
    __break(0xC471u);
    return this;
  }
  this = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v4));
  v5 = this;
  v20 = (WTF *)this;
  v4 = v2[97];
  if ((_DWORD)v4)
  {
LABEL_10:
    v6 = (unsigned int **)*((_QWORD *)v2 + 47);
    v7 = &v6[v4];
    do
    {
      v8 = *v6;
      if (*v6)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
      *(_QWORD *)v5 = v8;
      v5 += 2;
      ++v6;
    }
    while (v6 != v7);
    v5 = (unsigned int *)v20;
  }
LABEL_15:
  v10 = v2[4];
  v2[4] = v10 + 1;
  if (v21)
  {
    v11 = &v5[2 * v21];
    do
    {
      if (*(_QWORD *)v5)
      {
        this = *(unsigned int **)(*(_QWORD *)v5 + 8);
        if (this)
        {
          v12 = v2[97];
          if ((_DWORD)v12)
          {
            v13 = *((_QWORD *)v2 + 47);
            while (!*(_QWORD *)v13 || *(unsigned int **)(*(_QWORD *)v13 + 8) != this)
            {
              v13 += 8;
              if (!--v12)
                goto LABEL_26;
            }
            this = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned int *))(*(_QWORD *)this + 32))(this, v2);
          }
        }
      }
LABEL_26:
      v5 += 2;
    }
    while (v5 != v11);
    if (!v2)
      goto LABEL_31;
    v10 = v2[4] - 1;
  }
  if (v10)
  {
    v2[4] = v10;
  }
  else
  {
    WebCore::PreviewConverter::~PreviewConverter((WebCore::PreviewConverter *)v2, a2);
    this = (unsigned int *)WTF::fastFree(v18, v19);
  }
LABEL_31:
  v14 = v20;
  if (v21)
  {
    do
    {
      this = *(unsigned int **)v14;
      *(_QWORD *)v14 = 0;
      if (this)
      {
        do
        {
          v15 = __ldaxr(this);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, this));
        if (!v16)
        {
          atomic_store(1u, this);
          this = (unsigned int *)WTF::fastFree((WTF *)this, a2);
        }
      }
      v14 = (WTF *)((char *)v14 + 8);
    }
    while (v14 != (WTF *)((char *)v20 + 8 * v21));
    v14 = v20;
  }
  if (&v22 != (uint64_t *)v14 && v14 != 0)
    this = (unsigned int *)WTF::fastFree(v14, a2);
  *((_BYTE *)v2 + 408) = v3;
  return this;
}

unsigned int *WebCore::PreviewConverter::finishUpdating(unsigned int *this)
{
  unsigned int *v1;
  void *v2;
  char v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int **v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v18;
  void *v19;
  WTF *v20;
  unsigned int v21;
  uint64_t v22;

  if (*((_BYTE *)this + 408))
    return this;
  v1 = this;
  if (*((_BYTE *)this + 368))
    return this;
  this = (unsigned int *)objc_msgSend(*((id *)this + 54), "finishedAppendingData");
  v3 = *((_BYTE *)v1 + 408);
  *((_BYTE *)v1 + 408) = 1;
  v4 = v1[97];
  v20 = (WTF *)&v22;
  v21 = v4;
  if (v4 < 2)
  {
    v5 = (unsigned int *)&v22;
    if (!(_DWORD)v4)
      goto LABEL_13;
    goto LABEL_8;
  }
  if (v4 >> 29)
  {
    __break(0xC471u);
    return this;
  }
  this = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v4));
  v5 = this;
  v20 = (WTF *)this;
  v4 = v1[97];
  if ((_DWORD)v4)
  {
LABEL_8:
    v6 = (unsigned int **)*((_QWORD *)v1 + 47);
    v7 = &v6[v4];
    do
    {
      v8 = *v6;
      if (*v6)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
      *(_QWORD *)v5 = v8;
      v5 += 2;
      ++v6;
    }
    while (v6 != v7);
    v5 = (unsigned int *)v20;
  }
LABEL_13:
  v10 = v1[4];
  v1[4] = v10 + 1;
  if (v21)
  {
    v11 = &v5[2 * v21];
    do
    {
      if (*(_QWORD *)v5)
      {
        this = *(unsigned int **)(*(_QWORD *)v5 + 8);
        if (this)
        {
          v12 = v1[97];
          if ((_DWORD)v12)
          {
            v13 = *((_QWORD *)v1 + 47);
            while (!*(_QWORD *)v13 || *(unsigned int **)(*(_QWORD *)v13 + 8) != this)
            {
              v13 += 8;
              if (!--v12)
                goto LABEL_24;
            }
            this = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned int *))(*(_QWORD *)this + 24))(this, v1);
          }
        }
      }
LABEL_24:
      v5 += 2;
    }
    while (v5 != v11);
    if (!v1)
      goto LABEL_29;
    v10 = v1[4] - 1;
  }
  if (v10)
  {
    v1[4] = v10;
  }
  else
  {
    WebCore::PreviewConverter::~PreviewConverter((WebCore::PreviewConverter *)v1, v2);
    this = (unsigned int *)WTF::fastFree(v18, v19);
  }
LABEL_29:
  v14 = v20;
  if (v21)
  {
    do
    {
      this = *(unsigned int **)v14;
      *(_QWORD *)v14 = 0;
      if (this)
      {
        do
        {
          v15 = __ldaxr(this);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, this));
        if (!v16)
        {
          atomic_store(1u, this);
          this = (unsigned int *)WTF::fastFree((WTF *)this, v2);
        }
      }
      v14 = (WTF *)((char *)v14 + 8);
    }
    while (v14 != (WTF *)((char *)v20 + 8 * v21));
    v14 = v20;
  }
  if (&v22 != (uint64_t *)v14 && v14 != 0)
    this = (unsigned int *)WTF::fastFree(v14, v2);
  *((_BYTE *)v1 + 408) = v3;
  return this;
}

uint64_t WebCore::PreviewConverter::addClient(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  v4 = (uint64_t *)(a1 + 376);
  v5 = *(unsigned int *)(a1 + 388);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 384))
  {
    v6 = v5 + (v5 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= v5 + 1)
      v8 = v5 + 1;
    else
      v8 = v7;
    WTF::Vector<WTF::WeakPtr<WebCore::PreviewConverterClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v4, v8);
    v5 = *(unsigned int *)(a1 + 388);
    v9 = *(_QWORD *)(a1 + 376);
    v10 = *(_QWORD *)(a2 + 8);
    if (v10)
      goto LABEL_26;
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = a2;
    v12 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v10;
    if (!v12)
      goto LABEL_26;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v11);
    }
    v10 = *(_QWORD *)(a2 + 8);
    if (v10)
    {
LABEL_26:
      do
        v15 = __ldaxr((unsigned int *)v10);
      while (__stlxr(v15 + 1, (unsigned int *)v10));
    }
  }
  else
  {
    v9 = *v4;
    v10 = *(_QWORD *)(a2 + 8);
    if (v10)
      goto LABEL_27;
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = a2;
    v17 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v10;
    if (!v17)
      goto LABEL_27;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v16);
    }
    v10 = *(_QWORD *)(a2 + 8);
    if (v10)
    {
LABEL_27:
      do
        v20 = __ldaxr((unsigned int *)v10);
      while (__stlxr(v20 + 1, (unsigned int *)v10));
    }
  }
  *(_QWORD *)(v9 + 8 * v5) = v10;
  ++*(_DWORD *)(a1 + 388);
  return WebCore::PreviewConverter::didAddClient((WTF::RunLoop *)a1, a2);
}

uint64_t WebCore::PreviewConverter::didAddClient(WTF::RunLoop *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;

  WTF::RunLoop::current(a1);
  ++*((_DWORD *)a1 + 4);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    goto LABEL_12;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v6 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  if (!v6)
    goto LABEL_12;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_12:
    do
      v9 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v9 + 1, (unsigned int *)v4));
  }
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = &off_1E3405CB0;
  v10[1] = a1;
  v10[2] = a1;
  v10[3] = v4;
  v12 = v10;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v12;
  if (v12)
    return (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
  return result;
}

uint64_t *WebCore::PreviewConverter::passwordForTesting(WebCore::PreviewConverter *this)
{
  if ((byte_1ECE83B59 & 1) == 0)
  {
    qword_1ECE83B68 = 0;
    byte_1ECE83B59 = 1;
  }
  return &qword_1ECE83B68;
}

WTF::StringImpl *WebCore::PreviewConverter::setPasswordForTesting(WebCore::PreviewConverter *this, const WTF::String *a2)
{
  _DWORD *v2;
  WTF::StringImpl *result;

  if ((byte_1ECE83B59 & 1) == 0)
  {
    qword_1ECE83B68 = 0;
    byte_1ECE83B59 = 1;
  }
  v2 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v2 += 2;
  result = (WTF::StringImpl *)qword_1ECE83B68;
  qword_1ECE83B68 = (uint64_t)v2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::PreviewConverter::didFailConvertingWithError(WebCore::PreviewConverter *this, const WebCore::ResourceError *a2)
{
  unsigned int *result;
  void *v4;
  char v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v20;
  void *v21;
  WTF *v22;
  unsigned int v23;
  uint64_t v24;

  result = (unsigned int *)WebCore::ResourceError::operator=((uint64_t)this + 32, (uint64_t)a2);
  *((_BYTE *)this + 368) = 3;
  v5 = *((_BYTE *)this + 408);
  *((_BYTE *)this + 408) = 1;
  v6 = *((unsigned int *)this + 97);
  v22 = (WTF *)&v24;
  v23 = v6;
  if (v6 < 2)
  {
    v7 = (unsigned int *)&v24;
    if (!(_DWORD)v6)
      goto LABEL_11;
    goto LABEL_6;
  }
  if (v6 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v6));
  v7 = result;
  v22 = (WTF *)result;
  v6 = *((unsigned int *)this + 97);
  if ((_DWORD)v6)
  {
LABEL_6:
    v8 = (unsigned int **)*((_QWORD *)this + 47);
    v9 = &v8[v6];
    do
    {
      v10 = *v8;
      if (*v8)
      {
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
      *(_QWORD *)v7 = v10;
      v7 += 2;
      ++v8;
    }
    while (v8 != v9);
    v7 = (unsigned int *)v22;
  }
LABEL_11:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = v12 + 1;
  if (v23)
  {
    v13 = &v7[2 * v23];
    do
    {
      if (*(_QWORD *)v7)
      {
        result = *(unsigned int **)(*(_QWORD *)v7 + 8);
        if (result)
        {
          v14 = *((unsigned int *)this + 97);
          if ((_DWORD)v14)
          {
            v15 = *((_QWORD *)this + 47);
            while (!*(_QWORD *)v15 || *(unsigned int **)(*(_QWORD *)v15 + 8) != result)
            {
              v15 += 8;
              if (!--v14)
                goto LABEL_22;
            }
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *, WebCore::PreviewConverter *))(*(_QWORD *)result + 64))(result, this);
          }
        }
      }
LABEL_22:
      v7 += 2;
    }
    while (v7 != v13);
    if (!this)
      goto LABEL_27;
    v12 = *((_DWORD *)this + 4) - 1;
  }
  if (v12)
  {
    *((_DWORD *)this + 4) = v12;
  }
  else
  {
    WebCore::PreviewConverter::~PreviewConverter(this, v4);
    result = (unsigned int *)WTF::fastFree(v20, v21);
  }
LABEL_27:
  v16 = v22;
  if (v23)
  {
    do
    {
      result = *(unsigned int **)v16;
      *(_QWORD *)v16 = 0;
      if (result)
      {
        do
        {
          v17 = __ldaxr(result);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, result));
        if (!v18)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v4);
        }
      }
      v16 = (WTF *)((char *)v16 + 8);
    }
    while (v16 != (WTF *)((char *)v22 + 8 * v23));
    v16 = v22;
  }
  if (&v24 != (uint64_t *)v16 && v16 != 0)
    result = (unsigned int *)WTF::fastFree(v16, v4);
  *((_BYTE *)this + 408) = v5;
  return result;
}

uint64_t WebCore::PreviewConverter::delegateDidReceiveData(uint64_t this, const WebCore::FragmentedSharedBuffer *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int **v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  char v22;
  uint64_t v23;
  unsigned int **v24;
  unsigned int **v25;
  unsigned int **v26;
  unsigned int *v27;
  unsigned int v28;
  int v29;
  unsigned int **v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  unsigned int v34;
  unsigned int v35;
  WTF *v37;
  void *v38;
  WTF *v39;
  void *v40;
  WTF *v41;
  void *v42;
  WTF *v43;
  WTF *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;

  v3 = this;
  ++*(_DWORD *)(this + 16);
  if (*(_BYTE *)(this + 368))
    goto LABEL_45;
  this = *(_QWORD *)(this + 400);
  *(_QWORD *)(v3 + 400) = 0;
  if (this)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)this);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)this));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)this);
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
  *(_BYTE *)(v3 + 368) = 2;
  v6 = *(_BYTE *)(v3 + 408);
  *(_BYTE *)(v3 + 408) = 1;
  v7 = *(unsigned int *)(v3 + 388);
  v43 = (WTF *)&v47;
  v45 = v7;
  if (v7 < 2)
  {
    v8 = (unsigned int **)&v47;
    if (!(_DWORD)v7)
      goto LABEL_16;
    goto LABEL_11;
  }
  if (v7 >> 29)
    goto LABEL_90;
  this = WTF::fastMalloc((WTF *)(8 * v7));
  v8 = (unsigned int **)this;
  v43 = (WTF *)this;
  v7 = *(unsigned int *)(v3 + 388);
  if ((_DWORD)v7)
  {
LABEL_11:
    v9 = *(unsigned int ***)(v3 + 376);
    v10 = &v9[v7];
    do
    {
      v11 = *v9;
      if (*v9)
      {
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
      *v8++ = v11;
      ++v9;
    }
    while (v9 != v10);
    v8 = (unsigned int **)v43;
  }
LABEL_16:
  v13 = *(_DWORD *)(v3 + 16) + 1;
  *(_DWORD *)(v3 + 16) = v13;
  if (v45)
  {
    v14 = &v8[v45];
    do
    {
      if (*v8)
      {
        this = *((_QWORD *)*v8 + 1);
        if (this)
        {
          v15 = *(unsigned int *)(v3 + 388);
          if ((_DWORD)v15)
          {
            v16 = *(_QWORD *)(v3 + 376);
            while (!*(_QWORD *)v16 || *(_QWORD *)(*(_QWORD *)v16 + 8) != this)
            {
              v16 += 8;
              if (!--v15)
                goto LABEL_27;
            }
            this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 40))(this, v3);
          }
        }
      }
LABEL_27:
      ++v8;
    }
    while (v8 != v14);
    if (!v3)
      goto LABEL_32;
    v13 = *(_DWORD *)(v3 + 16);
  }
  v17 = v13 - 1;
  if (v17)
  {
    *(_DWORD *)(v3 + 16) = v17;
  }
  else
  {
    WebCore::PreviewConverter::~PreviewConverter((WebCore::PreviewConverter *)v3, a2);
    this = WTF::fastFree(v41, v42);
  }
LABEL_32:
  v18 = v43;
  if (v45)
  {
    do
    {
      this = *(_QWORD *)v18;
      *(_QWORD *)v18 = 0;
      if (this)
      {
        do
        {
          v19 = __ldaxr((unsigned int *)this);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, (unsigned int *)this));
        if (!v20)
        {
          atomic_store(1u, (unsigned int *)this);
          this = WTF::fastFree((WTF *)this, a2);
        }
      }
      v18 = (WTF *)((char *)v18 + 8);
    }
    while (v18 != (WTF *)((char *)v43 + 8 * v45));
    v18 = v43;
  }
  if (&v47 != (uint64_t *)v18 && v18 != 0)
    this = WTF::fastFree(v18, a2);
  *(_BYTE *)(v3 + 408) = v6;
LABEL_45:
  if (!*((_QWORD *)a2 + 6))
    goto LABEL_85;
  WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)(v3 + 24));
  this = WebCore::FragmentedSharedBuffer::append(*(WebCore::FragmentedSharedBuffer **)(v3 + 24), a2);
  v22 = *(_BYTE *)(v3 + 408);
  *(_BYTE *)(v3 + 408) = 1;
  v23 = *(unsigned int *)(v3 + 388);
  v44 = (WTF *)&v47;
  v46 = v23;
  if (v23 >= 2)
  {
    if (!(v23 >> 29))
    {
      this = WTF::fastMalloc((WTF *)(8 * v23));
      v24 = (unsigned int **)this;
      v44 = (WTF *)this;
      v23 = *(unsigned int *)(v3 + 388);
      if (!(_DWORD)v23)
        goto LABEL_56;
      goto LABEL_51;
    }
LABEL_90:
    __break(0xC471u);
    JUMPOUT(0x1960D9038);
  }
  v24 = (unsigned int **)&v47;
  if (!(_DWORD)v23)
    goto LABEL_56;
LABEL_51:
  v25 = *(unsigned int ***)(v3 + 376);
  v26 = &v25[v23];
  do
  {
    v27 = *v25;
    if (*v25)
    {
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
    }
    *v24++ = v27;
    ++v25;
  }
  while (v25 != v26);
  v24 = (unsigned int **)v44;
LABEL_56:
  v29 = *(_DWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 16) = v29 + 1;
  if (v46)
  {
    v30 = &v24[v46];
    do
    {
      if (*v24)
      {
        this = *((_QWORD *)*v24 + 1);
        if (this)
        {
          v31 = *(unsigned int *)(v3 + 388);
          if ((_DWORD)v31)
          {
            v32 = *(_QWORD *)(v3 + 376);
            while (!*(_QWORD *)v32 || *(_QWORD *)(*(_QWORD *)v32 + 8) != this)
            {
              v32 += 8;
              if (!--v31)
                goto LABEL_67;
            }
            this = (*(uint64_t (**)(uint64_t, uint64_t, const WebCore::FragmentedSharedBuffer *))(*(_QWORD *)this + 48))(this, v3, a2);
          }
        }
      }
LABEL_67:
      ++v24;
    }
    while (v24 != v30);
    if (!v3)
      goto LABEL_72;
    v29 = *(_DWORD *)(v3 + 16) - 1;
  }
  if (v29)
  {
    *(_DWORD *)(v3 + 16) = v29;
  }
  else
  {
    WebCore::PreviewConverter::~PreviewConverter((WebCore::PreviewConverter *)v3, a2);
    this = WTF::fastFree(v39, v40);
  }
LABEL_72:
  v33 = v44;
  if (v46)
  {
    do
    {
      this = *(_QWORD *)v33;
      *(_QWORD *)v33 = 0;
      if (this)
      {
        do
        {
          v34 = __ldaxr((unsigned int *)this);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, (unsigned int *)this));
        if (!v35)
        {
          atomic_store(1u, (unsigned int *)this);
          this = WTF::fastFree((WTF *)this, a2);
        }
      }
      v33 = (WTF *)((char *)v33 + 8);
    }
    while (v33 != (WTF *)((char *)v44 + 8 * v46));
    v33 = v44;
  }
  if (&v47 != (uint64_t *)v33 && v33 != 0)
    this = WTF::fastFree(v33, a2);
  *(_BYTE *)(v3 + 408) = v22;
LABEL_85:
  if (*(_DWORD *)(v3 + 16) == 1)
  {
    WebCore::PreviewConverter::~PreviewConverter((WebCore::PreviewConverter *)v3, a2);
    return WTF::fastFree(v37, v38);
  }
  else
  {
    --*(_DWORD *)(v3 + 16);
  }
  return this;
}

unsigned int *WebCore::PreviewConverter::delegateDidFinishLoading(unsigned int *this, void *a2)
{
  unsigned int *v2;
  char v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int **v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v18;
  void *v19;
  WTF *v20;
  unsigned int v21;
  uint64_t v22;

  v2 = this;
  *((_BYTE *)this + 368) = 4;
  v3 = *((_BYTE *)this + 408);
  *((_BYTE *)this + 408) = 1;
  v4 = this[97];
  v20 = (WTF *)&v22;
  v21 = v4;
  if (v4 < 2)
  {
    v5 = (unsigned int *)&v22;
    if (!(_DWORD)v4)
      goto LABEL_11;
    goto LABEL_6;
  }
  if (v4 >> 29)
  {
    __break(0xC471u);
    return this;
  }
  this = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v4));
  v5 = this;
  v20 = (WTF *)this;
  v4 = v2[97];
  if ((_DWORD)v4)
  {
LABEL_6:
    v6 = (unsigned int **)*((_QWORD *)v2 + 47);
    v7 = &v6[v4];
    do
    {
      v8 = *v6;
      if (*v6)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
      *(_QWORD *)v5 = v8;
      v5 += 2;
      ++v6;
    }
    while (v6 != v7);
    v5 = (unsigned int *)v20;
  }
LABEL_11:
  v10 = v2[4];
  v2[4] = v10 + 1;
  if (v21)
  {
    v11 = &v5[2 * v21];
    do
    {
      if (*(_QWORD *)v5)
      {
        this = *(unsigned int **)(*(_QWORD *)v5 + 8);
        if (this)
        {
          v12 = v2[97];
          if ((_DWORD)v12)
          {
            v13 = *((_QWORD *)v2 + 47);
            while (!*(_QWORD *)v13 || *(unsigned int **)(*(_QWORD *)v13 + 8) != this)
            {
              v13 += 8;
              if (!--v12)
                goto LABEL_22;
            }
            this = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned int *))(*(_QWORD *)this + 56))(this, v2);
          }
        }
      }
LABEL_22:
      v5 += 2;
    }
    while (v5 != v11);
    if (!v2)
      goto LABEL_27;
    v10 = v2[4] - 1;
  }
  if (v10)
  {
    v2[4] = v10;
  }
  else
  {
    WebCore::PreviewConverter::~PreviewConverter((WebCore::PreviewConverter *)v2, a2);
    this = (unsigned int *)WTF::fastFree(v18, v19);
  }
LABEL_27:
  v14 = v20;
  if (v21)
  {
    do
    {
      this = *(unsigned int **)v14;
      *(_QWORD *)v14 = 0;
      if (this)
      {
        do
        {
          v15 = __ldaxr(this);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, this));
        if (!v16)
        {
          atomic_store(1u, this);
          this = (unsigned int *)WTF::fastFree((WTF *)this, a2);
        }
      }
      v14 = (WTF *)((char *)v14 + 8);
    }
    while (v14 != (WTF *)((char *)v20 + 8 * v21));
    v14 = v20;
  }
  if (&v22 != (uint64_t *)v14 && v14 != 0)
    this = (unsigned int *)WTF::fastFree(v14, a2);
  *((_BYTE *)v2 + 408) = v3;
  return this;
}

unsigned int *WebCore::PreviewConverter::delegateDidFailWithError(WebCore::PreviewConverter *this, const WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *result;
  unsigned int *v8;

  WebCore::ResourceError::platformLazyInit(a2);
  if (*((_DWORD *)a2 + 14) != 4)
    return WebCore::PreviewConverter::didFailConvertingWithError(this, a2);
  WebCore::ResourceError::platformLazyInit(a2);
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "QuickLookErrorDomain", 20) & 1) == 0)
    return WebCore::PreviewConverter::didFailConvertingWithError(this, a2);
  v4 = *((_QWORD *)this + 50);
  if (!v4)
    return WebCore::PreviewConverter::didFailConvertingWithError(this, a2);
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return WebCore::PreviewConverter::didFailConvertingWithError(this, a2);
  ++*((_DWORD *)this + 4);
  v6 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E3405CD8;
  *((_QWORD *)v6 + 1) = this;
  *((_QWORD *)v6 + 2) = this;
  v8 = v6;
  (*(void (**)(uint64_t, WebCore::PreviewConverter *, unsigned int **))(*(_QWORD *)v5 + 24))(v5, this, &v8);
  result = v8;
  v8 = 0;
  if (result)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PreviewConverter::updateMainResource(void)::$_0,void,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::PreviewConverter *v3;
  WTF *v5;
  void *v6;

  *a1 = &off_1E3405C88;
  v3 = (WebCore::PreviewConverter *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 4) == 1)
    {
      WebCore::PreviewConverter::~PreviewConverter(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PreviewConverter::updateMainResource(void)::$_0,void,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::PreviewConverter *v3;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E3405C88;
  v3 = (WebCore::PreviewConverter *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 4) == 1)
    {
      WebCore::PreviewConverter::~PreviewConverter(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 4);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PreviewConverter::updateMainResource(void)::$_0,void,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&>::call(uint64_t a1, WebCore::FragmentedSharedBuffer **a2)
{
  uint64_t v2;
  WebCore::FragmentedSharedBuffer *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  CFTypeRef v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13[3];
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  v4 = *((_QWORD *)*a2 + 6);
  v5 = *(_QWORD *)(v2 + 416);
  if (v4 > v5)
  {
    do
    {
      WebCore::FragmentedSharedBuffer::getSomeData(v3, v5, v13);
      v6 = *(void **)(v2 + 432);
      WebCore::SharedBufferDataView::createNSData((WebCore::SharedBufferDataView *)v13, (WebCoreSharedBufferData **)&cf);
      objc_msgSend(v6, "appendData:", cf);
      v8 = cf;
      cf = 0;
      if (v8)
        CFRelease(v8);
      v9 = (unsigned int *)v13[0];
      *(_QWORD *)(v2 + 416) += v13[2];
      v13[0] = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          v12 = v9[6];
          if ((_DWORD)v12 != -1)
            ((void (*)(CFTypeRef *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_7[v12])(&cf, v9 + 2);
          v9[6] = -1;
          WTF::fastFree((WTF *)v9, v7);
        }
      }
      v5 = *(_QWORD *)(v2 + 416);
    }
    while (*((_QWORD *)v3 + 6) > v5);
  }
}

void sub_1960D94B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::PreviewConverterClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  v3 = result;
  v4 = *(WTF **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 < 2)
  {
    v6 = (_QWORD *)(result + 16);
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
    if (!(_DWORD)v5)
    {
LABEL_13:
      if ((WTF *)(v3 + 16) != v4 && v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        WTF::fastFree(v4, (void *)a2);
      }
      return 1;
    }
LABEL_7:
    v7 = (unsigned int **)v4;
    do
    {
      v8 = *v7;
      *v7 = 0;
      *v6 = v8;
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, (void *)a2);
        }
      }
      ++v6;
      ++v7;
    }
    while (v7 != (unsigned int **)((char *)v4 + 8 * v5));
    goto LABEL_13;
  }
  if (!(a2 >> 29))
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if (!(_DWORD)v5)
      goto LABEL_13;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PreviewConverter::didAddClient(WebCore::PreviewConverterClient &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::PreviewConverter *v6;
  WTF *v8;
  void *v9;

  *a1 = &off_1E3405CB0;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WebCore::PreviewConverter *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 4) == 1)
    {
      WebCore::PreviewConverter::~PreviewConverter(v6, a2);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*((_DWORD *)v6 + 4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PreviewConverter::didAddClient(WebCore::PreviewConverterClient &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::PreviewConverter *v6;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E3405CB0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WebCore::PreviewConverter *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 4) == 1)
    {
      WebCore::PreviewConverter::~PreviewConverter(v6, a2);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*((_DWORD *)v6 + 4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PreviewConverter::didAddClient(WebCore::PreviewConverterClient &)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  char v32;
  char v33;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(uint64_t **)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(result + 8);
      v4 = *(unsigned int *)(v3 + 388);
      if ((_DWORD)v4)
      {
        for (i = *(_QWORD *)(v3 + 376); !*(_QWORD *)i || *(uint64_t **)(*(_QWORD *)i + 8) != v2; i += 8)
        {
          if (!--v4)
            return result;
        }
        v6 = *(_BYTE *)(v3 + 408);
        *(_BYTE *)(v3 + 408) = 1;
        ++*(_DWORD *)(v3 + 16);
        result = (*(uint64_t (**)(uint64_t *, uint64_t))(*v2 + 16))(v2, v3);
        if (*(_BYTE *)(v3 + 368))
        {
          v8 = *(unsigned int *)(v3 + 388);
          if ((_DWORD)v8)
          {
            v9 = *(_QWORD *)(v3 + 376);
            while (!*(_QWORD *)v9 || *(uint64_t **)(*(_QWORD *)v9 + 8) != v2)
            {
              v9 += 8;
              if (!--v8)
                goto LABEL_18;
            }
            v10 = *v2;
            if (*(_BYTE *)(v3 + 368) == 1)
            {
              result = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 32))(v2, v3);
            }
            else
            {
              result = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 40))(v2, v3);
              v11 = *(_QWORD *)(v3 + 24);
              if (v11)
              {
                if (*(_QWORD *)(v11 + 48))
                {
                  v12 = *(unsigned int *)(v3 + 388);
                  if ((_DWORD)v12)
                  {
                    v13 = *(_QWORD *)(v3 + 376);
                    while (!*(_QWORD *)v13 || *(uint64_t **)(*(_QWORD *)v13 + 8) != v2)
                    {
                      v13 += 8;
                      if (!--v12)
                        goto LABEL_35;
                    }
                    do
                      v14 = __ldaxr((unsigned int *)v11);
                    while (__stlxr(v14 + 1, (unsigned int *)v11));
                    result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v2 + 48))(v2, v3, v11);
                    do
                    {
                      v15 = __ldaxr((unsigned int *)v11);
                      v16 = v15 - 1;
                    }
                    while (__stlxr(v16, (unsigned int *)v11));
                    if (!v16)
                    {
                      v32 = v6;
                      atomic_store(1u, (unsigned int *)v11);
                      v23 = *(unsigned int *)(v11 + 20);
                      if ((_DWORD)v23)
                      {
                        v24 = *(_QWORD *)(v11 + 8);
                        v25 = v24 + 16 * v23;
                        do
                        {
                          v26 = *(unsigned int **)(v24 + 8);
                          *(_QWORD *)(v24 + 8) = 0;
                          if (v26)
                          {
                            do
                            {
                              v27 = __ldaxr(v26);
                              v28 = v27 - 1;
                            }
                            while (__stlxr(v28, v26));
                            if (!v28)
                            {
                              atomic_store(1u, v26);
                              v29 = v26[6];
                              if ((_DWORD)v29 != -1)
                                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_7[v29])(&v33, v26 + 2);
                              v26[6] = -1;
                              WTF::fastFree((WTF *)v26, v7);
                            }
                          }
                          v24 += 16;
                        }
                        while (v24 != v25);
                      }
                      v30 = *(WTF **)(v11 + 8);
                      if ((WTF *)(v11 + 24) != v30 && v30 != 0)
                      {
                        *(_QWORD *)(v11 + 8) = 0;
                        *(_DWORD *)(v11 + 16) = 0;
                        WTF::fastFree(v30, v7);
                      }
                      result = WTF::fastFree((WTF *)v11, v7);
                      v6 = v32;
                    }
                  }
                }
              }
LABEL_35:
              v17 = *(unsigned __int8 *)(v3 + 368);
              if (v17 == 2)
                goto LABEL_19;
              v18 = *(unsigned int *)(v3 + 388);
              if (!(_DWORD)v18)
                goto LABEL_19;
              v19 = *(_QWORD *)(v3 + 376);
              while (!*(_QWORD *)v19 || *(uint64_t **)(*(_QWORD *)v19 + 8) != v2)
              {
                v19 += 8;
                if (!--v18)
                  goto LABEL_18;
              }
              v22 = *v2;
              if (v17 == 3)
                result = (*(uint64_t (**)(uint64_t *, uint64_t))(v22 + 64))(v2, v3);
              else
                result = (*(uint64_t (**)(uint64_t *, uint64_t))(v22 + 56))(v2, v3);
            }
LABEL_18:
            if (!v3)
              goto LABEL_21;
          }
        }
LABEL_19:
        if (*(_DWORD *)(v3 + 16) == 1)
        {
          WebCore::PreviewConverter::~PreviewConverter((WebCore::PreviewConverter *)v3, v7);
          result = WTF::fastFree(v20, v21);
        }
        else
        {
          --*(_DWORD *)(v3 + 16);
        }
LABEL_21:
        *(_BYTE *)(v3 + 408) = v6;
      }
    }
  }
  return result;
}

