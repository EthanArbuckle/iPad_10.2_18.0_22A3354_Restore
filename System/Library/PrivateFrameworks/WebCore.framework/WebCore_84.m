void WTF::Detail::CallableWrapper<WebCore::Page::setNeedsRecalcStyleInAllFrames(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, _QWORD *a2)
{
  WebCore::Style::Scope *v2;
  int v3;

  v2 = (WebCore::Style::Scope *)a2[166];
  ++*((_DWORD *)v2 + 2);
  WebCore::Style::Scope::didChangeStyleSheetEnvironment(v2, a2);
  v3 = *((_DWORD *)v2 + 2);
  if (v3)
    *((_DWORD *)v2 + 2) = v3 - 1;
  else
    __break(0xC471u);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::unmarkAllTextMatches(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_DWORD **)(a2 + 1496);
  if (v2)
  {
    ++*v2;
    v4 = 0;
    result = WebCore::DocumentMarkerController::removeMarkers((uint64_t)v2, (void *)4, &v4);
    if (*v2)
    {
      --*v2;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::setPageScaleFactor(float,WebCore::IntPoint const&,BOOL)::$_0,void,WebCore::HTMLMediaElement &>::call(int a1, WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::pageScaleFactorChanged((uint64_t)this);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::Page::screenPropertiesDidChange(void)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, unsigned __int8 *a2)
{
  return WebCore::HTMLMediaElement::setPreferredDynamicRangeMode(a2, *(unsigned __int8 *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::windowScreenDidChange(unsigned int,std::optional<unsigned int>)::$_0,void,WebCore::Document &>::call(uint64_t a1, WebCore::Document *this)
{
  return WebCore::Document::windowScreenDidChange(this, **(unsigned int **)(a1 + 8));
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::Page::windowScreenDidChange(unsigned int,std::optional<unsigned int>)::$_1,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, unsigned __int8 *a2)
{
  return WebCore::HTMLMediaElement::setPreferredDynamicRangeMode(a2, *(unsigned __int8 *)(a1 + 8));
}

void WTF::Detail::CallableWrapper<WebCore::Page::setUserInterfaceLayoutDirection(WebCore::UserInterfaceLayoutDirection)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          if (*(_BYTE *)(v5 + 1132))
            v7 = 6;
          else
            v7 = 7;
          v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
          *v8 = off_1E33C5D50;
          v8[1] = a2;
          v8[2] = "usesLTRUserInterfaceLayoutDirection";
          v8[3] = 36;
          v8[4] = v7;
          v9 = v8;
          WebCore::HTMLMediaElement::setupAndCallJS(a2, &v9);
          (*(void (**)(_QWORD *))(*v8 + 8))(v8);
        }
      }
    }
  }
}

WTF::MonotonicTime *WTF::Detail::CallableWrapper<WebCore::Page::updateMediaElementRateChangeRestrictions(void)::$_0,void,WebCore::HTMLMediaElement &>::call(int a1, WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::updateRateChangeRestrictions(this);
}

uint64_t _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN7WebCore27ActivityStateChangeObserverES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t *a1, void *a2)
{
  uint64_t v2;
  int v4;
  int v6;
  unsigned int v7;
  unsigned int **v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 4);
    if (v4)
    {
      v6 = 0;
      v7 = v4 - 1;
      do
      {
        v8 = (unsigned int **)(v2 + 8 * v7);
        if ((unint64_t)*v8 + 1 >= 2 && !*((_QWORD *)*v8 + 1))
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v8, a2);
          ++v6;
        }
      }
      while ((unint64_t)v7--);
      v10 = *a1;
      v2 = v6 != 0;
      if (v6)
      {
        *(_DWORD *)(v10 - 16) += v6;
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 12);
        else
          v12 = 0;
        *(_DWORD *)(v11 - 12) = v12 - v6;
        v10 = *a1;
      }
      if (v10)
      {
        v13 = *(_DWORD *)(v10 - 4);
        if (6 * *(_DWORD *)(v10 - 12) < v13 && v13 >= 9)
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(a1);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void WTF::Detail::CallableWrapper<WebCore::Page::scheduleRenderingUpdateInternal(void)::$_0,void,WebCore::WindowEventLoop &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WebCore::preferredFrameInterval(*(_BYTE *)(v4 + 1168), *(_QWORD *)(v4 + 316), (*(_QWORD *)(*(_QWORD *)(v4 + 112) + 688) >> 31) & 1);
  v6 = v5 + *(double *)(v4 + 1688);
  v7 = **(double **)(a1 + 16);
  v8 = v5 + v7;
  if (v6 >= v7)
    v8 = v6;
  WebCore::WindowEventLoop::didScheduleRenderingUpdate(a2, (_QWORD *)v4, v8);
}

_DWORD *WTF::Vector<WTF::OptionSet<WebCore::RenderingUpdateStep>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::OptionSet<WebCore::RenderingUpdateStep> const&>(uint64_t a1)
{
  _DWORD *result;

  result = WTF::Vector<WTF::OptionSet<WebCore::RenderingUpdateStep>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1));
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

void *WTF::Vector<WTF::OptionSet<WebCore::RenderingUpdateStep>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  WTF *v18;
  int v19;
  void *v20;
  uint64_t v21;

  v3 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= (unint64_t)&WebCore::allRenderingUpdateSteps)
  {
    v4 = *(unsigned int *)(a1 + 12);
    if ((char *)v3 + 4 * v4 > (char *)&WebCore::allRenderingUpdateSteps)
    {
      v5 = *(unsigned int *)(a1 + 8);
      v6 = v5 + (v5 >> 2);
      if (v6 >= 0x10)
        v7 = v6 + 1;
      else
        v7 = 16;
      if (v7 <= (unint64_t)a2)
        v8 = (unint64_t)a2;
      else
        v8 = v7;
      if (v8 <= v5)
      {
        v9 = *(_QWORD *)a1;
        return (void *)(v9 + 4 * ((&WebCore::allRenderingUpdateSteps - (_UNKNOWN *)v3) >> 2));
      }
      if (v8 < 3)
      {
        v9 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_35;
      }
      if (!(v8 >> 30))
      {
        v9 = WTF::fastMalloc((WTF *)(4 * v8));
        *(_DWORD *)(a1 + 8) = v8;
        *(_QWORD *)a1 = v9;
LABEL_35:
        v21 = 0;
        do
        {
          *(_DWORD *)(v9 + v21) = *(_DWORD *)((char *)v3 + v21);
          v21 += 4;
        }
        while (4 * v4 != v21);
        if ((WTF *)(a1 + 16) != v3 && v3)
        {
          if ((WTF *)v9 == v3)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v3, a2);
          v9 = *(_QWORD *)a1;
        }
        return (void *)(v9 + 4 * ((&WebCore::allRenderingUpdateSteps - (_UNKNOWN *)v3) >> 2));
      }
LABEL_44:
      __break(0xC471u);
      JUMPOUT(0x19602E970);
    }
  }
  v10 = *(unsigned int *)(a1 + 8);
  v11 = v10 + (v10 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= (unint64_t)a2)
    v13 = (unint64_t)a2;
  else
    v13 = v12;
  if (v13 <= v10)
    return &WebCore::allRenderingUpdateSteps;
  v14 = *(unsigned int *)(a1 + 12);
  if (v13 < 3)
  {
    v15 = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 2;
    if (!(_DWORD)v14)
      goto LABEL_27;
    goto LABEL_25;
  }
  if (v13 >> 30)
    goto LABEL_44;
  v15 = WTF::fastMalloc((WTF *)(4 * v13));
  *(_DWORD *)(a1 + 8) = v13;
  *(_QWORD *)a1 = v15;
  if ((_DWORD)v14)
  {
LABEL_25:
    v16 = 4 * v14;
    v17 = (_DWORD *)v15;
    v18 = v3;
    do
    {
      v19 = *(_DWORD *)v18;
      v18 = (WTF *)((char *)v18 + 4);
      *v17++ = v19;
      v16 -= 4;
    }
    while (v16);
  }
LABEL_27:
  v20 = &WebCore::allRenderingUpdateSteps;
  if ((WTF *)(a1 + 16) != v3 && v3)
  {
    if ((WTF *)v15 == v3)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v3, a2);
    return &WebCore::allRenderingUpdateSteps;
  }
  return v20;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_0,void,WebCore::WindowEventLoop &>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  WTF *v5;

  v2 = *(_QWORD *)(result + 8);
  v3 = a2 + 37;
  v4 = *((_DWORD *)a2 + 76);
  *((_DWORD *)a2 + 76) = v4 + 1;
  if (v4 > *((_DWORD *)a2 + 77))
    result = WTF::WeakHashMap<WebCore::Page,WTF::MonotonicTime,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)(a2 + 37), a2);
  v5 = *(WTF **)(v2 + 16);
  if (v5)
  {
    if (*((_QWORD *)v5 + 1))
      return WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::MonotonicTime,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(v3, v5);
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_2,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  int *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _DWORD *v11;
  int *v12;
  unsigned int *v13;
  _QWORD *v14;

  v2 = *(_QWORD *)(a2 + 528);
  if (!v2)
    return;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return;
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(int **)(v3 + 280);
  v7 = *v6 + 1;
  *v6 = v7;
  if (!*((_BYTE *)v6 + 403))
  {
    if (v7)
      goto LABEL_7;
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x19602EB0CLL);
  }
  v12 = v6;
  v13 = v4;
  *((_BYTE *)v6 + 403) = 0;
  v11 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)v6 + 1) + 8) + 184);
  ++*v11;
  WebCore::HistoryController::restoreScrollPositionAndViewState((uint64_t)v11);
  if (!*v11)
    goto LABEL_15;
  --*v11;
  v6 = v12;
  v4 = v13;
  v7 = *v12;
  if (!*v12)
    goto LABEL_15;
LABEL_7:
  *v6 = v7 - 1;
  do
  {
    v8 = __ldaxr(v4);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v4));
  if (!v9)
  {
    atomic_store(1u, v4);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v4;
    v14 = v10;
    WTF::ensureOnMainThread();
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_3,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  unsigned int *result;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  unsigned int v19;
  WTF *v20;
  unsigned int v21;
  double *v22;
  double v23;
  double v24;
  unsigned int **v25;
  unsigned int **v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;

  v4 = *(_QWORD *)(a2 + 696);
  if (v4)
  {
    ++*(_DWORD *)(v4 + 24);
    v5 = (double *)WebCore::LocalDOMWindow::performance((WebCore::LocalDOMWindow *)v4);
    result = (unsigned int *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
    v8 = v5[21];
    v9 = *(double *)&WebCore::timePrecision;
    if (!*(_BYTE *)(v4 + 288))
      *(_BYTE *)(v4 + 288) = 1;
    *(double *)(v4 + 280) = v9 * floor((v7 - v8) / v9);
    if (*(_DWORD *)(v4 + 24) == 1)
      result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
    else
      --*(_DWORD *)(v4 + 24);
  }
  else
  {
    v22 = (double *)WebCore::LocalDOMWindow::performance(0);
    result = (unsigned int *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v22);
    v24 = v22[21];
    if (!MEMORY[0x120])
      MEMORY[0x120] = 1;
    MEMORY[0x118] = *(double *)&WebCore::timePrecision * floor((v23 - v24) / *(double *)&WebCore::timePrecision);
  }
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(unsigned int *)(v10 + 12);
  if ((_DWORD)v11 != *(_DWORD *)(v10 + 8))
  {
    v20 = *(WTF **)v10;
    result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
    if (result)
    {
      do
        v21 = __ldaxr(result);
      while (__stlxr(v21 + 1, result));
    }
    *((_QWORD *)v20 + v11) = result;
    goto LABEL_25;
  }
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  if (!(v14 >> 29))
  {
    v15 = *(WTF **)v10;
    v17 = (WTF *)WTF::fastMalloc((WTF *)(8 * v14));
    *(_DWORD *)(v10 + 8) = v14;
    *(_QWORD *)v10 = v17;
    if ((_DWORD)v11)
    {
      v25 = (unsigned int **)((char *)v15 + 8 * v11);
      v26 = (unsigned int **)v15;
      do
      {
        v27 = *v26;
        *v26 = 0;
        *(_QWORD *)v17 = v27;
        v28 = *v26;
        *v26 = 0;
        v33 = (WTF *)v28;
        if (v28)
        {
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            atomic_store(1u, v28);
            v31 = v28[7];
            if ((_DWORD)v31)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v33 + 2), (WTF::StringImpl *)(*((_QWORD *)v33 + 2) + 32 * v31));
            v32 = (WTF *)*((_QWORD *)v33 + 2);
            if (v32)
            {
              *((_QWORD *)v33 + 2) = 0;
              *((_DWORD *)v33 + 6) = 0;
              WTF::fastFree(v32, v16);
            }
            WTF::fastFree(v33, v16);
          }
        }
        v17 = (WTF *)((char *)v17 + 8);
        ++v26;
      }
      while (v26 != v25);
      v17 = *(WTF **)v10;
      if (!v15)
        goto LABEL_19;
    }
    else if (!v15)
    {
LABEL_19:
      v18 = *(unsigned int *)(v10 + 12);
      result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
      if (result)
      {
        do
          v19 = __ldaxr(result);
        while (__stlxr(v19 + 1, result));
      }
      *((_QWORD *)v17 + v18) = result;
LABEL_25:
      ++*(_DWORD *)(v10 + 12);
      return result;
    }
    if (v17 == v15)
    {
      *(_QWORD *)v10 = 0;
      *(_DWORD *)(v10 + 8) = 0;
    }
    WTF::fastFree(v15, v16);
    v17 = *(WTF **)v10;
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_4,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  uint64_t result;
  void *v4;

  result = WebCore::Document::isTopDocument(this);
  if ((_DWORD)result)
    return WebCore::Document::flushAutofocusCandidates((uint64_t)this, v4);
  return result;
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_5,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  return WebCore::Document::runResizeSteps((uint64_t *)this);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_6,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  return WebCore::Document::runScrollSteps(this);
}

double WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_7,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 2288);
  if (v2)
    return WebCore::MediaQueryMatcher::evaluateAll(v2, 1);
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_8,void,WebCore::Document &>::call(uint64_t a1, WebCore::Document *a2)
{
  WebCore::ElementTargetingController::adjustVisibilityInRepeatedlyTargetedRegions(*(WebCore::ElementTargetingController **)(*(_QWORD *)(a1 + 8) + 96), a2);
}

void WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_9,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  WebCore::LocalDOMWindow *v2;
  int v3;
  uint64_t v4;
  double v5;
  void *v6;
  long double v7;

  v2 = *(WebCore::LocalDOMWindow **)(a2 + 696);
  if (v2)
  {
    v3 = *((_DWORD *)v2 + 6);
    *((_DWORD *)v2 + 6) = v3 + 1;
    v4 = *(_QWORD *)(a2 + 2936);
    if (v4)
    {
      v5 = WebCore::LocalDOMWindow::frozenNowTimestamp(v2);
      WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(v4, v6, v5, v7);
      v3 = *((_DWORD *)v2 + 6) - 1;
      if (*((_DWORD *)v2 + 6) != 1)
        goto LABEL_4;
    }
    else if (v3)
    {
LABEL_4:
      *((_DWORD *)v2 + 6) = v3;
      return;
    }
    (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v2 + 72))(v2);
  }
}

WebCore::Page *WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_10,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  return WebCore::Document::serviceRequestVideoFrameCallbacks(this);
}

void WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_11,void,WebCore::Document &>::call(uint64_t a1, WebCore::LocalDOMWindow **a2)
{
  WebCore::ScriptedAnimationController *v2;
  WebCore::LocalDOMWindow *v3;
  double *v4;
  double v5;
  double v6;

  v2 = a2[291];
  if (v2)
  {
    ++*(_DWORD *)v2;
    v3 = a2[87];
    if (v3)
    {
      v4 = (double *)WebCore::LocalDOMWindow::performance(a2[87]);
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v4);
      if (*((_BYTE *)v3 + 288))
        v6 = *((double *)v3 + 35);
      else
        v6 = *(double *)&WebCore::timePrecision * floor((v5 - v4[21]) / *(double *)&WebCore::timePrecision);
      WebCore::ScriptedAnimationController::serviceRequestAnimationFrameCallbacks((uint64_t)v2, v6);
    }
    WTF::RefCounted<WebCore::ScriptedAnimationController>::deref(v2, a2);
  }
}

_BYTE *WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_12,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  _BYTE *result;

  result = *(_BYTE **)(*(_QWORD *)(a2 + 3064) + 248);
  if (result[88])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 72))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_13,void,WebCore::Document &>::call(uint64_t a1, WebCore::Document *this)
{
  return WebCore::Document::updateResizeObservations(this, *(WebCore::Page **)(a1 + 8));
}

void WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_14,void,WebCore::Document &>::call(uint64_t a1, WebCore::Document *a2)
{
  WebCore::Node *v2;
  void *v4;
  int v5;
  __int16 v6;

  v2 = (WebCore::Node *)*((_QWORD *)a2 + 156);
  if (v2)
  {
    *((_DWORD *)v2 + 6) += 2;
    if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v2 + 552))(v2) & 1) == 0)
    {
      v6 = 0;
      v5 = 0;
      WebCore::Document::setFocusedElement(a2, 0, &v5);
    }
    if (*((_DWORD *)v2 + 6) == 2)
    {
      if ((*((_WORD *)v2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v2, v4);
    }
    else
    {
      *((_DWORD *)v2 + 6) -= 2;
    }
  }
}

void WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_15,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(a2 + 3368);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 1584);
    if (v4)
    {
      if (*(_QWORD *)v4 && *(_DWORD *)(*(_QWORD *)v4 + 100))
      {
        v5 = a2;
        if (WebCore::ContentVisibilityDocumentState::updateRelevancyOfContentVisibilityElements(v4, v3))
          WebCore::Document::updateLayout(v5, 2u, 0);
        *(_BYTE *)(v5 + 3368) = 0;
      }
    }
  }
}

void WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_16,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  WebCore::Document::performPendingViewTransitions(this);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_17,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::Document::updateIntersectionObservations(a2, (_DWORD *)(a2 + 2016));
}

void WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_18,void,WebCore::Document &>::call(int a1, WebCore::Document *this, const WTF::StringImpl *a3)
{
  WebCore::CachedResourceLoader *v3;
  void *v4;
  WTF *v5;
  uint64_t v6;
  WebCore::Page *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  int v13;
  unsigned int v14;

  v3 = (WebCore::CachedResourceLoader *)*((_QWORD *)this + 90);
  if (!v3)
    v3 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(this, this);
  WebCore::CachedResourceLoader::allCachedSVGImages(v3, a3, (uint64_t)&v12);
  v5 = v12;
  if (!v14)
    goto LABEL_12;
  v6 = 8 * v14;
  do
  {
    v7 = *(WebCore::Page **)(*(_QWORD *)v5 + 64);
    if (v7)
    {
      ++*(_DWORD *)v7;
      WebCore::Page::updateRendering(v7);
      WebCore::Page::renderingUpdateCompleted(v7);
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::Page::~Page((uint64_t)v7);
        WTF::fastFree(v8, v9);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
    v5 = (WTF *)((char *)v5 + 8);
    v6 -= 8;
  }
  while (v6);
  v5 = v12;
  if (!v14)
  {
LABEL_12:
    if (!v5)
      return;
LABEL_22:
    v12 = 0;
    v13 = 0;
    WTF::fastFree(v5, v4);
    return;
  }
  v10 = 8 * v14;
  do
  {
    v11 = *(_DWORD **)v5;
    *(_QWORD *)v5 = 0;
    if (v11)
    {
      if (v11[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
      else
        --v11[2];
    }
    v5 = (WTF *)((char *)v5 + 8);
    v10 -= 8;
  }
  while (v10);
  v5 = v12;
  if (v12)
    goto LABEL_22;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Page::updateRendering(void)::$_19,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  return WebCore::Document::adjustValidationMessagePositions(this, this);
}

void WTF::Detail::CallableWrapper<WebCore::Page::doAfterUpdateRendering(void)::$_1,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(a2 + 528);
  if (!v2)
    return;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return;
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(unsigned __int8 **)(v3 + 640);
  v7 = *(_DWORD *)v6 + 1;
  *(_DWORD *)v6 = v7;
  v8 = v6[183];
  v6[183] = 0;
  if (v8)
  {
    WebCore::EventHandler::updateCursor((WebCore::EventHandler *)v6);
    v7 = *(_DWORD *)v6;
    if (*(_DWORD *)v6)
      goto LABEL_7;
LABEL_14:
    __break(0xC471u);
    return;
  }
  if (!v7)
    goto LABEL_14;
LABEL_7:
  *(_DWORD *)v6 = v7 - 1;
  do
  {
    v9 = __ldaxr(v4);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v4));
  if (!v10)
  {
    atomic_store(1u, v4);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E31FE290;
    v11[1] = v4;
    v12 = v11;
    WTF::ensureOnMainThread();
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  }
}

double WTF::Detail::CallableWrapper<WebCore::Page::doAfterUpdateRendering(void)::$_2,void,WebCore::Document &>::call(int a1, WebCore::LocalDOMWindow **this)
{
  return WebCore::Document::enqueuePaintTimingEntryIfNeeded(this, (WTF::StringImpl *)this);
}

void WTF::Detail::CallableWrapper<WebCore::Page::doAfterUpdateRendering(void)::$_3,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  WebCore::FrameSelection *v2;
  int v3;

  v2 = *(WebCore::FrameSelection **)(a2 + 3064);
  ++*((_DWORD *)v2 + 7);
  WebCore::FrameSelection::updateAppearanceAfterUpdatingRendering(v2);
  v3 = *((_DWORD *)v2 + 7);
  if (v3)
    *((_DWORD *)v2 + 7) = v3 - 1;
  else
    __break(0xC471u);
}

WTF *WTF::Detail::CallableWrapper<WebCore::Page::doAfterUpdateRendering(void)::$_4,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  return WebCore::Document::updateHighlightPositions(this);
}

WTF::MonotonicTime *WTF::Detail::CallableWrapper<WebCore::Page::doAfterUpdateRendering(void)::$_5,void,WebCore::Document &>::call(WTF::MonotonicTime *result, WebCore::Document *a2)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  WTF::MonotonicTime *v11;
  WTF::MonotonicTime *v12;

  v2 = *((_QWORD *)a2 + 311);
  if (v2 && (*(_DWORD *)(v2 + 28) || *(_BYTE *)(v2 + 96)))
  {
    result = (WTF::MonotonicTime *)WTF::MonotonicTime::now(result);
    if (v4 - *(double *)(v2 + 8) > 1.0)
    {
      WTF::MonotonicTime::now(result);
      *(_QWORD *)(v2 + 8) = v5;
      v7 = WebCore::Document::eventLoop(a2, v6);
      v8 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
      v9 = v8;
      if (v8)
      {
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 + 1, v8));
      }
      v11 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v11 = &off_1E3400CC8;
      *((_QWORD *)v11 + 1) = v9;
      v12 = v11;
      WebCore::EventLoopTaskGroup::queueTask(v7, 25, (uint64_t *)&v12);
      result = v12;
      v12 = 0;
      if (result)
        return (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Page::doAfterUpdateRendering(void)::$_5::operator() const(WebCore::Document &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E3400CC8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::doAfterUpdateRendering(void)::$_5::operator() const(WebCore::Document &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3400CC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Page::doAfterUpdateRendering(void)::$_5::operator() const(WebCore::Document &)::{lambda(void)#1},void>::call(unsigned int *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)(v3 + 24) = v4 + 2;
      result = *(unsigned int **)(v3 + 2488);
      if (result)
      {
        result = WebCore::AppHighlightStorage::restoreUnrestoredAppHighlights((WebCore::AppHighlightStorage *)result);
        v4 = *(_DWORD *)(v3 + 24) - 2;
      }
      if (v4)
      {
        *(_DWORD *)(v3 + 24) = v4;
      }
      else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
    }
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Page::doAfterUpdateRendering(void)::$_6,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *result;
  void *v5;

  v2 = *(_QWORD *)(a2 + 1888);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      *(_DWORD *)(v3 + 24) += 2;
      result = (unsigned int *)WebCore::HTMLMediaElement::updateTextTrackRepresentationImageIfNeeded((WebCore::HTMLMediaElement *)v3);
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::doAfterUpdateRendering(void)::$_7,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 1944);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 16) + 1;
    *(_DWORD *)(v2 + 16) = v3;
    v4 = *(_QWORD *)(v2 + 400);
    if (v4 && *(_BYTE *)(v4 + 195))
    {
      result = (uint64_t)WebCore::RenderLayerCompositor::applyToCompositedLayerIncludingDescendants<WebCore::RenderLayerCompositor::updateEventRegions(void)::$_0>(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 144));
      v3 = *(_DWORD *)(v2 + 16);
    }
    if (v3)
    {
      *(_DWORD *)(v2 + 16) = v3 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::doAfterUpdateRendering(void)::$_8,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  return WebCore::Document::prepareCanvasesForDisplayOrFlushIfNeeded((uint64_t)this, this);
}

void WTF::Detail::CallableWrapper<WebCore::Page::didCompleteRenderingFrame(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  WebCore::RenderLayerCompositor *v4;
  int v5;
  WebCore::RenderLayerCompositor *v6;
  WebCore::RenderLayerCompositor *v7;
  WTF *v8;
  void *v9;

  v2 = *(unsigned __int8 *)(a2 + 3442);
  *(_BYTE *)(a2 + 3442) = 0;
  if (v2)
  {
    *(_BYTE *)(a2 + 3441) = 1;
    v3 = *(_QWORD *)(a2 + 1944);
    if (v3)
    {
      ++*(_DWORD *)(v3 + 16);
      v4 = *(WebCore::RenderLayerCompositor **)(v3 + 400);
      if (!v4)
      {
        v6 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v4 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v6, (WebCore::RenderView *)v3);
        v7 = *(WebCore::RenderLayerCompositor **)(v3 + 400);
        *(_QWORD *)(v3 + 400) = v4;
        if (v7)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v7);
          WTF::fastFree(v8, v9);
          v4 = *(WebCore::RenderLayerCompositor **)(v3 + 400);
        }
      }
      WebCore::RenderLayerCompositor::setRenderingIsSuppressed((uint64_t)v4, 1);
      v5 = *(_DWORD *)(v3 + 16);
      if (!v5)
      {
        __break(0xC471u);
        JUMPOUT(0x19602F79CLL);
      }
      *(_DWORD *)(v3 + 16) = v5 - 1;
    }
  }
}

void WTF::Detail::CallableWrapper<WebCore::Page::prioritizeVisibleResources(void)::$_1,void,WebCore::Document &>::call(uint64_t a1, WebCore::Document *this)
{
  uint64_t v2;
  WebCore::CachedResourceLoader *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF *v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int **v20;
  unsigned int **v21;
  unsigned int v22;
  unsigned int **v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  unsigned int v33;
  _BYTE v34[24];
  unsigned int **v35;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (WebCore::CachedResourceLoader *)*((_QWORD *)this + 90);
  if (!v3)
    v3 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(this, this);
  ++*(_DWORD *)v3;
  WebCore::CachedResourceLoader::visibleResourcesToPrioritize(v3, (uint64_t)&v31);
  v5 = *(unsigned int *)(v2 + 8);
  v6 = *(unsigned int *)(v2 + 12);
  v7 = v33 + v6;
  if (v7 > v5)
  {
    v8 = v5 + (v5 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= v7)
      v10 = v33 + v6;
    else
      v10 = v9;
    if (v10 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v11 = *(WTF **)v2;
    v12 = WTF::fastMalloc((WTF *)(8 * v10));
    *(_DWORD *)(v2 + 8) = v10;
    *(_QWORD *)v2 = v12;
    if ((_DWORD)v6)
    {
      v13 = (unsigned int **)v12;
      v14 = (unsigned int **)((char *)v11 + 8 * v6);
      v15 = (unsigned int **)v11;
      do
      {
        v16 = *v15;
        if (*v15)
        {
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 + 1, v16));
          *v13 = v16;
          v18 = *((_QWORD *)v16 + 1);
          if (v18)
          {
            v35 = v13;
            ++*(_DWORD *)(v18 + 548);
            v19 = *(_QWORD *)(v18 + 488);
            if (v19)
            {
              if (*(_QWORD *)(v19 + 8))
                WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v18 + 464), (uint64_t *)&v35, (uint64_t)v34);
            }
          }
        }
        else
        {
          *v13 = 0;
        }
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v15, v4);
        ++v13;
        ++v15;
      }
      while (v15 != v14);
    }
    if (v11)
    {
      if (*(WTF **)v2 == v11)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v11, v4);
    }
  }
  v20 = (unsigned int **)v31;
  if (!v33)
    goto LABEL_35;
  v21 = (unsigned int **)((char *)v31 + 8 * v33);
  v22 = *(_DWORD *)(v2 + 12);
  do
  {
    v23 = (unsigned int **)(*(_QWORD *)v2 + 8 * v22);
    v24 = *v20;
    if (*v20)
    {
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
      *v23 = v24;
      v26 = *((_QWORD *)v24 + 1);
      if (v26)
      {
        v35 = v23;
        ++*(_DWORD *)(v26 + 548);
        v27 = *(_QWORD *)(v26 + 488);
        if (v27)
        {
          if (*(_QWORD *)(v27 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v26 + 464), (uint64_t *)&v35, (uint64_t)v34);
        }
      }
    }
    else
    {
      *v23 = 0;
    }
    v22 = *(_DWORD *)(v2 + 12) + 1;
    *(_DWORD *)(v2 + 12) = v22;
    ++v20;
  }
  while (v20 != v21);
  v20 = (unsigned int **)v31;
  if (v33)
  {
    v30 = 8 * v33;
    do
    {
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v20++, v4);
      v30 -= 8;
    }
    while (v30);
    v20 = (unsigned int **)v31;
    if (!v31)
      goto LABEL_36;
  }
  else
  {
LABEL_35:
    if (!v20)
      goto LABEL_36;
  }
  v31 = 0;
  v32 = 0;
  WTF::fastFree((WTF *)v20, v4);
LABEL_36:
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::CachedResourceLoader::~CachedResourceLoader(v3, v4);
    WTF::fastFree(v28, v29);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

WebCore::ScriptedAnimationController *WTF::Detail::CallableWrapper<WebCore::Page::suspendScriptedAnimations(void)::$_0,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  return WebCore::Document::suspendScriptedAnimationControllerCallbacks(this);
}

WebCore::ScriptedAnimationController *WTF::Detail::CallableWrapper<WebCore::Page::resumeScriptedAnimations(void)::$_0,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  return WebCore::Document::resumeScriptedAnimationControllerCallbacks(this);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::preferredRenderingUpdateFramesPerSecond(WTF::OptionSet<WebCore::Page::PreferredRenderingUpdateOption>)::$_0,void,WebCore::Document &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  char v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a2 + 2936);
  if (!v2)
    return result;
  v3 = *(_DWORD *)v2 + 1;
  *(_DWORD *)v2 = v3;
  v4 = *(unsigned int **)(v2 + 56);
  if (!v4)
  {
    v7 = 0;
    v5 = 0;
    goto LABEL_31;
  }
  v5 = *(v4 - 1);
  v6 = &v4[8 * v5];
  if (!*(v4 - 3))
  {
    v7 = &v4[8 * v5];
LABEL_31:
    v6 = &v4[8 * v5];
    if (!v4)
      goto LABEL_10;
    goto LABEL_9;
  }
  v7 = *(unsigned int **)(v2 + 56);
  if ((_DWORD)v5)
  {
    v8 = 32 * v5;
    v7 = *(unsigned int **)(v2 + 56);
    while (*v7 + 1 <= 1)
    {
      v7 += 8;
      v8 -= 32;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_9:
  v4 += 8 * *(v4 - 1);
LABEL_10:
  if (v4 != v7)
  {
    v9 = 0;
    v10 = 0;
    v11 = 1;
    v12 = v7;
    do
    {
      v13 = *v12;
      if ((v11 & 1) != 0 || (v10 | (v9 << 8)) < v13)
      {
        v10 = *v12;
        v9 = v13 >> 8;
      }
      v14 = v12 + 8;
      v12 = v6;
      if (v14 != v6)
      {
        v12 = v14;
        while (*v12 + 1 <= 1)
        {
          v12 += 8;
          if (v12 == v6)
          {
            v12 = v6;
            break;
          }
        }
      }
      v11 = 0;
    }
    while (v12 != v4);
    if (v4 != v7)
    {
      v15 = v10 | (v9 << 8);
      v16 = *(_QWORD *)(result + 8);
      if (!*(_BYTE *)(v16 + 4) || *(_DWORD *)v16 < v15)
      {
        *(_DWORD *)v16 = v15;
        *(_BYTE *)(v16 + 4) = 1;
        v3 = *(_DWORD *)v2;
      }
    }
  }
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x19602FBB8);
  }
  *(_DWORD *)v2 = v3 - 1;
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::Page::userStyleSheetLocationChanged(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::ExtensionStyleSheets *v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::ExtensionStyleSheets *v7;
  uint64_t v8;

  v2 = (WebCore::ExtensionStyleSheets *)*((_QWORD *)a2 + 167);
  if (!v2)
  {
    v4 = WTF::fastMalloc((WTF *)0xA8);
    *(_DWORD *)v4 = 0;
    v5 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    *(_QWORD *)(v4 + 8) = v5;
    *(_QWORD *)(v4 + 144) = 0;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 157) = 0;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_BYTE *)(v4 + 64) = 0;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_QWORD *)(v4 + 133) = 0;
    v7 = (WebCore::ExtensionStyleSheets *)*((_QWORD *)a2 + 167);
    *((_QWORD *)a2 + 167) = v4;
    if (v7)
    {
      WebCore::ExtensionStyleSheets::~ExtensionStyleSheets(v7, a2);
      if (*(_DWORD *)v8)
      {
        *(_QWORD *)(v8 + 160) = 0;
        *(_OWORD *)(v8 + 128) = 0u;
        *(_OWORD *)(v8 + 144) = 0u;
        *(_OWORD *)(v8 + 96) = 0u;
        *(_OWORD *)(v8 + 112) = 0u;
        *(_OWORD *)(v8 + 64) = 0u;
        *(_OWORD *)(v8 + 80) = 0u;
        *(_OWORD *)(v8 + 32) = 0u;
        *(_OWORD *)(v8 + 48) = 0u;
        *(_OWORD *)v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v8, a2);
      }
    }
    v2 = (WebCore::ExtensionStyleSheets *)*((_QWORD *)a2 + 167);
  }
  ++*(_DWORD *)v2;
  WebCore::ExtensionStyleSheets::updatePageUserSheet(v2, a2);
  if (!*(_DWORD *)v2)
  {
    __break(0xC471u);
    JUMPOUT(0x19602FCACLL);
  }
  --*(_DWORD *)v2;
}

void WTF::Detail::CallableWrapper<WebCore::Page::userAgentChanged(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  WTF::StringImpl *v5;

  v2 = *((_QWORD *)a2 + 87);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 152);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 16);
      *(_DWORD *)(v3 + 16) = v4 + 1;
      v5 = *(WTF::StringImpl **)(v3 + 120);
      *(_QWORD *)(v3 + 120) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
        {
          WTF::StringImpl::destroy(v5, a2);
          v4 = *(_DWORD *)(v3 + 16) - 1;
          if (*(_DWORD *)(v3 + 16) != 1)
            goto LABEL_7;
          goto LABEL_10;
        }
        *(_DWORD *)v5 -= 2;
      }
      if (v4)
      {
LABEL_7:
        *(_DWORD *)(v3 + 16) = v4;
        return;
      }
LABEL_10:
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::invalidateStylesForAllLinks(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;

  v2 = *(uint64_t **)(a2 + 1440);
  if (v2)
  {
    ++*(_DWORD *)v2;
    result = (uint64_t)WebCore::VisitedLinkState::invalidateStyleForAllLinks(v2);
    if (*(_DWORD *)v2)
    {
      --*(_DWORD *)v2;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::invalidateStylesForLink(unsigned int)::$_0,void,WebCore::Document &>::call(uint64_t result, uint64_t a2, const WTF::AtomString *a3)
{
  uint64_t *v3;

  v3 = *(uint64_t **)(a2 + 1440);
  if (v3)
  {
    ++*(_DWORD *)v3;
    result = (uint64_t)WebCore::VisitedLinkState::invalidateStyleForLink(v3, (const WebCore::Element *)**(unsigned int **)(result + 8), a3);
    if (*(_DWORD *)v3)
    {
      --*(_DWORD *)v3;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::Page::invalidateInjectedStyleSheetCacheInAllFrames(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Style::Scope *v4;
  void *v5;
  int v6;

  v2 = a2[167];
  if (v2)
  {
    ++*(_DWORD *)v2;
    *(_BYTE *)(v2 + 64) = 0;
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
    *(_DWORD *)(v3 + 24) += 2;
    v4 = *(WebCore::Style::Scope **)(v3 + 1328);
    ++*((_DWORD *)v4 + 2);
    WebCore::Style::Scope::didChangeStyleSheetEnvironment(v4, a2);
    v6 = *((_DWORD *)v4 + 2);
    if (!v6)
      goto LABEL_10;
    *((_DWORD *)v4 + 2) = v6 - 1;
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
    if (!*(_DWORD *)v2)
    {
LABEL_10:
      __break(0xC471u);
      JUMPOUT(0x19602FF04);
    }
    --*(_DWORD *)v2;
  }
}

void WTF::Detail::CallableWrapper<WebCore::Page::setTimerThrottlingState(WebCore::Page::TimerThrottlingState)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  WebCore::ScriptExecutionContext::didChangeTimerAlignmentInterval((WebCore::ScriptExecutionContext *)(a2 + 192));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::dnsPrefetchingStateChanged(void)::$_0,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  return WebCore::Document::initDNSPrefetch(this, this);
}

void WTF::Detail::CallableWrapper<WebCore::Page::storageBlockingStateChanged(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 464) = *(_BYTE *)(*(_QWORD *)(a2 + 680) + 548);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::updateIsPlayingMedia(void)::$_0,void,WebCore::Document &>::call(uint64_t result, uint64_t a2)
{
  **(_DWORD **)(result + 8) |= *(_DWORD *)(a2 + 3264);
  return result;
}

WebCore::Page *WTF::Detail::CallableWrapper<WebCore::Page::setMuted(WTF::OptionSet<WebCore::MediaProducerMutedState>)::$_0,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  return WebCore::Document::pageMutedStateDidChange(this);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::stopMediaCapture(WebCore::MediaProducerMediaCaptureKind)::$_0,void,WebCore::Document &>::call(uint64_t a1, WebCore::Document *a2)
{
  return WebCore::Document::stopMediaCapture(a2, *(unsigned __int8 *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::setIsVisibleInternal(BOOL)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 3415))
  {
    *(_BYTE *)(a2 + 3415) = 0;
    v3 = *(_QWORD *)(a2 + 2352);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
      {
        if (*(_DWORD *)(v4 - 12))
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 32) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8));
      }
    }
    v6 = *(_QWORD *)(a2 + 2368);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        if (*(_DWORD *)(v7 - 12))
          return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::setIsVisibleInternal(BOOL)::$_1,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t *v5[5];
  uint64_t *v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a2 + 2936);
  if (v2)
  {
    v3 = *(_DWORD *)v2 + 1;
    *(_DWORD *)v2 = v3;
    if (*(_BYTE *)(v2 + 80))
    {
      *(_QWORD *)(v2 + 72) = 0x7FF8000000000000;
      *(_BYTE *)(v2 + 80) = 0;
      WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)(v2 + 16), &v6);
      result = (uint64_t)WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end((uint64_t *)(v2 + 16), v5);
      while (v7 != v5[1])
      {
        WebCore::DocumentTimeline::resumeAnimations(*(WebCore::DocumentTimeline **)(*v7 + 8));
        result = (uint64_t)WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v6);
      }
      v3 = *(_DWORD *)v2;
    }
    if (v3)
    {
      *(_DWORD *)v2 = v3 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::setIsVisibleInternal(BOOL)::$_2,void,WebCore::Document &>::call(uint64_t a1, WebCore::Document *a2)
{
  WebCore::SVGDocumentExtensions *v2;
  uint64_t result;

  v2 = (WebCore::SVGDocumentExtensions *)*((_QWORD *)a2 + 226);
  if (v2)
  {
    ++*(_DWORD *)v2;
    result = WebCore::SVGDocumentExtensions::unpauseAnimations(v2, a2);
    if (*(_DWORD *)v2)
    {
      --*(_DWORD *)v2;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::Page::setIsVisibleInternal(BOOL)::$_3,void,WebCore::Document &>::call(uint64_t a1, _QWORD *a2)
{
  WebCore::DocumentTimelinesController *v2;

  v2 = (WebCore::DocumentTimelinesController *)a2[367];
  if (v2)
  {
    ++*(_DWORD *)v2;
    WebCore::DocumentTimelinesController::suspendAnimations(v2, a2);
    if (*(_DWORD *)v2)
      --*(_DWORD *)v2;
    else
      __break(0xC471u);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::setIsVisibleInternal(BOOL)::$_4,void,WebCore::Document &>::call(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)a2[226];
  if (v2)
  {
    ++*(_DWORD *)v2;
    result = (uint64_t)WebCore::SVGDocumentExtensions::pauseAnimations(v2, a2);
    if (*(_DWORD *)v2)
    {
      --*(_DWORD *)v2;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::setIsVisibleInternal(BOOL)::$_5,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  if (!*(_BYTE *)(a2 + 3415))
  {
    *(_BYTE *)(a2 + 3415) = 1;
    v3 = *(_QWORD *)(a2 + 2352);
    if (v3)
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 32) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8));
    v5 = *(_QWORD *)(a2 + 2368);
    if (v5)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 32) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Page::setIsVisibleInternal(BOOL)::$_6,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  return WebCore::Document::visibilityStateChanged(this);
}

WTF ***WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::clear(WTF ***result, void *a2)
{
  WTF **v2;
  uint64_t v3;
  WTF **v4;
  WTF *v5;

  v2 = *result;
  if (*result)
  {
    *result = 0;
    v3 = *((unsigned int *)v2 - 1);
    if ((_DWORD)v3)
    {
      v4 = v2;
      do
      {
        v5 = *v4;
        if (*v4 != (WTF *)-1)
        {
          *v4 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 1)
              WTF::fastFree(v5, a2);
            else
              --*(_DWORD *)v5;
          }
        }
        ++v4;
        --v3;
      }
      while (v3);
    }
    return (WTF ***)WTF::fastFree((WTF *)(v2 - 2), a2);
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::Page::hiddenPageCSSAnimationSuspensionStateChanged(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4[5];
  uint64_t *v5;
  uint64_t *v6;

  v2 = a2[367];
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    ++*(_DWORD *)v2;
    if ((*(_QWORD *)(*(_QWORD *)(v3 + 112) + 680) & 0x8000) != 0)
    {
      WebCore::DocumentTimelinesController::suspendAnimations((WebCore::DocumentTimelinesController *)v2, a2);
    }
    else if (*(_BYTE *)(v2 + 80))
    {
      *(_QWORD *)(v2 + 72) = 0x7FF8000000000000;
      *(_BYTE *)(v2 + 80) = 0;
      WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)(v2 + 16), &v5);
      WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end((uint64_t *)(v2 + 16), v4);
      while (v6 != v4[1])
      {
        WebCore::DocumentTimeline::resumeAnimations(*(WebCore::DocumentTimeline **)(*v6 + 8));
        WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v5);
      }
    }
    if (*(_DWORD *)v2)
      --*(_DWORD *)v2;
    else
      __break(0xC471u);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::captionPreferencesChanged(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = (uint64_t *)(a2 + 1872);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33A38B0;
  v5 = v3;
  WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v2, &v5);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::notifyToInjectUserScripts(void)::$_0,void,WebCore::LocalFrame &>::call(int a1, WebCore::LocalFrame *this)
{
  return WebCore::LocalFrame::injectUserScriptsAwaitingNotification((uint64_t)this, this);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,unsigned long long>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,unsigned long long,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF **)(v5 + 16 * v11);
      if (*v13 != (WTF *)-1)
      {
        if (WTF::equal(*v13, 0, v10))
        {
          v14 = *v13;
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v9);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        else
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)(v5 + 16 * v11), v9);
          v18 = 0;
          do
          {
            v19 = v17 & v16;
            v20 = WTF::equal(*(WTF **)(v15 + 16 * v19), 0, v10);
            v17 = ++v18 + v19;
          }
          while (!v20);
          v21 = v15 + 16 * v19;
          v22 = *(WTF::StringImpl **)v21;
          *(_QWORD *)v21 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v9);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = *v13;
          *v13 = 0;
          v24 = *(_QWORD *)(v5 + 16 * v11 + 8);
          *(_QWORD *)v21 = v23;
          *(_QWORD *)(v21 + 8) = v24;
          v25 = *v13;
          *v13 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v9);
            else
              *(_DWORD *)v25 -= 2;
          }
          if (v13 == a3)
            v12 = v21;
        }
      }
      ++v11;
    }
    while (v11 != v6);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v12;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::setSessionID(PAL::SessionID)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::Document::privateBrowsingStateDidChange(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1008));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::setPlaybackTarget(WTF::ObjectIdentifierGeneric<WebCore::PlaybackTargetClientContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaPlaybackTarget,WTF::RawPtrTraits<WebCore::MediaPlaybackTarget>,WTF::DefaultRefDerefTraits<WebCore::MediaPlaybackTarget>> &&)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t result;
  _DWORD *v7;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = **(_QWORD **)(a1 + 8);
  v5 = *(_DWORD **)v3;
  v5[2] = *(_DWORD *)(*(_QWORD *)v3 + 8) + 1;
  v7 = v5;
  result = WebCore::Document::setPlaybackTarget(a2, v4, (uint64_t *)&v7);
  if (v5[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
  --v5[2];
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::playbackTargetAvailabilityDidChange(WTF::ObjectIdentifierGeneric<WebCore::PlaybackTargetClientContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL)::$_0,void,WebCore::Document &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD *)(a2 + 2720);
  if (v2)
  {
    v3 = **(_QWORD **)(result + 8);
    v4 = *(_DWORD *)(v2 - 8);
    v5 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v2 + 16 * v8);
    if (v9 != v3)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)(v2 + 16 * v8);
        ++v10;
        if (v9 == v3)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v2 - 4))
      return (*(uint64_t (**)(_QWORD, BOOL))(**(_QWORD **)(v2 + 16 * v8 + 8) + 24))(*(_QWORD *)(v2 + 16 * v8 + 8), **(_BYTE **)(result + 16) != 0);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::setShouldPlayToPlaybackTarget(WTF::ObjectIdentifierGeneric<WebCore::PlaybackTargetClientContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL)::$_0,void,WebCore::Document &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD *)(a2 + 2720);
  if (v2)
  {
    v3 = **(_QWORD **)(result + 8);
    v4 = *(_DWORD *)(v2 - 8);
    v5 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v2 + 16 * v8);
    if (v9 != v3)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)(v2 + 16 * v8);
        ++v10;
        if (v9 == v3)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v2 - 4))
      return (*(uint64_t (**)(_QWORD, BOOL))(**(_QWORD **)(v2 + 16 * v8 + 8) + 32))(*(_QWORD *)(v2 + 16 * v8 + 8), **(_BYTE **)(result + 16) != 0);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::playbackTargetPickerWasDismissed(WTF::ObjectIdentifierGeneric<WebCore::PlaybackTargetClientContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebCore::Document &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD *)(a2 + 2720);
  if (v2)
  {
    v3 = **(_QWORD **)(result + 8);
    v4 = *(_DWORD *)(v2 - 8);
    v5 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v2 + 16 * v8);
    if (v9 != v3)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)(v2 + 16 * v8);
        ++v10;
        if (v9 == v3)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v2 - 4))
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16 * v8 + 8) + 40))(*(_QWORD *)(v2 + 16 * v8 + 8));
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::Page::setAllowsMediaDocumentInlinePlayback(BOOL)::$_0,void,WebCore::HTMLMediaElement &>::call(int a1, WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement::allowsMediaDocumentInlinePlaybackChanged(this);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::accessibilitySettingsDidChange(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, _QWORD *a2)
{
  WebCore::Style::Scope *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  WTF *v18;
  void *v19;

  v3 = (WebCore::Style::Scope *)a2[166];
  ++*((_DWORD *)v3 + 2);
  WebCore::Style::Scope::evaluateMediaQueriesForAccessibilitySettingsChange(v3, (uint64_t)a2);
  v11 = *((_DWORD *)v3 + 2);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x196030A2CLL);
  }
  *((_DWORD *)v3 + 2) = v11 - 1;
  result = (uint64_t)WebCore::Document::updateElementsAffectedByMediaQueries((WebCore::Document *)a2, v4, v5, v6, v7, v8, v9, v10);
  if ((a2[258] & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((a2[258] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v13 = 4;
  }
  else
  {
    result = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a2 + 254));
    v13 = 260;
  }
  v14 = a2[66];
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 24);
      if (v16)
      {
        v17 = *(_DWORD **)(v16 + 8);
        if (v17)
        {
          ++*v17;
          result = WebCore::Page::scheduleRenderingUpdate((uint64_t)v17, v13);
          if (*v17 == 1)
          {
            WebCore::Page::~Page((uint64_t)v17);
            return WTF::fastFree(v18, v19);
          }
          else
          {
            --*v17;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::appearanceDidChange(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, _QWORD *a2)
{
  WebCore::Style::Scope *v3;
  uint64_t v4;
  int v5;
  WebCore::Style::Scope *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF *v24;
  void *v25;

  v3 = (WebCore::Style::Scope *)a2[166];
  ++*((_DWORD *)v3 + 2);
  WebCore::Style::Scope::didChangeStyleSheetEnvironment(v3, a2);
  v5 = *((_DWORD *)v3 + 2);
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x196030B9CLL);
  }
  *((_DWORD *)v3 + 2) = v5 - 1;
  v6 = (WebCore::Style::Scope *)a2[166];
  ++*((_DWORD *)v6 + 2);
  WebCore::Style::Scope::evaluateMediaQueriesForAccessibilitySettingsChange(v6, v4);
  v14 = *((_DWORD *)v6 + 2);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x196030BBCLL);
  }
  *((_DWORD *)v6 + 2) = v14 - 1;
  result = (uint64_t)WebCore::Document::updateElementsAffectedByMediaQueries((WebCore::Document *)a2, v7, v8, v9, v10, v11, v12, v13);
  if ((a2[258] & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((a2[258] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v16 = 4;
  }
  else
  {
    result = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a2 + 254));
    v16 = 260;
  }
  v17 = a2[66];
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
      {
        v20 = *(_DWORD **)(v19 + 8);
        if (v20)
        {
          ++*v20;
          result = WebCore::Page::scheduleRenderingUpdate((uint64_t)v20, v16);
          if (*v20 == 1)
          {
            WebCore::Page::~Page((uint64_t)v20);
            result = WTF::fastFree(v24, v25);
          }
          else
          {
            --*v20;
          }
        }
      }
    }
    v21 = a2[66];
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
      {
        v23 = *(_DWORD **)(v22 + 288);
        if (v23)
        {
          ++v23[2];
          result = WebCore::LocalFrameView::invalidateScrollbarsForAllScrollableAreas((uint64_t)v23);
          if (v23[2] == 1)
            return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
          else
            --v23[2];
        }
      }
    }
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Page::setUnobscuredSafeAreaInsets(WebCore::RectEdges<float> const&)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  void *v5;
  unsigned int v6;
  WebCore::ConstantPropertyMap *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unsigned int *result;
  void *v13;

  v2 = *(_QWORD *)(a2 + 1936);
  if (!v2)
  {
    v2 = WTF::fastMalloc((WTF *)0x18);
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 8) = 0;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
    do
      v6 = __ldaxr(v4);
    while (__stlxr(v6 + 1, v4));
    *(_QWORD *)(v2 + 16) = v4;
    v7 = *(WebCore::ConstantPropertyMap **)(a2 + 1936);
    *(_QWORD *)(a2 + 1936) = v2;
    if (v7)
    {
      WebCore::ConstantPropertyMap::~ConstantPropertyMap(v7, v5);
      WTF::fastFree(v8, v9);
      v2 = *(_QWORD *)(a2 + 1936);
    }
  }
  WebCore::ConstantPropertyMap::updateConstantsForSafeAreaInsets((WebCore::ConstantPropertyMap *)v2);
  v10 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
  *(_DWORD *)(v10 + 24) += 2;
  result = (unsigned int *)WebCore::Document::invalidateMatchedPropertiesCacheAndForceStyleRecalc((WebCore::Document *)v10, v11);
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v10, v13);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::Page::setUseSystemAppearance(BOOL)::$_0,void,WebCore::Document &>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  WebCore::Style::Scope *v5;
  void *v6;
  int v7;
  uint64_t v8;
  WebCore::Style::Scope *v9;
  int v10;

  v2 = a2[167];
  if (!v2)
    return;
  ++*(_DWORD *)v2;
  v3 = *(_DWORD **)(v2 + 16);
  if (v3)
  {
    *(_QWORD *)(v2 + 16) = 0;
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
    *(_DWORD *)(v8 + 24) += 2;
    v9 = *(WebCore::Style::Scope **)(v8 + 1328);
    ++*((_DWORD *)v9 + 2);
    WebCore::Style::Scope::didChangeStyleSheetEnvironment(v9, a2);
    v10 = *((_DWORD *)v9 + 2);
    if (!v10)
    {
LABEL_21:
      __break(0xC471u);
      JUMPOUT(0x196030DD4);
    }
    *((_DWORD *)v9 + 2) = v10 - 1;
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  *(_BYTE *)(v2 + 64) = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(WebCore::Style::Scope **)(v4 + 1328);
  ++*((_DWORD *)v5 + 2);
  WebCore::Style::Scope::didChangeStyleSheetEnvironment(v5, a2);
  v7 = *((_DWORD *)v5 + 2);
  if (!v7)
    goto LABEL_21;
  *((_DWORD *)v5 + 2) = v7 - 1;
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (!*(_DWORD *)v2)
  {
    __break(0xC471u);
    JUMPOUT(0x196030DF4);
  }
  --*(_DWORD *)v2;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Page::setFullscreenInsets(WebCore::RectEdges<float> const&)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  void *v5;
  unsigned int v6;
  WebCore::ConstantPropertyMap *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unsigned int *result;
  void *v13;

  v2 = *(_QWORD *)(a2 + 1936);
  if (!v2)
  {
    v2 = WTF::fastMalloc((WTF *)0x18);
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 8) = 0;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
    do
      v6 = __ldaxr(v4);
    while (__stlxr(v6 + 1, v4));
    *(_QWORD *)(v2 + 16) = v4;
    v7 = *(WebCore::ConstantPropertyMap **)(a2 + 1936);
    *(_QWORD *)(a2 + 1936) = v2;
    if (v7)
    {
      WebCore::ConstantPropertyMap::~ConstantPropertyMap(v7, v5);
      WTF::fastFree(v8, v9);
      v2 = *(_QWORD *)(a2 + 1936);
    }
  }
  WebCore::ConstantPropertyMap::updateConstantsForFullscreen((WebCore::ConstantPropertyMap *)v2);
  v10 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
  *(_DWORD *)(v10 + 24) += 2;
  result = (unsigned int *)WebCore::Document::invalidateMatchedPropertiesCacheAndForceStyleRecalc((WebCore::Document *)v10, v11);
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v10, v13);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Page::setFullscreenAutoHideDuration(WTF::Seconds)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v5;
  void *v6;
  unsigned int v7;
  WebCore::ConstantPropertyMap *v8;
  WTF *v9;
  void *v10;

  v3 = *(_QWORD *)(a2 + 1936);
  if (!v3)
  {
    v3 = WTF::fastMalloc((WTF *)0x18);
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 8) = 0;
    v5 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 + 1, v5));
    *(_QWORD *)(v3 + 16) = v5;
    v8 = *(WebCore::ConstantPropertyMap **)(a2 + 1936);
    *(_QWORD *)(a2 + 1936) = v3;
    if (v8)
    {
      WebCore::ConstantPropertyMap::~ConstantPropertyMap(v8, v6);
      WTF::fastFree(v9, v10);
      v3 = *(_QWORD *)(a2 + 1936);
    }
  }
  return WebCore::ConstantPropertyMap::setFullscreenAutoHideDuration((WebCore::ConstantPropertyMap *)v3, **(double **)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::forEachMediaElement(WTF::Function<void ()(WebCore::HTMLMediaElement &)> const&)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::Document::forEachMediaElement(a2, *(_QWORD *)(a1 + 8));
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>,WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>,WTF::HashTraits<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>,WTF::HashTraits<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_3;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = v5 << (6 * v6 >= 2 * v5);
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v10 = 0;
  if (v5)
  {
    v12 = v5;
    v13 = (uint64_t *)v4;
    do
    {
      v17 = v10;
      if (*v13 != -1)
      {
        if (*v13)
        {
          v14 = WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::reinsert(*a1, v13);
          v15 = (_DWORD *)*v13;
          *v13 = 0;
          if (v15)
          {
            if (v15[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[2];
          }
          v16 = v17;
          if (v13 == a2)
            v16 = v14;
          v17 = v16;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v13;
      --v12;
      v10 = v17;
    }
    while (v12);
    goto LABEL_18;
  }
  result = 0;
  if (v4)
  {
LABEL_18:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v10;
  }
  return result;
}

WTF::StringImpl **WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::lookup<WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>,WTF::StringView>(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  int v20;
  unsigned int v21;
  int v22;
  WTF::StringImpl *v23;
  unsigned __int8 *v24;
  unint64_t v25;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;

  if (!*(_QWORD *)a1)
    return 0;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = v4 - 1;
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(unsigned __int8 **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = -1640531527;
  if ((v8 & 0xFF00000000) != 0)
  {
    if ((v8 & 0xFFFFFFFE) != 0)
    {
      v10 = 0;
      do
      {
        v11 = ((v9 + v7[v10]) << 16) ^ (v7[v10 + 1] << 11) ^ (v9 + v7[v10]);
        v9 = v11 + (v11 >> 11);
        v12 = v10 + 3;
        v10 += 2;
      }
      while (v12 < v8);
    }
    if ((v8 & 1) == 0)
      goto LABEL_7;
    v27 = v7[v8 - 1];
LABEL_26:
    v9 = ((v9 + v27) ^ ((v9 + v27) << 11)) + (((v9 + v27) ^ ((v9 + v27) << 11)) >> 17);
    goto LABEL_7;
  }
  if ((v8 & 0xFFFFFFFE) != 0)
  {
    v28 = 0;
    do
    {
      v29 = ((v9 + *(unsigned __int16 *)&v7[2 * v28]) << 16) ^ (*(unsigned __int16 *)&v7[2 * v28 + 2] << 11) ^ (v9 + *(unsigned __int16 *)&v7[2 * v28]);
      v9 = v29 + (v29 >> 11);
      v30 = v28 + 3;
      v28 += 2;
    }
    while (v30 < v8);
  }
  if ((v8 & 1) != 0)
  {
    v27 = *(unsigned __int16 *)&v7[2 * v8 - 2];
    goto LABEL_26;
  }
LABEL_7:
  v13 = (v9 ^ (8 * v9)) + ((v9 ^ (8 * v9)) >> 5);
  v14 = (v13 ^ (4 * v13)) + ((v13 ^ (4 * v13)) >> 15);
  v15 = (v14 ^ (v14 << 10)) & 0xFFFFFF;
  if (v15)
    v16 = v15;
  else
    v16 = 0x800000;
  v17 = (v16 ^ v6) & v5;
  v18 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8 * v17);
  v19 = *v18;
  if (*v18)
  {
    v20 = -1;
    do
    {
      v21 = *((_DWORD *)v19 + 4);
      v22 = v21 < 0x100 ? WTF::StringImpl::hashSlowCase(v19) : v21 >> 8;
      if (++v20 > ((v17 + v4 - ((v22 ^ v6) & v5)) & v5))
        break;
      if (v22 == v16)
      {
        v23 = *v18;
        if (*v18)
        {
          v24 = (unsigned __int8 *)*((_QWORD *)v23 + 1);
          v25 = *((unsigned int *)v23 + 1) | ((unint64_t)((*((_DWORD *)v23 + 4) >> 2) & 1) << 32);
        }
        else
        {
          v24 = 0;
          v25 = 0x100000000;
        }
        if (WTF::operator==(v24, v25, *(unsigned __int8 **)a2, *(_QWORD *)(a2 + 8)))
          return v18;
      }
      v17 = (v17 + 1) & v5;
      v18 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8 * v17);
      v19 = *v18;
    }
    while (*v18);
  }
  return 0;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::Page::applicationWillResignActive(void)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  unsigned __int8 *result;

  v2 = *(_QWORD *)(a2 + 1136);
  if (v2)
  {
    v3 = *(unsigned __int8 **)v2;
    if (__ldaxr(*(unsigned __int8 **)v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_6:
    ++*((_QWORD *)v3 + 1);
    v5 = __ldxr(v3);
    if (v5 == 1)
    {
      if (!__stlxr(0, v3))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_11:
    (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 1096))(*(_QWORD *)(v2 + 72));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
  }
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::Page::applicationDidBecomeActive(void)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  unsigned __int8 *result;

  v2 = *(_QWORD *)(a2 + 1136);
  if (v2)
  {
    v3 = *(unsigned __int8 **)v2;
    if (__ldaxr(*(unsigned __int8 **)v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_6:
    ++*((_QWORD *)v3 + 1);
    v5 = __ldxr(v3);
    if (v5 == 1)
    {
      if (!__stlxr(0, v3))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_11:
    (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 1104))(*(_QWORD *)(v2 + 72));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Page::startApplePayAMSUISession(WTF::URL const&,WebCore::ApplePayAMSUIPaymentHandler &,WebCore::ApplePayAMSUIRequest const&)::$_0,void,std::optional<BOOL> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34013D0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::startApplePayAMSUISession(WTF::URL const&,WebCore::ApplePayAMSUIPaymentHandler &,WebCore::ApplePayAMSUIRequest const&)::$_0,void,std::optional<BOOL> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34013D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::Page::startApplePayAMSUISession(WTF::URL const&,WebCore::ApplePayAMSUIPaymentHandler &,WebCore::ApplePayAMSUIRequest const&)::$_0,void,std::optional<BOOL> &&>::call(WTF::StringImpl *result, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      ++*(_DWORD *)v3;
      v4 = *((_QWORD *)result + 2);
      if (*(_QWORD *)(v3 + 1248) == v4)
      {
        *(_QWORD *)(v3 + 1248) = 0;
        if (v4)
        {
          result = WebCore::ApplePayAMSUIPaymentHandler::finishSession((WTF::StringImpl *)v4, a2);
          if (*(_DWORD *)(v4 + 104) == 1)
            result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 96) + 8))(v4 + 96);
          else
            --*(_DWORD *)(v4 + 104);
        }
      }
      if (*(_DWORD *)v3 == 1)
      {
        WebCore::Page::~Page(v3);
        return (WTF::StringImpl *)WTF::fastFree(v5, v6);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Page::didFinishLoadingImageForElement(WebCore::HTMLImageElement &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34013F8;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::didFinishLoadingImageForElement(WebCore::HTMLImageElement &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34013F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::Page::didFinishLoadingImageForElement(WebCore::HTMLImageElement &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  WebCore::Document *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WebCore::HTMLImageElement *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::ImageAnalysisQueue *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  void *v18;
  _QWORD *v19;
  WebCore::Editor *v20;
  void *v21;
  WebCore::Editor *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 8) + 528);
  if (!v1)
    return;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return;
  v4 = (unsigned int *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(WebCore::Document **)(v2 + 296);
  v7 = *((_QWORD *)v6 + 382);
  if (!v7)
  {
    v20 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v20, v6);
    v22 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v20;
    if (v22)
    {
      WebCore::Editor::~Editor(v22, v21);
      if (*(_DWORD *)v23)
      {
        *(_QWORD *)(v23 + 496) = 0;
        *(_OWORD *)(v23 + 464) = 0u;
        *(_OWORD *)(v23 + 480) = 0u;
        *(_OWORD *)(v23 + 432) = 0u;
        *(_OWORD *)(v23 + 448) = 0u;
        *(_OWORD *)(v23 + 400) = 0u;
        *(_OWORD *)(v23 + 416) = 0u;
        *(_OWORD *)(v23 + 368) = 0u;
        *(_OWORD *)(v23 + 384) = 0u;
        *(_OWORD *)(v23 + 336) = 0u;
        *(_OWORD *)(v23 + 352) = 0u;
        *(_OWORD *)(v23 + 304) = 0u;
        *(_OWORD *)(v23 + 320) = 0u;
        *(_OWORD *)(v23 + 272) = 0u;
        *(_OWORD *)(v23 + 288) = 0u;
        *(_OWORD *)(v23 + 240) = 0u;
        *(_OWORD *)(v23 + 256) = 0u;
        *(_OWORD *)(v23 + 208) = 0u;
        *(_OWORD *)(v23 + 224) = 0u;
        *(_OWORD *)(v23 + 176) = 0u;
        *(_OWORD *)(v23 + 192) = 0u;
        *(_OWORD *)(v23 + 144) = 0u;
        *(_OWORD *)(v23 + 160) = 0u;
        *(_OWORD *)(v23 + 112) = 0u;
        *(_OWORD *)(v23 + 128) = 0u;
        *(_OWORD *)(v23 + 80) = 0u;
        *(_OWORD *)(v23 + 96) = 0u;
        *(_OWORD *)(v23 + 48) = 0u;
        *(_OWORD *)(v23 + 64) = 0u;
        *(_OWORD *)(v23 + 16) = 0u;
        *(_OWORD *)(v23 + 32) = 0u;
        *(_OWORD *)v23 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v23, v24);
      }
    }
    v7 = *((_QWORD *)v6 + 382);
  }
  v8 = *(_DWORD *)v7 + 1;
  *(_DWORD *)v7 = v8;
  v9 = *(_QWORD *)(v7 + 496);
  if (v9)
  {
    if (*(_DWORD *)(v9 - 12))
    {
      v25 = (_QWORD *)(v7 + 496);
      if (WTF::HashSet<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>((uint64_t *)(v7 + 496), *(void **)(a1 + 8)))
      {
        if (!*v25 || !*(_DWORD *)(*v25 - 12))
        {
          v26 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8);
          *(_DWORD *)(v26 + 24) += 2;
          WebCore::Document::updateLayout(v26, 0, 0);
          *(_BYTE *)(*(_QWORD *)(v26 + 3064) + 24) = 1;
          WebCore::Editor::revealSelectionAfterEditingOperation(v7, (uint64_t)&WebCore::ScrollAlignment::alignCenterIfNeeded, (BOOL *)1);
          if (*(_DWORD *)(v26 + 24) == 2)
          {
            if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v26, v27);
          }
          else
          {
            *(_DWORD *)(v26 + 24) -= 2;
          }
        }
      }
    }
    v8 = *(_DWORD *)v7;
    if (*(_DWORD *)v7)
      goto LABEL_8;
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x196031844);
  }
  if (!v8)
    goto LABEL_32;
LABEL_8:
  *(_DWORD *)v7 = v8 - 1;
  v10 = *(WebCore::HTMLImageElement **)(a1 + 8);
  v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 5) + 8) + 528);
  if (v11)
  {
    if (v2 == *(_QWORD *)(v11 + 8))
    {
      v12 = *(_QWORD *)(v2 + 24);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          ++*(_DWORD *)v13;
          v14 = *(WebCore::ImageAnalysisQueue **)(v13 + 1216);
          if (v14)
          {
            WebCore::ImageAnalysisQueue::enqueueIfNeeded(v14, v10);
            v10 = *(WebCore::HTMLImageElement **)(a1 + 8);
          }
          (*(void (**)(_QWORD, WebCore::HTMLImageElement *))(**(_QWORD **)(*(_QWORD *)(v13 + 48) + 16)
                                                                      + 384))(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 16), v10);
          if (*(_DWORD *)v13 == 1)
          {
            WebCore::Page::~Page(v13);
            WTF::fastFree(v17, v18);
          }
          else
          {
            --*(_DWORD *)v13;
          }
        }
      }
    }
  }
  do
  {
    v15 = __ldaxr(v4);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v4));
  if (!v16)
  {
    atomic_store(1u, v4);
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E31FE290;
    v19[1] = v4;
    v28 = v19;
    WTF::ensureOnMainThread();
    if (v28)
      (*(void (**)(_QWORD *))(*v28 + 8))(v28);
  }
}

void WTF::Detail::CallableWrapper<WebCore::Page::recomputeTextAutoSizingInAllFrames(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2, const WebCore::RenderObject *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  const WebCore::Element *v21;
  void *v22;
  __int128 v23;
  int v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  __int128 v33;
  int v34;

  v3 = *(_QWORD *)(a2 + 1944);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 16) + 1;
    *(_DWORD *)(v3 + 16) = v4;
    v5 = *(unsigned int *)(v3 + 64);
    if (v5 | ((unint64_t)*(unsigned __int8 *)(v3 + 68) << 32))
    {
      v6 = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(v3 + 68) << 32)) + 8);
      if (v6)
      {
        if ((*(_BYTE *)(v6 + 45) & 2) != 0)
        {
          while (1)
          {
            v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
            if (!v7)
            {
              if (v6 == v3)
                goto LABEL_33;
              v8 = *(unsigned int *)(v6 + 47);
              if (!(v8 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)))
                break;
              v7 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8);
              if (!v7)
                break;
            }
LABEL_19:
            v6 = v7;
            if ((*(_BYTE *)(v7 + 45) & 2) == 0)
              goto LABEL_23;
          }
          for (i = *(_QWORD *)(v6 + 32); i; i = *(_QWORD *)(v10 + 32))
          {
            v10 = *(_QWORD *)(i + 8);
            if (!v10 || v10 == v3)
              break;
            v12 = *(unsigned int *)(v10 + 47);
            if (v12 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32))
            {
              v7 = *(_QWORD *)((v12 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)) + 8);
              if (v7)
                goto LABEL_19;
            }
          }
        }
        else
        {
          v7 = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(v3 + 68) << 32)) + 8);
          do
          {
LABEL_23:
            if ((*(_BYTE *)(v7 + 45) & 1) == 0)
            {
              v13 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
              if (v13)
              {
                if ((*(_WORD *)(v13 + 28) & 8) == 0)
                  goto LABEL_37;
                *(_DWORD *)(v13 + 24) += 2;
                WebCore::Style::Adjuster::adjustmentForTextAutosizing((WebCore::Style::Adjuster *)(v7 + 80), (const WebCore::RenderStyle *)v13, (uint64_t)&v33);
                if (BYTE4(v33) || BYTE12(v33) || BYTE1(v34))
                {
                  v25 = 0;
                  v15 = *(_DWORD **)(v7 + 88);
                  ++*v15;
                  v16 = *(_QWORD *)(v7 + 96);
                  v17 = *(_DWORD **)(v7 + 104);
                  v26 = v15;
                  v27 = v16;
                  ++*v17;
                  v28 = v17;
                  v18 = *(_DWORD **)(v7 + 112);
                  ++*v18;
                  v19 = *(_QWORD *)(v7 + 120);
                  v29 = v18;
                  v30 = v19;
                  v31 = 0;
                  v20 = *(_DWORD **)(v7 + 136);
                  ++*v20;
                  v32 = v20;
                  v24 = v34;
                  v23 = v33;
                  WebCore::Style::Adjuster::adjustForTextAutosizing((uint64_t)&v25, (WebCore::RenderStyle *)v13, (uint64_t)&v23);
                  WebCore::RenderElement::setStyle(v7, (WebCore::Style *)&v25, 0, v21);
                  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v25, v22);
                }
                if (*(_DWORD *)(v13 + 24) == 2)
                {
                  if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
                }
                else
                {
                  *(_DWORD *)(v13 + 24) -= 2;
                }
              }
            }
            v7 = WebCore::RenderTraversal::next<WebCore::RenderElement,WebCore::RenderElement>(v7, (WebCore::RenderObject *)v3, a3);
          }
          while (v7);
        }
      }
LABEL_33:
      v4 = *(_DWORD *)(v3 + 16);
    }
    if (!v4)
    {
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x196031AF0);
    }
    *(_DWORD *)(v3 + 16) = v4 - 1;
  }
}

void WTF::Detail::CallableWrapper<WebCore::Page::injectUserStyleSheet(WebCore::UserStyleSheet &)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  WebCore::ExtensionStyleSheets *v3;
  uint64_t v5;
  unsigned int *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  WebCore::ExtensionStyleSheets *v9;
  uint64_t v10;
  void *v11;

  v3 = *(WebCore::ExtensionStyleSheets **)(a2 + 1336);
  if (!v3)
  {
    v5 = WTF::fastMalloc((WTF *)0xA8);
    *(_DWORD *)v5 = 0;
    v6 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 + 1, v6));
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 144) = 0;
    *(_QWORD *)(v5 + 152) = 0;
    *(_QWORD *)(v5 + 157) = 0;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_BYTE *)(v5 + 64) = 0;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_QWORD *)(v5 + 133) = 0;
    v9 = *(WebCore::ExtensionStyleSheets **)(a2 + 1336);
    *(_QWORD *)(a2 + 1336) = v5;
    if (v9)
    {
      WebCore::ExtensionStyleSheets::~ExtensionStyleSheets(v9, v7);
      if (*(_DWORD *)v10)
      {
        *(_QWORD *)(v10 + 160) = 0;
        *(_OWORD *)(v10 + 128) = 0u;
        *(_OWORD *)(v10 + 144) = 0u;
        *(_OWORD *)(v10 + 96) = 0u;
        *(_OWORD *)(v10 + 112) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)(v10 + 80) = 0u;
        *(_OWORD *)(v10 + 32) = 0u;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)v10 = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v10, v11);
      }
    }
    v3 = *(WebCore::ExtensionStyleSheets **)(a2 + 1336);
  }
  ++*(_DWORD *)v3;
  WebCore::ExtensionStyleSheets::injectPageSpecificUserStyleSheet(v3, *(const WebCore::UserStyleSheet **)(a1 + 8));
  if (!*(_DWORD *)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x196031C0CLL);
  }
  --*(_DWORD *)v3;
}

void WTF::Detail::CallableWrapper<WebCore::Page::removeInjectedUserStyleSheet(WebCore::UserStyleSheet &)::$_1,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WebCore::ExtensionStyleSheets *v4;
  uint64_t v6;
  unsigned int *v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  WebCore::ExtensionStyleSheets *v10;
  uint64_t v11;
  void *v12;

  v4 = *(WebCore::ExtensionStyleSheets **)(a2 + 1336);
  if (!v4)
  {
    v6 = WTF::fastMalloc((WTF *)0xA8);
    *(_DWORD *)v6 = 0;
    v7 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 + 1, v7));
    *(_QWORD *)(v6 + 8) = v7;
    *(_QWORD *)(v6 + 144) = 0;
    *(_QWORD *)(v6 + 152) = 0;
    *(_QWORD *)(v6 + 157) = 0;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_BYTE *)(v6 + 64) = 0;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_QWORD *)(v6 + 133) = 0;
    v10 = *(WebCore::ExtensionStyleSheets **)(a2 + 1336);
    *(_QWORD *)(a2 + 1336) = v6;
    if (v10)
    {
      WebCore::ExtensionStyleSheets::~ExtensionStyleSheets(v10, v8);
      if (*(_DWORD *)v11)
      {
        *(_QWORD *)(v11 + 160) = 0;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)v11 = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v11, v12);
      }
    }
    v4 = *(WebCore::ExtensionStyleSheets **)(a2 + 1336);
  }
  ++*(_DWORD *)v4;
  WebCore::ExtensionStyleSheets::removePageSpecificUserStyleSheet(v4, *(const WTF::StringImpl ***)(a1 + 8), a3);
  if (!*(_DWORD *)v4)
  {
    __break(0xC471u);
    JUMPOUT(0x196031D28);
  }
  --*(_DWORD *)v4;
}

void WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  WebCore::TextRecognitionResult *v32;
  void *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  _QWORD *v53;
  _QWORD v54[7];

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v7 + 40);
    do
    {
      *(v12 - 3) = 0;
      v54[0] = 0;
      *(v12 - 2) = 0;
      v54[1] = 0;
      *(v12 - 1) = 0;
      v54[2] = 0;
      *v12 = 0;
      v54[3] = 0;
      v12[1] = 0;
      v54[4] = 0;
      v12[2] = 0;
      v54[5] = 0;
      v12[3] = 0;
      v54[6] = 0;
      v12[5] = 0;
      v12[6] = 0;
      v12[4] = 0;
      WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)v54, v8);
      v12 += 10;
      --v11;
    }
    while (v11);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    do
    {
      v16 = (uint64_t *)(v4 + 80 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v23 = *a1;
          v53 = v14;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v25 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
          v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
          v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
          v28 = v24 & ((v27 >> 31) ^ v27);
          v29 = 1;
          do
          {
            v30 = v28;
            v14 = (_QWORD *)(v23 + 80 * v28);
            v28 = (v28 + v29++) & v24;
          }
          while (*v14);
          v31 = v30;
          v32 = (WebCore::TextRecognitionResult *)(v23 + 80 * v30 + 8);
          WebCore::TextRecognitionResult::~TextRecognitionResult(v32, v8);
          v34 = *v14;
          *v14 = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr((unsigned int *)v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, (unsigned int *)v34));
            if (!v36)
            {
              atomic_store(1u, (unsigned int *)v34);
              v47 = *(unsigned int *)(v34 + 28);
              if ((_DWORD)v47)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v34 + 16), (WTF::StringImpl *)(*(_QWORD *)(v34 + 16) + 32 * v47));
              v48 = *(WTF **)(v34 + 16);
              if (v48)
              {
                *(_QWORD *)(v34 + 16) = 0;
                *(_DWORD *)(v34 + 24) = 0;
                WTF::fastFree(v48, v33);
              }
              WTF::fastFree((WTF *)v34, v33);
            }
          }
          v37 = *v16;
          *v16 = 0;
          *v14 = v37;
          v38 = v4 + 80 * v13;
          *(_QWORD *)v32 = 0;
          *((_QWORD *)v32 + 1) = 0;
          v39 = *(_QWORD *)(v38 + 8);
          v38 += 8;
          *(_QWORD *)v38 = 0;
          *(_QWORD *)v32 = v39;
          LODWORD(v37) = *(_DWORD *)(v38 + 8);
          *(_DWORD *)(v38 + 8) = 0;
          v40 = v23 + 80 * v31;
          *(_DWORD *)(v40 + 16) = v37;
          LODWORD(v37) = *(_DWORD *)(v38 + 12);
          *(_DWORD *)(v38 + 12) = 0;
          *(_DWORD *)(v40 + 20) = v37;
          *(_QWORD *)(v40 + 24) = 0;
          *(_QWORD *)(v40 + 32) = 0;
          v41 = *(_QWORD *)(v38 + 16);
          *(_QWORD *)(v38 + 16) = 0;
          *(_QWORD *)(v40 + 24) = v41;
          LODWORD(v41) = *(_DWORD *)(v38 + 24);
          *(_DWORD *)(v38 + 24) = 0;
          *(_DWORD *)(v40 + 32) = v41;
          LODWORD(v41) = *(_DWORD *)(v38 + 28);
          *(_DWORD *)(v38 + 28) = 0;
          *(_DWORD *)(v40 + 36) = v41;
          *(_QWORD *)(v40 + 40) = 0;
          *(_QWORD *)(v40 + 48) = 0;
          v42 = *(_QWORD *)(v38 + 32);
          *(_QWORD *)(v38 + 32) = 0;
          *(_QWORD *)(v40 + 40) = v42;
          LODWORD(v42) = *(_DWORD *)(v38 + 40);
          *(_DWORD *)(v38 + 40) = 0;
          *(_DWORD *)(v40 + 48) = v42;
          LODWORD(v42) = *(_DWORD *)(v38 + 44);
          *(_DWORD *)(v38 + 44) = 0;
          *(_DWORD *)(v40 + 52) = v42;
          v43 = *(_QWORD *)(v38 + 48);
          *(_QWORD *)(v38 + 48) = 0;
          *(_QWORD *)(v40 + 56) = v43;
          *(_OWORD *)(v40 + 64) = *(_OWORD *)(v38 + 56);
          WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)v38, (WTF::StringImpl *)v33);
          v44 = *v16;
          *v16 = 0;
          if (v44)
          {
            do
            {
              v45 = __ldaxr((unsigned int *)v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, (unsigned int *)v44));
            if (!v46)
            {
              atomic_store(1u, (unsigned int *)v44);
              v49 = *(unsigned int *)(v44 + 28);
              if ((_DWORD)v49)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v44 + 16), (WTF::StringImpl *)(*(_QWORD *)(v44 + 16) + 32 * v49));
              v50 = *(WTF **)(v44 + 16);
              if (v50)
              {
                *(_QWORD *)(v44 + 16) = 0;
                *(_DWORD *)(v44 + 24) = 0;
                WTF::fastFree(v50, v8);
              }
              WTF::fastFree((WTF *)v44, v8);
            }
          }
          if (v16 != a3)
            v14 = v53;
        }
        else
        {
          WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)(v4 + 80 * v13 + 8), v8);
          v18 = *v16;
          *v16 = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr((unsigned int *)v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, (unsigned int *)v18));
            if (!v20)
            {
              atomic_store(1u, (unsigned int *)v18);
              v21 = *(unsigned int *)(v18 + 28);
              if ((_DWORD)v21)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v21));
              v22 = *(WTF **)(v18 + 16);
              if (v22)
              {
                *(_QWORD *)(v18 + 16) = 0;
                *(_DWORD *)(v18 + 24) = 0;
                WTF::fastFree(v22, v8);
              }
              WTF::fastFree((WTF *)v18, v8);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

unsigned int *WTF::Vector<std::pair<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,WebCore::TextRecognitionResult>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(unsigned int **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)&v5[16 * (unint64_t)*(unsigned int *)(a1 + 12)], (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 26)
      {
        __break(0xC471u);
        JUMPOUT(0x19603225CLL);
      }
      v18 = (WTF::StringImpl *)&v5[16 * (unint64_t)*(unsigned int *)(a1 + 12)];
      v19 = WTF::fastMalloc((WTF *)(v17 << 6));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,std::pair<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,WebCore::TextRecognitionResult>>::move(v5, v18, v19);
      if (v5)
      {
        if (*(unsigned int **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(unsigned int **)a1;
    }
    else
    {
      if (v10 >> 26)
      {
        __break(0xC471u);
        JUMPOUT(0x196032264);
      }
      v11 = WTF::fastMalloc((WTF *)(v10 << 6));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,std::pair<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,WebCore::TextRecognitionResult>>::move(v5, v6, v11);
      v13 = *(unsigned int **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(unsigned int **)a1;
      }
    }
    return &v13[16 * ((uint64_t)(v3 - (_QWORD)v5) >> 6)];
  }
  return (unsigned int *)v3;
}

unsigned int *WTF::VectorMover<false,std::pair<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,WebCore::TextRecognitionResult>>::move(unsigned int *result, WTF::StringImpl *a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (result != (unsigned int *)a2)
  {
    v5 = result + 2;
    do
    {
      v7 = v5 - 2;
      v6 = *((_QWORD *)v5 - 1);
      *((_QWORD *)v5 - 1) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v6;
      v8 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(a3 + 8) = v8;
      LODWORD(v8) = v5[2];
      v5[2] = 0;
      *(_DWORD *)(a3 + 16) = v8;
      LODWORD(v8) = v5[3];
      v5[3] = 0;
      *(_DWORD *)(a3 + 20) = v8;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v9 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 24) = v9;
      LODWORD(v9) = v5[6];
      v5[6] = 0;
      *(_DWORD *)(a3 + 32) = v9;
      LODWORD(v9) = v5[7];
      v5[7] = 0;
      *(_DWORD *)(a3 + 36) = v9;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      v10 = *((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      *(_QWORD *)(a3 + 40) = v10;
      LODWORD(v10) = v5[10];
      v5[10] = 0;
      *(_DWORD *)(a3 + 48) = v10;
      LODWORD(v10) = v5[11];
      v5[11] = 0;
      *(_DWORD *)(a3 + 52) = v10;
      v11 = *((_QWORD *)v5 + 6);
      *((_QWORD *)v5 + 6) = 0;
      *(_QWORD *)(a3 + 56) = v11;
      WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)v5, a2);
      result = (unsigned int *)*((_QWORD *)v5 - 1);
      *((_QWORD *)v5 - 1) = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      v5 += 16;
      a3 += 64;
    }
    while (v7 + 16 != (unsigned int *)a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Page::updateElementsWithTextRecognitionResults(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = off_1E3401498;
  v3 = a1[8];
  a1[8] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)(a1 + 1), (WTF::StringImpl *)a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::updateElementsWithTextRecognitionResults(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = off_1E3401498;
  v3 = a1[8];
  a1[8] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)(a1 + 1), (WTF::StringImpl *)a2);
  return WTF::fastFree((WTF *)a1, v6);
}

void WTF::Detail::CallableWrapper<WebCore::Page::updateElementsWithTextRecognitionResults(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      *(_DWORD *)(v2 + 24) += 2;
      WebCore::ImageOverlay::updateWithTextRecognitionResult((WebCore::ImageOverlay *)v2, a1 + 8, 0);
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
  }
}

uint64_t *WebCore::TextRecognitionResult::operator=(uint64_t *a1, WTF::StringImpl *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  const void *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;

  v4 = *((_DWORD *)a1 + 3);
  v5 = *a1;
  if (v4)
  {
    v6 = v5 + 56 * v4;
    do
    {
      v7 = *(unsigned int *)(v5 + 44);
      if ((_DWORD)v7)
      {
        v8 = *(WTF::StringImpl ***)(v5 + 32);
        v9 = 48 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          v8 += 6;
          v9 -= 48;
        }
        while (v9);
      }
      v11 = *(WTF **)(v5 + 32);
      if (v11)
      {
        *(_QWORD *)(v5 + 32) = 0;
        *(_DWORD *)(v5 + 40) = 0;
        WTF::fastFree(v11, a2);
      }
      v5 += 56;
    }
    while (v5 != v6);
    v5 = *a1;
  }
  if (v5)
  {
    *a1 = 0;
    *((_DWORD *)a1 + 2) = 0;
    WTF::fastFree((WTF *)v5, a2);
  }
  v12 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *a1 = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *((_DWORD *)a1 + 2) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *((_DWORD *)a1 + 3) = v12;
  v13 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v13)
  {
    v14 = 24 * v13;
    v15 = a1[2] + 8;
    do
    {
      v16 = *(WTF **)v15;
      if (*(_QWORD *)v15)
      {
        *(_QWORD *)v15 = 0;
        *(_DWORD *)(v15 + 8) = 0;
        WTF::fastFree(v16, a2);
      }
      v17 = *(const void **)(v15 - 8);
      *(_QWORD *)(v15 - 8) = 0;
      if (v17)
        CFRelease(v17);
      v15 += 24;
      v14 -= 24;
    }
    while (v14);
  }
  v18 = (WTF *)a1[2];
  if (v18)
  {
    a1[2] = 0;
    *((_DWORD *)a1 + 6) = 0;
    WTF::fastFree(v18, a2);
  }
  v19 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  a1[2] = v19;
  LODWORD(v19) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *((_DWORD *)a1 + 6) = v19;
  LODWORD(v19) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *((_DWORD *)a1 + 7) = v19;
  v20 = *((unsigned int *)a1 + 11);
  if ((_DWORD)v20)
  {
    v21 = (WTF::StringImpl **)a1[4];
    v22 = 40 * v20;
    do
    {
      v23 = *v21;
      *v21 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, a2);
        else
          *(_DWORD *)v23 -= 2;
      }
      v21 += 5;
      v22 -= 40;
    }
    while (v22);
  }
  v24 = (WTF *)a1[4];
  if (v24)
  {
    a1[4] = 0;
    *((_DWORD *)a1 + 10) = 0;
    WTF::fastFree(v24, a2);
  }
  v25 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  a1[4] = v25;
  LODWORD(v25) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = 0;
  *((_DWORD *)a1 + 10) = v25;
  LODWORD(v25) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = 0;
  *((_DWORD *)a1 + 11) = v25;
  v26 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  v27 = (const void *)a1[6];
  a1[6] = v26;
  if (v27)
    CFRelease(v27);
  return a1;
}

double WTF::Detail::CallableWrapper<WebCore::Page::opportunisticallyRunIdleCallbacks(void)::$_0,void,WebCore::WindowEventLoop &>::call(WTF::MonotonicTime *a1, uint64_t a2)
{
  double v3;
  double v4;
  double *v5;
  double v6;
  WTF::MonotonicTime *v7;
  WTF::MonotonicTime *v8;
  double v9;
  double result;
  WTF::MonotonicTime *v11;

  WTF::MonotonicTime::now(a1);
  v4 = v3;
  if (WebCore::WindowEventLoop::shouldEndIdlePeriod(a2, v3))
  {
    v5 = (double *)(a2 + 336);
    v6 = *(double *)(a2 + 336);
  }
  else
  {
    *(double *)(a2 + 328) = v4;
    v7 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v7 = off_1E33A8FE8;
    v11 = v7;
    WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((_QWORD *)(a2 + 104), &v11);
    v8 = v11;
    v11 = 0;
    if (v8)
      v8 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v8 + 8))(v8);
    WTF::MonotonicTime::now(v8);
    v5 = (double *)(a2 + 336);
    v6 = *(double *)(a2 + 336) + v9 - *(double *)(a2 + 328);
  }
  result = v6 * 0.5;
  *v5 = result;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PageDebuggable::name(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E34014E8;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageDebuggable::name(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E34014E8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageDebuggable::name(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 160);
    if (v2 && *(_BYTE *)(v2 + 144) == 0)
    {
      v4 = result;
      v5 = (unsigned int *)(v2 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      if (*(_QWORD *)(v2 + 296))
      {
        WTF::String::isolatedCopy();
        v8 = *(WTF::StringImpl ***)(v4 + 24);
        v9 = *v8;
        *v8 = v13;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v7);
          else
            *(_DWORD *)v9 -= 2;
        }
        result = 0;
      }
      do
      {
        v10 = __ldaxr(v5);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v5));
      if (!v11)
      {
        atomic_store(1u, v5);
        v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v12 = off_1E31FE290;
        *((_QWORD *)v12 + 1) = v5;
        v14 = v12;
        WTF::ensureOnMainThread();
        result = (uint64_t)v14;
        if (v14)
          return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PageDebuggable::url(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E3401510;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageDebuggable::url(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E3401510;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PageDebuggable::url(void)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;

  v1 = *(_QWORD *)(*((_QWORD *)result + 1) + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 160);
    v3 = v2 && *(_BYTE *)(v2 + 144) == 0;
    if (v3 && *(_QWORD *)(v2 + 296))
    {
      v4 = result;
      WTF::String::isolatedCopy();
      v6 = (WTF::StringImpl **)*((_QWORD *)v4 + 3);
      v7 = *v6;
      *v6 = v11;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v5);
        else
          *(_DWORD *)v7 -= 2;
      }
      result = 0;
      v8 = **((_QWORD **)v4 + 3);
      if (!v8 || !*(_DWORD *)(v8 + 4))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v10 = (WTF::StringImpl **)*((_QWORD *)v4 + 3);
        result = *v10;
        *v10 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PageDebuggable::hasLocalDebugger(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E3401538;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageDebuggable::hasLocalDebugger(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E3401538;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageDebuggable::hasLocalDebugger(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  if (v2)
    result = Inspector::FrontendRouter::hasLocalFrontend(*(Inspector::FrontendRouter **)(*(_QWORD *)(v2 + 80) + 24));
  else
    result = 0;
  **(_BYTE **)(a1 + 24) = result;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PageDebuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E3401560;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageDebuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E3401560;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageDebuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 40);
  if (v1)
    return WebCore::InspectorController::connectFrontend(*(_QWORD *)(v1 + 80), *(_QWORD *)(result + 24), *(_BYTE *)(result + 32), *(_BYTE *)(result + 33));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PageDebuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E3401588;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageDebuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E3401588;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageDebuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 40);
  if (v1)
    return WebCore::InspectorController::disconnectFrontend(*(_QWORD *)(v1 + 80));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PageDebuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v13;

  *a1 = &off_1E34015B0;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_9:
    v7 = *(_QWORD *)(v5 + 8);
    v8 = v7 - 1;
    *(_QWORD *)(v5 + 8) = v7 - 1;
    if (v7 == 1)
    {
      v13 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      v10 = v13 != 0;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
        if (v8)
          return a1;
        goto LABEL_17;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      return a1;
LABEL_17:
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (!v10)
      WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageDebuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v13;

  *(_QWORD *)this = &off_1E34015B0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_9:
    v7 = *(_QWORD *)(v5 + 8);
    v8 = v7 - 1;
    *(_QWORD *)(v5 + 8) = v7 - 1;
    if (v7 == 1)
    {
      v13 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      v10 = v13 != 0;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
        if (v8)
          return WTF::fastFree(this, a2);
        goto LABEL_17;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      return WTF::fastFree(this, a2);
LABEL_17:
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (!v10)
      WTF::fastFree((WTF *)v5, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageDebuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 40);
  if (v1)
    return Inspector::BackendDispatcher::dispatch(*(Inspector::BackendDispatcher **)(*(_QWORD *)(v1 + 80) + 32), (const WTF::String *)(result + 24));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PageDebuggable::setIndicating(BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E34015D8;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageDebuggable::setIndicating(BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E34015D8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageDebuggable::setIndicating(BOOL)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 40);
  if (v1)
  {
    v2 = **(_QWORD **)(*(_QWORD *)(v1 + 80) + 88);
    v3 = 72;
    if (!*(_BYTE *)(result + 24))
      v3 = 80;
    return (*(uint64_t (**)(void))(v2 + v3))();
  }
  return result;
}

__n128 WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::PageGroup *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::PageGroup *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::PageGroup *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::PageGroup *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, WTF::StringImpl **a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  __n128 *v9;
  __n128 result;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = *((_DWORD *)*a2 + 4);
  if (v5 < 0x100)
    v6 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v6 = v5 >> 8;
  v7 = 0;
  do
  {
    v8 = v6 & v4;
    v6 = ++v7 + v8;
  }
  while (*(_QWORD *)(a1 + 16 * v8));
  v9 = (__n128 *)(a1 + 16 * v8);
  v9->n128_u64[0] = 0;
  result = *(__n128 *)a2;
  *a2 = 0;
  *v9 = result;
  return result;
}

_QWORD *WebCore::PageGroupLoadDeferrer::PageGroupLoadDeferrer(_QWORD *this, WebCore::Page *a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::Page *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  void *__dst;
  _QWORD *v50;

  v5 = this;
  __dst = this + 2;
  *this = this + 2;
  this[1] = 16;
  v6 = *((_QWORD *)a2 + 66);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    this = WebCore::Page::initGroup(a2);
    v7 = *(_QWORD *)(*((_QWORD *)a2 + 66) + 8);
  }
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
    v9 = 0;
    v10 = 0;
LABEL_5:
    v11 = v9;
    v9 = v8 + 8 * v10;
    goto LABEL_6;
  }
  v10 = *(unsigned int *)(v8 - 4);
  v9 = v8 + 8 * v10;
  if (!*(_DWORD *)(v8 - 12))
    goto LABEL_5;
  if (!(_DWORD)v10)
  {
    v47 = 0;
    v11 = *(_QWORD *)(v7 + 16);
    goto LABEL_96;
  }
  v46 = 8 * v10;
  v11 = *(_QWORD *)(v7 + 16);
  while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
  {
    v11 += 8;
    v46 -= 8;
    if (!v46)
    {
      v11 = v9;
      break;
    }
  }
LABEL_6:
  if (!v8)
  {
    v12 = 0;
    goto LABEL_8;
  }
  v47 = *(unsigned int *)(v8 - 4);
LABEL_96:
  v12 = v8 + 8 * v47;
LABEL_8:
  if (v12 != v11)
  {
    while (!*(_QWORD *)(*(_QWORD *)v11 + 8))
    {
      v13 = v11 + 8;
      v11 = v9;
      if (v13 != v9)
      {
        v11 = v13;
        while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
        {
          v11 += 8;
          if (v11 == v9)
          {
            v11 = v9;
            break;
          }
        }
      }
      if (v11 == v12)
      {
        v11 = v12;
        break;
      }
    }
  }
  if (v8)
    v14 = v8 + 8 * *(unsigned int *)(v8 - 4);
  else
    v14 = 0;
  if (v11 != v14)
  {
    v50 = v5;
    v48 = a3;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)v11 + 8);
      v16 = (WebCore::Page *)v15 == a2 && a3 == 0;
      if (!v16 && !*(_BYTE *)(v15 + 339))
      {
        v17 = *(_QWORD *)(v15 + 160);
        if (v17 && *(_BYTE *)(v17 + 144) == 0)
        {
          v21 = *((unsigned int *)v5 + 3);
          if ((_DWORD)v21 == *((_DWORD *)v5 + 2))
          {
            v22 = v21 + (v21 >> 2);
            if (v22 >= 0x10)
              v23 = v22 + 1;
            else
              v23 = 16;
            if (v23 <= v21 + 1)
              v24 = v21 + 1;
            else
              v24 = v23;
            v25 = v5;
            v26 = (void *)*v5;
            if (v24 < 0x11)
            {
              v28 = __dst;
              *v25 = __dst;
              *((_DWORD *)v25 + 2) = 16;
              v27 = __dst;
            }
            else
            {
              if (v24 >> 29)
              {
                __break(0xC471u);
                return this;
              }
              v27 = (void *)WTF::fastMalloc((WTF *)(8 * v24));
              *((_DWORD *)v50 + 2) = v24;
              *v50 = v27;
              v28 = __dst;
            }
            this = memcpy(v27, v26, 8 * v21);
            v16 = v28 == v26;
            a3 = v48;
            if (!v16 && v26)
            {
              if ((void *)*v50 == v26)
              {
                *v50 = 0;
                *((_DWORD *)v50 + 2) = 0;
              }
              this = (_QWORD *)WTF::fastFree((WTF *)v26, v33);
            }
            v5 = v50;
            v34 = *((unsigned int *)v50 + 3);
            v35 = *v50;
            v36 = (unsigned int *)(v17 + 8);
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 + 1, v36));
            v32 = *((_DWORD *)v50 + 3);
            *(_QWORD *)(v35 + 8 * v34) = v17;
          }
          else
          {
            v29 = (_QWORD *)*v5;
            v30 = (unsigned int *)(v17 + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 + 1, v30));
            v29[v21] = v17;
            v32 = *((_DWORD *)v5 + 3);
          }
          *((_DWORD *)v5 + 3) = v32 + 1;
          while (1)
          {
            do
            {
LABEL_71:
              v38 = v17;
              if (!*(_BYTE *)(v17 + 144))
                this = (_QWORD *)WebCore::Document::suspendScheduledTasks(*(_QWORD *)(v17 + 296), 1);
              v17 = *(_QWORD *)(v17 + 88);
            }
            while (v17);
            v39 = *(_QWORD *)(*(_QWORD *)(v38 + 48) + 8);
            if (!v39)
              break;
            v17 = *(_QWORD *)(v38 + 72);
            if (!v17)
            {
              while (1)
              {
                v40 = *(_QWORD *)(v39 + 56);
                if (!v40)
                  goto LABEL_30;
                v39 = *(_QWORD *)(v40 + 8);
                if (!v39)
                  goto LABEL_30;
                v17 = *(_QWORD *)(v39 + 72);
                if (v17)
                  goto LABEL_71;
              }
            }
          }
        }
      }
LABEL_30:
      v19 = v9;
      if (v11 + 8 != v9)
      {
        v19 = v11 + 8;
        while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
        {
          v19 += 8;
          if (v19 == v9)
          {
            v19 = v9;
            break;
          }
        }
      }
      v11 = v12;
      if (v19 != v12)
      {
        v11 = v19;
        if (!*(_QWORD *)(*(_QWORD *)v19 + 8))
        {
          while (1)
          {
            v20 = v11 + 8;
            v11 = v9;
            if (v20 != v9)
            {
              v11 = v20;
              while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
              {
                v11 += 8;
                if (v11 == v9)
                {
                  v11 = v9;
                  break;
                }
              }
            }
            if (v11 == v12)
              break;
            if (*(_QWORD *)(*(_QWORD *)v11 + 8))
              goto LABEL_46;
          }
          v11 = v12;
        }
      }
LABEL_46:
      ++*(_DWORD *)(v7 + 24);
    }
    while (v11 != v14);
  }
  v41 = *((unsigned int *)v5 + 3);
  if ((_DWORD)v41)
  {
    v42 = *v5;
    v43 = 8 * v41;
    do
    {
      v44 = *(_QWORD *)(*(_QWORD *)v42 + 24);
      if (v44)
      {
        v45 = *(WebCore::Page **)(v44 + 8);
        if (v45)
          WebCore::Page::setDefersLoading(v45, 1);
      }
      v42 += 8;
      v43 -= 8;
    }
    while (v43);
  }
  return v5;
}

void WebCore::PageGroupLoadDeferrer::~PageGroupLoadDeferrer(WTF **this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v20;

  v3 = *this;
  v4 = *((unsigned int *)this + 3);
  if ((_DWORD)v4)
  {
    v5 = (WTF *)((char *)v3 + 8 * v4);
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)v3 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          WebCore::Page::setDefersLoading(*(WebCore::Page **)(v6 + 8), 0);
          v8 = *(_QWORD *)(v7 + 160);
          if (v8)
          {
            while (1)
            {
              do
              {
LABEL_6:
                v9 = (_QWORD *)v8;
                if (!*(_BYTE *)(v8 + 144))
                  WebCore::Document::resumeScheduledTasks(*(_QWORD *)(v8 + 296), 1);
                v8 = v9[11];
              }
              while (v8);
              v10 = *(_QWORD *)(v9[6] + 8);
              if (!v10)
                break;
              v8 = v9[9];
              if (!v8)
              {
                while (1)
                {
                  v11 = *(_QWORD *)(v10 + 56);
                  if (!v11)
                    goto LABEL_15;
                  v10 = *(_QWORD *)(v11 + 8);
                  if (!v10)
                    goto LABEL_15;
                  v8 = *(_QWORD *)(v10 + 72);
                  if (v8)
                    goto LABEL_6;
                }
              }
            }
          }
        }
      }
LABEL_15:
      v3 = (WTF *)((char *)v3 + 8);
    }
    while (v3 != v5);
    v12 = *((unsigned int *)this + 3);
    v3 = *this;
    if ((_DWORD)v12)
    {
      v13 = (WTF *)((char *)v3 + 8 * v12);
      do
      {
        v14 = *(_QWORD *)v3;
        *(_QWORD *)v3 = 0;
        if (v14)
        {
          v15 = (unsigned int *)(v14 + 8);
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, v15);
            v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v18 = off_1E31FE290;
            v18[1] = v15;
            v20 = v18;
            WTF::ensureOnMainThread();
            if (v20)
              (*(void (**)(_QWORD *))(*v20 + 8))(v20);
          }
        }
        v3 = (WTF *)((char *)v3 + 8);
      }
      while (v3 != v13);
      v3 = *this;
    }
  }
  if (this + 2 != (WTF **)v3 && v3 != 0)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v3, a2);
  }
}

_QWORD *WebCore::PageOverlay::create@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  unint64_t StatusReg;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *result;
  uint64_t v13;

  v8 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E3401600;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  v10 = *(unsigned int **)(StatusReg + 736);
  if (!v10)
    v10 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *(_QWORD *)(v8 + 80) = v10;
  *(_QWORD *)(v8 + 40) = off_1E31F7378;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3401888;
  result[1] = WebCore::PageOverlay::fadeAnimationTimerFired;
  result[2] = 0;
  result[3] = v8;
  *(_QWORD *)(v8 + 88) = result;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0x3FC999999999999ALL;
  *(_QWORD *)(v8 + 112) = 0x3F80000000000000;
  *(_BYTE *)(v8 + 120) = a2 ^ 1;
  *(_BYTE *)(v8 + 121) = a2;
  *(_BYTE *)(v8 + 122) = a3;
  *(_QWORD *)(v8 + 124) = 0;
  *(_QWORD *)(v8 + 132) = 0;
  v13 = ++WebCore::generatePageOverlayID(void)::pageOverlayID;
  *(_QWORD *)(v8 + 144) = 0x1104000000000000;
  *(_QWORD *)(v8 + 152) = v13;
  *(_BYTE *)(v8 + 160) = 1;
  *a4 = v8;
  return result;
}

void WebCore::PageOverlay::fadeAnimationTimerFired(WebCore::PageOverlay *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  int v22;

  v2 = *((_QWORD *)this + 4);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    v4 = *(_QWORD *)(v3 + 1232);
  else
    v4 = 0;
  WTF::WallTime::now(this);
  v6 = (v5 - *((double *)this + 12)) / *((double *)this + 13);
  if (v6 < 1.0)
    v7 = v6;
  else
    v7 = 1.0;
  v8 = sinf(v7 * 1.5708);
  v9 = v8 * v8;
  if (*((_DWORD *)this + 28) != 1)
    v9 = 1.0 - v9;
  *((float *)this + 29) = v9;
  if (v4)
  {
    ++*(_DWORD *)(v4 + 40);
    v10 = *((_QWORD *)this + 2);
    v11 = *(_QWORD *)(v4 + 32);
    v12 = *(_DWORD *)(v11 - 8);
    v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(_QWORD *)(v11 + 16 * v16);
    if (v17 == -1 || v17 != v10)
    {
      v19 = 1;
      do
      {
        v16 = ((_DWORD)v16 + v19) & v12;
        v20 = *(_QWORD *)(v11 + 16 * v16);
        ++v19;
      }
      while (v20 == -1 || v20 != v10);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 16 * v16 + 8) + 280))(*(_QWORD *)(v11 + 16 * v16 + 8));
  }
  if (v7 == 1.0)
  {
    if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::PageOverlay *)((char *)this + 40));
    v22 = *((_DWORD *)this + 28);
    *((_DWORD *)this + 28) = 0;
    if (v4)
    {
      if (v22 == 2)
        WebCore::PageOverlayController::uninstallPageOverlay(v4, (uint64_t)this, 0);
    }
  }
}

void WebCore::PageOverlay::~PageOverlay(WebCore::PageOverlay *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v3 = *((_QWORD *)this + 18);
  if ((v3 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  *((_QWORD *)this + 5) = off_1E31F7378;
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((WebCore::PageOverlay *)((char *)this + 40));
  v6 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v5);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::PageOverlay::~PageOverlay(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::PageOverlay::page(WebCore::PageOverlay *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::PageOverlay::controller(WebCore::PageOverlay *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_QWORD *)(v2 + 1232);
  else
    return 0;
}

uint64_t WebCore::PageOverlay::bounds(WebCore::PageOverlay *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  const CGRect *v18;
  void *v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  const CGRect *v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  const CGRect *v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  const CGRect *v34;
  CGRect v35;

  if (*((int *)this + 33) < 1 || *((int *)this + 34) < 1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 160);
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_DWORD *)(v3 + 8);
      *(_DWORD *)(v3 + 8) = v5 + 1;
      if (*((_BYTE *)this + 121))
      {
        if (v5)
        {
LABEL_6:
          *(_DWORD *)(v4 + 8) = v5;
          return 0;
        }
LABEL_18:
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        return 0;
      }
      v7 = *(void **)(v3 + 40);
      if (v7)
      {
        if (objc_msgSend(*(id *)(v3 + 40), "conformsToProtocol:", &unk_1EE342188))
          v7 = (void *)objc_msgSend(v7, "superview");
        objc_msgSend(v7, "frame");
        v35.origin.x = v14;
        v35.origin.y = v15;
        v35.size.width = v16;
        v35.size.height = v17;
        WebCore::enclosingIntRect(&v35, v18);
        v19 = *(void **)(v4 + 40);
        if (v19)
        {
          if (objc_msgSend(*(id *)(v4 + 40), "conformsToProtocol:", &unk_1EE342188))
            v19 = (void *)objc_msgSend(v19, "superview");
          objc_msgSend(v19, "frame");
          v35.origin.x = v20;
          v35.origin.y = v21;
          v35.size.width = v22;
          v35.size.height = v23;
          WebCore::enclosingIntRect(&v35, v24);
        }
      }
      {
        if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
        {
          v8 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
            goto LABEL_12;
          WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
LABEL_24:
          *v13 = 1;
LABEL_12:
          if (((*(uint64_t (**)(uint64_t *))(*v8 + 64))(v8) & 1) == 0)
          {
            v9 = *(_QWORD *)(v4 + 160);
            if (v9)
            {
              v10 = *(void **)(v9 + 40);
              if (v10)
              {
                if (objc_msgSend(v10, "conformsToProtocol:", &unk_1EE342188))
                  v10 = (void *)objc_msgSend(v10, "superview");
                objc_msgSend(v10, "frame");
                v35.origin.x = v25;
                v35.origin.y = v26;
                v35.size.width = v27;
                v35.size.height = v28;
                WebCore::enclosingIntRect(&v35, v29);
              }
            }
            v11 = *(_QWORD *)(v4 + 152);
            if (v11)
            {
              v12 = *(void **)(v11 + 40);
              if (v12)
              {
                if (objc_msgSend(v12, "conformsToProtocol:", &unk_1EE342188))
                  v12 = (void *)objc_msgSend(v12, "superview");
                objc_msgSend(v12, "frame");
                v35.origin.x = v30;
                v35.origin.y = v31;
                v35.size.width = v32;
                v35.size.height = v33;
                WebCore::enclosingIntRect(&v35, v34);
              }
            }
          }
          v5 = *(_DWORD *)(v4 + 8) - 1;
          if (*(_DWORD *)(v4 + 8) != 1)
            goto LABEL_6;
          goto LABEL_18;
        }
      }
      else
      {
        WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
        *(_OWORD *)&byte_1ECE90A50 = 0u;
        qword_1ECE90A60 = 0;
        LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
        *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
        *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
        byte_1ECE90A56 = 1;
        *(_DWORD *)&algn_1ECE90A57 = 0;
        unk_1ECE90A5B = 0;
        byte_1ECE90A5D = 1;
        byte_1ECE90A5F = 1;
      }
      v8 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
        goto LABEL_12;
      WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
      goto LABEL_24;
    }
  }
  return 0;
}

uint64_t WebCore::PageOverlay::frame(WebCore::PageOverlay *this)
{
  if (*((int *)this + 33) < 1 || *((int *)this + 34) < 1)
    return WebCore::PageOverlay::bounds(this);
  else
    return *(_QWORD *)((char *)this + 124);
}

uint64_t WebCore::PageOverlay::setFrame(uint64_t result, uint64_t a2, uint64_t a3)
{
  WebCore::PageOverlay *v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (WebCore::PageOverlay *)result;
  v4 = *(_DWORD *)(result + 124) == (_DWORD)a2 && *(_DWORD *)(result + 128) == HIDWORD(a2);
  if (!v4
    || (*(_DWORD *)(result + 132) == (_DWORD)a3 ? (v5 = *(_DWORD *)(result + 136) == HIDWORD(a3)) : (v5 = 0), !v5))
  {
    *(_QWORD *)(result + 124) = a2;
    *(_QWORD *)(result + 132) = a3;
    v6 = *(_QWORD *)(result + 32);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        result = *(_QWORD *)(v7 + 1232);
        if (result)
          return WebCore::PageOverlayController::didChangeOverlayFrame(result, v3);
      }
    }
  }
  return result;
}

uint64_t WebCore::PageOverlayController::didChangeOverlayFrame(uint64_t this, WebCore::PageOverlay *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  float v15;
  BOOL v16;
  BOOL v17;
  float v18;
  float v19;

  ++*(_DWORD *)(this + 40);
  v2 = *((_QWORD *)a2 + 2);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *(_QWORD *)(this + 32);
      if (v3)
      {
        v4 = *(_DWORD *)(v3 - 8);
        v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
        v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
        v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
        v8 = v4 & ((v7 >> 31) ^ v7);
        for (i = 1; ; ++i)
        {
          v10 = v8;
          v11 = *(_QWORD *)(v3 + 16 * v8);
          if (v11 != -1)
          {
            if (!v11)
              return this;
            if (v11 == v2)
              break;
          }
          v8 = (v10 + i) & v4;
        }
        v12 = *(float **)(v3 + 16 * v10 + 8);
        if (v12)
        {
          ++*((_DWORD *)v12 + 2);
          if (*((int *)a2 + 33) < 1 || *((int *)a2 + 34) < 1)
          {
            this = WebCore::PageOverlay::bounds(a2);
          }
          else
          {
            this = *(_QWORD *)((char *)a2 + 124);
            v13 = *(_QWORD *)((char *)a2 + 132);
          }
          v14 = (float)(int)v13;
          v15 = (float)SHIDWORD(v13);
          v16 = v12[14] == (float)(int)this && v12[15] == (float)SHIDWORD(this);
          if (!v16 || (v12[22] == v14 ? (v17 = v12[23] == v15) : (v17 = 0), !v17))
          {
            v18 = (float)(int)this;
            v19 = (float)SHIDWORD(this);
            (*(void (**)(float *, float *))(*(_QWORD *)v12 + 128))(v12, &v18);
            v18 = v14;
            v19 = v15;
            this = (*(uint64_t (**)(float *, float *))(*(_QWORD *)v12 + 160))(v12, &v18);
          }
          if (*((_DWORD *)v12 + 2) == 1)
            return (*(uint64_t (**)(float *))(*(_QWORD *)v12 + 16))(v12);
          else
            --*((_DWORD *)v12 + 2);
        }
      }
    }
  }
  return this;
}

unint64_t WebCore::PageOverlay::viewToOverlayOffset(WebCore::PageOverlay *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  void *v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  const CGRect *v17;
  int v18;
  CGRect v19;

  if (!*((_BYTE *)this + 121)
    || (v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 160),
        (v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1)) == 0))
  {
    LODWORD(v9) = 0;
    LODWORD(v10) = 0;
    return v9 | ((unint64_t)v10 << 32);
  }
  v3 = v2;
  v4 = *(_DWORD *)(v2 + 8);
  *(_DWORD *)(v2 + 8) = v4 + 1;
  if (*(_BYTE *)(v2 + 312) != 1)
  {
    v5 = v2 + 64;
    v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 + 64) + 832))(v2 + 64, 0, 1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 704))(v3 + 64))
    {
      v7 = *(_QWORD *)(v3 + 160);
      if (!v7)
        goto LABEL_6;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 272))(*(_QWORD *)(v3 + 160)) & 1) == 0)
      {
        v12 = *(void **)(v7 + 40);
        if (v12)
        {
          if (objc_msgSend(*(id *)(v7 + 40), "conformsToProtocol:", &unk_1EE342188))
            v12 = (void *)objc_msgSend(v12, "superview");
          objc_msgSend(v12, "frame");
          v19.origin.x = v13;
          v19.origin.y = v14;
          v19.size.width = v15;
          v19.size.height = v16;
          WebCore::enclosingIntRect(&v19, v17);
          LODWORD(v7) = v18;
        }
        else
        {
          v7 = *(_QWORD *)(v7 + 56);
        }
        goto LABEL_6;
      }
    }
    LODWORD(v7) = 0;
LABEL_6:
    v8 = (float)(*(int (**)(uint64_t))(*(_QWORD *)(v3 + 64) + 528))(v3 + 64);
    v9 = (v6 - v7) | ((unint64_t)(HIDWORD(v6)
                                                                   - (int)(float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 408))(v3, 1)+ v8)) << 32);
    v4 = *(_DWORD *)(v3 + 8) - 1;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = HIDWORD(v9);
  if (v4)
    *(_DWORD *)(v3 + 8) = v4;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return v9 | ((unint64_t)v10 << 32);
}

uint64_t WebCore::PageOverlay::setNeedsDisplay(uint64_t this, const WebCore::IntRect *a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t v30;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  BOOL v37;
  BOOL v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;

  v3 = *(_QWORD *)(this + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 1232);
      if (v5)
      {
        v7 = this;
        if (*(_DWORD *)(this + 112))
        {
          a3.n128_u32[0] = *(_DWORD *)(this + 116);
          ++*(_DWORD *)(v5 + 40);
          v8 = *(_QWORD *)(this + 16);
          v9 = *(_QWORD *)(v5 + 32);
          v10 = *(_DWORD *)(v9 - 8);
          v11 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
          v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
          v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
          v14 = v10 & ((v13 >> 31) ^ v13);
          v15 = *(_QWORD *)(v9 + 16 * v14);
          if (v15 == -1 || v15 != v8)
          {
            v17 = 1;
            do
            {
              v14 = ((_DWORD)v14 + v17) & v10;
              v18 = *(_QWORD *)(v9 + 16 * v14);
              ++v17;
            }
            while (v18 == -1 || v18 != v8);
          }
          (*(void (**)(_QWORD, __n128))(**(_QWORD **)(v9 + 16 * v14 + 8) + 280))(*(_QWORD *)(v9 + 16 * v14 + 8), a3);
        }
        ++*(_DWORD *)(v5 + 40);
        v20 = *(_QWORD *)(v7 + 16);
        v21 = *(_QWORD *)(v5 + 32);
        v22 = *(_DWORD *)(v21 - 8);
        v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
        v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
        v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
        v26 = v22 & ((v25 >> 31) ^ v25);
        v27 = *(_QWORD *)(v21 + 16 * v26);
        if (v27 == -1 || v27 != v20)
        {
          v29 = 1;
          do
          {
            v26 = ((_DWORD)v26 + v29) & v22;
            v30 = *(_QWORD *)(v21 + 16 * v26);
            ++v29;
          }
          while (v30 == -1 || v30 != v20);
        }
        v32 = *(float **)(v21 + 16 * v26 + 8);
        if ((*(_WORD *)((_BYTE *)v32 + 177) & 0x20) == 0)
        {
          (*(void (**)(float *, uint64_t))(*(_QWORD *)v32 + 216))(v32, 1);
          if (*(int *)(v7 + 132) < 1 || *(int *)(v7 + 136) < 1)
          {
            v33 = WebCore::PageOverlay::bounds((WebCore::PageOverlay *)v7);
          }
          else
          {
            v33 = *(_QWORD *)(v7 + 124);
            v34 = *(_QWORD *)(v7 + 132);
          }
          v35 = (float)(int)v34;
          v36 = (float)SHIDWORD(v34);
          v37 = v32[14] == (float)(int)v33 && v32[15] == (float)SHIDWORD(v33);
          if (!v37 || (v32[22] == v35 ? (v38 = v32[23] == v36) : (v38 = 0), !v38))
          {
            v41 = (float)(int)v33;
            v42 = (float)SHIDWORD(v33);
            (*(void (**)(float *, float *))(*(_QWORD *)v32 + 128))(v32, &v41);
            v41 = v35;
            v42 = v36;
            (*(void (**)(float *, float *))(*(_QWORD *)v32 + 160))(v32, &v41);
          }
        }
        v39 = (float)*((int *)a2 + 1);
        v41 = (float)*(int *)a2;
        v42 = v39;
        v40 = (float)*((int *)a2 + 3);
        v43 = (float)*((int *)a2 + 2);
        v44 = v40;
        return (*(uint64_t (**)(float *, float *, uint64_t))(*(_QWORD *)v32 + 328))(v32, &v41, 1);
      }
    }
  }
  return this;
}

uint64_t WebCore::PageOverlay::setNeedsDisplay(WebCore::PageOverlay *this)
{
  uint64_t v2;
  __n128 v3;
  _QWORD v5[2];

  v5[0] = WebCore::PageOverlay::bounds(this);
  v5[1] = v2;
  return WebCore::PageOverlay::setNeedsDisplay((uint64_t)this, (const WebCore::IntRect *)v5, v3);
}

uint64_t WebCore::PageOverlay::mouseEvent(WebCore::PageOverlay *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WebCore::ScrollView *v6;
  const WebCore::IntPoint *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;

  v4 = *(_QWORD *)(a2 + 52);
  v15 = v4;
  if (*((_BYTE *)this + 121))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 160);
    v6 = (WebCore::ScrollView *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
    v4 = WebCore::ScrollView::windowToContents(v6, (const WebCore::IntPoint *)&v15, v7);
    v15 = v4;
  }
  if (*((int *)this + 33) < 1 || *((int *)this + 34) < 1)
  {
    v9 = WebCore::PageOverlay::bounds(this);
    LODWORD(v4) = v15;
    LODWORD(v8) = HIDWORD(v15);
  }
  else
  {
    v8 = HIDWORD(v4);
    v9 = *(_QWORD *)((char *)this + 124);
  }
  LODWORD(v15) = v4 - v9;
  HIDWORD(v15) = v8 - HIDWORD(v9);
  if (!*((_BYTE *)this + 160))
    return (*(uint64_t (**)(_QWORD, WebCore::PageOverlay *, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), this, a2);
  v12 = WebCore::PageOverlay::bounds(this);
  result = 0;
  if ((int)v15 >= (int)v12 && v10 + (int)v12 > (int)v15)
  {
    v14 = HIDWORD(v12);
    if (SHIDWORD(v15) >= (int)v14 && v11 + (int)v14 > SHIDWORD(v15))
      return (*(uint64_t (**)(_QWORD, WebCore::PageOverlay *, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), this, a2);
    return 0;
  }
  return result;
}

uint64_t WebCore::PageOverlay::stopFadeOutAnimation(uint64_t this)
{
  *(_DWORD *)(this + 116) = 1065353216;
  if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0)
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 40));
  return this;
}

uint64_t WebCore::PageOverlayController::uninstallPageOverlay(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4;
  NSObject *v5;
  WTF::MonotonicTime *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int i;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unsigned int v33;
  unsigned int v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  WTF *v50;
  void *v51;
  _QWORD *v52;
  unsigned int v53;
  unsigned int v54;
  uint8_t v56[16];

  if (a3)
  {
    if (*(_DWORD *)(a2 + 112) != 2
      || (*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *(_QWORD *)(a2 + 112) = 0x3F80000000000002;
      v4 = *(_QWORD *)(a2 + 32);
      if (!v4 || !*(_QWORD *)(v4 + 8))
      {
        v5 = qword_1ECE7BE10;
        result = os_log_type_enabled((os_log_t)qword_1ECE7BE10, OS_LOG_TYPE_FAULT);
        if ((_DWORD)result)
        {
          *(_WORD *)v56 = 0;
          _os_log_fault_impl(&dword_1940B8000, v5, OS_LOG_TYPE_FAULT, "PageOverlay::startFadeAnimation() was called on a PageOverlay without a page", v56, 2u);
        }
      }
      v6 = (WTF::MonotonicTime *)WTF::WallTime::now((WTF::WallTime *)result);
      *(_QWORD *)(a2 + 96) = v7;
      *(_QWORD *)(a2 + 64) = 0x3FA1111111111111;
      WTF::MonotonicTime::now(v6);
      return WebCore::TimerBase::setNextFireTime(a2 + 40, v8 + 0.0333333333);
    }
    return result;
  }
  v9 = result;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), a2, 0);
  v11 = *(unsigned int **)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a2, 0);
  if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a2 + 40));
  v15 = (uint64_t *)(v9 + 32);
  v16 = *(_DWORD *)(v9 + 40);
  v17 = *(_DWORD *)(v9 + 44);
  *(_DWORD *)(v9 + 40) = v16 + 1;
  if (v16 > v17)
    WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(v9 + 32, v14);
  v18 = *(_QWORD *)(a2 + 16);
  if (v18)
  {
    if (*(_QWORD *)(v18 + 8))
    {
      v19 = *v15;
      if (*v15)
      {
        v20 = *(_DWORD *)(v19 - 8);
        v21 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
        v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
        v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
        v24 = v20 & ((v23 >> 31) ^ v23);
        for (i = 1; ; ++i)
        {
          v26 = v24;
          v27 = *(_QWORD *)(v19 + 16 * v24);
          if (v27 != -1)
          {
            if (!v27)
              goto LABEL_55;
            if (v27 == v18)
              break;
          }
          v24 = (v26 + i) & v20;
        }
        v28 = *(_DWORD *)(v19 - 4);
        if ((_DWORD)v26 != v28)
        {
          v29 = (_QWORD *)(v19 + 16 * v26);
          v31 = v29 + 1;
          v30 = v29[1];
          if (v30)
          {
            v32 = 0;
            *v31 = 0;
            v19 = *v15;
            if (!*v15)
            {
LABEL_31:
              if (v32 != v29)
              {
                *v29 = 0;
                do
                {
                  v33 = __ldaxr((unsigned int *)v18);
                  v34 = v33 - 1;
                }
                while (__stlxr(v34, (unsigned int *)v18));
                if (!v34)
                {
                  atomic_store(1u, (unsigned int *)v18);
                  v52 = v29;
                  WTF::fastFree((WTF *)v18, v14);
                  v29 = v52;
                }
                *v29 = -1;
                v35 = (_DWORD *)*v31;
                *v31 = 0;
                if (v35)
                {
                  if (v35[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
                  else
                    --v35[2];
                }
                ++*(_DWORD *)(*v15 - 16);
                v36 = *v15;
                if (*v15)
                  v37 = *(_DWORD *)(v36 - 12) - 1;
                else
                  v37 = -1;
                *(_DWORD *)(v36 - 12) = v37;
                v38 = *v15;
                if (*v15)
                {
                  v53 = 6 * *(_DWORD *)(v38 - 12);
                  v54 = *(_DWORD *)(v38 - 4);
                  if (v53 < v54 && v54 >= 9)
                    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)(v9 + 32), v54 >> 1, 0);
                }
              }
LABEL_42:
              if (v30)
              {
                v39 = *(_QWORD *)(v30 + 200);
                if (v39)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 912))(v39);
                  v40 = *(_QWORD *)(v30 + 200);
                  if (v40)
                  {
                    *(_QWORD *)(v30 + 200) = 0;
                    v41 = *(unsigned int *)(v40 + 196);
                    if ((_DWORD)v41)
                    {
                      v42 = *(_QWORD **)(v40 + 184);
                      v43 = v42 + 1;
                      v44 = *(unsigned int *)(v40 + 196);
                      while (*v42 != v30)
                      {
                        ++v42;
                        ++v43;
                        if (!--v44)
                          goto LABEL_53;
                      }
                      *v42 = 0;
                      if (*(_DWORD *)(v30 + 8) == 1)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
                        v41 = *(unsigned int *)(v40 + 196);
                      }
                      else
                      {
                        --*(_DWORD *)(v30 + 8);
                      }
                      memmove(v42, v42 + 1, *(_QWORD *)(v40 + 184) + 8 * v41 - (_QWORD)v43);
                      --*(_DWORD *)(v40 + 196);
                    }
                  }
                }
LABEL_53:
                if (*(_DWORD *)(v30 + 8) == 1)
                  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
                else
                  --*(_DWORD *)(v30 + 8);
              }
              goto LABEL_55;
            }
            v28 = *(_DWORD *)(v19 - 4);
          }
          v32 = (_QWORD *)(v19 + 16 * v28);
          if (v32 == v29)
            goto LABEL_42;
          goto LABEL_31;
        }
      }
    }
  }
LABEL_55:
  v45 = *(unsigned int *)(v9 + 60);
  if ((_DWORD)v45)
  {
    v46 = *(_QWORD **)(v9 + 48);
    if (*v46 == a2)
    {
      v47 = 0;
LABEL_62:
      v49 = &v46[v47];
      *v49 = 0;
      if (*(_DWORD *)(a2 + 8) == 1)
      {
        WebCore::PageOverlay::~PageOverlay((WebCore::PageOverlay *)a2, v14);
        WTF::fastFree(v50, v51);
        v45 = *(unsigned int *)(v9 + 60);
      }
      else
      {
        --*(_DWORD *)(a2 + 8);
      }
      memmove(v49, v49 + 1, *(_QWORD *)(v9 + 48) + 8 * v45 - (_QWORD)(v49 + 1));
      --*(_DWORD *)(v9 + 60);
    }
    else
    {
      v47 = 0;
      while (v45 - 1 != v47)
      {
        v48 = v46[++v47];
        if (v48 == a2)
          goto LABEL_62;
      }
    }
  }
  return WebCore::PageOverlayController::installedPageOverlaysChanged((WebCore::PageOverlayController *)v9);
}

uint64_t WebCore::PageOverlay::clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;

  v1 = *(_QWORD *)(this + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 1232);
      if (v3)
      {
        ++*(_DWORD *)(v3 + 40);
        v4 = *(_QWORD *)(this + 16);
        v5 = *(_QWORD *)(v3 + 32);
        v6 = *(_DWORD *)(v5 - 8);
        v7 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
        v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
        v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
        v10 = v6 & ((v9 >> 31) ^ v9);
        v11 = *(_QWORD *)(v5 + 16 * v10);
        if (v11 == -1 || v11 != v4)
        {
          v13 = 1;
          do
          {
            v10 = ((_DWORD)v10 + v13) & v6;
            v14 = *(_QWORD *)(v5 + 16 * v10);
            ++v13;
          }
          while (v14 == -1 || v14 != v4);
        }
        return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 16 * v10 + 8) + 216))(*(_QWORD *)(v5 + 16 * v10 + 8), 0);
      }
    }
  }
  return this;
}

uint64_t WebCore::PageOverlay::layer(WebCore::PageOverlay *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 1232);
  ++*(_DWORD *)(v1 + 40);
  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return 0;
  if (!*(_QWORD *)(v2 + 8))
    return 0;
  v3 = *(_QWORD *)(v1 + 32);
  if (!v3)
    return 0;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; ++i)
  {
    v10 = v8;
    v11 = *(_QWORD *)(v3 + 16 * v8);
    if (v11 != -1)
    {
      if (!v11)
        return 0;
      if (v11 == v2)
        break;
    }
    v8 = (v10 + i) & v4;
  }
  return *(_QWORD *)(v3 + 16 * v10 + 8);
}

void WebCore::PageOverlayController::~PageOverlayController(WebCore::PageOverlayController *this, void *a2)
{
  uint64_t v3;
  WebCore::PageOverlay **v4;
  uint64_t v5;
  WebCore::PageOverlay *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  _DWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  v3 = *((unsigned int *)this + 15);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::PageOverlay **)*((_QWORD *)this + 6);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*((_DWORD *)v6 + 2) == 1)
        {
          WebCore::PageOverlay::~PageOverlay(v6, a2);
          WTF::fastFree(v7, v8);
        }
        else
        {
          --*((_DWORD *)v6 + 2);
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v9 = (WTF *)*((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *((_QWORD *)this + 4);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = v10 + 16 * i;
        v14 = *(unsigned int **)v13;
        if (*(_QWORD *)v13 != -1)
        {
          v15 = *(_DWORD **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v15)
          {
            if (v15[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
              v14 = *(unsigned int **)v13;
            }
            else
            {
              --v15[2];
            }
          }
          *(_QWORD *)v13 = 0;
          if (v14)
          {
            do
            {
              v16 = __ldaxr(v14);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v14));
            if (!v17)
            {
              atomic_store(1u, v14);
              WTF::fastFree((WTF *)v14, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v10 - 16), a2);
  }
  v18 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
    else
      --v18[2];
  }
  v19 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
    else
      --v19[2];
  }
  v20 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::PageOverlayController::~PageOverlayController(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::PageOverlayController::installedPageOverlaysChanged(WebCore::PageOverlayController *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Page *v7;
  uint64_t v8;
  BOOL v9;
  WebCore::LocalFrameView *v10;
  double v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float *v32;
  uint64_t v34;
  float v35;
  float v36;
  BOOL v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  _QWORD *v42;
  WTF *v43;
  void *v44;
  uint64_t result;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::LocalFrameView *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  _DWORD *v63;
  WTF *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  char *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  int v75;
  unint64_t v76;

  v2 = *((unsigned int *)this + 15);
  if ((_DWORD)v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = 8 * v2;
    v5 = v4;
    v6 = v3;
    while (*(_BYTE *)(*(_QWORD *)v6 + 121))
    {
      v6 += 8;
      v5 -= 8;
      if (!v5)
        goto LABEL_5;
    }
    while (*(_BYTE *)(*(_QWORD *)v3 + 121))
    {
      v3 += 8;
      v4 -= 8;
      if (!v4)
        goto LABEL_8;
    }
    v7 = *(WebCore::Page **)(*((_QWORD *)this + 1) + 8);
    ++*(_DWORD *)v7;
    v17 = *(_QWORD *)(*((_QWORD *)v7 + 6) + 16);
    WebCore::PageOverlayController::createRootLayersIfNeeded(this);
    v19 = *((_QWORD *)this + 4);
    if (v19)
    {
      v21 = *(unsigned int *)(v19 - 4);
      v22 = (_QWORD *)(v19 + 16 * v21);
      if (*(_DWORD *)(v19 - 12))
      {
        v20 = (_QWORD *)*((_QWORD *)this + 4);
        if ((_DWORD)v21)
        {
          v67 = 16 * v21;
          v20 = (_QWORD *)*((_QWORD *)this + 4);
          while ((unint64_t)(*v20 + 1) <= 1)
          {
            v20 += 2;
            v67 -= 16;
            if (!v67)
            {
              v20 = v22;
              break;
            }
          }
        }
LABEL_25:
        v23 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 658);
        v70 = (char *)this + 32;
        v71 = v20;
        v72 = v22;
        if (v19)
        {
          v25 = *(unsigned int *)(v19 - 4);
          v24 = (_QWORD *)(v19 + 16 * v25);
        }
        else
        {
          v24 = 0;
          v25 = 0;
        }
        v73 = v24;
        v74 = v19 + 16 * v25;
        v75 = 0;
        if (v20 == v24)
        {
          if (!v19)
          {
LABEL_29:
            v26 = 0;
LABEL_30:
            if (v20 != v26)
            {
              v27 = (v23 >> 4) & 1;
              do
              {
                v28 = *(_QWORD *)(*v20 + 8);
                ++*(_DWORD *)(v28 + 8);
                if (!*(_BYTE *)(v28 + 121))
                {
                  v29 = v20[1];
                  v30 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v30 = off_1E34018D8;
                  *(_BYTE *)(v30 + 8) = v27;
                  v76 = v30;
                  WebCore::GraphicsLayer::traverse(v29, &v76);
                  v31 = v76;
                  v76 = 0;
                  if (v31)
                    (*(void (**)(unint64_t))(*(_QWORD *)v31 + 8))(v31);
                  v32 = (float *)v20[1];
                  if (*(int *)(v28 + 132) < 1 || *(_DWORD *)(v28 + 136) < 1)
                  {
                    v34 = WebCore::PageOverlay::bounds((WebCore::PageOverlay *)v28);
                  }
                  else
                  {
                    v34 = *(_QWORD *)(v28 + 124);
                    v18 = *(void **)(v28 + 132);
                  }
                  v35 = (float)(int)v18;
                  v36 = (float)SHIDWORD(v18);
                  v37 = v32[14] == (float)(int)v34 && v32[15] == (float)SHIDWORD(v34);
                  if (!v37 || (v32[22] == v35 ? (v38 = v32[23] == v36) : (v38 = 0), !v38))
                  {
                    *(float *)&v76 = (float)(int)v34;
                    *((float *)&v76 + 1) = (float)SHIDWORD(v34);
                    (*(void (**)(float *, unint64_t *))(*(_QWORD *)v32 + 128))(v32, &v76);
                    v76 = __PAIR64__(LODWORD(v36), LODWORD(v35));
                    (*(void (**)(float *, unint64_t *))(*(_QWORD *)v32 + 160))(v32, &v76);
                  }
                  v39 = v20[1];
                  if (!*(_QWORD *)(v39 + 200))
                  {
                    v40 = *((_QWORD *)this + 3);
                    ++*(_DWORD *)(v39 + 8);
                    v76 = v39;
                    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v40 + 64))(v40, &v76);
                    v41 = (_DWORD *)v76;
                    v76 = 0;
                    if (v41)
                    {
                      if (v41[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 16))(v41);
                      else
                        --v41[2];
                    }
                  }
                }
                if (*(_DWORD *)(v28 + 8) == 1)
                {
                  WebCore::PageOverlay::~PageOverlay((WebCore::PageOverlay *)v28, v18);
                  WTF::fastFree(v43, v44);
                }
                else
                {
                  --*(_DWORD *)(v28 + 8);
                }
                v42 = v20 + 2;
                v71 = v20 + 2;
                if (v20 + 2 != v72)
                {
                  while ((unint64_t)(*v42 + 1) <= 1)
                  {
                    v42 += 2;
                    if (v42 == v72)
                    {
                      v42 = v72;
                      break;
                    }
                  }
                  v71 = v42;
                }
                ++v75;
                WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v70);
                v20 = v71;
                ++*((_DWORD *)v70 + 2);
              }
              while (v20 != v26);
            }
            v63 = (_DWORD *)*((_QWORD *)this + 3);
            ++v63[2];
            (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v17 + 992))(v17, v63);
            if (v63[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 16))(v63);
            else
              --v63[2];
            goto LABEL_6;
          }
        }
        else
        {
          if (!*(_QWORD *)(*v20 + 8))
          {
            v68 = v20;
            do
            {
              v69 = v68 + 2;
              v68 = v22;
              if (v69 != v22)
              {
                v68 = v69;
                while ((unint64_t)(*v68 + 1) <= 1)
                {
                  v68 += 2;
                  if (v68 == v22)
                  {
                    v68 = v22;
                    break;
                  }
                }
              }
              v20 = v24;
              if (v68 == v24)
                break;
              v20 = v68;
            }
            while (!*(_QWORD *)(*v68 + 8));
          }
          v71 = v20;
          if (!v19)
            goto LABEL_29;
        }
        v26 = (_QWORD *)(v19 + 16 * *(unsigned int *)(v19 - 4));
        goto LABEL_30;
      }
      v20 = (_QWORD *)(v19 + 16 * v21);
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v22 = (_QWORD *)(v19 + 16 * v21);
    goto LABEL_25;
  }
LABEL_5:
  v7 = *(WebCore::Page **)(*((_QWORD *)this + 1) + 8);
  ++*(_DWORD *)v7;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v7 + 6) + 16) + 992))(*(_QWORD *)(*((_QWORD *)v7 + 6) + 16), 0);
LABEL_6:
  if (*(_DWORD *)v7 == 1)
  {
    WebCore::Page::~Page(v7);
    WTF::fastFree(v64, v65);
  }
  else
  {
    --*(_DWORD *)v7;
  }
LABEL_8:
  v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 160);
  if (v8)
    v9 = *(_BYTE *)(v8 + 144) == 0;
  else
    v9 = 0;
  if (v9)
  {
    v10 = *(WebCore::LocalFrameView **)(v8 + 288);
    if (v10)
    {
      ++*((_DWORD *)v10 + 2);
      v11 = WebCore::LocalFrameView::setNeedsCompositingConfigurationUpdate(v10);
      if (*((_DWORD *)v10 + 2) == 1)
        (*(void (**)(WebCore::LocalFrameView *, double))(*(_QWORD *)v10 + 8))(v10, v11);
      else
        --*((_DWORD *)v10 + 2);
    }
  }
  v12 = *((unsigned int *)this + 15);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = (uint64_t *)*((_QWORD *)this + 6);
    v15 = 8 * v12;
    do
    {
      v16 = *v14++;
      v13 |= *(_BYTE *)(v16 + 120) != 0;
      v15 -= 8;
    }
    while (v15);
  }
  else
  {
    v13 = 0;
  }
  result = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*((_QWORD *)this + 1) + 8));
  if (result)
  {
    v47 = result;
    v48 = *(_QWORD *)(result + 8);
    if (__ldaxr((unsigned __int8 *)v48))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v48))
    {
      goto LABEL_72;
    }
    result = MEMORY[0x19AEA534C](v48);
LABEL_72:
    ++*(_QWORD *)(v48 + 8);
    v50 = __ldxr((unsigned __int8 *)v48);
    if (v50 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v48))
        goto LABEL_77;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v48);
LABEL_77:
    if (*(_BYTE *)(v47 + 16) != (v13 & 1))
    {
      *(_BYTE *)(v47 + 16) = v13 & 1;
      v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 24) + 8) + 160);
      if (v51)
      {
        while (1)
        {
          do
          {
LABEL_79:
            v52 = (_QWORD *)v51;
            if (!*(_BYTE *)(v51 + 144))
            {
              v55 = *(WebCore::LocalFrameView **)(v51 + 288);
              if (v55)
              {
                result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 40))(v47, *(_QWORD *)(v51 + 288));
                if ((_DWORD)result)
                  result = WebCore::ScrollingCoordinator::updateSynchronousScrollingReasons((WebCore::ScrollingCoordinator *)v47, v55);
              }
            }
            v51 = v52[11];
          }
          while (v51);
          v53 = *(_QWORD *)(v52[6] + 8);
          if (!v53)
            break;
          v51 = v52[9];
          if (!v51)
          {
            while (1)
            {
              v54 = *(_QWORD *)(v53 + 56);
              if (!v54)
                goto LABEL_90;
              v53 = *(_QWORD *)(v54 + 8);
              if (!v53)
                goto LABEL_90;
              v51 = *(_QWORD *)(v53 + 72);
              if (v51)
                goto LABEL_79;
            }
          }
        }
      }
    }
LABEL_90:
    v56 = *(_QWORD *)(v47 + 8);
    if (__ldaxr((unsigned __int8 *)v56))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v56))
    {
      goto LABEL_94;
    }
    result = MEMORY[0x19AEA534C](v56);
LABEL_94:
    v58 = *(_QWORD *)(v56 + 8);
    v59 = v58 - 1;
    *(_QWORD *)(v56 + 8) = v58 - 1;
    if (v58 == 1)
    {
      v66 = *(_QWORD *)(v56 + 16);
      v60 = *(_QWORD *)(v56 + 24);
      *(_QWORD *)(v56 + 24) = 0;
      v61 = v66 != 0;
    }
    else
    {
      v60 = 0;
      v61 = 1;
    }
    v62 = __ldxr((unsigned __int8 *)v56);
    if (v62 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v56))
      {
        if (v59)
          return result;
LABEL_102:
        if (v60)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
        if (!v61)
          return WTF::fastFree((WTF *)v56, v46);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v56);
    if (v59)
      return result;
    goto LABEL_102;
  }
  return result;
}

uint64_t WebCore::PageOverlayController::documentOverlayRootLayer(WebCore::PageOverlayController *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t WebCore::PageOverlayController::viewOverlayRootLayer(WebCore::PageOverlayController *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::begin(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a2;
  if (!*a2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v2 + 16 * v4;
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = v2 + 16 * v4;
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = v2 + 16 * v4;
    goto LABEL_3;
  }
  v3 = *a2;
  if ((_DWORD)v4)
  {
    v9 = 16 * v4;
    v3 = *a2;
    while ((unint64_t)(*(_QWORD *)v3 + 1) <= 1)
    {
      v3 += 16;
      v9 -= 16;
      if (!v9)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_4:
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = v5;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v6 = v2 + 16 * v7;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = v2 + 16 * v7;
  *(_DWORD *)(result + 40) = 0;
LABEL_7:
  while (v3 != v6 && !*(_QWORD *)(*(_QWORD *)v3 + 8))
  {
    v8 = v3 + 16;
    *(_QWORD *)(result + 8) = v3 + 16;
    v3 = v5;
    if (v8 != v5)
    {
      v3 = v8;
      while ((unint64_t)(*(_QWORD *)v3 + 1) <= 1)
      {
        v3 += 16;
        *(_QWORD *)(result + 8) = v3;
        if (v3 == v5)
        {
          v3 = v5;
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::end(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2)
  {
    v4 = *(unsigned int *)(v2 - 4);
    v3 = v2 + 16 * v4;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = v3;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = 0;
  }
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = v2 + 16 * v4;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t WebCore::updateOverlayGeometry(WebCore *this, WebCore::PageOverlay *a2, WebCore::GraphicsLayer *a3)
{
  uint64_t result;
  uint64_t v7;
  float v8;
  float v9;
  BOOL v10;
  BOOL v11;
  float v12;
  float v13;

  if (*((int *)this + 33) < 1 || *((_DWORD *)this + 34) < 1)
  {
    result = WebCore::PageOverlay::bounds(this);
  }
  else
  {
    result = *(_QWORD *)((char *)this + 124);
    v7 = *(_QWORD *)((char *)this + 132);
  }
  v8 = (float)(int)v7;
  v9 = (float)SHIDWORD(v7);
  v10 = *((float *)a2 + 14) == (float)(int)result && *((float *)a2 + 15) == (float)SHIDWORD(result);
  if (!v10 || (*((float *)a2 + 22) == v8 ? (v11 = *((float *)a2 + 23) == v9) : (v11 = 0), !v11))
  {
    v12 = (float)(int)result;
    v13 = (float)SHIDWORD(result);
    (*(void (**)(WebCore::PageOverlay *, float *))(*(_QWORD *)a2 + 128))(a2, &v12);
    v12 = v8;
    v13 = v9;
    return (*(uint64_t (**)(WebCore::PageOverlay *, float *))(*(_QWORD *)a2 + 160))(a2, &v12);
  }
  return result;
}

WebCore::PageOverlay **WTF::Ref<WebCore::PageOverlay,WTF::RawPtrTraits<WebCore::PageOverlay>,WTF::DefaultRefDerefTraits<WebCore::PageOverlay>>::~Ref(WebCore::PageOverlay **a1, void *a2)
{
  WebCore::PageOverlay *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::PageOverlay::~PageOverlay(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  return a1;
}

uint64_t WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIterator::operator++(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  *(_QWORD *)(a1 + 8) = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
  {
    v3 += 2;
    *(_QWORD *)(a1 + 8) = v3;
  }
  ++*(_DWORD *)(a1 + 40);
  WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((_QWORD *)a1);
  ++*(_DWORD *)(*(_QWORD *)a1 + 8);
  return a1;
}

WTF::StringImpl *WebCore::PageOverlayController::installPageOverlay(uint64_t a1, uint64_t a2, int a3)
{
  WTF::StringImpl *result;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void *v29;
  WTF::StringImpl *v30;
  uint64_t *v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  int i;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  unsigned int v58;
  unsigned int v59;
  _DWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  WTF *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  BOOL v81;
  WebCore::LocalFrameView *v82;
  double v83;
  float *v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  float v88;
  BOOL v89;
  BOOL v90;
  uint64_t v91;
  NSObject *v92;
  WTF::MonotonicTime *v93;
  uint64_t v94;
  double v95;
  WTF *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  int v101;
  WTF::StringImpl *v102;

  result = WebCore::PageOverlayController::createRootLayersIfNeeded((WTF::StringImpl *)a1);
  v7 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD **)(a1 + 48);
    v9 = *(unsigned int *)(a1 + 60);
    do
    {
      if (*v8 == a2)
        return result;
      ++v8;
      --v9;
    }
    while (v9);
  }
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 56))
  {
    v10 = v7 + (v7 >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 <= v7 + 1)
      v12 = v7 + 1;
    else
      v12 = v11;
    if (v12 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v13 = *(void **)(a1 + 48);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v14, v13, 8 * v7);
    if (v13)
    {
      if (*(void **)(a1 + 48) == v13)
      {
        *(_QWORD *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 56) = 0;
      }
      WTF::fastFree((WTF *)v13, v15);
    }
    v7 = *(unsigned int *)(a1 + 60);
    v16 = *(_QWORD *)(a1 + 48);
    ++*(_DWORD *)(a2 + 8);
    v17 = (_QWORD *)(v16 + 8 * v7);
  }
  else
  {
    v17 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v7);
    ++*(_DWORD *)(a2 + 8);
  }
  *v17 = a2;
  *(_DWORD *)(a1 + 60) = v7 + 1;
  if (*(_BYTE *)(a2 + 122))
    v18 = 0;
  else
    v18 = 3;
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  ++*(_DWORD *)v19;
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v19 + 48) + 16) + 904))(*(_QWORD *)(*(_QWORD *)(v19 + 48) + 16));
  if (v20)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(&v102, v20, v18, a1);
    (*(void (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v102 + 24))(v102, v18);
  }
  else
  {
    v98 = WTF::fastMalloc((WTF *)0x380);
    v99 = WebCore::GraphicsLayerCA::GraphicsLayerCA(v98, v18, a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v99 + 24))(v99, v18);
    v102 = (WTF::StringImpl *)v98;
  }
  if (*(_DWORD *)v19 == 1)
  {
    WebCore::Page::~Page(v19);
    WTF::fastFree(v68, v69);
  }
  else
  {
    --*(_DWORD *)v19;
  }
  v101 = 0;
  v100 = 0;
  (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v102 + 152))(v102, &v100);
  (*(void (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v102 + 256))(v102, a2 + 144);
  WebCore::PageOverlayController::installPageOverlay(WebCore::PageOverlay &,WebCore::PageOverlay::FadeMode)::$_0::operator() const(void)::impl += 2;
  v100 = (WTF::StringImpl *)&WebCore::PageOverlayController::installPageOverlay(WebCore::PageOverlay &,WebCore::PageOverlay::FadeMode)::$_0::operator() const(void)::impl;
  (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v102 + 40))(v102, &v100);
  v22 = v100;
  v100 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v102;
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 112);
  ++*(_DWORD *)(v24 + 228);
  (*(void (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v23 + 240))(v23, (*(_QWORD *)(v24 + 664) >> 6) & 1);
  if (*(_BYTE *)(v24 + 247))
    v25 = *(_BYTE *)(v24 + 246) != 0;
  else
    v25 = (*(_QWORD *)(v24 + 696) >> 28) & 1;
  (*(void (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v23 + 616))(v23, v25);
  if (*(_BYTE *)(v24 + 249))
    v26 = *(_BYTE *)(v24 + 248) != 0;
  else
    v26 = (*(_QWORD *)(v24 + 696) >> 31) & 1;
  (*(void (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v23 + 624))(v23, v26);
  if (*(_DWORD *)(v24 + 228) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  else
    --*(_DWORD *)(v24 + 228);
  if (*(_BYTE *)(a2 + 121))
    v27 = *(_QWORD *)(a1 + 16);
  else
    v27 = *(_QWORD *)(a1 + 24);
  v28 = v102;
  ++*((_DWORD *)v102 + 2);
  v100 = v28;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v27 + 64))(v27, &v100);
  v30 = v100;
  v100 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 16))(v30);
    else
      --*((_DWORD *)v30 + 2);
  }
  v31 = (uint64_t *)(a1 + 32);
  v32 = v102;
  ++*((_DWORD *)v102 + 2);
  v33 = *(_DWORD *)(a1 + 40);
  v34 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 40) = v33 + 1;
  if (v33 > v34)
    WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1 + 32, v29);
  v35 = *(_QWORD *)(a2 + 16);
  if (v35
    || (v35 = WTF::fastCompactMalloc((WTF *)0x10),
        *(_DWORD *)v35 = 1,
        *(_QWORD *)(v35 + 8) = a2,
        v38 = *(unsigned int **)(a2 + 16),
        *(_QWORD *)(a2 + 16) = v35,
        !v38))
  {
    do
      v36 = __ldaxr((unsigned int *)v35);
    while (__stlxr(v36 + 1, (unsigned int *)v35));
    do
      v37 = __ldaxr((unsigned int *)v35);
    while (__stlxr(v37 + 1, (unsigned int *)v35));
  }
  else
  {
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      atomic_store(1u, v38);
      WTF::fastFree((WTF *)v38, v29);
    }
    v35 = *(_QWORD *)(a2 + 16);
    do
      v41 = __ldaxr((unsigned int *)v35);
    while (__stlxr(v41 + 1, (unsigned int *)v35));
    do
      v42 = __ldaxr((unsigned int *)v35);
    while (__stlxr(v42 + 1, (unsigned int *)v35));
    if (!v35)
      goto LABEL_58;
  }
  do
  {
    v43 = __ldaxr((unsigned int *)v35);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, (unsigned int *)v35));
  if (!v44)
  {
    atomic_store(1u, (unsigned int *)v35);
    WTF::fastFree((WTF *)v35, v29);
  }
LABEL_58:
  v45 = *v31;
  if (*v31
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)(a1 + 32), 8u, 0), (v45 = *v31) != 0))
  {
    v46 = *(_DWORD *)(v45 - 8);
  }
  else
  {
    v46 = 0;
  }
  v47 = 0;
  v48 = (~(v35 << 32) + v35) ^ ((unint64_t)(~(v35 << 32) + v35) >> 22);
  v49 = 9 * ((v48 + ~(v48 << 13)) ^ ((v48 + ~(v48 << 13)) >> 8));
  v50 = (v49 ^ (v49 >> 15)) + ~((v49 ^ (v49 >> 15)) << 27);
  v51 = (v50 >> 31) ^ v50;
  for (i = 1; ; ++i)
  {
    v53 = v51 & v46;
    v54 = (uint64_t *)(v45 + 16 * v53);
    v55 = *v54;
    if (*v54 != -1)
      break;
    v47 = v45 + 16 * v53;
LABEL_67:
    v51 = i + v53;
  }
  if (!v55)
  {
    if (v47)
    {
      *(_QWORD *)v47 = 0;
      *(_QWORD *)(v47 + 8) = 0;
      --*(_DWORD *)(*v31 - 16);
      *(_QWORD *)v47 = v35;
    }
    else
    {
      *v54 = v35;
      v47 = v45 + 16 * v53;
    }
    v60 = *(_DWORD **)(v47 + 8);
    *(_QWORD *)(v47 + 8) = v32;
    if (v60)
    {
      if (v60[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v60 + 16))(v60);
      else
        --v60[2];
    }
    v61 = *v31;
    if (*v31)
      v62 = *(_DWORD *)(v61 - 12) + 1;
    else
      v62 = 1;
    *(_DWORD *)(v61 - 12) = v62;
    v63 = *v31;
    if (*v31)
      v64 = *(_DWORD *)(v63 - 12);
    else
      v64 = 0;
    v65 = (*(_DWORD *)(v63 - 16) + v64);
    v66 = *(unsigned int *)(v63 - 4);
    if (v66 > 0x400)
    {
      if (v66 > 2 * v65)
        goto LABEL_94;
    }
    else
    {
      if (3 * v66 > 4 * v65)
        goto LABEL_94;
      if (!(_DWORD)v66)
      {
        v67 = 8;
        goto LABEL_93;
      }
    }
    v67 = (_DWORD)v66 << (6 * *(_DWORD *)(v63 - 12) >= (2 * v66));
LABEL_93:
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)(a1 + 32), v67, (unsigned int **)v47);
    goto LABEL_94;
  }
  if (v55 != v35)
    goto LABEL_67;
  v56 = v45 + 16 * v53;
  v57 = *(_DWORD **)(v56 + 8);
  *(_QWORD *)(v56 + 8) = v32;
  if (!v57)
  {
LABEL_73:
    if (!v35)
      goto LABEL_94;
    goto LABEL_74;
  }
  if (v57[2] != 1)
  {
    --v57[2];
    goto LABEL_73;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v57 + 16))(v57);
  if (v35)
  {
    do
    {
LABEL_74:
      v58 = __ldaxr((unsigned int *)v35);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, (unsigned int *)v35));
    if (!v59)
    {
      atomic_store(1u, (unsigned int *)v35);
      WTF::fastFree((WTF *)v35, v29);
    }
  }
LABEL_94:
  v70 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  ++*(_DWORD *)v70;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), a2, v70);
  v72 = *(_QWORD *)(v70 + 16);
  if (v72)
    goto LABEL_163;
  v72 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v72 = 1;
  *(_QWORD *)(v72 + 8) = v70;
  v73 = *(unsigned int **)(v70 + 16);
  *(_QWORD *)(v70 + 16) = v72;
  if (!v73)
    goto LABEL_163;
  do
  {
    v74 = __ldaxr(v73);
    v75 = v74 - 1;
  }
  while (__stlxr(v75, v73));
  if (!v75)
  {
    atomic_store(1u, v73);
    WTF::fastFree((WTF *)v73, v71);
  }
  v72 = *(_QWORD *)(v70 + 16);
  if (v72)
  {
LABEL_163:
    do
      v76 = __ldaxr((unsigned int *)v72);
    while (__stlxr(v76 + 1, (unsigned int *)v72));
  }
  v77 = *(unsigned int **)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v72;
  if (v77)
  {
    do
    {
      v78 = __ldaxr(v77);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, v77));
    if (!v79)
    {
      atomic_store(1u, v77);
      WTF::fastFree((WTF *)v77, v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a2, v70);
  if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a2 + 40));
  if (*(_DWORD *)v70 == 1)
  {
    WebCore::Page::~Page(v70);
    WTF::fastFree(v96, v97);
  }
  else
  {
    --*(_DWORD *)v70;
  }
  v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 160);
  if (v80)
    v81 = *(_BYTE *)(v80 + 144) == 0;
  else
    v81 = 0;
  if (v81)
  {
    v82 = *(WebCore::LocalFrameView **)(v80 + 288);
    if (v82)
    {
      ++*((_DWORD *)v82 + 2);
      v83 = WebCore::LocalFrameView::enterCompositingMode(v82);
      if (*((_DWORD *)v82 + 2) == 1)
        (*(void (**)(WebCore::LocalFrameView *, double))(*(_QWORD *)v82 + 8))(v82, v83);
      else
        --*((_DWORD *)v82 + 2);
    }
  }
  v84 = (float *)v102;
  if (*(int *)(a2 + 132) < 1 || *(int *)(a2 + 136) < 1)
  {
    v85 = WebCore::PageOverlay::bounds((WebCore::PageOverlay *)a2);
  }
  else
  {
    v85 = *(_QWORD *)(a2 + 124);
    v86 = *(_QWORD *)(a2 + 132);
  }
  v87 = (float)(int)v86;
  v88 = (float)SHIDWORD(v86);
  v89 = v84[14] == (float)(int)v85 && v84[15] == (float)SHIDWORD(v85);
  if (!v89 || (v84[22] == v87 ? (v90 = v84[23] == v88) : (v90 = 0), !v90))
  {
    *(float *)&v100 = (float)(int)v85;
    *((float *)&v100 + 1) = (float)SHIDWORD(v85);
    (*(void (**)(float *, WTF::StringImpl **))(*(_QWORD *)v84 + 128))(v84, &v100);
    v100 = (WTF::StringImpl *)__PAIR64__(LODWORD(v88), LODWORD(v87));
    v85 = (*(uint64_t (**)(float *, WTF::StringImpl **))(*(_QWORD *)v84 + 160))(v84, &v100);
  }
  if (a3
    && (*(_DWORD *)(a2 + 112) != 1
     || (*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
  {
    *(_QWORD *)(a2 + 112) = 1;
    v91 = *(_QWORD *)(a2 + 32);
    if (!v91 || !*(_QWORD *)(v91 + 8))
    {
      v92 = qword_1ECE7BE10;
      v85 = os_log_type_enabled((os_log_t)qword_1ECE7BE10, OS_LOG_TYPE_FAULT);
      if ((_DWORD)v85)
      {
        LOWORD(v100) = 0;
        _os_log_fault_impl(&dword_1940B8000, v92, OS_LOG_TYPE_FAULT, "PageOverlay::startFadeAnimation() was called on a PageOverlay without a page", (uint8_t *)&v100, 2u);
      }
    }
    v93 = (WTF::MonotonicTime *)WTF::WallTime::now((WTF::WallTime *)v85);
    *(_QWORD *)(a2 + 96) = v94;
    *(_QWORD *)(a2 + 64) = 0x3FA1111111111111;
    WTF::MonotonicTime::now(v93);
    WebCore::TimerBase::setNextFireTime(a2 + 40, v95 + 0.0333333333);
  }
  WebCore::PageOverlayController::installedPageOverlaysChanged((WebCore::PageOverlayController *)a1);
  result = v102;
  v102 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

uint64_t WebCore::PageOverlayController::didChangeDocumentSize(WebCore::PageOverlayController *this, uint64_t a2, WebCore::GraphicsLayer *a3)
{
  uint64_t result;
  WebCore::PageOverlay **v4;
  WebCore::PageOverlay **v5;
  WebCore::PageOverlay **v6;
  uint64_t v7;
  WebCore::PageOverlay **v8;
  WebCore::PageOverlay **v9;
  uint64_t v10;
  WebCore::PageOverlay **v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WebCore::PageOverlay **v15;
  WebCore::PageOverlay **v16;
  WebCore::PageOverlay *v17;
  uint64_t v18;
  WebCore::PageOverlay **v19;
  WebCore::PageOverlay **v20;
  WebCore::PageOverlay **v21;
  WebCore::PageOverlay **v22;
  int v23;

  v5 = (WebCore::PageOverlay **)*((_QWORD *)this + 4);
  result = (uint64_t)this + 32;
  v4 = v5;
  if (!v5)
  {
    v6 = 0;
    v7 = 0;
LABEL_3:
    v8 = &v4[2 * v7];
    goto LABEL_4;
  }
  v7 = *((unsigned int *)v4 - 1);
  v8 = &v4[2 * v7];
  if (!*((_DWORD *)v4 - 3))
  {
    v6 = &v4[2 * v7];
    goto LABEL_3;
  }
  v6 = v4;
  if ((_DWORD)v7)
  {
    v14 = 16 * v7;
    v6 = v4;
    while ((unint64_t)*v6 + 1 <= 1)
    {
      v6 += 2;
      v14 -= 16;
      if (!v14)
      {
        v6 = v8;
        break;
      }
    }
  }
LABEL_4:
  v18 = result;
  v19 = v6;
  v20 = v8;
  if (v4)
  {
    v10 = *((unsigned int *)v4 - 1);
    v9 = &v4[2 * v10];
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v21 = v9;
  v22 = &v4[2 * v10];
  v23 = 0;
  if (v6 != v9)
  {
    if (!*((_QWORD *)*v6 + 1))
    {
      v15 = v6;
      do
      {
        v16 = v15 + 2;
        v15 = v8;
        if (v16 != v8)
        {
          v15 = v16;
          while ((unint64_t)*v15 + 1 <= 1)
          {
            v15 += 2;
            if (v15 == v8)
            {
              v15 = v8;
              break;
            }
          }
        }
        v6 = v9;
        if (v15 == v9)
          break;
        v6 = v15;
      }
      while (!*((_QWORD *)*v15 + 1));
    }
    v19 = v6;
  }
  if (v4)
    v11 = &v4[2 * *((unsigned int *)v4 - 1)];
  else
    v11 = 0;
  while (v6 != v11)
  {
    v12 = *((_QWORD *)*v6 + 1);
    if (*(_BYTE *)(v12 + 121))
    {
      ++*(_DWORD *)(v12 + 8);
      v17 = (WebCore::PageOverlay *)v12;
      WebCore::updateOverlayGeometry((WebCore *)v12, v6[1], a3);
      WTF::Ref<WebCore::PageOverlay,WTF::RawPtrTraits<WebCore::PageOverlay>,WTF::DefaultRefDerefTraits<WebCore::PageOverlay>>::~Ref(&v17, v13);
    }
    result = WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIterator::operator++((uint64_t)&v18);
    v6 = v19;
  }
  return result;
}

uint64_t WebCore::PageOverlayController::didChangeViewExposedRect(WebCore::PageOverlayController *this)
{
  _DWORD *v1;
  uint64_t result;
  WTF *v3;
  void *v4;

  v1 = *(_DWORD **)(*((_QWORD *)this + 1) + 8);
  ++*v1;
  result = WebCore::Page::scheduleRenderingUpdate((uint64_t)v1, 0x4000);
  if (*v1 == 1)
  {
    WebCore::Page::~Page((uint64_t)v1);
    return WTF::fastFree(v3, v4);
  }
  else
  {
    --*v1;
  }
  return result;
}

BOOL WebCore::PageOverlayController::copyAccessibilityAttributeStringValueForPoint(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t i;
  _BOOL8 v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v20;

  v5 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v5)
  {
    v10 = *(_QWORD *)(a1 + 48) - 8;
    for (i = 8 * v5; ; i -= 8)
    {
      v12 = i != 0;
      if (!i)
        return v12;
      v13 = *(_QWORD *)(v10 + i);
      v14 = *a2;
      v15 = *(_QWORD *)(v13 + 24);
      if (*a2)
        *(_DWORD *)v14 += 4;
      v20 = v14;
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, float, float))(*(_QWORD *)v15 + 56))(v15, v13, &v20, a3, a4, a5);
      v18 = v20;
      v20 = 0;
      if (!v18)
        goto LABEL_9;
      if (*(_DWORD *)v18 != 2)
        break;
      WTF::StringImpl::destroy(v18, v16);
      if (v14)
      {
LABEL_10:
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v16);
        else
          *(_DWORD *)v14 -= 2;
      }
LABEL_12:
      if (v17)
        return v12;
    }
    *(_DWORD *)v18 -= 2;
LABEL_9:
    if (v14)
      goto LABEL_10;
    goto LABEL_12;
  }
  return 0;
}

BOOL WebCore::PageOverlayController::copyAccessibilityAttributeBoolValueForPoint(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t i;
  _BOOL8 v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v20;

  v5 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v5)
  {
    v10 = *(_QWORD *)(a1 + 48) - 8;
    for (i = 8 * v5; ; i -= 8)
    {
      v12 = i != 0;
      if (!i)
        return v12;
      v13 = *(_QWORD *)(v10 + i);
      v14 = *a2;
      v15 = *(_QWORD *)(v13 + 24);
      if (*a2)
        *(_DWORD *)v14 += 4;
      v20 = v14;
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, float, float))(*(_QWORD *)v15 + 64))(v15, v13, &v20, a3, a4, a5);
      v18 = v20;
      v20 = 0;
      if (!v18)
        goto LABEL_9;
      if (*(_DWORD *)v18 != 2)
        break;
      WTF::StringImpl::destroy(v18, v16);
      if (v14)
      {
LABEL_10:
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v16);
        else
          *(_DWORD *)v14 -= 2;
      }
LABEL_12:
      if (v17)
        return v12;
    }
    *(_DWORD *)v18 -= 2;
LABEL_9:
    if (v14)
      goto LABEL_10;
    goto LABEL_12;
  }
  return 0;
}

uint64_t WebCore::PageOverlayController::copyAccessibilityAttributesNames@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v4 = *(unsigned int *)(this + 60);
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    v7 = *(_QWORD *)(this + 48) - 8;
    while (1)
    {
      this = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v7 + v6) + 24) + 72))(*(_QWORD *)(*(_QWORD *)(v7 + v6) + 24), *(_QWORD *)(v7 + v6), a2);
      if (*(_DWORD *)(a3 + 12))
        break;
      this = WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a3, v8);
      v6 -= 8;
      if (!v6)
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return this;
}

_QWORD *WebCore::PageOverlayController::paintContents(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  _QWORD *result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  int v28;
  int v29;
  float v30;
  float v31;
  int v32;
  int v33;
  uint64_t v34;
  void *v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  _QWORD v57[2];

  v9 = *(_QWORD **)(a1 + 32);
  result = (_QWORD *)(a1 + 32);
  v8 = v9;
  if (!v9)
  {
    v10 = 0;
    v11 = 0;
LABEL_3:
    v12 = &v8[2 * v11];
    goto LABEL_4;
  }
  v11 = *((unsigned int *)v8 - 1);
  v12 = &v8[2 * v11];
  if (!*((_DWORD *)v8 - 3))
  {
    v10 = &v8[2 * v11];
    goto LABEL_3;
  }
  v10 = v8;
  if ((_DWORD)v11)
  {
    v48 = 16 * v11;
    v10 = v8;
    while ((unint64_t)(*v10 + 1) <= 1)
    {
      v10 += 2;
      v48 -= 16;
      if (!v48)
      {
        v10 = v12;
        break;
      }
    }
  }
LABEL_4:
  v51 = result;
  v52 = v10;
  v53 = v12;
  if (v8)
  {
    v14 = *((unsigned int *)v8 - 1);
    v13 = &v8[2 * v14];
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v54 = v13;
  v55 = &v8[2 * v14];
  v56 = 0;
  if (v10 == v13)
  {
    if (!v8)
      goto LABEL_8;
  }
  else
  {
    if (!*(_QWORD *)(*v10 + 8))
    {
      v49 = v10;
      do
      {
        v50 = v49 + 2;
        v49 = v12;
        if (v50 != v12)
        {
          v49 = v50;
          while ((unint64_t)(*v49 + 1) <= 1)
          {
            v49 += 2;
            if (v49 == v12)
            {
              v49 = v12;
              break;
            }
          }
        }
        v10 = v13;
        if (v49 == v13)
          break;
        v10 = v49;
      }
      while (!*(_QWORD *)(*v49 + 8));
    }
    v52 = v10;
    if (!v8)
    {
LABEL_8:
      v15 = 0;
      goto LABEL_9;
    }
  }
  v15 = &v8[2 * *((unsigned int *)v8 - 1)];
LABEL_9:
  while (v10 != v15)
  {
    if (v10[1] == a2)
    {
      v17 = *(_QWORD *)(*v10 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
      (*(void (**)(uint64_t, float *))(*(_QWORD *)a3 + 456))(a3, a4);
      ++*(_DWORD *)(v17 + 8);
      v18 = a4[1];
      v19 = floorf(*a4);
      v20 = 2147500000.0;
      if (v19 < 2147500000.0)
      {
        v20 = -2147500000.0;
        if (v19 > -2147500000.0)
          v20 = (float)(int)v19;
      }
      v21 = floorf(v18);
      v22 = 2147500000.0;
      if (v21 < 2147500000.0)
      {
        v22 = -2147500000.0;
        if (v21 > -2147500000.0)
          v22 = (float)(int)v21;
      }
      v23 = v18 + a4[3];
      v24 = ceilf(*a4 + a4[2]);
      v25 = 2147500000.0;
      if (v24 < 2147500000.0)
      {
        v25 = -2147500000.0;
        if (v24 > -2147500000.0)
          v25 = (float)(int)v24;
      }
      v26 = ceilf(v23);
      v27 = 2147500000.0;
      if (v26 < 2147500000.0)
      {
        v27 = -2147500000.0;
        if (v26 > -2147500000.0)
          v27 = (float)(int)v26;
      }
      if (v20 >= 2147500000.0)
      {
        v28 = 0x7FFFFFFF;
      }
      else if (v20 <= -2147500000.0)
      {
        v28 = 0x80000000;
      }
      else
      {
        v28 = (int)v20;
      }
      if (v22 >= 2147500000.0)
      {
        v29 = 0x7FFFFFFF;
      }
      else if (v22 <= -2147500000.0)
      {
        v29 = 0x80000000;
      }
      else
      {
        v29 = (int)v22;
      }
      v30 = v25 - v20;
      v31 = v27 - v22;
      if (v30 >= 2147500000.0)
      {
        v32 = 0x7FFFFFFF;
      }
      else if (v30 <= -2147500000.0)
      {
        v32 = 0x80000000;
      }
      else
      {
        v32 = (int)v30;
      }
      if (v31 >= 2147500000.0)
      {
        v33 = 0x7FFFFFFF;
      }
      else if (v31 <= -2147500000.0)
      {
        v33 = 0x80000000;
      }
      else
      {
        v33 = (int)v31;
      }
      v34 = WebCore::PageOverlay::bounds((WebCore::PageOverlay *)v17);
      if (v28 <= (int)v34)
        v36 = v34;
      else
        v36 = v28;
      if (v29 <= SHIDWORD(v34))
        v37 = HIDWORD(v34);
      else
        v37 = v29;
      v38 = v32 + v28;
      if ((int)v35 + (int)v34 < v32 + v28)
        v38 = (_DWORD)v35 + v34;
      v39 = HIDWORD(v35) + HIDWORD(v34);
      if (HIDWORD(v35) + HIDWORD(v34) >= v33 + v29)
        v39 = v33 + v29;
      if (v36 >= v38 || (int)v37 >= v39)
      {
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
      }
      v40 = (v38 - v36);
      v41 = (v39 - v37);
      v57[0] = v36 | (unint64_t)(v37 << 32);
      v57[1] = v40 | (v41 << 32);
      if ((int)v40 >= 1 && (int)v41 >= 1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
        if (*(_BYTE *)(v17 + 121))
        {
          v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 8) + 160);
          v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 56))(v42);
          if (v43)
          {
            v45 = *(_DWORD *)(v43 + 96);
            v44 = *(_DWORD *)(v43 + 100);
            (*(void (**)(uint64_t, float, float))(*(_QWORD *)a3 + 648))(a3, (float)v45, (float)v44);
            LODWORD(v57[0]) = v36 - v45;
            HIDWORD(v57[0]) = v37 - v44;
          }
        }
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD *))(**(_QWORD **)(v17 + 24) + 32))(*(_QWORD *)(v17 + 24), v17, a3, v57);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
      }
      if (*(_DWORD *)(v17 + 8) == 1)
      {
        WebCore::PageOverlay::~PageOverlay((WebCore::PageOverlay *)v17, v35);
        WTF::fastFree(v46, v47);
      }
      else
      {
        --*(_DWORD *)(v17 + 8);
      }
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
    }
    v16 = v10 + 2;
    v52 = v10 + 2;
    while (v16 != v53 && (unint64_t)(*v16 + 1) <= 1)
    {
      v16 += 2;
      v52 = v16;
    }
    ++v56;
    result = WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v51);
    v10 = v52;
    ++*((_DWORD *)v51 + 2);
  }
  return result;
}

BOOL WebCore::PageOverlayController::shouldSkipLayerInDump(uint64_t a1, uint64_t a2, char a3)
{
  return (a3 & 0x40) == 0;
}

BOOL WebCore::PageOverlayController::shouldDumpPropertyForLayer(int a1, float *a2, char *__s1)
{
  if (__s1)
  {
    if (strcmp(__s1, "anchorPoint"))
      return 1;
  }
  else if ("anchorPoint")
  {
    return 1;
  }
  if (a2[19] != 0.5 || a2[20] != 0.5)
    return 1;
  return a2[21] != 0.0;
}

uint64_t WebCore::PageOverlayController::tiledBackingUsageChanged(uint64_t this, const WebCore::GraphicsLayer *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3)
  {
    v3 = this;
    v4 = (*(uint64_t (**)(const WebCore::GraphicsLayer *))(*(_QWORD *)a2 + 832))(a2);
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 144))(v4, (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 658) >> 4) & 1);
  }
  return this;
}

uint64_t WebCore::Performance::resourceTimingBufferFullTimerFired(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  WebCore *v4;
  void *v5;
  uint64_t v6;
  WebCore::Event *v7;
  void *v8;
  void *v9;
  void *v10;
  WebCore::PerformanceEntry **v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Event *v14;
  WebCore::Event *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::Event *v18;
  uint64_t v19;
  WebCore::Event *v20;
  WebCore::PerformanceEntry **v21;
  uint64_t v22;
  WebCore::PerformanceEntry *v23;
  WebCore::Event *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WebCore::PerformanceEntry *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::Event *v32;
  uint64_t v33;
  WebCore::PerformanceEntry **v34;
  int v35;
  unsigned int v36;

  v2 = this;
  v3 = *(_DWORD *)(this + 156);
  if (v3)
  {
    while (1)
    {
      v34 = *(WebCore::PerformanceEntry ***)(v2 + 144);
      v35 = *(_DWORD *)(v2 + 152);
      v36 = v3;
      v32 = 0;
      *(_QWORD *)(v2 + 144) = 0;
      v33 = 0;
      *(_QWORD *)(v2 + 152) = 0;
      v4 = (WebCore *)WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, a2);
      if (*(_DWORD *)(v2 + 76) >= *(_DWORD *)(v2 + 80))
      {
        *(_BYTE *)(v2 + 160) = 1;
        v6 = WebCore::eventNames(v4);
        WebCore::Event::create((_QWORD *)(v6 + 1704), 0, 0, 0, (uint64_t *)&v32);
        WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v2 + 24), v32);
        v7 = v32;
        v32 = 0;
        if (v7)
        {
          if (*((_DWORD *)v7 + 4) == 1)
            (*(void (**)(WebCore::Event *))(*(_QWORD *)v7 + 8))(v7);
          else
            --*((_DWORD *)v7 + 4);
        }
      }
      if (*(_BYTE *)(v2 + 160))
        break;
      v32 = *(WebCore::Event **)(v2 + 144);
      v33 = *(_QWORD *)(v2 + 152);
      v30 = 0;
      *(_QWORD *)(v2 + 144) = 0;
      v31 = 0;
      *(_QWORD *)(v2 + 152) = 0;
      WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((void **)&v34, (uint64_t)&v32);
      WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v8);
      WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v9);
      if (v36)
      {
        v11 = v34;
        v12 = 8 * v36;
        do
        {
          v13 = *(unsigned int *)(v2 + 76);
          if (v13 >= *(_DWORD *)(v2 + 80))
          {
            v15 = *v11;
            *((_DWORD *)v15 + 2) = *((_DWORD *)*v11 + 2) + 1;
            v32 = v15;
            v16 = *(unsigned int *)(v2 + 156);
            if ((_DWORD)v16 == *(_DWORD *)(v2 + 152))
            {
              WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>>(v2 + 144, (unint64_t)&v32);
            }
            else
            {
              v19 = *(_QWORD *)(v2 + 144);
              v32 = 0;
              *(_QWORD *)(v19 + 8 * v16) = v15;
              *(_DWORD *)(v2 + 156) = v16 + 1;
            }
            v20 = v32;
            v32 = 0;
            if (v20)
            {
              if (*((_DWORD *)v20 + 2) == 1)
                (*(void (**)(WebCore::Event *))(*(_QWORD *)v20 + 8))(v20);
              else
                --*((_DWORD *)v20 + 2);
            }
          }
          else
          {
            v14 = *v11;
            *((_DWORD *)v14 + 2) = *((_DWORD *)*v11 + 2) + 1;
            v32 = v14;
            if ((_DWORD)v13 == *(_DWORD *)(v2 + 72))
            {
              WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>>(v2 + 64, (unint64_t)&v32);
            }
            else
            {
              v17 = *(_QWORD *)(v2 + 64);
              v32 = 0;
              *(_QWORD *)(v17 + 8 * v13) = v14;
              *(_DWORD *)(v2 + 76) = v13 + 1;
            }
            v18 = v32;
            v32 = 0;
            if (v18)
            {
              if (*((_DWORD *)v18 + 2) == 1)
                (*(void (**)(WebCore::Event *))(*(_QWORD *)v18 + 8))(v18);
              else
                --*((_DWORD *)v18 + 2);
            }
            WebCore::Performance::queueEntry((_QWORD *)v2, *v11);
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      if (v3 <= *(_DWORD *)(v2 + 156))
      {
        WTF::Vector<WTF::RefPtr<WebCore::CSSRule,WTF::RawPtrTraits<WebCore::CSSRule>,WTF::DefaultRefDerefTraits<WebCore::CSSRule>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WTF *)(v2 + 144), v10);
        goto LABEL_35;
      }
      this = WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v10);
      v3 = *(_DWORD *)(v2 + 156);
      if (!v3)
        goto LABEL_36;
    }
    if (v36)
    {
      v21 = v34;
      v22 = 8 * v36;
      do
      {
        v23 = *v21++;
        WebCore::Performance::queueEntry((_QWORD *)v2, v23);
        v22 -= 8;
      }
      while (v22);
    }
    v24 = *(WebCore::Event **)(v2 + 144);
    v32 = v24;
    v25 = *(unsigned int *)(v2 + 156);
    LODWORD(v33) = *(_DWORD *)(v2 + 152);
    HIDWORD(v33) = v25;
    v30 = 0;
    *(_QWORD *)(v2 + 144) = 0;
    v31 = 0;
    *(_QWORD *)(v2 + 152) = 0;
    WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v5);
    if ((_DWORD)v25)
    {
      v28 = 8 * v25;
      do
      {
        v29 = *(WebCore::PerformanceEntry **)v24;
        v24 = (WebCore::Event *)((char *)v24 + 8);
        WebCore::Performance::queueEntry((_QWORD *)v2, v29);
        v28 -= 8;
      }
      while (v28);
    }
    WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v26);
LABEL_35:
    this = WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v27);
  }
LABEL_36:
  *(_BYTE *)(v2 + 161) = 0;
  return this;
}

void `non-virtual thunk to'WebCore::Performance::~Performance(WebCore::Performance *this, void *a2)
{
  WebCore::Performance::~Performance((WebCore::Performance *)((char *)this - 24), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Performance::~Performance((WebCore::Performance *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

double WebCore::Performance::reduceTimeResolution(double a1)
{
  return *(double *)&WebCore::timePrecision * floor(a1 / *(double *)&WebCore::timePrecision);
}

void WebCore::Performance::allowHighPrecisionTime(WebCore::Performance *this)
{
  WebCore::timePrecision = 0x3EF4F8B588E368F1;
}

double WebCore::Performance::timeResolution(WebCore::Performance *this)
{
  return *(double *)&WebCore::timePrecision;
}

double WebCore::Performance::monotonicTimeFromRelativeTime(WebCore::Performance *this, double a2)
{
  return a2 / 1000.0 + *((double *)this + 21);
}

uint64_t WebCore::Performance::scriptExecutionContext(WebCore::Performance *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::Performance::getEntries@<X0>(WebCore::Performance *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  WTF *v49;
  _DWORD *v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  WTF *v60;
  _DWORD *v61;
  WTF *v62;
  unsigned int v63;

  *a2 = 0;
  a2[1] = 0;
  v4 = *((_QWORD *)this + 22);
  if (v4)
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
    *a2 = (uint64_t)v5;
    ++*(_DWORD *)(v4 + 8);
    *v5 = v4;
    a2[1] = 0x100000010;
    LODWORD(v6) = 1;
    LODWORD(v7) = 16;
  }
  else
  {
    v5 = 0;
    LODWORD(v7) = 0;
    LODWORD(v6) = 0;
  }
  v8 = *((unsigned int *)this + 19);
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)*((_QWORD *)this + 8);
    v10 = v8 + v6;
    v11 = v6;
    if (v10 > v7)
    {
      v12 = v7 | ((unint64_t)v7 >> 2);
      v13 = v12 | 1;
      v14 = v12 >= 0x10;
      v15 = 16;
      if (v14)
        v15 = v13;
      if (v15 <= v10)
        v7 = v8 + v6;
      else
        v7 = v15;
      if (v7 >> 29)
      {
        __break(0xC471u);
        goto LABEL_95;
      }
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v7));
      *((_DWORD *)a2 + 2) = v7;
      *a2 = (uint64_t)v16;
      memcpy(v16, v5, v11 * 8);
      if (v5)
      {
        if (v16 == v5)
        {
          LODWORD(v7) = 0;
          v16 = 0;
          *a2 = 0;
          *((_DWORD *)a2 + 2) = 0;
        }
        WTF::fastFree((WTF *)v5, v17);
      }
      v5 = v16;
    }
    v18 = 8 * v8;
    do
    {
      v19 = *v9++;
      ++*(_DWORD *)(v19 + 8);
      v5[v11++] = v19;
      v18 -= 8;
    }
    while (v18);
    *((_DWORD *)a2 + 3) = v10;
    LODWORD(v6) = v10;
  }
  v20 = *((_QWORD *)this + 24);
  if (!v20)
    goto LABEL_27;
  WebCore::convertToEntrySequence((char **)&v62, (uint64_t *)(v20 + 8));
  v22 = v63;
  v23 = v63 + (unint64_t)v6;
  if (v23 > v7)
  {
    v40 = v7 + ((unint64_t)v7 >> 2);
    if (v40 >= 0x10)
      v41 = v40 + 1;
    else
      v41 = 16;
    if (v41 <= v23)
      v42 = v63 + (unint64_t)v6;
    else
      v42 = v41;
    if (v42 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x196037A58);
    }
    v43 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v42));
    *((_DWORD *)a2 + 2) = v42;
    *a2 = (uint64_t)v43;
    memcpy(v43, v5, 8 * v6);
    if (v5)
    {
      if (v43 == v5)
      {
        *a2 = 0;
        *((_DWORD *)a2 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v21);
    }
  }
  v24 = v62;
  if ((_DWORD)v22)
  {
    v44 = *a2;
    v45 = 8 * v22;
    v46 = 8 * v22;
    v47 = v62;
    do
    {
      v48 = *(_QWORD *)v47;
      *(_QWORD *)v47 = 0;
      v47 = (WTF *)((char *)v47 + 8);
      *(_QWORD *)(v44 + 8 * v6) = v48;
      LODWORD(v6) = v6 + 1;
      v46 -= 8;
    }
    while (v46);
    *((_DWORD *)a2 + 3) = v6;
    v49 = v24;
    do
    {
      v50 = *(_DWORD **)v49;
      *(_QWORD *)v49 = 0;
      if (v50)
      {
        if (v50[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
        else
          --v50[2];
      }
      v49 = (WTF *)((char *)v49 + 8);
      v45 -= 8;
    }
    while (v45);
  }
  if (v24)
    WTF::fastFree(v24, v21);
  WebCore::convertToEntrySequence((char **)&v62, (uint64_t *)(*((_QWORD *)this + 24) + 16));
  v26 = v63;
  v7 = *((unsigned int *)a2 + 2);
  v6 = *((unsigned int *)a2 + 3);
  v27 = v63 + v6;
  if (v27 > v7)
  {
    v51 = v7 + (v7 >> 2);
    if (v51 >= 0x10)
      v52 = v51 + 1;
    else
      v52 = 16;
    if (v52 <= v27)
      v7 = v63 + v6;
    else
      v7 = v52;
    if (!(v7 >> 29))
    {
      v53 = (void *)*a2;
      v54 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
      *((_DWORD *)a2 + 2) = v7;
      *a2 = (uint64_t)v54;
      memcpy(v54, v53, 8 * v6);
      if (v53)
      {
        if (v54 == v53)
        {
          LODWORD(v7) = 0;
          *a2 = 0;
          *((_DWORD *)a2 + 2) = 0;
        }
        WTF::fastFree((WTF *)v53, v25);
      }
      goto LABEL_24;
    }
    __break(0xC471u);
LABEL_95:
    JUMPOUT(0x196037A48);
  }
LABEL_24:
  v28 = v62;
  if ((_DWORD)v26)
  {
    v55 = *a2;
    v56 = 8 * v26;
    v57 = 8 * v26;
    v58 = v62;
    do
    {
      v59 = *(_QWORD *)v58;
      *(_QWORD *)v58 = 0;
      v58 = (WTF *)((char *)v58 + 8);
      *(_QWORD *)(v55 + 8 * v6) = v59;
      LODWORD(v6) = v6 + 1;
      v57 -= 8;
    }
    while (v57);
    *((_DWORD *)a2 + 3) = v6;
    v60 = v28;
    do
    {
      v61 = *(_DWORD **)v60;
      *(_QWORD *)v60 = 0;
      if (v61)
      {
        if (v61[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v61 + 8))(v61);
        else
          --v61[2];
      }
      v60 = (WTF *)((char *)v60 + 8);
      v56 -= 8;
    }
    while (v56);
  }
  if (v28)
    WTF::fastFree(v28, v25);
LABEL_27:
  v29 = *((_QWORD *)this + 23);
  if (v29)
  {
    v30 = v6;
    if ((_DWORD)v6 == (_DWORD)v7)
    {
      v31 = v6 + ((unint64_t)v6 >> 2);
      if (v31 >= 0x10)
        v32 = v31 + 1;
      else
        v32 = 16;
      if (v32 <= (unint64_t)v6 + 1)
        v33 = v6 + 1;
      else
        v33 = v32;
      if (v33 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x196037A50);
      }
      v34 = (void *)*a2;
      v35 = (void *)WTF::fastMalloc((WTF *)(8 * v33));
      *((_DWORD *)a2 + 2) = v33;
      *a2 = (uint64_t)v35;
      memcpy(v35, v34, 8 * v30);
      if (v34)
      {
        if (v35 == v34)
        {
          v35 = 0;
          *a2 = 0;
          *((_DWORD *)a2 + 2) = 0;
        }
        WTF::fastFree((WTF *)v34, v36);
      }
      LODWORD(v6) = v7 + 1;
    }
    else
    {
      LODWORD(v6) = v6 + 1;
      v35 = (void *)*a2;
    }
    ++*(_DWORD *)(v29 + 8);
    *((_QWORD *)v35 + v30) = v29;
    *((_DWORD *)a2 + 3) = v6;
  }
  else
  {
    v35 = (void *)*a2;
  }
  v62 = (WTF *)WebCore::PerformanceEntry::startTimeCompareLessThan;
  v37 = 126 - 2 * __clz(v6);
  if ((_DWORD)v6)
    v38 = v37;
  else
    v38 = 0;
  return std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*,false>((uint64_t)v35, (uint64_t *)v35 + v6, (uint64_t (**)(void))&v62, v38, 1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *(uint64_t **)a2;
    v5 = *(unsigned int *)(result + 8);
    v6 = *(unsigned int *)(result + 12);
    v7 = v6 + v2;
    if (v6 + v2 > v5)
    {
      v8 = v5 + (v5 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= v7)
        v10 = v6 + v2;
      else
        v10 = v9;
      if (v10 >> 29)
        goto LABEL_19;
      v11 = *(void **)result;
      v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
      *(_DWORD *)(v3 + 8) = v10;
      *(_QWORD *)v3 = v12;
      result = (uint64_t)memcpy(v12, v11, 8 * v6);
      if (v11)
      {
        if (*(void **)v3 == v11)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        result = WTF::fastFree((WTF *)v11, v13);
      }
    }
    v14 = *(unsigned int *)(v3 + 12);
    if (v7 >= v14)
    {
      v15 = (_QWORD *)(*(_QWORD *)v3 + 8 * v14);
      v16 = 8 * v2;
      do
      {
        v17 = *v4++;
        ++*(_DWORD *)(v17 + 8);
        *v15++ = v17;
        v16 -= 8;
      }
      while (v16);
      *(_DWORD *)(v3 + 12) = v7;
      return result;
    }
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x196037B54);
  }
  return result;
}

void **WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(void **result, uint64_t a2)
{
  void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = result;
  v4 = *(unsigned int *)(a2 + 12);
  v5 = v4 + *((unsigned int *)result + 3);
  if (v5 > *((unsigned int *)result + 2))
  {
    result = WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v5);
    v4 = *(unsigned int *)(a2 + 12);
  }
  if ((_DWORD)v4)
  {
    v6 = *(uint64_t **)a2;
    v7 = *((_DWORD *)v3 + 3);
    v8 = 8 * v4;
    do
    {
      v9 = *v3;
      v10 = *v6;
      *v6++ = 0;
      v9[v7++] = v10;
      v8 -= 8;
    }
    while (v8);
    *((_DWORD *)v3 + 3) = v7;
  }
  return result;
}

uint64_t std::sort[abi:sn180100]<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *,BOOL (*)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&)>(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(void);

  v2 = 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3);
  v5 = (uint64_t (*)(void))WebCore::PerformanceEntry::startTimeCompareLessThan;
  if (a2 == (uint64_t *)a1)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*,false>(a1, a2, &v5, v3, 1);
}

BOOL WebCore::PerformanceEntry::startTimeCompareLessThan(_QWORD *a1, _QWORD *a2)
{
  double v3;

  v3 = (*(double (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  return v3 < (*(double (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
}

uint64_t WebCore::Performance::getEntriesByType@<X0>(WebCore::Performance *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  char *v19[2];

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (*((_QWORD *)this + 22) && MEMORY[0x19AEA53F4](*(_QWORD *)a2, "navigation", 10))
  {
    v6 = *((_QWORD *)this + 22);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
    *(_QWORD *)a3 = v7;
    ++*(_DWORD *)(v6 + 8);
    *v7 = v6;
    *(_QWORD *)(a3 + 8) = 0x100000010;
  }
  if (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "resource", 8))
    WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a3, (uint64_t)this + 64);
  if (*((_QWORD *)this + 23) && MEMORY[0x19AEA53F4](*(_QWORD *)a2, "paint", 5))
  {
    v14 = *((_QWORD *)this + 23);
    v15 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v15 == *(_DWORD *)(a3 + 8))
    {
      WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PerformancePaintTiming &>(a3, v14);
    }
    else
    {
      v18 = *(_QWORD *)a3;
      ++*(_DWORD *)(v14 + 8);
      *(_QWORD *)(v18 + 8 * v15) = v14;
      *(_DWORD *)(a3 + 12) = v15 + 1;
    }
  }
  if (*((_QWORD *)this + 24))
  {
    if (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "mark", 4))
    {
      v16 = (uint64_t *)(*((_QWORD *)this + 24) + 8);
    }
    else
    {
      if (!MEMORY[0x19AEA53F4](*(_QWORD *)a2, "measure", 7))
        goto LABEL_10;
      v16 = (uint64_t *)(*((_QWORD *)this + 24) + 16);
    }
    WebCore::convertToEntrySequence(v19, v16);
    WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((void **)a3, (uint64_t)v19);
    WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v17);
  }
LABEL_10:
  v8 = *(_QWORD *)a3;
  v9 = *(unsigned int *)(a3 + 12);
  v10 = (uint64_t *)(*(_QWORD *)a3 + 8 * v9);
  v19[0] = (char *)WebCore::PerformanceEntry::startTimeCompareLessThan;
  v11 = 126 - 2 * __clz(v9);
  if ((_DWORD)v9)
    v12 = v11;
  else
    v12 = 0;
  return std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*,false>(v8, v10, (uint64_t (**)(void))v19, v12, 1);
}

uint64_t WebCore::Performance::getEntriesByName@<X0>(WebCore::Performance *this@<X0>, WTF **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::PerformanceUserTiming *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[16];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v8 = *((_QWORD *)this + 22);
  if (!v8)
    goto LABEL_5;
  if (*(_QWORD *)a3)
  {
    if (!MEMORY[0x19AEA53F4](*(_QWORD *)a3, "navigation", 10))
      goto LABEL_5;
    v8 = *((_QWORD *)this + 22);
  }
  if (WTF::equal(*a2, *(const WTF::StringImpl **)(v8 + 16), a3))
    WTF::Vector<WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaSourceHandle&>(a4, *((_QWORD *)this + 22));
LABEL_5:
  if (!*(_QWORD *)a3 || MEMORY[0x19AEA53F4](*(_QWORD *)a3, "resource", 8))
  {
    v9 = *((unsigned int *)this + 19);
    if ((_DWORD)v9)
    {
      v10 = *((_QWORD *)this + 8);
      v11 = 8 * v9;
      do
      {
        if (WTF::equal(*(WTF **)(*(_QWORD *)v10 + 16), *a2, a3))
        {
          v16 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v16 == *(_DWORD *)(a4 + 8))
          {
            WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&>(a4, v10);
          }
          else
          {
            v19 = *(_QWORD *)a4;
            v20 = *(_QWORD *)v10;
            *(_DWORD *)(v20 + 8) = *(_DWORD *)(*(_QWORD *)v10 + 8) + 1;
            *(_QWORD *)(v19 + 8 * v16) = v20;
            *(_DWORD *)(a4 + 12) = v16 + 1;
          }
        }
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
  }
  if (*((_QWORD *)this + 23)
    && (!*(_QWORD *)a3 || MEMORY[0x19AEA53F4](*(_QWORD *)a3, "paint", 5))
    && MEMORY[0x19AEA53F4](*a2, "first-contentful-paint", 22))
  {
    v17 = *((_QWORD *)this + 23);
    v18 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v18 == *(_DWORD *)(a4 + 8))
    {
      WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PerformancePaintTiming &>(a4, v17);
    }
    else
    {
      v21 = *(_QWORD *)a4;
      ++*(_DWORD *)(v17 + 8);
      *(_QWORD *)(v21 + 8 * v18) = v17;
      *(_DWORD *)(a4 + 12) = v18 + 1;
    }
  }
  v12 = (WebCore::PerformanceUserTiming *)*((_QWORD *)this + 24);
  if (v12)
  {
    if (*(_QWORD *)a3)
    {
      if (!MEMORY[0x19AEA53F4](*(_QWORD *)a3, "mark", 4))
        goto LABEL_14;
      v12 = (WebCore::PerformanceUserTiming *)*((_QWORD *)this + 24);
    }
    WebCore::PerformanceUserTiming::getMarks(v12, a2, (WTF *)v22);
    WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((void **)a4, (uint64_t)v22);
    WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v13);
LABEL_14:
    if (!*(_QWORD *)a3 || MEMORY[0x19AEA53F4](*(_QWORD *)a3, "measure", 7))
    {
      WebCore::PerformanceUserTiming::getMeasures(*((WebCore::PerformanceUserTiming **)this + 24), a2, (WTF *)v22);
      WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((void **)a4, (uint64_t)v22);
      WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v14);
    }
  }
  return std::sort[abi:sn180100]<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *,BOOL (*)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&)>(*(_QWORD *)a4, (uint64_t *)(*(_QWORD *)a4 + 8 * *(unsigned int *)(a4 + 12)));
}

uint64_t WebCore::Performance::appendBufferedEntriesByType(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18[2];

  if (a1[22] && MEMORY[0x19AEA53F4](*a2, "navigation", 10) && !*(_BYTE *)(a4 + 43))
  {
    v12 = a1[22];
    v13 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v13 == *(_DWORD *)(a3 + 8))
    {
      WTF::Vector<WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaSourceHandle&>(a3, v12);
    }
    else
    {
      v17 = *(_QWORD **)a3;
      ++*(_DWORD *)(v12 + 8);
      v17[v13] = v12;
      *(_DWORD *)(a3 + 12) = v13 + 1;
    }
    *(_BYTE *)(a4 + 43) = 1;
  }
  if (MEMORY[0x19AEA53F4](*a2, "resource", 8))
    WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a3, (uint64_t)(a1 + 8));
  result = MEMORY[0x19AEA53F4](*a2, "paint", 5);
  if ((_DWORD)result)
  {
    v9 = a1[23];
    if (v9)
    {
      v14 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v14 == *(_DWORD *)(a3 + 8))
      {
        result = WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PerformancePaintTiming &>(a3, v9);
      }
      else
      {
        v16 = *(_QWORD **)a3;
        ++*(_DWORD *)(v9 + 8);
        v16[v14] = v9;
        *(_DWORD *)(a3 + 12) = v14 + 1;
      }
    }
  }
  v10 = a1[24];
  if (v10)
  {
    if (*a2)
    {
      if (!MEMORY[0x19AEA53F4](*a2, "mark", 4))
      {
LABEL_10:
        if (!*a2 || (result = MEMORY[0x19AEA53F4](*a2, "measure", 7), (_DWORD)result))
        {
          WebCore::convertToEntrySequence(v18, (uint64_t *)(a1[24] + 16));
          WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((void **)a3, (uint64_t)v18);
          return WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v11);
        }
        return result;
      }
      v10 = a1[24];
    }
    WebCore::convertToEntrySequence(v18, (uint64_t *)(v10 + 8));
    WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((void **)a3, (uint64_t)v18);
    WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v15);
    goto LABEL_10;
  }
  return result;
}

_QWORD *WebCore::Performance::queueEntry(_QWORD *this, WebCore::PerformanceEntry *a2)
{
  uint64_t *v2;
  _QWORD *v4;
  char v5;
  int v6;

  v2 = (uint64_t *)this[26];
  if (v2)
  {
    v4 = this;
    v5 = 0;
    do
    {
      while (1)
      {
        v6 = *(unsigned __int8 *)(*v2 + 40);
        this = (_QWORD *)(*(uint64_t (**)(WebCore::PerformanceEntry *))(*(_QWORD *)a2 + 32))(a2);
        if ((this & v6) == 0)
          break;
        WebCore::PerformanceObserver::queueEntry(*v2, a2);
        v2 = (uint64_t *)v2[2];
        v5 = 1;
        if (!v2)
          return WebCore::Performance::scheduleTaskIfNeeded(v4);
      }
      v2 = (uint64_t *)v2[2];
    }
    while (v2);
    if ((v5 & 1) != 0)
      return WebCore::Performance::scheduleTaskIfNeeded(v4);
  }
  return this;
}

uint64_t WebCore::Performance::mark@<X0>(_QWORD *a1@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WebCore::ScriptExecutionContext *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  WTF **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  WebCore::PerformanceEntry *v14;
  unsigned int *v16;
  unsigned int v17;
  WTF *v18;
  char v19;
  WebCore::PerformanceEntry *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  WTF::String *v25;
  int v26;
  WTF::String *v27;
  WebCore::PerformanceEntry *v28;
  uint64_t v29;
  unsigned int v30;
  char v31;

  v10 = (WTF **)(a1 + 24);
  v11 = (uint64_t *)a1[24];
  if (!v11)
  {
    v11 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
    v16 = (unsigned int *)WTF::WeakRef<WebCore::Performance,WebCore::WeakPtrImplWithEventTargetData>::implForObject<WebCore::Performance>((uint64_t)a1);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    v11[1] = 0;
    v11[2] = 0;
    *v11 = (uint64_t)v16;
    v18 = *v10;
    *v10 = (WTF *)v11;
    if (v18)
    {
      std::default_delete<WebCore::PerformanceUserTiming>::operator()[abi:sn180100]((int)v10, v18);
      v11 = (uint64_t *)*v10;
    }
  }
  WebCore::PerformanceUserTiming::mark(v11, a2, a3, a4, (uint64_t)&v28);
  v12 = v30;
  if (v30)
  {
    if (v30 == 1)
    {
      v22 = v29;
      v29 = 0;
      *(_BYTE *)a5 = (_BYTE)v28;
      *(_QWORD *)(a5 + 8) = v22;
      goto LABEL_6;
    }
  }
  else
  {
    v13 = (uint64_t *)a1[26];
    if (v13)
    {
      v19 = 0;
      v20 = v28;
      do
      {
        while (1)
        {
          v21 = *(unsigned __int8 *)(*v13 + 40);
          if (((*(unsigned int (**)(WebCore::PerformanceEntry *))(*(_QWORD *)v20 + 32))(v20) & v21) == 0)
            break;
          WebCore::PerformanceObserver::queueEntry(*v13, v20);
          v13 = (uint64_t *)v13[2];
          v19 = 1;
          if (!v13)
            goto LABEL_16;
        }
        v13 = (uint64_t *)v13[2];
      }
      while (v13);
      if ((v19 & 1) != 0)
LABEL_16:
        WebCore::Performance::scheduleTaskIfNeeded(a1);
    }
    if (!v30)
    {
      v14 = v28;
      v28 = 0;
      *(_QWORD *)a5 = v14;
LABEL_6:
      *(_DWORD *)(a5 + 16) = v12;
      return ((uint64_t (*)(char *, WebCore::PerformanceEntry **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15PerformanceMarkENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v12])(&v31, &v28);
    }
  }
  v23 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::Performance::measure(v23, v24, v25, v26, v27);
}

uint64_t WebCore::Performance::measure@<X0>(WTF::String *a1@<X2>, WTF::String *a2@<X4>, _QWORD *a3@<X0>, WTF::StringImpl *a4@<X1>, uint64_t a5@<X3>, uint64_t a6@<X8>)
{
  WTF *v12;
  WTF **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  WebCore::PerformanceEntry *v17;
  char v19;
  WebCore::PerformanceEntry *v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  WTF *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WebCore::PerformanceEntry *v28;
  uint64_t v29;
  unsigned int v30;
  WTF::StringImpl *v31[7];
  WTF::StringImpl **v32;

  v13 = (WTF **)(a3 + 24);
  v12 = (WTF *)a3[24];
  if (!v12)
  {
    v12 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    v22 = (unsigned int *)WTF::WeakRef<WebCore::Performance,WebCore::WeakPtrImplWithEventTargetData>::implForObject<WebCore::Performance>((uint64_t)a3);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
    *(_QWORD *)v12 = v22;
    v24 = *v13;
    *v13 = v12;
    if (v24)
    {
      std::default_delete<WebCore::PerformanceUserTiming>::operator()[abi:sn180100]((int)v13, v24);
      v12 = *v13;
    }
  }
  if (*(_BYTE *)(a5 + 80))
  {
    v31[0] = a2;
    v31[1] = v12;
    v31[2] = a4;
    v31[3] = a1;
    v31[4] = v12;
    v31[5] = a1;
    v31[6] = a2;
    v14 = *(unsigned int *)(a5 + 72);
    if ((_DWORD)v14 == -1)
      goto LABEL_27;
    v32 = v31;
    ((void (*)(WebCore::PerformanceEntry **__return_ptr, WTF::StringImpl ***, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore21PerformanceUserTiming7measureERN3JSC14JSGlobalObjectERKNS6_6StringEONS_8optionalINS_7variantIJSD_NS8_25PerformanceMeasureOptionsEEEEEESF_E3__0JZNS9_7measureESC_SF_SL_SF_E3__1EEEEEJRNS0_6__implIJSD_SI_EEEEEEDcOT_DpOT0____fmatrix
                                                                                                  + v14))(&v28, &v32, a5);
  }
  else
  {
    v31[0] = 0;
    WebCore::PerformanceUserTiming::measure(v12, (WTF::StringImpl **)a1, v31, (WTF::StringImpl **)a2, (uint64_t)&v28);
    v26 = v31[0];
    v31[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        goto LABEL_28;
      *(_DWORD *)v26 -= 2;
    }
  }
  while (1)
  {
    v15 = v30;
    if (v30)
      break;
    v16 = (uint64_t *)a3[26];
    if (v16)
    {
      v19 = 0;
      v20 = v28;
      do
      {
        while (1)
        {
          v21 = *(unsigned __int8 *)(*v16 + 40);
          if (((*(unsigned int (**)(WebCore::PerformanceEntry *))(*(_QWORD *)v20 + 32))(v20) & v21) == 0)
            break;
          WebCore::PerformanceObserver::queueEntry(*v16, v20);
          v16 = (uint64_t *)v16[2];
          v19 = 1;
          if (!v16)
            goto LABEL_15;
        }
        v16 = (uint64_t *)v16[2];
      }
      while (v16);
      if ((v19 & 1) != 0)
LABEL_15:
        WebCore::Performance::scheduleTaskIfNeeded(a3);
    }
    if (!v30)
    {
      v17 = v28;
      v28 = 0;
      *(_QWORD *)a6 = v17;
      goto LABEL_9;
    }
LABEL_27:
    v26 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_28:
    WTF::StringImpl::destroy(v26, v25);
  }
  if (v30 != 1)
    goto LABEL_27;
  v27 = v29;
  v29 = 0;
  *(_BYTE *)a6 = (_BYTE)v28;
  *(_QWORD *)(a6 + 8) = v27;
LABEL_9:
  *(_DWORD *)(a6 + 16) = v15;
  return ((uint64_t (*)(WTF::StringImpl **, WebCore::PerformanceEntry **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore18PerformanceMeasureENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v15])(v31, &v28);
}

WebCore::PerformanceObserver *WebCore::Performance::registerPerformanceObserver(WebCore::Performance *this, WebCore::PerformanceObserver *a2)
{
  void *v4;
  WebCore::PerformanceObserver *result;
  WebCore::PerformanceEntry *v6;
  uint64_t v7;
  WebCore::PerformanceObserver *v8;

  ++*(_DWORD *)a2;
  v8 = a2;
  WTF::ListHashSet<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>::add((uint64_t)&v7, (uint64_t *)this + 25, (uint64_t *)&v8);
  result = v8;
  if (v8)
    result = WTF::RefCounted<WebCore::PerformanceObserver>::deref(v8, v4);
  v6 = (WebCore::PerformanceEntry *)*((_QWORD *)this + 22);
  if (v6 && (*((_BYTE *)a2 + 40) & 1) != 0 && !*((_BYTE *)a2 + 43))
  {
    result = (WebCore::PerformanceObserver *)WebCore::PerformanceObserver::queueEntry((uint64_t)a2, v6);
    *((_BYTE *)a2 + 43) = 1;
  }
  return result;
}

uint64_t WTF::ListHashSet<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v10;
  int i;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *a3;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = (uint64_t *)(v6 + 8 * (result & v7));
    v13 = (_QWORD *)*v12;
    if (!*v12)
      break;
    if (v13 != (_QWORD *)-1)
    {
      v12 = v10;
      if (*v13 == v8)
      {
        v23 = 0;
        goto LABEL_18;
      }
    }
    result = i + (result & v7);
    v10 = v12;
  }
  if (v10)
  {
    *v10 = 0;
    --*(_DWORD *)(*a2 - 16);
    v12 = v10;
  }
  result = WTF::fastMalloc((WTF *)0x18);
  v14 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v14;
  *v12 = result;
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_14;
LABEL_22:
    v12 = WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::expand(a2, (_QWORD **)v12);
    result = *v12;
    goto LABEL_14;
  }
  if (3 * v20 <= 4 * v19)
    goto LABEL_22;
LABEL_14:
  v21 = a2[2];
  *(_QWORD *)(result + 8) = v21;
  *(_QWORD *)(result + 16) = 0;
  if (v21)
    v22 = (uint64_t *)(v21 + 16);
  else
    v22 = a2 + 1;
  *v22 = result;
  a2[2] = result;
  v13 = (_QWORD *)*v12;
  v23 = 1;
LABEL_18:
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v23;
  return result;
}

uint64_t *WebCore::Performance::unregisterPerformanceObserver(WebCore::Performance *this, WebCore::PerformanceObserver *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  v2 = (uint64_t *)((char *)this + 200);
  v3 = WTF::ListHashSet<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>::find<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>((uint64_t *)this + 25, (uint64_t)a2);
  return WTF::ListHashSet<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>::remove(v2, (uint64_t)v3, v4);
}

_QWORD *WebCore::Performance::scheduleTaskIfNeeded(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  if (!*((_BYTE *)this + 162))
  {
    v1 = (uint64_t)this;
    v2 = this[1];
    if (v2)
    {
      this = *(_QWORD **)(v2 + 8);
      if (this)
      {
        *(_BYTE *)(v1 + 162) = 1;
        v3 = (*(uint64_t (**)(_QWORD *))(*(this - 12) + 104))(this - 12);
        ++*(_DWORD *)(v1 + 16);
        v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v4 = &off_1E3401938;
        v4[1] = v1;
        v4[2] = v1;
        v5 = v4;
        WebCore::EventLoopTaskGroup::queueTask(v3, 13, (uint64_t *)&v5);
        this = v5;
        v5 = 0;
        if (this)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
      }
    }
  }
  return this;
}

uint64_t WebCore::PerformanceEntry::parseEntryTypeString(WebCore::PerformanceEntry *this, const WTF::String *a2)
{
  int v3;
  int v4;

  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "navigation", 10) & 1) != 0)
  {
    v3 = 1;
LABEL_10:
    v4 = 1;
    return v3 | (v4 << 8);
  }
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "mark", 4) & 1) != 0)
  {
    v4 = 1;
    v3 = 2;
    return v3 | (v4 << 8);
  }
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "measure", 7) & 1) != 0)
  {
    v4 = 1;
    v3 = 4;
    return v3 | (v4 << 8);
  }
  v3 = 8;
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "resource", 8) & 1) != 0)
    goto LABEL_10;
  v4 = MEMORY[0x19AEA53F4](*(_QWORD *)this, "paint", 5);
  if (v4)
    v3 = 16;
  else
    v3 = 0;
  return v3 | (v4 << 8);
}

WTF **WebCore::PerformanceLogging::javaScriptObjectCounts@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v7;

  v3 = WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
    v3 = WebCore::commonVMSlow(0);
  JSC::Heap::objectTypeCounts((JSC::Heap *)(v3 + 192));
  v4 = *(_QWORD *)v7;
  *(_QWORD *)v7 = 0;
  *a1 = v4;
  return std::unique_ptr<WTF::HashCountedSet<char const*,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>>>::~unique_ptr[abi:sn180100](&v7, v5);
}

WTF::StringImpl *WebCore::PerformanceLoggingClient::synchronousScrollingReasonsAsString@<X0>(WTF::StringImpl *result@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];

  if ((_BYTE)result)
  {
    v3 = "forced,";
    if ((result & 1) == 0)
      v3 = "";
    v4 = 8;
    if ((result & 1) == 0)
      v4 = 1;
    v5 = "slow-repaint objects,";
    if ((result & 0x10) == 0)
      v5 = "";
    v6 = 22;
    if ((result & 0x10) == 0)
      v6 = 1;
    v7 = "viewport-constrained objects,";
    if ((result & 2) == 0)
      v7 = "";
    v8 = 30;
    if ((result & 2) == 0)
      v8 = 1;
    v20[0] = v3;
    v20[1] = v4;
    v9 = "non-layer viewport-constrained objects,";
    if ((result & 4) == 0)
      v9 = "";
    v10 = 40;
    if ((result & 4) == 0)
      v10 = 1;
    v19[0] = v5;
    v19[1] = v6;
    v18[0] = v7;
    v18[1] = v8;
    v11 = "image document,";
    if ((result & 8) == 0)
      v11 = "";
    v17[0] = v9;
    v17[1] = v10;
    if ((result & 8) != 0)
      v12 = 16;
    else
      v12 = 1;
    v16[0] = v11;
    v16[1] = v12;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)v20, (uint64_t)v19, (uint64_t)v18, (uint64_t)v17, (uint64_t)v16, &v15);
    result = v15;
    if (!v15)
    {
      __break(0xC471u);
      return result;
    }
    if (*((_DWORD *)v15 + 1))
    {
      WTF::StringImpl::substring(v15);
      result = v15;
      v15 = 0;
      if (!result)
        return result;
    }
    else
    {
      *(_DWORD *)v15 += 2;
      *a2 = result;
      v15 = 0;
    }
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  else
  {
    v14 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v14 += 2;
    *a2 = v14;
  }
  return result;
}

uint64_t WebCore::PageOverlay::pageOverlayID(WebCore::PageOverlay *this)
{
  return *((_QWORD *)this + 19);
}

float WebCore::GraphicsLayerClient::pageScaleFactor(WebCore::GraphicsLayerClient *this)
{
  return 1.0;
}

float WebCore::GraphicsLayerClient::zoomedOutPageScaleFactor(WebCore::GraphicsLayerClient *this)
{
  return 0.0;
}

uint64_t WebCore::GraphicsLayerClient::customContentsScale(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

float WebCore::GraphicsLayerClient::contentsScaleMultiplierForNewTiles(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 1.0;
}

uint64_t WebCore::GraphicsLayerClient::paintsOpaquelyAtNonIntegralScales(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::isTrackingRepaints(WebCore::GraphicsLayerClient *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::shouldAggressivelyRetainTiles(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::shouldTemporarilyRetainTileCohorts(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 1;
}

uint64_t WebCore::GraphicsLayerClient::useGiantTiles(WebCore::GraphicsLayerClient *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::cssUnprefixedBackdropFilterEnabled(WebCore::GraphicsLayerClient *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::needsIOSDumpRenderTreeMainFrameRenderViewLayerIsAlwaysOpaqueHack(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

double WebCore::GraphicsLayerClient::transformMatrixForProperty@<D0>(_OWORD *a1@<X8>)
{
  double result;

  a1[4] = xmmword_1969F5A28;
  a1[5] = unk_1969F5A38;
  a1[6] = xmmword_1969F5A48;
  a1[7] = unk_1969F5A58;
  *a1 = xmmword_1969F59E8;
  a1[1] = unk_1969F59F8;
  result = 0.0;
  a1[2] = xmmword_1969F5A08;
  a1[3] = unk_1969F5A18;
  return result;
}

uint64_t WebCore::GraphicsLayerClient::layerNeedsPlatformContext(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

uint64_t WebCore::Performance::eventTargetInterface(WebCore::Performance *this)
{
  return 69;
}

uint64_t WebCore::Performance::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

WebCore::Performance *WebCore::Performance::derefEventTarget(WebCore::Performance *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 4) == 1)
  {
    WebCore::Performance::~Performance(this, a2);
    return (WebCore::Performance *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 4);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::Performance::eventTargetInterface(WebCore::Performance *this)
{
  return 69;
}

uint64_t `non-virtual thunk to'WebCore::Performance::scriptExecutionContext(WebCore::Performance *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::Performance::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::Performance::derefEventTarget(uint64_t this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::Performance::~Performance((WebCore::Performance *)(this - 24), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

double WebCore::PerformanceEntry::startTime(WebCore::PerformanceEntry *this)
{
  return *((double *)this + 3);
}

double WebCore::PerformanceEntry::duration(WebCore::PerformanceEntry *this)
{
  return *((double *)this + 4);
}

void std::default_delete<WebCore::PerformanceUserTiming>::operator()[abi:sn180100](int a1, WTF *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  if (this)
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, this);
    v4 = *((_QWORD *)this + 1);
    if (v4)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, this);
    v5 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)v5);
        v8 = *(unsigned int *)(v5 + 28);
        if ((_DWORD)v8)
        {
          v11 = v5;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v8));
          v5 = v11;
        }
        v9 = *(WTF **)(v5 + 16);
        if (v9)
        {
          *(_QWORD *)(v5 + 16) = 0;
          *(_DWORD *)(v5 + 24) = 0;
          v10 = v5;
          WTF::fastFree(v9, this);
          v5 = v10;
        }
        WTF::fastFree((WTF *)v5, this);
      }
    }
    WTF::fastFree(this, this);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  _DWORD *v13;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WTF::StringImpl **)(a1 + 24 * i);
      if (*v5 != (WTF::StringImpl *)-1)
      {
        v6 = a1 + 24 * i;
        v7 = (WTF **)(v6 + 8);
        v8 = *(unsigned int *)(v6 + 20);
        if ((_DWORD)v8)
        {
          v11 = *v7;
          v12 = 8 * v8;
          do
          {
            v13 = *(_DWORD **)v11;
            *(_QWORD *)v11 = 0;
            if (v13)
            {
              if (v13[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
              else
                --v13[2];
            }
            v11 = (WTF *)((char *)v11 + 8);
            v12 -= 8;
          }
          while (v12);
        }
        v9 = *v7;
        if (*v7)
        {
          *v7 = 0;
          *(_DWORD *)(a1 + 24 * i + 16) = 0;
          WTF::fastFree(v9, a2);
        }
        v10 = *v5;
        *v5 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v10 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(void), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(void);
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t *v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
  v10 = 1 - a4;
  while (2)
  {
    v11 = (char *)a2 - (char *)v9;
    v12 = a2 - v9;
    if (v12 >= 2)
    {
      switch(v12)
      {
        case 2uLL:
          v13 = *a3;
          v20 = a2 - 1;
          v21 = v9;
          result = v13();
          if ((_DWORD)result)
            return (uint64_t)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *&>(&v21, &v20);
          return result;
        case 3uLL:
          return (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v9, v9 + 1, a2 - 1, (uint64_t (**)(_QWORD *, _QWORD *))a3);
        case 4uLL:
          return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v9, v9 + 1, v9 + 2, a2 - 1, (uint64_t (**)(_QWORD *, _QWORD *))a3);
        case 5uLL:
          return (uint64_t)std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, (uint64_t (**)(_QWORD *, _QWORD *))a3);
        default:
          if (v11 <= 191)
          {
            if ((a5 & 1) != 0)
              return (uint64_t)std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v9, a2, (uint64_t (**)(_QWORD *, uint64_t))a3);
            else
              return (uint64_t)std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v9, a2, (uint64_t (**)(_QWORD *, _QWORD))a3);
          }
          if (v10 == 1)
          {
            if (v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v9, a2, a2, (unsigned int (**)(_QWORD *, uint64_t))a3);
            return result;
          }
          v14 = v12 >> 1;
          v15 = &v9[v12 >> 1];
          v16 = a2 - 1;
          if ((unint64_t)v11 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(&v9[v12 >> 1], v9, v16, (uint64_t (**)(_QWORD *, _QWORD *))a3);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v9, &v9[v12 >> 1], v16, (uint64_t (**)(_QWORD *, _QWORD *))a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v9 + 1, v15 - 1, a2 - 2, (uint64_t (**)(_QWORD *, _QWORD *))a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v9 + 2, &v9[v14 + 1], a2 - 3, (uint64_t (**)(_QWORD *, _QWORD *))a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v15 - 1, v15, &v9[v14 + 1], (uint64_t (**)(_QWORD *, _QWORD *))a3);
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *>(v9, v15);
          }
          if ((a5 & 1) != 0 || (((uint64_t (*)(uint64_t *, uint64_t *))*a3)(v9 - 1, v9) & 1) != 0)
          {
            v17 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&)>(v9, a2, (uint64_t (**)(_QWORD, _QWORD))a3);
            if ((v18 & 1) != 0)
            {
              v19 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v9, v17, (uint64_t (**)(_DWORD **, char *))a3);
              v8 = v17 + 1;
              result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v17 + 1, a2, (uint64_t (**)(_DWORD **, char *))a3);
              if ((_DWORD)result)
              {
                ++v10;
                a2 = v17;
                if (!v19)
                  continue;
                return result;
              }
              a4 = -v10;
              if (v19)
                goto LABEL_2;
            }
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*,false>(v9, v17, a3, -v10, a5 & 1);
            v8 = v17 + 1;
          }
          else
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&)>(v9, a2, (uint64_t (**)(_DWORD **, uint64_t *))a3);
            v8 = (uint64_t *)result;
          }
          a5 = 0;
          a4 = -v10;
          goto LABEL_2;
      }
    }
    return result;
  }
}

_DWORD *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *&>(uint64_t **a1, _QWORD **a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *result;

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  *v2 = 0;
  v5 = (_DWORD *)*v3;
  *v3 = 0;
  v6 = (_DWORD *)*v2;
  *v2 = (uint64_t)v5;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  result = (_DWORD *)*v3;
  *v3 = v4;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(_DWORD *result, _DWORD *a2, uint64_t (**a3)(_QWORD *, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t i;
  _QWORD *v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD *v18;
  _QWORD v19[11];

  if (result == a2)
    return result;
  v19[9] = v3;
  v19[10] = v4;
  v6 = (_DWORD **)result;
  v7 = result + 2;
  if (result + 2 == a2)
    return result;
  v9 = 0;
  v10 = result;
  do
  {
    v11 = v10;
    v10 = v7;
    result = (_DWORD *)(*a3)(v7, (uint64_t)v11);
    if (!(_DWORD)result)
      goto LABEL_20;
    v12 = 0;
    v13 = *v10;
    *v10 = 0;
    v19[0] = v13;
    for (i = v9; ; i -= 8)
    {
      v15 = (_DWORD **)((char *)v6 + i);
      v16 = *(uint64_t *)((char *)v6 + i);
      *v15 = 0;
      v15[1] = v16;
      if (!v12)
        goto LABEL_9;
      if (v12[2] == 1)
        break;
      --v12[2];
LABEL_9:
      if (!i)
        goto LABEL_13;
LABEL_10:
      v17 = (_DWORD **)((char *)v6 + i);
      if (((*a3)(v19, (uint64_t)v6 + i - 8) & 1) == 0)
        goto LABEL_14;
      v12 = (_DWORD *)*v15;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    if (i)
      goto LABEL_10;
LABEL_13:
    v17 = v6;
LABEL_14:
    v18 = (_DWORD *)v19[0];
    v19[0] = 0;
    result = *v17;
    *v17 = v18;
    if (result)
    {
      if (result[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
      result = (_DWORD *)v19[0];
      v19[0] = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
    }
LABEL_20:
    v7 = v10 + 1;
    v9 += 8;
  }
  while (v10 + 1 != (_QWORD *)a2);
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(_DWORD *result, _DWORD *a2, uint64_t (**a3)(_QWORD *, _QWORD))
{
  _DWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *i;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  _DWORD *v18;

  if (result == a2)
    return result;
  v4 = result;
  v5 = result + 2;
  if (result + 2 == a2)
    return result;
  v7 = 0;
  v8 = result - 2;
  v9 = -1;
  v10 = 1;
  do
  {
    v11 = &v4[2 * v7];
    v7 = v10;
    result = (_DWORD *)(*a3)(v5, v11);
    if (!(_DWORD)result)
      goto LABEL_17;
    result = 0;
    v12 = (_DWORD *)*v5;
    *v5 = 0;
    v18 = v12;
    v13 = v9;
    for (i = v8; ; i -= 2)
    {
      v15 = *((_QWORD *)i + 1);
      *((_QWORD *)i + 1) = 0;
      *((_QWORD *)i + 2) = v15;
      if (!result)
        goto LABEL_9;
      if (result[2] != 1)
      {
        --result[2];
LABEL_9:
        if (!v13)
          goto LABEL_23;
        goto LABEL_10;
      }
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      if (!v13)
      {
LABEL_23:
        __break(1u);
        return result;
      }
LABEL_10:
      if (((*a3)(&v18, i) & 1) == 0)
        break;
      result = (_DWORD *)*((_QWORD *)i + 1);
      ++v13;
    }
    v16 = v18;
    v18 = 0;
    result = (_DWORD *)*((_QWORD *)i + 1);
    *((_QWORD *)i + 1) = v16;
    if (!result)
      goto LABEL_17;
    v17 = result[2] - 1;
    if (result[2] != 1)
      goto LABEL_16;
    (*(void (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    result = v18;
    v18 = 0;
    if (result)
    {
      v17 = result[2] - 1;
      if (result[2] != 1)
      {
LABEL_16:
        result[2] = v17;
        goto LABEL_17;
      }
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    }
LABEL_17:
    v10 = v7 + 1;
    v5 = &v4[2 * v7 + 2];
    v8 += 2;
    --v9;
  }
  while (v5 != (_QWORD *)a2);
  return result;
}

_DWORD *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD *, _QWORD *))
{
  char v8;
  _DWORD *result;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;

  v8 = (*a4)(a2, a1);
  result = (_DWORD *)(*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = (_DWORD *)*a1;
    *a1 = 0;
    if ((_DWORD)result)
    {
      v11 = (_DWORD *)*a3;
      *a3 = 0;
      v12 = (_DWORD *)*a1;
      *a1 = v11;
      if (v12)
      {
        if (v12[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        else
          --v12[2];
      }
      result = (_DWORD *)*a3;
      *a3 = v10;
      if (!result)
        return result;
LABEL_32:
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      --result[2];
      return result;
    }
    v20 = (_DWORD *)*a2;
    *a2 = 0;
    v21 = (_DWORD *)*a1;
    *a1 = v20;
    if (v21)
    {
      if (v21[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
      else
        --v21[2];
    }
    v22 = (_DWORD *)*a2;
    *a2 = v10;
    if (v22)
    {
      if (v22[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
      else
        --v22[2];
    }
    result = (_DWORD *)(*a4)(a3, a2);
    if ((_DWORD)result)
    {
      v23 = (_DWORD *)*a2;
      *a2 = 0;
      v24 = (_DWORD *)*a3;
      *a3 = 0;
      v25 = (_DWORD *)*a2;
      *a2 = v24;
      if (v25)
      {
        if (v25[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
        else
          --v25[2];
      }
      result = (_DWORD *)*a3;
      *a3 = v23;
      if (result)
        goto LABEL_32;
    }
  }
  else if ((_DWORD)result)
  {
    v13 = (_DWORD *)*a2;
    *a2 = 0;
    v14 = (_DWORD *)*a3;
    *a3 = 0;
    v15 = (_DWORD *)*a2;
    *a2 = v14;
    if (v15)
    {
      if (v15[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      else
        --v15[2];
    }
    v16 = (_DWORD *)*a3;
    *a3 = v13;
    if (v16)
    {
      if (v16[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
      else
        --v16[2];
    }
    result = (_DWORD *)(*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v17 = (_DWORD *)*a1;
      *a1 = 0;
      v18 = (_DWORD *)*a2;
      *a2 = 0;
      v19 = (_DWORD *)*a1;
      *a1 = v18;
      if (v19)
      {
        if (v19[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
        else
          --v19[2];
      }
      result = (_DWORD *)*a2;
      *a2 = v17;
      if (result)
        goto LABEL_32;
    }
  }
  return result;
}

_DWORD *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *>(_QWORD *a1, _QWORD *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *result;

  v4 = (_DWORD *)*a1;
  *a1 = 0;
  v5 = (_DWORD *)*a2;
  *a2 = 0;
  v6 = (_DWORD *)*a1;
  *a1 = v5;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  result = (_DWORD *)*a2;
  *a2 = v4;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(_DWORD **, uint64_t *))
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v20;

  v6 = (_DWORD *)*a1;
  *a1 = 0;
  v20 = v6;
  v7 = (*a3)(&v20, a2 - 1);
  if ((v7 & 1) != 0)
  {
    v8 = a1;
    while (1)
    {
      if (++v8 == a2)
        goto LABEL_38;
      v7 = (*a3)(&v20, v8);
      if ((v7 & 1) != 0)
        goto LABEL_9;
    }
  }
  v9 = a1 + 1;
  do
  {
    v8 = v9;
    if (v9 >= a2)
      break;
    v7 = (*a3)(&v20, v9);
    v9 = v8 + 1;
  }
  while (!(_DWORD)v7);
LABEL_9:
  v10 = a2;
  if (v8 < a2)
  {
    v10 = a2;
    while (v10 != a1)
    {
      v7 = (*a3)(&v20, --v10);
      if ((v7 & 1) == 0)
        goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_13:
  if (v8 < v10)
  {
    v11 = (_DWORD *)*v8;
    *v8 = 0;
    v12 = *v10;
    *v10 = 0;
    v13 = (_DWORD *)*v8;
    *v8 = v12;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    v7 = *v10;
    *v10 = (uint64_t)v11;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 8) == 1)
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      else
        --*(_DWORD *)(v7 + 8);
    }
    while (++v8 != a2)
    {
      v7 = (*a3)(&v20, v8);
      if ((_DWORD)v7)
      {
        while (v10 != a1)
        {
          v7 = (*a3)(&v20, --v10);
          if ((v7 & 1) == 0)
            goto LABEL_13;
        }
        break;
      }
    }
LABEL_38:
    __break(1u);
LABEL_39:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    goto LABEL_34;
  }
  v14 = v8 - 1;
  if (v8 - 1 != a1)
  {
    v15 = *v14;
    *v14 = 0;
    v16 = (_DWORD *)*a1;
    *a1 = v15;
    if (v16)
    {
      if (v16[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
      else
        --v16[2];
    }
  }
  v17 = v20;
  v20 = 0;
  v7 = *v14;
  *v14 = (uint64_t)v17;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 8) != 1)
    {
      --*(_DWORD *)(v7 + 8);
      goto LABEL_34;
    }
    goto LABEL_39;
  }
LABEL_34:
  v18 = v20;
  v20 = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  return v8;
}

_QWORD *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&)>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  _QWORD *v3;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _QWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v24;

  v7 = 0;
  v8 = (_DWORD *)*a1;
  *a1 = 0;
  v24 = v8;
  while (1)
  {
    v9 = (uint64_t)&a1[v7 + 1];
    if ((_QWORD *)v9 == a2)
      break;
    ++v7;
    if (((*a3)(v9, &v24) & 1) == 0)
    {
      v10 = &a1[v7];
      if (v7 == 1)
      {
        v11 = a2;
        do
        {
          if (v10 >= v11)
            break;
          --v11;
        }
        while (((*a3)(v11, &v24) & 1) == 0);
LABEL_12:
        if (v10 >= v11)
        {
          v17 = v10 - 1;
          goto LABEL_31;
        }
        v3 = v10;
        v12 = v11;
LABEL_14:
        v13 = (_DWORD *)*v3;
        *v3 = 0;
        v14 = (_DWORD *)*v12;
        *v12 = 0;
        v15 = (_DWORD *)*v3;
        *v3 = v14;
        if (v15)
        {
          if (v15[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
          else
            --v15[2];
        }
        v16 = (_DWORD *)*v12;
        *v12 = v13;
        if (v16)
        {
          if (v16[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
          else
            --v16[2];
        }
        while (++v3 != a2)
        {
          if (((*a3)(v3, &v24) & 1) == 0)
          {
            while (v12 != a1)
            {
              if ((*a3)(--v12, &v24))
              {
                if (v3 < v12)
                  goto LABEL_14;
                goto LABEL_30;
              }
            }
            goto LABEL_29;
          }
        }
      }
      else
      {
        v11 = a2;
        while (v11 != a1)
        {
          if ((*a3)(--v11, &v24))
            goto LABEL_12;
        }
      }
      break;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  v17 = v3 - 1;
LABEL_31:
  if (v17 != a1)
  {
    v18 = (_DWORD *)*v17;
    *v17 = 0;
    v19 = (_DWORD *)*a1;
    *a1 = v18;
    if (v19)
    {
      if (v19[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
      else
        --v19[2];
    }
  }
  v20 = v24;
  v24 = 0;
  v21 = (_DWORD *)*v17;
  *v17 = v20;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  v22 = v24;
  v24 = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  return v17;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_DWORD **, char *))
{
  uint64_t v6;
  _BOOL8 result;
  _QWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t i;
  char *v20;
  uint64_t v21;
  _DWORD **v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)((_DWORD **)a2 - 1, (char *)a1))
      {
        v9 = (_DWORD *)*a1;
        *a1 = 0;
        v10 = (_DWORD *)*v8;
        *v8 = 0;
        v11 = (_DWORD *)*a1;
        *a1 = v10;
        if (v11)
        {
          if (v11[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
          else
            --v11[2];
        }
        v12 = (_DWORD *)*v8;
        *v8 = v9;
        if (v12)
        {
          if (v12[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
          else
            --v12[2];
        }
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(a1, a1 + 1, a2 - 1, (uint64_t (**)(_QWORD *, _QWORD *))a3);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(a1, a1 + 1, a1 + 2, a2 - 1, (uint64_t (**)(_QWORD *, _QWORD *))a3);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, (uint64_t (**)(_QWORD *, _QWORD *))a3);
      return 1;
    default:
      v13 = (char *)(a1 + 2);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(a1, a1 + 1, a1 + 2, (uint64_t (**)(_QWORD *, _QWORD *))a3);
      v14 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v14, v13))
    {
      v17 = 0;
      v18 = (_DWORD *)*v14;
      *v14 = 0;
      v26 = v18;
      for (i = v15; ; i -= 8)
      {
        v20 = (char *)a1 + i;
        v21 = *(_QWORD *)((char *)a1 + i + 16);
        *((_QWORD *)v20 + 2) = 0;
        *((_QWORD *)v20 + 3) = v21;
        if (v17)
        {
          if (v17[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
          else
            --v17[2];
        }
        if (i == -16)
        {
          v22 = (_DWORD **)a1;
          goto LABEL_22;
        }
        if (((*a3)(&v26, (char *)a1 + i + 8) & 1) == 0)
          break;
        v17 = (_DWORD *)*((_QWORD *)v20 + 2);
      }
      v22 = (_DWORD **)((char *)a1 + i + 16);
LABEL_22:
      v23 = v26;
      v26 = 0;
      v24 = *v22;
      *v22 = v23;
      if (v24)
      {
        if (v24[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
        else
          --v24[2];
      }
      v25 = v26;
      v26 = 0;
      if (v25)
      {
        if (v25[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
        else
          --v25[2];
      }
      if (++v16 == 8)
        return v14 + 1 == a2;
    }
    v13 = (char *)v14;
    v15 += 8;
    if (++v14 == a2)
      return 1;
  }
}

_DWORD *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD *, _QWORD *))
{
  _DWORD *result;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(a1, a2, a3, a5);
  result = (_DWORD *)(*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = (_DWORD *)*a3;
    *a3 = 0;
    v12 = (_DWORD *)*a4;
    *a4 = 0;
    v13 = (_DWORD *)*a3;
    *a3 = v12;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    v14 = (_DWORD *)*a4;
    *a4 = v11;
    if (v14)
    {
      if (v14[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      else
        --v14[2];
    }
    result = (_DWORD *)(*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v15 = (_DWORD *)*a2;
      *a2 = 0;
      v16 = (_DWORD *)*a3;
      *a3 = 0;
      v17 = (_DWORD *)*a2;
      *a2 = v16;
      if (v17)
      {
        if (v17[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
        else
          --v17[2];
      }
      v18 = (_DWORD *)*a3;
      *a3 = v15;
      if (v18)
      {
        if (v18[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
        else
          --v18[2];
      }
      result = (_DWORD *)(*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v19 = (_DWORD *)*a1;
        *a1 = 0;
        v20 = (_DWORD *)*a2;
        *a2 = 0;
        v21 = (_DWORD *)*a1;
        *a1 = v20;
        if (v21)
        {
          if (v21[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
          else
            --v21[2];
        }
        result = (_DWORD *)*a2;
        *a2 = v19;
        if (result)
        {
          if (result[2] == 1)
            return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
          else
            --result[2];
        }
      }
    }
  }
  return result;
}

_DWORD *std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t (**a6)(_QWORD *, _QWORD *))
{
  _DWORD *result;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(a1, a2, a3, a4, a6);
  result = (_DWORD *)(*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = (_DWORD *)*a4;
    *a4 = 0;
    v14 = (_DWORD *)*a5;
    *a5 = 0;
    v15 = (_DWORD *)*a4;
    *a4 = v14;
    if (v15)
    {
      if (v15[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      else
        --v15[2];
    }
    v16 = (_DWORD *)*a5;
    *a5 = v13;
    if (v16)
    {
      if (v16[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
      else
        --v16[2];
    }
    result = (_DWORD *)(*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v17 = (_DWORD *)*a3;
      *a3 = 0;
      v18 = (_DWORD *)*a4;
      *a4 = 0;
      v19 = (_DWORD *)*a3;
      *a3 = v18;
      if (v19)
      {
        if (v19[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
        else
          --v19[2];
      }
      v20 = (_DWORD *)*a4;
      *a4 = v17;
      if (v20)
      {
        if (v20[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
        else
          --v20[2];
      }
      result = (_DWORD *)(*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v21 = (_DWORD *)*a2;
        *a2 = 0;
        v22 = (_DWORD *)*a3;
        *a3 = 0;
        v23 = (_DWORD *)*a2;
        *a2 = v22;
        if (v23)
        {
          if (v23[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
          else
            --v23[2];
        }
        v24 = (_DWORD *)*a3;
        *a3 = v21;
        if (v24)
        {
          if (v24[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
          else
            --v24[2];
        }
        result = (_DWORD *)(*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v25 = (_DWORD *)*a1;
          *a1 = 0;
          v26 = (_DWORD *)*a2;
          *a2 = 0;
          v27 = (_DWORD *)*a1;
          *a1 = v26;
          if (v27)
          {
            if (v27[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
            else
              --v27[2];
          }
          result = (_DWORD *)*a2;
          *a2 = v25;
          if (result)
          {
            if (result[2] == 1)
              return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
            else
              --result[2];
          }
        }
      }
    }
  }
  return result;
}

_DWORD *std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(_DWORD *result, _QWORD *a2, _QWORD *a3, unsigned int (**a4)(_QWORD *, uint64_t))
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _DWORD **v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _DWORD *v33;
  _DWORD **v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  int v38;
  BOOL v39;
  _DWORD *v40;
  _DWORD *v41;

  if (result != (_DWORD *)a2)
  {
    v6 = a2;
    v7 = result;
    v8 = (char *)a2 - (char *)result;
    v9 = ((char *)a2 - (char *)result) >> 3;
    if ((char *)a2 - (char *)result >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &result[2 * v10];
      do
      {
        result = (_DWORD *)std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>((uint64_t)v7, (unsigned int (**)(_QWORD, _QWORD))a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      v13 = v6;
      do
      {
        result = (_DWORD *)((uint64_t (*)(_QWORD *, _QWORD *))*a4)(v13, v7);
        if ((_DWORD)result)
        {
          v14 = (_DWORD *)*v13;
          *v13 = 0;
          v15 = (_DWORD *)*v7;
          *v7 = 0;
          v16 = (_DWORD *)*v13;
          *v13 = v15;
          if (v16)
          {
            if (v16[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
            else
              --v16[2];
          }
          v17 = (_DWORD *)*v7;
          *v7 = v14;
          if (v17)
          {
            if (v17[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
            else
              --v17[2];
          }
          result = (_DWORD *)std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>((uint64_t)v7, (unsigned int (**)(_QWORD, _QWORD))a4, v9, v7);
        }
        ++v13;
      }
      while (v13 != a3);
    }
    if (v8 >= 9)
    {
      v18 = (unint64_t)v8 >> 3;
      while (v18 > 0)
      {
        if (v18 == 1)
          return result;
        v19 = v6;
        v20 = 0;
        v40 = (_DWORD *)*v7;
        *v7 = 0;
        v21 = v7;
        do
        {
          v22 = (_DWORD **)v21;
          v21 += v20 + 1;
          v23 = 2 * v20;
          v20 = (2 * v20) | 1;
          v24 = v23 + 2;
          if (v23 + 2 < v18 && (*a4)(v21, (uint64_t)(v21 + 1)))
          {
            ++v21;
            v20 = v24;
          }
          v25 = (_DWORD *)*v21;
          *v21 = 0;
          v26 = *v22;
          *v22 = v25;
          if (v26)
          {
            if (v26[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
            else
              --v26[2];
          }
        }
        while (v20 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        v6 = v19 - 1;
        if (v21 == v19 - 1)
        {
          result = (_DWORD *)*v21;
          v29 = v18 - 1;
          *v21 = v40;
          if (!result)
            goto LABEL_57;
          goto LABEL_55;
        }
        v27 = *v6;
        *v6 = 0;
        v28 = (_DWORD *)*v21;
        *v21 = v27;
        if (v28)
        {
          if (v28[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
          else
            --v28[2];
        }
        result = (_DWORD *)*v6;
        v29 = v18 - 1;
        *v6 = v40;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
          else
            --result[2];
        }
        v30 = (char *)(v21 + 1) - (char *)v7;
        if (v30 >= 9)
        {
          v31 = (((unint64_t)v30 >> 3) - 2) >> 1;
          v32 = &v7[v31];
          result = (_DWORD *)((uint64_t (*)(_QWORD *, _QWORD *))*a4)(v32, v21);
          if ((_DWORD)result)
          {
            v33 = (_DWORD *)*v21;
            *v21 = 0;
            v41 = v33;
            while (1)
            {
              v34 = (_DWORD **)v32;
              v35 = (_DWORD *)*v32;
              *v32 = 0;
              v36 = (_DWORD *)*v21;
              *v21 = v35;
              if (!v36)
                goto LABEL_46;
              if (v36[2] != 1)
                break;
              (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
              if (!v31)
              {
LABEL_50:
                v37 = v41;
                v41 = 0;
                result = *v34;
                *v34 = v37;
                if (!result)
                  goto LABEL_57;
                v38 = result[2] - 1;
                if (result[2] == 1)
                {
                  (*(void (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
                  result = v41;
                  v41 = 0;
                  if (!result)
                    goto LABEL_57;
LABEL_55:
                  v38 = result[2] - 1;
                  if (result[2] == 1)
                  {
                    result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
                    goto LABEL_57;
                  }
                }
                result[2] = v38;
                goto LABEL_57;
              }
LABEL_47:
              v31 = (v31 - 1) >> 1;
              v32 = &v7[v31];
              v21 = v34;
              if ((((uint64_t (*)(_QWORD *, _DWORD **))*a4)(v32, &v41) & 1) == 0)
                goto LABEL_50;
            }
            --v36[2];
LABEL_46:
            if (!v31)
              goto LABEL_50;
            goto LABEL_47;
          }
        }
LABEL_57:
        v39 = (unint64_t)v18 > 2;
        v18 = v29;
        if (!v39)
          return result;
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD **v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _QWORD v24[13];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v24[11] = v4;
    v24[12] = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v12 = ((uint64_t)a4 - result) >> 2;
      v13 = v12 + 1;
      v14 = (_QWORD *)(result + 8 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 1))
      {
        ++v14;
        v13 = v15;
      }
      result = ((uint64_t (*)(_QWORD *, _QWORD *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v16 = (_DWORD *)*v7;
        *v7 = 0;
        v24[0] = v16;
        do
        {
          v17 = (_DWORD **)v14;
          v18 = (_DWORD *)*v14;
          *v14 = 0;
          v19 = (_DWORD *)*v7;
          *v7 = v18;
          if (v19)
          {
            if (v19[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
            else
              --v19[2];
          }
          if (v9 < v13)
            break;
          v20 = (2 * v13) | 1;
          v14 = (_QWORD *)(v8 + 8 * v20);
          v21 = 2 * v13 + 2;
          if (v21 < a3 && (*a2)(v8 + 8 * v20, v14 + 1))
          {
            ++v14;
            v20 = v21;
          }
          v7 = v17;
          v13 = v20;
        }
        while (!(*a2)(v14, v24));
        v22 = (_DWORD *)v24[0];
        v24[0] = 0;
        v23 = *v17;
        *v17 = v22;
        if (v23)
        {
          if (v23[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
          else
            --v23[2];
        }
        result = v24[0];
        v24[0] = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 8) == 1)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          else
            --*(_DWORD *)(result + 8);
        }
      }
    }
  }
  return result;
}

void WebCore::PerformancePaintTiming::~PerformancePaintTiming(WebCore::PerformancePaintTiming *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E34017E8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E34017E8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::PerformancePaintTiming::performanceEntryType(WebCore::PerformancePaintTiming *this)
{
  return 16;
}

const char *WebCore::PerformancePaintTiming::entryType(WebCore::PerformancePaintTiming *this)
{
  return "paint";
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::PageOverlay::*&)(void),WebCore::PageOverlay*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v2 += 16;
    result[1] = v2;
    v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 16;
        result[1] = v2;
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageOverlayController::layerWithDocumentOverlays(void)::$_0,void,WebCore::GraphicsLayer &>::call(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 8);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 832))(a2);
  if (result)
    return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)result + 144))(result, v2 != 0);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PageOverlayController::layerWithViewOverlays(void)::$_0,void,WebCore::GraphicsLayer &>::call(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 8);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 832))(a2);
  if (result)
    return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)result + 144))(result, v2 != 0);
  return result;
}

BOOL WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  _BOOL8 v4;
  unsigned int v5;
  int v6;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v17;
  uint64_t v18;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v8 = *(_DWORD *)(v3 - 4);
    if (v8)
    {
      v9 = 0;
      v10 = v8 - 1;
      do
      {
        v11 = v3 + 16 * v10;
        if ((unint64_t)(*(_QWORD *)v11 + 1) >= 2)
        {
          v17 = v9;
          v18 = v3;
          if (!*(_QWORD *)(*(_QWORD *)v11 + 8))
          {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v11, a2);
            v9 = v17 + 1;
            v3 = v18;
          }
        }
      }
      while ((unint64_t)v10--);
      v3 = *(_QWORD *)a1;
      v4 = v9 != 0;
      if (v9)
      {
        *(_DWORD *)(v3 - 16) += v9;
        v13 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v14 = *(_DWORD *)(v13 - 12);
        else
          v14 = 0;
        *(_DWORD *)(v13 - 12) = v14 - v9;
        v3 = *(_QWORD *)a1;
      }
      if (!v3)
        goto LABEL_3;
      v15 = *(_DWORD *)(v3 - 4);
      if (v15 >= 9 && 6 * *(_DWORD *)(v3 - 12) < v15)
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v5 = 0;
          goto LABEL_4;
        }
LABEL_23:
        v5 = *(_DWORD *)(v3 - 12);
        v6 = 0x7FFFFFFF;
        if (v5 >= 0x7FFFFFFF)
          goto LABEL_5;
        goto LABEL_4;
      }
    }
    else
    {
      v4 = 0;
    }
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_23;
  }
  v4 = 0;
LABEL_3:
  v5 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
  v6 = v5;
LABEL_5:
  *(_DWORD *)(a1 + 12) = 2 * v6;
  return v4;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(uint64_t result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;

  v2 = *(unsigned int **)result;
  *(_QWORD *)result = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = result;
      WTF::fastFree((WTF *)v2, a2);
      result = v6;
    }
  }
  v5 = *(_DWORD **)(result + 8);
  *(_QWORD *)result = -1;
  *(_QWORD *)(result + 8) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v8, 0);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int *v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    while (1)
    {
      v14 = (unsigned int **)(v6 + 16 * v11);
      v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        if (v15)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = ((unint64_t)v15 + ~((_QWORD)v15 << 32)) ^ (((unint64_t)v15 + ~((_QWORD)v15 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v20 + 16 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (v28);
          v29 = v20 + 16 * v27;
          v30 = *(_DWORD **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v30)
          {
            if (v30[2] != 1)
            {
              --v30[2];
              goto LABEL_22;
            }
            (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
            v38 = *(unsigned int **)v29;
            *(_QWORD *)v29 = 0;
            if (v38)
            {
              do
              {
                v39 = __ldaxr(v38);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, v38));
              if (!v40)
              {
                atomic_store(1u, v38);
                WTF::fastFree((WTF *)v38, v10);
              }
            }
          }
          else
          {
LABEL_22:
            *(_QWORD *)v29 = 0;
          }
          v31 = *v14;
          *v14 = 0;
          *(_QWORD *)v29 = v31;
          v32 = v6 + 16 * v11;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          *(_QWORD *)(v29 + 8) = v33;
          v34 = *(_DWORD **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            if (v34[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
            else
              --v34[2];
          }
          v35 = *v14;
          *v14 = 0;
          if (v35)
          {
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              atomic_store(1u, v35);
              WTF::fastFree((WTF *)v35, v10);
            }
          }
          if (v14 == a3)
            v12 = v29;
          goto LABEL_32;
        }
        v16 = v6 + 16 * v11;
        v17 = *(_DWORD **)(v16 + 8);
        *(_QWORD *)(v16 + 8) = 0;
        if (v17)
        {
          if (v17[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
            v15 = *v14;
          }
          else
          {
            --v17[2];
          }
        }
        *v14 = 0;
        if (v15)
        {
          do
          {
            v18 = __ldaxr(v15);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v15));
          if (!v19)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, v10);
          }
        }
      }
LABEL_32:
      if (++v11 == v13)
        goto LABEL_41;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_41:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::Performance::*&)(void),WebCore::Performance*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PerformancePaintTiming &>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    ++*(_DWORD *)(a2 + 8);
    v13[v12] = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return 1;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

char *WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  result = WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(char **)a1;
  v6 = *(_QWORD *)result;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(*(_QWORD *)result + 8) + 1;
  *(_QWORD *)&v5[8 * v4] = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

char *WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  result = WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(char **)a1;
  v6 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)&v5[8 * v4] = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::expand(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD **a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *result;
  _QWORD **v13;
  _QWORD *v14;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v13 = (_QWORD **)v6;
    do
    {
      v10 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v14 = WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>>::reinsert(*a1, v10);
        if (v13 == a3)
          v11 = v14;
      }
      ++v13;
      --v7;
    }
    while (v7);
    goto LABEL_12;
  }
  result = 0;
  if (v6)
  {
LABEL_12:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WebCore::PerformanceObserver *WTF::RefCounted<WebCore::PerformanceObserver>::deref(WebCore::PerformanceObserver *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::PerformanceObserver::~PerformanceObserver(result, a2);
    return (WebCore::PerformanceObserver *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebCore::PerformanceObserver::~PerformanceObserver(WebCore::PerformanceObserver *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF *v5;
  WebCore::Performance *v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  bmalloc::api *v10;
  void *v11;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((unsigned int *)this + 7);
  if ((_DWORD)v4)
  {
    v7 = (_DWORD **)*((_QWORD *)this + 2);
    v8 = 8 * v4;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v5 = (WTF *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WebCore::Performance *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 4) == 1)
    {
      WebCore::Performance::~Performance(v6, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
    else
    {
      --*((_DWORD *)v6 + 4);
    }
  }
}

uint64_t *WTF::ListHashSet<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>::remove(uint64_t *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = (uint64_t)result;
    WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::remove(result, a3);
    return (uint64_t *)WTF::ListHashSet<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>::unlinkAndDelete(v4, a3);
  }
  return result;
}

uint64_t *WTF::ListHashSet<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>::find<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>(uint64_t *a1, uint64_t a2)
{
  if (*a1)
    WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::lookup<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WebCore::PerformanceObserver const*>(*a1, a2);
  return a1;
}

uint64_t *WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::remove(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;

  v2 = *result;
  if (*result)
  {
    v3 = result;
    result = (uint64_t *)WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>>,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>(*result, a2);
    if (result)
      v4 = result;
    else
      v4 = (uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4));
    if ((uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4)) != v4)
      return WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::remove(v3, v4);
  }
  return result;
}

uint64_t WTF::ListHashSet<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>,WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>::unlinkAndDelete(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;

  v2 = a2[1];
  v3 = a2[2];
  if (v2)
  {
    *(_QWORD *)(v2 + 16) = v3;
    v3 = a2[2];
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v3;
  }
  if (v3)
    v4 = (uint64_t *)(v3 + 8);
  else
    v4 = (uint64_t *)(a1 + 16);
  *v4 = v2;
  v5 = WTF::Ref<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>::~Ref(a2, a2);
  return WTF::fastFree((WTF *)v5, v6);
}

uint64_t *WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>>,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  int i;
  uint64_t v7;
  _QWORD *v8;

  if (result)
  {
    v2 = result;
    v3 = *(_DWORD *)(result - 8);
    v4 = *a2;
    v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2);
    for (i = 0; ; v5 = i + v7)
    {
      v7 = v5 & v3;
      v8 = *(_QWORD **)(v2 + 8 * v7);
      if (v8 != (_QWORD *)-1)
      {
        if (!v8)
          return 0;
        if (*v8 == v4)
          return v2 + 8 * v7;
      }
      ++i;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::lookup<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WebCore::PerformanceObserver const*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int i;
  uint64_t v7;
  _QWORD *v8;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
    for (i = 0; ; v5 = i + v7)
    {
      v7 = v5 & v4;
      v8 = *(_QWORD **)(v3 + 8 * v7);
      if (v8 != (_QWORD *)-1)
      {
        if (!v8)
          return 0;
        if (*v8 == a2)
          return v3 + 8 * v7;
      }
      ++i;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Performance::scheduleTaskIfNeeded(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::Performance *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::Performance *)a1[1];
  *a1 = &off_1E3401938;
  a1[1] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 4) == 1)
    {
      WebCore::Performance::~Performance(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Performance::scheduleTaskIfNeeded(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::Performance *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::Performance *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3401938;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 4) == 1)
    {
      WebCore::Performance::~Performance(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Performance::scheduleTaskIfNeeded(void)::$_0,void>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  WTF *v19;
  WebCore::Performance *v20;
  _DWORD **v21;
  uint64_t v22;
  _DWORD *v23;
  bmalloc::api *v24;
  void *v25;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    *(_BYTE *)(v2 + 162) = 0;
    v4 = *(_QWORD *)(v2 + 200);
    if (v4 && (v5 = *(unsigned int *)(v4 - 12), (_DWORD)v5))
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * v5));
      v6 = (WTF *)result;
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_QWORD *)(v2 + 208);
    if (v7)
    {
      v8 = 0;
      do
      {
        v9 = *(_DWORD **)v7;
        if (*(_QWORD *)v7)
          ++*v9;
        v10 = v8 + 1;
        *((_QWORD *)v6 + v8) = v9;
        v7 = *(_QWORD *)(v7 + 16);
        ++v8;
      }
      while (v7);
      if (!v10)
        return WTF::fastFree(v6, a2);
      v11 = 8 * v10;
      v12 = (uint64_t *)v6;
      v13 = (WTF *)((char *)v6 + v11);
      do
      {
        v14 = *v12++;
        result = WebCore::PerformanceObserver::deliver(v14, a2);
        v11 -= 8;
      }
      while (v11);
      v15 = v6;
      do
      {
        v16 = *(_QWORD *)v15;
        *(_QWORD *)v15 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            v17 = *(_DWORD **)(v16 + 32);
            *(_QWORD *)(v16 + 32) = 0;
            if (v17)
            {
              if (v17[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
              else
                --v17[4];
            }
            v18 = *(unsigned int *)(v16 + 28);
            if ((_DWORD)v18)
            {
              v21 = *(_DWORD ***)(v16 + 16);
              v22 = 8 * v18;
              do
              {
                v23 = *v21;
                *v21 = 0;
                if (v23)
                {
                  if (v23[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
                  else
                    --v23[2];
                }
                ++v21;
                v22 -= 8;
              }
              while (v22);
            }
            v19 = *(WTF **)(v16 + 16);
            if (v19)
            {
              *(_QWORD *)(v16 + 16) = 0;
              *(_DWORD *)(v16 + 24) = 0;
              WTF::fastFree(v19, a2);
            }
            v20 = *(WebCore::Performance **)(v16 + 8);
            *(_QWORD *)(v16 + 8) = 0;
            if (v20)
            {
              if (*((_DWORD *)v20 + 4) == 1)
              {
                WebCore::Performance::~Performance(v20, a2);
                bmalloc::api::isoDeallocate(v24, v25);
              }
              else
              {
                --*((_DWORD *)v20 + 4);
              }
            }
            result = WTF::fastFree((WTF *)v16, a2);
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
        v15 = (WTF *)((char *)v15 + 8);
      }
      while (v15 != v13);
    }
    if (!v6)
      return result;
    return WTF::fastFree(v6, a2);
  }
  return result;
}

WTF *WebCore::PerformanceMark::create@<X0>(WTF *result@<X0>, WebCore *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _DWORD *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  char **v11;
  unint64_t v12;
  char **v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  JSC::JSGlobalObject *v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  WTF *v34;
  uint64_t v35;

  v28 = result;
  if (!*((_BYTE *)a2 + 274))
  {
    v8 = (_DWORD *)*a3;
    if (*a3)
    {
      v9 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
      v10 = v8[1] | ((unint64_t)((v8[4] >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    v11 = &WebCore::restrictedMarkMappings;
    v12 = 21;
    do
    {
      v13 = &v11[4 * (v12 >> 1)];
      result = (WTF *)WTF::codePointCompare();
      if ((int)result >= 0)
        v12 >>= 1;
      else
        v12 += ~(v12 >> 1);
      if ((int)result < 0)
        v11 = v13 + 4;
    }
    while (v12);
    if (v11 != (char **)off_1E3401D80)
    {
      result = (WTF *)WTF::operator==(v9, v10, (unsigned __int8 *)*v11, (uint64_t)v11[1]);
      if ((_DWORD)result)
      {
        v24 = 9;
LABEL_30:
        *(_BYTE *)a5 = v24;
        *(_QWORD *)(a5 + 8) = 0;
        *(_DWORD *)(a5 + 16) = 1;
        return result;
      }
    }
  }
  if (!*(_BYTE *)(a4 + 24))
    goto LABEL_32;
  if (!*(_BYTE *)(a4 + 16))
  {
    v14 = WebCore::performanceNow(a2, a2);
    if (*(_BYTE *)(a4 + 24))
    {
      v15 = v14;
      goto LABEL_17;
    }
    __break(1u);
LABEL_32:
    v15 = WebCore::performanceNow(a2, a2);
    v16 = 2;
    goto LABEL_20;
  }
  v15 = *(double *)(a4 + 8);
  if (v15 < 0.0)
  {
    v24 = 33;
    goto LABEL_30;
  }
LABEL_17:
  if (*(_QWORD *)a4 == 10)
    v16 = 2;
  else
    v16 = *(_QWORD *)a4;
LABEL_20:
  v34 = 0;
  v35 = 0;
  v30[0] = 0;
  v30[1] = 0;
  WebCore::SerializedScriptValue::create(v28, v16, (uint64_t)v30, (uint64_t)&v34, 0, 0, 0, (uint64_t)&v31);
  v17 = v33;
  if (v33)
  {
    if (v33 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_38:
      v26 = (uint64_t *)v34;
      v27 = 8 * v23;
      do
      {
        v26 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v26, v22)+ 1;
        v27 -= 8;
      }
      while (v27);
      goto LABEL_25;
    }
    v25 = v32;
    v32 = 0;
    *(_BYTE *)a5 = v31;
    v21 = a5;
    *(_QWORD *)(a5 + 8) = v25;
  }
  else
  {
    v18 = WTF::fastMalloc((WTF *)0x30);
    v19 = v31;
    v31 = 0;
    *(_DWORD *)(v18 + 8) = 1;
    v20 = (_DWORD *)*a3;
    if (*a3)
      *v20 += 2;
    *(_QWORD *)(v18 + 16) = v20;
    *(double *)(v18 + 24) = v15;
    *(double *)(v18 + 32) = v15 - v15;
    *(_QWORD *)v18 = off_1E3401960;
    *(_QWORD *)(v18 + 40) = v19;
    v21 = a5;
    *(_QWORD *)a5 = v18;
  }
  *(_DWORD *)(v21 + 16) = v17;
  ((void (*)(_QWORD *, uint64_t *))off_1E3401A50[v17])(v30, &v31);
  v23 = HIDWORD(v35);
  if (HIDWORD(v35))
    goto LABEL_38;
LABEL_25:
  result = v34;
  if (v34)
  {
    v34 = 0;
    LODWORD(v35) = 0;
    return (WTF *)WTF::fastFree(result, v22);
  }
  return result;
}

double WebCore::performanceNow(WebCore *this, WebCore::ScriptExecutionContext *a2)
{
  int v3;
  WebCore::LocalDOMWindow *v4;
  double *v5;
  double v6;
  double v7;
  double *v9;
  double v10;

  if (!*((_BYTE *)this + 274))
  {
    v3 = *((_DWORD *)this - 42);
    *((_DWORD *)this - 42) = v3 + 2;
    v4 = (WebCore::LocalDOMWindow *)*((_QWORD *)this + 63);
    if (v4)
    {
      v5 = (double *)WebCore::LocalDOMWindow::performance(v4);
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
      v7 = *(double *)&WebCore::timePrecision * floor((v6 - v5[21]) / *(double *)&WebCore::timePrecision) * 1000.0;
      if (*((_DWORD *)this - 42) != 2)
      {
        *((_DWORD *)this - 42) -= 2;
        return v7;
      }
      if ((*((_WORD *)this - 81) & 0x400) != 0)
        return v7;
    }
    else
    {
      if (v3)
      {
        *((_DWORD *)this - 42) = v3;
        return 0.0;
      }
      v7 = 0.0;
      if ((*((_WORD *)this - 81) & 0x400) != 0)
        return v7;
    }
    WebCore::Node::removedLastRef((WebCore *)((char *)this - 192), a2);
    return v7;
  }
  v7 = 0.0;
  if ((*(unsigned int (**)(WebCore *, WebCore::ScriptExecutionContext *))(*(_QWORD *)this + 64))(this, a2))
  {
    ++*((_DWORD *)this + 78);
    v9 = (double *)WebCore::WorkerGlobalScope::performance(this);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
    v7 = *(double *)&WebCore::timePrecision * floor((v10 - v9[21]) / *(double *)&WebCore::timePrecision) * 1000.0;
    if (*((_DWORD *)this + 78) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)this + 40))(this);
    else
      --*((_DWORD *)this + 78);
  }
  return v7;
}

void WebCore::PerformanceMark::~PerformanceMark(WebCore::PerformanceMark *this, void *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
    {
      atomic_store(1u, v3);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v3 + 2), a2);
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  *(_QWORD *)this = off_1E34017E8;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  unsigned int *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
    {
      atomic_store(1u, v3);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v3 + 2), a2);
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  *(_QWORD *)this = off_1E34017E8;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

void WebCore::PerformanceMeasure::~PerformanceMeasure(WebCore::PerformanceMeasure *this, void *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
    {
      atomic_store(1u, v3);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v3 + 2), a2);
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  *(_QWORD *)this = off_1E34017E8;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  unsigned int *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
    {
      atomic_store(1u, v3);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v3 + 2), a2);
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  *(_QWORD *)this = off_1E34017E8;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

WebCore::Page **WebCore::PerformanceMonitor::measurePostLoadCPUUsage(WebCore::PerformanceMonitor *this)
{
  double v1;
  uint64_t v3;
  BOOL v4;
  _OWORD *v5;
  WTF::MonotonicTime *v6;
  double v7;
  uint64_t v9;
  double v10;
  NSObject *v11;
  void (***v12)(_QWORD, _BYTE *, WTF::StringImpl **, _QWORD);
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _BYTE v17[25];
  WebCore::Page *v18;
  _BYTE buf[12];
  __int16 v20;
  double v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)this + 8);
  ++*(_DWORD *)v3;
  v18 = (WebCore::Page *)v3;
  if (*(_BYTE *)(v3 + 1093))
    v4 = 0;
  else
    v4 = WebCore::gNonUtilityPageCount == 1;
  if (!v4)
  {
    if (*((_BYTE *)this + 88))
      *((_BYTE *)this + 88) = 0;
    return WTF::Ref<WebCore::Page,WTF::RawPtrTraits<WebCore::Page>,WTF::DefaultRefDerefTraits<WebCore::Page>>::~Ref(&v18);
  }
  v5 = (_OWORD *)((char *)this + 64);
  if (!*((_BYTE *)this + 88))
  {
    v6 = (WTF::MonotonicTime *)WTF::CPUTime::get(this);
    *v5 = *(_OWORD *)v17;
    *(_OWORD *)((char *)this + 73) = *(_OWORD *)&v17[9];
    if (*((_BYTE *)this + 88))
    {
      *((_QWORD *)this + 4) = 0;
      WTF::MonotonicTime::now(v6);
      WebCore::TimerBase::setNextFireTime((uint64_t)this + 8, v7 + 10.0);
    }
    return WTF::Ref<WebCore::Page,WTF::RawPtrTraits<WebCore::Page>,WTF::DefaultRefDerefTraits<WebCore::Page>>::~Ref(&v18);
  }
  v9 = WTF::CPUTime::get(this);
  if (!v17[24])
    return WTF::Ref<WebCore::Page,WTF::RawPtrTraits<WebCore::Page>,WTF::DefaultRefDerefTraits<WebCore::Page>>::~Ref(&v18);
  if (*((_BYTE *)this + 88))
  {
    WTF::CPUTime::percentageCPUUsageSince((WTF::CPUTime *)v17, (WebCore::PerformanceMonitor *)((char *)this + 64));
    v1 = v10;
    v11 = qword_1ECE7C680;
    v9 = os_log_type_enabled((os_log_t)qword_1ECE7C680, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v9)
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = this;
      v20 = 2048;
      v21 = v1;
      _os_log_impl(&dword_1940B8000, v11, OS_LOG_TYPE_DEFAULT, "%p - PerformanceMonitor::measurePostLoadCPUUsage: Process was using %.1f%% CPU after the page load.", buf, 0x16u);
    }
    if ((*(_QWORD *)(*(_QWORD *)(v3 + 112) + 672) & 0x800000000000) != 0)
    {
      v12 = *(void (****)(_QWORD, _BYTE *, WTF::StringImpl **, _QWORD))(v3 + 256);
      if (v12)
        goto LABEL_16;
    }
  }
  else
  {
    __break(1u);
  }
  v9 = (uint64_t)WebCore::emptyDiagnosticLoggingClient((WebCore *)v9);
  v12 = (void (***)(_QWORD, _BYTE *, WTF::StringImpl **, _QWORD))v9;
LABEL_16:
  WebCore::DiagnosticLoggingKeys::postPageLoadCPUUsageKey((uint64_t *)buf, (WebCore::DiagnosticLoggingKeys *)v9);
  WebCore::DiagnosticLoggingKeys::foregroundCPUUsageToDiagnosticLoggingKey(v1, &v16);
  (**v12)(v12, buf, &v16, 0);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (v1 > 20.0)
    WebCore::reportPageOverPostLoadResourceThreshold((WTF::StringImpl *)v3);
  return WTF::Ref<WebCore::Page,WTF::RawPtrTraits<WebCore::Page>,WTF::DefaultRefDerefTraits<WebCore::Page>>::~Ref(&v18);
}

uint64_t WebCore::PerformanceMonitor::measurePostBackgroundingCPUUsage(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t *v8;
  double v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  WTF::StringImpl *v14;
  _BYTE v15[25];
  _BYTE buf[12];
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v1 = this;
  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  ++*(_DWORD *)v2;
  if (*(_BYTE *)(v2 + 1093))
    v3 = 0;
  else
    v3 = WebCore::gNonUtilityPageCount == 1;
  if (!v3)
  {
    if (*(_BYTE *)(this + 176))
      *(_BYTE *)(this + 176) = 0;
    goto LABEL_23;
  }
  v4 = (_OWORD *)(this + 152);
  if (*(_BYTE *)(this + 176))
  {
    this = WTF::CPUTime::get((WTF::CPUTime *)this);
    if (!v15[24])
      goto LABEL_23;
    if (*(_BYTE *)(v1 + 176))
    {
      WTF::CPUTime::percentageCPUUsageSince((WTF::CPUTime *)v15, (const WTF::CPUTime *)(v1 + 152));
      v6 = v5;
      v7 = qword_1ECE7C680;
      this = os_log_type_enabled((os_log_t)qword_1ECE7C680, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)this)
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v1;
        v17 = 2048;
        v18 = v6;
        _os_log_impl(&dword_1940B8000, v7, OS_LOG_TYPE_DEFAULT, "%p - PerformanceMonitor::measurePostBackgroundingCPUUsage: Process was using %.1f%% CPU after becoming non visible.", buf, 0x16u);
      }
      if ((*(_QWORD *)(*(_QWORD *)(v2 + 112) + 672) & 0x800000000000) != 0)
      {
        v8 = *(uint64_t **)(v2 + 256);
        if (v8)
          goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    v8 = WebCore::emptyDiagnosticLoggingClient((WebCore *)this);
LABEL_14:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t *, _BYTE *, WTF::StringImpl **, _QWORD))*v8)(v8, buf, &v14, 0);
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    this = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v10);
      else
        *(_DWORD *)this -= 2;
    }
    goto LABEL_23;
  }
  this = WTF::CPUTime::get((WTF::CPUTime *)this);
  *v4 = *(_OWORD *)v15;
  *(_OWORD *)(v1 + 161) = *(_OWORD *)&v15[9];
  if (*(_BYTE *)(v1 + 176))
  {
    *(_QWORD *)(v1 + 120) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    this = WebCore::TimerBase::setNextFireTime(v1 + 96, v9 + 300.0);
  }
LABEL_23:
  if (*(_DWORD *)v2 == 1)
  {
    WebCore::Page::~Page(v2);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return this;
}

WebCore::Page **WebCore::PerformanceMonitor::measurePerActivityStateCPUUsage(WebCore::PerformanceMonitor *this)
{
  __int16 v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 658);
  if ((v1 & 1) != 0)
    v2 = 2;
  else
    v2 = 1;
  if ((v1 & 4) != 0)
    v3 = v2;
  else
    v3 = 0;
  return WebCore::PerformanceMonitor::measureCPUUsageInActivityState((unsigned __int8 *)this, v3);
}

WebCore::PerformanceLogging *WebCore::PerformanceMonitor::measurePostLoadMemoryUsage(WebCore::PerformanceLogging *this)
{
  uint64_t v1;
  BOOL v2;
  WebCore::PerformanceLogging *v3;
  char v4;
  unint64_t v5;
  NSObject *v6;
  _BOOL8 v7;
  uint64_t *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;
  WTF::StringImpl *v13;
  _BYTE buf[12];
  __int16 v15;
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  ++*(_DWORD *)v1;
  if (*(_BYTE *)(v1 + 1093))
    v2 = 0;
  else
    v2 = WebCore::gNonUtilityPageCount == 1;
  if (v2)
  {
    v3 = this;
    this = (WebCore::PerformanceLogging *)WebCore::PerformanceLogging::physicalFootprint(this);
    if (v4)
    {
      v5 = (unint64_t)this;
      v6 = qword_1ECE7C680;
      v7 = os_log_type_enabled((os_log_t)qword_1ECE7C680, OS_LOG_TYPE_DEFAULT);
      if (v7)
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v3;
        v15 = 2048;
        v16 = v5;
        _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "%p - PerformanceMonitor::measurePostLoadMemoryUsage: Process was using %llu bytes of memory after the page load.", buf, 0x16u);
      }
      if ((*(_QWORD *)(*(_QWORD *)(v1 + 112) + 672) & 0x800000000000) == 0 || (v8 = *(uint64_t **)(v1 + 256)) == 0)
        v8 = WebCore::emptyDiagnosticLoggingClient((WebCore *)v7);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::DiagnosticLoggingKeys::memoryUsageToDiagnosticLoggingKey(v5, &v13);
      (*(void (**)(uint64_t *, _BYTE *, WTF::StringImpl **, _QWORD))*v8)(v8, buf, &v13, 0);
      v10 = v13;
      v13 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      this = *(WebCore::PerformanceLogging **)buf;
      *(_QWORD *)buf = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WebCore::PerformanceLogging *)WTF::StringImpl::destroy(this, v9);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  if (*(_DWORD *)v1 == 1)
  {
    WebCore::Page::~Page(v1);
    return (WebCore::PerformanceLogging *)WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v1;
  }
  return this;
}

WebCore::PerformanceLogging *WebCore::PerformanceMonitor::measurePostBackgroundingMemoryUsage(WebCore::PerformanceLogging *this)
{
  uint64_t v1;
  BOOL v2;
  WebCore::PerformanceLogging *v3;
  char v4;
  unint64_t v5;
  NSObject *v6;
  _BOOL8 v7;
  uint64_t *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;
  WTF::StringImpl *v13;
  _BYTE buf[12];
  __int16 v15;
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  ++*(_DWORD *)v1;
  if (*(_BYTE *)(v1 + 1093))
    v2 = 0;
  else
    v2 = WebCore::gNonUtilityPageCount == 1;
  if (v2)
  {
    v3 = this;
    this = (WebCore::PerformanceLogging *)WebCore::PerformanceLogging::physicalFootprint(this);
    if (v4)
    {
      v5 = (unint64_t)this;
      v6 = qword_1ECE7C680;
      v7 = os_log_type_enabled((os_log_t)qword_1ECE7C680, OS_LOG_TYPE_DEFAULT);
      if (v7)
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v3;
        v15 = 2048;
        v16 = v5;
        _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "%p - PerformanceMonitor::measurePostBackgroundingMemoryUsage: Process was using %llu bytes of memory after becoming non visible.", buf, 0x16u);
      }
      if ((*(_QWORD *)(*(_QWORD *)(v1 + 112) + 672) & 0x800000000000) == 0 || (v8 = *(uint64_t **)(v1 + 256)) == 0)
        v8 = WebCore::emptyDiagnosticLoggingClient((WebCore *)v7);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::DiagnosticLoggingKeys::memoryUsageToDiagnosticLoggingKey(v5, &v13);
      (*(void (**)(uint64_t *, _BYTE *, WTF::StringImpl **, _QWORD))*v8)(v8, buf, &v13, 0);
      v10 = v13;
      v13 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      this = *(WebCore::PerformanceLogging **)buf;
      *(_QWORD *)buf = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WebCore::PerformanceLogging *)WTF::StringImpl::destroy(this, v9);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  if (*(_DWORD *)v1 == 1)
  {
    WebCore::Page::~Page(v1);
    return (WebCore::PerformanceLogging *)WTF::fastFree(v11, v12);
  }
  else
  {
    --*(_DWORD *)v1;
  }
  return this;
}

uint64_t WebCore::PerformanceMonitor::processMayBecomeInactiveTimerFired(WebCore::PerformanceMonitor *this)
{
  *((_BYTE *)this + 440) = 1;
  return WebCore::PerformanceMonitor::updateProcessStateForMemoryPressure(this);
}

uint64_t WebCore::PerformanceMonitor::didStartProvisionalLoad(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_BYTE *)(this + 88))
    *(_BYTE *)(this + 88) = 0;
  if ((*(_QWORD *)(this + 40) & 0xFFFFFFFFFFFFLL) != 0)
    this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 8));
  if ((*(_QWORD *)(v1 + 304) & 0xFFFFFFFFFFFFLL) != 0)
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 272));
  return this;
}

WTF::MonotonicTime *WebCore::PerformanceMonitor::didFinishLoad(WTF::MonotonicTime *this)
{
  WTF::MonotonicTime *v1;
  uint64_t v2;
  uint64_t v3;
  double v5;
  BOOL v6;
  double v7;

  v1 = this;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 112) + 680);
  if ((v3 & 0x4000000000) != 0 && !*(_BYTE *)(v2 + 1093) && WebCore::gNonUtilityPageCount == 1)
  {
    if (*((_BYTE *)this + 88))
      *((_BYTE *)this + 88) = 0;
    *((_QWORD *)this + 4) = 0;
    WTF::MonotonicTime::now(this);
    this = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime((uint64_t)v1 + 8, v5 + 5.0);
    v2 = *(_QWORD *)(*(_QWORD *)v1 + 8);
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 112) + 680);
  }
  if ((v3 & 0x8000000000) != 0)
  {
    if (*(_BYTE *)(v2 + 1093))
      v6 = 0;
    else
      v6 = WebCore::gNonUtilityPageCount == 1;
    if (v6)
    {
      *((_QWORD *)v1 + 37) = 0;
      WTF::MonotonicTime::now(this);
      return (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime((uint64_t)v1 + 272, v7 + 10.0);
    }
  }
  return this;
}

WebCore::Page **WebCore::PerformanceMonitor::measureCPUUsageInActivityState(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  _OWORD *v5;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  int v12;
  _BYTE v13[25];
  WebCore::Page *v14;
  uint8_t buf[4];
  unsigned __int8 *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  ++*(_DWORD *)v3;
  v14 = (WebCore::Page *)v3;
  if (*(_BYTE *)(v3 + 1093))
    v4 = 0;
  else
    v4 = WebCore::gNonUtilityPageCount == 1;
  if (!v4)
  {
    v12 = a1[264];
    goto LABEL_20;
  }
  v5 = a1 + 240;
  if (!a1[264])
  {
    WTF::CPUTime::get((WTF::CPUTime *)a1);
    goto LABEL_16;
  }
  WTF::CPUTime::get((WTF::CPUTime *)a1);
  v12 = a1[264];
  if (v13[24])
  {
    if (a1[264])
    {
      WTF::CPUTime::percentageCPUUsageSince((WTF::CPUTime *)v13, (const WTF::CPUTime *)(a1 + 240));
      v8 = v7;
      v9 = qword_1ECE7C680;
      if (!os_log_type_enabled((os_log_t)qword_1ECE7C680, OS_LOG_TYPE_DEFAULT))
      {
LABEL_13:
        if (v13[24] && a1[264])
        {
          (*(void (**)(_QWORD, uint64_t, double))(**(_QWORD **)(*(_QWORD *)(v3 + 48) + 16) + 1600))(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16), a2, *(double *)&v13[8] + *(double *)&v13[16] - (*((double *)a1 + 31) + *((double *)a1 + 32)));
LABEL_16:
          *v5 = *(_OWORD *)v13;
          *(_OWORD *)(a1 + 249) = *(_OWORD *)&v13[9];
          return WTF::Ref<WebCore::Page,WTF::RawPtrTraits<WebCore::Page>,WTF::DefaultRefDerefTraits<WebCore::Page>>::~Ref(&v14);
        }
LABEL_27:
        std::__throw_bad_optional_access[abi:sn180100]();
      }
      switch((_DWORD)a2)
      {
        case 1:
          v10 = "VisibleNonActive";
LABEL_12:
          *(_DWORD *)buf = 134218498;
          v16 = a1;
          v17 = 2048;
          v18 = v8;
          v19 = 2080;
          v20 = v10;
          _os_log_impl(&dword_1940B8000, v9, OS_LOG_TYPE_DEFAULT, "%p - PerformanceMonitor::measureCPUUsageInActivityState: Process is using %.1f%% CPU in state: %s", buf, 0x20u);
          goto LABEL_13;
        case 0:
          v10 = "NonVisible";
          goto LABEL_12;
        case 2:
          v10 = "VisibleAndActive";
          goto LABEL_12;
      }
      __break(0xC471u);
    }
    __break(1u);
    goto LABEL_27;
  }
LABEL_20:
  if (v12)
    a1[264] = 0;
  return WTF::Ref<WebCore::Page,WTF::RawPtrTraits<WebCore::Page>,WTF::DefaultRefDerefTraits<WebCore::Page>>::~Ref(&v14);
}

WTF::StringImpl *WebCore::reportPageOverPostLoadResourceThreshold(WTF::StringImpl *result)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v1 = *((_QWORD *)result + 20);
  if (v1)
    v2 = *(_BYTE *)(v1 + 144) == 0;
  else
    v2 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 296);
    if (v3)
    {
      v4 = result;
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v10, (const WTF::URL *)(v3 + 736));
      result = v10;
      if (v10)
      {
        if (*((_DWORD *)v10 + 1))
        {
          v6 = (uint64_t *)MEMORY[0x19AEA53F4]();
          if ((v6 & 1) == 0)
          {
            if ((*(_QWORD *)(*((_QWORD *)v4 + 14) + 672) & 0x800000000000) == 0
              || (v7 = (uint64_t *)*((_QWORD *)v4 + 32)) == 0)
            {
              v6 = WebCore::emptyDiagnosticLoggingClient((WebCore *)v6);
              v7 = v6;
            }
            WebCore::DiagnosticLoggingKeys::domainCausingEnergyDrainKey((uint64_t *)&v9, (WebCore::DiagnosticLoggingKeys *)v6);
            (*(void (**)(uint64_t *, WTF::StringImpl **, WTF::StringImpl **, _QWORD))(*v7 + 24))(v7, &v9, &v10, 0);
            v8 = v9;
            v9 = 0;
            if (v8)
            {
              if (*(_DWORD *)v8 == 2)
                WTF::StringImpl::destroy(v8, v5);
              else
                *(_DWORD *)v8 -= 2;
            }
          }
        }
        result = v10;
        v10 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::PerformanceNavigation::redirectCount(WebCore::PerformanceNavigation *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v17;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19603CC44);
  }
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 280) + 88);
  if (!v9)
  {
    v12 = 0;
    goto LABEL_17;
  }
  v10 = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 1;
  v11 = *(_QWORD *)(v9 + 1384);
  if (!v11 || (*(_BYTE *)(v11 + 106) & 0x40) != 0)
  {
    v12 = 0;
    if (!v10)
      goto LABEL_14;
LABEL_16:
    *(_DWORD *)(v9 + 24) = v10;
    goto LABEL_17;
  }
  v12 = *(unsigned __int16 *)(v11 + 104);
  if (v10)
    goto LABEL_16;
LABEL_14:
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  do
  {
LABEL_17:
    v13 = __ldaxr(v7);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v7));
  if (!v14)
  {
    atomic_store(1u, v7);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E31FE290;
    v15[1] = v7;
    v17 = v15;
    WTF::ensureOnMainThread();
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  return v12;
}

void WebCore::PerformanceNavigationTiming::~PerformanceNavigationTiming(WebCore::PerformanceNavigationTiming *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF *v13;

  *(_QWORD *)this = off_1E3401A20;
  v3 = *((unsigned int *)this + 69);
  if ((_DWORD)v3)
  {
    v7 = (WTF **)*((_QWORD *)this + 33);
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          v10 = (WTF::StringImpl *)*((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
            {
              v12 = v9;
              WTF::StringImpl::destroy(v10, a2);
              v9 = v12;
            }
            else
            {
              *(_DWORD *)v10 -= 2;
            }
          }
          v11 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
            {
              v13 = v9;
              WTF::StringImpl::destroy(v11, a2);
              v9 = v13;
            }
            else
            {
              *(_DWORD *)v11 -= 2;
            }
          }
          WTF::fastFree(v9, a2);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = (WTF *)*((_QWORD *)this + 33);
  if (v4)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::ResourceTiming::~ResourceTiming((WebCore::PerformanceNavigationTiming *)((char *)this + 48), a2);
  *(_QWORD *)this = off_1E34017E8;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF *v13;

  *(_QWORD *)this = off_1E3401A20;
  v3 = *((unsigned int *)this + 69);
  if ((_DWORD)v3)
  {
    v7 = (WTF **)*((_QWORD *)this + 33);
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          v10 = (WTF::StringImpl *)*((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
            {
              v12 = v9;
              WTF::StringImpl::destroy(v10, a2);
              v9 = v12;
            }
            else
            {
              *(_DWORD *)v10 -= 2;
            }
          }
          v11 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
            {
              v13 = v9;
              WTF::StringImpl::destroy(v11, a2);
              v9 = v13;
            }
            else
            {
              *(_DWORD *)v11 -= 2;
            }
          }
          WTF::fastFree(v9, a2);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = (WTF *)*((_QWORD *)this + 33);
  if (v4)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::ResourceTiming::~ResourceTiming((WebCore::PerformanceNavigationTiming *)((char *)this + 48), a2);
  *(_QWORD *)this = off_1E34017E8;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree(this, v5);
}

double WebCore::PerformanceNavigationTiming::startTime(WebCore::PerformanceNavigationTiming *this)
{
  return 0.0;
}

double WebCore::PerformanceNavigationTiming::duration(WebCore::PerformanceNavigationTiming *this)
{
  double v1;

  v1 = *((double *)this + 45);
  if (v1 == 0.0)
    return 0.0;
  else
    return *(double *)&WebCore::timePrecision
         * floor((v1 - *((double *)this + 5)) / *(double *)&WebCore::timePrecision)
         * 1000.0;
}

uint64_t WebCore::PerformanceObserver::PerformanceObserver(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::Performance **v5;
  uint64_t v6;
  int v7;
  WebCore::LocalDOMWindow *v8;
  WebCore::Performance *v9;
  WebCore::Performance *v11;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (WebCore::Performance **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 274))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2))
    {
      ++*(_DWORD *)(a2 + 312);
      v11 = (WebCore::Performance *)WebCore::WorkerGlobalScope::performance((WebCore::WorkerGlobalScope *)a2);
      WTF::RefPtr<WebCore::Performance,WTF::RawPtrTraits<WebCore::Performance>,WTF::DefaultRefDerefTraits<WebCore::Performance>>::operator=(v5, v11);
      if (*(_DWORD *)(a2 + 312) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      else
        --*(_DWORD *)(a2 + 312);
    }
  }
  else
  {
    v7 = *(_DWORD *)(a2 - 168);
    *(_DWORD *)(a2 - 168) = v7 + 2;
    v8 = *(WebCore::LocalDOMWindow **)(a2 + 504);
    if (v8)
    {
      v9 = (WebCore::Performance *)WebCore::LocalDOMWindow::performance(v8);
      WTF::RefPtr<WebCore::Performance,WTF::RawPtrTraits<WebCore::Performance>,WTF::DefaultRefDerefTraits<WebCore::Performance>>::operator=(v5, v9);
      v7 = *(_DWORD *)(a2 - 168) - 2;
    }
    if (v7)
    {
      *(_DWORD *)(a2 - 168) = v7;
    }
    else if ((*(_WORD *)(a2 - 162) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)(a2 - 192), (void *)a2);
    }
  }
  return a1;
}

WebCore::Performance *WebCore::PerformanceObserver::disassociate(WebCore::PerformanceObserver *this, void *a2)
{
  WebCore::Performance *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::Performance *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
    {
      WebCore::Performance::~Performance(result, a2);
      result = (WebCore::Performance *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 4);
    }
  }
  *((_BYTE *)this + 41) = 0;
  return result;
}

void WebCore::PerformanceObserver::observe(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 v6;
  char v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  _DWORD *v16;
  _DWORD *v17;
  void *v18;
  char v19;
  uint64_t v20;
  int v21;
  WebCore::PerformanceEntry *v22;
  uint64_t v23;
  unsigned int v24;

  if (!*(_QWORD *)(a1 + 8))
  {
    *(_BYTE *)a3 = 33;
    *(_QWORD *)(a3 + 8) = 0;
LABEL_23:
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    if (!*(_BYTE *)(a2 + 32))
    {
      if (*(_BYTE *)(a1 + 41) && *(_BYTE *)(a1 + 42))
        goto LABEL_25;
      v20 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v20)
      {
        v21 = 0;
        v22 = *(WebCore::PerformanceEntry **)a2;
        v23 = 8 * v20;
        do
        {
          v24 = (unsigned __int16)WebCore::PerformanceEntry::parseEntryTypeString(v22, (const WTF::String *)a2);
          if (v24 <= 0x100)
            LOBYTE(v24) = 0;
          v21 |= v24;
          v22 = (WebCore::PerformanceEntry *)((char *)v22 + 8);
          v23 -= 8;
        }
        while (v23);
        if (v21)
        {
          v8 = 0;
          *(_BYTE *)(a1 + 40) = v21;
          goto LABEL_12;
        }
      }
LABEL_18:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      return;
    }
LABEL_21:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = 33;
LABEL_22:
    *(_BYTE *)a3 = v19;
    goto LABEL_23;
  }
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_21;
  if (*(_BYTE *)(a1 + 41) && !*(_BYTE *)(a1 + 42))
  {
LABEL_25:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = 10;
    goto LABEL_22;
  }
  *(_BYTE *)(a1 + 42) = 1;
  v6 = WebCore::PerformanceEntry::parseEntryTypeString((WebCore::PerformanceEntry *)(a2 + 24), (const WTF::String *)a2);
  if (v6 <= 0xFFu)
    goto LABEL_18;
  v7 = v6;
  v8 = *(_BYTE *)(a2 + 40) != 0;
  if (!*(_BYTE *)(a2 + 40))
  {
LABEL_11:
    *(_BYTE *)(a1 + 40) |= v7;
LABEL_12:
    if (!*(_BYTE *)(a1 + 41))
    {
      v16 = *(_DWORD **)(a1 + 8);
      if (v16)
      {
        v17 = v16 + 4;
        ++v16[4];
        WebCore::Performance::registerPerformanceObserver((WebCore::Performance *)v16, (WebCore::PerformanceObserver *)a1);
        WTF::RefCounted<WebCore::Performance>::deref(v17, v18);
      }
      else
      {
        WebCore::Performance::registerPerformanceObserver(0, (WebCore::PerformanceObserver *)a1);
      }
      *(_BYTE *)(a1 + 41) = 1;
    }
    if (v8)
      WebCore::PerformanceObserver::deliver(a1, (void *)a2);
    goto LABEL_18;
  }
  v9 = a1 + 16;
  v10 = *(unsigned int *)(a1 + 28);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (_DWORD *)(v11 + 16);
    ++*(_DWORD *)(v11 + 16);
    if (*(_BYTE *)(a2 + 32))
    {
      WebCore::Performance::appendBufferedEntriesByType((_QWORD *)v11, (_QWORD *)(a2 + 24), v9, a1);
      WTF::RefCounted<WebCore::Performance>::deref(v12, v13);
LABEL_10:
      v14 = *(_QWORD *)(a1 + 16);
      v15 = (uint64_t *)(v14 + 8 * *(unsigned int *)(a1 + 28));
      std::stable_sort[abi:sn180100]<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *,BOOL (*)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&)>((uint64_t *)(v14 + 8 * v10), v15, (uint64_t (*)(void))WebCore::PerformanceEntry::startTimeCompareLessThan);
      std::inplace_merge[abi:sn180100]<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *,BOOL (*)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&)>(v14, (uint64_t *)(v14 + 8 * v10), v15);
      goto LABEL_11;
    }
  }
  else if (*(_BYTE *)(a2 + 32))
  {
    WebCore::Performance::appendBufferedEntriesByType(0, (_QWORD *)(a2 + 24), v9, a1);
    goto LABEL_10;
  }
  __break(1u);
}

void std::stable_sort[abi:sn180100]<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *,BOOL (*)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&)>(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  unint64_t v5;
  const std::nothrow_t *v6;
  unint64_t v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t (*v11)(void);

  v11 = a3;
  v5 = a2 - a1;
  if ((char *)a2 - (char *)a1 < 1)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(a1, a2, &v11, v5, 0, 0);
  }
  else
  {
    v6 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v7 = a2 - a1;
    while (1)
    {
      v8 = (uint64_t *)operator new(8 * v7, v6);
      if (v8)
        break;
      v9 = v7 > 1;
      v7 >>= 1;
      if (!v9)
        goto LABEL_5;
    }
    v10 = v8;
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(a1, a2, &v11, v5, v8, v7);
    operator delete(v10);
  }
}

void std::inplace_merge[abi:sn180100]<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *,BOOL (*)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&)>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const std::nothrow_t *v9;
  _QWORD *v10;
  BOOL v11;
  void *v12;
  unsigned int (*v13)(uint64_t *, uint64_t *);

  v13 = (unsigned int (*)(uint64_t *, uint64_t *))WebCore::PerformanceEntry::startTimeCompareLessThan;
  v6 = ((uint64_t)a2 - a1) >> 3;
  v7 = a3 - a2;
  if (v7 >= v6)
    v8 = ((uint64_t)a2 - a1) >> 3;
  else
    v8 = a3 - a2;
  if (v8 < 1)
  {
LABEL_8:
    std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(a1, a2, a3, &v13, v6, v7, 0, 0);
  }
  else
  {
    v9 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    while (1)
    {
      v10 = operator new(8 * v8, v9);
      if (v10)
        break;
      v11 = (unint64_t)v8 > 1;
      v8 = (unint64_t)v8 >> 1;
      if (!v11)
        goto LABEL_8;
    }
    v12 = v10;
    std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(a1, a2, a3, &v13, v6, v7, v10, v8);
    operator delete(v12);
  }
}

uint64_t WebCore::PerformanceObserver::deliver(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::InspectorInstrumentation *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  const WTF::String *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebCore::ScriptExecutionContext *v13;
  void *v14;
  void *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(unsigned int *)(this + 28);
  if ((_DWORD)v2)
  {
    v3 = this;
    v4 = *(_QWORD *)(*(_QWORD *)(this + 32) + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = (WebCore::InspectorInstrumentation *)(v5 - 96);
        v7 = *(uint64_t **)(this + 16);
        v8 = *(_DWORD *)(this + 24);
        v18 = 0;
        *(_QWORD *)(this + 16) = 0;
        v19 = 0;
        *(_QWORD *)(this + 24) = 0;
        WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, a2);
        v9 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v9 = 1;
        v18 = 0;
        *(_QWORD *)(v9 + 8) = v7;
        v19 = 0;
        *(_DWORD *)(v9 + 16) = v8;
        *(_DWORD *)(v9 + 20) = v2;
        std::stable_sort[abi:sn180100]<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *,BOOL (*)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&)>(v7, &v7[v2], (uint64_t (*)(void))WebCore::PerformanceEntry::startTimeCompareLessThan);
        v17 = v9;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::InspectorInstrumentation::willFireObserverCallback(v6, (WebCore::ScriptExecutionContext *)&v16, v10);
        v12 = v16;
        v16 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v3 + 32) + 48))(*(_QWORD *)(v3 + 32), v3, v9, v3);
        WebCore::InspectorInstrumentation::didFireObserverCallback(v6, v13);
        WTF::Ref<WebCore::PerformanceObserverEntryList,WTF::RawPtrTraits<WebCore::PerformanceObserverEntryList>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserverEntryList>>::~Ref(&v17, v14);
        return WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v15);
      }
    }
  }
  return this;
}

WTF *WebCore::PerformanceObserver::disconnect(WebCore::PerformanceObserver *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  void *v5;
  WTF *result;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  if (v3)
  {
    v4 = v3 + 4;
    ++v3[4];
    WebCore::Performance::unregisterPerformanceObserver((WebCore::Performance *)v3, this);
    WTF::RefCounted<WebCore::Performance>::deref(v4, v5);
  }
  *((_BYTE *)this + 41) = 0;
  result = WTF::Vector<WTF::RefPtr<WebCore::CSSRule,WTF::RawPtrTraits<WebCore::CSSRule>,WTF::DefaultRefDerefTraits<WebCore::CSSRule>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WebCore::PerformanceObserver *)((char *)this + 16), a2);
  *((_BYTE *)this + 40) = 0;
  return result;
}

uint64_t WebCore::PerformanceObserver::queueEntry(uint64_t this, WebCore::PerformanceEntry *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned int *)(this + 28);
  if ((_DWORD)v2 == *(_DWORD *)(this + 24))
    return WTF::Vector<WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaSourceHandle&>(this + 16, (uint64_t)a2);
  v3 = *(_QWORD *)(this + 16);
  ++*((_DWORD *)a2 + 2);
  *(_QWORD *)(v3 + 8 * v2) = a2;
  *(_DWORD *)(this + 28) = v2 + 1;
  return this;
}

uint64_t WebCore::PerformanceObserver::supportedEntryTypes@<X0>(WebCore::PerformanceObserver *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  int v10;
  WebCore::SecurityOrigin *v11;
  WebCore::SecurityOrigin *v12;
  WTF::StringImpl *v13;
  const WebCore::SecurityOrigin *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = (WTF::StringImpl *)v23;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = (WTF::StringImpl *)v23;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = (WTF::StringImpl *)v23;
  *(_QWORD *)(a2 + 8) = 3;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)a2 = v8;
  if (v5)
    *(_DWORD *)v5 += 2;
  *v8 = v5;
  if (v6)
    *(_DWORD *)v6 += 2;
  v8[1] = v6;
  if (v7)
  {
    v10 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    v8[2] = v7;
    *(_DWORD *)(a2 + 12) = 3;
    if (v10)
      *(_DWORD *)v7 = v10;
    else
      WTF::StringImpl::destroy(v7, v9);
  }
  else
  {
    v8[2] = 0;
    *(_DWORD *)(a2 + 12) = 3;
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v9);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v9);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (!*((_BYTE *)this + 274))
  {
    *((_DWORD *)this - 42) += 2;
    WebCore::SecurityContext::securityOrigin(this, v9);
    v12 = v11;
    WebCore::Document::topOrigin((WebCore::PerformanceObserver *)((char *)this - 192), v13);
    if (WebCore::SecurityOrigin::isSameOriginDomain(v12, v14))
    {
      v23 = "paint";
      v24 = 6;
      v16 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v16 == *(_DWORD *)(a2 + 8))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t)&v23);
      }
      else
      {
        v17 = *(_QWORD *)a2;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v18 = *(_DWORD *)(a2 + 12);
        *(_QWORD *)(v17 + 8 * v16) = v25;
        *(_DWORD *)(a2 + 12) = v18 + 1;
      }
    }
    if (*((_DWORD *)this - 42) == 2)
    {
      if ((*((_WORD *)this - 81) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::PerformanceObserver *)((char *)this - 192), v15);
    }
    else
    {
      *((_DWORD *)this - 42) -= 2;
    }
  }
  v23 = "resource";
  v24 = 9;
  v19 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v19 == *(_DWORD *)(a2 + 8))
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t)&v23);
  v20 = *(_QWORD *)a2;
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(v20 + 8 * v19) = v25;
  *(_DWORD *)(a2 + 12) = v22 + 1;
  return result;
}

_DWORD *WebCore::PerformanceObserverEntryList::getEntriesByName@<X0>(_DWORD *this@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v5;
  int v7;
  unsigned __int8 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _DWORD *v18;

  v5 = this;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (*(_QWORD *)a3)
  {
    this = (_DWORD *)WebCore::PerformanceEntry::parseEntryTypeString(a3, a2);
    v7 = BYTE1(this);
    if (!BYTE1(this))
      return this;
    v8 = this;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = v5[5];
  if ((_DWORD)v9)
  {
    v10 = (_QWORD *)*((_QWORD *)v5 + 1);
    v11 = 8 * v9;
    do
    {
      if (!*(_QWORD *)a2
        || (this = (_DWORD *)WTF::equal(*(WTF **)(*v10 + 16), *(const WTF::StringImpl **)a2, a3), (_DWORD)this))
      {
        if (!v7
          || (this = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v10 + 32))(*v10), (_DWORD)this == v8))
        {
          v12 = (_DWORD *)*v10;
          v12[2] = *(_DWORD *)(*v10 + 8) + 1;
          v18 = v12;
          v13 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v13 == *(_DWORD *)(a4 + 8))
          {
            v14 = WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a4, v13 + 1, (unint64_t)&v18);
            v13 = *(unsigned int *)(a4 + 12);
            v15 = *(char **)a4;
            v16 = *(_QWORD *)v14;
            *(_QWORD *)v14 = 0;
            *(_QWORD *)&v15[8 * v13] = v16;
          }
          else
          {
            v17 = *(char **)a4;
            v18 = 0;
            *(_QWORD *)&v17[8 * v13] = v12;
          }
          *(_DWORD *)(a4 + 12) = v13 + 1;
          this = v18;
          v18 = 0;
          if (this)
          {
            if (this[2] == 1)
              this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
            else
              --this[2];
          }
        }
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  return this;
}

void WebCore::PerformanceResourceTiming::~PerformanceResourceTiming(WebCore::PerformanceResourceTiming *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF *v13;

  *(_QWORD *)this = off_1E3401A20;
  v3 = *((unsigned int *)this + 69);
  if ((_DWORD)v3)
  {
    v7 = (WTF **)*((_QWORD *)this + 33);
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          v10 = (WTF::StringImpl *)*((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
            {
              v12 = v9;
              WTF::StringImpl::destroy(v10, a2);
              v9 = v12;
            }
            else
            {
              *(_DWORD *)v10 -= 2;
            }
          }
          v11 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
            {
              v13 = v9;
              WTF::StringImpl::destroy(v11, a2);
              v9 = v13;
            }
            else
            {
              *(_DWORD *)v11 -= 2;
            }
          }
          WTF::fastFree(v9, a2);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = (WTF *)*((_QWORD *)this + 33);
  if (v4)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::ResourceTiming::~ResourceTiming((WebCore::PerformanceResourceTiming *)((char *)this + 48), a2);
  *(_QWORD *)this = off_1E34017E8;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF *v13;

  *(_QWORD *)this = off_1E3401A20;
  v3 = *((unsigned int *)this + 69);
  if ((_DWORD)v3)
  {
    v7 = (WTF **)*((_QWORD *)this + 33);
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          v10 = (WTF::StringImpl *)*((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
            {
              v12 = v9;
              WTF::StringImpl::destroy(v10, a2);
              v9 = v12;
            }
            else
            {
              *(_DWORD *)v10 -= 2;
            }
          }
          v11 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
            {
              v13 = v9;
              WTF::StringImpl::destroy(v11, a2);
              v9 = v13;
            }
            else
            {
              *(_DWORD *)v11 -= 2;
            }
          }
          WTF::fastFree(v9, a2);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = (WTF *)*((_QWORD *)this + 33);
  if (v4)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::ResourceTiming::~ResourceTiming((WebCore::PerformanceResourceTiming *)((char *)this + 48), a2);
  *(_QWORD *)this = off_1E34017E8;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree(this, v5);
}

void WebCore::PerformanceResourceTiming::requestStart(WebCore::PerformanceResourceTiming *this)
{
  if ((*((_BYTE *)this + 210) & 0x40) == 0
    && *((double *)this + 21) == 0.0
    && !*((_BYTE *)this + 256)
    && *((double *)this + 20) == 0.0)
  {
    WebCore::PerformanceResourceTiming::connectStart(this);
  }
}

void WebCore::PerformanceResourceTiming::responseStart(WebCore::PerformanceResourceTiming *this)
{
  if ((*((_BYTE *)this + 210) & 0x40) == 0 && *((double *)this + 22) == 0.0)
    WebCore::PerformanceResourceTiming::requestStart(this);
}

uint64_t WebCore::PerformanceMark::performanceEntryType(WebCore::PerformanceMark *this)
{
  return 2;
}

const char *WebCore::PerformanceMark::entryType(WebCore::PerformanceMark *this)
{
  return "mark";
}

uint64_t WebCore::PerformanceMeasure::performanceEntryType(WebCore::PerformanceMeasure *this)
{
  return 4;
}

const char *WebCore::PerformanceMeasure::entryType(WebCore::PerformanceMeasure *this)
{
  return "measure";
}

uint64_t WebCore::PerformanceNavigationTiming::performanceEntryType(WebCore::PerformanceNavigationTiming *this)
{
  return 1;
}

const char *WebCore::PerformanceNavigationTiming::entryType(WebCore::PerformanceNavigationTiming *this)
{
  return "navigation";
}

uint64_t WebCore::PerformanceResourceTiming::performanceEntryType(WebCore::PerformanceResourceTiming *this)
{
  return 8;
}

const char *WebCore::PerformanceResourceTiming::entryType(WebCore::PerformanceResourceTiming *this)
{
  return "resource";
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::PerformanceMonitor::*&)(void),WebCore::PerformanceMonitor*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_DWORD *WTF::RefCounted<WebCore::Performance>::deref(_DWORD *result, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*result == 1)
  {
    WebCore::Performance::~Performance((WebCore::Performance *)(result - 4), a2);
    return (_DWORD *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t *std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(void), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t (*v9)(void);
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16[2];
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;

  v19 = result;
  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *a3;
      v18 = a2 - 1;
      result = (uint64_t *)v9();
      if ((_DWORD)result)
        return (uint64_t *)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *&>(&v19, &v18);
    }
    else if ((uint64_t)a4 <= 0)
    {
      return (uint64_t *)std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(result, a2, (uint64_t (**)(_QWORD *, uint64_t))a3);
    }
    else
    {
      v13 = a4 >> 1;
      v14 = &result[a4 >> 1];
      if ((uint64_t)a4 <= a6)
      {
        v16[0] = (uint64_t)a5;
        v16[1] = (uint64_t)&v17;
        v17 = 0;
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(result, &result[a4 >> 1], (uint64_t (**)(uint64_t *, uint64_t *))a3, a4 >> 1, a5);
        v17 = a4 >> 1;
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(&v8[a4 >> 1], a2, (uint64_t (**)(uint64_t *, uint64_t *))a3, a4 - v13, &a5[v13]);
        v17 = a4;
        std::__merge_move_assign[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(a5, &a5[v13], &a5[v13], &a5[a4], (_DWORD **)v8, (unsigned int (**)(_QWORD *, _QWORD *))a3);
        return std::unique_ptr<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,std::__destruct_n &>::~unique_ptr[abi:sn180100](v16);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a6);
        v15 = a4 - v13;
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v14, a2, a3, v15, a5, a6);
        return (uint64_t *)std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>((uint64_t)v8, v14, a2, (unsigned int (**)(uint64_t *, uint64_t *))a3, v13, v15, a5, a6);
      }
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      v13 = *v7;
      *v7 = 0;
      *v5 = v13;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      result = (uint64_t *)(*a3)(a2 - 1, result);
      if ((_DWORD)result)
        v11 = v10;
      else
        v11 = v7;
      v12 = *v11;
      *v11 = 0;
      *v5++ = v12;
      if (!(_DWORD)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v27 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(result, v27, a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t *)std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v28 = &v7[a4 >> 1];
      while (v28 != a2)
      {
        result = (uint64_t *)(*a3)(v28, v7);
        if ((_DWORD)result)
        {
          v29 = *v28;
          *v28++ = 0;
        }
        else
        {
          v29 = *v7;
          *v7++ = 0;
        }
        *v5++ = v29;
        if (v7 == v27)
        {
          if (v28 != a2)
          {
            v30 = 0;
            do
            {
              v31 = v28[v30];
              v28[v30] = 0;
              v5[v30++] = v31;
            }
            while (&v28[v30] != a2);
          }
          return result;
        }
      }
      if (v7 != v27)
      {
        v32 = 0;
        do
        {
          v33 = v7[v32];
          v7[v32] = 0;
          v5[v32++] = v33;
        }
        while (&v7[v32] != v27);
      }
    }
    else if (result != a2)
    {
      v14 = *result;
      *result = 0;
      v15 = result + 1;
      *a5 = v14;
      if (result + 1 != a2)
      {
        v16 = 0;
        v17 = a5;
        do
        {
          v18 = v17++;
          result = (uint64_t *)(*a3)(v15, v18);
          if ((_DWORD)result)
          {
            v19 = *v18;
            *v18 = 0;
            v18[1] = v19;
            v20 = (uint64_t **)v5;
            if (v18 != v5)
            {
              v21 = v16;
              while (1)
              {
                v20 = (uint64_t **)((char *)v5 + v21);
                v22 = (uint64_t *)((char *)v5 + v21 - 8);
                if (!(*a3)(v15, v22))
                  break;
                v23 = *v22;
                *v22 = 0;
                v24 = *(_DWORD **)((char *)v5 + v21);
                *(uint64_t *)((char *)v5 + v21) = v23;
                if (v24)
                {
                  if (v24[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
                  else
                    --v24[2];
                }
                v21 -= 8;
                if (!v21)
                {
                  v20 = (uint64_t **)v5;
                  break;
                }
              }
            }
            v26 = (uint64_t *)*v15;
            *v15 = 0;
            result = *v20;
            *v20 = v26;
            if (result)
            {
              if (*((_DWORD *)result + 2) == 1)
                result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
              else
                --*((_DWORD *)result + 2);
            }
          }
          else
          {
            v25 = (_DWORD *)*v15;
            *v15 = 0;
            *v17 = (uint64_t)v25;
          }
          ++v15;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

_DWORD *std::__merge_move_assign[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(_DWORD *result, _QWORD *a2, _QWORD *a3, _QWORD *a4, _DWORD **a5, unsigned int (**a6)(_QWORD *, _QWORD *))
{
  _QWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;

  if (result == (_DWORD *)a2)
  {
LABEL_22:
    while (a3 != a4)
    {
      v14 = (_DWORD *)*a3;
      *a3 = 0;
      result = *a5;
      *a5 = v14;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      ++a3;
      ++a5;
    }
  }
  else
  {
    v11 = result;
    while (a3 != a4)
    {
      if ((*a6)(a3, v11))
      {
        v12 = (_DWORD *)*a3;
        *a3 = 0;
        result = *a5;
        *a5 = v12;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
          else
            --result[2];
        }
        ++a3;
      }
      else
      {
        v13 = (_DWORD *)*v11;
        *v11 = 0;
        result = *a5;
        *a5 = v13;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
          else
            --result[2];
        }
        ++v11;
      }
      ++a5;
      if (v11 == a2)
        goto LABEL_22;
    }
    if (v11 != a2)
    {
      v15 = 0;
      do
      {
        v16 = (_DWORD *)v11[v15];
        v11[v15] = 0;
        result = a5[v15];
        a5[v15] = v16;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
          else
            --result[2];
        }
        ++v15;
      }
      while (&v11[v15] != a2);
    }
  }
  return result;
}

uint64_t *std::unique_ptr<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,std::__destruct_n &>::~unique_ptr[abi:sn180100](uint64_t *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (unint64_t *)a1[1];
    v4 = *v3;
    if (*v3)
    {
      v5 = 0;
      do
      {
        v6 = *(_DWORD **)(v2 + 8 * v5);
        *(_QWORD *)(v2 + 8 * v5) = 0;
        if (v6)
        {
          if (v6[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
            v4 = *v3;
          }
          else
          {
            --v6[2];
          }
        }
        ++v5;
      }
      while (v5 < v4);
    }
  }
  return a1;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(uint64_t result, uint64_t *a2, uint64_t *a3, unsigned int (**a4)(uint64_t *, uint64_t *), uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v15;
  uint64_t *i;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  int v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t *v55;
  unsigned int (*v56)(uint64_t *, uint64_t *);
  uint64_t *v57;
  uint64_t *v58;

  if (a6)
  {
    v10 = a6;
    v15 = (uint64_t *)result;
    do
    {
      if (a5 <= a8 || v10 <= a8)
        return (uint64_t)std::__buffered_inplace_merge[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v15, a2, a3, a4, a5, v10, a7);
      if (!a5)
        return result;
      for (i = v15; ; ++i)
      {
        result = ((uint64_t (*)(uint64_t *, uint64_t *))*a4)(a2, v15);
        if ((result & 1) != 0)
          break;
        ++v15;
        if (!--a5)
          return result;
      }
      v53 = a7;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          v57 = a2;
          v58 = v15;
          return (uint64_t)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *&>(&v58, &v57);
        }
        if (a5 >= 0)
          v28 = a5;
        else
          v28 = a5 + 1;
        v47 = v28 >> 1;
        v20 = &v15[v28 >> 1];
        if (a3 == a2)
        {
          v46 = a3;
          v45 = a3;
        }
        else
        {
          v49 = v28 >> 1;
          v51 = a3;
          v56 = *a4;
          v25 = a3 - a2;
          v26 = a2;
          do
          {
            v22 = &v26[v25 >> 1];
            v23 = v20;
            v24 = ((uint64_t (*)(uint64_t *))v56)(v22);
            v20 = v23;
            if (v24)
              v25 += ~(v25 >> 1);
            else
              v25 >>= 1;
            if (v24)
              v26 = v22 + 1;
          }
          while (v25);
          v45 = a2;
          a3 = v51;
          v46 = v26;
          a7 = v53;
          v47 = v49;
        }
        v44 = v46 - v45;
      }
      else
      {
        if (v10 >= 0)
          v27 = v10;
        else
          v27 = v10 + 1;
        v44 = v27 >> 1;
        v54 = &a2[v27 >> 1];
        if (v15 == a2)
        {
          v20 = a2;
          i = a2;
        }
        else
        {
          v48 = v27 >> 1;
          v50 = a3;
          v52 = a8;
          v21 = a2 - i;
          v20 = v15;
          do
          {
            v17 = &v20[v21 >> 1];
            v18 = v20;
            v19 = (*a4)(v54, v17);
            if (v19)
              v20 = v18;
            else
              v20 = v17 + 1;
            if (v19)
              v21 >>= 1;
            else
              v21 += ~(v21 >> 1);
          }
          while (v21);
          a8 = v52;
          v44 = v48;
          a3 = v50;
        }
        v47 = v20 - i;
        v46 = v54;
      }
      v29 = v46;
      if (v20 != a2)
      {
        v29 = v20;
        if (a2 != v46)
        {
          v30 = (uint64_t)v20;
          v31 = v20;
          v32 = a2;
          v33 = v44;
          v34 = v47;
          v35 = std::__rotate_forward[abi:sn180100]<std::_ClassicAlgPolicy,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *>(v30, v32, v46);
          v47 = v34;
          v44 = v33;
          v20 = v31;
          a7 = v53;
          v29 = v35;
        }
      }
      v36 = a5 - v47;
      v37 = v10 - v44;
      if (v47 + v44 >= v10 - (v47 + v44) + a5)
      {
        v41 = v20;
        v55 = v29;
        v42 = v47;
        v43 = v44;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v29, v46, a3, a4, v36, v37, a7, a8);
        v46 = v41;
        v40 = v43;
        v36 = v42;
        a3 = v55;
      }
      else
      {
        v38 = v15;
        v15 = v29;
        v39 = v10 - v44;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(v38, v20, v29, a4, v47, v44, a7, a8);
        v40 = v39;
      }
      a5 = v36;
      v10 = v40;
      a2 = v46;
    }
    while (v40);
  }
  return result;
}

_DWORD *std::__buffered_inplace_merge[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> const&),WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>*>(_DWORD *result, _QWORD *a2, _QWORD *a3, unsigned int (**a4)(_QWORD *, _QWORD *), uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v10;
  _DWORD **v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _DWORD **v16;
  _QWORD *v17;
  _QWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  unint64_t v32;

  v10 = a2;
  v11 = (_DWORD **)result;
  if (a5 <= a6)
  {
    if (result == (_DWORD *)a2)
      return result;
    v21 = 0;
    v13 = 0;
    do
    {
      v22 = *(_QWORD *)&result[v21 / 4];
      *(_QWORD *)&result[v21 / 4] = 0;
      a7[v21 / 8] = v22;
      ++v13;
      v21 += 8;
    }
    while (&result[v21 / 4] != (_DWORD *)a2);
    if (v21)
    {
      v23 = &a7[v21 / 8];
      v24 = (uint64_t)&a7[v21 / 8 - 1];
      v25 = a7;
      while (v10 != a3)
      {
        if ((*a4)(v10, v25))
        {
          v26 = (_DWORD *)*v10;
          *v10 = 0;
          result = *v11;
          *v11 = v26;
          if (result)
          {
            if (result[2] == 1)
              result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
            else
              --result[2];
          }
          ++v10;
        }
        else
        {
          v27 = (_DWORD *)*v25;
          *v25 = 0;
          result = *v11;
          *v11 = v27;
          if (result)
          {
            if (result[2] == 1)
              result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
            else
              --result[2];
          }
          ++v25;
        }
        ++v11;
        if (v23 == v25)
          goto LABEL_53;
      }
      v30 = 0;
      do
      {
        v31 = (_DWORD *)v25[v30];
        v25[v30] = 0;
        result = v11[v30];
        v11[v30] = v31;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
          else
            --result[2];
        }
        ++v30;
      }
      while ((_QWORD *)v24 != &v25[v30 - 1]);
    }
  }
  else
  {
    if (a2 == a3)
      return result;
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = a2[v12];
      a2[v12] = 0;
      a7[v12] = v14;
      ++v13;
      ++v12;
    }
    while (&a2[v12] != a3);
    if (v12 * 8)
    {
      v15 = &a7[v12];
      v16 = (_DWORD **)(a3 - 1);
      while (v10 != v11)
      {
        v17 = v10 - 1;
        v18 = v15 - 1;
        if ((*a4)(v15 - 1, v10 - 1))
        {
          v19 = (_DWORD *)*v17;
          *v17 = 0;
          result = *v16;
          *v16 = v19;
          if (result)
          {
            if (result[2] == 1)
              result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
            else
              --result[2];
          }
        }
        else
        {
          v20 = (_DWORD *)*v18;
          *v18 = 0;
          result = *v16;
          *v16 = v20;
          if (result)
          {
            if (result[2] == 1)
              result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
            else
              --result[2];
          }
          v17 = v10;
          --v15;
        }
        --v16;
        v10 = v17;
        if (v15 == a7)
          goto LABEL_53;
      }
      v28 = 0;
      do
      {
        v29 = (_DWORD *)v15[v28 - 1];
        v15[v28 - 1] = 0;
        result = v16[v28];
        v16[v28] = v29;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
          else
            --result[2];
        }
        --v28;
      }
      while (&v15[v28] != a7);
    }
  }
LABEL_53:
  if (a7)
  {
    v32 = 0;
    do
    {
      result = (_DWORD *)a7[v32];
      a7[v32] = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      ++v32;
    }
    while (v32 < v13);
  }
  return result;
}

_QWORD *std::__rotate_forward[abi:sn180100]<std::_ClassicAlgPolicy,WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>> *>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;

  v4 = a2;
  v5 = (_QWORD *)(a1 + 8);
  for (i = a2 + 1; ; ++i)
  {
    v7 = *(v5 - 1);
    *(v5 - 1) = 0;
    v8 = *(i - 1);
    *(i - 1) = 0;
    v9 = (_DWORD *)*(v5 - 1);
    *(v5 - 1) = v8;
    if (v9)
    {
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[2];
    }
    v10 = (_DWORD *)*(i - 1);
    *(i - 1) = v7;
    if (v10)
    {
      if (v10[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      else
        --v10[2];
    }
    if (i == a3)
      break;
    if (v5 == v4)
      v4 = i;
    ++v5;
  }
  if (v5 != v4)
  {
    v11 = v5;
    v12 = v4;
    do
    {
      while (1)
      {
        v13 = (_DWORD *)*v11;
        *v11 = 0;
        v14 = (_DWORD *)*v4;
        *v4 = 0;
        v15 = (_DWORD *)*v11;
        *v11 = v14;
        if (v15)
        {
          if (v15[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
          else
            --v15[2];
        }
        v16 = (_DWORD *)*v4;
        *v4 = v13;
        if (v16)
        {
          if (v16[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
          else
            --v16[2];
        }
        ++v11;
        if (++v4 == a3)
          break;
        if (v11 == v12)
          v12 = v4;
      }
      v4 = v12;
    }
    while (v11 != v12);
  }
  return v5;
}

uint64_t WebCore::PerformanceServerTiming::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)result = 1;
  v9 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 8) = v9;
  *(double *)(result + 16) = a4;
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 24) = v10;
  *a3 = result;
  return result;
}

unint64_t WebCore::PerformanceTiming::navigationStart(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return 0;
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(v6 + 240);
    if (!v7)
      return 0;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
    if (!v9)
      return 0;
    v11 = *(double *)(v9 + 2728);
    if (v11 == 0.0)
    {
      result = 0;
    }
    else
    {
      WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v11);
      result = (unint64_t)(*(double *)&WebCore::timePrecision
                                * floor(v10 / *(double *)&WebCore::timePrecision)
                                * 1000.0);
    }
    *((_QWORD *)this + 2) = result;
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::unloadEventStart(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;

  result = *((_QWORD *)this + 3);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return 0;
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(v6 + 240);
    if (v7
      && (v8 = *(_QWORD *)(v7 + 8)) != 0
      && (v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88)) != 0
      && (v10 = *(_QWORD *)(v9 + 1384)) != 0
      && (*(_BYTE *)(v10 + 106) & 0x40) == 0
      && *(_BYTE *)(v9 + 2776))
    {
      v12 = *(double *)(v9 + 2744);
      if (v12 == 0.0)
      {
        result = 0;
      }
      else
      {
        WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v12);
        result = (unint64_t)(*(double *)&WebCore::timePrecision
                                  * floor(v11 / *(double *)&WebCore::timePrecision)
                                  * 1000.0);
      }
      *((_QWORD *)this + 3) = result;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::unloadEventEnd(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;

  result = *((_QWORD *)this + 4);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return 0;
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(v6 + 240);
    if (v7
      && (v8 = *(_QWORD *)(v7 + 8)) != 0
      && (v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88)) != 0
      && (v10 = *(_QWORD *)(v9 + 1384)) != 0
      && (*(_BYTE *)(v10 + 106) & 0x40) == 0
      && *(_BYTE *)(v9 + 2776))
    {
      v12 = *(double *)(v9 + 2752);
      if (v12 == 0.0)
      {
        result = 0;
      }
      else
      {
        WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v12);
        result = (unint64_t)(*(double *)&WebCore::timePrecision
                                  * floor(v11 / *(double *)&WebCore::timePrecision)
                                  * 1000.0);
      }
      *((_QWORD *)this + 4) = result;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::redirectStart(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;

  result = *((_QWORD *)this + 5);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return 0;
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(v6 + 240);
    if (v7
      && (v8 = *(_QWORD *)(v7 + 8)) != 0
      && (v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88)) != 0
      && (v10 = *(_QWORD *)(v9 + 1384)) != 0
      && (*(_BYTE *)(v10 + 106) & 0x40) == 0
      && *(_WORD *)(v10 + 104))
    {
      v12 = *(double *)(v10 + 8);
      if (v12 == 0.0)
      {
        result = 0;
      }
      else
      {
        WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v12);
        result = (unint64_t)(*(double *)&WebCore::timePrecision
                                  * floor(v11 / *(double *)&WebCore::timePrecision)
                                  * 1000.0);
      }
      *((_QWORD *)this + 5) = result;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::redirectEnd(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;

  result = *((_QWORD *)this + 6);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return 0;
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(v6 + 240);
    if (v7
      && (v8 = *(_QWORD *)(v7 + 8)) != 0
      && (v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88)) != 0
      && (v10 = *(_QWORD *)(v9 + 1384)) != 0
      && (*(_BYTE *)(v10 + 106) & 0x40) == 0
      && *(_WORD *)(v10 + 104))
    {
      v12 = *(double *)(v10 + 16);
      if (v12 == 0.0)
      {
        result = 0;
      }
      else
      {
        WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v12);
        result = (unint64_t)(*(double *)&WebCore::timePrecision
                                  * floor(v11 / *(double *)&WebCore::timePrecision)
                                  * 1000.0);
      }
      *((_QWORD *)this + 6) = result;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::fetchStart(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;

  result = *((_QWORD *)this + 7);
  if (result)
    return result;
  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 72);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 178))
        {
          __break(0xC471u);
          goto LABEL_31;
        }
        v7 = *(_QWORD *)(v6 + 240);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
            if (v9)
            {
              v10 = *(_QWORD *)(v9 + 1384);
              if (v10)
              {
                v19 = *(double *)(v10 + 16);
                if (v19 == 0.0)
                {
                  *((_QWORD *)this + 7) = 0;
                }
                else
                {
                  WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v19);
                  result = (unint64_t)(*(double *)&WebCore::timePrecision
                                            * floor(v11 / *(double *)&WebCore::timePrecision)
                                            * 1000.0);
                  *((_QWORD *)this + 7) = result;
                  if (result)
                    return result;
                  v3 = *((_QWORD *)this + 1);
                  if (!v3)
                    return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  v12 = *(_QWORD *)(v3 + 8);
  if (!v12)
    return 0;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
    return 0;
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14)
    return 0;
  if (*(_BYTE *)(v14 + 178))
  {
    __break(0xC471u);
LABEL_31:
    JUMPOUT(0x19603F28CLL);
  }
  v15 = *(_QWORD *)(v14 + 240);
  if (!v15)
    return 0;
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
    return 0;
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 280) + 88);
  if (!v17)
    return 0;
  v19 = *(double *)(v17 + 2728);
  if (v19 == 0.0)
  {
    result = 0;
  }
  else
  {
    WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v19);
    result = (unint64_t)(*(double *)&WebCore::timePrecision
                              * floor(v18 / *(double *)&WebCore::timePrecision)
                              * 1000.0);
  }
  *((_QWORD *)this + 7) = result;
  return result;
}

unint64_t WebCore::PerformanceTiming::domainLookupStart(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return WebCore::PerformanceTiming::fetchStart(this);
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return WebCore::PerformanceTiming::fetchStart(this);
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return WebCore::PerformanceTiming::fetchStart(this);
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return WebCore::PerformanceTiming::fetchStart(this);
    if (!*(_BYTE *)(v6 + 178))
    {
      v7 = *(_QWORD *)(v6 + 240);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 1384);
            if (v10)
            {
              if (*(double *)(v10 + 24) != 0.0)
              {
                v12 = *(_QWORD *)(v10 + 24);
                WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v12);
                result = (unint64_t)(*(double *)&WebCore::timePrecision
                                          * floor(v11 / *(double *)&WebCore::timePrecision)
                                          * 1000.0);
                *((_QWORD *)this + 8) = result;
                return result;
              }
            }
          }
        }
      }
      return WebCore::PerformanceTiming::fetchStart(this);
    }
    result = 105;
    __break(0xC471u);
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::domainLookupEnd(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;

  result = *((_QWORD *)this + 9);
  if (result)
    return result;
  v3 = *((_QWORD *)this + 1);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    result = *((_QWORD *)this + 8);
    if (result)
      return result;
    return WebCore::PerformanceTiming::fetchStart(this);
  }
  v5 = *(_QWORD *)(v4 + 72);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x19603F500);
      }
      v7 = *(_QWORD *)(v6 + 240);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 1384);
            if (v10)
            {
              if (*(double *)(v10 + 32) != 0.0)
              {
                v19 = *(_QWORD *)(v10 + 32);
                WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v19);
                result = (unint64_t)(*(double *)&WebCore::timePrecision
                                          * floor(v11 / *(double *)&WebCore::timePrecision)
                                          * 1000.0);
                *((_QWORD *)this + 9) = result;
                return result;
              }
            }
          }
        }
      }
    }
  }
  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v12 = *(_QWORD *)(v4 + 72);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        if (*(_BYTE *)(v13 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19603F520);
        }
        v14 = *(_QWORD *)(v13 + 240);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v15 + 280) + 88);
            if (v16)
            {
              v17 = *(_QWORD *)(v16 + 1384);
              if (v17)
              {
                if (*(double *)(v17 + 24) != 0.0)
                {
                  v19 = *(_QWORD *)(v17 + 24);
                  WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v19);
                  result = (unint64_t)(*(double *)&WebCore::timePrecision
                                            * floor(v18 / *(double *)&WebCore::timePrecision)
                                            * 1000.0);
                  *((_QWORD *)this + 8) = result;
                  return result;
                }
              }
            }
          }
        }
      }
    }
    return WebCore::PerformanceTiming::fetchStart(this);
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::connectStart(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;

  result = *((_QWORD *)this + 10);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return WebCore::PerformanceTiming::domainLookupEnd(this);
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return WebCore::PerformanceTiming::domainLookupEnd(this);
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return WebCore::PerformanceTiming::domainLookupEnd(this);
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return WebCore::PerformanceTiming::domainLookupEnd(this);
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)(v6 + 240);
      if (!v7)
        return WebCore::PerformanceTiming::domainLookupEnd(this);
      v8 = *(_QWORD *)(v7 + 8);
      if (!v8)
        return WebCore::PerformanceTiming::domainLookupEnd(this);
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
      if (!v9)
        return WebCore::PerformanceTiming::domainLookupEnd(this);
      v10 = *(_QWORD *)(v9 + 1384);
      if (!v10)
        return WebCore::PerformanceTiming::domainLookupEnd(this);
      v11 = *(double *)(v10 + 40);
      if (v11 == 0.0 || *(double *)(v10 + 32) > v11)
        return WebCore::PerformanceTiming::domainLookupEnd(this);
      v13 = *(_QWORD *)(v10 + 40);
      WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v13);
      result = (unint64_t)(*(double *)&WebCore::timePrecision
                                * floor(v12 / *(double *)&WebCore::timePrecision)
                                * 1000.0);
      *((_QWORD *)this + 10) = result;
    }
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::connectEnd(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;

  result = *((_QWORD *)this + 11);
  if (result)
    return result;
  v3 = *((_QWORD *)this + 1);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    result = *((_QWORD *)this + 10);
    if (result)
      return result;
    return WebCore::PerformanceTiming::domainLookupEnd(this);
  }
  v5 = *(_QWORD *)(v4 + 72);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x19603F7BCLL);
      }
      v7 = *(_QWORD *)(v6 + 240);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 1384);
            if (v10)
            {
              if (*(double *)(v10 + 56) != 0.0)
              {
                v20 = *(_QWORD *)(v10 + 56);
                WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v20);
                result = (unint64_t)(*(double *)&WebCore::timePrecision
                                          * floor(v11 / *(double *)&WebCore::timePrecision)
                                          * 1000.0);
                *((_QWORD *)this + 11) = result;
                return result;
              }
            }
          }
        }
      }
    }
  }
  result = *((_QWORD *)this + 10);
  if (!result)
  {
    v12 = *(_QWORD *)(v4 + 72);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        if (*(_BYTE *)(v13 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19603F7DCLL);
        }
        v14 = *(_QWORD *)(v13 + 240);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v15 + 280) + 88);
            if (v16)
            {
              v17 = *(_QWORD *)(v16 + 1384);
              if (v17)
              {
                v18 = *(double *)(v17 + 40);
                if (v18 != 0.0 && *(double *)(v17 + 32) <= v18)
                {
                  v20 = *(_QWORD *)(v17 + 40);
                  WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v20);
                  result = (unint64_t)(*(double *)&WebCore::timePrecision
                                            * floor(v19 / *(double *)&WebCore::timePrecision)
                                            * 1000.0);
                  *((_QWORD *)this + 10) = result;
                  return result;
                }
              }
            }
          }
        }
      }
    }
    return WebCore::PerformanceTiming::domainLookupEnd(this);
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::secureConnectionStart(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v13;
  uint64_t v14;

  result = *((_QWORD *)this + 12);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return WebCore::PerformanceTiming::connectEnd(this);
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return WebCore::PerformanceTiming::connectEnd(this);
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return WebCore::PerformanceTiming::connectEnd(this);
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return WebCore::PerformanceTiming::connectEnd(this);
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(v6 + 240);
    if (!v7)
      return WebCore::PerformanceTiming::connectEnd(this);
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      return WebCore::PerformanceTiming::connectEnd(this);
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
    if (!v9)
      return WebCore::PerformanceTiming::connectEnd(this);
    v10 = *(_QWORD *)(v9 + 1384);
    if (!v10)
      return WebCore::PerformanceTiming::connectEnd(this);
    v11 = *(double *)(v10 + 48);
    if (v11 == 0.0 || v11 == -1.0)
    {
      return 0;
    }
    else
    {
      v14 = *(_QWORD *)(v10 + 48);
      WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v14);
      result = (unint64_t)(*(double *)&WebCore::timePrecision
                                * floor(v13 / *(double *)&WebCore::timePrecision)
                                * 1000.0);
      *((_QWORD *)this + 12) = result;
    }
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::requestStart(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;

  result = *((_QWORD *)this + 13);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return WebCore::PerformanceTiming::connectEnd(this);
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return WebCore::PerformanceTiming::connectEnd(this);
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return WebCore::PerformanceTiming::connectEnd(this);
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return WebCore::PerformanceTiming::connectEnd(this);
    if (!*(_BYTE *)(v6 + 178))
    {
      v7 = *(_QWORD *)(v6 + 240);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 1384);
            if (v10)
            {
              if (*(double *)(v10 + 64) != 0.0)
              {
                v12 = *(_QWORD *)(v10 + 64);
                WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v12);
                result = (unint64_t)(*(double *)&WebCore::timePrecision
                                          * floor(v11 / *(double *)&WebCore::timePrecision)
                                          * 1000.0);
                *((_QWORD *)this + 13) = result;
                return result;
              }
            }
          }
        }
      }
      return WebCore::PerformanceTiming::connectEnd(this);
    }
    result = 105;
    __break(0xC471u);
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::responseStart(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;

  result = *((_QWORD *)this + 14);
  if (result)
    return result;
  v3 = *((_QWORD *)this + 1);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    result = *((_QWORD *)this + 13);
    if (result)
      return result;
    return WebCore::PerformanceTiming::connectEnd(this);
  }
  v5 = *(_QWORD *)(v4 + 72);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x19603FB3CLL);
      }
      v7 = *(_QWORD *)(v6 + 240);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 1384);
            if (v10)
            {
              if (*(double *)(v10 + 72) != 0.0)
              {
                v19 = *(_QWORD *)(v10 + 72);
                WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v19);
                result = (unint64_t)(*(double *)&WebCore::timePrecision
                                          * floor(v11 / *(double *)&WebCore::timePrecision)
                                          * 1000.0);
                *((_QWORD *)this + 14) = result;
                return result;
              }
            }
          }
        }
      }
    }
  }
  result = *((_QWORD *)this + 13);
  if (!result)
  {
    v12 = *(_QWORD *)(v4 + 72);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        if (*(_BYTE *)(v13 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19603FB5CLL);
        }
        v14 = *(_QWORD *)(v13 + 240);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v15 + 280) + 88);
            if (v16)
            {
              v17 = *(_QWORD *)(v16 + 1384);
              if (v17)
              {
                if (*(double *)(v17 + 64) != 0.0)
                {
                  v19 = *(_QWORD *)(v17 + 64);
                  WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v19);
                  result = (unint64_t)(*(double *)&WebCore::timePrecision
                                            * floor(v18 / *(double *)&WebCore::timePrecision)
                                            * 1000.0);
                  *((_QWORD *)this + 13) = result;
                  return result;
                }
              }
            }
          }
        }
      }
    }
    return WebCore::PerformanceTiming::connectEnd(this);
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::responseEnd(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;

  result = *((_QWORD *)this + 15);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return WebCore::PerformanceTiming::responseStart(this);
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return WebCore::PerformanceTiming::responseStart(this);
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return WebCore::PerformanceTiming::responseStart(this);
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return WebCore::PerformanceTiming::responseStart(this);
    if (!*(_BYTE *)(v6 + 178))
    {
      v7 = *(_QWORD *)(v6 + 240);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 1384);
            if (v10)
            {
              if (*(double *)(v10 + 80) != 0.0)
              {
                v12 = *(_QWORD *)(v10 + 80);
                WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v12);
                result = (unint64_t)(*(double *)&WebCore::timePrecision
                                          * floor(v11 / *(double *)&WebCore::timePrecision)
                                          * 1000.0);
                *((_QWORD *)this + 15) = result;
                return result;
              }
            }
          }
        }
      }
      return WebCore::PerformanceTiming::responseStart(this);
    }
    result = 105;
    __break(0xC471u);
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::domLoading(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;

  result = *((_QWORD *)this + 16);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return WebCore::PerformanceTiming::fetchStart(this);
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return WebCore::PerformanceTiming::fetchStart(this);
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return WebCore::PerformanceTiming::fetchStart(this);
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return WebCore::PerformanceTiming::fetchStart(this);
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(v6 + 240);
    if (!v7)
      return WebCore::PerformanceTiming::fetchStart(this);
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      return WebCore::PerformanceTiming::fetchStart(this);
    v9 = *(_QWORD *)(v8 + 296);
    if (!v9)
      return WebCore::PerformanceTiming::fetchStart(this);
    v11 = *(double *)(v9 + 2248);
    if (v11 == 0.0)
    {
      result = 0;
    }
    else
    {
      WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v11);
      result = (unint64_t)(*(double *)&WebCore::timePrecision
                                * floor(v10 / *(double *)&WebCore::timePrecision)
                                * 1000.0);
    }
    *((_QWORD *)this + 16) = result;
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::domInteractive(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;

  result = *((_QWORD *)this + 17);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return 0;
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(v6 + 240);
    if (!v7)
      return 0;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(v8 + 296);
    if (!v9)
      return 0;
    v11 = *(double *)(v9 + 2256);
    if (v11 == 0.0)
    {
      result = 0;
    }
    else
    {
      WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v11);
      result = (unint64_t)(*(double *)&WebCore::timePrecision
                                * floor(v10 / *(double *)&WebCore::timePrecision)
                                * 1000.0);
    }
    *((_QWORD *)this + 17) = result;
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::domContentLoadedEventStart(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;

  result = *((_QWORD *)this + 18);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return 0;
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(v6 + 240);
    if (!v7)
      return 0;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(v8 + 296);
    if (!v9)
      return 0;
    v11 = *(double *)(v9 + 2264);
    if (v11 == 0.0)
    {
      result = 0;
    }
    else
    {
      WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v11);
      result = (unint64_t)(*(double *)&WebCore::timePrecision
                                * floor(v10 / *(double *)&WebCore::timePrecision)
                                * 1000.0);
    }
    *((_QWORD *)this + 18) = result;
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::domContentLoadedEventEnd(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;

  result = *((_QWORD *)this + 19);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return 0;
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(v6 + 240);
    if (!v7)
      return 0;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(v8 + 296);
    if (!v9)
      return 0;
    v11 = *(double *)(v9 + 2272);
    if (v11 == 0.0)
    {
      result = 0;
    }
    else
    {
      WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v11);
      result = (unint64_t)(*(double *)&WebCore::timePrecision
                                * floor(v10 / *(double *)&WebCore::timePrecision)
                                * 1000.0);
    }
    *((_QWORD *)this + 19) = result;
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::domComplete(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;

  result = *((_QWORD *)this + 20);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return 0;
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(v6 + 240);
    if (!v7)
      return 0;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(v8 + 296);
    if (!v9)
      return 0;
    v11 = *(double *)(v9 + 2280);
    if (v11 == 0.0)
    {
      result = 0;
    }
    else
    {
      WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v11);
      result = (unint64_t)(*(double *)&WebCore::timePrecision
                                * floor(v10 / *(double *)&WebCore::timePrecision)
                                * 1000.0);
    }
    *((_QWORD *)this + 20) = result;
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::loadEventStart(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;

  result = *((_QWORD *)this + 21);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return 0;
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(v6 + 240);
    if (!v7)
      return 0;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
    if (!v9)
      return 0;
    v11 = *(double *)(v9 + 2760);
    if (v11 == 0.0)
    {
      result = 0;
    }
    else
    {
      WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v11);
      result = (unint64_t)(*(double *)&WebCore::timePrecision
                                * floor(v10 / *(double *)&WebCore::timePrecision)
                                * 1000.0);
    }
    *((_QWORD *)this + 21) = result;
  }
  return result;
}

unint64_t WebCore::PerformanceTiming::loadEventEnd(WebCore::PerformanceTiming *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;

  result = *((_QWORD *)this + 22);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return 0;
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(v6 + 240);
    if (!v7)
      return 0;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
    if (!v9)
      return 0;
    v11 = *(double *)(v9 + 2768);
    if (v11 == 0.0)
    {
      result = 0;
    }
    else
    {
      WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v11);
      result = (unint64_t)(*(double *)&WebCore::timePrecision
                                * floor(v10 / *(double *)&WebCore::timePrecision)
                                * 1000.0);
    }
    *((_QWORD *)this + 22) = result;
  }
  return result;
}

uint64_t WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,unsigned long long (WebCore::PerformanceTiming::*)(void)const> [21]>::contains<WTF::String>(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  char **v3;
  unint64_t v4;
  char **v5;
  int v6;
  uint64_t result;

  if (a1)
  {
    v1 = *(unsigned __int8 **)(a1 + 8);
    v2 = *(unsigned int *)(a1 + 4) | ((unint64_t)((*(_DWORD *)(a1 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v1 = 0;
    v2 = 0x100000000;
  }
  v3 = &WebCore::restrictedMarkMappings;
  v4 = 21;
  do
  {
    v5 = &v3[4 * (v4 >> 1)];
    v6 = WTF::codePointCompare();
    if (v6 >= 0)
      v4 >>= 1;
    else
      v4 += ~(v4 >> 1);
    if (v6 < 0)
      v3 = v5 + 4;
  }
  while (v4);
  if (v3 == (char **)off_1E3401D80)
    return 0;
  result = WTF::operator==(v1, v2, (unsigned __int8 *)*v3, (uint64_t)v3[1]);
  if ((_DWORD)result)
    return 1;
  return result;
}

unsigned int *WebCore::PerformanceUserTiming::mark@<X0>(uint64_t *a1@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WebCore::ScriptExecutionContext *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  WebCore::Performance *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  WebCore::Frame *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  const WTF::StringImpl *v28;
  unsigned int *result;
  void *v30;
  int v31;
  uint64_t v32;
  const WTF::StringImpl *v33;
  const WTF::StringImpl *v34;
  uint64_t v35;
  const WTF::StringImpl *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;

  v10 = *(_QWORD *)(*a1 + 8);
  if (v10)
    v11 = (WebCore::Performance *)(v10 - 24);
  else
    v11 = 0;
  v12 = *((_QWORD *)v11 + 1);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      v14 = v13 - 96;
    else
      v14 = 0;
  }
  else
  {
    v14 = 0;
  }
  v15 = *(unsigned __int8 *)(v14 + 274);
  if (*(_BYTE *)(v14 + 274))
  {
    if (v15 == 1 || v15 == 2)
      ++*(_DWORD *)(v14 + 312);
  }
  else
  {
    *(_DWORD *)(v14 - 168) += 2;
  }
  v16 = 0;
  if (*(_BYTE *)(a4 + 24))
  {
    v17 = 0;
    if (*(_BYTE *)(a4 + 16))
    {
      v16 = WebCore::Performance::monotonicTimeFromRelativeTime(v11, *(double *)(a4 + 8));
      v15 = *(unsigned __int8 *)(v14 + 274);
      v17 = 1;
    }
  }
  else
  {
    v17 = 0;
  }
  if (v15)
  {
    if ((v15 - 1) < 2)
      ++*(_DWORD *)(v14 + 312);
    WebCore::ScriptExecutionContext::deref((_DWORD *)v14);
    WebCore::InspectorInstrumentation::performanceMark((WebCore::InspectorInstrumentation *)v14, a3, v16, v17);
    v22 = 0;
  }
  else
  {
    *(_DWORD *)(v14 - 168) += 2;
    v18 = *(_QWORD *)(v14 + 336);
    if (v18)
    {
      v19 = *(WebCore::Frame **)(v18 + 8);
      if (v19)
      {
        v20 = (unsigned int *)((char *)v19 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
      }
    }
    else
    {
      v19 = 0;
    }
    v22 = v14 - 192;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v32 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v14, a2);
      if (v32)
        WebCore::InspectorInstrumentation::performanceMarkImpl(v32, a3, v16, v17, v19);
    }
    if (v19)
    {
      v24 = (unsigned int *)((char *)v19 + 8);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        v33 = (const WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v33 = off_1E31FE290;
        *((_QWORD *)v33 + 1) = v24;
        v36 = v33;
        WTF::ensureOnMainThread();
        v34 = v36;
        v36 = 0;
        if (v34)
          (*(void (**)(const WTF::StringImpl *))(*(_QWORD *)v34 + 8))(v34);
      }
    }
  }
  WebCore::PerformanceMark::create(a2, (WebCore *)v14, a3, a4, (uint64_t)&v36);
  v27 = v38;
  if (!v38)
  {
    WebCore::addPerformanceEntry(a1 + 1, (WTF::StringImpl **)a3, v36);
    if (!v38)
    {
      v28 = v36;
      v36 = 0;
      *(_QWORD *)a5 = v28;
      goto LABEL_27;
    }
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  }
  if (v38 != 1)
    goto LABEL_54;
  v35 = v37;
  v37 = 0;
  *(_BYTE *)a5 = (_BYTE)v36;
  *(_QWORD *)(a5 + 8) = v35;
LABEL_27:
  *(_DWORD *)(a5 + 16) = v27;
  result = (unsigned int *)((uint64_t (*)(char *, const WTF::StringImpl **))off_1E3401D80[v27])(&v39, &v36);
  if (v22)
  {
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v22, v30);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
  }
  v31 = *(unsigned __int8 *)(v14 + 274);
  if (!*(_BYTE *)(v14 + 274))
  {
    if (*(_DWORD *)(v14 - 168) == 2)
    {
      if ((*(_WORD *)(v14 - 162) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)(v14 - 192), v30);
    }
    else
    {
      *(_DWORD *)(v14 - 168) -= 2;
    }
    return result;
  }
  if (v31 == 1)
  {
    if (*(_DWORD *)(v14 + 312) != 1)
    {
      --*(_DWORD *)(v14 + 312);
      return result;
    }
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  }
  if (v31 == 2)
    return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v14 + 312));
  return result;
}

WebCore::InspectorInstrumentation *WebCore::InspectorInstrumentation::performanceMark(WebCore::InspectorInstrumentation *result, WebCore::ScriptExecutionContext *a2, uint64_t a3, char a4)
{
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, a2);
    if (result)
      return (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::performanceMarkImpl((uint64_t)result, a2, a3, a4, 0);
  }
  return result;
}

uint64_t WebCore::addPerformanceEntry(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  int i;
  unsigned int v12;
  _QWORD *v13;
  WTF *v14;
  uint64_t result;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  const WTF::StringImpl **v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_DWORD *)*a2 + 4);
  if (v8 < 0x100)
    v9 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v9 = v8 >> 8;
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = (_QWORD *)(v6 + 24 * (v9 & v7));
    v14 = (WTF *)*v13;
    if (*v13 == -1)
    {
      v10 = (_QWORD *)(v6 + 24 * v12);
      goto LABEL_12;
    }
    if (!v14)
      break;
    result = WTF::equal(v14, *a2, a3);
    if ((result & 1) != 0)
      goto LABEL_29;
LABEL_12:
    v9 = i + v12;
  }
  if (v10)
  {
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    --*(_DWORD *)(*a1 - 16);
    v13 = v10;
  }
  v16 = *a2;
  if (*a2)
    *(_DWORD *)v16 += 2;
  *v13 = v16;
  v17 = v13 + 1;
  v18 = *((unsigned int *)v13 + 5);
  if ((_DWORD)v18)
  {
    v34 = (_DWORD **)*v17;
    v35 = 8 * v18;
    do
    {
      v36 = *v34;
      *v34 = 0;
      if (v36)
      {
        if (v36[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
        else
          --v36[2];
      }
      ++v34;
      v35 -= 8;
    }
    while (v35);
  }
  result = *v17;
  if (*v17)
  {
    v13[1] = 0;
    *((_DWORD *)v13 + 4) = 0;
    result = WTF::fastFree((WTF *)result, a2);
  }
  *v17 = 0;
  v13[2] = 0;
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *a1;
  if (*a1)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_43;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
      goto LABEL_28;
    }
LABEL_43:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_28:
    result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v25, (WTF::StringImpl **)v13);
    v13 = (_QWORD *)result;
  }
LABEL_29:
  v26 = *((unsigned int *)v13 + 5);
  if ((_DWORD)v26 != *((_DWORD *)v13 + 4))
  {
    v27 = (const WTF::StringImpl **)(v13[1] + 8 * v26);
    goto LABEL_31;
  }
  v28 = v26 + (v26 >> 2);
  if (v28 >= 0x10)
    v29 = v28 + 1;
  else
    v29 = 16;
  if (v29 <= v26 + 1)
    v30 = v26 + 1;
  else
    v30 = v29;
  if (v30 >> 29)
  {
    __break(0xC471u);
  }
  else
  {
    v31 = (void *)v13[1];
    v32 = (void *)WTF::fastMalloc((WTF *)(8 * v30));
    *((_DWORD *)v13 + 4) = v30;
    v13[1] = v32;
    result = (uint64_t)memcpy(v32, v31, 8 * v26);
    if (v31)
    {
      if ((void *)v13[1] == v31)
      {
        v13[1] = 0;
        *((_DWORD *)v13 + 4) = 0;
      }
      result = WTF::fastFree((WTF *)v31, v33);
    }
    v26 = *((unsigned int *)v13 + 5);
    v27 = (const WTF::StringImpl **)(v13[1] + 8 * v26);
LABEL_31:
    ++*((_DWORD *)a3 + 2);
    *v27 = a3;
    *((_DWORD *)v13 + 5) = v26 + 1;
  }
  return result;
}

WTF::StringImpl *WebCore::clearPerformanceEntries(uint64_t *a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *result;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  int v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  unsigned int v14;

  result = *a2;
  v5 = *a1;
  if (*a2)
  {
    if (v5)
    {
      v7 = *(_DWORD *)(v5 - 8);
      v8 = *((_DWORD *)result + 4);
      if (v8 < 0x100)
        v9 = WTF::StringImpl::hashSlowCase(result);
      else
        v9 = v8 >> 8;
      for (i = 0; ; v9 = i + v11)
      {
        v11 = v9 & v7;
        v12 = (WTF::StringImpl **)(v5 + 24 * (v9 & v7));
        result = *v12;
        if (!*v12)
        {
          v13 = (WTF::StringImpl **)*a1;
          if (!*a1)
            return result;
          v14 = *((_DWORD *)v13 - 1);
          v12 = &v13[3 * v14];
          goto LABEL_12;
        }
        if (result != (WTF::StringImpl *)-1)
        {
          result = (WTF::StringImpl *)WTF::equal(result, *a2, a3);
          if ((result & 1) != 0)
            break;
        }
        ++i;
      }
      v13 = (WTF::StringImpl **)*a1;
      if (!*a1)
        goto LABEL_14;
      v14 = *((_DWORD *)v13 - 1);
LABEL_12:
      v13 += 3 * v14;
      if (v13 == v12)
        return result;
LABEL_14:
      if (v13 != v12)
        return (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(a1, v12);
    }
  }
  else if (v5)
  {
    *a1 = 0;
    return (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  return result;
}

void WebCore::PerformanceUserTiming::convertMarkToTimestamp(WebCore::PerformanceUserTiming *this, const WTF::String *a2, WTF::StringImpl **a3)
{
  char isMainThread;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  char **v10;
  unint64_t v11;
  char **v12;
  int v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int i;
  int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  unint64_t (*v28)(WebCore::PerformanceTiming *);
  uint64_t v29;
  BOOL v30;
  int v31;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  WebCore::Performance *v39;
  WebCore::PerformanceTiming *v40;
  unint64_t v41;
  WebCore::PerformanceTiming *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;

  isMainThread = WTF::isMainThread(this);
  v7 = (uint64_t)*a3;
  if ((isMainThread & 1) == 0)
  {
    if (!WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,unsigned long long (WebCore::PerformanceTiming::*)(void)const> [21]>::contains<WTF::String>(v7))
      goto LABEL_13;
    v37 = 33;
    goto LABEL_51;
  }
  if (v7)
  {
    v8 = *(unsigned __int8 **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  v10 = &WebCore::restrictedMarkMappings;
  v11 = 21;
  do
  {
    v12 = &v10[4 * (v11 >> 1)];
    v13 = WTF::codePointCompare();
    if (v13 >= 0)
      v11 >>= 1;
    else
      v11 += ~(v11 >> 1);
    if (v13 < 0)
      v10 = v12 + 4;
  }
  while (v11);
  if (v10 != (char **)off_1E3401D80 && WTF::operator==(v8, v9, (unsigned __int8 *)*v10, (uint64_t)v10[1]))
  {
    v28 = (unint64_t (*)(WebCore::PerformanceTiming *))v10[2];
    v29 = (uint64_t)v10[3];
    if (v29)
      v30 = ((unint64_t)v10[3] & 1 | (unint64_t)v28) == 0;
    else
      v30 = 1;
    v31 = v30;
    if (v28 == WebCore::PerformanceTiming::navigationStart && v31 != 0)
    {
      *(_QWORD *)this = 0;
LABEL_27:
      *((_DWORD *)this + 4) = 0;
      return;
    }
    v38 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v38)
      v39 = (WebCore::Performance *)(v38 - 24);
    else
      v39 = 0;
    v40 = (WebCore::PerformanceTiming *)WebCore::Performance::timing(v39);
    v41 = WebCore::PerformanceTiming::navigationStart(v40);
    v42 = (WebCore::PerformanceTiming *)((char *)v40 + (v29 >> 1));
    if ((v29 & 1) != 0)
      v28 = *(unint64_t (**)(WebCore::PerformanceTiming *))(*(_QWORD *)v42 + v28);
    v43 = v28(v42);
    if (v43)
    {
      v27 = (double)(v43 - v41);
LABEL_26:
      *(double *)this = v27;
      goto LABEL_27;
    }
    v37 = 12;
LABEL_51:
    *(_BYTE *)this = v37;
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 1;
    return;
  }
LABEL_13:
  v15 = *((_QWORD *)a2 + 1);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = *((_DWORD *)*a3 + 4);
    if (v17 < 0x100)
      v18 = WTF::StringImpl::hashSlowCase(*a3);
    else
      v18 = v17 >> 8;
    for (i = 0; ; v18 = i + v20)
    {
      v20 = v18 & v16;
      v21 = v15 + 24 * (v18 & v16);
      v22 = *(WTF **)v21;
      if (!*(_QWORD *)v21)
      {
        v23 = *((_QWORD *)a2 + 1);
        if (!v23)
          goto LABEL_44;
        v24 = *(_DWORD *)(v23 - 4);
        v21 = v23 + 24 * v24;
        goto LABEL_23;
      }
      if (v22 != (WTF *)-1 && (WTF::equal(v22, *a3, v14) & 1) != 0)
        break;
      ++i;
    }
    v23 = *((_QWORD *)a2 + 1);
    if (!v23)
      goto LABEL_24;
    v24 = *(_DWORD *)(v23 - 4);
LABEL_23:
    if (v21 == v23 + 24 * v24)
      goto LABEL_44;
LABEL_24:
    v25 = *(unsigned int *)(v21 + 20);
    if ((_DWORD)v25)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8 * v25 - 8);
      v27 = (*(double (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
      goto LABEL_26;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_44:
    v33 = *a3;
    if (*a3)
      *(_DWORD *)v33 += 2;
    v44 = v33;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"No mark named '", 16, (uint64_t *)&v44, (int8x16_t *)"' exists", 9, &v45);
    v35 = v44;
    v36 = v45;
    *(_BYTE *)this = 9;
    *((_QWORD *)this + 1) = v36;
    *((_DWORD *)this + 4) = 1;
    v44 = 0;
    v45 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v34);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
}

void WebCore::PerformanceUserTiming::measure(WebCore::PerformanceUserTiming *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X2>, WTF::StringImpl **a4@<X3>, uint64_t a5@<X8>)
{
  int v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char **v20;
  uint64_t *v21;
  _QWORD v22[2];
  int v23;

  if (*a4)
  {
    WebCore::PerformanceUserTiming::convertMarkToTimestamp((WebCore::PerformanceUserTiming *)v22, this, a4);
    v9 = v23;
    if (v23)
      goto LABEL_14;
    v10 = *(double *)v22;
  }
  else
  {
    v16 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (v16)
      v17 = v16 - 24;
    else
      v17 = 0;
    WTF::MonotonicTime::now(this);
    v10 = *(double *)&WebCore::timePrecision
        * floor((v18 - *(double *)(v17 + 168)) / *(double *)&WebCore::timePrecision)
        * 1000.0;
  }
  if (!*a3)
  {
    v11 = 0.0;
    goto LABEL_7;
  }
  WebCore::PerformanceUserTiming::convertMarkToTimestamp((WebCore::PerformanceUserTiming *)v22, this, a3);
  v9 = v23;
  if (v23)
  {
LABEL_14:
    if (v9 == 1)
    {
      v19 = v22[1];
      *(_BYTE *)a5 = v22[0];
      *(_QWORD *)(a5 + 8) = v19;
      *(_DWORD *)(a5 + 16) = 1;
    }
    else
    {
      v20 = (char **)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::convertToEntrySequence(v20, v21);
    }
    return;
  }
  v11 = *(double *)v22;
LABEL_7:
  v12 = WTF::fastMalloc((WTF *)0x100);
  *(_DWORD *)v12 = 1;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 184) = 0u;
  *(_OWORD *)(v12 + 200) = 0u;
  *(_OWORD *)(v12 + 216) = 0u;
  *(_OWORD *)(v12 + 232) = 0u;
  *(_QWORD *)(v12 + 248) = 0;
  *(_QWORD *)(v12 + 248) = WebCore::SerializedScriptValue::computeMemoryCost((WebCore::SerializedScriptValue *)v12);
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = v13;
  *(_DWORD *)(v13 + 8) = 1;
  v15 = *a2;
  if (*a2)
    *(_DWORD *)v15 += 2;
  *(_QWORD *)(v13 + 16) = v15;
  *(double *)(v13 + 24) = v11;
  *(double *)(v13 + 32) = v10 - v11;
  *(_QWORD *)v13 = off_1E34019A0;
  *(_QWORD *)(v13 + 40) = v12;
  WebCore::addPerformanceEntry((uint64_t *)this + 2, a2, (const WTF::StringImpl *)v13);
  *(_QWORD *)a5 = v14;
  *(_DWORD *)(a5 + 16) = 0;
}

char **WebCore::convertToEntrySequence(char **result, uint64_t *a2)
{
  char **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v2 = result;
  *result = 0;
  result[1] = 0;
  v3 = *a2;
  if (!*a2)
  {
    v6 = 0;
    LODWORD(v4) = 0;
    goto LABEL_9;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = v3 + 24 * v4;
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = v3 + 24 * v4;
LABEL_9:
    v5 = v3 + 24 * v4;
    goto LABEL_10;
  }
  v6 = *a2;
  if ((_DWORD)v4)
  {
    v7 = 24 * v4;
    v6 = *a2;
    while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
    {
      v6 += 24;
      v7 -= 24;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_10:
  if (v3)
    v8 = v3 + 24 * *(unsigned int *)(v3 - 4);
  else
    v8 = 0;
  if (v8 != v6)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v25 = v8;
    do
    {
      v12 = *(unsigned int *)(v6 + 20);
      if ((_DWORD)v12)
      {
        v13 = *(uint64_t **)(v6 + 8);
        v14 = v12 + v11;
        v15 = 8 * v11;
        if (v12 + v11 > v10)
        {
          v16 = v10 + (v10 >> 2);
          if (v16 >= 0x10)
            v17 = v16 + 1;
          else
            v17 = 16;
          if (v17 <= v14)
            v18 = v14;
          else
            v18 = v17;
          if (v18 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v19 = (char *)WTF::fastMalloc((WTF *)(8 * v18));
          *((_DWORD *)v2 + 2) = v18;
          *v2 = v19;
          result = (char **)memcpy(v19, v9, v15);
          if (v9)
          {
            v24 = v19 == v9;
            v10 = v18;
            if (v24)
            {
              v10 = 0;
              *v2 = 0;
              *((_DWORD *)v2 + 2) = 0;
            }
            result = (char **)WTF::fastFree((WTF *)v9, v20);
            v9 = *v2;
            v8 = v25;
          }
          else
          {
            v9 = v19;
            v8 = v25;
            v10 = v18;
          }
        }
        v21 = 8 * v12;
        do
        {
          v22 = *v13++;
          ++*(_DWORD *)(v22 + 8);
          *(_QWORD *)&v9[v15] = v22;
          v15 += 8;
          v21 -= 8;
        }
        while (v21);
        v11 = v14;
        *((_DWORD *)v2 + 3) = v14;
      }
      v23 = v6 + 24;
      v6 = v5;
      if (v23 != v5)
      {
        v6 = v23;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 24;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v8);
  }
  return result;
}

WTF *WebCore::PerformanceUserTiming::getMarks@<X0>(WebCore::PerformanceUserTiming *this@<X0>, WTF::StringImpl **a2@<X1>, WTF *a3@<X8>)
{
  return WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get(a3, *((_QWORD *)this + 1), a2);
}

WTF *WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get(WTF *result, uint64_t a2, WTF::StringImpl **a3)
{
  WTF *v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  unsigned int v10;

  v3 = result;
  if (a2)
  {
    v6 = *(_DWORD *)(a2 - 8);
    v7 = *((_DWORD *)*a3 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(*a3);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      result = *(WTF **)(a2 + 24 * (v8 & v6));
      if (!result)
        break;
      if (result != (WTF *)-1 && (WTF::equal(result, *a3, (const WTF::StringImpl *)a3) & 1) != 0)
        return (WTF *)WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v3, a2 + 24 * v10 + 8);
      ++i;
    }
  }
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  return result;
}

WTF *WebCore::PerformanceUserTiming::getMeasures@<X0>(WebCore::PerformanceUserTiming *this@<X0>, WTF::StringImpl **a2@<X1>, WTF *a3@<X8>)
{
  return WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get(a3, *((_QWORD *)this + 2), a2);
}

uint64_t WebCore::PointerCaptureController::pointerCaptureElement(WebCore::PointerCaptureController *this, WebCore::Document *a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return 0;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = ~((unint64_t)a3 << 32) + a3;
  v6 = 9 * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v3 + 16 * v8);
  if (v9 != a3)
  {
    v10 = 1;
    while (v9 != 0x8000000000000000)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v10;
      if (v9 == a3)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
  if (!v11)
    return 0;
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 24);
    *(_DWORD *)(v12 + 24) = v13 + 2;
    if (*(WebCore::Document **)(*(_QWORD *)(v12 + 40) + 8) != a2)
    {
      if (v13)
      {
        *(_DWORD *)(v12 + 24) = v13;
      }
      else if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
      }
      return 0;
    }
    if (v13)
    {
      *(_DWORD *)(v12 + 24) = v13;
    }
    else if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
    }
  }
  return v12;
}

WebCore::PointerCaptureController::CapturingData *WebCore::PointerCaptureController::setPointerCapture@<X0>(WebCore::PointerCaptureController::CapturingData *this@<X0>, WebCore::Element *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  WebCore::PointerCaptureController::CapturingData *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;

  v5 = *((_QWORD *)this + 1);
  if (!v5)
    goto LABEL_9;
  v6 = this;
  v7 = *(_DWORD *)(v5 - 8);
  v8 = ~((unint64_t)a3 << 32) + a3;
  v9 = 9 * (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) ^ (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(_QWORD *)(v5 + 16 * v11);
  if (v12 != a3)
  {
    v13 = 1;
    while (v12 != 0x8000000000000000)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(_QWORD *)(v5 + 16 * v11);
      ++v13;
      if (v12 == a3)
        goto LABEL_6;
    }
    goto LABEL_9;
  }
LABEL_6:
  v14 = *(_QWORD *)(v5 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_9:
    *(_BYTE *)a4 = 5;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    return this;
  }
  ++*(_DWORD *)v14;
  if ((*((_BYTE *)a2 + 22) & 8) != 0)
  {
    if (*(_BYTE *)(v14 + 43))
    {
      *((_DWORD *)a2 + 6) += 2;
      v15 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = a2;
      if (v15)
      {
        if (*(_DWORD *)(v15 + 24) == 2)
        {
          if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
        }
        else
        {
          *(_DWORD *)(v15 + 24) -= 2;
        }
      }
    }
    v16 = (_QWORD *)*((_QWORD *)v6 + 1);
    if (v16)
    {
      v17 = *((unsigned int *)v16 - 1);
      v18 = &v16[2 * v17];
      if (*((_DWORD *)v16 - 3))
      {
        v19 = (_QWORD *)*((_QWORD *)v6 + 1);
        if ((_DWORD)v17)
        {
          v20 = 16 * v17;
          v19 = (_QWORD *)*((_QWORD *)v6 + 1);
          while ((unint64_t)(*v19 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
          {
            v19 += 2;
            v20 -= 16;
            if (!v20)
            {
              v19 = v18;
              goto LABEL_24;
            }
          }
        }
        goto LABEL_24;
      }
      v19 = &v16[2 * v17];
    }
    else
    {
      v19 = 0;
      v17 = 0;
    }
    v18 = &v16[2 * v17];
LABEL_24:
    if (v16)
      v16 += 2 * *((unsigned int *)v16 - 1);
    if (v16 == v19)
    {
LABEL_36:
      v23 = 0;
    }
    else
    {
      while (1)
      {
        v21 = (_QWORD *)v19[1];
        if (v21[1] || v21[2] || v21[3])
          break;
        v22 = v19 + 2;
        v19 = v18;
        if (v22 != v18)
        {
          v19 = v22;
          while ((unint64_t)(*v19 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
          {
            v19 += 2;
            if (v19 == v18)
            {
              v19 = v18;
              break;
            }
          }
        }
        if (v19 == v16)
          goto LABEL_36;
      }
      v23 = 1;
    }
    *((_BYTE *)v6 + 17) = v23;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    return WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref((WebCore::PointerCaptureController::CapturingData *)v14, a2);
  }
  *(_BYTE *)a4 = 8;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref((WebCore::PointerCaptureController::CapturingData *)v14, a2);
}

WebCore::PointerCaptureController::CapturingData *WebCore::PointerCaptureController::releasePointerCapture@<X0>(WebCore::PointerCaptureController::CapturingData *this@<X0>, WebCore::Element *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  WebCore::PointerCaptureController::CapturingData *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WebCore::PointerCaptureController::CapturingData *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WebCore::PointerCaptureController::CapturingData *v22;
  WebCore::Element *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  char v32;

  v5 = *((_QWORD *)this + 1);
  if (!v5)
    goto LABEL_25;
  v7 = this;
  v8 = *(_DWORD *)(v5 - 8);
  v9 = ~((unint64_t)a3 << 32) + a3;
  v10 = (v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13);
  v11 = (9 * (v10 ^ (v10 >> 8))) ^ ((9 * (v10 ^ (v10 >> 8))) >> 15);
  v12 = ((v11 + ~(v11 << 27)) >> 31) ^ (v11 + ~((_DWORD)v11 << 27));
  v13 = v8 & v12;
  v14 = *(_QWORD *)(v5 + 16 * v13);
  if (v14 != a3)
  {
    v15 = 1;
    while (v14 != 0x8000000000000000)
    {
      v13 = ((_DWORD)v13 + v15) & v8;
      v14 = *(_QWORD *)(v5 + 16 * v13);
      ++v15;
      if (v14 == a3)
        goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_6:
  v16 = *(WebCore::PointerCaptureController::CapturingData **)(v5 + 16 * v13 + 8);
  if (!v16)
  {
LABEL_25:
    *(_BYTE *)a4 = 5;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    return this;
  }
  ++*(_DWORD *)v16;
  if (*((_BYTE *)this + 17))
  {
    v17 = *((_QWORD *)this + 1);
    if (v17)
    {
      v18 = *(_DWORD *)(v17 - 8);
      v19 = v18 & v12;
      v20 = *(_QWORD *)(v17 + 16 * v19);
      if (v20 != a3)
      {
        v21 = 1;
        while (v20 != 0x8000000000000000)
        {
          v19 = ((_DWORD)v19 + v21) & v18;
          v20 = *(_QWORD *)(v17 + 16 * v19);
          ++v21;
          if (v20 == a3)
            goto LABEL_13;
        }
        goto LABEL_44;
      }
LABEL_13:
      v22 = *(WebCore::PointerCaptureController::CapturingData **)(v17 + 16 * v19 + 8);
      if (v22)
      {
        ++*(_DWORD *)v22;
        v23 = (WebCore::Element *)*((_QWORD *)v22 + 1);
        WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref(v22, a2);
        if (v23 == a2)
        {
          v24 = *((_QWORD *)v16 + 1);
          *((_QWORD *)v16 + 1) = 0;
          if (v24)
          {
            if (*(_DWORD *)(v24 + 24) == 2)
            {
              if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v24, a2);
            }
            else
            {
              *(_DWORD *)(v24 + 24) -= 2;
            }
          }
          v25 = (_QWORD *)*((_QWORD *)v7 + 1);
          if (v25)
          {
            v26 = *((unsigned int *)v25 - 1);
            v27 = &v25[2 * v26];
            if (*((_DWORD *)v25 - 3))
            {
              v28 = (_QWORD *)*((_QWORD *)v7 + 1);
              if ((_DWORD)v26)
              {
                v29 = 16 * v26;
                v28 = (_QWORD *)*((_QWORD *)v7 + 1);
                while ((unint64_t)(*v28 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
                {
                  v28 += 2;
                  v29 -= 16;
                  if (!v29)
                  {
                    v28 = v27;
                    goto LABEL_29;
                  }
                }
              }
              goto LABEL_29;
            }
            v28 = &v25[2 * v26];
          }
          else
          {
            v28 = 0;
            v26 = 0;
          }
          v27 = &v25[2 * v26];
LABEL_29:
          if (v25)
            v25 += 2 * *((unsigned int *)v25 - 1);
          if (v25 == v28)
          {
LABEL_41:
            v32 = 0;
          }
          else
          {
            while (1)
            {
              v30 = (_QWORD *)v28[1];
              if (v30[1] || v30[2] || v30[3])
                break;
              v31 = v28 + 2;
              v28 = v27;
              if (v31 != v27)
              {
                v28 = v31;
                while ((unint64_t)(*v28 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
                {
                  v28 += 2;
                  if (v28 == v27)
                  {
                    v28 = v27;
                    break;
                  }
                }
              }
              if (v28 == v25)
                goto LABEL_41;
            }
            v32 = 1;
          }
          *((_BYTE *)v7 + 17) = v32;
        }
      }
    }
  }
LABEL_44:
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  return WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref(v16, a2);
}

WebCore::PointerCaptureController::CapturingData *WebCore::PointerCaptureController::elementWasRemovedSlow(WebCore::PointerCaptureController::CapturingData *this, WebCore::Element *a2)
{
  WebCore::PointerCaptureController::CapturingData *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  WebCore::Element **v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebCore::Document *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  WebCore::EventNames **v24;
  WTF::StringImpl *v25;
  WTF *v26;
  void *v27;
  _DWORD *v28;
  char v29[8];
  WTF::StringImpl *v30;
  char v31;
  WTF::StringImpl *v32;

  v3 = this;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = (uint64_t *)(v4 + 16 * v5);
    if (*(_DWORD *)(v4 - 12))
    {
      v7 = (uint64_t *)*((_QWORD *)this + 1);
      if ((_DWORD)v5)
      {
        v8 = 16 * v5;
        v7 = (uint64_t *)*((_QWORD *)this + 1);
        while ((unint64_t)(*v7 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
        {
          v7 += 2;
          v8 -= 16;
          if (!v8)
          {
            v7 = v6;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    v7 = (uint64_t *)(v4 + 16 * v5);
  }
  else
  {
    v7 = 0;
    v5 = 0;
  }
  v6 = (uint64_t *)(v4 + 16 * v5);
  if (!v4)
  {
    v9 = 0;
    goto LABEL_14;
  }
LABEL_13:
  v9 = (uint64_t *)(v4 + 16 * *(unsigned int *)(v4 - 4));
LABEL_14:
  if (v9 != v7)
  {
    while (1)
    {
      v11 = *v7;
      v10 = (WebCore::Element **)v7[1];
      v12 = (*(_DWORD *)v10)++;
      if (v10[1] == a2 || v10[2] == a2)
        break;
      if (v12)
      {
        *(_DWORD *)v10 = v12;
      }
      else
      {
        WebCore::PointerCaptureController::CapturingData::~CapturingData((WebCore::PointerCaptureController::CapturingData *)v10, a2);
        this = (WebCore::PointerCaptureController::CapturingData *)WTF::fastFree(v14, v15);
      }
      v13 = v7 + 2;
      v7 = v6;
      if (v13 != v6)
      {
        v7 = v13;
        while ((unint64_t)(*v7 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
        {
          v7 += 2;
          if (v7 == v6)
          {
            v7 = v6;
            break;
          }
        }
      }
      if (v7 == v9)
        return this;
    }
    v16 = v10[4];
    if (v16)
      *(_DWORD *)v16 += 2;
    v32 = v16;
    v17 = WebCore::PointerCaptureController::releasePointerCapture(v3, a2, v11, (uint64_t)v29);
    if (v31)
    {
      v17 = v30;
      v30 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          v17 = (WTF::StringImpl *)WTF::StringImpl::destroy(v17, v18);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    v19 = *(WebCore::Document **)(*((_QWORD *)a2 + 5) + 8);
    v20 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v20 || (v21 = *(_QWORD *)(v20 + 96)) == 0)
      v21 = WebCore::threadGlobalDataSlow(v17);
    v22 = *(_QWORD *)(v21 + 40);
    if (!v22)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v21);
      v22 = *(_QWORD *)(v21 + 40);
    }
    v23 = (uint64_t *)(v22 + 1168);
    v24 = (WebCore::EventNames **)bmalloc::api::isoAllocate();
    v28 = (_DWORD *)WebCore::PointerEvent::PointerEvent(v24, v23, v11, (_DWORD **)&v32, 0);
    WebCore::Document::queueTaskToDispatchEvent(v19, (WTF::StringImpl *)0x14, (uint64_t *)&v28);
    if (v28)
    {
      if (v28[4] == 1)
        (*(void (**)(void))(*(_QWORD *)v28 + 8))();
      else
        --v28[4];
    }
    this = v32;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        this = (WebCore::PointerCaptureController::CapturingData *)WTF::StringImpl::destroy(v32, v25);
      else
        *(_DWORD *)v32 -= 2;
    }
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::PointerCaptureController::CapturingData::~CapturingData((WebCore::PointerCaptureController::CapturingData *)v10, v25);
      return (WebCore::PointerCaptureController::CapturingData *)WTF::fastFree(v26, v27);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  return this;
}

uint64_t WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::PointerCaptureController::CapturingData *v3;
  WTF *v5;
  void *v6;

  v3 = *(WebCore::PointerCaptureController::CapturingData **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::PointerCaptureController::CapturingData::~CapturingData(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t *WTF::HashMap<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>,WTF::IntHash<long long>,WTF::SignedWithZeroKeyHashTraits<long long>,WTF::HashTraits<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  int v28;
  WTF *v29;
  void *v30;
  uint64_t v31;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>>,WTF::IntHash<long long>,WTF::HashMap<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>,WTF::IntHash<long long>,WTF::SignedWithZeroKeyHashTraits<long long>,WTF::HashTraits<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SignedWithZeroKeyHashTraits<long long>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)a2 + ~(*(_QWORD *)a2 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16 != 0x8000000000000000)
  {
    v27 = 0;
    v28 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v31 = 0;
        else
          v31 = *(unsigned int *)(v8 - 4);
        v26 = 0;
        v25 = v8 + 16 * v31;
        goto LABEL_13;
      }
      if (v17 == 0x7FFFFFFFFFFFFFFFLL)
        v27 = v16;
      v15 = (v15 + v28) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v28;
    }
    while (*v16 != 0x8000000000000000);
    if (v27)
    {
      *v27 = 0x8000000000000000;
      v27[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *(_QWORD *)a2;
      v16 = v27;
    }
  }
  v18 = *a3;
  *a3 = 0;
  result = (uint64_t *)v16[1];
  *v16 = v11;
  v16[1] = v18;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::PointerCaptureController::CapturingData::~CapturingData((WebCore::PointerCaptureController::CapturingData *)result, a2);
      result = (uint64_t *)WTF::fastFree(v29, v30);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_12;
LABEL_17:
    result = WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>>,WTF::IntHash<long long>,WTF::HashMap<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>,WTF::IntHash<long long>,WTF::SignedWithZeroKeyHashTraits<long long>,WTF::HashTraits<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SignedWithZeroKeyHashTraits<long long>>::expand(v6, (WTF::StringImpl *)v16);
    v16 = result;
    v21 = *v6;
    if (*v6)
      v24 = *(unsigned int *)(v21 - 4);
    else
      v24 = 0;
    goto LABEL_12;
  }
  if (3 * v24 <= 4 * v23)
    goto LABEL_17;
LABEL_12:
  v25 = v21 + 16 * v24;
  v26 = 1;
LABEL_13:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v25;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

uint64_t WebCore::PointerCaptureController::CapturingData::create(WebCore::PointerCaptureController::CapturingData *this, const WTF::String *a2)
{
  uint64_t result;
  _DWORD *v5;

  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  *(_QWORD *)(result + 32) = v5;
  *(_DWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 44) = -1;
  *(_QWORD *)this = result;
  return result;
}

_QWORD *WebCore::PointerCaptureController::touchWithIdentifierWasRemoved(_QWORD *this, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  WTF *v21;
  void *v22;

  v2 = this;
  v4 = this + 1;
  v3 = this[1];
  if (v3)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = ~((unint64_t)a2 << 32) + a2;
    v7 = 9
       * (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) ^ (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(_QWORD *)(v3 + 16 * v9);
    if (v10 != a2)
    {
      v11 = 1;
      while (v10 != 0x8000000000000000)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(_QWORD *)(v3 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_8;
      }
      v9 = *(unsigned int *)(v3 - 4);
    }
LABEL_8:
    if (v9 == *(_DWORD *)(v3 - 4))
      goto LABEL_39;
    v12 = (_QWORD *)(v3 + 16 * v9);
    this = (_QWORD *)v12[1];
    *v12 = 0x7FFFFFFFFFFFFFFFLL;
    v12[1] = 0;
    if (this)
    {
      if (*(_DWORD *)this == 1)
      {
        WebCore::PointerCaptureController::CapturingData::~CapturingData((WebCore::PointerCaptureController::CapturingData *)this, a2);
        this = (_QWORD *)WTF::fastFree(v21, v22);
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
    ++*(_DWORD *)(*v4 - 16);
    v13 = *v4;
    v14 = *v4 ? *(_DWORD *)(v13 - 12) - 1 : -1;
    *(_DWORD *)(v13 - 12) = v14;
    v3 = *v4;
    if (*v4)
    {
      v15 = *(_DWORD *)(v3 - 4);
      if (6 * *(_DWORD *)(v3 - 12) >= v15
        || v15 < 9
        || (this = WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>>,WTF::IntHash<long long>,WTF::HashMap<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>,WTF::IntHash<long long>,WTF::SignedWithZeroKeyHashTraits<long long>,WTF::HashTraits<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SignedWithZeroKeyHashTraits<long long>>::rehash(v4, v15 >> 1, 0), (v3 = *v4) != 0))
      {
LABEL_39:
        if (*(_DWORD *)(v3 - 12))
        {
          v16 = *(unsigned int *)(v3 - 4);
          v17 = (_QWORD *)v3;
          if ((_DWORD)v16)
          {
            v18 = 16 * v16;
            v17 = (_QWORD *)v3;
            while ((unint64_t)(*v17 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
            {
              v17 += 2;
              v18 -= 16;
              if (!v18)
                goto LABEL_32;
            }
          }
          v19 = (_QWORD *)(v3 + 16 * v16);
          if (v19 != v17)
          {
LABEL_24:
            v20 = (_QWORD *)v17[1];
            if (v20[1] || v20[2] || v20[3])
            {
              LOBYTE(v18) = 1;
              goto LABEL_32;
            }
            while (1)
            {
              v17 += 2;
              if (v17 == v19)
                break;
              if ((unint64_t)(*v17 - 0x7FFFFFFFFFFFFFFFLL) > 1)
              {
                LOBYTE(v18) = 0;
                if (v17 != v19)
                  goto LABEL_24;
                goto LABEL_32;
              }
            }
          }
        }
      }
    }
  }
  LOBYTE(v18) = 0;
LABEL_32:
  *((_BYTE *)v2 + 17) = v18;
  return this;
}

WebCore::EventNames **WebCore::PointerCaptureController::dispatchEventForTouchAtIndex(const WebCore::PointerEvent *a1, uint64_t a2, uint64_t *a3, unsigned int a4, char a5, WTF *a6, uint64_t *a7)
{
  uint64_t v7;
  WTF::StringImpl *v9;
  WTF *v10;
  WebCore *Ref;
  void *v12;
  const WTF::AtomString *v13;
  WebCore::PointerCaptureController::CapturingData *v14;
  uint64_t v15;
  WebCore::EventNames **v16;
  unint64_t StatusReg;
  uint64_t v18;
  WebCore *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore *HasCapturingEventListeners;
  const WTF::AtomString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  WTF *v37;
  WTF *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  WTF *v53;
  WTF *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  char v60;
  uint64_t v61;
  int v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  WebCore *v82;
  WebCore *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  WTF::StringImpl *v89;
  WebCore::EventNames *v90;
  WebCore::EventTarget **v91;
  WebCore::EventTarget **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  WebCore *v98;
  WebCore *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  WebCore::EventTarget *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WebCore::EventNames *v115;
  uint64_t *v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  WebCore *v125;
  WebCore *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  int v131;
  WebCore *v132;
  WTF::StringImpl *v133;
  WebCore::EventNames *v134;
  WTF *v135;
  WebCore::EventTarget **v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  int v141;
  WebCore *v142;
  WebCore *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  WebCore::EventTarget *v149;
  WebCore *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  WebCore::EventNames *v158;
  uint64_t *v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  WTF *v166;
  uint64_t v167;
  uint64_t v168;
  WebCore::EventNames **v170;
  WebCore *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  int v177;
  WebCore *v178;
  WebCore *v179;
  uint64_t v180;
  uint64_t v181;
  WebCore::EventNames **v182;
  uint64_t v183;
  int v184;
  WebCore *v185;
  WTF::StringImpl *v186;
  WTF *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  WebCore *v191;
  void *v192;
  WebCore::EventNames **v193;
  uint64_t v194;
  WebCore *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  int v201;
  WebCore *v202;
  WebCore *v203;
  uint64_t v204;
  uint64_t v205;
  WebCore::EventNames **v206;
  uint64_t v207;
  int v208;
  WebCore *v209;
  WTF::StringImpl *v210;
  WTF *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  WebCore::PointerCaptureController::CapturingData *v215;
  uint64_t v216;
  WebCore::EventNames **result;
  uint64_t *v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int v221;
  char *v222;
  uint64_t v223;
  uint64_t *v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t *v228;
  unsigned int *v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t *v232;
  unsigned int *v233;
  unsigned int v234;
  unsigned int v235;
  WTF *v236;
  void *v237;
  WebCore::EventTarget *v238;
  WebCore::EventTarget *v239;
  char v240;
  char v241;
  WTF *v245;
  uint64_t v246;
  _BYTE v247[256];
  WTF *v248;
  uint64_t v249;
  _BYTE v250[256];
  WebCore::PointerCaptureController::CapturingData *v251;
  WebCore::EventNames **v252;
  _QWORD v253[6];
  unsigned __int8 v254;
  unsigned int v255;
  WebCore::EventNames *v256[2];

  v255 = a4;
  v254 = a5;
  if ((*(_BYTE *)(a2 + 22) & 2) == 0 || (v7 = a2, (*(_WORD *)(a2 + 28) & 8) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x1960432A8);
  }
  v253[0] = a1;
  v253[1] = a3;
  v253[2] = &v255;
  v253[3] = &v254;
  v253[4] = a6;
  v253[5] = a7;
  ++*(_DWORD *)a6;
  v248 = a6;
  WebCore::PointerEvent::create((uint64_t)a3, a4, a5, &v248, a7, &v252);
  v10 = v248;
  v248 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      v73 = (uint64_t *)*((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 2) = 0;
      if (v73)
      {
        if (*v73)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v73, v9);
        WTF::fastFree((WTF *)v73, v9);
      }
      v74 = (unsigned int *)*((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      if (v74)
      {
        do
        {
          v75 = __ldaxr(v74);
          v76 = v75 - 1;
        }
        while (__stlxr(v76, v74));
        if (!v76)
        {
          atomic_store(1u, v74);
          WTF::fastFree((WTF *)v74, v9);
        }
      }
      WTF::fastFree(v10, v9);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  Ref = WebCore::PointerCaptureController::ensureCapturingDataForPointerEvent((WebCore::PointerCaptureController *)&v251, a1, *((_DWORD *)v252 + 44), v252[29]);
  v14 = v251;
  v15 = *((_QWORD *)v251 + 3);
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  if ((*(_BYTE *)(v7 + 22) & 2) == 0 || (*(_WORD *)(v7 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1960432F8);
  }
  *(_DWORD *)(v7 + 24) += 4;
  *((_QWORD *)v14 + 3) = v7;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        Ref = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v15, v12);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
  }
  v16 = v252;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v18 = *(_QWORD *)(StatusReg + 736);
  if (!v18 || (v19 = *(WebCore **)(v18 + 96)) == 0)
  {
    Ref = (WebCore *)WebCore::threadGlobalDataSlow(Ref);
    v19 = Ref;
  }
  v20 = *((_QWORD *)v19 + 5);
  if (!v20)
  {
    Ref = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v19);
    v20 = *((_QWORD *)v19 + 5);
  }
  v21 = *(_QWORD *)(StatusReg + 736);
  v238 = (WebCore::EventTarget *)v7;
  v239 = (WebCore::EventTarget *)v15;
  if (v15 == v7 || v16[3] != *(WebCore::EventNames **)(v20 + 1528))
    goto LABEL_311;
  if (!v21 || (v22 = *(_QWORD *)(v21 + 96)) == 0)
    v22 = WebCore::threadGlobalDataSlow(Ref);
  v23 = *(_QWORD *)(v22 + 40);
  if (!v23)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v22);
    v23 = *(_QWORD *)(v22 + 40);
  }
  HasCapturingEventListeners = (WebCore *)WebCore::hierarchyHasCapturingEventListeners(v7, (WebCore::Element *)(v23 + 1496), v13);
  v241 = (char)HasCapturingEventListeners;
  v26 = *(_QWORD *)(StatusReg + 736);
  if (!v26 || (v27 = *(_QWORD *)(v26 + 96)) == 0)
    v27 = WebCore::threadGlobalDataSlow(HasCapturingEventListeners);
  v28 = *(_QWORD *)(v27 + 40);
  if (!v28)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v27);
    v28 = *(_QWORD *)(v27 + 40);
  }
  v29 = WebCore::hierarchyHasCapturingEventListeners(v15, (WebCore::Element *)(v28 + 1504), v25);
  v240 = v29;
  v248 = (WTF *)v250;
  v249 = 32;
  if (v15)
  {
    v31 = v15;
    *(_DWORD *)(v15 + 24) += 2;
    do
    {
      v32 = v31;
      v33 = HIDWORD(v249);
      if (HIDWORD(v249) == (_DWORD)v249)
      {
        v34 = HIDWORD(v249) + ((unint64_t)HIDWORD(v249) >> 2);
        if (v34 >= 0x10)
          v35 = v34 + 1;
        else
          v35 = 16;
        if (v35 <= (unint64_t)HIDWORD(v249) + 1)
          v36 = HIDWORD(v249) + 1;
        else
          v36 = v35;
        v37 = v248;
        if (v36 < 0x21)
        {
          v248 = (WTF *)v250;
          LODWORD(v249) = 32;
          v38 = (WTF *)v250;
        }
        else
        {
          if (v36 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x196043418);
          }
          v38 = (WTF *)WTF::fastMalloc((WTF *)(8 * v36));
          LODWORD(v249) = v36;
          v248 = v38;
        }
        v29 = (uint64_t)memcpy(v38, v37, 8 * v33);
        if (v250 != (_BYTE *)v37 && v37)
        {
          if (v248 == v37)
          {
            v248 = 0;
            LODWORD(v249) = 0;
          }
          v29 = WTF::fastFree(v37, v30);
        }
        LODWORD(v33) = HIDWORD(v249);
        v39 = (uint64_t *)((char *)v248 + 8 * HIDWORD(v249));
      }
      else
      {
        v39 = (uint64_t *)((char *)v248 + 8 * HIDWORD(v249));
      }
      *(_DWORD *)(v31 + 24) += 2;
      *v39 = v31;
      HIDWORD(v249) = v33 + 1;
      v40 = *(_QWORD *)(v31 + 32);
      if (v40)
      {
        if ((*(_WORD *)(v40 + 28) & 8) != 0)
        {
          v41 = *(_QWORD *)(v40 + 72) & 0xFFFFFFFFFFFFLL;
          if (v41)
          {
            v45 = *(_QWORD *)(v41 + 88);
            if (v45)
            {
              v29 = *(_QWORD *)(v45 + 224);
              if (v29)
              {
                v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v31);
                v31 = v29;
                if (v29)
                {
LABEL_63:
                  v44 = 0;
                  *(_DWORD *)(v31 + 24) += 2;
                  goto LABEL_64;
                }
              }
            }
          }
        }
      }
      if ((~*(unsigned __int16 *)(v32 + 28) & 0x408) != 0
        || (v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 368))(v32), !(_DWORD)v29))
      {
        v31 = *(_QWORD *)(v32 + 32);
        if (!v31)
          goto LABEL_59;
        v43 = *(_WORD *)(v31 + 28);
        if ((v43 & 0x80) == 0)
        {
          if ((v43 & 8) != 0)
            goto LABEL_63;
LABEL_58:
          v31 = 0;
          goto LABEL_59;
        }
        v42 = *(_QWORD *)(v31 + 200);
        if (!v42)
          goto LABEL_58;
      }
      else
      {
        v42 = *(_QWORD *)(v32 + 112);
        if (!v42)
          goto LABEL_58;
      }
      v31 = *(_QWORD *)(v42 + 8);
      if (v31)
        goto LABEL_63;
LABEL_59:
      v44 = 1;
LABEL_64:
      if (*(_DWORD *)(v32 + 24) == 2)
      {
        if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
          v29 = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v32, v30);
      }
      else
      {
        *(_DWORD *)(v32 + 24) -= 2;
      }
    }
    while ((v44 & 1) == 0);
  }
  v245 = (WTF *)v247;
  v46 = v7;
  v47 = *(_DWORD *)(v7 + 24) + 2;
  v246 = 32;
  *(_DWORD *)(v7 + 24) = v47;
  do
  {
    v48 = v46;
    v49 = HIDWORD(v246);
    if (HIDWORD(v246) == (_DWORD)v246)
    {
      v50 = HIDWORD(v246) + ((unint64_t)HIDWORD(v246) >> 2);
      if (v50 >= 0x10)
        v51 = v50 + 1;
      else
        v51 = 16;
      if (v51 <= (unint64_t)HIDWORD(v246) + 1)
        v52 = HIDWORD(v246) + 1;
      else
        v52 = v51;
      v53 = v245;
      if (v52 < 0x21)
      {
        v245 = (WTF *)v247;
        LODWORD(v246) = 32;
        v54 = (WTF *)v247;
      }
      else
      {
        if (v52 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x196043410);
        }
        v54 = (WTF *)WTF::fastMalloc((WTF *)(8 * v52));
        LODWORD(v246) = v52;
        v245 = v54;
      }
      v29 = (uint64_t)memcpy(v54, v53, 8 * HIDWORD(v246));
      if (v247 != (_BYTE *)v53 && v53)
      {
        if (v245 == v53)
        {
          v245 = 0;
          LODWORD(v246) = 0;
        }
        v29 = WTF::fastFree(v53, v30);
      }
      v49 = HIDWORD(v246);
      v55 = (uint64_t *)((char *)v245 + 8 * HIDWORD(v246));
    }
    else
    {
      v55 = (uint64_t *)((char *)v245 + 8 * HIDWORD(v246));
    }
    *(_DWORD *)(v48 + 24) += 2;
    *v55 = v48;
    HIDWORD(v246) = v49 + 1;
    v56 = *(_QWORD *)(v48 + 32);
    if (v56)
    {
      if ((*(_WORD *)(v56 + 28) & 8) != 0)
      {
        v57 = *(_QWORD *)(v56 + 72) & 0xFFFFFFFFFFFFLL;
        if (v57)
        {
          v61 = *(_QWORD *)(v57 + 88);
          if (v61)
          {
            v29 = *(_QWORD *)(v61 + 224);
            if (v29)
            {
              v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v48);
              v46 = v29;
              if (v29)
                goto LABEL_107;
            }
          }
        }
      }
    }
    if ((~*(unsigned __int16 *)(v48 + 28) & 0x408) == 0)
    {
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 368))(v48);
      if ((_DWORD)v29)
      {
        v58 = *(_QWORD *)(v48 + 112);
        if (!v58)
          goto LABEL_102;
LABEL_97:
        v46 = *(_QWORD *)(v58 + 8);
        if (!v46)
          goto LABEL_103;
        goto LABEL_107;
      }
    }
    v46 = *(_QWORD *)(v48 + 32);
    if (!v46)
      goto LABEL_103;
    v59 = *(_WORD *)(v46 + 28);
    if ((v59 & 0x80) != 0)
    {
      v58 = *(_QWORD *)(v46 + 200);
      if (!v58)
      {
LABEL_102:
        v46 = 0;
LABEL_103:
        v60 = 1;
        goto LABEL_108;
      }
      goto LABEL_97;
    }
    if ((v59 & 8) == 0)
      goto LABEL_102;
LABEL_107:
    v60 = 0;
    *(_DWORD *)(v46 + 24) += 2;
LABEL_108:
    if (*(_DWORD *)(v48 + 24) == 2)
    {
      if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
        v29 = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v48, v30);
    }
    else
    {
      *(_DWORD *)(v48 + 24) -= 2;
    }
  }
  while ((v60 & 1) == 0);
  if (HIDWORD(v249))
  {
    v62 = HIDWORD(v246);
    if (HIDWORD(v246))
    {
      v63 = (char *)v248 + 8 * HIDWORD(v249);
      v64 = (char *)v245 + 8 * HIDWORD(v246);
      if (*((_QWORD *)v63 - 1) == *((_QWORD *)v64 - 1))
      {
        v65 = 0;
        if (HIDWORD(v246) >= (unint64_t)HIDWORD(v249))
          v66 = HIDWORD(v249);
        else
          v66 = HIDWORD(v246);
        v67 = v64 - 8;
        v68 = v63 - 8;
        while (1)
        {
          if ((unint64_t)HIDWORD(v249) + v65 - 1 >= HIDWORD(v249))
          {
            __break(0xC471u);
            JUMPOUT(0x196043420);
          }
          if ((unint64_t)HIDWORD(v246) - 1 + v65 >= HIDWORD(v246))
          {
            __break(0xC471u);
            JUMPOUT(0x196043428);
          }
          if (*(_QWORD *)&v68[8 * v65] != *(_QWORD *)&v67[8 * v65])
            break;
          if (-v66 == --v65)
          {
            v69 = HIDWORD(v249) - v66;
            goto LABEL_131;
          }
        }
        if (!v65)
          goto LABEL_151;
        v69 = HIDWORD(v249) + v65;
        v66 = -v65;
LABEL_131:
        v70 = (uint64_t *)((char *)v248 + 8 * v69);
        v71 = 8 * HIDWORD(v249) - 8 * v69;
        do
        {
          v72 = *v70;
          *v70 = 0;
          if (v72)
          {
            if (*(_DWORD *)(v72 + 24) == 2)
            {
              if ((*(_WORD *)(v72 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v72, v30);
            }
            else
            {
              *(_DWORD *)(v72 + 24) -= 2;
            }
          }
          ++v70;
          v71 -= 8;
        }
        while (v71);
        HIDWORD(v249) = v69;
        v62 = HIDWORD(v246) - v66;
        v222 = (char *)v245 + 8 * HIDWORD(v246);
        v223 = -8 * v66;
        do
        {
          v29 = *(_QWORD *)&v222[v223];
          *(_QWORD *)&v222[v223] = 0;
          if (v29)
          {
            if (*(_DWORD *)(v29 + 24) == 2)
            {
              if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
                v29 = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v29, v30);
            }
            else
            {
              *(_DWORD *)(v29 + 24) -= 2;
            }
          }
          v223 += 8;
        }
        while (v223);
LABEL_151:
        HIDWORD(v246) = v62;
      }
    }
  }
  if (v15)
  {
    v77 = *(_QWORD *)(StatusReg + 736);
    if (!v77 || (v78 = *(_QWORD *)(v77 + 96)) == 0)
      v78 = WebCore::threadGlobalDataSlow((WebCore *)v29);
    v79 = *(_QWORD *)(v78 + 40);
    if (!v79)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v78);
      v79 = *(_QWORD *)(v78 + 40);
    }
    v80 = v255;
    v81 = v254;
    ++*(_DWORD *)a6;
    v256[0] = a6;
    v82 = (WebCore *)bmalloc::api::isoAllocate();
    v83 = v82;
    v84 = *(_QWORD *)(StatusReg + 736);
    if (!v84 || (v85 = *(_QWORD *)(v84 + 96)) == 0)
      v85 = WebCore::threadGlobalDataSlow(v82);
    v86 = (_QWORD *)(v79 + 1536);
    v87 = *(_QWORD *)(v85 + 40);
    if (!v87)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v85);
      v87 = *(_QWORD *)(v85 + 40);
    }
    v88 = *v86 != *(_QWORD *)(v87 + 1496) && *v86 != *(_QWORD *)(v87 + 1504);
    WebCore::PointerEvent::PointerEvent((WebCore::EventNames **)v83, (WebCore::EventNames **)(v79 + 1536), a3, v88, v80, v81 != 0, v256, a7);
    v29 = (uint64_t)WebCore::PointerCaptureController::dispatchEvent(a1, v83, (WebCore::EventTarget *)v15);
    if (*((_DWORD *)v83 + 4) == 1)
      v29 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v83 + 8))(v83);
    else
      --*((_DWORD *)v83 + 4);
    v90 = v256[0];
    v256[0] = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 1)
      {
        v232 = (uint64_t *)*((_QWORD *)v90 + 2);
        *((_QWORD *)v90 + 2) = 0;
        if (v232)
        {
          if (*v232)
            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v232, v89);
          WTF::fastFree((WTF *)v232, v89);
        }
        v233 = (unsigned int *)*((_QWORD *)v90 + 1);
        *((_QWORD *)v90 + 1) = 0;
        if (v233)
        {
          do
          {
            v234 = __ldaxr(v233);
            v235 = v234 - 1;
          }
          while (__stlxr(v235, v233));
          if (!v235)
          {
            atomic_store(1u, v233);
            WTF::fastFree((WTF *)v233, v89);
          }
        }
        v29 = WTF::fastFree(v90, v89);
      }
      else
      {
        --*(_DWORD *)v90;
      }
    }
  }
  if (HIDWORD(v249))
  {
    v91 = (WebCore::EventTarget **)v248;
    v92 = (WebCore::EventTarget **)((char *)v248 + 8 * HIDWORD(v249));
    do
    {
      v93 = *(_QWORD *)(StatusReg + 736);
      if ((v240 & 1) != 0)
      {
        if (!v93)
          goto LABEL_176;
      }
      else
      {
        v105 = *v91;
        if (!v93 || (v106 = *(_QWORD *)(v93 + 96)) == 0)
        {
          v29 = WebCore::threadGlobalDataSlow((WebCore *)v29);
          v106 = v29;
        }
        v107 = *(_QWORD *)(v106 + 40);
        if (!v107)
        {
          v29 = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v106);
          v107 = *(_QWORD *)(v106 + 40);
        }
        v108 = *((_QWORD *)v105 + 2);
        if ((v108 & 0x1000000000000) == 0)
          goto LABEL_203;
        v109 = v108 & 0xFFFFFFFFFFFFLL;
        v110 = *(unsigned int *)(v109 + 28);
        if (!(_DWORD)v110)
          goto LABEL_203;
        v111 = *(_QWORD **)(v109 + 16);
        v112 = *(_QWORD *)(v107 + 1504);
        v113 = 32 * v110;
        while (*v111 != v112)
        {
          v111 += 4;
          v113 -= 32;
          if (!v113)
            goto LABEL_203;
        }
        v93 = *(_QWORD *)(StatusReg + 736);
        if (!v93)
        {
LABEL_176:
          v94 = WebCore::threadGlobalDataSlow((WebCore *)v29);
          goto LABEL_177;
        }
      }
      v94 = *(_QWORD *)(v93 + 96);
      if (!v94)
        goto LABEL_176;
LABEL_177:
      v95 = *(_QWORD *)(v94 + 40);
      if (!v95)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v94);
        v95 = *(_QWORD *)(v94 + 40);
      }
      v96 = v255;
      v97 = v254;
      ++*(_DWORD *)a6;
      v256[0] = a6;
      v98 = (WebCore *)bmalloc::api::isoAllocate();
      v99 = v98;
      v100 = *(_QWORD *)(StatusReg + 736);
      if (!v100 || (v101 = *(_QWORD *)(v100 + 96)) == 0)
        v101 = WebCore::threadGlobalDataSlow(v98);
      v102 = *(_QWORD *)(v101 + 40);
      if (!v102)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v101);
        v102 = *(_QWORD *)(v101 + 40);
      }
      v103 = *(_QWORD *)(v95 + 1504);
      v104 = v103 != *(_QWORD *)(v102 + 1496) && v103 != *(_QWORD *)(v102 + 1504);
      WebCore::PointerEvent::PointerEvent((WebCore::EventNames **)v99, (WebCore::EventNames **)(v95 + 1504), a3, v104, v96, v97 != 0, v256, a7);
      v29 = (uint64_t)WebCore::PointerCaptureController::dispatchEvent(a1, v99, *v91);
      if (*((_DWORD *)v99 + 4) == 1)
        v29 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v99 + 8))(v99);
      else
        --*((_DWORD *)v99 + 4);
      v115 = v256[0];
      v256[0] = 0;
      if (v115)
      {
        if (*(_DWORD *)v115 == 1)
        {
          v116 = (uint64_t *)*((_QWORD *)v115 + 2);
          *((_QWORD *)v115 + 2) = 0;
          if (v116)
          {
            if (*v116)
              WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v116, v114);
            WTF::fastFree((WTF *)v116, v114);
          }
          v117 = (unsigned int *)*((_QWORD *)v115 + 1);
          *((_QWORD *)v115 + 1) = 0;
          if (v117)
          {
            do
            {
              v118 = __ldaxr(v117);
              v119 = v118 - 1;
            }
            while (__stlxr(v119, v117));
            if (!v119)
            {
              atomic_store(1u, v117);
              WTF::fastFree((WTF *)v117, v114);
            }
          }
          v29 = WTF::fastFree(v115, v114);
        }
        else
        {
          --*(_DWORD *)v115;
        }
      }
LABEL_203:
      ++v91;
    }
    while (v91 != v92);
  }
  v120 = *(_QWORD *)(StatusReg + 736);
  if (!v120 || (v121 = *(_QWORD *)(v120 + 96)) == 0)
    v121 = WebCore::threadGlobalDataSlow((WebCore *)v29);
  v122 = *(_QWORD *)(v121 + 40);
  if (!v122)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v121);
    v122 = *(_QWORD *)(v121 + 40);
  }
  v123 = v255;
  v124 = v254;
  ++*(_DWORD *)a6;
  v256[0] = a6;
  v125 = (WebCore *)bmalloc::api::isoAllocate();
  v126 = v125;
  v127 = *(_QWORD *)(StatusReg + 736);
  if (!v127 || (v128 = *(_QWORD *)(v127 + 96)) == 0)
    v128 = WebCore::threadGlobalDataSlow(v125);
  v129 = (_QWORD *)(v122 + 1544);
  v130 = *(_QWORD *)(v128 + 40);
  if (!v130)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v128);
    v130 = *(_QWORD *)(v128 + 40);
  }
  v131 = *v129 != *(_QWORD *)(v130 + 1496) && *v129 != *(_QWORD *)(v130 + 1504);
  WebCore::PointerEvent::PointerEvent((WebCore::EventNames **)v126, (WebCore::EventNames **)(v122 + 1544), a3, v131, v123, v124 != 0, v256, a7);
  v7 = (uint64_t)v238;
  v132 = WebCore::PointerCaptureController::dispatchEvent(a1, v126, v238);
  if (*((_DWORD *)v126 + 4) == 1)
    v132 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v126 + 8))(v126);
  else
    --*((_DWORD *)v126 + 4);
  v134 = v256[0];
  v256[0] = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 1)
    {
      v218 = (uint64_t *)*((_QWORD *)v134 + 2);
      *((_QWORD *)v134 + 2) = 0;
      if (v218)
      {
        if (*v218)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v218, v133);
        WTF::fastFree((WTF *)v218, v133);
      }
      v219 = (unsigned int *)*((_QWORD *)v134 + 1);
      *((_QWORD *)v134 + 1) = 0;
      if (v219)
      {
        do
        {
          v220 = __ldaxr(v219);
          v221 = v220 - 1;
        }
        while (__stlxr(v221, v219));
        if (!v221)
        {
          atomic_store(1u, v219);
          WTF::fastFree((WTF *)v219, v133);
        }
      }
      v132 = (WebCore *)WTF::fastFree(v134, v133);
    }
    else
    {
      --*(_DWORD *)v134;
    }
  }
  v135 = v245;
  if (HIDWORD(v246))
  {
    v136 = (WebCore::EventTarget **)((char *)v245 + 8 * HIDWORD(v246));
    while (1)
    {
      --v136;
      v137 = *(_QWORD *)(StatusReg + 736);
      if ((v241 & 1) != 0)
      {
        if (!v137)
          goto LABEL_240;
      }
      else
      {
        v149 = *v136;
        if (!v137 || (v150 = *(WebCore **)(v137 + 96)) == 0)
        {
          v132 = (WebCore *)WebCore::threadGlobalDataSlow(v132);
          v150 = v132;
        }
        v151 = *((_QWORD *)v150 + 5);
        if (!v151)
        {
          v132 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v150);
          v151 = *((_QWORD *)v150 + 5);
        }
        v152 = *((_QWORD *)v149 + 2);
        if ((v152 & 0x1000000000000) == 0)
          goto LABEL_267;
        v153 = v152 & 0xFFFFFFFFFFFFLL;
        v154 = *(unsigned int *)(v153 + 28);
        if (!(_DWORD)v154)
          goto LABEL_267;
        v155 = *(_QWORD **)(v153 + 16);
        v156 = *(_QWORD *)(v151 + 1496);
        v157 = 32 * v154;
        while (*v155 != v156)
        {
          v155 += 4;
          v157 -= 32;
          if (!v157)
            goto LABEL_267;
        }
        v137 = *(_QWORD *)(StatusReg + 736);
        if (!v137)
        {
LABEL_240:
          v138 = WebCore::threadGlobalDataSlow(v132);
          goto LABEL_241;
        }
      }
      v138 = *(_QWORD *)(v137 + 96);
      if (!v138)
        goto LABEL_240;
LABEL_241:
      v139 = *(_QWORD *)(v138 + 40);
      if (!v139)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v138);
        v139 = *(_QWORD *)(v138 + 40);
      }
      v140 = v255;
      v141 = v254;
      ++*(_DWORD *)a6;
      v256[0] = a6;
      v142 = (WebCore *)bmalloc::api::isoAllocate();
      v143 = v142;
      v144 = *(_QWORD *)(StatusReg + 736);
      if (!v144 || (v145 = *(_QWORD *)(v144 + 96)) == 0)
        v145 = WebCore::threadGlobalDataSlow(v142);
      v146 = *(_QWORD *)(v145 + 40);
      if (!v146)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v145);
        v146 = *(_QWORD *)(v145 + 40);
      }
      v147 = *(_QWORD *)(v139 + 1496);
      v148 = v147 != *(_QWORD *)(v146 + 1496) && v147 != *(_QWORD *)(v146 + 1504);
      WebCore::PointerEvent::PointerEvent((WebCore::EventNames **)v143, (WebCore::EventNames **)(v139 + 1496), a3, v148, v140, v141 != 0, v256, a7);
      v132 = WebCore::PointerCaptureController::dispatchEvent(a1, v143, *v136);
      if (*((_DWORD *)v143 + 4) == 1)
        v132 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v143 + 8))(v143);
      else
        --*((_DWORD *)v143 + 4);
      v158 = v256[0];
      v256[0] = 0;
      if (v158)
      {
        if (*(_DWORD *)v158 == 1)
        {
          v159 = (uint64_t *)*((_QWORD *)v158 + 2);
          *((_QWORD *)v158 + 2) = 0;
          if (v159)
          {
            if (*v159)
              WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v159, v133);
            WTF::fastFree((WTF *)v159, v133);
          }
          v160 = (unsigned int *)*((_QWORD *)v158 + 1);
          *((_QWORD *)v158 + 1) = 0;
          if (v160)
          {
            do
            {
              v161 = __ldaxr(v160);
              v162 = v161 - 1;
            }
            while (__stlxr(v162, v160));
            if (!v162)
            {
              atomic_store(1u, v160);
              WTF::fastFree((WTF *)v160, v133);
            }
          }
          v132 = (WebCore *)WTF::fastFree(v158, v133);
        }
        else
        {
          --*(_DWORD *)v158;
        }
      }
LABEL_267:
      if (v136 == (WebCore::EventTarget **)v245)
      {
        v135 = v245;
        if (HIDWORD(v246))
        {
          v163 = 8 * HIDWORD(v246);
          v7 = (uint64_t)v238;
          do
          {
            v164 = *(_QWORD *)v135;
            *(_QWORD *)v135 = 0;
            if (v164)
            {
              if (*(_DWORD *)(v164 + 24) == 2)
              {
                if ((*(_WORD *)(v164 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v164, v133);
              }
              else
              {
                *(_DWORD *)(v164 + 24) -= 2;
              }
            }
            v135 = (WTF *)((char *)v135 + 8);
            v163 -= 8;
          }
          while (v163);
          v135 = v245;
        }
        else
        {
          v7 = (uint64_t)v238;
        }
        break;
      }
    }
  }
  if (v247 != (_BYTE *)v135 && v135 != 0)
  {
    LODWORD(v246) = 0;
    WTF::fastFree(v135, v133);
  }
  if (HIDWORD(v249))
  {
    v166 = v248;
    v167 = 8 * HIDWORD(v249);
    do
    {
      v168 = *(_QWORD *)v166;
      *(_QWORD *)v166 = 0;
      if (v168)
      {
        if (*(_DWORD *)(v168 + 24) == 2)
        {
          if ((*(_WORD *)(v168 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v168, v133);
        }
        else
        {
          *(_DWORD *)(v168 + 24) -= 2;
        }
      }
      v166 = (WTF *)((char *)v166 + 8);
      v167 -= 8;
    }
    while (v167);
  }
  Ref = v248;
  if (v250 != (_BYTE *)v248 && v248 != 0)
  {
    v248 = 0;
    LODWORD(v249) = 0;
    Ref = (WebCore *)WTF::fastFree(Ref, v133);
  }
  v21 = *(_QWORD *)(StatusReg + 736);
LABEL_311:
  v170 = v252;
  if (!v21 || (v171 = *(WebCore **)(v21 + 96)) == 0)
  {
    Ref = (WebCore *)WebCore::threadGlobalDataSlow(Ref);
    v171 = Ref;
  }
  v172 = *((_QWORD *)v171 + 5);
  if (!v172)
  {
    Ref = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v171);
    v172 = *((_QWORD *)v171 + 5);
  }
  if (v170[3] == *(WebCore::EventNames **)(v172 + 1488))
  {
    v173 = *(_QWORD *)(StatusReg + 736);
    if (!v173 || (v174 = *(_QWORD *)(v173 + 96)) == 0)
      v174 = WebCore::threadGlobalDataSlow(Ref);
    v175 = *(_QWORD *)(v174 + 40);
    if (!v175)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v174);
      v175 = *(_QWORD *)(v174 + 40);
    }
    v176 = v255;
    v177 = v254;
    ++*(_DWORD *)a6;
    v248 = a6;
    v178 = (WebCore *)bmalloc::api::isoAllocate();
    v179 = v178;
    v180 = *(_QWORD *)(StatusReg + 736);
    if (!v180 || (v181 = *(_QWORD *)(v180 + 96)) == 0)
      v181 = WebCore::threadGlobalDataSlow(v178);
    v182 = (WebCore::EventNames **)(v175 + 1544);
    v183 = *(_QWORD *)(v181 + 40);
    if (!v183)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v181);
      v183 = *(_QWORD *)(v181 + 40);
    }
    v7 = (uint64_t)v238;
    v184 = *v182 != *(WebCore::EventNames **)(v183 + 1496) && *v182 != *(WebCore::EventNames **)(v183 + 1504);
    WebCore::PointerEvent::PointerEvent((WebCore::EventNames **)v179, v182, a3, v184, v176, v177 != 0, &v248, a7);
    v185 = WebCore::PointerCaptureController::dispatchEvent(a1, v179, v238);
    if (*((_DWORD *)v179 + 4) == 1)
      v185 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v179 + 8))(v179);
    else
      --*((_DWORD *)v179 + 4);
    v187 = v248;
    v248 = 0;
    v15 = (uint64_t)v239;
    if (v187)
    {
      if (*(_DWORD *)v187 == 1)
      {
        v224 = (uint64_t *)*((_QWORD *)v187 + 2);
        *((_QWORD *)v187 + 2) = 0;
        if (v224)
        {
          if (*v224)
            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v224, v186);
          WTF::fastFree((WTF *)v224, v186);
        }
        v225 = (unsigned int *)*((_QWORD *)v187 + 1);
        *((_QWORD *)v187 + 1) = 0;
        if (v225)
        {
          do
          {
            v226 = __ldaxr(v225);
            v227 = v226 - 1;
          }
          while (__stlxr(v227, v225));
          if (!v227)
          {
            atomic_store(1u, v225);
            WTF::fastFree((WTF *)v225, v186);
          }
        }
        v185 = (WebCore *)WTF::fastFree(v187, v186);
      }
      else
      {
        --*(_DWORD *)v187;
      }
    }
    v188 = *(_QWORD *)(StatusReg + 736);
    if (!v188 || (v189 = *(_QWORD *)(v188 + 96)) == 0)
      v189 = WebCore::threadGlobalDataSlow(v185);
    v190 = *(_QWORD *)(v189 + 40);
    if (!v190)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v189);
      v190 = *(_QWORD *)(v189 + 40);
    }
    WebCore::PointerCaptureController::dispatchEventForTouchAtIndex(WebCore::EventTarget &,WebCore::PlatformTouchEvent const&,unsigned int,BOOL,WebCore::WindowProxy &,WebCore::IntPoint const&)::$_1::operator()((WebCore::EventTarget *)v253, (_QWORD *)(v190 + 1496), v238);
  }
  v191 = WebCore::PointerCaptureController::dispatchEvent(a1, (WebCore::PointerEvent *)v252, (WebCore::EventTarget *)v7);
  v193 = v252;
  v194 = *(_QWORD *)(StatusReg + 736);
  if (!v194 || (v195 = *(WebCore **)(v194 + 96)) == 0)
  {
    v191 = (WebCore *)WebCore::threadGlobalDataSlow(v191);
    v195 = v191;
  }
  v196 = *((_QWORD *)v195 + 5);
  if (!v196)
  {
    v191 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v195);
    v196 = *((_QWORD *)v195 + 5);
  }
  if (v193[3] == *(WebCore::EventNames **)(v196 + 1552))
  {
    v197 = *(_QWORD *)(StatusReg + 736);
    if (!v197 || (v198 = *(_QWORD *)(v197 + 96)) == 0)
      v198 = WebCore::threadGlobalDataSlow(v191);
    v199 = *(_QWORD *)(v198 + 40);
    if (!v199)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v198);
      v199 = *(_QWORD *)(v198 + 40);
    }
    v200 = v255;
    v201 = v254;
    ++*(_DWORD *)a6;
    v248 = a6;
    v202 = (WebCore *)bmalloc::api::isoAllocate();
    v203 = v202;
    v204 = *(_QWORD *)(StatusReg + 736);
    if (!v204 || (v205 = *(_QWORD *)(v204 + 96)) == 0)
      v205 = WebCore::threadGlobalDataSlow(v202);
    v206 = (WebCore::EventNames **)(v199 + 1536);
    v207 = *(_QWORD *)(v205 + 40);
    if (!v207)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v205);
      v207 = *(_QWORD *)(v205 + 40);
    }
    v7 = (uint64_t)v238;
    v208 = *v206 != *(WebCore::EventNames **)(v207 + 1496) && *v206 != *(WebCore::EventNames **)(v207 + 1504);
    WebCore::PointerEvent::PointerEvent((WebCore::EventNames **)v203, v206, a3, v208, v200, v201 != 0, &v248, a7);
    v209 = WebCore::PointerCaptureController::dispatchEvent(a1, v203, v238);
    if (*((_DWORD *)v203 + 4) == 1)
      v209 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v203 + 8))(v203);
    else
      --*((_DWORD *)v203 + 4);
    v15 = (uint64_t)v239;
    v211 = v248;
    v248 = 0;
    if (v211)
    {
      if (*(_DWORD *)v211 == 1)
      {
        v228 = (uint64_t *)*((_QWORD *)v211 + 2);
        *((_QWORD *)v211 + 2) = 0;
        if (v228)
        {
          if (*v228)
            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v228, v210);
          WTF::fastFree((WTF *)v228, v210);
        }
        v229 = (unsigned int *)*((_QWORD *)v211 + 1);
        *((_QWORD *)v211 + 1) = 0;
        if (v229)
        {
          do
          {
            v230 = __ldaxr(v229);
            v231 = v230 - 1;
          }
          while (__stlxr(v231, v229));
          if (!v231)
          {
            atomic_store(1u, v229);
            WTF::fastFree((WTF *)v229, v210);
          }
        }
        v209 = (WebCore *)WTF::fastFree(v211, v210);
      }
      else
      {
        --*(_DWORD *)v211;
      }
    }
    v212 = *(_QWORD *)(StatusReg + 736);
    if (!v212 || (v213 = *(_QWORD *)(v212 + 96)) == 0)
      v213 = WebCore::threadGlobalDataSlow(v209);
    v214 = *(_QWORD *)(v213 + 40);
    if (!v214)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v213);
      v214 = *(_QWORD *)(v213 + 40);
    }
    WebCore::PointerCaptureController::dispatchEventForTouchAtIndex(WebCore::EventTarget &,WebCore::PlatformTouchEvent const&,unsigned int,BOOL,WebCore::WindowProxy &,WebCore::IntPoint const&)::$_1::operator()((WebCore::EventTarget *)v253, (_QWORD *)(v214 + 1504), v238);
    v215 = v251;
    v216 = *((_QWORD *)v251 + 3);
    *((_QWORD *)v251 + 3) = 0;
    if (v216)
    {
      if (*(_DWORD *)(v216 + 24) == 2)
      {
        if ((*(_WORD *)(v216 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v216, v192);
      }
      else
      {
        *(_DWORD *)(v216 + 24) -= 2;
      }
    }
    *((_BYTE *)v215 + 40) = 1;
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v192);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  if (v15)
  {
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v192);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
  }
  if (v251)
  {
    if (*(_DWORD *)v251 == 1)
    {
      WebCore::PointerCaptureController::CapturingData::~CapturingData(v251, (WTF::StringImpl *)v192);
      WTF::fastFree(v236, v237);
    }
    else
    {
      --*(_DWORD *)v251;
    }
  }
  result = v252;
  v252 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      return (WebCore::EventNames **)(*((uint64_t (**)(WebCore::EventNames **))*result + 1))(result);
    else
      --*((_DWORD *)result + 4);
  }
  return result;
}

WTF::StringImpl *WebCore::PointerCaptureController::ensureCapturingDataForPointerEvent(WebCore::PointerCaptureController *this, const WebCore::PointerEvent *a2, unsigned int a3, WTF::StringImpl *a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  WebCore::PointerCaptureController::CapturingData **v11;
  WebCore::PointerCaptureController::CapturingData *v12;
  WebCore::PointerCaptureController::CapturingData **v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  WebCore::PointerCaptureController::CapturingData *v21;
  WTF::StringImpl *result;
  WTF *v23;
  void *v24;
  WTF::StringImpl *v25;
  WebCore::PointerCaptureController::CapturingData *v26;

  v5 = (uint64_t *)((char *)a2 + 8);
  v6 = a3;
  if (a4)
    *(_DWORD *)a4 += 2;
  v25 = a4;
  v7 = *v5;
  if (*v5
    || (WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>>,WTF::IntHash<long long>,WTF::HashMap<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>,WTF::IntHash<long long>,WTF::SignedWithZeroKeyHashTraits<long long>,WTF::HashTraits<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SignedWithZeroKeyHashTraits<long long>>::expand((uint64_t *)a2 + 1, 0), (v7 = *v5) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v10 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v6) & v8;
  v11 = (WebCore::PointerCaptureController::CapturingData **)(v7 + 16 * v10);
  v12 = *v11;
  if (*v11 == (WebCore::PointerCaptureController::CapturingData *)0x8000000000000000)
  {
LABEL_14:
    *v11 = (WebCore::PointerCaptureController::CapturingData *)v6;
    WebCore::PointerCaptureController::CapturingData::create((WebCore::PointerCaptureController::CapturingData *)&v26, (const WTF::String *)&v25);
    WTF::GenericHashTraits<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>::assignToEmpty<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>(v11 + 1, (WTF::StringImpl *)&v26);
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
      {
        WebCore::PointerCaptureController::CapturingData::~CapturingData(v26, v9);
        WTF::fastFree(v23, v24);
      }
      else
      {
        --*(_DWORD *)v26;
      }
    }
    v15 = *v5;
    if (*v5)
      v16 = *(_DWORD *)(v15 - 12) + 1;
    else
      v16 = 1;
    *(_DWORD *)(v15 - 12) = v16;
    v17 = *v5;
    if (*v5)
      v18 = *(_DWORD *)(v17 - 12);
    else
      v18 = 0;
    v19 = (*(_DWORD *)(v17 - 16) + v18);
    v20 = *(unsigned int *)(v17 - 4);
    if (v20 > 0x400)
    {
      if (v20 > 2 * v19)
        goto LABEL_24;
    }
    else if (3 * v20 > 4 * v19)
    {
      goto LABEL_24;
    }
    v11 = (WebCore::PointerCaptureController::CapturingData **)WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>>,WTF::IntHash<long long>,WTF::HashMap<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>,WTF::IntHash<long long>,WTF::SignedWithZeroKeyHashTraits<long long>,WTF::HashTraits<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SignedWithZeroKeyHashTraits<long long>>::expand(v5, (WTF::StringImpl *)v11);
    goto LABEL_24;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != (WebCore::PointerCaptureController::CapturingData *)v6)
  {
    if (v12 == (WebCore::PointerCaptureController::CapturingData *)0x7FFFFFFFFFFFFFFFLL)
      v13 = v11;
    v10 = (v10 + v14) & v8;
    v11 = (WebCore::PointerCaptureController::CapturingData **)(v7 + 16 * v10);
    v12 = *v11;
    ++v14;
    if (*v11 == (WebCore::PointerCaptureController::CapturingData *)0x8000000000000000)
    {
      if (v13)
      {
        *v13 = (WebCore::PointerCaptureController::CapturingData *)0x8000000000000000;
        v13[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        v11 = v13;
      }
      goto LABEL_14;
    }
  }
LABEL_24:
  v21 = v11[1];
  ++*(_DWORD *)v21;
  *(_QWORD *)this = v21;
  result = v25;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v25, v9);
    else
      *(_DWORD *)v25 -= 2;
  }
  return result;
}

uint64_t WebCore::hierarchyHasCapturingEventListeners(uint64_t this, WebCore::Element *a2, const WTF::AtomString *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!this)
    return this;
  v4 = this;
  *(_DWORD *)(this + 24) += 2;
  while (1)
  {
    v5 = v4;
    v6 = *(_QWORD *)(v4 + 16);
    if ((v6 & 0x1000000000000) != 0)
    {
      v14 = v6 & 0xFFFFFFFFFFFFLL;
      v15 = *(unsigned int *)(v14 + 28);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(v14 + 16);
        v17 = 32 * v15;
        while (*(_QWORD *)v16 != *(_QWORD *)a2)
        {
          v16 += 32;
          v17 -= 32;
          if (!v17)
            goto LABEL_4;
        }
        v19 = *(unsigned int *)(v16 + 20);
        if ((_DWORD)v19)
          break;
      }
    }
LABEL_4:
    v7 = (uint64_t *)(v4 + 32);
    v8 = *(_QWORD *)(v4 + 32);
    if (!v8
      || (*(_WORD *)(v8 + 28) & 8) == 0
      || (v9 = *(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || (v11 = *(_QWORD *)(v9 + 88)) == 0
      || (v12 = *(_QWORD *)(v11 + 224)) == 0
      || (v13 = (*(uint64_t (**)(uint64_t, uint64_t, const WTF::AtomString *))(*(_QWORD *)v12 + 16))(v12, v4, a3), v7 = (uint64_t *)(v4 + 32), v5 = v4, (v4 = v13) == 0))
    {
      if ((*(_WORD *)(v5 + 28) & 0x80) != 0)
      {
        v18 = *(_QWORD *)(v5 + 200);
        if (!v18)
        {
          v4 = 0;
LABEL_27:
          v10 = 1;
          goto LABEL_10;
        }
        v7 = (uint64_t *)(v18 + 8);
      }
      v4 = *v7;
      if (!*v7)
        goto LABEL_27;
    }
    v10 = 0;
    *(_DWORD *)(v4 + 24) += 2;
LABEL_10:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    if ((v10 & 1) != 0)
      return 0;
  }
  v20 = *(_QWORD *)(v16 + 8);
  v21 = 8 * v19;
  while ((*(_BYTE *)(*(_QWORD *)v20 + 4) & 1) == 0)
  {
    v20 += 8;
    v21 -= 8;
    if (!v21)
      goto LABEL_4;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return 1;
}

WebCore::PointerCaptureController::CapturingData *WebCore::PointerCaptureController::dispatchEvent(WebCore::PointerCaptureController::CapturingData *this, WebCore::PointerEvent *a2, WebCore::EventTarget *a3)
{
  unsigned int *v5;
  WTF *v6;
  const WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  char v11;
  const WTF::StringImpl *v12;

  if (a3 && !*((_QWORD *)a2 + 6))
  {
    v5 = (unsigned int *)this;
    v6 = (WTF *)*((_QWORD *)a2 + 29);
    if (v6)
      *(_DWORD *)v6 += 2;
    {
      v7 = (const WTF::StringImpl *)WebCore::mousePointerEventType(void)::mouseType;
    }
    else
    {
      v7 = (const WTF::StringImpl *)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
      WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
      WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    }
    v8 = WTF::equal(v6, v7, a3);
    v11 = v8;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v9);
        if ((v11 & 1) != 0)
          goto LABEL_12;
        goto LABEL_11;
      }
      *(_DWORD *)v6 -= 2;
    }
    if ((v8 & 1) != 0)
    {
LABEL_12:
      WebCore::PointerCaptureController::pointerEventWillBeDispatched(v5, a2, a3);
      (*(void (**)(WebCore::EventTarget *, WebCore::PointerEvent *))(*(_QWORD *)a3 + 48))(a3, a2);
      return WebCore::PointerCaptureController::pointerEventWasDispatched((WebCore::PointerCaptureController::CapturingData *)v5, a2, v12);
    }
LABEL_11:
    WebCore::PointerCaptureController::processPendingPointerCapture((WebCore::PointerCaptureController::CapturingData *)v5, (WTF::StringImpl *)*((unsigned int *)a2 + 44), v10);
    goto LABEL_12;
  }
  return this;
}

WebCore::EventTarget *WebCore::PointerCaptureController::dispatchEventForTouchAtIndex(WebCore::EventTarget &,WebCore::PlatformTouchEvent const&,unsigned int,BOOL,WebCore::WindowProxy &,WebCore::IntPoint const&)::$_1::operator()(WebCore::EventTarget *result, _QWORD *a2, WebCore::Node *this)
{
  WebCore::EventTarget *v3;
  _QWORD *v4;
  WebCore::EventTarget *v5;
  WebCore::EventTarget *v6;
  WebCore::EventTarget *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::EventTarget **v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WebCore::EventTarget *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  WTF *v33;
  WTF *v34;
  WebCore::EventTarget **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  char v40;
  uint64_t v41;
  unint64_t StatusReg;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::EventTarget **v46;
  WebCore::EventTarget **v47;
  uint64_t *v48;
  unsigned int v49;
  WTF *v50;
  int v51;
  uint64_t *v52;
  WebCore *v53;
  WebCore *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  WTF *v59;
  uint64_t *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  WebCore::EventTarget **v64;
  uint64_t *v65;
  unsigned int v66;
  WTF *v67;
  int v68;
  uint64_t *v69;
  WebCore *v70;
  WebCore *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  WebCore::EventTarget *v76;
  WTF *v77;
  uint64_t *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  WebCore::PointerCaptureController::CapturingData *v84;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  _BYTE v89[264];

  v3 = this;
  v4 = a2;
  v5 = result;
  v84 = *(WebCore::PointerCaptureController::CapturingData **)result;
  *((_DWORD *)this + 6) += 2;
  v6 = this;
  while (1)
  {
    v7 = v6;
    v8 = *((_QWORD *)v6 + 2);
    if ((v8 & 0x1000000000000) != 0)
    {
      v14 = v8 & 0xFFFFFFFFFFFFLL;
      v15 = *(unsigned int *)(v14 + 28);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(v14 + 16);
        v17 = 32 * v15;
        while (*(_QWORD *)v16 != *v4)
        {
          v16 += 32;
          v17 -= 32;
          if (!v17)
            goto LABEL_3;
        }
        v19 = *(unsigned int *)(v16 + 20);
        if ((_DWORD)v19)
          break;
      }
    }
LABEL_3:
    v10 = (WebCore::EventTarget **)((char *)v6 + 32);
    v9 = *((_QWORD *)v6 + 4);
    if (!v9
      || (*(_WORD *)(v9 + 28) & 8) == 0
      || (v11 = *(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || (v13 = *(_QWORD *)(v11 + 88)) == 0
      || (result = *(WebCore::EventTarget **)(v13 + 224)) == 0
      || (result = (WebCore::EventTarget *)(*(uint64_t (**)(WebCore::EventTarget *, WebCore::EventTarget *))(*(_QWORD *)result + 16))(result, v6), (v6 = result) == 0))
    {
      if ((*((_WORD *)v7 + 14) & 0x80) != 0)
      {
        v18 = *((_QWORD *)v7 + 25);
        if (!v18)
        {
          v6 = 0;
LABEL_26:
          v12 = 1;
          goto LABEL_9;
        }
        v10 = (WebCore::EventTarget **)(v18 + 8);
      }
      v6 = *v10;
      if (!*v10)
        goto LABEL_26;
    }
    v12 = 0;
    *((_DWORD *)v6 + 6) += 2;
LABEL_9:
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        result = (WebCore::EventTarget *)WebCore::Node::removedLastRef(v7, a2);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
    if ((v12 & 1) != 0)
    {
      v22 = 1;
      goto LABEL_33;
    }
  }
  v20 = *(_QWORD *)(v16 + 8);
  v21 = 8 * v19;
  while ((*(_BYTE *)(*(_QWORD *)v20 + 4) & 1) == 0)
  {
    v20 += 8;
    v21 -= 8;
    if (!v21)
      goto LABEL_3;
  }
  if (*((_DWORD *)v6 + 6) == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      result = (WebCore::EventTarget *)WebCore::Node::removedLastRef(v6, a2);
    v22 = 0;
    v4 = a2;
  }
  else
  {
    v22 = 0;
    *((_DWORD *)v6 + 6) -= 2;
  }
LABEL_33:
  v87 = (WTF *)v89;
  v88 = 32;
  *((_DWORD *)v3 + 6) += 2;
  while (2)
  {
    v23 = v3;
    if (v22)
    {
      v24 = *((_QWORD *)v3 + 2);
      if ((v24 & 0x1000000000000) != 0)
      {
        v25 = v24 & 0xFFFFFFFFFFFFLL;
        v26 = *(unsigned int *)(v25 + 28);
        if ((_DWORD)v26)
        {
          v27 = *(_QWORD **)(v25 + 16);
          v28 = 32 * v26;
          while (*v27 != *v4)
          {
            v27 += 4;
            v28 -= 32;
            if (!v28)
              goto LABEL_57;
          }
          goto LABEL_41;
        }
      }
    }
    else
    {
LABEL_41:
      v29 = HIDWORD(v88);
      if (HIDWORD(v88) == (_DWORD)v88)
      {
        v30 = HIDWORD(v88) + ((unint64_t)HIDWORD(v88) >> 2);
        if (v30 >= 0x10)
          v31 = v30 + 1;
        else
          v31 = 16;
        if (v31 <= (unint64_t)HIDWORD(v88) + 1)
          v32 = HIDWORD(v88) + 1;
        else
          v32 = v31;
        v33 = v87;
        if (v32 < 0x21)
        {
          v87 = (WTF *)v89;
          LODWORD(v88) = 32;
          v34 = (WTF *)v89;
        }
        else
        {
          if (v32 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v34 = (WTF *)WTF::fastMalloc((WTF *)(8 * v32));
          LODWORD(v88) = v32;
          v87 = v34;
        }
        result = (WebCore::EventTarget *)memcpy(v34, v33, 8 * HIDWORD(v88));
        if (v89 != (_BYTE *)v33 && v33)
        {
          if (v87 == v33)
          {
            v87 = 0;
            LODWORD(v88) = 0;
          }
          result = (WebCore::EventTarget *)WTF::fastFree(v33, a2);
        }
        v29 = HIDWORD(v88);
        v35 = (WebCore::EventTarget **)((char *)v87 + 8 * HIDWORD(v88));
      }
      else
      {
        v35 = (WebCore::EventTarget **)((char *)v87 + 8 * HIDWORD(v88));
      }
      *((_DWORD *)v23 + 6) += 2;
      *v35 = v23;
      HIDWORD(v88) = v29 + 1;
    }
LABEL_57:
    v36 = *((_QWORD *)v23 + 4);
    if (!v36
      || (*(_WORD *)(v36 + 28) & 8) == 0
      || (v37 = *(_QWORD *)(v36 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || (v41 = *(_QWORD *)(v37 + 88)) == 0
      || (result = *(WebCore::EventTarget **)(v41 + 224)) == 0
      || (result = (WebCore::EventTarget *)(*(uint64_t (**)(WebCore::EventTarget *, WebCore::EventTarget *))(*(_QWORD *)result + 16))(result, v23), (v3 = result) == 0))
    {
      if ((~*((unsigned __int16 *)v23 + 14) & 0x408) != 0
        || (result = (WebCore::EventTarget *)(*(uint64_t (**)(WebCore::EventTarget *))(*(_QWORD *)v23 + 368))(v23),
            !(_DWORD)result))
      {
        v3 = (WebCore::EventTarget *)*((_QWORD *)v23 + 4);
        if (!v3)
        {
LABEL_69:
          v40 = 1;
          goto LABEL_74;
        }
        v39 = *((_WORD *)v3 + 14);
        if ((v39 & 0x80) != 0)
        {
          v38 = *((_QWORD *)v3 + 25);
          if (v38)
          {
LABEL_63:
            v3 = *(WebCore::EventTarget **)(v38 + 8);
            if (v3)
              goto LABEL_73;
            goto LABEL_69;
          }
        }
        else if ((v39 & 8) != 0)
        {
          goto LABEL_73;
        }
      }
      else
      {
        v38 = *((_QWORD *)v23 + 14);
        if (v38)
          goto LABEL_63;
      }
      v3 = 0;
      goto LABEL_69;
    }
LABEL_73:
    v40 = 0;
    *((_DWORD *)v3 + 6) += 2;
LABEL_74:
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        result = (WebCore::EventTarget *)WebCore::Node::removedLastRef(v23, a2);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
    if ((v40 & 1) == 0)
      continue;
    break;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v43 = *(_QWORD *)(StatusReg + 736);
  if (!v43 || (v44 = *(_QWORD *)(v43 + 96)) == 0)
  {
    result = (WebCore::EventTarget *)WebCore::threadGlobalDataSlow(result);
    v44 = (uint64_t)result;
  }
  v45 = *(_QWORD *)(v44 + 40);
  if (!v45)
  {
    result = (WebCore::EventTarget *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v44);
    v45 = *(_QWORD *)(v44 + 40);
  }
  v46 = (WebCore::EventTarget **)v87;
  if (*v4 == *(_QWORD *)(v45 + 1496))
  {
    if (HIDWORD(v88))
    {
      v64 = (WebCore::EventTarget **)((char *)v87 + 8 * HIDWORD(v88));
      do
      {
        v65 = (uint64_t *)*((_QWORD *)v5 + 1);
        v66 = **((_DWORD **)v5 + 2);
        v67 = (WTF *)*((_QWORD *)v5 + 4);
        v68 = **((unsigned __int8 **)v5 + 3);
        ++*(_DWORD *)v67;
        v86 = v67;
        v69 = (uint64_t *)*((_QWORD *)v5 + 5);
        v70 = (WebCore *)bmalloc::api::isoAllocate();
        v71 = v70;
        v72 = *(_QWORD *)(StatusReg + 736);
        if (!v72 || (v73 = *(_QWORD *)(v72 + 96)) == 0)
          v73 = WebCore::threadGlobalDataSlow(v70);
        v74 = *(_QWORD *)(v73 + 40);
        if (!v74)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v73);
          v74 = *(_QWORD *)(v73 + 40);
        }
        v75 = *a2 != *(_QWORD *)(v74 + 1496) && *a2 != *(_QWORD *)(v74 + 1504);
        WebCore::PointerEvent::PointerEvent((WebCore::EventNames **)v71, (WebCore::EventNames **)a2, v65, v75, v66, v68 != 0, &v86, v69);
        v76 = *--v64;
        result = WebCore::PointerCaptureController::dispatchEvent(v84, v71, v76);
        if (*((_DWORD *)v71 + 4) == 1)
          result = (WebCore::EventTarget *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v71 + 8))(v71);
        else
          --*((_DWORD *)v71 + 4);
        v77 = v86;
        v86 = 0;
        if (v77)
        {
          if (*(_DWORD *)v77 == 1)
          {
            v78 = (uint64_t *)*((_QWORD *)v77 + 2);
            *((_QWORD *)v77 + 2) = 0;
            if (v78)
            {
              if (*v78)
                WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v78, (WTF::StringImpl *)a2);
              WTF::fastFree((WTF *)v78, a2);
            }
            v79 = (unsigned int *)*((_QWORD *)v77 + 1);
            *((_QWORD *)v77 + 1) = 0;
            if (v79)
            {
              do
              {
                v80 = __ldaxr(v79);
                v81 = v80 - 1;
              }
              while (__stlxr(v81, v79));
              if (!v81)
              {
                atomic_store(1u, v79);
                WTF::fastFree((WTF *)v79, a2);
              }
            }
            result = (WebCore::EventTarget *)WTF::fastFree(v77, a2);
          }
          else
          {
            --*(_DWORD *)v77;
          }
        }
      }
      while (v64 != v46);
LABEL_145:
      v46 = (WebCore::EventTarget **)v87;
      if (HIDWORD(v88))
      {
        v82 = 8 * HIDWORD(v88);
        do
        {
          result = *v46;
          *v46 = 0;
          if (result)
          {
            if (*((_DWORD *)result + 6) == 2)
            {
              if ((*((_WORD *)result + 15) & 0x400) == 0)
                result = (WebCore::EventTarget *)WebCore::Node::removedLastRef(result, a2);
            }
            else
            {
              *((_DWORD *)result + 6) -= 2;
            }
          }
          ++v46;
          v82 -= 8;
        }
        while (v82);
        v46 = (WebCore::EventTarget **)v87;
      }
    }
  }
  else if (HIDWORD(v88))
  {
    v47 = (WebCore::EventTarget **)((char *)v87 + 8 * HIDWORD(v88));
    do
    {
      v48 = (uint64_t *)*((_QWORD *)v5 + 1);
      v49 = **((_DWORD **)v5 + 2);
      v50 = (WTF *)*((_QWORD *)v5 + 4);
      v51 = **((unsigned __int8 **)v5 + 3);
      ++*(_DWORD *)v50;
      v86 = v50;
      v52 = (uint64_t *)*((_QWORD *)v5 + 5);
      v53 = (WebCore *)bmalloc::api::isoAllocate();
      v54 = v53;
      v55 = *(_QWORD *)(StatusReg + 736);
      if (!v55 || (v56 = *(_QWORD *)(v55 + 96)) == 0)
        v56 = WebCore::threadGlobalDataSlow(v53);
      v57 = *(_QWORD *)(v56 + 40);
      if (!v57)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v56);
        v57 = *(_QWORD *)(v56 + 40);
      }
      v58 = *a2 != *(_QWORD *)(v57 + 1496) && *a2 != *(_QWORD *)(v57 + 1504);
      WebCore::PointerEvent::PointerEvent((WebCore::EventNames **)v54, (WebCore::EventNames **)a2, v48, v58, v49, v51 != 0, &v86, v52);
      result = WebCore::PointerCaptureController::dispatchEvent(v84, v54, *v46);
      if (*((_DWORD *)v54 + 4) == 1)
        result = (WebCore::EventTarget *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v54 + 8))(v54);
      else
        --*((_DWORD *)v54 + 4);
      v59 = v86;
      v86 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 1)
        {
          v60 = (uint64_t *)*((_QWORD *)v59 + 2);
          *((_QWORD *)v59 + 2) = 0;
          if (v60)
          {
            if (*v60)
              WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v60, (WTF::StringImpl *)a2);
            WTF::fastFree((WTF *)v60, a2);
          }
          v61 = (unsigned int *)*((_QWORD *)v59 + 1);
          *((_QWORD *)v59 + 1) = 0;
          if (v61)
          {
            do
            {
              v62 = __ldaxr(v61);
              v63 = v62 - 1;
            }
            while (__stlxr(v63, v61));
            if (!v63)
            {
              atomic_store(1u, v61);
              WTF::fastFree((WTF *)v61, a2);
            }
          }
          result = (WebCore::EventTarget *)WTF::fastFree(v59, a2);
        }
        else
        {
          --*(_DWORD *)v59;
        }
      }
      ++v46;
    }
    while (v46 != v47);
    goto LABEL_145;
  }
  if (v89 != (_BYTE *)v46 && v46 != 0)
  {
    v87 = 0;
    LODWORD(v88) = 0;
    return (WebCore::EventTarget *)WTF::fastFree((WTF *)v46, a2);
  }
  return result;
}

WebCore::PointerCaptureController::CapturingData *WebCore::PointerCaptureController::pointerEventForMouseEvent@<X0>(WebCore::PointerCaptureController::CapturingData *this@<X0>, const WebCore::MouseEvent *a2@<X1>, WTF **a3@<X3>, const WTF::StringImpl *a4@<X2>, WebCore::EventNames ***a5@<X8>)
{
  WebCore::PointerCaptureController::CapturingData *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  const WTF::StringImpl *v13;
  _QWORD *v14;
  unint64_t StatusReg;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  char v28;
  int v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WebCore::EventNames **v45;
  WTF *v46;
  void *v47;
  int v48;
  unsigned int v51;
  WebCore::PointerCaptureController::CapturingData *v52;

  v51 = a4;
  v6 = this;
  v7 = *((_QWORD *)this + 1);
  if (!v7)
  {
    v10 = 0;
    v8 = 0;
LABEL_10:
    v9 = (_QWORD *)(v7 + 16 * v8);
    goto LABEL_11;
  }
  v8 = *(unsigned int *)(v7 - 4);
  v9 = (_QWORD *)(v7 + 16 * v8);
  if (!*(_DWORD *)(v7 - 12))
  {
    v10 = (_QWORD *)(v7 + 16 * v8);
    goto LABEL_10;
  }
  v10 = (_QWORD *)*((_QWORD *)this + 1);
  if ((_DWORD)v8)
  {
    v11 = 16 * v8;
    v10 = (_QWORD *)*((_QWORD *)this + 1);
    while ((unint64_t)(*v10 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
    {
      v10 += 2;
      v11 -= 16;
      if (!v11)
      {
        v10 = v9;
        break;
      }
    }
  }
LABEL_11:
  if (v7)
    v12 = (_QWORD *)(v7 + 16 * *(unsigned int *)(v7 - 4));
  else
    v12 = 0;
  if (v12 == v10)
  {
LABEL_27:
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v16 = *(_QWORD *)(StatusReg + 736);
    if (!v16 || (v17 = *(_QWORD *)(v16 + 96)) == 0)
    {
      this = (WebCore::PointerCaptureController::CapturingData *)WebCore::threadGlobalDataSlow(this);
      v17 = (uint64_t)this;
    }
    v18 = *(_QWORD **)(v17 + 40);
    if (!v18)
    {
      this = (WebCore::PointerCaptureController::CapturingData *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v17);
      v18 = *(_QWORD **)(v17 + 40);
    }
    v19 = *((_QWORD *)v6 + 1);
    if (v19)
    {
      v20 = *(_DWORD *)(v19 - 8);
      v21 = ~((unint64_t)v51 << 32) + v51;
      v22 = 9
          * (((v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13)) ^ (((v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v20 & ((v23 >> 31) ^ v23);
      v25 = *(_QWORD *)(v19 + 16 * v24);
      if (v25 == v51)
      {
LABEL_37:
        v27 = *(unsigned __int8 **)(v19 + 16 * v24 + 8);
        if (v27)
        {
          v28 = 0;
          ++*(_DWORD *)v27;
          v29 = v27[43];
          if ((unsigned __int16)(*((_WORD *)a2 + 77) + 2) >= 5u)
            LOBYTE(v30) = 3;
          else
            LOBYTE(v30) = *((_WORD *)a2 + 77);
          v48 = v27[44];
          v31 = 1;
          goto LABEL_47;
        }
      }
      else
      {
        v26 = 1;
        while (v25 != 0x8000000000000000)
        {
          v24 = ((_DWORD)v24 + v26) & v20;
          v25 = *(_QWORD *)(v19 + 16 * v24);
          ++v26;
          if (v25 == v51)
            goto LABEL_37;
        }
      }
    }
    v30 = *((unsigned __int16 *)a2 + 77);
    v29 = 0;
    v27 = 0;
    v31 = 0;
    v32 = v30 >= 3 && v30 - 65534 > 1;
    v48 = 255;
    v28 = 1;
    if (v32)
      LOBYTE(v30) = 3;
LABEL_47:
    v33 = *(_QWORD *)(StatusReg + 736);
    if (!v33 || (v34 = *(_QWORD *)(v33 + 96)) == 0)
    {
      this = (WebCore::PointerCaptureController::CapturingData *)WebCore::threadGlobalDataSlow(this);
      v34 = (uint64_t)this;
    }
    v35 = *(_QWORD **)(v34 + 40);
    if (!v35)
    {
      this = (WebCore::PointerCaptureController::CapturingData *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v34);
      v35 = *(_QWORD **)(v34 + 40);
    }
    v36 = *((_QWORD *)a2 + 3);
    if (v36 == v35[151])
    {
      v37 = (WTF::StringImpl *)v35[186];
      if (!v37)
      {
LABEL_63:
        v38 = *(_QWORD *)(StatusReg + 736);
        if (!v38 || (v39 = *(_QWORD *)(v38 + 96)) == 0)
          v39 = WebCore::threadGlobalDataSlow(this);
        v40 = *(_QWORD *)(v39 + 40);
        if (!v40)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v39);
          v40 = *(_QWORD *)(v39 + 40);
        }
        if (v37 == *(WTF::StringImpl **)(v40 + 1552))
        {
          v41 = 1;
          if (!v37)
            goto LABEL_74;
        }
        else
        {
          v41 = v37 == *(WTF::StringImpl **)(v40 + 1488);
          if (!v37)
            goto LABEL_74;
        }
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::destroy(v37, a2);
          if (v41)
            goto LABEL_77;
LABEL_75:
          v42 = -1;
          if (!v29 || v48 == v30)
          {
LABEL_78:
            v43 = *((_QWORD *)a2 + 3);
            if (v43 == v18[151])
            {
              if (!v29)
                goto LABEL_82;
            }
            else if (v43 != v18[157] || !v29 || !*((_WORD *)a2 + 78))
            {
LABEL_82:
              this = (WebCore::PointerCaptureController::CapturingData *)WebCore::PointerEvent::create((WebCore *)v42, a2, v51, a3, a5);
              if (v31)
              {
                v27[44] = v30;
                if ((v28 & 1) != 0)
                  return this;
              }
              else
              {
                if (*a5)
                {
                  WebCore::PointerCaptureController::ensureCapturingDataForPointerEvent((WebCore::PointerCaptureController *)&v52, v6, *((_DWORD *)*a5 + 44), (*a5)[29]);
                  this = v52;
                  *((_BYTE *)v52 + 44) = v30;
                  if (*(_DWORD *)this == 1)
                  {
                    WebCore::PointerCaptureController::CapturingData::~CapturingData(this, v44);
                    this = (WebCore::PointerCaptureController::CapturingData *)WTF::fastFree(v46, v47);
                    if ((v28 & 1) != 0)
                      return this;
                    return WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref((WebCore::PointerCaptureController::CapturingData *)v27, v44);
                  }
                  --*(_DWORD *)this;
                }
                if ((v28 & 1) != 0)
                  return this;
              }
              return WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref((WebCore::PointerCaptureController::CapturingData *)v27, v44);
            }
            v45 = (WebCore::EventNames **)bmalloc::api::isoAllocate();
            this = (WebCore::PointerCaptureController::CapturingData *)WebCore::PointerEvent::PointerEvent(v45, v18 + 191, v42, (uint64_t)a2, v51, a3);
            *a5 = (WebCore::EventNames **)this;
            if ((v28 & 1) != 0)
              return this;
            return WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref((WebCore::PointerCaptureController::CapturingData *)v27, v44);
          }
LABEL_77:
          v42 = v30;
          goto LABEL_78;
        }
        *(_DWORD *)v37 -= 2;
LABEL_74:
        if (v41)
          goto LABEL_77;
        goto LABEL_75;
      }
    }
    else if (v36 == v35[156])
    {
      v37 = (WTF::StringImpl *)v35[193];
      if (!v37)
        goto LABEL_63;
    }
    else if (v36 == v35[152])
    {
      v37 = (WTF::StringImpl *)v35[187];
      if (!v37)
        goto LABEL_63;
    }
    else if (v36 == v35[154])
    {
      v37 = (WTF::StringImpl *)v35[191];
      if (!v37)
        goto LABEL_63;
    }
    else if (v36 == v35[153])
    {
      v37 = (WTF::StringImpl *)v35[188];
      if (!v37)
        goto LABEL_63;
    }
    else if (v36 == v35[155])
    {
      v37 = (WTF::StringImpl *)v35[192];
      if (!v37)
        goto LABEL_63;
    }
    else if (v36 == v35[157])
    {
      v37 = (WTF::StringImpl *)v35[194];
      if (!v37)
        goto LABEL_63;
    }
    else
    {
      v37 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (!*MEMORY[0x1E0CBF2F8])
        goto LABEL_63;
    }
    *(_DWORD *)v37 += 2;
    goto LABEL_63;
  }
  while (1)
  {
    {
      v13 = (const WTF::StringImpl *)WebCore::touchPointerEventType(void)::touchType;
    }
    else
    {
      WebCore::touchPointerEventType(void)::$_0::operator() const(void)::impl += 2;
      WebCore::touchPointerEventType(void)::touchType = (uint64_t)&WebCore::touchPointerEventType(void)::$_0::operator() const(void)::impl;
      v13 = (const WTF::StringImpl *)&WebCore::touchPointerEventType(void)::$_0::operator() const(void)::impl;
    }
    this = (WebCore::PointerCaptureController::CapturingData *)WTF::equal(*(WTF **)(v10[1] + 32), v13, a4);
    if ((_DWORD)this)
    {
      if (!*(_BYTE *)(v10[1] + 40))
        break;
    }
    v14 = v10 + 2;
    v10 = v9;
    if (v14 != v9)
    {
      v10 = v14;
      while ((unint64_t)(*v10 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
      {
        v10 += 2;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
    if (v10 == v12)
      goto LABEL_27;
  }
  *a5 = 0;
  return this;
}

WebCore::PointerCaptureController::CapturingData *WebCore::PointerCaptureController::processPendingPointerCapture(WebCore::PointerCaptureController::CapturingData *this, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  int v4;
  WebCore::PointerCaptureController::CapturingData *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  WebCore::MouseRelatedEvent *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  const WTF::StringImpl *v32;
  WebCore *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  WebCore::MouseRelatedEvent *v46;
  uint64_t v47;
  WebCore::MouseRelatedEvent *v48;
  WebCore::MouseRelatedEvent *v49;
  WebCore::MouseRelatedEvent *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WebCore::MouseRelatedEvent *v53;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return this;
  v4 = (int)a2;
  v5 = this;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = ~((unint64_t)a2 << 32) + a2;
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(_QWORD *)(v3 + 16 * v10);
  if (v11 == a2)
  {
LABEL_6:
    v13 = *(_QWORD *)(v3 + 16 * v10 + 8);
    if (!v13)
      return this;
    ++*(_DWORD *)v13;
    if (*((_BYTE *)this + 16))
      return WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref((WebCore::PointerCaptureController::CapturingData *)v13, a2);
    *((_BYTE *)this + 16) = 1;
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
      *(_DWORD *)(v14 + 24) += 2;
    v15 = *(_QWORD *)(v13 + 16);
    if (v15)
    {
      *(_DWORD *)(v15 + 24) += 2;
      if (v15 != v14)
      {
        if ((*(_BYTE *)(v15 + 22) & 8) != 0)
        {
          v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v16 || (v17 = *(_QWORD *)(v16 + 96)) == 0)
            v17 = WebCore::threadGlobalDataSlow(this);
          v18 = *(_QWORD *)(v17 + 40);
          if (!v18)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v17);
            v18 = *(_QWORD *)(v17 + 40);
          }
          v19 = (WTF::StringImpl *)(v18 + 1168);
          v20 = *(unsigned __int8 *)(v13 + 41);
          v21 = *(WTF::StringImpl **)(v13 + 32);
          if (v21)
            *(_DWORD *)v21 += 2;
          v52 = v21;
          WebCore::PointerEvent::createForPointerCapture(&v53, v19, v4, v20 != 0, &v52);
          v22 = v53;
          (*(void (**)(uint64_t, WebCore::MouseRelatedEvent *))(*(_QWORD *)v15 + 48))(v15, v53);
          if (v22)
          {
            if (*((_DWORD *)v22 + 4) == 1)
              (*(void (**)(WebCore::MouseRelatedEvent *))(*(_QWORD *)v22 + 8))(v22);
            else
              --*((_DWORD *)v22 + 4);
          }
          v24 = v52;
          v52 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
        }
        {
          v25 = (const WTF::StringImpl *)WebCore::mousePointerEventType(void)::mouseType;
        }
        else
        {
          v25 = (const WTF::StringImpl *)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
          WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
          WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
        }
        if (WTF::equal(*(WTF **)(v13 + 32), v25, a3))
        {
          v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40) + 8) + 528);
          if (v26)
          {
            v27 = *(_QWORD *)(v26 + 8);
            if (v27)
            {
              v28 = (unsigned int *)(v27 + 8);
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 + 1, v28));
              WebCore::EventHandler::pointerCaptureElementDidChange(*(WebCore::EventHandler **)(v27 + 640), 0);
              do
              {
                v30 = __ldaxr(v28);
                v31 = v30 - 1;
              }
              while (__stlxr(v31, v28));
              if (!v31)
              {
                atomic_store(1u, v28);
                v48 = (WebCore::MouseRelatedEvent *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v48 = off_1E31FE290;
                *((_QWORD *)v48 + 1) = v28;
                v53 = v48;
                WTF::ensureOnMainThread();
                v49 = v53;
                v53 = 0;
                if (v49)
                  (*(void (**)(WebCore::MouseRelatedEvent *))(*(_QWORD *)v49 + 8))(v49);
              }
            }
          }
        }
      }
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    if (!*(_QWORD *)(v13 + 8) || *(_QWORD *)(v13 + 16) == v14)
    {
      if (!v14)
      {
LABEL_65:
        v47 = *(_QWORD *)(v13 + 16);
        *(_QWORD *)(v13 + 16) = v14;
        if (v47)
        {
          if (*(_DWORD *)(v47 + 24) == 2)
          {
            if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v47, a2);
          }
          else
          {
            *(_DWORD *)(v47 + 24) -= 2;
          }
        }
        *((_BYTE *)v5 + 16) = 0;
        if (v14)
        {
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
        }
        return WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref((WebCore::PointerCaptureController::CapturingData *)v13, a2);
      }
    }
    else
    {
      {
        v32 = (const WTF::StringImpl *)WebCore::mousePointerEventType(void)::mouseType;
      }
      else
      {
        v32 = (const WTF::StringImpl *)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
        WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
        WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
      }
      v33 = (WebCore *)WTF::equal(*(WTF **)(v13 + 32), v32, a3);
      if ((_DWORD)v33)
      {
        v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 8) + 528);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 8);
          if (v35)
          {
            v36 = (unsigned int *)(v35 + 8);
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 + 1, v36));
            v33 = (WebCore *)WebCore::EventHandler::pointerCaptureElementDidChange(*(WebCore::EventHandler **)(v35 + 640), (WebCore::Element *)v14);
            do
            {
              v38 = __ldaxr(v36);
              v39 = v38 - 1;
            }
            while (__stlxr(v39, v36));
            if (!v39)
            {
              atomic_store(1u, v36);
              v50 = (WebCore::MouseRelatedEvent *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v50 = off_1E31FE290;
              *((_QWORD *)v50 + 1) = v36;
              v53 = v50;
              WTF::ensureOnMainThread();
              v33 = v53;
              v53 = 0;
              if (v33)
                v33 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v33 + 8))(v33);
            }
          }
        }
      }
      v40 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v40 || (v41 = *(_QWORD *)(v40 + 96)) == 0)
        v41 = WebCore::threadGlobalDataSlow(v33);
      v42 = *(_QWORD *)(v41 + 40);
      if (!v42)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v41);
        v42 = *(_QWORD *)(v41 + 40);
      }
      v43 = (WTF::StringImpl *)(v42 + 952);
      v44 = *(unsigned __int8 *)(v13 + 41);
      v45 = *(WTF::StringImpl **)(v13 + 32);
      if (v45)
        *(_DWORD *)v45 += 2;
      v51 = v45;
      WebCore::PointerEvent::createForPointerCapture(&v53, v43, v4, v44 != 0, &v51);
      v46 = v53;
      (*(void (**)(uint64_t, WebCore::MouseRelatedEvent *))(*(_QWORD *)v14 + 48))(v14, v53);
      if (v46)
      {
        if (*((_DWORD *)v46 + 4) == 1)
          (*(void (**)(WebCore::MouseRelatedEvent *))(*(_QWORD *)v46 + 8))(v46);
        else
          --*((_DWORD *)v46 + 4);
      }
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, a2);
        else
          *(_DWORD *)v51 -= 2;
      }
    }
    *(_DWORD *)(v14 + 24) += 2;
    goto LABEL_65;
  }
  v12 = 1;
  while (v11 != 0x8000000000000000)
  {
    v10 = ((_DWORD)v10 + v12) & v6;
    v11 = *(_QWORD *)(v3 + 16 * v10);
    ++v12;
    if (v11 == a2)
      goto LABEL_6;
  }
  return this;
}

unsigned int *WebCore::PointerCaptureController::pointerEventWillBeDispatched(unsigned int *this, const WebCore::PointerEvent *a2, WebCore::EventTarget *a3)
{
  unsigned int *v5;
  unint64_t StatusReg;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  WTF *v18;
  const WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  char v22;
  WebCore::PointerCaptureController::CapturingData *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  WebCore::PointerCaptureController::CapturingData *v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  char v38;
  WebCore::PointerCaptureController::CapturingData *v39;

  if (a3 && (*((_BYTE *)a3 + 22) & 2) != 0 && (*((_WORD *)a3 + 14) & 8) != 0)
  {
    v5 = this;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v7 = *(_QWORD *)(StatusReg + 736);
    if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    {
      this = (unsigned int *)WebCore::threadGlobalDataSlow((WebCore *)this);
      v8 = (uint64_t)this;
    }
    v9 = *(_QWORD *)(v8 + 40);
    if (!v9)
    {
      this = (unsigned int *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
      v9 = *(_QWORD *)(v8 + 40);
    }
    v10 = *((_QWORD *)a2 + 3);
    v11 = *(_QWORD *)(v9 + 1488);
    v12 = *(_QWORD *)(StatusReg + 736);
    if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    {
      this = (unsigned int *)WebCore::threadGlobalDataSlow((WebCore *)this);
      v13 = (uint64_t)this;
    }
    v14 = *(_QWORD *)(v13 + 40);
    if (!v14)
    {
      this = (unsigned int *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
      v14 = *(_QWORD *)(v13 + 40);
    }
    v15 = *(_QWORD *)(v14 + 1552);
    if (v10 == v11 || *((_QWORD *)a2 + 3) == v15)
    {
      if ((*((_BYTE *)a3 + 22) & 2) == 0 || (*((_WORD *)a3 + 14) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196044D90);
      }
      v17 = *((unsigned int *)a2 + 44);
      v18 = (WTF *)*((_QWORD *)a2 + 29);
      if (v18)
        *(_DWORD *)v18 += 2;
      {
        v19 = (const WTF::StringImpl *)WebCore::touchPointerEventType(void)::touchType;
      }
      else
      {
        v19 = (const WTF::StringImpl *)&WebCore::touchPointerEventType(void)::$_0::operator() const(void)::impl;
        WebCore::touchPointerEventType(void)::$_0::operator() const(void)::impl += 2;
        WebCore::touchPointerEventType(void)::touchType = (uint64_t)&WebCore::touchPointerEventType(void)::$_0::operator() const(void)::impl;
      }
      v20 = WTF::equal(v18, v19, a3);
      v22 = v20;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::destroy(v18, v21);
          if ((v22 & 1) != 0)
          {
LABEL_29:
            if (v10 == v11)
            {
              WebCore::PointerCaptureController::ensureCapturingDataForPointerEvent((WebCore::PointerCaptureController *)&v39, (const WebCore::PointerEvent *)v5, *((_DWORD *)a2 + 44), *((WTF::StringImpl **)a2 + 29));
              v23 = v39;
              *((_BYTE *)v39 + 43) = 1;
              WebCore::PointerCaptureController::setPointerCapture((WebCore::PointerCaptureController::CapturingData *)v5, a3, v17, (uint64_t)&v36);
              if (v38 && v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, v24);
                else
                  *(_DWORD *)v37 -= 2;
              }
              if (*(_DWORD *)v23 == 1)
              {
                WebCore::PointerCaptureController::CapturingData::~CapturingData(v23, v24);
                WTF::fastFree(v34, v35);
              }
              else
              {
                --*(_DWORD *)v23;
              }
            }
            return WebCore::Document::handlePopoverLightDismiss(*(unsigned int **)(*((_QWORD *)a3 + 5) + 8), a2, a3);
          }
LABEL_38:
          v25 = *((_QWORD *)v5 + 1);
          if (v25)
          {
            v26 = *(_DWORD *)(v25 - 8);
            v27 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
            v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
            v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
            v30 = v26 & ((v29 >> 31) ^ v29);
            v31 = *(_QWORD *)(v25 + 16 * v30);
            if (v31 == v17)
            {
LABEL_43:
              v33 = *(WebCore::PointerCaptureController::CapturingData **)(v25 + 16 * v30 + 8);
              if (v33)
              {
                ++*(_DWORD *)v33;
                *((_BYTE *)v33 + 43) = v10 == v11;
                WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref(v33, v21);
              }
            }
            else
            {
              v32 = 1;
              while (v31 != 0x8000000000000000)
              {
                v30 = ((_DWORD)v30 + v32) & v26;
                v31 = *(_QWORD *)(v25 + 16 * v30);
                ++v32;
                if (v31 == v17)
                  goto LABEL_43;
              }
            }
          }
          return WebCore::Document::handlePopoverLightDismiss(*(unsigned int **)(*((_QWORD *)a3 + 5) + 8), a2, a3);
        }
        *(_DWORD *)v18 -= 2;
      }
      if ((v20 & 1) != 0)
        goto LABEL_29;
      goto LABEL_38;
    }
  }
  return this;
}

WebCore::PointerCaptureController::CapturingData *WebCore::PointerCaptureController::pointerEventWasDispatched(WebCore::PointerCaptureController::CapturingData *this, const WebCore::PointerEvent *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  WebCore::PointerCaptureController::CapturingData *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t StatusReg;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::PointerCaptureController::CapturingData *v26;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v5 = this;
    v6 = *((unsigned int *)a2 + 44);
    v7 = *(_DWORD *)(v3 - 8);
    v8 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v3 + 16 * v11);
    if (v12 == v6)
    {
LABEL_6:
      v14 = *(_QWORD *)(v3 + 16 * v11 + 8);
      if (v14)
      {
        ++*(_DWORD *)v14;
        *(_BYTE *)(v14 + 41) = *((_BYTE *)a2 + 240);
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v16 = *(_QWORD *)(StatusReg + 736);
        if (!v16 || (this = *(WebCore::PointerCaptureController::CapturingData **)(v16 + 96)) == 0)
          this = (WebCore::PointerCaptureController::CapturingData *)WebCore::threadGlobalDataSlow(this);
        v17 = *((_QWORD *)this + 5);
        if (!v17)
        {
          v26 = this;
          this = (WebCore::PointerCaptureController::CapturingData *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
          v17 = *((_QWORD *)v26 + 5);
        }
        if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v17 + 1552))
        {
          v18 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v18)
          {
            if (*(_DWORD *)(v18 + 24) == 2)
            {
              if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v18, a2);
            }
            else
            {
              *(_DWORD *)(v18 + 24) -= 2;
            }
          }
          this = WebCore::PointerCaptureController::processPendingPointerCapture(v5, (WTF::StringImpl *)*((unsigned int *)a2 + 44), a3);
        }
        v19 = *(_QWORD *)(StatusReg + 736);
        if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
        {
          this = (WebCore::PointerCaptureController::CapturingData *)WebCore::threadGlobalDataSlow(this);
          v20 = (uint64_t)this;
        }
        v21 = *(_QWORD *)(v20 + 40);
        if (!v21)
        {
          this = (WebCore::PointerCaptureController::CapturingData *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v20);
          v21 = *(_QWORD *)(v20 + 40);
        }
        if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v21 + 1528))
        {
          {
            v22 = (const WTF::StringImpl *)WebCore::mousePointerEventType(void)::mouseType;
          }
          else
          {
            v22 = (const WTF::StringImpl *)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
            WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
            WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
          }
          this = (WebCore::PointerCaptureController::CapturingData *)WTF::equal(*(WTF **)(v14 + 32), v22, a3);
          if ((_DWORD)this)
          {
            if (!*(_BYTE *)(v14 + 43))
              *(_BYTE *)(v14 + 42) = 0;
          }
        }
        v23 = *(_QWORD *)(StatusReg + 736);
        if (!v23 || (v24 = *(_QWORD *)(v23 + 96)) == 0)
          v24 = WebCore::threadGlobalDataSlow(this);
        v25 = *(_QWORD *)(v24 + 40);
        if (!v25)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v24);
          v25 = *(_QWORD *)(v24 + 40);
        }
        if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v25 + 1488))
          *(_BYTE *)(v14 + 42) = (*((_BYTE *)a2 + 20) & 0x40) != 0;
        return WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref((WebCore::PointerCaptureController::CapturingData *)v14, a2);
      }
    }
    else
    {
      v13 = 1;
      while (v12 != 0x8000000000000000)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v3 + 16 * v11);
        ++v13;
        if (v12 == v6)
          goto LABEL_6;
      }
    }
  }
  return this;
}

WebCore::PointerCaptureController::CapturingData *WebCore::PointerCaptureController::cancelPointer(WebCore::PointerCaptureController::CapturingData *this, WTF::StringImpl *a2, int32x2_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *Ref;
  WebCore::Node *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  _DWORD *v21;
  int8x8_t v22;
  void *v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const WTF::StringImpl *v34;
  _QWORD *v35;
  WebCore::PointerCaptureController::CapturingData *v36;
  int8x8_t v37;
  _QWORD v38[10];
  uint64_t v39;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return this;
  v6 = (uint64_t)this;
  v7 = *(_DWORD *)(v3 - 8);
  v8 = ~((unint64_t)a2 << 32) + a2;
  v9 = 9 * (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) ^ (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(_QWORD *)(v3 + 16 * v11);
  if (v12 == a2)
  {
LABEL_6:
    v14 = *(_QWORD *)(v3 + 16 * v11 + 8);
    if (!v14)
      return this;
    ++*(_DWORD *)v14;
    if (*(_BYTE *)(v14 + 40) == 2)
      return WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref((WebCore::PointerCaptureController::CapturingData *)v14, a2);
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v14 + 8) = 0;
    if (v15)
    {
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    *(_BYTE *)(v14 + 40) = 2;
    Ref = *(unsigned int **)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    if (Ref)
    {
      if (Ref[6] == 2)
      {
        if ((*((_WORD *)Ref + 15) & 0x400) == 0)
          Ref = WebCore::Node::removedLastRef((WebCore::Node *)Ref, a2);
      }
      else
      {
        Ref[6] -= 2;
      }
    }
    v17 = *(WebCore::Node **)(v14 + 16);
    if (v17)
    {
      *((_DWORD *)v17 + 6) += 2;
LABEL_32:
      v36 = (WebCore::PointerCaptureController::CapturingData *)v6;
      v27 = *(unsigned __int8 *)(v14 + 41);
      v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v28 || (v29 = *(_QWORD *)(v28 + 96)) == 0)
        v29 = WebCore::threadGlobalDataSlow((WebCore *)Ref);
      v30 = *(uint64_t **)(v29 + 40);
      if (!v30)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v29);
        v30 = *(uint64_t **)(v29 + 40);
      }
      v31 = bmalloc::api::isoAllocate();
      WebCore::PointerEvent::PointerEvent((WebCore::EventNames **)v31, v30 + 185, (int)a2, (_DWORD **)(v14 + 32), v27 != 0);
      (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v17 + 48))(v17, v31);
      v32 = bmalloc::api::isoAllocate();
      WebCore::PointerEvent::PointerEvent((WebCore::EventNames **)v32, v30 + 192, (int)a2, (_DWORD **)(v14 + 32), v27 != 0);
      (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v17 + 48))(v17, v32);
      if (v32)
      {
        if (*(_DWORD *)(v32 + 16) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        else
          --*(_DWORD *)(v32 + 16);
      }
      v33 = bmalloc::api::isoAllocate();
      WebCore::PointerEvent::PointerEvent((WebCore::EventNames **)v33, v30 + 188, (int)a2, (_DWORD **)(v14 + 32), v27 != 0);
      (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v17 + 48))(v17, v33);
      if (v33)
      {
        if (*(_DWORD *)(v33 + 16) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        else
          --*(_DWORD *)(v33 + 16);
      }
      WebCore::PointerCaptureController::processPendingPointerCapture(v36, a2, v34);
      if (v31)
      {
        if (*(_DWORD *)(v31 + 16) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        else
          --*(_DWORD *)(v31 + 16);
      }
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, a2);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
      return WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref((WebCore::PointerCaptureController::CapturingData *)v14, a2);
    }
    v18 = *(_QWORD *)(*(_QWORD *)v6 + 160);
    if (!v18 || *(_BYTE *)(v18 + 144))
      return WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref((WebCore::PointerCaptureController::CapturingData *)v14, a2);
    v19 = (unsigned int *)(v18 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v21 = *(_DWORD **)(v18 + 640);
    ++*v21;
    v22 = (int8x8_t)vcgt_s32(*a3, (int32x2_t)0xFE000000FE000000);
    v37 = vorr_s8((int8x8_t)(*(_QWORD *)&v22 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a3), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a3, 6uLL)), v22));
    WebCore::EventHandler::hitTestResultAtPoint((uint64_t)v21, (int *)&v37, 0x903u, (uint64_t)v38);
    v17 = (WebCore::Node *)v39;
    if (!v39)
      goto LABEL_25;
    if ((*(_WORD *)(v39 + 28) & 8) == 0)
    {
      v17 = *(WebCore::Node **)(v39 + 32);
      if (!v17)
      {
LABEL_25:
        v24 = 1;
        goto LABEL_27;
      }
      if ((*((_WORD *)v17 + 14) & 8) == 0)
      {
        v17 = 0;
        goto LABEL_25;
      }
    }
    v24 = 0;
    *((_DWORD *)v17 + 6) += 2;
LABEL_27:
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v38, v23);
    if (!*v21)
    {
      __break(0xC471u);
      JUMPOUT(0x196045434);
    }
    --*v21;
    do
    {
      v25 = __ldaxr(v19);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v19));
    if (!v26)
    {
      atomic_store(1u, v19);
      v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v35 = off_1E31FE290;
      v35[1] = v19;
      v38[0] = v35;
      WTF::ensureOnMainThread();
      Ref = (unsigned int *)v38[0];
      v38[0] = 0;
      if (Ref)
        Ref = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)Ref + 8))(Ref);
    }
    if ((v24 & 1) != 0)
      return WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref((WebCore::PointerCaptureController::CapturingData *)v14, a2);
    goto LABEL_32;
  }
  v13 = 1;
  while (v12 != 0x8000000000000000)
  {
    v11 = ((_DWORD)v11 + v13) & v7;
    v12 = *(_QWORD *)(v3 + 16 * v11);
    ++v13;
    if (v12 == a2)
      goto LABEL_6;
  }
  return this;
}

WebCore::Node *WebCore::PointerEvent::createForPointerCapture(WebCore::MouseRelatedEvent **a1, WTF::StringImpl *a2, int a3, char a4, WTF::StringImpl **a5)
{
  WTF::StringImpl *v12;
  int v13;
  char v14;
  WTF::StringImpl *v15;
  WebCore::MouseRelatedEvent *v16;
  WebCore::MouseRelatedEvent *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  WebCore::Node *result;
  WTF *v22;
  uint64_t *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  int32x2_t v27;
  WTF *v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  WebCore::Node *v37;
  int v38;
  __int128 v39;
  _OWORD v40[2];
  WTF::StringImpl *v41;
  char v42;

  *(__int16 *)((char *)v27.i16 + 1) = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v37 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v36 = 0;
  __asm { FMOV            V1.2D, #1.0 }
  v39 = _Q1;
  memset(v40, 0, sizeof(v40));
  {
    v12 = (WTF::StringImpl *)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    v13 = WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    goto LABEL_4;
  }
  v12 = (WTF::StringImpl *)WebCore::mousePointerEventType(void)::mouseType;
  if (WebCore::mousePointerEventType(void)::mouseType)
  {
    v13 = *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType;
LABEL_4:
    v14 = 0;
    *(_DWORD *)v12 = v13 + 2;
    goto LABEL_5;
  }
  v14 = 1;
LABEL_5:
  v27.i8[0] = 1;
  v38 = a3;
  v42 = a4;
  v15 = *a5;
  if (*a5)
    *(_DWORD *)v15 += 2;
  v41 = v15;
  if ((v14 & 1) == 0)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v16 = (WebCore::MouseRelatedEvent *)bmalloc::api::isoAllocate();
  v17 = WebCore::MouseEvent::MouseEvent(v16, 82, a2, &v27);
  *(_QWORD *)v17 = off_1E33A6AB8;
  *((_DWORD *)v17 + 44) = v38;
  *(_OWORD *)((char *)v17 + 184) = v39;
  *((_QWORD *)v17 + 25) = *(_QWORD *)&v40[0];
  *((_OWORD *)v17 + 13) = *(_OWORD *)((char *)v40 + 8);
  v19 = v41;
  *((_QWORD *)v17 + 28) = *((_QWORD *)&v40[1] + 1);
  if (v19)
  {
    v20 = *(_DWORD *)v19;
    *(_DWORD *)v19 += 2;
    *((_QWORD *)v17 + 29) = v19;
    *((_BYTE *)v17 + 240) = v42;
    *a1 = v17;
    v41 = 0;
    if (v20)
      *(_DWORD *)v19 = v20;
    else
      WTF::StringImpl::destroy(v19, v18);
  }
  else
  {
    *((_QWORD *)v17 + 29) = 0;
    *((_BYTE *)v17 + 240) = v42;
    *a1 = v17;
    v41 = 0;
  }
  result = v37;
  v37 = 0;
  if (result)
  {
    if ((*((_BYTE *)result + 22) & 2) != 0)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v18);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
    else
    {
      result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 96))(result);
    }
  }
  v22 = v28;
  v28 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
    {
      v23 = (uint64_t *)*((_QWORD *)v22 + 2);
      *((_QWORD *)v22 + 2) = 0;
      if (v23)
      {
        if (*v23)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v23, v18);
        WTF::fastFree((WTF *)v23, v18);
      }
      v24 = (unsigned int *)*((_QWORD *)v22 + 1);
      *((_QWORD *)v22 + 1) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          WTF::fastFree((WTF *)v24, v18);
        }
      }
      return (WebCore::Node *)WTF::fastFree(v22, v18);
    }
    else
    {
      --*(_DWORD *)v22;
    }
  }
  return result;
}

WebCore::PrintContext *WebCore::PrintContext::PrintContext(WebCore::PrintContext *this, WebCore::LocalFrame *a2)
{
  *(_QWORD *)this = off_1E33FEB10;
  *(_OWORD *)((char *)this + 8) = 0u;
  WebCore::FrameDestructionObserver::observeFrame(this, a2);
  *(_QWORD *)this = off_1E3401AC0;
  *((_QWORD *)this + 6) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1E33FEB10;
  *(_OWORD *)((char *)this + 8) = 0u;
  WebCore::FrameDestructionObserver::observeFrame(this, a2);
  *(_QWORD *)this = off_1E3401AC0;
  *((_QWORD *)this + 6) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 0;
  return this;
}

void WebCore::PrintContext::~PrintContext(WebCore::PrintContext *this)
{
  uint64_t v2;
  _QWORD *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E3401AC0;
  if (*((_BYTE *)this + 40))
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
    {
      v3 = *(_QWORD **)(v2 + 8);
      if (v3)
      {
        *((_BYTE *)this + 40) = 0;
        v7 = 0;
        v8 = 0;
        WebCore::LocalFrame::setPrinting(v3, 0, (float *)&v8, (float *)&v7, 1, 0.0);
        v4 = (WTF *)*((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = 0;
        if (v4)
          std::default_delete<WTF::HashMap<WTF::String,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTableTraits>>::operator()[abi:sn180100]((_DWORD)this + 48, v4);
      }
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    std::default_delete<WTF::HashMap<WTF::String,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTableTraits>>::operator()[abi:sn180100]((_DWORD)this + 48, v5);
  v6 = (WTF *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v6, v5);
  }
  WebCore::FrameDestructionObserver::~FrameDestructionObserver(this, v5);
}

{
  WTF *v1;
  void *v2;

  WebCore::PrintContext::~PrintContext(this);
  WTF::fastFree(v1, v2);
}

void WebCore::PrintContext::end(WebCore::PrintContext *this)
{
  uint64_t v1;
  _QWORD *v3;
  WTF *v4;
  _QWORD *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v3 = *(_QWORD **)(v1 + 8);
    if (v3)
    {
      *((_BYTE *)this + 40) = 0;
      v7 = 0;
      v8 = 0;
      WebCore::LocalFrame::setPrinting(v3, 0, (float *)&v8, (float *)&v7, 1, 0.0);
      v6 = (WTF *)*((_QWORD *)this + 6);
      v5 = (_QWORD *)((char *)this + 48);
      v4 = v6;
      *v5 = 0;
      if (v6)
        std::default_delete<WTF::HashMap<WTF::String,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTableTraits>>::operator()[abi:sn180100]((int)v5, v4);
    }
  }
}

void WebCore::PrintContext::computePageRects(WebCore::PrintContext *this, const WebCore::FloatRect *a2, float a3, float a4, float a5, float *a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WebCore::RenderLayer **v22;
  int v23;
  int v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33[5];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v16 = qword_1ECE7C720;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C720, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *((unsigned int *)this + 9);
        v32 = 3.852e-34;
        *(_QWORD *)v33 = v18;
        _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "Computing page rects and clearing existing page rects. Existing page rects size = %zu", (uint8_t *)&v32, 0xCu);
        v19 = *((_QWORD *)this + 2);
        if (v19)
          v8 = *(_QWORD *)(v19 + 8);
        else
          v8 = 0;
      }
      if (*((_DWORD *)this + 8))
      {
        if (*((_DWORD *)this + 9))
          *((_DWORD *)this + 9) = 0;
        v20 = (WTF *)*((_QWORD *)this + 3);
        if (v20)
        {
          *((_QWORD *)this + 3) = 0;
          *((_DWORD *)this + 8) = 0;
          WTF::fastFree(v20, v17);
        }
      }
      *a6 = 0.0;
      v21 = *(_QWORD *)(v8 + 296);
      if (v21)
      {
        if (*(_QWORD *)(v8 + 288))
        {
          if (a5 > 0.0)
          {
            v22 = *(WebCore::RenderLayer ***)(v21 + 1944);
            if (v22)
            {
              WebCore::RenderView::documentRect(v22);
              v25 = *(_QWORD *)(v8 + 296);
              v26 = 0.0;
              if (v25)
              {
                v27 = *(_QWORD *)(v25 + 1944);
                v28 = 0.0;
                if (v27)
                {
                  v29 = *((float *)a2 + 2);
                  v30 = *((float *)a2 + 3);
                  if (((*(_DWORD *)(v27 + 124) >> 13) & 6u) - 2 < 4)
                  {
                    v26 = (float)v24;
                    v28 = floorf((float)(v29 / v30) * (float)v24);
                  }
                  else
                  {
                    v28 = (float)v23;
                    v26 = floorf((float)(v30 / v29) * (float)v23);
                  }
                }
              }
              else
              {
                v28 = 0.0;
              }
              *a6 = v26;
              v31 = v26 - (float)(a3 + a4);
              if (v31 > 0.0)
              {
                v32 = v28 / a5;
                v33[0] = v31 / a5;
                WebCore::PrintContext::computePageRectsWithPageSizeInternal(this, (const WebCore::FloatSize *)&v32, a7);
              }
            }
          }
        }
      }
    }
  }
}

void WebCore::PrintContext::computePageRectsWithPageSizeInternal(WebCore::PrintContext *this, const WebCore::FloatSize *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t *v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 *v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  _OWORD *v52;
  NSObject *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  _OWORD *v58;
  unint64_t v59;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  _BYTE buf[18];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 296);
      if (v5)
      {
        if (*(_QWORD *)(v4 + 288))
        {
          v6 = *(_QWORD *)(v5 + 1944);
          if (v6)
          {
            v10 = WebCore::RenderView::documentRect(*(WebCore::RenderLayer ***)(v5 + 1944));
            v12 = *((float *)a2 + 1);
            v13 = (int)*(float *)a2;
            v14 = (int)v12;
            v15 = (unsigned __int16)*(_DWORD *)(v6 + 124) >> 13;
            v59 = HIDWORD(v10);
            v17 = HIDWORD(v11);
            switch((unsigned __int16)*(_DWORD *)(v6 + 124) >> 13)
            {
              case 1:
                LODWORD(v16) = HIDWORD(v11) + HIDWORD(v10);
                v18 = HIDWORD(v10);
                goto LABEL_8;
              case 2:
              case 4:
                goto LABEL_79;
              case 3:
              case 5:
                if (v15 == 5 || v15 == 3)
                {
                  LODWORD(v18) = v10;
                  LODWORD(v10) = v11 + v10;
                }
                else
                {
LABEL_79:
                  LODWORD(v18) = v11 + v10;
                }
                v22 = 0;
                v61 = *(_DWORD *)(v6 + 120);
                if ((v61 & 0x4000000) != 0)
                  v20 = HIDWORD(v11) + v59;
                else
                  v20 = v59;
                if ((v61 & 0x4000000) != 0)
                  v21 = v59;
                else
                  v21 = HIDWORD(v11) + v59;
                LODWORD(v17) = v11;
                v23 = v13;
                v13 = (int)v12;
                LODWORD(v16) = v10;
                break;
              default:
                v16 = HIDWORD(v10);
                v17 = HIDWORD(v11);
                LODWORD(v18) = HIDWORD(v11) + HIDWORD(v10);
LABEL_8:
                v19 = *(_DWORD *)(v6 + 120);
                if ((v19 & 0x4000000) != 0)
                  v20 = v11 + v10;
                else
                  v20 = v10;
                if ((v19 & 0x4000000) != 0)
                  v21 = v10;
                else
                  v21 = v11 + v10;
                v22 = 1;
                v23 = (int)v12;
                break;
            }
            LODWORD(v14) = vcvtps_u32_f32((float)(int)v17 / (float)v23);
            v66 = v14;
            if ((_DWORD)v14)
            {
              if (v21 <= v20)
                v24 = v13;
              else
                v24 = 0;
              if (v21 > v20)
                v25 = v13;
              else
                v25 = -(int)v13;
              v26 = v23 | (unint64_t)(v13 << 32);
              v27 = (uint64_t *)((char *)this + 24);
              v65 = v23;
              if (a3)
              {
                if (v20 != v21)
                {
                  if ((int)v18 > (int)v16)
                    v28 = 0;
                  else
                    v28 = -1;
                  v64 = v28;
                  v29 = *((_DWORD *)this + 9);
                  if ((v22 & 1) != 0)
                  {
                    v30 = 0;
                    v31 = -v24;
                    do
                    {
                      v63 = v30;
                      v32 = v16 + (v30 ^ v64) * v23;
                      v33 = v20;
                      do
                      {
                        *(_DWORD *)buf = v31 + v33;
                        *(_DWORD *)&buf[4] = v32;
                        *(_DWORD *)&buf[8] = v13;
                        *(_DWORD *)&buf[12] = v23;
                        if (v29 == *((_DWORD *)this + 8))
                        {
                          v35 = (_OWORD *)WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v29 + 1, (unint64_t)buf);
                          v23 = v65;
                          *(_OWORD *)(*((_QWORD *)this + 3) + 16 * *((unsigned int *)this + 9)) = *v35;
                        }
                        else
                        {
                          *(_OWORD *)(*v27 + 16 * v29) = *(_OWORD *)buf;
                        }
                        v29 = *((_DWORD *)this + 9) + 1;
                        *((_DWORD *)this + 9) = v29;
                        v33 += v25;
                        v34 = v33 < v21;
                        if (v21 <= v20)
                          v34 = v33 > v21;
                      }
                      while (v34);
                      v30 = v63 + 1;
                    }
                    while (v63 + 1 != (_DWORD)v66);
                  }
                  else
                  {
                    v47 = 0;
                    v48 = -v24;
                    v62 = v16;
                    do
                    {
                      v49 = v16 + (v47 ^ v64) * v23;
                      v50 = v20;
                      do
                      {
                        *(_QWORD *)buf = v49 | ((unint64_t)(v48 + v50) << 32);
                        *(_QWORD *)&buf[8] = v26;
                        if (v29 == *((_DWORD *)this + 8))
                        {
                          v52 = (_OWORD *)WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v29 + 1, (unint64_t)buf);
                          v23 = v65;
                          *(_OWORD *)(*((_QWORD *)this + 3) + 16 * *((unsigned int *)this + 9)) = *v52;
                        }
                        else
                        {
                          *(_OWORD *)(*v27 + 16 * v29) = *(_OWORD *)buf;
                        }
                        v29 = *((_DWORD *)this + 9) + 1;
                        *((_DWORD *)this + 9) = v29;
                        v50 += v25;
                        v51 = v50 < v21;
                        if (v21 <= v20)
                          v51 = v50 > v21;
                      }
                      while (v51);
                      ++v47;
                      LODWORD(v16) = v62;
                    }
                    while (v47 != (_DWORD)v66);
                  }
                }
              }
              else
              {
                v36 = (v20 - v24);
                v37 = v36 << 32;
                if ((int)v18 > (int)v16)
                {
                  v42 = v66;
                  do
                  {
                    *(_DWORD *)buf = v36;
                    *(_DWORD *)&buf[4] = v16;
                    *(_DWORD *)&buf[8] = v13;
                    *(_DWORD *)&buf[12] = v23;
                    if ((v22 & 1) == 0)
                    {
                      *(_QWORD *)buf = v37 | v16;
                      *(_QWORD *)&buf[8] = v26;
                    }
                    v43 = *((unsigned int *)this + 9);
                    if ((_DWORD)v43 == *((_DWORD *)this + 8))
                    {
                      v46 = (__int128 *)WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v43 + 1, (unint64_t)buf);
                      v23 = v65;
                      v43 = *((unsigned int *)this + 9);
                      v44 = *((_QWORD *)this + 3);
                      v45 = *v46;
                    }
                    else
                    {
                      v44 = *v27;
                      v45 = *(_OWORD *)buf;
                    }
                    *(_OWORD *)(v44 + 16 * v43) = v45;
                    ++*((_DWORD *)this + 9);
                    LODWORD(v16) = v16 + v23;
                    --v42;
                  }
                  while (v42);
                }
                else if ((v22 & 1) != 0)
                {
                  v38 = *((_DWORD *)this + 9);
                  v39 = v16 - v23;
                  v40 = v66;
                  do
                  {
                    *(_DWORD *)buf = v36;
                    *(_DWORD *)&buf[4] = v39;
                    *(_DWORD *)&buf[8] = v13;
                    *(_DWORD *)&buf[12] = v23;
                    if (v38 == *((_DWORD *)this + 8))
                    {
                      v41 = (_OWORD *)WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v38 + 1, (unint64_t)buf);
                      v23 = v65;
                      *(_OWORD *)(*((_QWORD *)this + 3) + 16 * *((unsigned int *)this + 9)) = *v41;
                    }
                    else
                    {
                      *(_OWORD *)(*v27 + 16 * v38) = *(_OWORD *)buf;
                    }
                    v38 = *((_DWORD *)this + 9) + 1;
                    *((_DWORD *)this + 9) = v38;
                    v39 -= v23;
                    --v40;
                  }
                  while (v40);
                }
                else
                {
                  v55 = *((_DWORD *)this + 9);
                  v56 = v16 - v23;
                  v57 = v66;
                  do
                  {
                    *(_QWORD *)buf = v37 | v56;
                    *(_QWORD *)&buf[8] = v26;
                    if (v55 == *((_DWORD *)this + 8))
                    {
                      v58 = (_OWORD *)WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v55 + 1, (unint64_t)buf);
                      v23 = v65;
                      *(_OWORD *)(*((_QWORD *)this + 3) + 16 * *((unsigned int *)this + 9)) = *v58;
                    }
                    else
                    {
                      *(_OWORD *)(*v27 + 16 * v55) = *(_OWORD *)buf;
                    }
                    v55 = *((_DWORD *)this + 9) + 1;
                    *((_DWORD *)this + 9) = v55;
                    v56 -= v23;
                    --v57;
                  }
                  while (v57);
                }
              }
            }
            v53 = qword_1ECE7C720;
            if (os_log_type_enabled((os_log_t)qword_1ECE7C720, OS_LOG_TYPE_DEFAULT))
            {
              v54 = *((unsigned int *)this + 9);
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)&buf[4] = v54;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v66;
              _os_log_impl(&dword_1940B8000, v53, OS_LOG_TYPE_DEFAULT, "Computed page rects with page size. Page rects count = %zu pageCount = %u", buf, 0x12u);
            }
          }
        }
      }
    }
  }
}

float WebCore::PrintContext::computedPageMargin(uint64_t a1, float a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  float v9;
  WTF *v10;
  void *v11;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::RenderStyle *v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 296);
      if (v5)
      {
        if ((*(_QWORD *)(*(_QWORD *)(v4 + 136) + 688) & 0x1000000) != 0)
        {
          v6 = *(_QWORD *)(v5 + 1328);
          if (!*(_QWORD *)(v6 + 32))
          {
            if (*(_QWORD *)(v6 + 24))
              WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v6);
            else
              WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v6);
            v14 = *(_QWORD *)(v6 + 32);
            if (*(_DWORD *)(v14 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
            {
              v15 = *(_QWORD *)(v6 + 32);
              WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v14 + 32), v13);
              v14 = v15;
            }
            if (*(_BYTE *)(v14 + 242)
              || *(_BYTE *)(v14 + 243)
              || *(_BYTE *)(v14 + 244)
              || *(_BYTE *)(v14 + 245)
              || *(_BYTE *)(v14 + 246)
              || *(_BYTE *)(v14 + 247)
              || *(_BYTE *)(v14 + 248))
            {
              *(_BYTE *)(v6 + 236) = 1;
            }
          }
          WebCore::Style::Resolver::styleForPage(*(WebCore::Style::Resolver **)(v6 + 32), 0);
          v8 = *(_QWORD *)(*((_QWORD *)v16 + 1) + 24);
          if (*(_BYTE *)(v8 + 44))
          {
            if (*(_BYTE *)(v8 + 46))
              v9 = *(float *)(v8 + 40);
            else
              v9 = (float)*(int *)(v8 + 40);
            a2 = v9 * 0.75;
          }
          WebCore::RenderStyle::~RenderStyle(v16, v7);
          if (*(_DWORD *)v10)
          {
            *((_OWORD *)v10 + 2) = 0u;
            *((_OWORD *)v10 + 3) = 0u;
            *(_OWORD *)v10 = 0u;
            *((_OWORD *)v10 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v10, v11);
          }
        }
      }
    }
  }
  return a2;
}

float WebCore::PrintContext::computedPageSize(uint64_t a1, float a2, double a3, float a4, float a5, float a6, float a7)
{
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  int v14;
  float v15;
  float v16;
  _DWORD v19[4];
  _DWORD v20[4];

  *(float *)v20 = a4;
  *(float *)&v20[1] = a5;
  *(float *)&v20[2] = a6;
  *(float *)&v20[3] = a7;
  v10 = WebCore::PrintContext::computedPageMargin(a1, a4);
  v13 = 0;
  *(float *)v19 = v10;
  *(float *)&v19[1] = v11;
  v19[2] = v14;
  *(float *)&v19[3] = v12;
  do
  {
    v15 = *(float *)&v19[v13];
    v16 = *(float *)&v20[v13];
  }
  while (v15 == v16 && v13++ != 3);
  if (v15 != v16)
    return a2 + (float)((float)(a7 - v12) + (float)(a5 - v11));
  return a2;
}

void WebCore::PrintContext::computePageRectsWithPageSize(WebCore::PrintContext *this, const WebCore::FloatSize *a2, int a3)
{
  NSObject *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE7C720;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C720, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *((unsigned int *)this + 9);
    v10 = 134217984;
    v11 = v8;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "Computing page rects with page size and clearing existing page rects. Existing page rects size = %zu", (uint8_t *)&v10, 0xCu);
  }
  if (*((_DWORD *)this + 8))
  {
    if (*((_DWORD *)this + 9))
      *((_DWORD *)this + 9) = 0;
    v9 = (WTF *)*((_QWORD *)this + 3);
    if (v9)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree(v9, v7);
    }
  }
  WebCore::PrintContext::computePageRectsWithPageSizeInternal(this, a2, a3);
}

void WebCore::PrintContext::begin(WebCore::PrintContext *this, float a2, float a3)
{
  uint64_t v3;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  unint64_t v15;
  float v16[2];
  unint64_t v17;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v5 = *(_QWORD **)(v3 + 8);
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 1);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      *((_BYTE *)this + 40) = 1;
      v17 = __PAIR64__(LODWORD(a3), LODWORD(a2));
      v8 = v5[37];
      v9 = 0.0;
      if (v8)
      {
        v10 = *(_QWORD *)(v8 + 1944);
        v11 = 0.0;
        if (v10)
        {
          if (((*(_DWORD *)(v10 + 124) >> 13) & 6u) - 2 < 4)
          {
            v9 = floorf(a3 * 1.25);
            v11 = floorf((float)(a2 / a3) * v9);
          }
          else
          {
            v11 = floorf(a2 * 1.25);
            v9 = floorf((float)(a3 / a2) * v11);
          }
        }
      }
      else
      {
        v11 = 0.0;
      }
      v16[0] = v11;
      v16[1] = v9;
      WebCore::LocalFrame::setPrinting(v5, (void *)1, v16, (float *)&v17, 1, 1.6);
      do
      {
        v12 = __ldaxr(v6);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v6));
      if (!v13)
      {
        atomic_store(1u, v6);
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v14 = off_1E31FE290;
        v14[1] = v6;
        v17 = (unint64_t)v14;
        WTF::ensureOnMainThread();
        v15 = v17;
        v17 = 0;
        if (v15)
          (*(void (**)(unint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
    }
  }
}

float WebCore::PrintContext::computeAutomaticScaleFactor(WebCore::PrintContext *this, const WebCore::FloatSize *a2)
{
  uint64_t v2;
  float result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  float *v9;

  v2 = *((_QWORD *)this + 2);
  result = 1.0;
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 288);
      if (v5)
      {
        v6 = *(_QWORD *)(v4 + 296);
        if (v6 && (v7 = *(_QWORD *)(v6 + 1944)) != 0 && ((*(_DWORD *)(v7 + 124) >> 13) & 6u) - 2 < 4)
        {
          v8 = 0;
          LODWORD(v5) = *(_DWORD *)(v5 + 260);
        }
        else
        {
          v5 = *(_QWORD *)(v5 + 256);
          v8 = 1;
        }
        if ((int)v5 >= 1)
        {
          if (v8)
            v9 = (float *)a2;
          else
            v9 = (float *)((char *)a2 + 4);
          return fmaxf(*v9 / (float)(int)v5, 0.5);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::PrintContext::spoolPage(uint64_t this, WebCore::GraphicsContext *a2, int a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  void *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  _BYTE buf[18];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(this + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (*(_QWORD *)(v5 + 288))
      {
        v9 = this;
        v10 = qword_1ECE7C720;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C720, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *(unsigned int *)(v9 + 36);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = a3;
          *(_WORD *)&buf[8] = 2048;
          *(_QWORD *)&buf[10] = v11;
          _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, "Spooling page. pageNumber = %d pageRects size = %zu", buf, 0x12u);
        }
        v12 = *(unsigned int *)(v9 + 36);
        if ((int)v12 <= a3 || v12 <= a3)
        {
          __break(0xC471u);
          JUMPOUT(0x1960466F0);
        }
        *(_OWORD *)buf = *(_OWORD *)(*(_QWORD *)(v9 + 24) + 16 * a3);
        v13 = a4 / (float)*(int *)&buf[8];
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
        v16 = v13;
        v17 = v13;
        (*(void (**)(WebCore::GraphicsContext *, float *))(*(_QWORD *)a2 + 632))(a2, &v16);
        (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, (float)-*(_DWORD *)buf, (float)-*(_DWORD *)&buf[4]);
        v16 = (float)*(int *)buf;
        v17 = (float)*(int *)&buf[4];
        v18 = (float)*(int *)&buf[8];
        v19 = (float)*(int *)&buf[12];
        (*(void (**)(WebCore::GraphicsContext *, float *))(*(_QWORD *)a2 + 456))(a2, &v16);
        WebCore::LocalFrameView::paintContents(*(_QWORD *)(v5 + 288), a2, (int32x4_t *)buf, 0, 0);
        v14 = *(_QWORD *)(v5 + 296);
        if (v14)
          *(_DWORD *)(v14 + 24) += 2;
        WebCore::PrintContext::outputLinkedDestinations((WebCore::PrintContext *)v9, a2, (WebCore::Document *)v14, (const WebCore::IntRect *)buf);
        if (*(_DWORD *)(v14 + 24) == 2)
        {
          if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
        }
        else
        {
          *(_DWORD *)(v14 + 24) -= 2;
        }
        return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
      }
    }
  }
  return this;
}

void WebCore::PrintContext::outputLinkedDestinations(WebCore::PrintContext *this, WebCore::GraphicsContext *a2, WebCore::Document *a3, const WebCore::IntRect *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int i;
  unsigned int v24;
  WTF::StringImpl **v25;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  WebCore::RenderElement *v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  int v51;
  float v52;
  int v53;
  int v54;
  _QWORD *v55;
  uint64_t **v57;
  uint64_t v58;
  WTF::StringImpl *v59;

  if (!(*(unsigned int (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 712))(a2))
    return;
  v9 = (uint64_t *)*((_QWORD *)this + 6);
  v8 = (uint64_t **)((char *)this + 48);
  v7 = v9;
  if (v9)
    goto LABEL_75;
  v10 = (uint64_t *)WTF::fastMalloc((WTF *)8);
  *v10 = 0;
  v11 = (WTF *)*v8;
  *v8 = v10;
  if (v11)
    std::default_delete<WTF::HashMap<WTF::String,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTableTraits>>::operator()[abi:sn180100]((int)v8, v11);
  v12 = *((_QWORD *)a3 + 159);
  if (!v12)
    goto LABEL_74;
  *(_DWORD *)(v12 + 24) += 2;
  v57 = v8;
  do
  {
    v13 = v12;
    v59 = 0;
    WebCore::Element::findAnchorElementForLink((unsigned int *)v12, &v59, &v58);
    v16 = v58;
    if (!v58)
      goto LABEL_44;
    v17 = *v8;
    v18 = **v8;
    if (v18
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(*v8, 8u, 0), (v18 = *v17) != 0))
    {
      v19 = *(_DWORD *)(v18 - 8);
    }
    else
    {
      v19 = 0;
    }
    v20 = *((_DWORD *)v59 + 4);
    if (v20 < 0x100)
      v21 = WTF::StringImpl::hashSlowCase(v59);
    else
      v21 = v20 >> 8;
    v22 = 0;
    for (i = 1; ; ++i)
    {
      v24 = v21 & v19;
      v25 = (WTF::StringImpl **)(v18 + 16 * (v21 & v19));
      v26 = *v25;
      if (*v25 == (WTF::StringImpl *)-1)
      {
        v22 = (WTF::StringImpl **)(v18 + 16 * v24);
        goto LABEL_20;
      }
      if (!v26)
        break;
      if ((WTF::equal(v26, v59, v15) & 1) != 0)
        goto LABEL_41;
LABEL_20:
      v21 = i + v24;
    }
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*v17 - 16);
      v25 = v22;
    }
    v27 = v59;
    if (v59)
      *(_DWORD *)v59 += 2;
    *v25 = v27;
    *(_DWORD *)(v16 + 24) += 2;
    v28 = v25[1];
    v25[1] = (WTF::StringImpl *)v16;
    if (v28)
    {
      if (*((_DWORD *)v28 + 6) == 2)
      {
        if ((*((_WORD *)v28 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v28, v14);
      }
      else
      {
        *((_DWORD *)v28 + 6) -= 2;
      }
    }
    v29 = *v17;
    if (*v17)
      v30 = *(_DWORD *)(v29 - 12) + 1;
    else
      v30 = 1;
    *(_DWORD *)(v29 - 12) = v30;
    v31 = *v17;
    if (*v17)
      v32 = *(_DWORD *)(v31 - 12);
    else
      v32 = 0;
    v33 = (*(_DWORD *)(v31 - 16) + v32);
    v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 <= 2 * v33)
      {
LABEL_37:
        v35 = (_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34));
        goto LABEL_40;
      }
    }
    else if (3 * v34 <= 4 * v33)
    {
      if ((_DWORD)v34)
        goto LABEL_37;
      v35 = 8;
LABEL_40:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v17, v35, v25);
    }
LABEL_41:
    v8 = v57;
    v36 = v58;
    v58 = 0;
    if (v36)
    {
      if (*(_DWORD *)(v36 + 24) == 2)
      {
        if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v36, v14);
      }
      else
      {
        *(_DWORD *)(v36 + 24) -= 2;
      }
    }
LABEL_44:
    v37 = v59;
    v59 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = *(_QWORD *)(v13 + 80);
    if (v38 || (v38 = *(_QWORD *)(v13 + 56)) != 0)
    {
LABEL_52:
      if ((*(_WORD *)(v38 + 28) & 8) != 0)
      {
        v12 = v38;
      }
      else
      {
        do
        {
          while (1)
          {
            v12 = *(_QWORD *)(v38 + 56);
            if (v12)
              break;
            v38 = *(_QWORD *)(v38 + 32);
            if (!v38)
              goto LABEL_60;
          }
          v38 = *(_QWORD *)(v38 + 56);
        }
        while ((*(_WORD *)(v12 + 28) & 8) == 0);
      }
      *(_DWORD *)(v12 + 24) += 2;
    }
    else
    {
      v39 = v13;
      while (1)
      {
        v39 = *(_QWORD *)(v39 + 32);
        if (!v39)
          break;
        v38 = *(_QWORD *)(v39 + 56);
        if (v38)
          goto LABEL_52;
      }
LABEL_60:
      v12 = 0;
    }
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  while (v12);
LABEL_74:
  v7 = *v8;
LABEL_75:
  v40 = (_QWORD *)*v7;
  if (v40)
  {
    v41 = *((unsigned int *)v40 - 1);
    v42 = &v40[2 * v41];
    if (*((_DWORD *)v40 - 3))
    {
      v43 = v40;
      if ((_DWORD)v41)
      {
        v44 = 16 * v41;
        v43 = v40;
        while ((unint64_t)(*v43 + 1) <= 1)
        {
          v43 += 2;
          v44 -= 16;
          if (!v44)
          {
            v43 = v42;
            break;
          }
        }
      }
LABEL_82:
      v45 = &v40[2 * *((unsigned int *)v40 - 1)];
      goto LABEL_87;
    }
    v43 = &v40[2 * v41];
  }
  else
  {
    v43 = 0;
    v41 = 0;
  }
  v42 = &v40[2 * v41];
  if (v40)
    goto LABEL_82;
  v45 = 0;
LABEL_87:
  while (v43 != v45)
  {
    v46 = (WebCore::RenderElement *)(*(_QWORD *)(v43[1] + 64) & 0xFFFFFFFFFFFFLL);
    if (v46)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v43[1] + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        return;
      }
      v47 = WebCore::RenderElement::absoluteAnchorRect(v46, 0);
      v48 = (float)(int)v47 * 0.015625;
      v49 = (float)SHIDWORD(v47) * 0.015625;
      if (v48 < 0.0)
        v48 = 0.0;
      if (v49 < 0.0)
        v49 = 0.0;
      v59 = (WTF::StringImpl *)__PAIR64__(LODWORD(v49), LODWORD(v48));
      v50 = roundf(v48);
      v51 = (int)v50;
      if (v50 <= -2147500000.0)
        v51 = 0x80000000;
      if (v50 >= 2147500000.0)
        v51 = 0x7FFFFFFF;
      v52 = roundf(v49);
      if (v52 >= 2147500000.0)
      {
        v53 = 0x7FFFFFFF;
      }
      else if (v52 <= -2147500000.0)
      {
        v53 = 0x80000000;
      }
      else
      {
        v53 = (int)v52;
      }
      if (*(_DWORD *)a4 <= v51 && *((_DWORD *)a4 + 2) + *(_DWORD *)a4 > v51)
      {
        v54 = *((_DWORD *)a4 + 1);
        if (v54 <= v53 && *((_DWORD *)a4 + 3) + v54 > v53)
          (*(void (**)(WebCore::GraphicsContext *, _QWORD *, WTF::StringImpl **))(*(_QWORD *)a2 + 704))(a2, v43, &v59);
      }
    }
    v55 = v43 + 2;
    v43 = v42;
    if (v55 != v42)
    {
      v43 = v55;
      while ((unint64_t)(*v43 + 1) <= 1)
      {
        v43 += 2;
        if (v43 == v42)
        {
          v43 = v42;
          break;
        }
      }
    }
  }
}

WebCore::PrintContext *WebCore::PrintContext::spoolRect(WebCore::PrintContext *this, WebCore::GraphicsContext *a2, int32x4_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::PrintContext *v7;
  float v8;
  float v9;
  float v10[4];

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*(_QWORD *)(v4 + 288))
      {
        v7 = this;
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
        (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, (float)-a3->i32[0], (float)-a3->i32[1]);
        v8 = (float)a3->i32[1];
        v10[0] = (float)a3->i32[0];
        v10[1] = v8;
        v9 = (float)a3->i32[3];
        v10[2] = (float)a3->i32[2];
        v10[3] = v9;
        (*(void (**)(WebCore::GraphicsContext *, float *))(*(_QWORD *)a2 + 456))(a2, v10);
        WebCore::LocalFrameView::paintContents(*(_QWORD *)(v4 + 288), a2, a3, 0, 0);
        WebCore::PrintContext::outputLinkedDestinations(v7, a2, *(WebCore::Document **)(v4 + 296), (const WebCore::IntRect *)a3);
        return (WebCore::PrintContext *)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
      }
    }
  }
  return this;
}

uint64_t WebCore::PrintContext::pageNumberForElement(WebCore::PrintContext *this, WebCore::Element *a2, const WebCore::FloatSize *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::LocalFrame *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  NSObject *v16;
  void *v17;
  WTF *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _DWORD *v26;
  int v27;
  int v28;
  _DWORD v30[2];
  uint64_t (**v31)(WebCore::FrameDestructionObserver *__hidden);
  __int128 v32;
  WTF *v33[2];
  char v34;
  uint64_t v35;
  uint8_t buf[4];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (this)
    *((_DWORD *)this + 6) += 2;
  WebCore::Document::updateLayout(*(_QWORD *)(*((_QWORD *)this + 5) + 8), 0, 0);
  v6 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196047018);
    }
    while ((*(_BYTE *)(v6 + 45) & 8) == 0)
    {
      v7 = *(_QWORD *)(v6 + 32);
      if (v7)
      {
        v6 = *(_QWORD *)(v7 + 8);
        if (v6)
          continue;
      }
      v8 = 0xFFFFFFFFLL;
      if (this)
        goto LABEL_36;
      return v8;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v9)
      v10 = *(WebCore::LocalFrame **)(v9 + 8);
    else
      v10 = 0;
    v11 = *(float *)a2;
    v12 = *((float *)a2 + 1);
    v31 = off_1E33FEB10;
    v32 = 0u;
    WebCore::FrameDestructionObserver::observeFrame((WebCore::FrameDestructionObserver *)&v31, v10);
    v31 = off_1E3401AC0;
    v35 = 0;
    *(_OWORD *)v33 = 0u;
    v34 = 0;
    WebCore::PrintContext::begin((WebCore::PrintContext *)&v31, v11, v12);
    v13 = (float)*(int *)(*((_QWORD *)v10 + 36) + 256) / v11;
    v14 = v13 * *(float *)a2;
    v15 = v13 * *((float *)a2 + 1);
    *(float *)v30 = v14;
    *(float *)&v30[1] = v15;
    v16 = qword_1ECE7C720;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C720, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v37 = HIDWORD(v33[1]);
      _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "Computing page rects with page size and clearing existing page rects. Existing page rects size = %zu", buf, 0xCu);
    }
    if (LODWORD(v33[1]))
    {
      if (HIDWORD(v33[1]))
        HIDWORD(v33[1]) = 0;
      v18 = v33[0];
      if (v33[0])
      {
        v33[0] = 0;
        LODWORD(v33[1]) = 0;
        WTF::fastFree(v18, v17);
      }
    }
    WebCore::PrintContext::computePageRectsWithPageSizeInternal((WebCore::PrintContext *)&v31, (const WebCore::FloatSize *)v30, 0);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 888))(v6);
    v20 = v19;
    if (v19 >= 0)
      v21 = v19;
    else
      v21 = v19 + 63;
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 880))(v6);
    if (v22 >= 0)
      v23 = v22;
    else
      v23 = v22 + 63;
    if (HIDWORD(v33[1]))
    {
      v8 = 0;
      v24 = ((int)(v20 - (v21 & 0xFFFFFFC0) + 32) >> 6) + (v21 >> 6);
      v25 = ((int)(v22 - (v23 & 0xFFFFFFC0) + 32) >> 6) + (v23 >> 6);
      v26 = (_DWORD *)((char *)v33[0] + 8);
      while (1)
      {
        v27 = *(v26 - 2);
        if (v27 <= v25 && v25 < *v26 + v27)
        {
          v28 = *(v26 - 1);
          if (v28 <= v24 && v24 < v26[1] + v28)
            break;
        }
        ++v8;
        v26 += 4;
        if (HIDWORD(v33[1]) == v8)
          goto LABEL_32;
      }
    }
    else
    {
LABEL_32:
      v8 = 0xFFFFFFFFLL;
    }
    WebCore::PrintContext::~PrintContext((WebCore::PrintContext *)&v31);
    if (this)
      goto LABEL_36;
  }
  else
  {
    v8 = 0xFFFFFFFFLL;
LABEL_36:
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(this, v5);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  return v8;
}

void WebCore::PrintContext::pageProperty(WebCore::PrintContext *this@<X0>, WebCore::LocalFrame *a2@<X1>, const char *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::String *v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  _DWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  float v28;
  float v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t (**v32)(WebCore::FrameDestructionObserver *__hidden);
  uint64_t (**v33)(WebCore::FrameDestructionObserver *__hidden);
  uint64_t v34;
  WebCore::RenderStyle *v35;
  uint64_t (**v36)(WebCore::FrameDestructionObserver *__hidden);
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  float v41;
  char v42;
  _DWORD *v43;

  v7 = (unsigned int *)((char *)this + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *((_QWORD *)this + 37);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v36 = off_1E33FEB10;
  v37 = 0u;
  WebCore::FrameDestructionObserver::observeFrame((WebCore::FrameDestructionObserver *)&v36, this);
  v36 = off_1E3401AC0;
  v40 = 0;
  v38 = 0u;
  v39 = 0;
  WebCore::PrintContext::begin((WebCore::PrintContext *)&v36, 800.0, 0.0);
  WebCore::Document::updateLayout(v9, 0, 0);
  v10 = *(_QWORD *)(v9 + 1328);
  if (!*(_QWORD *)(v10 + 32))
  {
    if (*(_QWORD *)(v10 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver(*(unsigned int **)(v9 + 1328));
    else
      WebCore::Style::Scope::createDocumentResolver(*(WebCore::Style::Scope **)(v9 + 1328));
    v31 = *(_QWORD *)(v10 + 32);
    if (*(_DWORD *)(v31 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    {
      v34 = *(_QWORD *)(v10 + 32);
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v31 + 32), v30);
      v31 = v34;
    }
    if (*(_BYTE *)(v31 + 242)
      || *(_BYTE *)(v31 + 243)
      || *(_BYTE *)(v31 + 244)
      || *(_BYTE *)(v31 + 245)
      || *(_BYTE *)(v31 + 246)
      || *(_BYTE *)(v31 + 247)
      || *(_BYTE *)(v31 + 248))
    {
      *(_BYTE *)(v10 + 236) = 1;
    }
  }
  WebCore::Style::Resolver::styleForPage(*(WebCore::Style::Resolver **)(v10 + 32), (uint64_t)a3);
  v11 = (WTF::String *)strcmp((const char *)a2, "margin-left");
  if (!(_DWORD)v11)
  {
    v17 = *(_QWORD *)(*((_QWORD *)v35 + 1) + 24);
    if (!*(_BYTE *)(v17 + 68))
    {
      v20 = (_DWORD *)WebCore::autoAtomData;
      if (!WebCore::autoAtomData)
      {
LABEL_28:
        *a4 = v20;
        goto LABEL_34;
      }
LABEL_27:
      *v20 += 2;
      goto LABEL_28;
    }
    if (*(_BYTE *)(v17 + 70))
      v18 = *(float *)(v17 + 64);
    else
      v18 = (float)*(int *)(v17 + 64);
LABEL_33:
    WTF::String::number(v11, v18);
    goto LABEL_34;
  }
  v11 = (WTF::String *)strcmp((const char *)a2, "line-height");
  if (!(_DWORD)v11)
  {
    v19 = *((_QWORD *)v35 + 4);
    v18 = *(float *)(v19 + 12);
    if (!*(_BYTE *)(v19 + 18))
      v18 = (float)SLODWORD(v18);
    goto LABEL_33;
  }
  v11 = (WTF::String *)strcmp((const char *)a2, "font-size");
  if (!(_DWORD)v11)
  {
    v18 = *(float *)(*((_QWORD *)v35 + 4) + 204);
    goto LABEL_33;
  }
  if (!strcmp((const char *)a2, "font-family"))
  {
    v21 = *(_QWORD *)(*((_QWORD *)v35 + 4) + 216);
    if (!*(_DWORD *)(v21 + 4))
    {
      __break(0xC471u);
      JUMPOUT(0x196047488);
    }
    v20 = *(_DWORD **)(v21 + 8);
    if (!v20)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (!strcmp((const char *)a2, "size"))
  {
    v27 = *(_QWORD *)(*((_QWORD *)v35 + 1) + 40);
    if (*(_BYTE *)(v27 + 230))
      v28 = *(float *)(v27 + 224);
    else
      v28 = (float)*(int *)(v27 + 224);
    if (*(_BYTE *)(v27 + 238))
      v29 = *(float *)(v27 + 232);
    else
      v29 = (float)*(int *)(v27 + 232);
    *(float *)&v43 = v28;
    v42 = 32;
    v41 = v29;
    WTF::tryMakeString<float,char,float>(&v42, a4);
    if (*a4)
      goto LABEL_34;
    __break(0xC471u);
LABEL_73:
    JUMPOUT(0x196047368);
  }
  if (a2)
  {
    v13 = strlen((const char *)a2);
    if (v13 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x196047468);
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = (v13 + 34);
  if (__OFADD__((_DWORD)v13, 34) || (WTF::tryFastCompactMalloc((WTF *)(v14 + 20)), (v15 = v43) == 0))
  {
    *a4 = 0;
    __break(0xC471u);
    goto LABEL_73;
  }
  *v43 = 2;
  v15[1] = v14;
  *((_QWORD *)v15 + 1) = v15 + 5;
  v15[4] = 4;
  qmemcpy(v15 + 5, "pageProperty() unimplemented for: ", 34);
  if ((_DWORD)v13)
  {
    v16 = (char *)v15 + 54;
    if ((_DWORD)v13 == 1)
      *v16 = *(_BYTE *)a2;
    else
      memcpy(v16, a2, v13);
  }
  *a4 = v15;
LABEL_34:
  if (v35)
  {
    WebCore::RenderStyle::~RenderStyle(v35, v12);
    if (*(_DWORD *)v22)
    {
      *((_OWORD *)v22 + 2) = 0u;
      *((_OWORD *)v22 + 3) = 0u;
      *(_OWORD *)v22 = 0u;
      *((_OWORD *)v22 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v22, v23);
    }
  }
  WebCore::PrintContext::~PrintContext((WebCore::PrintContext *)&v36);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v24);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  do
  {
    v25 = __ldaxr(v7);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v7));
  if (!v26)
  {
    atomic_store(1u, v7);
    v32 = (uint64_t (**)(WebCore::FrameDestructionObserver *__hidden))WTF::fastMalloc((WTF *)0x10);
    *v32 = (uint64_t (*)(WebCore::FrameDestructionObserver *__hidden))off_1E31FE290;
    v32[1] = (uint64_t (*)(WebCore::FrameDestructionObserver *__hidden))v7;
    v36 = v32;
    WTF::ensureOnMainThread();
    v33 = v36;
    v36 = 0;
    if (v33)
      (*((void (**)(uint64_t (**)(WebCore::FrameDestructionObserver *__hidden)))*v33 + 1))(v33);
  }
}

BOOL WebCore::PrintContext::isPageBoxVisible(WebCore::Document **this, WebCore::LocalFrame *a2)
{
  return WebCore::Document::isPageBoxVisible(this[37], (uint64_t)a2);
}

void WebCore::PrintContext::pageSizeAndMarginsInPixels(WebCore::Document **this@<X0>, WebCore::LocalFrame *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, int a10)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _BYTE *v50;
  size_t v51;
  unsigned int v52;
  _WORD *v53;
  char *v54;
  uint64_t v55;
  unsigned int v56;
  _BYTE *v57;
  size_t v58;
  unsigned int v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unsigned int v63;
  _BYTE *v64;
  size_t v65;
  unsigned int v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unsigned int v70;
  _BYTE *v71;
  size_t v72;
  unsigned int v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  char *v79;
  void *v80;
  uint64_t v81;
  _BYTE *v82;
  size_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  _BYTE *v95;
  BOOL v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  _QWORD v115[3];

  v115[2] = *MEMORY[0x1E0C80C00];
  v113 = a6;
  v114 = a5;
  v111 = a8;
  v112 = a7;
  v109 = a3;
  v110 = a4;
  WebCore::Document::pageSizeAndMarginsInPixels(this[37], (uint64_t)a2, (WebCore::IntSize *)&v109, &v114, &v113, &v112, &v111);
  v12 = v109;
  v11 = v110;
  v13 = v114;
  if ((v109 & 0x80000000) != 0)
  {
    v99 = -v109;
    v14 = 1;
    do
    {
      ++v14;
      v96 = v99 >= 0xA;
      v99 /= 0xAu;
    }
    while (v96);
  }
  else
  {
    v14 = 0;
    v15 = v109;
    do
    {
      ++v14;
      v16 = v15 > 9;
      v15 /= 0xAu;
    }
    while (v16);
  }
  v17 = v113;
  if ((v110 & 0x80000000) != 0)
  {
    v100 = -v110;
    v18 = 1;
    do
    {
      ++v18;
      v96 = v100 >= 0xA;
      v100 /= 0xAu;
    }
    while (v96);
  }
  else
  {
    v18 = 0;
    v19 = v110;
    do
    {
      ++v18;
      v16 = v19 > 9;
      v19 /= 0xAu;
    }
    while (v16);
  }
  v20 = v112;
  if (v114 < 0)
  {
    v101 = -v114;
    v21 = 1;
    do
    {
      ++v21;
      v96 = v101 >= 0xA;
      v101 /= 0xAu;
    }
    while (v96);
  }
  else
  {
    v21 = 0;
    v22 = v114;
    do
    {
      ++v21;
      v16 = v22 > 9;
      v22 /= 0xAu;
    }
    while (v16);
  }
  v23 = v111;
  if (v113 < 0)
  {
    v102 = -v113;
    v24 = 1;
    do
    {
      ++v24;
      v96 = v102 >= 0xA;
      v102 /= 0xAu;
    }
    while (v96);
  }
  else
  {
    v24 = 0;
    v25 = v113;
    do
    {
      ++v24;
      v16 = v25 > 9;
      v25 /= 0xAu;
    }
    while (v16);
  }
  if (v112 < 0)
  {
    v103 = -v112;
    v26 = 1;
    do
    {
      ++v26;
      v96 = v103 >= 0xA;
      v103 /= 0xAu;
    }
    while (v96);
  }
  else
  {
    v26 = 0;
    v27 = v112;
    do
    {
      ++v26;
      v16 = v27 > 9;
      v27 /= 0xAu;
    }
    while (v16);
  }
  if (v111 < 0)
  {
    v104 = -v111;
    v28 = 1;
    do
    {
      ++v28;
      v96 = v104 >= 0xA;
      v104 /= 0xAu;
    }
    while (v96);
  }
  else
  {
    v28 = 0;
    v29 = v111;
    do
    {
      ++v28;
      v16 = v29 > 9;
      v29 /= 0xAu;
    }
    while (v16);
  }
  if ((v28 & 0x80000000) == 0)
  {
    v30 = __OFADD__(v28, 1);
    v31 = v28 + 1;
    v32 = v30;
    if ((v26 & 0x80000000) == 0 && !v32)
    {
      v30 = __OFADD__(v26, v31);
      v33 = v26 + v31;
      if (!v30)
      {
        v30 = __OFADD__(v33, 1);
        v34 = v33 + 1;
        v35 = v30;
        if ((v24 & 0x80000000) == 0 && !v35)
        {
          v30 = __OFADD__(v24, v34);
          v36 = v24 + v34;
          if (!v30)
          {
            v30 = __OFADD__(v36, 1);
            v37 = v36 + 1;
            v38 = v30;
            if ((v21 & 0x80000000) == 0 && !v38)
            {
              v30 = __OFADD__(v21, v37);
              v39 = v21 + v37;
              if (!v30)
              {
                v30 = __OFADD__(v39, 2);
                v40 = v39 + 2;
                v41 = v30;
                if ((v18 & 0x80000000) == 0 && !v41)
                {
                  v30 = __OFADD__(v18, v40);
                  v42 = v18 + v40;
                  if (!v30)
                  {
                    v30 = __OFADD__(v42, 2);
                    v43 = v42 + 2;
                    v44 = v30;
                    if ((v14 & 0x80000000) == 0 && !v44)
                    {
                      v30 = __OFADD__(v14, v43);
                      v45 = v14 + v43;
                      if (!v30)
                      {
                        v46 = (v45 + 1);
                        if (!__OFADD__(v45, 1))
                        {
                          if (v45 == -1)
                          {
                            v47 = MEMORY[0x1E0CBEF70];
                            *MEMORY[0x1E0CBEF70] += 2;
                            goto LABEL_102;
                          }
                          if ((v46 & 0x80000000) == 0)
                          {
                            WTF::tryFastCompactMalloc((WTF *)(v46 + 20));
                            v47 = v115[0];
                            if (v115[0])
                            {
                              *(_DWORD *)v115[0] = 2;
                              *(_DWORD *)(v47 + 4) = v46;
                              *(_BYTE *)(v47 + 20) = 40;
                              *(_QWORD *)(v47 + 8) = v47 + 20;
                              *(_DWORD *)(v47 + 16) = 4;
                              v48 = 0;
                              if ((v12 & 0x80000000) != 0)
                              {
                                v84 = -v12;
                                do
                                {
                                  *((_BYTE *)&v115[1] + v48-- + 4) = (v84 % 0xA) | 0x30;
                                  v16 = v84 > 9;
                                  v84 /= 0xAu;
                                }
                                while (v16);
                                v85 = v48 + 12;
                                v50 = (char *)&v115[1] + v48 + 4;
                                *v50 = 45;
                                if (v48 + 14 > 14)
                                  goto LABEL_60;
                                if (v85 <= 12)
                                  v85 = 12;
                                v51 = v85 - v48 - 11;
                              }
                              else
                              {
                                v49 = v12;
                                do
                                {
                                  *((_BYTE *)&v115[1] + v48-- + 4) = (v49 % 0xA) | 0x30;
                                  v16 = v49 > 9;
                                  v49 /= 0xAu;
                                }
                                while (v16);
                                if (v48 + 14 > 13)
                                  goto LABEL_60;
                                v50 = (char *)&v115[1] + v48 + 5;
                                v51 = -v48;
                              }
                              memcpy((void *)(v47 + 21), v50, v51);
LABEL_60:
                              if ((v12 & 0x80000000) != 0)
                              {
                                v105 = -v12;
                                v52 = 1;
                                do
                                {
                                  ++v52;
                                  v96 = v105 >= 0xA;
                                  v105 /= 0xAu;
                                }
                                while (v96);
                              }
                              else
                              {
                                v52 = 0;
                                do
                                {
                                  ++v52;
                                  v16 = v12 > 9;
                                  v12 /= 0xAu;
                                }
                                while (v16);
                              }
                              v53 = (_WORD *)(v47 + 21 + v52);
                              *v53 = 8236;
                              v54 = (char *)(v53 + 1);
                              v55 = 0;
                              if ((v11 & 0x80000000) != 0)
                              {
                                v86 = -v11;
                                do
                                {
                                  *((_BYTE *)&v115[1] + v55-- + 4) = (v86 % 0xA) | 0x30;
                                  v16 = v86 > 9;
                                  v86 /= 0xAu;
                                }
                                while (v16);
                                v87 = v55 + 12;
                                v57 = (char *)&v115[1] + v55 + 4;
                                *v57 = 45;
                                if (v55 + 14 > 14)
                                  goto LABEL_69;
                                if (v87 <= 12)
                                  v87 = 12;
                                v58 = v87 - v55 - 11;
                              }
                              else
                              {
                                v56 = v11;
                                do
                                {
                                  *((_BYTE *)&v115[1] + v55-- + 4) = (v56 % 0xA) | 0x30;
                                  v16 = v56 > 9;
                                  v56 /= 0xAu;
                                }
                                while (v16);
                                if (v55 + 14 > 13)
                                  goto LABEL_69;
                                v57 = (char *)&v115[1] + v55 + 5;
                                v58 = -v55;
                              }
                              memcpy(v54, v57, v58);
LABEL_69:
                              if ((v11 & 0x80000000) != 0)
                              {
                                v106 = -v11;
                                v59 = 1;
                                do
                                {
                                  ++v59;
                                  v96 = v106 >= 0xA;
                                  v106 /= 0xAu;
                                }
                                while (v96);
                              }
                              else
                              {
                                v59 = 0;
                                do
                                {
                                  ++v59;
                                  v16 = v11 > 9;
                                  v11 /= 0xAu;
                                }
                                while (v16);
                              }
                              v60 = &v54[v59];
                              *(_WORD *)v60 = 8233;
                              v61 = v60 + 2;
                              v62 = 0;
                              if ((v13 & 0x80000000) != 0)
                              {
                                v88 = -v13;
                                do
                                {
                                  *((_BYTE *)&v115[1] + v62-- + 4) = (v88 % 0xA) | 0x30;
                                  v16 = v88 > 9;
                                  v88 /= 0xAu;
                                }
                                while (v16);
                                v89 = v62 + 12;
                                v64 = (char *)&v115[1] + v62 + 4;
                                *v64 = 45;
                                if (v62 + 14 > 14)
                                  goto LABEL_78;
                                if (v89 <= 12)
                                  v89 = 12;
                                v65 = v89 - v62 - 11;
                              }
                              else
                              {
                                v63 = v13;
                                do
                                {
                                  *((_BYTE *)&v115[1] + v62-- + 4) = (v63 % 0xA) | 0x30;
                                  v16 = v63 > 9;
                                  v63 /= 0xAu;
                                }
                                while (v16);
                                if (v62 + 14 > 13)
                                  goto LABEL_78;
                                v64 = (char *)&v115[1] + v62 + 5;
                                v65 = -v62;
                              }
                              memcpy(v61, v64, v65);
LABEL_78:
                              if ((v13 & 0x80000000) != 0)
                              {
                                v107 = -v13;
                                v66 = 1;
                                do
                                {
                                  ++v66;
                                  v96 = v107 >= 0xA;
                                  v107 /= 0xAu;
                                }
                                while (v96);
                              }
                              else
                              {
                                v66 = 0;
                                do
                                {
                                  ++v66;
                                  v16 = v13 > 9;
                                  v13 /= 0xAu;
                                }
                                while (v16);
                              }
                              v67 = &v61[v66];
                              *v67 = 32;
                              v68 = v67 + 1;
                              v69 = 0;
                              if ((v17 & 0x80000000) != 0)
                              {
                                v90 = -v17;
                                do
                                {
                                  *((_BYTE *)&v115[1] + v69-- + 4) = (v90 % 0xA) | 0x30;
                                  v16 = v90 > 9;
                                  v90 /= 0xAu;
                                }
                                while (v16);
                                v91 = v69 + 12;
                                v71 = (char *)&v115[1] + v69 + 4;
                                *v71 = 45;
                                if (v69 + 14 <= 14)
                                {
                                  if (v91 <= 12)
                                    v91 = 12;
                                  v72 = v91 - v69 - 11;
                                  goto LABEL_86;
                                }
                              }
                              else
                              {
                                v70 = v17;
                                do
                                {
                                  *((_BYTE *)&v115[1] + v69-- + 4) = (v70 % 0xA) | 0x30;
                                  v16 = v70 > 9;
                                  v70 /= 0xAu;
                                }
                                while (v16);
                                if (v69 + 14 <= 13)
                                {
                                  v71 = (char *)&v115[1] + v69 + 5;
                                  v72 = -v69;
LABEL_86:
                                  memcpy(v68, v71, v72);
                                }
                              }
                              if ((v17 & 0x80000000) != 0)
                              {
                                v108 = -v17;
                                v73 = 1;
                                do
                                {
                                  ++v73;
                                  v96 = v108 >= 0xA;
                                  v108 /= 0xAu;
                                }
                                while (v96);
                              }
                              else
                              {
                                v73 = 0;
                                do
                                {
                                  ++v73;
                                  v16 = v17 > 9;
                                  v17 /= 0xAu;
                                }
                                while (v16);
                              }
                              v74 = &v68[v73];
                              *v74 = 32;
                              v75 = v74 + 1;
                              v76 = 0;
                              if ((v20 & 0x80000000) != 0)
                              {
                                v92 = -v20;
                                v93 = v92;
                                do
                                {
                                  *((_BYTE *)&v115[1] + v76-- + 4) = (v93 % 0xA) | 0x30;
                                  v16 = v93 > 9;
                                  v93 /= 0xAu;
                                }
                                while (v16);
                                v94 = v76 + 12;
                                v95 = (char *)&v115[1] + v76 + 4;
                                *v95 = 45;
                                if (v76 + 14 <= 14)
                                {
                                  if (v94 <= 12)
                                    v94 = 12;
                                  memcpy(v75, v95, v94 - v76 - 11);
                                }
                                v78 = 1;
                                do
                                {
                                  ++v78;
                                  v96 = v92 >= 0xA;
                                  v92 /= 0xAu;
                                }
                                while (v96);
                              }
                              else
                              {
                                v77 = v20;
                                do
                                {
                                  *((_BYTE *)&v115[1] + v76-- + 4) = (v77 % 0xA) | 0x30;
                                  v16 = v77 > 9;
                                  v77 /= 0xAu;
                                }
                                while (v16);
                                if (v76 + 14 <= 13)
                                  memcpy(v75, (char *)&v115[1] + v76 + 5, -v76);
                                v78 = 0;
                                do
                                {
                                  ++v78;
                                  v16 = v20 > 9;
                                  v20 /= 0xAu;
                                }
                                while (v16);
                              }
                              v79 = &v75[v78];
                              *v79 = 32;
                              v80 = v79 + 1;
                              v81 = 0;
                              if ((v23 & 0x80000000) != 0)
                              {
                                v97 = -v23;
                                do
                                {
                                  *((_BYTE *)&v115[1] + v81-- + 4) = (v97 % 0xA) | 0x30;
                                  v16 = v97 > 9;
                                  v97 /= 0xAu;
                                }
                                while (v16);
                                v98 = v81 + 12;
                                v82 = (char *)&v115[1] + v81 + 4;
                                *v82 = 45;
                                if (v81 + 14 > 14)
                                  goto LABEL_102;
                                if (v98 <= 12)
                                  v98 = 12;
                                v83 = v98 - v81 - 11;
                              }
                              else
                              {
                                do
                                {
                                  *((_BYTE *)&v115[1] + v81-- + 4) = (v23 % 0xA) | 0x30;
                                  v16 = v23 > 9;
                                  v23 /= 0xAu;
                                }
                                while (v16);
                                if (v81 + 14 > 13)
                                  goto LABEL_102;
                                v82 = (char *)&v115[1] + v81 + 5;
                                v83 = -v81;
                              }
                              memcpy(v80, v82, v83);
LABEL_102:
                              *a9 = v47;
                              return;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  *a9 = 0;
  __break(0xC471u);
}

uint64_t WebCore::PrintContext::beginAndComputePageRectsWithPageSize(WTF **this, WebCore::LocalFrame *a2, const WebCore::FloatSize *a3)
{
  uint64_t result;
  float v7;
  float v8;
  float v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  _DWORD v14[2];
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = *((_QWORD *)a2 + 37);
  if (result)
  {
    if (*((_QWORD *)a2 + 36) && *(_QWORD *)(result + 1944))
    {
      WebCore::Document::updateLayout(result, 0, 0);
      WebCore::PrintContext::begin((WebCore::PrintContext *)this, *(float *)a3, *((float *)a3 + 1));
      v7 = (float)*(int *)(*((_QWORD *)a2 + 36) + 256) / *(float *)a3;
      v8 = v7 * *(float *)a3;
      v9 = v7 * *((float *)a3 + 1);
      *(float *)v14 = v8;
      *(float *)&v14[1] = v9;
      v10 = qword_1ECE7C720;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C720, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *((unsigned int *)this + 9);
        *(_DWORD *)buf = 134217984;
        v16 = v12;
        _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, "Computing page rects with page size and clearing existing page rects. Existing page rects size = %zu", buf, 0xCu);
      }
      if (*((_DWORD *)this + 8))
      {
        if (*((_DWORD *)this + 9))
          *((_DWORD *)this + 9) = 0;
        v13 = this[3];
        if (v13)
        {
          this[3] = 0;
          *((_DWORD *)this + 8) = 0;
          WTF::fastFree(v13, v11);
        }
      }
      WebCore::PrintContext::computePageRectsWithPageSizeInternal((WebCore::PrintContext *)this, (const WebCore::FloatSize *)v14, 0);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::PrintContext::numberOfPages(WebCore::PrintContext *this, WebCore::LocalFrame *a2, const WebCore::FloatSize *a3)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t (**v12)(WebCore::FrameDestructionObserver *__hidden);
  uint64_t (**v13)(WebCore::FrameDestructionObserver *__hidden);
  uint64_t (**v14)(WebCore::FrameDestructionObserver *__hidden);
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;

  v5 = (unsigned int *)((char *)this + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v14 = off_1E33FEB10;
  v15 = 0u;
  WebCore::FrameDestructionObserver::observeFrame((WebCore::FrameDestructionObserver *)&v14, this);
  v14 = off_1E3401AC0;
  v18 = 0;
  v16 = 0u;
  v17 = 0;
  v7 = WebCore::PrintContext::beginAndComputePageRectsWithPageSize((WTF **)&v14, this, a2);
  v8 = HIDWORD(v16);
  WebCore::PrintContext::~PrintContext((WebCore::PrintContext *)&v14);
  do
  {
    v9 = __ldaxr(v5);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v5));
  if (!v10)
  {
    atomic_store(1u, v5);
    v12 = (uint64_t (**)(WebCore::FrameDestructionObserver *__hidden))WTF::fastMalloc((WTF *)0x10);
    *v12 = (uint64_t (*)(WebCore::FrameDestructionObserver *__hidden))off_1E31FE290;
    v12[1] = (uint64_t (*)(WebCore::FrameDestructionObserver *__hidden))v5;
    v14 = v12;
    WTF::ensureOnMainThread();
    v13 = v14;
    v14 = 0;
    if (v13)
      (*((void (**)(uint64_t (**)(WebCore::FrameDestructionObserver *__hidden)))*v13 + 1))(v13);
  }
  if (v7)
    return v8;
  else
    return 0xFFFFFFFFLL;
}

void WebCore::PrintContext::spoolAllPagesWithBoundaries(WebCore::PrintContext *this, WebCore::LocalFrame *a2, WebCore::GraphicsContext *a3, const WebCore::FloatSize *a4)
{
  unsigned int *v7;
  unsigned int v8;
  float v9;
  int v10;
  void *v11;
  float v12;
  unint64_t v13;
  void *v14;
  void *v15;
  float v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t (**v25)(WebCore::FrameDestructionObserver *__hidden);
  uint64_t (**v26)(WebCore::FrameDestructionObserver *__hidden);
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  float v30[2];
  uint64_t v31;
  float v32;
  float v33;
  uint64_t (**v34)(WebCore::FrameDestructionObserver *__hidden);
  __int128 v35;
  __int128 v36;
  char v37;
  uint64_t v38;

  v7 = (unsigned int *)((char *)this + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v34 = off_1E33FEB10;
  v35 = 0u;
  WebCore::FrameDestructionObserver::observeFrame((WebCore::FrameDestructionObserver *)&v34, this);
  v34 = off_1E3401AC0;
  v38 = 0;
  v36 = 0u;
  v37 = 0;
  if (WebCore::PrintContext::beginAndComputePageRectsWithPageSize((WTF **)&v34, this, a3))
  {
    v9 = *(float *)a3;
    v10 = (int)(float)((float)((float)HIDWORD(v36) * (float)(*((float *)a3 + 1) + 1.0)) + -1.0);
    v31 = 0x11040000FFFFFFFFLL;
    WebCore::GraphicsContext::setFillColor(a2, (const WebCore::Color *)&v31);
    if ((v31 & 0x8000000000000) != 0)
    {
      v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v11);
      }
    }
    v31 = 0;
    v32 = v9;
    v33 = (float)v10;
    (*(void (**)(WebCore::LocalFrame *, uint64_t *, uint64_t))(*(_QWORD *)a2 + 216))(a2, &v31, 1);
    (*(void (**)(WebCore::LocalFrame *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
    if (HIDWORD(v36))
    {
      (*(void (**)(WebCore::LocalFrame *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
      (*(void (**)(WebCore::LocalFrame *, float, float))(*(_QWORD *)a2 + 648))(a2, 0.0, 0.0);
      WebCore::PrintContext::spoolPage((uint64_t)&v34, a2, 0, v9);
      (*(void (**)(WebCore::LocalFrame *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
      if (HIDWORD(v36) >= 2)
      {
        v12 = *((float *)a3 + 1) + 1.0;
        v13 = 1;
        do
        {
          (*(void (**)(WebCore::LocalFrame *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
          v31 = 0x110400000000FFFFLL;
          WebCore::GraphicsContext::setStrokeColor(a2, (const WebCore::Color *)&v31);
          if ((v31 & 0x8000000000000) != 0)
          {
            v17 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v14);
            }
          }
          v31 = 0x110400000000FFFFLL;
          WebCore::GraphicsContext::setFillColor(a2, (const WebCore::Color *)&v31);
          if ((v31 & 0x8000000000000) != 0)
          {
            v20 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              WTF::fastFree((WTF *)v20, v15);
            }
          }
          v16 = (float)(int)v12;
          LODWORD(v31) = 0;
          *((float *)&v31 + 1) = v16;
          v30[0] = (float)(int)v9;
          v30[1] = v16;
          (*(void (**)(WebCore::LocalFrame *, uint64_t *, float *))(*(_QWORD *)a2 + 152))(a2, &v31, v30);
          (*(void (**)(WebCore::LocalFrame *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
          (*(void (**)(WebCore::LocalFrame *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
          (*(void (**)(WebCore::LocalFrame *, float, float))(*(_QWORD *)a2 + 648))(a2, 0.0, v16);
          WebCore::PrintContext::spoolPage((uint64_t)&v34, a2, v13, v9);
          (*(void (**)(WebCore::LocalFrame *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
          v12 = (float)(*((float *)a3 + 1) + 1.0) + v16;
          ++v13;
        }
        while (v13 < HIDWORD(v36));
      }
    }
    (*(void (**)(WebCore::LocalFrame *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  }
  WebCore::PrintContext::~PrintContext((WebCore::PrintContext *)&v34);
  do
  {
    v23 = __ldaxr(v7);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v7));
  if (!v24)
  {
    atomic_store(1u, v7);
    v25 = (uint64_t (**)(WebCore::FrameDestructionObserver *__hidden))WTF::fastMalloc((WTF *)0x10);
    *v25 = (uint64_t (*)(WebCore::FrameDestructionObserver *__hidden))off_1E31FE290;
    v25[1] = (uint64_t (*)(WebCore::FrameDestructionObserver *__hidden))v7;
    v34 = v25;
    WTF::ensureOnMainThread();
    v26 = v34;
    v34 = 0;
    if (v26)
      (*((void (**)(uint64_t (**)(WebCore::FrameDestructionObserver *__hidden)))*v26 + 1))(v26);
  }
}

uint64_t WebCore::ProcessWarming::collectPrewarmInformation@<X0>(WebCore::ProcessWarming *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::FontCache *v3;

  v3 = (WebCore::FontCache *)WebCore::FontCache::forCurrentThread(this);
  return WebCore::FontCache::collectPrewarmInformation(v3, a2);
}

WTF::StringImpl *WebCore::ProcessWarming::prewarmWithInformation(WebCore *a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(a1);
  v4 = *(WTF::StringImpl **)(v3 + 80);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v3);
    v4 = *(WTF::StringImpl **)(v3 + 80);
  }
  return WebCore::FontCache::prewarm(v4, (uint64_t)a1);
}

void WebCore::Quirks::~Quirks(WebCore::Quirks *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((unsigned int *)this + 23);
  if ((_DWORD)v3)
  {
    v8 = (WTF::StringImpl **)*((_QWORD *)this + 10);
    v9 = 8 * v3;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v4 = (WTF *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v11 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v11)
      {
        v14 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v11));
        v5 = v14;
      }
      v12 = *(WTF **)(v5 + 16);
      if (v12)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v13 = v5;
        WTF::fastFree(v12, a2);
        v5 = v13;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

uint64_t WebCore::Quirks::needsAutoplayPlayPauseEvents(WebCore::Quirks *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  v5 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v5 + 2;
  v6 = *(_QWORD *)(v2 + 528);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 280) + 88);
      if (v8)
      {
        if (*(_QWORD *)(v7 + 296) == v2 && (*(_BYTE *)(v8 + 3521) & 1) != 0)
        {
          v4 = 1;
          if (!v5)
            goto LABEL_33;
          goto LABEL_30;
        }
      }
    }
  }
  if (*(_BYTE *)(v2 + 3362) || *(_BYTE *)(v2 + 3405))
  {
    i = v2;
    if (v6)
    {
      v18 = *(_QWORD *)(v6 + 8);
      i = v2;
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 120);
        i = v2;
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          for (i = v2; v20; v20 = *(_QWORD *)(v23 + 8))
          {
            i = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8);
            v21 = *(_QWORD *)(i + 528);
            if (!v21)
              break;
            v22 = *(_QWORD *)(v21 + 8);
            if (!v22)
              break;
            v23 = *(_QWORD *)(v22 + 120);
            if (!v23)
              break;
          }
        }
      }
    }
  }
  else
  {
    i = v2;
    if (v6)
    {
      v10 = *(_QWORD *)(v6 + 8);
      i = v2;
      if (v10)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v10 + 128) + 8);
        v12 = v11 && *(_BYTE *)(v11 + 144) == 0;
        i = v2;
        if (v12)
        {
          v13 = *(_QWORD *)(v11 + 296);
          i = v2;
          if (v13)
            i = v13;
        }
      }
    }
  }
  v14 = *(_QWORD *)(i + 528);
  if (!v14
    || (v15 = *(_QWORD *)(v14 + 8)) == 0
    || (v16 = *(_QWORD *)(*(_QWORD *)(v15 + 280) + 88)) == 0
    || *(_QWORD *)(v15 + 296) != i)
  {
    v4 = 0;
    if (!v5)
      goto LABEL_33;
LABEL_30:
    *(_DWORD *)(v2 + 24) = v5;
    return v4;
  }
  v4 = *(_BYTE *)(v16 + 3521) & 1;
  if (v5)
    goto LABEL_30;
LABEL_33:
  if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  return v4;
}

uint64_t WebCore::Quirks::needsSeekingSupportDisabled(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v20;
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v6 = *(_QWORD *)(v6 + 8);
  if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
  {
    while (1)
    {
      v16 = *(_QWORD *)(v6 + 528);
      if (!v16)
        break;
      v17 = *(_QWORD *)(v16 + 8);
      if (!v17)
        break;
      v18 = *(_QWORD *)(v17 + 120);
      if (!v18)
        break;
      v19 = *(_QWORD *)(v18 + 8);
      if (!v19)
        break;
      v6 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 8);
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9)
          v10 = *(_BYTE *)(v9 + 144) == 0;
        else
          v10 = 0;
        if (v10)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, (const WTF::URL *)(v6 + 736));
  v4 = WTF::equal(v20, v5, v12);
  v14 = v20;
  v20 = 0;
  if (!v14)
    goto LABEL_23;
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
LABEL_23:
    if (!v5)
      return v4;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v14, v13);
  if (!v5)
    return v4;
LABEL_24:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v13);
  else
    *(_DWORD *)v5 -= 2;
  return v4;
}

uint64_t WebCore::Quirks::shouldAutoplayWebAudioForArbitraryUserGesture(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v20;
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v6 = *(_QWORD *)(v6 + 8);
  if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
  {
    while (1)
    {
      v16 = *(_QWORD *)(v6 + 528);
      if (!v16)
        break;
      v17 = *(_QWORD *)(v16 + 8);
      if (!v17)
        break;
      v18 = *(_QWORD *)(v17 + 120);
      if (!v18)
        break;
      v19 = *(_QWORD *)(v18 + 8);
      if (!v19)
        break;
      v6 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 8);
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9)
          v10 = *(_BYTE *)(v9 + 144) == 0;
        else
          v10 = 0;
        if (v10)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, (const WTF::URL *)(v6 + 736));
  v4 = WTF::equal(v20, v5, v12);
  v14 = v20;
  v20 = 0;
  if (!v14)
    goto LABEL_23;
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
LABEL_23:
    if (!v5)
      return v4;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v14, v13);
  if (!v5)
    return v4;
LABEL_24:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v13);
  else
    *(_DWORD *)v5 -= 2;
  return v4;
}

BOOL WebCore::Quirks::shouldTooltipPreventFromProceedingWithClick(WebCore::Quirks *this, const WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v2)
    return 0;
  v5 = *(_QWORD *)(v2 + 680);
  if (!*(_BYTE *)(v5 + 243))
  {
    if ((*(_QWORD *)(v5 + 688) & 0x80000) != 0)
      goto LABEL_5;
    return 0;
  }
  if (!*(_BYTE *)(v5 + 242))
    return 0;
LABEL_5:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v26;
  v7 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v7 = *(_QWORD *)(v7 + 8);
  if (*(_BYTE *)(v7 + 3362) || *(_BYTE *)(v7 + 3405))
  {
    while (1)
    {
      v22 = *(_QWORD *)(v7 + 528);
      if (!v22)
        break;
      v23 = *(_QWORD *)(v22 + 8);
      if (!v23)
        break;
      v24 = *(_QWORD *)(v23 + 120);
      if (!v24)
        break;
      v25 = *(_QWORD *)(v24 + 8);
      if (!v25)
        break;
      v7 = *(_QWORD *)(*(_QWORD *)(v25 + 40) + 8);
    }
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 528);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v9 + 128) + 8);
        if (v10 && *(_BYTE *)(v10 + 144) == 0)
        {
          v12 = *(_QWORD *)(v10 + 296);
          if (v12)
            v7 = v12;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v26, (const WTF::URL *)(v7 + 736));
  v15 = WTF::equal(v26, v6, v13);
  v16 = v26;
  v26 = 0;
  if (!v16)
  {
LABEL_21:
    if (v6)
      goto LABEL_22;
    goto LABEL_24;
  }
  if (*(_DWORD *)v16 != 2)
  {
    *(_DWORD *)v16 -= 2;
    goto LABEL_21;
  }
  WTF::StringImpl::destroy(v16, v14);
  if (v6)
  {
LABEL_22:
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v14);
    else
      *(_DWORD *)v6 -= 2;
  }
LABEL_24:
  if (!v15)
    return 0;
  {
    WTF::AtomStringImpl::add();
    WebCore::Quirks::shouldTooltipPreventFromProceedingWithClick(WebCore::Element const&)const::tooltipClass = (uint64_t)v26;
  }
  v17 = *((_QWORD *)a2 + 13);
  if (!v17)
    return 0;
  v18 = *(_QWORD *)(v17 + 16);
  if (!v18)
    return 0;
  v19 = 0;
  do
  {
    v20 = *(_QWORD *)(v18 + 16 + 8 * v19);
    result = v20 == WebCore::Quirks::shouldTooltipPreventFromProceedingWithClick(WebCore::Element const&)const::tooltipClass;
    if (v20 == WebCore::Quirks::shouldTooltipPreventFromProceedingWithClick(WebCore::Element const&)const::tooltipClass)
      break;
    ++v19;
  }
  while (v19 < *(unsigned int *)(v18 + 12));
  return result;
}

uint64_t WebCore::Quirks::shouldHideSearchFieldResultsButton(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  v5 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
  if (v5 != -1)
  {
    v23 = (WTF::StringImpl *)&v21;
    v22 = &v23;
    std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
  }
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v6 = *(_QWORD *)(v6 + 8);
  if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
  {
    while (1)
    {
      v17 = *(_QWORD *)(v6 + 528);
      if (!v17)
        break;
      v18 = *(_QWORD *)(v17 + 8);
      if (!v18)
        break;
      v19 = *(_QWORD *)(v18 + 120);
      if (!v19)
        break;
      v20 = *(_QWORD *)(v19 + 8);
      if (!v20)
        break;
      v6 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8);
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9 && *(_BYTE *)(v9 + 144) == 0)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
  }
  v12 = WTF::URL::host((WTF::URL *)(v6 + 736));
  WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v12, v13, (uint64_t *)&v23);
  if (!v23)
    return 0;
  v4 = WTF::StringImpl::startsWith();
  v15 = v23;
  v23 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v4;
}

uint64_t WebCore::Quirks::isTouchBarUpdateSuppressedForHiddenContentEditable(WebCore::Quirks *this)
{
  return 0;
}

uint64_t WebCore::Quirks::isNeverRichlyEditableForTouchBar(WebCore::Quirks *this)
{
  return 0;
}

BOOL WebCore::Quirks::shouldSuppressAutocorrectionAndAutocapitalizationInHiddenEditableAreas(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint16x8_t v12;
  uint16x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 680);
      if (*(_BYTE *)(v2 + 243))
      {
        if (!*(_BYTE *)(v2 + 242))
          return 0;
      }
      else if ((*(_QWORD *)(v2 + 688) & 0x80000) == 0)
      {
        return 0;
      }
      if (*(_BYTE *)(v1 + 3362) || *(_BYTE *)(v1 + 3405))
      {
        while (1)
        {
          v14 = *(_QWORD *)(v1 + 528);
          if (!v14)
            break;
          v15 = *(_QWORD *)(v14 + 8);
          if (!v15)
            break;
          v16 = *(_QWORD *)(v15 + 120);
          if (!v16)
            break;
          v17 = *(_QWORD *)(v16 + 8);
          if (!v17)
            break;
          v1 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 8);
        }
      }
      else
      {
        v3 = *(_QWORD *)(v1 + 528);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (v4)
          {
            v5 = *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8);
            if (v5 && *(_BYTE *)(v5 + 144) == 0)
            {
              v7 = *(_QWORD *)(v5 + 296);
              if (v7)
                v1 = v7;
            }
          }
        }
      }
      v8 = (const char *)WTF::URL::host((WTF::URL *)(v1 + 736));
      v1 = v9 == 15 && (unint64_t)(v8 == "docs.google.com");
      if (v8 != "docs.google.com" && v9 == 15)
      {
        if ((v9 & 0xFF00000000) != 0)
        {
          if (*v8 == 100 && *(_QWORD *)(v8 + 1) == 0x676F6F672E73636FLL)
            return *(_QWORD *)(v8 + 7) == 0x6D6F632E656C676FLL;
          return 0;
        }
        if (*(_WORD *)v8 != 100)
          return 0;
        v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 2), (int16x8_t)xmmword_1969F5A80);
        v12.i16[0] = vminvq_u16(v12);
        v1 = v12.u32[0];
        if (v12.i32[0])
        {
          v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 14), (int16x8_t)xmmword_1969F5A90);
          v13.i16[0] = vminvq_u16(v13);
          return v13.i32[0] != 0;
        }
      }
    }
  }
  return v1;
}

uint64_t WebCore::Quirks::shouldDispatchSyntheticMouseEventsWhenModifyingSelection(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  const WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;

  if (!*(_QWORD *)this)
    return (*(_QWORD *)(MEMORY[0x2A8] + 696) >> 16) & 1;
  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 680);
  if ((*(_QWORD *)(v1 + 696) & 0x10000) != 0)
    return 1;
  if (*(_BYTE *)(v1 + 243))
  {
    if (!*(_BYTE *)(v1 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v1 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v34;
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v5 = *(_QWORD *)(v5 + 8);
  if (*(_BYTE *)(v5 + 3362) || *(_BYTE *)(v5 + 3405))
  {
    while (1)
    {
      v26 = *(_QWORD *)(v5 + 528);
      if (!v26)
        break;
      v27 = *(_QWORD *)(v26 + 8);
      if (!v27)
        break;
      v28 = *(_QWORD *)(v27 + 120);
      if (!v28)
        break;
      v29 = *(_QWORD *)(v28 + 8);
      if (!v29)
        break;
      v5 = *(_QWORD *)(*(_QWORD *)(v29 + 40) + 8);
    }
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 528);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8);
        if (v8 && *(_BYTE *)(v8 + 144) == 0)
        {
          v10 = *(_QWORD *)(v8 + 296);
          if (v10)
            v5 = v10;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v34, (const WTF::URL *)(v5 + 736));
  v13 = WTF::equal(v34, v4, v11);
  v14 = v34;
  v34 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v12);
      if (!v4)
        goto LABEL_27;
      goto LABEL_25;
    }
    *(_DWORD *)v14 -= 2;
  }
  if (!v4)
    goto LABEL_27;
LABEL_25:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v12);
  else
    *(_DWORD *)v4 -= 2;
LABEL_27:
  if ((v13 & 1) != 0)
    return 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = v34;
  v17 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v17 = *(_QWORD *)(v17 + 8);
  if (*(_BYTE *)(v17 + 3362) || *(_BYTE *)(v17 + 3405))
  {
    while (1)
    {
      v30 = *(_QWORD *)(v17 + 528);
      if (!v30)
        break;
      v31 = *(_QWORD *)(v30 + 8);
      if (!v31)
        break;
      v32 = *(_QWORD *)(v31 + 120);
      if (!v32)
        break;
      v33 = *(_QWORD *)(v32 + 8);
      if (!v33)
        break;
      v17 = *(_QWORD *)(*(_QWORD *)(v33 + 40) + 8);
    }
  }
  else
  {
    v18 = *(_QWORD *)(v17 + 528);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(v19 + 128) + 8);
        if (v20)
          v21 = *(_BYTE *)(v20 + 144) == 0;
        else
          v21 = 0;
        if (v21)
        {
          v22 = *(_QWORD *)(v20 + 296);
          if (v22)
            v17 = v22;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v34, (const WTF::URL *)(v17 + 736));
  v3 = WTF::equal(v34, v16, v23);
  v25 = v34;
  v34 = 0;
  if (!v25)
    goto LABEL_46;
  if (*(_DWORD *)v25 != 2)
  {
    *(_DWORD *)v25 -= 2;
LABEL_46:
    if (!v16)
      return v3;
    goto LABEL_47;
  }
  WTF::StringImpl::destroy(v25, v24);
  if (!v16)
    return v3;
LABEL_47:
  if (*(_DWORD *)v16 == 2)
    WTF::StringImpl::destroy(v16, v24);
  else
    *(_DWORD *)v16 -= 2;
  return v3;
}

uint64_t WebCore::Quirks::needsYouTubeMouseOutQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint16x8_t v8;
  uint16x8_t v9;

  if (!*(_QWORD *)this)
    return (*(_QWORD *)(MEMORY[0x2A8] + 696) >> 17) & 1;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  v2 = *(_QWORD *)(v1 + 680);
  if ((*(_QWORD *)(v2 + 696) & 0x20000) != 0)
    return 1;
  if (*(_BYTE *)(v2 + 243))
  {
    if (!*(_BYTE *)(v2 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v2 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  v4 = (const char *)WTF::URL::host((WTF::URL *)(v1 + 736));
  v3 = v5 == 15 && v4 == "www.youtube.com";
  if (v4 != "www.youtube.com" && v5 == 15)
  {
    if ((v5 & 0xFF00000000) != 0)
    {
      if (*v4 == 119 && *(_QWORD *)(v4 + 1) == 0x7574756F792E7777)
        return *(_QWORD *)(v4 + 7) == 0x6D6F632E65627574;
      return 0;
    }
    if (*(_WORD *)v4 != 119)
      return 0;
    v8 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v4 + 2), (int16x8_t)xmmword_1969F5AA0);
    v8.i16[0] = vminvq_u16(v8);
    v3 = v8.u32[0];
    if (v8.i32[0])
    {
      v9 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v4 + 14), (int16x8_t)xmmword_1969F5AB0);
      v9.i16[0] = vminvq_u16(v9);
      return v9.i32[0] != 0;
    }
  }
  return v3;
}

BOOL WebCore::Quirks::shouldDisableWritingSuggestionsByDefault(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint16x8_t v12;
  uint16x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 680);
      if (*(_BYTE *)(v2 + 243))
      {
        if (!*(_BYTE *)(v2 + 242))
          return 0;
      }
      else if ((*(_QWORD *)(v2 + 688) & 0x80000) == 0)
      {
        return 0;
      }
      if (*(_BYTE *)(v1 + 3362) || *(_BYTE *)(v1 + 3405))
      {
        while (1)
        {
          v14 = *(_QWORD *)(v1 + 528);
          if (!v14)
            break;
          v15 = *(_QWORD *)(v14 + 8);
          if (!v15)
            break;
          v16 = *(_QWORD *)(v15 + 120);
          if (!v16)
            break;
          v17 = *(_QWORD *)(v16 + 8);
          if (!v17)
            break;
          v1 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 8);
        }
      }
      else
      {
        v3 = *(_QWORD *)(v1 + 528);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (v4)
          {
            v5 = *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8);
            if (v5 && *(_BYTE *)(v5 + 144) == 0)
            {
              v7 = *(_QWORD *)(v5 + 296);
              if (v7)
                v1 = v7;
            }
          }
        }
      }
      v8 = (const char *)WTF::URL::host((WTF::URL *)(v1 + 736));
      v1 = v9 == 15 && (unint64_t)(v8 == "mail.google.com");
      if (v8 != "mail.google.com" && v9 == 15)
      {
        if ((v9 & 0xFF00000000) != 0)
        {
          if (*v8 == 109 && *(_QWORD *)(v8 + 1) == 0x676F6F672E6C6961)
            return *(_QWORD *)(v8 + 7) == 0x6D6F632E656C676FLL;
          return 0;
        }
        if (*(_WORD *)v8 != 109)
          return 0;
        v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 2), (int16x8_t)xmmword_1969F5AC0);
        v12.i16[0] = vminvq_u16(v12);
        v1 = v12.u32[0];
        if (v12.i32[0])
        {
          v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 14), (int16x8_t)xmmword_1969F5A90);
          v13.i16[0] = vminvq_u16(v13);
          return v13.i32[0] != 0;
        }
      }
    }
  }
  return v1;
}

WTF **WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>(uint64_t a1, WTF::ASCIICaseInsensitiveHash *this, WTF::StringImpl *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF **v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF **result;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  WTF **v20;
  int v21;
  uint64_t v22;

  v6 = WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map;
  if (WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(0),
        (v6 = WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::ASCIICaseInsensitiveHash::hash(this, this) & v7;
  v9 = (WTF **)(v6 + 16 * v8);
  if ((WTF::equal(*v9, 0, v10) & 1) == 0)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (*v9 == (WTF *)-1)
      {
        v20 = v9;
      }
      else
      {
        result = (WTF **)WTF::equalIgnoringASCIICase(*v9, *(const WTF::StringImpl **)this, v11);
        if ((_DWORD)result)
        {
          if (WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map)
            v22 = *(unsigned int *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 4);
          else
            v22 = 0;
          v19 = 0;
          v18 = WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map + 16 * v22;
          goto LABEL_12;
        }
      }
      v8 = (v8 + v21) & v7;
      v9 = (WTF **)(v6 + 16 * v8);
      ++v21;
    }
    while (!WTF::equal(*v9, 0, v11));
    if (v20)
    {
      *v20 = 0;
      v20[1] = 0;
      --*(_DWORD *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 16);
      v9 = v20;
    }
  }
  WebCore::RegistrableDomain::operator=(v9, this);
  result = (WTF **)WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>(v9 + 1, a3);
  if (WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map)
    v13 = *(_DWORD *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 12) + 1;
  else
    v13 = 1;
  *(_DWORD *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 12) = v13;
  v14 = WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map;
  if (WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map)
    v15 = *(_DWORD *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 12);
  else
    v15 = 0;
  v16 = (*(_DWORD *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 16) + v15);
  v17 = *(unsigned int *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 4);
  if (v17 > 0x400)
  {
    if (v17 > 2 * v16)
      goto LABEL_11;
LABEL_16:
    result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v9);
    v9 = result;
    v14 = WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map;
    if (WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map)
      v17 = *(unsigned int *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 4);
    else
      v17 = 0;
    goto LABEL_11;
  }
  if (3 * v17 <= 4 * v16)
    goto LABEL_16;
LABEL_11:
  v18 = v14 + 16 * v17;
  v19 = 1;
LABEL_12:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 16) = v19;
  return result;
}

uint64_t WebCore::Quirks::isAmazon(WebCore::Quirks *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;

  v2 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
  if (v2 != -1)
  {
    v21 = (WTF::StringImpl *)&v19;
    v20 = &v21;
    std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
  }
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v3 = *(_QWORD *)(v3 + 8);
  if (*(_BYTE *)(v3 + 3362) || *(_BYTE *)(v3 + 3405))
  {
    while (1)
    {
      v15 = *(_QWORD *)(v3 + 528);
      if (!v15)
        break;
      v16 = *(_QWORD *)(v15 + 8);
      if (!v16)
        break;
      v17 = *(_QWORD *)(v16 + 120);
      if (!v17)
        break;
      v18 = *(_QWORD *)(v17 + 8);
      if (!v18)
        break;
      v3 = *(_QWORD *)(*(_QWORD *)(v18 + 40) + 8);
    }
  }
  else
  {
    v4 = *(_QWORD *)(v3 + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8);
        if (v6 && *(_BYTE *)(v6 + 144) == 0)
        {
          v8 = *(_QWORD *)(v6 + 296);
          if (v8)
            v3 = v8;
        }
      }
    }
  }
  v9 = WTF::URL::host((WTF::URL *)(v3 + 736));
  WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v9, v10, (uint64_t *)&v21);
  if (!v21)
    return 0;
  v12 = WTF::StringImpl::startsWith();
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v12;
}

BOOL WebCore::Quirks::isGoogleMaps(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  WTF::URL *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  _BOOL8 v14;
  WTF::StringImpl *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v1 = *(_QWORD *)(v1 + 8);
  if (*(_BYTE *)(v1 + 3362) || *(_BYTE *)(v1 + 3405))
  {
    while (1)
    {
      v17 = *(_QWORD *)(v1 + 528);
      if (!v17)
        break;
      v18 = *(_QWORD *)(v17 + 8);
      if (!v18)
        break;
      v19 = *(_QWORD *)(v18 + 120);
      if (!v19)
        break;
      v20 = *(_QWORD *)(v19 + 8);
      if (!v20)
        break;
      v1 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8);
    }
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 528);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8);
        if (v4 && *(_BYTE *)(v4 + 144) == 0)
        {
          v6 = *(_QWORD *)(v4 + 296);
          if (v6)
            v1 = v6;
        }
      }
    }
  }
  v7 = (WTF::URL *)(v1 + 736);
  v8 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
  if (v8 != -1)
  {
    v23 = (WTF::StringImpl *)&v21;
    v22 = &v23;
    std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
  }
  v9 = WTF::URL::host(v7);
  WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v9, v10, (uint64_t *)&v23);
  if (!v23)
    return 0;
  if (WTF::StringImpl::startsWith())
  {
    v12 = WTF::URL::path(v7);
    if (v11 >= 6uLL)
    {
      if (((unint64_t)v11 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)v12 & 0xDF) == 0xF
          && (*(_BYTE *)(v12 + 1) & 0xDF) == 0x4D
          && (*(_BYTE *)(v12 + 2) & 0xDF) == 0x41
          && (*(_BYTE *)(v12 + 3) & 0xDF) == 0x50
          && (*(_BYTE *)(v12 + 4) & 0xDF) == 0x53)
        {
          v13 = *(unsigned __int8 *)(v12 + 5);
LABEL_26:
          v14 = (v13 & 0xFFFFFFDF) == 15;
          goto LABEL_34;
        }
      }
      else if ((*(_WORD *)v12 & 0xFFDF) == 0xF
             && (*(_WORD *)(v12 + 2) & 0xFFDF) == 0x4D
             && (*(_WORD *)(v12 + 4) & 0xFFDF) == 0x41
             && (*(_WORD *)(v12 + 6) & 0xFFDF) == 0x50
             && (*(_WORD *)(v12 + 8) & 0xFFDF) == 0x53)
      {
        v13 = *(unsigned __int16 *)(v12 + 10);
        goto LABEL_26;
      }
    }
  }
  v14 = 0;
LABEL_34:
  v15 = v23;
  v23 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v14;
}

uint64_t WebCore::Quirks::shouldDispatchedSimulatedMouseEventsAssumeDefaultPrevented(WebCore::Quirks *this, WebCore::EventTarget *a2)
{
  uint64_t v2;
  uint64_t v5;
  int shouldDispatchSimulatedMouseEvents;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WebCore::EventTarget *v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  const WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  WebCore::Element **v25;
  uint64_t v26;
  WTF::String *v27;
  __n128 v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v2)
    return 0;
  v5 = *(_QWORD *)(v2 + 680);
  if (*(_BYTE *)(v5 + 243))
  {
    if (*(_BYTE *)(v5 + 242))
      goto LABEL_5;
    return 0;
  }
  if ((*(_QWORD *)(v5 + 688) & 0x80000) == 0)
    return 0;
LABEL_5:
  shouldDispatchSimulatedMouseEvents = WebCore::Quirks::shouldDispatchSimulatedMouseEvents(this, a2);
  v7 = 0;
  if (!a2 || !shouldDispatchSimulatedMouseEvents)
    return v7;
  if ((*((_BYTE *)a2 + 22) & 2) == 0 || (*((_WORD *)a2 + 14) & 8) == 0)
    return 0;
  *((_DWORD *)a2 + 6) += 2;
  if (!WebCore::Quirks::isAmazon(this))
  {
LABEL_24:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = v42;
    v16 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v16 = *(_QWORD *)(v16 + 8);
    if (*(_BYTE *)(v16 + 3362) || *(_BYTE *)(v16 + 3405))
    {
      while (1)
      {
        v34 = *(_QWORD *)(v16 + 528);
        if (!v34)
          break;
        v35 = *(_QWORD *)(v34 + 8);
        if (!v35)
          break;
        v36 = *(_QWORD *)(v35 + 120);
        if (!v36)
          break;
        v37 = *(_QWORD *)(v36 + 8);
        if (!v37)
          break;
        v16 = *(_QWORD *)(*(_QWORD *)(v37 + 40) + 8);
      }
    }
    else
    {
      v17 = *(_QWORD *)(v16 + 528);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v18 + 128) + 8);
          if (v19 && *(_BYTE *)(v19 + 144) == 0)
          {
            v21 = *(_QWORD *)(v19 + 296);
            if (v21)
              v16 = v21;
          }
        }
      }
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v42, (const WTF::URL *)(v16 + 736));
    v23 = WTF::equal(v42, v15, v22);
    v24 = v42;
    v42 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::destroy(v24, v11);
        if (!v15)
          goto LABEL_43;
        goto LABEL_41;
      }
      *(_DWORD *)v24 -= 2;
    }
    if (!v15)
      goto LABEL_43;
LABEL_41:
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
LABEL_43:
    if (v23)
    {
      v25 = (WebCore::Element **)WebCore::Element::classList(a2);
      WTF::AtomStringImpl::add();
      v7 = WebCore::DOMTokenList::contains(v25, (const WTF::AtomString *)&v42, v26, v27, v28);
      v29 = v42;
      v42 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v11);
        else
          *(_DWORD *)v29 -= 2;
      }
    }
    else
    {
      v7 = 0;
    }
    goto LABEL_48;
  }
  v9 = *((_QWORD *)a2 + 13);
  if (v9 && *(_QWORD *)(v9 + 24))
  {
    v30 = *(_DWORD *)(v9 + 4);
    if ((v30 & 1) != 0)
    {
      v31 = *(uint64_t **)(v9 + 40);
      LODWORD(v32) = *(_DWORD *)(v9 + 52);
    }
    else
    {
      v31 = (uint64_t *)(v9 + 32);
      LODWORD(v32) = v30 >> 5;
    }
    if ((_DWORD)v32)
    {
      v32 = v32;
      while (1)
      {
        v33 = *v31;
        if (*v31 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v31 += 2;
        if (!--v32)
          goto LABEL_69;
      }
    }
    else
    {
LABEL_69:
      v31 = 0;
    }
    v10 = v31 + 1;
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  if ((MEMORY[0x19AEA53F4](*v10, "magnifierLens", 13) & 1) == 0)
  {
    v12 = a2;
    while (1)
    {
      v12 = (WebCore::EventTarget *)*((_QWORD *)v12 + 7);
      if (!v12)
        goto LABEL_24;
      if ((*((_WORD *)v12 + 14) & 8) != 0)
      {
        v13 = *((_QWORD *)v12 + 13);
        if (v13 && *(_QWORD *)(v13 + 24))
        {
          v38 = *(_DWORD *)(v13 + 4);
          if ((v38 & 1) != 0)
          {
            v39 = *(uint64_t **)(v13 + 40);
            LODWORD(v40) = *(_DWORD *)(v13 + 52);
          }
          else
          {
            v39 = (uint64_t *)(v13 + 32);
            LODWORD(v40) = v38 >> 5;
          }
          if ((_DWORD)v40)
          {
            v40 = v40;
            while (1)
            {
              v41 = *v39;
              if (*v39 == WebCore::HTMLNames::idAttr
                || *(_QWORD *)(v41 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                && *(_QWORD *)(v41 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
              {
                break;
              }
              v39 += 2;
              if (!--v40)
                goto LABEL_88;
            }
          }
          else
          {
LABEL_88:
            v39 = 0;
          }
          v14 = v39 + 1;
        }
        else
        {
          v14 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        }
        v7 = MEMORY[0x19AEA53F4](*v14, "magnifierLens", 13);
        goto LABEL_48;
      }
    }
  }
  v7 = 1;
LABEL_48:
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a2, v11);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  return v7;
}

uint64_t WebCore::Quirks::simulatedMouseEventTypeForTarget(WebCore::Quirks *this, WebCore::EventTarget *a2)
{
  uint64_t v4;
  WTF::String *v5;
  __n128 v6;
  _QWORD *Attribute;
  void *v8;
  char v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  if (!WebCore::Quirks::shouldDispatchSimulatedMouseEvents(this, a2))
    goto LABEL_10;
  if (!WebCore::Quirks::isGoogleMaps(this))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v28;
    v13 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v13 = *(_QWORD *)(v13 + 8);
    if (*(_BYTE *)(v13 + 3362) || *(_BYTE *)(v13 + 3405))
    {
      while (1)
      {
        v24 = *(_QWORD *)(v13 + 528);
        if (!v24)
          break;
        v25 = *(_QWORD *)(v24 + 8);
        if (!v25)
          break;
        v26 = *(_QWORD *)(v25 + 120);
        if (!v26)
          break;
        v27 = *(_QWORD *)(v26 + 8);
        if (!v27)
          break;
        v13 = *(_QWORD *)(*(_QWORD *)(v27 + 40) + 8);
      }
    }
    else
    {
      v14 = *(_QWORD *)(v13 + 528);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          v16 = *(_QWORD *)(*(_QWORD *)(v15 + 128) + 8);
          if (v16 && *(_BYTE *)(v16 + 144) == 0)
          {
            v18 = *(_QWORD *)(v16 + 296);
            if (v18)
              v13 = v18;
          }
        }
      }
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v28, (const WTF::URL *)(v13 + 736));
    v21 = WTF::equal(v28, v12, v19);
    v22 = v28;
    v28 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v20);
        if (v12)
        {
LABEL_28:
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v20);
          else
            *(_DWORD *)v12 -= 2;
        }
LABEL_30:
        v10 = v21 ^ 1;
        goto LABEL_31;
      }
      *(_DWORD *)v22 -= 2;
    }
    if (v12)
      goto LABEL_28;
    goto LABEL_30;
  }
  if (a2 && (*((_BYTE *)a2 + 22) & 2) != 0 && (*((_WORD *)a2 + 14) & 8) != 0)
  {
    *((_DWORD *)a2 + 6) += 2;
    Attribute = (_QWORD *)WebCore::Element::getAttribute(a2, (const WebCore::QualifiedName *)&WebCore::HTMLNames::classAttr, v4, v5, v6);
    v9 = MEMORY[0x19AEA53F4](*Attribute, "widget-expand-button-pegman-icon", 32);
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2, v8);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
    if ((v9 & 1) != 0)
    {
      v10 = 1;
LABEL_31:
      v11 = 1;
      return v10 | (v11 << 8);
    }
  }
LABEL_10:
  v10 = 0;
  v11 = 0;
  return v10 | (v11 << 8);
}

uint64_t WebCore::Quirks::shouldMakeTouchEventNonCancelableForTarget(WebCore::Quirks *this, WebCore::EventTarget *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t result;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  WebCore::Element **v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::String *v21;
  __n128 v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(v2 + 680);
  if (*(_BYTE *)(v4 + 243))
  {
    if (!*(_BYTE *)(v4 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v4 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (*(_BYTE *)(v2 + 3362) || *(_BYTE *)(v2 + 3405))
  {
    while (1)
    {
      v28 = *(_QWORD *)(v2 + 528);
      if (!v28)
        break;
      v29 = *(_QWORD *)(v28 + 8);
      if (!v29)
        break;
      v30 = *(_QWORD *)(v29 + 120);
      if (!v30)
        break;
      v31 = *(_QWORD *)(v30 + 8);
      if (!v31)
        break;
      v2 = *(_QWORD *)(*(_QWORD *)(v31 + 40) + 8);
    }
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 528);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
        if (v7 && *(_BYTE *)(v7 + 144) == 0)
        {
          v9 = *(_QWORD *)(v7 + 296);
          if (v9)
            v2 = v9;
        }
      }
    }
  }
  v10 = (const char *)WTF::URL::host((WTF::URL *)(v2 + 736));
  v12 = v10 == "www.youtube.com";
  if (v11 != 15)
    v12 = 0;
  if (v10 != "www.youtube.com" && v11 == 15)
  {
    if ((v11 & 0xFF00000000) != 0)
    {
      if (*v10 != 119 || *(_QWORD *)(v10 + 1) != 0x7574756F792E7777)
        return 0;
      v12 = *(_QWORD *)(v10 + 7) == 0x6D6F632E65627574;
    }
    else
    {
      if (*(_WORD *)v10 != 119)
        return 0;
      v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v10 + 2), (int16x8_t)xmmword_1969F5AA0);
      v26.i16[0] = vminvq_u16(v26);
      if (!v26.i32[0])
        return 0;
      v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v10 + 14), (int16x8_t)xmmword_1969F5AB0);
      v27.i16[0] = vminvq_u16(v27);
      if (!v27.i32[0])
        return 0;
      v12 = 1;
    }
  }
  result = 0;
  if (a2 && v12)
  {
    if ((*((_BYTE *)a2 + 22) & 2) == 0 || (*((_WORD *)a2 + 14) & 8) == 0)
      return 0;
    *((_DWORD *)a2 + 6) += 2;
    v15 = -2;
    while (1)
    {
      v16 = v15;
      if (MEMORY[0x19AEA53F4](*(_QWORD *)(*((_QWORD *)a2 + 12) + 24), "paper-item", 10))
      {
        v18 = (WebCore::Element **)WebCore::Element::classList(a2);
        WTF::AtomStringImpl::add();
        v19 = v33;
        v32 = v33;
        v23 = WebCore::DOMTokenList::contains(v18, (const WTF::AtomString *)&v32, v20, v21, v22);
        v24 = v23;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
          {
            WTF::StringImpl::destroy(v19, v17);
            if (v24)
            {
LABEL_51:
              if (*((_DWORD *)a2 + 6) == 2)
              {
                if ((*((_WORD *)a2 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(a2, v17);
              }
              else
              {
                *((_DWORD *)a2 + 6) -= 2;
              }
              return 1;
            }
            goto LABEL_39;
          }
          *(_DWORD *)v19 -= 2;
        }
        if (v23)
          goto LABEL_51;
      }
LABEL_39:
      v25 = *((_QWORD *)a2 + 4);
      if (v25)
      {
        if ((*(_WORD *)(v25 + 28) & 8) != 0)
          *(_DWORD *)(v25 + 24) += 2;
        else
          v25 = 0;
      }
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a2, v17);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
      if (v25)
      {
        v15 = v16 + 1;
        a2 = (WebCore::EventTarget *)v25;
        if (v16)
          continue;
      }
      if (!v25)
        return 0;
      if (*(_DWORD *)(v25 + 24) != 2)
      {
        result = 0;
        *(_DWORD *)(v25 + 24) -= 2;
        return result;
      }
      if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v25, v17);
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::Quirks::shouldPreventPointerMediaQueryFromEvaluatingToCoarse(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v20;
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v6 = *(_QWORD *)(v6 + 8);
  if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
  {
    while (1)
    {
      v16 = *(_QWORD *)(v6 + 528);
      if (!v16)
        break;
      v17 = *(_QWORD *)(v16 + 8);
      if (!v17)
        break;
      v18 = *(_QWORD *)(v17 + 120);
      if (!v18)
        break;
      v19 = *(_QWORD *)(v18 + 8);
      if (!v19)
        break;
      v6 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 8);
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9)
          v10 = *(_BYTE *)(v9 + 144) == 0;
        else
          v10 = 0;
        if (v10)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, (const WTF::URL *)(v6 + 736));
  v4 = WTF::equal(v20, v5, v12);
  v14 = v20;
  v20 = 0;
  if (!v14)
    goto LABEL_23;
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
LABEL_23:
    if (!v5)
      return v4;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v14, v13);
  if (!v5)
    return v4;
LABEL_24:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v13);
  else
    *(_DWORD *)v5 -= 2;
  return v4;
}

uint64_t WebCore::Quirks::shouldPreventDispatchOfTouchEvent(WebCore::Element **this, const WTF::AtomString *a2, WebCore::EventTarget *a3)
{
  uint64_t v3;
  WebCore::Element **v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Element *v9;
  int v10;
  WebCore::Element *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Element *v16;
  uint64_t v17;
  uint64_t v20;
  WTF::String *v21;
  __n128 v22;
  uint64_t v23;
  WTF::String *v24;
  __n128 v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint16x8_t v28;
  uint16x8_t v29;
  WebCore::Quirks *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;

  if (!*this)
    goto LABEL_18;
  v3 = *((_QWORD *)*this + 1);
  if (!v3)
    goto LABEL_18;
  v6 = this;
  v7 = *(_QWORD *)(v3 + 680);
  if (*(_BYTE *)(v7 + 243))
  {
    if (*(_BYTE *)(v7 + 242))
      goto LABEL_5;
LABEL_18:
    LOBYTE(v6) = 0;
    return v6 & 1;
  }
  if ((*(_QWORD *)(v7 + 688) & 0x80000) == 0)
    goto LABEL_18;
LABEL_5:
  if (!a3 || (*((_BYTE *)a3 + 22) & 2) == 0 || (*((_WORD *)a3 + 14) & 8) == 0)
    goto LABEL_18;
  *((_DWORD *)a3 + 6) += 2;
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (this = *(WebCore::Element ***)(v8 + 96)) == 0)
    this = (WebCore::Element **)WebCore::threadGlobalDataSlow((WebCore *)this);
  v9 = this[5];
  if (!v9)
  {
    v30 = (WebCore::Quirks *)this;
    WebCore::ThreadGlobalData::initializeEventNames(this);
    v9 = (WebCore::Element *)*((_QWORD *)v30 + 5);
  }
  if (*(_QWORD *)a2 != *((_QWORD *)v9 + 260))
    goto LABEL_14;
  v12 = *v6;
  if (*v6)
    v12 = (WebCore::Element *)*((_QWORD *)v12 + 1);
  if (*((_BYTE *)v12 + 3362) || *((_BYTE *)v12 + 3405))
  {
    while (1)
    {
      v31 = *((_QWORD *)v12 + 66);
      if (!v31)
        break;
      v32 = *(_QWORD *)(v31 + 8);
      if (!v32)
        break;
      v33 = *(_QWORD *)(v32 + 120);
      if (!v33)
        break;
      v34 = *(_QWORD *)(v33 + 8);
      if (!v34)
        break;
      v12 = *(WebCore::Element **)(*(_QWORD *)(v34 + 40) + 8);
    }
  }
  else
  {
    v13 = *((_QWORD *)v12 + 66);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v14 + 128) + 8);
        if (v15)
        {
          if (!*(_BYTE *)(v15 + 144))
          {
            v16 = *(WebCore::Element **)(v15 + 296);
            if (v16)
              v12 = v16;
          }
        }
      }
    }
  }
  v17 = WTF::URL::host((WebCore::Element *)((char *)v12 + 736));
  if ((char *)v17 != "sites.google.com" && a2 == 16)
  {
    if (((unint64_t)a2 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v17 == 115
        && *(_QWORD *)(v17 + 1) == 0x6F6F672E73657469
        && *(_QWORD *)(v17 + 8) == 0x6D6F632E656C676FLL)
      {
        goto LABEL_45;
      }
    }
    else if (*(_WORD *)v17 == 115)
    {
      v28 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v17 + 2), (int16x8_t)xmmword_1969F5B70);
      v28.i16[0] = vminvq_u16(v28);
      if (v28.i32[0])
      {
        v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v17 + 16), (int16x8_t)xmmword_1969F5A90);
        v29.i16[0] = vminvq_u16(v29);
        if (v29.i32[0])
          goto LABEL_45;
      }
    }
LABEL_14:
    v10 = 1;
    goto LABEL_15;
  }
  if ((char *)v17 != "sites.google.com" || a2 != 16)
    goto LABEL_14;
LABEL_45:
  v6 = (WebCore::Element **)WebCore::Element::classList(a3);
  WTF::AtomStringImpl::add();
  if (WebCore::DOMTokenList::contains(v6, (const WTF::AtomString *)&v36, v20, v21, v22))
  {
    WTF::AtomStringImpl::add();
    LOBYTE(v6) = WebCore::DOMTokenList::contains(v6, (const WTF::AtomString *)&v35, v23, v24, v25);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, a2);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  else
  {
    LOBYTE(v6) = 0;
  }
  v27 = v36;
  v36 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  v10 = 0;
LABEL_15:
  if (*((_DWORD *)a3 + 6) == 2)
  {
    if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a3, a2);
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
  }
  if (v10)
    goto LABEL_18;
  return v6 & 1;
}

uint64_t WebCore::Quirks::shouldSynthesizeTouchEvents(WebCore::Quirks *this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v6;
  WebCore::Quirks *v7;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(v2 + 680);
  if (*(_BYTE *)(v4 + 243))
  {
    if (!*(_BYTE *)(v4 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v4 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (*((_BYTE *)this + 26))
    return *((_BYTE *)this + 25) != 0;
  *(_DWORD *)(v2 + 24) += 2;
  *(_WORD *)((char *)this + 25) = WebCore::isYahooMail((WebCore *)v2, a2) | 0x100;
  if (*(_DWORD *)(v2 + 24) != 2)
  {
    *(_DWORD *)(v2 + 24) -= 2;
    return *((_BYTE *)this + 25) != 0;
  }
  if ((*(_WORD *)(v2 + 30) & 0x400) != 0)
    return *((_BYTE *)this + 25) != 0;
  WebCore::Node::removedLastRef((WebCore::Node *)v2, v6);
  if (*((_BYTE *)this + 26))
    return *((_BYTE *)this + 25) != 0;
  v7 = (WebCore::Quirks *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::Quirks::shouldAvoidResizingWhenInputViewBoundsChange(v7);
}

uint64_t WebCore::Quirks::shouldAvoidResizingWhenInputViewBoundsChange(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  WTF::URL *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  const WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  char v32;
  WTF::StringImpl *v33;
  const WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  const WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64[4];

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (*(_BYTE *)(v1 + 3362) || *(_BYTE *)(v1 + 3405))
  {
    while (1)
    {
      v48 = *(_QWORD *)(v1 + 528);
      if (!v48)
        break;
      v49 = *(_QWORD *)(v48 + 8);
      if (!v49)
        break;
      v50 = *(_QWORD *)(v49 + 120);
      if (!v50)
        break;
      v51 = *(_QWORD *)(v50 + 8);
      if (!v51)
        break;
      v1 = *(_QWORD *)(*(_QWORD *)(v51 + 40) + 8);
    }
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 528);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
        if (v7 && *(_BYTE *)(v7 + 144) == 0)
        {
          v9 = *(_QWORD *)(v7 + 296);
          if (v9)
            v1 = v9;
        }
      }
    }
  }
  v10 = (WTF::URL *)(v1 + 736);
  v64[2] = (WTF::StringImpl *)WTF::URL::host((WTF::URL *)(v1 + 736));
  v64[3] = v11;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = v64[0];
  v13 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v13 = *(_QWORD *)(v13 + 8);
  if (*(_BYTE *)(v13 + 3362) || *(_BYTE *)(v13 + 3405))
  {
    while (1)
    {
      v52 = *(_QWORD *)(v13 + 528);
      if (!v52)
        break;
      v53 = *(_QWORD *)(v52 + 8);
      if (!v53)
        break;
      v54 = *(_QWORD *)(v53 + 120);
      if (!v54)
        break;
      v55 = *(_QWORD *)(v54 + 8);
      if (!v55)
        break;
      v13 = *(_QWORD *)(*(_QWORD *)(v55 + 40) + 8);
    }
  }
  else
  {
    v14 = *(_QWORD *)(v13 + 528);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v15 + 128) + 8);
        if (v16 && *(_BYTE *)(v16 + 144) == 0)
        {
          v18 = *(_QWORD *)(v16 + 296);
          if (v18)
            v13 = v18;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v64, (const WTF::URL *)(v13 + 736));
  v21 = WTF::equal(v64[0], v12, v19);
  v22 = v64[0];
  v64[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v20);
      if (!v12)
        goto LABEL_37;
      goto LABEL_35;
    }
    *(_DWORD *)v22 -= 2;
  }
  if (!v12)
    goto LABEL_37;
LABEL_35:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, v20);
  else
    *(_DWORD *)v12 -= 2;
LABEL_37:
  if ((v21 & 1) != 0)
    return 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = v64[0];
  v24 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v24 = *(_QWORD *)(v24 + 8);
  if (*(_BYTE *)(v24 + 3362) || *(_BYTE *)(v24 + 3405))
  {
    while (1)
    {
      v56 = *(_QWORD *)(v24 + 528);
      if (!v56)
        break;
      v57 = *(_QWORD *)(v56 + 8);
      if (!v57)
        break;
      v58 = *(_QWORD *)(v57 + 120);
      if (!v58)
        break;
      v59 = *(_QWORD *)(v58 + 8);
      if (!v59)
        break;
      v24 = *(_QWORD *)(*(_QWORD *)(v59 + 40) + 8);
    }
  }
  else
  {
    v25 = *(_QWORD *)(v24 + 528);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(v26 + 128) + 8);
        if (v27 && *(_BYTE *)(v27 + 144) == 0)
        {
          v29 = *(_QWORD *)(v27 + 296);
          if (v29)
            v24 = v29;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v64, (const WTF::URL *)(v24 + 736));
  v32 = WTF::equal(v64[0], v23, v30);
  v33 = v64[0];
  v64[0] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::destroy(v33, v31);
      if (!v23)
        goto LABEL_57;
      goto LABEL_55;
    }
    *(_DWORD *)v33 -= 2;
  }
  if (!v23)
    goto LABEL_57;
LABEL_55:
  if (*(_DWORD *)v23 == 2)
    WTF::StringImpl::destroy(v23, v31);
  else
    *(_DWORD *)v23 -= 2;
LABEL_57:
  if ((v32 & 1) != 0)
    return 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = v64[0];
  v35 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v35 = *(_QWORD *)(v35 + 8);
  if (*(_BYTE *)(v35 + 3362) || *(_BYTE *)(v35 + 3405))
  {
    while (1)
    {
      v60 = *(_QWORD *)(v35 + 528);
      if (!v60)
        break;
      v61 = *(_QWORD *)(v60 + 8);
      if (!v61)
        break;
      v62 = *(_QWORD *)(v61 + 120);
      if (!v62)
        break;
      v63 = *(_QWORD *)(v62 + 8);
      if (!v63)
        break;
      v35 = *(_QWORD *)(*(_QWORD *)(v63 + 40) + 8);
    }
  }
  else
  {
    v36 = *(_QWORD *)(v35 + 528);
    if (v36)
    {
      v37 = *(_QWORD *)(v36 + 8);
      if (v37)
      {
        v38 = *(_QWORD *)(*(_QWORD *)(v37 + 128) + 8);
        if (v38 && *(_BYTE *)(v38 + 144) == 0)
        {
          v40 = *(_QWORD *)(v38 + 296);
          if (v40)
            v35 = v40;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v64, (const WTF::URL *)(v35 + 736));
  v43 = WTF::equal(v64[0], v34, v41);
  v44 = v64[0];
  v64[0] = 0;
  if (!v44)
  {
LABEL_74:
    if (v43)
      goto LABEL_75;
LABEL_87:
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v42);
      else
        *(_DWORD *)v34 -= 2;
    }
    return WTF::StringView::endsWith();
  }
  if (*(_DWORD *)v44 != 2)
  {
    *(_DWORD *)v44 -= 2;
    goto LABEL_74;
  }
  WTF::StringImpl::destroy(v44, v42);
  if (!v43)
    goto LABEL_87;
LABEL_75:
  v64[0] = (WTF::StringImpl *)WTF::URL::path(v10);
  v64[1] = v45;
  v47 = WTF::StringView::startsWithIgnoringASCIICase();
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v46);
    else
      *(_DWORD *)v34 -= 2;
  }
  if ((v47 & 1) != 0)
    return 1;
  return WTF::StringView::endsWith();
}

BOOL WebCore::Quirks::needsDeferKeyDownAndKeyPressTimersUntilNextEditingCommand(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WTF::URL *v9;
  uint64_t v10;
  uint64_t v11;
  uint16x8_t v15;
  uint16x8_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!*(_QWORD *)this)
    return (*(_QWORD *)(MEMORY[0x2A8] + 688) >> 16) & 1;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  v2 = *(_QWORD *)(v1 + 680);
  v3 = *(_QWORD *)(v2 + 688);
  if ((v3 & 0x10000) != 0)
    return 1;
  if (*(_BYTE *)(v2 + 243))
  {
    if (!*(_BYTE *)(v2 + 242))
      return 0;
  }
  else if ((v3 & 0x80000) == 0)
  {
    return 0;
  }
  if (*(_BYTE *)(v1 + 3362) || *(_BYTE *)(v1 + 3405))
  {
    while (1)
    {
      v20 = *(_QWORD *)(v1 + 528);
      if (!v20)
        break;
      v21 = *(_QWORD *)(v20 + 8);
      if (!v21)
        break;
      v22 = *(_QWORD *)(v21 + 120);
      if (!v22)
        break;
      v23 = *(_QWORD *)(v22 + 8);
      if (!v23)
        break;
      v1 = *(_QWORD *)(*(_QWORD *)(v23 + 40) + 8);
    }
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8);
        if (v6 && *(_BYTE *)(v6 + 144) == 0)
        {
          v8 = *(_QWORD *)(v6 + 296);
          if (v8)
            v1 = v8;
        }
      }
    }
  }
  v9 = (WTF::URL *)(v1 + 736);
  v10 = WTF::URL::host((WTF::URL *)(v1 + 736));
  if ((char *)v10 != "docs.google.com" && v11 == 15)
  {
    if ((v11 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v10 != 100
        || *(_QWORD *)(v10 + 1) != 0x676F6F672E73636FLL
        || *(_QWORD *)(v10 + 7) != 0x6D6F632E656C676FLL)
      {
        return 0;
      }
    }
    else
    {
      if (*(_WORD *)v10 != 100)
        return 0;
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v10 + 2), (int16x8_t)xmmword_1969F5A80);
      v15.i16[0] = vminvq_u16(v15);
      if (!v15.i32[0])
        return 0;
      v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v10 + 14), (int16x8_t)xmmword_1969F5A90);
      v16.i16[0] = vminvq_u16(v16);
      if (!v16.i32[0])
        return 0;
    }
  }
  else if ((char *)v10 != "docs.google.com" || v11 != 15)
  {
    return 0;
  }
  v17 = WTF::URL::path(v9);
  if (v18 < 0xEuLL)
    return 0;
  if ((v18 & 0xFF00000000) == 0)
  {
    if ((*(_WORD *)v17 & 0xFFDF) == 0xF
      && (*(_WORD *)(v17 + 2) & 0xFFDF) == 0x53
      && (*(_WORD *)(v17 + 4) & 0xFFDF) == 0x50
      && (*(_WORD *)(v17 + 6) & 0xFFDF) == 0x52
      && (*(_WORD *)(v17 + 8) & 0xFFDF) == 0x45
      && (*(_WORD *)(v17 + 10) & 0xFFDF) == 0x41
      && (*(_WORD *)(v17 + 12) & 0xFFDF) == 0x44
      && (*(_WORD *)(v17 + 14) & 0xFFDF) == 0x53
      && (*(_WORD *)(v17 + 16) & 0xFFDF) == 0x48
      && (*(_WORD *)(v17 + 18) & 0xFFDF) == 0x45
      && (*(_WORD *)(v17 + 20) & 0xFFDF) == 0x45
      && (*(_WORD *)(v17 + 22) & 0xFFDF) == 0x54
      && (*(_WORD *)(v17 + 24) & 0xFFDF) == 0x53)
    {
      v19 = *(unsigned __int16 *)(v17 + 26);
      return (v19 & 0xFFFFFFDF) == 15;
    }
    return 0;
  }
  if ((*(_BYTE *)v17 & 0xDF) != 0xF
    || (*(_BYTE *)(v17 + 1) & 0xDF) != 0x53
    || (*(_BYTE *)(v17 + 2) & 0xDF) != 0x50
    || (*(_BYTE *)(v17 + 3) & 0xDF) != 0x52
    || (*(_BYTE *)(v17 + 4) & 0xDF) != 0x45
    || (*(_BYTE *)(v17 + 5) & 0xDF) != 0x41
    || (*(_BYTE *)(v17 + 6) & 0xDF) != 0x44
    || (*(_BYTE *)(v17 + 7) & 0xDF) != 0x53
    || (*(_BYTE *)(v17 + 8) & 0xDF) != 0x48
    || (*(_BYTE *)(v17 + 9) & 0xDF) != 0x45
    || (*(_BYTE *)(v17 + 10) & 0xDF) != 0x45
    || (*(_BYTE *)(v17 + 11) & 0xDF) != 0x54
    || (*(_BYTE *)(v17 + 12) & 0xDF) != 0x53)
  {
    return 0;
  }
  v19 = *(unsigned __int8 *)(v17 + 13);
  return (v19 & 0xFFFFFFDF) == 15;
}

uint64_t WebCore::Quirks::shouldSilenceMediaQueryListChangeEvents(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (*(_BYTE *)(v3 + 242))
      goto LABEL_5;
    return 0;
  }
  if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
    return 0;
LABEL_5:
  v4 = *(_QWORD *)(v1 + 528);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || !*(_BYTE *)(v7 + 1680))
    return 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = v23;
  v9 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(v9 + 8);
  if (*(_BYTE *)(v9 + 3362) || *(_BYTE *)(v9 + 3405))
  {
    while (1)
    {
      v19 = *(_QWORD *)(v9 + 528);
      if (!v19)
        break;
      v20 = *(_QWORD *)(v19 + 8);
      if (!v20)
        break;
      v21 = *(_QWORD *)(v20 + 120);
      if (!v21)
        break;
      v22 = *(_QWORD *)(v21 + 8);
      if (!v22)
        break;
      v9 = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8);
    }
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 528);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v11 + 128) + 8);
        if (v12)
        {
          if (!*(_BYTE *)(v12 + 144))
          {
            v13 = *(_QWORD *)(v12 + 296);
            if (v13)
              v9 = v13;
          }
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v23, (const WTF::URL *)(v9 + 736));
  v16 = WTF::equal(v23, v8, v14);
  v17 = v23;
  v23 = 0;
  if (!v17)
  {
LABEL_23:
    if (!v8)
      return v16;
    goto LABEL_24;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_23;
  }
  WTF::StringImpl::destroy(v17, v15);
  if (!v8)
    return v16;
LABEL_24:
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v15);
  else
    *(_DWORD *)v8 -= 2;
  return v16;
}

BOOL WebCore::Quirks::shouldAvoidScrollingWhenFocusedContentIsVisible(WebCore::Quirks *this)
{
  unint64_t v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint16x8_t v7;
  uint16x8_t v8;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 680);
      if (*(_BYTE *)(v2 + 243))
      {
        if (!*(_BYTE *)(v2 + 242))
          return 0;
      }
      else if ((*(_QWORD *)(v2 + 688) & 0x80000) == 0)
      {
        return 0;
      }
      v3 = (const char *)WTF::URL::host((WTF::URL *)(v1 + 736));
      v1 = v4 == 14 && (unint64_t)(v3 == "www.zillow.com");
      if (v3 != "www.zillow.com" && v4 == 14)
      {
        if ((v4 & 0xFF00000000) != 0)
        {
          if (*v3 == 119 && *(_QWORD *)(v3 + 1) == 0x6F6C6C697A2E7777)
            return *(_QWORD *)(v3 + 6) == 0x6D6F632E776F6C6CLL;
          return 0;
        }
        if (*(_WORD *)v3 != 119)
          return 0;
        v7 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1969F5B80);
        v7.i16[0] = vminvq_u16(v7);
        v1 = v7.u32[0];
        if (v7.i32[0])
        {
          v8 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 12), (int16x8_t)xmmword_1969F5B90);
          v8.i16[0] = vminvq_u16(v8);
          return v8.i32[0] != 0;
        }
      }
    }
  }
  return v1;
}

uint64_t WebCore::Quirks::shouldUseLegacySelectPopoverDismissalBehaviorInDataActivation(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v20;
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v6 = *(_QWORD *)(v6 + 8);
  if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
  {
    while (1)
    {
      v16 = *(_QWORD *)(v6 + 528);
      if (!v16)
        break;
      v17 = *(_QWORD *)(v16 + 8);
      if (!v17)
        break;
      v18 = *(_QWORD *)(v17 + 120);
      if (!v18)
        break;
      v19 = *(_QWORD *)(v18 + 8);
      if (!v19)
        break;
      v6 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 8);
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9)
          v10 = *(_BYTE *)(v9 + 144) == 0;
        else
          v10 = 0;
        if (v10)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, (const WTF::URL *)(v6 + 736));
  v4 = WTF::equal(v20, v5, v12);
  v14 = v20;
  v20 = 0;
  if (!v14)
    goto LABEL_23;
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
LABEL_23:
    if (!v5)
      return v4;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v14, v13);
  if (!v5)
    return v4;
LABEL_24:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v13);
  else
    *(_DWORD *)v5 -= 2;
  return v4;
}

BOOL WebCore::Quirks::shouldIgnoreAriaForFastPathContentObservationCheck(WebCore::Quirks *this)
{
  unint64_t v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint16x8_t v6;
  uint16x8_t v8;
  uint16x8_t v9;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 680);
      if (*(_BYTE *)(v2 + 243))
      {
        if (!*(_BYTE *)(v2 + 242))
          return 0;
      }
      else if ((*(_QWORD *)(v2 + 688) & 0x80000) == 0)
      {
        return 0;
      }
      v3 = (const char *)WTF::URL::host((WTF::URL *)(v1 + 736));
      v1 = v4 == 19 && (unint64_t)(v3 == "www.ralphlauren.com");
      if (v3 != "www.ralphlauren.com" && v4 == 19)
      {
        if ((v4 & 0xFF00000000) != 0)
        {
          if (*v3 != 119)
            return 0;
          v6 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v3 + 3), (int8x16_t)xmmword_1969F5BB0), vceqq_s8(*(int8x16_t *)(v3 + 1), (int8x16_t)xmmword_1969F5BA0));
          v6.i8[0] = vminvq_u8((uint8x16_t)v6);
        }
        else
        {
          if (*(_WORD *)v3 != 119)
            return 0;
          v8 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1969F5BC0);
          v8.i16[0] = vminvq_u16(v8);
          v1 = v8.u32[0];
          if (!v8.i32[0])
            return v1;
          v9 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 6), (int16x8_t)xmmword_1969F5BD0);
          v9.i16[0] = vminvq_u16(v9);
          v1 = v9.u32[0];
          if (!v9.i32[0])
            return v1;
          v6 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 22), (int16x8_t)xmmword_1969F5BE0);
          v6.i16[0] = vminvq_u16(v6);
        }
        return v6.i32[0] != 0;
      }
    }
  }
  return v1;
}

BOOL WebCore::Quirks::shouldOpenAsAboutBlank(WebCore::Quirks *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v5;
  _BOOL8 v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint16x8_t v23;
  uint16x8_t v24;
  int v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28[5];
  WTF::StringImpl *v29[5];
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v2)
    return 0;
  v5 = *(_QWORD *)(v2 + 680);
  if (*(_BYTE *)(v5 + 243))
  {
    if (!*(_BYTE *)(v5 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v5 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  v7 = *(WTF::StringImpl **)(v2 + 736);
  if (v7)
    *(_DWORD *)v7 += 2;
  v30 = v7;
  v8 = v2 + 736;
  v9 = *(_OWORD *)(v8 + 24);
  v31 = *(_OWORD *)(v8 + 8);
  v32 = v9;
  v10 = WTF::URL::host((WTF::URL *)&v30);
  if ((char *)v10 != "docs.google.com" && v11 == 15)
  {
    if (((unint64_t)v11 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v10 != 100
        || *(_QWORD *)(v10 + 1) != 0x676F6F672E73636FLL
        || *(_QWORD *)(v10 + 7) != 0x6D6F632E656C676FLL)
      {
LABEL_21:
        v6 = 0;
        goto LABEL_22;
      }
    }
    else
    {
      if (*(_WORD *)v10 != 100)
        goto LABEL_21;
      v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v10 + 2), (int16x8_t)xmmword_1969F5A80);
      v23.i16[0] = vminvq_u16(v23);
      if (!v23.i32[0])
        goto LABEL_21;
      v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v10 + 14), (int16x8_t)xmmword_1969F5A90);
      v24.i16[0] = vminvq_u16(v24);
      if (!v24.i32[0])
        goto LABEL_21;
    }
LABEL_18:
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 528);
    if (!v12)
      goto LABEL_21;
    v13 = *(_QWORD *)(v12 + 8);
    if (!v13)
      goto LABEL_21;
    WebCore::FrameLoader::userAgent(*(WebCore::FrameLoader **)(v13 + 280), (const WTF::URL *)&v30, (uint64_t *)v29);
    if (!v29[0])
      goto LABEL_21;
    v16 = WTF::StringImpl::find();
    v17 = v29[0];
    v29[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    if (v16 == -1)
      goto LABEL_21;
    v28[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v28);
    MEMORY[0x19AEA52F8](v29, v28, a2, 0);
    v19 = v28[0];
    v28[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (!WTF::URL::protocolIs())
      goto LABEL_52;
    v20 = WTF::URL::host((WTF::URL *)v29);
    if ((_DWORD)v11 != 5)
      goto LABEL_36;
    if (((unint64_t)v11 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)v20 & 0xDF) != 0x42
        || (*(_BYTE *)(v20 + 1) & 0xDF) != 0x4C
        || (*(_BYTE *)(v20 + 2) & 0xDF) != 0x41
        || (*(_BYTE *)(v20 + 3) & 0xDF) != 0x4E)
      {
        goto LABEL_36;
      }
      v25 = *(unsigned __int8 *)(v20 + 4);
    }
    else
    {
      if ((*(_WORD *)v20 & 0xFFDF) != 0x42
        || (*(_WORD *)(v20 + 2) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v20 + 4) & 0xFFDF) != 0x41
        || (*(_WORD *)(v20 + 6) & 0xFFDF) != 0x4E)
      {
        goto LABEL_36;
      }
      v25 = *(unsigned __int16 *)(v20 + 8);
    }
    if ((v25 & 0xFFFFFFDF) == 0x4B)
    {
LABEL_52:
      v6 = 0;
LABEL_53:
      v26 = v29[0];
      v29[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v11);
        else
          *(_DWORD *)v26 -= 2;
      }
      goto LABEL_22;
    }
LABEL_36:
    v21 = WTF::URL::host((WTF::URL *)v29);
    if ((_DWORD)v11 != 6)
    {
LABEL_37:
      v22 = 0;
LABEL_38:
      v6 = !v22;
      goto LABEL_53;
    }
    if (((unint64_t)v11 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)v21 & 0xDF) != 0x53
        || (*(_BYTE *)(v21 + 1) & 0xDF) != 0x52
        || (*(_BYTE *)(v21 + 2) & 0xDF) != 0x43
        || (*(_BYTE *)(v21 + 3) & 0xDF) != 0x44
        || (*(_BYTE *)(v21 + 4) & 0xDF) != 0x4F)
      {
        goto LABEL_37;
      }
      v27 = *(unsigned __int8 *)(v21 + 5);
    }
    else
    {
      if ((*(_WORD *)v21 & 0xFFDF) != 0x53
        || (*(_WORD *)(v21 + 2) & 0xFFDF) != 0x52
        || (*(_WORD *)(v21 + 4) & 0xFFDF) != 0x43
        || (*(_WORD *)(v21 + 6) & 0xFFDF) != 0x44
        || (*(_WORD *)(v21 + 8) & 0xFFDF) != 0x4F)
      {
        goto LABEL_37;
      }
      v27 = *(unsigned __int16 *)(v21 + 10);
    }
    v22 = (v27 & 0xFFFFFFDF) == 67;
    goto LABEL_38;
  }
  v6 = 0;
  if ((char *)v10 == "docs.google.com" && v11 == 15)
    goto LABEL_18;
LABEL_22:
  v14 = v30;
  v30 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v6;
}

BOOL WebCore::Quirks::needsPreloadAutoQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (*((_BYTE *)this + 17))
    return *((_BYTE *)this + 16) != 0;
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v10, (const WTF::URL *)(v1 + 736));
  v6 = v10;
  if (v10)
  {
    v7 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 2;
    v10 = 0;
    if (v7)
      *(_DWORD *)v6 = v7;
    else
      WTF::StringImpl::destroy(v6, v5);
  }
  v4 = MEMORY[0x19AEA53F4](v6, "vimeo.com", 9);
  *((_WORD *)this + 8) = v4 | 0x100;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v8);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

uint64_t WebCore::Quirks::shouldBypassBackForwardCache(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  const WebCore::HTTPHeaderMap *v19;
  uint16x8_t v20;
  WebCore *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[25];

  if (!*(_QWORD *)this)
    goto LABEL_5;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    goto LABEL_5;
  v2 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v2 + 243))
  {
    if (!*(_BYTE *)(v2 + 242))
      goto LABEL_5;
  }
  else if ((*(_QWORD *)(v2 + 688) & 0x80000) == 0)
  {
LABEL_5:
    LOBYTE(v3) = 0;
    return v3 & 1;
  }
  *(_DWORD *)(v1 + 24) += 2;
  if (*(_BYTE *)(v1 + 3362) || *(_BYTE *)(v1 + 3405))
  {
    v44 = *(_QWORD *)(v1 + 528);
    i = v1;
    if (v44)
    {
      v45 = *(_QWORD *)(v44 + 8);
      i = v1;
      if (v45)
      {
        v46 = *(_QWORD *)(v45 + 120);
        i = v1;
        if (v46)
        {
          v47 = *(_QWORD *)(v46 + 8);
          for (i = v1; v47; v47 = *(_QWORD *)(v50 + 8))
          {
            i = *(_QWORD *)(*(_QWORD *)(v47 + 40) + 8);
            v48 = *(_QWORD *)(i + 528);
            if (!v48)
              break;
            v49 = *(_QWORD *)(v48 + 8);
            if (!v49)
              break;
            v50 = *(_QWORD *)(v49 + 120);
            if (!v50)
              break;
          }
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 528);
    i = v1;
    if (v4)
    {
      v6 = *(_QWORD *)(v4 + 8);
      i = v1;
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
        v8 = v7 && *(_BYTE *)(v7 + 144) == 0;
        i = v1;
        if (v8)
        {
          v9 = *(_QWORD *)(v7 + 296);
          i = v1;
          if (v9)
            i = v9;
        }
      }
    }
  }
  v10 = *(WTF::StringImpl **)(i + 736);
  if (v10)
    *(_DWORD *)v10 += 2;
  v57 = v10;
  v11 = i + 736;
  v12 = *(_OWORD *)(v11 + 24);
  v58 = *(_OWORD *)(v11 + 8);
  v59 = v12;
  v13 = WTF::URL::host((WTF::URL *)&v57);
  v15 = v14;
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v56, (const WTF::URL *)&v57);
  if (WTF::URL::protocolIs())
  {
    if ((char *)v13 == "vimeo.com" || v15 != 9)
    {
      if ((char *)v13 != "vimeo.com" || v15 != 9)
        goto LABEL_38;
    }
    else if ((v15 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v13 != 118 || *(_DWORD *)(v13 + 1) != 1868918121 || *(_DWORD *)(v13 + 5) != 1836016430)
        goto LABEL_38;
    }
    else
    {
      if (*(_WORD *)v13 != 118)
        goto LABEL_38;
      v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1969F5BF0);
      v20.i16[0] = vminvq_u16(v20);
      if (!v20.i32[0])
        goto LABEL_38;
    }
    v17 = *(_QWORD *)(v1 + 528);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v18 + 280) + 88);
        if (v3)
        {
          if ((*(_WORD *)(v3 + 1504) & 1) == 0)
          {
            WebCore::ResourceResponse::platformLazyInit(v3 + 1272, 1);
            WebCore::parseCacheControlDirectives((unsigned int *)(v3 + 1352), v19, (int64x2_t *)v60);
            *(_OWORD *)(v3 + 1472) = *(_OWORD *)v60;
            *(_OWORD *)(v3 + 1481) = *(_OWORD *)&v60[9];
            *(_WORD *)(v3 + 1504) |= 1u;
          }
          LODWORD(v3) = (*(unsigned __int8 *)(v3 + 1496) >> 1) & 1;
          goto LABEL_86;
        }
      }
    }
  }
LABEL_38:
  v21 = (WebCore *)MEMORY[0x19AEA53F4](v56, "bankofamerica.com", 17);
  if (!(_DWORD)v21)
    goto LABEL_49;
  v22 = *(_QWORD *)(v1 + 696);
  if (!v22)
    goto LABEL_49;
  ++*(_DWORD *)(v22 + 24);
  v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v23 || (v3 = *(_QWORD *)(v23 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(v21);
  v24 = *(_QWORD *)(v3 + 40);
  if (!v24)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v24 = *(_QWORD *)(v3 + 40);
  }
  v25 = *(_QWORD *)(v22 + 16);
  if ((v25 & 0x1000000000000) != 0 && (v36 = v25 & 0xFFFFFFFFFFFFLL, v37 = *(unsigned int *)(v36 + 28), (_DWORD)v37))
  {
    v38 = *(_QWORD **)(v36 + 16);
    v39 = *(_QWORD *)(v24 + 2168);
    v40 = 32 * v37;
    v26 = 1;
    while (*v38 != v39)
    {
      v38 += 4;
      v40 -= 32;
      if (!v40)
        goto LABEL_47;
    }
    if ((_MergedGlobals_213 & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE838E8 = *(_QWORD *)v60;
      _MergedGlobals_213 = 1;
    }
    if ((byte_1ECE838D9 & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE838F0 = *(_QWORD *)v60;
      byte_1ECE838D9 = 1;
    }
    if (qword_1ECE838E8
      && *(_DWORD *)(qword_1ECE838E8 + 4)
      && (v51 = *(unsigned int **)(v1 + 120)) != 0
      && (WebCore::TreeScopeOrderedMap::getElementById(v51, (const WTF::AtomString *)&qword_1ECE838E8, (const WebCore::TreeScope *)(v1 + 96), (uint64_t *)v60), *(_QWORD *)v60))
    {
      v52 = *(_QWORD *)(*(_QWORD *)v60 + 104);
      if (v52 && (v53 = *(_QWORD *)(v52 + 16)) != 0)
      {
        v54 = 0;
        do
        {
          v55 = *(_QWORD *)(v53 + 16 + 8 * v54);
          LOBYTE(v3) = v55 == qword_1ECE838F0;
          if (v55 == qword_1ECE838F0)
            break;
          ++v54;
        }
        while (v54 < *(unsigned int *)(v53 + 12));
      }
      else
      {
        LOBYTE(v3) = 0;
      }
      if (*(_DWORD *)(*(_QWORD *)v60 + 24) == 2)
      {
        if ((*(_WORD *)(*(_QWORD *)v60 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef(*(WebCore::Node **)v60);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)v60 + 24) -= 2;
      }
    }
    else
    {
      LOBYTE(v3) = 0;
    }
    v26 = 0;
  }
  else
  {
    v26 = 1;
  }
LABEL_47:
  if (*(_DWORD *)(v22 + 24) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 72))(v22);
    if (!v26)
      goto LABEL_86;
LABEL_49:
    if ((byte_1ECE838DA & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE838F8 = *(_QWORD *)v60;
      byte_1ECE838DA = 1;
    }
    v27 = *(_QWORD *)(v1 + 1272);
    if (v27)
    {
      if ((*(_WORD *)(v27 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v27 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        v28 = *(_QWORD *)(v27 + 80);
        if (v28)
        {
          v29 = v28;
          while (1)
          {
            if ((*(_WORD *)(v29 + 28) & 0x10) != 0)
            {
              v30 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
              if (*(_QWORD *)(*(_QWORD *)(v29 + 96) + 24) == v30)
                break;
            }
            v29 = *(_QWORD *)(v29 + 56);
            if (!v29)
              goto LABEL_85;
          }
          while ((*(_WORD *)(v28 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v28 + 96) + 24) != v30)
            v28 = *(_QWORD *)(v28 + 56);
          v31 = *(_QWORD *)(v28 + 80);
          if (v31)
          {
            if ((*(_WORD *)(v31 + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(v31 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::divTag + 24))
            {
              v32 = *(_DWORD *)(v31 + 24);
              *(_DWORD *)(v31 + 24) = v32 + 2;
              v33 = *(_QWORD *)(v31 + 104);
              if (v33)
              {
                v34 = *(_QWORD *)(v33 + 16);
                if (v34)
                {
                  v35 = 0;
                  while (*(_QWORD *)(v34 + 16 + 8 * v35) != qword_1ECE838F8)
                  {
                    if (++v35 >= (unint64_t)*(unsigned int *)(v34 + 12))
                      goto LABEL_71;
                  }
                  if (v32)
                  {
                    *(_DWORD *)(v31 + 24) = v32;
                  }
                  else if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v31);
                  }
                  LOBYTE(v3) = 1;
                  goto LABEL_86;
                }
              }
LABEL_71:
              if (v32)
              {
                LOBYTE(v3) = 0;
                *(_DWORD *)(v31 + 24) = v32;
                goto LABEL_86;
              }
              if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v31);
            }
          }
        }
      }
    }
LABEL_85:
    LOBYTE(v3) = 0;
    goto LABEL_86;
  }
  --*(_DWORD *)(v22 + 24);
  if ((v26 & 1) != 0)
    goto LABEL_49;
LABEL_86:
  v41 = v56;
  v56 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v16);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = v57;
  v57 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v16);
    else
      *(_DWORD *)v42 -= 2;
  }
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return v3 & 1;
}

uint64_t WebCore::Quirks::shouldMakeEventListenerPassive(WebCore::EventTarget const&,WebCore::EventTypeInfo const&)::$_0::operator()(uint64_t a1)
{
  void *v2;
  _BOOL8 v3;
  int v4;
  uint64_t i;

  if ((**(unsigned int (***)(uint64_t))a1)(a1) == 54)
    return 1;
  if ((*(_BYTE *)(a1 + 22) & 2) == 0)
    return 0;
  v4 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v4 + 2;
  if ((*(_WORD *)(a1 + 28) & 0xF000) != 0x9000)
  {
    i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 1272);
    if (i != a1)
    {
      if (i)
      {
        if ((*(_WORD *)(i + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              break;
            }
          }
        }
        else
        {
          i = 0;
        }
      }
      v3 = i == a1;
      if (!v4)
        goto LABEL_19;
LABEL_15:
      *(_DWORD *)(a1 + 24) = v4;
      return v3;
    }
  }
  v3 = 1;
  if (v4)
    goto LABEL_15;
LABEL_19:
  if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)a1, v2);
  return v3;
}

uint64_t WebCore::Quirks::shouldMakeEventListenerPassive(WebCore::EventTarget const&,WebCore::EventTypeInfo const&)::$_1::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  if (v1 && *(_BYTE *)(v1 + 274))
  {
    result = 105;
    __break(0xC471u);
  }
  else if (v1)
  {
    return v1 - 192;
  }
  else
  {
    return 0;
  }
  return result;
}

BOOL WebCore::Quirks::shouldDisableImageCaptureQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  __int16 v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (!*((_BYTE *)this + 42))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v20;
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v6 = *(_QWORD *)(v6 + 8);
    if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
      goto LABEL_32;
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9 && *(_BYTE *)(v9 + 144) == 0)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
    while (1)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, (const WTF::URL *)(v6 + 736));
      v14 = WTF::equal(v20, v5, v12);
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      *(_WORD *)((char *)this + 41) = v14 | 0x100;
      if (!v5)
        break;
      if (*(_DWORD *)v5 != 2)
      {
        *(_DWORD *)v5 -= 2;
        return *((_BYTE *)this + 41) != 0;
      }
      WTF::StringImpl::destroy(v5, v13);
      if (*((_BYTE *)this + 42))
        return *((_BYTE *)this + 41) != 0;
      std::__throw_bad_optional_access[abi:sn180100]();
      do
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8);
LABEL_32:
        v17 = *(_QWORD *)(v6 + 528);
        if (!v17)
          break;
        v18 = *(_QWORD *)(v17 + 8);
        if (!v18)
          break;
        v19 = *(_QWORD *)(v18 + 120);
        if (!v19)
          break;
        v16 = *(_QWORD *)(v19 + 8);
      }
      while (v16);
    }
  }
  return *((_BYTE *)this + 41) != 0;
}

BOOL WebCore::Quirks::needsCanPlayAfterSeekedQuirk(WebCore::Quirks *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(v2 + 680);
  if (*(_BYTE *)(v4 + 243))
  {
    if (!*(_BYTE *)(v4 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v4 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (*((_BYTE *)this + 28))
    return *((_BYTE *)this + 27) != 0;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v2 + 192), a2);
  v7 = *(WTF::StringImpl **)(v6 + 40);
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    if ((MEMORY[0x19AEA53F4](v7, "hulu.com", 8) & 1) != 0)
      v5 = 1;
    else
      v5 = WTF::StringImpl::endsWith();
    *(_WORD *)((char *)this + 27) = v5 | 0x100;
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v8);
    else
      *(_DWORD *)v7 -= 2;
  }
  else
  {
    v5 = MEMORY[0x19AEA53F4](0, "hulu.com", 8);
    *(_WORD *)((char *)this + 27) = v5 | 0x100;
  }
  return v5;
}

uint64_t WebCore::Quirks::hasStorageAccessForAllLoginDomains(WTF ***a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF **v4;
  uint64_t v5;
  WTF **v6;
  uint64_t v8;
  WTF **v9;
  WTF **v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  WTF **v16;

  v4 = *a1;
  if (!*a1)
  {
    v9 = 0;
    v5 = 0;
    goto LABEL_13;
  }
  v5 = *((unsigned int *)v4 - 1);
  v6 = &v4[v5];
  if (!*((_DWORD *)v4 - 3))
  {
    v9 = &v4[v5];
LABEL_13:
    v6 = &v4[v5];
    if (v4)
      goto LABEL_14;
    goto LABEL_16;
  }
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    while ((WTF::equal(*v4, 0, a3) & 1) != 0 || *v4 == (WTF *)-1)
    {
      ++v4;
      v8 -= 8;
      if (!v8)
      {
        v4 = v6;
        break;
      }
    }
    v9 = v4;
    v4 = *a1;
    if (!*a1)
      goto LABEL_16;
LABEL_14:
    v10 = &v4[*((unsigned int *)v4 - 1)];
    goto LABEL_17;
  }
  v9 = *a1;
  if (v4)
    goto LABEL_14;
LABEL_16:
  v10 = 0;
LABEL_17:
  v11 = 1;
  if (v10 != v9)
  {
    while (1)
    {
      {
        WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
      }
      v12 = WebCore::sharedObserver(void)::observer
          ? (uint64_t *)WebCore::sharedObserver(void)::observer
          : &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
      v13 = (*(uint64_t (**)(uint64_t *, WTF **, uint64_t))(*v12 + 136))(v12, v9, a2);
      if (!(_DWORD)v13)
        return 0;
      v15 = v13;
      v16 = v9 + 1;
      v9 = v6;
      if (v16 != v6)
      {
        v9 = v16;
        while ((WTF::equal(*v9, 0, v14) & 1) != 0 || *v9 == (WTF *)-1)
        {
          if (++v9 == v6)
          {
            v9 = v6;
            break;
          }
        }
      }
      if (v9 == v10)
        return v15;
    }
  }
  return v11;
}

unint64_t WebCore::Quirks::triggerOptionalStorageAccessQuirk(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl *a4, int a5, uint64_t a6, int a7, int a8)
{
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  _BOOL4 v36;
  uint64_t *v37;
  WTF::StringImpl *v38;
  WebCore::Document *v39;
  WebCore::DocumentStorageAccess *v40;
  uint64_t v41;
  WebCore::Document *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  unint64_t v54;
  WTF::StringImpl *v55;
  _BOOL4 v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint64_t v59;
  uint16x8_t v60;
  uint64_t v61;
  uint16x8_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  WTF::StringImpl *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unsigned int *v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const WTF::StringImpl *v91;
  const WTF::StringImpl *v92;
  WTF *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF **v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  WTF *v100;
  int v101;
  int v102;
  BOOL v103;
  int v104;
  _BOOL4 v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WebCore::Document *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  uint16x8_t v117;
  uint16x8_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  WTF::StringImpl *v130;
  uint64_t v131;
  WTF *v132;
  WTF::StringImpl *v133;
  uint16x8_t v134;
  uint16x8_t v135;
  WTF::StringImpl *v136;
  WTF **v137;
  const WTF::StringImpl *v138;
  const WTF::StringImpl *v139;
  int v140;
  WTF::StringImpl *v141;
  WTF::String *v142;
  __n128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  WTF::StringImpl *v166;
  BOOL v167;
  uint64_t *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  int v171;
  WTF::StringImpl *v172;
  int v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  int v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  int v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  int v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  int v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  int v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  int v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  int v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  int v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  int v209;
  WTF::StringImpl *v210;
  int v211;
  int v212;
  WTF::StringImpl *v213;
  int v214;
  uint64_t v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  WTF *v218;
  WTF *v219;
  WTF::StringImpl *v220;
  uint64_t v221;
  WTF::StringImpl *v222;
  WebCore::Document *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  WTF::StringImpl *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  WTF::String *v239;
  __n128 v240;
  void *v241;
  WTF::String *v242;
  __n128 v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  uint64_t v246;
  WTF::StringImpl *v247;
  uint64_t v248;
  void *v249;
  WTF::StringImpl *v250;
  int v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  unsigned int v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  unsigned int v257;
  WTF::StringImpl *v258;
  WTF::StringImpl *v259;
  uint64_t *v260;
  unsigned int *v261;
  unsigned int v262;
  unsigned int v263;
  WTF *v264;
  void *v265;
  WTF *v266;
  WTF::StringImpl *v267;
  WTF::StringImpl **v268;
  WTF::StringImpl *v269;
  WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  WTF::StringImpl *v280;
  WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  WebCore::Document *v284;
  WebCore::Document *v285;
  WebCore::Document *v286;
  WTF::StringImpl *v287;
  __int16 v288;
  WTF::StringImpl *v289[2];
  __int128 v290;
  __int128 v291;
  int v292;
  WTF::StringImpl *v293;
  WTF::StringImpl *v294;
  WTF *v295;
  WTF *v296;
  uint64_t v297;
  WTF::StringImpl *v298;
  WTF::StringImpl *v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  uint64_t v303;

  v303 = *MEMORY[0x1E0C80C00];
  {
    v18 = 0;
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    return v18;
  }
  if (byte_1ECE90A53)
    v8 = a7 == 0;
  else
    v8 = 1;
  if (v8)
    return 0;
  if (!*(_QWORD *)a1)
    return 0;
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (!v10)
    return 0;
  LODWORD(v11) = a8;
  v17 = *(_QWORD *)(v10 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  v20 = WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v293, (const WTF::URL *)(v10 + 736));
  if ((byte_1ECE838DB & 1) == 0)
  {
    v296 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v172 = v299;
    if (v299)
    {
      v173 = *((_DWORD *)v299 + 1);
      *(_DWORD *)v299 += 2;
      if (v173)
      {
        v289[0] = v172;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v289[0] = v299;
        if (*(_DWORD *)v172 == 2)
          WTF::StringImpl::destroy(v172, v270);
        else
          *(_DWORD *)v172 -= 2;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v289[0] = v299;
    }
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v289, (uint64_t *)&v296, (uint64_t)&v299);
    v175 = v289[0];
    v289[0] = 0;
    if (v175)
    {
      if (*(_DWORD *)v175 == 2)
      {
        WTF::StringImpl::destroy(v175, v174);
        if (v172)
        {
LABEL_411:
          if (*(_DWORD *)v172 == 2)
            WTF::StringImpl::destroy(v172, v174);
          else
            *(_DWORD *)v172 -= 2;
        }
LABEL_413:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v176 = v299;
        if (v299)
        {
          v177 = *((_DWORD *)v299 + 1);
          *(_DWORD *)v299 += 2;
          if (v177)
          {
            v289[0] = v176;
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v289[0] = v299;
            if (*(_DWORD *)v176 == 2)
              WTF::StringImpl::destroy(v176, v271);
            else
              *(_DWORD *)v176 -= 2;
          }
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v289[0] = v299;
        }
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v289, (uint64_t *)&v296, (uint64_t)&v299);
        v179 = v289[0];
        v289[0] = 0;
        if (v179)
        {
          if (*(_DWORD *)v179 == 2)
          {
            WTF::StringImpl::destroy(v179, v178);
            if (v176)
            {
LABEL_420:
              if (*(_DWORD *)v176 == 2)
                WTF::StringImpl::destroy(v176, v178);
              else
                *(_DWORD *)v176 -= 2;
            }
LABEL_422:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v180 = v299;
            if (v299)
            {
              v181 = *((_DWORD *)v299 + 1);
              *(_DWORD *)v299 += 2;
              if (v181)
              {
                v289[0] = v180;
              }
              else
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v289[0] = v299;
                if (*(_DWORD *)v180 == 2)
                  WTF::StringImpl::destroy(v180, v272);
                else
                  *(_DWORD *)v180 -= 2;
              }
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v289[0] = v299;
            }
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v289, (uint64_t *)&v296, (uint64_t)&v299);
            v183 = v289[0];
            v289[0] = 0;
            if (v183)
            {
              if (*(_DWORD *)v183 == 2)
              {
                WTF::StringImpl::destroy(v183, v182);
                if (v180)
                {
LABEL_429:
                  if (*(_DWORD *)v180 == 2)
                    WTF::StringImpl::destroy(v180, v182);
                  else
                    *(_DWORD *)v180 -= 2;
                }
LABEL_431:
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v184 = v299;
                if (v299)
                {
                  v185 = *((_DWORD *)v299 + 1);
                  *(_DWORD *)v299 += 2;
                  if (v185)
                  {
                    v289[0] = v184;
                  }
                  else
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v289[0] = v299;
                    if (*(_DWORD *)v184 == 2)
                      WTF::StringImpl::destroy(v184, v273);
                    else
                      *(_DWORD *)v184 -= 2;
                  }
                }
                else
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v289[0] = v299;
                }
                WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v289, (uint64_t *)&v296, (uint64_t)&v299);
                v187 = v289[0];
                v289[0] = 0;
                if (v187)
                {
                  if (*(_DWORD *)v187 == 2)
                  {
                    WTF::StringImpl::destroy(v187, v186);
                    if (v184)
                    {
LABEL_438:
                      if (*(_DWORD *)v184 == 2)
                        WTF::StringImpl::destroy(v184, v186);
                      else
                        *(_DWORD *)v184 -= 2;
                    }
LABEL_440:
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v188 = v299;
                    if (v299)
                    {
                      v189 = *((_DWORD *)v299 + 1);
                      *(_DWORD *)v299 += 2;
                      if (v189)
                      {
                        v289[0] = v188;
                      }
                      else
                      {
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v289[0] = v299;
                        if (*(_DWORD *)v188 == 2)
                          WTF::StringImpl::destroy(v188, v274);
                        else
                          *(_DWORD *)v188 -= 2;
                      }
                    }
                    else
                    {
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v289[0] = v299;
                    }
                    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v289, (uint64_t *)&v296, (uint64_t)&v299);
                    v191 = v289[0];
                    v289[0] = 0;
                    if (v191)
                    {
                      if (*(_DWORD *)v191 == 2)
                      {
                        WTF::StringImpl::destroy(v191, v190);
                        if (v188)
                        {
LABEL_447:
                          if (*(_DWORD *)v188 == 2)
                            WTF::StringImpl::destroy(v188, v190);
                          else
                            *(_DWORD *)v188 -= 2;
                        }
LABEL_449:
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v192 = v299;
                        if (v299)
                        {
                          v193 = *((_DWORD *)v299 + 1);
                          *(_DWORD *)v299 += 2;
                          if (v193)
                          {
                            v289[0] = v192;
                          }
                          else
                          {
                            WTF::StringImpl::createWithoutCopyingNonEmpty();
                            v289[0] = v299;
                            if (*(_DWORD *)v192 == 2)
                              WTF::StringImpl::destroy(v192, v275);
                            else
                              *(_DWORD *)v192 -= 2;
                          }
                        }
                        else
                        {
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v289[0] = v299;
                        }
                        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v289, (uint64_t *)&v296, (uint64_t)&v299);
                        v195 = v289[0];
                        v289[0] = 0;
                        if (v195)
                        {
                          if (*(_DWORD *)v195 == 2)
                          {
                            WTF::StringImpl::destroy(v195, v194);
                            if (v192)
                            {
LABEL_456:
                              if (*(_DWORD *)v192 == 2)
                                WTF::StringImpl::destroy(v192, v194);
                              else
                                *(_DWORD *)v192 -= 2;
                            }
LABEL_458:
                            WTF::StringImpl::createWithoutCopyingNonEmpty();
                            v196 = v299;
                            if (v299)
                            {
                              v197 = *((_DWORD *)v299 + 1);
                              *(_DWORD *)v299 += 2;
                              if (v197)
                              {
                                v289[0] = v196;
                              }
                              else
                              {
                                WTF::StringImpl::createWithoutCopyingNonEmpty();
                                v289[0] = v299;
                                if (*(_DWORD *)v196 == 2)
                                  WTF::StringImpl::destroy(v196, v276);
                                else
                                  *(_DWORD *)v196 -= 2;
                              }
                            }
                            else
                            {
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              v289[0] = v299;
                            }
                            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v289, (uint64_t *)&v296, (uint64_t)&v299);
                            v199 = v289[0];
                            v289[0] = 0;
                            if (v199)
                            {
                              if (*(_DWORD *)v199 == 2)
                              {
                                WTF::StringImpl::destroy(v199, v198);
                                if (v196)
                                {
LABEL_465:
                                  if (*(_DWORD *)v196 == 2)
                                    WTF::StringImpl::destroy(v196, v198);
                                  else
                                    *(_DWORD *)v196 -= 2;
                                }
LABEL_467:
                                WTF::StringImpl::createWithoutCopyingNonEmpty();
                                v200 = v299;
                                if (v299)
                                {
                                  v201 = *((_DWORD *)v299 + 1);
                                  *(_DWORD *)v299 += 2;
                                  if (v201)
                                  {
                                    v289[0] = v200;
                                  }
                                  else
                                  {
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    v289[0] = v299;
                                    if (*(_DWORD *)v200 == 2)
                                      WTF::StringImpl::destroy(v200, v277);
                                    else
                                      *(_DWORD *)v200 -= 2;
                                  }
                                }
                                else
                                {
                                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                                  v289[0] = v299;
                                }
                                WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v289, (uint64_t *)&v296, (uint64_t)&v299);
                                v203 = v289[0];
                                v289[0] = 0;
                                if (v203)
                                {
                                  if (*(_DWORD *)v203 == 2)
                                  {
                                    WTF::StringImpl::destroy(v203, v202);
                                    if (v200)
                                    {
LABEL_474:
                                      if (*(_DWORD *)v200 == 2)
                                        WTF::StringImpl::destroy(v200, v202);
                                      else
                                        *(_DWORD *)v200 -= 2;
                                    }
LABEL_476:
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    v204 = v299;
                                    if (v299)
                                    {
                                      v205 = *((_DWORD *)v299 + 1);
                                      *(_DWORD *)v299 += 2;
                                      if (v205)
                                      {
                                        v289[0] = v204;
                                      }
                                      else
                                      {
                                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                                        v289[0] = v299;
                                        if (*(_DWORD *)v204 == 2)
                                          WTF::StringImpl::destroy(v204, v278);
                                        else
                                          *(_DWORD *)v204 -= 2;
                                      }
                                    }
                                    else
                                    {
                                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                                      v289[0] = v299;
                                    }
                                    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v289, (uint64_t *)&v296, (uint64_t)&v299);
                                    v207 = v289[0];
                                    v289[0] = 0;
                                    if (v207)
                                    {
                                      if (*(_DWORD *)v207 == 2)
                                      {
                                        WTF::StringImpl::destroy(v207, v206);
                                        if (v204)
                                        {
LABEL_483:
                                          if (*(_DWORD *)v204 == 2)
                                            WTF::StringImpl::destroy(v204, v206);
                                          else
                                            *(_DWORD *)v204 -= 2;
                                        }
LABEL_485:
                                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                                        v208 = v299;
                                        if (v299)
                                        {
                                          v209 = *((_DWORD *)v299 + 1);
                                          *(_DWORD *)v299 += 2;
                                          if (v209)
                                          {
                                            v289[0] = v208;
                                          }
                                          else
                                          {
                                            WTF::StringImpl::createWithoutCopyingNonEmpty();
                                            v289[0] = v299;
                                            if (*(_DWORD *)v208 == 2)
                                              WTF::StringImpl::destroy(v208, v279);
                                            else
                                              *(_DWORD *)v208 -= 2;
                                          }
                                        }
                                        else
                                        {
                                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                                          v289[0] = v299;
                                        }
                                        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v289, (uint64_t *)&v296, (uint64_t)&v299);
                                        v20 = v289[0];
                                        v289[0] = 0;
                                        if (v20)
                                        {
                                          if (*(_DWORD *)v20 == 2)
                                          {
                                            v20 = (WTF::StringImpl *)WTF::StringImpl::destroy(v20, v21);
                                            if (v208)
                                            {
LABEL_492:
                                              if (*(_DWORD *)v208 == 2)
                                                v20 = (WTF::StringImpl *)WTF::StringImpl::destroy(v208, v21);
                                              else
                                                *(_DWORD *)v208 -= 2;
                                            }
LABEL_494:
                                            qword_1ECE83900 = (uint64_t)v296;
                                            byte_1ECE838DB = 1;
                                            goto LABEL_14;
                                          }
                                          *(_DWORD *)v20 -= 2;
                                        }
                                        if (v208)
                                          goto LABEL_492;
                                        goto LABEL_494;
                                      }
                                      *(_DWORD *)v207 -= 2;
                                    }
                                    if (v204)
                                      goto LABEL_483;
                                    goto LABEL_485;
                                  }
                                  *(_DWORD *)v203 -= 2;
                                }
                                if (v200)
                                  goto LABEL_474;
                                goto LABEL_476;
                              }
                              *(_DWORD *)v199 -= 2;
                            }
                            if (v196)
                              goto LABEL_465;
                            goto LABEL_467;
                          }
                          *(_DWORD *)v195 -= 2;
                        }
                        if (v192)
                          goto LABEL_456;
                        goto LABEL_458;
                      }
                      *(_DWORD *)v191 -= 2;
                    }
                    if (v188)
                      goto LABEL_447;
                    goto LABEL_449;
                  }
                  *(_DWORD *)v187 -= 2;
                }
                if (v184)
                  goto LABEL_438;
                goto LABEL_440;
              }
              *(_DWORD *)v183 -= 2;
            }
            if (v180)
              goto LABEL_429;
            goto LABEL_431;
          }
          *(_DWORD *)v179 -= 2;
        }
        if (v176)
          goto LABEL_420;
        goto LABEL_422;
      }
      *(_DWORD *)v175 -= 2;
    }
    if (v172)
      goto LABEL_411;
    goto LABEL_413;
  }
LABEL_14:
  if ((byte_1ECE838DC & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v289[0] = v299;
    MEMORY[0x19AEA52D4](&v299, v289, 0);
    qword_1ECE83928[0] = (uint64_t)v299;
    unk_1ECE83930 = v300;
    unk_1ECE83940 = v301;
    LODWORD(v300) = v300 & 0xFFFFFFFE;
    v299 = 0;
    v20 = v289[0];
    v289[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        v20 = (WTF::StringImpl *)WTF::StringImpl::destroy(v20, v21);
      else
        *(_DWORD *)v20 -= 2;
    }
    byte_1ECE838DC = 1;
  }
  if ((byte_1ECE838DD & 1) == 0)
  {
    v20 = WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&unk_1ECE83908, (const WTF::URL *)qword_1ECE83928);
    byte_1ECE838DD = 1;
  }
  if ((byte_1ECE838DE & 1) == 0)
  {
    v20 = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v210 = v299;
    if (v299)
    {
      v211 = *((_DWORD *)v299 + 1);
      v212 = *(_DWORD *)v299 + 2;
      *(_DWORD *)v299 = v212;
      v213 = v210;
      if (!v211)
      {
        v20 = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        v213 = v299;
        v212 = *(_DWORD *)v210 - 2;
        if (*(_DWORD *)v210 == 2)
        {
          v20 = (WTF::StringImpl *)WTF::StringImpl::destroy(v210, v21);
          v212 = *(_DWORD *)v210;
        }
        else
        {
          *(_DWORD *)v210 = v212;
        }
      }
      qword_1ECE83910 = (uint64_t)v213;
      v214 = v212 - 2;
      if (v214)
        *(_DWORD *)v210 = v214;
      else
        v20 = (WTF::StringImpl *)WTF::StringImpl::destroy(v210, v21);
    }
    else
    {
      v20 = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      qword_1ECE83910 = (uint64_t)v299;
    }
    byte_1ECE838DE = 1;
  }
  if ((byte_1ECE838DF & 1) == 0)
  {
    v20 = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    qword_1ECE83918 = v299;
    byte_1ECE838DF = 1;
  }
  if ((byte_1ECE838E0 & 1) == 0)
  {
    v215 = WTF::aboutBlankURL(v20);
    v216 = *(WTF::StringImpl **)v215;
    if (*(_QWORD *)v215)
      *(_DWORD *)v216 += 2;
    v299 = v216;
    v300 = *(_OWORD *)(v215 + 8);
    v301 = *(_OWORD *)(v215 + 24);
    v289[0] = 0;
    v289[1] = 0;
    v296 = 0;
    v297 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::UserScript::UserScript((uint64_t)&unk_1ECE83950, (uint64_t *)&v287, (uint64_t *)&v299, (uint64_t *)v289, (uint64_t *)&v296, 1, 1, 1);
    v217 = v287;
    v287 = 0;
    if (v217)
    {
      if (*(_DWORD *)v217 == 2)
        WTF::StringImpl::destroy(v217, v21);
      else
        *(_DWORD *)v217 -= 2;
    }
    v218 = v296;
    if (HIDWORD(v297))
    {
      v285 = (WebCore::Document *)(8 * HIDWORD(v297));
      v266 = v296;
      do
      {
        v267 = *(WTF::StringImpl **)v266;
        *(_QWORD *)v266 = 0;
        if (v267)
        {
          if (*(_DWORD *)v267 == 2)
            WTF::StringImpl::destroy(v267, v21);
          else
            *(_DWORD *)v267 -= 2;
        }
        v266 = (WTF *)((char *)v266 + 8);
        v285 = (WebCore::Document *)((char *)v285 - 8);
      }
      while (v285);
    }
    if (v218)
      WTF::fastFree(v218, v21);
    v219 = v289[0];
    if (HIDWORD(v289[1]))
    {
      v286 = (WebCore::Document *)(8 * HIDWORD(v289[1]));
      v268 = (WTF::StringImpl **)v289[0];
      do
      {
        v269 = *v268;
        *v268 = 0;
        if (v269)
        {
          if (*(_DWORD *)v269 == 2)
            WTF::StringImpl::destroy(v269, v21);
          else
            *(_DWORD *)v269 -= 2;
        }
        ++v268;
        v286 = (WebCore::Document *)((char *)v286 - 8);
      }
      while (v286);
    }
    if (v219)
      WTF::fastFree(v219, v21);
    v20 = v299;
    if (v299)
    {
      if (*(_DWORD *)v299 == 2)
        v20 = (WTF::StringImpl *)WTF::StringImpl::destroy(v299, v21);
      else
        *(_DWORD *)v299 -= 2;
    }
    byte_1ECE838E0 = 1;
  }
  v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v23 || (v24 = *(_QWORD *)(v23 + 96)) == 0)
    v24 = WebCore::threadGlobalDataSlow(v20);
  v25 = *(_QWORD *)(v24 + 40);
  if (!v25)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v24);
    v25 = *(_QWORD *)(v24 + 40);
  }
  if (*(_QWORD *)a4 != *(_QWORD *)(v25 + 400) || !*(_QWORD *)a1 || (v26 = *(_QWORD *)(*(_QWORD *)a1 + 8)) == 0)
  {
LABEL_27:
    v18 = 0;
    goto LABEL_322;
  }
  v284 = *(WebCore::Document **)(*(_QWORD *)a1 + 8);
  *(_DWORD *)(v26 + 24) += 2;
  v27 = *(_QWORD *)(a2 + 104);
  if (v27
    && *(_QWORD *)(v27 + 16)
    && WTF::equal(v293, (const WTF::StringImpl *)qword_1ECE83910, v22)
    && !WebCore::Document::isTopDocument(v284))
  {
    {
      WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
    }
    v28 = WebCore::sharedObserver(void)::observer
        ? (uint64_t *)WebCore::sharedObserver(void)::observer
        : &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
    if ((*(unsigned int (**)(uint64_t *, uint64_t *))(*v28 + 144))(v28, &qword_1ECE83910))
    {
      v29 = *(_QWORD *)(a2 + 104);
      WTF::AtomStringImpl::add();
      v30 = v299;
      v31 = *(_QWORD *)(v29 + 16);
      if (v31)
      {
        v32 = 0;
        while (*(WTF::StringImpl **)(v31 + 16 + 8 * v32) != v299)
        {
          if (++v32 >= (unint64_t)*(unsigned int *)(v31 + 12))
            goto LABEL_44;
        }
        v36 = 1;
LABEL_51:
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
          {
            WTF::StringImpl::destroy(v30, v21);
            if (v36)
              goto LABEL_55;
            goto LABEL_63;
          }
          *(_DWORD *)v30 -= 2;
        }
        if (v36)
        {
LABEL_55:
          {
            WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
          }
          if (WebCore::sharedObserver(void)::observer)
            v37 = (uint64_t *)WebCore::sharedObserver(void)::observer;
          else
            v37 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
          if ((*(unsigned int (**)(uint64_t *, uint64_t *))(*v37 + 144))(v37, &qword_1ECE83910))
          {
            v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v38 = off_1E3401E78;
            v299 = v38;
            v40 = (WebCore::DocumentStorageAccess *)WebCore::DocumentStorageAccess::from(v284, v39);
            WebCore::DocumentStorageAccess::requestStorageAccessForDocumentQuirk(v40, (WTF::StringImpl *)&v299);
            if (v299)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v299 + 8))(v299);
          }
        }
LABEL_63:
        v18 = 0;
        goto LABEL_175;
      }
LABEL_44:
      WTF::AtomStringImpl::add();
      v33 = *(_QWORD *)(v29 + 16);
      if (v33)
      {
        v34 = 0;
        do
        {
          v35 = *(WTF::StringImpl **)(v33 + 16 + 8 * v34);
          v36 = v35 == v299;
          if (v35 == v299)
            break;
          ++v34;
        }
        while (v34 < *(unsigned int *)(v33 + 12));
        if (!v299)
          goto LABEL_51;
      }
      else
      {
        v36 = 0;
        if (!v299)
          goto LABEL_51;
      }
      if (*(_DWORD *)v299 == 2)
        WTF::StringImpl::destroy(v299, v21);
      else
        *(_DWORD *)v299 -= 2;
      goto LABEL_51;
    }
  }
  v41 = qword_1ECE83900;
  if (!qword_1ECE83900)
    goto LABEL_65;
  LODWORD(v282) = *(_DWORD *)(qword_1ECE83900 - 8);
  LODWORD(v283) = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)&v293, v21) & v282;
  v137 = (WTF **)(v41 + 8 * v283);
  if ((WTF::equal(*v137, 0, v138) & 1) != 0)
    goto LABEL_65;
  v140 = 1;
  while (*v137 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v137, v293, v139) & 1) == 0)
  {
    LODWORD(v283) = ((_DWORD)v283 + v140) & v282;
    v137 = (WTF **)(v41 + 8 * v283);
    ++v140;
    if ((WTF::equal(*v137, 0, v139) & 1) != 0)
      goto LABEL_65;
  }
  v151 = *(_QWORD *)(a2 + 104);
  if (!v151 || !*(_QWORD *)(v151 + 16))
    goto LABEL_549;
  WTF::AtomStringImpl::add();
  v283 = v299;
  v152 = *(_QWORD *)(v151 + 16);
  if (!v152)
  {
LABEL_349:
    WTF::AtomStringImpl::add();
    v282 = v299;
    v154 = *(_QWORD *)(v151 + 16);
    if (v154)
    {
      v155 = 0;
      while (*(WTF::StringImpl **)(v154 + 16 + 8 * v155) != v299)
      {
        if (++v155 >= (unint64_t)*(unsigned int *)(v154 + 12))
          goto LABEL_353;
      }
      v167 = 1;
      goto LABEL_381;
    }
LABEL_353:
    WTF::AtomStringImpl::add();
    v280 = v299;
    v156 = *(_QWORD *)(v151 + 16);
    if (v156)
    {
      v157 = 0;
      while (*(WTF::StringImpl **)(v156 + 16 + 8 * v157) != v299)
      {
        if (++v157 >= (unint64_t)*(unsigned int *)(v156 + 12))
          goto LABEL_357;
      }
      v167 = 1;
      goto LABEL_378;
    }
LABEL_357:
    WTF::AtomStringImpl::add();
    v158 = v299;
    v159 = *(_QWORD *)(v151 + 16);
    if (v159)
    {
      v160 = 0;
      while (*(WTF::StringImpl **)(v159 + 16 + 8 * v160) != v299)
      {
        if (++v160 >= (unint64_t)*(unsigned int *)(v159 + 12))
          goto LABEL_361;
      }
      v167 = 1;
      goto LABEL_375;
    }
LABEL_361:
    WTF::AtomStringImpl::add();
    v161 = v299;
    v162 = *(_QWORD *)(v151 + 16);
    if (v162)
    {
      v163 = 0;
      while (*(WTF::StringImpl **)(v162 + 16 + 8 * v163) != v299)
      {
        if (++v163 >= (unint64_t)*(unsigned int *)(v162 + 12))
          goto LABEL_365;
      }
      v167 = 1;
      goto LABEL_372;
    }
LABEL_365:
    WTF::AtomStringImpl::add();
    v164 = *(_QWORD *)(v151 + 16);
    if (v164)
    {
      v165 = 0;
      do
      {
        v166 = *(WTF::StringImpl **)(v164 + 16 + 8 * v165);
        v167 = v166 == v299;
        if (v166 == v299)
          break;
        ++v165;
      }
      while (v165 < *(unsigned int *)(v164 + 12));
      if (!v299)
      {
LABEL_372:
        if (v161)
        {
          if (*(_DWORD *)v161 == 2)
            WTF::StringImpl::destroy(v161, v141);
          else
            *(_DWORD *)v161 -= 2;
        }
LABEL_375:
        if (v158)
        {
          if (*(_DWORD *)v158 == 2)
            WTF::StringImpl::destroy(v158, v141);
          else
            *(_DWORD *)v158 -= 2;
        }
LABEL_378:
        if (v280)
        {
          if (*(_DWORD *)v280 == 2)
            WTF::StringImpl::destroy(v280, v141);
          else
            *(_DWORD *)v280 -= 2;
        }
LABEL_381:
        if (v282)
        {
          if (*(_DWORD *)v282 == 2)
            WTF::StringImpl::destroy(v282, v141);
          else
            *(_DWORD *)v282 -= 2;
        }
        goto LABEL_384;
      }
    }
    else
    {
      v167 = 0;
      if (!v299)
        goto LABEL_372;
    }
    if (*(_DWORD *)v299 == 2)
      WTF::StringImpl::destroy(v299, v141);
    else
      *(_DWORD *)v299 -= 2;
    goto LABEL_372;
  }
  v153 = 0;
  while (*(WTF::StringImpl **)(v152 + 16 + 8 * v153) != v299)
  {
    if (++v153 >= (unint64_t)*(unsigned int *)(v152 + 12))
      goto LABEL_349;
  }
  v167 = 1;
LABEL_384:
  if (!v283)
    goto LABEL_387;
  if (*(_DWORD *)v283 != 2)
  {
    *(_DWORD *)v283 -= 2;
LABEL_387:
    if (v167)
      goto LABEL_388;
    goto LABEL_549;
  }
  WTF::StringImpl::destroy(v283, v141);
  if (v167)
    goto LABEL_388;
LABEL_549:
  if ((*(_WORD *)(a2 + 28) & 0x20) != 0)
  {
    v229 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24);
    v230 = *(_QWORD *)(WebCore::SVGNames::svgTag + 24);
    v231 = a2;
    if (v229 == v230
      || v229 == *(_QWORD *)(WebCore::SVGNames::pathTag + 24)
      && (v231 = *(_QWORD *)(a2 + 32)) != 0
      && (~*(unsigned __int16 *)(v231 + 28) & 0x28) == 0
      && *(_QWORD *)(*(_QWORD *)(v231 + 96) + 24) == v230)
    {
      v232 = *(_QWORD *)(v231 + 104);
      if (v232)
      {
        if ((*(_BYTE *)(v232 + 4) & 8) != 0)
          WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v231, (unsigned __int8 *)v141, v143, (uint64_t)v139, v142);
        if ((*(_WORD *)(v231 + 28) & 0x20) != 0)
          WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v231);
        v233 = *(_QWORD *)(v231 + 104);
        if (v233)
        {
          v234 = *(_DWORD *)(v233 + 4);
          if ((v234 & 1) != 0 ? *(_DWORD *)(v233 + 52) : v234 >> 5)
          {
            v236 = WebCore::Element::attributes((WebCore::Element *)v231);
            WTF::AtomStringImpl::add();
            v237 = *(_QWORD *)(v236[1] + 8);
            *(_DWORD *)(v237 + 24) += 2;
            WebCore::Element::getAttributeNode(v237, (const WTF::AtomString *)v289, v238, v239, &v299, v240);
            if (*(_DWORD *)(v237 + 24) == 2)
            {
              if ((*(_WORD *)(v237 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v237, v241);
            }
            else
            {
              *(_DWORD *)(v237 + 24) -= 2;
            }
            v244 = v289[0];
            v289[0] = 0;
            if (v244)
            {
              if (*(_DWORD *)v244 == 2)
                WTF::StringImpl::destroy(v244, (WTF::StringImpl *)v241);
              else
                *(_DWORD *)v244 -= 2;
            }
            v245 = v299;
            if (v299)
            {
              v246 = *((_QWORD *)v299 + 10);
              if (v246 && (v248 = *(_QWORD *)(v246 + 8)) != 0)
              {
                *(_DWORD *)(v248 + 24) += 2;
                WebCore::Element::getAttributeForBindings(v248, (unsigned __int8 *)v245 + 88, 1, v242, v289, v243);
                if (*(_DWORD *)(v248 + 24) == 2)
                {
                  if ((*(_WORD *)(v248 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v248, v249);
                }
                else
                {
                  *(_DWORD *)(v248 + 24) -= 2;
                }
              }
              else
              {
                v247 = (WTF::StringImpl *)*((_QWORD *)v299 + 12);
                if (v247)
                  *(_DWORD *)v247 += 2;
                v289[0] = v247;
              }
              v251 = MEMORY[0x19AEA53F4](v289[0], "UserFilled icon", 15);
              v252 = v289[0];
              v289[0] = 0;
              if (v252)
              {
                if (*(_DWORD *)v252 == 2)
                  WTF::StringImpl::destroy(v252, v250);
                else
                  *(_DWORD *)v252 -= 2;
              }
              v253 = v299;
              v299 = 0;
              if (v253)
              {
                if (*((_DWORD *)v253 + 6) != 2)
                {
                  *((_DWORD *)v253 + 6) -= 2;
                  if ((v251 & 1) == 0)
                    goto LABEL_65;
LABEL_388:
                  {
                    WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
                  }
                  if (WebCore::sharedObserver(void)::observer)
                    v168 = (uint64_t *)WebCore::sharedObserver(void)::observer;
                  else
                    v168 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
                  if (!(*(unsigned int (**)(uint64_t *, void *))(*v168 + 144))(v168, &unk_1ECE83908))
                  {
                    v42 = (WebCore::Document *)*((_QWORD *)v284 + 87);
                    if (v42)
                    {
                      ++*((_DWORD *)v42 + 6);
                      WebCore::LocalDOMWindow::open((unsigned int *)v42, v42, v42, (const WTF::String *)qword_1ECE83928, MEMORY[0x1E0CBF3B8], (const WTF::String *)&qword_1ECE83918, (uint64_t)&v299);
                      v171 = DWORD2(v300);
                      v18 = DWORD2(v300) == 0;
                      if (!DWORD2(v300))
                      {
                        v220 = v299;
                        v299 = 0;
                        v282 = v220;
                        v221 = *((_QWORD *)v220 + 1);
                        if (v221)
                        {
                          v283 = *(WTF::StringImpl **)(v221 + 8);
                          if (v283)
                          {
                            if (!*((_BYTE *)v283 + 144))
                            {
                              v80 = (unsigned int *)((char *)v283 + 8);
                              do
                                v254 = __ldaxr(v80);
                              while (__stlxr(v254 + 1, v80));
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              v296 = v289[0];
                              WebCore::ScriptController::createWorld((WTF::RunLoop *)&v296, 0, (uint64_t *)v289);
                              v256 = v296;
                              v296 = 0;
                              if (!v256)
                                goto LABEL_603;
                              if (*(_DWORD *)v256 != 2)
                              {
                                *(_DWORD *)v256 -= 2;
                                goto LABEL_603;
                              }
                              goto LABEL_664;
                            }
                          }
                        }
                        LODWORD(v283) = 0;
                        goto LABEL_523;
                      }
                      LODWORD(v283) = 1;
                      goto LABEL_526;
                    }
                    goto LABEL_63;
                  }
                  WTF::String::isolatedCopy();
                  if (v299 && *((_DWORD *)v299 + 1))
                  {
                    v289[0] = v299;
                  }
                  else
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v170 = v299;
                    v299 = 0;
                    if (v170)
                    {
                      if (*(_DWORD *)v170 == 2)
                        WTF::StringImpl::destroy(v170, v169);
                      else
                        *(_DWORD *)v170 -= 2;
                    }
                  }
                  v222 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v222 = off_1E3401EA0;
                  v299 = v222;
                  v224 = WebCore::DocumentStorageAccess::from(v284, v223);
                  v225 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v224 + 24) + 8) + 528);
                  if (v225
                    && (v226 = *(_QWORD *)(v225 + 8)) != 0
                    && (v227 = *(_QWORD *)(v226 + 24)) != 0
                    && *(_QWORD *)(v227 + 8)
                    && *(unsigned __int8 *)(v224 + 32) < 2u)
                  {
                    WebCore::DocumentStorageAccess::requestStorageAccessQuirk(v224, (uint64_t)v289, (uint64_t *)&v299);
                    v222 = v299;
                    if (!v299)
                    {
LABEL_544:
                      v228 = v289[0];
                      v289[0] = 0;
                      if (v228)
                      {
                        if (*(_DWORD *)v228 == 2)
                          WTF::StringImpl::destroy(v228, v21);
                        else
                          *(_DWORD *)v228 -= 2;
                      }
                      goto LABEL_63;
                    }
                  }
                  else
                  {
                    (*(void (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v222 + 16))(v222, 0);
                  }
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v222 + 8))(v222);
                  goto LABEL_544;
                }
                if ((*((_WORD *)v253 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v253, v250);
                  if ((v251 & 1) == 0)
                    goto LABEL_65;
                  goto LABEL_388;
                }
              }
              if (!v251)
                goto LABEL_65;
              goto LABEL_388;
            }
          }
        }
      }
    }
  }
  while (1)
  {
LABEL_65:
    v42 = v284;
    v18 = (unint64_t)v284 + 736;
    v43 = WTF::URL::host((WebCore::Document *)((char *)v284 + 736));
    if ((char *)v43 == "www.microsoft.com" || v21 != 17)
    {
      if ((char *)v43 == "www.microsoft.com" && v21 == 17)
        goto LABEL_74;
LABEL_92:
      v59 = WTF::URL::host((WTF::URL *)v18);
      if ((char *)v59 == "www.playstation.com" || v21 != 19)
      {
        if ((char *)v59 == "www.playstation.com" && v21 == 19)
          goto LABEL_110;
      }
      else
      {
        if (((unint64_t)v21 & 0xFF00000000) != 0)
        {
          if (*(_BYTE *)v59 != 119)
            goto LABEL_101;
          v60 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v59 + 3), (int8x16_t)xmmword_1969F5C30), vceqq_s8(*(int8x16_t *)(v59 + 1), (int8x16_t)xmmword_1969F5C20));
          v60.i8[0] = vminvq_u8((uint8x16_t)v60);
        }
        else
        {
          if (*(_WORD *)v59 != 119)
            goto LABEL_101;
          v115 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v59 + 2), (int16x8_t)xmmword_1969F5C40);
          v115.i16[0] = vminvq_u16(v115);
          if (!v115.i32[0])
            goto LABEL_101;
          v116 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v59 + 6), (int16x8_t)xmmword_1969F5C50);
          v116.i16[0] = vminvq_u16(v116);
          if (!v116.i32[0])
            goto LABEL_101;
          v60 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v59 + 22), (int16x8_t)xmmword_1969F5C60);
          v60.i16[0] = vminvq_u16(v60);
        }
        if (v60.i32[0])
          goto LABEL_110;
      }
LABEL_101:
      v61 = WTF::URL::host((WTF::URL *)v18);
      if ((char *)v61 != "my.playstation.com" && v21 == 18)
      {
        if (((unint64_t)v21 & 0xFF00000000) != 0)
        {
          if (*(_BYTE *)v61 != 109)
            goto LABEL_256;
          v62 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v61 + 2), (int8x16_t)xmmword_1969F5C30), vceqq_s8(*(int8x16_t *)(v61 + 1), (int8x16_t)xmmword_1969F5C70));
          v62.i8[0] = vminvq_u8((uint8x16_t)v62);
        }
        else
        {
          if (*(_WORD *)v61 != 109)
            goto LABEL_256;
          v117 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v61 + 2), (int16x8_t)xmmword_1969F5C80);
          v117.i16[0] = vminvq_u16(v117);
          if (!v117.i32[0])
            goto LABEL_256;
          v118 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v61 + 4), (int16x8_t)xmmword_1969F5C50);
          v118.i16[0] = vminvq_u16(v118);
          if (!v118.i32[0])
            goto LABEL_256;
          v62 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v61 + 20), (int16x8_t)xmmword_1969F5C60);
          v62.i16[0] = vminvq_u16(v62);
        }
        if (!v62.i32[0])
          goto LABEL_256;
        goto LABEL_110;
      }
      if ((char *)v61 == "my.playstation.com" && v21 == 18)
      {
LABEL_110:
        v63 = *(_QWORD *)(a2 + 104);
        if (!v63 || !*(_QWORD *)(v63 + 16))
          goto LABEL_320;
        WTF::AtomStringImpl::add();
        v18 = (unint64_t)v299;
        v64 = *(_QWORD *)(v63 + 16);
        if (v64)
        {
          v65 = 0;
          while (*(WTF::StringImpl **)(v64 + 16 + 8 * v65) != v299)
          {
            if (++v65 >= (unint64_t)*(unsigned int *)(v64 + 12))
              goto LABEL_116;
          }
LABEL_177:
          v56 = 1;
          if (!v18)
            goto LABEL_133;
LABEL_131:
          if (*(_DWORD *)v18 != 2)
          {
            *(_DWORD *)v18 -= 2;
            goto LABEL_133;
          }
          v95 = (WTF::StringImpl *)v18;
LABEL_181:
          WTF::StringImpl::destroy(v95, v21);
          goto LABEL_133;
        }
LABEL_116:
        v66 = *(_QWORD *)(a2 + 104);
        WTF::AtomStringImpl::add();
        v48 = v299;
        v67 = *(_QWORD *)(v66 + 16);
        if (v67)
        {
          v68 = 0;
          while (*(WTF::StringImpl **)(v67 + 16 + 8 * v68) != v299)
          {
            if (++v68 >= (unint64_t)*(unsigned int *)(v67 + 12))
              goto LABEL_120;
          }
LABEL_179:
          v56 = 1;
          goto LABEL_127;
        }
LABEL_120:
        v69 = *(_QWORD *)(a2 + 104);
        WTF::AtomStringImpl::add();
        v52 = v299;
        v70 = *(_QWORD *)(v69 + 16);
        if (!v70)
          goto LABEL_191;
        v71 = 0;
        do
        {
          v72 = *(WTF::StringImpl **)(v70 + 16 + 8 * v71);
          v56 = v72 == v299;
          if (v72 == v299)
            break;
          ++v71;
        }
        while (v71 < *(unsigned int *)(v70 + 12));
        goto LABEL_124;
      }
LABEL_256:
      v119 = WTF::URL::host((WTF::URL *)v18);
      if ((char *)v119 == "gizmodo.com" || v21 != 11)
      {
        if ((char *)v119 != "gizmodo.com" || v21 != 11)
          goto LABEL_320;
      }
      else if (((unint64_t)v21 & 0xFF00000000) != 0)
      {
        if (*(_BYTE *)v119 != 103
          || *(_QWORD *)(v119 + 1) != 0x632E6F646F6D7A69
          || *(_QWORD *)(v119 + 3) != 0x6D6F632E6F646F6DLL)
        {
          goto LABEL_320;
        }
      }
      else
      {
        if (*(_WORD *)v119 != 103)
          goto LABEL_320;
        v134 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v119 + 2), (int16x8_t)xmmword_1969F5C90);
        v134.i16[0] = vminvq_u16(v134);
        if (!v134.i32[0])
          goto LABEL_320;
        v135 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v119 + 6), (int16x8_t)xmmword_1969F5CA0);
        v135.i16[0] = vminvq_u16(v135);
        if (!v135.i32[0])
          goto LABEL_320;
      }
      WTF::AtomStringImpl::add();
      v120 = v299;
      v121 = *(_QWORD *)(a2 + 32);
      v122 = *(_QWORD *)(a2 + 104);
      if (v122)
      {
        v123 = *(_QWORD *)(v122 + 16);
        if (v123)
        {
          v124 = 0;
          while (*(WTF::StringImpl **)(v123 + 16 + 8 * v124) != v299)
          {
            if (++v124 >= (unint64_t)*(unsigned int *)(v123 + 12))
              goto LABEL_270;
          }
          v56 = 1;
          goto LABEL_296;
        }
      }
LABEL_270:
      if (v121 && (*(_WORD *)(v121 + 28) & 8) != 0)
      {
        v18 = 0;
        *(_DWORD *)(v121 + 24) += 2;
        while (1)
        {
          v125 = *(_QWORD *)(v121 + 104);
          if (v125)
          {
            v126 = *(_QWORD *)(v125 + 16);
            if (v126)
              break;
          }
LABEL_279:
          v128 = *(_QWORD *)(v121 + 32);
          if (v128)
          {
            if ((*(_WORD *)(v128 + 28) & 8) != 0)
              *(_DWORD *)(v128 + 24) += 2;
            else
              v128 = 0;
          }
          if (*(_DWORD *)(v121 + 24) == 2)
          {
            if ((*(_WORD *)(v121 + 30) & 0x400) == 0)
            {
              v130 = v120;
              WebCore::Node::removedLastRef((WebCore::Node *)v121, v21);
              v120 = v130;
            }
          }
          else
          {
            *(_DWORD *)(v121 + 24) -= 2;
          }
          v56 = 0;
          if (v128)
          {
            v121 = v128;
            v129 = v18 >= 5;
            v18 = (v18 + 1);
            if (!v129)
              continue;
          }
          goto LABEL_292;
        }
        v127 = 0;
        while (*(WTF::StringImpl **)(v126 + 16 + 8 * v127) != v120)
        {
          if (++v127 >= (unint64_t)*(unsigned int *)(v126 + 12))
            goto LABEL_279;
        }
        v56 = 1;
        v128 = v121;
LABEL_292:
        if (v128)
        {
          if (*(_DWORD *)(v128 + 24) == 2)
          {
            v18 = (unint64_t)v120;
            if ((*(_WORD *)(v128 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v128, v21);
            v42 = v284;
            v120 = (WTF::StringImpl *)v18;
            goto LABEL_296;
          }
          *(_DWORD *)(v128 + 24) -= 2;
        }
        v42 = v284;
      }
      else
      {
        v56 = 0;
      }
LABEL_296:
      if (!v120)
        goto LABEL_133;
      if (*(_DWORD *)v120 != 2)
      {
        *(_DWORD *)v120 -= 2;
        goto LABEL_133;
      }
      v95 = v120;
      goto LABEL_181;
    }
    if (((unint64_t)v21 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v43 != 119
        || *(_QWORD *)(v43 + 1) != 0x6F7263696D2E7777
        || *(_QWORD *)(v43 + 9) != 0x6D6F632E74666F73)
      {
        goto LABEL_92;
      }
    }
    else
    {
      if (*(_WORD *)v43 != 119)
        goto LABEL_92;
      v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v43 + 2), (int16x8_t)xmmword_1969F5C10);
      v57.i16[0] = vminvq_u16(v57);
      if (!v57.i32[0])
        goto LABEL_92;
      v58 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v43 + 18), (int16x8_t)xmmword_1969F5C00);
      v58.i16[0] = vminvq_u16(v58);
      if (!v58.i32[0])
        goto LABEL_92;
    }
LABEL_74:
    v44 = *(_QWORD *)(a2 + 104);
    if (!v44 || !*(_QWORD *)(v44 + 16))
    {
LABEL_320:
      if (*((_DWORD *)v42 + 6) != 2)
      {
        v18 = 0;
        *((_DWORD *)v42 + 6) -= 2;
        goto LABEL_322;
      }
      if ((*((_WORD *)v42 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v42, v21);
      goto LABEL_27;
    }
    WTF::AtomStringImpl::add();
    v18 = (unint64_t)v299;
    v45 = *(_QWORD *)(v44 + 16);
    if (v45)
    {
      v46 = 0;
      while (*(WTF::StringImpl **)(v45 + 16 + 8 * v46) != v299)
      {
        if (++v46 >= (unint64_t)*(unsigned int *)(v45 + 12))
          goto LABEL_80;
      }
      goto LABEL_177;
    }
LABEL_80:
    v47 = *(_QWORD *)(a2 + 104);
    WTF::AtomStringImpl::add();
    v48 = v299;
    v49 = *(_QWORD *)(v47 + 16);
    if (v49)
    {
      v50 = 0;
      while (*(WTF::StringImpl **)(v49 + 16 + 8 * v50) != v299)
      {
        if (++v50 >= (unint64_t)*(unsigned int *)(v49 + 12))
          goto LABEL_84;
      }
      goto LABEL_179;
    }
LABEL_84:
    v51 = *(_QWORD *)(a2 + 104);
    WTF::AtomStringImpl::add();
    v52 = v299;
    v53 = *(_QWORD *)(v51 + 16);
    if (!v53)
    {
LABEL_191:
      v56 = 0;
      if (!v52)
        goto LABEL_127;
      goto LABEL_125;
    }
    v54 = 0;
    do
    {
      v55 = *(WTF::StringImpl **)(v53 + 16 + 8 * v54);
      v56 = v55 == v299;
      if (v55 == v299)
        break;
      ++v54;
    }
    while (v54 < *(unsigned int *)(v53 + 12));
LABEL_124:
    if (!v52)
      goto LABEL_127;
LABEL_125:
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v21);
    else
      *(_DWORD *)v52 -= 2;
LABEL_127:
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v21);
      else
        *(_DWORD *)v48 -= 2;
    }
    v42 = v284;
    if (v18)
      goto LABEL_131;
LABEL_133:
    if (!v56 || (_DWORD)v11)
      goto LABEL_320;
    v73 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
    v74 = v73;
    if (v73)
    {
      do
        v75 = __ldaxr(v73);
      while (__stlxr(v75 + 1, v73));
    }
    v76 = *(_OWORD *)(a3 + 16);
    v300 = *(_OWORD *)a3;
    v301 = v76;
    v77 = *(_OWORD *)(a3 + 48);
    v302 = *(_OWORD *)(a3 + 32);
    v78 = *(_OWORD *)(a3 + 64);
    v79 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)v289 = v77;
    v290 = v78;
    v291 = v79;
    v292 = *(_DWORD *)(a3 + 96);
    v11 = *(WTF::StringImpl **)(a3 + 104);
    if (v11)
      *(_DWORD *)v11 += 2;
    v80 = (unsigned int *)&v300;
    v287 = *(WTF::StringImpl **)(a3 + 112);
    v288 = *(_WORD *)(a3 + 120);
    a4 = *(WTF::StringImpl **)a4;
    if (a4)
      *(_DWORD *)a4 += 2;
    v81 = WTF::fastMalloc((WTF *)0xC0);
    a3 = v81;
    *(_QWORD *)v81 = off_1E3401EC8;
    *(_QWORD *)(v81 + 16) = v74;
    *(_OWORD *)(v81 + 32) = v300;
    *(_OWORD *)(v81 + 48) = v301;
    v82 = *(_OWORD *)v289;
    v83 = v290;
    *(_OWORD *)(v81 + 64) = v302;
    *(_OWORD *)(v81 + 80) = v82;
    v84 = v291;
    *(_OWORD *)(v81 + 96) = v83;
    *(_OWORD *)(v81 + 112) = v84;
    *(_DWORD *)(v81 + 128) = v292;
    if (v11)
      *(_DWORD *)v11 += 2;
    v85 = v287;
    *(_QWORD *)(v81 + 136) = v11;
    *(_QWORD *)(v81 + 144) = v85;
    *(_WORD *)(v81 + 152) = v288;
    if (a4)
      *(_DWORD *)a4 += 2;
    *(_QWORD *)(v81 + 160) = a4;
    *(_DWORD *)(v81 + 168) = a5;
    *(_QWORD *)(v81 + 176) = a6;
    if (!*(_QWORD *)a1)
    {
      a6 = 0;
LABEL_240:
      a2 = 1;
      goto LABEL_148;
    }
    a6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (!a6)
      goto LABEL_240;
    a2 = 0;
    *(_DWORD *)(a6 + 24) += 2;
LABEL_148:
    if (*(_BYTE *)(a6 + 3362) || *(_BYTE *)(a6 + 3405))
    {
      v144 = *(_QWORD *)(a6 + 528);
      i = a6;
      if (v144)
      {
        v145 = *(_QWORD *)(v144 + 8);
        i = a6;
        if (v145)
        {
          v146 = *(_QWORD *)(v145 + 120);
          i = a6;
          if (v146)
          {
            v147 = *(_QWORD *)(v146 + 8);
            for (i = a6; v147; v147 = *(_QWORD *)(v150 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v147 + 40) + 8);
              v148 = *(_QWORD *)(i + 528);
              if (!v148)
                break;
              v149 = *(_QWORD *)(v148 + 8);
              if (!v149)
                break;
              v150 = *(_QWORD *)(v149 + 120);
              if (!v150)
                break;
            }
          }
        }
      }
    }
    else
    {
      v86 = *(_QWORD *)(a6 + 528);
      i = a6;
      if (v86)
      {
        v88 = *(_QWORD *)(v86 + 8);
        i = a6;
        if (v88)
        {
          v89 = *(_QWORD *)(*(_QWORD *)(v88 + 128) + 8);
          i = a6;
          if (v89)
          {
            i = a6;
            if (!*(_BYTE *)(v89 + 144))
            {
              v90 = *(_QWORD *)(v89 + 296);
              i = a6;
              if (v90)
                i = v90;
            }
          }
        }
      }
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v298, (const WTF::URL *)(i + 736));
    WebCore::NetworkStorageSession::subResourceDomainsInNeedOfStorageAccessForFirstParty((WebCore::NetworkStorageSession *)&v298, (uint64_t)&v296);
    if (!(_BYTE)v297
      || !v296
      || !*((_DWORD *)v296 - 3)
      || WebCore::Quirks::hasStorageAccessForAllLoginDomains((WTF ***)&v296, (uint64_t)&v298, v91))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
      v18 = 0;
      goto LABEL_161;
    }
    if ((_BYTE)v297)
      break;
    v256 = (WTF::StringImpl *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_664:
    WTF::StringImpl::destroy(v256, v255);
LABEL_603:
    v281 = v289[0];
    WebCore::LocalFrame::addUserScriptAwaitingNotification((uint64_t)v283, v289[0], (uint64_t)&unk_1ECE83950);
    if (*(_DWORD *)v281 == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(v281, v21);
      WTF::fastFree(v264, v265);
    }
    else
    {
      --*(_DWORD *)v281;
    }
    do
      v257 = __ldaxr(v80);
    while (__stlxr(v257 - 1, v80));
    LODWORD(v283) = 1;
    if (v257 == 1)
    {
      atomic_store(1u, v80);
      v258 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v258 = off_1E31FE290;
      *((_QWORD *)v258 + 1) = v80;
      v289[0] = v258;
      WTF::ensureOnMainThread();
      v259 = v289[0];
      v289[0] = 0;
      if (v259)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v259 + 8))(v259);
      LODWORD(v283) = 1;
    }
LABEL_523:
    if (*(_DWORD *)v282 == 1)
    {
      v260 = (uint64_t *)*((_QWORD *)v282 + 2);
      *((_QWORD *)v282 + 2) = 0;
      if (v260)
      {
        if (*v260)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v260, v21);
        WTF::fastFree((WTF *)v260, v21);
      }
      v261 = (unsigned int *)*((_QWORD *)v282 + 1);
      *((_QWORD *)v282 + 1) = 0;
      if (v261)
      {
        do
        {
          v262 = __ldaxr(v261);
          v263 = v262 - 1;
        }
        while (__stlxr(v263, v261));
        if (!v263)
        {
          atomic_store(1u, v261);
          WTF::fastFree((WTF *)v261, v21);
        }
      }
      WTF::fastFree(v282, v21);
    }
    else
    {
      --*(_DWORD *)v282;
    }
    v171 = DWORD2(v300);
LABEL_526:
    if (v171 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3401DB0[v171])(v289, &v299);
    if (*((_DWORD *)v42 + 6) == 1)
      (*(void (**)(WebCore::Document *))(*(_QWORD *)v42 + 72))(v42);
    else
      --*((_DWORD *)v42 + 6);
    if ((_DWORD)v283)
      goto LABEL_175;
  }
  v96 = (WTF **)v296;
  v97 = *((unsigned int *)v296 - 1);
  v98 = (WTF *)((char *)v296 + 8 * v97);
  if (!*((_DWORD *)v296 - 3))
  {
LABEL_204:
    v100 = *(WTF **)v98;
    goto LABEL_205;
  }
  if (!(_DWORD)v97)
  {
    v98 = v296;
    goto LABEL_204;
  }
  v99 = 8 * v97;
  while (1)
  {
    if ((WTF::equal(*v96, 0, v92) & 1) == 0)
    {
      v100 = *v96;
      if (*v96 != (WTF *)-1)
        break;
    }
    ++v96;
    v99 -= 8;
    if (!v99)
      goto LABEL_204;
  }
LABEL_205:
  if (v100)
  {
    v101 = *(_DWORD *)v100;
    *(_DWORD *)v100 += 2;
    v295 = v100;
    if ((_DWORD)a2)
      goto LABEL_207;
    *(_DWORD *)v100 = v101 + 4;
    v102 = *((_DWORD *)v100 + 1);
    if ((v102 & 0x80000000) == 0)
    {
LABEL_209:
      v103 = __OFADD__(v102, 1);
      v104 = v102 + 1;
      if (!v103 && !__OFADD__(v104, 53))
      {
        v105 = !v100 || (*((_BYTE *)v100 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v104 + 53), v105, (int8x16_t *)"requestStorageAccess is invoked on behalf of domain \"", 0x35u, (uint64_t)v100, (int8x16_t *)"\"", 1u, &v294);
        if (v294)
        {
          WebCore::Document::addConsoleMessage((_QWORD *)a6, 16, 4, &v294, 0);
          v107 = v294;
          v294 = 0;
          if (!v107)
            goto LABEL_219;
          if (*(_DWORD *)v107 == 2)
          {
            WTF::StringImpl::destroy(v107, v106);
            if (v100)
              goto LABEL_220;
          }
          else
          {
            *(_DWORD *)v107 -= 2;
LABEL_219:
            if (v100)
            {
LABEL_220:
              if (*(_DWORD *)v100 == 2)
                WTF::StringImpl::destroy(v100, v106);
              else
                *(_DWORD *)v100 -= 2;
            }
          }
          v108 = v298;
          if (v298)
            *(_DWORD *)v298 += 2;
          if (v100)
            *(_DWORD *)v100 += 2;
          v109 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v109 = &off_1E3401E00;
          *((_QWORD *)v109 + 1) = v108;
          *((_QWORD *)v109 + 2) = v100;
          *((_QWORD *)v109 + 3) = a3;
          v294 = v109;
          v111 = WebCore::DocumentStorageAccess::from((WebCore::DocumentStorageAccess *)a6, v110);
          v112 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v111 + 24) + 8) + 528);
          if (v112
            && (v113 = *(_QWORD *)(v112 + 8)) != 0
            && (v114 = *(_QWORD *)(v113 + 24)) != 0
            && *(_QWORD *)(v114 + 8)
            && *(unsigned __int8 *)(v111 + 32) < 2u)
          {
            WebCore::DocumentStorageAccess::requestStorageAccessQuirk(v111, (uint64_t)&v295, (uint64_t *)&v294);
            v109 = v294;
            if (!v294)
            {
LABEL_235:
              v100 = v295;
              goto LABEL_236;
            }
          }
          else
          {
            (*(void (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v109 + 16))(v109, 0);
          }
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v109 + 8))(v109);
          goto LABEL_235;
        }
LABEL_691:
        __break(0xC471u);
        JUMPOUT(0x19604E9A0);
      }
    }
    v294 = 0;
    goto LABEL_691;
  }
  v295 = 0;
  if ((a2 & 1) == 0)
  {
    v102 = 0;
    goto LABEL_209;
  }
LABEL_207:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
LABEL_236:
  v18 = a2 ^ 1;
  v295 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
      WTF::StringImpl::destroy(v100, v21);
    else
      *(_DWORD *)v100 -= 2;
  }
LABEL_161:
  if ((_BYTE)v297)
  {
    v93 = v296;
    if (v296)
    {
      v131 = *((unsigned int *)v296 - 1);
      if ((_DWORD)v131)
      {
        v132 = v296;
        do
        {
          v133 = *(WTF::StringImpl **)v132;
          if (*(_QWORD *)v132 != -1)
          {
            *(_QWORD *)v132 = 0;
            if (v133)
            {
              if (*(_DWORD *)v133 == 2)
                WTF::StringImpl::destroy(v133, v21);
              else
                *(_DWORD *)v133 -= 2;
            }
          }
          v132 = (WTF *)((char *)v132 + 8);
          --v131;
        }
        while (v131);
      }
      WTF::fastFree((WTF *)((char *)v93 - 16), v21);
    }
  }
  v94 = v298;
  v298 = 0;
  if (!v94)
  {
LABEL_166:
    if ((a2 & 1) != 0)
      goto LABEL_169;
    goto LABEL_167;
  }
  if (*(_DWORD *)v94 != 2)
  {
    *(_DWORD *)v94 -= 2;
    goto LABEL_166;
  }
  WTF::StringImpl::destroy(v94, v21);
  if ((a2 & 1) == 0)
  {
LABEL_167:
    if (*(_DWORD *)(a6 + 24) == 2)
    {
      if ((*(_WORD *)(a6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)a6, v21);
    }
    else
    {
      *(_DWORD *)(a6 + 24) -= 2;
    }
  }
LABEL_169:
  if (!a4)
    goto LABEL_172;
  if (*(_DWORD *)a4 == 2)
  {
    WTF::StringImpl::destroy(a4, v21);
    if (v11)
      goto LABEL_173;
  }
  else
  {
    *(_DWORD *)a4 -= 2;
LABEL_172:
    if (v11)
    {
LABEL_173:
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v21);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
LABEL_175:
  if (*((_DWORD *)v284 + 6) == 2)
  {
    if ((*((_WORD *)v284 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v284, v21);
  }
  else
  {
    *((_DWORD *)v284 + 6) -= 2;
  }
LABEL_322:
  v136 = v293;
  v293 = 0;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
      WTF::StringImpl::destroy(v136, v21);
    else
      *(_DWORD *)v136 -= 2;
  }
  return v18;
}

BOOL WebCore::Quirks::requiresUserGestureToPauseInPictureInPicture(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  const WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  const WTF::StringImpl *v32;
  char v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  const WTF::StringImpl *v42;
  __int16 v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (!*((_BYTE *)this + 36))
  {
    if (*(_BYTE *)(v1 + 3362) || *(_BYTE *)(v1 + 3405))
      goto LABEL_101;
    v5 = *(_QWORD *)(v1 + 528);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
        if (v7 && *(_BYTE *)(v7 + 144) == 0)
        {
          v9 = *(_QWORD *)(v7 + 296);
          if (v9)
            v1 = v9;
        }
      }
    }
    while (1)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v60, (const WTF::URL *)(v1 + 736));
      v11 = v60;
      if (v60)
      {
        v12 = *(_DWORD *)v60;
        *(_DWORD *)v60 += 2;
        v60 = 0;
        if (v12)
          *(_DWORD *)v11 = v12;
        else
          WTF::StringImpl::destroy(v11, v10);
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = v60;
      v14 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v14 = *(_QWORD *)(v14 + 8);
      if (*(_BYTE *)(v14 + 3362) || *(_BYTE *)(v14 + 3405))
      {
        while (1)
        {
          v48 = *(_QWORD *)(v14 + 528);
          if (!v48)
            break;
          v49 = *(_QWORD *)(v48 + 8);
          if (!v49)
            break;
          v50 = *(_QWORD *)(v49 + 120);
          if (!v50)
            break;
          v51 = *(_QWORD *)(v50 + 8);
          if (!v51)
            break;
          v14 = *(_QWORD *)(*(_QWORD *)(v51 + 40) + 8);
        }
      }
      else
      {
        v15 = *(_QWORD *)(v14 + 528);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 8);
          if (v16)
          {
            v17 = *(_QWORD *)(*(_QWORD *)(v16 + 128) + 8);
            if (v17 && *(_BYTE *)(v17 + 144) == 0)
            {
              v19 = *(_QWORD *)(v17 + 296);
              if (v19)
                v14 = v19;
            }
          }
        }
      }
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v60, (const WTF::URL *)(v14 + 736));
      v23 = WTF::equal(v60, v13, v20);
      v24 = v60;
      v60 = 0;
      if (!v24)
        goto LABEL_38;
      if (*(_DWORD *)v24 != 2)
        break;
      WTF::StringImpl::destroy(v24, v21);
      if (v23)
      {
LABEL_39:
        *(_WORD *)((char *)this + 35) = 257;
        goto LABEL_84;
      }
LABEL_42:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v25 = v60;
      v26 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v26 = *(_QWORD *)(v26 + 8);
      if (*(_BYTE *)(v26 + 3362) || *(_BYTE *)(v26 + 3405))
      {
        while (1)
        {
          v52 = *(_QWORD *)(v26 + 528);
          if (!v52)
            break;
          v53 = *(_QWORD *)(v52 + 8);
          if (!v53)
            break;
          v54 = *(_QWORD *)(v53 + 120);
          if (!v54)
            break;
          v55 = *(_QWORD *)(v54 + 8);
          if (!v55)
            break;
          v26 = *(_QWORD *)(*(_QWORD *)(v55 + 40) + 8);
        }
      }
      else
      {
        v27 = *(_QWORD *)(v26 + 528);
        if (v27)
        {
          v28 = *(_QWORD *)(v27 + 8);
          if (v28)
          {
            v29 = *(_QWORD *)(*(_QWORD *)(v28 + 128) + 8);
            if (v29 && *(_BYTE *)(v29 + 144) == 0)
            {
              v31 = *(_QWORD *)(v29 + 296);
              if (v31)
                v26 = v31;
            }
          }
        }
      }
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v60, (const WTF::URL *)(v26 + 736));
      v33 = WTF::equal(v60, v25, v32);
      v34 = v60;
      v60 = 0;
      if (!v34)
        goto LABEL_58;
      if (*(_DWORD *)v34 != 2)
      {
        *(_DWORD *)v34 -= 2;
LABEL_58:
        if ((v33 & 1) != 0)
          goto LABEL_59;
        goto LABEL_62;
      }
      WTF::StringImpl::destroy(v34, v21);
      if ((v33 & 1) != 0)
      {
LABEL_59:
        *(_WORD *)((char *)this + 35) = 257;
        if (!v25)
          goto LABEL_84;
        goto LABEL_82;
      }
LABEL_62:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v35 = v60;
      v36 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v36 = *(_QWORD *)(v36 + 8);
      if (*(_BYTE *)(v36 + 3362) || *(_BYTE *)(v36 + 3405))
      {
        while (1)
        {
          v56 = *(_QWORD *)(v36 + 528);
          if (!v56)
            break;
          v57 = *(_QWORD *)(v56 + 8);
          if (!v57)
            break;
          v58 = *(_QWORD *)(v57 + 120);
          if (!v58)
            break;
          v59 = *(_QWORD *)(v58 + 8);
          if (!v59)
            break;
          v36 = *(_QWORD *)(*(_QWORD *)(v59 + 40) + 8);
        }
      }
      else
      {
        v37 = *(_QWORD *)(v36 + 528);
        if (v37)
        {
          v38 = *(_QWORD *)(v37 + 8);
          if (v38)
          {
            v39 = *(_QWORD *)(*(_QWORD *)(v38 + 128) + 8);
            if (v39 && *(_BYTE *)(v39 + 144) == 0)
            {
              v41 = *(_QWORD *)(v39 + 296);
              if (v41)
                v36 = v41;
            }
          }
        }
      }
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v60, (const WTF::URL *)(v36 + 736));
      v43 = WTF::equal(v60, v35, v42);
      v44 = v60;
      v60 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v21);
        else
          *(_DWORD *)v44 -= 2;
      }
      *(_WORD *)((char *)this + 35) = v43 | 0x100;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::destroy(v35, v21);
          if (!v25)
            goto LABEL_84;
          goto LABEL_82;
        }
        *(_DWORD *)v35 -= 2;
      }
      if (!v25)
        goto LABEL_84;
LABEL_82:
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v21);
      else
        *(_DWORD *)v25 -= 2;
LABEL_84:
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::destroy(v13, v21);
          if (!v11)
            goto LABEL_90;
          goto LABEL_88;
        }
        *(_DWORD *)v13 -= 2;
      }
      if (!v11)
        goto LABEL_90;
LABEL_88:
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v21);
      else
        *(_DWORD *)v11 -= 2;
LABEL_90:
      if (*((_BYTE *)this + 36))
        return *((_BYTE *)this + 35) != 0;
      __break(1u);
      do
      {
        v1 = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8);
LABEL_101:
        v45 = *(_QWORD *)(v1 + 528);
        if (!v45)
          break;
        v46 = *(_QWORD *)(v45 + 8);
        if (!v46)
          break;
        v47 = *(_QWORD *)(v46 + 120);
        if (!v47)
          break;
        v22 = *(_QWORD *)(v47 + 8);
      }
      while (v22);
    }
    *(_DWORD *)v24 -= 2;
LABEL_38:
    if (v23)
      goto LABEL_39;
    goto LABEL_42;
  }
  return *((_BYTE *)this + 35) != 0;
}

BOOL WebCore::Quirks::requiresUserGestureToLoadInPictureInPicture(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  __int16 v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (!*((_BYTE *)this + 38))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v20;
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v6 = *(_QWORD *)(v6 + 8);
    if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
      goto LABEL_32;
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9 && *(_BYTE *)(v9 + 144) == 0)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
    while (1)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, (const WTF::URL *)(v6 + 736));
      v14 = WTF::equal(v20, v5, v12);
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      *(_WORD *)((char *)this + 37) = v14 | 0x100;
      if (!v5)
        break;
      if (*(_DWORD *)v5 != 2)
      {
        *(_DWORD *)v5 -= 2;
        return *((_BYTE *)this + 37) != 0;
      }
      WTF::StringImpl::destroy(v5, v13);
      if (*((_BYTE *)this + 38))
        return *((_BYTE *)this + 37) != 0;
      __break(1u);
      do
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8);
LABEL_32:
        v17 = *(_QWORD *)(v6 + 528);
        if (!v17)
          break;
        v18 = *(_QWORD *)(v17 + 8);
        if (!v18)
          break;
        v19 = *(_QWORD *)(v18 + 120);
        if (!v19)
          break;
        v16 = *(_QWORD *)(v19 + 8);
      }
      while (v16);
    }
  }
  return *((_BYTE *)this + 37) != 0;
}

BOOL WebCore::Quirks::blocksReturnToFullscreenFromPictureInPictureQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  __int16 v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (!*((_BYTE *)this + 44))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v20;
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v6 = *(_QWORD *)(v6 + 8);
    if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
      goto LABEL_32;
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9 && *(_BYTE *)(v9 + 144) == 0)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
    while (1)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, (const WTF::URL *)(v6 + 736));
      v14 = WTF::equal(v20, v5, v12);
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      *(_WORD *)((char *)this + 43) = v14 | 0x100;
      if (!v5)
        break;
      if (*(_DWORD *)v5 != 2)
      {
        *(_DWORD *)v5 -= 2;
        return *((_BYTE *)this + 43) != 0;
      }
      WTF::StringImpl::destroy(v5, v13);
      if (*((_BYTE *)this + 44))
        return *((_BYTE *)this + 43) != 0;
      __break(1u);
      do
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8);
LABEL_32:
        v17 = *(_QWORD *)(v6 + 528);
        if (!v17)
          break;
        v18 = *(_QWORD *)(v17 + 8);
        if (!v18)
          break;
        v19 = *(_QWORD *)(v18 + 120);
        if (!v19)
          break;
        v16 = *(_QWORD *)(v19 + 8);
      }
      while (v16);
    }
  }
  return *((_BYTE *)this + 43) != 0;
}

BOOL WebCore::Quirks::blocksEnteringStandardFullscreenFromPictureInPictureQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  __int16 v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (!*((_BYTE *)this + 46))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v20;
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v6 = *(_QWORD *)(v6 + 8);
    if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
      goto LABEL_32;
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9 && *(_BYTE *)(v9 + 144) == 0)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
    while (1)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, (const WTF::URL *)(v6 + 736));
      v14 = WTF::equal(v20, v5, v12);
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      *(_WORD *)((char *)this + 45) = v14 | 0x100;
      if (!v5)
        break;
      if (*(_DWORD *)v5 != 2)
      {
        *(_DWORD *)v5 -= 2;
        return *((_BYTE *)this + 45) != 0;
      }
      WTF::StringImpl::destroy(v5, v13);
      if (*((_BYTE *)this + 46))
        return *((_BYTE *)this + 45) != 0;
      __break(1u);
      do
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8);
LABEL_32:
        v17 = *(_QWORD *)(v6 + 528);
        if (!v17)
          break;
        v18 = *(_QWORD *)(v17 + 8);
        if (!v18)
          break;
        v19 = *(_QWORD *)(v18 + 120);
        if (!v19)
          break;
        v16 = *(_QWORD *)(v19 + 8);
      }
      while (v16);
    }
  }
  return *((_BYTE *)this + 45) != 0;
}

BOOL WebCore::Quirks::shouldDisableEndFullscreenEventWhenEnteringPictureInPictureFromFullscreenQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint16x8_t v20;
  __int16 v21;
  WTF::StringImpl *v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (*((_BYTE *)this + 48))
    return *((_BYTE *)this + 47) != 0;
  if (*(_BYTE *)(v1 + 3362) || *(_BYTE *)(v1 + 3405))
  {
    while (1)
    {
      v25 = *(_QWORD *)(v1 + 528);
      if (!v25)
        break;
      v26 = *(_QWORD *)(v25 + 8);
      if (!v26)
        break;
      v27 = *(_QWORD *)(v26 + 120);
      if (!v27)
        break;
      v28 = *(_QWORD *)(v27 + 8);
      if (!v28)
        break;
      v1 = *(_QWORD *)(*(_QWORD *)(v28 + 40) + 8);
    }
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 528);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
        if (v7 && *(_BYTE *)(v7 + 144) == 0)
        {
          v9 = *(_QWORD *)(v7 + 296);
          if (v9)
            v1 = v9;
        }
      }
    }
  }
  v10 = WTF::URL::host((WTF::URL *)(v1 + 736));
  v12 = v11;
  v13 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v13 = *(_QWORD *)(v13 + 8);
  if (*(_BYTE *)(v13 + 3362) || *(_BYTE *)(v13 + 3405))
  {
    while (1)
    {
      v29 = *(_QWORD *)(v13 + 528);
      if (!v29)
        break;
      v30 = *(_QWORD *)(v29 + 8);
      if (!v30)
        break;
      v31 = *(_QWORD *)(v30 + 120);
      if (!v31)
        break;
      v32 = *(_QWORD *)(v31 + 8);
      if (!v32)
        break;
      v13 = *(_QWORD *)(*(_QWORD *)(v32 + 40) + 8);
    }
  }
  else
  {
    v14 = *(_QWORD *)(v13 + 528);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v15 + 128) + 8);
        if (v16)
          v17 = *(_BYTE *)(v16 + 144) == 0;
        else
          v17 = 0;
        if (v17)
        {
          v18 = *(_QWORD *)(v16 + 296);
          if (v18)
            v13 = v18;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v33, (const WTF::URL *)(v13 + 736));
  if ((char *)v10 == "trailers.apple.com" || v12 != 18)
  {
    if ((char *)v10 == "trailers.apple.com" && v12 == 18)
      goto LABEL_42;
  }
  else
  {
    if ((v12 & 0xFF00000000) == 0)
      goto LABEL_50;
    if (*(_BYTE *)v10 == 116)
    {
      v20 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v10 + 2), (int8x16_t)xmmword_1969F5B00), vceqq_s8(*(int8x16_t *)(v10 + 1), (int8x16_t)xmmword_1969F5AF0));
      v20.i8[0] = vminvq_u8((uint8x16_t)v20);
      goto LABEL_37;
    }
  }
  while (1)
  {
    if ((MEMORY[0x19AEA53F4](v33, "espn.com", 8) & 1) != 0)
    {
LABEL_42:
      v21 = 1;
      goto LABEL_44;
    }
    v21 = MEMORY[0x19AEA53F4](v33, "vimeo.com", 9);
LABEL_44:
    *(_WORD *)((char *)this + 47) = v21 | 0x100;
    v22 = v33;
    v33 = 0;
    if (!v22)
      return *((_BYTE *)this + 47) != 0;
    if (*(_DWORD *)v22 != 2)
      break;
    WTF::StringImpl::destroy(v22, v19);
    if (*((_BYTE *)this + 48))
      return *((_BYTE *)this + 47) != 0;
    __break(1u);
LABEL_50:
    if (*(_WORD *)v10 == 116)
    {
      v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v10 + 2), (int16x8_t)xmmword_1969F5B10);
      v23.i16[0] = vminvq_u16(v23);
      if (v23.i32[0])
      {
        v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v10 + 4), (int16x8_t)xmmword_1969F5B20);
        v24.i16[0] = vminvq_u16(v24);
        if (v24.i32[0])
        {
          v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v10 + 20), (int16x8_t)xmmword_1968DDA70);
          v20.i16[0] = vminvq_u16(v20);
LABEL_37:
          if (v20.i32[0])
            goto LABEL_42;
        }
      }
    }
  }
  *(_DWORD *)v22 -= 2;
  return *((_BYTE *)this + 47) != 0;
}

BOOL WebCore::Quirks::shouldDelayFullscreenEventWhenExitingPictureInPictureQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  __int16 v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (!*((_BYTE *)this + 50))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v20;
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v6 = *(_QWORD *)(v6 + 8);
    if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
      goto LABEL_32;
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9 && *(_BYTE *)(v9 + 144) == 0)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
    while (1)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, (const WTF::URL *)(v6 + 736));
      v14 = WTF::equal(v20, v5, v12);
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      *(_WORD *)((char *)this + 49) = v14 | 0x100;
      if (!v5)
        break;
      if (*(_DWORD *)v5 != 2)
      {
        *(_DWORD *)v5 -= 2;
        return *((_BYTE *)this + 49) != 0;
      }
      WTF::StringImpl::destroy(v5, v13);
      if (*((_BYTE *)this + 50))
        return *((_BYTE *)this + 49) != 0;
      __break(1u);
      do
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8);
LABEL_32:
        v17 = *(_QWORD *)(v6 + 528);
        if (!v17)
          break;
        v18 = *(_QWORD *)(v17 + 8);
        if (!v18)
          break;
        v19 = *(_QWORD *)(v18 + 120);
        if (!v19)
          break;
        v16 = *(_QWORD *)(v19 + 8);
      }
      while (v16);
    }
  }
  return *((_BYTE *)this + 49) != 0;
}

uint64_t WebCore::Quirks::shouldAllowNavigationToCustomProtocolWithoutUserGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  WebCore::Quirks *v11;
  char v12;
  char *v13;

  if ((char *)a1 == "msteams" || a2 != 7)
  {
    result = 0;
    if ((char *)a1 != "msteams" || a2 != 7)
      return result;
    goto LABEL_13;
  }
  if ((a2 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)a1 == 109)
    {
      result = 0;
      if (*(_QWORD *)(a1 + 2) != 0x61006500740073 || *(_QWORD *)(a1 + 6) != 0x73006D00610065)
        return result;
      goto LABEL_13;
    }
    return 0;
  }
  if (*(_BYTE *)a1 != 109 || *(_DWORD *)(a1 + 1) != 1634038899 || *(_DWORD *)(a1 + 3) != 1936548197)
    return 0;
LABEL_13:
  v7 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_23;
  v13 = &v12;
  v8 = (_QWORD *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v7])(&v13, a3);
  if ((MEMORY[0x19AEA53F4](*v8, "teams.live.com", 14) & 1) != 0)
    return 1;
  v9 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v9 == -1)
  {
LABEL_23:
    v11 = (WebCore::Quirks *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::Quirks::allowLayeredFullscreenVideos(v11);
  }
  else
  {
    v13 = &v12;
    v10 = (_QWORD *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v9])(&v13, a3);
    return MEMORY[0x19AEA53F4](*v10, "teams.microsoft.com", 19);
  }
}

BOOL WebCore::Quirks::allowLayeredFullscreenVideos(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (!*((_BYTE *)this + 52))
  {
    if (*(_BYTE *)(v1 + 3362) || *(_BYTE *)(v1 + 3405))
      goto LABEL_26;
    v5 = *(_QWORD *)(v1 + 528);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
        if (v7)
          v8 = *(_BYTE *)(v7 + 144) == 0;
        else
          v8 = 0;
        if (v8)
        {
          v9 = *(_QWORD *)(v7 + 296);
          if (v9)
            v1 = v9;
        }
      }
    }
    while (1)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v16, (const WTF::URL *)(v1 + 736));
      *(_WORD *)((char *)this + 51) = MEMORY[0x19AEA53F4](v16, "espn.com", 8) | 0x100;
      v11 = v16;
      v16 = 0;
      if (!v11)
        break;
      if (*(_DWORD *)v11 != 2)
      {
        *(_DWORD *)v11 -= 2;
        return *((_BYTE *)this + 51) != 0;
      }
      WTF::StringImpl::destroy(v11, v10);
      if (*((_BYTE *)this + 52))
        return *((_BYTE *)this + 51) != 0;
      __break(1u);
      do
      {
        v1 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
LABEL_26:
        v13 = *(_QWORD *)(v1 + 528);
        if (!v13)
          break;
        v14 = *(_QWORD *)(v13 + 8);
        if (!v14)
          break;
        v15 = *(_QWORD *)(v14 + 120);
        if (!v15)
          break;
        v12 = *(_QWORD *)(v15 + 8);
      }
      while (v12);
    }
  }
  return *((_BYTE *)this + 51) != 0;
}

BOOL WebCore::Quirks::needsVideoShouldMaintainAspectRatioQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (*((_BYTE *)this + 58))
    return *((_BYTE *)this + 57) != 0;
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v10, (const WTF::URL *)(v1 + 736));
  v6 = v10;
  if (v10)
  {
    v7 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 2;
    v10 = 0;
    if (v7)
      *(_DWORD *)v6 = v7;
    else
      WTF::StringImpl::destroy(v6, v5);
  }
  v4 = MEMORY[0x19AEA53F4](v6, "hulu.com", 8);
  *(_WORD *)((char *)this + 57) = v4 | 0x100;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v8);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

BOOL WebCore::Quirks::shouldExposeShowModalDialog(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  const WTF::StringImpl *v22;
  char v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  const WTF::StringImpl *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (*(_BYTE *)(v3 + 242))
      goto LABEL_5;
    return 0;
  }
  if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
    return 0;
LABEL_5:
  if (!*((_BYTE *)this + 60))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v45;
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v6 = *(_QWORD *)(v6 + 8);
    if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
    {
      while (1)
      {
        v33 = *(_QWORD *)(v6 + 528);
        if (!v33)
          break;
        v34 = *(_QWORD *)(v33 + 8);
        if (!v34)
          break;
        v35 = *(_QWORD *)(v34 + 120);
        if (!v35)
          break;
        v36 = *(_QWORD *)(v35 + 8);
        if (!v36)
          break;
        v6 = *(_QWORD *)(*(_QWORD *)(v36 + 40) + 8);
      }
    }
    else
    {
      v7 = *(_QWORD *)(v6 + 528);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
          if (v9 && *(_BYTE *)(v9 + 144) == 0)
          {
            v11 = *(_QWORD *)(v9 + 296);
            if (v11)
              v6 = v11;
          }
        }
      }
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v45, (const WTF::URL *)(v6 + 736));
    LODWORD(v14) = WTF::equal(v45, v5, v12);
    v15 = v45;
    v45 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        goto LABEL_68;
      *(_DWORD *)v15 -= 2;
    }
    while (1)
    {
      if ((_DWORD)v14)
      {
        *(_WORD *)((char *)this + 59) = 257;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v45;
        v16 = *(_QWORD *)this;
        if (*(_QWORD *)this)
          v16 = *(_QWORD *)(v16 + 8);
        if (*(_BYTE *)(v16 + 3362) || *(_BYTE *)(v16 + 3405))
        {
          while (1)
          {
            v37 = *(_QWORD *)(v16 + 528);
            if (!v37)
              break;
            v38 = *(_QWORD *)(v37 + 8);
            if (!v38)
              break;
            v39 = *(_QWORD *)(v38 + 120);
            if (!v39)
              break;
            v40 = *(_QWORD *)(v39 + 8);
            if (!v40)
              break;
            v16 = *(_QWORD *)(*(_QWORD *)(v40 + 40) + 8);
          }
        }
        else
        {
          v17 = *(_QWORD *)(v16 + 528);
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 8);
            if (v18)
            {
              v19 = *(_QWORD *)(*(_QWORD *)(v18 + 128) + 8);
              if (v19 && *(_BYTE *)(v19 + 144) == 0)
              {
                v21 = *(_QWORD *)(v19 + 296);
                if (v21)
                  v16 = v21;
              }
            }
          }
        }
        WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v45, (const WTF::URL *)(v16 + 736));
        v23 = WTF::equal(v45, v14, v22);
        v15 = v45;
        v45 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            v15 = (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v13);
          else
            *(_DWORD *)v15 -= 2;
        }
        if ((v23 & 1) != 0)
        {
          *(_WORD *)((char *)this + 59) = 257;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v24 = v45;
          v25 = *(_QWORD *)this;
          if (*(_QWORD *)this)
            v25 = *(_QWORD *)(v25 + 8);
          if (*(_BYTE *)(v25 + 3362) || *(_BYTE *)(v25 + 3405))
          {
            while (1)
            {
              v41 = *(_QWORD *)(v25 + 528);
              if (!v41)
                break;
              v42 = *(_QWORD *)(v41 + 8);
              if (!v42)
                break;
              v43 = *(_QWORD *)(v42 + 120);
              if (!v43)
                break;
              v44 = *(_QWORD *)(v43 + 8);
              if (!v44)
                break;
              v25 = *(_QWORD *)(*(_QWORD *)(v44 + 40) + 8);
            }
          }
          else
          {
            v26 = *(_QWORD *)(v25 + 528);
            if (v26)
            {
              v27 = *(_QWORD *)(v26 + 8);
              if (v27)
              {
                v28 = *(_QWORD *)(*(_QWORD *)(v27 + 128) + 8);
                if (v28 && *(_BYTE *)(v28 + 144) == 0)
                {
                  v30 = *(_QWORD *)(v28 + 296);
                  if (v30)
                    v25 = v30;
                }
              }
            }
          }
          WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v45, (const WTF::URL *)(v25 + 736));
          v32 = WTF::equal(v45, v24, v31);
          v15 = v45;
          v45 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              v15 = (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v13);
            else
              *(_DWORD *)v15 -= 2;
          }
          *(_WORD *)((char *)this + 59) = v32 | 0x100;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              v15 = (WTF::StringImpl *)WTF::StringImpl::destroy(v24, v13);
            else
              *(_DWORD *)v24 -= 2;
          }
        }
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            v15 = (WTF::StringImpl *)WTF::StringImpl::destroy(v14, v13);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          v15 = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v13);
        else
          *(_DWORD *)v5 -= 2;
      }
      if (*((_BYTE *)this + 60))
        break;
      __break(1u);
LABEL_68:
      v15 = (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v13);
    }
  }
  return *((_BYTE *)this + 59) != 0;
}

BOOL WebCore::Quirks::shouldNavigatorPluginsBeEmpty(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  __int16 v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (!*((_BYTE *)this + 62))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v20;
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v6 = *(_QWORD *)(v6 + 8);
    if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
      goto LABEL_32;
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9 && *(_BYTE *)(v9 + 144) == 0)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
    while (1)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, (const WTF::URL *)(v6 + 736));
      v14 = WTF::equal(v20, v5, v12);
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      *(_WORD *)((char *)this + 61) = v14 | 0x100;
      if (!v5)
        break;
      if (*(_DWORD *)v5 != 2)
      {
        *(_DWORD *)v5 -= 2;
        return *((_BYTE *)this + 61) != 0;
      }
      WTF::StringImpl::destroy(v5, v13);
      if (*((_BYTE *)this + 62))
        return *((_BYTE *)this + 61) != 0;
      __break(1u);
      do
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8);
LABEL_32:
        v17 = *(_QWORD *)(v6 + 528);
        if (!v17)
          break;
        v18 = *(_QWORD *)(v17 + 8);
        if (!v18)
          break;
        v19 = *(_QWORD *)(v18 + 120);
        if (!v19)
          break;
        v16 = *(_QWORD *)(v19 + 8);
      }
      while (v16);
    }
  }
  return *((_BYTE *)this + 61) != 0;
}

uint64_t *WebCore::Quirks::advancedPrivacyProtectionSubstituteDataURLForScriptWithFeatures@<X0>(uint64_t *this@<X0>, const WTF::String *a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t *v6;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _DWORD *v16;
  BOOL v17;
  BOOL v18;
  _QWORD v19[7];
  uint64_t v20;
  WTF *v21;

  if (!*this)
    goto LABEL_38;
  v6 = this;
  this = *(uint64_t **)(*this + 8);
  if (!this)
    goto LABEL_38;
  v10 = this[85];
  if (*(_BYTE *)(v10 + 243))
  {
    if (!*(_BYTE *)(v10 + 242))
      goto LABEL_38;
  }
  else if ((*(_QWORD *)(v10 + 688) & 0x80000) == 0)
  {
    goto LABEL_38;
  }
  if ((*(_QWORD *)(v10 + 664) & 0x800000000000) != 0)
  {
    this = (uint64_t *)WebCore::Document::noiseInjectionHashSalt((WebCore::Document *)this);
    if (v11)
    {
      this = (uint64_t *)MEMORY[0x19AEA53F4](*(_QWORD *)a2, "<@nv45. F1n63r,Pr1n71n6!", 24);
      if (a4 == 60 && a3 == 280 && (_DWORD)this)
      {
        v12 = *v6;
        if (*v6)
          v12 = *(_QWORD *)(v12 + 8);
        this = (uint64_t *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v12 + 192));
        if (this)
        {
          v13 = *v6;
          if (*v6)
            v13 = *(_QWORD *)(v13 + 8);
          this = (uint64_t *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v13 + 192));
          if (*(_QWORD *)(this[7] + 40))
          {
            MEMORY[0x19AEA32D0](v19);
            while (1)
            {
              if (!v19[2])
              {
                v18 = 0;
                goto LABEL_32;
              }
              if ((JSC::StackVisitor::Frame::isImplementationVisibilityPrivate((JSC::StackVisitor::Frame *)v19) & 1) == 0)
              {
                if (v20)
                {
                  v15 = *(_QWORD *)(v20 + 64);
                  if (v15)
                  {
                    v16 = *(_DWORD **)(v15 + 40);
                    if (v16)
                      break;
                  }
                }
              }
              JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v19);
            }
            ++v16[2];
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 24))(v16);
            v17 = (_DWORD)v14 == 212053 || (_DWORD)v14 == 219192;
            v18 = v17;
            if (v16[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
            else
              --v16[2];
LABEL_32:
            this = (uint64_t *)v21;
            v21 = 0;
            if (this)
              this = (uint64_t *)WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref((uint64_t)this, v14);
            if (v18)
              return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
          }
        }
      }
    }
  }
LABEL_38:
  *a5 = 0;
  return this;
}

uint64_t WebCore::Quirks::needsResettingTransitionCancelsRunningTransitionQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v2 + 243))
  {
    if (!*(_BYTE *)(v2 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v2 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  v3 = WTF::linkedOnOrAfterSDKWithBehavior();
  if ((v3 & 1) != 0)
    return 0;
  return WebCore::IOSApplication::isDOFUSTouch((WebCore::IOSApplication *)v3);
}

BOOL WebCore::Quirks::shouldStarBePermissionsPolicyDefaultValue(WebCore::Quirks *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(v2 + 680);
  if (*(_BYTE *)(v4 + 243))
    goto LABEL_12;
  if ((*(_QWORD *)(v4 + 688) & 0x80000) == 0)
    return 0;
  while (!*((_BYTE *)this + 68))
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v2 + 192), a2);
    v7 = *(WTF::StringImpl **)(v6 + 40);
    if (!v7)
    {
      *(_WORD *)((char *)this + 67) = MEMORY[0x19AEA53F4](0, "jsfiddle.net", 12) | 0x100;
      return *((_BYTE *)this + 67) != 0;
    }
    *(_DWORD *)v7 += 2;
    *(_WORD *)((char *)this + 67) = MEMORY[0x19AEA53F4](v7, "jsfiddle.net", 12) | 0x100;
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
      return *((_BYTE *)this + 67) != 0;
    }
    WTF::StringImpl::destroy(v7, v8);
    v2 = *((unsigned __int8 *)this + 68);
    if (*((_BYTE *)this + 68))
      return *((_BYTE *)this + 67) != 0;
    __break(1u);
LABEL_12:
    if (!*(_BYTE *)(v4 + 242))
      return 0;
  }
  return *((_BYTE *)this + 67) != 0;
}

BOOL WebCore::Quirks::needsDisableDOMPasteAccessQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t hasProperty;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v13;
  void *v14;
  _QWORD v15[2];

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (*((_BYTE *)this + 72))
    return *((_BYTE *)this + 71) != 0;
  v5 = WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v1 + 192));
  hasProperty = v5;
  if (v5)
  {
    v6 = *(unsigned int **)(v5 + 56);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    MEMORY[0x19AEA3294](v15, v6);
    WTF::AtomStringImpl::addLiteral();
    v8 = (WTF::StringImpl *)v15[1];
    hasProperty = JSC::JSObject::hasProperty();
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v9);
      else
        *(_DWORD *)v8 -= 2;
    }
    MEMORY[0x19AEA32A0](v15);
    do
    {
      v10 = __ldaxr(v6);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v6));
    if (!v11)
    {
      atomic_store(1u, v6);
      v13 = (WTF *)MEMORY[0x19AEA3AF8](v6);
      WTF::fastFree(v13, v14);
    }
  }
  *(_WORD *)((char *)this + 71) = hasProperty | 0x100;
  return hasProperty;
}

uint64_t WebCore::Quirks::needsIPadMiniUserAgent(WebCore::Quirks *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint16x8_t v5;
  uint16x8_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint64_t v12;
  uint64_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  BOOL v16;
  _BOOL4 v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  const char *v47;
  uint64_t v48;

  v2 = WTF::URL::host(this);
  v47 = (const char *)v2;
  v48 = v3;
  if ((char *)v2 != "tv.kakao.com" && v3 == 12)
  {
    if ((v3 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v2 == 116
        && *(_QWORD *)(v2 + 1) == 0x2E6F616B616B2E76
        && *(_QWORD *)(v2 + 4) == 0x6D6F632E6F616B61)
      {
        return 1;
      }
    }
    else if (*(_WORD *)v2 == 116)
    {
      v5 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1969F5CB0);
      v5.i16[0] = vminvq_u16(v5);
      if (v5.i32[0])
      {
        v6 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 8), (int16x8_t)xmmword_1969F5CC0);
        v6.i16[0] = vminvq_u16(v6);
        if (v6.i32[0])
          return 1;
      }
    }
  }
  else if ((char *)v2 == "tv.kakao.com" && v3 == 12)
  {
    return 1;
  }
  if ((WTF::StringView::endsWith() & 1) != 0)
    return 1;
  if (v47 == "tving.com" || v48 != 9)
  {
    if (v47 == "tving.com" && v48 == 9)
      return 1;
  }
  else if ((v48 & 0xFF00000000) != 0)
  {
    if (*v47 == 116 && *(_DWORD *)(v47 + 1) == 1735289206 && *(_DWORD *)(v47 + 5) == 1836016430)
      return 1;
  }
  else if (*(_WORD *)v47 == 116)
  {
    v7 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5CD0);
    v7.i16[0] = vminvq_u16(v7);
    if (v7.i32[0])
      return 1;
  }
  if ((WTF::StringView::endsWith() & 1) != 0)
    return 1;
  if (v47 == "live.iqiyi.com" || v48 != 14)
  {
    if (v47 == "live.iqiyi.com" && v48 == 14)
      return 1;
  }
  else if ((v48 & 0xFF00000000) != 0)
  {
    if (*v47 == 108 && *(_QWORD *)(v47 + 1) == 0x796971692E657669 && *(_QWORD *)(v47 + 6) == 0x6D6F632E69796971)
      return 1;
  }
  else if (*(_WORD *)v47 == 108)
  {
    v8 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5CE0);
    v8.i16[0] = vminvq_u16(v8);
    if (v8.i32[0])
    {
      v9 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 12), (int16x8_t)xmmword_1969F5CF0);
      v9.i16[0] = vminvq_u16(v9);
      if (v9.i32[0])
        return 1;
    }
  }
  if ((WTF::StringView::endsWith() & 1) != 0)
    return 1;
  if (v47 == "jsfiddle.net" || v48 != 12)
  {
    if (v47 == "jsfiddle.net" && v48 == 12)
      return 1;
  }
  else if ((v48 & 0xFF00000000) != 0)
  {
    if (*v47 == 106 && *(_QWORD *)(v47 + 1) == 0x2E656C6464696673 && *(_QWORD *)(v47 + 4) == 0x74656E2E656C6464)
      return 1;
  }
  else if (*(_WORD *)v47 == 106)
  {
    v10 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5D00);
    v10.i16[0] = vminvq_u16(v10);
    if (v10.i32[0])
    {
      v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 8), (int16x8_t)xmmword_1969F5D10);
      v11.i16[0] = vminvq_u16(v11);
      if (v11.i32[0])
        return 1;
    }
  }
  if ((WTF::StringView::endsWith() & 1) != 0)
    return 1;
  if (v47 == "video.sina.com.cn" || v48 != 17)
  {
    if (v47 == "video.sina.com.cn" && v48 == 17)
      return 1;
  }
  else if ((v48 & 0xFF00000000) != 0)
  {
    if (*v47 == 118 && *(_QWORD *)(v47 + 1) == 0x6E69732E6F656469 && *(_QWORD *)(v47 + 9) == 0x6E632E6D6F632E61)
      return 1;
  }
  else if (*(_WORD *)v47 == 118)
  {
    v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5D20);
    v14.i16[0] = vminvq_u16(v14);
    if (v14.i32[0])
    {
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 18), (int16x8_t)xmmword_1969F5D30);
      v15.i16[0] = vminvq_u16(v15);
      if (v15.i32[0])
        return 1;
    }
  }
  if ((WTF::StringView::endsWith() & 1) != 0)
    return 1;
  if (v47 == "huya.com" || v48 != 8)
  {
    if (v47 == "huya.com" && v48 == 8)
      return 1;
  }
  else if ((v48 & 0xFF00000000) != 0)
  {
    if (*v47 == 104 && *(_DWORD *)(v47 + 1) == 778140021 && *((_DWORD *)v47 + 1) == 1836016430)
      return 1;
  }
  else if (*(_WORD *)v47 == 104
         && *(_QWORD *)(v47 + 2) == 0x2E006100790075
         && *((_QWORD *)v47 + 1) == 0x6D006F0063002ELL)
  {
    return 1;
  }
  if ((WTF::StringView::endsWith() & 1) != 0)
    return 1;
  if (v47 == "video.tudou.com" || v48 != 15)
  {
    if (v47 == "video.tudou.com" && v48 == 15)
      return 1;
  }
  else if ((v48 & 0xFF00000000) != 0)
  {
    if (*v47 == 118 && *(_QWORD *)(v47 + 1) == 0x6475742E6F656469 && *(_QWORD *)(v47 + 7) == 0x6D6F632E756F6475)
      return 1;
  }
  else if (*(_WORD *)v47 == 118)
  {
    v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5D40);
    v18.i16[0] = vminvq_u16(v18);
    if (v18.i32[0])
    {
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 14), (int16x8_t)xmmword_1969F5D50);
      v19.i16[0] = vminvq_u16(v19);
      if (v19.i32[0])
        return 1;
    }
  }
  if ((WTF::StringView::endsWith() & 1) != 0)
    return 1;
  if (v47 == "cctv.com" || v48 != 8)
  {
    if (v47 == "cctv.com" && v48 == 8)
      return 1;
  }
  else if ((v48 & 0xFF00000000) != 0)
  {
    if (*v47 == 99 && *(_DWORD *)(v47 + 1) == 779514979 && *((_DWORD *)v47 + 1) == 1836016430)
      return 1;
  }
  else if (*(_WORD *)v47 == 99
         && *(_QWORD *)(v47 + 2) == 0x2E007600740063
         && *((_QWORD *)v47 + 1) == 0x6D006F0063002ELL)
  {
    return 1;
  }
  if ((WTF::StringView::endsWith() & 1) != 0)
    return 1;
  if (v47 == "v.china.com.cn" || (_DWORD)v48 != 14)
  {
    if (v47 == "v.china.com.cn" && (_DWORD)v48 == 14)
      return 1;
    v16 = (_DWORD)v48 == 10;
    v17 = v47 == "trello.com";
    if (v47 != "trello.com" && (_DWORD)v48 == 10)
    {
      if ((v48 & 0xFF00000000) == 0)
      {
        if (*(_WORD *)v47 == 116)
        {
          v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5D70);
          v23.i16[0] = vminvq_u16(v23);
          if (v23.i32[0])
          {
            v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 4), (int16x8_t)xmmword_1969F5D80);
            v24.i16[0] = vminvq_u16(v24);
            if (v24.i32[0])
              return 1;
          }
        }
        goto LABEL_118;
      }
      if (*v47 != 116 || *(_QWORD *)(v47 + 1) != 0x6F632E6F6C6C6572)
        goto LABEL_118;
      v12 = *(_QWORD *)(v47 + 2);
      v13 = 0x6D6F632E6F6C6C65;
      goto LABEL_117;
    }
LABEL_163:
    if (v17 && v16)
      return 1;
    goto LABEL_118;
  }
  if ((v48 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)v47 != 118)
      goto LABEL_118;
    v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5D60);
    v21.i16[0] = vminvq_u16(v21);
    if (!v21.i32[0])
      goto LABEL_118;
    v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 12), (int16x8_t)xmmword_1969F5D30);
    v22.i16[0] = vminvq_u16(v22);
    if (v22.i32[0])
      return 1;
    v16 = 0;
    v17 = v47 == "trello.com";
    goto LABEL_163;
  }
  if (*v47 != 118 || *(_QWORD *)(v47 + 1) != 0x632E616E6968632ELL)
    goto LABEL_118;
  v12 = *(_QWORD *)(v47 + 6);
  v13 = 0x6E632E6D6F632E61;
LABEL_117:
  if (v12 == v13)
    return 1;
LABEL_118:
  if ((WTF::StringView::endsWith() & 1) != 0)
    return 1;
  if (v47 == "ted.com" || v48 != 7)
  {
    if (v47 == "ted.com" && v48 == 7)
      return 1;
  }
  else if ((v48 & 0xFF00000000) != 0)
  {
    if (*v47 == 116 && *(_DWORD *)(v47 + 1) == 1663984741 && *(_DWORD *)(v47 + 3) == 1836016430)
      return 1;
  }
  else if (*(_WORD *)v47 == 116
         && *(_QWORD *)(v47 + 2) == 0x63002E00640065
         && *(_QWORD *)(v47 + 6) == 0x6D006F0063002ELL)
  {
    return 1;
  }
  if ((WTF::StringView::endsWith() & 1) != 0)
    return 1;
  if (WTF::StringView::find() != -1)
  {
    if (v47 == "hsbc.com.au" || v48 != 11)
    {
      if (v47 == "hsbc.com.au" && v48 == 11)
        return 1;
    }
    else if ((v48 & 0xFF00000000) != 0)
    {
      if (*v47 == 104 && *(_QWORD *)(v47 + 1) == 0x2E6D6F632E636273 && *(_QWORD *)(v47 + 3) == 0x75612E6D6F632E63)
        return 1;
    }
    else if (*(_WORD *)v47 == 104)
    {
      v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5D90);
      v25.i16[0] = vminvq_u16(v25);
      if (v25.i32[0])
      {
        v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 6), (int16x8_t)xmmword_1969F5DA0);
        v26.i16[0] = vminvq_u16(v26);
        if (v26.i32[0])
          return 1;
      }
    }
    if ((WTF::StringView::endsWith() & 1) != 0)
      return 1;
    if (v47 == "hsbc.com.eg" || v48 != 11)
    {
      if (v47 == "hsbc.com.eg" && v48 == 11)
        return 1;
    }
    else if ((v48 & 0xFF00000000) != 0)
    {
      if (*v47 == 104 && *(_QWORD *)(v47 + 1) == 0x2E6D6F632E636273 && *(_QWORD *)(v47 + 3) == 0x67652E6D6F632E63)
        return 1;
    }
    else if (*(_WORD *)v47 == 104)
    {
      v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5D90);
      v27.i16[0] = vminvq_u16(v27);
      if (v27.i32[0])
      {
        v28 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 6), (int16x8_t)xmmword_1969F5DB0);
        v28.i16[0] = vminvq_u16(v28);
        if (v28.i32[0])
          return 1;
      }
    }
    if ((WTF::StringView::endsWith() & 1) != 0)
      return 1;
    if (v47 == "hsbc.lk" || v48 != 7)
    {
      if (v47 == "hsbc.lk" && v48 == 7)
        return 1;
    }
    else if ((v48 & 0xFF00000000) != 0)
    {
      if (*v47 == 104 && *(_DWORD *)(v47 + 1) == 778265203 && *(_DWORD *)(v47 + 3) == 1802251875)
        return 1;
    }
    else if (*(_WORD *)v47 == 104
           && *(_QWORD *)(v47 + 2) == 0x2E006300620073
           && *(_QWORD *)(v47 + 6) == 0x6B006C002E0063)
    {
      return 1;
    }
    if ((WTF::StringView::endsWith() & 1) != 0)
      return 1;
    if (v47 == "hsbc.co.uk" || v48 != 10)
    {
      if (v47 == "hsbc.co.uk" && v48 == 10)
        return 1;
    }
    else if ((v48 & 0xFF00000000) != 0)
    {
      if (*v47 == 104 && *(_QWORD *)(v47 + 1) == 0x752E6F632E636273 && *(_QWORD *)(v47 + 2) == 0x6B752E6F632E6362)
        return 1;
    }
    else if (*(_WORD *)v47 == 104)
    {
      v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5DC0);
      v29.i16[0] = vminvq_u16(v29);
      if (v29.i32[0])
      {
        v30 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 4), (int16x8_t)xmmword_1969F5DD0);
        v30.i16[0] = vminvq_u16(v30);
        if (v30.i32[0])
          return 1;
      }
    }
    if ((WTF::StringView::endsWith() & 1) != 0)
      return 1;
    if (v47 == "hsbc.com.hk" || v48 != 11)
    {
      if (v47 == "hsbc.com.hk" && v48 == 11)
        return 1;
    }
    else if ((v48 & 0xFF00000000) != 0)
    {
      if (*v47 == 104 && *(_QWORD *)(v47 + 1) == 0x2E6D6F632E636273 && *(_QWORD *)(v47 + 3) == 0x6B682E6D6F632E63)
        return 1;
    }
    else if (*(_WORD *)v47 == 104)
    {
      v31 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5D90);
      v31.i16[0] = vminvq_u16(v31);
      if (v31.i32[0])
      {
        v32 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 6), (int16x8_t)xmmword_1969F5DE0);
        v32.i16[0] = vminvq_u16(v32);
        if (v32.i32[0])
          return 1;
      }
    }
    if ((WTF::StringView::endsWith() & 1) != 0)
      return 1;
    if (v47 == "hsbc.com.mx" || v48 != 11)
    {
      if (v47 == "hsbc.com.mx" && v48 == 11)
        return 1;
    }
    else if ((v48 & 0xFF00000000) != 0)
    {
      if (*v47 == 104 && *(_QWORD *)(v47 + 1) == 0x2E6D6F632E636273 && *(_QWORD *)(v47 + 3) == 0x786D2E6D6F632E63)
        return 1;
    }
    else if (*(_WORD *)v47 == 104)
    {
      v33 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5D90);
      v33.i16[0] = vminvq_u16(v33);
      if (v33.i32[0])
      {
        v34 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 6), (int16x8_t)xmmword_1969F5DF0);
        v34.i16[0] = vminvq_u16(v34);
        if (v34.i32[0])
          return 1;
      }
    }
    if ((WTF::StringView::endsWith() & 1) != 0)
      return 1;
    if (v47 == "hsbc.ca" || v48 != 7)
    {
      if (v47 == "hsbc.ca" && v48 == 7)
        return 1;
    }
    else if ((v48 & 0xFF00000000) != 0)
    {
      if (*v47 == 104 && *(_DWORD *)(v47 + 1) == 778265203 && *(_DWORD *)(v47 + 3) == 1633889891)
        return 1;
    }
    else if (*(_WORD *)v47 == 104
           && *(_QWORD *)(v47 + 2) == 0x2E006300620073
           && *(_QWORD *)(v47 + 6) == 0x610063002E0063)
    {
      return 1;
    }
    if ((WTF::StringView::endsWith() & 1) != 0)
      return 1;
    if (v47 == "hsbc.com.ar" || v48 != 11)
    {
      if (v47 == "hsbc.com.ar" && v48 == 11)
        return 1;
    }
    else if ((v48 & 0xFF00000000) != 0)
    {
      if (*v47 == 104 && *(_QWORD *)(v47 + 1) == 0x2E6D6F632E636273 && *(_QWORD *)(v47 + 3) == 0x72612E6D6F632E63)
        return 1;
    }
    else if (*(_WORD *)v47 == 104)
    {
      v41 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5D90);
      v41.i16[0] = vminvq_u16(v41);
      if (v41.i32[0])
      {
        v42 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 6), (int16x8_t)xmmword_1969F5E00);
        v42.i16[0] = vminvq_u16(v42);
        if (v42.i32[0])
          return 1;
      }
    }
    if ((WTF::StringView::endsWith() & 1) != 0)
      return 1;
    if (v47 == "hsbc.com.ph" || v48 != 11)
    {
      if (v47 == "hsbc.com.ph" && v48 == 11)
        return 1;
    }
    else if ((v48 & 0xFF00000000) != 0)
    {
      if (*v47 == 104 && *(_QWORD *)(v47 + 1) == 0x2E6D6F632E636273 && *(_QWORD *)(v47 + 3) == 0x68702E6D6F632E63)
        return 1;
    }
    else if (*(_WORD *)v47 == 104)
    {
      v43 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5D90);
      v43.i16[0] = vminvq_u16(v43);
      if (v43.i32[0])
      {
        v44 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 6), (int16x8_t)xmmword_1969F5E10);
        v44.i16[0] = vminvq_u16(v44);
        if (v44.i32[0])
          return 1;
      }
    }
    if ((WTF::StringView::endsWith() & 1) != 0)
      return 1;
    if (v47 == "hsbc.com" || v48 != 8)
    {
      if (v47 == "hsbc.com" && v48 == 8)
        return 1;
    }
    else if ((v48 & 0xFF00000000) != 0)
    {
      if (*v47 == 104 && *(_DWORD *)(v47 + 1) == 778265203 && *((_DWORD *)v47 + 1) == 1836016430)
        return 1;
    }
    else if (*(_WORD *)v47 == 104
           && *(_QWORD *)(v47 + 2) == 0x2E006300620073
           && *((_QWORD *)v47 + 1) == 0x6D006F0063002ELL)
    {
      return 1;
    }
    if ((WTF::StringView::endsWith() & 1) != 0)
      return 1;
    if (v47 == "hsbc.com.cn" || v48 != 11)
    {
      if (v47 == "hsbc.com.cn" && v48 == 11)
        return 1;
    }
    else if ((v48 & 0xFF00000000) != 0)
    {
      if (*v47 == 104 && *(_QWORD *)(v47 + 1) == 0x2E6D6F632E636273 && *(_QWORD *)(v47 + 3) == 0x6E632E6D6F632E63)
        return 1;
    }
    else if (*(_WORD *)v47 == 104)
    {
      v45 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5D90);
      v45.i16[0] = vminvq_u16(v45);
      if (v45.i32[0])
      {
        v46 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 6), (int16x8_t)xmmword_1969F5E20);
        v46.i16[0] = vminvq_u16(v46);
        if (v46.i32[0])
          return 1;
      }
    }
    if ((WTF::StringView::endsWith() & 1) != 0)
      return 1;
  }
  if (v47 == "nhl.com" || v48 != 7)
  {
    if (v47 == "nhl.com" && v48 == 7)
      return 1;
  }
  else if ((v48 & 0xFF00000000) != 0)
  {
    if (*v47 == 110 && *(_DWORD *)(v47 + 1) == 1663986792 && *(_DWORD *)(v47 + 3) == 1836016430)
      return 1;
  }
  else if (*(_WORD *)v47 == 110
         && *(_QWORD *)(v47 + 2) == 0x63002E006C0068
         && *(_QWORD *)(v47 + 6) == 0x6D006F0063002ELL)
  {
    return 1;
  }
  if ((WTF::StringView::endsWith() & 1) != 0)
    return 1;
  if (v47 == "fidelity.com" || v48 != 12)
  {
    if (v47 == "fidelity.com" && v48 == 12)
      return 1;
  }
  else if ((v48 & 0xFF00000000) != 0)
  {
    if (*v47 == 102 && *(_QWORD *)(v47 + 1) == 0x2E7974696C656469 && *(_QWORD *)(v47 + 4) == 0x6D6F632E7974696CLL)
      return 1;
  }
  else if (*(_WORD *)v47 == 102)
  {
    v35 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5E30);
    v35.i16[0] = vminvq_u16(v35);
    if (v35.i32[0])
    {
      v36 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 8), (int16x8_t)xmmword_1969F5E40);
      v36.i16[0] = vminvq_u16(v36);
      if (v36.i32[0])
        return 1;
    }
  }
  if ((WTF::StringView::endsWith() & 1) != 0)
    return 1;
  if (v47 == "roblox.com" || v48 != 10)
  {
    if (v47 == "roblox.com" && v48 == 10)
      return 1;
  }
  else if ((v48 & 0xFF00000000) != 0)
  {
    if (*v47 == 114 && *(_QWORD *)(v47 + 1) == 0x6F632E786F6C626FLL && *(_QWORD *)(v47 + 2) == 0x6D6F632E786F6C62)
      return 1;
  }
  else if (*(_WORD *)v47 == 114)
  {
    v37 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5E50);
    v37.i16[0] = vminvq_u16(v37);
    if (v37.i32[0])
    {
      v38 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 4), (int16x8_t)xmmword_1969F5E60);
      v38.i16[0] = vminvq_u16(v38);
      if (v38.i32[0])
        return 1;
    }
  }
  if ((WTF::StringView::endsWith() & 1) != 0)
    return 1;
  if (v47 == "spotify.com" || v48 != 11)
  {
    if (v47 == "spotify.com" && v48 == 11)
      return 1;
  }
  else if ((v48 & 0xFF00000000) != 0)
  {
    if (*v47 == 115 && *(_QWORD *)(v47 + 1) == 0x632E796669746F70 && *(_QWORD *)(v47 + 3) == 0x6D6F632E79666974)
      return 1;
  }
  else if (*(_WORD *)v47 == 115)
  {
    v39 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 2), (int16x8_t)xmmword_1969F5E70);
    v39.i16[0] = vminvq_u16(v39);
    if (v39.i32[0])
    {
      v40 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v47 + 6), (int16x8_t)xmmword_1969F5E80);
      v40.i16[0] = vminvq_u16(v40);
      if (v40.i32[0])
        return 1;
    }
  }
  if ((WTF::StringView::endsWith() & 1) != 0)
    return 1;
  return WTF::StringView::endsWith();
}

BOOL WebCore::Quirks::needsIPhoneUserAgent(WebCore::Quirks *this, const WTF::URL *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint16x8_t v8;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;

  v3 = WTF::URL::host(this);
  if ((char *)v3 != "shopee.sg" && v4 == 9)
  {
    if ((v4 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v3 != 115 || *(_DWORD *)(v3 + 1) != 1701867368 || *(_DWORD *)(v3 + 5) != 1735601765)
        return 0;
    }
    else
    {
      if (*(_WORD *)v3 != 115)
        return 0;
      v10 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1969F5E90);
      v10.i16[0] = vminvq_u16(v10);
      if (!v10.i32[0])
        return 0;
    }
  }
  else if ((char *)v3 != "shopee.sg" || v4 != 9)
  {
    return 0;
  }
  v6 = WTF::URL::path(this);
  if ((char *)v6 == "/payment/account-linking/landing" || v7 != 32)
    return (char *)v6 == "/payment/account-linking/landing" && v7 == 32;
  if ((v7 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)v6 != 47)
      return 0;
    v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1969F5EC0);
    v11.i16[0] = vminvq_u16(v11);
    if (!v11.i32[0])
      return 0;
    v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 16), (int16x8_t)xmmword_1969F5ED0);
    v12.i16[0] = vminvq_u16(v12);
    if (!v12.i32[0])
      return 0;
    v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 32), (int16x8_t)xmmword_1969F5EE0);
    v13.i16[0] = vminvq_u16(v13);
    if (!v13.i32[0])
      return 0;
    v8 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 48), (int16x8_t)xmmword_1969F5EF0);
    v8.i16[0] = vminvq_u16(v8);
    return v8.i32[0] != 0;
  }
  if (*(_BYTE *)v6 == 47)
  {
    v8 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v6 + 16), (int8x16_t)xmmword_1969F5EB0), vceqq_s8(*(int8x16_t *)(v6 + 1), (int8x16_t)xmmword_1969F5EA0));
    v8.i8[0] = vminvq_u8((uint8x16_t)v8);
    return v8.i32[0] != 0;
  }
  return 0;
}

uint64_t WebCore::Quirks::needsDesktopUserAgent()
{
  return 0;
}

BOOL WebCore::Quirks::shouldIgnorePlaysInlineRequirementQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  __int16 v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (!*((_BYTE *)this + 76))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v20;
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v6 = *(_QWORD *)(v6 + 8);
    if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
      goto LABEL_32;
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9 && *(_BYTE *)(v9 + 144) == 0)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
    while (1)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, (const WTF::URL *)(v6 + 736));
      v14 = WTF::equal(v20, v5, v12);
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      *(_WORD *)((char *)this + 75) = v14 | 0x100;
      if (!v5)
        break;
      if (*(_DWORD *)v5 != 2)
      {
        *(_DWORD *)v5 -= 2;
        return *((_BYTE *)this + 75) != 0;
      }
      WTF::StringImpl::destroy(v5, v13);
      if (*((_BYTE *)this + 76))
        return *((_BYTE *)this + 75) != 0;
      __break(1u);
      do
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8);
LABEL_32:
        v17 = *(_QWORD *)(v6 + 528);
        if (!v17)
          break;
        v18 = *(_QWORD *)(v17 + 8);
        if (!v18)
          break;
        v19 = *(_QWORD *)(v18 + 120);
        if (!v19)
          break;
        v16 = *(_QWORD *)(v19 + 8);
      }
      while (v16);
    }
  }
  return *((_BYTE *)this + 75) != 0;
}

BOOL WebCore::Quirks::shouldUseEphemeralPartitionedStorageForDOMCookies(WebCore::Quirks *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL8 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(v2 + 680);
  if (*(_BYTE *)(v4 + 243))
  {
    if (!*(_BYTE *)(v4 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v4 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v14, (const WTF::URL *)(v2 + 1008));
  v7 = v14;
  if (v14)
  {
    v8 = *(_DWORD *)v14;
    *(_DWORD *)v14 += 2;
    v14 = 0;
    if (v8)
      *(_DWORD *)v7 = v8;
    else
      WTF::StringImpl::destroy(v7, v6);
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v14, a2);
  v10 = v14;
  if (v14)
  {
    v11 = *(_DWORD *)v14;
    *(_DWORD *)v14 += 2;
    v14 = 0;
    if (v11)
      *(_DWORD *)v10 = v11;
    else
      WTF::StringImpl::destroy(v10, v9);
  }
  v5 = MEMORY[0x19AEA53F4](v7, "cagreatamerica.com", 18)
    && (MEMORY[0x19AEA53F4](v10, "queue-it.net", 12) & 1) != 0;
  if (!v10)
    goto LABEL_20;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
LABEL_20:
    if (!v7)
      return v5;
    goto LABEL_21;
  }
  WTF::StringImpl::destroy(v10, v12);
  if (!v7)
    return v5;
LABEL_21:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v12);
  else
    *(_DWORD *)v7 -= 2;
  return v5;
}

uint64_t WebCore::Quirks::needsGetElementsByNameQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned __int8 v5;
  PAL *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v2 + 243))
  {
    if (!*(_BYTE *)(v2 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v2 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  v3 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
  if (v3 <= 0xFF)
  {
    v4 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
    if (v4 <= 0x100)
      v5 = 0;
    else
      v5 = v4;
    v6 = (PAL *)objc_msgSend((id)PAL::getUIApplicationClass(this), "sharedApplication");
    if (v6)
    {
      v7 = objc_msgSend((id)objc_msgSend((id)PAL::getUIDeviceClass(v6), "currentDevice"), "userInterfaceIdiom");
      if ((v7 & 0xFFFFFFFFFFFFFFFBLL) != 0)
      {
        if (v7 == 6)
        {
          v8 = 2;
LABEL_16:
          v9 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
          if (v9 < 0x100 || v8 != v5)
            atomic_store(v8 | 0x100, &PAL::s_currentUserInterfaceIdiom);
          goto LABEL_19;
        }
LABEL_15:
        v8 = 0;
        goto LABEL_16;
      }
    }
    else if (!PAL::deviceClassIsSmallScreen(0))
    {
      goto LABEL_15;
    }
    v8 = 1;
    goto LABEL_16;
  }
LABEL_19:
  v10 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
  if (v10 < 0x100 || v10 != 1)
    return WTF::linkedOnOrAfterSDKWithBehavior() ^ 1;
  return 0;
}

BOOL WebCore::Quirks::needsRelaxedCorsMixedContentCheckQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint16x8_t v10;
  uint16x8_t v11;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(v2 + 680);
  if (*(_BYTE *)(v4 + 243))
  {
    if (!*(_BYTE *)(v4 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v4 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (*((_BYTE *)this + 78))
    return *((_BYTE *)this + 77) != 0;
  *(_WORD *)((char *)this + 77) = 256;
  v6 = WTF::URL::host((WTF::URL *)(*(_QWORD *)(v1 + 8) + 736));
  if ((char *)v6 != "tripadvisor.com" && v7 == 15)
  {
    if ((v7 & 0xFF00000000) == 0)
      goto LABEL_27;
    if (*(_BYTE *)v6 != 116
      || *(_QWORD *)(v6 + 1) != 0x7369766461706972
      || *(_QWORD *)(v6 + 7) != 0x6D6F632E726F7369)
    {
      while (1)
      {
LABEL_23:
        v6 = WTF::StringView::endsWith();
        if ((_DWORD)v6)
          break;
        if (*((_BYTE *)this + 78))
          return *((_BYTE *)this + 77) != 0;
        __break(1u);
LABEL_27:
        if (*(_WORD *)v6 == 116)
        {
          v10 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1969F5F00);
          v10.i16[0] = vminvq_u16(v10);
          if (v10.i32[0])
          {
            v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 14), (int16x8_t)xmmword_1969F5F10);
            v11.i16[0] = vminvq_u16(v11);
            if (v11.i32[0])
              break;
          }
        }
      }
    }
  }
  else if ((char *)v6 != "tripadvisor.com" || v7 != 15)
  {
    goto LABEL_23;
  }
  *(_WORD *)((char *)this + 77) = 257;
  return 1;
}

uint64_t WebCore::Quirks::needsLaxSameSiteCookieQuirk(WebCore::Quirks *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  __int128 v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(v2 + 680);
  if (*(_BYTE *)(v4 + 243))
  {
    if (*(_BYTE *)(v4 + 242))
      goto LABEL_5;
    return 0;
  }
  if ((*(_QWORD *)(v4 + 688) & 0x80000) == 0)
    return 0;
LABEL_5:
  v5 = *(WTF::StringImpl **)(v2 + 736);
  if (v5)
    *(_DWORD *)v5 += 2;
  v16 = v5;
  v6 = v2 + 736;
  v7 = *(_OWORD *)(v6 + 24);
  v17 = *(_OWORD *)(v6 + 8);
  v18 = v7;
  if (WTF::URL::protocolIs()
    && (v12 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)&v16),
        WTF::operator==(v12, v13, "login.microsoftonline.com", 26))
    && WTF::URL::protocolIs())
  {
    v14 = (unsigned __int8 *)WTF::URL::host(a2);
    v9 = WTF::operator==(v14, v15, "www.bing.com", 13);
  }
  else
  {
    v9 = 0;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  return v9;
}

BOOL WebCore::Quirks::shouldIgnoreTextAutoSizing(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint16x8_t v11;
  uint16x8_t v13;
  uint16x8_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return v1;
  v1 = *(_QWORD *)(v1 + 8);
  if (!v1)
    return v1;
  v2 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v2 + 243))
  {
    if (!*(_BYTE *)(v2 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v2 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (*(_BYTE *)(v1 + 3362) || *(_BYTE *)(v1 + 3405))
  {
    while (1)
    {
      v15 = *(_QWORD *)(v1 + 528);
      if (!v15)
        break;
      v16 = *(_QWORD *)(v15 + 8);
      if (!v16)
        break;
      v17 = *(_QWORD *)(v16 + 120);
      if (!v17)
        break;
      v18 = *(_QWORD *)(v17 + 8);
      if (!v18)
        break;
      v1 = *(_QWORD *)(*(_QWORD *)(v18 + 40) + 8);
    }
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 528);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8);
        if (v5 && *(_BYTE *)(v5 + 144) == 0)
        {
          v7 = *(_QWORD *)(v5 + 296);
          if (v7)
            v1 = v7;
        }
      }
    }
  }
  v8 = (const char *)WTF::URL::host((WTF::URL *)(v1 + 736));
  v1 = v9 == 20 && v8 == "news.ycombinator.com";
  if (v8 != "news.ycombinator.com" && v9 == 20)
  {
    if ((v9 & 0xFF00000000) != 0)
    {
      if (*v8 == 110)
      {
        v11 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v8 + 4), (int8x16_t)xmmword_1969F5F30), vceqq_s8(*(int8x16_t *)(v8 + 1), (int8x16_t)xmmword_1969F5F20));
        v11.i8[0] = vminvq_u8((uint8x16_t)v11);
        return v11.i32[0] != 0;
      }
    }
    else if (*(_WORD *)v8 == 110)
    {
      v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 2), (int16x8_t)xmmword_1969F5F40);
      v13.i16[0] = vminvq_u16(v13);
      v1 = v13.u32[0];
      if (!v13.i32[0])
        return v1;
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 8), (int16x8_t)xmmword_1969F5F50);
      v14.i16[0] = vminvq_u16(v14);
      v1 = v14.u32[0];
      if (!v14.i32[0])
        return v1;
      v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 24), (int16x8_t)xmmword_1969F5F60);
      v11.i16[0] = vminvq_u16(v11);
      return v11.i32[0] != 0;
    }
    return 0;
  }
  return v1;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  WTF **v26;
  WTF *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF **v37;
  uint64_t v38;
  WTF *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl **v41;
  WTF *v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD **v45;
  uint64_t v46;
  _DWORD *v47;
  WTF::StringImpl **v48;
  WTF::StringImpl **v49;
  WTF::StringImpl **v50;
  WTF::StringImpl **v51;
  WTF::StringImpl **v52;
  WTF *v53;
  uint64_t v54;
  _DWORD *v55;
  WTF::StringImpl **v56;
  WTF::StringImpl **v57;
  WTF::StringImpl **v58;
  WTF::StringImpl **result;
  WTF::StringImpl **v60;
  WTF::StringImpl **v61;
  uint64_t v62;
  uint64_t v63;

  v4 = *a1;
  v63 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v12 = v63;
    v62 = v5;
    do
    {
      v13 = (WTF::StringImpl **)(v12 + 24 * v9);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != (WTF::StringImpl *)-1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v14 + 4);
          if (v17 < 0x100)
          {
            v41 = v10;
            v18 = WTF::StringImpl::hashSlowCase(v14);
            v11 = v62;
            v12 = v63;
            v10 = v41;
          }
          else
          {
            v18 = v17 >> 8;
          }
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v21 = (WTF::StringImpl **)(v15 + 24 * (v18 & v16));
            v18 = ++v19 + (v18 & v16);
          }
          while (*v21);
          v22 = v15 + 24 * v20;
          v25 = *(_DWORD *)(v22 + 20);
          v24 = (_DWORD *)(v22 + 20);
          v23 = v25;
          v26 = (WTF **)(v24 - 3);
          if (v25)
          {
            v42 = *v26;
            v43 = 8 * v23;
            do
            {
              v44 = *(_DWORD **)v42;
              *(_QWORD *)v42 = 0;
              if (v44)
              {
                if (v44[2] == 1)
                {
                  v61 = v10;
                  (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
                  v10 = v61;
                  v11 = v62;
                  v12 = v63;
                }
                else
                {
                  --v44[2];
                }
              }
              v42 = (WTF *)((char *)v42 + 8);
              v43 -= 8;
            }
            while (v43);
          }
          v27 = *v26;
          if (*v26)
          {
            *v26 = 0;
            *(_DWORD *)(v15 + 24 * v20 + 16) = 0;
            v49 = v10;
            WTF::fastFree(v27, v8);
            v11 = v62;
            v12 = v63;
            v10 = v49;
          }
          v28 = *v21;
          *v21 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
            {
              v51 = v10;
              WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v8);
              v11 = v62;
              v12 = v63;
              v10 = v51;
            }
            else
            {
              *(_DWORD *)v28 -= 2;
            }
          }
          v29 = *v13;
          *v13 = 0;
          *v21 = v29;
          v30 = v12 + 24 * v9;
          *v26 = 0;
          *(_QWORD *)(v24 - 1) = 0;
          v32 = *(WTF **)(v30 + 8);
          v31 = v30 + 8;
          *(_QWORD *)v31 = 0;
          *v26 = v32;
          LODWORD(v29) = *(_DWORD *)(v31 + 8);
          *(_DWORD *)(v31 + 8) = 0;
          *(_DWORD *)(v15 + 24 * v20 + 16) = (_DWORD)v29;
          LODWORD(v29) = *(_DWORD *)(v31 + 12);
          *(_DWORD *)(v31 + 12) = 0;
          *v24 = (_DWORD)v29;
          v33 = *(unsigned int *)(v31 + 12);
          if ((_DWORD)v33)
          {
            v45 = *(_DWORD ***)v31;
            v46 = 8 * v33;
            do
            {
              v47 = *v45;
              *v45 = 0;
              if (v47)
              {
                if (v47[2] == 1)
                {
                  v48 = v10;
                  (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
                  v11 = v62;
                  v12 = v63;
                  v10 = v48;
                }
                else
                {
                  --v47[2];
                }
              }
              ++v45;
              v46 -= 8;
            }
            while (v46);
          }
          v34 = *(WTF **)v31;
          if (*(_QWORD *)v31)
          {
            *(_QWORD *)v31 = 0;
            *(_DWORD *)(v31 + 8) = 0;
            v50 = v10;
            WTF::fastFree(v34, v8);
            v11 = v62;
            v12 = v63;
            v10 = v50;
          }
          v35 = *v13;
          *v13 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              v52 = v10;
              WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v8);
              v11 = v62;
              v12 = v63;
              v10 = v52;
            }
            else
            {
              *(_DWORD *)v35 -= 2;
            }
          }
          if (v13 == a3)
            v10 = v21;
        }
      }
      else
      {
        v36 = v12 + 24 * v9;
        v37 = (WTF **)(v36 + 8);
        v38 = *(unsigned int *)(v36 + 20);
        if ((_DWORD)v38)
        {
          v53 = *v37;
          v54 = 8 * v38;
          do
          {
            v55 = *(_DWORD **)v53;
            *(_QWORD *)v53 = 0;
            if (v55)
            {
              if (v55[2] == 1)
              {
                v56 = v10;
                (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 8))(v55);
                v11 = v62;
                v12 = v63;
                v10 = v56;
              }
              else
              {
                --v55[2];
              }
            }
            v53 = (WTF *)((char *)v53 + 8);
            v54 -= 8;
          }
          while (v54);
        }
        v39 = *v37;
        if (*v37)
        {
          *v37 = 0;
          *(_DWORD *)(v12 + 24 * v9 + 16) = 0;
          v57 = v10;
          WTF::fastFree(v39, v8);
          v11 = v62;
          v12 = v63;
          v10 = v57;
        }
        v40 = *v13;
        *v13 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
          {
            v58 = v10;
            WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v8);
            v11 = v62;
            v12 = v63;
            v10 = v58;
          }
          else
          {
            *(_DWORD *)v40 -= 2;
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    v12 = v63;
    if (!v63)
      return result;
  }
  v60 = v10;
  WTF::fastFree((WTF *)(v12 - 16), v8);
  return v60;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  void *v4;
  WTF::StringImpl **result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  WTF::hashTraitsDeleteBucket<WTF::HashTraits<WTF::String>,WTF::String>(a2, (WTF::StringImpl *)a2);
  result = (WTF::StringImpl **)WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 1), v4);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

WTF::StringImpl *WTF::hashTraitsDeleteBucket<WTF::HashTraits<WTF::String>,WTF::String>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *a1;
  *a1 = (WTF::StringImpl *)-1;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::default_delete<WTF::HashMap<WTF::String,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTableTraits>>::operator()[abi:sn180100](int a1, WTF *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  if (this)
  {
    v3 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)this;
        do
        {
          v6 = *(WTF::StringImpl **)v5;
          if (*(_QWORD *)v5 != -1)
          {
            v7 = *(_QWORD *)(v5 + 8);
            *(_QWORD *)(v5 + 8) = 0;
            if (v7)
            {
              if (*(_DWORD *)(v7 + 24) == 2)
              {
                if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v7, this);
                  v6 = *(WTF::StringImpl **)v5;
                }
              }
              else
              {
                *(_DWORD *)(v7 + 24) -= 2;
              }
            }
            *(_QWORD *)v5 = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                WTF::StringImpl::destroy(v6, this);
              else
                *(_DWORD *)v6 -= 2;
            }
          }
          v5 += 16;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), this);
    }
    WTF::fastFree(this, this);
  }
}

WTF::StringImpl **WebCore::RegistrableDomain::operator=(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::WeakRef<WebCore::Performance,WebCore::WeakPtrImplWithEventTargetData>::implForObject<WebCore::Performance>(uint64_t a1)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 8) = a1 + 24;
    *(_BYTE *)(v3 + 32) = 0;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v5 & 0xFFFF000000000000 | v3;
    v6 = v5 & 0xFFFFFFFFFFFFLL;
    if ((v5 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v7 = __ldaxr((unsigned int *)v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unsigned int *)v6));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)v6);
        v9 = *(unsigned int *)(v6 + 28);
        if ((_DWORD)v9)
        {
          v12 = v6;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
          v6 = v12;
        }
        v10 = *(WTF **)(v6 + 16);
        if (v10)
        {
          *(_QWORD *)(v6 + 16) = 0;
          *(_DWORD *)(v6 + 24) = 0;
          v11 = v6;
          WTF::fastFree(v10, v4);
          v6 = v11;
        }
        WTF::fastFree((WTF *)v6, v4);
      }
    }
  }
  return *(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFLL;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PerformanceUserTiming::convertMarkToTimestamp(std::variant<WTF::String,double> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,double> const&>(const WTF::String ***a1@<X0>, WTF::StringImpl **a2@<X1>, WebCore::PerformanceUserTiming *a3@<X8>)
{
  WebCore::PerformanceUserTiming::convertMarkToTimestamp(a3, **a1, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PerformanceUserTiming::convertMarkToTimestamp(std::variant<WTF::String,double> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,double> const&>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  if (*(double *)a1 >= 0.0)
  {
    v2 = 0;
    *(_QWORD *)a2 = *a1;
  }
  else
  {
    *(_BYTE *)a2 = 33;
    *(_QWORD *)(a2 + 8) = 0;
    v2 = 1;
  }
  *(_DWORD *)(a2 + 16) = v2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PerformanceUserTiming::measure(JSC::JSGlobalObject &,WTF::String const&,std::optional<std::variant<WTF::String,WebCore::PerformanceMeasureOptions>> &&,WTF::String const&)::$_0,WebCore::PerformanceUserTiming::measure(JSC::JSGlobalObject &,WTF::String const&,std::optional<std::variant<WTF::String,WebCore::PerformanceMeasureOptions>> &,WTF::String const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WebCore::PerformanceMeasureOptions> &>(WTF::StringImpl **a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  WebCore::PerformanceUserTiming::measure(*(WebCore::PerformanceUserTiming **)(*(_QWORD *)a2 + 32), *(WTF::StringImpl ***)(*(_QWORD *)a2 + 40), a1, *(WTF::StringImpl ***)(*(_QWORD *)a2 + 48), a3);
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PerformanceUserTiming::measure(JSC::JSGlobalObject &,WTF::String const&,std::optional<std::variant<WTF::String,WebCore::PerformanceMeasureOptions>> &&,WTF::String const&)::$_0,WebCore::PerformanceUserTiming::measure(JSC::JSGlobalObject &,WTF::String const&,std::optional<std::variant<WTF::String,WebCore::PerformanceMeasureOptions>> &,WTF::String const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WebCore::PerformanceMeasureOptions> &>@<X0>(WTF *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  WTF::StringImpl **v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  double v20;
  double v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  void *v39;
  double v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  WTF *v46;
  uint64_t v47;
  unsigned int v48;
  double v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t *v52;

  v5 = *(_QWORD *)result;
  v6 = *(uint64_t **)(*(_QWORD *)result + 8);
  if (*(_QWORD *)a2 == 10 && *(_BYTE *)(a2 + 24) == 0 && *(_BYTE *)(a2 + 40) == 0 && *(_BYTE *)(a2 + 64) == 0)
  {
    v11 = *(JSC::JSGlobalObject **)(v5 + 16);
    v10 = *(WTF::StringImpl ***)(v5 + 24);
    v12 = a2 + 48;
    goto LABEL_14;
  }
  if (**(_QWORD **)v5)
  {
LABEL_12:
    *(_BYTE *)a3 = 33;
    *(_QWORD *)(a3 + 8) = 0;
LABEL_23:
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(_BYTE *)(a2 + 40) && *(_BYTE *)(a2 + 64))
      goto LABEL_12;
    v11 = *(JSC::JSGlobalObject **)(v5 + 16);
    v10 = *(WTF::StringImpl ***)(v5 + 24);
    v12 = a2 + 48;
    if (!*(_BYTE *)(a2 + 64))
    {
      if (*(_BYTE *)(a2 + 40))
      {
        v45[0] = *(_QWORD *)(*(_QWORD *)result + 8);
        v24 = *(unsigned int *)(a2 + 16);
        if ((_DWORD)v24 == -1)
          goto LABEL_75;
        *(double *)&v46 = COERCE_DOUBLE(v45);
        ((void (*)(double *__return_ptr, WTF **, uint64_t))*(&off_1E3401DD0 + v24))(&v49, &v46, a2 + 8);
        if (v51)
        {
          if (v51 != 1)
            goto LABEL_75;
          v25 = v50;
          v50 = 0;
          *(_BYTE *)a3 = LOBYTE(v49);
          *(_QWORD *)(a3 + 8) = v25;
          v26 = 1;
          *(_DWORD *)(a3 + 16) = 1;
          v16 = 0.0;
          v27 = 1;
        }
        else
        {
          if (!*(_BYTE *)(a2 + 40))
          {
            __break(1u);
            goto LABEL_75;
          }
          v40 = *(double *)(a2 + 32);
          if (v40 >= 0.0)
          {
            v26 = 0;
            v46 = *(WTF **)(a2 + 32);
            v48 = 0;
            v16 = v40 + v49;
          }
          else
          {
            LOBYTE(v46) = 33;
            v26 = 1;
            v48 = 1;
            v47 = 0;
            *(_BYTE *)a3 = 33;
            *(_QWORD *)(a3 + 8) = 0;
            v16 = 0.0;
            *(_DWORD *)(a3 + 16) = 1;
          }
          result = (WTF *)((uint64_t (*)(_QWORD *, WTF **))off_1E3401D90[v26])(v45, &v46);
          v27 = v51;
          if (v51 == -1)
            goto LABEL_69;
        }
        result = (WTF *)((uint64_t (*)(WTF **, double *))off_1E3401D90[v27])(&v46, &v49);
LABEL_69:
        if (v26)
          return result;
        goto LABEL_18;
      }
LABEL_14:
      v13 = *(_QWORD *)(*v6 + 8);
      if (v13)
        v14 = v13 - 24;
      else
        v14 = 0;
      WTF::MonotonicTime::now(result);
      v16 = *(double *)&WebCore::timePrecision
          * floor((v15 - *(double *)(v14 + 168)) / *(double *)&WebCore::timePrecision)
          * 1000.0;
      goto LABEL_18;
    }
  }
  else
  {
    if (!*(_BYTE *)(a2 + 64))
      goto LABEL_12;
    v11 = *(JSC::JSGlobalObject **)(v5 + 16);
    v10 = *(WTF::StringImpl ***)(v5 + 24);
    v12 = a2 + 48;
  }
  v45[0] = *(_QWORD *)(*(_QWORD *)result + 8);
  v28 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v28 == -1)
    goto LABEL_75;
  *(double *)&v46 = COERCE_DOUBLE(v45);
  result = (WTF *)((WTF *(*)(double *__return_ptr, WTF **, uint64_t))*(&off_1E3401DD0 + v28))(&v49, &v46, v12);
  v18 = v51;
  if (v51)
  {
LABEL_21:
    if (v18 == 1)
    {
      v19 = v50;
      *(_BYTE *)a3 = LOBYTE(v49);
      *(_QWORD *)(a3 + 8) = v19;
      goto LABEL_23;
    }
    goto LABEL_75;
  }
  v16 = v49;
LABEL_18:
  if (*(_BYTE *)(a2 + 24))
  {
    v45[0] = v6;
    v17 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v17 == -1)
      goto LABEL_75;
    *(double *)&v46 = COERCE_DOUBLE(v45);
    result = (WTF *)((WTF *(*)(double *__return_ptr, WTF **, uint64_t))*(&off_1E3401DD0 + v17))(&v49, &v46, a2 + 8);
    v18 = v51;
    if (v51)
      goto LABEL_21;
    v20 = v49;
  }
  else
  {
    v20 = 0.0;
    if (*(_BYTE *)(a2 + 40) && *(_BYTE *)(a2 + 64))
    {
      v21 = *(double *)(a2 + 32);
      if (v21 >= 0.0)
      {
        v49 = *(double *)(a2 + 32);
        v51 = 0;
        v52 = v6;
        v29 = *(unsigned int *)(a2 + 56);
        if ((_DWORD)v29 == -1)
          goto LABEL_75;
        v45[0] = &v52;
        ((void (*)(WTF **__return_ptr, _QWORD *, uint64_t))*(&off_1E3401DD0 + v29))(&v46, v45, v12);
        v30 = v48;
        if (v48)
        {
          if (v48 != 1)
            goto LABEL_75;
          v31 = v47;
          v47 = 0;
          *(_BYTE *)a3 = (_BYTE)v46;
          *(_QWORD *)(a3 + 8) = v31;
          *(_DWORD *)(a3 + 16) = 1;
          v20 = 0.0;
        }
        else
        {
          v20 = *(double *)&v46 - v21;
        }
        ((void (*)(_QWORD *, WTF **))off_1E3401D90[v30])(v45, &v46);
        v23 = 0;
        v22 = v30 == 0;
      }
      else
      {
        v22 = 0;
        LOBYTE(v49) = 33;
        v23 = 1;
        v51 = 1;
        v50 = 0;
        *(_BYTE *)a3 = 33;
        *(_QWORD *)(a3 + 8) = 0;
        v20 = 0.0;
        *(_DWORD *)(a3 + 16) = 1;
      }
      result = (WTF *)((uint64_t (*)(WTF **, double *))off_1E3401D90[v23])(&v46, &v49);
      if (!v22)
        return result;
    }
  }
  if (*(_QWORD *)a2 == 10)
    v32 = 2;
  else
    v32 = *(_QWORD *)a2;
  *(double *)&v46 = 0.0;
  v47 = 0;
  v45[0] = 0;
  v45[1] = 0;
  WebCore::SerializedScriptValue::create(v11, v32, (uint64_t)v45, (uint64_t)&v46, 0, 0, 0, (uint64_t)&v49);
  v33 = v51;
  if (!v51)
  {
    v35 = v49;
    v49 = 0.0;
    v36 = WTF::fastMalloc((WTF *)0x30);
    v37 = v36;
    *(_DWORD *)(v36 + 8) = 1;
    v38 = *v10;
    if (*v10)
      *(_DWORD *)v38 += 2;
    *(_QWORD *)(v36 + 16) = v38;
    *(double *)(v36 + 24) = v20;
    *(double *)(v36 + 32) = v16 - v20;
    *(_QWORD *)v36 = off_1E34019A0;
    *(double *)(v36 + 40) = v35;
    WebCore::addPerformanceEntry(v6 + 2, v10, (const WTF::StringImpl *)v36);
    *(_QWORD *)a3 = v37;
    goto LABEL_59;
  }
  if (v51 != 1)
  {
LABEL_75:
    v43 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF *)WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v43, v44);
  }
  v34 = v50;
  v50 = 0;
  *(_BYTE *)a3 = LOBYTE(v49);
  *(_QWORD *)(a3 + 8) = v34;
LABEL_59:
  *(_DWORD *)(a3 + 16) = v33;
  ((void (*)(_QWORD *, double *))off_1E3401DA0[v33])(v45, &v49);
  if (HIDWORD(v47))
  {
    v41 = (uint64_t *)v46;
    v42 = 8 * HIDWORD(v47);
    do
    {
      v41 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v41, v39)+ 1;
      v42 -= 8;
    }
    while (v42);
  }
  result = v46;
  if (*(double *)&v46 != 0.0)
  {
    *(double *)&v46 = 0.0;
    LODWORD(v47) = 0;
    return (WTF *)WTF::fastFree(result, v39);
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::PerformanceEntry,WTF::RawPtrTraits<WebCore::PerformanceEntry>,WTF::DefaultRefDerefTraits<WebCore::PerformanceEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(uint64_t **)a2;
      v8 = 8 * v6;
      do
      {
        v9 = *v7++;
        ++*(_DWORD *)(v9 + 8);
        *v5++ = v9;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

WebCore::PointerCaptureController::CapturingData *WTF::RefCounted<WebCore::PointerCaptureController::CapturingData>::deref(WebCore::PointerCaptureController::CapturingData *result, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::PointerCaptureController::CapturingData::~CapturingData(result, a2);
    return (WebCore::PointerCaptureController::CapturingData *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>>,WTF::IntHash<long long>,WTF::HashMap<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>,WTF::IntHash<long long>,WTF::SignedWithZeroKeyHashTraits<long long>,WTF::HashTraits<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SignedWithZeroKeyHashTraits<long long>>::expand(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>>,WTF::IntHash<long long>,WTF::HashMap<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>,WTF::IntHash<long long>,WTF::SignedWithZeroKeyHashTraits<long long>,WTF::HashTraits<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SignedWithZeroKeyHashTraits<long long>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>>,WTF::IntHash<long long>,WTF::HashMap<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>,WTF::IntHash<long long>,WTF::SignedWithZeroKeyHashTraits<long long>,WTF::HashTraits<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SignedWithZeroKeyHashTraits<long long>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *result;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD *v17;
  WTF::StringImpl *v18;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 24);
    do
    {
      *(v12 - 1) = 0x8000000000000000;
      *v12 = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = (WTF::StringImpl *)v6;
    v16 = v7;
    do
    {
      if (*(_QWORD *)v15 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (*(_QWORD *)v15 == 0x8000000000000000)
        {
          WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>::~KeyValuePair((uint64_t)v15, v10);
        }
        else
        {
          v17 = WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>>,WTF::IntHash<long long>,WTF::HashMap<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>,WTF::IntHash<long long>,WTF::SignedWithZeroKeyHashTraits<long long>,WTF::HashTraits<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SignedWithZeroKeyHashTraits<long long>>::reinsert(*a1, v15);
          WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>::~KeyValuePair((uint64_t)v15, v18);
          if (v15 == a3)
            v13 = v17;
        }
      }
      v15 = (WTF::StringImpl *)((char *)v15 + 16);
      --v16;
    }
    while (v16);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

_QWORD *WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>>,WTF::IntHash<long long>,WTF::HashMap<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>,WTF::IntHash<long long>,WTF::SignedWithZeroKeyHashTraits<long long>,WTF::HashTraits<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SignedWithZeroKeyHashTraits<long long>>::reinsert(uint64_t a1, WTF::StringImpl *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  WebCore::PointerCaptureController::CapturingData *v12;
  uint64_t v13;
  WTF *v15;
  void *v16;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = *(_QWORD *)a2 + ~(*(_QWORD *)a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(a1 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10 != 0x8000000000000000);
  v11 = (_QWORD *)(a1 + 16 * v9);
  v12 = (WebCore::PointerCaptureController::CapturingData *)v11[1];
  v11[1] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      WebCore::PointerCaptureController::CapturingData::~CapturingData(v12, a2);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  v13 = *((_QWORD *)a2 + 1);
  *v11 = *(_QWORD *)a2;
  *((_QWORD *)a2 + 1) = 0;
  v11[1] = v13;
  return v11;
}

WebCore::PointerCaptureController::CapturingData *WTF::GenericHashTraits<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>::assignToEmpty<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>(WebCore::PointerCaptureController::CapturingData **a1, WTF::StringImpl *a2)
{
  WebCore::PointerCaptureController::CapturingData *v3;
  WebCore::PointerCaptureController::CapturingData *result;
  WTF *v5;
  void *v6;

  v3 = *(WebCore::PointerCaptureController::CapturingData **)a2;
  *(_QWORD *)a2 = 0;
  result = *a1;
  *a1 = v3;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::PointerCaptureController::CapturingData::~CapturingData(result, a2);
      return (WebCore::PointerCaptureController::CapturingData *)WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*a1 != (WTF::StringImpl *)-1)
        a1 = WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(a1, a2);
      a1 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeIterator(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  _QWORD v5[2];

  if (a1)
    v3 = *(unsigned int *)(a1 - 4);
  else
    v3 = 0;
  v5[0] = a2;
  v5[1] = a1 + 16 * v3;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v5, a2, a3);
  return v5[0];
}

uint64_t WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF **v3;
  _QWORD *v4;
  WTF **v5;

  v3 = *(WTF ***)result;
  if (*(_QWORD *)result != *(_QWORD *)(result + 8))
  {
    v4 = (_QWORD *)result;
    do
    {
      result = WTF::equal(*v3, 0, a3);
      if ((result & 1) == 0 && *v3 != (WTF *)-1)
        break;
      v5 = (WTF **)v4[1];
      v3 = (WTF **)(*v4 + 16);
      *v4 = v3;
    }
    while (v3 != v5);
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(WTF::StringImpl **a1)
{
  int v2;
  unsigned int v3;

  if (WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map
    && (v2 = *(_DWORD *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 4)) != 0)
  {
    v3 = v2 << (6 * *(_DWORD *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 12) >= (2 * v2));
  }
  else
  {
    v3 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(v3, a1);
}

WTF::StringImpl **WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(unsigned int a1, WTF::StringImpl **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  void *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **result;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;

  v4 = WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map;
  if (WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map)
  {
    LODWORD(v5) = *(_DWORD *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 4);
    v6 = *(_DWORD *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 12) = v6;
  v10 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v12 = (WTF::StringImpl **)v4;
    do
    {
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (WTF::equal(*v12, 0, v9))
        {
          WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v12, v13);
        }
        else
        {
          v14 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::reinsert(v12, v13);
          WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v12, v15);
          if (v12 == a2)
            v10 = v14;
        }
      }
      v12 += 2;
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  result = 0;
  if (v4)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v10;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::reinsert(WTF::StringImpl **this, const WTF::String *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  const WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v3 = WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map;
  if (WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map)
    v4 = *(_DWORD *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 8);
  else
    v4 = 0;
  v5 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)this, a2);
  v7 = 0;
  do
  {
    v8 = v5 & v4;
    v10 = WTF::equal(*(WTF **)(v3 + 16 * v8), 0, v6);
    v5 = ++v7 + v8;
  }
  while (!v10);
  v11 = (WTF::StringImpl **)(v3 + 16 * v8);
  v12 = v11[1];
  v11[1] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *v11;
  *v11 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *this;
  *this = 0;
  *v11 = v14;
  v15 = this[1];
  this[1] = 0;
  v11[1] = v15;
  return v11;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Quirks::requestStorageAccessAndHandleClick(WTF::CompletionHandler<void ()(WebCore::Quirks::ShouldDispatchClick)> &&)::$_0,void,WebCore::StorageAccessWasGranted>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E3401E00;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Quirks::requestStorageAccessAndHandleClick(WTF::CompletionHandler<void ()(WebCore::Quirks::ShouldDispatchClick)> &&)::$_0,void,WebCore::StorageAccessWasGranted>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E3401E00;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::Quirks::requestStorageAccessAndHandleClick(WTF::CompletionHandler<void ()(WebCore::Quirks::ShouldDispatchClick)> &&)::$_0,void,WebCore::StorageAccessWasGranted>::call(_QWORD *a1, int a2)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const WTF::String *v10;
  unsigned int v11;
  WTF::StringImpl **v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  WTF::StringImpl *result;
  uint64_t v28;
  _QWORD *v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  WTF::StringImpl *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v26 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, 1);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  {
    WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
  }
  v3 = (uint64_t *)WebCore::sharedObserver(void)::observer;
  if (!WebCore::sharedObserver(void)::observer)
    v3 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
  v36 = v3;
  v4 = (WTF::StringImpl *)a1[2];
  if (v4)
  {
    *(_DWORD *)v4 += 2;
    v5 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_DWORD *)v4 += 2;
  }
  else
  {
    v5 = (WTF *)WTF::fastMalloc((WTF *)8);
  }
  *(_QWORD *)v5 = v4;
  v6 = (WTF::StringImpl *)a1[1];
  if (v6)
    *(_DWORD *)v6 += 2;
  v37 = a1;
  v40 = v6;
  v41 = v5;
  v42 = 0x100000001;
  v7 = WTF::fastZeroedMalloc((WTF *)0xD0);
  v8 = v7 + 16;
  v39 = (_QWORD *)(v7 + 16);
  *(_OWORD *)v7 = xmmword_1968A5190;
  v9 = *(_DWORD *)(v7 + 8);
  v11 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)&v40, v10) & v9;
  v12 = (WTF::StringImpl **)(v8 + 24 * v11);
  if ((WTF::equal(*v12, 0, v13) & 1) != 0)
  {
LABEL_17:
    v19 = v40;
    if (v40)
      *(_DWORD *)v40 += 2;
    v20 = *v12;
    *v12 = v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v14);
      else
        *(_DWORD *)v20 -= 2;
    }
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v12 + 2, (uint64_t)&v41);
    if (v39)
      v21 = *((_DWORD *)v39 - 3) + 1;
    else
      v21 = 1;
    *((_DWORD *)v39 - 3) = v21;
    if (v39)
      v22 = *((_DWORD *)v39 - 3);
    else
      v22 = 0;
    v23 = (*((_DWORD *)v39 - 4) + v22);
    v24 = *((unsigned int *)v39 - 1);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23)
        goto LABEL_33;
    }
    else
    {
      if (3 * v24 > 4 * v23)
        goto LABEL_33;
      if (!(_DWORD)v24)
      {
        v25 = 8;
        goto LABEL_32;
      }
    }
    v25 = (_DWORD)v24 << (6 * *((_DWORD *)v39 - 3) >= (2 * v24));
LABEL_32:
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash((uint64_t *)&v39, v25);
    goto LABEL_33;
  }
  v16 = 0;
  v17 = 1;
  while (1)
  {
    v18 = v12;
    if (*v12 != (WTF::StringImpl *)-1)
    {
      v18 = v16;
      if ((WTF::equalIgnoringASCIICase(*v12, v40, v15) & 1) != 0)
        break;
    }
    v11 = (v11 + v17) & v9;
    v12 = (WTF::StringImpl **)(v8 + 24 * v11);
    ++v17;
    v16 = v18;
    if (WTF::equal(*v12, 0, v15))
    {
      if (v18)
      {
        v18[1] = 0;
        v18[2] = 0;
        *v18 = 0;
        --*((_DWORD *)v39 - 4);
        v12 = v18;
      }
      goto LABEL_17;
    }
  }
LABEL_33:
  v28 = v37[3];
  v37[3] = 0;
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v29 = &off_1E3401E28;
  v29[1] = v28;
  v38 = v29;
  (*(void (**)(uint64_t *, _QWORD **, _QWORD **))(*v36 + 128))(v36, &v39, &v38);
  v31 = v38;
  v38 = 0;
  if (v31)
    (*(void (**)(_QWORD *))(*v31 + 8))(v31);
  if (v39)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v39, v30);
  if (HIDWORD(v42))
  {
    v33 = v41;
    v34 = 8 * HIDWORD(v42);
    do
    {
      v35 = *(WTF::StringImpl **)v33;
      *(_QWORD *)v33 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v30);
        else
          *(_DWORD *)v35 -= 2;
      }
      v33 = (WTF *)((char *)v33 + 8);
      v34 -= 8;
    }
    while (v34);
  }
  v32 = v41;
  if (v41)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    WTF::fastFree(v32, v30);
  }
  result = v40;
  v40 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
      if (!v4)
        return result;
      goto LABEL_44;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v4)
    return result;
LABEL_44:
  if (*(_DWORD *)v4 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v30);
  *(_DWORD *)v4 -= 2;
  return result;
}

uint64_t WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v3 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v3)
  {
    v7 = *(WTF::StringImpl ***)(a1 + 8);
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF **v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl **v40;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = v5;
    while (1)
    {
      v12 = (WTF **)(v4 + 24 * v10);
      if (*v12 != (WTF *)-1)
      {
        if (WTF::equal(*v12, 0, v9))
        {
          v13 = v4 + 24 * v10;
          v14 = (WTF::StringImpl ***)(v13 + 8);
          v15 = *(unsigned int *)(v13 + 20);
          if ((_DWORD)v15)
          {
            v29 = *v14;
            v30 = 8 * v15;
            do
            {
              v31 = *v29;
              *v29 = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                  WTF::StringImpl::destroy(v31, v8);
                else
                  *(_DWORD *)v31 -= 2;
              }
              ++v29;
              v30 -= 8;
            }
            while (v30);
          }
          v16 = (WTF *)*v14;
          if (*v14)
          {
            *v14 = 0;
            *(_DWORD *)(v4 + 24 * v10 + 16) = 0;
            WTF::fastFree(v16, v8);
          }
          v17 = *v12;
          *v12 = 0;
          if (!v17)
            goto LABEL_25;
          if (*(_DWORD *)v17 == 2)
          {
LABEL_27:
            WTF::StringImpl::destroy(v17, v8);
            goto LABEL_25;
          }
          *(_DWORD *)v17 -= 2;
        }
        else
        {
          v18 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(a1, (WTF::ASCIICaseInsensitiveHash *)(v4 + 24 * v10));
          v19 = (WTF::StringImpl ***)(v18 + 8);
          v20 = *(unsigned int *)(v18 + 20);
          if ((_DWORD)v20)
          {
            v32 = *v19;
            v33 = 8 * v20;
            do
            {
              v34 = *v32;
              *v32 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                {
                  v39 = v33;
                  WTF::StringImpl::destroy(v34, v8);
                  v33 = v39;
                }
                else
                {
                  *(_DWORD *)v34 -= 2;
                }
              }
              ++v32;
              v33 -= 8;
            }
            while (v33);
          }
          v21 = (WTF *)*v19;
          if (*v19)
          {
            *(_QWORD *)(v18 + 8) = 0;
            *(_DWORD *)(v18 + 16) = 0;
            WTF::fastFree(v21, v8);
          }
          v22 = *(WTF::StringImpl **)v18;
          *(_QWORD *)v18 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v8);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = *v12;
          *v12 = 0;
          *(_QWORD *)v18 = v23;
          v24 = v4 + 24 * v10;
          *v19 = 0;
          *(_QWORD *)(v18 + 16) = 0;
          v26 = *(_QWORD *)(v24 + 8);
          v25 = v24 + 8;
          *(_QWORD *)v25 = 0;
          *(_QWORD *)(v18 + 8) = v26;
          LODWORD(v23) = *(_DWORD *)(v25 + 8);
          *(_DWORD *)(v25 + 8) = 0;
          *(_DWORD *)(v18 + 16) = (_DWORD)v23;
          LODWORD(v23) = *(_DWORD *)(v25 + 12);
          *(_DWORD *)(v25 + 12) = 0;
          *(_DWORD *)(v18 + 20) = (_DWORD)v23;
          v27 = *(unsigned int *)(v25 + 12);
          if ((_DWORD)v27)
          {
            v35 = *(WTF::StringImpl ***)v25;
            v36 = 8 * v27;
            do
            {
              v37 = *v35;
              *v35 = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                {
                  v38 = v36;
                  v40 = v35;
                  WTF::StringImpl::destroy(v37, v8);
                  v36 = v38;
                  v35 = v40;
                }
                else
                {
                  *(_DWORD *)v37 -= 2;
                }
              }
              ++v35;
              v36 -= 8;
            }
            while (v36);
          }
          v28 = *(WTF **)v25;
          if (*(_QWORD *)v25)
          {
            *(_QWORD *)v25 = 0;
            *(_DWORD *)(v25 + 8) = 0;
            WTF::fastFree(v28, v8);
          }
          v17 = *v12;
          *v12 = 0;
          if (!v17)
            goto LABEL_25;
          if (*(_DWORD *)v17 == 2)
            goto LABEL_27;
          *(_DWORD *)v17 -= 2;
        }
      }
LABEL_25:
      if (++v10 == v11)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash *this)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  const WTF::StringImpl *v5;
  int v6;
  unsigned int v7;
  int v8;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = WTF::ASCIICaseInsensitiveHash::hash(this, this);
  v6 = 0;
  do
  {
    v7 = v4 & v3;
    v8 = WTF::equal(*(WTF **)(v2 + 24 * (v4 & v3)), 0, v5);
    v4 = ++v6 + v7;
  }
  while (!v8);
  return v2 + 24 * v7;
}

unsigned int *WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;

  if ((unsigned int *)a2 != a1)
  {
    v4 = (WTF::StringImpl *)*(unsigned int *)(a2 + 12);
    if (a1[3] > v4)
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v4);
    }
    else if (v4 > a1[2])
    {
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
    }
    std::copy_n[abi:sn180100]<WebCore::RegistrableDomain const*,unsigned long,WebCore::RegistrableDomain*,0>(*(WTF::StringImpl ***)a2, (WTF::StringImpl *)a1[3], *(WTF::StringImpl ***)a1);
    v5 = a1[3];
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v5 != (_DWORD)v6)
    {
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8 * v5);
      v8 = (_DWORD **)(*(_QWORD *)a2 + 8 * v5);
      v9 = 8 * v6 - 8 * v5;
      do
      {
        v10 = *v8;
        if (*v8)
          *v10 += 2;
        *v7++ = v10;
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    a1[3] = v6;
  }
  return a1;
}

WTF::StringImpl **std::copy_n[abi:sn180100]<WebCore::RegistrableDomain const*,unsigned long,WebCore::RegistrableDomain*,0>(WTF::StringImpl **a1, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (a2)
  {
    v5 = 8 * (_QWORD)a2;
    do
    {
      v6 = *a1;
      if (*a1)
        *(_DWORD *)v6 += 2;
      v7 = *a3;
      *a3 = v6;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++a1;
      ++a3;
      v5 -= 8;
    }
    while (v5);
  }
  return a3;
}

uint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (WTF::StringImpl **)v6;
      v9 = 8 * v5;
      v10 = (WTF::StringImpl **)v4;
      v11 = (WTF::StringImpl **)v4;
      do
      {
        v12 = *v10;
        *v11++ = 0;
        *v8++ = v12;
        WebCore::ContentType::~ContentType(v10, v7);
        v10 = v11;
        v9 -= 8;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Quirks::requestStorageAccessAndHandleClick(WTF::CompletionHandler<void ()(WebCore::Quirks::ShouldDispatchClick)> &&)::$_0::operator()(WebCore::StorageAccessWasGranted)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3401E28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Quirks::requestStorageAccessAndHandleClick(WTF::CompletionHandler<void ()(WebCore::Quirks::ShouldDispatchClick)> &&)::$_0::operator()(WebCore::StorageAccessWasGranted)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3401E28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Quirks::requestStorageAccessAndHandleClick(WTF::CompletionHandler<void ()(WebCore::Quirks::ShouldDispatchClick)> &&)::$_0::operator()(WebCore::StorageAccessWasGranted)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(_QWORD *a1, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*a1 != -1)
        a1 = (_QWORD *)WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair((uint64_t)a1, a2);
      a1 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Quirks::triggerOptionalStorageAccessIframeQuirk(WTF::URL const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::StorageAccessWasGranted>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3401E50;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Quirks::triggerOptionalStorageAccessIframeQuirk(WTF::URL const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::StorageAccessWasGranted>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3401E50;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Quirks::triggerOptionalStorageAccessIframeQuirk(WTF::URL const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::StorageAccessWasGranted>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Quirks::triggerOptionalStorageAccessQuirk(WebCore::Element &,WebCore::PlatformMouseEvent const&,WTF::AtomString const&,int,WebCore::Element*,BOOL,WebCore::IsSyntheticClick)::$_3,void,WebCore::Quirks::ShouldDispatchClick>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = off_1E3401EC8;
  v3 = (WTF::StringImpl *)a1[20];
  a1[20] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[17];
  a1[17] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v9)
      {
        v12 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v9));
        v5 = v12;
      }
      v10 = *(WTF **)(v5 + 16);
      if (v10)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v11 = v5;
        WTF::fastFree(v10, a2);
        v5 = v11;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Quirks::triggerOptionalStorageAccessQuirk(WebCore::Element &,WebCore::PlatformMouseEvent const&,WTF::AtomString const&,int,WebCore::Element*,BOOL,WebCore::IsSyntheticClick)::$_3,void,WebCore::Quirks::ShouldDispatchClick>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<WebCore::Quirks::triggerOptionalStorageAccessQuirk(WebCore::Element &,WebCore::PlatformMouseEvent const&,WTF::AtomString const&,int,WebCore::Element*,BOOL,WebCore::IsSyntheticClick)::$_3,void,WebCore::Quirks::ShouldDispatchClick>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Quirks::triggerOptionalStorageAccessQuirk(WebCore::Element &,WebCore::PlatformMouseEvent const&,WTF::AtomString const&,int,WebCore::Element*,BOOL,WebCore::IsSyntheticClick)::$_3,void,WebCore::Quirks::ShouldDispatchClick>::call(unsigned int *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)(v3 + 24) = v4 + 2;
      if ((_DWORD)a2)
      {
        result = (unsigned int *)WebCore::Element::dispatchMouseEvent(v3, (uint64_t)(result + 8), (WebCore *)(result + 40), result[42], *((_QWORD *)result + 22), 1);
        v4 = *(_DWORD *)(v3 + 24) - 2;
      }
      if (v4)
      {
        *(_DWORD *)(v3 + 24) = v4;
      }
      else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
    }
  }
  return result;
}

void *WebCore::RemoteDOMWindow::bisoHeap(WebCore::RemoteDOMWindow *this)
{
  return &WebCore::RemoteDOMWindow::bisoHeap(void)::heap;
}

uint64_t WebCore::RemoteDOMWindow::operator new(uint64_t this)
{
  if (this == 72)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::RemoteDOMWindow::RemoteDOMWindow(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E33FE080;
  *(_OWORD *)(a1 + 32) = *a3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)a1 = off_1E3401EF0;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
    goto LABEL_12;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v9 = *(unsigned int **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v4;
  if (!v9)
    goto LABEL_12;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
LABEL_12:
    do
      v5 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v5 + 1, (unsigned int *)v4));
  }
  *(_QWORD *)(a1 + 64) = v4;
  return a1;
}

{
  uint64_t v4;
  unsigned int v5;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E33FE080;
  *(_OWORD *)(a1 + 32) = *a3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)a1 = off_1E3401EF0;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
    goto LABEL_12;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v9 = *(unsigned int **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v4;
  if (!v9)
    goto LABEL_12;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
LABEL_12:
    do
      v5 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v5 + 1, (unsigned int *)v4));
  }
  *(_QWORD *)(a1 + 64) = v4;
  return a1;
}

void WebCore::RemoteDOMWindow::~RemoteDOMWindow(WebCore::RemoteDOMWindow *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::DOMWindow::~DOMWindow(this, a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::DOMWindow::~DOMWindow(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::RemoteDOMWindow::closePage(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 64);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 264) + 64))(*(_QWORD *)(v2 + 264));
  }
  return this;
}

uint64_t WebCore::RemoteDOMWindow::length(WebCore::RemoteDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *((_QWORD *)this + 8);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 88);
  if (!v3)
    return 0;
  LODWORD(result) = 0;
  do
  {
    result = (result + 1);
    v3 = *(_QWORD *)(v3 + 72);
  }
  while (v3);
  return result;
}

unsigned int *WebCore::RemoteDOMWindow::postMessage@<X0>(unsigned int *this@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  WTF *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::SecurityOriginData *v34;
  _QWORD *v35;
  WTF::StringImpl **v36;
  WTF *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  WTF *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  unsigned int v51;
  unsigned int v52;
  _QWORD *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  void *v60;
  uint64_t *v61;
  uint64_t v62;
  WebCore::RemoteDOMWindow *v63;
  WTF::StringImpl **v64;
  WTF *v65;
  int v66;
  int v67;
  WTF::StringImpl **v68;
  uint64_t v69;
  int v70;
  WTF *v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  int v75;
  char v76;
  WTF::StringImpl **v77;
  WTF *v78;
  int v79;
  WTF::StringImpl *v80;
  _BYTE v81[24];
  int v82;
  char v83;
  _QWORD v84[3];
  int v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 + 72);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return this;
  }
  if (*(_BYTE *)(v8 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x196054EB8);
  }
  v9 = (WebCore::Node *)(v8 - 288);
  v10 = (_DWORD *)(v8 - 264);
  *(_DWORD *)(v8 - 264) += 2;
  v11 = *(_QWORD *)(v8 + 240);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      v16 = this;
      v17 = (unsigned int *)(v12 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      WebCore::DOMWindow::createTargetOriginForPostMessage((WTF::StringImpl **)(a5 + 16), (WebCore::Document *)(v8 - 288), (uint64_t)&v73);
      if (v75)
      {
        if (v75 == 1)
        {
          v20 = v74;
          v74 = 0;
          *(_BYTE *)a6 = (_BYTE)v73;
          a6[1] = v20;
          v21 = 1;
          *((_BYTE *)a6 + 16) = 1;
LABEL_57:
          this = (unsigned int *)((uint64_t (*)(_QWORD *, WTF **))off_1E3402780[v21])(v84, &v73);
          do
          {
LABEL_58:
            v51 = __ldaxr(v17);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v17));
          if (!v52)
          {
            atomic_store(1u, v17);
            v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v53 = off_1E31FE290;
            v53[1] = v17;
            v84[0] = v53;
            WTF::ensureOnMainThread();
            this = (unsigned int *)v84[0];
            v84[0] = 0;
            if (this)
              this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
          }
          goto LABEL_60;
        }
        goto LABEL_92;
      }
      LOBYTE(v84[0]) = 0;
      v86 = 0;
      v22 = v73;
      v73 = 0;
      if (v22)
      {
        v85 = -1;
        v23 = *((unsigned int *)v22 + 8);
        if ((_DWORD)v23 != -1)
        {
          ((void (*)(WTF::StringImpl ***, _QWORD *, char *))off_1E3402750[v23])(&v77, v84, (char *)v22 + 8);
          v85 = v23;
        }
        v86 = 1;
        do
        {
          v24 = __ldaxr((unsigned int *)v22);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, (unsigned int *)v22));
        v9 = (WebCore::Node *)(v8 - 288);
        if (!v25)
        {
          atomic_store(1u, (unsigned int *)v22);
          v54 = (WTF::StringImpl *)*((_QWORD *)v22 + 6);
          *((_QWORD *)v22 + 6) = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v19);
            else
              *(_DWORD *)v54 -= 2;
          }
          v55 = (WTF::StringImpl *)*((_QWORD *)v22 + 5);
          *((_QWORD *)v22 + 5) = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, v19);
            else
              *(_DWORD *)v55 -= 2;
          }
          v56 = *((unsigned int *)v22 + 8);
          if ((_DWORD)v56 != -1)
            ((void (*)(WTF::StringImpl ***, char *))off_1E3402740[v56])(&v77, (char *)v22 + 8);
          *((_DWORD *)v22 + 8) = -1;
          WTF::fastFree(v22, v19);
          v9 = (WebCore::Node *)(v8 - 288);
        }
      }
      v71 = 0;
      v72 = 0;
      WebCore::SerializedScriptValue::create(a2, a4, a5, (uint64_t)&v71, 0, 0, 2, (uint64_t)&v68);
      if (v70)
      {
        v10 = (_DWORD *)(v8 - 264);
        if (v70 == 1)
        {
          v27 = v69;
          v69 = 0;
          *(_BYTE *)a6 = (_BYTE)v68;
          a6[1] = v27;
          v28 = 1;
          *((_BYTE *)a6 + 16) = 1;
          goto LABEL_49;
        }
LABEL_92:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_93:
        WTF::HashSet<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTableTraits>::~HashSet((uint64_t **)&v80, v26);
        v63 = (WebCore::RemoteDOMWindow *)std::__throw_bad_variant_access[abi:sn180100]();
        return (unsigned int *)WebCore::RemoteDOMWindow::frame(v63);
      }
      if (HIDWORD(v72))
      {
        v80 = 0;
        v58 = (uint64_t *)v71;
        v59 = 8 * HIDWORD(v72);
        while (*(_BYTE *)(*v58 + 58))
        {
          WTF::HashTable<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>>::add((uint64_t *)&v80, v58, (uint64_t)&v77);
          if (!(_BYTE)v79)
            break;
          ++v58;
          v59 -= 8;
          if (!v59)
          {
            WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::MessagePort::disentanglePorts(WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v64, (uint64_t *)&v71);
            v77 = v64;
            v29 = (int)v65;
            v30 = HIDWORD(v65);
            v78 = v65;
            v79 = 0;
            WTF::HashSet<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTableTraits>::~HashSet((uint64_t **)&v80, v60);
            goto LABEL_23;
          }
        }
        goto LABEL_93;
      }
      v29 = 0;
      v30 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 0;
LABEL_23:
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v8 - 96), (WTF::StringImpl *)v26);
      v32 = *(unsigned int *)(v31 + 32);
      if ((_DWORD)v32 == 1)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      else
      {
        if ((_DWORD)v32 == -1)
          goto LABEL_92;
        v33 = v31;
        v34 = (WebCore::SecurityOriginData *)(v31 + 8);
        v64 = &v80;
        v35 = (_QWORD *)((uint64_t (*)(WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v32])(&v64, v31 + 8);
        if (MEMORY[0x19AEA53F4](*v35, "file", 4) && *(_BYTE *)(v33 + 59))
          WTF::String::String(&v80, (uint64_t)"null", 5);
        else
          WebCore::SecurityOriginData::toString(v34, &v80);
      }
      v36 = v68;
      v68 = 0;
      v37 = (WTF *)v77;
      v77 = 0;
      v78 = 0;
      v64 = v36;
      v65 = v37;
      v66 = v29;
      v67 = v30;
      v38 = *((_QWORD *)v16 + 8);
      if (v38)
      {
        v39 = *(_QWORD **)(v38 + 8);
        if (v39)
        {
          v40 = v39[33];
          v41 = *(_QWORD *)(v12 + 32);
          v42 = *(_QWORD *)(v12 + 40);
          v43 = v39[4];
          v44 = v39[5];
          v81[0] = 0;
          v83 = 0;
          if (v86)
          {
            v82 = -1;
            v45 = v85;
            if (v85 != -1)
            {
              ((void (*)(char *, _BYTE *, _QWORD *))off_1E3402750[v85])(&v76, v81, v84);
              v82 = v45;
            }
            v83 = 1;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, uint64_t, uint64_t, _BYTE *, WTF::StringImpl ***))(*(_QWORD *)v40 + 40))(v40, v41, v42, &v80, v43, v44, v81, &v64);
          if (v83)
          {
            if (v82 != -1)
              ((void (*)(char *, _BYTE *))off_1E3402740[v82])(&v76, v81);
            v82 = -1;
          }
        }
      }
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      v46 = v65;
      if (v65)
      {
        v65 = 0;
        v66 = 0;
        WTF::fastFree(v46, a2);
      }
      v10 = (_DWORD *)(v8 - 264);
      v47 = (unsigned int *)v64;
      v64 = 0;
      if (v47)
      {
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
        {
          atomic_store(1u, v47);
          WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v47 + 2), a2);
          WTF::fastFree((WTF *)v47, v57);
        }
      }
      v50 = v80;
      v80 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, a2);
        else
          *(_DWORD *)v50 -= 2;
      }
      if (v79 != -1)
        ((void (*)(WTF::StringImpl ***, WTF::StringImpl ***))off_1E3402760[v79])(&v64, &v77);
      v28 = v70;
      if (v70 == -1)
      {
LABEL_50:
        if (HIDWORD(v72))
        {
          v61 = (uint64_t *)v71;
          v62 = 8 * HIDWORD(v72);
          do
          {
            v61 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v61, a2)+ 1;
            v62 -= 8;
          }
          while (v62);
        }
        this = (unsigned int *)v71;
        if (v71)
        {
          v71 = 0;
          LODWORD(v72) = 0;
          this = (unsigned int *)WTF::fastFree((WTF *)this, a2);
        }
        if (v86 && v85 != -1)
          this = (unsigned int *)((uint64_t (*)(WTF::StringImpl ***, _QWORD *))off_1E3402740[v85])(&v77, v84);
        v21 = v75;
        if (v75 == -1)
          goto LABEL_58;
        goto LABEL_57;
      }
LABEL_49:
      ((void (*)(WTF::StringImpl ***, WTF::StringImpl ***))off_1E3402770[v28])(&v77, &v68);
      goto LABEL_50;
    }
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
LABEL_60:
  if (*v10 == 2)
  {
    if ((*(_WORD *)(v8 - 258) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v9, a2);
  }
  else
  {
    *v10 -= 2;
  }
  return this;
}

uint64_t WebCore::RemoteDOMWindow::frame(WebCore::RemoteDOMWindow *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::RemoteDOMWindow::setLocation(uint64_t result, uint64_t a2, WTF::URL *a3, char a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::Node *v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  _QWORD *v40;

  v5 = *(_QWORD *)(a2 + 72);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x1960552F4);
      }
      v10 = (WebCore::Node *)(v6 - 288);
      v11 = (_DWORD *)(v6 - 264);
      *(_DWORD *)(v6 - 264) += 2;
      v12 = *(_QWORD *)(result + 64);
      if (v12)
      {
        v13 = *(unsigned int **)(v12 + 8);
        if (v13)
        {
          v14 = v13 + 2;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
          v16 = 0;
          goto LABEL_11;
        }
      }
      else
      {
        v13 = 0;
      }
      v16 = 1;
LABEL_11:
      result = WebCore::Document::canNavigate((WebCore::Document *)(v6 - 288), (WebCore::Frame *)v13, a3);
      if (!(_DWORD)result)
        goto LABEL_29;
      if ((a5 & 1) != 0 || !WTF::isMainThread((WTF *)result))
        goto LABEL_16;
      {
        WebCore::currentToken(void)::token = 0;
        v37 = 1;
LABEL_18:
        v19 = (_QWORD *)*((_QWORD *)v13 + 19);
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v6 - 96), v17);
        v21 = v20;
        WebCore::FrameLoader::nonSrcdocFrame(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v6 + 240) + 8) + 280), &v39);
        v22 = v39;
        if (v39)
        {
          v23 = *(WTF::StringImpl **)(*(_QWORD *)(v39 + 280) + 160);
          if (v23)
            *(_DWORD *)v23 += 2;
          v38 = v23;
          v39 = 0;
          v24 = (unsigned int *)(v22 + 8);
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            atomic_store(1u, v24);
            v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v35 = off_1E31FE290;
            v35[1] = v24;
            v40 = v35;
            WTF::ensureOnMainThread();
            v36 = (uint64_t)v40;
            v40 = 0;
            if (v36)
              (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          }
        }
        else
        {
          v33 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
            *(_DWORD *)v33 += 2;
          v38 = v33;
        }
        v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v27 = off_1E33F7EC8;
        v40 = v27;
        v28 = v19;
        v10 = (WebCore::Node *)(v6 - 288);
        WebCore::NavigationScheduler::scheduleLocationChange(v28, (WebCore::Document *)(v6 - 288), v21, a3, &v38, v37, a5, a4, (uint64_t *)&v40);
        v29 = (uint64_t)v40;
        v40 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        result = (uint64_t)v38;
        v38 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
            if ((v16 & 1) == 0)
              goto LABEL_30;
            goto LABEL_33;
          }
          *(_DWORD *)result -= 2;
        }
LABEL_29:
        if ((v16 & 1) == 0)
        {
LABEL_30:
          v30 = v13 + 2;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            atomic_store(1u, v30);
            v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v34 = off_1E31FE290;
            v34[1] = v30;
            v40 = v34;
            WTF::ensureOnMainThread();
            result = (uint64_t)v40;
            v40 = 0;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          }
        }
LABEL_33:
        if (*v11 == 2)
        {
          if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
            return (uint64_t)WebCore::Node::removedLastRef(v10, v17);
        }
        else
        {
          *v11 -= 2;
        }
        return result;
      }
      if (!WebCore::currentToken(void)::token || *(_DWORD *)(WebCore::currentToken(void)::token + 68))
LABEL_16:
        v18 = 1;
      else
        v18 = *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1;
      v37 = v18;
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t WebCore::RemoteFrame::createMainFrame@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t result;

  v12 = WTF::fastMalloc((WTF *)0x138);
  result = WebCore::RemoteFrame::RemoteFrame(v12, a1, a2, a3, a4, 0, 0, 0, a5);
  *a6 = result;
  return result;
}

uint64_t WebCore::RemoteFrame::RemoteFrame(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, WebCore::HTMLFrameOwnerElement *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return WebCore::RemoteFrame::RemoteFrame(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

{
  unint64_t v12;
  uint64_t v13;
  uint64_t IdentifierInternal;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _DWORD *v22;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  char **v29;
  char *v30;

  *(_QWORD *)WebCore::Frame::Frame(a1, a2, a4, a5, 1, a6, a7, a9) = off_1E3401F80;
  v12 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v12 != -1)
  {
    v30 = &v28;
    v29 = &v30;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v29, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (WTF::ObjectIdentifierGeneric<WebCore::WindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x1960557FCLL);
  }
  v13 = WebCore::Process::globalIdentifier;
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v15 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v15 + 24) = 1;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 32) = v13;
  *(_QWORD *)(v15 + 40) = IdentifierInternal;
  *(_QWORD *)(v15 + 48) = 0;
  *(_BYTE *)(v15 + 56) = 1;
  *(_QWORD *)v15 = off_1E3401EF0;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
    goto LABEL_25;
  v16 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = a1;
  v25 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  if (!v25)
    goto LABEL_25;
  do
  {
    v26 = __ldaxr(v25);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v25));
  if (!v27)
  {
    atomic_store(1u, v25);
    WTF::fastFree((WTF *)v25, v24);
  }
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
LABEL_25:
    do
      v17 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v17 + 1, (unsigned int *)v16));
  }
  *(_QWORD *)(v15 + 64) = v16;
  *(_QWORD *)(a1 + 248) = v15;
  *(_QWORD *)(a1 + 256) = 0;
  v18 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  *(_QWORD *)(a1 + 272) = a8;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_WORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 306) = 1;
  v19 = WTF::fastMalloc((WTF *)0x150);
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)(v19 + 16) = 0;
  *(_WORD *)(v19 + 24) = 0;
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_WORD *)(v19 + 104) = 257;
  *(_BYTE *)(v19 + 106) = 1;
  *(_DWORD *)(v19 + 107) = 0;
  *(_WORD *)(v19 + 111) = 0;
  *(_QWORD *)(v19 + 120) = 0;
  *(_QWORD *)(v19 + 128) = 0;
  *(_DWORD *)(v19 + 136) = 0;
  *(_BYTE *)(v19 + 172) = 0;
  *(_BYTE *)(v19 + 196) = 0;
  *(_BYTE *)(v19 + 272) = 0;
  *(_BYTE *)(v19 + 276) = 0;
  *(_BYTE *)(v19 + 292) = 0;
  *(_QWORD *)(v19 + 144) = 0;
  *(_QWORD *)(v19 + 152) = 0;
  *(_WORD *)(v19 + 168) = 0;
  *(_QWORD *)(v19 + 160) = 0;
  *(_OWORD *)(v19 + 200) = 0u;
  *(_OWORD *)(v19 + 216) = 0u;
  *(_OWORD *)(v19 + 232) = 0u;
  *(_OWORD *)(v19 + 248) = 0u;
  *(_BYTE *)(v19 + 264) = 0;
  *(_QWORD *)(v19 + 309) = 0;
  *(_QWORD *)(v19 + 296) = 0;
  *(_QWORD *)(v19 + 304) = 0;
  *(_BYTE *)(v19 + 317) = 1;
  *(_DWORD *)(v19 + 318) = 0;
  *(_BYTE *)(v19 + 322) = 0;
  *(_QWORD *)v19 = off_1E3402020;
  v20 = (unsigned int *)(a1 + 8);
  *(_QWORD *)(v19 + 64) = &unk_1E3402360;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  *(_QWORD *)(v19 + 328) = a1;
  v22 = *(_DWORD **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v19;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  return a1;
}

uint64_t WebCore::RemoteFrame::createSubframe@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t result;

  v12 = WTF::fastMalloc((WTF *)0x138);
  result = WebCore::RemoteFrame::RemoteFrame(v12, a1, a2, a3, a4, 0, a5, 0, 0);
  *a6 = result;
  return result;
}

uint64_t WebCore::RemoteFrame::createSubframeWithContentsInAnotherProcess@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WebCore::HTMLFrameOwnerElement *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v16 = WTF::fastMalloc((WTF *)0x138);
  v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a5 + 5) + 8) + 528);
  if (v17)
    v18 = *(_QWORD *)(v17 + 8);
  else
    v18 = 0;
  if (a7)
    v19 = a6;
  else
    v19 = 0;
  result = WebCore::RemoteFrame::RemoteFrame(v16, a1, a2, a3, a4, a5, v18, v19, 0);
  *a8 = result;
  return result;
}

_DWORD *WebCore::RemoteFrame::setView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *result;

  v3 = *a2;
  *a2 = 0;
  result = *(_DWORD **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v3;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void WebCore::RemoteFrame::~RemoteFrame(WebCore::RemoteFrame *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v7 = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v8)
  {
    if (v8[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 72))(v8);
    else
      --v8[6];
  }
  WebCore::Frame::~Frame((WebCore::WindowProxy **)this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::RemoteFrame::~RemoteFrame(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::RemoteFrame::virtualWindow(WebCore::RemoteFrame *this)
{
  return *((_QWORD *)this + 31);
}

_DWORD *WebCore::RemoteFrame::disconnectView(WebCore::RemoteFrame *this)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::RemoteFrame::didFinishLoadInAnotherProcess(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(this + 306) = 0;
  v1 = *(_QWORD *)(this + 120);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return WebCore::Document::checkCompleted(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8));
  }
  return this;
}

uint64_t WebCore::RemoteFrame::preventsParentFromBeingComplete(WebCore::RemoteFrame *this)
{
  return *((unsigned __int8 *)this + 306);
}

uint64_t WebCore::RemoteFrame::changeLocation(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 264) + 48))(*(_QWORD *)(a1 + 264));
}

uint64_t WebCore::RemoteFrame::virtualView(WebCore::RemoteFrame *this)
{
  return *((_QWORD *)this + 32);
}

uint64_t WebCore::RemoteFrame::loaderClient(WebCore::RemoteFrame *this)
{
  return *((_QWORD *)this + 33);
}

unsigned int *WebCore::RemoteFrame::frameDetached(WebCore::RemoteFrame *this)
{
  void *v2;
  uint64_t v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 33) + 24))(*((_QWORD *)this + 33));
  v3 = *((_QWORD *)this + 31);
  result = *(unsigned int **)(v3 + 64);
  *(_QWORD *)(v3 + 64) = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v2);
    }
  }
  return result;
}

uint64_t WebCore::RemoteFrame::customUserAgent@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 280);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::RemoteFrame::customUserAgentAsSiteSpecificQuirks@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 288);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::RemoteFrame::customNavigatorPlatform@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 296);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::RemoteFrame::documentURLForConsoleLog(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 264) + 112))(*(_QWORD *)(a1 + 264));
}

uint64_t WebCore::RemoteFrame::advancedPrivacyProtections(WebCore::RemoteFrame *this)
{
  return *((unsigned __int16 *)this + 152);
}

uint64_t WebCore::RemoteFrameView::RemoteFrameView(uint64_t this, WebCore::RemoteFrame *a2)
{
  unsigned int *v2;
  unsigned int v3;

  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)(this + 16) = 0;
  *(_WORD *)(this + 24) = 0;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  *(_WORD *)(this + 104) = 257;
  *(_BYTE *)(this + 106) = 1;
  *(_DWORD *)(this + 107) = 0;
  *(_WORD *)(this + 111) = 0;
  *(_QWORD *)(this + 120) = 0;
  *(_QWORD *)(this + 128) = 0;
  *(_DWORD *)(this + 136) = 0;
  *(_BYTE *)(this + 172) = 0;
  *(_BYTE *)(this + 196) = 0;
  *(_BYTE *)(this + 272) = 0;
  *(_BYTE *)(this + 276) = 0;
  *(_BYTE *)(this + 292) = 0;
  *(_QWORD *)(this + 144) = 0;
  *(_QWORD *)(this + 152) = 0;
  *(_WORD *)(this + 168) = 0;
  *(_QWORD *)(this + 160) = 0;
  *(_OWORD *)(this + 200) = 0u;
  *(_OWORD *)(this + 216) = 0u;
  *(_OWORD *)(this + 232) = 0u;
  *(_OWORD *)(this + 248) = 0u;
  *(_BYTE *)(this + 264) = 0;
  *(_QWORD *)(this + 309) = 0;
  *(_QWORD *)(this + 296) = 0;
  *(_QWORD *)(this + 304) = 0;
  *(_BYTE *)(this + 317) = 1;
  *(_DWORD *)(this + 318) = 0;
  *(_BYTE *)(this + 322) = 0;
  *(_QWORD *)this = off_1E3402020;
  v2 = (unsigned int *)((char *)a2 + 8);
  *(_QWORD *)(this + 64) = &unk_1E3402360;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *(_QWORD *)(this + 328) = a2;
  return this;
}

{
  unsigned int *v2;
  unsigned int v3;

  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)(this + 16) = 0;
  *(_WORD *)(this + 24) = 0;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  *(_WORD *)(this + 104) = 257;
  *(_BYTE *)(this + 106) = 1;
  *(_DWORD *)(this + 107) = 0;
  *(_WORD *)(this + 111) = 0;
  *(_QWORD *)(this + 120) = 0;
  *(_QWORD *)(this + 128) = 0;
  *(_DWORD *)(this + 136) = 0;
  *(_BYTE *)(this + 172) = 0;
  *(_BYTE *)(this + 196) = 0;
  *(_BYTE *)(this + 272) = 0;
  *(_BYTE *)(this + 276) = 0;
  *(_BYTE *)(this + 292) = 0;
  *(_QWORD *)(this + 144) = 0;
  *(_QWORD *)(this + 152) = 0;
  *(_WORD *)(this + 168) = 0;
  *(_QWORD *)(this + 160) = 0;
  *(_OWORD *)(this + 200) = 0u;
  *(_OWORD *)(this + 216) = 0u;
  *(_OWORD *)(this + 232) = 0u;
  *(_OWORD *)(this + 248) = 0u;
  *(_BYTE *)(this + 264) = 0;
  *(_QWORD *)(this + 309) = 0;
  *(_QWORD *)(this + 296) = 0;
  *(_QWORD *)(this + 304) = 0;
  *(_BYTE *)(this + 317) = 1;
  *(_DWORD *)(this + 318) = 0;
  *(_BYTE *)(this + 322) = 0;
  *(_QWORD *)this = off_1E3402020;
  v2 = (unsigned int *)((char *)a2 + 8);
  *(_QWORD *)(this + 64) = &unk_1E3402360;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *(_QWORD *)(this + 328) = a2;
  return this;
}

uint64_t WebCore::RemoteFrameView::setFrameRect(WebCore::RemoteFrameView *this, const WebCore::IntRect *a2)
{
  void *v4;
  uint64_t v5;
  const CGRect *v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  void *v12;
  CGRect v13;

  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    v12 = v4;
    if (objc_msgSend(v4, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v12, "superview"), "frame");
    else
      objc_msgSend(v12, "frame");
    v13.origin.x = v8;
    v13.origin.y = v9;
    v13.size.width = v10;
    v13.size.height = v11;
    WebCore::enclosingIntRect(&v13, v7);
  }
  else
  {
    v5 = *((_QWORD *)this + 7);
  }
  if (*((_QWORD *)a2 + 1) != v5)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 41) + 264) + 32))(*(_QWORD *)(*((_QWORD *)this + 41) + 264), *((_QWORD *)a2 + 1));
  return WebCore::ScrollView::setFrameRect(this, a2);
}

uint64_t WebCore::RemoteFrameView::isScrollableOrRubberbandable(WebCore::RemoteFrameView *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::RemoteFrameView::isScrollableOrRubberbandable(WebCore::RemoteFrameView *this)
{
  return 0;
}

uint64_t WebCore::RemoteFrameView::hasScrollableOrRubberbandableAncestor(WebCore::RemoteFrameView *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::RemoteFrameView::hasScrollableOrRubberbandableAncestor(WebCore::RemoteFrameView *this)
{
  return 0;
}

uint64_t WebCore::RemoteFrameView::shouldPlaceVerticalScrollbarOnLeft(WebCore::RemoteFrameView *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::RemoteFrameView::shouldPlaceVerticalScrollbarOnLeft(WebCore::RemoteFrameView *this)
{
  return 0;
}

uint64_t WebCore::RemoteFrameView::windowClipRect(WebCore::RemoteFrameView *this)
{
  return 0;
}

uint64_t WebCore::RemoteFrameView::scrollContentsFastPath(WebCore::RemoteFrameView *this, const WebCore::IntSize *a2, const WebCore::IntRect *a3, const WebCore::IntRect *a4)
{
  return 0;
}

uint64_t WebCore::RemoteFrameView::isVerticalDocument(WebCore::RemoteFrameView *this)
{
  return 0;
}

uint64_t WebCore::RemoteFrameView::isFlippedDocument(WebCore::RemoteFrameView *this)
{
  return 0;
}

uint64_t WebCore::RemoteFrameView::shouldDeferScrollUpdateAfterContentSizeChange(WebCore::RemoteFrameView *this)
{
  return 0;
}

WTF::StringImpl *WebCore::RemoteFrameView::writeRenderTreeAsText(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 328)
                                                                                               + 264)
                                                                                 + 56))(&v5, *(_QWORD *)(*(_QWORD *)(a1 + 328) + 264), *(int *)(a2 + 24), a3);
  WTF::TextStream::operator<<();
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::RemoteFrameView::frame(WebCore::RemoteFrameView *this)
{
  return *((_QWORD *)this + 41);
}

WebCore::RenderingUpdateScheduler *WebCore::RenderingUpdateScheduler::RenderingUpdateScheduler(WebCore::RenderingUpdateScheduler *this, WebCore::Page *a2)
{
  int v3;
  uint64_t updated;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  uint64_t v11;

  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 5) = 60;
  *((_BYTE *)this + 24) = 0;
  *(_QWORD *)this = off_1E34026C0;
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_BYTE *)this + 52) = 0;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 6) + 16))(*((_QWORD *)a2 + 6));
  updated = WebCore::Page::preferredRenderingUpdateFramesPerSecond(*((_QWORD *)this + 4), 3);
  if ((updated & 0xFF00000000) != 0)
  {
    if (*((_DWORD *)this + 5) != (_DWORD)updated)
    {
      *((_DWORD *)this + 5) = updated;
      {
        qword_1ECE90E50 = 0;
        unk_1ECE90E58 = 0;
        WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager = (uint64_t)&off_1E340B488;
      }
      v5 = WebCore::DisplayRefreshMonitorManager::monitorForClient((WebCore::DisplayRefreshMonitorManager *)&WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager, this);
      if (v5)
      {
        v6 = (unsigned int *)v5;
        v7 = (unsigned int *)(v5 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        WebCore::DisplayRefreshMonitor::computeMaxPreferredFramesPerSecond(v5);
        do
          v9 = __ldaxr(v7);
        while (__stlxr(v9 - 1, v7));
        if (v9 == 1)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
        }
      }
    }
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  *((_BYTE *)this + 52) = v10;
  v11 = *((_QWORD *)this + 5);
  if (v11)
  {
    *((_QWORD *)this + 5) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    WebCore::RenderingUpdateScheduler::scheduleRenderingUpdate(this);
  }
  {
    qword_1ECE90E50 = 0;
    unk_1ECE90E58 = 0;
    WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager = (uint64_t)&off_1E340B488;
  }
  WebCore::DisplayRefreshMonitorManager::windowScreenDidChange((unsigned int *)&WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager, v3, this);
  return this;
}

unsigned int *WebCore::RenderingUpdateScheduler::windowScreenDidChange(WebCore::RenderingUpdateScheduler *this, int a2)
{
  uint64_t updated;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  uint64_t v11;

  updated = WebCore::Page::preferredRenderingUpdateFramesPerSecond(*((_QWORD *)this + 4), 3);
  if ((updated & 0xFF00000000) != 0)
  {
    if (*((_DWORD *)this + 5) != (_DWORD)updated)
    {
      *((_DWORD *)this + 5) = updated;
      {
        qword_1ECE90E50 = 0;
        unk_1ECE90E58 = 0;
        WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager = (uint64_t)&off_1E340B488;
      }
      v5 = WebCore::DisplayRefreshMonitorManager::monitorForClient((WebCore::DisplayRefreshMonitorManager *)&WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager, this);
      if (v5)
      {
        v6 = (unsigned int *)v5;
        v7 = (unsigned int *)(v5 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        WebCore::DisplayRefreshMonitor::computeMaxPreferredFramesPerSecond(v5);
        do
          v9 = __ldaxr(v7);
        while (__stlxr(v9 - 1, v7));
        if (v9 == 1)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
        }
      }
    }
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  *((_BYTE *)this + 52) = v10;
  v11 = *((_QWORD *)this + 5);
  if (v11)
  {
    *((_QWORD *)this + 5) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    WebCore::RenderingUpdateScheduler::scheduleRenderingUpdate(this);
  }
  {
    qword_1ECE90E50 = 0;
    unk_1ECE90E58 = 0;
    WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager = (uint64_t)&off_1E340B488;
  }
  return WebCore::DisplayRefreshMonitorManager::windowScreenDidChange((unsigned int *)&WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager, a2, this);
}

_QWORD *WebCore::RenderingUpdateScheduler::adjustRenderingUpdateFrequency(WebCore::RenderingUpdateScheduler *this)
{
  uint64_t updated;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  _QWORD *result;

  updated = WebCore::Page::preferredRenderingUpdateFramesPerSecond(*((_QWORD *)this + 4), 3);
  if ((updated & 0xFF00000000) != 0)
  {
    if (*((_DWORD *)this + 5) != (_DWORD)updated)
    {
      *((_DWORD *)this + 5) = updated;
      {
        qword_1ECE90E50 = 0;
        unk_1ECE90E58 = 0;
        WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager = (uint64_t)&off_1E340B488;
      }
      v3 = WebCore::DisplayRefreshMonitorManager::monitorForClient((WebCore::DisplayRefreshMonitorManager *)&WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager, this);
      if (v3)
      {
        v4 = (unsigned int *)v3;
        v5 = (unsigned int *)(v3 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        WebCore::DisplayRefreshMonitor::computeMaxPreferredFramesPerSecond(v3);
        do
          v7 = __ldaxr(v5);
        while (__stlxr(v7 - 1, v5));
        if (v7 == 1)
        {
          atomic_store(1u, v4 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
        }
      }
    }
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  *((_BYTE *)this + 52) = v8;
  result = (_QWORD *)*((_QWORD *)this + 5);
  if (result)
  {
    *((_QWORD *)this + 5) = 0;
    (*(void (**)(_QWORD *))(*result + 8))(result);
    return WebCore::RenderingUpdateScheduler::scheduleRenderingUpdate(this);
  }
  return result;
}

_QWORD *WebCore::RenderingUpdateScheduler::scheduleRenderingUpdate(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  double updated;
  uint64_t v11;
  unint64_t StatusReg;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  WTF::MonotonicTime *v16;
  double v17;
  char v18;

  if (!this[5])
  {
    v1 = (uint64_t)this;
    if (!*((_BYTE *)this + 24))
    {
      v2 = this[4];
      if ((*(_WORD *)(v2 + 658) & 4) == 0)
        return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 48) + 16) + 1016))(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16));
      kdebug_trace();
      if (*(_BYTE *)(v1 + 52))
        goto LABEL_16;
      {
        qword_1ECE90E50 = 0;
        unk_1ECE90E58 = 0;
        WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager = (uint64_t)&off_1E340B488;
      }
      v3 = WebCore::DisplayRefreshMonitorManager::monitorForClient((WebCore::DisplayRefreshMonitorManager *)&WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager, (WebCore::DisplayRefreshMonitorClient *)v1);
      if (!v3)
        goto LABEL_16;
      v4 = (unsigned int *)v3;
      v5 = (unsigned int *)(v3 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      *(_BYTE *)(v1 + 24) = 1;
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      do
      {
        v8 = __ldaxr(v5);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v5));
      if (v9)
      {
        if ((v7 & 1) == 0)
        {
LABEL_16:
          updated = WebCore::Page::preferredRenderingUpdateInterval(*(WebCore::Page **)(v1 + 32));
          v11 = WTF::fastMalloc((WTF *)0x38);
          *(_QWORD *)v11 = off_1E3407128;
          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          *(_OWORD *)(v11 + 8) = 0u;
          *(_OWORD *)(v11 + 24) = 0u;
          v13 = *(unsigned int **)(StatusReg + 736);
          if (!v13)
            v13 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
          *(_QWORD *)(v11 + 40) = v13;
          *(_QWORD *)v11 = off_1E31F7378;
          v15 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v15 = off_1E34027A0;
          *(_OWORD *)(v15 + 8) = xmmword_1969F5F70;
          *(_QWORD *)(v15 + 24) = v1;
          *(_QWORD *)(v11 + 48) = v15;
          v16 = *(WTF::MonotonicTime **)(v1 + 40);
          *(_QWORD *)(v1 + 40) = v11;
          if (v16)
          {
            v16 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v16 + 8))(v16);
            v11 = *(_QWORD *)(v1 + 40);
          }
          *(_QWORD *)(v11 + 24) = 0;
          WTF::MonotonicTime::now(v16);
          WebCore::TimerBase::setNextFireTime(v11, updated + v17);
        }
      }
      else
      {
        atomic_store(1u, v4 + 2);
        v18 = v7;
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
        if ((v18 & 1) == 0)
          goto LABEL_16;
      }
      return WebCore::Page::didScheduleRenderingUpdate(*(WebCore::Page **)(v1 + 32));
    }
  }
  return this;
}

uint64_t WebCore::RenderingUpdateScheduler::displayRefreshMonitorFactory(WebCore::RenderingUpdateScheduler *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 48) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 912))(v1);
}

_QWORD *WebCore::RenderingUpdateScheduler::displayRefreshFired(WebCore::RenderingUpdateScheduler *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  int v6;

  kdebug_trace();
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 48) + 16);
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 1008))(v3, *((unsigned int *)this + 12)))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 48) + 16);
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1016))(v4);
    v6 = 0;
  }
  else
  {
    result = WebCore::RenderingUpdateScheduler::scheduleRenderingUpdate(this);
    v6 = *((_DWORD *)this + 12) + 1;
  }
  *((_DWORD *)this + 12) = v6;
  return result;
}

void WebCore::ResizeObserver::~ResizeObserver(WebCore::ResizeObserver *this, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  WebCore::ResizeObserver::removeAllTargets((uint64_t)this, a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(unsigned int *)(v5 + 2108);
      if ((_DWORD)v6)
      {
        v7 = (_QWORD *)(*(_QWORD *)(v5 + 2096) + 8);
        while (1)
        {
          v8 = *(v7 - 1);
          if (v8)
          {
            if (*(WebCore::ResizeObserver **)(v8 + 8) == this)
              break;
          }
          ++v7;
          if (!--v6)
            goto LABEL_14;
        }
        *(v7 - 1) = 0;
        do
        {
          v9 = __ldaxr((unsigned int *)v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unsigned int *)v8));
        if (!v10)
        {
          atomic_store(1u, (unsigned int *)v8);
          WTF::fastFree((WTF *)v8, v3);
        }
        v11 = *(unsigned int *)(v5 + 2108);
        v12 = *(_QWORD *)(v5 + 2096) + 8 * v11;
        while (v7 != (_QWORD *)v12)
        {
          *(v7 - 1) = *v7;
          *v7++ = 0;
        }
        *(_DWORD *)(v5 + 2108) = v11 - 1;
      }
    }
  }
LABEL_14:
  WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, v3);
  WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v13);
  v15 = *((unsigned int *)this + 17);
  if ((_DWORD)v15)
    WTF::VectorDestructor<true,WTF::Ref<WebCore::ResizeObservation,WTF::RawPtrTraits<WebCore::ResizeObservation>,WTF::DefaultRefDerefTraits<WebCore::ResizeObservation>>>::destruct(*((_QWORD **)this + 7), (_QWORD *)(*((_QWORD *)this + 7) + 8 * v15));
  v16 = (WTF *)*((_QWORD *)this + 7);
  if (v16)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v16, v14);
  }
  v17 = *((unsigned int *)this + 13);
  if ((_DWORD)v17)
    WTF::VectorDestructor<true,WTF::Ref<WebCore::ResizeObservation,WTF::RawPtrTraits<WebCore::ResizeObservation>,WTF::DefaultRefDerefTraits<WebCore::ResizeObservation>>>::destruct(*((_QWORD **)this + 5), (_QWORD *)(*((_QWORD *)this + 5) + 8 * v17));
  v18 = (WTF *)*((_QWORD *)this + 5);
  if (v18)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v18, v14);
  }
  v19 = *((unsigned int *)this + 8);
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore22ResizeObserverCallbackENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEPFvRKNS6_6VectorINS6_3RefINS8_19ResizeObserverEntryENSA_ISH_EENSC_ISH_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEERNS8_14ResizeObserverEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSW_EEEDcOSX_DpOT0____fmatrix[v19])(&v31, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v20 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      v27 = *(unsigned int *)(v20 + 28);
      if ((_DWORD)v27)
      {
        v30 = v20;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v20 + 16), (WTF::StringImpl *)(*(_QWORD *)(v20 + 16) + 32 * v27));
        v20 = v30;
      }
      v28 = *(WTF **)(v20 + 16);
      if (v28)
      {
        *(_QWORD *)(v20 + 16) = 0;
        *(_DWORD *)(v20 + 24) = 0;
        v29 = v20;
        WTF::fastFree(v28, v14);
        v20 = v29;
      }
      WTF::fastFree((WTF *)v20, v14);
    }
  }
  v23 = *((_QWORD *)this + 1);
  if (v23)
  {
    *(_QWORD *)(v23 + 8) = 0;
    v24 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, v14);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

unsigned int *WebCore::ResizeObserver::observeInternal(unsigned int *result, WebCore::Element *this, int a3)
{
  char v3;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  bmalloc::api *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::Page *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  WTF *v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  WebCore::Element *v51;
  bmalloc::api *v52[2];
  char v53;
  int v54;

  v3 = a3;
  v5 = (uint64_t)result;
  v6 = result + 10;
  v7 = result[13];
  if (!(_DWORD)v7)
    goto LABEL_6;
  v8 = 0;
  while (1)
  {
    v9 = *(_QWORD *)(*v6 + 8 * v8);
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (*(WebCore::Element **)(v10 + 8) == this)
        break;
    }
    if (v7 == ++v8)
      goto LABEL_6;
  }
  if (v8 >= v7)
  {
    __break(0xC471u);
    JUMPOUT(0x196056AE8);
  }
  if (*(unsigned __int8 *)(v9 + 40) != a3)
  {
    WebCore::ResizeObserver::unobserve((WebCore::ResizeObserver *)result, this);
LABEL_6:
    v11 = WebCore::Element::ensureResizeObserverData(this);
    v12 = v11;
    v13 = *((unsigned int *)v11 + 3);
    if ((_DWORD)v13 == *((_DWORD *)v11 + 2))
    {
      WTF::Vector<WTF::WeakPtr<WebCore::ResizeObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v13 + 1);
      v14 = *((unsigned int *)v12 + 3);
      v15 = *v12;
      v16 = *(_QWORD *)(v5 + 8);
      if (v16)
        goto LABEL_64;
      v16 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = v5;
      v18 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = v16;
      if (!v18)
        goto LABEL_64;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v17);
      }
      v16 = *(_QWORD *)(v5 + 8);
      if (v16)
      {
LABEL_64:
        do
          v21 = __ldaxr((unsigned int *)v16);
        while (__stlxr(v21 + 1, (unsigned int *)v16));
      }
      *(_QWORD *)(v15 + 8 * v14) = v16;
    }
    else
    {
      WTF::WeakPtr<WebCore::ResizeObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)(*v11 + 8 * v13), v5);
    }
    ++*((_DWORD *)v12 + 3);
    v22 = bmalloc::api::isoAllocate();
    *(_DWORD *)v22 = 1;
    v23 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v23)
    {
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
    }
    *(_QWORD *)(v22 + 8) = v23;
    *(_QWORD *)&v25 = 0x3F0000003FLL;
    *((_QWORD *)&v25 + 1) = 0x3F0000003FLL;
    *(_OWORD *)(v22 + 16) = v25;
    *(_QWORD *)(v22 + 32) = 0x3F0000003FLL;
    *(_BYTE *)(v22 + 40) = v3;
    v52[0] = (bmalloc::api *)v22;
    v26 = *(unsigned int *)(v5 + 52);
    if ((_DWORD)v26 == *(_DWORD *)(v5 + 48))
    {
      v27 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v26 + 1, (unint64_t)v52);
      v29 = *(unsigned int *)(v5 + 52);
      v30 = *(_QWORD *)(v5 + 40);
      v31 = *v27;
      *v27 = 0;
      *(_QWORD *)(v30 + 8 * v29) = v31;
      v32 = v52[0];
      *(_DWORD *)(v5 + 52) = v29 + 1;
      v52[0] = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1)
        {
          v44 = *((_QWORD *)v32 + 1);
          *((_QWORD *)v32 + 1) = 0;
          if (v44)
          {
            do
            {
              v45 = __ldaxr((unsigned int *)v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, (unsigned int *)v44));
            if (!v46)
            {
              atomic_store(1u, (unsigned int *)v44);
              v49 = *(unsigned int *)(v44 + 28);
              if ((_DWORD)v49)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v44 + 16), (WTF::StringImpl *)(*(_QWORD *)(v44 + 16) + 32 * v49));
              v50 = *(WTF **)(v44 + 16);
              if (v50)
              {
                *(_QWORD *)(v44 + 16) = 0;
                *(_DWORD *)(v44 + 24) = 0;
                WTF::fastFree(v50, v28);
              }
              WTF::fastFree((WTF *)v44, v28);
            }
          }
          bmalloc::api::isoDeallocate(v32, v28);
        }
        else
        {
          --*(_DWORD *)v32;
        }
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8 * v26) = v22;
      *(_DWORD *)(v5 + 52) = v26 + 1;
    }
    v33 = (uint64_t *)(v5 + 88);
    v34 = *(unsigned int *)(v5 + 100);
    if ((_DWORD)v34 == *(_DWORD *)(v5 + 96))
    {
      result = (unsigned int *)WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>((uint64_t)v33, (uint64_t)this);
    }
    else
    {
      v35 = *v33;
      *((_DWORD *)this + 6) += 2;
      *(_QWORD *)(v35 + 8 * v34) = this;
      {
        WebCore::GCReachableRefMap::map(void)::map = 0;
      }
      v51 = this;
      v54 = 0;
      result = (unsigned int *)WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v51, &v54, (uint64_t)v52);
      ++*((_DWORD *)v52[0] + 2);
      if (v53)
        *((_QWORD *)this + 2) |= 0x4000000000000uLL;
      ++*(_DWORD *)(v5 + 100);
    }
    v36 = *(_QWORD *)(v5 + 16);
    if (v36)
    {
      result = *(unsigned int **)(v36 + 8);
      if (result)
      {
        if (!*(_DWORD *)(v5 + 32))
        {
          result = WebCore::Document::addResizeObserver((WebCore::Document *)result, (WebCore::ResizeObserver *)v5);
          v37 = *(_QWORD *)(v5 + 16);
          if (v37)
            v38 = *(_QWORD **)(v37 + 8);
          else
            v38 = 0;
          if ((v38[258] & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((v38[258] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          {
            v39 = 512;
          }
          else
          {
            result = (unsigned int *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v38 + 254));
            v39 = 768;
          }
          v40 = v38[66];
          if (v40)
          {
            v41 = *(_QWORD *)(v40 + 8);
            if (v41)
            {
              v42 = *(_QWORD *)(v41 + 24);
              if (v42)
              {
                v43 = *(WebCore::Page **)(v42 + 8);
                if (v43)
                {
                  ++*(_DWORD *)v43;
                  result = (unsigned int *)WebCore::Page::scheduleRenderingUpdate((uint64_t)v43, v39);
                  if (*(_DWORD *)v43 == 1)
                  {
                    WebCore::Page::~Page(v43);
                    return (unsigned int *)WTF::fastFree(v47, v48);
                  }
                  else
                  {
                    --*(_DWORD *)v43;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::ResizeObserver::unobserve(WebCore::ResizeObserver *this, WebCore::Element *a2)
{
  uint64_t result;

  result = WebCore::ResizeObserver::removeTarget(this, a2);
  if ((_DWORD)result)
    return WebCore::ResizeObserver::removeObservation(this, a2);
  return result;
}

uint64_t WebCore::ResizeObserver::removeTarget(WebCore::ResizeObserver *this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;

  v2 = *((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    v4 = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x88);
    if (!v4 || (v5 = *(unsigned int *)(v4 + 12), !(_DWORD)v5))
    {
      LOBYTE(v2) = 0;
      return v2 & 1;
    }
    v6 = *(_QWORD **)v4;
    if (this)
    {
      v11 = 0;
      v9 = 1;
      while (1)
      {
        v10 = v6[v11];
        if (v10)
        {
          if (*(WebCore::ResizeObserver **)(v10 + 8) == this)
            break;
        }
        LOBYTE(v2) = 0;
        v9 = ++v11 < v5;
        if (v5 == v11)
          return v2 & 1;
      }
LABEL_10:
      v8 = &v6[v11];
      *v8 = 0;
      do
      {
        v12 = __ldaxr((unsigned int *)v10);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v10));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v10);
        v18 = v8;
        v19 = v4;
        v17 = v9;
        WTF::fastFree((WTF *)v10, a2);
        v8 = v18;
        v4 = v19;
        LOBYTE(v2) = v17;
LABEL_14:
        v14 = v8 + 1;
        v15 = *(unsigned int *)(v4 + 12);
        v16 = *(_QWORD *)v4 + 8 * v15;
        while (v14 != (_QWORD *)v16)
        {
          *(v14 - 1) = *v14;
          *v14++ = 0;
        }
        *(_DWORD *)(v4 + 12) = v15 - 1;
        return v2 & 1;
      }
    }
    else
    {
      v7 = 1;
      v8 = *(_QWORD **)v4;
      v9 = 1;
      while (1)
      {
        v10 = *v8;
        if (!*v8)
          break;
        if (!*(_QWORD *)(v10 + 8))
        {
          v11 = v7 - 1;
          goto LABEL_10;
        }
        LOBYTE(v2) = 0;
        v9 = v7++ < v5;
        ++v8;
        if (v7 - v5 == 1)
          return v2 & 1;
      }
      *v8 = 0;
    }
    LOBYTE(v2) = v9;
    goto LABEL_14;
  }
  return v2 & 1;
}

BOOL WebCore::ResizeObserver::removeObservation(WebCore::ResizeObserver *this, const WebCore::Element *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const WebCore::Element *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  bmalloc::api *v12;
  uint64_t v13;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  const WebCore::Element *v21;

  v4 = *((unsigned int *)this + 25);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 11);
    while ((const WebCore::Element *)*v5 != a2)
    {
      ++v5;
      if (!--v4)
        goto LABEL_14;
    }
    {
      WebCore::GCReachableRefMap::map(void)::map = 0;
    }
    v21 = a2;
    if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v21))*((_QWORD *)a2 + 2) &= ~0x4000000000000uLL;
    v6 = (const WebCore::Element *)*v5;
    *v5 = 0;
    if (v6)
    {
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v6);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
    }
    WTF::VectorMover<false,WebCore::GCReachableRef<WebCore::Element,void>>::moveOverlapping((unint64_t)(v5 + 1), (uint64_t *)(*((_QWORD *)this + 11) + 8 * *((unsigned int *)this + 25)), v5);
    --*((_DWORD *)this + 25);
  }
LABEL_14:
  v7 = *((unsigned int *)this + 13);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 5);
    v10 = v9 + 8;
    v11 = 1;
    while (1)
    {
      v12 = *(bmalloc::api **)(v9 + 8 * v8);
      v13 = *((_QWORD *)v12 + 1);
      if (v13)
      {
        if (*(const WebCore::Element **)(v13 + 8) == a2)
          break;
      }
      v11 = ++v8 < v7;
      v10 += 8;
      if (v7 == v8)
        return 0;
    }
    *(_QWORD *)(v9 + 8 * v8) = 0;
    if (*(_DWORD *)v12 == 1)
    {
      v15 = (unsigned int *)*((_QWORD *)v12 + 1);
      *((_QWORD *)v12 + 1) = 0;
      if (v15)
      {
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          v20 = (WTF *)v15;
          v18 = v15[7];
          if ((_DWORD)v18)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v20 + 2), (WTF::StringImpl *)(*((_QWORD *)v20 + 2) + 32 * v18));
          v19 = (WTF *)*((_QWORD *)v20 + 2);
          if (v19)
          {
            *((_QWORD *)v20 + 2) = 0;
            *((_DWORD *)v20 + 6) = 0;
            WTF::fastFree(v19, a2);
          }
          WTF::fastFree(v20, a2);
        }
      }
      bmalloc::api::isoDeallocate(v12, a2);
      v7 = *((unsigned int *)this + 13);
    }
    else
    {
      --*(_DWORD *)v12;
    }
    memmove((void *)(v9 + 8 * v8), (const void *)(v9 + 8 * v8 + 8), *((_QWORD *)this + 5) + 8 * v7 - v10);
    --*((_DWORD *)this + 13);
  }
  else
  {
    return 0;
  }
  return v11;
}

uint64_t WebCore::ResizeObserver::removeAllTargets(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v2 = this;
  v3 = *(unsigned int *)(this + 52);
  if ((_DWORD)v3)
  {
    v6 = *(_QWORD *)(this + 40);
    v7 = v6 + 8 * v3;
    do
    {
      this = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 8) + 8);
      v8 = *(_DWORD *)(this + 24) + 2;
      *(_DWORD *)(this + 24) = v8;
      if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v9 = *(_QWORD *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x88);
        if (v9)
        {
          v10 = *(unsigned int *)(v9 + 12);
          if ((_DWORD)v10)
          {
            v11 = *(_QWORD **)v9;
            while (1)
            {
              v12 = *v11;
              if (*v11)
              {
                if (*(_QWORD *)(v12 + 8) == v2)
                  break;
              }
              ++v11;
              if (!--v10)
                goto LABEL_17;
            }
            *v11 = 0;
            do
            {
              v13 = __ldaxr((unsigned int *)v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, (unsigned int *)v12));
            if (!v14)
            {
              atomic_store(1u, (unsigned int *)v12);
              v21 = v9;
              v22 = this;
              v20 = v11;
              WTF::fastFree((WTF *)v12, a2);
              v11 = v20;
              v9 = v21;
              this = v22;
            }
            v15 = v11 + 1;
            v16 = *(unsigned int *)(v9 + 12);
            v17 = *(_QWORD *)v9 + 8 * v16;
            while (v15 != (_QWORD *)v17)
            {
              *(v15 - 1) = *v15;
              *v15++ = 0;
            }
            *(_DWORD *)(v9 + 12) = v16 - 1;
            v8 = *(_DWORD *)(this + 24);
          }
        }
      }
LABEL_17:
      if (v8 == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
      else
      {
        *(_DWORD *)(this + 24) = v8 - 2;
      }
      v6 += 8;
    }
    while (v6 != v7);
  }
  if (*(_DWORD *)(v2 + 80))
  {
    v18 = (uint64_t *)(v2 + 72);
    if (*(_DWORD *)(v2 + 84))
      WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(v2 + 72, 0);
    this = *v18;
    if (*v18)
    {
      *(_QWORD *)(v2 + 72) = 0;
      *(_DWORD *)(v2 + 80) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
  if (*(_DWORD *)(v2 + 64))
  {
    v4 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v4)
    {
      WTF::VectorDestructor<true,WTF::Ref<WebCore::ResizeObservation,WTF::RawPtrTraits<WebCore::ResizeObservation>,WTF::DefaultRefDerefTraits<WebCore::ResizeObservation>>>::destruct(*(_QWORD **)(v2 + 56), (_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4));
      *(_DWORD *)(v2 + 68) = 0;
    }
    this = *(_QWORD *)(v2 + 56);
    if (this)
    {
      *(_QWORD *)(v2 + 56) = 0;
      *(_DWORD *)(v2 + 64) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
  if (*(_DWORD *)(v2 + 96))
  {
    v19 = (uint64_t *)(v2 + 88);
    if (*(_DWORD *)(v2 + 100))
      WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(v2 + 88, 0);
    this = *v19;
    if (*v19)
    {
      *(_QWORD *)(v2 + 88) = 0;
      *(_DWORD *)(v2 + 96) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
  if (*(_DWORD *)(v2 + 48))
  {
    v5 = *(unsigned int *)(v2 + 52);
    this = *(_QWORD *)(v2 + 40);
    if ((_DWORD)v5)
    {
      WTF::VectorDestructor<true,WTF::Ref<WebCore::ResizeObservation,WTF::RawPtrTraits<WebCore::ResizeObservation>,WTF::DefaultRefDerefTraits<WebCore::ResizeObservation>>>::destruct((_QWORD *)this, (_QWORD *)(this + 8 * v5));
      *(_DWORD *)(v2 + 52) = 0;
      this = *(_QWORD *)(v2 + 40);
    }
    if (this)
    {
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 48) = 0;
      return WTF::fastFree((WTF *)this, a2);
    }
  }
  return this;
}

unint64_t WebCore::ResizeObserver::gatherObservations(WebCore::ResizeObserver *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  double v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  float v24;
  float v25;
  float v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  float v36;
  double v37;
  double v38;
  uint64_t v39;
  float v40;
  float v41;
  double v42;
  uint64_t v43;
  double v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v79;
  char v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  float v85;
  unsigned __int8 v86;
  int v87;

  *((_BYTE *)this + 104) = 0;
  v2 = *((unsigned int *)this + 13);
  if ((_DWORD)v2)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 5);
    v7 = &v6[v2];
    v3 = -1;
    while (1)
    {
      v8 = *v6;
      v9 = *(_QWORD *)(*(_QWORD *)(*v6 + 8) + 8);
      v10 = *(_QWORD *)(v9 + 64);
      v11 = v10 & 0xFFFFFFFFFFFFLL;
      if ((*(_WORD *)(v9 + 28) & 0x20) != 0)
      {
        if (v11)
        {
          if ((*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19605775CLL);
          }
          if (*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2E) != 103
            && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 680) + 680) & 0x800000000000) == 0)
          {
            WebCore::SVGElement::getBoundingBox((WebCore::SVGElement *)v9, (uint64_t)&v83);
            v13 = v86;
            if (v86)
            {
              v18 = v84 * 64.0;
              if (v18 >= 2147483650.0)
              {
                v13 = 0x7FFFFFFF;
              }
              else
              {
                v13 = (int)v18;
                if (v18 <= -2147483650.0)
                  v13 = 0x80000000;
              }
              v19 = v85 * 64.0;
              if (v19 >= 2147483650.0)
              {
                v20 = 0x7FFFFFFF00000000;
              }
              else if (v19 <= -2147483650.0)
              {
                v20 = 0x8000000000000000;
              }
              else
              {
                v20 = (unint64_t)(int)v19 << 32;
              }
            }
            else
            {
              v20 = 0;
            }
            v16 = v20 | v13;
            v12 = v16 >> 8;
            v14 = HIDWORD(v20);
            v15 = v13;
            goto LABEL_9;
          }
LABEL_7:
          if ((*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
          {
            v21 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 0x20);
            if (v21)
            {
              v22 = *(_QWORD *)(v21 + 8);
              if (v22)
              {
                if ((*(_BYTE *)(*(_QWORD *)(v22 + 104) + 239) & 0x18) != 0)
                  goto LABEL_15;
              }
            }
            v23 = WebCore::RenderBox::contentSize((WebCore::RenderBox *)(v10 & 0xFFFFFFFFFFFFLL));
            v24 = *(float *)(*(_QWORD *)(v11 + 104) + 184);
            v25 = (float)((float)(int)v23 * 0.015625) / v24;
            v26 = (float)((float)SHIDWORD(v23) * 0.015625) / v24;
            v27 = v25 * 64.0;
            v28 = (int)v27;
            if (v27 <= -2147483650.0)
              v28 = 0x80000000;
            if (v27 < 2147483650.0)
              v29 = v28;
            else
              v29 = 0x7FFFFFFFLL;
            v30 = v26 * 64.0;
            v31 = (unint64_t)(int)v30 << 32;
            if (v30 <= -2147483650.0)
              v31 = 0x8000000000000000;
            if (v30 < 2147483650.0)
              v32 = v31;
            else
              v32 = 0x7FFFFFFF00000000;
            v33 = ((*(_DWORD *)(v11 + 124) >> 13) & 6) - 2;
            v34 = WebCore::RenderBox::contentSize((WebCore::RenderBox *)v11);
            v35 = __ROR8__(v34, 32);
            if (v33 > 3)
              v35 = v34;
            v36 = *(float *)(*(_QWORD *)(v11 + 104) + 184);
            v37 = (float)((float)((float)(int)v35 * 0.015625) / v36) * 64.0;
            v13 = (int)v37;
            if (v37 <= -2147483650.0)
              v13 = 0x80000000;
            if (v37 >= 2147483650.0)
              v13 = 0x7FFFFFFF;
            v38 = (float)((float)((float)SHIDWORD(v35) * 0.015625) / v36) * 64.0;
            LODWORD(v14) = (int)v38;
            if (v38 <= -2147483650.0)
              LODWORD(v14) = 0x80000000;
            if (v38 < 2147483650.0)
              v14 = v14;
            else
              v14 = 0x7FFFFFFFLL;
            v39 = __ROR8__(*(_QWORD *)(v11 + 160), 32);
            if (((*(_DWORD *)(v11 + 124) >> 13) & 6u) - 2 > 3)
              v39 = *(_QWORD *)(v11 + 160);
            v40 = (float)((float)(int)v39 * 0.015625) / v36;
            v41 = (float)((float)SHIDWORD(v39) * 0.015625) / v36;
            v42 = v40 * 64.0;
            v43 = (int)v42;
            if (v42 <= -2147483650.0)
              v43 = 0x80000000;
            if (v42 >= 2147483650.0)
              v43 = 0x7FFFFFFFLL;
            v44 = v41 * 64.0;
            if (v44 >= 2147483650.0)
            {
              v45 = 0x7FFFFFFF00000000;
            }
            else if (v44 <= -2147483650.0)
            {
              v45 = 0x8000000000000000;
            }
            else
            {
              v45 = (unint64_t)(int)v44 << 32;
            }
            v15 = v29;
            v46 = v32 | v29;
            v16 = v45 | v43;
            v12 = v46 >> 8;
            goto LABEL_9;
          }
        }
      }
      else if (v11)
      {
        goto LABEL_7;
      }
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
LABEL_9:
      if (*(_BYTE *)(v8 + 40) == 1)
      {
        if (*(_DWORD *)(v8 + 24) == v13 && *(_DWORD *)(v8 + 28) == (_DWORD)v14)
          goto LABEL_15;
      }
      else
      {
        if (*(_BYTE *)(v8 + 40))
          goto LABEL_15;
        if (*(_DWORD *)(v8 + 32) == (_DWORD)v16 && *(_DWORD *)(v8 + 36) == HIDWORD(v16))
          goto LABEL_15;
      }
      v47 = *(_QWORD *)(*v6 + 8);
      if (!v47 || (v48 = *(_QWORD *)(v47 + 8)) == 0)
      {
LABEL_64:
        *((_BYTE *)this + 104) = 1;
        goto LABEL_15;
      }
      v81 = v15;
      v49 = 0;
      v79 = v13 | (unint64_t)(v14 << 32);
      do
      {
        v50 = v49 + 1;
        v51 = v48;
        while (1)
        {
          v49 = v50;
          v52 = *(_QWORD *)(v51 + 32);
          if (v52)
          {
            if ((*(_WORD *)(v52 + 28) & 8) != 0)
            {
              v53 = *(_QWORD *)(v52 + 72) & 0xFFFFFFFFFFFFLL;
              if (v53)
              {
                v57 = *(_QWORD *)(v53 + 88);
                if (v57)
                {
                  v77 = *(_QWORD *)(v57 + 224);
                  if (v77)
                  {
                    v54 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v77 + 16))(v77, v51);
                    if (v54)
                      goto LABEL_75;
                  }
                }
              }
            }
          }
          if ((~*(unsigned __int16 *)(v51 + 28) & 0x408) != 0
            || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 368))(v51))
          {
            break;
          }
          v56 = *(_QWORD *)(v51 + 112);
          if (!v56)
            goto LABEL_82;
LABEL_79:
          v54 = *(_QWORD *)(v56 + 8);
LABEL_75:
          v50 = v49 + 1;
          v51 = v54;
          if (!v54)
            goto LABEL_82;
        }
        v54 = *(_QWORD *)(v51 + 32);
        if (!v54)
          goto LABEL_82;
        v55 = *(_WORD *)(v54 + 28);
        if ((v55 & 0x80) == 0)
        {
          if ((v55 & 8) == 0)
            goto LABEL_82;
          goto LABEL_75;
        }
        v56 = *(_QWORD *)(v54 + 200);
        if (v56)
          goto LABEL_79;
LABEL_82:
        v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 40) + 8) + 528);
        if (!v58)
          break;
        v59 = *(_QWORD *)(v58 + 8);
        if (!v59)
          break;
        v60 = *(_QWORD *)(v59 + 120);
        if (!v60)
          break;
        v48 = *(_QWORD *)(v60 + 8);
      }
      while (v48);
      if (v49 <= a2)
        goto LABEL_64;
      v61 = *v6;
      *(_BYTE *)(v61 + 16) = v81;
      *(_DWORD *)(v61 + 17) = v12;
      *(_BYTE *)(v61 + 23) = BYTE6(v12);
      *(_WORD *)(v61 + 21) = WORD2(v12);
      *(_QWORD *)(v61 + 24) = v79;
      *(_QWORD *)(v61 + 32) = v16;
      v62 = (_DWORD *)*v6;
      v63 = *((unsigned int *)this + 17);
      if ((_DWORD)v63 == *((_DWORD *)this + 16))
      {
        v64 = v63 + (v63 >> 2);
        if (v64 >= 0x10)
          v65 = v64 + 1;
        else
          v65 = 16;
        if (v65 <= v63 + 1)
          v66 = v63 + 1;
        else
          v66 = v65;
        if (v66 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19605779CLL);
        }
        v67 = (void *)*((_QWORD *)this + 7);
        v68 = (void *)WTF::fastMalloc((WTF *)(8 * v66));
        *((_DWORD *)this + 16) = v66;
        *((_QWORD *)this + 7) = v68;
        memcpy(v68, v67, 8 * v63);
        if (v67)
        {
          if (*((void **)this + 7) == v67)
          {
            *((_QWORD *)this + 7) = 0;
            *((_DWORD *)this + 16) = 0;
          }
          WTF::fastFree((WTF *)v67, v69);
        }
        v63 = *((unsigned int *)this + 17);
        v70 = (_QWORD *)(*((_QWORD *)this + 7) + 8 * v63);
      }
      else
      {
        v70 = (_QWORD *)(*((_QWORD *)this + 7) + 8 * v63);
      }
      ++*v62;
      *v70 = v62;
      *((_DWORD *)this + 17) = v63 + 1;
      v71 = *(_QWORD *)(*v6 + 8);
      if (v71)
      {
        v76 = *(_QWORD *)(v71 + 8);
        if (v76)
          *(_DWORD *)(v76 + 24) += 2;
      }
      else
      {
        v76 = 0;
      }
      v72 = (uint64_t *)((char *)this + 72);
      v73 = *((unsigned int *)this + 21);
      if ((_DWORD)v73 == *((_DWORD *)this + 20))
      {
        WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>((uint64_t)v72, v76);
      }
      else
      {
        v74 = *v72;
        *(_DWORD *)(v76 + 24) += 2;
        *(_QWORD *)(v74 + 8 * v73) = v76;
        {
          WebCore::GCReachableRefMap::map(void)::map = 0;
        }
        v82 = v76;
        v87 = 0;
        WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v82, &v87, (uint64_t)&v83);
        ++*(_DWORD *)(v83 + 8);
        if (v86)
          *(_QWORD *)(v76 + 16) |= 0x4000000000000uLL;
        ++*((_DWORD *)this + 21);
      }
      if (*(_DWORD *)(v76 + 24) == 2)
      {
        if ((*(_WORD *)(v76 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v76, v75);
      }
      else
      {
        *(_DWORD *)(v76 + 24) -= 2;
      }
      if (v3 >= v49)
        v3 = v49;
LABEL_15:
      if (++v6 == v7)
        return v3;
    }
  }
  return -1;
}

WebCore::Node *WebCore::ResizeObserver::deliverObservations(WebCore::Node *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  unint64_t v5;
  WTF *v6;
  unint64_t v7;
  float32x2_t v8;
  uint64_t v9;
  int32x2_t *v10;
  int32x2_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  int32x2_t *v15;
  float v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  int v36;
  _DWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  WTF::StringImpl *v44;
  WebCore::ScriptExecutionContext *v45;
  WTF *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF *v54;
  WTF::StringImpl *v55;
  WTF *v56;
  void *v57;
  WTF::JSONImpl::Object *v58;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  WTF::StringImpl *v62;

  v2 = (uint64_t)this;
  v60 = 0;
  v61 = 0;
  v3 = *((unsigned int *)this + 17);
  if (!(_DWORD)v3)
  {
    LODWORD(v5) = 0;
LABEL_23:
    if (*(_DWORD *)(v2 + 64))
    {
      if ((_DWORD)v5)
      {
        WTF::VectorDestructor<true,WTF::Ref<WebCore::ResizeObservation,WTF::RawPtrTraits<WebCore::ResizeObservation>,WTF::DefaultRefDerefTraits<WebCore::ResizeObservation>>>::destruct(*(_QWORD **)(v2 + 56), (_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v5));
        *(_DWORD *)(v2 + 68) = 0;
      }
      v49 = *(WTF **)(v2 + 56);
      if (v49)
      {
        *(_QWORD *)(v2 + 56) = 0;
        *(_DWORD *)(v2 + 64) = 0;
        WTF::fastFree(v49, a2);
      }
    }
    v32 = *(WTF **)(v2 + 72);
    v33 = *(unsigned int *)(v2 + 84);
    *(_QWORD *)(v2 + 72) = 0;
    *(_QWORD *)(v2 + 80) = 0;
    v34 = *(WTF **)(v2 + 88);
    v35 = *(unsigned int *)(v2 + 100);
    *(_QWORD *)(v2 + 88) = 0;
    *(_QWORD *)(v2 + 96) = 0;
    v36 = *(_DWORD *)(v2 + 32);
    if (v36)
    {
      if (v36 == 1)
      {
        this = (WebCore::Node *)(*(uint64_t (**)(WTF **, uint64_t))(v2 + 24))(&v60, v2);
LABEL_40:
        if ((_DWORD)v35)
        {
          v50 = 8 * v35;
          v51 = v34;
          do
          {
            v52 = *(WTF::StringImpl **)v51;
            if (*(_QWORD *)v51)
            {
              {
                WebCore::GCReachableRefMap::map(void)::map = 0;
              }
              v62 = v52;
              if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v62))*((_QWORD *)v52 + 2) &= ~0x4000000000000uLL;
              this = *(WebCore::Node **)v51;
              *(_QWORD *)v51 = 0;
              if (this)
              {
                if (*((_DWORD *)this + 6) == 2)
                {
                  if ((*((_WORD *)this + 15) & 0x400) == 0)
                    this = (WebCore::Node *)WebCore::Node::removedLastRef(this, v38);
                }
                else
                {
                  *((_DWORD *)this + 6) -= 2;
                }
              }
            }
            else
            {
              *(_QWORD *)v51 = 0;
            }
            v51 = (WTF *)((char *)v51 + 8);
            v50 -= 8;
          }
          while (v50);
        }
        if (v34)
          this = (WebCore::Node *)WTF::fastFree(v34, v38);
        if ((_DWORD)v33)
        {
          v53 = 8 * v33;
          v54 = v32;
          do
          {
            v55 = *(WTF::StringImpl **)v54;
            if (*(_QWORD *)v54)
            {
              {
                WebCore::GCReachableRefMap::map(void)::map = 0;
              }
              v62 = v55;
              if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v62))*((_QWORD *)v55 + 2) &= ~0x4000000000000uLL;
              this = *(WebCore::Node **)v54;
              *(_QWORD *)v54 = 0;
              if (this)
              {
                if (*((_DWORD *)this + 6) == 2)
                {
                  if ((*((_WORD *)this + 15) & 0x400) == 0)
                    this = (WebCore::Node *)WebCore::Node::removedLastRef(this, v38);
                }
                else
                {
                  *((_DWORD *)this + 6) -= 2;
                }
              }
            }
            else
            {
              *(_QWORD *)v54 = 0;
            }
            v54 = (WTF *)((char *)v54 + 8);
            v53 -= 8;
          }
          while (v53);
        }
        if (v32)
          this = (WebCore::Node *)WTF::fastFree(v32, v38);
        v47 = v60;
        if (HIDWORD(v61))
        {
          v48 = 8 * HIDWORD(v61);
          do
          {
            this = *(WebCore::Node **)v47;
            *(_QWORD *)v47 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 1)
              {
                WebCore::ResizeObserverEntry::~ResizeObserverEntry(this, v38);
                this = (WebCore::Node *)WTF::fastFree(v56, v57);
              }
              else
              {
                --*(_DWORD *)this;
              }
            }
            v47 = (WTF *)((char *)v47 + 8);
            v48 -= 8;
          }
          while (v48);
          v47 = v60;
        }
        if (v47)
        {
          v60 = 0;
          LODWORD(v61) = 0;
          return (WebCore::Node *)WTF::fastFree(v47, v38);
        }
        return this;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    v37 = *(_DWORD **)(v2 + 24);
    if (v37)
      ++v37[4];
    this = (WebCore::Node *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v37 + 40))(v37);
    if ((_DWORD)this)
    {
      v39 = *((_QWORD *)v37 + 1);
      if (v39)
      {
        v40 = *(_QWORD *)(v39 + 8);
        if (v40)
        {
          v41 = (WebCore::InspectorInstrumentation *)(v40 - 96);
          WebCore::ScriptExecutionContext::ref(v40 - 96);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v58 = (WTF::JSONImpl::Object *)WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42);
            if (v58)
              WebCore::InspectorInstrumentation::willFireObserverCallbackImpl(v58, (WebCore::TimelineRecordFactory *)&v62, (uint64_t)v41);
          }
          v44 = v62;
          v62 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v42);
            else
              *(_DWORD *)v44 -= 2;
          }
          (*(void (**)(_DWORD *, uint64_t, WTF **, uint64_t))(*(_QWORD *)v37 + 48))(v37, v2, &v60, v2);
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v59 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v45);
            if (v59)
              WebCore::InspectorInstrumentation::didFireObserverCallbackImpl(v59);
          }
          this = (WebCore::Node *)WebCore::ScriptExecutionContext::deref(v41);
        }
      }
    }
    if (v37[4] == 1)
      this = (WebCore::Node *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v37 + 16))(v37);
    else
      --v37[4];
    goto LABEL_40;
  }
  if (!(v3 >> 29))
  {
    v4 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
    LODWORD(v61) = v3;
    v60 = v4;
    LODWORD(v5) = *(_DWORD *)(v2 + 68);
    if (!(_DWORD)v5)
      goto LABEL_23;
    v6 = v4;
    v7 = 0;
    v8 = (float32x2_t)vdup_n_s32(0x3C800000u);
    while (1)
    {
      v9 = *(_QWORD *)(v2 + 56);
      v10 = *(int32x2_t **)(v9 + 8 * v7);
      v11 = v10[1];
      if (v11)
      {
        v12 = *(_QWORD *)(*(_QWORD *)&v11 + 8);
        if ((*(_WORD *)(v12 + 28) & 0x20) != 0)
        {
LABEL_92:
          v13 = 0.0;
          goto LABEL_9;
        }
      }
      else
      {
        v12 = 0;
        if ((MEMORY[0x1C] & 0x20) != 0)
          goto LABEL_92;
      }
      v13 = 0.0;
      v14 = *(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL;
      if (v14 && (*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      {
        v16 = (float)(*(int (**)(uint64_t))(*(_QWORD *)v14 + 944))(*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL)
            * 0.015625;
        v13 = (float)(*(int (**)(uint64_t))(*(_QWORD *)v14 + 928))(v14) * 0.015625;
        v15 = *(int32x2_t **)(v9 + 8 * v7);
        goto LABEL_10;
      }
LABEL_9:
      v15 = *(int32x2_t **)(v9 + 8 * v7);
      v16 = 0.0;
LABEL_10:
      v17 = v10[2];
      v18 = v15[3];
      v19 = v15[4];
      v20 = WTF::fastMalloc((WTF *)0x38);
      v21 = v20;
      *(_DWORD *)v20 = 1;
      if (v12)
        *(_DWORD *)(v12 + 24) += 2;
      *(_QWORD *)(v20 + 8) = v12;
      v22 = bmalloc::api::isoAllocate();
      *(_QWORD *)v22 = 0;
      *(_DWORD *)(v22 + 8) = 1;
      *(double *)(v22 + 16) = v16;
      *(double *)(v22 + 24) = v13;
      *(float64x2_t *)(v22 + 32) = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32(v17), v8));
      *(_QWORD *)(v21 + 16) = v22;
      v23 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v23 + 8) = 1;
      *(_QWORD *)v23 = off_1E3402818;
      *(float64x2_t *)(v23 + 16) = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32(v19), v8));
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0;
      v24 = WTF::fastMalloc((WTF *)8);
      *(_DWORD *)(v21 + 32) = 1;
      *(_QWORD *)(v21 + 24) = v24;
      v25 = *(unsigned int *)(v21 + 36);
      v26 = *(_DWORD *)(v23 + 8);
      *(_DWORD *)(v23 + 8) = v26 + 1;
      *(_QWORD *)(v24 + 8 * v25) = v23;
      *(_DWORD *)(v21 + 36) = v25 + 1;
      if (v26)
        *(_DWORD *)(v23 + 8) = v26;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      v27 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v27 + 8) = 1;
      *(_QWORD *)v27 = off_1E3402818;
      *(float64x2_t *)(v27 + 16) = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32(v18), v8));
      *(_QWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      v28 = WTF::fastMalloc((WTF *)8);
      *(_DWORD *)(v21 + 48) = 1;
      *(_QWORD *)(v21 + 40) = v28;
      v29 = *(unsigned int *)(v21 + 52);
      v30 = *(_DWORD *)(v27 + 8);
      *(_DWORD *)(v27 + 8) = v30 + 1;
      *(_QWORD *)(v28 + 8 * v29) = v27;
      *(_DWORD *)(v21 + 52) = v29 + 1;
      if (v30)
        *(_DWORD *)(v27 + 8) = v30;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      v31 = v7 + 1;
      *((_QWORD *)v6 + v7) = v21;
      v5 = *(unsigned int *)(v2 + 68);
      v7 = v31;
      if (v31 >= v5)
      {
        HIDWORD(v61) = v31;
        goto LABEL_23;
      }
    }
  }
  __break(0xC471u);
  return this;
}

BOOL WebCore::ResizeObserver::isReachableFromOpaqueRoots(WebCore::ResizeObserver *this, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Node *v14;
  WebCore::Node *v15;

  v4 = *((unsigned int *)this + 13);
  if ((_DWORD)v4)
  {
    v7 = *((_QWORD *)this + 5);
    v8 = 8 * v4;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)v7 + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v15 = (*(_BYTE *)(v10 + 22) & 8) != 0
              ? *(WebCore::Node **)(*(_QWORD *)(v10 + 40) + 8)
              : WebCore::Node::traverseToOpaqueRoot((WebCore::Node *)v10);
          if ((JSC::AbstractSlotVisitor::containsOpaqueRoot(a2, v15) & 1) != 0)
            break;
        }
      }
      v7 += 8;
      v8 -= 8;
      if (!v8)
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    v5 = *((unsigned int *)this + 21);
    if (!(_DWORD)v5)
      return *((_DWORD *)this + 25) != 0;
    v11 = (uint64_t *)*((_QWORD *)this + 9);
    v12 = 8 * v5;
    while (1)
    {
      v13 = *v11;
      if (*v11)
        v14 = (*(_BYTE *)(v13 + 22) & 8) != 0
            ? *(WebCore::Node **)(*(_QWORD *)(v13 + 40) + 8)
            : WebCore::Node::traverseToOpaqueRoot((WebCore::Node *)v13);
      else
        v14 = 0;
      if ((JSC::AbstractSlotVisitor::containsOpaqueRoot(a2, v14) & 1) != 0)
        break;
      ++v11;
      v12 -= 8;
      if (!v12)
        return *((_DWORD *)this + 25) != 0;
    }
  }
  return 1;
}

WebCore::ResourceUsageOverlay *WebCore::ResourceUsageOverlay::ResourceUsageOverlay(WebCore::ResourceUsageOverlay *this, WebCore::Page *a2)
{
  uint64_t v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v11;

  *(_QWORD *)this = off_1E34026F0;
  *((_QWORD *)this + 1) = a2;
  v3 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = off_1E3401600;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = this;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_QWORD *)(v3 + 80) = v5;
  *(_QWORD *)(v3 + 40) = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E3401888;
  v7[1] = WebCore::PageOverlay::fadeAnimationTimerFired;
  v7[2] = 0;
  v7[3] = v3;
  *(_QWORD *)(v3 + 88) = v7;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0x3FC999999999999ALL;
  *(_QWORD *)(v3 + 112) = 0x3F80000000000000;
  *(_WORD *)(v3 + 120) = 1;
  *(_BYTE *)(v3 + 122) = 1;
  *(_QWORD *)(v3 + 132) = 0;
  *(_QWORD *)(v3 + 124) = 0;
  v8 = ++WebCore::generatePageOverlayID(void)::pageOverlayID;
  *(_QWORD *)(v3 + 144) = 0x1104000000000000;
  *(_QWORD *)(v3 + 152) = v8;
  *(_BYTE *)(v3 + 160) = 1;
  *((_QWORD *)this + 2) = v3;
  *((_BYTE *)this + 24) = 0;
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E3402848;
  v9[1] = this;
  v11 = v9;
  WTF::callOnMainThread();
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  return this;
}

void WebCore::ResourceUsageOverlay::~ResourceUsageOverlay(WebCore::PageOverlay **this, void *a2)
{
  void *v3;
  WebCore::PageOverlay *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::PageOverlay *v7;
  WebCore::PageOverlay *v8;
  WebCore::PageOverlay *v9;
  WebCore::PageOverlay *v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;

  WebCore::ResourceUsageThread::removeObserver((WebCore::ResourceUsageThread *)this, a2);
  v4 = this[1];
  v5 = *(_QWORD *)(*((_QWORD *)v4 + 20) + 24);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v6 = *((_QWORD *)v4 + 154);
    v7 = this[2];
    if (v7)
      ++*((_DWORD *)v7 + 2);
    WebCore::PageOverlayController::uninstallPageOverlay(v6, (uint64_t)v7, 0);
    if (*((_DWORD *)v7 + 2) == 1)
    {
      WebCore::PageOverlay::~PageOverlay(v7, v3);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*((_DWORD *)v7 + 2);
    }
  }
  v8 = this[6];
  this[6] = 0;
  if (v8)
    CFRelease(v8);
  v9 = this[5];
  this[5] = 0;
  if (v9)
    CFRelease(v9);
  v10 = this[2];
  this[2] = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 2) == 1)
    {
      WebCore::PageOverlay::~PageOverlay(v10, v3);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*((_DWORD *)v10 + 2);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::ResourceUsageOverlay::~ResourceUsageOverlay(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::ResourceUsageOverlay::mouseEvent(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CGFloat v31;
  __n128 v32;
  WTF *v34;
  void *v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  const CGRect *v40;
  uint64_t v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  const CGRect *v46;
  uint64_t v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  const CGRect *v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  const CGRect *v57;
  uint64_t v58;
  CGRect v59;

  if (*(_BYTE *)(a3 + 48))
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    ++*(_DWORD *)(v6 + 8);
  v7 = *(unsigned __int8 *)(a3 + 8);
  if (v7 == 5)
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(int *)(v6 + 132) < 1 || *(int *)(v6 + 136) < 1)
      {
        WebCore::PageOverlay::bounds((WebCore::PageOverlay *)v6);
        v9 = v10;
      }
      else
      {
        v9 = *(_QWORD *)(v6 + 132);
      }
      v11 = *(_DWORD *)(a3 + 52);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = *(_DWORD *)(a3 + 56) - *(_DWORD *)(a1 + 32);
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(float *)(v14 + 372);
      if (v15 <= (float)v13)
        v16 = v13;
      else
        v16 = (int)v15;
      v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 160) + 56))(*(_QWORD *)(v14 + 160));
      v18 = *(void **)(v17 + 40);
      if (v18)
      {
        v58 = v17;
        if (objc_msgSend(v18, "conformsToProtocol:", &unk_1EE342188))
          v18 = (void *)objc_msgSend(v18, "superview");
        objc_msgSend(v18, "frame");
        v59.origin.x = v36;
        v59.origin.y = v37;
        v59.size.width = v38;
        v59.size.height = v39;
        WebCore::enclosingIntRect(&v59, v40);
        v17 = v58;
        v18 = *(void **)(v58 + 40);
      }
      else
      {
        v19 = *(_QWORD *)(v17 + 56);
      }
      v20 = (v11 - v12) & ~((v11 - v12) >> 31);
      if ((int)v20 + (int)v9 > (int)v19)
      {
        if (v18)
        {
          v47 = v17;
          if (objc_msgSend(v18, "conformsToProtocol:", &unk_1EE342188))
            v18 = (void *)objc_msgSend(v18, "superview");
          objc_msgSend(v18, "frame");
          v59.origin.x = v48;
          v59.origin.y = v49;
          v59.size.width = v50;
          v59.size.height = v51;
          WebCore::enclosingIntRect(&v59, v52);
          v17 = v47;
        }
        else
        {
          v21 = *(_QWORD *)(v17 + 56);
        }
        v20 = (v21 - v9);
        v18 = *(void **)(v17 + 40);
      }
      if (v18)
      {
        v41 = v17;
        if (objc_msgSend(v18, "conformsToProtocol:", &unk_1EE342188))
          v18 = (void *)objc_msgSend(v18, "superview");
        objc_msgSend(v18, "frame");
        v59.origin.x = v42;
        v59.origin.y = v43;
        v59.size.width = v44;
        v59.size.height = v45;
        WebCore::enclosingIntRect(&v59, v46);
        v17 = v41;
      }
      else
      {
        v22 = *(_QWORD *)(v17 + 56);
      }
      v23 = HIDWORD(v9);
      if ((int)v16 + HIDWORD(v9) <= SHIDWORD(v22))
      {
        v26 = v20 | (v16 << 32);
      }
      else
      {
        v24 = *(void **)(v17 + 40);
        if (v24)
        {
          if (objc_msgSend(*(id *)(v17 + 40), "conformsToProtocol:", &unk_1EE342188))
            v24 = (void *)objc_msgSend(v24, "superview");
          objc_msgSend(v24, "frame");
          v59.origin.x = v53;
          v59.origin.y = v54;
          v59.size.width = v55;
          v59.size.height = v56;
          WebCore::enclosingIntRect(&v59, v57);
          LODWORD(v23) = HIDWORD(v9);
        }
        else
        {
          v25 = *(_QWORD *)(v17 + 56);
        }
        v26 = (v25 - (v9 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | v20;
      }
      v27 = *(_DWORD *)(v6 + 124) == (_DWORD)v26 && *(_DWORD *)(v6 + 128) == HIDWORD(v26);
      if (!v27 || *(_DWORD *)(v6 + 132) != (_DWORD)v9 || *(_DWORD *)(v6 + 136) != (_DWORD)v23)
      {
        *(_QWORD *)(v6 + 124) = v26;
        *(_QWORD *)(v6 + 132) = v9;
        v28 = *(_QWORD *)(v6 + 32);
        if (v28)
        {
          v29 = *(_QWORD *)(v28 + 8);
          if (v29)
          {
            v30 = *(_QWORD *)(v29 + 1232);
            if (v30)
              WebCore::PageOverlayController::didChangeOverlayFrame(v30, (WebCore::PageOverlay *)v6);
          }
        }
      }
      *(_QWORD *)&v59.origin.x = WebCore::PageOverlay::bounds((WebCore::PageOverlay *)v6);
      v59.origin.y = v31;
      WebCore::PageOverlay::setNeedsDisplay(v6, (const WebCore::IntRect *)&v59, v32);
      goto LABEL_50;
    }
LABEL_17:
    v3 = 0;
    if (!v6)
      return v3;
    goto LABEL_51;
  }
  if (v7 == 7)
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v3 = 1;
      *(_BYTE *)(v6 + 160) = 1;
      *(_BYTE *)(a1 + 24) = 0;
      goto LABEL_51;
    }
    goto LABEL_17;
  }
  if (v7 != 6)
    goto LABEL_17;
  *(_BYTE *)(v6 + 160) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  if (*(int *)(v6 + 132) < 1 || *(int *)(v6 + 136) < 1)
    v8 = WebCore::PageOverlay::bounds((WebCore::PageOverlay *)v6);
  else
    v8 = *(_QWORD *)(v6 + 124);
  *(_QWORD *)(a1 + 28) = (*(_DWORD *)(a3 + 52) - v8) | ((unint64_t)(*(_DWORD *)(a3 + 56) - HIDWORD(v8)) << 32);
LABEL_50:
  v3 = 1;
LABEL_51:
  if (*(_DWORD *)(v6 + 8) == 1)
  {
    WebCore::PageOverlay::~PageOverlay((WebCore::PageOverlay *)v6, a2);
    WTF::fastFree(v34, v35);
  }
  else
  {
    --*(_DWORD *)(v6 + 8);
  }
  return v3;
}

char *WebCore::ResourceUsageThread::addObserver(WTF::RunLoop *a1, const void *a2, char *a3)
{
  int v4;
  uint64_t v6;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v13;
  char *v14;
  char *result;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  JSC::SamplingProfiler *v44;
  uint64_t v45;
  unsigned __int8 v46;
  int v47;
  WTF *v48;
  void *v49;
  _QWORD *v50;
  WTF::Thread *v51;
  int v52;
  _QWORD v53[3];
  char *v54;
  uint64_t v55;

  v4 = (int)a2;
  v55 = *MEMORY[0x1E0C80C00];
  {
    if (WebCore::ResourceUsageThread::singleton(void)::resourceUsageThread)
      goto LABEL_17;
  }
  else
  {
    WebCore::ResourceUsageThread::singleton(void)::resourceUsageThread = 0;
    word_1EE2F7F48 = 0;
    qword_1EE2F7F50 = 0;
    dword_1EE2F7F58 = 0;
    qword_1EE2F7F60 = 0;
    dword_1EE2F7F68 = 0;
  }
  v6 = WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(a1);
    JSC::VM::create();
    v6 = (uint64_t)v51;
    WebCore::g_commonVMOrNull = (uint64_t)v51;
    if (__ldaxr((unsigned int *)v51 + 274))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)v51 + 274))
    {
LABEL_8:
      if (webThreadStarted == 1)
        *(_BYTE *)(*((_QWORD *)v51 + 14) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**((WTF::ThreadGroup ***)v51 + 73));
      WebCore::JSVMClientData::initNormalWorld(v51, 0);
      goto LABEL_11;
    }
    JSC::Heap::acquireAccessSlow((WTF::Thread *)((char *)v51 + 192));
    goto LABEL_8;
  }
LABEL_11:
  qword_1EE2F7F60 = v6;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E3402898;
  v8[1] = &WebCore::ResourceUsageThread::singleton(void)::resourceUsageThread;
  v50 = v8;
  WTF::Thread::create();
  v9 = (unsigned int *)WebCore::ResourceUsageThread::singleton(void)::resourceUsageThread;
  WebCore::ResourceUsageThread::singleton(void)::resourceUsageThread = (uint64_t)v51;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::Thread::~Thread((WTF::Thread *)v9);
      WTF::fastFree(v48, v49);
    }
  }
  if (v50)
    (*(void (**)(_QWORD *))(*v50 + 8))(v50);
LABEL_17:
  if (__ldaxr((unsigned __int8 *)&word_1EE2F7F48))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&word_1EE2F7F48))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](&word_1EE2F7F48);
LABEL_21:
  if (qword_1EE2F7F50)
    v13 = *(_DWORD *)(qword_1EE2F7F50 - 12) == 0;
  else
    v13 = 1;
  v52 = v4;
  v14 = (char *)v53;
  result = (char *)*((_QWORD *)a3 + 3);
  if (result)
  {
    if (result == a3)
    {
      v54 = (char *)v53;
      result = (char *)(*(uint64_t (**)(char *, _QWORD *))(*(_QWORD *)a3 + 24))(a3, v53);
    }
    else
    {
      result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 16))(result);
      v54 = result;
    }
  }
  else
  {
    v54 = 0;
  }
  v16 = qword_1EE2F7F50;
  if (qword_1EE2F7F50
    || (result = (char *)WTF::HashTable<void *,WTF::KeyValuePair<void *,std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(&qword_1EE2F7F50, 8u, 0), (v16 = qword_1EE2F7F50) != 0))
  {
    v17 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v17 = 0;
  }
  v18 = ((unint64_t)a1 + ~((_QWORD)a1 << 32)) ^ (((unint64_t)a1 + ~((_QWORD)a1 << 32)) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = v16 + 48 * v21;
  v23 = *(_QWORD *)v22;
  if (*(_QWORD *)v22)
  {
    v24 = 0;
    v25 = 1;
    while ((WTF::RunLoop *)v23 != a1)
    {
      if (v23 == -1)
        v24 = v22;
      v21 = (v21 + v25) & v17;
      v22 = v16 + 48 * v21;
      v23 = *(_QWORD *)v22;
      ++v25;
      if (!*(_QWORD *)v22)
      {
        v26 = v52;
        if (!v24)
          goto LABEL_41;
        *(_QWORD *)v24 = 0;
        *(_DWORD *)(v24 + 8) = 0;
        v27 = v24 + 16;
        *(_QWORD *)(v24 + 40) = 0;
        v28 = (_QWORD *)(v24 + 40);
        --*(_DWORD *)(qword_1EE2F7F50 - 16);
        *(_QWORD *)v24 = a1;
        *(_DWORD *)(v24 + 8) = v52;
        v22 = v24;
        goto LABEL_49;
      }
    }
    *(_DWORD *)(v22 + 8) = v52;
    result = *(char **)(v22 + 40);
    *(_QWORD *)(v22 + 40) = 0;
    if (result == (char *)(v22 + 16))
    {
      v30 = 4;
      result = (char *)(v22 + 16);
    }
    else
    {
      if (!result)
        goto LABEL_67;
      v30 = 5;
    }
    result = (char *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v30))();
LABEL_67:
    if (v54)
    {
      if (v54 == (char *)v53)
      {
        *(_QWORD *)(v22 + 40) = v22 + 16;
        result = (char *)(*(uint64_t (**)(_QWORD *, uint64_t))(v53[0] + 24))(v53, v22 + 16);
      }
      else
      {
        *(_QWORD *)(v22 + 40) = v54;
        v54 = 0;
      }
    }
    else
    {
      *(_QWORD *)(v22 + 40) = 0;
    }
    goto LABEL_73;
  }
  v26 = v52;
LABEL_41:
  v28 = (_QWORD *)(v22 + 40);
  result = *(char **)(v22 + 40);
  v27 = v22 + 16;
  *(_QWORD *)v22 = a1;
  *(_DWORD *)(v22 + 8) = v26;
  *(_QWORD *)(v22 + 40) = 0;
  if (result == (char *)(v22 + 16))
  {
    v29 = 4;
  }
  else
  {
    if (!result)
      goto LABEL_49;
    v29 = 5;
  }
  result = (char *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v29))();
LABEL_49:
  if (v54)
  {
    if (v54 == (char *)v53)
    {
      *v28 = v27;
      result = (char *)(*(uint64_t (**)(_QWORD *, uint64_t))(v53[0] + 24))(v53, v27);
    }
    else
    {
      *v28 = v54;
      v54 = 0;
    }
  }
  else
  {
    *v28 = 0;
  }
  if (qword_1EE2F7F50)
    v31 = *(_DWORD *)(qword_1EE2F7F50 - 12) + 1;
  else
    v31 = 1;
  *(_DWORD *)(qword_1EE2F7F50 - 12) = v31;
  if (qword_1EE2F7F50)
    v32 = *(_DWORD *)(qword_1EE2F7F50 - 12);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(qword_1EE2F7F50 - 16) + v32);
  v34 = *(unsigned int *)(qword_1EE2F7F50 - 4);
  if (v34 <= 0x400)
  {
    if (3 * v34 > 4 * v33)
      goto LABEL_73;
    if (!(_DWORD)v34)
    {
      v35 = 8;
      goto LABEL_72;
    }
LABEL_63:
    v35 = (_DWORD)v34 << (6 * *(_DWORD *)(qword_1EE2F7F50 - 12) >= (2 * v34));
LABEL_72:
    result = (char *)WTF::HashTable<void *,WTF::KeyValuePair<void *,std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(&qword_1EE2F7F50, v35, (uint64_t *)v22);
    goto LABEL_73;
  }
  if (v34 <= 2 * v33)
    goto LABEL_63;
LABEL_73:
  if (v54 == (char *)v53)
  {
    v36 = 4;
  }
  else
  {
    if (!v54)
      goto LABEL_78;
    v36 = 5;
    v14 = v54;
  }
  result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v14 + 8 * v36))(v14);
LABEL_78:
  dword_1EE2F7F58 = 0;
  v37 = qword_1EE2F7F50;
  if (!qword_1EE2F7F50)
  {
    v40 = 0;
    LODWORD(v38) = 0;
LABEL_87:
    v39 = qword_1EE2F7F50 + 48 * v38;
    goto LABEL_88;
  }
  v38 = *(unsigned int *)(qword_1EE2F7F50 - 4);
  v39 = qword_1EE2F7F50 + 48 * v38;
  if (!*(_DWORD *)(qword_1EE2F7F50 - 12))
  {
    v40 = qword_1EE2F7F50 + 48 * v38;
    goto LABEL_87;
  }
  v40 = qword_1EE2F7F50;
  if ((_DWORD)v38)
  {
    v41 = 48 * v38;
    v40 = qword_1EE2F7F50;
    while ((unint64_t)(*(_QWORD *)v40 + 1) <= 1)
    {
      v40 += 48;
      v41 -= 48;
      if (!v41)
      {
        v40 = v39;
        break;
      }
    }
  }
LABEL_88:
  if (qword_1EE2F7F50)
    v37 = qword_1EE2F7F50 + 48 * *(unsigned int *)(qword_1EE2F7F50 - 4);
  if (v37 != v40)
  {
    v42 = 0;
    do
    {
      v43 = (_QWORD *)v39;
      if (v40 + 48 != v39)
      {
        v43 = (_QWORD *)(v40 + 48);
        while ((unint64_t)(*v43 + 1) <= 1)
        {
          v43 += 6;
          if (v43 == (_QWORD *)v39)
          {
            v43 = (_QWORD *)v39;
            break;
          }
        }
      }
      v42 |= *(_DWORD *)(v40 + 8);
      v40 = (uint64_t)v43;
    }
    while (v43 != (_QWORD *)v37);
    dword_1EE2F7F58 = v42;
  }
  if (v13)
  {
    dword_1EE2F7F68 = 0;
    v44 = *(JSC::SamplingProfiler **)(qword_1EE2F7F60 + 93368);
    if (v44)
    {
      v45 = JSC::SamplingProfiler::thread(v44);
      if (v45)
        dword_1EE2F7F68 = *(_DWORD *)(v45 + 52);
    }
    result = (char *)&word_1EE2F7F48 + 1;
    v46 = atomic_load((unsigned __int8 *)&word_1EE2F7F48 + 1);
    if ((v46 & 1) != 0)
    {
      atomic_store(0, (unsigned __int8 *)&word_1EE2F7F48 + 1);
      result = (char *)WTF::ParkingLot::unparkAll((WTF::ParkingLot *)((char *)&word_1EE2F7F48 + 1), a2);
    }
  }
  v47 = __ldxr((unsigned __int8 *)&word_1EE2F7F48);
  if (v47 != 1)
  {
    __clrex();
    return (char *)WTF::Lock::unlockSlow((WTF::Lock *)&word_1EE2F7F48);
  }
  if (__stlxr(0, (unsigned __int8 *)&word_1EE2F7F48))
    return (char *)WTF::Lock::unlockSlow((WTF::Lock *)&word_1EE2F7F48);
  return result;
}

uint64_t WebCore::ResourceUsageThread::removeObserver(WebCore::ResourceUsageThread *this, void *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  int v11;
  WebCore::ResourceUsageThread *v12;

  v12 = this;
  {
    WebCore::ResourceUsageThread::singleton(void)::resourceUsageThread = 0;
    word_1EE2F7F48 = 0;
    qword_1EE2F7F50 = 0;
    dword_1EE2F7F58 = 0;
    qword_1EE2F7F60 = 0;
    dword_1EE2F7F68 = 0;
  }
  if (__ldaxr((unsigned __int8 *)&word_1EE2F7F48))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&word_1EE2F7F48))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](&word_1EE2F7F48, a2);
LABEL_7:
  result = WTF::HashMap<void *,std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>>,WTF::HashTableTraits>::remove(&qword_1EE2F7F50, &v12);
  dword_1EE2F7F58 = 0;
  v4 = qword_1EE2F7F50;
  if (!qword_1EE2F7F50)
  {
    v7 = 0;
    LODWORD(v5) = 0;
LABEL_16:
    v6 = qword_1EE2F7F50 + 48 * v5;
    goto LABEL_17;
  }
  v5 = *(unsigned int *)(qword_1EE2F7F50 - 4);
  v6 = qword_1EE2F7F50 + 48 * v5;
  if (!*(_DWORD *)(qword_1EE2F7F50 - 12))
  {
    v7 = qword_1EE2F7F50 + 48 * v5;
    goto LABEL_16;
  }
  v7 = qword_1EE2F7F50;
  if ((_DWORD)v5)
  {
    v8 = 48 * v5;
    v7 = qword_1EE2F7F50;
    while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
    {
      v7 += 48;
      v8 -= 48;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_17:
  if (qword_1EE2F7F50)
    v4 = qword_1EE2F7F50 + 48 * *(unsigned int *)(qword_1EE2F7F50 - 4);
  if (v4 != v7)
  {
    v9 = 0;
    do
    {
      v10 = (_QWORD *)v6;
      if (v7 + 48 != v6)
      {
        v10 = (_QWORD *)(v7 + 48);
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 6;
          if (v10 == (_QWORD *)v6)
          {
            v10 = (_QWORD *)v6;
            break;
          }
        }
      }
      v9 |= *(_DWORD *)(v7 + 8);
      v7 = (uint64_t)v10;
    }
    while (v10 != (_QWORD *)v4);
    dword_1EE2F7F58 = v9;
  }
  v11 = __ldxr((unsigned __int8 *)&word_1EE2F7F48);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)&word_1EE2F7F48);
  }
  if (__stlxr(0, (unsigned __int8 *)&word_1EE2F7F48))
    return WTF::Lock::unlockSlow((WTF::Lock *)&word_1EE2F7F48);
  return result;
}

uint64_t WTF::HashMap<void *,std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ~(*a2 << 32) + *a2;
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
  v9 = (uint64_t *)(v2 + 48 * v8);
  v10 = *v9;
  if (*v9 != *a2)
  {
    v11 = 1;
    while (v10)
    {
      v8 = (v8 + v11) & v4;
      v9 = (uint64_t *)(v2 + 48 * v8);
      v10 = *v9;
      ++v11;
      if (*v9 == *a2)
        goto LABEL_8;
    }
    v9 = (uint64_t *)(v2 + 48 * *(unsigned int *)(v2 - 4));
  }
LABEL_8:
  if ((uint64_t *)(v2 + 48 * *(unsigned int *)(v2 - 4)) == v9)
    return 0;
  *v9 = -1;
  v12 = (uint64_t *)v9[5];
  if (v12 == v9 + 2)
  {
    v13 = 4;
    v12 = v9 + 2;
    goto LABEL_14;
  }
  if (v12)
  {
    v13 = 5;
LABEL_14:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  ++*(_DWORD *)(*a1 - 16);
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) - 1;
  else
    v16 = -1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
  {
    v18 = 6 * *(_DWORD *)(v17 - 12);
    v19 = *(_DWORD *)(v17 - 4);
    if (v18 < v19 && v19 >= 9)
      WTF::HashTable<void *,WTF::KeyValuePair<void *,std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a1, v19 >> 1, 0);
  }
  return 1;
}

void WebCore::ResourceUsageThread::threadBody(WebCore::ResourceUsageThread *this)
{
  WTF::WallTime *v2;
  unsigned __int8 *v3;
  uint64_t v5;
  WTF *v6;
  int v8;
  int v9;
  WTF::MonotonicTime *v10;
  uint64_t v11;
  int v12;
  WTF *v13;
  uint64_t v14;
  _QWORD *v15;
  WTF::WallTime *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int64x2_t v22;
  WTF *v23;
  WTF *v24[2];
  _BYTE v25[368];
  uint64_t v26;
  int v27;
  _QWORD v28[45];
  char *v29;
  char *v30;

  v2 = (WTF::WallTime *)WTF::sleep();
  v3 = (unsigned __int8 *)this + 8;
  v22 = vdupq_n_s64(0x7FF8000000000000uLL);
  while (1)
  {
    if (__ldaxr(v3))
    {
      __clrex();
LABEL_5:
      v2 = (WTF::WallTime *)MEMORY[0x19AEA534C]((char *)this + 8);
      goto LABEL_6;
    }
    if (__stxr(1u, v3))
      goto LABEL_5;
LABEL_6:
    while (1)
    {
      v5 = *((_QWORD *)this + 2);
      if (v5)
      {
        if (*(_DWORD *)(v5 - 12))
          break;
      }
      v26 = 0x7FF0000000000000;
      v27 = 0;
      v24[0] = (WTF *)WTF::TimeWithDynamicClockType::nowWithSameClock((WTF::TimeWithDynamicClockType *)&v26);
      v24[1] = v6;
      if (!WTF::TimeWithDynamicClockType::operator<())
      {
        v29 = (char *)this + 8;
        v30 = (char *)this + 9;
        v24[0] = (WTF *)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
        v24[1] = (WTF *)v24;
        *(_QWORD *)v25 = &v30;
        v28[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
        v28[1] = v28;
        v28[2] = &v29;
        WTF::ParkingLot::parkConditionallyImpl();
        goto LABEL_10;
      }
      v8 = __ldxr(v3);
      if (v8 != 1)
      {
        __clrex();
LABEL_19:
        WTF::Lock::unlockSlow((WebCore::ResourceUsageThread *)((char *)this + 8));
        goto LABEL_10;
      }
      if (__stlxr(0, v3))
        goto LABEL_19;
LABEL_10:
      if (__ldaxr(v3))
      {
        __clrex();
      }
      else if (!__stxr(1u, v3))
      {
        goto LABEL_14;
      }
      MEMORY[0x19AEA534C]((char *)this + 8);
LABEL_14:
      v2 = (WTF::WallTime *)WTF::sleep();
    }
    v9 = __ldxr(v3);
    if (v9 != 1)
    {
      __clrex();
LABEL_24:
      v2 = (WTF::WallTime *)WTF::Lock::unlockSlow((WebCore::ResourceUsageThread *)((char *)this + 8));
      goto LABEL_25;
    }
    if (__stlxr(0, v3))
      goto LABEL_24;
LABEL_25:
    WTF::WallTime::now(v2);
    *(_OWORD *)v24 = 0u;
    memset(v25, 0, 24);
    v10 = (WTF::MonotonicTime *)memcpy(&v25[24], &unk_1969F5F80, 0x140uLL);
    WTF::MonotonicTime::now(v10);
    *(_QWORD *)&v25[344] = v11;
    *(int64x2_t *)&v25[352] = v22;
    v12 = *((_DWORD *)this + 6);
    if ((v12 & 1) != 0)
      WebCore::ResourceUsageThread::platformCollectCPUData((uint64_t)this, *((_QWORD *)this + 4), (uint64_t)v24);
    if ((v12 & 2) != 0)
      WebCore::ResourceUsageThread::platformCollectMemoryData((uint64_t)this, *((_QWORD *)this + 4));
    v13 = v24[0];
    v23 = v24[1];
    v24[1] = 0;
    memcpy(v28, &v25[8], sizeof(v28));
    v14 = *(_QWORD *)v25;
    *(_QWORD *)v25 = 0;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x188);
    *v15 = &off_1E3402870;
    v15[1] = v13;
    v15[2] = v23;
    v15[3] = v14;
    memcpy(v15 + 4, v28, 0x168uLL);
    v26 = (uint64_t)v15;
    WTF::callOnMainThread();
    v16 = (WTF::WallTime *)v26;
    v26 = 0;
    if (v16)
      v16 = (WTF::WallTime *)(*(uint64_t (**)(WTF::WallTime *))(*(_QWORD *)v16 + 8))(v16);
    WTF::WallTime::now(v16);
    WTF::sleep();
    if (*(_DWORD *)&v25[4])
    {
      v18 = 24 * *(unsigned int *)&v25[4];
      v19 = (WTF::StringImpl **)((char *)v24[1] + 8);
      do
      {
        v20 = *v19;
        *v19 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v17);
          else
            *(_DWORD *)v20 -= 2;
        }
        v21 = *(v19 - 1);
        *(v19 - 1) = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v17);
          else
            *(_DWORD *)v21 -= 2;
        }
        v19 += 3;
        v18 -= 24;
      }
      while (v18);
    }
    v2 = v24[1];
    if (v24[1])
    {
      v24[1] = 0;
      *(_DWORD *)v25 = 0;
      v2 = (WTF::WallTime *)WTF::fastFree(v2, v17);
    }
  }
}

uint64_t WebCore::RemoteDOMWindow::scriptExecutionContext(WebCore::RemoteDOMWindow *this)
{
  return 0;
}

void WebCore::RemoteFrameView::~RemoteFrameView(WebCore::RemoteFrameView *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E31FE290;
      v7[1] = v4;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  WebCore::ScrollView::~ScrollView(this, a2);
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  WebCore::ScrollView::~ScrollView(this, a2);
  if (*((_DWORD *)this + 34))
  {
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 20) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    WTF::fastFree(this, v7);
  }
}

uint64_t WebCore::RemoteFrameView::isRemoteFrameView(WebCore::RemoteFrameView *this)
{
  return 1;
}

uint64_t WebCore::RemoteFrameView::viewType(WebCore::RemoteFrameView *this)
{
  return 1;
}

void `non-virtual thunk to'WebCore::RemoteFrameView::~RemoteFrameView(WebCore::RemoteFrameView *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E31FE290;
      v7[1] = v4;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  WebCore::ScrollView::~ScrollView((WebCore::RemoteFrameView *)((char *)this - 64), a2);
}

{
  WebCore::ScrollView *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = (WebCore::RemoteFrameView *)((char *)this - 64);
  v4 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  WebCore::ScrollView::~ScrollView(v3, a2);
  if (*((_DWORD *)this + 18))
  {
    *((_OWORD *)v3 + 19) = 0u;
    *((_OWORD *)v3 + 20) = 0u;
    *((_OWORD *)v3 + 17) = 0u;
    *((_OWORD *)v3 + 18) = 0u;
    *((_OWORD *)v3 + 15) = 0u;
    *((_OWORD *)v3 + 16) = 0u;
    *((_OWORD *)v3 + 13) = 0u;
    *((_OWORD *)v3 + 14) = 0u;
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + 10) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)v3 = 0u;
  }
  else
  {
    WTF::fastFree(v3, v8);
  }
}

uint64_t WebCore::RemoteFrame::isRootFrame(WebCore::RemoteFrame *this)
{
  return 0;
}

void WebCore::RenderingUpdateScheduler::~RenderingUpdateScheduler(WebCore::RenderingUpdateScheduler *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::DisplayRefreshMonitorClient::~DisplayRefreshMonitorClient(this);
}

{
  uint64_t v2;
  void *v3;

  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::DisplayRefreshMonitorClient::~DisplayRefreshMonitorClient(this);
  if (*((_DWORD *)this + 2))
  {
    *((_QWORD *)this + 6) = 0;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    WTF::fastFree(this, v3);
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::RenderingUpdateScheduler::*&)(void),WebCore::RenderingUpdateScheduler*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore22ResizeObserverCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEPFvRKNS8_6VectorINS8_3RefINSA_19ResizeObserverEntryENSC_ISJ_EENSE_ISJ_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEERNSA_14ResizeObserverEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSX_1EJSG_SV_EEEEEEDcSZ_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore22ResizeObserverCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEPFvRKNS8_6VectorINS8_3RefINSA_19ResizeObserverEntryENSC_ISJ_EENSE_ISJ_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEERNSA_14ResizeObserverEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISW_LNS0_6_TraitE1EEEEEvRSX_OT_EUlRS13_OT0_E_JRNS0_6__baseILS10_1EJSG_SV_EEEOS1B_EEEDcS13_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore22ResizeObserverCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEPFvRKNS8_6VectorINS8_3RefINSA_19ResizeObserverEntryENSC_ISJ_EENSE_ISJ_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEERNSA_14ResizeObserverEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISW_LNS0_6_TraitE1EEEEEvRSX_OT_EUlRS13_OT0_E_JRNS0_6__baseILS10_1EJSG_SV_EEEOS1B_EEEDcS13_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::VectorDestructor<true,WTF::Ref<WebCore::ResizeObservation,WTF::RawPtrTraits<WebCore::ResizeObservation>,WTF::DefaultRefDerefTraits<WebCore::ResizeObservation>>>::destruct(_QWORD *result, _QWORD *a2)
{
  _QWORD **v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  WTF *v8;
  _QWORD *v9;
  WTF *v10;

  if (result != a2)
  {
    v3 = (_QWORD **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          v6 = (unsigned int *)result[1];
          result[1] = 0;
          if (v6)
          {
            do
            {
              v4 = __ldaxr(v6);
              v5 = v4 - 1;
            }
            while (__stlxr(v5, v6));
            if (!v5)
            {
              v9 = result;
              v10 = (WTF *)v6;
              atomic_store(1u, v6);
              v7 = v6[7];
              if ((_DWORD)v7)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v10 + 2), (WTF::StringImpl *)(*((_QWORD *)v10 + 2) + 32 * v7));
              v8 = (WTF *)*((_QWORD *)v10 + 2);
              if (v8)
              {
                *((_QWORD *)v10 + 2) = 0;
                *((_DWORD *)v10 + 6) = 0;
                WTF::fastFree(v8, a2);
              }
              WTF::fastFree(v10, a2);
              result = v9;
            }
          }
          result = (_QWORD *)bmalloc::api::isoDeallocate((bmalloc::api *)result, a2);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t *WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  v9 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 24) += 2;
  *(_QWORD *)(v9 + 8 * v8) = a2;
  {
    WebCore::GCReachableRefMap::map(void)::map = 0;
  }
  v11 = a2;
  v14 = 0;
  result = WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v11, &v14, (uint64_t)&v12);
  ++*(_DWORD *)(v12 + 8);
  if (v13)
    *(_QWORD *)(a2 + 16) |= 0x4000000000000uLL;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ResizeObserver::callbackConcurrently(void)::$_0,WebCore::ResizeObserver::callbackConcurrently(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ResizeObserverCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,void (*)(WTF::Vector<WTF::Ref<WebCore::ResizeObserverEntry,WebCore::ResizeObserverCallback<WTF::Ref>,WTF::RawPtrTraits<WTF::RefPtr><WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ResizeObserver&)> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ResizeObserver::callbackConcurrently(void)::$_0,WebCore::ResizeObserver::callbackConcurrently(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ResizeObserverCallback,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,void (*)(WTF::Vector<WTF::Ref<WebCore::ResizeObserverEntry,WebCore::ResizeObserverCallback<WTF::Ref>,WTF::RawPtrTraits<WTF::RefPtr><WTF::Ref>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ResizeObserver&)> &>()
{
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ResourceUsageOverlay::ResourceUsageOverlay(WebCore::Page &)::$_0,void>::call(uint64_t a1)
{
  WebCore::ResourceUsageOverlay *v1;
  _QWORD *result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  void *v13;
  _QWORD *v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  const CGRect *v19;
  int v20;
  void *v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  const CGRect *v26;
  int v27;
  CGRect v28;

  v1 = *(WebCore::ResourceUsageOverlay **)(a1 + 8);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1 + 1) + 160) + 56))(*(_QWORD *)(*((_QWORD *)v1 + 1) + 160));
  if (result)
  {
    v3 = (void *)result[5];
    if (v3)
    {
      v14 = result;
      if (objc_msgSend((id)result[5], "conformsToProtocol:", &unk_1EE342188))
        v3 = (void *)objc_msgSend(v3, "superview");
      objc_msgSend(v3, "frame");
      v28.origin.x = v15;
      v28.origin.y = v16;
      v28.size.width = v17;
      v28.size.height = v18;
      WebCore::enclosingIntRect(&v28, v19);
      v27 = v20;
      v21 = (void *)v14[5];
      if (v21)
      {
        if (objc_msgSend((id)v14[5], "conformsToProtocol:", &unk_1EE342188))
          v21 = (void *)objc_msgSend(v21, "superview");
        objc_msgSend(v21, "frame");
        v28.origin.x = v22;
        v28.origin.y = v23;
        v28.size.width = v24;
        v28.size.height = v25;
        WebCore::enclosingIntRect(&v28, v26);
      }
      LODWORD(v4) = v27;
    }
    else
    {
      v4 = result[7];
    }
    v5 = ((int)v4 / 2 - 285);
    v6 = *((_QWORD *)v1 + 2);
    if (v6)
      ++*(_DWORD *)(v6 + 8);
    v7 = *(_DWORD *)(v6 + 124) == (_DWORD)v5 && *(_DWORD *)(v6 + 128) == 20;
    if (!v7 || *(_DWORD *)(v6 + 132) != 570 || *(_DWORD *)(v6 + 136) != 180)
    {
      *(_QWORD *)(v6 + 124) = v5 | 0x1400000000;
      *(_QWORD *)(v6 + 132) = 0xB40000023ALL;
      v8 = *(_QWORD *)(v6 + 32);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 1232);
          if (v10)
            WebCore::PageOverlayController::didChangeOverlayFrame(v10, (WebCore::PageOverlay *)v6);
        }
      }
    }
    WebCore::PageOverlayController::installPageOverlay(*(_QWORD *)(*((_QWORD *)v1 + 1) + 1232), v6, 0);
    result = WebCore::ResourceUsageOverlay::platformInitialize(v1);
    if (*(_DWORD *)(v6 + 8) == 1)
    {
      WebCore::PageOverlay::~PageOverlay((WebCore::PageOverlay *)v6, v11);
      return (_QWORD *)WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)(v6 + 8);
    }
  }
  return result;
}

uint64_t WTF::HashTable<void *,WTF::KeyValuePair<void *,std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::pair<WebCore::ResourceUsageCollectionMode,std::function<void ()(WebCore::ResourceUsageData const&)>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v43;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(result + 56);
    do
    {
      *(v10 - 5) = 0;
      *((_DWORD *)v10 - 8) = 0;
      *v10 = 0;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    while (1)
    {
      v14 = (uint64_t *)(v4 + 48 * v11);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v43 = v12;
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = (_QWORD *)(v19 + 48 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (*v27);
          v28 = v26;
          v29 = v19 + 48 * v26;
          v32 = *(_QWORD **)(v29 + 40);
          v31 = (_QWORD *)(v29 + 40);
          v30 = v32;
          if (v32 == v31 - 3)
          {
            v30 = v31 - 3;
            v33 = 4;
LABEL_25:
            (*(void (**)(void))(*v30 + 8 * v33))();
            v15 = *v14;
          }
          else if (v30)
          {
            v33 = 5;
            goto LABEL_25;
          }
          *v27 = v15;
          v34 = v19 + 48 * v28;
          v35 = v4 + 48 * v11;
          v38 = *(_QWORD *)(v35 + 40);
          v37 = (_QWORD *)(v35 + 40);
          v36 = v38;
          *(_DWORD *)(v34 + 8) = *((_DWORD *)v37 - 8);
          if (v38)
          {
            if (v36 != v4 + 48 * v11 + 16)
            {
              *v31 = v36;
              *v37 = 0;
              v12 = v43;
              goto LABEL_36;
            }
            *v31 = v31 - 3;
            (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v37 + 24))(*v37, v31 - 3);
          }
          else
          {
            *v31 = 0;
          }
          v39 = (_QWORD *)*v37;
          if (*v37 == v4 + 48 * v11 + 16)
          {
            v39 = (_QWORD *)(v4 + 48 * v11 + 16);
            v40 = 4;
            v12 = v43;
LABEL_35:
            (*(void (**)(void))(*v39 + 8 * v40))();
          }
          else
          {
            v12 = v43;
            if (v39)
            {
              v40 = 5;
              goto LABEL_35;
            }
          }
LABEL_36:
          if (v14 == a3)
            v12 = v27;
          goto LABEL_38;
        }
        v16 = v4 + 48 * v11;
        v17 = *(_QWORD **)(v16 + 40);
        if (v17 == (_QWORD *)(v16 + 16))
        {
          v17 = (_QWORD *)(v16 + 16);
          v18 = 4;
          goto LABEL_17;
        }
        if (v17)
        {
          v18 = 5;
LABEL_17:
          (*(void (**)(void))(*v17 + 8 * v18))();
        }
      }
LABEL_38:
      if (++v11 == v13)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ResourceUsageThread::notifyObservers(WebCore::ResourceUsageData &&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;

  *(_QWORD *)a1 = &off_1E3402870;
  v3 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  v8 = *(WTF **)(a1 + 16);
  if (v8)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ResourceUsageThread::notifyObservers(WebCore::ResourceUsageData &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;

  *(_QWORD *)this = &off_1E3402870;
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = (WTF::StringImpl **)(*((_QWORD *)this + 2) + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  v8 = (WTF *)*((_QWORD *)this + 2);
  if (v8)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v8, a2);
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::ResourceUsageThread::notifyObservers(WebCore::ResourceUsageData &&)::$_0,void>::call(WTF *result, WTF *a2)
{
  WTF *v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  WTF **v24;
  uint64_t v25;
  int v26;
  _BYTE v27[24];
  WTF *v28;
  uint64_t v29;

  v2 = result;
  v29 = *MEMORY[0x1E0C80C00];
  v3 = &unk_1EE2F7000;
    goto LABEL_67;
  while (1)
  {
    if (__ldaxr((unsigned __int8 *)&word_1EE2F7F48))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&word_1EE2F7F48))
    {
      goto LABEL_6;
    }
    result = (WTF *)MEMORY[0x19AEA534C](&word_1EE2F7F48);
LABEL_6:
    if (!qword_1EE2F7F50)
    {
      v7 = 0;
      LODWORD(v5) = 0;
      goto LABEL_19;
    }
    v5 = *(unsigned int *)(qword_1EE2F7F50 - 4);
    v6 = qword_1EE2F7F50 + 48 * v5;
    if (!*(_DWORD *)(qword_1EE2F7F50 - 12))
    {
      v7 = qword_1EE2F7F50 + 48 * v5;
LABEL_19:
      v6 = qword_1EE2F7F50 + 48 * v5;
      if (!qword_1EE2F7F50)
        goto LABEL_20;
      goto LABEL_14;
    }
    v7 = qword_1EE2F7F50;
    if ((_DWORD)v5)
    {
      v8 = 48 * v5;
      v7 = qword_1EE2F7F50;
      while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
      {
        v7 += 48;
        v8 -= 48;
        if (!v8)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (!qword_1EE2F7F50)
    {
LABEL_20:
      v9 = 0;
LABEL_21:
      v11 = 0;
      goto LABEL_22;
    }
LABEL_14:
    v9 = qword_1EE2F7F50 + 48 * *(unsigned int *)(qword_1EE2F7F50 - 4);
    v10 = *(unsigned int *)(qword_1EE2F7F50 - 12);
    if (!(_DWORD)v10)
      goto LABEL_21;
    if (v10 >= 0x6666667)
    {
      __break(0xC471u);
      return result;
    }
    result = (WTF *)WTF::fastMalloc((WTF *)(40 * v10));
    v11 = result;
LABEL_22:
    if (v9 != v7)
    {
      v12 = 0;
      while (1)
      {
        v13 = *(_DWORD *)(v7 + 8);
        v26 = v13;
        v14 = *(_QWORD *)(v7 + 40);
        if (!v14)
          break;
        if (v14 == v7 + 16)
        {
          v28 = (WTF *)v27;
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v14 + 24))(v14, v27);
          result = v28;
        }
        else
        {
          result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
          v28 = result;
        }
        v15 = v12;
        v16 = (_DWORD *)((char *)v11 + 40 * v12);
        *v16 = v26;
        a2 = (WTF *)(v16 + 2);
        if (!result)
          goto LABEL_32;
        v17 = (WTF **)((char *)v11 + 40 * v12 + 32);
        if (result != (WTF *)v27)
        {
          *v17 = result;
          goto LABEL_38;
        }
        *v17 = a2;
        (*(void (**)(WTF *))(*(_QWORD *)v28 + 24))(v28);
LABEL_33:
        result = v28;
        if (v28 == (WTF *)v27)
        {
          result = (WTF *)v27;
          v18 = 4;
          goto LABEL_37;
        }
        if (v28)
        {
          v18 = 5;
LABEL_37:
          result = (WTF *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v18))();
        }
LABEL_38:
        v19 = v7 + 48;
        v7 = v6;
        if (v19 != v6)
        {
          v7 = v19;
          while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
          {
            v7 += 48;
            if (v7 == v6)
            {
              v7 = v6;
              break;
            }
          }
        }
        ++v12;
        if (v7 == v9)
          goto LABEL_47;
      }
      v28 = 0;
      v15 = v12;
      *((_DWORD *)v11 + 10 * v12) = v13;
LABEL_32:
      *((_QWORD *)v11 + 5 * v15 + 4) = 0;
      goto LABEL_33;
    }
    v12 = 0;
LABEL_47:
    v20 = __ldxr((unsigned __int8 *)&word_1EE2F7F48);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)&word_1EE2F7F48))
      {
        if (!v12)
          break;
        goto LABEL_53;
      }
    }
    else
    {
      __clrex();
    }
    result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)&word_1EE2F7F48);
    if (!v12)
      break;
LABEL_53:
    v2 = (WTF *)((char *)v2 + 8);
    v21 = 40 * v12;
    v22 = (_QWORD *)((char *)v11 + 32);
    while (*v22)
    {
      (*(void (**)(_QWORD, WTF *))(*(_QWORD *)*v22 + 48))(*v22, v2);
      v22 += 5;
      v21 -= 40;
      if (!v21)
      {
        v23 = 40 * v12;
        v24 = (WTF **)((char *)v11 + 32);
        while (1)
        {
          result = *v24;
          if (v24 - 3 == (WTF **)*v24)
            break;
          if (result)
          {
            v25 = 5;
LABEL_61:
            result = (WTF *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v25))();
          }
          v24 += 5;
          v23 -= 40;
          if (!v23)
            goto LABEL_63;
        }
        result = (WTF *)(v24 - 3);
        v25 = 4;
        goto LABEL_61;
      }
    }
    result = (WTF *)std::__throw_bad_function_call[abi:sn180100]();
LABEL_67:
    WebCore::ResourceUsageThread::singleton(void)::resourceUsageThread = 0;
    word_1EE2F7F48 = 0;
    qword_1EE2F7F50 = 0;
    dword_1EE2F7F58 = 0;
    qword_1EE2F7F60 = 0;
    dword_1EE2F7F68 = 0;
    v3[3952] = 1;
  }
LABEL_63:
  if (v11)
    return (WTF *)WTF::fastFree(v11, a2);
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::ResourceUsageThread::createThreadIfNeeded(void)::$_0,void>::call(uint64_t a1)
{
  WebCore::ResourceUsageThread::threadBody(*(WebCore::ResourceUsageThread **)(a1 + 8));
}

void WebCore::Screen::~Screen(WebCore::Screen *this, void *a2)
{
  WebCore::ScreenOrientation *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (WebCore::ScreenOrientation *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 20) == 1)
    {
      WebCore::ScreenOrientation::~ScreenOrientation(v3, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v3 + 20);
    }
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v9 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v9)
      {
        v12 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v9));
        v4 = v12;
      }
      v10 = *(WTF **)(v4 + 16);
      if (v10)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v11 = v4;
        WTF::fastFree(v10, a2);
        v4 = v11;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 3;
    *(_QWORD *)this = 0;
  }
}

unsigned int *WebCore::Screen::height(WebCore::Screen *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  float v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v17;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19605A3D0);
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    if ((*(_QWORD *)(*(_QWORD *)(v7 + 136) + 704) & 0x4000) != 0)
    {
      {
        WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
      }
      if (WebCore::sharedObserver(void)::observer)
        v10 = (uint64_t *)WebCore::sharedObserver(void)::observer;
      else
        v10 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
      v11 = *(_QWORD *)(v7 + 296);
      if (v11)
      {
        *(_DWORD *)(v11 + 24) += 2;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 72))(v10, v11, 1);
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
      }
      else
      {
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(*v10 + 72))(v10, 0, 1);
      }
    }
    WebCore::LocalFrame::screenSize((WebCore::LocalFrame *)v7, (WebCore::Widget *)a2);
    v7 = (int)v12;
    do
    {
      v13 = __ldaxr(v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v8));
    if (!v14)
    {
      atomic_store(1u, v8);
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v15 = off_1E31FE290;
      v15[1] = v8;
      v17 = v15;
      WTF::ensureOnMainThread();
      if (v17)
        (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    }
  }
  return (unsigned int *)v7;
}

unsigned int *WebCore::Screen::width(WebCore::Screen *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v16;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19605A580);
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    if ((*(_QWORD *)(*(_QWORD *)(v7 + 136) + 704) & 0x4000) != 0)
    {
      {
        WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
      }
      if (WebCore::sharedObserver(void)::observer)
        v10 = (uint64_t *)WebCore::sharedObserver(void)::observer;
      else
        v10 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
      v11 = *(_QWORD *)(v7 + 296);
      if (v11)
      {
        *(_DWORD *)(v11 + 24) += 2;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 72))(v10, v11, 2);
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
      }
      else
      {
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(*v10 + 72))(v10, 0, 2);
      }
    }
    v7 = (int)WebCore::LocalFrame::screenSize((WebCore::LocalFrame *)v7, (WebCore::Widget *)a2);
    do
    {
      v12 = __ldaxr(v8);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v8));
    if (!v13)
    {
      atomic_store(1u, v8);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v14 = off_1E31FE290;
      v14[1] = v8;
      v16 = v14;
      WTF::ensureOnMainThread();
      if (v16)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    }
  }
  return (unsigned int *)v7;
}

uint64_t WebCore::Screen::colorDepth(WebCore::Screen *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v17;
  _QWORD *v18;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 72);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (*(_BYTE *)(v4 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x19605A708);
          }
          v5 = *(_QWORD *)(v4 + 240);
          if (v5)
          {
            v6 = *(_QWORD **)(v5 + 8);
            if (v6)
            {
              v7 = (unsigned int *)(v6 + 1);
              do
                v8 = __ldaxr(v7);
              while (__stlxr(v8 + 1, v7));
              if ((*(_QWORD *)(v6[17] + 704) & 0x4000) != 0)
              {
                {
                  WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
                }
                if (WebCore::sharedObserver(void)::observer)
                  v9 = (uint64_t *)WebCore::sharedObserver(void)::observer;
                else
                  v9 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
                v10 = v6[37];
                if (v10)
                {
                  *(_DWORD *)(v10 + 24) += 2;
                  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 72))(v9, v10, 4);
                  if (*(_DWORD *)(v10 + 24) == 2)
                  {
                    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
                  }
                  else
                  {
                    *(_DWORD *)(v10 + 24) -= 2;
                  }
                }
                else
                {
                  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*v9 + 72))(v9, 0, 4);
                }
              }
              v12 = (_DWORD *)v6[36];
              if (v12)
              {
                v13 = v12[2];
                v12[2] = v13 + 1;
                if (v13)
                  v12[2] = v13;
                else
                  (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
              }
              do
              {
                v14 = __ldaxr(v7);
                v15 = v14 - 1;
              }
              while (__stlxr(v15, v7));
              if (!v15)
              {
                atomic_store(1u, v7);
                v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v17 = off_1E31FE290;
                v17[1] = v7;
                v18 = v17;
                WTF::ensureOnMainThread();
                if (v18)
                  (*(void (**)(_QWORD *))(*v18 + 8))(v18);
              }
            }
          }
        }
      }
    }
  }
  return 24;
}

uint64_t WebCore::Screen::availLeft(WebCore::Screen *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  WebCore::Widget *v12;
  WebCore *v13;
  float v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v19;
  _QWORD *v20;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19605A914);
  }
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    return 0;
  v6 = *(_QWORD **)(v5 + 8);
  if (!v6)
    return 0;
  v7 = (unsigned int *)(v6 + 1);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if ((*(_QWORD *)(v6[17] + 704) & 0x4000) != 0)
  {
    {
      WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
    }
    if (WebCore::sharedObserver(void)::observer)
      v9 = (uint64_t *)WebCore::sharedObserver(void)::observer;
    else
      v9 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
    v10 = v6[37];
    if (v10)
    {
      *(_DWORD *)(v10 + 24) += 2;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 72))(v9, v10, 8);
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*v9 + 72))(v9, 0, 8);
    }
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6[16] + 8) + 112))(*(_QWORD *)(v6[16] + 8)) & 0x40) != 0
    || (v13 = (WebCore *)v6[36]) == 0)
  {
    v15 = 0;
  }
  else
  {
    ++*((_DWORD *)v13 + 2);
    WebCore::screenAvailableRect(v13, v12);
    v15 = (int)v14;
    if (*((_DWORD *)v13 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v13 + 8))(v13);
    else
      --*((_DWORD *)v13 + 2);
  }
  do
  {
    v16 = __ldaxr(v7);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v7));
  if (!v17)
  {
    atomic_store(1u, v7);
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E31FE290;
    v19[1] = v7;
    v20 = v19;
    WTF::ensureOnMainThread();
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  }
  return v15;
}

uint64_t WebCore::Screen::availTop(WebCore::Screen *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  WebCore::Widget *v12;
  WebCore *v13;
  float v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v19;
  _QWORD *v20;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19605AB20);
  }
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    return 0;
  v6 = *(_QWORD **)(v5 + 8);
  if (!v6)
    return 0;
  v7 = (unsigned int *)(v6 + 1);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if ((*(_QWORD *)(v6[17] + 704) & 0x4000) != 0)
  {
    {
      WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
    }
    if (WebCore::sharedObserver(void)::observer)
      v9 = (uint64_t *)WebCore::sharedObserver(void)::observer;
    else
      v9 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
    v10 = v6[37];
    if (v10)
    {
      *(_DWORD *)(v10 + 24) += 2;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 72))(v9, v10, 16);
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*v9 + 72))(v9, 0, 16);
    }
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6[16] + 8) + 112))(*(_QWORD *)(v6[16] + 8)) & 0x40) != 0
    || (v13 = (WebCore *)v6[36]) == 0)
  {
    v15 = 0;
  }
  else
  {
    ++*((_DWORD *)v13 + 2);
    WebCore::screenAvailableRect(v13, v12);
    v15 = (int)v14;
    if (*((_DWORD *)v13 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v13 + 8))(v13);
    else
      --*((_DWORD *)v13 + 2);
  }
  do
  {
    v16 = __ldaxr(v7);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v7));
  if (!v17)
  {
    atomic_store(1u, v7);
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E31FE290;
    v19[1] = v7;
    v20 = v19;
    WTF::ensureOnMainThread();
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  }
  return v15;
}

unsigned int *WebCore::Screen::availHeight(WebCore::Screen *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  WebCore::Widget *v12;
  WebCore *v13;
  float v14;
  float v15;
  float v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v20;
  _QWORD *v21;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19605AD40);
  }
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if ((*(_QWORD *)(*(_QWORD *)(v6 + 136) + 704) & 0x4000) != 0)
    {
      {
        WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
      }
      if (WebCore::sharedObserver(void)::observer)
        v9 = (uint64_t *)WebCore::sharedObserver(void)::observer;
      else
        v9 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
      v10 = *(_QWORD *)(v6 + 296);
      if (v10)
      {
        *(_DWORD *)(v10 + 24) += 2;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 72))(v9, v10, 32);
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
      else
      {
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(*v9 + 72))(v9, 0, 32);
      }
    }
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 128) + 8) + 112))(*(_QWORD *)(*(_QWORD *)(v6 + 128) + 8)) & 0x40) != 0)
    {
      WebCore::LocalFrame::screenSize((WebCore::LocalFrame *)v6, v12);
      v15 = v16;
    }
    else
    {
      v13 = *(WebCore **)(v6 + 288);
      if (v13)
      {
        ++*((_DWORD *)v13 + 2);
        WebCore::screenAvailableRect(v13, v12);
        v15 = v14;
        if (*((_DWORD *)v13 + 2) == 1)
          (*(void (**)(WebCore *))(*(_QWORD *)v13 + 8))(v13);
        else
          --*((_DWORD *)v13 + 2);
      }
      else
      {
        v15 = 0.0;
      }
    }
    v6 = (int)v15;
    do
    {
      v17 = __ldaxr(v7);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v7));
    if (!v18)
    {
      atomic_store(1u, v7);
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = off_1E31FE290;
      v20[1] = v7;
      v21 = v20;
      WTF::ensureOnMainThread();
      if (v21)
        (*(void (**)(_QWORD *))(*v21 + 8))(v21);
    }
  }
  return (unsigned int *)v6;
}

unsigned int *WebCore::Screen::availWidth(WebCore::Screen *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  WebCore::Widget *v12;
  WebCore *v13;
  float v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v19;
  _QWORD *v20;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19605AF68);
  }
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if ((*(_QWORD *)(*(_QWORD *)(v6 + 136) + 704) & 0x4000) != 0)
    {
      {
        WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
      }
      if (WebCore::sharedObserver(void)::observer)
        v9 = (uint64_t *)WebCore::sharedObserver(void)::observer;
      else
        v9 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
      v10 = *(_QWORD *)(v6 + 296);
      if (v10)
      {
        *(_DWORD *)(v10 + 24) += 2;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 72))(v9, v10, 64);
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
      else
      {
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(*v9 + 72))(v9, 0, 64);
      }
    }
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 128) + 8) + 112))(*(_QWORD *)(*(_QWORD *)(v6 + 128) + 8)) & 0x40) != 0)
    {
      v15 = WebCore::LocalFrame::screenSize((WebCore::LocalFrame *)v6, v12);
    }
    else
    {
      v13 = *(WebCore **)(v6 + 288);
      if (v13)
      {
        ++*((_DWORD *)v13 + 2);
        WebCore::screenAvailableRect(v13, v12);
        v15 = v14;
        if (*((_DWORD *)v13 + 2) == 1)
          (*(void (**)(WebCore *))(*(_QWORD *)v13 + 8))(v13);
        else
          --*((_DWORD *)v13 + 2);
      }
      else
      {
        v15 = 0.0;
      }
    }
    v6 = (int)v15;
    do
    {
      v16 = __ldaxr(v7);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v7));
    if (!v17)
    {
      atomic_store(1u, v7);
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v19 = off_1E31FE290;
      v19[1] = v7;
      v20 = v19;
      WTF::ensureOnMainThread();
      if (v20)
        (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    }
  }
  return (unsigned int *)v6;
}

uint64_t WebCore::Screen::orientation(WebCore::Screen *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScreenOrientation *v7;
  WebCore::ScreenOrientation *v8;
  void *v9;
  WebCore::ScreenOrientation *v10;
  WebCore::ScreenOrientation *v11;
  WebCore::ScreenOrientation *v12;
  void *v13;
  WebCore::ScreenOrientation *v14;
  uint64_t result;
  bmalloc::api *v16;
  void *v17;
  bmalloc::api *v18;
  void *v19;

  if (*((_QWORD *)this + 3))
    return *((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 2);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
  {
    v7 = (WebCore::ScreenOrientation *)bmalloc::api::isoAllocate();
    v8 = WebCore::ScreenOrientation::ScreenOrientation(v7, 0);
    WebCore::ActiveDOMObject::suspendIfNeeded(v8);
    v10 = (WebCore::ScreenOrientation *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v7;
    if (v10)
    {
      if (*((_DWORD *)v10 + 20) == 1)
      {
        WebCore::ScreenOrientation::~ScreenOrientation(v10, v9);
        bmalloc::api::isoDeallocate(v18, v19);
      }
      else
      {
        --*((_DWORD *)v10 + 20);
      }
    }
    return *((_QWORD *)this + 3);
  }
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    v6 = 0;
LABEL_12:
    v11 = (WebCore::ScreenOrientation *)bmalloc::api::isoAllocate();
    v12 = WebCore::ScreenOrientation::ScreenOrientation(v11, (WebCore::Document *)v6);
    WebCore::ActiveDOMObject::suspendIfNeeded(v12);
    v14 = (WebCore::ScreenOrientation *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v11;
    if (v14)
    {
      if (*((_DWORD *)v14 + 20) == 1)
      {
        WebCore::ScreenOrientation::~ScreenOrientation(v14, v13);
        bmalloc::api::isoDeallocate(v16, v17);
        if (v6)
        {
LABEL_16:
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v6, v13);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
        }
        return *((_QWORD *)this + 3);
      }
      --*((_DWORD *)v14 + 20);
    }
    if (v6)
      goto LABEL_16;
    return *((_QWORD *)this + 3);
  }
  if (!*(_BYTE *)(v5 + 178))
  {
    v6 = v5 - 288;
    *(_DWORD *)(v5 - 264) += 2;
    goto LABEL_12;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

WebCore::ScreenOrientation *WebCore::ScreenOrientation::ScreenOrientation(WebCore::ScreenOrientation *this, WebCore::Document *a2)
{
  WebCore::ContextDestructionObserver *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = WebCore::ActiveDOMObject::ActiveDOMObject(this, a2);
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 5) = 0;
  *((_QWORD *)v3 + 6) = &unk_1E34029C8;
  v4 = (char *)v3 + 48;
  *((_DWORD *)v3 + 20) = 1;
  *(_QWORD *)v3 = &off_1E34028C0;
  *((_QWORD *)v3 + 3) = &unk_1E3402950;
  *((_QWORD *)v3 + 7) = 0;
  *((_QWORD *)v3 + 8) = &unk_1E34029F0;
  *((_QWORD *)v3 + 9) = 0;
  *((_BYTE *)v3 + 84) = 0;
  v5 = *((_QWORD *)v3 + 1);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 178))
        goto LABEL_18;
      v7 = *(_QWORD *)(v6 + 240);
      if (!v7)
        return this;
      if (!*(_QWORD *)(v7 + 8))
        return this;
      if (!WebCore::Document::visibilityState((WebCore::Document *)(v6 - 288)))
        return this;
      v8 = *((_QWORD *)this + 1);
      if (!v8)
        return this;
      v9 = *(_QWORD *)(v8 + 8);
      if (!v9)
        return this;
      if (*(_BYTE *)(v9 + 178))
      {
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x19605B240);
      }
      v10 = *(_QWORD *)(v9 + 240);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 24);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 8);
            if (v13)
            {
              v14 = *(_QWORD *)(v13 + 944);
              if (v14)
              {
                v15 = *(_QWORD *)(v14 + 8);
                if (v15)
                  (*(void (**)(uint64_t, char *))(*(_QWORD *)v15 + 40))(v15, v4);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void WebCore::ScreenOrientation::~ScreenOrientation(WebCore::ScreenOrientation *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 178))
      {
        __break(0xC471u);
        return;
      }
      v5 = *(_QWORD *)(v4 + 240);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 24);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 944);
              if (v9)
              {
                v10 = *(_QWORD *)(v9 + 8);
                if (v10)
                  (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 48))(v10, (char *)this + 48);
              }
            }
          }
        }
      }
    }
  }
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 9) = 0;
  }
  v15 = *((_QWORD *)this + 7);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 0;
    v16 = (unsigned int *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  WebCore::EventTarget::~EventTarget((WebCore::ScreenOrientation *)((char *)this + 24), a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v19);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ScreenOrientation::~ScreenOrientation(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::ScreenOrientation::~ScreenOrientation(WebCore::ScreenOrientation *this, void *a2)
{
  WebCore::ScreenOrientation::~ScreenOrientation((WebCore::ScreenOrientation *)((char *)this - 24), a2);
}

{
  WebCore::ScreenOrientation::~ScreenOrientation((WebCore::ScreenOrientation *)((char *)this - 48), a2);
}

{
  WebCore::ScreenOrientation::~ScreenOrientation((WebCore::ScreenOrientation *)((char *)this - 64), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ScreenOrientation::~ScreenOrientation((WebCore::ScreenOrientation *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ScreenOrientation::~ScreenOrientation((WebCore::ScreenOrientation *)((char *)this - 48), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ScreenOrientation::~ScreenOrientation((WebCore::ScreenOrientation *)((char *)this - 64), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::ScreenOrientation::scriptExecutionContext(WebCore::ScreenOrientation *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

WTF::StringImpl *WebCore::ScreenOrientation::lock(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  WebCore::SecurityOrigin *v17;
  WebCore::SecurityOrigin *v18;
  WTF::StringImpl *v19;
  const WebCore::SecurityOrigin *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *result;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t (*v41)();
  uint64_t (**v42)();
  uint64_t v43;
  int v44;
  uint64_t (***v45)();
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t (**v55)();
  uint64_t v56;
  uint64_t (***v57)();
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t (***v64)();
  WTF::StringImpl *v65;
  objc_class *v66;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_27;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_27;
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19605BA50);
  }
  if ((WebCore::Document::isFullyActive((WebCore::Document *)(v5 - 288)) & 1) == 0)
  {
LABEL_27:
    v30 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v66 = 0;
    LOBYTE(v64) = 8;
    if (v63)
      *(_DWORD *)v63 += 2;
    v65 = v63;
    WebCore::DeferredPromise::reject(v30, (unsigned __int8 *)&v64, 0, &v66);
    v31 = v65;
    v65 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v27);
      else
        *(_DWORD *)v31 -= 2;
    }
    result = v63;
    if (v63)
      goto LABEL_40;
    return result;
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9)
    goto LABEL_34;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_34;
  if (*(_BYTE *)(v10 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19605BA8CLL);
  }
  v11 = *(_QWORD *)(v10 + 240);
  if (!v11
    || (v12 = *(_QWORD *)(v11 + 8)) == 0
    || (v13 = *(_QWORD *)(v12 + 24)) == 0
    || (v14 = *(_QWORD *)(v13 + 8)) == 0
    || (v15 = *(_QWORD *)(v14 + 944)) == 0
    || (v16 = *(_QWORD **)(v15 + 8)) == 0)
  {
LABEL_34:
    v32 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v66 = 0;
    LOBYTE(v64) = 8;
    if (v62)
      *(_DWORD *)v62 += 2;
    v65 = v62;
    WebCore::DeferredPromise::reject(v32, (unsigned __int8 *)&v64, 0, &v66);
    v33 = v65;
    v65 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v27);
      else
        *(_DWORD *)v33 -= 2;
    }
    result = v62;
    if (v62)
      goto LABEL_40;
    return result;
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v5 - 96), v8);
  v18 = v17;
  WebCore::Document::topOrigin((WebCore::Document *)(v5 - 288), v19);
  if (!WebCore::SecurityOrigin::isSameOriginAs(v18, v20))
  {
    v34 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v66 = 0;
    LOBYTE(v64) = 14;
    if (v61)
      *(_DWORD *)v61 += 2;
    v65 = v61;
    WebCore::DeferredPromise::reject(v34, (unsigned __int8 *)&v64, 0, &v66);
    v35 = v65;
    v65 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v27);
      else
        *(_DWORD *)v35 -= 2;
    }
    result = v61;
    if (v61)
      goto LABEL_40;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 240);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 8);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 24);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 8);
        if (v25)
        {
          if ((*(_WORD *)(v25 + 658) & 4) == 0)
          {
            v26 = *a3;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v66 = 0;
            LOBYTE(v64) = 14;
            if (v60)
              *(_DWORD *)v60 += 2;
            v65 = v60;
            WebCore::DeferredPromise::reject(v26, (unsigned __int8 *)&v64, 0, &v66);
            v28 = v65;
            v65 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v27);
              else
                *(_DWORD *)v28 -= 2;
            }
            result = v60;
            if (!v60)
              return result;
LABEL_40:
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
            *(_DWORD *)result -= 2;
            return result;
          }
        }
      }
    }
  }
  if ((*(_QWORD *)(*(_QWORD *)(v5 + 392) + 680) & 0x800) != 0)
  {
    v36 = *(_QWORD *)(v5 + 1704);
    if (v36)
    {
      v37 = *(_DWORD *)(v36 + 8);
      *(_DWORD *)(v36 + 8) = v37 + 1;
      if (*(_QWORD *)(v36 + 56))
      {
        if (v37 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x19605BABCLL);
        }
        *(_DWORD *)(v36 + 8) = v37;
        goto LABEL_58;
      }
    }
    v51 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v66 = 0;
    LOBYTE(v64) = 14;
    if (v59)
      *(_DWORD *)v59 += 2;
    v65 = v59;
    WebCore::DeferredPromise::reject(v51, (unsigned __int8 *)&v64, 0, &v66);
    v53 = v65;
    v65 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v52);
      else
        *(_DWORD *)v53 -= 2;
    }
    result = v59;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v59, v52);
        if (!v36)
          return result;
        goto LABEL_84;
      }
      *(_DWORD *)v59 -= 2;
    }
    if (!v36)
      return result;
LABEL_84:
    v54 = *(_DWORD *)(v36 + 8);
    if (!v54)
    {
      __break(0xC471u);
      JUMPOUT(0x19605BADCLL);
    }
    *(_DWORD *)(v36 + 8) = v54 - 1;
    return result;
  }
LABEL_58:
  if (a2 < 4)
  {
    v38 = (unsigned int *)v16[3];
    v16[3] = 0;
    if (v38)
    {
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        atomic_store(1u, v38);
        WTF::fastFree((WTF *)v38, v21);
      }
    }
    v41 = (uint64_t (*)())v16[2];
    v16[2] = 0;
    if (!v41)
      goto LABEL_89;
    v42 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
    *v42 = (uint64_t (*)())&off_1E3402B60;
    v42[1] = v41;
    v43 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v43 = 1;
    v44 = *(_DWORD *)(a1 + 80);
    *(_QWORD *)(v43 + 8) = a1;
    ++*(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 80) = v44 + 2;
    v45 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
    *v45 = off_1E3402B38;
    v45[1] = (uint64_t (**)())a1;
    v45[2] = (uint64_t (**)())v43;
    v45[3] = v42;
    v64 = v45;
    v46 = *(_QWORD *)(a1 + 8);
    if (v46)
    {
      v47 = *(_QWORD *)(v46 + 8);
      if (v47)
      {
        v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v47 - 96) + 104))(v47 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v48, 0, (uint64_t *)&v64);
        v45 = v64;
        v64 = 0;
        if (!v45)
        {
LABEL_89:
          WebCore::ScreenOrientationManager::setLockPromise((uint64_t)v16, (_QWORD *)a1, a3);
          v56 = WTF::fastMalloc((WTF *)0x10);
          *(_DWORD *)v56 = 1;
          ++*(_DWORD *)(a1 + 80);
          *(_QWORD *)(v56 + 8) = a1;
          ++*(_QWORD *)(a1 + 16);
          v57 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x18);
          *v57 = &off_1E3402B88;
          v57[1] = (uint64_t (**)())a1;
          v57[2] = (uint64_t (**)())v56;
          v64 = v57;
          (*(void (**)(_QWORD *, uint64_t, uint64_t (****)()))(*v16 + 24))(v16, a2, &v64);
          result = (WTF::StringImpl *)v64;
          v64 = 0;
          if (result)
            return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
          return result;
        }
      }
      else
      {
        v64 = 0;
      }
      v55 = *v45;
    }
    else
    {
      v64 = 0;
      v55 = off_1E3402B38;
    }
    v55[1]();
    goto LABEL_89;
  }
  v49 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v66 = 0;
  LOBYTE(v64) = 6;
  if (v58)
    *(_DWORD *)v58 += 2;
  v65 = v58;
  WebCore::DeferredPromise::reject(v49, (unsigned __int8 *)&v64, 0, &v66);
  v50 = v65;
  v65 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v27);
    else
      *(_DWORD *)v50 -= 2;
  }
  result = v58;
  if (v58)
    goto LABEL_40;
  return result;
}

uint64_t WebCore::ScreenOrientation::unlock@<X0>(WebCore::ScreenOrientation *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  WebCore::SecurityOrigin *v7;
  WebCore::SecurityOrigin *v8;
  WTF::StringImpl *v9;
  const WebCore::SecurityOrigin *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    goto LABEL_12;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_12;
  if (*(_BYTE *)(v4 + 178))
    goto LABEL_25;
  if ((WebCore::Document::isFullyActive((WebCore::Document *)(v4 - 288)) & 1) == 0)
  {
LABEL_12:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16 = 8;
    goto LABEL_13;
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 - 96), v6);
  v8 = v7;
  WebCore::Document::topOrigin((WebCore::Document *)(v4 - 288), v9);
  result = WebCore::SecurityOrigin::isSameOriginAs(v8, v10);
  if ((result & 1) != 0)
  {
    v12 = *(_QWORD *)(v4 + 240);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 24);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15)
          {
            if ((*(_WORD *)(v15 + 658) & 4) == 0)
            {
              result = WTF::StringImpl::createWithoutCopyingNonEmpty();
              v16 = 14;
LABEL_13:
              *(_BYTE *)a2 = v16;
              *(_BYTE *)(a2 + 16) = 1;
              return result;
            }
          }
        }
      }
    }
    v17 = *((_QWORD *)this + 1);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        if (!*(_BYTE *)(v18 + 178))
        {
          v19 = *(_QWORD *)(v18 + 240);
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 8);
            if (v20)
            {
              v21 = *(_QWORD *)(v20 + 24);
              if (v21)
              {
                v22 = *(_QWORD *)(v21 + 8);
                if (v22)
                {
                  v23 = *(_QWORD *)(v22 + 944);
                  if (v23)
                  {
                    result = *(_QWORD *)(v23 + 8);
                    if (result)
                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
                  }
                }
              }
            }
          }
          goto LABEL_24;
        }
LABEL_25:
        __break(0xC471u);
        JUMPOUT(0x19605BC50);
      }
    }
  }
LABEL_24:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t WebCore::ScreenOrientation::angle(WebCore::ScreenOrientation *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  PAL *HasIPadCapability;
  unsigned int v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    goto LABEL_11;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    goto LABEL_11;
  if (*(_BYTE *)(v2 + 178))
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  v3 = *(_QWORD *)(v2 + 240);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 24)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD *)(v6 + 944)) != 0
    && (this = *(WebCore::ScreenOrientation **)(v7 + 8)) != 0)
  {
    HasIPadCapability = (PAL *)(*(uint64_t (**)(WebCore::ScreenOrientation *))(*(_QWORD *)this + 16))(this);
    v9 = HasIPadCapability;
  }
  else
  {
LABEL_11:
    HasIPadCapability = (PAL *)PAL::deviceHasIPadCapability(this);
    if ((_DWORD)HasIPadCapability)
      v9 = 2;
    else
      v9 = 0;
  }
  v10 = PAL::deviceHasIPadCapability(HasIPadCapability);
  v11 = 0xB40000010E005AuLL >> (16 * v9);
  if (v9 >= 4)
    LOWORD(v11) = 0;
  v12 = 0x10E005A00B40000uLL >> (16 * v9);
  if (v9 >= 4)
    LOWORD(v12) = 0;
  if ((v10 & 1) == 0)
    LOWORD(v11) = v12;
  return (unsigned __int16)v11;
}

uint64_t WebCore::ScreenOrientation::visibilityStateChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v1 = *(_QWORD *)(this + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
      {
        this = 105;
        __break(0xC471u);
      }
      else
      {
        v3 = *(_QWORD *)(v2 + 240);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (v4)
          {
            v5 = *(_QWORD *)(v4 + 24);
            if (v5)
            {
              v6 = *(_QWORD *)(v5 + 8);
              if (v6)
              {
                v7 = *(_QWORD *)(v6 + 944);
                if (v7)
                {
                  v8 = *(_QWORD **)(v7 + 8);
                  if (v8)
                  {
                    v9 = this;
                    v10 = WebCore::Document::visibilityState((WebCore::Document *)(v2 - 288));
                    v11 = 48;
                    if (v10)
                      v11 = 40;
                    return (*(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v11))(v8, v9 + 48);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::ScreenOrientation::visibilityStateChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v1 = *(_QWORD *)(this - 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
      {
        this = 105;
        __break(0xC471u);
      }
      else
      {
        v3 = *(_QWORD *)(v2 + 240);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (v4)
          {
            v5 = *(_QWORD *)(v4 + 24);
            if (v5)
            {
              v6 = *(_QWORD *)(v5 + 8);
              if (v6)
              {
                v7 = *(_QWORD *)(v6 + 944);
                if (v7)
                {
                  v8 = *(_QWORD **)(v7 + 8);
                  if (v8)
                  {
                    v9 = this;
                    v10 = WebCore::Document::visibilityState((WebCore::Document *)(v2 - 288));
                    v11 = 48;
                    if (v10)
                      v11 = 40;
                    return (*(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v11))(v8, v9 - 16);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

_DWORD *WebCore::ScreenOrientation::screenOrientationDidChange(WebCore *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  _DWORD *result;
  _DWORD *v11;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(a1);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v8 = *(_QWORD *)(v4 + 368) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 368);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  v11 = (_DWORD *)v5;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(a1, (uint64_t)a1 + 24, 0, (uint64_t *)&v11);
  result = v11;
  if (v11)
  {
    if (v11[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v11 + 8))();
    else
      --v11[4];
  }
  return result;
}

_DWORD *`non-virtual thunk to'WebCore::ScreenOrientation::screenOrientationDidChange(uint64_t a1)
{
  return WebCore::ScreenOrientation::screenOrientationDidChange((WebCore *)(a1 - 48));
}

uint64_t WebCore::ScreenOrientation::suspend(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
      {
        result = 105;
        __break(0xC471u);
      }
      else
      {
        v3 = *(_QWORD *)(v2 + 240);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (v4)
          {
            v5 = *(_QWORD *)(v4 + 24);
            if (v5)
            {
              v6 = *(_QWORD *)(v5 + 8);
              if (v6)
              {
                v7 = *(_QWORD *)(v6 + 944);
                if (v7)
                {
                  v8 = *(_QWORD *)(v7 + 8);
                  if (v8)
                    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, result + 48);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *WebCore::ScreenOrientation::resume(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = this[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
        goto LABEL_18;
      v3 = *(_QWORD *)(v2 + 240);
      if (!v3)
        return this;
      if (!*(_QWORD *)(v3 + 8))
        return this;
      v4 = this;
      this = (_QWORD *)WebCore::Document::visibilityState((WebCore::Document *)(v2 - 288));
      if (!(_DWORD)this)
        return this;
      v5 = v4[1];
      if (!v5)
        return this;
      v6 = *(_QWORD *)(v5 + 8);
      if (!v6)
        return this;
      if (*(_BYTE *)(v6 + 178))
      {
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x19605C144);
      }
      v7 = *(_QWORD *)(v6 + 240);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 24);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 8);
            if (v10)
            {
              v11 = *(_QWORD *)(v10 + 944);
              if (v11)
              {
                this = *(_QWORD **)(v11 + 8);
                if (this)
                  return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*this + 40))(this, v4 + 6);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ScreenOrientation::stop(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  uint64_t v23;

  v1 = *(_QWORD *)(this + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x19605C2FCLL);
      }
      v3 = *(_QWORD *)(v2 + 240);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 24);
          if (v5)
          {
            v6 = *(_QWORD *)(v5 + 8);
            if (v6)
            {
              v7 = *(_QWORD *)(v6 + 944);
              if (v7)
              {
                v8 = *(_QWORD **)(v7 + 8);
                if (v8)
                {
                  v9 = this;
                  (*(void (**)(_QWORD *, uint64_t))(*v8 + 48))(v8, this + 48);
                  this = v8[3];
                  if (this)
                  {
                    v11 = *(_QWORD *)(this + 8);
                    v12 = v11 ? v11 - 48 : 0;
                    if (v12 == v9)
                    {
                      v8[3] = 0;
                      do
                      {
                        v13 = __ldaxr((unsigned int *)this);
                        v14 = v13 - 1;
                      }
                      while (__stlxr(v14, (unsigned int *)this));
                      if (!v14)
                      {
                        atomic_store(1u, (unsigned int *)this);
                        WTF::fastFree((WTF *)this, v10);
                      }
                      v15 = v8[2];
                      v8[2] = 0;
                      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                      *v16 = &off_1E3402BD8;
                      v16[1] = v15;
                      v17 = WTF::fastMalloc((WTF *)0x10);
                      *(_DWORD *)v17 = 1;
                      v18 = *(_DWORD *)(v9 + 80);
                      *(_QWORD *)(v17 + 8) = v9;
                      ++*(_QWORD *)(v9 + 16);
                      *(_DWORD *)(v9 + 80) = v18 + 2;
                      this = WTF::fastMalloc((WTF *)0x20);
                      *(_QWORD *)this = off_1E3402B38;
                      *(_QWORD *)(this + 8) = v9;
                      *(_QWORD *)(this + 16) = v17;
                      *(_QWORD *)(this + 24) = v16;
                      v23 = this;
                      v19 = *(_QWORD *)(v9 + 8);
                      if (v19)
                      {
                        v20 = *(_QWORD *)(v19 + 8);
                        if (v20)
                        {
                          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v20 - 96) + 104))(v20 - 96);
                          WebCore::EventLoopTaskGroup::queueTask(v21, 0, &v23);
                          this = v23;
                          v23 = 0;
                          if (!this)
                            return this;
                        }
                        else
                        {
                          v23 = 0;
                        }
                        v22 = *(uint64_t (***)())this;
                      }
                      else
                      {
                        v23 = 0;
                        v22 = off_1E3402B38;
                      }
                      return v22[1]();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ScreenOrientation::virtualHasPendingActivity(WebCore::ScreenOrientation *this)
{
  return *((unsigned __int8 *)this + 84);
}

WebCore::EventNames **WebCore::ScreenOrientation::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[5];
  if ((v5 & 0x1000000000000) != 0 && (v7 = v5 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(uint64_t **)(v7 + 16);
    v10 = *(_QWORD *)(v4 + 368);
    v11 = 32 * v8 - 32;
    do
    {
      v12 = *v9;
      v9 += 4;
      v6 = v12 == v10;
      v13 = v12 == v10 || v11 == 0;
      v11 -= 32;
    }
    while (!v13);
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)v1 + 84) = v6;
  return this;
}

WebCore::EventNames **`non-virtual thunk to'WebCore::ScreenOrientation::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[2];
  if ((v5 & 0x1000000000000) != 0 && (v7 = v5 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(uint64_t **)(v7 + 16);
    v10 = *(_QWORD *)(v4 + 368);
    v11 = 32 * v8 - 32;
    do
    {
      v12 = *v9;
      v9 += 4;
      v6 = v12 == v10;
      v13 = v12 == v10 || v11 == 0;
      v11 -= 32;
    }
    while (!v13);
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)v1 + 60) = v6;
  return this;
}

unint64_t WebCore::useSmoothScrolling(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v2 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v4 + 680) + 664) & 1) != 0)
  {
    if (*(_BYTE *)(v4 + 3384) == 2)
    {
      v5 = WebCore::Document::body(*(WebCore::Document **)(*(_QWORD *)(a2 + 40) + 8));
      if (v5)
      {
        v7 = v5;
        *(_DWORD *)(v5 + 24) += 2;
        if (WebCore::Document::isBodyPotentiallyScrollable(v4, (_QWORD *)v5))
          v5 = 0;
        else
          v5 = v7;
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          v8 = v5;
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v7);
          v5 = v8;
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 1272);
    }
  }
  else
  {
    v5 = WebCore::Document::body(*(WebCore::Document **)(*(_QWORD *)(a2 + 40) + 8));
  }
  if (v5 == v2)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 1272);
  if ((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19605C52CLL);
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 680) + 664) & 2) == 0)
    return 0;
  if (a1)
    return a1 == 2;
  return ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x58)
                                                        + 40)
                                            + 636) >> 11) & 1;
}

BOOL WebCore::shouldTreatAsPotentiallyTrustworthy(WebCore *this, const WTF::URL *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  char v14;
  int v15;
  uint64_t isLocalHostOrLoopbackIPAddress;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  char v22;
  int v23;
  int v25;
  uint64_t *v26;
  unsigned __int8 *v27;
  uint64_t v28;

  v3 = (unsigned __int8 *)WTF::URL::protocol(this);
  v5 = v4;
  v6 = WTF::URL::host(this);
  v10 = v6;
  v11 = v7;
  v27 = v3;
  v28 = v5;
  if (v3)
  {
    if (__ldaxr(WebCore::schemeRegistryLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::schemeRegistryLock))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
LABEL_6:
    {
      WebCore::secureSchemes(void)::secureSchemes = (uint64_t)WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinSecureSchemes);
    }
    v13 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::secureSchemes(void)::secureSchemes, &v27, v8, v9);
    v14 = v13;
    v15 = __ldxr(WebCore::schemeRegistryLock);
    if (v15 == 1)
    {
      if (!__stlxr(0, WebCore::schemeRegistryLock))
      {
        if ((v13 & 1) != 0)
          return 1;
        goto LABEL_14;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
    if ((v14 & 1) != 0)
      return 1;
LABEL_14:
    isLocalHostOrLoopbackIPAddress = WebCore::SecurityOrigin::isLocalHostOrLoopbackIPAddress(v10, v11);
    if ((isLocalHostOrLoopbackIPAddress & 1) != 0)
      return 1;
    v27 = v3;
    v28 = v5;
    if (__ldaxr(WebCore::schemeRegistryLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::schemeRegistryLock))
    {
      goto LABEL_23;
    }
    isLocalHostOrLoopbackIPAddress = MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
LABEL_23:
    {
      v26 = WebCore::builtinLocalURLSchemes((WebCore *)isLocalHostOrLoopbackIPAddress);
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(&WebCore::localURLSchemes(void)::localSchemes, (WTF::ASCIICaseInsensitiveHash **)v26);
    }
    v22 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::localURLSchemes(void)::localSchemes, &v27, v17, v18);
    v23 = __ldxr(WebCore::schemeRegistryLock);
    if (v23 == 1)
    {
      if (!__stlxr(0, WebCore::schemeRegistryLock))
      {
LABEL_30:
        if ((v22 & 1) != 0)
          return 1;
        goto LABEL_31;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
    goto LABEL_30;
  }
  if ((WebCore::SecurityOrigin::isLocalHostOrLoopbackIPAddress(v6, v7) & 1) != 0)
    return 1;
LABEL_31:
  v27 = v3;
  v28 = v5;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
LABEL_34:
    MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
    goto LABEL_35;
  }
  if (__stxr(1u, WebCore::schemeRegistryLock))
    goto LABEL_34;
LABEL_35:
  {
    if (WebCore::schemesHandledBySchemeHandler(void)::set)
      v19 = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::lookup<WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>,WTF::StringView>((uint64_t)&WebCore::schemesHandledBySchemeHandler(void)::set, (uint64_t)&v27) != 0;
    else
      v19 = 0;
  }
  else
  {
    v19 = 0;
    WebCore::schemesHandledBySchemeHandler(void)::set = 0;
    unk_1EE2F84B0 = 0;
    qword_1EE2F84B8 = 0;
  }
  v25 = __ldxr(WebCore::schemeRegistryLock);
  if (v25 == 1)
  {
    if (!__stlxr(0, WebCore::schemeRegistryLock))
      return v19;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
  return v19;
}

uint64_t WebCore::SecurityOriginData::setPort(uint64_t a1)
{
  uint64_t v1;
  WebCore::SecurityOriginData *v3;
  const WTF::URL *v4;
  int v5;
  int *v6;

  v5 = 0;
  v1 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::SecurityOriginData *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::SecurityOriginData::fromURL(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(int **, uint64_t))off_1E3402A68[v1])(&v6, a1);
  }
}

void WebCore::SecurityOriginData::fromURL(WebCore::SecurityOriginData *this@<X0>, const WTF::URL *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Process *IdentifierInternal;
  uint64_t v6;

  if (WebCore::SecurityOriginData::shouldTreatAsOpaqueOrigin(this, a2))
  {
    IdentifierInternal = (WebCore::Process *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    WebCore::Process::identifier(IdentifierInternal);
    *(_QWORD *)a3 = IdentifierInternal;
    *(_QWORD *)(a3 + 8) = v6;
    *(_DWORD *)(a3 + 24) = 1;
  }
  else
  {
    WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(this, a3);
  }
}

WTF::StringImpl *WebCore::SecurityOriginData::toURL@<X0>(WebCore::SecurityOriginData *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WebCore::SecurityOriginData::toString(this, &v5);
  MEMORY[0x19AEA52D4](a2, &v5, 0);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::SecurityOrigin::SecurityOrigin(WebCore::SecurityOrigin *this)
{
  uint64_t IdentifierInternal;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  char v6;
  char **v7;
  char *v8;

  *(_DWORD *)this = 1;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v3 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v3 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) != 0)
  {
    v4 = WebCore::Process::globalIdentifier;
    *((_QWORD *)this + 1) = IdentifierInternal;
    *((_QWORD *)this + 2) = v4;
    *((_DWORD *)this + 8) = 1;
    v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v5 += 2;
    *((_QWORD *)this + 5) = v5;
    *((_QWORD *)this + 6) = 0;
    *(_QWORD *)((char *)this + 54) = 0;
    *((_WORD *)this + 31) = 1;
  }
  else
  {
    __break(1u);
  }
}

{
  uint64_t IdentifierInternal;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  char v6;
  char **v7;
  char *v8;

  *(_DWORD *)this = 1;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v3 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v3 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) != 0)
  {
    v4 = WebCore::Process::globalIdentifier;
    *((_QWORD *)this + 1) = IdentifierInternal;
    *((_QWORD *)this + 2) = v4;
    *((_DWORD *)this + 8) = 1;
    v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v5 += 2;
    *((_QWORD *)this + 5) = v5;
    *((_QWORD *)this + 6) = 0;
    *(_QWORD *)((char *)this + 54) = 0;
    *((_WORD *)this + 31) = 1;
  }
  else
  {
    __break(1u);
  }
}

void WebCore::SecurityOriginData::createOpaque(uint64_t a1@<X8>)
{
  WebCore::Process *IdentifierInternal;
  uint64_t v4;

  IdentifierInternal = (WebCore::Process *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  WebCore::Process::identifier(IdentifierInternal);
  *(_QWORD *)a1 = IdentifierInternal;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 24) = 1;
}

WebCore::SecurityOrigin *WebCore::SecurityOrigin::SecurityOrigin(WebCore::SecurityOrigin *this, const WebCore::SecurityOrigin *a2)
{
  char *v2;
  uint64_t v3;
  int v6;
  char v8;
  char *v9;
  _QWORD v10[3];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)this = 1;
  v2 = (char *)this + 8;
  v3 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v9 = &v8;
  ((void (*)(_QWORD *__return_ptr, char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSJ_EUlRT_E_EEJRKNS0_6__implIJSB_SI_EEEEEEDcOSN_DpOT0____fmatrix[v3])(v10, &v9, (char *)a2 + 8);
  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 8) = -1;
  v6 = v11;
  if (v11 != -1)
  {
    ((void (*)(char **, char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v11])(&v9, v2, v10);
    *((_DWORD *)this + 8) = v6;
    if (v11 != -1)
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v11])(&v9, v10);
  }
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_BYTE *)this + 60) = *((_BYTE *)a2 + 60);
  *(_WORD *)((char *)this + 61) = *(_WORD *)((char *)a2 + 61);
  *((_BYTE *)this + 63) = *((_BYTE *)a2 + 63);
  return this;
}

WTF::StringImpl *WebCore::SecurityOrigin::createForBlobURL@<X0>(WebCore::SecurityOrigin *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  const WTF::URL *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  uint64_t v12;
  uint64_t v13;
  WebCore::Process *IdentifierInternal;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;

  if (WTF::URL::protocolIs()
    && (result = WebCore::ThreadableBlobRegistry::getCachedOrigin(this, &v17), v17))
  {
    *a2 = (uint64_t)v17;
  }
  else
  {
    WTF::URL::path(this);
    if ((v5 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    MEMORY[0x19AEA52D4](&v17, &v16, 0);
    v7 = v16;
    v16 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    if ((v18 & 1) != 0
      && ((v18 & 2) != 0
       || (WTF::URL::protocolIs() & 1) != 0
       || (v12 = WTF::URL::protocol((WTF::URL *)&v17),
           WebCore::LegacySchemeRegistry::schemeIsHandledBySchemeHandler(v12, v13))))
    {
      v8 = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)v8 = 1;
      if (WebCore::SecurityOriginData::shouldTreatAsOpaqueOrigin((WebCore::SecurityOriginData *)&v17, v9))
      {
        IdentifierInternal = (WebCore::Process *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
        WebCore::Process::identifier(IdentifierInternal);
        *(_QWORD *)(v8 + 8) = IdentifierInternal;
        *(_QWORD *)(v8 + 16) = v15;
        *(_DWORD *)(v8 + 32) = 1;
      }
      else
      {
        WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((WebCore::SecurityOriginData *)&v17, v8 + 8);
      }
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      WebCore::SecurityOrigin::initializeShared((WebCore::SecurityOrigin *)v8, (const WTF::URL *)&v17);
      *a2 = v8;
    }
    else
    {
      WebCore::SecurityOrigin::createOpaque(a2);
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::SecurityOrigin::opaqueOrigin(WebCore::SecurityOrigin *this)
{
  uint64_t v1;
  uint64_t IdentifierInternal;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  char v6;
  char **v7;
  char *v8;

  {
    v1 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v1 = 1;
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v3 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
    if (v3 != -1)
    {
      v8 = &v6;
      v7 = &v8;
      std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
    }
    if ((WebCore::Process::globalIdentifier & 1) != 0)
    {
      v4 = WebCore::Process::globalIdentifier;
      *(_QWORD *)(v1 + 8) = IdentifierInternal;
      *(_QWORD *)(v1 + 16) = v4;
      *(_DWORD *)(v1 + 32) = 1;
      v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v5 += 2;
      *(_QWORD *)(v1 + 40) = v5;
      *(_QWORD *)(v1 + 48) = 0;
      *(_QWORD *)(v1 + 54) = 0;
      *(_WORD *)(v1 + 62) = 1;
      WebCore::SecurityOrigin::opaqueOrigin(void)::origin = v1;
    }
    else
    {
      __break(1u);
    }
  }
}

WebCore::SecurityOrigin *WebCore::SecurityOrigin::isolatedCopy@<X0>(WebCore::SecurityOrigin *this@<X0>, WebCore::SecurityOrigin **a2@<X8>)
{
  WebCore::SecurityOrigin *v4;
  WebCore::SecurityOrigin *result;

  v4 = (WebCore::SecurityOrigin *)WTF::fastMalloc((WTF *)0x40);
  result = WebCore::SecurityOrigin::SecurityOrigin(v4, this);
  *a2 = result;
  return result;
}

BOOL WebCore::SecurityOrigin::isSameSchemeHostPort(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v7;
  _BOOL4 v9;
  _BOOL4 v10;
  char v11;
  char v13;
  char *v14;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a1 + 32);
    v5 = *(_DWORD *)(a2 + 32);
    v7 = v5 == (_DWORD)v4 && v5 != -1;
    if ((_DWORD)v4 == -1 || !v7)
    {
      v9 = v5 == -1;
      if ((_DWORD)v4 == -1)
        v10 = v9;
      else
        v10 = v7;
      if (!v10)
        return 0;
    }
    else
    {
      v14 = &v13;
      v11 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v4])(&v14, a1 + 8, a2 + 8);
      if ((v11 & 1) == 0)
        return 0;
    }
  }
  return !*(_BYTE *)(a1 + 63) || !(*(unsigned __int8 *)(a1 + 59) | *(unsigned __int8 *)(a2 + 59));
}

uint64_t WebCore::SecurityPolicy::isAccessAllowed(uint64_t a1, WebCore::SecurityOrigin *this, uint64_t (***a3)(_QWORD, WebCore::SecurityOrigin *))
{
  WTF *v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF *v25;
  char v26;

  WebCore::SecurityOrigin::create(this, (uint64_t *)&v25);
  v6 = v25;
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_214))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_214))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](&_MergedGlobals_214);
LABEL_5:
  if ((byte_1ECE839A9 & 1) == 0)
  {
    qword_1ECE839B0 = 0;
    byte_1ECE839A9 = 1;
  }
  v8 = WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(a1 + 8);
  if (v8 && (v10 = *(unsigned int *)(v8 + 12), (_DWORD)v10))
  {
    v11 = *(WTF ***)v8;
    v12 = 32 * v10 - 32;
    do
    {
      v13 = WebCore::OriginAccessEntry::matchesOrigin(v11, v6);
      if ((v13 & 1) != 0)
        break;
      v11 += 4;
      v14 = v12;
      v12 -= 32;
    }
    while (v14);
    v15 = v13 ^ 1;
  }
  else
  {
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)&_MergedGlobals_214);
  if (v16 != 1)
  {
    __clrex();
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_214);
    if (v15)
      goto LABEL_17;
LABEL_20:
    v17 = 1;
    goto LABEL_21;
  }
  if (__stlxr(0, (unsigned __int8 *)&_MergedGlobals_214))
    goto LABEL_19;
  if (!v15)
    goto LABEL_20;
LABEL_17:
  v17 = (**a3)(a3, this);
LABEL_21:
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v18));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v18);
      v22 = (WTF::StringImpl *)*((_QWORD *)v18 + 6);
      *((_QWORD *)v18 + 6) = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v9);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = (WTF::StringImpl *)*((_QWORD *)v18 + 5);
      *((_QWORD *)v18 + 5) = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v9);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = *((unsigned int *)v18 + 8);
      if ((_DWORD)v24 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v24])(&v26, (char *)v18 + 8);
      *((_DWORD *)v18 + 8) = -1;
      WTF::fastFree(v18, v9);
    }
  }
  return v17;
}

uint64_t WebCore::SecurityOrigin::isMatchingRegistrableDomainSuffix(WebCore::SecurityOrigin *this, const WTF::String *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  int v8;
  WTF::String *v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  char IsIPAddress;
  char v26;
  char **v27;
  char *v28;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  v6 = *((unsigned int *)this + 8);
  if ((_DWORD)v6 != -1)
  {
    v8 = a3 ^ 1;
    v21 = (WTF::StringImpl *)&v28;
    v9 = (WTF::String *)((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v6])(&v21, (char *)this + 8);
    WTF::String::convertToASCIILowercase(v9);
    WTF::String::convertToASCIILowercase(a2);
    v23 = 0;
    v24 = v8;
    IsIPAddress = WTF::URL::hostIsIPAddress();
    if (!WebCore::OriginAccessEntry::matchesOrigin(&v21, this))
    {
      v3 = 0;
LABEL_20:
      v18 = v22;
      v22 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v10);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = v21;
      v21 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v10);
        else
          *(_DWORD *)v19 -= 2;
      }
      return v3;
    }
    if (*(_QWORD *)a2)
      v11 = *(_DWORD *)(*(_QWORD *)a2 + 4);
    else
      v11 = 0;
    v12 = *((unsigned int *)this + 8);
    if ((_DWORD)v12 != -1)
    {
      v28 = (char *)&v27;
      v13 = *(_QWORD *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v12])(&v28, (char *)this + 8);
      if (v13)
        LODWORD(v13) = *(_DWORD *)(v13 + 4);
      if (v11 == (_DWORD)v13)
      {
        v3 = 1;
      }
      else
      {
        v14 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
        if (v14 != -1)
        {
          v28 = &v26;
          v27 = &v28;
          std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
        }
        v15 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          v16 = *(_QWORD *)(v15 + 8);
          v17 = *(unsigned int *)(v15 + 4) | ((unint64_t)((*(_DWORD *)(v15 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v16 = 0;
          v17 = 0x100000000;
        }
        v3 = WebCore::PublicSuffixStore::platformIsPublicSuffix((uint64_t)&WebCore::PublicSuffixStore::singleton(void)::store, v16, v17) ^ 1;
      }
      goto LABEL_20;
    }
  }
  v20 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::SecurityOrigin::grantLoadLocalResources(v20);
}

uint64_t WebCore::SecurityOrigin::grantLoadLocalResources(uint64_t this)
{
  *(_BYTE *)(this + 58) = 1;
  return this;
}

uint64_t WebCore::SecurityOrigin::grantUniversalAccess(uint64_t this)
{
  *(_BYTE *)(this + 56) = 1;
  return this;
}

WTF::StringImpl *WebCore::SecurityOrigin::toURL@<X0>(WebCore::SecurityOrigin *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WebCore::SecurityOriginData::toString((WebCore::SecurityOrigin *)((char *)this + 8), &v5);
  MEMORY[0x19AEA52D4](a2, &v5, 0);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::SecurityOrigin::create@<X0>(uint64_t *a1@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>, __n128 a5@<Q1>)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  unint64_t v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  _WORD *v26;
  int8x16_t *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _BYTE *v31;
  _BYTE *v32;
  size_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  char *v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  char *v46;
  char *v47;
  char *v48;
  __int16 v49;
  _WORD *v50;
  char *v51;
  int8x16_t *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  char *v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  char *v62;
  char *v63;
  char *v64;
  __int16 v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int128 *v71;
  unsigned __int128 *v72;
  unsigned __int128 v73;
  unsigned __int128 *v74;
  unsigned __int128 *v75;
  unsigned __int128 v76;
  char v77;
  char v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80[5];
  WTF::StringImpl *v81;
  int8x16x2_t v82;
  int8x16x2_t v83;
  int8x16x2_t v84;
  int8x16x2_t v85;
  int8x16x2_t v86;
  int8x16x2_t v87;

  v9 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v10 = *(WTF::StringImpl **)(v9 + 8);
    v11 = *(_DWORD *)(v9 + 4);
    v12 = ((unint64_t)*(unsigned int *)(v9 + 16) >> 2) & 1;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 1;
  }
  {
    if (v11)
    {
LABEL_5:
      result = PAL::decodeEscapeSequences<PAL::URLEscapeSequence>(v10, v11 | (v12 << 32), (PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding, &v81, a5);
      goto LABEL_18;
    }
  }
  else
  {
    PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
    *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"UTF-8", a2);
    *((_QWORD *)&xmmword_1ECE86C80 + 1) = v14;
    v80[0] = (WTF::StringImpl *)xmmword_1ECE86C80;
    v80[1] = v14;
    if (v14 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)v80))
      {
        v15 = 165;
      }
      else
      {
        v15 = 92;
      }
    }
    else
    {
      v15 = 92;
    }
    word_1ECE86C90 = v15;
    if (v11)
      goto LABEL_5;
  }
  if (v12)
    result = (WTF::StringImpl *)WTF::String::String();
  else
    result = (WTF::StringImpl *)WTF::String::String();
LABEL_18:
  v16 = *a1;
  if (*a1)
    *(_DWORD *)v16 += 2;
  v17 = *(_QWORD *)a2;
  if (v17)
    *(_DWORD *)v17 += 2;
  if (v16)
  {
    v18 = *(_DWORD *)(v16 + 4);
    if (v17)
      goto LABEL_24;
LABEL_60:
    v19 = 0;
    goto LABEL_25;
  }
  v18 = 0;
  if (!v17)
    goto LABEL_60;
LABEL_24:
  v19 = *(_DWORD *)(v17 + 4);
  if (v19 < 0)
  {
LABEL_133:
    __break(0xC471u);
    return result;
  }
LABEL_25:
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    goto LABEL_133;
  v20 = __OFADD__(v21, 3);
  v22 = v21 + 3;
  v23 = v20;
  if (v18 < 0)
    goto LABEL_133;
  if (v23)
    goto LABEL_133;
  v24 = (v18 + v22);
  if (__OFADD__(v18, v22))
    goto LABEL_133;
  if ((!v16 || (*(_BYTE *)(v16 + 16) & 4) != 0) && (!v17 || (*(_BYTE *)(v17 + 16) & 4) != 0))
  {
    if ((v24 & 0x80000000) != 0)
      goto LABEL_133;
    result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v24 + 20));
    v25 = v80[0];
    if (!v80[0])
      goto LABEL_133;
    v31 = (char *)v80[0] + 20;
    *(_DWORD *)v80[0] = 2;
    *((_DWORD *)v25 + 1) = v24;
    *((_QWORD *)v25 + 1) = (char *)v25 + 20;
    *((_DWORD *)v25 + 4) = 4;
    if (v16)
    {
      v32 = *(_BYTE **)(v16 + 8);
      v33 = *(unsigned int *)(v16 + 4);
      if ((*(_BYTE *)(v16 + 16) & 4) != 0)
      {
        if ((_DWORD)v33)
        {
          if ((_DWORD)v33 == 1)
            *v31 = *v32;
          else
            memcpy((char *)v25 + 20, v32, v33);
        }
      }
      else
      {
        if (v33 < 0x10)
        {
          v71 = (unsigned __int128 *)((char *)v25 + 20);
        }
        else
        {
          v71 = (unsigned __int128 *)&v31[v33 & 0xFFFFFFF0];
          v72 = (unsigned __int128 *)((char *)v25 + 20);
          do
          {
            v73 = (unsigned __int128)vld2q_s8(v32);
            v32 += 32;
            *v72++ = v73;
          }
          while (v72 != v71);
        }
        while (v71 != (unsigned __int128 *)&v31[v33])
        {
          v77 = *v32;
          v32 += 2;
          *(_BYTE *)v71 = v77;
          v71 = (unsigned __int128 *)((char *)v71 + 1);
        }
      }
      v34 = *(unsigned int *)(v16 + 4);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v31[v34];
    v35[2] = 47;
    *(_WORD *)v35 = 12090;
    v36 = v35 + 3;
    if (v17)
    {
      v37 = *(_BYTE **)(v17 + 8);
      v38 = *(unsigned int *)(v17 + 4);
      if ((*(_BYTE *)(v17 + 16) & 4) != 0)
      {
        if ((_DWORD)v38)
        {
          if ((_DWORD)v38 == 1)
            *v36 = *v37;
          else
            memcpy(v36, v37, v38);
        }
      }
      else
      {
        if (v38 < 0x10)
        {
          v74 = (unsigned __int128 *)(v35 + 3);
        }
        else
        {
          v74 = (unsigned __int128 *)&v36[v38 & 0xFFFFFFF0];
          v75 = (unsigned __int128 *)(v35 + 3);
          do
          {
            v76 = (unsigned __int128)vld2q_s8(v37);
            v37 += 32;
            *v75++ = v76;
          }
          while (v75 != v74);
        }
        while (v74 != (unsigned __int128 *)&v36[v38])
        {
          v78 = *v37;
          v37 += 2;
          *(_BYTE *)v74 = v78;
          v74 = (unsigned __int128 *)((char *)v74 + 1);
        }
      }
      v39 = *(unsigned int *)(v17 + 4);
    }
    else
    {
      v39 = 0;
    }
    v36[v39] = 47;
  }
  else
  {
    if (v24 > 0x7FFFFFEF)
      goto LABEL_133;
    result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(2 * (v18 + v22) + 20));
    v25 = v80[0];
    if (!v80[0])
      goto LABEL_133;
    v26 = (_WORD *)((char *)v80[0] + 20);
    *(_DWORD *)v80[0] = 2;
    *((_DWORD *)v25 + 1) = v24;
    *((_QWORD *)v25 + 1) = (char *)v25 + 20;
    *((_DWORD *)v25 + 4) = 0;
    if (v16)
    {
      v27 = *(int8x16_t **)(v16 + 8);
      v28 = *(unsigned int *)(v16 + 4);
      if ((*(_BYTE *)(v16 + 16) & 4) != 0)
      {
        v29 = (char *)&v26[v28];
        if (v28 >= 0x40)
        {
          v30 = (char *)&v26[v28 & 0xFFFFFFC0];
          v41 = 0uLL;
          v42 = (char *)v25 + 20;
          do
          {
            v82.val[0] = *v27;
            v43 = v27[1];
            v84.val[0] = v27[2];
            v44 = v27[3];
            v27 += 4;
            v45 = v44;
            v84.val[1] = 0uLL;
            v86.val[0] = v43;
            v82.val[1] = 0uLL;
            v46 = v42;
            vst2q_s8(v46, v82);
            v46 += 32;
            v86.val[1] = 0uLL;
            vst2q_s8(v46, v86);
            v47 = v42 + 64;
            vst2q_s8(v47, v84);
            v48 = v42 + 96;
            vst2q_s8(v48, *(int8x16x2_t *)(&v41 - 1));
            v42 += 128;
          }
          while (v42 != v30);
        }
        else
        {
          v30 = (char *)v25 + 20;
        }
        while (v30 != v29)
        {
          v49 = v27->u8[0];
          v27 = (int8x16_t *)((char *)v27 + 1);
          *(_WORD *)v30 = v49;
          v30 += 2;
        }
      }
      else if ((_DWORD)v28 == 1)
      {
        *v26 = v27->i16[0];
      }
      else if ((_DWORD)v28)
      {
        memcpy((char *)v25 + 20, v27, 2 * v28);
      }
      v40 = *(unsigned int *)(v16 + 4);
    }
    else
    {
      v40 = 0;
    }
    v50 = &v26[v40];
    *(_DWORD *)v50 = 3080250;
    v50[2] = 47;
    v51 = (char *)(v50 + 3);
    if (v17)
    {
      v52 = *(int8x16_t **)(v17 + 8);
      v53 = *(unsigned int *)(v17 + 4);
      if ((*(_BYTE *)(v17 + 16) & 4) != 0)
      {
        v54 = &v51[2 * v53];
        if (v53 >= 0x40)
        {
          v55 = &v51[2 * (v53 & 0xFFFFFFC0)];
          v57 = 0uLL;
          v58 = v51;
          do
          {
            v83.val[0] = *v52;
            v59 = v52[1];
            v85.val[0] = v52[2];
            v60 = v52[3];
            v52 += 4;
            v61 = v60;
            v85.val[1] = 0uLL;
            v87.val[0] = v59;
            v83.val[1] = 0uLL;
            v62 = v58;
            vst2q_s8(v62, v83);
            v62 += 32;
            v87.val[1] = 0uLL;
            vst2q_s8(v62, v87);
            v63 = v58 + 64;
            vst2q_s8(v63, v85);
            v64 = v58 + 96;
            vst2q_s8(v64, *(int8x16x2_t *)(&v57 - 1));
            v58 += 128;
          }
          while (v58 != v55);
        }
        else
        {
          v55 = v51;
        }
        while (v55 != v54)
        {
          v65 = v52->u8[0];
          v52 = (int8x16_t *)((char *)v52 + 1);
          *(_WORD *)v55 = v65;
          v55 += 2;
        }
      }
      else if ((_DWORD)v53 == 1)
      {
        *(_WORD *)v51 = v52->i16[0];
      }
      else if ((_DWORD)v53)
      {
        memcpy(v51, v52, 2 * v53);
      }
      v56 = *(unsigned int *)(v17 + 4);
    }
    else
    {
      v56 = 0;
    }
    *(_WORD *)&v51[2 * v56] = 47;
  }
  v79 = v25;
  MEMORY[0x19AEA52D4](v80, &v79, 0);
  WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)v80, a4);
  v67 = v80[0];
  v80[0] = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v66);
    else
      *(_DWORD *)v67 -= 2;
  }
  v68 = v79;
  v79 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::destroy(v68, v66);
      if (!v17)
        goto LABEL_97;
      goto LABEL_95;
    }
    *(_DWORD *)v68 -= 2;
  }
  if (!v17)
    goto LABEL_97;
LABEL_95:
  if (*(_DWORD *)v17 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v17, v66);
  else
    *(_DWORD *)v17 -= 2;
LABEL_97:
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v16, v66);
    else
      *(_DWORD *)v16 -= 2;
  }
  if ((*(_QWORD *)&a3 & 0xFF0000) == 0 || (WTF::isDefaultPortForProtocol() & 1) != 0)
    goto LABEL_104;
  v69 = *a4;
  LODWORD(v79) = a3 & 0xFFFFFF;
  v70 = *(unsigned int *)(v69 + 32);
  if ((_DWORD)v70 == -1)
  {
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_133;
  }
  v80[0] = (WTF::StringImpl *)&v79;
  ((void (*)(WTF::StringImpl **, uint64_t))off_1E3402A68[v70])(v80, v69 + 8);
LABEL_104:
  result = v81;
  v81 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v66);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SecurityOrigin::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x40);
  result = WebCore::SecurityOrigin::SecurityOrigin(v4, a1);
  *a2 = result;
  return result;
}

uint64_t WebCore::SecurityOrigin::equal(const WTF::StringImpl **this, const WTF::StringImpl **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  const WTF::StringImpl *v8;
  uint64_t v9[2];
  char v10;
  uint64_t v11[2];
  char v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 == this)
    return 1;
  v13 = v2;
  v14 = v3;
  if (*((_DWORD *)this + 8) == 1 || *((_DWORD *)a2 + 8) == 1)
  {
    WebCore::SecurityOriginData::opaqueOriginIdentifier(v11, (WebCore::SecurityOriginData *)(this + 1));
    WebCore::SecurityOriginData::opaqueOriginIdentifier(v9, (WebCore::SecurityOriginData *)(a2 + 1));
    result = (v12 != 0) == (v10 != 0);
    if (v12 && v10)
      return v11[0] == v9[0] && v11[1] == v9[1];
  }
  else
  {
    result = WebCore::SecurityOrigin::isSameSchemeHostPort((uint64_t)this, (uint64_t)a2);
    if ((_DWORD)result)
    {
      if (*((unsigned __int8 *)this + 57) == *((unsigned __int8 *)a2 + 57))
      {
        if (!*((_BYTE *)this + 57))
          return 1;
        result = WTF::equal(this[5], a2[5], v8);
        if ((_DWORD)result)
          return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t WebCore::SecurityOrigin::isLocalhostAddress(uint64_t a1, uint64_t a2)
{
  int v3;

  if ((_DWORD)a2 != 9)
    return WTF::StringView::endsWithIgnoringASCIICase();
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((*(_BYTE *)a1 & 0xDF) != 0x4C
      || (*(_BYTE *)(a1 + 1) & 0xDF) != 0x4F
      || (*(_BYTE *)(a1 + 2) & 0xDF) != 0x43
      || (*(_BYTE *)(a1 + 3) & 0xDF) != 0x41
      || (*(_BYTE *)(a1 + 4) & 0xDF) != 0x4C
      || (*(_BYTE *)(a1 + 5) & 0xDF) != 0x48
      || (*(_BYTE *)(a1 + 6) & 0xDF) != 0x4F
      || (*(_BYTE *)(a1 + 7) & 0xDF) != 0x53)
    {
      return WTF::StringView::endsWithIgnoringASCIICase();
    }
    v3 = *(unsigned __int8 *)(a1 + 8);
  }
  else
  {
    if ((*(_WORD *)a1 & 0xFFDF) != 0x4C
      || (*(_WORD *)(a1 + 2) & 0xFFDF) != 0x4F
      || (*(_WORD *)(a1 + 4) & 0xFFDF) != 0x43
      || (*(_WORD *)(a1 + 6) & 0xFFDF) != 0x41
      || (*(_WORD *)(a1 + 8) & 0xFFDF) != 0x4C
      || (*(_WORD *)(a1 + 10) & 0xFFDF) != 0x48
      || (*(_WORD *)(a1 + 12) & 0xFFDF) != 0x4F
      || (*(_WORD *)(a1 + 14) & 0xFFDF) != 0x53)
    {
      return WTF::StringView::endsWithIgnoringASCIICase();
    }
    v3 = *(unsigned __int16 *)(a1 + 16);
  }
  if ((v3 & 0xFFFFFFDF) == 0x54)
    return 1;
  return WTF::StringView::endsWithIgnoringASCIICase();
}

uint64_t WTF::makeString<WTF::String,WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t *a1@<X0>, int8x16_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t result;

  v8 = *a1;
  if (a3)
  {
    v9 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x19605DD50);
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = *a4;
  if (v8)
    v11 = *(_DWORD *)(v8 + 4);
  else
    v11 = 0;
  if (v10)
  {
    v12 = *(_DWORD *)(v10 + 4);
    if (v12 < 0)
    {
LABEL_23:
      *a5 = 0;
      goto LABEL_26;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = __OFADD__(v9, v12);
  v14 = v9 + v12;
  v15 = v13;
  if (v11 < 0)
    goto LABEL_23;
  if ((v15 & 1) != 0)
    goto LABEL_23;
  v16 = (v11 + v14);
  if (__OFADD__(v11, v14))
    goto LABEL_23;
  if (v8)
  {
    v17 = *(_DWORD *)(v8 + 16);
    v18 = (v17 >> 2) & 1;
    if (v10 && (v17 & 4) != 0)
      goto LABEL_16;
  }
  else
  {
    if (v10)
    {
LABEL_16:
      v18 = (*(unsigned __int8 *)(v10 + 16) >> 2) & 1;
      goto LABEL_17;
    }
    v18 = 1;
  }
LABEL_17:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v16, v18, v8, a2, v9, v10, a5);
  if (!*a5)
    goto LABEL_26;
  return result;
}

uint64_t WebCore::SecurityPolicy::shouldHideReferrer(WebCore::SecurityPolicy *this, const WTF::URL *a2, const WTF::URL *a3)
{
  WTF::URL::protocolIs();
  return WTF::URL::protocolIs() ^ 1;
}

WTF::StringImpl *WebCore::SecurityPolicy::referrerToOriginString@<X0>(WebCore::SecurityPolicy *this@<X0>, WTF::StringImpl ***a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  _BYTE *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl **v23;

  WebCore::SecurityOrigin::create(this, &v21);
  v4 = v21;
  v5 = *(unsigned int *)(v21 + 32);
  if ((_DWORD)v5 == 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    if ((_DWORD)v5 == -1)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_43;
    }
    v23 = &v22;
    v6 = (_QWORD *)((uint64_t (*)(WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v5])(&v23, v21 + 8);
    if (MEMORY[0x19AEA53F4](*v6, "file", 4) && *(_BYTE *)(v4 + 59))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v22 = (WTF::StringImpl *)v23;
    }
    else
    {
      WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v4 + 8), &v22);
    }
  }
  v21 = 0;
  do
  {
    v8 = __ldaxr((unsigned int *)v4);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, (unsigned int *)v4));
  if (!v9)
  {
    atomic_store(1u, (unsigned int *)v4);
    v17 = *(WTF::StringImpl **)(v4 + 48);
    *(_QWORD *)(v4 + 48) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v7);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = *(WTF::StringImpl **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v7);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(unsigned int *)(v4 + 32);
    if ((_DWORD)v19 != -1)
      ((void (*)(WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v19])(&v23, v4 + 8);
    *(_DWORD *)(v4 + 32) = -1;
    WTF::fastFree((WTF *)v4, v7);
  }
  result = (WTF::StringImpl *)MEMORY[0x19AEA53F4](v22, "null", 4);
  if ((_DWORD)result)
  {
    *a2 = 0;
    goto LABEL_20;
  }
  v12 = v22;
  if (!v22)
  {
    result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)0x15);
    v20 = v23;
    if (v23)
    {
      *v23 = (WTF::StringImpl *)0x100000002;
      *((_BYTE *)v20 + 20) = 47;
      v20[1] = (WTF::StringImpl *)((char *)v20 + 20);
      *((_DWORD *)v20 + 4) = 4;
      *a2 = v20;
      goto LABEL_20;
    }
    goto LABEL_43;
  }
  v13 = *((_DWORD *)v22 + 1);
  *(_DWORD *)v22 += 2;
  if (v13 < 0)
    goto LABEL_43;
  v14 = (v13 + 1);
  if (__OFADD__(v13, 1))
    goto LABEL_43;
  if ((*((_BYTE *)v12 + 16) & 4) == 0)
  {
    result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v14, 0, (uint64_t)v12, 47, a2);
    if (!*a2)
      goto LABEL_44;
    goto LABEL_18;
  }
  result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v14 + 20));
  v15 = v23;
  if (!v23)
  {
LABEL_43:
    *a2 = 0;
LABEL_44:
    __break(0xC471u);
    return result;
  }
  v16 = (char *)v23 + 20;
  *(_DWORD *)v23 = 2;
  *((_DWORD *)v15 + 1) = v14;
  v15[1] = (WTF::StringImpl *)((char *)v15 + 20);
  *((_DWORD *)v15 + 4) = 4;
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v16, (uint64_t)v12, 47);
  *a2 = v15;
LABEL_18:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, v11);
  else
    *(_DWORD *)v12 -= 2;
LABEL_20:
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SecurityPolicy::generateReferrerHeader@<X0>(WebCore::SecurityPolicy *this@<X1>, WTF::StringImpl ***a2@<X2>, uint64_t result@<X0>, uint64_t (***a4)(_QWORD, uint64_t)@<X3>, WTF::StringImpl ***a5@<X8>)
{
  WTF::StringImpl **v6;
  uint64_t v10;
  WTF::StringImpl *v11;
  const WTF::URL *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v6 = *a2;
  if (!*a2 || !*((_DWORD *)v6 + 1) || ((_BYTE)a2[1] & 2) == 0)
    goto LABEL_2;
  if ((_DWORD)result == 7)
  {
    WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)a2, &v21);
    v10 = v21;
    result = WebCore::SecurityOrigin::canRequest(v21, this, a4);
    if ((result & 1) == 0)
    {
      v20 = result;
      if (WebCore::SecurityPolicy::shouldHideReferrer(this, (const WTF::URL *)a2, v12))
        *a5 = 0;
      else
        WebCore::SecurityPolicy::referrerToOriginString((WebCore::SecurityPolicy *)a2, a5);
      result = v20;
    }
    v21 = 0;
    if (v10)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v10);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v10));
      if (!v14)
      {
        v15 = result;
        atomic_store(1u, (unsigned int *)v10);
        v16 = *(WTF::StringImpl **)(v10 + 48);
        *(_QWORD *)(v10 + 48) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v11);
          else
            *(_DWORD *)v16 -= 2;
        }
        v17 = *(WTF::StringImpl **)(v10 + 40);
        *(_QWORD *)(v10 + 40) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v11);
          else
            *(_DWORD *)v17 -= 2;
        }
        v18 = *(unsigned int *)(v10 + 32);
        if ((_DWORD)v18 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v18])(&v22, v10 + 8);
        *(_DWORD *)(v10 + 32) = -1;
        WTF::fastFree((WTF *)v10, v11);
        result = v15;
      }
    }
    if ((result & 1) == 0)
      return result;
LABEL_12:
    WTF::URL::protocolIs();
    result = WTF::URL::protocolIs();
    if ((result & 1) != 0)
    {
      v6 = *a2;
      if (*a2)
LABEL_14:
        *(_DWORD *)v6 += 2;
      *a5 = v6;
      return result;
    }
LABEL_2:
    *a5 = 0;
    return result;
  }
  switch((int)result)
  {
    case 1:
      goto LABEL_2;
    case 3:
      WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)a2, &v21);
      if ((WebCore::SecurityOrigin::canRequest(v21, this, a4) & 1) != 0)
        goto LABEL_31;
      *a5 = 0;
      goto LABEL_37;
    case 4:
      return (uint64_t)WebCore::SecurityPolicy::referrerToOriginString((WebCore::SecurityPolicy *)a2, a5);
    case 5:
      result = WebCore::SecurityPolicy::shouldHideReferrer(this, (const WTF::URL *)a2, (const WTF::URL *)a2);
      if ((_DWORD)result)
        goto LABEL_2;
      return (uint64_t)WebCore::SecurityPolicy::referrerToOriginString((WebCore::SecurityPolicy *)a2, a5);
    case 6:
      WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)a2, &v21);
      if ((WebCore::SecurityOrigin::canRequest(v21, this, a4) & 1) != 0)
      {
LABEL_31:
        WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v21, v19);
        goto LABEL_12;
      }
      WebCore::SecurityPolicy::referrerToOriginString((WebCore::SecurityPolicy *)a2, a5);
LABEL_37:
      result = (uint64_t)WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v21, v19);
      break;
    case 8:
      goto LABEL_14;
    default:
      goto LABEL_12;
  }
  return result;
}

uint64_t WebCore::SecurityPolicy::setLocalLoadPolicy(uint64_t result)
{
  WebCore::localLoadPolicy = result;
  return result;
}

WTF::StringImpl **WebCore::SecurityPolicy::addOriginAccessAllowlistEntry(WTF::StringImpl **this, unsigned int **a2, unint64_t a3, const WTF::String *a4)
{
  uint64_t (**v4)();
  WTF::StringImpl **v7;
  WTF::StringImpl **v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BOOL4 v27;
  BOOL v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  _QWORD *v43;
  _DWORD *v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  _QWORD *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  unsigned int v53;
  int v54;
  const WebCore::SecurityOrigin *v55;
  const WTF::String *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  _DWORD v59[2];
  char IsIPAddress;
  unsigned int v61;
  unsigned __int16 v62;
  char v63;
  unsigned int *v64;

  if (*((_DWORD *)this + 8) == 1)
    return this;
  LODWORD(v4) = (_DWORD)a4;
  v7 = this;
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_214))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_214))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](&_MergedGlobals_214);
LABEL_6:
  v9 = (WTF::StringImpl **)&qword_1ECE83000;
  if ((byte_1ECE839A9 & 1) == 0)
    goto LABEL_81;
  v10 = qword_1ECE839B0;
  ++v7;
  if (qword_1ECE839B0)
    goto LABEL_9;
  while (1)
  {
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(8u, 0);
    v10 = (uint64_t)v9[310];
    if (v10)
LABEL_9:
      v11 = *(_DWORD *)(v10 - 8);
    else
      v11 = 0;
    v62 = 0;
    v63 = 0;
    v12 = *((unsigned int *)v7 + 6);
    v64 = &v61;
    v13 = (_DWORD)v12 == -1 ? -1 : v12;
    v14 = (v13 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v13 - 1640531527) << 16) ^ ((unsigned __int16)v13
                                                                                               - 1640531527);
    v15 = (v13 >> 37) & 0x7FFF800 ^ ((v14 + WORD2(v13) + (v14 >> 11)) << 16) ^ (v14 + WORD2(v13) + (v14 >> 11));
    v61 = v15 + (v15 >> 11);
    if ((_DWORD)v12 != -1)
      break;
LABEL_80:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_81:
    qword_1ECE839B0 = 0;
    byte_1ECE839A9 = 1;
    ++v7;
  }
  v54 = (int)v4;
  v55 = (const WebCore::SecurityOrigin *)a2;
  v56 = (const WTF::String *)a3;
  v57 = (WTF::StringImpl *)&v64;
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3402BF0[v12])(&v57, v7);
  v16 = v61;
  if (v63)
  {
    v53 = (v61 + v62) ^ ((v61 + v62) << 11);
    v16 = v53 + (v53 >> 17);
  }
  v17 = (v16 ^ (8 * v16)) + ((v16 ^ (8 * v16)) >> 5);
  v18 = (v17 ^ (4 * v17)) + ((v17 ^ (4 * v17)) >> 15);
  v19 = v18 ^ (v18 << 10);
  if (!v19)
    v19 = 0x800000;
  v20 = v19 & v11;
  v9 = (WTF::StringImpl **)(v10 + 40 * (v19 & v11));
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9) & 1) == 0)
  {
    v22 = 0;
    a3 = 1;
    a2 = &v64;
    v4 = off_1E3402AC8;
    while (1)
    {
      v23 = *((unsigned int *)v9 + 6);
      if ((_DWORD)v23 == -1)
        goto LABEL_80;
      v57 = (WTF::StringImpl *)&v64;
      if ((((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3402AC8[v23])(&v57, v9) & 1) != 0)
      {
        v22 = v9;
      }
      else
      {
        if (v9 == v7)
        {
          v9 = v7;
          goto LABEL_60;
        }
        v24 = *((unsigned int *)v9 + 6);
        v25 = *((_DWORD *)v7 + 6);
        v27 = v25 == (_DWORD)v24 && v25 != -1;
        if ((_DWORD)v24 == -1 || !v27)
        {
          v28 = v25 == -1;
          if ((_DWORD)v24 == -1)
            v29 = v28;
          else
            v29 = v27;
          if ((v29 & 1) != 0)
            goto LABEL_60;
        }
        else
        {
          v57 = (WTF::StringImpl *)&v64;
          if ((((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v24])(&v57, v9, v7) & 1) != 0)goto LABEL_60;
        }
      }
      v20 = (v20 + a3) & v11;
      v9 = (WTF::StringImpl **)(v10 + 40 * v20);
      a3 = (a3 + 1);
      if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9))
      {
        v21 = &qword_1ECE83000;
        if (v22)
        {
          v22[4] = 0;
          *(_OWORD *)v22 = 0u;
          *((_OWORD *)v22 + 1) = 0u;
          --*(_DWORD *)(qword_1ECE839B0 - 16);
          v9 = v22;
        }
        goto LABEL_42;
      }
    }
  }
  v21 = &qword_1ECE83000;
LABEL_42:
  v30 = *((unsigned int *)v9 + 6);
  v31 = *((unsigned int *)v7 + 6);
  if ((_DWORD)v30 == -1)
  {
    if ((_DWORD)v31 != -1)
      goto LABEL_46;
  }
  else
  {
    if ((_DWORD)v31 == -1)
    {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v30])(&v57, v9);
      *((_DWORD *)v9 + 6) = -1;
      goto LABEL_47;
    }
LABEL_46:
    v57 = (WTF::StringImpl *)v9;
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))off_1E3402C10[v31])(&v57, v9, v7);
  }
LABEL_47:
  v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = 0;
  v57 = 0;
  std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](v9 + 4, v32);
  std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](&v57, 0);
  v33 = v21[310];
  if (v33)
    v34 = *(_DWORD *)(v33 - 12) + 1;
  else
    v34 = 1;
  *(_DWORD *)(v33 - 12) = v34;
  v35 = v21[310];
  if (v35)
    v36 = *(_DWORD *)(v35 - 12);
  else
    v36 = 0;
  v37 = (*(_DWORD *)(v35 - 16) + v36);
  v38 = *(unsigned int *)(v35 - 4);
  if (v38 > 0x400)
  {
    if (v38 <= 2 * v37)
    {
LABEL_56:
      v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
      goto LABEL_59;
    }
  }
  else if (3 * v38 <= 4 * v37)
  {
    if ((_DWORD)v38)
      goto LABEL_56;
    v39 = 8;
LABEL_59:
    v9 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v39, (uint64_t)v9);
  }
LABEL_60:
  v40 = (unsigned int *)v9[4];
  WTF::String::convertToASCIILowercase(v55);
  WTF::String::convertToASCIILowercase(v56);
  v59[0] = v54 ^ 1;
  v59[1] = 1;
  IsIPAddress = WTF::URL::hostIsIPAddress();
  v42 = v40[3];
  if ((_DWORD)v42 == v40[2])
  {
    v43 = (_QWORD *)WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v42 + 1, (unint64_t)&v57);
    v44 = v43 + 2;
    v45 = (WTF::StringImpl **)(*(_QWORD *)v40 + 32 * v40[3]);
    v46 = (WTF::StringImpl *)*v43;
    *v43 = 0;
    *v45 = v46;
    v47 = (WTF::StringImpl *)v43[1];
    v43[1] = 0;
  }
  else
  {
    v44 = v59;
    v45 = (WTF::StringImpl **)(*(_QWORD *)v40 + 32 * v42);
    v48 = v57;
    v57 = 0;
    *v45 = v48;
    v47 = v58;
    v58 = 0;
  }
  v45[1] = v47;
  v49 = v45 + 2;
  v50 = *(_QWORD *)v44;
  *((_BYTE *)v49 + 8) = *((_BYTE *)v44 + 8);
  *v49 = v50;
  ++v40[3];
  v51 = v58;
  v58 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v41);
    else
      *(_DWORD *)v51 -= 2;
  }
  this = (WTF::StringImpl **)v57;
  v57 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)this, v41);
    else
      *(_DWORD *)this -= 2;
  }
  v52 = __ldxr((unsigned __int8 *)&_MergedGlobals_214);
  if (v52 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_214))
      return this;
  }
  else
  {
    __clrex();
  }
  return (WTF::StringImpl **)WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_214);
}

_DWORD *WebCore::SecurityPolicy::removeOriginAccessAllowlistEntry(_DWORD *this, const WebCore::SecurityOrigin *a2, const WTF::String *a3, const WTF::String *a4)
{
  int v4;
  _DWORD *v7;
  unsigned __int8 *v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL4 v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  WTF::String *v22;
  int v23;
  uint64_t *v24;
  int v25;
  WTF::StringImpl *v26;
  const WTF::StringImpl *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  const WebCore::SecurityOrigin *v48;
  const WTF::String *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  int v53;
  char IsIPAddress;
  char v55;

  if (this[8] == 1)
    return this;
  v4 = (int)a4;
  v7 = this;
  v8 = (unsigned __int8 *)&_MergedGlobals_214;
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_214))
  {
    __clrex();
LABEL_5:
    this = (_DWORD *)MEMORY[0x19AEA534C](&_MergedGlobals_214);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_214))
    goto LABEL_5;
LABEL_6:
  if ((byte_1ECE839A9 & 1) == 0)
  {
LABEL_89:
    qword_1ECE839B0 = 0;
    byte_1ECE839A9 = 1;
    goto LABEL_45;
  }
  v10 = qword_1ECE839B0;
  if (!qword_1ECE839B0)
    goto LABEL_45;
  v48 = a2;
  v49 = a3;
  v11 = *(_DWORD *)(qword_1ECE839B0 - 8);
  v8 = (unsigned __int8 *)(WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>((uint64_t)(v7 + 2)) & v11);
  v12 = v10 + 40 * v8;
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v12) & 1) != 0)
  {
LABEL_28:
    v21 = qword_1ECE839B0;
    v8 = (unsigned __int8 *)&_MergedGlobals_214;
    this = v48;
    v22 = v49;
    v23 = v4;
    if (qword_1ECE839B0)
    {
      v12 = qword_1ECE839B0 + 40 * *(unsigned int *)(qword_1ECE839B0 - 4);
LABEL_30:
      v21 += 40 * *(unsigned int *)(v21 - 4);
      goto LABEL_31;
    }
    goto LABEL_45;
  }
  v13 = 1;
  while (1)
  {
    v14 = *(unsigned int *)(v12 + 24);
    if ((_DWORD)v14 == -1)
    {
      this = (_DWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_89;
    }
    v50 = (WTF::StringImpl *)&v55;
    if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E3402AC8[v14])(&v50, v12) & 1) != 0)
      goto LABEL_27;
    if ((_DWORD *)v12 == v7 + 2)
      break;
    v15 = *(unsigned int *)(v12 + 24);
    v16 = v7[8];
    v18 = v16 == (_DWORD)v15 && v16 != -1;
    if ((_DWORD)v15 == -1 || !v18)
    {
      v19 = v16 == -1;
      if ((_DWORD)v15 == -1)
        v20 = v19;
      else
        v20 = v18;
      if ((v20 & 1) != 0)
        goto LABEL_67;
    }
    else
    {
      v50 = (WTF::StringImpl *)&v55;
      if ((((uint64_t (*)(WTF::StringImpl **, uint64_t, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v15])(&v50, v12, v7 + 2) & 1) != 0)goto LABEL_67;
    }
LABEL_27:
    v8 = (unsigned __int8 *)(((_DWORD)v8 + v13) & v11);
    v12 = v10 + 40 * v8;
    ++v13;
    if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v12))
      goto LABEL_28;
  }
  v12 = (uint64_t)(v7 + 2);
LABEL_67:
  v21 = qword_1ECE839B0;
  if (qword_1ECE839B0)
  {
    v8 = (unsigned __int8 *)&_MergedGlobals_214;
    this = v48;
    v22 = v49;
    v23 = v4;
    goto LABEL_30;
  }
  v8 = (unsigned __int8 *)&_MergedGlobals_214;
  this = v48;
  v22 = v49;
  v23 = v4;
LABEL_31:
  if (v21 != v12)
  {
    v24 = *(uint64_t **)(v12 + 32);
    v25 = v23 ^ 1;
    WTF::String::convertToASCIILowercase((WTF::String *)this);
    WTF::String::convertToASCIILowercase(v22);
    v52 = v25;
    v53 = 1;
    IsIPAddress = WTF::URL::hostIsIPAddress();
    if (*((_DWORD *)v24 + 3))
    {
      v28 = 0;
      v29 = 0;
      while (1)
      {
        v30 = *v24;
        if (WTF::equalIgnoringASCIICase(*(WTF **)(*v24 + v28), v50, v27))
        {
          if (WTF::equalIgnoringASCIICase(*(WTF **)(v30 + v28 + 8), v51, v27)
            && *(_DWORD *)(v30 + v28 + 16) == v52
            && *(_DWORD *)(v30 + v28 + 20) == v53)
          {
            break;
          }
        }
        ++v29;
        v28 += 32;
        if (v29 >= *((unsigned int *)v24 + 3))
          goto LABEL_39;
      }
      v33 = *v24;
      v34 = *v24 + v28;
      v35 = *(WTF::StringImpl **)(v34 + 8);
      *(_QWORD *)(v34 + 8) = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v26);
        else
          *(_DWORD *)v35 -= 2;
      }
      v36 = *(WTF::StringImpl **)(v33 + v28);
      *(_QWORD *)(v33 + v28) = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v26);
        else
          *(_DWORD *)v36 -= 2;
      }
      v37 = v33 + v28 + 32;
      v38 = *((unsigned int *)v24 + 3);
      v39 = *v24 + 32 * v38;
      if (v37 != v39)
      {
        do
        {
          v40 = *(_OWORD *)v37;
          *(_QWORD *)v37 = 0;
          *(_QWORD *)(v37 + 8) = 0;
          *(_OWORD *)(v37 - 32) = v40;
          *(_QWORD *)(v37 - 16) = *(_QWORD *)(v37 + 16);
          *(_BYTE *)(v37 - 8) = *(_BYTE *)(v37 + 24);
          v41 = *(WTF::StringImpl **)v37;
          *(_QWORD *)v37 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, v26);
            else
              *(_DWORD *)v41 -= 2;
          }
          v37 += 32;
        }
        while (v37 != v39);
        LODWORD(v38) = *((_DWORD *)v24 + 3);
      }
      v42 = v38 - 1;
      *((_DWORD *)v24 + 3) = v42;
      if (!v42)
      {
        if (qword_1ECE839B0)
        {
          v43 = qword_1ECE839B0 + 40 * *(unsigned int *)(qword_1ECE839B0 - 4);
          if (v43 == v12)
            goto LABEL_39;
        }
        else
        {
          if (!v12)
            goto LABEL_39;
          v43 = 0;
        }
        if (v43 != v12)
        {
          v44 = *(unsigned int *)(v12 + 24);
          if ((_DWORD)v44 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v44])(&v55, v12);
          *(_QWORD *)v12 = -1;
          *(_QWORD *)(v12 + 8) = 0;
          *(_DWORD *)(v12 + 16) = 0;
          *(_DWORD *)(v12 + 24) = 0;
          std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((WTF::StringImpl **)(v12 + 32), 0);
          v45 = qword_1ECE839B0;
          ++*(_DWORD *)(qword_1ECE839B0 - 16);
          if (v45)
            v46 = *(_DWORD *)(v45 - 12) - 1;
          else
            v46 = -1;
          *(_DWORD *)(v45 - 12) = v46;
          if (qword_1ECE839B0)
          {
            v47 = *(_DWORD *)(qword_1ECE839B0 - 4);
            if (6 * *(_DWORD *)(qword_1ECE839B0 - 12) < v47 && v47 >= 9)
              WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v47 >> 1, 0);
          }
        }
      }
    }
LABEL_39:
    v31 = v51;
    v51 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v26);
      else
        *(_DWORD *)v31 -= 2;
    }
    this = v50;
    v50 = 0;
    if (this)
    {
      if (*this == 2)
        this = (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v26);
      else
        *this -= 2;
    }
  }
LABEL_45:
  v32 = __ldxr(v8);
  if (v32 == 1)
  {
    if (!__stlxr(0, v8))
      return this;
  }
  else
  {
    __clrex();
  }
  return (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_214);
}

void WebCore::SecurityPolicy::resetOriginAccessAllowlists(WebCore::SecurityPolicy *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  char *v10;
  char v11;

  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_214))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_214))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](&_MergedGlobals_214);
LABEL_5:
  if ((byte_1ECE839A9 & 1) != 0)
  {
    v3 = qword_1ECE839B0;
    if (!qword_1ECE839B0)
      goto LABEL_16;
    qword_1ECE839B0 = 0;
    v4 = *(unsigned int *)(v3 - 4);
    if (!(_DWORD)v4)
    {
LABEL_15:
      WTF::fastFree((WTF *)(v3 - 16), a2);
      goto LABEL_16;
    }
    v5 = (WTF::StringImpl **)(v3 + 32);
    while (1)
    {
      v6 = *((unsigned int *)v5 - 2);
      if ((_DWORD)v6 == -1)
        break;
      v10 = &v9;
      if ((((uint64_t (*)(char **, WTF::StringImpl **))off_1E3402AC8[v6])(&v10, v5 - 4) & 1) == 0)
      {
        std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](v5, 0);
        v7 = *((unsigned int *)v5 - 2);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v7])(&v11, v5 - 4);
        *((_DWORD *)v5 - 2) = -1;
      }
      v5 += 5;
      if (!--v4)
        goto LABEL_15;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  qword_1ECE839B0 = 0;
  byte_1ECE839A9 = 1;
LABEL_16:
  v8 = __ldxr((unsigned __int8 *)&_MergedGlobals_214);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, (unsigned __int8 *)&_MergedGlobals_214))
LABEL_20:
    WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_214);
}

void WebCore::SettingsBase::~SettingsBase(WebCore::SettingsBase *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  *(_QWORD *)this = &unk_1E3402A18;
  if (*((_BYTE *)this + 208))
  {
    v3 = (WTF *)*((_QWORD *)this + 24);
    if (v3)
    {
      *((_QWORD *)this + 24) = 0;
      *((_DWORD *)this + 50) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  if (*((_BYTE *)this + 184))
  {
    v4 = (WTF *)*((_QWORD *)this + 21);
    if (v4)
    {
      *((_QWORD *)this + 21) = 0;
      *((_DWORD *)this + 44) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  if (*((_BYTE *)this + 160))
  {
    v5 = (WTF *)*((_QWORD *)this + 18);
    if (v5)
    {
      *((_QWORD *)this + 18) = 0;
      *((_DWORD *)this + 38) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  if (*((_BYTE *)this + 136))
  {
    v6 = *((unsigned int *)this + 33);
    if ((_DWORD)v6)
    {
      v15 = (WTF::StringImpl **)*((_QWORD *)this + 15);
      v16 = 8 * v6;
      do
      {
        v17 = *v15;
        *v15 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v17 -= 2;
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    v7 = (WTF *)*((_QWORD *)this + 15);
    if (v7)
    {
      *((_QWORD *)this + 15) = 0;
      *((_DWORD *)this + 32) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  if (*((_BYTE *)this + 112))
  {
    v8 = *((unsigned int *)this + 27);
    if ((_DWORD)v8)
    {
      v18 = (WTF::StringImpl **)*((_QWORD *)this + 12);
      v19 = 8 * v8;
      do
      {
        v20 = *v18;
        *v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v20 -= 2;
        }
        ++v18;
        v19 -= 8;
      }
      while (v19);
    }
    v9 = (WTF *)*((_QWORD *)this + 12);
    if (v9)
    {
      *((_QWORD *)this + 12) = 0;
      *((_DWORD *)this + 26) = 0;
      WTF::fastFree(v9, a2);
    }
  }
  WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, (WTF::StringImpl *)a2);
  *((_QWORD *)this + 3) = off_1E31F7378;
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WebCore::TimerBase::~TimerBase((WebCore::SettingsBase *)((char *)this + 24));
  v12 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v11);
    }
  }
}

uint64_t WebCore::SettingsBase::standardFontFamily(uint64_t a1, int a2)
{
  WTF *v3;

  v3 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  return WebCore::genericFontFamilyForScript(v3, a2);
}

uint64_t WebCore::SettingsBase::fixedFontFamily(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  return WebCore::genericFontFamilyForScript((WTF *)(v3 + 16), a2);
}

uint64_t WebCore::SettingsBase::serifFontFamily(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  return WebCore::genericFontFamilyForScript((WTF *)(v3 + 8), a2);
}

uint64_t WebCore::SettingsBase::sansSerifFontFamily(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  return WebCore::genericFontFamilyForScript((WTF *)(v3 + 24), a2);
}

uint64_t WebCore::SettingsBase::cursiveFontFamily(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  return WebCore::genericFontFamilyForScript((WTF *)(v3 + 32), a2);
}

uint64_t WebCore::SettingsBase::fantasyFontFamily(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  return WebCore::genericFontFamilyForScript((WTF *)(v3 + 40), a2);
}

uint64_t WebCore::SettingsBase::pictographFontFamily(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  return WebCore::genericFontFamilyForScript((WTF *)(v3 + 48), a2);
}

void WebCore::SettingsBase::setMinimumDOMTimerInterval(uint64_t a1, double a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(double *)(a1 + 16);
  *(double *)(a1 + 16) = a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return;
  v5 = *(_QWORD *)(v4 + 160);
  if (!v5)
    return;
  while (1)
  {
LABEL_4:
    v6 = (_QWORD *)v5;
    if (!*(_BYTE *)(v5 + 144))
    {
      v9 = *(_QWORD *)(v5 + 296);
      if (v9)
      {
        if ((*(double (**)(uint64_t))(*(_QWORD *)(v9 + 192) + 360))(v9 + 192) != v2)
        {
          v10 = *(_QWORD *)(v9 + 328);
          if (v10)
          {
            v11 = *(unsigned int *)(v10 - 4);
            v12 = v10 + 16 * v11;
            if (*(_DWORD *)(v10 - 12))
            {
              v13 = v10;
              if ((_DWORD)v11)
              {
                v14 = 16 * v11;
                v13 = v10;
                while ((*(_DWORD *)v13 + 1) <= 1)
                {
                  v13 += 16;
                  v14 -= 16;
                  if (!v14)
                  {
                    v13 = v12;
                    goto LABEL_21;
                  }
                }
              }
              goto LABEL_21;
            }
            v13 = v10 + 16 * v11;
          }
          else
          {
            v13 = 0;
            v11 = 0;
          }
          v12 = v10 + 16 * v11;
          if (!v10)
          {
            v15 = 0;
LABEL_22:
            while (v13 != v15)
            {
              WebCore::DOMTimer::updateTimerIntervalIfNecessary(*(WebCore::DOMTimer **)(v13 + 8));
              v16 = v13 + 16;
              v13 = v12;
              if (v16 != v12)
              {
                v13 = v16;
                while ((*(_DWORD *)v13 + 1) <= 1)
                {
                  v13 += 16;
                  if (v13 == v12)
                  {
                    v13 = v12;
                    break;
                  }
                }
              }
            }
            goto LABEL_5;
          }
LABEL_21:
          v15 = v10 + 16 * *(unsigned int *)(v10 - 4);
          goto LABEL_22;
        }
      }
    }
LABEL_5:
    v5 = v6[11];
    if (!v5)
    {
      v7 = *(_QWORD *)(v6[6] + 8);
      if (!v7)
        return;
      v5 = v6[9];
      if (!v5)
        break;
    }
  }
  while (1)
  {
    v8 = *(_QWORD *)(v7 + 56);
    if (!v8)
      break;
    v7 = *(_QWORD *)(v8 + 8);
    if (!v7)
      break;
    v5 = *(_QWORD *)(v7 + 72);
    if (v5)
      goto LABEL_4;
  }
}

WTF *WebCore::SettingsBase::setMediaContentTypesRequiringHardwareSupport(uint64_t a1, unsigned int *a2)
{
  return WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(a1 + 80), a2);
}

uint64_t WebCore::SettingsBase::setAllowedMediaContainerTypes(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  __int16 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v2 = this;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v36 = 0;
    v37 = 0;
    v4 = *(_DWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(unsigned int *)(v3 + 4);
    v32 = v5;
    v33 = v6 | ((unint64_t)((v4 >> 2) & 1) << 32);
    v34 = 44;
    v35 = 0;
    v28 = &v32;
    v29 = 0;
    v31 = v6 == 0;
    this = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v28);
    v8 = v33;
    while (1)
    {
      if (v29 == v8 && v31)
      {
        if (*(_BYTE *)(v2 + 112))
        {
          v19 = *(unsigned int *)(v2 + 108);
          if ((_DWORD)v19)
          {
            v21 = *(WTF::StringImpl ***)(v2 + 96);
            v22 = 8 * v19;
            do
            {
              v23 = *v21;
              *v21 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                  WTF::StringImpl::destroy(v23, v7);
                else
                  *(_DWORD *)v23 -= 2;
              }
              ++v21;
              v22 -= 8;
            }
            while (v22);
          }
          this = *(_QWORD *)(v2 + 96);
          if (this)
          {
            *(_QWORD *)(v2 + 96) = 0;
            *(_DWORD *)(v2 + 104) = 0;
            this = WTF::fastFree((WTF *)this, v7);
          }
          *(_QWORD *)(v2 + 96) = v36;
          *(_QWORD *)(v2 + 104) = v37;
        }
        else
        {
          *(_QWORD *)(v2 + 96) = v36;
          *(_QWORD *)(v2 + 104) = v37;
          *(_BYTE *)(v2 + 112) = 1;
        }
        return this;
      }
      v9 = *((unsigned int *)v28 + 2);
      if (v9 <= v29)
      {
LABEL_15:
        WTF::String::String();
        goto LABEL_16;
      }
      LODWORD(v10) = v30;
      if (v9 - v29 <= v30)
      {
        if (!v29)
        {
          v10 = v28[1];
          goto LABEL_14;
        }
        LODWORD(v10) = v9 - v29;
      }
      v10 = v10;
      v11 = v9 - v29;
      if (*((_BYTE *)v28 + 12))
      {
        if (v11 < v10)
          goto LABEL_53;
        v10 = v10 | 0x100000000;
      }
      else if (v11 < v10)
      {
LABEL_53:
        __break(1u);
        return this;
      }
LABEL_14:
      if ((v10 & 0xFF00000000) != 0)
        goto LABEL_15;
      WTF::String::String();
LABEL_16:
      LODWORD(v13) = HIDWORD(v37);
      if (HIDWORD(v37) == (_DWORD)v37)
      {
        v16 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, HIDWORD(v37) + 1, (unint64_t)&v27);
        v13 = HIDWORD(v37);
        v17 = v36;
        v18 = *v16;
        *v16 = 0;
        *(_QWORD *)(v17 + 8 * v13) = v18;
      }
      else
      {
        v14 = v27;
        v27 = 0;
        *(_QWORD *)(v36 + 8 * HIDWORD(v37)) = v14;
      }
      HIDWORD(v37) = v13 + 1;
      v15 = v27;
      v27 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      this = WTF::StringView::SplitResult::Iterator::operator++();
    }
  }
  if (*(_BYTE *)(this + 112))
  {
    v20 = *(unsigned int *)(this + 108);
    if ((_DWORD)v20)
    {
      v24 = *(WTF::StringImpl ***)(this + 96);
      v25 = 8 * v20;
      do
      {
        v26 = *v24;
        *v24 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, a2);
          else
            *(_DWORD *)v26 -= 2;
        }
        ++v24;
        v25 -= 8;
      }
      while (v25);
    }
    this = *(_QWORD *)(v2 + 96);
    if (this)
    {
      *(_QWORD *)(v2 + 96) = 0;
      *(_DWORD *)(v2 + 104) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
    *(_BYTE *)(v2 + 112) = 0;
  }
  return this;
}

uint64_t WebCore::SettingsBase::setAllowedMediaCodecTypes(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  __int16 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v2 = this;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v36 = 0;
    v37 = 0;
    v4 = *(_DWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(unsigned int *)(v3 + 4);
    v32 = v5;
    v33 = v6 | ((unint64_t)((v4 >> 2) & 1) << 32);
    v34 = 44;
    v35 = 0;
    v28 = &v32;
    v29 = 0;
    v31 = v6 == 0;
    this = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v28);
    v8 = v33;
    while (1)
    {
      if (v29 == v8 && v31)
      {
        if (*(_BYTE *)(v2 + 136))
        {
          v19 = *(unsigned int *)(v2 + 132);
          if ((_DWORD)v19)
          {
            v21 = *(WTF::StringImpl ***)(v2 + 120);
            v22 = 8 * v19;
            do
            {
              v23 = *v21;
              *v21 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                  WTF::StringImpl::destroy(v23, v7);
                else
                  *(_DWORD *)v23 -= 2;
              }
              ++v21;
              v22 -= 8;
            }
            while (v22);
          }
          this = *(_QWORD *)(v2 + 120);
          if (this)
          {
            *(_QWORD *)(v2 + 120) = 0;
            *(_DWORD *)(v2 + 128) = 0;
            this = WTF::fastFree((WTF *)this, v7);
          }
          *(_QWORD *)(v2 + 120) = v36;
          *(_QWORD *)(v2 + 128) = v37;
        }
        else
        {
          *(_QWORD *)(v2 + 120) = v36;
          *(_QWORD *)(v2 + 128) = v37;
          *(_BYTE *)(v2 + 136) = 1;
        }
        return this;
      }
      v9 = *((unsigned int *)v28 + 2);
      if (v9 <= v29)
      {
LABEL_15:
        WTF::String::String();
        goto LABEL_16;
      }
      LODWORD(v10) = v30;
      if (v9 - v29 <= v30)
      {
        if (!v29)
        {
          v10 = v28[1];
          goto LABEL_14;
        }
        LODWORD(v10) = v9 - v29;
      }
      v10 = v10;
      v11 = v9 - v29;
      if (*((_BYTE *)v28 + 12))
      {
        if (v11 < v10)
          goto LABEL_53;
        v10 = v10 | 0x100000000;
      }
      else if (v11 < v10)
      {
LABEL_53:
        __break(1u);
        return this;
      }
LABEL_14:
      if ((v10 & 0xFF00000000) != 0)
        goto LABEL_15;
      WTF::String::String();
LABEL_16:
      LODWORD(v13) = HIDWORD(v37);
      if (HIDWORD(v37) == (_DWORD)v37)
      {
        v16 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, HIDWORD(v37) + 1, (unint64_t)&v27);
        v13 = HIDWORD(v37);
        v17 = v36;
        v18 = *v16;
        *v16 = 0;
        *(_QWORD *)(v17 + 8 * v13) = v18;
      }
      else
      {
        v14 = v27;
        v27 = 0;
        *(_QWORD *)(v36 + 8 * HIDWORD(v37)) = v14;
      }
      HIDWORD(v37) = v13 + 1;
      v15 = v27;
      v27 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      this = WTF::StringView::SplitResult::Iterator::operator++();
    }
  }
  if (*(_BYTE *)(this + 136))
  {
    v20 = *(unsigned int *)(this + 132);
    if ((_DWORD)v20)
    {
      v24 = *(WTF::StringImpl ***)(this + 120);
      v25 = 8 * v20;
      do
      {
        v26 = *v24;
        *v24 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, a2);
          else
            *(_DWORD *)v26 -= 2;
        }
        ++v24;
        v25 -= 8;
      }
      while (v25);
    }
    this = *(_QWORD *)(v2 + 120);
    if (this)
    {
      *(_QWORD *)(v2 + 120) = 0;
      *(_DWORD *)(v2 + 128) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
    *(_BYTE *)(v2 + 136) = 0;
  }
  return this;
}

uint64_t WebCore::SettingsBase::setAllowedMediaVideoCodecIDs(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v19;
  unsigned __int8 **v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  __int16 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v2 = this;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v28 = 0;
    v29 = 0;
    v4 = *(_DWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(unsigned int *)(v3 + 4);
    v24 = v5;
    v25 = v6 | ((unint64_t)((v4 >> 2) & 1) << 32);
    v26 = 44;
    v27 = 0;
    v20 = (unsigned __int8 **)&v24;
    v21 = 0;
    v23 = v6 == 0;
    this = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v20);
    v8 = v25;
    v9 = v21;
    if (v21 == (_DWORD)v25 && v23)
    {
LABEL_29:
      if (*(_BYTE *)(v2 + 160))
      {
        this = *(_QWORD *)(v2 + 144);
        if (this)
        {
          *(_QWORD *)(v2 + 144) = 0;
          *(_DWORD *)(v2 + 152) = 0;
          this = WTF::fastFree((WTF *)this, v7);
        }
        *(_QWORD *)(v2 + 144) = v28;
        *(_QWORD *)(v2 + 152) = v29;
      }
      else
      {
        *(_QWORD *)(v2 + 144) = v28;
        *(_QWORD *)(v2 + 152) = v29;
        *(_BYTE *)(v2 + 160) = 1;
      }
      return this;
    }
    while (1)
    {
      v13 = *((unsigned int *)v20 + 2);
      if (v13 <= v9)
      {
        v11 = 0x100000000;
        v12 = "";
      }
      else
      {
        v10 = v22;
        if (v13 - v9 <= v22)
        {
          if (!v9)
          {
            v12 = *v20;
            v11 = (uint64_t)v20[1];
            goto LABEL_20;
          }
          v10 = v13 - v9;
        }
        v14 = v9;
        v11 = v10;
        v15 = v13 - v9;
        if (*((_BYTE *)v20 + 12))
        {
          if (v15 < v10)
            goto LABEL_35;
          v12 = &(*v20)[v14];
          v11 = v10 | 0x100000000;
        }
        else
        {
          if (v15 < v10)
          {
LABEL_35:
            __break(1u);
            return this;
          }
          v12 = &(*v20)[2 * v14];
        }
      }
LABEL_20:
      v16 = WebCore::FourCC::fromString(v12, v11);
      v19 = v16;
      if ((v16 & 0xFF00000000) != 0)
      {
        if (HIDWORD(v29) == (_DWORD)v29)
        {
          v17 = (_DWORD *)WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, HIDWORD(v29) + 1, (unint64_t)&v19);
          *(_DWORD *)(v28 + 4 * HIDWORD(v29)) = *v17;
        }
        else
        {
          *(_DWORD *)(v28 + 4 * HIDWORD(v29)) = v16;
        }
        ++HIDWORD(v29);
      }
      this = WTF::StringView::SplitResult::Iterator::operator++();
      v9 = v21;
      if (v21 == v8 && v23)
        goto LABEL_29;
    }
  }
  if (*(_BYTE *)(this + 160))
  {
    this = *(_QWORD *)(this + 144);
    if (this)
    {
      *(_QWORD *)(v2 + 144) = 0;
      *(_DWORD *)(v2 + 152) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
    *(_BYTE *)(v2 + 160) = 0;
  }
  return this;
}

uint64_t WebCore::SettingsBase::setAllowedMediaAudioCodecIDs(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v19;
  unsigned __int8 **v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  __int16 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v2 = this;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v28 = 0;
    v29 = 0;
    v4 = *(_DWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(unsigned int *)(v3 + 4);
    v24 = v5;
    v25 = v6 | ((unint64_t)((v4 >> 2) & 1) << 32);
    v26 = 44;
    v27 = 0;
    v20 = (unsigned __int8 **)&v24;
    v21 = 0;
    v23 = v6 == 0;
    this = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v20);
    v8 = v25;
    v9 = v21;
    if (v21 == (_DWORD)v25 && v23)
    {
LABEL_29:
      if (*(_BYTE *)(v2 + 184))
      {
        this = *(_QWORD *)(v2 + 168);
        if (this)
        {
          *(_QWORD *)(v2 + 168) = 0;
          *(_DWORD *)(v2 + 176) = 0;
          this = WTF::fastFree((WTF *)this, v7);
        }
        *(_QWORD *)(v2 + 168) = v28;
        *(_QWORD *)(v2 + 176) = v29;
      }
      else
      {
        *(_QWORD *)(v2 + 168) = v28;
        *(_QWORD *)(v2 + 176) = v29;
        *(_BYTE *)(v2 + 184) = 1;
      }
      return this;
    }
    while (1)
    {
      v13 = *((unsigned int *)v20 + 2);
      if (v13 <= v9)
      {
        v11 = 0x100000000;
        v12 = "";
      }
      else
      {
        v10 = v22;
        if (v13 - v9 <= v22)
        {
          if (!v9)
          {
            v12 = *v20;
            v11 = (uint64_t)v20[1];
            goto LABEL_20;
          }
          v10 = v13 - v9;
        }
        v14 = v9;
        v11 = v10;
        v15 = v13 - v9;
        if (*((_BYTE *)v20 + 12))
        {
          if (v15 < v10)
            goto LABEL_35;
          v12 = &(*v20)[v14];
          v11 = v10 | 0x100000000;
        }
        else
        {
          if (v15 < v10)
          {
LABEL_35:
            __break(1u);
            return this;
          }
          v12 = &(*v20)[2 * v14];
        }
      }
LABEL_20:
      v16 = WebCore::FourCC::fromString(v12, v11);
      v19 = v16;
      if ((v16 & 0xFF00000000) != 0)
      {
        if (HIDWORD(v29) == (_DWORD)v29)
        {
          v17 = (_DWORD *)WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, HIDWORD(v29) + 1, (unint64_t)&v19);
          *(_DWORD *)(v28 + 4 * HIDWORD(v29)) = *v17;
        }
        else
        {
          *(_DWORD *)(v28 + 4 * HIDWORD(v29)) = v16;
        }
        ++HIDWORD(v29);
      }
      this = WTF::StringView::SplitResult::Iterator::operator++();
      v9 = v21;
      if (v21 == v8 && v23)
        goto LABEL_29;
    }
  }
  if (*(_BYTE *)(this + 184))
  {
    this = *(_QWORD *)(this + 168);
    if (this)
    {
      *(_QWORD *)(v2 + 168) = 0;
      *(_DWORD *)(v2 + 176) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
    *(_BYTE *)(v2 + 184) = 0;
  }
  return this;
}

uint64_t WebCore::SettingsBase::setAllowedMediaCaptionFormatTypes(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v19;
  unsigned __int8 **v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  __int16 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v2 = this;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v28 = 0;
    v29 = 0;
    v4 = *(_DWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(unsigned int *)(v3 + 4);
    v24 = v5;
    v25 = v6 | ((unint64_t)((v4 >> 2) & 1) << 32);
    v26 = 44;
    v27 = 0;
    v20 = (unsigned __int8 **)&v24;
    v21 = 0;
    v23 = v6 == 0;
    this = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v20);
    v8 = v25;
    v9 = v21;
    if (v21 == (_DWORD)v25 && v23)
    {
LABEL_29:
      if (*(_BYTE *)(v2 + 208))
      {
        this = *(_QWORD *)(v2 + 192);
        if (this)
        {
          *(_QWORD *)(v2 + 192) = 0;
          *(_DWORD *)(v2 + 200) = 0;
          this = WTF::fastFree((WTF *)this, v7);
        }
        *(_QWORD *)(v2 + 192) = v28;
        *(_QWORD *)(v2 + 200) = v29;
      }
      else
      {
        *(_QWORD *)(v2 + 192) = v28;
        *(_QWORD *)(v2 + 200) = v29;
        *(_BYTE *)(v2 + 208) = 1;
      }
      return this;
    }
    while (1)
    {
      v13 = *((unsigned int *)v20 + 2);
      if (v13 <= v9)
      {
        v11 = 0x100000000;
        v12 = "";
      }
      else
      {
        v10 = v22;
        if (v13 - v9 <= v22)
        {
          if (!v9)
          {
            v12 = *v20;
            v11 = (uint64_t)v20[1];
            goto LABEL_20;
          }
          v10 = v13 - v9;
        }
        v14 = v9;
        v11 = v10;
        v15 = v13 - v9;
        if (*((_BYTE *)v20 + 12))
        {
          if (v15 < v10)
            goto LABEL_35;
          v12 = &(*v20)[v14];
          v11 = v10 | 0x100000000;
        }
        else
        {
          if (v15 < v10)
          {
LABEL_35:
            __break(1u);
            return this;
          }
          v12 = &(*v20)[2 * v14];
        }
      }
LABEL_20:
      v16 = WebCore::FourCC::fromString(v12, v11);
      v19 = v16;
      if ((v16 & 0xFF00000000) != 0)
      {
        if (HIDWORD(v29) == (_DWORD)v29)
        {
          v17 = (_DWORD *)WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, HIDWORD(v29) + 1, (unint64_t)&v19);
          *(_DWORD *)(v28 + 4 * HIDWORD(v29)) = *v17;
        }
        else
        {
          *(_DWORD *)(v28 + 4 * HIDWORD(v29)) = v16;
        }
        ++HIDWORD(v29);
      }
      this = WTF::StringView::SplitResult::Iterator::operator++();
      v9 = v21;
      if (v21 == v8 && v23)
        goto LABEL_29;
    }
  }
  if (*(_BYTE *)(this + 208))
  {
    this = *(_QWORD *)(this + 192);
    if (this)
    {
      *(_QWORD *)(v2 + 192) = 0;
      *(_DWORD *)(v2 + 200) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
    *(_BYTE *)(v2 + 208) = 0;
  }
  return this;
}

double WebCore::SettingsBase::resetToConsistentState(WebCore::SettingsBase *this)
{
  WTF::StringImpl *v2;
  WTF *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  double result;
  WTF *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  int v17;
  unsigned int v18;
  char v19;

  *((_QWORD *)this + 2) = 0x3F70624DD2F1A9FCLL;
  LOBYTE(v16) = 0;
  v19 = 0;
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)this + 96, (WTF::StringImpl *)&v16);
  if (v19)
  {
    if (v18)
    {
      v10 = v16;
      v11 = 8 * v18;
      do
      {
        v12 = *(WTF::StringImpl **)v10;
        *(_QWORD *)v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v2);
          else
            *(_DWORD *)v12 -= 2;
        }
        v10 = (WTF *)((char *)v10 + 8);
        v11 -= 8;
      }
      while (v11);
    }
    v3 = v16;
    if (v16)
    {
      v16 = 0;
      v17 = 0;
      WTF::fastFree(v3, v2);
    }
  }
  LOBYTE(v16) = 0;
  v19 = 0;
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)this + 120, (WTF::StringImpl *)&v16);
  if (v19)
  {
    if (v18)
    {
      v13 = v16;
      v14 = 8 * v18;
      do
      {
        v15 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v4);
          else
            *(_DWORD *)v15 -= 2;
        }
        v13 = (WTF *)((char *)v13 + 8);
        v14 -= 8;
      }
      while (v14);
    }
    v5 = v16;
    if (v16)
    {
      v16 = 0;
      v17 = 0;
      WTF::fastFree(v5, v4);
    }
  }
  if (*((_BYTE *)this + 160))
  {
    v6 = (WTF *)*((_QWORD *)this + 18);
    if (v6)
    {
      *((_QWORD *)this + 18) = 0;
      *((_DWORD *)this + 38) = 0;
      WTF::fastFree(v6, v4);
    }
    *((_BYTE *)this + 160) = 0;
  }
  if (*((_BYTE *)this + 184))
  {
    v7 = (WTF *)*((_QWORD *)this + 21);
    if (v7)
    {
      *((_QWORD *)this + 21) = 0;
      *((_DWORD *)this + 44) = 0;
      WTF::fastFree(v7, v4);
    }
    *((_BYTE *)this + 184) = 0;
  }
  if (*((_BYTE *)this + 208))
  {
    v8 = (WTF *)*((_QWORD *)this + 24);
    if (v8)
    {
      *((_QWORD *)this + 24) = 0;
      *((_DWORD *)this + 50) = 0;
      WTF::fastFree(v8, v4);
    }
    *((_BYTE *)this + 208) = 0;
  }
  result = 1.60000062;
  *((_QWORD *)this + 27) = 0x3FF9999A3FD9999ALL;
  *((_DWORD *)this + 56) = 1071225242;
  return result;
}

uint64_t WebCore::SettingsBase::mediaTypeOverrideChanged(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  WebCore::Page *v3;
  uint64_t v4;
  BOOL v5;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl **v8;
  WTF::AtomStringImpl *v9;
  int v10;
  WTF::StringImpl **v11;
  char v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  void *v17;
  _QWORD *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;

  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = *(WebCore::Page **)(v2 + 8);
    if (v3)
    {
      ++*(_DWORD *)v3;
      v4 = *((_QWORD *)v3 + 20);
      if (v4)
        v5 = *(_BYTE *)(v4 + 144) == 0;
      else
        v5 = 0;
      if (!v5)
        goto LABEL_26;
      v6 = (unsigned int *)(v4 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v8 = *(WTF::StringImpl ***)(v4 + 288);
      if (!v8)
      {
LABEL_23:
        this = WebCore::Page::setNeedsRecalcStyleInAllFrames(v3);
        do
        {
          v14 = __ldaxr(v6);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v6));
        if (!v15)
        {
          atomic_store(1u, v6);
          v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v18 = off_1E31FE290;
          v18[1] = v6;
          v20 = (uint64_t)v18;
          WTF::ensureOnMainThread();
          this = v20;
          if (v20)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
LABEL_26:
        if (*(_DWORD *)v3 == 1)
        {
          WebCore::Page::~Page((uint64_t)v3);
          return WTF::fastFree(v16, v17);
        }
        else
        {
          --*(_DWORD *)v3;
        }
        return this;
      }
      ++*((_DWORD *)v8 + 2);
      v9 = *(WTF::AtomStringImpl **)(*((_QWORD *)v3 + 14) + 480);
      if (v9)
      {
        if ((*((_BYTE *)v9 + 16) & 0x10) != 0)
        {
          v10 = *(_DWORD *)v9 + 2;
          *(_DWORD *)v9 = v10;
          v11 = v8 + 130;
LABEL_14:
          v12 = 0;
          *(_DWORD *)v9 = v10 + 2;
          goto LABEL_15;
        }
        WTF::AtomStringImpl::addSlowCase(v9, a2);
        v9 = v19;
        v11 = v8 + 130;
        if (v19)
        {
          v10 = *(_DWORD *)v19;
          goto LABEL_14;
        }
      }
      else
      {
        v11 = v8 + 130;
      }
      v12 = 1;
LABEL_15:
      v13 = *v11;
      *v11 = v9;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::destroy(v13, a2);
          if ((v12 & 1) == 0)
          {
LABEL_19:
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, a2);
            else
              *(_DWORD *)v9 -= 2;
          }
LABEL_21:
          if (*((_DWORD *)v8 + 2) == 1)
            (*((void (**)(WTF::StringImpl **))*v8 + 1))(v8);
          else
            --*((_DWORD *)v8 + 2);
          goto LABEL_23;
        }
        *(_DWORD *)v13 -= 2;
      }
      if ((v12 & 1) == 0)
        goto LABEL_19;
      goto LABEL_21;
    }
  }
  return this;
}

uint64_t WebCore::SettingsBase::iceCandidateFilteringEnabledChanged(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 112);
      if (*(_BYTE *)(v4 + 235))
      {
        if (!*(_BYTE *)(v4 + 234))
          goto LABEL_5;
      }
      else if ((*(_QWORD *)(v4 + 680) & 0x400000) == 0)
      {
LABEL_5:
        *(_BYTE *)(v3 + 1094) = 0;
        return WebCore::RTCController::disableICECandidateFilteringForAllOrigins(*(WebCore::RTCController **)(v3 + 304));
      }
      *(_BYTE *)(v3 + 1094) = 1;
      return WebCore::RTCController::enableICECandidateFiltering(*(WebCore::RTCController **)(v3 + 304), a2);
    }
  }
  return this;
}

uint64_t WebCore::SettingsBase::shouldEnableTextAutosizingBoostChanged(uint64_t this)
{
  uint64_t v1;
  WebCore::Page *v2;
  BOOL v3;
  float v4;

  v1 = *(_QWORD *)(this + 8);
  if (v1)
  {
    v2 = *(WebCore::Page **)(v1 + 8);
    if (v2)
    {
      v3 = (*(_QWORD *)(*((_QWORD *)v2 + 14) + 712) & 0x80000000000) == 0;
      *(int8x8_t *)(this + 216) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v3), 0x1FuLL)), (int8x8_t)0x3FF9999A3FD9999ALL, (int8x8_t)0x401ECCCD400ECCCDLL);
      v4 = 1.7;
      if (!v3)
        v4 = 5.0;
      *(float *)(this + 224) = v4;
      return WebCore::Page::setNeedsRecalcStyleInAllFrames(v2);
    }
  }
  return this;
}

_QWORD *WebCore::SettingsBase::textAutosizingUsesIdempotentModeChanged(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = this[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      this = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 48) + 16) + 1712))(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16));
      v4 = v3[1];
      if (v4)
      {
        this = *(_QWORD **)(v4 + 8);
        if (this)
          return (_QWORD *)WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
      }
    }
  }
  return this;
}

uint64_t WebCore::SettingsBase::mockCaptureDevicesEnabledChanged(WebCore::SettingsBase *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled(0);
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled(0);
  v3 = *(_QWORD *)(v2 + 112);
  if (*(_BYTE *)(v3 + 241))
    return WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled(*(unsigned __int8 *)(v3 + 240) != 0);
  else
    return WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled((*(_QWORD *)(v3 + 712) >> 26) & 1);
}

WTF::MonotonicTime *WebCore::SettingsBase::layerBasedSVGEngineEnabledChanged(WTF::MonotonicTime *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  WebCore::Document *v9;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 160);
      if (v3)
      {
        while (1)
        {
          do
          {
LABEL_4:
            v4 = (_QWORD *)v3;
            if (!*(_BYTE *)(v3 + 144))
            {
              v7 = *(_QWORD *)(v3 + 296);
              if (v7)
              {
                this = *(WTF::MonotonicTime **)(v7 + 1272);
                if (this)
                {
                  this = (WTF::MonotonicTime *)WebCore::Node::invalidateStyle((uint64_t)this, 4u, 2);
                  *(_BYTE *)(v7 + 3390) = 1;
                  if (((*(_QWORD *)(v7 + 1536) & 0xFFFFFFFFFFFFLL) == 0
                     || *(double *)((*(_QWORD *)(v7 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                    && !*(_BYTE *)(v7 + 3362))
                  {
                    *(_QWORD *)(v7 + 1528) = 0;
                    WTF::MonotonicTime::now(this);
                    this = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v7 + 1504, v8 + 0.0);
                    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                    {
                      this = (WTF::MonotonicTime *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v7, v9);
                      if (this)
                        this = WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(this, (WebCore::Document *)v7);
                    }
                  }
                }
              }
            }
            v3 = v4[11];
          }
          while (v3);
          v5 = *(_QWORD *)(v4[6] + 8);
          if (!v5)
            break;
          v3 = v4[9];
          if (!v3)
          {
            while (1)
            {
              v6 = *(_QWORD *)(v5 + 56);
              if (!v6)
                return this;
              v5 = *(_QWORD *)(v6 + 8);
              if (!v5)
                return this;
              v3 = *(_QWORD *)(v5 + 72);
              if (v3)
                goto LABEL_4;
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::SettingsBase::usesBackForwardCacheChanged(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = this[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if ((*(_QWORD *)(*(_QWORD *)(v2 + 112) + 704) & 0x20) == 0)
      {
        {
          WTF::NeverDestroyed<WebCore::BackForwardCache,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache);
        }
        v3 = dword_1ECE90590;
        dword_1ECE90590 = 0;
        this = WebCore::BackForwardCache::prune(&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache, 0);
        dword_1ECE90590 = v3;
      }
    }
  }
  return this;
}

WebCore::Page *WebCore::SettingsBase::dnsPrefetchingEnabledChanged(WebCore::Page *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    this = *(WebCore::Page **)(v1 + 8);
    if (this)
      return (WebCore::Page *)WebCore::Page::dnsPrefetchingStateChanged(this);
  }
  return this;
}

WTF::MonotonicTime *WebCore::SettingsBase::scrollingPerformanceTestingEnabledChanged(WTF::MonotonicTime *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  WebCore::LocalFrameView *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (***v9)(_QWORD, _QWORD, _QWORD);

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    v3 = *(_QWORD *)(v2 + 160);
    if (*(_BYTE *)(v3 + 144))
      v3 = 0;
    if (v2)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (!v4)
    {
      v5 = *(WebCore::LocalFrameView **)(v3 + 288);
      if (v5)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v2 + 112) + 688);
        if ((v6 & 0x4000000000000000) != 0)
        {
          v7 = *(_QWORD *)(*((_QWORD *)v5 + 41) + 24);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              v9 = *(void (****)(_QWORD, _QWORD, _QWORD))(v8 + 264);
              if (v9)
              {
                WTF::MonotonicTime::now(this);
                (**v9)(v9, 0, 0);
              }
            }
          }
        }
        this = (WTF::MonotonicTime *)WebCore::LocalFrameView::tiledBacking(v5);
        if (this)
          return (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *, unint64_t))(*(_QWORD *)this + 232))(this, (v6 >> 62) & 1);
      }
    }
  }
  return this;
}

WebCore::PageOverlay **WebCore::SettingsBase::resourceUsageOverlayVisibleChanged(WebCore::PageOverlay **this)
{
  WebCore::PageOverlay *v1;

  v1 = this[1];
  if (v1)
  {
    this = (WebCore::PageOverlay **)*((_QWORD *)v1 + 1);
    if (this)
      return WebCore::Page::setResourceUsageOverlayVisible((WebCore::Page *)this, (void *)((*((_QWORD *)this[14] + 89) >> 41) & 1));
  }
  return this;
}

_QWORD *WebCore::ShadowRealmGlobalScope::moduleLoader(WebCore::ShadowRealmGlobalScope *this)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  char v11;
  uint64_t v12;
  WebCore::ScriptModuleLoader *v13;
  WTF *v14;
  void *v15;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  char v22;

  v1 = (_QWORD *)*((_QWORD *)this + 4);
  if (!v1)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 3);
    if (v3 && (v3[1] & 3) == 0)
      v4 = *v3;
    else
      v4 = 0;
    v5 = *((_QWORD *)this + 2);
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        v8 = v7 - 96;
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
    v1 = v9;
    v11 = *(_BYTE *)(v5 + 48);
    *v9 = off_1E3393AD0;
    if (v8)
    {
      v22 = v11;
      v21 = v9;
      v12 = *(_QWORD *)(v8 + 104);
      if (v12)
        goto LABEL_27;
      v12 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = v8 + 96;
      v18 = *(unsigned int **)(v8 + 104);
      *(_QWORD *)(v8 + 104) = v12;
      if (!v18)
        goto LABEL_27;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v10);
      }
      v12 = *(_QWORD *)(v8 + 104);
      if (v12)
      {
LABEL_27:
        do
          v17 = __ldaxr((unsigned int *)v12);
        while (__stlxr(v17 + 1, (unsigned int *)v12));
      }
      v1 = v21;
      v11 = v22;
    }
    else
    {
      v12 = 0;
    }
    v1[2] = 0;
    v1[3] = 0;
    v1[1] = v12;
    *(_QWORD *)((char *)v1 + 29) = 0;
    v1[5] = 0;
    *((_BYTE *)v1 + 48) = v11;
    v1[7] = v4;
    v13 = (WebCore::ScriptModuleLoader *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v1;
    if (v13)
    {
      WebCore::ScriptModuleLoader::~ScriptModuleLoader(v13, v10);
      WTF::fastFree(v14, v15);
      return (_QWORD *)*((_QWORD *)this + 4);
    }
  }
  return v1;
}

uint64_t WebCore::ScreenOrientation::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 80);
  return this;
}

WebCore::ScreenOrientation *WebCore::ScreenOrientation::deref(WebCore::ScreenOrientation *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 20) == 1)
  {
    WebCore::ScreenOrientation::~ScreenOrientation(this, a2);
    return (WebCore::ScreenOrientation *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 20);
  }
  return this;
}

uint64_t WebCore::ScreenOrientation::eventTargetInterface(WebCore::ScreenOrientation *this)
{
  return 71;
}

uint64_t WebCore::ScreenOrientation::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 80);
  return this;
}

WebCore::ScreenOrientation *WebCore::ScreenOrientation::derefEventTarget(WebCore::ScreenOrientation *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 20) == 1)
  {
    WebCore::ScreenOrientation::~ScreenOrientation(this, a2);
    return (WebCore::ScreenOrientation *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 20);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::ScreenOrientation::eventTargetInterface(WebCore::ScreenOrientation *this)
{
  return 71;
}

uint64_t `non-virtual thunk to'WebCore::ScreenOrientation::scriptExecutionContext(WebCore::ScreenOrientation *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::ScreenOrientation::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 56);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::ScreenOrientation::derefEventTarget(uint64_t this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this + 56) == 1)
  {
    WebCore::ScreenOrientation::~ScreenOrientation((WebCore::ScreenOrientation *)(this - 24), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this + 56);
  }
  return this;
}

__int16 **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::setPort(std::optional<unsigned short>)::{lambda(WebCore::SecurityOriginData::Tuple &)#1},WebCore::SecurityOriginData::setPort(std::optional<unsigned short>)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> &>(__int16 **result, uint64_t a2)
{
  __int16 v2;

  v2 = **result;
  *(_BYTE *)(a2 + 18) = *((_BYTE *)*result + 2);
  *(_WORD *)(a2 + 16) = v2;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::opaqueOriginIdentifier(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::opaqueOriginIdentifier(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::opaqueOriginIdentifier(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::opaqueOriginIdentifier(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = 1;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENSB_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSB_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SK_EEEEEEDcSP_DpT0_@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;
  int v6;

  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  LOWORD(v6) = *(_WORD *)(a1 + 16);
  BYTE2(v6) = *(_BYTE *)(a1 + 18);
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 24) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENSB_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSB_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSL_EUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SK_EEEEEEDcSP_DpT0_@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[2] = 1;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENSB_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSB_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSL_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSD_SK_EEEEEEDcSO_DpT0_@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;
  int v6;

  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  LOWORD(v6) = *(_WORD *)(a1 + 16);
  BYTE2(v6) = *(_BYTE *)(a1 + 18);
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 24) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENSB_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSB_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSL_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSD_SK_EEEEEEDcSO_DpT0_@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[2] = 1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;

  result = WTF::equal(*(WTF **)a2, *(const WTF::StringImpl **)a3, (const WTF::StringImpl *)a3);
  if ((_DWORD)result)
  {
    result = WTF::equal(*(WTF **)(a2 + 8), *(const WTF::StringImpl **)(a3 + 8), v6);
    if ((_DWORD)result)
    {
      result = (*(_BYTE *)(a2 + 18) != 0) == (*(_BYTE *)(a3 + 18) != 0);
      if (*(_BYTE *)(a2 + 18))
      {
        if (*(_BYTE *)(a3 + 18))
          return *(unsigned __int16 *)(a2 + 16) == *(unsigned __int16 *)(a3 + 16);
      }
    }
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3 && a2[1] == a3[1];
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::ScreenOrientation>(WebCore::ScreenOrientation &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::ScreenOrientation>(WebCore::ScreenOrientation &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::ScreenOrientation>(WebCore::ScreenOrientation &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::ScreenOrientation>(WebCore::ScreenOrientation &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::ScreenOrientation *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  *a1 = off_1E3402B38;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 80) == 1)
      {
        WebCore::ScreenOrientation::~ScreenOrientation((WebCore::ScreenOrientation *)v7, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v7 + 80);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::ScreenOrientation *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 20) == 1)
    {
      WebCore::ScreenOrientation::~ScreenOrientation(v5, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v5 + 20);
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScreenOrientation::lock(WebCore::ScreenOrientationLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3402B60;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScreenOrientation::lock(WebCore::ScreenOrientationLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3402B60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScreenOrientation::lock(WebCore::ScreenOrientationLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  unsigned __int8 v6[8];
  WTF::StringImpl *v7;
  objc_class *v8;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = 0;
  v6[0] = 16;
  if (v5)
    *(_DWORD *)v5 += 2;
  v7 = v5;
  WebCore::DeferredPromise::reject(v1, v6, 0, &v8);
  v3 = v7;
  v7 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (uint64_t)v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScreenOrientation::lock(WebCore::ScreenOrientationLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E3402B88;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 80) == 1)
      {
        WebCore::ScreenOrientation::~ScreenOrientation((WebCore::ScreenOrientation *)v5, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 80);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScreenOrientation::lock(WebCore::ScreenOrientationLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E3402B88;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 80) == 1)
      {
        WebCore::ScreenOrientation::~ScreenOrientation((WebCore::ScreenOrientation *)v5, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 80);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::ScreenOrientation::lock(WebCore::ScreenOrientationLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void,std::optional<WebCore::Exception> &&>::call(uint64_t a1, char *a2))()
{
  WTF::StringImpl *v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t (***result)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t (**v15)();
  uint64_t (***v16)();

  v3 = *(_QWORD *)(a1 + 8);
  v4 = a2[16];
  if (a2[16])
  {
    v5 = *a2;
    v2 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
  }
  else
  {
    v5 = 0;
  }
  v6 = WTF::fastMalloc((WTF *)0x28);
  v7 = v6;
  *(_QWORD *)v6 = &off_1E3402BB0;
  *(_QWORD *)(v6 + 8) = v3;
  *(_BYTE *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  if (v4)
  {
    *(_BYTE *)(v6 + 16) = v5;
    *(_QWORD *)(v6 + 24) = v2;
    *(_BYTE *)(v6 + 32) = 1;
    v2 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  v9 = *(_DWORD *)(v3 + 80);
  *(_QWORD *)(v8 + 8) = v3;
  ++*(_QWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 80) = v9 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3402B38;
  result[1] = (uint64_t (**)())v3;
  result[2] = (uint64_t (**)())v8;
  result[3] = (uint64_t (**)())v7;
  v16 = result;
  v11 = *(_QWORD *)(v3 + 8);
  if (!v11)
  {
    v16 = 0;
    v15 = off_1E3402B38;
LABEL_13:
    result = (uint64_t (***)())v15[1]();
    if (!v4)
      return result;
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
  {
    v16 = 0;
    goto LABEL_12;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 - 96) + 104))(v12 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v13, 0, (uint64_t *)&v16);
  result = v16;
  v16 = 0;
  if (result)
  {
LABEL_12:
    v15 = *result;
    goto LABEL_13;
  }
  if (!v4)
    return result;
LABEL_14:
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      return (uint64_t (***)())WTF::StringImpl::destroy(v2, v14);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScreenOrientation::lock(WebCore::ScreenOrientationLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1::operator()(std::optional<WebCore::Exception> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)a1 = &off_1E3402BB0;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScreenOrientation::lock(WebCore::ScreenOrientationLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1::operator()(std::optional<WebCore::Exception> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E3402BB0;
  if (*((_BYTE *)this + 32))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScreenOrientation::lock(WebCore::ScreenOrientationLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1::operator()(std::optional<WebCore::Exception> &&)::{lambda(void)#1},void>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned __int8 v21[8];
  WTF::StringImpl *v22;
  objc_class *v23;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x1960611F4);
      }
      v4 = *(_QWORD *)(v3 + 240);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 24);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
            {
              v8 = *(_QWORD *)(v7 + 944);
              if (v8)
              {
                v9 = *(_QWORD *)(v8 + 8);
                if (v9)
                {
                  v10 = *(unsigned int **)(v9 + 24);
                  *(_QWORD *)(v9 + 24) = 0;
                  if (v10)
                  {
                    do
                    {
                      v11 = __ldaxr(v10);
                      v12 = v11 - 1;
                    }
                    while (__stlxr(v12, v10));
                    if (!v12)
                    {
                      atomic_store(1u, v10);
                      v20 = result;
                      WTF::fastFree((WTF *)v10, a2);
                      result = v20;
                    }
                  }
                  v13 = *(_QWORD *)(v9 + 16);
                  *(_QWORD *)(v9 + 16) = 0;
                  if (v13)
                  {
                    if (!*(_BYTE *)(result + 32))
                    {
                      v17 = *(_QWORD *)(v13 + 24);
                      if (v17 && *(_QWORD *)v17 && (*(_BYTE *)(v17 + 8) & 3) == 0)
                      {
                        v18 = *(_QWORD *)(v13 + 32);
                        if (!v18 || (*(_BYTE *)(v18 + 8) & 3) != 0)
                          v19 = 0;
                        else
                          v19 = *(uint64_t **)v18;
                        JSC::JSLockHolder::JSLockHolder();
                        WebCore::DeferredPromise::callFunction(v13, v19, 0, (objc_class *)0xA);
                        result = MEMORY[0x19AEA32A0](v21);
                      }
                      goto LABEL_31;
                    }
                    v14 = *(_BYTE *)(result + 16);
                    v15 = *(WTF::StringImpl **)(result + 24);
                    *(_QWORD *)(result + 24) = 0;
                    v23 = 0;
                    v21[0] = v14;
                    if (v15)
                      *(_DWORD *)v15 += 2;
                    v22 = v15;
                    WebCore::DeferredPromise::reject(v13, v21, 0, &v23);
                    result = (uint64_t)v22;
                    v22 = 0;
                    if (result)
                    {
                      if (*(_DWORD *)result == 2)
                      {
                        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
                        if (v15)
                        {
LABEL_22:
                          if (*(_DWORD *)v15 == 2)
                            result = WTF::StringImpl::destroy(v15, v16);
                          else
                            *(_DWORD *)v15 -= 2;
                        }
LABEL_31:
                        if (*(_DWORD *)(v13 + 16) == 1)
                          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
                        --*(_DWORD *)(v13 + 16);
                        return result;
                      }
                      *(_DWORD *)result -= 2;
                    }
                    if (v15)
                      goto LABEL_22;
                    goto LABEL_31;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScreenOrientation::stop(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3402BD8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScreenOrientation::stop(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3402BD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScreenOrientation::stop(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  unsigned __int8 v6[8];
  WTF::StringImpl *v7;
  objc_class *v8;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = 0;
  v6[0] = 16;
  if (v5)
    *(_DWORD *)v5 += 2;
  v7 = v5;
  WebCore::DeferredPromise::reject(v1, v6, 0, &v8);
  v3 = v7;
  v7 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (uint64_t)v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>>(_WORD *__dst, uint64_t a2, int8x16_t *a3, unsigned int a4, uint64_t a5, char a6, unsigned int a7)
{
  _WORD *v12;
  int8x16_t *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int16 v38;
  int8x16_t *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  char *v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int16 v52;
  uint64_t v53;
  BOOL v54;
  _WORD *v55;
  _BYTE v57[13];
  uint64_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;

  v12 = __dst;
  v58 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v14 = *(int8x16_t **)(a2 + 8);
    v15 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v16 = (char *)&__dst[v15];
      if (v15 >= 0x40)
      {
        v17 = (char *)&__dst[v15 & 0xFFFFFFC0];
        v19 = 0uLL;
        v20 = (char *)__dst;
        do
        {
          v59.val[0] = *v14;
          v21 = v14[1];
          v62.val[0] = v14[2];
          v22 = v14[3];
          v14 += 4;
          v23 = v22;
          v62.val[1] = 0uLL;
          v65.val[0] = v21;
          v59.val[1] = 0uLL;
          v24 = v20;
          vst2q_s8(v24, v59);
          v24 += 32;
          v65.val[1] = 0uLL;
          vst2q_s8(v24, v65);
          v25 = v20 + 64;
          vst2q_s8(v25, v62);
          v26 = v20 + 96;
          vst2q_s8(v26, *(int8x16x2_t *)(&v19 - 1));
          v20 += 128;
        }
        while (v20 != v17);
      }
      else
      {
        v17 = (char *)__dst;
      }
      while (v17 != v16)
      {
        v27 = v14->u8[0];
        v14 = (int8x16_t *)((char *)v14 + 1);
        *(_WORD *)v17 = v27;
        v17 += 2;
      }
    }
    else if ((_DWORD)v15 == 1)
    {
      *__dst = v14->i16[0];
    }
    else if ((_DWORD)v15)
    {
      __dst = memcpy(__dst, v14, 2 * v15);
    }
    v18 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v18 = 0;
  }
  v28 = (char *)&v12[v18];
  v29 = &v28[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v30 = &v28[2 * (a4 & 0xFFFFFFC0)];
    v31 = 0uLL;
    do
    {
      v60.val[0] = *a3;
      v32 = a3[1];
      v63.val[0] = a3[2];
      v33 = a3[3];
      a3 += 4;
      v34 = v33;
      v63.val[1] = 0uLL;
      v66.val[0] = v32;
      v60.val[1] = 0uLL;
      v35 = v28;
      vst2q_s8(v35, v60);
      v35 += 32;
      v66.val[1] = 0uLL;
      vst2q_s8(v35, v66);
      v36 = v28 + 64;
      vst2q_s8(v36, v63);
      v37 = v28 + 96;
      vst2q_s8(v37, *(int8x16x2_t *)(&v31 - 1));
      v28 += 128;
    }
    while (v28 != v30);
    v28 = v30;
  }
  while (v28 != v29)
  {
    v38 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v28 = v38;
    v28 += 2;
  }
  if (a5)
  {
    v39 = *(int8x16_t **)(a5 + 8);
    v40 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      v41 = &v29[2 * v40];
      if (v40 >= 0x40)
      {
        v42 = &v29[2 * (v40 & 0xFFFFFFC0)];
        v44 = 0uLL;
        v45 = v29;
        do
        {
          v61.val[0] = *v39;
          v46 = v39[1];
          v64.val[0] = v39[2];
          v47 = v39[3];
          v39 += 4;
          v48 = v47;
          v64.val[1] = 0uLL;
          v67.val[0] = v46;
          v61.val[1] = 0uLL;
          v49 = v45;
          vst2q_s8(v49, v61);
          v49 += 32;
          v67.val[1] = 0uLL;
          vst2q_s8(v49, v67);
          v50 = v45 + 64;
          vst2q_s8(v50, v64);
          v51 = v45 + 96;
          vst2q_s8(v51, *(int8x16x2_t *)(&v44 - 1));
          v45 += 128;
        }
        while (v45 != v42);
      }
      else
      {
        v42 = v29;
      }
      while (v42 != v41)
      {
        v52 = v39->u8[0];
        v39 = (int8x16_t *)((char *)v39 + 1);
        *(_WORD *)v42 = v52;
        v42 += 2;
      }
    }
    else if ((_DWORD)v40 == 1)
    {
      *(_WORD *)v29 = v39->i16[0];
    }
    else if ((_DWORD)v40)
    {
      __dst = memcpy(v29, v39, 2 * v40);
    }
    v43 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v43 = 0;
  }
  v53 = 0;
  *(_WORD *)&v29[2 * v43] = a6;
  do
  {
    v57[v53-- + 12] = (a7 % 0xA) | 0x30;
    v54 = a7 > 9;
    a7 /= 0xAu;
  }
  while (v54);
  if (v53 + 14 <= 13)
  {
    v55 = &v12[v43 + 1 + v18 + a4];
    do
      *v55++ = *((unsigned __int8 *)&v58 + v53);
    while (!__CFADD__(v53++, 1));
  }
  return __dst;
}

_QWORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned short,void>>(_QWORD *result, uint64_t a2, char a3, uint64_t a4, char a5, unsigned __int16 a6)
{
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  char v19;
  unsigned int v20;
  _BOOL4 v21;
  uint64_t v22;

  v8 = result;
  if (a2)
    v9 = *(_DWORD *)(a2 + 4);
  else
    v9 = 0;
  if (a4)
    v10 = *(_DWORD *)(a4 + 4);
  else
    v10 = 0;
  v11 = 0;
  v12 = a6;
  do
  {
    ++v11;
    v13 = v12 > 9;
    v12 /= 0xAu;
  }
  while (v13);
  if (v11 < 0)
    goto LABEL_29;
  v14 = __OFADD__(v11, 1);
  v15 = v11 + 1;
  v16 = v14;
  if (v10 < 0
    || v16
    || (v14 = __OFADD__(v10, v15), v17 = v10 + v15, v14)
    || ((v14 = __OFADD__(v17, 1), v18 = v17 + 1, !v14) ? (v19 = 0) : (v19 = 1),
        v9 < 0 || (v19 & 1) != 0 || (v20 = v9 + v18, __OFADD__(v9, v18))))
  {
LABEL_29:
    *result = 0;
  }
  else
  {
    v21 = (!a2 || (*(_BYTE *)(a2 + 16) & 4) != 0) && (!a4 || (*(_BYTE *)(a4 + 16) & 4) != 0);
    result = (_QWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned short,void>>((uint64_t)&v22, v20, v21, a2, a3, a4, a5, a6);
    *v8 = v22;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned short,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, char a5, uint64_t a6, char a7, unsigned __int16 a8)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (_QWORD *)result;
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
        v15 = v16;
        if (v16)
        {
          *(_DWORD *)v16 = 2;
          *(_DWORD *)(v16 + 4) = a2;
          *(_QWORD *)(v16 + 8) = v16 + 20;
          *(_DWORD *)(v16 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned short,void>>((char *)(v16 + 20), a4, a5, a6, a7, a8);
        }
        goto LABEL_6;
      }
LABEL_12:
      v15 = 0;
      goto LABEL_6;
    }
LABEL_11:
    v15 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_6;
  }
  if (!a2)
    goto LABEL_11;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  v15 = v16;
  if (v16)
  {
    *(_DWORD *)v16 = 2;
    *(_DWORD *)(v16 + 4) = a2;
    *(_QWORD *)(v16 + 8) = v16 + 20;
    *(_DWORD *)(v16 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned short,void>>((_WORD *)(v16 + 20), a4, a5, a6, a7, a8);
  }
LABEL_6:
  *v14 = v15;
  return result;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned short,void>>(_WORD *__dst, uint64_t a2, char a3, uint64_t a4, char a5, unsigned __int16 a6)
{
  _WORD *v10;
  int8x16_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  _WORD *v26;
  char *v27;
  int8x16_t *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  char *v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  uint64_t v42;
  unsigned int v43;
  _WORD *v44;
  _BYTE v46[15];
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;

  v10 = __dst;
  if (a2)
  {
    v12 = *(int8x16_t **)(a2 + 8);
    v13 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v14 = (char *)&__dst[v13];
      if (v13 >= 0x40)
      {
        v15 = (char *)&__dst[v13 & 0xFFFFFFC0];
        v17 = 0uLL;
        v18 = (char *)__dst;
        do
        {
          v47.val[0] = *v12;
          v19 = v12[1];
          v49.val[0] = v12[2];
          v20 = v12[3];
          v12 += 4;
          v21 = v20;
          v49.val[1] = 0uLL;
          v51.val[0] = v19;
          v47.val[1] = 0uLL;
          v22 = v18;
          vst2q_s8(v22, v47);
          v22 += 32;
          v51.val[1] = 0uLL;
          vst2q_s8(v22, v51);
          v23 = v18 + 64;
          vst2q_s8(v23, v49);
          v24 = v18 + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
          v18 += 128;
        }
        while (v18 != v15);
      }
      else
      {
        v15 = (char *)__dst;
      }
      while (v15 != v14)
      {
        v25 = v12->u8[0];
        v12 = (int8x16_t *)((char *)v12 + 1);
        *(_WORD *)v15 = v25;
        v15 += 2;
      }
    }
    else if ((_DWORD)v13 == 1)
    {
      *__dst = v12->i16[0];
    }
    else if ((_DWORD)v13)
    {
      __dst = memcpy(__dst, v12, 2 * v13);
    }
    v16 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v16 = 0;
  }
  v26 = &v10[v16];
  *v26 = a3;
  v27 = (char *)(v26 + 1);
  if (a4)
  {
    v28 = *(int8x16_t **)(a4 + 8);
    v29 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v30 = &v27[2 * v29];
      if (v29 >= 0x40)
      {
        v31 = &v27[2 * (v29 & 0xFFFFFFC0)];
        v33 = 0uLL;
        v34 = v27;
        do
        {
          v48.val[0] = *v28;
          v35 = v28[1];
          v50.val[0] = v28[2];
          v36 = v28[3];
          v28 += 4;
          v37 = v36;
          v50.val[1] = 0uLL;
          v52.val[0] = v35;
          v48.val[1] = 0uLL;
          v38 = v34;
          vst2q_s8(v38, v48);
          v38 += 32;
          v52.val[1] = 0uLL;
          vst2q_s8(v38, v52);
          v39 = v34 + 64;
          vst2q_s8(v39, v50);
          v40 = v34 + 96;
          vst2q_s8(v40, *(int8x16x2_t *)(&v33 - 1));
          v34 += 128;
        }
        while (v34 != v31);
      }
      else
      {
        v31 = v27;
      }
      while (v31 != v30)
      {
        v41 = v28->u8[0];
        v28 = (int8x16_t *)((char *)v28 + 1);
        *(_WORD *)v31 = v41;
        v31 += 2;
      }
    }
    else if ((_DWORD)v29 == 1)
    {
      *(_WORD *)v27 = v28->i16[0];
    }
    else if ((_DWORD)v29)
    {
      __dst = memcpy(v27, v28, 2 * v29);
    }
    v32 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v32 = 0;
  }
  v42 = 0;
  *(_WORD *)&v27[2 * v32] = a5;
  do
  {
    v43 = a6;
    v46[v42-- + 6] = (a6 % 0xAu) | 0x30;
    a6 /= 0xAu;
  }
  while (v43 > 9);
  if (v42 + 8 <= 7)
  {
    v44 = &v10[v32 + 2 + v16];
    do
      *v44++ = v46[v42 + 7];
    while (!__CFADD__(v42++, 1));
  }
  return __dst;
}

uint64_t WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(uint64_t a1)
{
  uint64_t v1;
  int v3;
  unsigned int v4;
  uint64_t v5;
  int i;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL4 v11;
  BOOL v12;
  char v13;
  uint64_t v15;
  char v16;
  char *v17;

  v1 = qword_1ECE839B0;
  if (!qword_1ECE839B0)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE839B0 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(a1) & v3;
  v5 = v1 + 40 * v4;
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v5) & 1) != 0)
    return 0;
  for (i = 1; ; ++i)
  {
    v7 = *(unsigned int *)(v5 + 24);
    if ((_DWORD)v7 == -1)
      break;
    v17 = &v16;
    if ((((uint64_t (*)(char **, uint64_t))off_1E3402AC8[v7])(&v17, v5) & 1) == 0)
    {
      if (v5 == a1)
      {
        v5 = a1;
        return *(_QWORD *)(v5 + 32);
      }
      v8 = *(unsigned int *)(v5 + 24);
      v9 = *(_DWORD *)(a1 + 24);
      v11 = v9 == (_DWORD)v8 && v9 != -1;
      if ((_DWORD)v8 == -1 || !v11)
      {
        v12 = v9 == -1;
        if ((_DWORD)v8 == -1)
          v13 = v12;
        else
          v13 = v11;
        if ((v13 & 1) != 0)
          return *(_QWORD *)(v5 + 32);
      }
      else
      {
        v17 = &v16;
        if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v8])(&v17, v5, a1) & 1) != 0)return *(_QWORD *)(v5 + 32);
      }
    }
    v4 = (v4 + i) & v3;
    v5 = v1 + 40 * v4;
    if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v5) & 1) != 0)
      return 0;
  }
  v15 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(v15);
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int16 v13;
  char v14;
  unsigned int *v15;
  unsigned int **v16;

  v13 = 0;
  v14 = 0;
  v1 = *(unsigned int *)(a1 + 24);
  v15 = &v12;
  if ((_DWORD)v1 == -1)
    v2 = -1;
  else
    v2 = v1;
  v3 = (v2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v2 - 1640531527) << 16) ^ ((unsigned __int16)v2
                                                                                          - 1640531527);
  v4 = (v2 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(v2) + (v3 >> 11)) << 16) ^ (v3 + WORD2(v2) + (v3 >> 11));
  v12 = v4 + (v4 >> 11);
  if ((_DWORD)v1 == -1)
  {
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v11);
  }
  else
  {
    v16 = &v15;
    ((void (*)(unsigned int ***, uint64_t))off_1E3402BF0[v1])(&v16, a1);
    v5 = v12;
    if (v14)
    {
      v10 = (v12 + v13) ^ ((v12 + v13) << 11);
      v5 = v10 + (v10 >> 17);
    }
    v6 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
    v7 = (v6 ^ (4 * v6)) + ((v6 ^ (4 * v6)) >> 15);
    v8 = v7 ^ (v7 << 10);
    if (v8)
      return v8;
    else
      return 0x800000;
  }
}

WTF::StringImpl **WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(unsigned int a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl **result;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v34;
  char v35;
  char *v36;

  v3 = qword_1ECE839B0;
  if (qword_1ECE839B0)
  {
    v4 = *(_DWORD *)(qword_1ECE839B0 - 4);
    v5 = *(_DWORD *)(qword_1ECE839B0 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = WTF::fastMalloc((WTF *)(40 * a1 + 16));
  v8 = (_DWORD *)v6;
  v9 = v6 + 16;
  if (a1)
    bzero((void *)(v6 + 16), 40 * a1);
  qword_1ECE839B0 = v9;
  v8[2] = a1 - 1;
  v8[3] = a1;
  *v8 = 0;
  *(_DWORD *)(qword_1ECE839B0 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = 0;
    v12 = v4;
    v32 = v3;
    while (1)
    {
      v13 = v3 + 40 * v10;
      v14 = *(unsigned int *)(v13 + 24);
      if ((_DWORD)v14 == -1)
        break;
      v36 = &v35;
      if ((((uint64_t (*)(char **, uint64_t))off_1E3402AC8[v14])(&v36, v3 + 40 * v10) & 1) == 0)
      {
        if (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v3 + 40 * v10)))
        {
          v16 = qword_1ECE839B0;
          v34 = v11;
          if (qword_1ECE839B0)
            v17 = *(_DWORD *)(qword_1ECE839B0 - 8);
          else
            v17 = 0;
          v18 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(v3 + 40 * v10);
          v19 = 0;
          while (1)
          {
            v20 = v18 & v17;
            v11 = v16 + 40 * (v18 & v17);
            v21 = *(unsigned int *)(v11 + 24);
            if ((_DWORD)v21 == -1)
              goto LABEL_34;
            v36 = &v35;
            v22 = ((uint64_t (*)(char **, uint64_t))off_1E3402C00[v21])(&v36, v16 + 40 * v20);
            v18 = ++v19 + v20;
            if (v22)
            {
              v23 = (WTF::StringImpl **)(v16 + 40 * v20 + 32);
              std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](v23, 0);
              v24 = *(unsigned int *)(v11 + 24);
              if ((_DWORD)v24 != -1)
                ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v24])(&v36, v11);
              *(_BYTE *)v11 = 0;
              *(_DWORD *)(v11 + 24) = -1;
              v25 = *(unsigned int *)(v13 + 24);
              v3 = v32;
              if ((_DWORD)v25 != -1)
              {
                ((void (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v25])(&v36, v11, v13);
                *(_DWORD *)(v11 + 24) = v25;
              }
              v26 = (WTF::StringImpl **)(v32 + 40 * v10);
              v27 = v26[4];
              v26 += 4;
              *v26 = 0;
              *v23 = v27;
              std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](v26, 0);
              v28 = *(unsigned int *)(v13 + 24);
              if ((_DWORD)v28 != -1)
                ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v28])(&v36, v13);
              *(_DWORD *)(v13 + 24) = -1;
              if (v13 != a2)
                v11 = v34;
              v12 = v4;
              goto LABEL_29;
            }
          }
        }
        std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((WTF::StringImpl **)(v3 + 40 * v10 + 32), 0);
        v15 = *(unsigned int *)(v13 + 24);
        if ((_DWORD)v15 != -1)
          ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v15])(&v36, v3 + 40 * v10);
        *(_DWORD *)(v13 + 24) = -1;
      }
LABEL_29:
      if (++v10 == v12)
        goto LABEL_32;
    }
LABEL_34:
    v30 = (WTF::StringImpl **)std::__throw_bad_variant_access[abi:sn180100]();
    return std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](v30, v31);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (v3)
    {
LABEL_32:
      WTF::fastFree((WTF *)(v3 - 16), v7);
      return (WTF::StringImpl **)v11;
    }
  }
  return result;
}

WTF::StringImpl **std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](WTF::StringImpl **result, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *((unsigned int *)v2 + 3);
    if ((_DWORD)v3)
    {
      v4 = 32 * v3;
      v5 = (WTF::StringImpl **)(*(_QWORD *)v2 + 8);
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v7 = *(v5 - 1);
        *(v5 - 1) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v5 += 4;
        v4 -= 32;
      }
      while (v4);
    }
    v8 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      WTF::fastFree(v8, a2);
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (WTF *)((char *)v4 + 32 * v5);
        v9 = v4;
        do
        {
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v7 + 1) = v11;
          v12 = *((_QWORD *)v9 + 2);
          *((_BYTE *)v7 + 24) = *((_BYTE *)v9 + 24);
          *((_QWORD *)v7 + 2) = v12;
          v13 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v6);
            else
              *(_DWORD *)v13 -= 2;
          }
          result = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 32);
          v7 += 8;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContentType>(unsigned int *a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  result = WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = a1[3];
  v5 = v4 + 1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  v7 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v6 = v7;
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(result + 8);
  a1[3] = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  WTF *v11;
  WTF *v12;
  unsigned int *v13;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (WTF *)((char *)v7 + 16 * v8);
        v12 = v7;
        do
        {
          v13 = *(unsigned int **)v12;
          *(_QWORD *)v12 = 0;
          *(_QWORD *)v10 = v13;
          *((_BYTE *)v10 + 8) = *((_BYTE *)v12 + 8);
          result = *(unsigned int **)v12;
          *(_QWORD *)v12 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
            else
              *result -= 2;
          }
          v12 = (WTF *)((char *)v12 + 16);
          v10 += 4;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

void WebCore::ShareDataReader::~ShareDataReader(WebCore::ShareDataReader *this, void *a2)
{
  WTF *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::RawFile *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  v4 = (uint64_t **)((char *)this + 136);
  v3 = (WTF *)*((_QWORD *)this + 17);
  v5 = *((unsigned int *)this + 37);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = (uint64_t *)v3;
    do
    {
      std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](v7++, 0);
      v6 -= 8;
    }
    while (v6);
  }
  if (v3)
    WTF::fastFree(v3, a2);
  v8 = *((unsigned int *)this + 37);
  v9 = (uint64_t *)*((_QWORD *)this + 17);
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    do
    {
      std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](v9++, 0);
      v10 -= 8;
    }
    while (v10);
    v9 = *v4;
  }
  if (v9)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree((WTF *)v9, a2);
  }
  v11 = *((unsigned int *)this + 29);
  if ((_DWORD)v11)
  {
    v12 = (WebCore::RawFile *)*((_QWORD *)this + 13);
    v13 = 16 * v11;
    do
    {
      WebCore::RawFile::~RawFile(v12, a2);
      v12 = (WebCore::RawFile *)(v14 + 16);
      v13 -= 16;
    }
    while (v13);
  }
  v15 = (WTF *)*((_QWORD *)this + 13);
  if (v15)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v15, a2);
  }
  if (*((_BYTE *)this + 96))
  {
    v16 = (WTF::StringImpl *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  WebCore::ShareData::~ShareData((WebCore::ShareDataReader *)((char *)this + 16), a2);
  v17 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
}

WTF *WebCore::ShareDataReader::start(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  WebCore::RawFile *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  WebCore::ScriptExecutionContext *v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  _DWORD *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  __int128 v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  WTF::StringImpl *v55;
  __int128 v56;
  __int128 v57;

  *(_DWORD *)(a1 + 128) = 0;
  v6 = *a3;
  *a3 = 0;
  v7 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = a3[1];
  a3[1] = 0;
  v9 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = a3[2];
  a3[2] = 0;
  v11 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v12)
  {
    v13 = *(_DWORD ***)(a1 + 40);
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
      {
        if (v15[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        else
          --v15[4];
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  v16 = *(WTF **)(a1 + 40);
  if (v16)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v16, a2);
  }
  v17 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(a1 + 40) = v17;
  LODWORD(v17) = *((_DWORD *)a3 + 8);
  *((_DWORD *)a3 + 8) = 0;
  *(_DWORD *)(a1 + 48) = v17;
  LODWORD(v17) = *((_DWORD *)a3 + 9);
  *((_DWORD *)a3 + 9) = 0;
  *(_DWORD *)(a1 + 52) = v17;
  std::__optional_storage_base<WTF::URL,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::URL,false>>(a1 + 56, a3 + 5);
  v19 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v19)
  {
    v20 = *(WebCore::RawFile **)(a1 + 104);
    v21 = 16 * v19;
    do
    {
      WebCore::RawFile::~RawFile(v20, v18);
      v20 = (WebCore::RawFile *)(v22 + 16);
      v21 -= 16;
    }
    while (v21);
  }
  result = *(WTF **)(a1 + 104);
  if (result)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    result = (WTF *)WTF::fastFree(result, v18);
  }
  v24 = a3[11];
  a3[11] = 0;
  *(_QWORD *)(a1 + 104) = v24;
  LODWORD(v24) = *((_DWORD *)a3 + 24);
  *((_DWORD *)a3 + 24) = 0;
  *(_DWORD *)(a1 + 112) = v24;
  LODWORD(v24) = *((_DWORD *)a3 + 25);
  *((_DWORD *)a3 + 25) = 0;
  *(_DWORD *)(a1 + 116) = v24;
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a3 + 104);
  v25 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v25)
  {
    if (v25 >> 29)
    {
      __break(0xC471u);
      goto LABEL_66;
    }
    result = (WTF *)WTF::fastMalloc((WTF *)(8 * v25));
    *(_DWORD *)(a1 + 144) = v25;
    *(_QWORD *)(a1 + 136) = result;
    v26 = *(unsigned int *)(a1 + 52);
    if ((_DWORD)v26)
    {
      v27 = 0;
      v28 = (uint64_t *)(a1 + 136);
      v29 = *(uint64_t **)(a1 + 40);
      v54 = &v29[v26];
      if (a2)
        v30 = (WTF::StringImpl *)((char *)a2 + 192);
      else
        v30 = 0;
      while (1)
      {
        v31 = *(_DWORD **)(*v29 + 144);
        if (v31)
          *v31 += 2;
        v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
        v33 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v33 = &off_1E3402DB0;
        *(_QWORD *)(v33 + 8) = a1;
        *(_DWORD *)(v33 + 16) = v27;
        *(_QWORD *)(v33 + 24) = v31;
        *(_QWORD *)v32 = off_1E3356C10;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = 0;
        *((_QWORD *)v32 + 3) = v33;
        v55 = v32;
        v34 = *(unsigned int *)(a1 + 148);
        if ((_DWORD)v34 == *(_DWORD *)(a1 + 144))
        {
          v35 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 136), v34 + 1, (unint64_t)&v55);
          v34 = *(unsigned int *)(a1 + 148);
          v36 = *(_QWORD *)(a1 + 136);
          v37 = *(_QWORD *)v35;
          *(_QWORD *)v35 = 0;
          *(_QWORD *)(v36 + 8 * v34) = v37;
        }
        else
        {
          v38 = *v28;
          v55 = 0;
          *(_QWORD *)(v38 + 8 * v34) = v32;
        }
        *(_DWORD *)(a1 + 148) = v34 + 1;
        std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100]((uint64_t *)&v55, 0);
        v39 = *(unsigned int *)(a1 + 148);
        if (!(_DWORD)v39)
          break;
        v40 = *(_QWORD *)(*v28 + 8 * v39 - 8);
        v41 = *v29;
        v42 = WTF::fastMalloc((WTF *)0xD0);
        *(_QWORD *)v42 = &off_1E33AEE88;
        *(_QWORD *)(v42 + 8) = 0;
        *(_QWORD *)(v42 + 16) = 0;
        if (v40)
        {
          v43 = *(_QWORD *)(v40 + 8);
          if (v43)
            goto LABEL_69;
          v43 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v43 = 1;
          *(_QWORD *)(v43 + 8) = v40;
          v45 = *(unsigned int **)(v40 + 8);
          *(_QWORD *)(v40 + 8) = v43;
          if (!v45)
            goto LABEL_69;
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (!v47)
          {
            atomic_store(1u, v45);
            WTF::fastFree((WTF *)v45, v44);
          }
          v43 = *(_QWORD *)(v40 + 8);
          if (v43)
          {
LABEL_69:
            do
              v48 = __ldaxr((unsigned int *)v43);
            while (__stlxr(v48 + 1, (unsigned int *)v43));
          }
        }
        else
        {
          v43 = 0;
        }
        *(_QWORD *)(v42 + 72) = 0;
        *(_QWORD *)(v42 + 24) = v43;
        *(_QWORD *)(v42 + 32) = &off_1E31F4A18;
        *(_QWORD *)(v42 + 40) = 0;
        *(_QWORD *)(v42 + 48) = 0;
        *(_QWORD *)(v42 + 64) = 0;
        WTF::URL::invalidate((WTF::URL *)(v42 + 72));
        *(_BYTE *)(v42 + 160) = 0;
        *(_OWORD *)(v42 + 144) = 0u;
        *(_OWORD *)(v42 + 128) = 0u;
        *(_OWORD *)(v42 + 112) = 0u;
        v49 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *v49 += 2;
        *(_QWORD *)(v42 + 176) = 0;
        *(_QWORD *)(v42 + 184) = 0;
        *(_QWORD *)(v42 + 168) = v49;
        *(_BYTE *)(v42 + 192) = 0;
        *(_QWORD *)(v42 + 196) = 0;
        *(_WORD *)(v42 + 204) = 0;
        v50 = *(_QWORD *)(v40 + 16);
        *(_QWORD *)(v40 + 16) = v42;
        if (v50)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 64))(v50);
          v42 = *(_QWORD *)(v40 + 16);
        }
        v51 = *(WTF::StringImpl **)(v41 + 80);
        if (v51)
          *(_DWORD *)v51 += 2;
        v55 = v51;
        v52 = *(_OWORD *)(v41 + 104);
        v56 = *(_OWORD *)(v41 + 88);
        v57 = v52;
        WebCore::FileReaderLoader::start((WebCore::FileReaderLoader *)v42, v30, (const WTF::URL *)&v55);
        result = v55;
        v55 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF *)WTF::StringImpl::destroy(result, v53);
          else
            *(_DWORD *)result -= 2;
        }
        if (*(_DWORD *)(a1 + 148))
        {
          ++v27;
          if (++v29 != v54)
            continue;
        }
        return result;
      }
      __break(0xC471u);
LABEL_66:
      JUMPOUT(0x196062980);
    }
  }
  return result;
}

unsigned int **WebCore::FocusCandidate::FocusCandidate(unsigned int **a1, uint64_t a2, int a3)
{
  unsigned int *v6;
  void *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  const WTF::AtomString *v14;
  uint64_t v15;
  int v16;
  WebCore::Node *v17;
  uint64_t v18;
  unsigned int *v19;
  void *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  void *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  void *v33;
  const WebCore::TreeScope *v35;
  unsigned int *v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  WTF *v42;
  WebCore::Node *v43;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (unsigned int *)0x7FFFFFFFFFFFFFFFLL;
  a1[4] = 0;
  a1[5] = 0;
  *((_DWORD *)a1 + 12) = 0;
  *((_WORD *)a1 + 26) = 257;
  if ((*(_BYTE *)(a2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
  {
    if ((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      return a1;
    v6 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
    if (v6)
    {
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 + 1, v6));
    }
    v9 = *a1;
    *a1 = v6;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        v39 = v9[7];
        if ((_DWORD)v39)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v9 + 2), (WTF::StringImpl *)(*((_QWORD *)v9 + 2) + 32 * v39));
        v40 = (WTF *)*((_QWORD *)v9 + 2);
        if (v40)
        {
          *((_QWORD *)v9 + 2) = 0;
          v9[6] = 0;
          WTF::fastFree(v40, v7);
        }
        WTF::fastFree((WTF *)v9, v7);
      }
    }
    *(unsigned int **)((char *)a1 + 36) = (unsigned int *)WebCore::nodeRectInAbsoluteCoordinates((WebCore *)a2, (WebCore::Node *)1);
    *(unsigned int **)((char *)a1 + 44) = v12;
LABEL_28:
    v25 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
    if (v25)
    {
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 + 1, v25));
    }
    v28 = a1[1];
    a1[1] = v25;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        v37 = v28[7];
        if ((_DWORD)v37)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v28 + 2), (WTF::StringImpl *)(*((_QWORD *)v28 + 2) + 32 * v37));
        v38 = (WTF *)*((_QWORD *)v28 + 2);
        if (v38)
        {
          *((_QWORD *)v28 + 2) = 0;
          v28[6] = 0;
          WTF::fastFree(v38, v26);
        }
        WTF::fastFree((WTF *)v28, v26);
      }
    }
    if (*a1)
    {
      v31 = *((_QWORD *)*a1 + 1);
      if (v31)
      {
        v32 = 0;
        *(_DWORD *)(v31 + 24) += 2;
        goto LABEL_36;
      }
    }
    else
    {
      v31 = 0;
    }
    v32 = 1;
LABEL_36:
    *((_BYTE *)a1 + 52) = WebCore::hasOffscreenRect(v31, 0);
    *((_BYTE *)a1 + 53) = WebCore::hasOffscreenRect(v31, a3);
    if ((v32 & 1) == 0)
    {
      if (*(_DWORD *)(v31 + 24) == 2)
      {
        if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v31, v33);
      }
      else
      {
        *(_DWORD *)(v31 + 24) -= 2;
      }
    }
    return a1;
  }
  v13 = *(_QWORD *)(a2 + 32);
  if (!v13
    || (*(_WORD *)(v13 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::mapTag + 24))
  {
    return a1;
  }
  v14 = (const WTF::AtomString *)(v13 + 112);
  v15 = *(_QWORD *)(v13 + 112);
  v16 = *(_DWORD *)(v13 + 24);
  *(_DWORD *)(v13 + 24) = v16 + 2;
  if (!v15
    || !*(_DWORD *)(v15 + 4)
    || (v35 = *(const WebCore::TreeScope **)(v13 + 40), (v36 = (unsigned int *)*((_QWORD *)v35 + 6)) == 0))
  {
    v43 = 0;
    if (!v16)
      goto LABEL_43;
LABEL_15:
    *(_DWORD *)(v13 + 24) = v16;
    goto LABEL_16;
  }
  WebCore::TreeScopeOrderedMap::getElementByUsemap(v36, v14, v35, (uint64_t *)&v43);
  v16 = *(_DWORD *)(v13 + 24) - 2;
  if (*(_DWORD *)(v13 + 24) != 2)
    goto LABEL_15;
LABEL_43:
  if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
LABEL_16:
  v17 = v43;
  if (v43)
  {
    v18 = *((_QWORD *)v43 + 8) & 0xFFFFFFFFFFFFLL;
    if (v18)
    {
      if ((*(_BYTE *)((*((_QWORD *)v43 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196062CA8);
      }
      v19 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v43);
      if (v19)
      {
        do
          v21 = __ldaxr(v19);
        while (__stlxr(v21 + 1, v19));
      }
      v22 = *a1;
      *a1 = v19;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v41 = v22[7];
          if ((_DWORD)v41)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v22 + 2), (WTF::StringImpl *)(*((_QWORD *)v22 + 2) + 32 * v41));
          v42 = (WTF *)*((_QWORD *)v22 + 2);
          if (v42)
          {
            *((_QWORD *)v22 + 2) = 0;
            v22[6] = 0;
            WTF::fastFree(v42, v20);
          }
          WTF::fastFree((WTF *)v22, v20);
        }
      }
      *(unsigned int **)((char *)a1 + 36) = (unsigned int *)WebCore::virtualRectForAreaElementAndDirection((WebCore::HTMLAreaElement *)a2, a3);
      *(unsigned int **)((char *)a1 + 44) = (unsigned int *)v14;
      v17 = v43;
      if (!v43)
        goto LABEL_28;
    }
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17, v14);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
    if (v18)
      goto LABEL_28;
  }
  return a1;
}

unint64_t WebCore::virtualRectForAreaElementAndDirection(WebCore::HTMLAreaElement *this, int a2)
{
  uint64_t v4;
  WebCore *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  const WTF::AtomString *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  WebCore::RenderObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  const WebCore::FloatRect *v18;
  unint64_t v19;
  const WebCore::LayoutRect *v20;
  const WebCore::LayoutRect *v21;
  unint64_t v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  const WebCore::TreeScope *v27;
  unsigned int *v28;
  unsigned int v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _DWORD v38[4];
  char v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v4)
  {
    v5 = *(WebCore **)(v4 + 8);
    if (v5)
    {
      v6 = (unsigned int *)((char *)v5 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  else
  {
    v5 = 0;
  }
  v8 = *((_QWORD *)this + 4);
  if (!v8
    || (*(_WORD *)(v8 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::mapTag + 24))
  {
    v37 = 0;
    goto LABEL_11;
  }
  v9 = (const WTF::AtomString *)(v8 + 112);
  v10 = *(_QWORD *)(v8 + 112);
  v11 = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v11 + 2;
  if (!v10
    || !*(_DWORD *)(v10 + 4)
    || (v27 = *(const WebCore::TreeScope **)(v8 + 40), (v28 = (unsigned int *)*((_QWORD *)v27 + 6)) == 0))
  {
    v37 = 0;
    if (!v11)
      goto LABEL_26;
LABEL_10:
    *(_DWORD *)(v8 + 24) = v11;
    goto LABEL_11;
  }
  WebCore::TreeScopeOrderedMap::getElementByUsemap(v28, v9, v27, &v37);
  v11 = *(_DWORD *)(v8 + 24) - 2;
  if (*(_DWORD *)(v8 + 24) != 2)
    goto LABEL_10;
LABEL_26:
  if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
LABEL_11:
  v12 = v37;
  v13 = (WebCore::RenderObject *)(*(_QWORD *)(v37 + 64) & 0xFFFFFFFFFFFFLL);
  if (v13)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v37 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19606304CLL);
    }
    ++*(_DWORD *)((*(_QWORD *)(v37 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  }
  WebCore::HTMLAreaElement::computePath(this, v13, (uint64_t)&v40);
  WebCore::Path::fastBoundingRect((WebCore::Path *)&v40);
  v38[0] = v14;
  v38[1] = v15;
  v38[2] = v16;
  v38[3] = v17;
  v19 = WebCore::enclosingLayoutRect((WebCore *)v38, v18);
  v21 = v20;
  if (v42 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v42])(&v39, &v41);
  v22 = WebCore::rectToAbsoluteCoordinates(v5, v19, v21);
  v24 = v22;
  v25 = HIDWORD(v22);
  switch(a2)
  {
    case 3:
      v26 = HIDWORD(v22) + HIDWORD(v23);
      if (__OFADD__(HIDWORD(v22), HIDWORD(v23)))
        v26 = (HIDWORD(v22) >> 31) + 0x7FFFFFFF;
      v25 = (v26 - 64);
      if (__OFSUB__(v26, 64))
        v25 = 0x80000000;
      break;
    case 5:
      v29 = v22 + (_DWORD)v23;
      if (__OFADD__((_DWORD)v22, (_DWORD)v23))
        v29 = (v22 >> 31) + 0x7FFFFFFF;
      v24 = v29 - 64;
      if (__OFSUB__(v29, 64))
        v24 = 0x80000000;
      break;
    default:
      break;
  }
  if (v13)
  {
    v30 = *((_DWORD *)v13 + 4);
    if (!v30)
    {
      __break(0xC471u);
      JUMPOUT(0x196062FE8);
    }
    *((_DWORD *)v13 + 4) = v30 - 1;
  }
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v23);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  if (v5)
  {
    v31 = (unsigned int *)((char *)v5 + 8);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v35 = off_1E31FE290;
      v35[1] = v31;
      v40 = v35;
      WTF::ensureOnMainThread();
      v36 = v40;
      v40 = 0;
      if (v36)
        (*(void (**)(_QWORD *))(*v36 + 8))(v36);
    }
  }
  return v24 | (unint64_t)(v25 << 32);
}

unint64_t WebCore::nodeRectInAbsoluteCoordinates(WebCore *this, WebCore::Node *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WebCore::RenderObject *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  WebCore *v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  double v48;
  int v49;
  double v50;
  unsigned int v51;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;

  if ((*((_WORD *)this + 14) & 0xF000) == 0x9000)
  {
    v3 = *((_QWORD *)this + 66);
    if (v3)
    {
      v4 = *(unsigned int **)(v3 + 8);
      if (v4)
      {
        v5 = v4 + 2;
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
      }
    }
    else
    {
      v4 = 0;
    }
    v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(*((_QWORD *)v4 + 36) + 64) + 832))(*((_QWORD *)v4 + 36) + 64, 0, 0);
    v9 = ((_DWORD)v7 << 6);
    v10 = 0x80000000;
    if ((int)v7 < -33554432)
      v9 = 0x80000000;
    if ((int)v7 > 0x1FFFFFF)
      v9 = 0x7FFFFFFFLL;
    v11 = HIDWORD(v7) << 38;
    if (SHIDWORD(v7) < -33554432)
      v11 = 0x8000000000000000;
    if (SHIDWORD(v7) <= 0x1FFFFFF)
      v12 = v11;
    else
      v12 = 0x7FFFFFFF00000000;
    v13 = v12 | v9;
    if ((int)v8 >= -33554432)
      v10 = ((_DWORD)v8 << 6);
    if ((int)v8 > 0x1FFFFFF)
      v10 = 0x7FFFFFFFLL;
    if (SHIDWORD(v8) >= -33554432)
      v14 = HIDWORD(v8) << 38;
    else
      v14 = 0x8000000000000000;
    if (SHIDWORD(v8) <= 0x1FFFFFF)
      v15 = v14;
    else
      v15 = 0x7FFFFFFF00000000;
    v16 = WebCore::rectToAbsoluteCoordinates((WebCore *)v4, v13, (const WebCore::LayoutRect *)(v15 | v10));
    LODWORD(v17) = v16;
    v18 = HIDWORD(v16);
    v19 = v4 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v22 = off_1E31FE290;
      v22[1] = v19;
      v56 = v22;
      WTF::ensureOnMainThread();
      if (v56)
        (*(void (**)(_QWORD *))(*v56 + 8))(v56);
    }
    return v17 | (unint64_t)(v18 << 32);
  }
  v23 = (int)a2;
  v17 = (WebCore::RenderObject *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (!v17)
  {
    v18 = 0;
    if (!(_DWORD)a2)
      return v17 | (unint64_t)(v18 << 32);
    goto LABEL_60;
  }
  ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  v24 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v24)
  {
    v25 = *(WebCore **)(v24 + 8);
    if (v25)
    {
      v26 = (unsigned int *)((char *)v25 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
    }
  }
  else
  {
    v25 = 0;
  }
  v28 = WebCore::RenderObject::absoluteBoundingBoxRect(v17, 1, 0);
  v30 = ((_DWORD)v28 << 6);
  v31 = 0x80000000;
  if ((int)v28 < -33554432)
    v30 = 0x80000000;
  if ((int)v28 > 0x1FFFFFF)
    v30 = 0x7FFFFFFFLL;
  v32 = HIDWORD(v28) << 38;
  if (SHIDWORD(v28) < -33554432)
    v32 = 0x8000000000000000;
  if (SHIDWORD(v28) <= 0x1FFFFFF)
    v33 = v32;
  else
    v33 = 0x7FFFFFFF00000000;
  v34 = v33 | v30;
  if ((int)v29 >= -33554432)
    v31 = ((_DWORD)v29 << 6);
  if ((int)v29 > 0x1FFFFFF)
    v31 = 0x7FFFFFFFLL;
  if (SHIDWORD(v29) >= -33554432)
    v35 = HIDWORD(v29) << 38;
  else
    v35 = 0x8000000000000000;
  if (SHIDWORD(v29) <= 0x1FFFFFF)
    v36 = v35;
  else
    v36 = 0x7FFFFFFF00000000;
  v37 = WebCore::rectToAbsoluteCoordinates(v25, v34, (const WebCore::LayoutRect *)(v36 | v31));
  if (v25)
  {
    v38 = (unsigned int *)((char *)v25 + 8);
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      atomic_store(1u, v38);
      v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v55 = off_1E31FE290;
      v55[1] = v38;
      v57 = v55;
      WTF::ensureOnMainThread();
      if (v57)
        (*(void (**)(_QWORD *))(*v57 + 8))(v57);
    }
  }
  v41 = *((_DWORD *)v17 + 4);
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x196063600);
  }
  v18 = HIDWORD(v37);
  *((_DWORD *)v17 + 4) = v41 - 1;
  LODWORD(v17) = v37;
  if (v23)
  {
LABEL_60:
    v42 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if ((*(_BYTE *)(v42 + 0x2D) & 2) != 0)
      v42 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    v43 = *(_QWORD *)(*(_QWORD *)(v42 + 88) + 24);
    v44 = 0.0;
    if ((*(_BYTE *)(v43 + 124) & 0xE) != 0)
    {
      v53 = *(_QWORD *)(v43 + 200);
      if (*(_BYTE *)(v53 + 5) && *(_BYTE *)(v53 + 76) == 4)
      {
        if (*(_BYTE *)(v53 + 78))
          v44 = *(float *)(v53 + 72);
        else
          v44 = (float)*(int *)(v53 + 72);
      }
      else
      {
        v44 = *(float *)(v43 + 120);
      }
    }
    v45 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if ((*(_BYTE *)(v45 + 0x2D) & 2) != 0)
      v45 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    v46 = *(_QWORD *)(*(_QWORD *)(v45 + 88) + 24);
    v47 = 0.0;
    if ((*(_BYTE *)(v46 + 172) & 0xE) != 0)
    {
      v54 = *(_QWORD *)(v46 + 200);
      if (*(_BYTE *)(v54 + 5) && *(_BYTE *)(v54 + 52) == 4)
      {
        if (*(_BYTE *)(v54 + 54))
          v47 = *(float *)(v54 + 48);
        else
          v47 = (float)*(int *)(v54 + 48);
      }
      else
      {
        v47 = *(float *)(v46 + 168);
      }
    }
    v48 = (float)((float)((float)(int)v17 * 0.015625) + v44) * 64.0;
    if (v48 > -2147483650.0)
      v49 = (int)v48;
    else
      v49 = 0x80000000;
    if (v48 < 2147483650.0)
      LODWORD(v17) = v49;
    else
      LODWORD(v17) = 0x7FFFFFFF;
    v50 = (float)((float)((float)(int)v18 * 0.015625) + v47) * 64.0;
    if (v50 > -2147483650.0)
      v51 = (int)v50;
    else
      v51 = 0x80000000;
    if (v50 < 2147483650.0)
      v18 = v51;
    else
      v18 = 0x7FFFFFFFLL;
  }
  return v17 | (unint64_t)(v18 << 32);
}

BOOL WebCore::hasOffscreenRect(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  signed int v26;
  int v27;
  int v28;
  int v29;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 1;
  v5 = *(_QWORD *)(v3 + 288);
  if (!v5)
    return 1;
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v5 + 64) + 832))(v5 + 64, 0, 0);
  v10 = (_DWORD)v7 << 6;
  if ((int)v7 < -33554432)
    v10 = 0x80000000;
  if ((int)v7 <= 0x1FFFFFF)
    v11 = v10;
  else
    v11 = 0x7FFFFFFF;
  v12 = HIDWORD(v7) << 6;
  if (SHIDWORD(v7) < -33554432)
    v12 = 0x80000000;
  if (SHIDWORD(v7) <= 0x1FFFFFF)
    v13 = v12;
  else
    v13 = 0x7FFFFFFF;
  v14 = v8 << 6;
  if (v8 < -33554432)
    v14 = 0x80000000;
  if (v8 <= 0x1FFFFFF)
    v15 = v14;
  else
    v15 = 0x7FFFFFFF;
  v16 = v9 << 6;
  if (v9 < -33554432)
    v16 = 0x80000000;
  v17 = v9 <= 0x1FFFFFF ? v16 : 0x7FFFFFFF;
  switch(a2)
  {
    case 3:
      v18 = __OFSUB__(v13, 2560);
      v13 -= 2560;
      if (v18)
        v13 = 0x80000000;
      goto LABEL_27;
    case 4:
LABEL_27:
      if (__OFADD__(v17, 2560))
        v17 = 0x7FFFFFFF;
      else
        v17 += 2560;
      break;
    case 5:
      v18 = __OFSUB__(v11, 2560);
      v11 -= 2560;
      if (v18)
        v11 = 0x80000000;
      goto LABEL_32;
    case 6:
LABEL_32:
      if (__OFADD__(v15, 2560))
        v15 = 0x7FFFFFFF;
      else
        v15 += 2560;
      break;
    default:
      break;
  }
  v19 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v19)
    return 1;
  v20 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 440))(v19, 0, 0xE00000000);
  if (v21 < 1 || v22 < 1)
    return 1;
  if (v15 < 1 || v17 < 1)
    return 1;
  v26 = v20 + v21;
  if (__OFADD__((_DWORD)v20, v21))
    v26 = (v20 >> 31) + 0x7FFFFFFF;
  if ((int)v11 >= v26)
    return 1;
  v27 = (v11 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v11, v15))
    v27 = v11 + v15;
  if (v27 <= (int)v20)
    return 1;
  v28 = HIDWORD(v20) + v22;
  if (__OFADD__(HIDWORD(v20), v22))
    v28 = (HIDWORD(v20) >> 31) + 0x7FFFFFFF;
  if ((int)v13 >= v28)
    return 1;
  v29 = (v13 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v13, v17))
    v29 = v13 + v17;
  return v29 <= SHIDWORD(v20);
}

uint64_t WebCore::canScrollInDirection(uint64_t a1, int a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t canScrollInDirection;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  WebCore::RenderBox *v13;
  uint64_t v14;
  uint64_t v15;
  int (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  int v19;
  WebCore::RenderBox *v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  signed int v24;
  int v25;
  signed int v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  WebCore::RenderBox *v35;
  int v36;
  unsigned int v37;
  signed int v38;
  int v39;
  uint64_t v40;
  int v41;
  signed int v42;
  _QWORD *v43;

  v4 = *(_WORD *)(a1 + 28);
  if ((v4 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
    return 0;
  if ((v4 & 0xF000) != 0x9000)
  {
    v13 = (WebCore::RenderBox *)(*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL);
    if (v13
      && (*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0
      && WebCore::RenderBox::canBeScrolledAndHasScrollableArea(v13)
      && (*(_WORD *)(a1 + 28) & 4) != 0
      && *(_QWORD *)(a1 + 80))
    {
      switch(a2)
      {
        case 3:
          v14 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
          if ((*(_BYTE *)(v14 + 0x2D) & 2) != 0)
            v14 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
          if ((*(_QWORD *)(v14 + 96) & 0xE000) == 0x2000)
            return 0;
          if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
            v15 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
          else
            v15 = 0;
          v16 = *(int (**)(void))(*(_QWORD *)v15 + 1200);
          goto LABEL_54;
        case 4:
          v17 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
          if ((*(_BYTE *)(v17 + 0x2D) & 2) != 0)
            v17 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
          if ((*(_QWORD *)(v17 + 96) & 0xE000) == 0x2000)
            return 0;
          if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
            v18 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
          else
            v18 = 0;
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1200))(v18);
          if ((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
              v20 = (WebCore::RenderBox *)(*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL);
            else
              v20 = 0;
          }
          else
          {
            v20 = 0;
          }
          v21 = WebCore::RenderBox::clientHeight(v20);
          v22 = v19 << 6;
          if (v19 < -33554432)
            v22 = 0x80000000;
          if (v19 > 0x1FFFFFF)
            v22 = 0x7FFFFFFF;
          v23 = __OFADD__(v22, v21);
          v24 = v22 + v21;
          v25 = (v22 >> 31) + 0x7FFFFFFF;
          if (v23)
            v26 = v25;
          else
            v26 = v24;
          if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
            v27 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
          else
            v27 = 0;
          v28 = *(uint64_t (**)(void))(*(_QWORD *)v27 + 1216);
          goto LABEL_78;
        case 5:
          v29 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
          if ((*(_BYTE *)(v29 + 0x2D) & 2) != 0)
            v29 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
          if ((*(_QWORD *)(v29 + 96) & 0x1C00) == 0x400)
            return 0;
          if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
            v30 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
          else
            v30 = 0;
          v16 = *(int (**)(void))(*(_QWORD *)v30 + 1192);
LABEL_54:
          canScrollInDirection = v16() > 0;
          break;
        case 6:
          v31 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
          if ((*(_BYTE *)(v31 + 0x2D) & 2) != 0)
            v31 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
          if ((*(_QWORD *)(v31 + 96) & 0x1C00) == 0x400)
            return 0;
          if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
            v33 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
          else
            v33 = 0;
          v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 1192))(v33);
          if ((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
              v35 = (WebCore::RenderBox *)(*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL);
            else
              v35 = 0;
          }
          else
          {
            v35 = 0;
          }
          v36 = WebCore::RenderBox::clientWidth(v35);
          v37 = v34 << 6;
          if (v34 < -33554432)
            v37 = 0x80000000;
          if (v34 > 0x1FFFFFF)
            v37 = 0x7FFFFFFF;
          v23 = __OFADD__(v37, v36);
          v38 = v37 + v36;
          v39 = (v37 >> 31) + 0x7FFFFFFF;
          if (v23)
            v26 = v39;
          else
            v26 = v38;
          if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
            v40 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
          else
            v40 = 0;
          v28 = *(uint64_t (**)(void))(*(_QWORD *)v40 + 1208);
LABEL_78:
          v41 = v28();
          v42 = v41 << 6;
          if (v41 < -33554432)
            v42 = 0x80000000;
          if (v41 > 0x1FFFFFF)
            v42 = 0x7FFFFFFF;
          canScrollInDirection = v26 < v42;
          break;
        default:
          return 0;
      }
      return canScrollInDirection;
    }
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 528);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      canScrollInDirection = WebCore::canScrollInDirection(v6, a2);
      do
      {
        v10 = __ldaxr(v7);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v7));
      if (!v11)
      {
        atomic_store(1u, v7);
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v12 = off_1E31FE290;
        v12[1] = v7;
        v43 = v12;
        WTF::ensureOnMainThread();
        if (v43)
          (*(void (**)(_QWORD *))(*v43 + 8))(v43);
      }
      return canScrollInDirection;
    }
  }
  return WebCore::canScrollInDirection(0, a2);
}

{
  uint64_t result;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  BOOL v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  __int16 v33;

  result = *(_QWORD *)(a1 + 288);
  if (result)
  {
    v33 = 0;
    WebCore::LocalFrameView::calculateScrollbarModesForLayout(result, (char *)&v33, (char *)&v33 + 1, 1);
    if ((a2 - 5) > 1 || (result = 0, v33 != 1))
    {
      v5 = a2 - 3;
      if ((a2 - 3) <= 1 && HIBYTE(v33) == 1)
      {
        return 0;
      }
      else
      {
        v6 = *(_QWORD **)(a1 + 288);
        v7 = v6[8];
        v6 += 8;
        v8 = (*(uint64_t (**)(_QWORD *))(v7 + 496))(v6);
        v9 = v8;
        v10 = (*(uint64_t (**)(_QWORD *))(*v6 + 528))(v6) + HIDWORD(v8);
        v11 = v10 + (*(uint64_t (**)(_QWORD *))(*v6 + 536))(v6);
        v12 = v9 << 6;
        if (v9 < -33554432)
          v12 = 0x80000000;
        if (v9 <= 0x1FFFFFF)
          v13 = v12;
        else
          v13 = 0x7FFFFFFF;
        v14 = v11 << 6;
        if (v11 < -33554432)
          v14 = 0x80000000;
        if (v11 <= 0x1FFFFFF)
          v15 = v14;
        else
          v15 = 0x7FFFFFFF;
        v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 64) + 832))(*(_QWORD *)(a1 + 288) + 64, 0, 1);
        v17 = (_DWORD)v16 << 6;
        if ((int)v16 < -33554432)
          v17 = 0x80000000;
        if ((int)v16 <= 0x1FFFFFF)
          v18 = v17;
        else
          v18 = 0x7FFFFFFF;
        v19 = HIDWORD(v16) << 6;
        if (SHIDWORD(v16) < -33554432)
          v19 = 0x80000000;
        if (SHIDWORD(v16) <= 0x1FFFFFF)
          v20 = v19;
        else
          v20 = 0x7FFFFFFF;
        WebCore::ScrollView::unobscuredContentRect(*(_QWORD *)(a1 + 288), 1);
        v23 = v21 << 6;
        if (v21 < -33554432)
          v23 = 0x80000000;
        if (v21 > 0x1FFFFFF)
          v23 = 0x7FFFFFFF;
        v24 = v22 << 6;
        if (v22 < -33554432)
          v24 = 0x80000000;
        if (v22 <= 0x1FFFFFF)
          v25 = v24;
        else
          v25 = 0x7FFFFFFF;
        switch(v5)
        {
          case 0:
            v26 = v20 <= 0;
            goto LABEL_43;
          case 1:
            v27 = __OFADD__(v25, v20);
            v28 = v25 + v20;
            v29 = (v25 >> 31) + 0x7FFFFFFF;
            if (v27)
              v28 = v29;
            v30 = v28 < v15;
            goto LABEL_49;
          case 2:
            v26 = v18 <= 0;
LABEL_43:
            result = !v26;
            break;
          case 3:
            v27 = __OFADD__(v23, v18);
            v31 = v23 + v18;
            v32 = (v23 >> 31) + 0x7FFFFFFF;
            if (!v27)
              v32 = v31;
            v30 = v32 < v13;
LABEL_49:
            result = v30;
            break;
          default:
            return 0;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::scrollInDirection(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  int canScrollInDirection;
  void *v10;
  char v11;
  char v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  WebCore::RenderBox *v27;
  int v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  WebCore::RenderBox *v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  WebCore::ScrollableArea *v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;

  if ((*(_WORD *)(a1 + 28) & 0xF000) == 0x9000)
  {
    v4 = *(_QWORD *)(a1 + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = (unsigned int *)(v5 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        v8 = *(_QWORD *)(v5 + 296);
        if (v8)
        {
          *(_DWORD *)(v8 + 24) += 2;
          canScrollInDirection = WebCore::canScrollInDirection(v8, a2);
          v11 = canScrollInDirection;
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) != 0)
            {
              if (!canScrollInDirection)
                goto LABEL_96;
            }
            else
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v8, v10);
              if ((v11 & 1) == 0)
                goto LABEL_96;
            }
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
            if ((canScrollInDirection & 1) == 0)
              goto LABEL_96;
          }
        }
        else if ((WebCore::canScrollInDirection(0, a2) & 1) == 0)
        {
          goto LABEL_96;
        }
        v12 = a2 - 3;
        if ((a2 - 3) <= 3u)
        {
          v13 = qword_1969F6110[v12];
          v14 = dword_1969F6130[2 * v12];
          v15 = *(_QWORD **)(v5 + 288);
          v16 = 1;
          v17 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v15[8] + 832))(v15 + 8, 0, 1);
          v57 = (v17 + v13) & 0xFFFFFFFF00000000 | (v17 + v14);
          v56 = xmmword_1968DF820;
          (*(void (**)(_QWORD *, unint64_t *, __int128 *))(*v15 + 472))(v15, &v57, &v56);
          do
          {
LABEL_97:
            v50 = __ldaxr(v6);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v6));
          if (!v51)
          {
            atomic_store(1u, v6);
            v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v54 = off_1E31FE290;
            v54[1] = v6;
            *(_QWORD *)&v56 = v54;
            WTF::ensureOnMainThread();
            v55 = v56;
            *(_QWORD *)&v56 = 0;
            if (v55)
              (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
          }
          return v16;
        }
LABEL_96:
        v16 = 0;
        goto LABEL_97;
      }
    }
    return 0;
  }
  if ((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) == 0
    || (*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0
    || !WebCore::canScrollInDirection(a1, a2))
  {
    return 0;
  }
  switch(a2)
  {
    case 3:
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        v18 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
      else
        v18 = 0;
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1200))(v18);
      v20 = 0;
      v21 = v19 << 6;
      if (v19 << 6 >= 2560)
        v21 = 2560;
      if (v19 < -33554432)
        v21 = 0x80000000;
      if (v19 > 0x1FFFFFF)
        v21 = 2560;
      if (v21 == 0x80000000)
        v22 = 0x7FFFFFFF;
      else
        v22 = -v21;
      break;
    case 4:
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        v23 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
      else
        v23 = 0;
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 1216))(v23);
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        v25 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
      else
        v25 = 0;
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 1200))(v25);
      if ((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
          v27 = (WebCore::RenderBox *)(*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL);
        else
          v27 = 0;
      }
      else
      {
        v27 = 0;
      }
      v28 = WebCore::RenderBox::clientHeight(v27);
      v20 = 0;
      v29 = v26 << 6;
      if (v26 < -33554432)
        v29 = 0x80000000;
      if (v26 > 0x1FFFFFF)
        v29 = 0x7FFFFFFF;
      v30 = __OFADD__(v29, v28);
      v31 = v29 + v28;
      v32 = (v29 >> 31) + 0x7FFFFFFF;
      if (!v30)
        v32 = v31;
      v33 = v24 << 6;
      if (v24 < -33554432)
        v33 = 0x80000000;
      if (v24 > 0x1FFFFFF)
        v33 = 0x7FFFFFFF;
      v30 = __OFSUB__(v33, v32);
      v22 = v33 - v32;
      v34 = (v33 >> 31) + 0x7FFFFFFF;
      if (v30)
        v22 = v34;
      if (v22 >= 2560)
        v22 = 2560;
      break;
    case 5:
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        v35 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
      else
        v35 = 0;
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 1192))(v35);
      v22 = 0;
      v37 = v36 << 6;
      if (v36 << 6 >= 2560)
        v37 = 2560;
      if (v36 < -33554432)
        v37 = 0x80000000;
      if (v36 > 0x1FFFFFF)
        v37 = 2560;
      if (v37 == 0x80000000)
        v20 = 0x7FFFFFFF;
      else
        v20 = -v37;
      break;
    case 6:
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        v38 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
      else
        v38 = 0;
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 1208))(v38);
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        v40 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
      else
        v40 = 0;
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 1192))(v40);
      if ((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
          v42 = (WebCore::RenderBox *)(*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL);
        else
          v42 = 0;
      }
      else
      {
        v42 = 0;
      }
      v43 = WebCore::RenderBox::clientWidth(v42);
      v22 = 0;
      v44 = v41 << 6;
      if (v41 < -33554432)
        v44 = 0x80000000;
      if (v41 > 0x1FFFFFF)
        v44 = 0x7FFFFFFF;
      v30 = __OFADD__(v44, v43);
      v45 = v44 + v43;
      v46 = (v44 >> 31) + 0x7FFFFFFF;
      if (!v30)
        v46 = v45;
      v47 = v39 << 6;
      if (v39 < -33554432)
        v47 = 0x80000000;
      if (v39 > 0x1FFFFFF)
        v47 = 0x7FFFFFFF;
      v30 = __OFSUB__(v47, v46);
      v20 = v47 - v46;
      v48 = (v47 >> 31) + 0x7FFFFFFF;
      if (v30)
        v20 = v48;
      if (v20 >= 2560)
        v20 = 2560;
      break;
    default:
      return 0;
  }
  v49 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
  if (v49 && (*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
    v49 = 0;
  while ((*(_BYTE *)(v49 + 45) & 0x10) == 0)
    v49 = *(_QWORD *)(*(_QWORD *)(v49 + 32) + 8);
  while ((*(_BYTE *)(v49 + 21) & 0x80) == 0)
  {
    do
      v49 = *(_QWORD *)(*(_QWORD *)(v49 + 32) + 8);
    while ((*(_BYTE *)(v49 + 45) & 0x10) == 0);
  }
  v53 = *(WebCore::ScrollableArea **)(*(_QWORD *)(v49 + 144) + 264);
  if (v53)
  {
    LODWORD(v56) = v20 / 64;
    DWORD1(v56) = v22 / 64;
    WebCore::RenderLayerScrollableArea::scrollByRecursively(v53, (const WebCore::IntSize *)&v56, 0);
  }
  return 1;
}

unint64_t WebCore::rectToAbsoluteCoordinates(WebCore *this, unint64_t a2, const WebCore::LayoutRect *a3)
{
  unsigned int v3;
  unint64_t v4;
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WebCore *v10;
  unsigned int v11;
  WebCore::RenderBoxModelObject *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  WebCore *v19;
  unsigned int v20;
  WebCore::RenderBoxModelObject *v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  WebCore::RenderObject *v29;
  WebCore::RenderElement *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;

  v3 = a2;
  v4 = HIDWORD(a2);
  if (this)
  {
    v5 = this;
    do
    {
      v6 = *((_QWORD *)v5 + 15);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          do
          {
            v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
            *(_DWORD *)(v8 + 24) += 2;
            WebCore::Document::updateLayout(v8, 6u, v7);
            if (*(_DWORD *)(v8 + 24) == 2)
            {
              if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
            }
            else
            {
              *(_DWORD *)(v8 + 24) -= 2;
            }
            v10 = (WebCore *)(*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL);
            if (v10 && (*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) != 0)
            {
              ++*(_DWORD *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
              v12 = (WebCore::RenderBoxModelObject *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v10 + 880))(v10);
              v14 = WebCore::adjustOffsetForZoomAndSubpixelLayout(v10, v12, v13);
              v15 = *((_DWORD *)v10 + 4);
              if (!v15)
              {
                __break(0xC471u);
                JUMPOUT(0x1960647C4);
              }
              *((_DWORD *)v10 + 4) = v15 - 1;
              v16 = v14 << 6;
              if (v14 > 0x1FFFFFF)
                v16 = 0x7FFFFFFF;
              v11 = v14 >= -33554432 ? v16 : 0x80000000;
            }
            else
            {
              v11 = 0;
            }
            v17 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
            *(_DWORD *)(v17 + 24) += 2;
            WebCore::Document::updateLayout(v17, 6u, v7);
            if (*(_DWORD *)(v17 + 24) == 2)
            {
              if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v17, v18);
            }
            else
            {
              *(_DWORD *)(v17 + 24) -= 2;
            }
            v19 = (WebCore *)(*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL);
            if (v19 && (*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) != 0)
            {
              ++*(_DWORD *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
              v21 = (WebCore::RenderBoxModelObject *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v19 + 888))(v19);
              v23 = WebCore::adjustOffsetForZoomAndSubpixelLayout(v19, v21, v22);
              v24 = *((_DWORD *)v19 + 4);
              if (!v24)
                goto LABEL_80;
              *((_DWORD *)v19 + 4) = v24 - 1;
              if (v23 >= -33554432)
              {
                v20 = v23 << 6;
                if (v23 > 0x1FFFFFF)
                  v20 = 0x7FFFFFFF;
              }
              else
              {
                v20 = 0x80000000;
              }
            }
            else
            {
              v20 = 0;
            }
            if (__OFADD__(v3, v11))
              v3 = (v3 >> 31) + 0x7FFFFFFF;
            else
              v3 += v11;
            v25 = __OFADD__((_DWORD)v4, v20);
            v26 = v4 + v20;
            LODWORD(v4) = v25 ? (v4 >> 31) + 0x7FFFFFFF : v26;
            v27 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
            *(_DWORD *)(v27 + 24) += 2;
            WebCore::Document::updateLayout(v27, 6u, v7);
            if (*(_DWORD *)(v27 + 24) == 2)
            {
              if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v27, v28);
            }
            else
            {
              *(_DWORD *)(v27 + 24) -= 2;
            }
            v29 = (WebCore::RenderObject *)(*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL);
            if (!v29)
              break;
            if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
LABEL_80:
              __break(0xC471u);
              JUMPOUT(0x196064744);
            }
            ++*(_DWORD *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
            v30 = WebCore::RenderObject::offsetParent(v29, v28);
            if (!v30)
            {
              v33 = *((_DWORD *)v29 + 4);
              if (!v33)
              {
LABEL_77:
                __break(0xC471u);
                JUMPOUT(0x196064784);
              }
              *((_DWORD *)v29 + 4) = v33 - 1;
              break;
            }
            v31 = *((_DWORD *)v30 + 4);
            *((_DWORD *)v30 + 4) = v31 + 1;
            if ((*((_BYTE *)v30 + 45) & 1) != 0)
            {
              v7 = 0;
              if (v31 == -1)
                goto LABEL_76;
            }
            else
            {
              v7 = *(_QWORD *)(*((_QWORD *)v30 + 3) + 8);
              if (v7 && (*(_WORD *)(v7 + 28) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1960647A4);
              }
              if (v31 == -1)
              {
LABEL_76:
                __break(0xC471u);
                JUMPOUT(0x196064764);
              }
            }
            *((_DWORD *)v30 + 4) = v31;
            v32 = *((_DWORD *)v29 + 4);
            if (!v32)
              goto LABEL_77;
            *((_DWORD *)v29 + 4) = v32 - 1;
          }
          while (v7);
          v34 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v5 + 56))(v5);
          v35 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v34 + 64) + 832))(v34 + 64, 0, 1);
          v36 = -64 * v35;
          if (-(int)v35 < -33554432)
            v36 = 0x80000000;
          if (-(int)v35 <= 0x1FFFFFF)
            v37 = v36;
          else
            v37 = 0x7FFFFFFF;
          if (SHIDWORD(v35) <= 0x2000000)
            v38 = -64 * HIDWORD(v35);
          else
            v38 = 0x80000000;
          if (SHIDWORD(v35) >= -33554431)
            v39 = v38;
          else
            v39 = 0x7FFFFFFF;
          v25 = __OFADD__(v3, v37);
          v40 = v3 + v37;
          if (v25)
            v3 = (v3 >> 31) + 0x7FFFFFFF;
          else
            v3 = v40;
          v25 = __OFADD__((_DWORD)v4, v39);
          v41 = (v4 + v39);
          if (v25)
            v4 = (v4 >> 31) + 0x7FFFFFFF;
          else
            v4 = v41;
        }
      }
      v42 = *((_QWORD *)v5 + 7);
      if (!v42)
        break;
      v5 = *(WebCore **)(v42 + 8);
    }
    while (v5);
  }
  return v3 | (v4 << 32);
}

BOOL WebCore::areElementsOnSameLine(WebCore *this, const WebCore::FocusCandidate *a2, const WebCore::FocusCandidate *a3)
{
  uint64_t v3;
  uint64_t v5;
  WebCore::RenderObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::RenderObject *v26;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *(_QWORD *)(v3 + 8);
    if (v3)
    {
      if (!*(_QWORD *)a2)
        return 0;
      v5 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      if (!v5)
        return 0;
      v7 = (WebCore::RenderObject *)(*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL);
      if (!v7)
        return 0;
      v8 = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v8)
        return 0;
      v9 = *((_DWORD *)this + 11);
      if (v9 < 1)
        return 0;
      v10 = *((_DWORD *)this + 12);
      if (v10 < 1)
        return 0;
      v3 = 0;
      v12 = *((_DWORD *)a2 + 11);
      if (v12 >= 1)
      {
        v13 = *((_DWORD *)a2 + 12);
        if (v13 >= 1)
        {
          v14 = *((_DWORD *)this + 9);
          v15 = *((_DWORD *)a2 + 9);
          v16 = __OFADD__(v15, v12);
          v17 = v15 + v12;
          if (v16)
            v17 = (v15 >> 31) + 0x7FFFFFFF;
          if ((int)v14 < v17)
          {
            v16 = __OFADD__(v14, v9);
            v18 = v14 + v9;
            if (v16)
              v18 = (v14 >> 31) + 0x7FFFFFFF;
            if ((int)v15 < v18)
            {
              v19 = *((_DWORD *)this + 10);
              v20 = *((_DWORD *)a2 + 10);
              v16 = __OFADD__(v20, v13);
              v21 = v20 + v13;
              if (v16)
                v21 = (v20 >> 31) + 0x7FFFFFFF;
              if ((int)v19 < v21)
              {
                v16 = __OFADD__(v19, v10);
                v22 = v19 + v10;
                if (v16)
                  v22 = (v19 >> 31) + 0x7FFFFFFF;
                if ((int)v20 < v22)
                {
                  v23 = *((_QWORD *)this + 1);
                  v24 = v23 ? *(_QWORD *)(v23 + 8) : 0;
                  if ((*(_WORD *)(v24 + 28) & 0x10) == 0
                    || *(_QWORD *)(*(_QWORD *)(v24 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
                  {
                    v25 = *((_QWORD *)a2 + 1);
                    if (v25)
                      v25 = *(_QWORD *)(v25 + 8);
                    if (((*(_WORD *)(v25 + 28) & 0x10) == 0
                       || *(_QWORD *)(*(_QWORD *)(v25 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
                      && (*((_BYTE *)v7 + 45) & 0x20) != 0
                      && (*(_BYTE *)(v8 + 45) & 0x20) != 0)
                    {
                      v26 = WebCore::RenderObject::containingBlock(v7);
                      return v26 == WebCore::RenderObject::containingBlock((WebCore::RenderObject *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 64) & 0xFFFFFFFFFFFFLL));
                    }
                  }
                }
              }
            }
          }
          return 0;
        }
      }
    }
  }
  return v3;
}

uint64_t WebCore::distanceDataForNode(int a1, WebCore *this, WebCore::FocusCandidate *a3)
{
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int8x16_t v10;
  int8x16_t v11;
  int32x2_t v12;
  int32x2_t v13;
  signed int v14;
  _BOOL4 v15;
  signed int v16;
  signed int v17;
  _BOOL4 v18;
  signed int v19;
  int v20;
  _BOOL4 v21;
  int v22;
  _BOOL4 v23;
  int v24;
  signed int v25;
  signed int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  int v46;
  float v47;
  int v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  int v52;
  signed int v53;
  unsigned int v54;
  int v55;
  int8x16_t v56;
  int8x16_t v57;
  int v58;
  int v59;
  unsigned __int32 v60;
  unsigned __int32 v61;
  _BOOL4 v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  BOOL v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  signed int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  BOOL v83;
  signed int v84;
  int v85;
  int v86;
  int v87;
  BOOL v88;
  BOOL v89;
  int8x16_t v90;
  int8x16_t v91;

  result = WebCore::areElementsOnSameLine(this, a3, a3);
  if (!(_DWORD)result)
    goto LABEL_9;
  if (a1 == 4)
  {
    v7 = *((_DWORD *)a3 + 10);
    v8 = *((_DWORD *)this + 10);
  }
  else
  {
    if (a1 != 3)
      goto LABEL_9;
    v7 = *((_DWORD *)this + 10);
    v8 = *((_DWORD *)a3 + 10);
  }
  if (v7 <= v8)
  {
LABEL_9:
    v10 = *(int8x16_t *)((char *)a3 + 36);
    v11 = *(int8x16_t *)((char *)this + 36);
    v12 = vcgt_s32((int32x2_t)0x100000001, vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)));
    if (((v12.i32[1] | v12.i32[0]) & 1) != 0)
      goto LABEL_70;
    v13 = vcgt_s32((int32x2_t)0x100000001, vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)));
    if (((v13.i32[1] | v13.i32[0]) & 1) != 0)
      goto LABEL_70;
    v14 = v10.i32[0] + v10.i32[2];
    v15 = __OFADD__(v10.i32[0], v10.i32[2]);
    v16 = ((unsigned __int32)v10.i32[0] >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(v10.i32[0], v10.i32[2]))
      v16 = v10.i32[0] + v10.i32[2];
    if (v11.i32[0] >= v16)
      goto LABEL_70;
    v17 = v11.i32[0] + v11.i32[2];
    v18 = __OFADD__(v11.i32[0], v11.i32[2]);
    v19 = ((unsigned __int32)v11.i32[0] >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(v11.i32[0], v11.i32[2]))
      v19 = v11.i32[0] + v11.i32[2];
    if (v10.i32[0] >= v19)
      goto LABEL_70;
    v20 = v10.i32[1] + v10.i32[3];
    v21 = __OFADD__(v10.i32[1], v10.i32[3]);
    v22 = __OFADD__(v10.i32[1], v10.i32[3])
        ? ((unsigned __int32)v10.i32[1] >> 31) + 0x7FFFFFFF
        : v10.i32[1] + v10.i32[3];
    if (v11.i32[1] >= v22)
      goto LABEL_70;
    result = (v11.i32[1] + v11.i32[3]);
    v23 = __OFADD__(v11.i32[1], v11.i32[3]);
    v24 = ((unsigned __int32)v11.i32[1] >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(v11.i32[1], v11.i32[3]))
      v24 = v11.i32[1] + v11.i32[3];
    if (v10.i32[1] >= v24)
      goto LABEL_70;
    if (v11.i32[0] <= v10.i32[0])
    {
      v25 = v11.i32[0] + v11.i32[2];
      if (v18)
        v25 = ((unsigned __int32)v11.i32[0] >> 31) + 0x7FFFFFFF;
      v26 = v10.i32[0] + v10.i32[2];
      if (v15)
        v26 = ((unsigned __int32)v10.i32[0] >> 31) + 0x7FFFFFFF;
      if (v25 >= v26 && v11.i32[1] <= v10.i32[1])
      {
        v27 = v11.i32[1] + v11.i32[3];
        if (v23)
          v27 = ((unsigned __int32)v11.i32[1] >> 31) + 0x7FFFFFFF;
        v28 = v10.i32[1] + v10.i32[3];
        if (v21)
          v28 = ((unsigned __int32)v10.i32[1] >> 31) + 0x7FFFFFFF;
        if (v27 >= v28)
          goto LABEL_70;
      }
    }
    if (v10.i32[0] > v11.i32[0])
      goto LABEL_56;
    if (v15)
    {
      v14 = ((unsigned __int32)v10.i32[0] >> 31) + 0x7FFFFFFF;
      if (!v18)
        goto LABEL_51;
    }
    else if (!v18)
    {
LABEL_51:
      if (v14 < v17 || v10.i32[1] > v11.i32[1])
        goto LABEL_56;
      if (v21)
      {
        v20 = ((unsigned __int32)v10.i32[1] >> 31) + 0x7FFFFFFF;
        if (!v23)
          goto LABEL_55;
      }
      else if (!v23)
      {
        goto LABEL_55;
      }
      result = ((unsigned __int32)v11.i32[1] >> 31) + 0x7FFFFFFF;
LABEL_55:
      if (v20 >= (int)result)
      {
LABEL_70:
        switch(a1)
        {
          case 3:
            v31 = v10.i32[1] + v10.i32[3];
            if (__OFADD__(v10.i32[1], v10.i32[3]))
              v31 = ((unsigned __int32)v10.i32[1] >> 31) + 0x7FFFFFFF;
            v32 = v11.u32[1];
            if ((int)v31 <= v11.i32[1])
              goto LABEL_88;
            return result;
          case 4:
            v32 = v11.i32[1] + v11.i32[3];
            if (__OFADD__(v11.i32[1], v11.i32[3]))
              v32 = ((unsigned __int32)v11.i32[1] >> 31) + 0x7FFFFFFF;
            v31 = v10.u32[1];
            if (v10.i32[1] >= (int)v32)
            {
LABEL_88:
              v33 = v10.i32[0];
              if (__OFADD__(v10.i32[0], v10.i32[2]))
              {
                v34 = v11.i32[0];
                if ((signed __int32)(((unsigned __int32)v10.i32[0] >> 31) + 0x7FFFFFFF) < v11.i32[0])
                {
                  v33 = 0x80000000;
                  goto LABEL_114;
                }
              }
              else
              {
                v34 = v11.i32[0];
                if (v10.i32[0] + v10.i32[2] < v11.i32[0])
                {
                  v33 = v10.i32[0] + v10.i32[2];
                  goto LABEL_114;
                }
              }
              v34 = v11.i32[0] + v11.i32[2];
              if (__OFADD__(v11.i32[0], v11.i32[2]))
              {
                if ((signed __int32)(((unsigned __int32)v11.i32[0] >> 31) + 0x7FFFFFFF) < v10.i32[0])
                {
                  v34 = 0x80000000;
                  goto LABEL_114;
                }
              }
              else if ((int)v34 < v10.i32[0])
              {
                goto LABEL_114;
              }
              if (v11.i32[0] <= v10.i32[0])
                v33 = v10.i32[0];
              else
                v33 = v11.i32[0];
              v34 = v33;
              goto LABEL_114;
            }
            return result;
          case 5:
            v33 = v10.i32[0] + v10.i32[2];
            if (__OFADD__(v10.i32[0], v10.i32[2]))
              v33 = ((unsigned __int32)v10.i32[0] >> 31) + 0x7FFFFFFF;
            v34 = v11.i32[0];
            if ((int)v33 <= v11.i32[0])
              goto LABEL_82;
            return result;
          case 6:
            v34 = v11.i32[0] + v11.i32[2];
            if (__OFADD__(v11.i32[0], v11.i32[2]))
              v34 = ((unsigned __int32)v11.i32[0] >> 31) + 0x7FFFFFFF;
            v33 = v10.i32[0];
            if (v10.i32[0] < (int)v34)
              return result;
LABEL_82:
            v31 = v10.u32[1];
            v32 = v11.u32[1];
            if (__OFADD__(v10.i32[1], v10.i32[3]))
            {
              if ((signed __int32)(((unsigned __int32)v10.i32[1] >> 31) + 0x7FFFFFFF) < v11.i32[1])
              {
                v31 = 0x80000000;
                goto LABEL_114;
              }
            }
            else if (v10.i32[1] + v10.i32[3] < v11.i32[1])
            {
              v31 = v10.i32[1] + v10.i32[3];
              goto LABEL_114;
            }
            if (__OFADD__(v11.i32[1], v11.i32[3]))
            {
              if ((signed __int32)(((unsigned __int32)v11.i32[1] >> 31) + 0x7FFFFFFF) < v10.i32[1])
              {
                v32 = 0x80000000;
                goto LABEL_114;
              }
            }
            else if (v11.i32[1] + v11.i32[3] < v10.i32[1])
            {
              v32 = v11.i32[1] + v11.i32[3];
              goto LABEL_114;
            }
            if (v11.i32[1] <= v10.i32[1])
              v31 = v10.u32[1];
            else
              v31 = v11.u32[1];
            v32 = v31;
LABEL_114:
            switch(a1)
            {
              case 3:
                v35 = v32 - v31;
                if (__OFSUB__(v32, v31))
                  v35 = (v32 >> 31) + 0x7FFFFFFF;
                v36 = __OFSUB__(v34, v33);
                v37 = v34 - v33;
                v38 = (v34 >> 31) + 0x7FFFFFFF;
                goto LABEL_131;
              case 4:
                v35 = v31 - v32;
                if (__OFSUB__(v31, v32))
                  v35 = (v31 >> 31) + 0x7FFFFFFF;
                v36 = __OFSUB__(v33, v34);
                v37 = v33 - v34;
                v38 = (v33 >> 31) + 0x7FFFFFFF;
                goto LABEL_131;
              case 5:
                v35 = v34 - v33;
                if (__OFSUB__(v34, v33))
                  v35 = (v34 >> 31) + 0x7FFFFFFF;
                v36 = __OFSUB__(v32, v31);
                v37 = v32 - v31;
                v38 = (v32 >> 31) + 0x7FFFFFFF;
                goto LABEL_131;
              case 6:
                v35 = v33 - v34;
                if (__OFSUB__(v33, v34))
                  v35 = (v33 >> 31) + 0x7FFFFFFF;
                v36 = __OFSUB__(v31, v32);
                v37 = v31 - v32;
                v38 = (v31 >> 31) + 0x7FFFFFFF;
LABEL_131:
                if (!v36)
                  v38 = v37;
                if (v38 < 0)
                  v38 = -v38;
                v36 = __OFSUB__(v33, v34);
                v39 = v33 - v34;
                v40 = (v33 >> 31) + 0x7FFFFFFF;
                if (!v36)
                  v40 = v39;
                v41 = v40 * (uint64_t)v40;
                v42 = v41 >> 6;
                if (v41 >> 38 != (int)(v41 >> 6) >> 31)
                  LODWORD(v42) = 0x7FFFFFFF;
                v36 = __OFSUB__(v31, v32);
                v43 = v31 - v32;
                v44 = (v31 >> 31) + 0x7FFFFFFF;
                if (!v36)
                  v44 = v43;
                v45 = v44 * (uint64_t)v44;
                if (v45 >> 38 == (int)(v45 >> 6) >> 31)
                  v46 = v45 >> 6;
                else
                  v46 = 0x7FFFFFFF;
                v47 = (float)((float)v35 * 0.015625)
                    + sqrtf((float)((float)(int)v42 * 0.015625) + (float)((float)v46 * 0.015625));
                v48 = 2 * v38;
                if ((v38 & 0x40000000) != 0)
                  v48 = 0x7FFFFFFF;
                *((_QWORD *)a3 + 3) = llroundf(v47 + (float)((float)v48 * 0.015625));
                v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 160);
                if (v49)
                  v50 = *(_BYTE *)(v49 + 144) == 0;
                else
                  v50 = 0;
                if (!v50)
                  return result;
                v90 = v11;
                v91 = v10;
                result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v49 + 288) + 64)
                                                                            + 832))(*(_QWORD *)(v49 + 288) + 64, 0, 0);
                v53 = v51 << 6;
                if (v51 < -33554432)
                  v53 = 0x80000000;
                if (v51 > 0x1FFFFFF)
                  v53 = 0x7FFFFFFF;
                if (v52 >= -33554432)
                  v54 = v52 << 6;
                else
                  v54 = 0x80000000;
                if (v52 <= 0x1FFFFFF)
                  v55 = v54;
                else
                  v55 = 0x7FFFFFFF;
                switch(a1)
                {
                  case 3:
                    v57 = v90;
                    v56 = v91;
                    v58 = v91.i32[1];
                    v59 = v91.i32[1] + v91.i32[3];
                    if (__OFADD__(v91.i32[1], v91.i32[3]))
                      v59 = ((unsigned __int32)v91.i32[1] >> 31) + 0x7FFFFFFF;
                    v60 = v90.u32[1];
                    goto LABEL_174;
                  case 4:
                    v57 = v90;
                    v56 = v91;
                    v58 = v90.i32[1];
                    v59 = v90.i32[1] + v90.i32[3];
                    if (__OFADD__(v90.i32[1], v90.i32[3]))
                      v59 = ((unsigned __int32)v90.i32[1] >> 31) + 0x7FFFFFFF;
                    v60 = v91.u32[1];
LABEL_174:
                    v36 = __OFSUB__(v60, v59);
                    v64 = v60 - v59;
                    if (v36)
                      v64 = (v60 >> 31) + 0x7FFFFFFF;
                    if (v64 <= v55)
                      goto LABEL_190;
                    goto LABEL_187;
                  case 5:
                    v57 = v90;
                    v56 = v91;
                    v61 = v91.i32[0];
                    v58 = v91.i32[0] + v91.i32[2];
                    v62 = __OFADD__(v91.i32[0], v91.i32[2]);
                    v63 = v91.i32[0] + v91.i32[2];
                    if (__OFADD__(v91.i32[0], v91.i32[2]))
                      v63 = ((unsigned __int32)v91.i32[0] >> 31) + 0x7FFFFFFF;
                    v60 = v90.i32[0];
                    goto LABEL_184;
                  case 6:
                    v57 = v90;
                    v56 = v91;
                    v61 = v90.i32[0];
                    v58 = v90.i32[0] + v90.i32[2];
                    v62 = __OFADD__(v90.i32[0], v90.i32[2]);
                    v63 = v90.i32[0] + v90.i32[2];
                    if (__OFADD__(v90.i32[0], v90.i32[2]))
                      v63 = ((unsigned __int32)v90.i32[0] >> 31) + 0x7FFFFFFF;
                    v60 = v91.i32[0];
LABEL_184:
                    v36 = __OFSUB__(v60, v63);
                    v65 = v60 - v63;
                    if (v36)
                      v65 = (v60 >> 31) + 0x7FFFFFFF;
                    if (v65 > v53)
                      goto LABEL_187;
                    if (v62)
                      v58 = (v61 >> 31) + 0x7FFFFFFF;
LABEL_190:
                    if ((int)v60 >= v58)
                    {
                      if ((((_BYTE)a1 - 5) & 0xFE) != 0)
                        v75 = v57.i32[0];
                      else
                        v75 = v57.i32[1];
                      if ((((_BYTE)a1 - 5) & 0xFE) != 0)
                        v76 = v56.i32[0];
                      else
                        v76 = v56.i32[1];
                      if (v57.i32[2] >= 0)
                        v77 = v57.i32[2];
                      else
                        v77 = v57.i32[2] + 1;
                      v36 = __OFADD__(v57.i32[0], v77 >> 1);
                      v78 = v57.i32[0] + (v77 >> 1);
                      if (v36)
                        v78 = ((unsigned __int32)v57.i32[0] >> 31) + 0x7FFFFFFF;
                      if (v57.i32[3] >= 0)
                        v79 = v57.i32[3];
                      else
                        v79 = v57.i32[3] + 1;
                      v36 = __OFADD__(v57.i32[1], v79 >> 1);
                      v80 = v57.i32[1] + (v79 >> 1);
                      if (v36)
                        v80 = ((unsigned __int32)v57.i32[1] >> 31) + 0x7FFFFFFF;
                      if ((((_BYTE)a1 - 5) & 0xFE) != 0)
                        v81 = v78;
                      else
                        v81 = v80;
                      if (v56.i32[2] >= 0)
                        v82 = v56.i32[2];
                      else
                        v82 = v56.i32[2] + 1;
                      v83 = __OFADD__(v56.i32[0], v82 >> 1);
                      v66 = v56.i32[0] + (v82 >> 1);
                      v67 = v83;
                      v84 = v66;
                      if (v83)
                        v84 = ((unsigned __int32)v56.i32[0] >> 31) + 0x7FFFFFFF;
                      if (v56.i32[3] >= 0)
                        v85 = v56.i32[3];
                      else
                        v85 = v56.i32[3] + 1;
                      v36 = __OFADD__(v56.i32[1], v85 >> 1);
                      v86 = v56.i32[1] + (v85 >> 1);
                      if (v36)
                        v86 = ((unsigned __int32)v56.i32[1] >> 31) + 0x7FFFFFFF;
                      if ((((_BYTE)a1 - 5) & 0xFE) == 0)
                        v84 = v86;
                      if ((a1 - 5) > 1u)
                      {
                        result = (v57.i32[0] + v57.i32[2]);
                        if (__OFADD__(v57.i32[0], v57.i32[2]))
                          result = ((unsigned __int32)v57.i32[0] >> 31) + 0x7FFFFFFF;
                        v87 = v56.i32[0] + v56.i32[2];
                        if (__OFADD__(v56.i32[0], v56.i32[2]))
                          v87 = ((unsigned __int32)v56.i32[0] >> 31) + 0x7FFFFFFF;
                      }
                      else
                      {
                        result = (v57.i32[1] + v57.i32[3]);
                        if (__OFADD__(v57.i32[1], v57.i32[3]))
                          result = ((unsigned __int32)v57.i32[1] >> 31) + 0x7FFFFFFF;
                        v87 = v56.i32[1] + v56.i32[3];
                        if (__OFADD__(v56.i32[1], v56.i32[3]))
                          v87 = ((unsigned __int32)v56.i32[1] >> 31) + 0x7FFFFFFF;
                      }
                      if (v84 >= v75 && v84 <= (int)result)
                        goto LABEL_8;
                      v89 = v81 > v87 || v81 < v76;
                      v9 = 2;
                      if (!v89 || v76 == v75 || v87 == (_DWORD)result)
                        goto LABEL_269;
                    }
                    else
                    {
                      v66 = v56.i32[0] + v56.i32[2] / 2;
                      v67 = __OFADD__(v56.i32[0], v56.i32[2] / 2);
                    }
                    if ((((_BYTE)a1 - 5) & 0xFE) != 0)
                      v68 = v57.i32[0];
                    else
                      v68 = v57.i32[1];
                    if ((((_BYTE)a1 - 5) & 0xFE) != 0)
                      v69 = v56.i32[0];
                    else
                      v69 = v56.i32[1];
                    if (v67)
                      v66 = ((unsigned __int32)v56.i32[0] >> 31) + 0x7FFFFFFF;
                    if (v56.i32[3] >= 0)
                      v70 = v56.i32[3];
                    else
                      v70 = v56.i32[3] + 1;
                    v36 = __OFADD__(v56.i32[1], v70 >> 1);
                    v71 = v56.i32[1] + (v70 >> 1);
                    if (v36)
                      v71 = ((unsigned __int32)v56.i32[1] >> 31) + 0x7FFFFFFF;
                    result = (a1 - 5);
                    if ((((_BYTE)a1 - 5) & 0xFE) != 0)
                      v72 = v66;
                    else
                      v72 = v71;
                    if (result > 1)
                    {
                      v73 = v57.i32[0] + v57.i32[2];
                      if (__OFADD__(v57.i32[0], v57.i32[2]))
                        v73 = ((unsigned __int32)v57.i32[0] >> 31) + 0x7FFFFFFF;
                      v74 = v56.i32[0] + v56.i32[2];
                      if (__OFADD__(v56.i32[0], v56.i32[2]))
                        v74 = ((unsigned __int32)v56.i32[0] >> 31) + 0x7FFFFFFF;
                    }
                    else
                    {
                      v73 = v57.i32[1] + v57.i32[3];
                      if (__OFADD__(v57.i32[1], v57.i32[3]))
                        v73 = ((unsigned __int32)v57.i32[1] >> 31) + 0x7FFFFFFF;
                      v74 = v56.i32[1] + v56.i32[3];
                      if (__OFADD__(v56.i32[1], v56.i32[3]))
                        v74 = ((unsigned __int32)v56.i32[1] >> 31) + 0x7FFFFFFF;
                    }
                    if ((v69 < v68 || v69 > v73)
                      && (v72 < v68 || v72 > v73)
                      && (v74 <= v73 ? (v88 = v74 < v68) : (v88 = 1), v88))
                    {
LABEL_187:
                      v9 = 0;
                    }
                    else
                    {
                      v9 = 1;
                    }
                    break;
                  default:
                    goto LABEL_187;
                }
                break;
              default:
                return result;
            }
            goto LABEL_269;
          default:
            return result;
        }
      }
LABEL_56:
      if (v11.i32[2] >= 0x101u && v11.i32[3] >= 0x101u)
      {
        v29 = v11.i32[0] + 128;
        if (__OFADD__(v11.i32[0], 128))
          v29 = 0x7FFFFFFF;
        v11.i32[0] = v29;
        v11.i32[1] += 128;
        v11.i32[2] -= 256;
        v11.i32[3] -= 256;
        if (__OFADD__(HIDWORD(*(_QWORD *)((char *)this + 36)), 128))
          v11.i32[1] = 0x7FFFFFFF;
      }
      if (v10.i32[2] >= 0x101u && v10.i32[3] >= 0x101u)
      {
        v30 = v10.i32[0] + 128;
        if (__OFADD__(v10.i32[0], 128))
          v30 = 0x7FFFFFFF;
        v10.i32[0] = v30;
        v10.i32[1] += 128;
        v10.i32[2] -= 256;
        v10.i32[3] -= 256;
        if (__OFADD__(HIDWORD(*(_QWORD *)((char *)a3 + 36)), 128))
          v10.i32[1] = 0x7FFFFFFF;
      }
      goto LABEL_70;
    }
    v17 = ((unsigned __int32)v11.i32[0] >> 31) + 0x7FFFFFFF;
    goto LABEL_51;
  }
  *((_QWORD *)a3 + 3) = 0;
LABEL_8:
  v9 = 2;
LABEL_269:
  *((_DWORD *)a3 + 8) = v9;
  return result;
}

uint64_t WebCore::canBeScrolledIntoView(int a1, uint64_t a2)
{
  WebCore *v2;
  int v4;
  signed int v5;
  unsigned int v6;
  int v7;
  int v8;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  int v13;
  _BOOL4 v14;
  unint64_t v15;
  int v16;
  int v17;
  signed int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  WebCore *v23;
  int v24;
  _BOOL4 v25;
  int v26;
  _BOOL4 v27;
  unint64_t v29;
  int v30;
  int v31;
  signed int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  WebCore *v37;
  WebCore *v38;
  uint64_t result;
  uint64_t v40;
  WebCore *v41;

  v2 = *(WebCore **)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 32);
  if (!v2)
    return 1;
  v4 = a1;
  v5 = *(_DWORD *)(a2 + 36);
  v6 = *(_DWORD *)(a2 + 40);
  v8 = *(_DWORD *)(a2 + 44);
  v7 = *(_DWORD *)(a2 + 48);
  if ((a1 - 5) <= 1u)
  {
    v10 = v8 < 1 || v7 < 1;
    v11 = v5 + v8;
    v12 = __OFADD__(v5, v8);
    v13 = v6 + v7;
    v14 = __OFADD__(v6, v7);
    while (1)
    {
      if ((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v15 = WebCore::nodeRectInAbsoluteCoordinates(v2, 0);
        if (v10 || v16 < 1 || v17 < 1)
          goto LABEL_35;
        v18 = v15 + v16;
        if (__OFADD__((_DWORD)v15, v16))
          v18 = (v15 >> 31) + 0x7FFFFFFF;
        if (v5 >= v18)
          goto LABEL_35;
        v19 = v11;
        if (v12)
          v19 = (v5 >> 31) + 0x7FFFFFFF;
        if (v19 <= (int)v15)
          goto LABEL_35;
        v20 = HIDWORD(v15) + v17;
        if (__OFADD__(HIDWORD(v15), v17))
          v20 = (HIDWORD(v15) >> 31) + 0x7FFFFFFF;
        if ((int)v6 >= v20)
          goto LABEL_35;
        v21 = v13;
        if (v14)
          v21 = (v6 >> 31) + 0x7FFFFFFF;
        if (v21 <= SHIDWORD(v15))
        {
LABEL_35:
          v22 = *((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL;
          if ((*(_BYTE *)(v22 + 0x2D) & 2) != 0)
            v22 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
          if ((*(_QWORD *)(v22 + 96) & 0x1C00) == 0x400)
            return 0;
        }
        v23 = *(WebCore **)(a2 + 16);
        if (v23)
          v23 = (WebCore *)*((_QWORD *)v23 + 1);
        if (v23 == v2)
          break;
      }
      v2 = (WebCore *)*((_QWORD *)v2 + 4);
      if (!v2)
        return 1;
    }
    v4 = a1;
    return WebCore::canScrollInDirection((uint64_t)v2, v4);
  }
  if ((a1 - 3) >= 2u)
  {
    while (1)
    {
      if ((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        WebCore::nodeRectInAbsoluteCoordinates(v2, 0);
        v38 = *(WebCore **)(a2 + 16);
        if (v38)
          v38 = (WebCore *)*((_QWORD *)v38 + 1);
        if (v38 == v2)
          break;
      }
      v2 = (WebCore *)*((_QWORD *)v2 + 4);
      if (!v2)
        return 1;
    }
    return WebCore::canScrollInDirection((uint64_t)v2, v4);
  }
  v24 = v5 + v8;
  v25 = __OFADD__(v5, v8);
  v26 = v6 + v7;
  v27 = __OFADD__(v6, v7);
  if (v7 >= 1 && v8 >= 1)
  {
    while (1)
    {
      if ((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v29 = WebCore::nodeRectInAbsoluteCoordinates(v2, 0);
        if (v30 < 1 || v31 < 1)
          goto LABEL_71;
        v32 = v29 + v30;
        if (__OFADD__((_DWORD)v29, v30))
          v32 = (v29 >> 31) + 0x7FFFFFFF;
        if (v5 >= v32)
          goto LABEL_71;
        v33 = v24;
        if (v25)
          v33 = (v5 >> 31) + 0x7FFFFFFF;
        if (v33 <= (int)v29)
          goto LABEL_71;
        v34 = HIDWORD(v29) + v31;
        if (__OFADD__(HIDWORD(v29), v31))
          v34 = (HIDWORD(v29) >> 31) + 0x7FFFFFFF;
        if ((int)v6 >= v34)
          goto LABEL_71;
        v35 = v26;
        if (v27)
          v35 = (v6 >> 31) + 0x7FFFFFFF;
        if (v35 <= SHIDWORD(v29))
        {
LABEL_71:
          v36 = *((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL;
          if ((*(_BYTE *)(v36 + 0x2D) & 2) != 0)
            v36 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
          if ((*(_QWORD *)(v36 + 96) & 0xE000) == 0x2000)
            return 0;
        }
        v37 = *(WebCore **)(a2 + 16);
        if (v37)
          v37 = (WebCore *)*((_QWORD *)v37 + 1);
        if (v37 == v2)
          return WebCore::canScrollInDirection((uint64_t)v2, v4);
      }
      v2 = (WebCore *)*((_QWORD *)v2 + 4);
      if (!v2)
        return 1;
    }
  }
  while (1)
  {
    if ((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_92;
    WebCore::nodeRectInAbsoluteCoordinates(v2, 0);
    v40 = *((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL;
    if ((*(_BYTE *)(v40 + 0x2D) & 2) != 0)
      v40 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    if ((*(_QWORD *)(v40 + 96) & 0xE000) == 0x2000)
      return 0;
    v41 = *(WebCore **)(a2 + 16);
    if (v41)
      v41 = (WebCore *)*((_QWORD *)v41 + 1);
    if (v41 == v2)
      return WebCore::canScrollInDirection((uint64_t)v2, v4);
LABEL_92:
    v2 = (WebCore *)*((_QWORD *)v2 + 4);
    result = 1;
    if (!v2)
      return result;
  }
}

uint64_t WebCore::TextIndicator::TextIndicator(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int v17;

  v3 = result;
  *(_DWORD *)result = 1;
  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)(result + 40) = a2[2];
  *(_OWORD *)(result + 24) = v5;
  *(_OWORD *)(result + 8) = v4;
  v6 = *((unsigned int *)a2 + 15);
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 68) = v6;
  if ((_DWORD)v6)
  {
    if (v6 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v6));
    *(_DWORD *)(v3 + 64) = v6;
    *(_QWORD *)(v3 + 56) = v11;
    v12 = *((unsigned int *)a2 + 15);
    if ((_DWORD)v12)
    {
      v13 = (__int128 *)*((_QWORD *)a2 + 6);
      v14 = 16 * v12;
      do
      {
        v15 = *v13++;
        *v11++ = v15;
        v14 -= 16;
      }
      while (v14);
    }
  }
  *(_DWORD *)(v3 + 72) = *((_DWORD *)a2 + 16);
  v7 = *((_QWORD *)a2 + 9);
  if (v7)
    ++*(_DWORD *)(v7 + 8);
  *(_QWORD *)(v3 + 80) = v7;
  v8 = *((_QWORD *)a2 + 10);
  if (v8)
    ++*(_DWORD *)(v8 + 8);
  *(_QWORD *)(v3 + 88) = v8;
  v9 = *((_QWORD *)a2 + 11);
  if (v9)
    ++*(_DWORD *)(v9 + 8);
  v10 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(v3 + 96) = v9;
  *(_QWORD *)(v3 + 104) = v10;
  if ((v10 & 0x8000000000000) != 0)
  {
    v16 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  *(_DWORD *)(v3 + 112) = *((_DWORD *)a2 + 26);
  return v3;
}

void WebCore::TextIndicator::~TextIndicator(WebCore::TextIndicator *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *((_QWORD *)this + 13);
  if ((v3 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, a2);
  }
}

uint64_t WebCore::TextIndicator::create@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x78);
  result = WebCore::TextIndicator::TextIndicator(v4, a1);
  *a2 = result;
  return result;
}

unsigned int *WebCore::TextIndicator::createWithRange@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  __int16 v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  __int16 v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  _BOOL4 v35;
  void *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  WTF *v48;
  unsigned int v49;
  unsigned int v50;
  WebCore::Node *v51;
  unsigned int *result;
  _OWORD *v53;
  WTF *v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v61;
  WebCore::Node *v62;
  unint64_t v63;
  WebCore::Node *v64;
  WebCore::Node *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  WTF *v74[2];
  int v75;
  __int128 v76;
  __int128 v77;
  int v78;
  _BYTE v79[104];
  char v80;
  WebCore::Node *v81;
  int v82;
  WebCore::Node *v83;
  int v84;
  char v85;
  WebCore::Node *v86;
  int v87;
  WebCore::Node *v88;
  int v89;

  v7 = (__int16)a2;
  v11 = *(_QWORD *)a1;
  *(_DWORD *)(v11 + 24) = *(_DWORD *)(*(_QWORD *)a1 + 24) + 2;
  v86 = (WebCore::Node *)v11;
  v87 = *(_DWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v12 + 24) += 2;
  v88 = (WebCore::Node *)v12;
  v89 = *(_DWORD *)(a1 + 24);
  if (((unsigned __int16)a2 & 0x1000) == 0)
    goto LABEL_2;
  v14 = v11;
  if (v11 != v12)
  {
    v57 = WebCore::depth<(WebCore::TreeType)2>(v11);
    v58 = WebCore::depth<(WebCore::TreeType)2>(v12);
    v59 = v58 - v57;
    v60 = v57 >= v58;
    v61 = v57 - v58;
    if (v57 >= v58)
      v14 = v11;
    else
      v14 = v12;
    if (v57 >= v58)
      v62 = (WebCore::Node *)v12;
    else
      v62 = (WebCore::Node *)v11;
    if (v60)
      v63 = v61;
    else
      v63 = v59;
    for (; v63; --v63)
      v14 = WebCore::Node::parentInComposedTree((WebCore::Node *)v14);
    if ((WebCore::Node *)v14 == v62)
    {
      v14 = (uint64_t)v62;
    }
    else
    {
      do
      {
        v14 = WebCore::Node::parentInComposedTree((WebCore::Node *)v14);
        v62 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v62);
      }
      while ((WebCore::Node *)v14 != v62);
    }
    if (!v14)
    {
LABEL_2:
      v13 = v11;
      goto LABEL_44;
    }
  }
  v15 = *(_DWORD *)(v14 + 24) + 2;
  *(_DWORD *)(v14 + 24) = v15;
  v16 = *(_QWORD *)(v14 + 32);
  if (!v16 || (*(_WORD *)(v16 + 28) & 8) == 0)
  {
    v13 = v14;
    goto LABEL_27;
  }
  do
  {
    if ((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_15;
    if ((*(_BYTE *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      goto LABEL_156;
    }
    v17 = *(_QWORD *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x68);
    if ((*(_BYTE *)(v17 + 239) & 1) != 0)
      goto LABEL_15;
    v18 = *(_DWORD *)(v17 + 228);
    v19 = (v18 >> 15) & 3;
    if ((v18 & 0x30) != 0)
    {
      v20 = v19 <= 1 ? 1 : (v18 >> 15) & 3;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 148) & 0xC00000) != 0x800000)
        v19 = v20;
    }
    if (v19 == 2)
    {
      *(_DWORD *)(v16 + 24) += 2;
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        v13 = v16;
        if ((*(_WORD *)(v14 + 30) & 0x400) != 0)
          goto LABEL_16;
        WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
      v13 = v16;
    }
    else
    {
LABEL_15:
      v13 = v14;
    }
LABEL_16:
    v16 = *(_QWORD *)(v16 + 32);
    if (!v16)
      break;
    v14 = v13;
  }
  while ((*(_WORD *)(v16 + 28) & 8) != 0);
  v15 = *(_DWORD *)(v13 + 24);
LABEL_27:
  *(_DWORD *)(v13 + 24) = v15 + 4;
  v21 = *(_WORD *)(v13 + 28);
  if ((v21 & 1) != 0)
  {
    v24 = *(_QWORD *)(v13 + 80);
    if (!v24)
      goto LABEL_30;
    v23 = *(_DWORD *)(v24 + 4);
  }
  else if ((v21 & 4) != 0 && (v22 = *(_QWORD *)(v13 + 80)) != 0)
  {
    v23 = 0;
    do
    {
      ++v23;
      v22 = *(_QWORD *)(v22 + 56);
    }
    while (v22);
  }
  else
  {
LABEL_30:
    v23 = 0;
  }
  v86 = (WebCore::Node *)v13;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  v87 = 0;
  v88 = (WebCore::Node *)v13;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  v89 = v23;
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
LABEL_44:
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 8) + 528);
  if (!v25 || (v26 = *(unsigned int **)(v25 + 8)) == 0)
  {
    *a4 = 0;
    goto LABEL_95;
  }
  v27 = v7;
  v28 = v26 + 2;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 + 1, v28));
  v30 = *((_QWORD *)v26 + 37);
  if (!v30)
  {
    *a4 = 0;
    goto LABEL_93;
  }
  *(_DWORD *)(v30 + 24) += 2;
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(v30 + 3064) + 56), &v81);
  if (v85)
  {
    v32 = v81;
    if (v86 == v81 && v87 == v82)
    {
      v33 = v83;
      v35 = v88 == v83 && v89 == v84;
    }
    else
    {
      v35 = 0;
      v33 = v83;
    }
    v83 = 0;
    if (v33)
    {
      if (*((_DWORD *)v33 + 6) == 2)
      {
        if ((*((_WORD *)v33 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v33, v31);
          v32 = v81;
        }
      }
      else
      {
        *((_DWORD *)v33 + 6) -= 2;
      }
    }
    v81 = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v32, v31);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
  }
  else
  {
    v35 = 0;
  }
  WebCore::VisibleSelection::VisibleSelection((uint64_t)v79, (uint64_t)&v86, 1, 0);
  v80 = 1;
  WebCore::TemporarySelectionChange::TemporarySelectionChange((uint64_t)&v81, v30, (uint64_t)v79, 14);
  if (v80)
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v79);
  v73 = 0u;
  *(_OWORD *)v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v75 = 1065353216;
  v76 = 0u;
  v77 = 0u;
  LOBYTE(v78) = a3;
  HIWORD(v78) = v27;
  if (!WebCore::initializeIndicator((uint64_t)&v71, (WebCore::SimpleRange *)v26, (WebCore *)&v86, v35, a5, a6))
  {
    v37 = 0;
    goto LABEL_79;
  }
  v37 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)v37 = 1;
  v39 = v72;
  v38 = v73;
  *(_OWORD *)(v37 + 8) = v71;
  *(_OWORD *)(v37 + 24) = v39;
  *(_OWORD *)(v37 + 40) = v38;
  v40 = HIDWORD(v74[1]);
  *(_QWORD *)(v37 + 56) = 0;
  *(_QWORD *)(v37 + 64) = 0;
  *(_DWORD *)(v37 + 68) = v40;
  if (!(_DWORD)v40)
    goto LABEL_70;
  if (v40 >> 28)
  {
    __break(0xC471u);
LABEL_156:
    JUMPOUT(0x196065EE4);
  }
  v53 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v40));
  *(_DWORD *)(v37 + 64) = v40;
  *(_QWORD *)(v37 + 56) = v53;
  if (HIDWORD(v74[1]))
  {
    v54 = v74[0];
    v55 = 16 * HIDWORD(v74[1]);
    do
    {
      v56 = *(_OWORD *)v54;
      v54 = (WTF *)((char *)v54 + 16);
      *v53++ = v56;
      v55 -= 16;
    }
    while (v55);
  }
LABEL_70:
  *(_DWORD *)(v37 + 72) = v75;
  v41 = v76;
  if ((_QWORD)v76)
    ++*(_DWORD *)(v76 + 8);
  *(_QWORD *)(v37 + 80) = v41;
  v42 = *((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
    ++*(_DWORD *)(*((_QWORD *)&v76 + 1) + 8);
  *(_QWORD *)(v37 + 88) = v42;
  v43 = v77;
  if ((_QWORD)v77)
    ++*(_DWORD *)(v77 + 8);
  *(_QWORD *)(v37 + 96) = v43;
  v44 = *((_QWORD *)&v77 + 1);
  *(_QWORD *)(v37 + 104) = *((_QWORD *)&v77 + 1);
  if ((v44 & 0x8000000000000) != 0)
  {
    v66 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 + 1, v66));
  }
  *(_DWORD *)(v37 + 112) = v78;
LABEL_79:
  *a4 = v37;
  if ((*((_QWORD *)&v77 + 1) & 0x8000000000000) != 0)
  {
    v68 = (unsigned int *)(*((_QWORD *)&v77 + 1) & 0xFFFFFFFFFFFFLL);
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, v68);
      WTF::fastFree((WTF *)v68, v36);
    }
  }
  v45 = (_DWORD *)v77;
  *(_QWORD *)&v77 = 0;
  if (v45)
  {
    if (v45[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
    else
      --v45[2];
  }
  v46 = (_DWORD *)*((_QWORD *)&v76 + 1);
  *((_QWORD *)&v76 + 1) = 0;
  if (v46)
  {
    if (v46[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
    else
      --v46[2];
  }
  v47 = (_DWORD *)v76;
  *(_QWORD *)&v76 = 0;
  if (v47)
  {
    if (v47[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
    else
      --v47[2];
  }
  v48 = v74[0];
  if (v74[0])
  {
    v74[0] = 0;
    LODWORD(v74[1]) = 0;
    WTF::fastFree(v48, v36);
  }
  WebCore::TemporarySelectionChange::~TemporarySelectionChange((WebCore::TemporarySelectionChange *)&v81, v36);
  if (*(_DWORD *)(v30 + 24) == 2)
  {
    if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v30, a2);
  }
  else
  {
    *(_DWORD *)(v30 + 24) -= 2;
  }
  do
  {
LABEL_93:
    v49 = __ldaxr(v28);
    v50 = v49 - 1;
  }
  while (__stlxr(v50, v28));
  if (!v50)
  {
    atomic_store(1u, v28);
    v64 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v64 = off_1E31FE290;
    *((_QWORD *)v64 + 1) = v28;
    v81 = v64;
    WTF::ensureOnMainThread();
    v65 = v81;
    v81 = 0;
    if (v65)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v65 + 8))(v65);
  }
LABEL_95:
  v51 = v88;
  v88 = 0;
  if (v51)
  {
    if (*((_DWORD *)v51 + 6) == 2)
    {
      if ((*((_WORD *)v51 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v51, a2);
    }
    else
    {
      *((_DWORD *)v51 + 6) -= 2;
    }
  }
  result = (unsigned int *)v86;
  v86 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

BOOL WebCore::initializeIndicator(uint64_t a1, WebCore::SimpleRange *a2, WebCore *this, int a4, float a5, float a6)
{
  uint64_t v12;
  void *v13;
  __int16 v14;
  BOOL v15;
  void *v16;
  unint64_t v17;
  unint64_t *v18;
  void *v19;
  uint64_t v20;
  const WebCore::Color *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  void *v39;
  const WebCore::Color *v40;
  __int16 v41;
  double v42;
  uint64_t v43;
  WebCore *v44;
  WebCore *v45;
  uint64_t v46;
  WebCore *v48;
  double v49;
  WebCore *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  _BOOL4 v59;
  float v60;
  float v61;
  void *v62;
  unsigned int v63;
  uint64_t v64;
  WTF *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  float v70;
  float v71;
  float v72;
  float *v73;
  _DWORD *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t j;
  int v87;
  unsigned int v88;
  _DWORD *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float *v97;
  unint64_t v98;
  WebCore::Node *v99;
  uint64_t v100;
  WebCore::Node *v101;
  WebCore::RenderObject *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  WTF *v110;
  WTF *v111;
  void *v112;
  uint64_t v113;
  WTF *v114;
  __int128 v115;
  float *v116;
  WTF *v117;
  WTF *v118;
  void *v119;
  float32x2_t *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  WTF *v124;
  __int128 v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  int v139;
  int v140;
  float v141;
  float v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  __int16 v146;
  unint64_t v147;
  int v148;
  int v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  int v153;
  unsigned int v154;
  WTF *v155;
  uint64_t v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v169;
  float v170;
  uint64_t v171;
  WTF *v172;
  __int128 v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  WebCore::ScrollView *v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  uint64_t v195;
  unint64_t v196;
  float v197;
  uint64_t v198;
  float v199;
  unint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  WTF *v205;
  __int128 v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  __int128 *v213;
  __int128 *v214;
  float v215;
  float v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  WTF *v221;
  uint64_t v222;
  float v223;
  uint64_t v224;
  uint64_t v225;
  WebCore::ScrollView *v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  uint64_t v240;
  unint64_t v241;
  float v242;
  float v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  void *v247;
  WTF *v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  uint64_t v257;
  unint64_t v258;
  float v259;
  float v260;
  uint64_t v261;
  unint64_t v262;
  __int16 v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  __int16 v267;
  __int16 v268;
  void *v269;
  _DWORD *v270;
  CFTypeRef v271;
  uint64_t v272;
  __int16 v273;
  unint64_t v274;
  _DWORD *v275;
  CFTypeRef v276;
  const void *v277;
  const void *v278;
  uint64_t v279;
  unint64_t v280;
  void *v281;
  _DWORD *v282;
  WTF *v283;
  const void *v284;
  uint64_t v285;
  WTF *v286;
  WTF *v287;
  WTF *v288;
  __int128 *v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  BOOL v294;
  unint64_t v295;
  unint64_t v296;
  unsigned int *v297;
  unsigned int v298;
  unsigned int v299;
  _BOOL4 v300;
  unsigned int *v301;
  unsigned int v302;
  unsigned int v303;
  double v304;
  unsigned int *v305;
  unsigned int v306;
  unsigned int v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  __int128 v315;
  float v316;
  WTF *v317;
  uint64_t v318;
  WTF *v319;
  uint64_t v320;
  WTF *v321;
  unint64_t v322;
  CFTypeRef cf[2];
  uint64_t v324;
  int v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  int v329;
  __int128 v330;
  unint64_t *v331;

  v12 = *((_QWORD *)a2 + 37);
  if (v12)
  {
    *(_DWORD *)(v12 + 24) += 2;
    WebCore::Document::updateLayout(v12, 2u, 0);
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v13);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  v14 = *(_WORD *)(a1 + 106);
  if ((v14 & 0x800) == 0)
  {
    v15 = 0;
    goto LABEL_111;
  }
  WebCore::estimatedBackgroundColorForRange(this, a2, &v327);
  v18 = (unint64_t *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  if ((v17 & 0x8000000000000) != 0)
  {
    if ((v327 & 0x8000000000000) == 0)
      goto LABEL_9;
    *(_OWORD *)cf = *(_OWORD *)((v17 & 0xFFFFFFFFFFFFLL) + 4);
    v330 = *(_OWORD *)((v327 & 0xFFFFFFFFFFFFLL) + 4);
    v300 = WebCore::operator==<float,4ul>((float *)cf, (float *)&v330);
    v17 = *v18;
    if (!v300 || HIBYTE(v17) != HIBYTE(v327) || BYTE6(v17) != BYTE6(v327))
      goto LABEL_9;
    v17 = v327;
  }
  else if (v17 != v327 || (v327 & 0x8000000000000) != 0)
  {
LABEL_9:
    if ((v17 & 0x8000000000000) != 0)
    {
      v297 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
      do
      {
        v298 = __ldaxr(v297);
        v299 = v298 - 1;
      }
      while (__stlxr(v299, v297));
      if (!v299)
      {
        atomic_store(1u, v297);
        WTF::fastFree((WTF *)v297, v16);
      }
    }
    *v18 = v327;
    goto LABEL_11;
  }
  if ((v17 & 0x8000000000000) != 0)
  {
    v301 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
    {
      v302 = __ldaxr(v301);
      v303 = v302 - 1;
    }
    while (__stlxr(v303, v301));
    if (!v303)
    {
      atomic_store(1u, v301);
      WTF::fastFree((WTF *)v301, v16);
    }
  }
LABEL_11:
  *(_QWORD *)&v330 = 0;
  WebCore::TextIterator::TextIterator((uint64_t)cf, this, 0);
  if (v326)
  {
    while (1)
    {
      v20 = WebCore::TextIterator::node((int32x2_t *)cf);
      if (!v20
        || (*(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL) == 0
        || (*(_BYTE *)((*(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        goto LABEL_14;
      }
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8) + 112);
      v23 = v330;
      if ((_QWORD)v330
        || (WTF::HashTable<WebCore::Color,WebCore::Color,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::Color>,WTF::HashTraits<WebCore::Color>,WTF::HashTraits<WebCore::Color>>::rehash((uint64_t *)&v330, 8u), (v23 = v330) != 0))
      {
        v24 = *(_DWORD *)(v23 - 8);
      }
      else
      {
        v24 = 0;
      }
      v25 = WTF::ColorHash::hash(*(_QWORD *)(v22 + 328), v21) & v24;
      v26 = (unint64_t *)(v23 + 8 * v25);
      v27 = *v26;
      v28 = *(_QWORD *)(v22 + 328);
      if (*v26 != 0x10000000000000)
      {
        v29 = 0;
        if ((v28 & 0x8000000000000) != 0)
        {
          v36 = 1;
          while ((v27 & 0x8000000000000) == 0
               || *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 4)
               || *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 8)
               || *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 0xC)
               || *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v28 & 0xFFFFFFFFFFFFLL) + 0x10)
               || HIBYTE(v27) != HIBYTE(v28)
               || BYTE6(v27) != BYTE6(v28))
          {
            if ((v27 & 0x20000000000000) != 0)
              v29 = v26;
            v25 = (v25 + v36) & v24;
            v26 = (unint64_t *)(v23 + 8 * v25);
            v27 = *v26;
            ++v36;
            if (*v26 == 0x10000000000000)
            {
LABEL_28:
              if (v29)
              {
                *v29 = 0x10000000000000;
                --*(_DWORD *)(v330 - 16);
                v28 = *(_QWORD *)(v22 + 328);
                v26 = v29;
              }
              goto LABEL_30;
            }
          }
        }
        else
        {
          v30 = 1;
          while (v27 != v28 || (v27 & 0x8000000000000) != 0)
          {
            if ((v27 & 0x20000000000000) != 0)
              v29 = v26;
            v25 = (v25 + v30) & v24;
            v26 = (unint64_t *)(v23 + 8 * v25);
            v27 = *v26;
            ++v30;
            if (*v26 == 0x10000000000000)
              goto LABEL_28;
          }
        }
        goto LABEL_14;
      }
LABEL_30:
      if (v28 != 0x10000000000000)
      {
        *v26 = v28;
        if ((v28 & 0x8000000000000) != 0)
        {
          v37 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 + 1, v37));
        }
      }
      v31 = v330;
      v32 = (_QWORD)v330 ? *(_DWORD *)(v330 - 12) + 1 : 1;
      *(_DWORD *)(v330 - 12) = v32;
      v33 = (*(_DWORD *)(v31 - 16) + v32);
      v34 = *(unsigned int *)(v31 - 4);
      if (v34 > 0x400)
        break;
      if (3 * v34 <= 4 * v33)
      {
        if ((_DWORD)v34)
          goto LABEL_38;
        v35 = 8;
        goto LABEL_56;
      }
LABEL_14:
      WebCore::TextIterator::advance((WebCore::TextIterator *)cf, v21);
      if (!v326)
        goto LABEL_62;
    }
    if (v34 > 2 * v33)
      goto LABEL_14;
LABEL_38:
    v35 = (_DWORD)v34 << (6 * v32 >= (2 * v34));
LABEL_56:
    WTF::HashTable<WebCore::Color,WebCore::Color,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::Color>,WTF::HashTraits<WebCore::Color>,WTF::HashTraits<WebCore::Color>>::rehash((uint64_t *)&v330, v35);
    goto LABEL_14;
  }
LABEL_62:
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)cf, v19);
  v41 = *(_WORD *)(a1 + 106);
  if ((v41 & 0x824) != 0x820)
  {
    v15 = 0;
    goto LABEL_99;
  }
  if ((v41 & 1) == 0)
  {
    cf[0] = (CFTypeRef)0x11040000000000FFLL;
    WebCore::contrastRatio((WebCore *)cf, (const WebCore::Color *)(a1 + 96), v40);
    if (((unint64_t)cf[0] & 0x8000000000000) != 0)
    {
      v304 = v42;
      v305 = (unsigned int *)((unint64_t)cf[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v306 = __ldaxr(v305);
        v307 = v306 - 1;
      }
      while (__stlxr(v307, v305));
      if (!v307)
      {
        atomic_store(1u, v305);
        WTF::fastFree((WTF *)v305, v39);
        v42 = v304;
      }
    }
    if (v42 < 4.5)
    {
LABEL_66:
      v15 = 1;
      goto LABEL_99;
    }
    goto LABEL_97;
  }
  if (!(_QWORD)v330)
  {
    v45 = 0;
    v43 = 0;
LABEL_82:
    v44 = (WebCore *)(v330 + 8 * v43);
    goto LABEL_83;
  }
  v43 = *(unsigned int *)(v330 - 4);
  v44 = (WebCore *)(v330 + 8 * v43);
  if (!*(_DWORD *)(v330 - 12))
  {
    v45 = (WebCore *)(v330 + 8 * v43);
    goto LABEL_82;
  }
  v45 = (WebCore *)v330;
  if ((_DWORD)v43)
  {
    v46 = 8 * v43;
    v45 = (WebCore *)v330;
    while (*(_QWORD *)v45 == 0x10000000000000 || (*(_QWORD *)v45 & 0x20000000000000) != 0)
    {
      v45 = (WebCore *)((char *)v45 + 8);
      v46 -= 8;
      if (!v46)
      {
        v45 = v44;
        break;
      }
    }
  }
LABEL_83:
  if ((_QWORD)v330)
    v48 = (WebCore *)(v330 + 8 * *(unsigned int *)(v330 - 4));
  else
    v48 = 0;
  while (v45 != v48)
  {
    WebCore::contrastRatio(v45, (const WebCore::Color *)(a1 + 96), v40);
    if (v49 < 4.5)
      goto LABEL_66;
    v50 = (WebCore *)((char *)v45 + 8);
    v45 = v44;
    if (v50 != v44)
    {
      v45 = v50;
      while (*(_QWORD *)v45 == 0x10000000000000 || (*(_QWORD *)v45 & 0x20000000000000) != 0)
      {
        v45 = (WebCore *)((char *)v45 + 8);
        if (v45 == v44)
        {
          v45 = v44;
          break;
        }
      }
    }
  }
LABEL_97:
  if ((_QWORD)v330)
  {
    v15 = *(_DWORD *)(v330 - 12) == 0;
LABEL_99:
    v52 = v330;
    if ((_QWORD)v330)
    {
      v53 = *(unsigned int *)(v330 - 4);
      if ((_DWORD)v53)
      {
        for (i = 0; i != v53; ++i)
        {
          v55 = *(_QWORD *)(v52 + 8 * i);
          if ((v55 & 0x28000000000000) == 0x8000000000000)
          {
            v56 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
            {
              atomic_store(1u, v56);
              WTF::fastFree((WTF *)v56, v39);
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v52 - 16), v39);
    }
    goto LABEL_110;
  }
  v15 = 1;
LABEL_110:
  v14 = *(_WORD *)(a1 + 106);
LABEL_111:
  v59 = (v14 & 0x40) == 0;
  v60 = 0.0;
  if ((v59 & a4) != 0)
    v61 = 0.0;
  else
    v61 = a5;
  if ((v59 & a4) == 0)
    v60 = a6;
  v308 = v60;
  v309 = v61;
  v321 = 0;
  v322 = 0;
  if ((v14 & 0x20) == 0)
  {
    if ((v14 & 0x400) == 0)
    {
LABEL_118:
      WebCore::RenderObject::absoluteTextRects((uint64_t)this, v14 & 0x10 ^ 0x11, (uint64_t)cf);
      v63 = HIDWORD(cf[1]);
      if (HIDWORD(cf[1]))
      {
        if (HIDWORD(cf[1]) >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x196067A5CLL);
        }
        v64 = WTF::fastMalloc((WTF *)(16 * HIDWORD(cf[1])));
        v65 = (WTF *)v64;
        LODWORD(v66) = HIDWORD(cf[1]);
        if (HIDWORD(cf[1]))
        {
          v67 = 0;
          v68 = (char *)cf[0];
          v69 = 16 * HIDWORD(cf[1]);
          do
          {
            v70 = (float)*(int *)&v68[v67 + 4];
            v71 = (float)*(int *)&v68[v67 + 8];
            v72 = (float)*(int *)&v68[v67 + 12];
            v73 = (float *)(v64 + v67);
            *v73 = (float)*(int *)&v68[v67];
            v73[1] = v70;
            v73[2] = v71;
            v73[3] = v72;
            v67 += 16;
          }
          while (v69 != v67);
        }
        goto LABEL_246;
      }
      v65 = 0;
      goto LABEL_245;
    }
LABEL_206:
    WebCore::RenderObject::collectSelectionGeometries((WebCore::Node **)this, (uint64_t)cf);
    v63 = HIDWORD(cf[1]);
    if (!HIDWORD(cf[1]))
    {
      LODWORD(v66) = 0;
      v65 = 0;
      goto LABEL_246;
    }
    if (HIDWORD(cf[1]) >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x196067A64);
    }
    v95 = WTF::fastMalloc((WTF *)(16 * HIDWORD(cf[1])));
    v65 = (WTF *)v95;
    if (HIDWORD(cf[1]))
    {
      v96 = 0;
      v66 = 0;
      v97 = (float *)(v95 + 8);
      do
      {
        v98 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)((char *)cf[0] + v96));
        *(v97 - 2) = (float)(int)v98;
        *(v97 - 1) = (float)SHIDWORD(v98);
        *v97 = (float)(int)v62;
        v97[1] = (float)SHIDWORD(v62);
        v97 += 4;
        ++v66;
        v96 += 84;
      }
      while (v66 < HIDWORD(cf[1]));
      goto LABEL_246;
    }
LABEL_245:
    LODWORD(v66) = 0;
LABEL_246:
    v117 = v321;
    if (v321)
    {
      v321 = 0;
      LODWORD(v322) = 0;
      WTF::fastFree(v117, v62);
    }
    v321 = v65;
    v322 = __PAIR64__(v66, v63);
    v118 = (WTF *)cf[0];
    if (cf[0])
    {
      cf[0] = 0;
      LODWORD(cf[1]) = 0;
      WTF::fastFree(v118, v62);
    }
    goto LABEL_250;
  }
  v74 = *(_DWORD **)this;
  v74[6] = *(_DWORD *)(*(_QWORD *)this + 24) + 2;
  cf[0] = v74;
  LODWORD(cf[1]) = *((_DWORD *)this + 2);
  v75 = *((_QWORD *)this + 2);
  *(_DWORD *)(v75 + 24) += 2;
  v324 = v75;
  v325 = *((_DWORD *)this + 6);
  WebCore::IntersectingNodeIterator::IntersectingNodeIterator((WebCore::IntersectingNodeIterator *)&v330, (const WebCore::SimpleRange *)cf);
  v77 = v330;
  if ((_QWORD)v330)
  {
    v78 = 1;
    while ((*(_QWORD *)(v77 + 64) & 0xFFFFFFFFFFFFLL) != 0
         && (*(_BYTE *)((*(_QWORD *)(v77 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v330);
      v79 = 0;
      v77 = v330;
      if (!(_QWORD)v330)
        goto LABEL_132;
    }
    v78 = 0;
    v79 = v77;
  }
  else
  {
    v79 = 0;
    v78 = 1;
  }
LABEL_132:
  v80 = *((_QWORD *)&v330 + 1);
  *((_QWORD *)&v330 + 1) = 0;
  if (v80)
  {
    if (*(_DWORD *)(v80 + 24) == 2)
    {
      if ((*(_WORD *)(v80 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v80, v76);
        v79 = v330;
      }
    }
    else
    {
      *(_DWORD *)(v80 + 24) -= 2;
    }
  }
  *(_QWORD *)&v330 = 0;
  if (v79)
  {
    if (*(_DWORD *)(v79 + 24) == 2)
    {
      if ((*(_WORD *)(v79 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v79, v76);
        v75 = v324;
      }
    }
    else
    {
      *(_DWORD *)(v79 + 24) -= 2;
    }
  }
  if (v75)
  {
    if (*(_DWORD *)(v75 + 24) == 2)
    {
      if ((*(_WORD *)(v75 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v75, v76);
    }
    else
    {
      *(_DWORD *)(v75 + 24) -= 2;
    }
  }
  if (cf[0])
  {
    if (*((_DWORD *)cf[0] + 6) == 2)
    {
      if ((*((_WORD *)cf[0] + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)cf[0], v76);
    }
    else
    {
      *((_DWORD *)cf[0] + 6) -= 2;
    }
  }
  if (!v78)
  {
LABEL_183:
    if (v15)
      goto LABEL_204;
    v89 = *(_DWORD **)this;
    v89[6] = *(_DWORD *)(*(_QWORD *)this + 24) + 2;
    cf[0] = v89;
    LODWORD(cf[1]) = *((_DWORD *)this + 2);
    v90 = *((_QWORD *)this + 2);
    *(_DWORD *)(v90 + 24) += 2;
    v324 = v90;
    v325 = *((_DWORD *)this + 6);
    WebCore::IntersectingNodeIterator::IntersectingNodeIterator((WebCore::IntersectingNodeIterator *)&v330, (const WebCore::SimpleRange *)cf);
    while (1)
    {
      v92 = v330;
      if (!(_QWORD)v330)
      {
        v93 = 0;
        goto LABEL_191;
      }
      if ((*(_QWORD *)(v330 + 64) & 0xFFFFFFFFFFFFLL) != 0
        && (*(_BYTE *)((*(_QWORD *)(v330 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) & 3) != 0)
      {
        break;
      }
      WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v330);
    }
    v93 = 1;
LABEL_191:
    v94 = *((_QWORD *)&v330 + 1);
    *((_QWORD *)&v330 + 1) = 0;
    if (v94)
    {
      if (*(_DWORD *)(v94 + 24) == 2)
      {
        if ((*(_WORD *)(v94 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v94, v91);
          v92 = v330;
        }
      }
      else
      {
        *(_DWORD *)(v94 + 24) -= 2;
      }
    }
    *(_QWORD *)&v330 = 0;
    if (v92)
    {
      if (*(_DWORD *)(v92 + 24) == 2)
      {
        if ((*(_WORD *)(v92 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v92, v91);
          v90 = v324;
        }
      }
      else
      {
        *(_DWORD *)(v92 + 24) -= 2;
      }
    }
    if (v90)
    {
      if (*(_DWORD *)(v90 + 24) == 2)
      {
        if ((*(_WORD *)(v90 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v90, v91);
      }
      else
      {
        *(_DWORD *)(v90 + 24) -= 2;
      }
    }
    if (cf[0])
    {
      if (*((_DWORD *)cf[0] + 6) == 2)
      {
        if ((*((_WORD *)cf[0] + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)cf[0], v91);
      }
      else
      {
        *((_DWORD *)cf[0] + 6) -= 2;
      }
    }
    if ((v93 & 1) != 0)
    {
LABEL_204:
      *(_WORD *)(a1 + 106) |= 4u;
      goto LABEL_250;
    }
    v14 = *(_WORD *)(a1 + 106);
    if ((v14 & 0x400) == 0)
      goto LABEL_118;
    goto LABEL_206;
  }
  WebCore::plainText(this, 0, 0, (const WTF::String *)cf);
  if (cf[0])
  {
    WTF::StringImpl::replace();
    v82 = (WTF::StringImpl *)cf[0];
    cf[0] = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2)
        WTF::StringImpl::destroy(v82, v81);
      else
        *(_DWORD *)v82 -= 2;
    }
    v83 = (WTF::StringImpl *)v330;
    if ((_QWORD)v330)
    {
      v84 = *(_QWORD *)(v330 + 8);
      v85 = *(unsigned int *)(v330 + 4);
      if ((*(_BYTE *)(v330 + 16) & 4) != 0)
      {
        if ((_DWORD)v85)
        {
          j = 0;
          while (1)
          {
            v87 = *(unsigned __int8 *)(v84 + j);
            if ((v87 - 9) >= 5 && v87 != 32)
              goto LABEL_179;
            if (v85 == ++j)
            {
              j = -1;
              goto LABEL_179;
            }
          }
        }
      }
      else if ((_DWORD)v85)
      {
        for (j = 0; j != v85; ++j)
        {
          v88 = *(unsigned __int16 *)(v84 + 2 * j);
          if (v88 > 0xFF)
          {
            if (MEMORY[0x19AEA858C]() != 9)
              goto LABEL_178;
          }
          else if (v88 - 9 >= 5 && v88 != 32)
          {
            goto LABEL_178;
          }
        }
        j = -1;
LABEL_178:
        v83 = (WTF::StringImpl *)v330;
LABEL_179:
        *(_QWORD *)&v330 = 0;
        if (v83)
        {
          if (*(_DWORD *)v83 == 2)
            WTF::StringImpl::destroy(v83, v81);
          else
            *(_DWORD *)v83 -= 2;
        }
        if (j != -1)
          goto LABEL_183;
        goto LABEL_222;
      }
      *(_QWORD *)&v330 = 0;
      if (*(_DWORD *)v83 == 2)
        WTF::StringImpl::destroy(v83, v81);
      else
        *(_DWORD *)v83 -= 2;
    }
  }
LABEL_222:
  v99 = *(WebCore::Node **)this;
  v100 = *((_QWORD *)this + 2);
  if (*(_QWORD *)this == v100)
    goto LABEL_223;
  v291 = WebCore::depth<(WebCore::TreeType)2>(*(_QWORD *)this);
  v292 = WebCore::depth<(WebCore::TreeType)2>(v100);
  v293 = v292 - v291;
  v294 = v291 >= v292;
  v295 = v291 - v292;
  if (v291 >= v292)
    v101 = v99;
  else
    v101 = (WebCore::Node *)v100;
  if (v294)
    v99 = (WebCore::Node *)v100;
  if (v294)
    v296 = v295;
  else
    v296 = v293;
  for (; v296; --v296)
    v101 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v101);
  if (v101 == v99)
  {
LABEL_223:
    v101 = v99;
  }
  else
  {
    do
    {
      v101 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v101);
      v99 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v99);
    }
    while (v101 != v99);
  }
  v102 = (WebCore::RenderObject *)(*((_QWORD *)v101 + 8) & 0xFFFFFFFFFFFFLL);
  if (v102)
  {
    *(_WORD *)(a1 + 106) |= 4u;
    v103 = WebCore::RenderObject::absoluteBoundingBoxRect(v102, 1, 0);
    v105 = v104;
    v106 = HIDWORD(v322);
    if (HIDWORD(v322) == (_DWORD)v322)
    {
      v107 = HIDWORD(v322) + ((unint64_t)HIDWORD(v322) >> 2);
      if (v107 >= 0x10)
        v108 = v107 + 1;
      else
        v108 = 16;
      if (v108 <= (unint64_t)HIDWORD(v322) + 1)
        v109 = HIDWORD(v322) + 1;
      else
        v109 = v108;
      if (v109 >> 28)
      {
        __break(0xC471u);
LABEL_571:
        JUMPOUT(0x196067A54);
      }
      v110 = v321;
      v111 = (WTF *)WTF::fastMalloc((WTF *)(16 * v109));
      LODWORD(v322) = v109;
      v321 = v111;
      if (HIDWORD(v322))
      {
        v113 = 16 * HIDWORD(v322);
        v114 = v110;
        do
        {
          v115 = *(_OWORD *)v114;
          v114 = (WTF *)((char *)v114 + 16);
          *(_OWORD *)v111 = v115;
          v111 = (WTF *)((char *)v111 + 16);
          v113 -= 16;
        }
        while (v113);
        v111 = v321;
      }
      if (v110)
      {
        if (v111 == v110)
        {
          v321 = 0;
          LODWORD(v322) = 0;
        }
        WTF::fastFree(v110, v112);
        v111 = v321;
      }
      v106 = HIDWORD(v322);
      v116 = (float *)((char *)v111 + 16 * HIDWORD(v322));
    }
    else
    {
      v116 = (float *)((char *)v321 + 16 * HIDWORD(v322));
    }
    *v116 = (float)(int)v103;
    v116[1] = (float)SHIDWORD(v103);
    v116[2] = (float)(int)v105;
    v116[3] = (float)SHIDWORD(v105);
    HIDWORD(v322) = v106 + 1;
  }
LABEL_250:
  if (HIDWORD(v322))
    goto LABEL_259;
  WebCore::borderAndTextRects((uint64_t)&v330, (uint64_t)this, 1, 7);
  cf[0] = 0;
  cf[1] = 0;
  v120 = (float32x2_t *)v330;
  if (!HIDWORD(v330))
  {
    v122 = 0uLL;
    if (!(_QWORD)v330)
      goto LABEL_256;
    goto LABEL_255;
  }
  v121 = 16 * HIDWORD(v330);
  do
  {
    WebCore::FloatRect::uniteIfNonZero((float32x2_t *)cf, v120);
    v120 += 2;
    v121 -= 16;
  }
  while (v121);
  v122 = *(_OWORD *)cf;
  v120 = (float32x2_t *)v330;
  if ((_QWORD)v330)
  {
LABEL_255:
    *(_QWORD *)&v330 = 0;
    DWORD2(v330) = 0;
    v315 = v122;
    WTF::fastFree((WTF *)v120, v119);
    v122 = v315;
  }
LABEL_256:
  *(_OWORD *)cf = v122;
  v123 = HIDWORD(v322);
  if (HIDWORD(v322) == (_DWORD)v322)
  {
    v290 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v321, HIDWORD(v322) + 1, (unint64_t)cf);
    v123 = HIDWORD(v322);
    v124 = v321;
    v125 = *v290;
  }
  else
  {
    v124 = v321;
    v125 = *(_OWORD *)cf;
  }
  *((_OWORD *)v124 + v123) = v125;
  ++HIDWORD(v322);
LABEL_259:
  v126 = WebCore::ScrollView::exposedContentRect(*((WebCore::ScrollView **)a2 + 36));
  v130 = floorf(v126);
  v131 = 2147500000.0;
  if (v130 < 2147500000.0)
  {
    v131 = -2147500000.0;
    if (v130 > -2147500000.0)
      v131 = (float)(int)v130;
  }
  v132 = floorf(v127);
  v133 = 2147500000.0;
  if (v132 < 2147500000.0)
  {
    v133 = -2147500000.0;
    if (v132 > -2147500000.0)
      v133 = (float)(int)v132;
  }
  v134 = v127 + v129;
  v135 = ceilf(v126 + v128);
  v136 = 2147500000.0;
  if (v135 < 2147500000.0)
  {
    v136 = -2147500000.0;
    if (v135 > -2147500000.0)
      v136 = (float)(int)v135;
  }
  v137 = ceilf(v134);
  v138 = 2147500000.0;
  if (v137 < 2147500000.0)
  {
    v138 = -2147500000.0;
    if (v137 > -2147500000.0)
      v138 = (float)(int)v137;
  }
  if (v131 >= 2147500000.0)
  {
    v139 = 0x7FFFFFFF;
  }
  else if (v131 <= -2147500000.0)
  {
    v139 = 0x80000000;
  }
  else
  {
    v139 = (int)v131;
  }
  if (v133 >= 2147500000.0)
  {
    v140 = 0x7FFFFFFF;
  }
  else if (v133 <= -2147500000.0)
  {
    v140 = 0x80000000;
  }
  else
  {
    v140 = (int)v133;
  }
  v141 = v136 - v131;
  v142 = v138 - v133;
  if (v141 >= 2147500000.0)
  {
    v143 = 0x7FFFFFFFLL;
  }
  else if (v141 <= -2147500000.0)
  {
    v143 = 0x80000000;
  }
  else
  {
    v143 = (int)v141;
  }
  if (v142 >= 2147500000.0)
  {
    v144 = 0x7FFFFFFF00000000;
  }
  else if (v142 <= -2147500000.0)
  {
    v144 = 0x8000000000000000;
  }
  else
  {
    v144 = (unint64_t)(int)v142 << 32;
  }
  v145 = v144 | v143;
  v146 = *(_WORD *)(a1 + 106);
  v147 = HIDWORD(v144);
  if ((int)v143 >= 0)
    v148 = v143;
  else
    v148 = v143 + 1;
  v149 = v139 - (v148 >> 1);
  v150 = (v148 & 0xFFFFFFFE) + v143;
  if ((v147 & 0x80000000) == 0)
    v151 = v147;
  else
    v151 = v147 + 1;
  v152 = v150 | ((unint64_t)((v151 & 0xFFFFFFFE) + v147) << 32);
  if ((v146 & 0x80) != 0)
    v140 -= v151 >> 1;
  else
    v152 = v145;
  if ((v146 & 0x80) != 0)
    v153 = v149;
  else
    v153 = v139;
  v319 = 0;
  v320 = 0;
  v317 = 0;
  v318 = 0;
  if (!HIDWORD(v322))
  {
    v154 = 0;
    v218 = 0;
    v219 = 0;
    v216 = 0.0;
    v157 = 0.0;
    v158 = 0.0;
    v159 = 0.0;
    v215 = 0.0;
    v316 = 0.0;
    v161 = 0.0;
    v162 = 0.0;
    goto LABEL_400;
  }
  v154 = 0;
  v312 = (float)v140;
  v313 = (float)v153;
  v310 = (float)v140 + (float)SHIDWORD(v152);
  v311 = (float)(int)v152 + (float)v153;
  v314 = 0.0;
  v316 = 0.0;
  v155 = v321;
  v156 = 16 * HIDWORD(v322);
  v157 = 0.0;
  v158 = 0.0;
  v159 = 0.0;
  v160 = 0.0;
  v161 = 0.0;
  v162 = 0.0;
  do
  {
    cf[0] = 0;
    cf[1] = 0;
    if ((*(_BYTE *)(a1 + 107) & 1) != 0)
    {
      *(_OWORD *)cf = *(_OWORD *)v155;
      v170 = *((float *)&cf[1] + 1);
      v169 = *(float *)&cf[1];
    }
    else
    {
      v163 = *((float *)v155 + 1);
      v165 = v312;
      v164 = v313;
      if (*(float *)v155 >= v313)
        v164 = *(float *)v155;
      if (v163 >= v312)
        v165 = *((float *)v155 + 1);
      v166 = *(float *)v155 + *((float *)v155 + 2);
      if (v311 < v166)
        v166 = v311;
      v167 = v163 + *((float *)v155 + 3);
      if (v310 < v167)
        v167 = v310;
      if (v164 >= v166 || v165 >= v167)
      {
        v164 = 0.0;
        v165 = 0.0;
        v166 = 0.0;
        v167 = 0.0;
      }
      v169 = v166 - v164;
      v170 = v167 - v165;
      cf[0] = (CFTypeRef)__PAIR64__(LODWORD(v165), LODWORD(v164));
      *(float *)&cf[1] = v169;
      *((float *)&cf[1] + 1) = v167 - v165;
    }
    if (v169 > 0.0 && v170 > 0.0)
    {
      v171 = HIDWORD(v320);
      if (HIDWORD(v320) == (_DWORD)v320)
      {
        v213 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v319, HIDWORD(v320) + 1, (unint64_t)cf);
        v171 = HIDWORD(v320);
        v172 = v319;
        v173 = *v213;
      }
      else
      {
        v172 = v319;
        v173 = *(_OWORD *)cf;
      }
      *((_OWORD *)v172 + v171) = v173;
      ++HIDWORD(v320);
      v174 = *(float *)cf - v309;
      v175 = v309 + (float)(v309 + *(float *)&cf[1]);
      v176 = *((float *)cf + 1) - v308;
      v177 = v308 + (float)(v308 + *((float *)&cf[1] + 1));
      if (v175 > 0.0)
      {
        if (v174 >= v159)
          v178 = v159;
        else
          v178 = *(float *)cf - v309;
        if (v176 >= v158)
          v179 = v158;
        else
          v179 = *((float *)cf + 1) - v308;
        v180 = v157 + v159;
        if ((float)(v157 + v159) < (float)(v174 + v175))
          v180 = v174 + v175;
        v181 = v314;
        v182 = v314 + v158;
        if ((float)(v314 + v158) < (float)(v176 + v177))
          v182 = v176 + v177;
        v183 = v180 - v178;
        v184 = v182 - v179;
        if (v314 <= 0.0)
        {
          v184 = v308 + (float)(v308 + *((float *)&cf[1] + 1));
          v183 = v309 + (float)(v309 + *(float *)&cf[1]);
          v179 = *((float *)cf + 1) - v308;
          v178 = *(float *)cf - v309;
        }
        if (v157 <= 0.0)
        {
          v184 = v308 + (float)(v308 + *((float *)&cf[1] + 1));
          v183 = v309 + (float)(v309 + *(float *)&cf[1]);
          v179 = *((float *)cf + 1) - v308;
          v178 = *(float *)cf - v309;
        }
        if (v177 > 0.0)
          v181 = v184;
        v314 = v181;
        if (v177 > 0.0)
        {
          v157 = v183;
          v158 = v179;
          v159 = v178;
        }
      }
      v185 = (WebCore::ScrollView *)*((_QWORD *)a2 + 36);
      v186 = floorf(v174);
      v187 = (float)(int)v186;
      if (v186 <= -2147500000.0)
        v187 = -2147500000.0;
      if (v186 >= 2147500000.0)
        v187 = 2147500000.0;
      v188 = floorf(v176);
      v189 = (float)(int)v188;
      if (v188 <= -2147500000.0)
        v189 = -2147500000.0;
      if (v188 < 2147500000.0)
        v190 = v189;
      else
        v190 = 2147500000.0;
      v191 = ceilf(v174 + v175);
      v192 = 2147500000.0;
      if (v191 < 2147500000.0)
      {
        v192 = -2147500000.0;
        if (v191 > -2147500000.0)
          v192 = (float)(int)v191;
      }
      v193 = ceilf(v176 + v177);
      v194 = 2147500000.0;
      if (v193 < 2147500000.0)
      {
        v194 = -2147500000.0;
        if (v193 > -2147500000.0)
          v194 = (float)(int)v193;
      }
      if (v187 >= 2147500000.0)
      {
        v195 = 0x7FFFFFFFLL;
      }
      else if (v187 <= -2147500000.0)
      {
        v195 = 0x80000000;
      }
      else
      {
        v195 = (int)v187;
      }
      if (v190 >= 2147500000.0)
      {
        v196 = 0x7FFFFFFF00000000;
      }
      else if (v190 <= -2147500000.0)
      {
        v196 = 0x8000000000000000;
      }
      else
      {
        v196 = (unint64_t)(int)v190 << 32;
      }
      v197 = v192 - v187;
      if (v197 >= 2147500000.0)
      {
        v198 = 0x7FFFFFFFLL;
      }
      else if (v197 <= -2147500000.0)
      {
        v198 = 0x80000000;
      }
      else
      {
        v198 = (int)v197;
      }
      v199 = v194 - v190;
      if (v199 >= 2147500000.0)
      {
        v200 = 0x7FFFFFFF00000000;
      }
      else if (v199 <= -2147500000.0)
      {
        v200 = 0x8000000000000000;
      }
      else
      {
        v200 = (unint64_t)(int)v199 << 32;
      }
      v327 = v196 | v195;
      v328 = v200 | v198;
      v201 = WebCore::ScrollView::contentsToRootView(v185, (const WebCore::IntRect *)&v327);
      *(float *)&v330 = (float)(int)v201;
      *((float *)&v330 + 1) = (float)SHIDWORD(v201);
      *((float *)&v330 + 2) = (float)v202;
      *((float *)&v330 + 3) = (float)v203;
      v204 = HIDWORD(v318);
      if (HIDWORD(v318) == (_DWORD)v318)
      {
        v214 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v317, HIDWORD(v318) + 1, (unint64_t)&v330);
        v204 = HIDWORD(v318);
        v205 = v317;
        v206 = *v214;
      }
      else
      {
        v205 = v317;
        v206 = v330;
      }
      *((_OWORD *)v205 + v204) = v206;
      v154 = ++HIDWORD(v318);
      v207 = *((float *)&v330 + 2);
      if (*((float *)&v330 + 2) <= 0.0 || (v208 = *((float *)&v330 + 3), *((float *)&v330 + 3) <= 0.0))
      {
        v208 = v160;
        v207 = v316;
        v209 = v162;
      }
      else
      {
        v209 = *(float *)&v330;
        if (v316 <= 0.0 || v160 <= 0.0)
        {
          v161 = *((float *)&v330 + 1);
        }
        else
        {
          v210 = *((float *)&v330 + 2) + *(float *)&v330;
          if (*(float *)&v330 >= v162)
            v209 = v162;
          v211 = v160 + v161;
          if (*((float *)&v330 + 1) < v161)
            v161 = *((float *)&v330 + 1);
          if ((float)(v316 + v162) >= v210)
            v210 = v316 + v162;
          v212 = *((float *)&v330 + 3) + *((float *)&v330 + 1);
          if (v211 >= (float)(*((float *)&v330 + 3) + *((float *)&v330 + 1)))
            v212 = v211;
          v207 = v210 - v209;
          v208 = v212 - v161;
        }
      }
      v160 = v208;
      v316 = v207;
      v162 = v209;
    }
    v155 = (WTF *)((char *)v155 + 16);
    v156 -= 16;
  }
  while (v156);
  if (!v154)
  {
    v215 = v160;
    v218 = 0;
    v219 = 0;
    v216 = v314;
    goto LABEL_400;
  }
  v215 = v160;
  v216 = v314;
  if (v154 >> 28)
  {
    __break(0xC471u);
    goto LABEL_571;
  }
  v217 = WTF::fastMalloc((WTF *)(16 * v154));
  v218 = v217;
  v219 = HIDWORD(v318);
  if (HIDWORD(v318))
  {
    v220 = 0;
    v221 = v317;
    v222 = 16 * HIDWORD(v318);
    do
    {
      v223 = *(float *)((char *)v221 + v220 + 4) - v161;
      v224 = v217 + v220;
      v225 = *(_QWORD *)((char *)v221 + v220 + 8);
      *(float *)v224 = *(float *)((char *)v221 + v220) - v162;
      *(float *)(v224 + 4) = v223;
      *(_QWORD *)(v224 + 8) = v225;
      v220 += 16;
    }
    while (v222 != v220);
  }
LABEL_400:
  v226 = (WebCore::ScrollView *)*((_QWORD *)a2 + 36);
  WebCore::FrameSelection::selectionBounds(*(_QWORD *)(*((_QWORD *)a2 + 37) + 3064), 0);
  v231 = floorf(v227);
  v232 = 2147500000.0;
  if (v231 < 2147500000.0)
  {
    v232 = -2147500000.0;
    if (v231 > -2147500000.0)
      v232 = (float)(int)v231;
  }
  v233 = floorf(v228);
  v234 = 2147500000.0;
  if (v233 < 2147500000.0)
  {
    v234 = -2147500000.0;
    if (v233 > -2147500000.0)
      v234 = (float)(int)v233;
  }
  v235 = v228 + v230;
  v236 = ceilf(v227 + v229);
  v237 = 2147500000.0;
  if (v236 < 2147500000.0)
  {
    v237 = -2147500000.0;
    if (v236 > -2147500000.0)
      v237 = (float)(int)v236;
  }
  v238 = ceilf(v235);
  v239 = 2147500000.0;
  if (v238 < 2147500000.0)
  {
    v239 = -2147500000.0;
    if (v238 > -2147500000.0)
      v239 = (float)(int)v238;
  }
  if (v232 >= 2147500000.0)
  {
    v240 = 0x7FFFFFFFLL;
  }
  else if (v232 <= -2147500000.0)
  {
    v240 = 0x80000000;
  }
  else
  {
    v240 = (int)v232;
  }
  if (v234 >= 2147500000.0)
  {
    v241 = 0x7FFFFFFF00000000;
  }
  else if (v234 <= -2147500000.0)
  {
    v241 = 0x8000000000000000;
  }
  else
  {
    v241 = (unint64_t)(int)v234 << 32;
  }
  v242 = v237 - v232;
  v243 = v239 - v234;
  if (v242 >= 2147500000.0)
  {
    v244 = 0x7FFFFFFFLL;
  }
  else if (v242 <= -2147500000.0)
  {
    v244 = 0x80000000;
  }
  else
  {
    v244 = (int)v242;
  }
  if (v243 >= 2147500000.0)
  {
    v245 = 0x7FFFFFFF00000000;
  }
  else if (v243 <= -2147500000.0)
  {
    v245 = 0x8000000000000000;
  }
  else
  {
    v245 = (unint64_t)(int)v243 << 32;
  }
  cf[0] = (CFTypeRef)(v241 | v240);
  cf[1] = (CFTypeRef)(v245 | v244);
  v246 = WebCore::ScrollView::contentsToRootView(v226, (const WebCore::IntRect *)cf);
  *(float *)a1 = (float)(int)v246;
  *(float *)(a1 + 4) = (float)SHIDWORD(v246);
  *(float *)(a1 + 8) = (float)(int)v247;
  *(float *)(a1 + 12) = (float)SHIDWORD(v247);
  *(float *)(a1 + 16) = v162;
  *(float *)(a1 + 20) = v161;
  *(float *)(a1 + 24) = v316;
  *(float *)(a1 + 28) = v215;
  v248 = *(WTF **)(a1 + 48);
  if (v248)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v248, v247);
  }
  *(_QWORD *)(a1 + 48) = v218;
  *(_DWORD *)(a1 + 56) = v154;
  *(_DWORD *)(a1 + 60) = v219;
  v249 = floorf(v159);
  v250 = 2147500000.0;
  if (v249 < 2147500000.0)
  {
    v250 = -2147500000.0;
    if (v249 > -2147500000.0)
      v250 = (float)(int)v249;
  }
  v251 = floorf(v158);
  v252 = 2147500000.0;
  if (v251 < 2147500000.0)
  {
    v252 = -2147500000.0;
    if (v251 > -2147500000.0)
      v252 = (float)(int)v251;
  }
  v253 = ceilf(v157 + v159);
  v254 = 2147500000.0;
  if (v253 < 2147500000.0)
  {
    v254 = -2147500000.0;
    if (v253 > -2147500000.0)
      v254 = (float)(int)v253;
  }
  v255 = ceilf(v216 + v158);
  v256 = 2147500000.0;
  if (v255 < 2147500000.0)
  {
    v256 = -2147500000.0;
    if (v255 > -2147500000.0)
      v256 = (float)(int)v255;
  }
  if (v250 >= 2147500000.0)
  {
    v257 = 0x7FFFFFFFLL;
  }
  else if (v250 <= -2147500000.0)
  {
    v257 = 0x80000000;
  }
  else
  {
    v257 = (int)v250;
  }
  if (v252 >= 2147500000.0)
  {
    v258 = 0x7FFFFFFF00000000;
  }
  else if (v252 <= -2147500000.0)
  {
    v258 = 0x8000000000000000;
  }
  else
  {
    v258 = (unint64_t)(int)v252 << 32;
  }
  v259 = v254 - v250;
  v260 = v256 - v252;
  if (v259 >= 2147500000.0)
  {
    v261 = 0x7FFFFFFFLL;
  }
  else if (v259 <= -2147500000.0)
  {
    v261 = 0x80000000;
  }
  else
  {
    v261 = (int)v259;
  }
  if (v260 >= 2147500000.0)
  {
    v262 = 0x7FFFFFFF00000000;
  }
  else if (v260 <= -2147500000.0)
  {
    v262 = 0x8000000000000000;
  }
  else
  {
    v262 = (unint64_t)(int)v260 << 32;
  }
  v263 = *(_WORD *)(a1 + 106);
  BYTE2(cf[0]) = 1;
  v264 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v264 != -1)
  {
    *(_QWORD *)&v330 = &v331;
    v327 = (unint64_t)&v330;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v327, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v265 = v258 | v257;
  v266 = v262 | v261;
  cf[1] = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
  if ((v263 & 4) != 0)
  {
    v267 = 65;
  }
  else
  {
    if ((v263 & 1) != 0)
      v267 = 66;
    else
      v267 = 74;
    if ((v263 & 1) != 0)
      v268 = 578;
    else
      v268 = 586;
    if ((v263 & 2) != 0)
    {
      v267 = 80;
      v268 = 592;
    }
    if ((v263 & 0x2000) != 0)
      v267 = v268;
  }
  LOWORD(cf[0]) = v267;
  WebCore::takeSnapshot(&v330, (uint64_t *)a2, v265, v266, (unsigned __int16 *)cf, (_DWORD *)(a1 + 64), (uint64_t)&v319);
  v270 = *(_DWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v330;
  if (v270)
  {
    if (v270[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v270 + 8))(v270);
    else
      --v270[2];
  }
  v271 = cf[1];
  cf[1] = 0;
  if (v271)
    CFRelease(v271);
  v272 = *(_QWORD *)(a1 + 88);
  if (v272)
  {
    v273 = *(_WORD *)(a1 + 106);
    if ((v273 & 8) != 0)
    {
      LOWORD(cf[0]) = 0;
      BYTE2(cf[0]) = 1;
      v274 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v274 != -1)
      {
        *(_QWORD *)&v330 = &v331;
        v327 = (unint64_t)&v330;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v327, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      cf[1] = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
      if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
        CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
      WebCore::takeSnapshot(&v330, (uint64_t *)a2, v265, v266, (unsigned __int16 *)cf, &v327, (uint64_t)&v319);
      v275 = *(_DWORD **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v330;
      if (v275)
      {
        if (v275[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v275 + 8))(v275);
        else
          --v275[2];
      }
      v276 = cf[1];
      cf[1] = 0;
      if (v276)
        CFRelease(v276);
      v273 = *(_WORD *)(a1 + 106);
    }
    if ((v273 & 0x200) != 0)
    {
      v277 = (const void *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(*((_QWORD *)a2 + 36) + 64)
                                                                              + 832))(*((_QWORD *)a2 + 36) + 64, 0, 0);
      v279 = (uint64_t)v278;
      cf[0] = v277;
      cf[1] = v278;
      LOWORD(v330) = 32;
      BYTE2(v330) = 1;
      v280 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v280 != -1)
      {
        v327 = (unint64_t)&v329;
        v331 = &v327;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v331, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      *((_QWORD *)&v330 + 1) = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
      if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
        CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
      v327 = 0;
      v328 = 0;
      WebCore::takeSnapshot(&v331, (uint64_t *)a2, (uint64_t)v277, v279, (unsigned __int16 *)&v330, &v329, (uint64_t)&v327);
      v282 = *(_DWORD **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v331;
      if (v282)
      {
        if (v282[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v282 + 8))(v282);
        else
          --v282[2];
      }
      v283 = (WTF *)v327;
      if (v327)
      {
        v327 = 0;
        LODWORD(v328) = 0;
        WTF::fastFree(v283, v281);
      }
      v284 = (const void *)*((_QWORD *)&v330 + 1);
      *((_QWORD *)&v330 + 1) = 0;
      if (v284)
        CFRelease(v284);
      v285 = WebCore::ScrollView::contentsToRootView(*((WebCore::ScrollView **)a2 + 36), (const WebCore::IntRect *)cf);
      *(float *)(a1 + 32) = (float)(int)v285;
      *(float *)(a1 + 36) = (float)SHIDWORD(v285);
      *(float *)(a1 + 40) = (float)(int)v269;
      *(float *)(a1 + 44) = (float)SHIDWORD(v269);
    }
  }
  v286 = v317;
  if (v317)
  {
    v317 = 0;
    LODWORD(v318) = 0;
    WTF::fastFree(v286, v269);
  }
  v287 = v319;
  if (v319)
  {
    v319 = 0;
    LODWORD(v320) = 0;
    WTF::fastFree(v287, v269);
  }
  v288 = v321;
  if (v321)
  {
    v321 = 0;
    LODWORD(v322) = 0;
    WTF::fastFree(v288, v269);
  }
  return v272 != 0;
}

unsigned int *WebCore::TextIndicator::createWithSelectionInFrame@<X0>(WebCore::SimpleRange *a1@<X0>, __int16 a2@<W1>, char a3@<W2>, unsigned int **a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  unsigned int *result;
  void *v13;
  unsigned int *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  _OWORD *v26;
  WTF *v27;
  uint64_t v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  WTF *v38[2];
  int v39;
  __int128 v40;
  __int128 v41;
  unsigned int v42;
  _QWORD v43[2];
  uint64_t v44;
  char v45;

  result = (unsigned int *)WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*((_QWORD *)a1 + 37) + 3064) + 56), v43);
  if (!v45)
  {
    *a4 = 0;
    return result;
  }
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v39 = 1065353216;
  v40 = 0u;
  v41 = 0u;
  LOBYTE(v42) = a3;
  HIWORD(v42) = a2;
  if (WebCore::initializeIndicator((uint64_t)&v35, a1, (WebCore *)v43, 1, a5, a6))
  {
    result = (unsigned int *)WTF::fastMalloc((WTF *)0x78);
    v14 = result;
    *result = 1;
    v16 = v36;
    v15 = v37;
    *(_OWORD *)(result + 2) = v35;
    *(_OWORD *)(result + 6) = v16;
    *(_OWORD *)(result + 10) = v15;
    v17 = HIDWORD(v38[1]);
    *((_QWORD *)result + 7) = 0;
    *((_QWORD *)result + 8) = 0;
    result[17] = v17;
    if ((_DWORD)v17)
    {
      if (v17 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v26 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v17));
      v14[16] = v17;
      *((_QWORD *)v14 + 7) = v26;
      if (HIDWORD(v38[1]))
      {
        v27 = v38[0];
        v28 = 16 * HIDWORD(v38[1]);
        do
        {
          v29 = *(_OWORD *)v27;
          v27 = (WTF *)((char *)v27 + 16);
          *v26++ = v29;
          v28 -= 16;
        }
        while (v28);
      }
    }
    v14[18] = v39;
    v18 = v40;
    if ((_QWORD)v40)
      ++*(_DWORD *)(v40 + 8);
    *((_QWORD *)v14 + 10) = v18;
    v19 = *((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
      ++*(_DWORD *)(*((_QWORD *)&v40 + 1) + 8);
    *((_QWORD *)v14 + 11) = v19;
    v20 = v41;
    if ((_QWORD)v41)
      ++*(_DWORD *)(v41 + 8);
    *((_QWORD *)v14 + 12) = v20;
    v21 = *((_QWORD *)&v41 + 1);
    *((_QWORD *)v14 + 13) = *((_QWORD *)&v41 + 1);
    if ((v21 & 0x8000000000000) != 0)
    {
      v30 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
    }
    v14[28] = v42;
  }
  else
  {
    v14 = 0;
  }
  *a4 = v14;
  if ((*((_QWORD *)&v41 + 1) & 0x8000000000000) != 0)
  {
    v32 = (unsigned int *)(*((_QWORD *)&v41 + 1) & 0xFFFFFFFFFFFFLL);
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      WTF::fastFree((WTF *)v32, v13);
    }
  }
  v22 = (_DWORD *)v41;
  *(_QWORD *)&v41 = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  v23 = (_DWORD *)*((_QWORD *)&v40 + 1);
  *((_QWORD *)&v40 + 1) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  v24 = (_DWORD *)v40;
  *(_QWORD *)&v40 = 0;
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  result = (unsigned int *)v38[0];
  if (v38[0])
  {
    v38[0] = 0;
    LODWORD(v38[1]) = 0;
    result = (unsigned int *)WTF::fastFree((WTF *)result, v13);
  }
  if (v45)
  {
    v25 = v44;
    v44 = 0;
    if (v25)
    {
      if (*(_DWORD *)(v25 + 24) == 2)
      {
        if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v25, v13);
      }
      else
      {
        *(_DWORD *)(v25 + 24) -= 2;
      }
    }
    result = (unsigned int *)v43[0];
    v43[0] = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v13);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebCore::UndoItem::setUndoManager(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *result;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;

  if (a2)
  {
    v4 = a2[1];
    if (v4)
      goto LABEL_32;
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = a2;
    v5 = (unsigned int *)a2[1];
    a2[1] = v4;
    if (!v5)
      goto LABEL_32;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
    v4 = a2[1];
    if (v4)
    {
LABEL_32:
      do
        v8 = __ldaxr((unsigned int *)v4);
      while (__stlxr(v8 + 1, (unsigned int *)v4));
    }
  }
  else
  {
    v4 = 0;
  }
  v9 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
      if (a2)
        goto LABEL_15;
LABEL_20:
      result = 0;
      goto LABEL_21;
    }
  }
  if (!a2)
    goto LABEL_20;
LABEL_15:
  result = (unsigned int *)a2[2];
  if (result)
  {
    result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)result);
    if (result)
    {
      do
        v13 = __ldaxr(result);
      while (__stlxr(v13 + 1, result));
    }
  }
LABEL_21:
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (v14)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v14));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v14);
      v17 = *(unsigned int *)(v14 + 28);
      if ((_DWORD)v17)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v17));
      v18 = *(WTF **)(v14 + 16);
      if (v18)
      {
        *(_QWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 24) = 0;
        WTF::fastFree(v18, a2);
      }
      return (unsigned int *)WTF::fastFree((WTF *)v14, a2);
    }
  }
  return result;
}

uint64_t WebCore::UndoItem::invalidate(WebCore::UndoItem *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      WebCore::UndoManager::removeItem(*(WebCore::UndoManager **)(v3 + 8), this);
      v3 = *((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = 0;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      *((_QWORD *)this + 5) = 0;
    }
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
LABEL_10:
  result = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (result)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)result));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)result);
      v9 = *(unsigned int *)(result + 28);
      if ((_DWORD)v9)
      {
        v12 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v9));
        result = v12;
      }
      v10 = *(WTF **)(result + 16);
      if (v10)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v11 = result;
        WTF::fastFree(v10, a2);
        result = v11;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WebCore::UndoItem *WebCore::UndoManager::removeItem(WebCore::UndoManager *this, WebCore::UndoItem *a2)
{
  WebCore::UndoItem *result;
  void *v3;
  WebCore::UndoItem *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::UndoItem *v17;

  result = (WebCore::UndoItem *)WTF::HashSet<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTableTraits>::take<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>((uint64_t *)this + 3, (uint64_t)a2, &v17);
  v4 = v17;
  if (v17)
  {
    v5 = (unsigned int *)*((_QWORD *)v17 + 5);
    *((_QWORD *)v17 + 5) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
    v8 = *((_QWORD *)v4 + 6);
    *((_QWORD *)v4 + 6) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        atomic_store(1u, (unsigned int *)v8);
        v13 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v13)
        {
          v16 = v8;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v13));
          v8 = v16;
        }
        v14 = *(WTF **)(v8 + 16);
        if (v14)
        {
          *(_QWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v8 + 24) = 0;
          v15 = v8;
          WTF::fastFree(v14, v3);
          v8 = v15;
        }
        WTF::fastFree((WTF *)v8, v3);
      }
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::UndoItem::~UndoItem(result, v3);
        return (WebCore::UndoItem *)bmalloc::api::isoDeallocate(v11, v12);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

uint64_t WebCore::UndoManager::addItem@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  WebCore::Document *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  bmalloc::api *v45;
  void *v46;
  _QWORD *v47;
  WebCore::Editor *v48;
  void *v49;
  WebCore::Editor *v50;
  uint64_t v51;
  void *v52;
  unsigned int *v53;
  _QWORD *v54;

  v6 = *(_QWORD *)(*a2 + 40);
  if (v6 && *(_QWORD *)(v6 + 8))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 10;
LABEL_4:
    *(_BYTE *)a3 = v8;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v9 = *(_QWORD *)(a1[2] + 528);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 14;
    goto LABEL_4;
  }
  v11 = (unsigned int *)(v10 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  WebCore::UndoItem::setUndoManager(*a2, a1);
  v13 = *(WebCore::Document **)(v10 + 296);
  v14 = *((_QWORD *)v13 + 382);
  if (!v14)
  {
    v53 = v11;
    v48 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v48, v13);
    v50 = (WebCore::Editor *)*((_QWORD *)v13 + 382);
    *((_QWORD *)v13 + 382) = v48;
    if (v50)
    {
      WebCore::Editor::~Editor(v50, v49);
      if (*(_DWORD *)v51)
      {
        *(_QWORD *)(v51 + 496) = 0;
        *(_OWORD *)(v51 + 464) = 0u;
        *(_OWORD *)(v51 + 480) = 0u;
        *(_OWORD *)(v51 + 432) = 0u;
        *(_OWORD *)(v51 + 448) = 0u;
        *(_OWORD *)(v51 + 400) = 0u;
        *(_OWORD *)(v51 + 416) = 0u;
        *(_OWORD *)(v51 + 368) = 0u;
        *(_OWORD *)(v51 + 384) = 0u;
        *(_OWORD *)(v51 + 336) = 0u;
        *(_OWORD *)(v51 + 352) = 0u;
        *(_OWORD *)(v51 + 304) = 0u;
        *(_OWORD *)(v51 + 320) = 0u;
        *(_OWORD *)(v51 + 272) = 0u;
        *(_OWORD *)(v51 + 288) = 0u;
        *(_OWORD *)(v51 + 240) = 0u;
        *(_OWORD *)(v51 + 256) = 0u;
        *(_OWORD *)(v51 + 208) = 0u;
        *(_OWORD *)(v51 + 224) = 0u;
        *(_OWORD *)(v51 + 176) = 0u;
        *(_OWORD *)(v51 + 192) = 0u;
        *(_OWORD *)(v51 + 144) = 0u;
        *(_OWORD *)(v51 + 160) = 0u;
        *(_OWORD *)(v51 + 112) = 0u;
        *(_OWORD *)(v51 + 128) = 0u;
        *(_OWORD *)(v51 + 80) = 0u;
        *(_OWORD *)(v51 + 96) = 0u;
        *(_OWORD *)(v51 + 48) = 0u;
        *(_OWORD *)(v51 + 64) = 0u;
        *(_OWORD *)(v51 + 16) = 0u;
        *(_OWORD *)(v51 + 32) = 0u;
        *(_OWORD *)v51 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v51, v52);
      }
    }
    v14 = *((_QWORD *)v13 + 382);
    v11 = v53;
  }
  v15 = *a2;
  v17 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)v17 = off_1E33A9CC8;
  result = *(_QWORD *)(v15 + 8);
  if (result)
    goto LABEL_67;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v15;
  v18 = *(unsigned int **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = result;
  if (!v18)
    goto LABEL_67;
  do
  {
    v19 = __ldaxr(v18);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v18));
  if (!v20)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v16);
  }
  result = *(_QWORD *)(v15 + 8);
  if (result)
  {
LABEL_67:
    do
      v21 = __ldaxr((unsigned int *)result);
    while (__stlxr(v21 + 1, (unsigned int *)result));
  }
  *(_QWORD *)(v17 + 16) = result;
  v22 = *(_QWORD *)(v14 + 8);
  if (v22)
  {
    result = *(_QWORD *)(v22 + 8);
    if (result)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 360))(result, v17);
  }
  if (*(_DWORD *)(v17 + 8) == 1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  else
    --*(_DWORD *)(v17 + 8);
  v23 = *a2;
  *a2 = 0;
  v26 = a1[3];
  v25 = a1 + 3;
  v24 = v26;
  if (v26
    || (result = WTF::HashTable<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>,WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>>::rehash(v25, 8u), (v24 = *v25) != 0))
  {
    v27 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    v27 = 0;
  }
  v28 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
  v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
  v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
  v31 = v27 & ((v30 >> 31) ^ v30);
  v32 = (uint64_t *)(v24 + 8 * v31);
  v33 = *v32;
  if (*v32)
  {
    v34 = 0;
    v35 = 1;
    while (v33 != v23)
    {
      if (v33 == -1)
        v34 = v32;
      v31 = (v31 + v35) & v27;
      v32 = (uint64_t *)(v24 + 8 * v31);
      v33 = *v32;
      ++v35;
      if (!*v32)
      {
        if (v34)
        {
          *v34 = 0;
          --*(_DWORD *)(*v25 - 16);
          v32 = v34;
        }
        goto LABEL_33;
      }
    }
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WebCore::UndoItem::~UndoItem((WebCore::UndoItem *)v23, v16);
        result = bmalloc::api::isoDeallocate(v45, v46);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
    goto LABEL_47;
  }
LABEL_33:
  *v32 = v23;
  v36 = *v25;
  if (*v25)
    v37 = *(_DWORD *)(v36 - 12) + 1;
  else
    v37 = 1;
  *(_DWORD *)(v36 - 12) = v37;
  v38 = *v25;
  if (*v25)
    v39 = *(_DWORD *)(v38 - 12);
  else
    v39 = 0;
  v40 = (*(_DWORD *)(v38 - 16) + v39);
  v41 = *(unsigned int *)(v38 - 4);
  if (v41 > 0x400)
  {
    if (v41 > 2 * v40)
      goto LABEL_47;
    goto LABEL_40;
  }
  if (3 * v41 <= 4 * v40)
  {
    if (!(_DWORD)v41)
    {
      v42 = 8;
      goto LABEL_46;
    }
LABEL_40:
    v42 = (_DWORD)v41 << (6 * *(_DWORD *)(v38 - 12) >= (2 * v41));
LABEL_46:
    result = WTF::HashTable<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>,WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>>::rehash(v25, v42);
  }
LABEL_47:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  do
  {
    v43 = __ldaxr(v11);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v11));
  if (!v44)
  {
    atomic_store(1u, v11);
    v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v47 = off_1E31FE290;
    v47[1] = v11;
    v54 = v47;
    WTF::ensureOnMainThread();
    result = (uint64_t)v54;
    if (v54)
      return (*(uint64_t (**)(_QWORD *))(*v54 + 8))(v54);
  }
  return result;
}

uint64_t *WTF::HashSet<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTableTraits>::take<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *result;
  if (!*result)
    goto LABEL_9;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v3 + 8 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v3 + 8 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v8 != *(_DWORD *)(v3 - 4))
  {
    v11 = 0;
    v12 = (uint64_t *)(v3 + 8 * v8);
    v13 = *v12;
    *v12 = 0;
    *a3 = v13;
    if (!*result || (v11 = *result + 8 * *(unsigned int *)(*result - 4), (uint64_t *)v11 != v12))
    {
      if ((uint64_t *)v11 != v12)
      {
        *v12 = -1;
        ++*(_DWORD *)(*result - 16);
        v14 = *result;
        if (*result)
          v15 = *(_DWORD *)(v14 - 12) - 1;
        else
          v15 = -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *result;
        if (*result)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            return (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>,WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>>::rehash(result, v18 >> 1);
        }
      }
    }
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  return result;
}

double WebCore::UserContentController::create@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  double result;

  v3 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v3 + 8) = 1;
  result = 0.0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_QWORD *)v3 = off_1E3402C68;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *a1 = v3;
  return result;
}

void WebCore::UserContentController::~UserContentController(WTF::StringImpl ***this, void *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(this + 8, a2);
  v4 = (uint64_t)this[7];
  if (v4)
    WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(v4, v3);
  v5 = (uint64_t)this[6];
  if (v5)
    WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(v5, v3);
  WebCore::UserContentProvider::~UserContentProvider((WebCore::UserContentProvider *)this, v3);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(this + 8, a2);
  v4 = (uint64_t)this[7];
  if (v4)
    WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(v4, v3);
  v5 = (uint64_t)this[6];
  if (v5)
    WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(v5, v3);
  WebCore::UserContentProvider::~UserContentProvider((WebCore::UserContentProvider *)this, v3);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(this + 8, a2);
  v4 = (uint64_t)this[7];
  if (v4)
    WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(v4, v3);
  v5 = (uint64_t)this[6];
  if (v5)
    WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(v5, v3);
  WebCore::UserContentProvider::~UserContentProvider((WebCore::UserContentProvider *)this, v3);
  WTF::fastFree(v6, v7);
}

void WebCore::UserContentProvider::~UserContentProvider(WebCore::UserContentProvider *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t j;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)this = off_1E3402CA8;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = *(unsigned int **)(v3 + 8 * i);
        if (v7 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v7);
              v17 = i;
              v19 = v3;
              v15 = v5;
              WTF::fastFree((WTF *)v7, a2);
              v5 = v15;
              i = v17;
              v3 = v19;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v10 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v10)
    {
      for (j = 0; j != v10; ++j)
      {
        v12 = *(unsigned int **)(v4 + 8 * j);
        if (v12 != (unsigned int *)-1)
        {
          *(_QWORD *)(v4 + 8 * j) = 0;
          if (v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              atomic_store(1u, v12);
              v18 = j;
              v20 = v4;
              v16 = v10;
              WTF::fastFree((WTF *)v12, a2);
              v10 = v16;
              j = v18;
              v4 = v20;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
}

uint64_t WebCore::UserContentController::forEachUserScript(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v3 = *(_QWORD *)(result + 48);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (uint64_t *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = *(uint64_t **)(result + 48);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = *(uint64_t **)(result + 48);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = (uint64_t *)(v3 + 16 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (uint64_t *)(v3 + 16 * v4);
  if (v3)
  {
LABEL_8:
    v8 = (uint64_t *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  while (v6 != v8)
  {
    v9 = v6[1];
    v10 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v10)
    {
      v11 = *v6;
      v12 = *(uint64_t **)v9;
      v13 = 8 * v10;
      do
      {
        v14 = *v12++;
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v11, v14);
        v13 -= 8;
      }
      while (v13);
    }
    v15 = v6 + 2;
    v6 = v5;
    if (v15 != v5)
    {
      v6 = v15;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::UserContentController::forEachUserStyleSheet(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = *(_QWORD *)(result + 56);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (_QWORD *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = *(_QWORD **)(result + 56);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = *(_QWORD **)(result + 56);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = (_QWORD *)(v3 + 16 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (v3)
  {
LABEL_8:
    v8 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  while (v6 != v8)
  {
    v9 = v6[1];
    v10 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v10)
    {
      v11 = *(uint64_t **)v9;
      v12 = 8 * v10;
      do
      {
        v13 = *v11++;
        result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v13);
        v12 -= 8;
      }
      while (v12);
    }
    v14 = v6 + 2;
    v6 = v5;
    if (v14 != v5)
    {
      v6 = v14;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t *WebCore::UserContentController::addUserScript(uint64_t *result, WebCore::DOMWrapperWorld *this, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  WebCore::DOMWrapperWorld *v13;
  _QWORD *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF *v17;
  uint64_t v18;
  WebCore::UserStyleSheet **v19;
  uint64_t v20;
  WebCore::UserStyleSheet *v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;

  ++*(_DWORD *)this;
  v6 = result + 6;
  v5 = result[6];
  if (v5
    || (result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash(result + 6, 8u, 0), (v5 = *v6) != 0))
  {
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = v5 + 16 * v11;
  v13 = *(WebCore::DOMWrapperWorld **)v12;
  if (*(_QWORD *)v12)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      if (v13 == this)
      {
        v27 = (uint64_t *)(v12 + 8);
        if (*(_DWORD *)this == 1)
        {
          WebCore::DOMWrapperWorld::~DOMWrapperWorld(this, this);
          result = (uint64_t *)WTF::fastFree(v37, v38);
        }
        else
        {
          --*(_DWORD *)this;
        }
        goto LABEL_37;
      }
      if (v13 == (WebCore::DOMWrapperWorld *)-1)
        v14 = (_QWORD *)v12;
      v11 = (v11 + v15) & v7;
      v12 = v5 + 16 * v11;
      v13 = *(WebCore::DOMWrapperWorld **)v12;
      ++v15;
    }
    while (*(_QWORD *)v12);
    if (v14)
    {
      *v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v12 = (uint64_t)v14;
    }
  }
  *(_QWORD *)v12 = this;
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *result = 0;
  result[1] = 0;
  v17 = *(WTF **)(v12 + 8);
  *(_QWORD *)(v12 + 8) = result;
  if (v17)
  {
    v18 = *((unsigned int *)v17 + 3);
    if ((_DWORD)v18)
    {
      v19 = *(WebCore::UserStyleSheet ***)v17;
      v20 = 8 * v18;
      do
      {
        v21 = *v19;
        *v19 = 0;
        if (v21)
        {
          WebCore::UserStyleSheet::~UserStyleSheet(v21, v16);
          WTF::fastFree(v22, v23);
        }
        ++v19;
        v20 -= 8;
      }
      while (v20);
    }
    v24 = *(WTF **)v17;
    if (*(_QWORD *)v17)
    {
      *(_QWORD *)v17 = 0;
      *((_DWORD *)v17 + 2) = 0;
      WTF::fastFree(v24, v16);
    }
    result = (uint64_t *)WTF::fastFree(v17, v16);
  }
  v25 = *v6;
  if (*v6)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 > 2 * v30)
      goto LABEL_36;
    goto LABEL_32;
  }
  if (3 * v31 <= 4 * v30)
  {
    if (!(_DWORD)v31)
    {
      v32 = 8;
      goto LABEL_35;
    }
LABEL_32:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_35:
    result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash(v6, v32, (WebCore::DOMWrapperWorld **)v12);
    v12 = (uint64_t)result;
  }
LABEL_36:
  v27 = (uint64_t *)(v12 + 8);
LABEL_37:
  v33 = *v27;
  v34 = *(unsigned int *)(v33 + 12);
  if ((_DWORD)v34 == *(_DWORD *)(v33 + 8))
  {
    result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v33, v34 + 1, (unint64_t)a3);
    a3 = result;
    v34 = *(unsigned int *)(v33 + 12);
  }
  v35 = (_QWORD *)(*(_QWORD *)v33 + 8 * v34);
  v36 = *a3;
  *a3 = 0;
  *v35 = v36;
  *(_DWORD *)(v33 + 12) = v34 + 1;
  return result;
}

WebCore::DOMWrapperWorld **WebCore::UserContentController::removeUserScript(WebCore::DOMWrapperWorld **this, WebCore::DOMWrapperWorld *a2, const WTF::StringImpl **a3)
{
  WebCore::DOMWrapperWorld *v3;
  char **v4;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::DOMWrapperWorld *v11;
  int v12;
  char *v13;
  uint64_t *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::UserStyleSheet **v19;
  WebCore::UserStyleSheet *v20;
  WTF *v21;
  void *v22;
  char *v24;
  char *v25;
  int v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;

  v4 = (char **)(this + 6);
  v3 = this[6];
  if (v3)
  {
    v6 = *((_DWORD *)v3 - 2);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = (WebCore::DOMWrapperWorld *)*((_QWORD *)v3 + 2 * v10);
    if (v11 != a2)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = (WebCore::DOMWrapperWorld *)*((_QWORD *)v3 + 2 * v10);
        ++v12;
        if (v11 == a2)
          goto LABEL_8;
      }
      v10 = *((unsigned int *)v3 - 1);
    }
LABEL_8:
    if (v10 != *((_DWORD *)v3 - 1))
    {
      v13 = (char *)v3 + 16 * v10;
      v14 = (uint64_t *)*((_QWORD *)v13 + 1);
      v15 = *((_DWORD *)v14 + 3);
      v16 = (v15 - 1);
      if (v15 - 1 < 0)
      {
LABEL_19:
        if (!v15)
        {
          v24 = *v4;
          if (!*v4 || (v24 += 16 * *((unsigned int *)v24 - 1), v24 != v13))
          {
            if (v24 != v13)
            {
              this = (WebCore::DOMWrapperWorld **)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::customDeleteBucket((WebCore::DOMWrapperWorld **)v13, a2);
              ++*((_DWORD *)*v4 - 4);
              v25 = *v4;
              v26 = *v4 ? *((_DWORD *)v25 - 3) - 1 : -1;
              *((_DWORD *)v25 - 3) = v26;
              v27 = *v4;
              if (*v4)
              {
                v28 = 6 * *((_DWORD *)v27 - 3);
                v29 = *((_DWORD *)v27 - 1);
                if (v28 < v29 && v29 >= 9)
                  return WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash(v4, v29 >> 1, 0);
              }
            }
          }
        }
      }
      else
      {
        v17 = 8 * ~v16;
        while (v16 < *((unsigned int *)v14 + 3))
        {
          this = (WebCore::DOMWrapperWorld **)WTF::equal(*(WTF **)(*(_QWORD *)(*v14 + 8 * v16) + 8), *a3, (const WTF::StringImpl *)a3);
          if ((_DWORD)this)
          {
            v18 = *v14;
            v19 = (WebCore::UserStyleSheet **)(*v14 + 8 * v16);
            v20 = *v19;
            *v19 = 0;
            if (v20)
            {
              WebCore::UserStyleSheet::~UserStyleSheet(v20, a2);
              WTF::fastFree(v21, v22);
            }
            this = (WebCore::DOMWrapperWorld **)memmove(v19, v19 + 1, v17 + *v14 + 8 * *((unsigned int *)v14 + 3) - v18);
            --*((_DWORD *)v14 + 3);
          }
          v17 += 8;
          if ((uint64_t)v16-- <= 0)
          {
            v15 = *((_DWORD *)v14 + 3);
            goto LABEL_19;
          }
        }
        __break(0xC471u);
      }
    }
  }
  return this;
}

WebCore::DOMWrapperWorld **WebCore::UserContentController::removeUserScripts(WebCore::DOMWrapperWorld **this, WebCore::DOMWrapperWorld *a2)
{
  WebCore::DOMWrapperWorld *v2;
  uint64_t *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::DOMWrapperWorld *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v3 = (uint64_t *)(this + 6);
  v2 = this[6];
  if (v2)
  {
    v4 = *((_DWORD *)v2 - 2);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = (WebCore::DOMWrapperWorld *)*((_QWORD *)v2 + 2 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = (WebCore::DOMWrapperWorld *)*((_QWORD *)v2 + 2 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_8;
      }
      v8 = *((unsigned int *)v2 - 1);
    }
LABEL_8:
    if (v8 != *((_DWORD *)v2 - 1))
    {
      this = (WebCore::DOMWrapperWorld **)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::customDeleteBucket((WebCore::DOMWrapperWorld **)v2 + 2 * v8, a2);
      ++*(_DWORD *)(*v3 - 16);
      v11 = *v3;
      v12 = *v3 ? *(_DWORD *)(v11 - 12) - 1 : -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *v3;
      if (*v3)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          return WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash(v3, v15 >> 1, 0);
      }
    }
  }
  return this;
}

uint64_t *WebCore::UserContentController::addUserStyleSheet(uint64_t *result, WebCore::DOMWrapperWorld *this, uint64_t *a3, int a4)
{
  WebCore::UserContentProvider *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  WebCore::DOMWrapperWorld *v16;
  _QWORD *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  WebCore::UserStyleSheet **v22;
  uint64_t v23;
  WebCore::UserStyleSheet *v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  WTF *v40;
  void *v41;

  v7 = (WebCore::UserContentProvider *)result;
  ++*(_DWORD *)this;
  v9 = result + 7;
  v8 = result[7];
  if (v8
    || (result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash(result + 7, 8u, 0), (v8 = *v9) != 0))
  {
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = v8 + 16 * v14;
  v16 = *(WebCore::DOMWrapperWorld **)v15;
  if (*(_QWORD *)v15)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == this)
      {
        v30 = (uint64_t *)(v15 + 8);
        if (*(_DWORD *)this == 1)
        {
          WebCore::DOMWrapperWorld::~DOMWrapperWorld(this, this);
          result = (uint64_t *)WTF::fastFree(v40, v41);
        }
        else
        {
          --*(_DWORD *)this;
        }
        goto LABEL_37;
      }
      if (v16 == (WebCore::DOMWrapperWorld *)-1)
        v17 = (_QWORD *)v15;
      v14 = (v14 + v18) & v10;
      v15 = v8 + 16 * v14;
      v16 = *(WebCore::DOMWrapperWorld **)v15;
      ++v18;
    }
    while (*(_QWORD *)v15);
    if (v17)
    {
      *v17 = 0;
      v17[1] = 0;
      --*(_DWORD *)(*v9 - 16);
      v15 = (uint64_t)v17;
    }
  }
  *(_QWORD *)v15 = this;
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *result = 0;
  result[1] = 0;
  v20 = *(WTF **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = result;
  if (v20)
  {
    v21 = *((unsigned int *)v20 + 3);
    if ((_DWORD)v21)
    {
      v22 = *(WebCore::UserStyleSheet ***)v20;
      v23 = 8 * v21;
      do
      {
        v24 = *v22;
        *v22 = 0;
        if (v24)
        {
          WebCore::UserStyleSheet::~UserStyleSheet(v24, v19);
          WTF::fastFree(v25, v26);
        }
        ++v22;
        v23 -= 8;
      }
      while (v23);
    }
    v27 = *(WTF **)v20;
    if (*(_QWORD *)v20)
    {
      *(_QWORD *)v20 = 0;
      *((_DWORD *)v20 + 2) = 0;
      WTF::fastFree(v27, v19);
    }
    result = (uint64_t *)WTF::fastFree(v20, v19);
  }
  v28 = *v9;
  if (*v9)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v31 = *v9;
  if (*v9)
    v32 = *(_DWORD *)(v31 - 12);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(v31 - 16) + v32);
  v34 = *(unsigned int *)(v31 - 4);
  if (v34 > 0x400)
  {
    if (v34 > 2 * v33)
      goto LABEL_36;
    goto LABEL_32;
  }
  if (3 * v34 <= 4 * v33)
  {
    if (!(_DWORD)v34)
    {
      v35 = 8;
      goto LABEL_35;
    }
LABEL_32:
    v35 = (_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34));
LABEL_35:
    result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash(v9, v35, (WebCore::DOMWrapperWorld **)v15);
    v15 = (uint64_t)result;
  }
LABEL_36:
  v30 = (uint64_t *)(v15 + 8);
LABEL_37:
  v36 = *v30;
  v37 = *(unsigned int *)(v36 + 12);
  if ((_DWORD)v37 == *(_DWORD *)(v36 + 8))
  {
    result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v36, v37 + 1, (unint64_t)a3);
    a3 = result;
    v37 = *(unsigned int *)(v36 + 12);
  }
  v38 = (uint64_t *)(*(_QWORD *)v36 + 8 * v37);
  v39 = *a3;
  *a3 = 0;
  *v38 = v39;
  *(_DWORD *)(v36 + 12) = v37 + 1;
  if (!a4)
    return WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(v7);
  return result;
}

uint64_t *WebCore::UserContentController::removeUserStyleSheet(uint64_t *this, WebCore::DOMWrapperWorld *a2, const WTF::StringImpl **a3)
{
  uint64_t v3;
  uint64_t *v4;
  WebCore::UserContentProvider *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::DOMWrapperWorld *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _QWORD *v23;
  WebCore::UserStyleSheet *v24;
  WTF *v25;
  void *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;

  v4 = this + 7;
  v3 = this[7];
  if (v3)
  {
    v6 = (WebCore::UserContentProvider *)this;
    v7 = *(_DWORD *)(v3 - 8);
    v8 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::DOMWrapperWorld **)(v3 + 16 * v11);
    if (v12 != a2)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::DOMWrapperWorld **)(v3 + 16 * v11);
        ++v13;
        if (v12 == a2)
          goto LABEL_8;
      }
      v11 = *(unsigned int *)(v3 - 4);
    }
LABEL_8:
    if (v11 != *(_DWORD *)(v3 - 4))
    {
      v14 = v3 + 16 * v11;
      v15 = *(uint64_t **)(v14 + 8);
      v16 = *((_DWORD *)v15 + 3) - 1;
      if (v16 >= 0)
      {
        v17 = 0;
        while (2)
        {
          v18 = v16;
          v19 = 8 * v16 + 8;
          v20 = v16 + 1;
          while (1)
          {
            if (v18 >= *((unsigned int *)v15 + 3))
            {
              __break(0xC471u);
              return this;
            }
            this = (uint64_t *)WTF::equal(*(WTF **)(*(_QWORD *)(*v15 + 8 * v18) + 8), *a3, (const WTF::StringImpl *)a3);
            if ((_DWORD)this)
              break;
            --v18;
            v19 -= 8;
            if (--v20 <= 0)
            {
              if ((v17 & 1) == 0)
                return this;
              v27 = *((_DWORD *)v15 + 3);
              goto LABEL_22;
            }
          }
          v22 = *v15;
          v23 = (_QWORD *)(*v15 + v19);
          v24 = (WebCore::UserStyleSheet *)*(v23 - 1);
          *(v23 - 1) = 0;
          if (v24)
          {
            WebCore::UserStyleSheet::~UserStyleSheet(v24, v21);
            WTF::fastFree(v25, v26);
          }
          this = (uint64_t *)memmove(v23 - 1, v23, *v15 + 8 * *((unsigned int *)v15 + 3) - v22 - v19);
          v27 = *((_DWORD *)v15 + 3) - 1;
          *((_DWORD *)v15 + 3) = v27;
          v16 = v18 - 1;
          v17 = 1;
          if ((int)v18 > 0)
            continue;
          break;
        }
LABEL_22:
        if (!v27)
        {
          v28 = *v4;
          if (!*v4 || (v28 += 16 * *(unsigned int *)(v28 - 4), v28 != v14))
          {
            if (v28 != v14)
            {
              WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::customDeleteBucket((WebCore::DOMWrapperWorld **)v14, v21);
              ++*(_DWORD *)(*v4 - 16);
              v29 = *v4;
              if (*v4)
                v30 = *(_DWORD *)(v29 - 12) - 1;
              else
                v30 = -1;
              *(_DWORD *)(v29 - 12) = v30;
              v31 = *v4;
              if (*v4)
              {
                v32 = 6 * *(_DWORD *)(v31 - 12);
                v33 = *(_DWORD *)(v31 - 4);
                if (v32 < v33 && v33 >= 9)
                  WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash(v4, v33 >> 1, 0);
              }
            }
          }
        }
        return WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(v6);
      }
    }
  }
  return this;
}

uint64_t *WebCore::UserContentController::removeUserStyleSheets(uint64_t *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v2;
  uint64_t *v3;
  WebCore::UserContentProvider *v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::DOMWrapperWorld *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v3 = this + 7;
  v2 = this[7];
  if (v2)
  {
    v4 = (WebCore::UserContentProvider *)this;
    v5 = *(_DWORD *)(v2 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebCore::DOMWrapperWorld **)(v2 + 16 * v9);
    if (v10 != a2)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WebCore::DOMWrapperWorld **)(v2 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_8;
      }
      v9 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v9 != *(_DWORD *)(v2 - 4))
    {
      WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::customDeleteBucket((WebCore::DOMWrapperWorld **)(v2 + 16 * v9), a2);
      ++*(_DWORD *)(*v3 - 16);
      v12 = *v3;
      if (*v3)
        v13 = *(_DWORD *)(v12 - 12) - 1;
      else
        v13 = -1;
      *(_DWORD *)(v12 - 12) = v13;
      v14 = *v3;
      if (*v3)
      {
        v15 = 6 * *(_DWORD *)(v14 - 12);
        v16 = *(_DWORD *)(v14 - 4);
        if (v15 < v16 && v16 >= 9)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash(v3, v16 >> 1, 0);
      }
      return WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(v4);
    }
  }
  return this;
}

uint64_t *WebCore::UserContentController::removeAllUserContent(WebCore::UserContentController *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *result;

  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 6) = 0;
    WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(v3, a2);
  }
  result = (uint64_t *)*((_QWORD *)this + 7);
  if (result)
  {
    if (*((_DWORD *)result - 3))
    {
      *((_QWORD *)this + 7) = 0;
      WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable((uint64_t)result, a2);
      return WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(this);
    }
  }
  return result;
}

uint64_t WebCore::UserContentProvider::invalidateAllRegisteredUserMessageHandlerInvalidationClients(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v1 = this;
  v2 = *(_QWORD *)(this + 32);
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v14 = 0;
    v5 = *(uint64_t **)(this + 32);
    goto LABEL_45;
  }
  v9 = 8 * v4;
  v5 = *(uint64_t **)(this + 32);
  while ((unint64_t)(*v5 + 1) <= 1)
  {
    ++v5;
    v9 -= 8;
    if (!v9)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v14 = *(unsigned int *)(v2 - 4);
LABEL_45:
  v6 = (uint64_t *)(v2 + 8 * v14);
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*v5 + 8))
    {
      v7 = v5 + 1;
      v5 = v3;
      if (v7 != v3)
      {
        v5 = v7;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v8 = (uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4));
  else
    v8 = 0;
  while (v5 != v8)
  {
    v11 = *v5;
    v10 = v5 + 1;
    this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 8) + 16))(*(_QWORD *)(v11 + 8), v1);
    v12 = v3;
    if (v10 != v3)
    {
      v12 = v10;
      while ((unint64_t)(*v12 + 1) <= 1)
      {
        if (++v12 == v3)
        {
          v12 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v12 != v6)
    {
      v5 = v12;
      if (!*(_QWORD *)(*v12 + 8))
      {
        while (1)
        {
          v13 = v5 + 1;
          v5 = v3;
          if (v13 != v3)
          {
            v5 = v13;
            while ((unint64_t)(*v5 + 1) <= 1)
            {
              if (++v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*v5 + 8))
            goto LABEL_40;
        }
        v5 = v6;
      }
    }
LABEL_40:
    ++*(_DWORD *)(v1 + 40);
  }
  return this;
}

uint64_t *WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *result;
  if (!*result)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_3;
  }
  v3 = (uint64_t *)*result;
  if ((_DWORD)v4)
  {
    v9 = 8 * v4;
    v3 = (uint64_t *)*result;
    while ((unint64_t)(*v3 + 1) <= 1)
    {
      ++v3;
      v9 -= 8;
      if (!v9)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_4:
  *a2 = result;
  a2[1] = v3;
  a2[2] = v5;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v6 = (uint64_t *)(v2 + 8 * v7);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  a2[3] = v6;
  a2[4] = (uint64_t *)(v2 + 8 * v7);
LABEL_7:
  while (v3 != v6 && !*(_QWORD *)(*v3 + 8))
  {
    v8 = v3 + 1;
    a2[1] = v3 + 1;
    v3 = v5;
    if (v8 != v5)
    {
      v3 = v8;
      while ((unint64_t)(*v3 + 1) <= 1)
      {
        a2[1] = ++v3;
        if (v3 == v5)
        {
          v3 = v5;
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *result;
  if (*result)
  {
    v4 = *(unsigned int *)(v2 - 4);
    v3 = (uint64_t *)(v2 + 8 * v4);
    *a2 = result;
    a2[1] = v3;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *a2 = result;
    a2[1] = 0;
  }
  a2[2] = v3;
  a2[3] = v3;
  a2[4] = (uint64_t *)(v2 + 8 * v4);
  return result;
}

_QWORD *WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result[2];
  v2 = result[1] + 8;
  result[1] = v2;
  if (v2 != v1)
  {
    while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
    {
      v2 += 8;
      result[1] = v2;
      if (v2 == v1)
      {
        v2 = v1;
        break;
      }
    }
  }
  v3 = result[3];
LABEL_6:
  while (v2 != v3 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v4 = v2 + 8;
    result[1] = v2 + 8;
    v2 = v1;
    if (v4 != v1)
    {
      v2 = v4;
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v1)
        {
          v2 = v1;
          goto LABEL_6;
        }
      }
    }
  }
  ++*(_DWORD *)(*result + 8);
  return result;
}

uint64_t *WebCore::UserContentURLPattern::UserContentURLPattern(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  WTF::StringImpl **v10;
  uint64_t v11;
  char v12;
  uint64_t *result;
  int v14;
  BOOL v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  int v20;
  int16x8_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  int v33;
  int16x8_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int8 *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  __int8 *v45;
  size_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int16x8_t *v53;
  int16x8_t v54;
  int16x8_t *v55;
  int8x16_t v56;
  int16x8_t *v57;
  char *v58;
  int16x8_t v59;
  __int16 *v60;
  uint64_t v61;
  unint64_t v62;
  int16x8_t v63;
  int16x8_t *v64;
  int8x16_t v65;
  int16x8_t *v66;
  __int8 *v67;
  int16x8_t v68;
  int16x8_t *v69;
  int16x8_t *v70;
  int16x8_t v71;
  int16x8_t *v72;
  int8x16_t v73;
  int16x8_t *v74;
  char *v75;
  int16x8_t v76;
  __int16 *v77;
  unint64_t v78;
  int16x8_t v79;
  int8x16_t v80;
  int16x8_t *v81;
  __int8 *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  int16x8_t *v88;
  int16x8_t v89;
  int16x8_t *v90;
  int8x16_t v91;
  int16x8_t *v92;
  char *v93;
  int16x8_t v94;
  __int16 *v95;
  int16x8_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;

  if ((a3 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  a1[1] = 0;
  v10 = (WTF::StringImpl **)(a1 + 1);
  a1[2] = 0;
  *((_WORD *)a1 + 12) = 1;
  v11 = *a1;
  if (!*a1 || (v14 = *(_DWORD *)(v11 + 4)) == 0)
  {
    v12 = 2;
LABEL_5:
    *((_BYTE *)a1 + 24) = v12;
    return a1;
  }
  if (v14 != 4)
    goto LABEL_8;
  v47 = *(_QWORD *)(v11 + 8);
  if ((*(_BYTE *)(v11 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v47 & 0xFFDF) == 0x46
      && (*(_WORD *)(v47 + 2) & 0xFFDF) == 0x49
      && (*(_WORD *)(v47 + 4) & 0xFFDF) == 0x4C)
    {
      v48 = *(unsigned __int16 *)(v47 + 6);
      goto LABEL_68;
    }
LABEL_8:
    v15 = 0;
    goto LABEL_9;
  }
  if ((*(_BYTE *)v47 & 0xDF) != 0x46 || (*(_BYTE *)(v47 + 1) & 0xDF) != 0x49 || (*(_BYTE *)(v47 + 2) & 0xDF) != 0x4C)
    goto LABEL_8;
  v48 = *(unsigned __int8 *)(v47 + 3);
LABEL_68:
  v15 = (v48 & 0xFFFFFFDF) == 69;
LABEL_9:
  if ((a5 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  v17 = *v10;
  *v10 = v98;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (!v15 && (!*v10 || !*((_DWORD *)*v10 + 1)))
  {
    v12 = 3;
    goto LABEL_5;
  }
  WebCore::UserContentURLPattern::normalizeHostAndSetMatchSubdomains((WebCore::UserContentURLPattern *)a1);
  v19 = a1[1];
  if (!v19)
    goto LABEL_142;
  v20 = *(_DWORD *)(v19 + 16);
  v21 = *(int16x8_t **)(v19 + 8);
  v22 = *(unsigned int *)(v19 + 4);
  if ((v20 & 4) != 0)
  {
    if (!(_DWORD)v22)
      goto LABEL_37;
    v23 = 16;
    if (v22 < 0x10)
      v23 = *(unsigned int *)(v19 + 4);
    v24 = v23;
    v25 = *(_BYTE **)(v19 + 8);
    do
    {
      if (*v25 == 42)
        goto LABEL_25;
      ++v25;
      --v24;
    }
    while (v24);
    if (v22 >= 0x11)
    {
      v25 = memchr(&v21->i8[v23], 42, v22 - v23);
      if (v25)
      {
LABEL_25:
        v26 = v25 - (_BYTE *)v21;
        goto LABEL_26;
      }
    }
  }
  else
  {
    if (!(_DWORD)v22)
      goto LABEL_37;
    v53 = (int16x8_t *)((char *)v21 + 2 * v22);
    if (v22 <= 0x1F)
    {
      v61 = 2 * v22;
      v60 = *(__int16 **)(v19 + 8);
      while (*v60 != 42)
      {
        ++v60;
        v61 -= 2;
        if (!v61)
          goto LABEL_27;
      }
LABEL_100:
      if (v60 != (__int16 *)v53)
      {
        v26 = ((char *)v60 - (char *)v21) >> 1;
LABEL_26:
        if (v26 != -1)
          goto LABEL_86;
      }
    }
    else
    {
      v54.i64[0] = 0x2A002A002A002ALL;
      v54.i64[1] = 0x2A002A002A002ALL;
      v55 = *(int16x8_t **)(v19 + 8);
      do
      {
        v56 = (int8x16_t)vceqq_s16(*v55, v54);
        LOWORD(v18) = vmaxvq_u16((uint16x8_t)v56);
        if (v18)
          goto LABEL_99;
        v57 = v55 + 1;
        v58 = &v55[1].i8[14];
        ++v55;
      }
      while (v58 < (char *)v53);
      if (v57 < v53)
      {
        v59.i64[0] = 0x2A002A002A002ALL;
        v59.i64[1] = 0x2A002A002A002ALL;
        v56 = (int8x16_t)vceqq_s16(v53[-1], v59);
        v59.i16[0] = vmaxvq_u16((uint16x8_t)v56);
        if (v59.i32[0])
        {
          v55 = v53 - 1;
LABEL_99:
          v60 = &v55->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v56))];
          goto LABEL_100;
        }
      }
    }
  }
LABEL_27:
  if ((v20 & 4) != 0)
  {
    v27 = 16;
    if (v22 < 0x10)
      v27 = v22;
    v28 = v27;
    v29 = v21;
    do
    {
      if (*v29 == 64)
        goto LABEL_35;
      ++v29;
      --v28;
    }
    while (v28);
    if (v22 >= 0x11)
    {
      v29 = memchr(&v21->i8[v27], 64, v22 - v27);
      if (v29)
      {
LABEL_35:
        v30 = v29 - (_BYTE *)v21;
        goto LABEL_36;
      }
    }
  }
  else
  {
    v88 = (int16x8_t *)((char *)v21 + 2 * v22);
    if (v22 <= 0x1F)
    {
      v97 = 2 * v22;
      v95 = (__int16 *)v21;
      while (*v95 != 64)
      {
        ++v95;
        v97 -= 2;
        if (!v97)
          goto LABEL_37;
      }
LABEL_166:
      if (v95 != (__int16 *)v88)
      {
        v30 = ((char *)v95 - (char *)v21) >> 1;
LABEL_36:
        if (v30 != -1)
          goto LABEL_86;
      }
    }
    else
    {
      v89.i64[0] = 0x40004000400040;
      v89.i64[1] = 0x40004000400040;
      v90 = v21;
      do
      {
        v91 = (int8x16_t)vceqq_s16(*v90, v89);
        LOWORD(v18) = vmaxvq_u16((uint16x8_t)v91);
        if (v18)
          goto LABEL_165;
        v92 = v90 + 1;
        v93 = &v90[1].i8[14];
        ++v90;
      }
      while (v93 < (char *)v88);
      if (v92 < v88)
      {
        v94.i64[0] = 0x40004000400040;
        v94.i64[1] = 0x40004000400040;
        v91 = (int8x16_t)vceqq_s16(v88[-1], v94);
        v94.i16[0] = vmaxvq_u16((uint16x8_t)v91);
        if (v94.i32[0])
        {
          v90 = v88 - 1;
LABEL_165:
          v95 = &v90->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v91))];
          goto LABEL_166;
        }
      }
    }
  }
LABEL_37:
  result = (uint64_t *)WTF::StringImpl::startsWith();
  v32 = *v10;
  if (!(_DWORD)result)
  {
    if (!v32)
      goto LABEL_142;
    v34 = (int16x8_t *)*((_QWORD *)v32 + 1);
    v49 = *((unsigned int *)v32 + 1);
    if ((*((_BYTE *)v32 + 16) & 4) != 0)
    {
      if (!(_DWORD)v49)
        goto LABEL_142;
      v50 = 16;
      if (v49 < 0x10)
        v50 = v49;
      v51 = v50;
      v44 = v34;
      while (*v44 != 58)
      {
        ++v44;
        if (!--v51)
        {
          if (v49 < 0x11)
            goto LABEL_142;
          v45 = &v34->i8[v50];
          v46 = v49 - v50;
          goto LABEL_83;
        }
      }
LABEL_84:
      v52 = v44 - (_BYTE *)v34;
LABEL_85:
      if (v52 != -1)
        goto LABEL_86;
LABEL_142:
      if ((a7 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      v85 = 0;
      v86 = (WTF::StringImpl *)a1[2];
      a1[2] = 0;
      if (v86)
      {
        if (*(_DWORD *)v86 == 2)
          WTF::StringImpl::destroy(v86, v84);
        else
          *(_DWORD *)v86 -= 2;
        v85 = a1[2];
      }
      v12 = 5;
      if (v85)
      {
        if (WTF::StringImpl::startsWith())
          v12 = 0;
        else
          v12 = 5;
      }
      goto LABEL_5;
    }
    if (!(_DWORD)v49)
      goto LABEL_142;
    v62 = (unint64_t)v34 + 2 * v49;
    if (v49 > 0x1F)
    {
      v63.i64[0] = 0x3A003A003A003ALL;
      v63.i64[1] = 0x3A003A003A003ALL;
      v64 = v34;
      do
      {
        v65 = (int8x16_t)vceqq_s16(*v64, v63);
        LOWORD(v31) = vmaxvq_u16((uint16x8_t)v65);
        if (v31)
          goto LABEL_114;
        v66 = v64 + 1;
        v67 = &v64[1].i8[14];
        ++v64;
      }
      while ((unint64_t)v67 < v62);
      if ((unint64_t)v66 < v62)
      {
        v68.i64[0] = 0x3A003A003A003ALL;
        v68.i64[1] = 0x3A003A003A003ALL;
        v65 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v62 - 16), v68);
        v68.i16[0] = vmaxvq_u16((uint16x8_t)v65);
        if (v68.i32[0])
        {
          v64 = (int16x8_t *)(v62 - 16);
LABEL_114:
          v69 = (int16x8_t *)((char *)v64
                            + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v65)));
          goto LABEL_115;
        }
      }
      goto LABEL_142;
    }
    v83 = 2 * v49;
    v69 = v34;
    while (v69->i16[0] != 58)
    {
      v69 = (int16x8_t *)((char *)v69 + 2);
      v83 -= 2;
      if (!v83)
        goto LABEL_142;
    }
LABEL_115:
    if (v69 == (int16x8_t *)v62)
      goto LABEL_142;
    v52 = ((char *)v69 - (char *)v34) >> 1;
    goto LABEL_85;
  }
  if (!v32)
    goto LABEL_86;
  v33 = *((_DWORD *)v32 + 4);
  v34 = (int16x8_t *)*((_QWORD *)v32 + 1);
  v35 = *((unsigned int *)v32 + 1);
  if ((v33 & 4) != 0)
  {
    if ((_DWORD)v35)
    {
      v36 = 16;
      if (v35 < 0x10)
        v36 = v35;
      v37 = v36;
      result = (uint64_t *)v34;
      do
      {
        if (*(_BYTE *)result == 93)
          goto LABEL_48;
        result = (uint64_t *)((char *)result + 1);
        --v37;
      }
      while (v37);
      if (v35 >= 0x11)
      {
        result = (uint64_t *)memchr(&v34->i8[v36], 93, v35 - v36);
        if (result)
        {
LABEL_48:
          v38 = (char *)result - (char *)v34;
          goto LABEL_49;
        }
      }
    }
    goto LABEL_86;
  }
  if (!(_DWORD)v35)
  {
LABEL_86:
    v12 = 4;
    goto LABEL_5;
  }
  v70 = (int16x8_t *)((char *)v34 + 2 * v35);
  if (v35 > 0x1F)
  {
    v71.i64[0] = 0x5D005D005D005DLL;
    v71.i64[1] = 0x5D005D005D005DLL;
    v72 = v34;
    do
    {
      v73 = (int8x16_t)vceqq_s16(*v72, v71);
      LOWORD(v31) = vmaxvq_u16((uint16x8_t)v73);
      if (v31)
        goto LABEL_125;
      v74 = v72 + 1;
      v75 = &v72[1].i8[14];
      ++v72;
    }
    while (v75 < (char *)v70);
    if (v74 < v70)
    {
      v76.i64[0] = 0x5D005D005D005DLL;
      v76.i64[1] = 0x5D005D005D005DLL;
      v73 = (int8x16_t)vceqq_s16(v70[-1], v76);
      v76.i16[0] = vmaxvq_u16((uint16x8_t)v73);
      if (v76.i32[0])
      {
        v72 = v70 - 1;
LABEL_125:
        v77 = &v72->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v73))];
        goto LABEL_126;
      }
    }
    goto LABEL_86;
  }
  v87 = 2 * v35;
  v77 = (__int16 *)v34;
  v12 = 4;
  while (*v77 != 93)
  {
    ++v77;
    v87 -= 2;
    if (!v87)
      goto LABEL_5;
  }
LABEL_126:
  if (v77 == (__int16 *)v70)
    goto LABEL_86;
  v38 = ((char *)v77 - (char *)v34) >> 1;
LABEL_49:
  if (v38 == -1)
    goto LABEL_86;
  v39 = v38;
  if ((v33 & 4) != 0)
  {
    if (v35 <= v38)
      goto LABEL_142;
    v40 = &v34->i8[v38];
    v41 = v35 - v39;
    v42 = 16;
    if (v41 < 0x10)
      v42 = v41;
    if (v42)
    {
      v43 = v42;
      v44 = v40;
      while (*v44 != 58)
      {
        ++v44;
        if (!--v43)
          goto LABEL_58;
      }
    }
    else
    {
LABEL_58:
      if (v41 < 0x11)
        goto LABEL_142;
      v45 = &v40[v42];
      v46 = v41 - v42;
LABEL_83:
      v44 = memchr(v45, 58, v46);
      if (!v44)
        goto LABEL_142;
    }
    goto LABEL_84;
  }
  if (v35 <= v38)
    goto LABEL_142;
  v69 = (int16x8_t *)((char *)v34 + 2 * v38);
  v62 = (unint64_t)v34 + 2 * v35;
  v78 = v62 - (_QWORD)v69;
  if ((uint64_t)(v62 - (_QWORD)v69) > -2)
  {
    if (v78 <= 0x3E)
    {
      while (v69->i16[0] != 58)
      {
        v69 = (int16x8_t *)((char *)v69 + 2);
        v78 -= 2;
        if (!v78)
          goto LABEL_142;
      }
    }
    else
    {
      if ((unint64_t)&v69->u64[1] + 6 >= v62)
      {
        v81 = v69;
LABEL_169:
        if ((unint64_t)v81 >= v62)
          goto LABEL_142;
        v69 = (int16x8_t *)(v62 - 16);
        v96.i64[0] = 0x3A003A003A003ALL;
        v96.i64[1] = 0x3A003A003A003ALL;
        v80 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v62 - 16), v96);
        v96.i16[0] = vmaxvq_u16((uint16x8_t)v80);
        if (!v96.i32[0])
          goto LABEL_142;
      }
      else
      {
        v79.i64[0] = 0x3A003A003A003ALL;
        v79.i64[1] = 0x3A003A003A003ALL;
        while (1)
        {
          v80 = (int8x16_t)vceqq_s16(*v69, v79);
          LOWORD(v31) = vmaxvq_u16((uint16x8_t)v80);
          if (v31)
            break;
          v81 = v69 + 1;
          v82 = &v69[1].i8[14];
          ++v69;
          if ((unint64_t)v82 >= v62)
            goto LABEL_169;
        }
      }
      v69 = (int16x8_t *)((char *)v69
                        + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v80)));
    }
    goto LABEL_115;
  }
  __break(1u);
  return result;
}

uint64_t *WebCore::UserContentURLPattern::normalizeHostAndSetMatchSubdomains(WebCore::UserContentURLPattern *this)
{
  uint64_t *v2;
  uint64_t *result;
  WTF::StringImpl *v4;
  uint64_t v5;

  v2 = (uint64_t *)((char *)this + 8);
  if (MEMORY[0x19AEA53F4](*((_QWORD *)this + 1), "*", 1))
  {
    result = WTF::String::operator=(v2, MEMORY[0x1E0CBF738]);
    *((_BYTE *)this + 25) = 1;
  }
  else if (*v2 && WTF::StringImpl::startsWith())
  {
    result = (uint64_t *)*v2;
    if (*v2)
    {
      WTF::StringImpl::substring((WTF::StringImpl *)result);
      result = (uint64_t *)*v2;
      *v2 = v5;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      *v2 = 0;
    }
    *((_BYTE *)this + 25) = 1;
  }
  else
  {
    result = (uint64_t *)WTF::equalLettersIgnoringASCIICase((uint64_t *)this, "file", 5uLL);
    if ((_DWORD)result)
    {
      result = (uint64_t *)WTF::equalLettersIgnoringASCIICase(v2, "localhost", 0xAuLL);
      if ((_DWORD)result)
        return WTF::String::operator=(v2, MEMORY[0x1E0CBF738]);
    }
  }
  return result;
}

uint64_t WebCore::UserContentURLPattern::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (a1 == a2)
    return 1;
  if (*(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)
    || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25))
  {
    return 0;
  }
  result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if ((_DWORD)result)
  {
    result = WTF::equal(*(WTF **)(a1 + 8), *(const WTF::StringImpl **)(a2 + 8), v6);
    if ((_DWORD)result)
      return WTF::equal(*(WTF **)(a1 + 16), *(const WTF::StringImpl **)(a2 + 16), v7);
  }
  return result;
}

uint64_t WebCore::UserContentURLPattern::parse(uint64_t a1, const char *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  double v12;
  double v13;
  float v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  double v23;
  double v24;
  float v25;
  double v26;
  double v27;
  float v28;
  double v29;
  double v30;
  float v31;
  WTF::String *v32;
  unsigned int v33;
  uint64_t result;
  unint64_t v35;
  const char *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  uint64_t v45;
  const char *v46;
  unint64_t v47;
  WTF::StringImpl *v48;
  const char *v49;
  unint64_t v50;

  v49 = a2;
  v50 = a3;
  v4 = WTF::StringView::find();
  if (v4 == -1)
    return 2;
  v5 = v4;
  if ((_DWORD)v50)
  {
    if (v50 <= v4)
    {
      v6 = v49;
      v7 = v50;
    }
    else
    {
      v6 = v49;
      if (BYTE4(v50))
        v7 = v4 | 0x100000000;
      else
        v7 = v4;
    }
  }
  else
  {
    v7 = 0x100000000;
    v6 = "";
  }
  v46 = v6;
  v47 = v7;
  WTF::StringView::toString((uint64_t *)&v48, (WTF::StringView *)&v46);
  v9 = v48;
  v48 = 0;
  v10 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v9;
  if (v10)
  {
    v11 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      v10 = v48;
      v48 = 0;
      if (!v10)
        goto LABEL_10;
      v11 = *(_DWORD *)v10 - 2;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v41);
        goto LABEL_10;
      }
    }
    *(_DWORD *)v10 = v11;
  }
LABEL_10:
  v15 = v5 + 3;
  if ((WTF::equalLettersIgnoringASCIICase((uint64_t *)a1, "file", 5uLL) & 1) == 0 && v15 >= v50)
    return 3;
  v16 = WTF::StringView::find((WTF::StringView *)&v49, 0x2Fu, (int)v5 + 3, v12, v13, v14);
  if (v16 == -1)
    return 5;
  v17 = v16;
  v46 = WTF::StringView::substring((const char *)&v49, v15, (int)v16 - (int)v15);
  v47 = v18;
  WTF::StringView::toString((uint64_t *)&v48, (WTF::StringView *)&v46);
  v20 = *(WTF::StringImpl **)(a1 + 8);
  v21 = v48;
  v48 = 0;
  *(_QWORD *)(a1 + 8) = v21;
  if (v20)
  {
    v22 = *(_DWORD *)v20 - 2;
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::destroy(v20, v19);
      v20 = v48;
      v48 = 0;
      if (!v20)
        goto LABEL_16;
      v22 = *(_DWORD *)v20 - 2;
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v42);
        goto LABEL_16;
      }
    }
    *(_DWORD *)v20 = v22;
  }
LABEL_16:
  *(_BYTE *)(a1 + 25) = 0;
  WebCore::UserContentURLPattern::normalizeHostAndSetMatchSubdomains((WebCore::UserContentURLPattern *)a1);
  if (WTF::String::find((WTF::String *)(a1 + 8), 0x2Au, 0, v23, v24, v25) != -1
    || WTF::String::find((WTF::String *)(a1 + 8), 0x40u, 0, v26, v27, v28) != -1)
  {
    return 4;
  }
  if (*(_QWORD *)(a1 + 8) && WTF::StringImpl::startsWith())
  {
    v45 = WTF::String::find((WTF::String *)(a1 + 8), 0x5Du, 0, v29, v30, v31);
    if (v45 == -1)
      return 4;
    v33 = v45;
    v32 = (WTF::String *)(a1 + 8);
  }
  else
  {
    v32 = (WTF::String *)(a1 + 8);
    v33 = 0;
  }
  result = WTF::String::find(v32, 0x3Au, v33, v29, v30, v31);
  if (result != -1)
    return 4;
  v35 = v50 - v17;
  if (v50 <= v17)
  {
    v35 = 0x100000000;
    v36 = "";
LABEL_25:
    v46 = v36;
    v47 = v35;
    WTF::StringView::toString((uint64_t *)&v48, (WTF::StringView *)&v46);
    v38 = v48;
    v48 = 0;
    v39 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v38;
    if (v39)
    {
      v40 = *(_DWORD *)v39 - 2;
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::destroy(v39, v37);
        v39 = v48;
        v48 = 0;
        if (!v39)
          return 0;
        v40 = *(_DWORD *)v39 - 2;
        if (*(_DWORD *)v39 == 2)
        {
          WTF::StringImpl::destroy(v39, v43);
          return 0;
        }
      }
      *(_DWORD *)v39 = v40;
    }
    return 0;
  }
  if (!v17)
  {
    v36 = v49;
    v35 = v50;
    goto LABEL_25;
  }
  v44 = v50 - (unint64_t)v17;
  if (BYTE4(v50))
  {
    if (v44 >= v35)
    {
      v36 = &v49[v17];
      v35 |= 0x100000000uLL;
      goto LABEL_25;
    }
    goto LABEL_52;
  }
  if (v44 >= v35)
  {
    v36 = &v49[2 * v17];
    goto LABEL_25;
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t WebCore::UserContentURLPattern::originalHost@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  int v4;
  WTF::StringImpl *v5;

  v3 = *(WTF::StringImpl **)(this + 8);
  if (*(_BYTE *)(this + 25))
  {
    if (!v3)
      return WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = *((_DWORD *)v3 + 1);
    if (!v4)
      return WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)v3 += 2;
    if (v4 < 0 || (this = (v4 + 2), __OFADD__(v4, 2)))
    {
      *a2 = 0;
    }
    else
    {
      this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, (*((_DWORD *)v3 + 4) >> 2) & 1, (int8x16_t *)"*.", 2u, (uint64_t)v3, a2);
      if (*a2)
      {
        if (*(_DWORD *)v3 == 2)
          return WTF::StringImpl::destroy(v3, v5);
        *(_DWORD *)v3 -= 2;
        return this;
      }
    }
    __break(0xC471u);
    return this;
  }
  if (v3)
    *(_DWORD *)v3 += 2;
  *a2 = v3;
  return this;
}

uint64_t WebCore::UserContentURLPattern::matchesScheme(WebCore::UserContentURLPattern *this, const WTF::URL *a2)
{
  if (MEMORY[0x19AEA53F4](*(_QWORD *)this, "*", 1))
    return (*((unsigned __int8 *)a2 + 8) >> 1) & 1;
  else
    return WTF::URL::protocolIs();
}

uint64_t WebCore::UserContentURLPattern::matchesScheme(const WTF::StringImpl **this, WTF **a2)
{
  const WTF::StringImpl *v4;
  int v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  int v9;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v5 = MEMORY[0x19AEA53F4](*this, "*", 1);
  v6 = *a2;
  if (v5)
  {
    v7 = 1;
    if ((MEMORY[0x19AEA53F4](v6, "*", 1) & 1) != 0)
      return v7;
    v8 = *a2;
    if (!*a2)
      return 0;
    v9 = *((_DWORD *)v8 + 1);
    if (v9 == 5)
    {
      v11 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
      if ((*((_BYTE *)v8 + 16) & 4) != 0)
      {
        v12 = MEMORY[0x1E0CBF868];
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v11) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104))
          return 0;
        v13 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[1]);
        if (v13 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[2]) != v13
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
        {
          return 0;
        }
        v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[4]);
      }
      else
      {
        v12 = MEMORY[0x1E0CBF868];
        if ((*(unsigned __int16 *)v11 | (32 * (*(unsigned __int16 *)v11 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104))
          return 0;
        v19 = *((unsigned __int16 *)v11 + 1) | (32 * (*((unsigned __int16 *)v11 + 1) - 65 < 0x1A));
        if (v19 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
          || (*((unsigned __int16 *)v11 + 2) | (32 * (*((unsigned __int16 *)v11 + 2) - 65 < 0x1A))) != v19
          || (*((unsigned __int16 *)v11 + 3) | (32 * (*((unsigned __int16 *)v11 + 3) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
        {
          return 0;
        }
        v14 = *((unsigned __int16 *)v11 + 4) | (32 * (*((unsigned __int16 *)v11 + 4) - 65 < 0x1A));
      }
      return v14 == *(unsigned __int8 *)(v12 + 115);
    }
    if (v9 != 4)
      return 0;
    v15 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
    if ((*((_BYTE *)v8 + 16) & 4) != 0)
    {
      v16 = MEMORY[0x1E0CBF868];
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v15) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104))
        return 0;
      v17 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v15[1]);
      if (v17 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v15[2]) != v17)
      {
        return 0;
      }
      v18 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v15[3]);
    }
    else
    {
      v16 = MEMORY[0x1E0CBF868];
      if ((*(unsigned __int16 *)v15 | (32 * (*(unsigned __int16 *)v15 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104))
        return 0;
      v20 = *((unsigned __int16 *)v15 + 1) | (32 * (*((unsigned __int16 *)v15 + 1) - 65 < 0x1A));
      if (v20 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
        || (*((unsigned __int16 *)v15 + 2) | (32 * (*((unsigned __int16 *)v15 + 2) - 65 < 0x1A))) != v20)
      {
        return 0;
      }
      v18 = *((unsigned __int16 *)v15 + 3) | (32 * (*((unsigned __int16 *)v15 + 3) - 65 < 0x1A));
    }
    return v18 == *(unsigned __int8 *)(v16 + 112);
  }
  return WTF::equalIgnoringASCIICase(v6, *this, v4);
}

uint64_t WebCore::UserContentURLPattern::matchesHost(const WTF::StringImpl **this, WTF **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  WTF *v7;
  int v8;
  const WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if ((WTF::equalIgnoringASCIICase(*a2, this[1], a3) & 1) != 0)
    return 1;
  if (!*((_BYTE *)this + 25))
    return 0;
  v6 = this[1];
  if (!v6 || !*((_DWORD *)v6 + 1))
    return 1;
  result = (uint64_t)*a2;
  if (*a2)
  {
    result = WTF::StringImpl::endsWithIgnoringASCIICase();
    if ((_DWORD)result)
    {
      v7 = *a2;
      if (*a2)
        v8 = *((_DWORD *)v7 + 1);
      else
        v8 = 0;
      v9 = this[1];
      if (v9)
      {
        v10 = ~*((_DWORD *)v9 + 1);
        if (v7)
          goto LABEL_12;
      }
      else
      {
        v10 = -1;
        if (v7)
        {
LABEL_12:
          v11 = (v10 + v8);
          if (*((_DWORD *)v7 + 1) <= v11)
          {
            LODWORD(v7) = 0;
          }
          else
          {
            v12 = *((_QWORD *)v7 + 1);
            if ((*((_BYTE *)v7 + 16) & 4) != 0)
              LODWORD(v7) = *(unsigned __int8 *)(v12 + v11);
            else
              LODWORD(v7) = *(unsigned __int16 *)(v12 + 2 * v11);
          }
        }
      }
      return (_DWORD)v7 == 46;
    }
  }
  return result;
}

uint64_t WebCore::UserContentURLPattern::matchesPath(WebCore::UserContentURLPattern *this, const WTF::String *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 16);
    v4 = *(_QWORD *)(v2 + 8);
    v2 = *(unsigned int *)(v2 + 4);
    v5 = (unint64_t)((v3 >> 2) & 1) << 32;
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v10[0] = v4;
  v10[1] = v5 | v2;
  v11 = 0;
  v12 = v7;
  v13 = v8;
  v14 = 0;
  return WebCore::MatchTester::test((WebCore::MatchTester *)v10);
}

uint64_t WebCore::MatchTester::test(WebCore::MatchTester *this)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  __int128 v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int16 *v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  unsigned __int8 *v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v2 = *((_DWORD *)this + 2);
  v3 = *((unsigned int *)this + 4);
  if (v3 >= v2)
  {
    LODWORD(v5) = *((_DWORD *)this + 10);
    LODWORD(v4) = *((_DWORD *)this + 8);
    goto LABEL_24;
  }
  v4 = *((unsigned int *)this + 8);
  v5 = *((unsigned int *)this + 10);
  if (v4 <= v5)
    v6 = v5;
  else
    v6 = v4;
  if (v5 >= v4)
  {
LABEL_24:
    if (v5 >= v4)
    {
      if (v3 < v2)
      {
        v20 = *(_QWORD *)this;
        if (*((_BYTE *)this + 12))
        {
          if (*(_BYTE *)(v20 + v3) == 42)
          {
            v28 = (unsigned __int8 *)(v3 + v20 + 1);
            v29 = v3 + 1;
            while (1)
            {
              *((_DWORD *)this + 4) = v29;
              if (v2 == v29)
                break;
              v30 = *v28++;
              ++v29;
              if (v30 != 42)
              {
LABEL_51:
                LODWORD(v3) = v29 - 1;
                return v3 >= v2;
              }
            }
            goto LABEL_60;
          }
        }
        else if (*(_WORD *)(v20 + 2 * v3) == 42)
        {
          v21 = (unsigned __int16 *)(v20 + 2 * v3 + 2);
          while (v2 - 1 != (_DWORD)v3)
          {
            v22 = *v21++;
            LODWORD(v3) = v3 + 1;
            if (v22 != 42)
              goto LABEL_54;
          }
          goto LABEL_53;
        }
      }
    }
    else
    {
      if (v3 >= v2)
        return 0;
      v17 = v3;
      v18 = *(_QWORD *)this;
      v19 = *((_BYTE *)this + 12) ? *(unsigned __int8 *)(v18 + v17) : *(unsigned __int16 *)(v18 + 2 * v17);
      if (v19 != 42)
        return 0;
      do
      {
        v23 = *((_OWORD *)this + 1);
        v33 = *(_OWORD *)this;
        v34 = v23;
        v35 = *((_OWORD *)this + 2);
        LODWORD(v34) = v23 + 1;
        if (WebCore::MatchTester::test((WebCore::MatchTester *)&v33))
          return 1;
        v24 = *((_DWORD *)this + 10) + 1;
        *((_DWORD *)this + 10) = v24;
      }
      while (v24 < *((_DWORD *)this + 8));
      v2 = *((_DWORD *)this + 2);
      v3 = *((unsigned int *)this + 4);
      if (v3 >= v2)
        return v3 >= v2;
      v25 = *(_QWORD *)this;
      if (!*((_BYTE *)this + 12))
      {
        if (*(_WORD *)(v25 + 2 * v3) != 42)
          return v3 >= v2;
        v26 = (unsigned __int16 *)(v25 + 2 * v3 + 2);
        while (v2 - 1 != (_DWORD)v3)
        {
          v27 = *v26++;
          LODWORD(v3) = v3 + 1;
          if (v27 != 42)
            goto LABEL_54;
        }
LABEL_53:
        LODWORD(v3) = v2;
LABEL_54:
        *((_DWORD *)this + 4) = v3;
        return v3 >= v2;
      }
      if (*(_BYTE *)(v25 + v3) == 42)
      {
        v31 = (unsigned __int8 *)(v3 + v25 + 1);
        v29 = v3 + 1;
        while (1)
        {
          *((_DWORD *)this + 4) = v29;
          if (v2 == v29)
            break;
          v32 = *v31++;
          ++v29;
          if (v32 != 42)
            goto LABEL_51;
        }
LABEL_60:
        LODWORD(v3) = v2;
      }
    }
    return v3 >= v2;
  }
  v7 = 0;
  v8 = *((unsigned __int8 *)this + 12);
  v9 = v5 - v6;
  v10 = *(_QWORD *)this + 2 * v3;
  v11 = *(_QWORD *)this + v3;
  result = v3 + 1 - v2;
  while (1)
  {
    v13 = v7;
    if (v8)
      v14 = *(unsigned __int8 *)(v11 + v7);
    else
      v14 = *(unsigned __int16 *)(v10 + 2 * v7);
    if (v14 == 42)
    {
LABEL_21:
      LODWORD(v3) = v3 + v13;
      LODWORD(v5) = v5 + v13;
      goto LABEL_24;
    }
    v15 = v5 + v13;
    if (*((_BYTE *)this + 36))
      break;
    if (v15 >= v4)
      goto LABEL_62;
    v16 = *(unsigned __int16 *)(*((_QWORD *)this + 3) + 2 * v5 + 2 * v13);
LABEL_16:
    if (v14 != v16)
      goto LABEL_21;
    *((_DWORD *)this + 4) = v3 + v13 + 1;
    *((_DWORD *)this + 10) = v5 + v13 + 1;
    if (!((_DWORD)result + (_DWORD)v13))
    {
      LODWORD(v3) = v2;
      goto LABEL_23;
    }
    v7 = v13 + 1;
    if (!(v9 + v13 + 1))
    {
      LODWORD(v3) = v3 + v7;
LABEL_23:
      LODWORD(v5) = v5 + v13 + 1;
      goto LABEL_24;
    }
  }
  if (v15 < v4)
  {
    v16 = *(unsigned __int8 *)(*((_QWORD *)this + 3) + v5 + v13);
    goto LABEL_16;
  }
LABEL_62:
  __break(1u);
  return result;
}

uint64_t WebCore::matchesWildcardPattern(WebCore *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = *(_DWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 8);
    v3 = *(unsigned int *)(v3 + 4);
    v6 = (unint64_t)((v4 >> 2) & 1) << 32;
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  v11[0] = v5;
  v11[1] = v6 | v3;
  v12 = 0;
  v13 = v8;
  v14 = v9;
  v15 = 0;
  return WebCore::MatchTester::test((WebCore::MatchTester *)v11);
}

uint64_t WebCore::UserContentController::userContentExtensionBackend(WebCore::UserContentController *this)
{
  return (uint64_t)this + 64;
}

double std::__optional_storage_base<WTF::URL,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::URL,false>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  double result;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  if (*(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40))
  {
    if (*(_BYTE *)(a1 + 40))
    {
      v4 = *a2;
      *a2 = 0;
      v5 = *(WTF::StringImpl **)a1;
      *(_QWORD *)a1 = v4;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
      v6 = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = v6 & 0xFFFFFFFE;
      v7 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((v6 >> 1) & 1));
      *(_DWORD *)(a1 + 8) = v7;
      v8 = v7 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
      *(_DWORD *)(a1 + 8) = v8;
      v9 = v8 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
      *(_DWORD *)(a1 + 8) = v9;
      *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v9 & 0x3F;
      *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
      result = *(double *)((char *)a2 + 28);
      *(double *)(a1 + 28) = result;
      *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
    }
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    v11 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    *(_BYTE *)(a1 + 40) = 0;
  }
  else
  {
    v12 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v12;
    v13 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
    *(_DWORD *)(a1 + 8) = v13;
    v14 = v13 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
    *(_DWORD *)(a1 + 8) = v14;
    v15 = v14 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
    *(_DWORD *)(a1 + 8) = v15;
    v16 = v15 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
    *(_DWORD *)(a1 + 8) = v16;
    *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v16 & 0x3F;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
    result = *(double *)((char *)a2 + 28);
    *(double *)(a1 + 28) = result;
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 2) &= ~1u;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return result;
}

void WTF::HashTable<WebCore::Color,WebCore::Color,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::Color>,WTF::HashTraits<WebCore::Color>,WTF::HashTraits<WebCore::Color>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  const WebCore::Color *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t *v20;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    memset_pattern16((void *)(v7 + 16), &unk_1969F6150, 8 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    do
    {
      v13 = (unint64_t *)(v4 + 8 * v11);
      if (*v13 != 0x10000000000000 && (*v13 & 0x20000000000000) == 0)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = WTF::ColorHash::hash(*v13, v8);
        v18 = 0;
        do
        {
          v19 = v17 & v16;
          v17 = ++v18 + v19;
        }
        while (*(_QWORD *)(v15 + 8 * v19) != 0x10000000000000);
        v20 = (unint64_t *)(v15 + 8 * v19);
        *v20 = 0;
        if (*v13)
        {
          *v20 = *v13;
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::ColorHash::hash(unint64_t this, const WebCore::Color *a2)
{
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10;
  unsigned __int16 v11;
  char v12;
  char v13;
  unsigned __int8 v14;
  __int128 v15;

  v10 = -1640531527;
  v11 = 0;
  v12 = 0;
  if ((this & 0x8000000000000) != 0)
  {
    v15 = *(_OWORD *)((this & 0xFFFFFFFFFFFFLL) + 4);
    v14 = HIBYTE(this);
    v13 = BYTE6(this);
    WTF::add<WebCore::ColorComponents<float,4ul>,WebCore::ColorSpace,WTF::OptionSet<WebCore::Color::FlagsIncludingPrivate>>(&v10, &v15, &v14, &v13);
    v2 = v10;
    if (v12)
    {
      v9 = (v10 + v11) ^ ((v10 + v11) << 11);
      v2 = v9 + (v9 >> 17);
    }
  }
  else
  {
    v2 = ((this >> 5) & 0x7FFF800 ^ (((unsigned __int16)this - 1640531527) << 16) ^ ((unsigned __int16)this
                                                                                                 - 1640531527))
       + (((this >> 5) & 0x7FFF800 ^ (((unsigned __int16)this - 1640531527) << 16) ^ ((unsigned __int16)this
                                                                                                  - 1640531527)) >> 11);
    if (BYTE6(this))
    {
      v3 = HIWORD(this);
      do
      {
        v4 = (v2 + (v3 & -(char)v3)) ^ ((v2 + (v3 & -(char)v3)) << 16);
        v2 = v4 + (v4 >> 11);
        LODWORD(v3) = (v3 - 1) & v3;
      }
      while ((_BYTE)v3);
    }
  }
  v5 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  v6 = (v5 ^ (4 * v5)) + ((v5 ^ (4 * v5)) >> 15);
  v7 = v6 ^ (v6 << 10);
  if (v7)
    return v7;
  else
    return 0x800000;
}

uint64_t WebCore::takeSnapshot(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, _DWORD *a6, uint64_t a7)
{
  uint64_t result;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int32x4_t v41;

  v41.i64[0] = a3;
  v41.i64[1] = a4;
  result = (uint64_t)WebCore::snapshotFrameRectWithClip(a2, &v41, a7, a5, &v40);
  v10 = (_QWORD *)v40;
  if (!v40)
  {
    *a1 = 0;
    return result;
  }
  *a6 = *(_DWORD *)(v40 + 24);
  v40 = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v10 + 136))(&v38, v10);
  result = (uint64_t)WebCore::BitmapImage::create(&v38, &v39);
  *a1 = v39;
  v12 = v38;
  v38 = 0;
  v39 = 0;
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_8;
    }
    result = MEMORY[0x19AEA534C](v13);
LABEL_8:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v35 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v35 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (v16)
          goto LABEL_20;
LABEL_16:
        if (v17)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        if (!v18)
          result = WTF::fastFree((WTF *)v13, v11);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      goto LABEL_20;
    goto LABEL_16;
  }
LABEL_20:
  v20 = v10[1];
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v20))
  {
    goto LABEL_24;
  }
  result = MEMORY[0x19AEA534C](v20);
LABEL_24:
  v22 = *(_QWORD *)(v20 + 8);
  v23 = v22 - 1;
  *(_QWORD *)(v20 + 8) = v22 - 1;
  if (v22 == 1)
  {
    v36 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v20 + 24) = 0;
    v25 = v36 != 0;
  }
  else
  {
    v24 = 0;
    v25 = 1;
  }
  v26 = __ldxr((unsigned __int8 *)v20);
  if (v26 != 1)
  {
    __clrex();
LABEL_31:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v20);
    if (v23)
      goto LABEL_36;
    goto LABEL_32;
  }
  if (__stlxr(0, (unsigned __int8 *)v20))
    goto LABEL_31;
  if (v23)
    goto LABEL_36;
LABEL_32:
  if (v24)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (!v25)
    result = WTF::fastFree((WTF *)v20, v11);
LABEL_36:
  v27 = v40;
  v40 = 0;
  if (!v27)
    return result;
  v28 = *(_QWORD *)(v27 + 8);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_41;
  }
  result = MEMORY[0x19AEA534C](v28);
LABEL_41:
  v30 = *(_QWORD *)(v28 + 8);
  v31 = v30 - 1;
  *(_QWORD *)(v28 + 8) = v30 - 1;
  if (v30 == 1)
  {
    v37 = *(_QWORD *)(v28 + 16);
    v32 = *(_QWORD *)(v28 + 24);
    *(_QWORD *)(v28 + 24) = 0;
    v33 = v37 != 0;
  }
  else
  {
    v32 = 0;
    v33 = 1;
  }
  v34 = __ldxr((unsigned __int8 *)v28);
  if (v34 != 1)
  {
    __clrex();
LABEL_48:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v28);
    if (v31)
      return result;
    goto LABEL_49;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
    goto LABEL_48;
  if (v31)
    return result;
LABEL_49:
  if (v32)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  if (!v33)
    return WTF::fastFree((WTF *)v28, v11);
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>,WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>>::deallocateTable(WebCore::UndoItem **a1, void *a2)
{
  uint64_t v3;
  WebCore::UndoItem **v4;
  WebCore::UndoItem *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WebCore::UndoItem *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::UndoItem::~UndoItem(v5, a2);
            bmalloc::api::isoDeallocate(v6, v7);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

WTF::StringImpl ***WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(WTF::StringImpl ***a1, void *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WebCore::ContentExtensions::ContentExtension *v7;
  WTF *v8;
  void *v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          v7 = v5[1];
          v5[1] = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              WebCore::ContentExtensions::ContentExtension::~ContentExtension(v7, a2);
              WTF::fastFree(v8, v9);
              v6 = *v5;
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  WebCore::DOMWrapperWorld **v5;
  WebCore::DOMWrapperWorld *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF *v24;
  WTF *v25;
  void *v26;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WebCore::DOMWrapperWorld **)(a1 + 16 * i);
      v6 = *v5;
      if (*v5 != (WebCore::DOMWrapperWorld *)-1)
      {
        v7 = v5[1];
        v5[1] = 0;
        if (v7)
        {
          v8 = *((unsigned int *)v7 + 3);
          if ((_DWORD)v8)
          {
            v9 = *(WTF **)v7;
            v10 = *(_QWORD *)v7 + 8 * v8;
            do
            {
              v11 = *(_QWORD *)v9;
              *(_QWORD *)v9 = 0;
              if (v11)
              {
                v12 = *(unsigned int *)(v11 + 76);
                if ((_DWORD)v12)
                {
                  v18 = *(WTF::StringImpl ***)(v11 + 64);
                  v19 = 8 * v12;
                  do
                  {
                    v20 = *v18;
                    *v18 = 0;
                    if (v20)
                    {
                      if (*(_DWORD *)v20 == 2)
                        WTF::StringImpl::destroy(v20, a2);
                      else
                        *(_DWORD *)v20 -= 2;
                    }
                    ++v18;
                    v19 -= 8;
                  }
                  while (v19);
                }
                v13 = *(WTF **)(v11 + 64);
                if (v13)
                {
                  *(_QWORD *)(v11 + 64) = 0;
                  *(_DWORD *)(v11 + 72) = 0;
                  WTF::fastFree(v13, a2);
                }
                v14 = *(unsigned int *)(v11 + 60);
                if ((_DWORD)v14)
                {
                  v21 = *(WTF::StringImpl ***)(v11 + 48);
                  v22 = 8 * v14;
                  do
                  {
                    v23 = *v21;
                    *v21 = 0;
                    if (v23)
                    {
                      if (*(_DWORD *)v23 == 2)
                        WTF::StringImpl::destroy(v23, a2);
                      else
                        *(_DWORD *)v23 -= 2;
                    }
                    ++v21;
                    v22 -= 8;
                  }
                  while (v22);
                }
                v15 = *(WTF **)(v11 + 48);
                if (v15)
                {
                  *(_QWORD *)(v11 + 48) = 0;
                  *(_DWORD *)(v11 + 56) = 0;
                  WTF::fastFree(v15, a2);
                }
                v16 = *(WTF::StringImpl **)(v11 + 8);
                *(_QWORD *)(v11 + 8) = 0;
                if (v16)
                {
                  if (*(_DWORD *)v16 == 2)
                    WTF::StringImpl::destroy(v16, a2);
                  else
                    *(_DWORD *)v16 -= 2;
                }
                v17 = *(WTF::StringImpl **)v11;
                *(_QWORD *)v11 = 0;
                if (v17)
                {
                  if (*(_DWORD *)v17 == 2)
                    WTF::StringImpl::destroy(v17, a2);
                  else
                    *(_DWORD *)v17 -= 2;
                }
                WTF::fastFree((WTF *)v11, a2);
              }
              v9 = (WTF *)((char *)v9 + 8);
            }
            while (v9 != (WTF *)v10);
          }
          v24 = *(WTF **)v7;
          if (*(_QWORD *)v7)
          {
            *(_QWORD *)v7 = 0;
            *((_DWORD *)v7 + 2) = 0;
            WTF::fastFree(v24, a2);
          }
          WTF::fastFree(v7, a2);
          v6 = *v5;
        }
        *v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 1)
          {
            WebCore::DOMWrapperWorld::~DOMWrapperWorld(v6, a2);
            WTF::fastFree(v25, v26);
          }
          else
          {
            --*(_DWORD *)v6;
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ruleListFilter(WebCore::DocumentLoader &)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList,WTF::String const&>::call()
{
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ruleListFilter(WebCore::DocumentLoader &)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int i;
  int v9;
  WTF *v10;

  v3 = **(_QWORD **)(a1 + 8);
  if (v3)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = *((_DWORD *)*a2 + 4);
    if (v6 < 0x100)
      v7 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v7 = v6 >> 8;
    for (i = 0; ; v7 = i + v9)
    {
      v9 = v7 & v5;
      v10 = *(WTF **)(v3 + 8 * (v7 & v5));
      if (!v10)
        break;
      if (v10 != (WTF *)-1 && (WTF::equal(v10, *a2, a3) & 1) != 0)
        return 0;
      ++i;
    }
  }
  return 1;
}

WTF *WTF::Detail::CallableWrapper<WebCore::ruleListFilter(WebCore::DocumentLoader &)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::ShouldSkipRuleList,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int i;
  int v9;
  WTF *result;

  v3 = **(_QWORD **)(a1 + 8);
  if (!v3)
    return 0;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 < 0x100)
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v7 = v6 >> 8;
  for (i = 0; ; v7 = i + v9)
  {
    v9 = v7 & v5;
    result = *(WTF **)(v3 + 8 * (v7 & v5));
    if (!result)
      break;
    if (result != (WTF *)-1 && (WTF::equal(result, *a2, a3) & 1) != 0)
      return (WTF *)1;
    ++i;
  }
  return result;
}

uint64_t std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>::pair[abi:sn180100]<WebCore::ContentExtensions::RedirectAction,WTF::URL&,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _DWORD *v6;
  __int128 v7;
  char v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  v5 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3402D80[v5])(&v9, a1 + 8, a2 + 8);
    *(_DWORD *)(a1 + 104) = v5;
  }
  v6 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v6 += 2;
  *(_QWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 120) = v7;
  return a1;
}

uint64_t std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>::~pair(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  char v6;

  v3 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E3402D60[v4])(&v6, a1 + 8);
  *(_DWORD *)(a1 + 104) = -1;
  return a1;
}

uint64_t WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>::pair[abi:sn180100](*(_QWORD *)a1 + 152 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ShareDataReader::start(WebCore::Document *,WebCore::ShareDataWithParsedURL &&)::$_0,void,WebCore::BlobLoader &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E3402DB0;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ShareDataReader::start(WebCore::Document *,WebCore::ShareDataWithParsedURL &&)::$_0,void,WebCore::BlobLoader &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E3402DB0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::ShareDataReader::start(WebCore::Document *,WebCore::ShareDataWithParsedURL &&)::$_0,void,WebCore::BlobLoader &>::call(uint64_t a1, JSC::ArrayBuffer *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43[2];
  int v44;
  char v45;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(v2 + 148);
  if (!(_DWORD)v3)
    return;
  v5 = *(int *)(a1 + 16);
  if (v3 <= v5)
  {
    __break(0xC471u);
    return;
  }
  v6 = (uint64_t **)(v2 + 136);
  v7 = *(_QWORD *)(v2 + 136);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * v5) + 16);
  if (!v8)
  {
    v7 = 0;
    goto LABEL_20;
  }
  if (*(unsigned __int16 *)(v8 + 204) >= 0x100u)
  {
    v9 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v9)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v40) = 16;
      v42 = 1;
      v10 = v41;
      v41 = 0;
      LOBYTE(v43[0]) = 16;
      v43[1] = v10;
      v44 = 1;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 16))(v9, v43);
      if (v44 != -1)
        ((void (*)(char *, uint64_t *))off_1E3402CD8[v44])(&v45, v43);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      ((void (*)(uint64_t *, _DWORD **))off_1E3402CD8[v42])(v43, &v40);
      v42 = -1;
      v7 = *(_QWORD *)(v2 + 136);
      v3 = *(unsigned int *)(v2 + 148);
      *v6 = 0;
      *(_QWORD *)(v2 + 144) = 0;
      if (!(_DWORD)v3)
      {
LABEL_17:
        if (!v7)
          return;
        goto LABEL_18;
      }
    }
    else
    {
      *v6 = 0;
      *(_QWORD *)(v2 + 144) = 0;
    }
    v12 = 0;
    v13 = 8 * v3;
    do
    {
      std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100]((uint64_t *)(v7 + v12), 0);
      v12 += 8;
    }
    while (v13 != v12);
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(v8 + 152);
  if (v7)
  {
    if (*(_DWORD *)(v8 + 196) == *(_DWORD *)(v8 + 200))
    {
      *(_DWORD *)v7 += 2;
    }
    else
    {
      JSC::ArrayBuffer::create((JSC::ArrayBuffer *)v7, a2);
      v7 = v43[0];
      v43[0] = 0;
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(v43);
    }
  }
LABEL_20:
  v41 = 0;
  v14 = *(_DWORD **)(a1 + 24);
  if (v14)
    *v14 += 2;
  v40 = v14;
  v15 = *(WTF **)(v7 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v16)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v15 = (WTF *)(((unint64_t)v15 & 0x3FFFFFFFFLL) + v16);
    }
  }
  if (*(_BYTE *)(v7 + 64) && (v39 = *(_QWORD *)(v7 + 32)) != 0)
    v17 = *(WTF **)(v39 + 32);
  else
    v17 = *(WTF **)(v7 + 48);
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v18 = 1;
  *(_QWORD *)(v18 + 8) = v18 + 24;
  *(_QWORD *)(v18 + 16) = 1;
  *(_BYTE *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = 0;
  WebCore::FragmentedSharedBuffer::append(v18, v15, v17);
  v43[0] = v18;
  v19 = WTF::fastMalloc((WTF *)0x38);
  WebCore::SharedBuffer::SharedBuffer(v19, v43);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v43, v20);
  v43[0] = 0;
  v41 = v19;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v43, v21);
  v23 = *(unsigned int *)(v2 + 116);
  if ((_DWORD)v23 == *(_DWORD *)(v2 + 112))
  {
    v24 = WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 104, v23 + 1, (unint64_t)&v40);
    v23 = *(unsigned int *)(v2 + 116);
    v25 = (_QWORD *)(*(_QWORD *)(v2 + 104) + 16 * v23);
    v26 = *(_QWORD *)v24;
    *(_QWORD *)v24 = 0;
    v27 = (uint64_t *)(v24 + 8);
    *v25 = v26;
  }
  else
  {
    v27 = &v41;
    v25 = (_QWORD *)(*(_QWORD *)(v2 + 104) + 16 * v23);
    v40 = 0;
    *v25 = v14;
  }
  v28 = *v27;
  *v27 = 0;
  v25[1] = v28;
  *(_DWORD *)(v2 + 116) = v23 + 1;
  v29 = *(_DWORD *)(v2 + 128) + 1;
  *(_DWORD *)(v2 + 128) = v29;
  v30 = *(unsigned int *)(v2 + 148);
  if (v29 != (_DWORD)v30)
  {
    WebCore::RawFile::~RawFile((WebCore::RawFile *)&v40, v22);
LABEL_46:
    v35 = *(_DWORD *)v7 == 2;
    *(_DWORD *)v7 -= 2;
    if (!v35)
      return;
    v36 = *(_QWORD *)(v7 + 80);
    if (v36)
    {
      *(_QWORD *)(v36 + 8) = 3;
      *(_QWORD *)(v7 + 80) = 0;
    }
    if ((*(_BYTE *)(v7 + 72) & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v7 + 72));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v7 + 16));
    v37 = *(WTF **)(v7 + 8);
    if ((v37 & 1) == 0 && v37)
    {
      v38 = *(WTF **)v37;
      if (*(_QWORD *)v37)
      {
        *(_QWORD *)v37 = 0;
        *((_DWORD *)v37 + 2) = 0;
        WTF::fastFree(v38, v11);
      }
      WTF::fastFree(v37, v11);
    }
LABEL_18:
    WTF::fastFree((WTF *)v7, v11);
    return;
  }
  if (*(_DWORD *)(v2 + 144))
  {
    if (v29)
    {
      v31 = *v6;
      v32 = 8 * v30;
      do
      {
        std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](v31++, 0);
        v32 -= 8;
      }
      while (v32);
      *(_DWORD *)(v2 + 148) = 0;
    }
    v33 = (WTF *)*v6;
    if (*v6)
    {
      *(_QWORD *)(v2 + 136) = 0;
      *(_DWORD *)(v2 + 144) = 0;
      WTF::fastFree(v33, v22);
    }
  }
  v34 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v34)
  {
    v43[0] = v2 + 16;
    v44 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v34 + 16))(v34, v43);
    if (v44 != -1)
      ((void (*)(char *, uint64_t *))off_1E3402CD8[v44])(&v45, v43);
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  WebCore::RawFile::~RawFile((WebCore::RawFile *)&v40, v22);
  if (v7)
    goto LABEL_46;
}

char *WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (char *)v5 + 16 * *(unsigned int *)(a1 + 12);
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *(WTF **)a1;
        return (char *)v19 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
      if (!(v10 >> 28))
      {
        v12 = WTF::fastMalloc((WTF *)(16 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v12;
        do
        {
          v14 = (_QWORD *)(v12 + v13);
          v15 = (_QWORD *)((char *)v5 + v13);
          v16 = *(_QWORD *)((char *)v5 + v13);
          *v15 = 0;
          *v14 = v16;
          v17 = *(_QWORD *)((char *)v5 + v13 + 8);
          v15[1] = 0;
          v14[1] = v17;
          WebCore::RawFile::~RawFile((WTF *)((char *)v5 + v13), v11);
          v13 += 16;
        }
        while ((char *)(v18 + 16) != v6);
        v19 = *(WTF **)a1;
        if (v5)
        {
          if (v19 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          v19 = *(WTF **)a1;
        }
        return (char *)v19 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x19606C2BCLL);
    }
  }
  v20 = *(unsigned int *)(a1 + 8);
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= a2)
    v23 = a2;
  else
    v23 = v22;
  if (v23 > v20)
  {
    if (v23 >> 28)
      goto LABEL_35;
    v24 = *(unsigned int *)(a1 + 12);
    v25 = WTF::fastMalloc((WTF *)(16 * v23));
    *(_DWORD *)(a1 + 8) = v23;
    *(_QWORD *)a1 = v25;
    if ((_DWORD)v24)
    {
      v27 = (_QWORD *)v25;
      v28 = v5;
      do
      {
        v29 = *(_QWORD *)v28;
        *(_QWORD *)v28 = 0;
        *v27 = v29;
        v30 = *((_QWORD *)v28 + 1);
        *((_QWORD *)v28 + 1) = 0;
        v27[1] = v30;
        WebCore::RawFile::~RawFile(v28, v26);
        v28 = (WTF *)(v31 + 16);
        v27 += 2;
      }
      while (v28 != (WTF *)((char *)v5 + 16 * v24));
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v26);
    }
  }
  return (char *)v3;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>,WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::UndoItem,WTF::RawPtrTraits<WebCore::UndoItem>,WTF::DefaultRefDerefTraits<WebCore::UndoItem>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  WebCore::UndoItem **v10;
  WebCore::UndoItem *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  WebCore::UndoItem **v21;
  WebCore::UndoItem *v22;
  WebCore::UndoItem *v23;
  bmalloc::api *v24;
  void *v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (WebCore::UndoItem **)(v4 + 8 * i);
      v11 = *v10;
      if (*v10 != (WebCore::UndoItem *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (WebCore::UndoItem **)(v12 + 8 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
            {
              WebCore::UndoItem::~UndoItem(v23, v8);
              bmalloc::api::isoDeallocate(v24, v25);
            }
            else
            {
              --*(_DWORD *)v23;
            }
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

WebCore::DOMWrapperWorld **WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash(_QWORD *a1, unsigned int a2, WebCore::DOMWrapperWorld **a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::DOMWrapperWorld **v12;
  WebCore::DOMWrapperWorld *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  int v33;
  WTF *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  WebCore::DOMWrapperWorld **v42;
  WTF *v43;
  uint64_t v44;
  WebCore::UserStyleSheet **v45;
  uint64_t v46;
  WebCore::UserStyleSheet *v47;
  WTF *v48;
  void *v49;
  WTF *v50;
  WebCore::DOMWrapperWorld *v51;
  WebCore::DOMWrapperWorld *v52;
  uint64_t v53;
  WebCore::DOMWrapperWorld *v54;
  WTF *v55;
  uint64_t v56;
  WebCore::UserStyleSheet **v57;
  uint64_t v58;
  WebCore::UserStyleSheet *v59;
  WTF *v60;
  void *v61;
  WTF *v62;
  WebCore::DOMWrapperWorld *v63;
  WebCore::DOMWrapperWorld **v64;
  WTF *v65;
  void *v66;
  WTF *v67;
  void *v68;
  WTF *v69;
  void *v70;
  WebCore::DOMWrapperWorld **result;
  _QWORD *v72;
  WebCore::DOMWrapperWorld **v74;

  v4 = a1;
  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *v4 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*v4 - 8) = a2 - 1;
  *(_DWORD *)(*v4 - 16) = 0;
  *(_DWORD *)(*v4 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v74 = 0;
    v11 = v6;
    v72 = v4;
    do
    {
      v12 = (WebCore::DOMWrapperWorld **)(v5 + 16 * v10);
      v13 = *v12;
      if (*v12 != (WebCore::DOMWrapperWorld *)-1)
      {
        if (v13)
        {
          v32 = *v4;
          if (*v4)
            v33 = *(_DWORD *)(v32 - 8);
          else
            v33 = 0;
          v35 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
          v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
          v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
          v38 = v33 & ((v37 >> 31) ^ v37);
          v39 = 1;
          do
          {
            v40 = v38;
            v41 = *(_QWORD *)(v32 + 16 * v38);
            v38 = (v38 + v39++) & v33;
          }
          while (v41);
          v42 = (WebCore::DOMWrapperWorld **)(v32 + 16 * v40);
          v43 = v42[1];
          v42[1] = 0;
          if (v43)
          {
            v44 = *((unsigned int *)v43 + 3);
            if ((_DWORD)v44)
            {
              v45 = *(WebCore::UserStyleSheet ***)v43;
              v46 = 8 * v44;
              do
              {
                v47 = *v45;
                *v45 = 0;
                if (v47)
                {
                  WebCore::UserStyleSheet::~UserStyleSheet(v47, v9);
                  WTF::fastFree(v48, v49);
                }
                ++v45;
                v46 -= 8;
              }
              while (v46);
            }
            v50 = *(WTF **)v43;
            if (*(_QWORD *)v43)
            {
              *(_QWORD *)v43 = 0;
              *((_DWORD *)v43 + 2) = 0;
              WTF::fastFree(v50, v9);
            }
            WTF::fastFree(v43, v9);
            v51 = *v42;
            *v42 = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 1)
              {
                WebCore::DOMWrapperWorld::~DOMWrapperWorld(v51, v9);
                WTF::fastFree(v69, v70);
              }
              else
              {
                --*(_DWORD *)v51;
              }
            }
          }
          else
          {
            *v42 = 0;
          }
          v52 = *v12;
          *v12 = 0;
          *v42 = v52;
          v53 = v5 + 16 * v10;
          v54 = *(WebCore::DOMWrapperWorld **)(v53 + 8);
          *(_QWORD *)(v53 + 8) = 0;
          v42[1] = v54;
          v55 = *(WTF **)(v53 + 8);
          *(_QWORD *)(v53 + 8) = 0;
          if (v55)
          {
            v56 = *((unsigned int *)v55 + 3);
            if ((_DWORD)v56)
            {
              v57 = *(WebCore::UserStyleSheet ***)v55;
              v58 = 8 * v56;
              do
              {
                v59 = *v57;
                *v57 = 0;
                if (v59)
                {
                  WebCore::UserStyleSheet::~UserStyleSheet(v59, v9);
                  WTF::fastFree(v60, v61);
                }
                ++v57;
                v58 -= 8;
              }
              while (v58);
            }
            v62 = *(WTF **)v55;
            if (*(_QWORD *)v55)
            {
              *(_QWORD *)v55 = 0;
              *((_DWORD *)v55 + 2) = 0;
              WTF::fastFree(v62, v9);
            }
            WTF::fastFree(v55, v9);
          }
          v63 = *v12;
          *v12 = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 1)
            {
              WebCore::DOMWrapperWorld::~DOMWrapperWorld(v63, v9);
              WTF::fastFree(v67, v68);
            }
            else
            {
              --*(_DWORD *)v63;
            }
          }
          v64 = v74;
          if (v12 == a3)
            v64 = v42;
          v74 = v64;
        }
        else
        {
          v14 = v5 + 16 * v10;
          v15 = *(WTF **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            v16 = *((unsigned int *)v15 + 3);
            if ((_DWORD)v16)
            {
              v17 = *(WTF **)v15;
              v18 = *(_QWORD *)v15 + 8 * v16;
              do
              {
                v19 = *(_QWORD *)v17;
                *(_QWORD *)v17 = 0;
                if (v19)
                {
                  v20 = *(unsigned int *)(v19 + 76);
                  if ((_DWORD)v20)
                  {
                    v26 = *(WTF::StringImpl ***)(v19 + 64);
                    v27 = 8 * v20;
                    do
                    {
                      v28 = *v26;
                      *v26 = 0;
                      if (v28)
                      {
                        if (*(_DWORD *)v28 == 2)
                          WTF::StringImpl::destroy(v28, v9);
                        else
                          *(_DWORD *)v28 -= 2;
                      }
                      ++v26;
                      v27 -= 8;
                    }
                    while (v27);
                  }
                  v21 = *(WTF **)(v19 + 64);
                  if (v21)
                  {
                    *(_QWORD *)(v19 + 64) = 0;
                    *(_DWORD *)(v19 + 72) = 0;
                    WTF::fastFree(v21, v9);
                  }
                  v22 = *(unsigned int *)(v19 + 60);
                  if ((_DWORD)v22)
                  {
                    v29 = *(WTF::StringImpl ***)(v19 + 48);
                    v30 = 8 * v22;
                    do
                    {
                      v31 = *v29;
                      *v29 = 0;
                      if (v31)
                      {
                        if (*(_DWORD *)v31 == 2)
                          WTF::StringImpl::destroy(v31, v9);
                        else
                          *(_DWORD *)v31 -= 2;
                      }
                      ++v29;
                      v30 -= 8;
                    }
                    while (v30);
                  }
                  v23 = *(WTF **)(v19 + 48);
                  if (v23)
                  {
                    *(_QWORD *)(v19 + 48) = 0;
                    *(_DWORD *)(v19 + 56) = 0;
                    WTF::fastFree(v23, v9);
                  }
                  v24 = *(WTF::StringImpl **)(v19 + 8);
                  *(_QWORD *)(v19 + 8) = 0;
                  if (v24)
                  {
                    if (*(_DWORD *)v24 == 2)
                      WTF::StringImpl::destroy(v24, v9);
                    else
                      *(_DWORD *)v24 -= 2;
                  }
                  v25 = *(WTF::StringImpl **)v19;
                  *(_QWORD *)v19 = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                      WTF::StringImpl::destroy(v25, v9);
                    else
                      *(_DWORD *)v25 -= 2;
                  }
                  WTF::fastFree((WTF *)v19, v9);
                }
                v17 = (WTF *)((char *)v17 + 8);
              }
              while (v17 != (WTF *)v18);
            }
            v34 = *(WTF **)v15;
            if (*(_QWORD *)v15)
            {
              *(_QWORD *)v15 = 0;
              *((_DWORD *)v15 + 2) = 0;
              WTF::fastFree(v34, v9);
            }
            WTF::fastFree(v15, v9);
            v13 = *v12;
            v4 = v72;
          }
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
            {
              WebCore::DOMWrapperWorld::~DOMWrapperWorld(v13, v9);
              WTF::fastFree(v65, v66);
            }
            else
            {
              --*(_DWORD *)v13;
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else
  {
    v74 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v74;
}

WebCore::DOMWrapperWorld *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<std::unique_ptr<WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::customDeleteBucket(WebCore::DOMWrapperWorld **a1, WTF::StringImpl *a2)
{
  WebCore::DOMWrapperWorld *result;
  WTF *v4;
  uint64_t v5;
  WebCore::UserStyleSheet **v6;
  uint64_t v7;
  WebCore::UserStyleSheet *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  void *v13;

  result = *a1;
  *a1 = (WebCore::DOMWrapperWorld *)-1;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(result, a2);
      result = (WebCore::DOMWrapperWorld *)WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = *((unsigned int *)v4 + 3);
    if ((_DWORD)v5)
    {
      v6 = *(WebCore::UserStyleSheet ***)v4;
      v7 = 8 * v5;
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          WebCore::UserStyleSheet::~UserStyleSheet(v8, a2);
          WTF::fastFree(v9, v10);
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    v11 = *(WTF **)v4;
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)v4 = 0;
      *((_DWORD *)v4 + 2) = 0;
      WTF::fastFree(v11, a2);
    }
    return (WebCore::DOMWrapperWorld *)WTF::fastFree(v4, a2);
  }
  return result;
}

uint64_t WebCore::UserScript::UserScript(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, char a6, char a7, char a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[5];

  v14 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v14;
  v15 = a1 + 8;
  v16 = *a3;
  if (*a3 && *(_DWORD *)(v16 + 4))
  {
    *a3 = 0;
    *(_QWORD *)(a1 + 8) = v16;
    v23 = *(_DWORD *)(a1 + 16) & 0xFFFFFFFE | a3[1] & 1;
    *(_DWORD *)(a1 + 16) = v23;
    v24 = v23 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a3 + 2) >> 1) & 1));
    *(_DWORD *)(a1 + 16) = v24;
    v25 = v24 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a3 + 2) >> 2) & 1));
    *(_DWORD *)(a1 + 16) = v25;
    v26 = v25 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a3 + 2) >> 3) & 7));
    *(_DWORD *)(a1 + 16) = v26;
    *(_DWORD *)(a1 + 16) = a3[1] & 0xFFFFFFC0 | v26 & 0x3F;
    *(_OWORD *)(a1 + 20) = *(_OWORD *)((char *)a3 + 12);
    *(_QWORD *)(a1 + 36) = *(uint64_t *)((char *)a3 + 28);
    *(_DWORD *)(a1 + 44) = *((_DWORD *)a3 + 9);
    *((_DWORD *)a3 + 2) &= ~1u;
LABEL_9:
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v21 = *a4;
    *a4 = 0;
    *(_QWORD *)(a1 + 48) = v21;
    LODWORD(v21) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = 0;
    *(_DWORD *)(a1 + 56) = v21;
    LODWORD(v21) = *((_DWORD *)a4 + 3);
    *((_DWORD *)a4 + 3) = 0;
    *(_DWORD *)(a1 + 60) = v21;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    v22 = *a5;
    *a5 = 0;
    *(_QWORD *)(a1 + 64) = v22;
    LODWORD(v22) = *((_DWORD *)a5 + 2);
    *((_DWORD *)a5 + 2) = 0;
    *(_DWORD *)(a1 + 72) = v22;
    LODWORD(v22) = *((_DWORD *)a5 + 3);
    *((_DWORD *)a5 + 3) = 0;
    *(_DWORD *)(a1 + 76) = v22;
    *(_BYTE *)(a1 + 80) = a6;
    *(_BYTE *)(a1 + 81) = a7;
    *(_BYTE *)(a1 + 82) = a8;
    return a1;
  }
  v28[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v28);
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)&v27, "user-script:", 13, ++WebCore::generateUserScriptUniqueURL(void)::identifier);
  if (v27)
  {
    MEMORY[0x19AEA52F8](v15, v28, &v27, 0);
    v19 = v27;
    v27 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v28[0];
    v28[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::UserStyleSheet::UserStyleSheet(uint64_t a1, _DWORD **a2, uint64_t a3, uint64_t *a4, uint64_t *a5, char a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _DWORD *v15;
  _DWORD *v16;
  uint64_t result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25[5];

  v15 = *a2;
  if (*a2)
    *v15 += 2;
  *(_QWORD *)a1 = v15;
  v16 = *(_DWORD **)a3;
  if (*(_QWORD *)a3 && v16[1])
  {
    *v16 += 2;
    *(_QWORD *)(a1 + 8) = v16;
    v23 = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a1 + 32) = v23;
LABEL_11:
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v21 = *a4;
    *a4 = 0;
    *(_QWORD *)(a1 + 48) = v21;
    LODWORD(v21) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = 0;
    *(_DWORD *)(a1 + 56) = v21;
    LODWORD(v21) = *((_DWORD *)a4 + 3);
    *((_DWORD *)a4 + 3) = 0;
    *(_DWORD *)(a1 + 60) = v21;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    v22 = *a5;
    *a5 = 0;
    *(_QWORD *)(a1 + 64) = v22;
    LODWORD(v22) = *((_DWORD *)a5 + 2);
    *((_DWORD *)a5 + 2) = 0;
    *(_DWORD *)(a1 + 72) = v22;
    LODWORD(v22) = *((_DWORD *)a5 + 3);
    *((_DWORD *)a5 + 3) = 0;
    *(_DWORD *)(a1 + 76) = v22;
    *(_BYTE *)(a1 + 80) = a6;
    *(_BYTE *)(a1 + 81) = a7;
    *(_QWORD *)(a1 + 88) = a9;
    *(_QWORD *)(a1 + 96) = a10;
    return a1;
  }
  v25[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v25);
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)&v24, "user-style:", 12, ++WebCore::generateUserStyleUniqueURL(void)::identifier);
  if (v24)
  {
    MEMORY[0x19AEA52F8](a1 + 8, v25, &v24, 0);
    v19 = v24;
    v24 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v25[0];
    v25[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
    goto LABEL_11;
  }
  __break(0xC471u);
  return result;
}

{
  return WebCore::UserStyleSheet::UserStyleSheet(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void WebCore::VisitedLinkStore::~VisitedLinkStore(WebCore::VisitedLinkStore *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E3402DF8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      for (i = 0; i != v3; ++i)
      {
        v5 = *(unsigned int **)(v2 + 8 * i);
        if (v5 != (unsigned int *)-1)
        {
          *(_QWORD *)(v2 + 8 * i) = 0;
          if (v5)
          {
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              atomic_store(1u, v5);
              v9 = i;
              v10 = v2;
              v8 = v3;
              WTF::fastFree((WTF *)v5, a2);
              v3 = v8;
              i = v9;
              v2 = v10;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

uint64_t WebCore::VisualViewport::eventTargetInterface(WebCore::VisualViewport *this)
{
  return 79;
}

uint64_t WebCore::VisualViewport::scriptExecutionContext(WebCore::VisualViewport *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 1;
  v4 = *(_QWORD *)(v2 + 72);
  if (!v4 || (v4 = *(_QWORD *)(v4 + 8)) == 0)
  {
LABEL_7:
    if (v4)
      v5 = v4 + 192;
    else
      v5 = 0;
    if (v3)
      *(_DWORD *)(v2 + 24) = v3;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    return v5;
  }
  if (!*(_BYTE *)(v4 + 178))
  {
    v4 -= 288;
    goto LABEL_7;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::VisualViewport::addEventListener(WebCore *a1, WTF::StringImpl **a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v6 = WebCore::EventTarget::addEventListener(a1, a2, a3, a4);
  if (!(_DWORD)v6)
    return v6;
  v7 = *((_QWORD *)a1 + 4);
  if (!v7)
    return v6;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    return v6;
  v9 = *(_QWORD *)(v8 + 72);
  if (!v9)
    return v6;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    return v6;
  if (!*(_BYTE *)(v10 + 178))
  {
    v11 = *(_QWORD *)(v10 + 240);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        WebCore::Document::addListenerTypeIfNeeded(*(WebCore::EventNames ***)(v12 + 296), (const WTF::AtomString *)a2);
    }
    return v6;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t *std::unique_ptr<WebCore::BasicWheelEventDeltaFilter>::~unique_ptr[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *(WTF **)(v3 + 40);
    if (v4)
    {
      *(_QWORD *)(v3 + 40) = 0;
      *(_DWORD *)(v3 + 48) = 0;
      WTF::fastFree(v4, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

BOOL WebCore::WheelEventDeltaFilter::shouldApplyFilteringForEvent(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 92);
  return v1 == 1 || v1 == 4;
}

BOOL WebCore::WheelEventDeltaFilter::shouldIncludeVelocityForEvent(uint64_t a1)
{
  int v2;

  if (*(_BYTE *)(a1 + 93) == 1)
    return 1;
  v2 = *(unsigned __int8 *)(a1 + 92);
  return v2 == 1 || v2 == 4;
}

double WebCore::WheelEventDeltaFilter::eventCopyWithFilteredDeltas@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  result = *(double *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = a2[5];
  *(_OWORD *)(a3 + 64) = a2[4];
  *(_OWORD *)(a3 + 80) = v5;
  v6 = a2[7];
  *(_OWORD *)(a3 + 96) = a2[6];
  *(_OWORD *)(a3 + 112) = v6;
  v7 = a2[1];
  *(_OWORD *)a3 = *a2;
  *(_OWORD *)(a3 + 16) = v7;
  v8 = a2[3];
  *(_OWORD *)(a3 + 32) = a2[2];
  *(_OWORD *)(a3 + 48) = v8;
  *(double *)(a3 + 68) = result;
  *(_QWORD *)(a3 + 84) = v4;
  return result;
}

double WebCore::WheelEventDeltaFilter::eventCopyWithVelocity@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = *(double *)(a1 + 16);
  v4 = a2[5];
  *(_OWORD *)(a3 + 64) = a2[4];
  *(_OWORD *)(a3 + 80) = v4;
  v5 = a2[7];
  *(_OWORD *)(a3 + 96) = a2[6];
  *(_OWORD *)(a3 + 112) = v5;
  v6 = a2[1];
  *(_OWORD *)a3 = *a2;
  *(_OWORD *)(a3 + 16) = v6;
  v7 = a2[3];
  *(_OWORD *)(a3 + 32) = a2[2];
  *(_OWORD *)(a3 + 48) = v7;
  *(double *)(a3 + 84) = result;
  return result;
}

float WebCore::WheelEventDeltaFilter::filteredDelta(WebCore::WheelEventDeltaFilter *this)
{
  return *((float *)this + 2);
}

float WebCore::WheelEventDeltaFilter::filteredVelocity(WebCore::WheelEventDeltaFilter *this)
{
  return *((float *)this + 4);
}

uint64_t WebCore::BasicWheelEventDeltaFilter::updateFromEvent(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  WTF *v12;
  unsigned int v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  float *v35;
  float v36;
  float v37;
  _DWORD *v38;

  v2 = result;
  v3 = *(unsigned __int8 *)(a2 + 92);
  switch(*(_BYTE *)(a2 + 92))
  {
    case 1:
    case 4:
      v4 = *(_DWORD *)(a2 + 68);
      v5 = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(result + 8) = v4;
      *(_DWORD *)(result + 12) = v5;
      v6 = *(_QWORD *)(result + 24);
      v7 = *(_QWORD *)(result + 32);
      if (v6)
      {
        if (v7 + 1 != v6)
          goto LABEL_38;
        LODWORD(v8) = *(_DWORD *)(result + 48);
      }
      else
      {
        v8 = *(unsigned int *)(result + 48);
        if (v7)
        {
          if (v7 != v8 - 1)
          {
            v6 = 0;
            goto LABEL_38;
          }
        }
        else if ((_DWORD)v8)
        {
          v6 = 0;
          v7 = 0;
          goto LABEL_38;
        }
      }
      v10 = v8;
      v11 = ((unint64_t)v8 >> 2) + v8;
      if (v11 <= 0xF)
        v11 = 15;
      if (v11 >= 0x1FFFFFFF)
      {
        __break(0xC471u);
        JUMPOUT(0x19606D27CLL);
      }
      v12 = *(WTF **)(result + 40);
      v13 = v11 + 1;
      result = WTF::fastMalloc((WTF *)(8 * (v11 + 1)));
      *(_DWORD *)(v2 + 48) = v13;
      *(_QWORD *)(v2 + 40) = result;
      v15 = *(_QWORD *)(v2 + 24);
      v16 = *(_QWORD *)(v2 + 32);
      if (v15 <= v16)
      {
        if (v15 != v16)
        {
          v23 = (_QWORD *)(result + 8 * v15);
          v24 = (uint64_t *)((char *)v12 + 8 * v15);
          v25 = 8 * v16 - 8 * v15;
          do
          {
            v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
        }
      }
      else
      {
        if (v16)
        {
          v17 = 8 * v16;
          v18 = v12;
          do
          {
            v19 = *(_QWORD *)v18;
            v18 = (WTF *)((char *)v18 + 8);
            *(_QWORD *)result = v19;
            result += 8;
            v17 -= 8;
          }
          while (v17);
          v13 = *(_DWORD *)(v2 + 48);
          v15 = *(_QWORD *)(v2 + 24);
          result = *(_QWORD *)(v2 + 40);
        }
        if (v15 != v10)
        {
          v20 = (uint64_t *)((char *)v12 + 8 * v15);
          v21 = 8 * v15 - 8 * v10;
          do
          {
            v22 = *v20++;
            *(_QWORD *)(result + 8 * v13 + v21) = v22;
            v21 += 8;
          }
          while (v21);
        }
        *(_QWORD *)(v2 + 24) = v15 - v10 + v13;
      }
      if (v12)
      {
        if (*(WTF **)(v2 + 40) == v12)
        {
          *(_QWORD *)(v2 + 40) = 0;
          *(_DWORD *)(v2 + 48) = 0;
        }
        result = WTF::fastFree(v12, v14);
      }
      v6 = *(_QWORD *)(v2 + 24);
      v7 = *(_QWORD *)(v2 + 32);
LABEL_38:
      v27 = *(_QWORD *)(v2 + 40);
      v28 = (_DWORD *)(v27 + 8 * v7);
      *v28 = v4;
      v28[1] = v5;
      v29 = *(unsigned int *)(v2 + 48);
      if (v7 == v29 - 1)
        v30 = 0;
      else
        v30 = v7 + 1;
      *(_QWORD *)(v2 + 32) = v30;
      if (v30 >= v6)
        v31 = 0;
      else
        v31 = v29;
      if (v30 - v6 + v31 >= 4)
      {
        if (v30 == v6)
        {
          __break(0xC471u);
          JUMPOUT(0x19606D274);
        }
        if (v6 == v29 - 1)
          v6 = 0;
        else
          ++v6;
        *(_QWORD *)(v2 + 24) = v6;
      }
      if (v6 <= v30)
        v32 = 0;
      else
        v32 = v29;
      v33 = v32 + v30 != v6;
      if (v6 == v30)
      {
        v34 = v33;
      }
      else
      {
        LOBYTE(v34) = v33;
        do
        {
          v35 = (float *)(v27 + 8 * v6);
          v6 += v29 + 1;
          do
            v6 -= v29;
          while (v6 >= v29);
          v36 = fabsf(*v35);
          v37 = fabsf(v35[1]);
          v33 = v33 & (v37 > v36);
          v34 = v34 & (v37 <= v36);
        }
        while (v30 != v6);
      }
      if ((v33 & 1) != 0 || v34)
      {
        if (v33)
          v38 = (_DWORD *)(v2 + 8);
        else
          v38 = (_DWORD *)(v2 + 12);
        *v38 = 0;
      }
      return result;
    case 2:
    case 8:
      goto LABEL_10;
    case 3:
    case 5:
    case 6:
    case 7:
      return result;
    default:
      if (v3 == 32 || v3 == 16)
      {
LABEL_10:
        *(_QWORD *)(result + 24) = 0;
        *(_QWORD *)(result + 32) = 0;
        result = *(_QWORD *)(result + 40);
        if (result)
        {
          *(_QWORD *)(v2 + 40) = 0;
          *(_DWORD *)(v2 + 48) = 0;
          result = WTF::fastFree((WTF *)result, (void *)a2);
        }
        *(_QWORD *)(v2 + 8) = 0;
        *(_QWORD *)(v2 + 16) = 0;
      }
      return result;
  }
}

uint64_t WebCore::WheelEventTestMonitor::clearAllTestDeferrals(WebCore::WheelEventTestMonitor *this, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t result;
  int v7;

  v3 = (unsigned __int8 *)this + 24;
  if (__ldaxr((unsigned __int8 *)this + 24))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 24);
LABEL_5:
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 4) = 0;
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  result = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_BYTE *)this + 41) = 0;
  *(_WORD *)((char *)this + 43) = 0;
  v7 = __ldxr(v3);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return result;
}

uint64_t WebCore::WheelEventTestMonitor::setTestCallbackAndStartMonitoring(uint64_t a1, char a2, char a3, uint64_t *a4)
{
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;

  v8 = (unsigned __int8 *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)(a1 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 24);
LABEL_5:
  v10 = *a4;
  *a4 = 0;
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *(_BYTE *)(a1 + 40) = a2;
  *(_BYTE *)(a1 + 42) = a3;
  result = WebCore::Page::scheduleRenderingUpdate(*(_QWORD *)(a1 + 16), 2048);
  v13 = __ldxr(v8);
  if (v13 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v8);
  }
  if (__stlxr(0, v8))
    return WTF::Lock::unlockSlow((WTF::Lock *)v8);
  return result;
}

unsigned __int8 *WebCore::WheelEventTestMonitor::deferForReason(unsigned __int8 *result, unint64_t a2, unint64_t a3, __int16 a4)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v10;
  unsigned __int8 **v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;

  v7 = result;
  v8 = result + 24;
  if (__ldaxr(result + 24))
  {
    __clrex();
LABEL_4:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](result + 24);
    goto LABEL_5;
  }
  if (__stxr(1u, v8))
    goto LABEL_4;
LABEL_5:
  v11 = (unsigned __int8 **)(v7 + 32);
  v10 = (unsigned __int8 *)*((_QWORD *)v7 + 4);
  if (v10)
    goto LABEL_7;
  v12 = WTF::fastMalloc((WTF *)0xD0);
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  result = (unsigned __int8 *)(v12 + 16);
  *((_WORD *)result + 8) = 0;
  *((_QWORD *)result + 3) = 0;
  *((_QWORD *)result + 4) = 0;
  *((_WORD *)result + 20) = 0;
  *((_QWORD *)result + 6) = 0;
  *((_QWORD *)result + 7) = 0;
  *((_WORD *)result + 32) = 0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_WORD *)result + 44) = 0;
  *((_QWORD *)result + 12) = 0;
  *((_QWORD *)result + 13) = 0;
  *((_WORD *)result + 56) = 0;
  *((_QWORD *)result + 15) = 0;
  *((_QWORD *)result + 16) = 0;
  *((_WORD *)result + 68) = 0;
  *((_QWORD *)result + 18) = 0;
  *((_QWORD *)result + 19) = 0;
  *((_WORD *)result + 80) = 0;
  *((_QWORD *)result + 21) = 0;
  *((_QWORD *)result + 22) = 0;
  *((_WORD *)result + 92) = 0;
  *v11 = result;
  *((_DWORD *)result - 1) = 8;
  *((_DWORD *)*v11 - 2) = 7;
  *((_DWORD *)*v11 - 4) = 0;
  *((_DWORD *)*v11 - 3) = 0;
  v10 = *v11;
  if (*v11)
LABEL_7:
    v13 = *((_DWORD *)v10 - 2);
  else
    v13 = 0;
  v14 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                           - 1640531527);
  v15 = (a2 >> 37) & 0x7FFF800 ^ ((v14 + WORD2(a2) + (v14 >> 11)) << 16) ^ (v14 + WORD2(a2) + (v14 >> 11));
  v16 = (a3 >> 5) & 0x7FFF800 ^ ((v15 + (unsigned __int16)a3 + (v15 >> 11)) << 16) ^ (v15
                                                                                                  + (unsigned __int16)a3
                                                                                                  + (v15 >> 11));
  v17 = (a3 >> 37) & 0x7FFF800 ^ ((v16 + WORD2(a3) + (v16 >> 11)) << 16) ^ (v16 + WORD2(a3) + (v16 >> 11));
  v18 = (v17 + (v17 >> 11)) ^ (8 * (v17 + (v17 >> 11)));
  v19 = (v18 + (v18 >> 5)) ^ (4 * (v18 + (v18 >> 5)));
  v20 = (v19 + (v19 >> 15)) ^ ((v19 + (v19 >> 15)) << 10);
  if (!v20)
    v20 = 0x800000;
  v21 = v13 & v20;
  v22 = &v10[24 * (v13 & v20)];
  v24 = *(_QWORD *)v22;
  v23 = *((_QWORD *)v22 + 1);
  if (*(_OWORD *)v22 == 0)
  {
LABEL_19:
    *(_QWORD *)v22 = a2;
    *((_QWORD *)v22 + 1) = a3;
    *((_WORD *)v22 + 8) = 0;
    v27 = *v11;
    if (*v11)
      v28 = *((_DWORD *)v27 - 3) + 1;
    else
      v28 = 1;
    *((_DWORD *)v27 - 3) = v28;
    v29 = *v11;
    if (*v11)
      v30 = *((_DWORD *)v29 - 3);
    else
      v30 = 0;
    v31 = (*((_DWORD *)v29 - 4) + v30);
    v32 = *((unsigned int *)v29 - 1);
    if (v32 > 0x400)
    {
      if (v32 > 2 * v31)
        goto LABEL_32;
    }
    else
    {
      if (3 * v32 > 4 * v31)
        goto LABEL_32;
      if (!(_DWORD)v32)
      {
        v33 = 8;
        goto LABEL_31;
      }
    }
    v33 = (_DWORD)v32 << (6 * *((_DWORD *)v29 - 3) >= (2 * v32));
LABEL_31:
    result = (unsigned __int8 *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash((uint64_t *)v7 + 4, v33, (unint64_t *)v22);
    v22 = result;
    goto LABEL_32;
  }
  v25 = 0;
  v26 = 1;
  while (v24 != a2 || v23 != a3)
  {
    if (v23 == -1)
      v25 = v22;
    v21 = (v21 + v26) & v13;
    v22 = &v10[24 * v21];
    v24 = *(_QWORD *)v22;
    v23 = *((_QWORD *)v22 + 1);
    ++v26;
    if (*(_OWORD *)v22 == 0)
    {
      if (v25)
      {
        *(_QWORD *)v25 = 0;
        *((_QWORD *)v25 + 1) = 0;
        *((_WORD *)v25 + 8) = 0;
        --*((_DWORD *)*v11 - 4);
        v22 = v25;
      }
      goto LABEL_19;
    }
  }
LABEL_32:
  *((_WORD *)v22 + 8) |= a4;
  v7[44] = 1;
  v34 = __ldxr(v8);
  if (v34 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
  }
  if (__stlxr(0, v8))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
  return result;
}

uint64_t *WebCore::WheelEventTestMonitor::removeDeferralForReason(uint64_t *a1, unint64_t a2, unint64_t a3, int a4)
{
  unsigned __int8 *v8;
  uint64_t *result;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t *v40;

  v8 = (unsigned __int8 *)(a1 + 3);
  if (__ldaxr((unsigned __int8 *)a1 + 24))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 3);
    goto LABEL_5;
  }
  if (__stxr(1u, v8))
    goto LABEL_4;
LABEL_5:
  result = a1 + 4;
  v11 = a1[4];
  if (v11)
  {
    v12 = *(_DWORD *)(v11 - 8);
    v13 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                             - 1640531527);
    v14 = (a2 >> 37) & 0x7FFF800 ^ ((v13 + WORD2(a2) + (v13 >> 11)) << 16) ^ (v13 + WORD2(a2) + (v13 >> 11));
    v15 = (a3 >> 5) & 0x7FFF800 ^ ((v14 + (unsigned __int16)a3 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)a3 + (v14 >> 11));
    v16 = (a3 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(a3) + (v15 >> 11)) << 16) ^ (v15 + WORD2(a3) + (v15 >> 11));
    v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
    v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
    v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
    if (!v19)
      v19 = 0x800000;
    v20 = v12 & v19;
    v21 = (uint64_t *)(v11 + 24 * (v12 & v19));
    v22 = *v21;
    v23 = v21[1];
    v24 = *v21 == a2 && v23 == a3;
    if (!v24)
    {
      v25 = 1;
      while (v22 | v23)
      {
        v20 = (v20 + v25) & v12;
        v21 = (uint64_t *)(v11 + 24 * v20);
        v22 = *v21;
        v23 = v21[1];
        ++v25;
        if (*v21 == a2 && v23 == a3)
          goto LABEL_21;
      }
      v21 = (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4));
    }
LABEL_21:
    if (v21 != (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4)))
    {
      v24 = ((unsigned __int16)v21[2] & ~a4) == 0;
      *((_WORD *)v21 + 8) &= ~(_WORD)a4;
      if (v24)
      {
        v29 = *result;
        if (!*result || (v29 += 24 * *(unsigned int *)(v29 - 4), (uint64_t *)v29 != v21))
        {
          if ((uint64_t *)v29 != v21)
          {
            *(_OWORD *)v21 = xmmword_1968C18F0;
            ++*(_DWORD *)(*result - 16);
            v30 = *result;
            v31 = *result ? *(_DWORD *)(v30 - 12) - 1 : -1;
            *(_DWORD *)(v30 - 12) = v31;
            v36 = *result;
            if (*result)
            {
              v37 = 6 * *(_DWORD *)(v36 - 12);
              v38 = *(_DWORD *)(v36 - 4);
              if (v37 < v38 && v38 >= 9)
                WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(result, v38 >> 1, 0);
            }
          }
        }
      }
      v27 = *a1;
      if (!*a1)
      {
        v32 = 0;
        goto LABEL_40;
      }
      if (__ldaxr((unsigned __int8 *)v27))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v27))
      {
        goto LABEL_33;
      }
      MEMORY[0x19AEA534C](v27);
LABEL_33:
      if (*(_QWORD *)(v27 + 24))
      {
        ++*(_QWORD *)(v27 + 16);
        v32 = v27;
      }
      else
      {
        v32 = 0;
      }
      v33 = __ldxr((unsigned __int8 *)v27);
      if (v33 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
        {
LABEL_40:
          v34 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
          *v34 = (uint64_t)&off_1E3402ED8;
          v34[1] = v32;
          v34[2] = (uint64_t)a1;
          v40 = v34;
          WTF::ensureOnMainThread();
          result = v40;
          if (v40)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v40 + 8))(v40);
          goto LABEL_42;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
      goto LABEL_40;
    }
  }
LABEL_42:
  v35 = __ldxr(v8);
  if (v35 == 1)
  {
    if (!__stlxr(0, v8))
      return result;
  }
  else
  {
    __clrex();
  }
  return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
}

uint64_t WebCore::WheelEventTestMonitor::receivedWheelEventWithPhases(uint64_t result, int a2, int a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v8;

  v5 = result;
  v6 = (unsigned __int8 *)(result + 24);
  if (__ldaxr((unsigned __int8 *)(result + 24)))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEA534C](result + 24);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  if (a2 == 16 || a2 == 8)
    *(_BYTE *)(v5 + 41) = 1;
  if (a3 == 8)
    *(_BYTE *)(v5 + 43) = 1;
  v8 = __ldxr(v6);
  if (v8 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

uint64_t WebCore::WheelEventTestMonitor::checkShouldFireCallbacks(uint64_t this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  uint64_t v7;

  v1 = this;
  v2 = (unsigned __int8 *)(this + 24);
  if (__ldaxr((unsigned __int8 *)(this + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](this + 24);
LABEL_5:
  v4 = *(_QWORD *)(v1 + 32);
  v5 = (!v4 || !*(_DWORD *)(v4 - 12))
    && *(_BYTE *)(v1 + 44)
    && (!*(_BYTE *)(v1 + 40) || *(_BYTE *)(v1 + 41))
    && (!*(_BYTE *)(v1 + 42) || *(_BYTE *)(v1 + 43));
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
    {
      if (!v5)
        return this;
      goto LABEL_20;
    }
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return this;
LABEL_20:
  v7 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return this;
}

uint64_t WebCore::operator<<(uint64_t a1, int a2)
{
  if (a2 > 31)
  {
    if (a2 <= 127)
    {
      if (a2 != 32 && a2 != 64)
        return a1;
    }
    else if (a2 != 128 && a2 != 256 && a2 != 512)
    {
      return a1;
    }
LABEL_12:
    WTF::TextStream::operator<<();
    return a1;
  }
  switch(a2)
  {
    case 1:
    case 2:
    case 4:
    case 8:
      goto LABEL_12;
    case 3:
    case 5:
    case 6:
    case 7:
      return a1;
    default:
      if ("handling wheel event" == 16)
        goto LABEL_12;
      break;
  }
  return a1;
}

{
  switch(a2)
  {
    case 1:
    case 2:
    case 4:
    case 8:
      goto LABEL_4;
    case 3:
    case 5:
    case 6:
    case 7:
      return a1;
    default:
      if ("forced on main thread" == 16 || "forced on main thread" == 32)
LABEL_4:
        WTF::TextStream::operator<<();
      break;
  }
  return a1;
}

{
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      goto LABEL_4;
    case 3:
    case 5:
    case 6:
    case 7:
      return a1;
    default:
      if (a2 == 16 || a2 == 32)
LABEL_4:
        WTF::TextStream::operator<<();
      break;
  }
  return a1;
}

{
  if (a2 == 1 || a2 == 4 || a2 == 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 > 511)
  {
    if (a2 >= 0x2000)
    {
      if (a2 >= 0x8000)
      {
        if (a2 != 0x8000 && a2 != 0x10000)
          goto LABEL_28;
      }
      else if (a2 != 0x2000 && a2 != 0x4000)
      {
        goto LABEL_28;
      }
    }
    else if (a2 > 2047)
    {
      if (a2 != 2048 && a2 != 4096)
        goto LABEL_28;
    }
    else if (a2 != 512 && a2 != 1024)
    {
      goto LABEL_28;
    }
  }
  else
  {
    if (a2 <= 31)
    {
      switch(a2)
      {
        case 1:
        case 2:
        case 4:
        case 8:
          goto LABEL_27;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_28;
        default:
          if ("fill-brush" == 16)
            goto LABEL_27;
          goto LABEL_28;
      }
    }
    if (a2 <= 127)
    {
      if (a2 == 32 || a2 == 64)
        goto LABEL_27;
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x19617F0FCLL);
    }
    if (a2 != 128 && a2 != 256)
      goto LABEL_28;
  }
LABEL_27:
  WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 > 15)
  {
    if (a2 == 16 || a2 == 32 || a2 == 64)
LABEL_6:
      WTF::TextStream::operator<<();
  }
  else
  {
    switch(a2)
    {
      case 1:
      case 2:
      case 4:
      case 8:
        goto LABEL_6;
      default:
        return a1;
    }
  }
  return a1;
}

{
  char *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v2 = (&WebCore::blendOperatorNames)[2 * (a2 - 1) + 1];
  if (v2)
  {
    if (v2 == (char *)1)
    {
      v3 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v3 = v8;
    }
    v7 = v3;
  }
  else
  {
    v7 = 0;
  }
  v5 = WTF::TextStream::operator<<();
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v5;
}

{
  if (a2 == 1 || a2 == 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 > 511)
  {
    if (a2 < 0x2000)
    {
      if (a2 > 2047)
      {
        if (a2 != 2048 && a2 != 4096)
          return a1;
      }
      else if (a2 != 512 && a2 != 1024)
      {
        return a1;
      }
    }
    else if (a2 < 0x8000)
    {
      if (a2 != 0x2000 && a2 != 0x4000)
        return a1;
    }
    else if (a2 != 0x8000 && a2 != 0x10000 && a2 != 0x20000)
    {
      return a1;
    }
LABEL_28:
    WTF::TextStream::operator<<();
    return a1;
  }
  if (a2 > 31)
  {
    if (a2 > 127)
    {
      if (a2 != 128 && a2 != 256)
        return a1;
    }
    else if (a2 != 32 && a2 != 64)
    {
      return a1;
    }
    goto LABEL_28;
  }
  switch(a2)
  {
    case 1:
    case 2:
    case 4:
    case 8:
      goto LABEL_28;
    case 3:
    case 5:
    case 6:
    case 7:
      return a1;
    default:
      if ("hovered" == 16)
        goto LABEL_28;
      break;
  }
  return a1;
}

{
  uint64_t result;

  switch(a2)
  {
    case 1:
    case 2:
    case 4:
    case 8:
      goto LABEL_2;
    case 3:
    case 5:
    case 6:
    case 7:
      return result;
    default:
      if ("none" == 16 || "none" == 32)
LABEL_2:
        result = WTF::TextStream::operator<<();
      break;
  }
  return result;
}

uint64_t WebCore::parseDisabledAdaptations(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  int v22;
  unint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  _BOOL4 v34;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  WTF::StringImpl *v43;
  const char **v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  char v51;

  v48 = a1;
  v49 = a2;
  v50 = 44;
  v51 = 0;
  v44 = (const char **)&v48;
  v45 = 0;
  v47 = (_DWORD)a2 == 0;
  result = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v44);
  v3 = v49;
  v4 = v45;
  v5 = 0;
  if (v45 == (_DWORD)v49 && v47)
    return v5;
  v7 = MEMORY[0x1E0CBF868];
  while (1)
  {
    v8 = *((unsigned int *)v44 + 2);
    if (v8 <= v4)
    {
LABEL_38:
      v11 = 0x100000000;
      v13 = "";
      goto LABEL_47;
    }
    v9 = v46;
    if (v8 - v4 <= v46)
    {
      if (!v4)
      {
        v13 = *v44;
        v11 = (unint64_t)v44[1];
        goto LABEL_16;
      }
      v9 = v8 - v4;
    }
    v10 = v4;
    v11 = v9;
    v12 = v8 - v4;
    if (*((_BYTE *)v44 + 12))
    {
      if (v12 < v9)
        goto LABEL_97;
      v13 = &(*v44)[v10];
      v11 = v9 | 0x100000000;
    }
    else
    {
      if (v12 < v9)
        goto LABEL_97;
      v13 = &(*v44)[2 * v10];
    }
LABEL_16:
    v14 = v11;
    if ((v11 & 0xFF00000000) == 0)
      break;
    if ((_DWORD)v11)
    {
      v15 = 0;
      while (1)
      {
        v16 = v13[v15];
        if ((v16 - 9) >= 5 && v16 != 32)
          break;
        if (v11 == ++v15)
          goto LABEL_38;
      }
      if ((_DWORD)v11 != 1)
      {
        v17 = (v11 - 1);
        while (v17 < v11)
        {
          v18 = v13[v17];
          if ((v18 - 9) < 5 || v18 == 32)
          {
            if ((_DWORD)--v17)
              continue;
          }
          if (!(_DWORD)v15 && (_DWORD)v17 == (_DWORD)v11 - 1)
            goto LABEL_47;
          goto LABEL_31;
        }
        goto LABEL_97;
      }
      if ((_DWORD)v15)
      {
        LODWORD(v17) = 0;
LABEL_31:
        v19 = (v17 - v15 + 1);
        if ((unint64_t)v11 - v15 < v19)
          goto LABEL_97;
        v13 += v15;
        v11 = v19 | 0x100000000;
      }
    }
LABEL_47:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v26 = v43;
    if (v43)
    {
      v27 = (unsigned __int8 *)*((_QWORD *)v43 + 1);
      v28 = *((_DWORD *)v43 + 1);
      v29 = (*((_DWORD *)v43 + 4) >> 2) & 1;
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v29 = 1;
    }
    if (v28 != (_DWORD)v11)
    {
LABEL_95:
      v34 = 0;
      goto LABEL_58;
    }
    if ((v11 & 0xFF00000000) != 0)
    {
      if (v29)
      {
        if (!v28)
          goto LABEL_94;
        if (*(unsigned __int8 *)(v7 + *(unsigned __int8 *)v13) != *(unsigned __int8 *)(v7 + *v27))
          goto LABEL_95;
        v30 = 1;
        do
        {
          v31 = v30;
          if (v11 == v30)
            break;
          v32 = *(unsigned __int8 *)(v7 + v13[v30]);
          v33 = *(unsigned __int8 *)(v7 + v27[v30++]);
        }
        while (v32 == v33);
      }
      else
      {
        if (!(_DWORD)v11)
          goto LABEL_94;
        if ((*(unsigned __int16 *)v27 | (32 * (*(unsigned __int16 *)v27 - 65 < 0x1A))) != *(unsigned __int8 *)(v7 + *(unsigned __int8 *)v13))
          goto LABEL_95;
        v38 = 1;
        do
        {
          v31 = v38;
          if (v11 == v38)
            break;
          v39 = *(unsigned __int8 *)(v7 + v13[v38]);
          v40 = *(unsigned __int16 *)&v27[2 * v38] | (32 * (*(unsigned __int16 *)&v27[2 * v38] - 65 < 0x1A));
          ++v38;
        }
        while (v40 == v39);
      }
    }
    else if (v29)
    {
      if (!(_DWORD)v11)
        goto LABEL_94;
      if ((*(unsigned __int16 *)v13 | (32 * (*(unsigned __int16 *)v13 - 65 < 0x1A))) != *(unsigned __int8 *)(v7 + *v27))
        goto LABEL_95;
      v36 = 1;
      do
      {
        v31 = v36;
        if (v11 == v36)
          break;
        v37 = *(unsigned __int16 *)&v13[2 * v36] | (32 * (*(unsigned __int16 *)&v13[2 * v36] - 65 < 0x1A));
        ++v36;
      }
      while (v37 == *(unsigned __int8 *)(v7 + v27[v31]));
    }
    else
    {
      if (!(_DWORD)v11)
      {
LABEL_94:
        v34 = 1;
        goto LABEL_58;
      }
      if ((*(unsigned __int16 *)v13 | (32 * (*(unsigned __int16 *)v13 - 65 < 0x1A))) != (*(unsigned __int16 *)v27 | (32 * (*(unsigned __int16 *)v27 - 65 < 0x1A))))
        goto LABEL_95;
      v41 = 1;
      do
      {
        v31 = v41;
        if (v11 == v41)
          break;
        v42 = *(unsigned __int16 *)&v13[2 * v41] | (32 * (*(unsigned __int16 *)&v13[2 * v41] - 65 < 0x1A));
        ++v41;
      }
      while (v42 == (*(unsigned __int16 *)&v27[2 * v31] | (32
                                                          * (*(unsigned __int16 *)&v27[2 * v31] - 65 < 0x1A))));
    }
    v34 = v31 >= v11;
LABEL_58:
    v43 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    v5 = v5 | v34;
    result = WTF::StringView::SplitResult::Iterator::operator++();
    v4 = v45;
    if (v45 == v3 && v47)
      return v5;
  }
  if (!(_DWORD)v11)
    goto LABEL_47;
  v20 = 0;
  v21 = v13;
  while (1)
  {
    v22 = *(unsigned __int16 *)v21;
    if ((v22 - 9) >= 5 && v22 != 32)
      break;
    ++v20;
    v21 += 2;
    if (v11 == v20)
      goto LABEL_38;
  }
  if ((_DWORD)v11 == 1)
  {
    if ((_DWORD)v20)
    {
      LODWORD(v23) = 0;
LABEL_73:
      v11 = (v23 - v20 + 1);
      v13 = v21;
      if (v14 - v20 < v11)
        goto LABEL_97;
    }
    goto LABEL_47;
  }
  v23 = (v11 - 1);
  while (v23 < v11)
  {
    v24 = *(unsigned __int16 *)&v13[2 * v23];
    if ((v24 - 9) < 5 || v24 == 32)
    {
      if ((_DWORD)--v23)
        continue;
    }
    if ((_DWORD)v20 || (_DWORD)v23 != (_DWORD)v11 - 1)
      goto LABEL_73;
    goto LABEL_47;
  }
LABEL_97:
  __break(1u);
  return result;
}

_BYTE *WebCore::parseDialogFeatures@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *result;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  _BOOL4 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;
  unint64_t v32;
  int v33;
  const WTF::String *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  const char *v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  WTF::StringImpl *v57;
  WTF::StringImpl **v58;
  int i;
  uint64_t v60;
  WTF::StringImpl **v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  int v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  const char *v73;
  int16x8_t *v74;
  int16x8_t v75;
  int8x16_t v76;
  int16x8_t *v77;
  const char *v78;
  int16x8_t v79;
  char *v80;
  const char *v81;
  int16x8_t *v82;
  int16x8_t v83;
  int8x16_t v84;
  int16x8_t *v85;
  const char *v86;
  int16x8_t v87;
  char *v88;
  uint64_t v89;
  int16x8_t *v90;
  int16x8_t v91;
  int8x16_t v92;
  int16x8_t *v93;
  const char *v94;
  int16x8_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  float v100;
  unint64_t v101;
  float v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned __int16 v107;
  unsigned __int16 v108;
  BOOL v109;
  __int16 v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  int v117;
  uint64_t v118[2];
  WTF::StringImpl *v119;
  const char **v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  __int16 v126;
  char v127;

  v118[0] = 0;
  v124 = a1;
  v125 = a2;
  v126 = 59;
  v127 = 0;
  v120 = (const char **)&v124;
  v121 = 0;
  v123 = (_DWORD)a2 == 0;
  result = (_BYTE *)WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v120);
  v7 = v121;
  v117 = v125;
  if (v121 == (_DWORD)v125 && v123)
    goto LABEL_241;
  do
  {
    v8 = *((unsigned int *)v120 + 2);
    if (v8 <= v7)
    {
      v14 = 0;
      v15 = 0;
      v21 = -1;
      v11 = 0x100000000;
      v13 = "";
      goto LABEL_32;
    }
    v9 = v122;
    if (v8 - v7 <= v122)
    {
      if (!v7)
      {
        v13 = *v120;
        v11 = (uint64_t)v120[1];
        goto LABEL_12;
      }
      v9 = v8 - v7;
    }
    v10 = v7;
    v11 = v9;
    v12 = v8 - v7;
    if (*((_BYTE *)v120 + 12))
    {
      if (v12 < v9)
        goto LABEL_275;
      v13 = &(*v120)[v10];
      v11 = v9 | 0x100000000;
    }
    else
    {
      if (v12 < v9)
        goto LABEL_275;
      v13 = &(*v120)[2 * v10];
    }
LABEL_12:
    v14 = (v11 & 0xFF00000000) == 0;
    v15 = v11;
    if ((v11 & 0xFF00000000) != 0)
    {
      if ((_DWORD)v11)
      {
        if ((v11 & 0xFFFFFFF0) != 0)
          v16 = 16;
        else
          v16 = v11;
        v17 = v16;
        v18 = v16;
        v19 = v13;
        do
        {
          if (*v19 == 61)
            goto LABEL_22;
          ++v19;
          --v18;
        }
        while (v18);
        if (v11 >= 0x11uLL)
        {
          v19 = memchr((void *)&v13[v16], 61, v11 - v16);
          if (v19)
          {
LABEL_22:
            v20 = v19 - v13;
            goto LABEL_23;
          }
        }
        v20 = -1;
LABEL_23:
        result = v13;
        do
        {
          if (*result == 58)
            goto LABEL_28;
          ++result;
          --v17;
        }
        while (v17);
        if (v11 >= 0x11uLL)
        {
          result = memchr((void *)&v13[v16], 58, v11 - v16);
          if (result)
          {
LABEL_28:
            v21 = result - v13;
            goto LABEL_29;
          }
        }
        v14 = 0;
        goto LABEL_174;
      }
      v14 = 0;
      v21 = -1;
    }
    else
    {
      if ((_DWORD)v11)
      {
        v73 = &v13[2 * v11];
        if (v11 <= 0x1FuLL)
        {
          v89 = 2 * v11;
          v80 = (char *)v13;
          while (*(_WORD *)v80 != 61)
          {
            v80 += 2;
            v89 -= 2;
            if (!v89)
              goto LABEL_220;
          }
LABEL_200:
          if (v80 == v73)
            v20 = -1;
          else
            v20 = (v80 - v13) >> 1;
        }
        else
        {
          v74 = (int16x8_t *)v13;
          do
          {
            v75.i64[0] = 0x3D003D003D003DLL;
            v75.i64[1] = 0x3D003D003D003DLL;
            v76 = (int8x16_t)vceqq_s16(*v74, v75);
            v75.i16[0] = vmaxvq_u16((uint16x8_t)v76);
            if (v75.i32[0])
              goto LABEL_199;
            v77 = v74 + 1;
            v78 = &v74[1].i8[14];
            ++v74;
          }
          while (v78 < v73);
          if (v77 < (int16x8_t *)v73)
          {
            v74 = (int16x8_t *)(v73 - 16);
            v79.i64[0] = 0x3D003D003D003DLL;
            v79.i64[1] = 0x3D003D003D003DLL;
            v76 = (int8x16_t)vceqq_s16(*((int16x8_t *)v73 - 1), v79);
            v79.i16[0] = vmaxvq_u16((uint16x8_t)v76);
            if (v79.i32[0])
            {
LABEL_199:
              v80 = &v74->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v76))];
              goto LABEL_200;
            }
          }
LABEL_220:
          v20 = -1;
        }
        if (v11 <= 0x1FuLL)
        {
          v97 = 2 * v11;
          v96 = (char *)v13;
          while (*(_WORD *)v96 != 58)
          {
            v96 += 2;
            v21 = -1;
            v97 -= 2;
            if (!v97)
            {
              v14 = 1;
              goto LABEL_31;
            }
          }
LABEL_228:
          if (v96 == v73)
            goto LABEL_234;
          v21 = (v96 - v13) >> 1;
LABEL_29:
          if (v20 != -1 && v21 != -1)
            goto LABEL_157;
LABEL_31:
          if (v20 != -1)
            goto LABEL_33;
          goto LABEL_32;
        }
        v90 = (int16x8_t *)v13;
        do
        {
          v91.i64[0] = 0x3A003A003A003ALL;
          v91.i64[1] = 0x3A003A003A003ALL;
          v92 = (int8x16_t)vceqq_s16(*v90, v91);
          v91.i16[0] = vmaxvq_u16((uint16x8_t)v92);
          if (v91.i32[0])
            goto LABEL_227;
          v93 = v90 + 1;
          v94 = &v90[1].i8[14];
          ++v90;
        }
        while (v94 < v73);
        if (v93 < (int16x8_t *)v73)
        {
          v90 = (int16x8_t *)(v73 - 16);
          v95.i64[0] = 0x3A003A003A003ALL;
          v95.i64[1] = 0x3A003A003A003ALL;
          v92 = (int8x16_t)vceqq_s16(*((int16x8_t *)v73 - 1), v95);
          v95.i16[0] = vmaxvq_u16((uint16x8_t)v92);
          if (v95.i32[0])
          {
LABEL_227:
            v96 = &v90->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v92))];
            goto LABEL_228;
          }
        }
LABEL_234:
        v14 = 1;
LABEL_174:
        v21 = -1;
        goto LABEL_31;
      }
      v21 = -1;
      v14 = 1;
    }
LABEL_32:
    v20 = v21;
LABEL_33:
    if (!v15)
      goto LABEL_71;
    v22 = v20;
    if (!v14)
      v22 = v20 | 0x100000000;
    if (v15 <= v20)
      v22 = v11;
    v23 = v22;
    if ((v22 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)v22)
        goto LABEL_70;
      v24 = 0;
      while (1)
      {
        v25 = v13[v24];
        if ((v25 - 9) >= 5 && v25 != 32)
          break;
        if (v22 == ++v24)
          goto LABEL_71;
      }
      if ((_DWORD)v22 == 1)
      {
        if (!(_DWORD)v24)
          goto LABEL_70;
        LODWORD(v26) = 0;
      }
      else
      {
        v26 = (v22 - 1);
        do
        {
          if (v26 >= v22)
            goto LABEL_275;
          v27 = v13[v26];
          if ((v27 - 9) >= 5 && v27 != 32)
            break;
          --v26;
        }
        while ((_DWORD)v26);
        if (!(_DWORD)v24 && (_DWORD)v26 == (_DWORD)v22 - 1)
          goto LABEL_70;
      }
      v28 = (v26 - v24 + 1);
      if (v23 - v24 < v28)
        goto LABEL_275;
      v22 = v28 | 0x100000000;
    }
    else
    {
      if (!(_DWORD)v22)
        goto LABEL_70;
      v29 = 0;
      v30 = v13;
      while (1)
      {
        v31 = *(unsigned __int16 *)v30;
        if ((v31 - 9) >= 5 && v31 != 32)
          break;
        ++v29;
        v30 += 2;
        if (v22 == v29)
          goto LABEL_71;
      }
      if ((_DWORD)v22 == 1)
      {
        if (!(_DWORD)v29)
          goto LABEL_70;
        LODWORD(v32) = 0;
      }
      else
      {
        v32 = (v22 - 1);
        do
        {
          if (v32 >= v22)
            goto LABEL_275;
          v33 = *(unsigned __int16 *)&v13[2 * v32];
          if ((v33 - 9) >= 5 && v33 != 32)
            break;
          --v32;
        }
        while ((_DWORD)v32);
        if (!(_DWORD)v29 && (_DWORD)v32 == (_DWORD)v22 - 1)
          goto LABEL_70;
      }
      v22 = (v32 - v29 + 1);
      if (v23 - v29 < v22)
        goto LABEL_275;
    }
LABEL_70:
    if ((v22 & 0xFF00000000) != 0)
    {
LABEL_71:
      result = (_BYTE *)WTF::String::String();
      goto LABEL_72;
    }
    result = (_BYTE *)WTF::String::String();
LABEL_72:
    if (v20 == -1)
    {
      v40 = 0;
      goto LABEL_126;
    }
    v35 = (v20 + 1);
    v36 = v15 - v35;
    if (v15 <= v35)
      goto LABEL_124;
    if ((_DWORD)v35)
    {
      v72 = v15 - (unint64_t)v35;
      if (v14)
      {
        if (v72 < v36)
          goto LABEL_275;
        v13 += 2 * v35;
      }
      else
      {
        if (v72 < v36)
          goto LABEL_275;
        v13 += v35;
        v36 |= 0x100000000uLL;
      }
    }
    else
    {
      v36 = v11;
    }
    v37 = v36;
    if ((v36 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)v36)
        goto LABEL_108;
      v38 = 0;
      while (1)
      {
        v39 = v13[v38];
        if ((v39 - 9) >= 5 && v39 != 32)
          break;
        if (v36 == ++v38)
          goto LABEL_124;
      }
      if ((_DWORD)v36 == 1)
      {
        if (!(_DWORD)v38)
          goto LABEL_108;
        LODWORD(v41) = 0;
      }
      else
      {
        v41 = (v36 - 1);
        do
        {
          if (v41 >= v36)
            goto LABEL_275;
          v42 = v13[v41];
          if ((v42 - 9) >= 5 && v42 != 32)
            break;
          --v41;
        }
        while ((_DWORD)v41);
        if (!(_DWORD)v38 && (_DWORD)v41 == (_DWORD)v36 - 1)
          goto LABEL_108;
      }
      v43 = (v41 - v38 + 1);
      if ((unint64_t)v36 - v38 < v43)
        goto LABEL_275;
      v13 += v38;
      v36 = v43 | 0x100000000;
    }
    else
    {
      if (!(_DWORD)v36)
        goto LABEL_108;
      v44 = 0;
      v45 = v13;
      while (1)
      {
        v46 = *(unsigned __int16 *)v45;
        if ((v46 - 9) >= 5 && v46 != 32)
          break;
        ++v44;
        v45 += 2;
        if (v36 == v44)
          goto LABEL_124;
      }
      if ((_DWORD)v36 == 1)
      {
        if (!(_DWORD)v44)
          goto LABEL_108;
        LODWORD(v47) = 0;
      }
      else
      {
        v47 = (v36 - 1);
        do
        {
          if (v47 >= v36)
            goto LABEL_275;
          v48 = *(unsigned __int16 *)&v13[2 * v47];
          if ((v48 - 9) >= 5 && v48 != 32)
            break;
          --v47;
        }
        while ((_DWORD)v47);
        if (!(_DWORD)v44 && (_DWORD)v47 == (_DWORD)v36 - 1)
          goto LABEL_108;
      }
      v36 = (v47 - v44 + 1);
      v13 = v45;
      if (v37 - v44 < v36)
      {
LABEL_275:
        __break(1u);
        return result;
      }
    }
LABEL_108:
    if ((v36 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)v36)
        goto LABEL_124;
      v49 = 16;
      if ((v36 & 0xFFFFFFF0) == 0)
        v49 = v36;
      v50 = v49;
      v51 = v13;
      do
      {
        if (*v51 == 32)
          goto LABEL_117;
        ++v51;
        --v50;
      }
      while (v50);
      if (v36 >= 0x11uLL)
      {
        v51 = memchr((void *)&v13[v49], 32, v36 - v49);
        if (v51)
        {
LABEL_117:
          LODWORD(v52) = (_DWORD)v51 - (_DWORD)v13;
          goto LABEL_118;
        }
      }
      goto LABEL_216;
    }
    if (!(_DWORD)v36)
      goto LABEL_216;
    v81 = &v13[2 * v36];
    if (v36 > 0x1FuLL)
    {
      v82 = (int16x8_t *)v13;
      do
      {
        v83.i64[0] = 0x20002000200020;
        v83.i64[1] = 0x20002000200020;
        v84 = (int8x16_t)vceqq_s16(*v82, v83);
        v83.i16[0] = vmaxvq_u16((uint16x8_t)v84);
        if (v83.i32[0])
          goto LABEL_212;
        v85 = v82 + 1;
        v86 = &v82[1].i8[14];
        ++v82;
      }
      while (v86 < v81);
      if (v85 < (int16x8_t *)v81)
      {
        v87.i64[0] = 0x20002000200020;
        v87.i64[1] = 0x20002000200020;
        v84 = (int8x16_t)vceqq_s16(*((int16x8_t *)v81 - 1), v87);
        v87.i16[0] = vmaxvq_u16((uint16x8_t)v84);
        if (v87.i32[0])
        {
          v82 = (int16x8_t *)(v81 - 16);
LABEL_212:
          v88 = &v82->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v84))];
          goto LABEL_213;
        }
      }
LABEL_216:
      LODWORD(v52) = -1;
      goto LABEL_118;
    }
    v98 = 2 * v36;
    v88 = (char *)v13;
    while (*(_WORD *)v88 != 32)
    {
      v88 += 2;
      LODWORD(v52) = -1;
      v98 -= 2;
      if (!v98)
        goto LABEL_118;
    }
LABEL_213:
    v52 = (v88 - v13) >> 1;
    if (v88 == v81)
      LODWORD(v52) = -1;
LABEL_118:
    if ((_DWORD)v36)
    {
      v53 = v52;
      if ((v36 & 0xFF00000000) != 0)
        v53 = v52 | 0x100000000;
      if (v36 <= v52)
        v53 = v36;
      if ((v53 & 0xFF00000000) == 0)
      {
        WTF::String::String();
        goto LABEL_125;
      }
    }
LABEL_124:
    WTF::String::String();
LABEL_125:
    v40 = v118[1];
LABEL_126:
    v54 = v118[0];
    if (v118[0]
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v118, 0), (v54 = v118[0]) != 0))
    {
      v55 = *(_DWORD *)(v54 - 8);
    }
    else
    {
      v55 = 0;
    }
    v56 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)&v119, v34);
    v58 = 0;
    for (i = 1; ; ++i)
    {
      v60 = v56 & v55;
      v61 = (WTF::StringImpl **)(v54 + 16 * v60);
      if (*v61 == (WTF::StringImpl *)-1)
      {
        v58 = (WTF::StringImpl **)(v54 + 16 * v60);
        goto LABEL_135;
      }
      if (!*v61)
      {
        if (v58)
        {
          *v58 = 0;
          v58[1] = 0;
          --*(_DWORD *)(v118[0] - 16);
          v61 = v58;
        }
        v62 = v119;
        v119 = 0;
        v63 = *v61;
        *v61 = v62;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
            WTF::StringImpl::destroy(v63, v57);
          else
            *(_DWORD *)v63 -= 2;
        }
        v64 = v61[1];
        v61[1] = (WTF::StringImpl *)v40;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, v57);
          else
            *(_DWORD *)v64 -= 2;
        }
        if (v118[0])
          v65 = *(_DWORD *)(v118[0] - 12) + 1;
        else
          v65 = 1;
        *(_DWORD *)(v118[0] - 12) = v65;
        if (v118[0])
          v66 = *(_DWORD *)(v118[0] - 12);
        else
          v66 = 0;
        v67 = (*(_DWORD *)(v118[0] - 16) + v66);
        v68 = *(unsigned int *)(v118[0] - 4);
        if (v68 > 0x400)
        {
          if (v68 > 2 * v67)
            goto LABEL_154;
        }
        else if (3 * v68 > 4 * v67)
        {
          goto LABEL_154;
        }
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v118, v61);
        goto LABEL_154;
      }
      if (WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>((uint64_t *)(v54 + 16 * v60), (uint64_t *)&v119))
      {
        break;
      }
LABEL_135:
      v56 = i + v60;
    }
    v69 = v54 + 16 * v60;
    v70 = *(WTF::StringImpl **)(v69 + 8);
    *(_QWORD *)(v69 + 8) = v40;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v57);
      else
        *(_DWORD *)v70 -= 2;
    }
LABEL_154:
    v71 = v119;
    v119 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v57);
      else
        *(_DWORD *)v71 -= 2;
    }
LABEL_157:
    result = (_BYTE *)WTF::StringView::SplitResult::Iterator::operator++();
    v7 = v121;
  }
  while (v121 != v117 || !v123);
LABEL_241:
  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 36) = 0;
  *(_QWORD *)(a4 + 44) = 0;
  *(_QWORD *)(a4 + 50) = 0;
  *(_WORD *)(a4 + 38) = 256;
  *(_DWORD *)(a4 + 42) = 16777472;
  *(_WORD *)(a4 + 52) = 257;
  v99 = WebCore::floatFeature(v118, (const WTF::String *)"dialogwidth", 12, 100.0, a3[2]);
  if (HIDWORD(v99))
    v100 = *(float *)&v99;
  else
    v100 = 620.0;
  v101 = WebCore::floatFeature(v118, (const WTF::String *)"dialogheight", 13, 100.0, a3[3]);
  if (HIDWORD(v101))
    v102 = *(float *)&v101;
  else
    v102 = 450.0;
  *(float *)(a4 + 20) = v100;
  *(_BYTE *)(a4 + 24) = 1;
  *(float *)(a4 + 28) = v102;
  *(_BYTE *)(a4 + 32) = 1;
  v103 = WebCore::floatFeature(v118, (const WTF::String *)"dialogleft", 11, *a3, (float)(*a3 + a3[2]) - v100);
  *(_DWORD *)(a4 + 4) = v103;
  v104 = HIDWORD(v103);
  *(_BYTE *)(a4 + 8) = BYTE4(v103);
  v105 = WebCore::floatFeature(v118, (const WTF::String *)"dialogtop", 10, a3[1], (float)(a3[1] + a3[3]) - v102);
  *(_DWORD *)(a4 + 12) = v105;
  v106 = HIDWORD(v105);
  *(_BYTE *)(a4 + 16) = BYTE4(v105);
  v107 = WebCore::BOOLFeature(v118, (const WTF::String *)"center", 7);
  if (v107 < 0x100u || (_BYTE)v107)
  {
    if (!v104)
    {
      *(float *)(a4 + 4) = *a3 + (float)((float)(a3[2] - v100) * 0.5);
      *(_BYTE *)(a4 + 8) = 1;
    }
    if (!v106)
    {
      *(float *)(a4 + 12) = a3[1] + (float)((float)(a3[3] - v102) * 0.5);
      *(_BYTE *)(a4 + 16) = 1;
    }
  }
  *(_WORD *)(a4 + 48) = ((unsigned __int16)WebCore::BOOLFeature(v118, (const WTF::String *)"resizable", 10) > 0x100u) | 0x100;
  v108 = WebCore::BOOLFeature(v118, (const WTF::String *)"scroll", 7);
  if ((_BYTE)v108)
    v109 = 0;
  else
    v109 = v108 >= 0x100u;
  v110 = !v109;
  *(_WORD *)(a4 + 46) = v110 | 0x100;
  result = (_BYTE *)WebCore::BOOLFeature(v118, (const WTF::String *)"status", 7);
  *(_WORD *)(a4 + 40) = ((unsigned __int16)result > 0x100u) | 0x100;
  v112 = v118[0];
  if (v118[0])
  {
    v113 = *(unsigned int *)(v118[0] - 4);
    if ((_DWORD)v113)
    {
      v114 = v118[0];
      do
      {
        v115 = *(WTF::StringImpl **)v114;
        if (*(_QWORD *)v114 != -1)
        {
          v116 = *(WTF::StringImpl **)(v114 + 8);
          *(_QWORD *)(v114 + 8) = 0;
          if (v116)
          {
            if (*(_DWORD *)v116 == 2)
            {
              WTF::StringImpl::destroy(v116, v111);
              v115 = *(WTF::StringImpl **)v114;
            }
            else
            {
              *(_DWORD *)v116 -= 2;
            }
          }
          *(_QWORD *)v114 = 0;
          if (v115)
          {
            if (*(_DWORD *)v115 == 2)
              WTF::StringImpl::destroy(v115, v111);
            else
              *(_DWORD *)v115 -= 2;
          }
        }
        v114 += 16;
        --v113;
      }
      while (v113);
    }
    return (_BYTE *)WTF::fastFree((WTF *)(v112 - 16), v111);
  }
  return result;
}

uint64_t WebCore::floatFeature(uint64_t *a1, const WTF::String *a2, uint64_t a3, float a4, float a5)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  BOOL v19;
  float v20;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  if (a3)
  {
    if (a3 == 1)
    {
      v8 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v8 = v23;
    }
    v22 = v8;
  }
  else
  {
    v8 = 0;
    v22 = 0;
  }
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)&v22, a2);
    v12 = 0;
    v8 = v22;
    while (1)
    {
      v13 = v11 & v10;
      v14 = *(_QWORD *)(v9 + 16 * v13);
      if (v14 != -1)
      {
        if (!v14)
        {
          if (*a1)
            v9 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
          else
            v9 = 0;
          break;
        }
        if (WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>(v14, (uint64_t)v8))
        {
          v9 += 16 * v13;
          break;
        }
      }
      v11 = ++v12 + v13;
    }
  }
  v22 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v15 = *a1;
  if (*a1)
    v15 += 16 * *(unsigned int *)(v15 - 4);
  if (v15 == v9)
  {
    v17 = 0;
    v20 = 0.0;
  }
  else
  {
    LOBYTE(v23) = 0;
    WTF::String::toDouble((WTF::String *)(v9 + 8), (BOOL *)&v23);
    v17 = 0;
    v19 = v16 == 0.0 && v23 == 0;
    v20 = 0.0;
    if (!v19)
    {
      v17 = 0x100000000;
      if (a5 <= a4)
      {
        v20 = a4;
      }
      else
      {
        v20 = a4;
        if (v16 >= a4)
        {
          if (v16 <= a5)
          {
            v20 = (float)(int)v16;
            v17 = 0x100000000;
          }
          else
          {
            v20 = a5;
          }
        }
      }
    }
  }
  return v17 & 0x100000000 | LODWORD(v20);
}

uint64_t WebCore::BOOLFeature(uint64_t *a1, const WTF::String *a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _QWORD v22[2];

  if (a3)
  {
    if (a3 == 1)
    {
      v4 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = (WTF::StringImpl *)v22[1];
    }
    v22[0] = v4;
  }
  else
  {
    v4 = 0;
    v22[0] = 0;
  }
  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)v22, a2);
    v8 = 0;
    v4 = (WTF::StringImpl *)v22[0];
    while (1)
    {
      v9 = v7 & v6;
      v10 = *(_QWORD *)(v5 + 16 * v9);
      if (v10 != -1)
      {
        if (!v10)
        {
          if (*a1)
            v5 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
          else
            v5 = 0;
          break;
        }
        if (WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>(v10, (uint64_t)v4))
        {
          v5 += 16 * v9;
          break;
        }
      }
      v7 = ++v8 + v9;
    }
  }
  v22[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v11 = *a1;
  if (*a1)
    v11 += 16 * *(unsigned int *)(v11 - 4);
  if (v11 != v5)
  {
    v12 = *(_QWORD *)(v5 + 8);
    if (v12)
    {
      v13 = 1;
      if ((MEMORY[0x19AEA53F4](v12, "1", 1) & 1) != 0)
      {
LABEL_38:
        v15 = 1;
        return v13 | (v15 << 8);
      }
      v14 = *(_QWORD *)(v5 + 8);
      if (!v14)
        goto LABEL_23;
      v16 = *(_DWORD *)(v14 + 4);
      if (v16 != 3)
      {
        if (v16 == 2)
        {
          v17 = *(_QWORD *)(v14 + 8);
          if ((*(_BYTE *)(v14 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v17 & 0xDF) != 0x4F)
              goto LABEL_23;
            v18 = *(unsigned __int8 *)(v17 + 1);
          }
          else
          {
            if ((*(_WORD *)v17 & 0xFFDF) != 0x4F)
              goto LABEL_23;
            v18 = *(unsigned __int16 *)(v17 + 2);
          }
          v13 = (v18 & 0xFFFFFFDF) == 78;
          goto LABEL_38;
        }
LABEL_23:
        v13 = 0;
        goto LABEL_38;
      }
      v19 = *(_QWORD *)(v14 + 8);
      if ((*(_BYTE *)(v14 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v19 & 0xDF) != 0x59 || (*(_BYTE *)(v19 + 1) & 0xDF) != 0x45)
          goto LABEL_23;
        v20 = *(unsigned __int8 *)(v19 + 2);
      }
      else
      {
        if ((*(_WORD *)v19 & 0xFFDF) != 0x59 || (*(_WORD *)(v19 + 2) & 0xFFDF) != 0x45)
          goto LABEL_23;
        v20 = *(unsigned __int16 *)(v19 + 4);
      }
      if ((v20 & 0xFFFFFFDF) != 0x53)
        goto LABEL_23;
    }
    v13 = 1;
    goto LABEL_38;
  }
  v13 = 0;
  v15 = 0;
  return v13 | (v15 << 8);
}

void WebCore::VisualViewport::~VisualViewport(WebCore::VisualViewport *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::EventTarget::~EventTarget(this, a2);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::EventTarget::~EventTarget(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::BasicWheelEventDeltaFilter::~BasicWheelEventDeltaFilter(WebCore::BasicWheelEventDeltaFilter *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>(uint64_t result, _BYTE *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  _QWORD *v6;
  size_t v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD v15[5];

  v4 = a4;
  v6 = (_QWORD *)result;
  v15[4] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v7 = 0;
LABEL_3:
    v8 = 0;
    v9 = a4;
    do
    {
      ++v8;
      v10 = v9 > 9;
      v9 /= 0xAuLL;
    }
    while (v10);
    if ((v8 & 0x80000000) == 0)
    {
      v11 = (v7 + v8);
      if (!__OFADD__((_DWORD)v7, v8))
      {
        if (!(_DWORD)v11)
        {
          v12 = MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          goto LABEL_17;
        }
        if ((v11 & 0x80000000) == 0)
        {
          result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
          v12 = v15[0];
          if (v15[0])
          {
            v13 = (_BYTE *)(v15[0] + 20);
            *(_DWORD *)v15[0] = 2;
            *(_DWORD *)(v12 + 4) = v11;
            *(_QWORD *)(v12 + 8) = v12 + 20;
            *(_DWORD *)(v12 + 16) = 4;
            if ((_DWORD)v7)
            {
              if ((_DWORD)v7 == 1)
                *v13 = *a2;
              else
                result = (uint64_t)memcpy((void *)(v12 + 20), a2, v7);
            }
            v14 = 0;
            do
            {
              *((_BYTE *)&v15[3] + v14--) = (v4 % 0xA) | 0x30;
              v10 = v4 > 9;
              v4 /= 0xAuLL;
            }
            while (v10);
            if (v14 + 26 <= 25)
              result = (uint64_t)memcpy(&v13[v7], (char *)&v15[3] + v14 + 1, -v14);
          }
          goto LABEL_17;
        }
      }
    }
    v12 = 0;
LABEL_17:
    *v6 = v12;
    return result;
  }
  v7 = a3 - 1;
  if (!((unint64_t)(a3 - 1) >> 31))
    goto LABEL_3;
  result = 124;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  __int128 v31;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = v9 + 16;
    do
    {
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_WORD *)(v12 + 16) = 0;
      v12 += 24;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unint64_t *)(v6 + 24 * v13);
      v16 = v15[1];
      if (v16 != -1)
      {
        v17 = *v15;
        if (*(_OWORD *)v15 != 0)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = 0;
          v21 = (v17 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v17 - 1640531527) << 16) ^ ((unsigned __int16)v17 - 1640531527);
          v22 = (v17 >> 37) & 0x7FFF800 ^ ((v21 + WORD2(v17) + (v21 >> 11)) << 16) ^ (v21 + WORD2(v17) + (v21 >> 11));
          v23 = (v16 >> 5) & 0x7FFF800 ^ ((v22 + (v22 >> 11) + (unsigned __int16)v16) << 16) ^ (v22 + (v22 >> 11) + (unsigned __int16)v16);
          v24 = (v16 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v16) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v16) + (v23 >> 11));
          v25 = (v24 + (v24 >> 11)) ^ (8 * (v24 + (v24 >> 11)));
          v26 = (v25 + (v25 >> 5)) ^ (4 * (v25 + (v25 >> 5)));
          v27 = (v26 + (v26 >> 15)) ^ ((v26 + (v26 >> 15)) << 10);
          if (v27)
            v28 = v27;
          else
            v28 = 0x800000;
          do
          {
            v29 = v28 & v19;
            v30 = (_QWORD *)(v18 + 24 * v29);
            v28 = ++v20 + v29;
            v10 = (void *)(*v30 | v30[1]);
          }
          while (*(_OWORD *)v30 != 0);
          v31 = *(_OWORD *)v15;
          v30[2] = v15[2];
          *(_OWORD *)v30 = v31;
          if (v15 == a3)
            v14 = v30;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WheelEventTestMonitor::scheduleCallbackCheck(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3402ED8;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WheelEventTestMonitor::scheduleCallbackCheck(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3402ED8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::WheelEventTestMonitor::scheduleCallbackCheck(void)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  void *v5;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v2)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v2)
  {
LABEL_12:
    WebCore::Page::scheduleRenderingUpdate(*(_QWORD *)(v2 + 16), 2048);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*(unsigned __int8 **)v2, v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::parseWindowFeatures(WTF::StringView)::$_0,void,WTF::StringView,WTF::StringView>::call(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v8;
  int v9;
  int v10;
  _BOOL4 v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl **v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  WTF::StringImpl *v41;

  v5 = a5;
  v8 = *(_QWORD *)(result + 8);
  if ((_DWORD)a5)
  {
    if ((_DWORD)a5 == 3)
    {
      if ((a5 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a4 & 0xDF) != 0x59 || (*(_BYTE *)(a4 + 1) & 0xDF) != 0x45 || (*(_BYTE *)(a4 + 2) & 0xDF) != 0x53)
          goto LABEL_5;
      }
      else if ((*(_WORD *)a4 & 0xFFDF) != 0x59
             || (*(_WORD *)(a4 + 2) & 0xFFDF) != 0x45
             || (*(_WORD *)(a4 + 4) & 0xFFDF) != 0x53)
      {
        goto LABEL_25;
      }
    }
    else
    {
      if ((_DWORD)a5 != 4)
      {
        if ((a5 & 0xFF00000000) != 0)
        {
LABEL_5:
          result = WTF::parseInteger<int,unsigned char>(a4, a5, 10, 1);
          goto LABEL_26;
        }
LABEL_25:
        result = WTF::parseInteger<int,char16_t>(a4, a5, 10, 1);
LABEL_26:
        if ((result & 0xFF00000000) != 0)
          v9 = result;
        else
          v9 = 0;
        goto LABEL_29;
      }
      if ((a5 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a4 & 0xDF) != 0x54
          || (*(_BYTE *)(a4 + 1) & 0xDF) != 0x52
          || (*(_BYTE *)(a4 + 2) & 0xDF) != 0x55
          || (*(_BYTE *)(a4 + 3) & 0xDF) != 0x45)
        {
          goto LABEL_5;
        }
      }
      else if ((*(_WORD *)a4 & 0xFFDF) != 0x54
             || (*(_WORD *)(a4 + 2) & 0xFFDF) != 0x52
             || (*(_WORD *)(a4 + 4) & 0xFFDF) != 0x55
             || (*(_WORD *)(a4 + 6) & 0xFFDF) != 0x45)
      {
        goto LABEL_25;
      }
    }
  }
  v9 = 1;
LABEL_29:
  v10 = 0;
  switch((int)a3)
  {
    case 3:
      if ((a3 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a2 & 0xDF) != 0x54 || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x4F)
          goto LABEL_357;
        v20 = *(unsigned __int8 *)(a2 + 2);
      }
      else
      {
        if ((*(_WORD *)a2 & 0xFFDF) != 0x54 || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x4F)
          goto LABEL_357;
        v20 = *(unsigned __int16 *)(a2 + 4);
      }
      if ((v20 & 0xFFFFFFDF) != 0x50)
        goto LABEL_357;
      goto LABEL_71;
    case 4:
      if ((a3 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a2 & 0xDF) != 0x4C || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x45 || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x46)
          goto LABEL_357;
        v18 = *(unsigned __int8 *)(a2 + 3);
      }
      else
      {
        if ((*(_WORD *)a2 & 0xFFDF) != 0x4C
          || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x46)
        {
          goto LABEL_357;
        }
        v18 = *(unsigned __int16 *)(a2 + 6);
      }
      if ((v18 & 0xFFFFFFDF) == 0x54)
        goto LABEL_63;
      goto LABEL_357;
    case 5:
      if ((a3 & 0xFF00000000) != 0)
      {
        v21 = *(_BYTE *)a2 & 0xDF;
        if (v21 == 87)
        {
          if ((*(_BYTE *)(a2 + 1) & 0xDF) != 0x49
            || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x44
            || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x54)
          {
            goto LABEL_357;
          }
          v22 = *(unsigned __int8 *)(a2 + 4);
LABEL_80:
          if ((v22 & 0xFFFFFFDF) == 0x48)
            goto LABEL_94;
          goto LABEL_357;
        }
        if (v21 != 80
          || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x50
          || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x55)
        {
          goto LABEL_357;
        }
        v34 = *(unsigned __int8 *)(a2 + 4);
      }
      else
      {
        v37 = *(_WORD *)a2 & 0xFFDF;
        if (v37 == 87)
        {
          if ((*(_WORD *)(a2 + 2) & 0xFFDF) != 0x49
            || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x44
            || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x54)
          {
            goto LABEL_357;
          }
          v22 = *(unsigned __int16 *)(a2 + 8);
          goto LABEL_80;
        }
        if (v37 != 80
          || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x50
          || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x55)
        {
          goto LABEL_357;
        }
        v34 = *(unsigned __int16 *)(a2 + 8);
      }
      if ((v34 & 0xFFFFFFDF) != 0x50)
        goto LABEL_357;
      if (!*(_BYTE *)(v8 + 37))
        *(_BYTE *)(v8 + 37) = 1;
      *(_BYTE *)(v8 + 36) = v9 != 0;
      return result;
    case 6:
      if ((a3 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a2 & 0xDF) != 0x48
          || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x49
          || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x47
          || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x48)
        {
          goto LABEL_105;
        }
        v25 = *(unsigned __int8 *)(a2 + 5);
      }
      else
      {
        if ((*(_WORD *)a2 & 0xFFDF) != 0x48
          || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x49
          || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x47
          || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x48)
        {
          goto LABEL_105;
        }
        v25 = *(unsigned __int16 *)(a2 + 10);
      }
      if ((v25 & 0xFFFFFFDF) == 0x54)
        goto LABEL_119;
LABEL_105:
      v10 = 1;
      goto LABEL_30;
    case 7:
      if ((a3 & 0xFF00000000) != 0)
      {
        v19 = *(_BYTE *)a2 & 0xDF;
        if (v19 == 83)
        {
          if ((*(_BYTE *)(a2 + 1) & 0xDF) != 0x43
            || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x52
            || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x45)
          {
            goto LABEL_357;
          }
          if ((*(_BYTE *)(a2 + 4) & 0xDF) == 0x45
            && (*(_BYTE *)(a2 + 5) & 0xDF) == 0x4E
            && (*(_BYTE *)(a2 + 6) & 0xDF) == 0x58)
          {
LABEL_63:
            if (!*(_BYTE *)(v8 + 8))
              *(_BYTE *)(v8 + 8) = 1;
            *(float *)(v8 + 4) = (float)v9;
            return result;
          }
          if ((*(_BYTE *)(a2 + 4) & 0xDF) != 0x45 || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x4E)
            goto LABEL_357;
          v32 = *(unsigned __int8 *)(a2 + 6);
          goto LABEL_191;
        }
        if (v19 == 77)
        {
          if ((*(_BYTE *)(a2 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x4E
            || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x55
            || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x42
            || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x41)
          {
            goto LABEL_357;
          }
          v33 = *(unsigned __int8 *)(a2 + 6);
LABEL_200:
          if ((v33 & 0xFFFFFFDF) != 0x52)
            goto LABEL_357;
          if (!*(_BYTE *)(v8 + 39))
            *(_BYTE *)(v8 + 39) = 1;
          *(_BYTE *)(v8 + 38) = v9 != 0;
          return result;
        }
        if (v19 != 84
          || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x4F
          || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x4C
          || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x42
          || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x41)
        {
          goto LABEL_357;
        }
        v39 = *(unsigned __int8 *)(a2 + 6);
      }
      else
      {
        v36 = *(_WORD *)a2 & 0xFFDF;
        if (v36 == 83)
        {
          if ((*(_WORD *)(a2 + 2) & 0xFFDF) != 0x43
            || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x52
            || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x45
            || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x45)
          {
            goto LABEL_357;
          }
          if ((*(_WORD *)(a2 + 10) & 0xFFDF) == 0x4E && (*(_WORD *)(a2 + 12) & 0xFFDF) == 0x58)
            goto LABEL_63;
          if ((*(_WORD *)(a2 + 10) & 0xFFDF) != 0x4E)
            goto LABEL_357;
          v32 = *(unsigned __int16 *)(a2 + 12);
LABEL_191:
          if ((v32 & 0xFFFFFFDF) != 0x59)
            goto LABEL_357;
LABEL_71:
          if (!*(_BYTE *)(v8 + 16))
            *(_BYTE *)(v8 + 16) = 1;
          *(float *)(v8 + 12) = (float)v9;
          return result;
        }
        if (v36 == 77)
        {
          if ((*(_WORD *)(a2 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x4E
            || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x55
            || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x42
            || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x41)
          {
            goto LABEL_357;
          }
          v33 = *(unsigned __int16 *)(a2 + 12);
          goto LABEL_200;
        }
        if (v36 != 84
          || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x4F
          || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x4C
          || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x42
          || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x41)
        {
          goto LABEL_357;
        }
        v39 = *(unsigned __int16 *)(a2 + 12);
      }
      if ((v39 & 0xFFFFFFDF) != 0x52)
        goto LABEL_357;
      if (!*(_BYTE *)(v8 + 43))
        *(_BYTE *)(v8 + 43) = 1;
      *(_BYTE *)(v8 + 42) = v9 != 0;
      return result;
    case 10:
      if ((a3 & 0xFF00000000) != 0)
      {
        v23 = *(_BYTE *)a2 & 0xDF;
        if (v23 == 73)
        {
          if ((*(_BYTE *)(a2 + 1) & 0xDF) != 0x4E
            || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x4E
            || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x45
            || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x52
            || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x57
            || (*(_BYTE *)(a2 + 6) & 0xDF) != 0x49
            || (*(_BYTE *)(a2 + 7) & 0xDF) != 0x44
            || (*(_BYTE *)(a2 + 8) & 0xDF) != 0x54)
          {
            goto LABEL_382;
          }
          v24 = *(unsigned __int8 *)(a2 + 9);
          goto LABEL_93;
        }
        if (v23 == 70)
        {
          if ((*(_BYTE *)(a2 + 1) & 0xDF) != 0x55
            || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x4C
            || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x4C
            || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x53
            || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x43
            || (*(_BYTE *)(a2 + 6) & 0xDF) != 0x52
            || (*(_BYTE *)(a2 + 7) & 0xDF) != 0x45
            || (*(_BYTE *)(a2 + 8) & 0xDF) != 0x45)
          {
            goto LABEL_382;
          }
          v35 = *(unsigned __int8 *)(a2 + 9);
          goto LABEL_223;
        }
        if (v23 != 83
          || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x43
          || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x52
          || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x4F
          || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x4C
          || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x4C
          || (*(_BYTE *)(a2 + 6) & 0xDF) != 0x42
          || (*(_BYTE *)(a2 + 7) & 0xDF) != 0x41
          || (*(_BYTE *)(a2 + 8) & 0xDF) != 0x52)
        {
          goto LABEL_382;
        }
        v40 = *(unsigned __int8 *)(a2 + 9);
LABEL_368:
        if ((v40 & 0xFFFFFFDF) != 0x53)
          goto LABEL_382;
        if (!*(_BYTE *)(v8 + 47))
          *(_BYTE *)(v8 + 47) = 1;
        *(_BYTE *)(v8 + 46) = v9 != 0;
        return result;
      }
      v38 = *(_WORD *)a2 & 0xFFDF;
      if (v38 == 73)
      {
        if ((*(_WORD *)(a2 + 2) & 0xFFDF) != 0x4E
          || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x4E
          || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x45
          || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x52
          || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x57
          || (*(_WORD *)(a2 + 12) & 0xFFDF) != 0x49
          || (*(_WORD *)(a2 + 14) & 0xFFDF) != 0x44
          || (*(_WORD *)(a2 + 16) & 0xFFDF) != 0x54)
        {
          goto LABEL_382;
        }
        v24 = *(unsigned __int16 *)(a2 + 18);
LABEL_93:
        if ((v24 & 0xFFFFFFDF) == 0x48)
        {
LABEL_94:
          if (!*(_BYTE *)(v8 + 24))
            *(_BYTE *)(v8 + 24) = 1;
          *(float *)(v8 + 20) = (float)v9;
          return result;
        }
LABEL_382:
        v11 = 0;
        v10 = 1;
        goto LABEL_32;
      }
      if (v38 != 70)
      {
        if (v38 != 83
          || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x43
          || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x52
          || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x4F
          || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x4C
          || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x4C
          || (*(_WORD *)(a2 + 12) & 0xFFDF) != 0x42
          || (*(_WORD *)(a2 + 14) & 0xFFDF) != 0x41
          || (*(_WORD *)(a2 + 16) & 0xFFDF) != 0x52)
        {
          goto LABEL_382;
        }
        v40 = *(unsigned __int16 *)(a2 + 18);
        goto LABEL_368;
      }
      if ((*(_WORD *)(a2 + 2) & 0xFFDF) != 0x55
        || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x4C
        || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x4C
        || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x53
        || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x43
        || (*(_WORD *)(a2 + 12) & 0xFFDF) != 0x52
        || (*(_WORD *)(a2 + 14) & 0xFFDF) != 0x45
        || (*(_WORD *)(a2 + 16) & 0xFFDF) != 0x45)
      {
        goto LABEL_382;
      }
      v35 = *(unsigned __int16 *)(a2 + 18);
LABEL_223:
      if ((v35 & 0xFFFFFFDF) != 0x4E)
        goto LABEL_382;
      if (!*(_BYTE *)(v8 + 51))
        *(_BYTE *)(v8 + 51) = 1;
      *(_BYTE *)(v8 + 50) = v9 != 0;
      return result;
    case 11:
      if ((a3 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a2 & 0xDF) != 0x49
          || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x4E
          || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x4E
          || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x45
          || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x52
          || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x48
          || (*(_BYTE *)(a2 + 6) & 0xDF) != 0x45
          || (*(_BYTE *)(a2 + 7) & 0xDF) != 0x49
          || (*(_BYTE *)(a2 + 8) & 0xDF) != 0x47
          || (*(_BYTE *)(a2 + 9) & 0xDF) != 0x48)
        {
          goto LABEL_357;
        }
        v26 = *(unsigned __int8 *)(a2 + 10);
      }
      else
      {
        if ((*(_WORD *)a2 & 0xFFDF) != 0x49
          || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x4E
          || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x4E
          || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x45
          || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x52
          || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x48
          || (*(_WORD *)(a2 + 12) & 0xFFDF) != 0x45
          || (*(_WORD *)(a2 + 14) & 0xFFDF) != 0x49
          || (*(_WORD *)(a2 + 16) & 0xFFDF) != 0x47
          || (*(_WORD *)(a2 + 18) & 0xFFDF) != 0x48)
        {
          goto LABEL_357;
        }
        v26 = *(unsigned __int16 *)(a2 + 20);
      }
      if ((v26 & 0xFFFFFFDF) == 0x54)
      {
LABEL_119:
        if (!*(_BYTE *)(v8 + 32))
          *(_BYTE *)(v8 + 32) = 1;
        *(float *)(v8 + 28) = (float)v9;
        return result;
      }
LABEL_357:
      v10 = 0;
LABEL_30:
      v11 = a3 == 8;
      if (a3 == 8)
      {
        if ((a3 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)a2 & 0xDF) != 0x4C
            || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x4F
            || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x43
            || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x41
            || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x54
            || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x49
            || (*(_BYTE *)(a2 + 6) & 0xDF) != 0x4F)
          {
            goto LABEL_31;
          }
          v27 = *(unsigned __int8 *)(a2 + 7);
        }
        else
        {
          if ((*(_WORD *)a2 & 0xFFDF) != 0x4C
            || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x4F
            || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x43
            || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x41
            || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x54
            || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x49
            || (*(_WORD *)(a2 + 12) & 0xFFDF) != 0x4F)
          {
            goto LABEL_31;
          }
          v27 = *(unsigned __int16 *)(a2 + 14);
        }
        if ((v27 & 0xFFFFFFDF) == 0x4E)
        {
          if (!*(_BYTE *)(v8 + 45))
            *(_BYTE *)(v8 + 45) = 1;
          *(_BYTE *)(v8 + 44) = v9 != 0;
          return result;
        }
      }
LABEL_31:
      if (!v10)
        goto LABEL_32;
      if ((a3 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a2 & 0xDF) == 0x53
          && (*(_BYTE *)(a2 + 1) & 0xDF) == 0x54
          && (*(_BYTE *)(a2 + 2) & 0xDF) == 0x41
          && (*(_BYTE *)(a2 + 3) & 0xDF) == 0x54
          && (*(_BYTE *)(a2 + 4) & 0xDF) == 0x55)
        {
          v28 = *(unsigned __int8 *)(a2 + 5);
          goto LABEL_142;
        }
      }
      else if ((*(_WORD *)a2 & 0xFFDF) == 0x53
             && (*(_WORD *)(a2 + 2) & 0xFFDF) == 0x54
             && (*(_WORD *)(a2 + 4) & 0xFFDF) == 0x41
             && (*(_WORD *)(a2 + 6) & 0xFFDF) == 0x54
             && (*(_WORD *)(a2 + 8) & 0xFFDF) == 0x55)
      {
        v28 = *(unsigned __int16 *)(a2 + 10);
LABEL_142:
        if ((v28 & 0xFFFFFFDF) == 0x53)
        {
          if (!*(_BYTE *)(v8 + 41))
            *(_BYTE *)(v8 + 41) = 1;
          *(_BYTE *)(v8 + 40) = v9 != 0;
          return result;
        }
      }
      v10 = 0;
LABEL_32:
      if (a3 == 9)
      {
        if ((a3 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)a2 & 0xDF) != 0x52
            || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x53
            || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x49
            || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x5A
            || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x41
            || (*(_BYTE *)(a2 + 6) & 0xDF) != 0x42
            || (*(_BYTE *)(a2 + 7) & 0xDF) != 0x4C)
          {
            goto LABEL_34;
          }
          v29 = *(unsigned __int8 *)(a2 + 8);
        }
        else
        {
          if ((*(_WORD *)a2 & 0xFFDF) != 0x52
            || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x53
            || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x49
            || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x5A
            || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x41
            || (*(_WORD *)(a2 + 12) & 0xFFDF) != 0x42
            || (*(_WORD *)(a2 + 14) & 0xFFDF) != 0x4C)
          {
            goto LABEL_34;
          }
          v29 = *(unsigned __int16 *)(a2 + 16);
        }
        if ((v29 & 0xFFFFFFDF) == 0x45)
        {
          if (!*(_BYTE *)(v8 + 49))
            *(_BYTE *)(v8 + 49) = 1;
          *(_BYTE *)(v8 + 48) = v9 != 0;
          return result;
        }
      }
      else
      {
        if (!v11)
          goto LABEL_34;
        if ((a3 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)a2 & 0xDF) != 0x4E
            || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x4F
            || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x4F
            || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x50
            || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x45
            || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x4E
            || (*(_BYTE *)(a2 + 6) & 0xDF) != 0x45)
          {
            goto LABEL_34;
          }
          v30 = *(unsigned __int8 *)(a2 + 7);
        }
        else
        {
          if ((*(_WORD *)a2 & 0xFFDF) != 0x4E
            || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x4F
            || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x4F
            || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x50
            || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x45
            || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x4E
            || (*(_WORD *)(a2 + 12) & 0xFFDF) != 0x45)
          {
            goto LABEL_34;
          }
          v30 = *(unsigned __int16 *)(a2 + 14);
        }
        if ((v30 & 0xFFFFFFDF) == 0x52)
        {
          if (!*(_BYTE *)(v8 + 55))
            *(_BYTE *)(v8 + 55) = 1;
          *(_BYTE *)(v8 + 54) = v9 != 0;
          return result;
        }
      }
LABEL_34:
      if (v10)
      {
        if ((a3 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)a2 & 0xDF) != 0x4E
            || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x4F
            || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x52
            || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x45
            || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x46
            || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x45
            || (*(_BYTE *)(a2 + 6) & 0xDF) != 0x52
            || (*(_BYTE *)(a2 + 7) & 0xDF) != 0x52
            || (*(_BYTE *)(a2 + 8) & 0xDF) != 0x45)
          {
            goto LABEL_35;
          }
          v31 = *(unsigned __int8 *)(a2 + 9);
        }
        else
        {
          if ((*(_WORD *)a2 & 0xFFDF) != 0x4E
            || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x4F
            || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x52
            || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x45
            || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x46
            || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x45
            || (*(_WORD *)(a2 + 12) & 0xFFDF) != 0x52
            || (*(_WORD *)(a2 + 14) & 0xFFDF) != 0x52
            || (*(_WORD *)(a2 + 16) & 0xFFDF) != 0x45)
          {
            goto LABEL_35;
          }
          v31 = *(unsigned __int16 *)(a2 + 18);
        }
        if ((v31 & 0xFFFFFFDF) == 0x52)
        {
          if (!*(_BYTE *)(v8 + 57))
            *(_BYTE *)(v8 + 57) = 1;
          *(_BYTE *)(v8 + 56) = v9 != 0;
          return result;
        }
      }
LABEL_35:
      if (v5 | a3)
      {
        *(_BYTE *)v8 = 1;
        if (v9 == 1)
        {
          if ((a3 & 0xFF00000000) != 0)
            WTF::String::String();
          else
            WTF::String::String();
          v13 = (uint64_t *)(v8 + 64);
          v14 = *(unsigned int *)(v8 + 76);
          if ((_DWORD)v14 == *(_DWORD *)(v8 + 72))
          {
            v17 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)&v41);
            v14 = *(unsigned int *)(v8 + 76);
            v15 = *(_QWORD *)(v8 + 64);
            v16 = *v17;
            *v17 = 0;
          }
          else
          {
            v15 = *v13;
            v16 = v41;
            v41 = 0;
          }
          *(_QWORD *)(v15 + 8 * v14) = v16;
          *(_DWORD *)(v8 + 76) = v14 + 1;
          result = (uint64_t)v41;
          v41 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
      return result;
    default:
      goto LABEL_30;
  }
}

WTF *WebCore::WindowOrWorkerGlobalScope::structuredClone@<X0>(JSC::JSGlobalObject *a1@<X0>, WebCore::JSDOMGlobalObject *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  WebCore::ScriptExecutionContext *v15;
  WTF *v16;
  uint64_t *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  void *v24;
  WTF *result;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  WebCore::WorkerNavigator *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  WTF *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  int v47;
  WebCore::ScriptExecutionContext *v48;
  uint64_t *v49;
  unint64_t v50;
  WTF *v51;
  uint64_t v52;

  v43 = 0;
  v44 = 0;
  WebCore::SerializedScriptValue::create(a1, a3, a4, (uint64_t)&v43, 0, 0, 2, (uint64_t)&v40);
  v9 = v42;
  if (!v42)
  {
    if (HIDWORD(v44))
    {
      v49 = 0;
      v28 = (uint64_t *)v43;
      v29 = 8 * HIDWORD(v44);
      while (*(_BYTE *)(*v28 + 58))
      {
        WTF::HashTable<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>>::add((uint64_t *)&v49, v28, (uint64_t)&v45);
        if (!(_BYTE)v47)
          break;
        ++v28;
        v29 -= 8;
        if (!v29)
        {
          WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::MessagePort::disentanglePorts(WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v51, (uint64_t *)&v43);
          v45 = v51;
          v11 = v52;
          v12 = HIDWORD(v52);
          v46 = v52;
          v47 = 0;
          WTF::HashSet<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTableTraits>::~HashSet(&v49, v30);
          goto LABEL_6;
        }
      }
      LOBYTE(v45) = 21;
      v46 = 0;
      v23 = 1;
      v47 = 1;
      WTF::HashSet<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTableTraits>::~HashSet(&v49, v8);
      v34 = v46;
      v46 = 0;
      *(_BYTE *)a5 = 21;
      *(_QWORD *)(a5 + 8) = v34;
      *(_DWORD *)(a5 + 16) = 1;
      goto LABEL_17;
    }
    v11 = 0;
    v12 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
LABEL_6:
    v38 = 0;
    v39 = 0;
    v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a2);
    if (v13)
    {
      v15 = (WebCore::ScriptExecutionContext *)v13;
      v16 = 0;
      v17 = (uint64_t *)v45;
      v45 = 0;
      v49 = v17;
      v18 = 0;
      v46 = 0;
      v50 = __PAIR64__(v12, v11);
      if (v12)
      {
        v48 = v15;
        v31 = v17;
        WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::MessagePort::entanglePorts(WebCore::ScriptExecutionContext &,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v51, (uint64_t)&v49, &v48);
        v17 = v31;
        v18 = v52;
        v16 = v51;
      }
      v38 = v16;
      v39 = v18;
      if (v17)
        WTF::fastFree((WTF *)v17, v14);
    }
    v51 = 0;
    v52 = 0;
    v49 = 0;
    v50 = 0;
    v20 = WebCore::SerializedScriptValue::deserialize(v40, a1, a2, (uint64_t)&v38, (uint64_t)&v51, (uint64_t *)&v49, 1, 0);
    v21 = v51;
    if (HIDWORD(v52))
    {
      v26 = 8 * HIDWORD(v52);
      do
      {
        v27 = *(WTF::StringImpl **)v21;
        *(_QWORD *)v21 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v19);
          else
            *(_DWORD *)v27 -= 2;
        }
        v21 = (WTF *)((char *)v21 + 8);
        v26 -= 8;
      }
      while (v26);
      v21 = v51;
      if (!v51)
        goto LABEL_13;
    }
    else if (!v51)
    {
LABEL_13:
      *(_QWORD *)a5 = v20;
      *(_DWORD *)(a5 + 16) = 0;
      if (HIDWORD(v39))
      {
        v35 = (uint64_t *)v38;
        v36 = 8 * HIDWORD(v39);
        do
        {
          v35 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v35, v19)+ 1;
          v36 -= 8;
        }
        while (v36);
      }
      v22 = v38;
      if (v38)
      {
        v38 = 0;
        LODWORD(v39) = 0;
        WTF::fastFree(v22, v19);
      }
      v23 = 0;
LABEL_17:
      ((void (*)(WTF **, WTF **))off_1E3403070[v23])(&v51, &v45);
      goto LABEL_18;
    }
    v51 = 0;
    LODWORD(v52) = 0;
    WTF::fastFree(v21, v19);
    goto LABEL_13;
  }
  if (v42 != 1)
  {
    v37 = (WebCore::WorkerNavigator *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF *)WebCore::WorkerNavigator::userAgent(v37);
  }
  v10 = v41;
  v41 = 0;
  *(_BYTE *)a5 = v40;
  *(_QWORD *)(a5 + 8) = v10;
  *(_DWORD *)(a5 + 16) = 1;
LABEL_18:
  ((void (*)(WTF **, uint64_t *))off_1E3403080[v9])(&v45, &v40);
  if (HIDWORD(v44))
  {
    v32 = (uint64_t *)v43;
    v33 = 8 * HIDWORD(v44);
    do
    {
      v32 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v32, v24)+ 1;
      v33 -= 8;
    }
    while (v33);
  }
  result = v43;
  if (v43)
  {
    v43 = 0;
    LODWORD(v44) = 0;
    return (WTF *)WTF::fastFree(result, v24);
  }
  return result;
}

uint64_t WebCore::WorkerNavigator::userAgent(WebCore::WorkerNavigator *this)
{
  return (uint64_t)this + 64;
}

uint64_t WebCore::WorkerNavigator::onLine(WebCore::WorkerNavigator *this)
{
  return *((unsigned __int8 *)this + 72);
}

uint64_t WebCore::WorkerNavigator::gpu(WebCore::WorkerNavigator *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  WebCore::GPU *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  WebCore::GPU *v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  void *v28;
  uint64_t v29;

  if (*((_QWORD *)this + 10))
    return *((_QWORD *)this + 10);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v5 = (_QWORD *)(v4 - 96);
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  if (!(*(unsigned int (**)(_QWORD *))(*v5 + 64))(v5))
  {
    if (*((_BYTE *)v5 + 274))
      return *((_QWORD *)this + 10);
    *((_DWORD *)v5 - 42) += 2;
    v13 = v5[42];
    if (v13
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD *)(v14 + 24)) != 0
      && (v16 = *(_QWORD *)(v15 + 8)) != 0)
    {
      ++*(_DWORD *)v16;
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v16 + 48) + 32))(&v29);
      v17 = v29;
      v18 = 1;
      if (v29)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
        v19 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v19 = 1;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_QWORD *)(v19 + 40) = v17;
        v20 = (_DWORD *)WTF::fastMalloc((WTF *)4);
        *v20 = 1;
        *(_QWORD *)(v19 + 48) = v20;
        v21 = (WebCore::GPU *)*((_QWORD *)this + 10);
        *((_QWORD *)this + 10) = v19;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
          {
            WebCore::GPU::~GPU(v21, v6);
            WTF::fastFree(v27, v28);
          }
          else
          {
            --*(_DWORD *)v21;
          }
        }
        v22 = v29;
        v29 = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
        v18 = 0;
      }
      if (*(_DWORD *)v16 == 1)
      {
        WebCore::Page::~Page(v16);
        WTF::fastFree(v25, v26);
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
    else
    {
      v18 = 1;
    }
    if (*((_DWORD *)v5 - 42) == 2)
    {
      if ((*((_WORD *)v5 - 81) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 24), v6);
    }
    else
    {
      *((_DWORD *)v5 - 42) -= 2;
    }
    if (!v18)
      return *((_QWORD *)this + 10);
    return 0;
  }
  if (((*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5) & 1) == 0)
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  result = v5[85];
  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)result + 32))(&v29);
    v7 = v29;
    if (v29)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
      v8 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v8 = 1;
      *(_OWORD *)(v8 + 8) = 0u;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_QWORD *)(v8 + 40) = v7;
      v9 = (_DWORD *)WTF::fastMalloc((WTF *)4);
      *v9 = 1;
      *(_QWORD *)(v8 + 48) = v9;
      v11 = (WebCore::GPU *)*((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = v8;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
        {
          WebCore::GPU::~GPU(v11, v10);
          WTF::fastFree(v23, v24);
        }
        else
        {
          --*(_DWORD *)v11;
        }
      }
      v12 = v29;
      v29 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      return *((_QWORD *)this + 10);
    }
    return 0;
  }
  return result;
}

WTF::StringImpl *WebCore::WorkerNavigator::setAppBadge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v9 = *(_QWORD *)(v5 + 8);
    if (v9)
    {
      v10 = v9 - 96;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 64))(v9 - 96))
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 488))(v10) == 1)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 64))(v11 - 96)
            || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 488))(v11 - 96) != 1)
          {
            goto LABEL_33;
          }
          result = *(WTF::StringImpl **)(v11 + 1848);
          if (result)
          {
            v13 = *((_DWORD *)result + 4);
            *((_DWORD *)result + 4) = v13 + 1;
            if (*((_BYTE *)result + 400))
            {
              *((_BYTE *)result + 392) = a3;
            }
            else
            {
              *((_QWORD *)result + 49) = a3;
              *((_BYTE *)result + 400) = 1;
            }
            *((_QWORD *)result + 48) = a2;
            if (!v13)
              return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
            *((_DWORD *)result + 4) = v13;
            return result;
          }
        }
      }
    }
    v14 = *(_QWORD *)(a1 + 8);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 - 96) + 64))(v15 - 96) & 1) != 0)
        {
          result = *(WTF::StringImpl **)(*(_QWORD *)(v15 + 264) + 152);
          if (result)
            result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2, a3);
          v16 = *a4;
          v17 = *(_QWORD *)(*a4 + 24);
          if (v17 && *(_QWORD *)v17 && (*(_BYTE *)(v17 + 8) & 3) == 0)
          {
            v18 = *(_QWORD *)(v16 + 32);
            if (!v18 || (*(_BYTE *)(v18 + 8) & 3) != 0)
              v19 = 0;
            else
              v19 = *(uint64_t **)v18;
            JSC::JSLockHolder::JSLockHolder();
            WebCore::DeferredPromise::callFunction(v16, v19, 0, (objc_class *)0xA);
            return (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v22);
          }
          return result;
        }
LABEL_33:
        __break(0xC471u);
        JUMPOUT(0x1960714B0);
      }
    }
  }
  v20 = *a4;
  v22 = 0;
  WebCore::DeferredPromise::reject(v20, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v22, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::CaptionUserPreferencesMediaAF *WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(WebCore::CaptionUserPreferencesMediaAF *this, WebCore::PageGroup *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unint64_t StatusReg;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  WTF::MonotonicTime *v15;
  double v16;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E33FD660;
  WTF::WeakPtrFactory<WebCore::PageGroup,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2, (uint64_t)a2);
  v4 = *(unsigned int **)a2;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *((_QWORD *)this + 5) = off_1E3407128;
  *((_QWORD *)this + 3) = v4;
  *((_BYTE *)this + 32) = 1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  v7 = *(unsigned int **)(StatusReg + 736);
  if (!v7)
    v7 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *((_QWORD *)this + 10) = v7;
  *((_QWORD *)this + 5) = off_1E31F7378;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E33FDFD8;
  v9[1] = WebCore::CaptionUserPreferences::timerFired;
  v9[2] = 0;
  v9[3] = this;
  *((_QWORD *)this + 11) = v9;
  *((_DWORD *)this + 34) = 0;
  *(_QWORD *)((char *)this + 125) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_QWORD *)this = off_1E3402F68;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = off_1E3407128;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  v10 = *(unsigned int **)(StatusReg + 736);
  if (!v10)
    v10 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *((_QWORD *)this + 24) = v10;
  *((_QWORD *)this + 19) = off_1E31F7378;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v12 = &unk_1E3403130;
  v12[1] = WebCore::CaptionUserPreferencesMediaAF::updateTimerFired;
  v12[2] = 0;
  v12[3] = this;
  *((_QWORD *)this + 25) = v12;
  *((_WORD *)this + 104) = 0;
  if ((WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(WebCore::PageGroup &)::initialized & 1) == 0)
  {
    WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(WebCore::PageGroup &)::initialized = 1;
    {
      v13 = (void *)MediaToolboxLibrary(void)::frameworkLibrary;
      if (!MediaToolboxLibrary(void)::frameworkLibrary)
        return this;
    }
    else
    {
      v13 = dlopen("/System/Library/Frameworks/MediaToolbox.framework/MediaToolbox", 2);
      MediaToolboxLibrary(void)::frameworkLibrary = (uint64_t)v13;
      if (!v13)
        return this;
    }
    {
      v14 = MTEnableCaption2015BehaviorPtr(void)::ptr;
      if (!MTEnableCaption2015BehaviorPtr(void)::ptr)
        return this;
    }
    else
    {
      v14 = dlsym(v13, "MTEnableCaption2015Behavior");
      MTEnableCaption2015BehaviorPtr(void)::ptr = v14;
      if (!v14)
        return this;
    }
    if (((unsigned int (*)(void))v14)())
    {
      ++*((_DWORD *)this + 32);
      *((_BYTE *)this + 32) = 3;
      v15 = (WTF::MonotonicTime *)(*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)this + 208))(this);
      if ((_DWORD)v15)
      {
        (*(void (**)(WebCore::CaptionUserPreferencesMediaAF *, _QWORD))(*(_QWORD *)this + 56))(this, 0);
        v15 = (WTF::MonotonicTime *)(*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *, _QWORD))(*(_QWORD *)this + 72))(this, 0);
      }
      if (!*((_DWORD *)this + 32))
      {
        *((_BYTE *)this + 132) = 1;
        if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0
          || *(double *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          *((_QWORD *)this + 8) = 0;
          WTF::MonotonicTime::now(v15);
          WebCore::TimerBase::setNextFireTime((uint64_t)this + 40, v16 + 0.0);
        }
      }
      (*(void (**)(WebCore::CaptionUserPreferencesMediaAF *, _QWORD))(*(_QWORD *)this + 56))(this, 0);
      (*(void (**)(WebCore::CaptionUserPreferencesMediaAF *, _QWORD))(*(_QWORD *)this + 72))(this, 0);
      (*(void (**)(WebCore::CaptionUserPreferencesMediaAF *, _QWORD))(*(_QWORD *)this + 88))(this, 0);
      --*((_DWORD *)this + 32);
    }
  }
  return this;
}

void WebCore::CaptionUserPreferencesMediaAF::~CaptionUserPreferencesMediaAF(WebCore::CaptionUserPreferencesMediaAF *this)
{
  const void *v2;
  __CFNotificationCenter *LocalCenter;
  uint64_t v4;
  WTF::StringImpl *v5;
  const void *v6;

  *(_QWORD *)this = off_1E3402F68;
  v2 = (const void *)*((_QWORD *)this + 18);
  if (v2)
  {
    CFRetain(*((CFTypeRef *)this + 18));
    LocalCenter = CFNotificationCenterGetLocalCenter();
    if (WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::once != -1)
      dispatch_once(&WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::once, &__block_literal_global_46);
    if (WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::constantMediaAccessibilitykMAXCaptionAppearanceSettingsChangedNotification)
      CFNotificationCenterRemoveObserver(LocalCenter, v2, (CFNotificationName)WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::constantMediaAccessibilitykMAXCaptionAppearanceSettingsChangedNotification, 0);
    if (WebCore::constantMediaAccessibilitykMAAudibleMediaSettingsChangedNotification)
      CFNotificationCenterRemoveObserver(LocalCenter, v2, (CFNotificationName)WebCore::constantMediaAccessibilitykMAAudibleMediaSettingsChangedNotification, 0);
    CFRelease(v2);
  }
  *((_QWORD *)this + 19) = off_1E31F7378;
  v4 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((WebCore::CaptionUserPreferencesMediaAF *)((char *)this + 152));
  v6 = (const void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::CaptionUserPreferences::~CaptionUserPreferences(this, v5);
}

{
  WTF *v1;
  void *v2;

  WebCore::CaptionUserPreferencesMediaAF::~CaptionUserPreferencesMediaAF(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::CaptionUserPreferencesMediaAF::captionDisplayMode(WebCore::CaptionUserPreferencesMediaAF *this)
{
  uint64_t v1;
  MACaptionAppearanceDomain v2;
  uint64_t DisplayType;
  _QWORD block[4];
  char v6;

  v1 = *((unsigned __int8 *)this + 32);
  if ((_DWORD)v1 != 3
    && ((*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)this + 208))(this) & 1) == 0)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
    block[3] = &__block_descriptor_tmp_8;
    v6 = 0;
    if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
      dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
    if (WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary)
    {
      if ((byte_1EE337E21 & 1) != 0)
      {
        if (HIBYTE(word_1EE337E24))
          return word_1EE337E24;
      }
      else
      {
        word_1EE337E24 = 0;
        byte_1EE337E21 = 1;
      }
      DisplayType = WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetDisplayType((WebCore *)1, v2);
      if (DisplayType == 2)
        return 2;
      else
        return DisplayType != 1;
    }
  }
  return v1;
}

uint64_t WebCore::CaptionUserPreferencesMediaAF::platformSetCaptionDisplayMode(int a1)
{
  MACaptionAppearanceDomain v1;

  if (a1)
    v1 = 2 * (a1 == 2);
  else
    v1 = kMACaptionAppearanceDomainUser;
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceSetDisplayType((WebCore *)1, v1, (MACaptionAppearanceDisplayType)WebCore::softLinkMediaAccessibilityMACaptionAppearanceSetDisplayType);
}

WTF::MonotonicTime *WebCore::CaptionUserPreferencesMediaAF::setCaptionDisplayMode(_BYTE *a1, uint64_t a2)
{
  WTF::MonotonicTime *result;
  double v5;
  MACaptionAppearanceDomain v6;
  _QWORD block[4];
  char v8;

  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1) & 1) != 0)
    goto LABEL_9;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v8 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  if (!WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary)
  {
LABEL_9:
    a1[32] = a2;
    result = (WTF::MonotonicTime *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
    if ((_DWORD)a2 != 2 && (_DWORD)result)
    {
      (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0);
      result = (WTF::MonotonicTime *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 72))(a1, 0);
    }
    if (!*((_DWORD *)a1 + 32))
    {
      a1[132] = 1;
      if ((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        *((_QWORD *)a1 + 8) = 0;
        WTF::MonotonicTime::now(result);
        return (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime((uint64_t)(a1 + 40), v5 + 0.0);
      }
    }
  }
  else
  {
    result = (WTF::MonotonicTime *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1);
    if ((_DWORD)result != 3)
    {
      if ((byte_1EE337E22 & 1) != 0)
      {
        if (qword_1EE337E30)
          return (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1EE337E30 + 16))(qword_1EE337E30, a2);
      }
      else
      {
        qword_1EE337E30 = 0;
        byte_1EE337E22 = 1;
      }
      if ((_DWORD)a2)
        v6 = 2 * ((_DWORD)a2 == 2);
      else
        v6 = kMACaptionAppearanceDomainUser;
      return (WTF::MonotonicTime *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceSetDisplayType((WebCore *)1, v6, (MACaptionAppearanceDisplayType)WebCore::softLinkMediaAccessibilityMACaptionAppearanceSetDisplayType);
    }
  }
  return result;
}

BOOL WebCore::CaptionUserPreferencesMediaAF::userPrefersCaptions(WebCore::CaptionUserPreferencesMediaAF *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  MACaptionAppearanceDomain v8;
  const __CFArray *v9;
  const __CFArray *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD block[4];
  char v16;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 16);
  if (!v1)
  {
    v2 = 0;
    v3 = 0;
LABEL_3:
    v4 = v2;
    v2 = v1 + 8 * v3;
    goto LABEL_4;
  }
  v3 = *(unsigned int *)(v1 - 4);
  v2 = v1 + 8 * v3;
  if (!*(_DWORD *)(v1 - 12))
    goto LABEL_3;
  if (!(_DWORD)v3)
  {
    v14 = 0;
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 16);
    goto LABEL_37;
  }
  v12 = 8 * v3;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 16);
  while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
  {
    v4 += 8;
    v12 -= 8;
    if (!v12)
    {
      v4 = v2;
      break;
    }
  }
LABEL_4:
  if (!v1)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v14 = *(unsigned int *)(v1 - 4);
LABEL_37:
  v5 = v1 + 8 * v14;
LABEL_6:
  if (v5 != v4)
  {
    while (!*(_QWORD *)(*(_QWORD *)v4 + 8))
    {
      v6 = v4 + 8;
      v4 = v2;
      if (v6 != v2)
      {
        v4 = v6;
        while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
        {
          v4 += 8;
          if (v4 == v2)
          {
            v4 = v2;
            break;
          }
        }
      }
      if (v4 == v5)
      {
        v4 = v5;
        break;
      }
    }
  }
  if (v1)
    v1 += 8 * *(unsigned int *)(v1 - 4);
  if (v4 != v1)
  {
    v7 = *(_QWORD *)(*(_QWORD *)v4 + 8);
    if (v7)
    {
      if ((*(_QWORD *)(*(_QWORD *)(v7 + 112) + 712) & 0x200000000000000) != 0)
        return 1;
    }
  }
  if (((*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)this + 208))(this) & 1) != 0)
    return 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v16 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  if (!WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary)
    return 0;
  v9 = (const __CFArray *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics((WebCore *)1, v8);
  if (!v9)
    return 0;
  v10 = v9;
  v11 = CFArrayGetCount(v9) != 0;
  CFRelease(v10);
  return v11;
}

BOOL WebCore::CaptionUserPreferencesMediaAF::userPrefersSubtitles(WebCore::CaptionUserPreferencesMediaAF *this)
{
  _BOOL8 v2;
  MACaptionAppearanceDomain v3;
  const __CFArray *v4;
  const __CFArray *v5;
  _QWORD block[4];
  char v8;

  if ((WebCore::CaptionUserPreferences::userPrefersSubtitles(this) & 1) != 0)
    return 1;
  if (((*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)this + 208))(this) & 1) != 0)
    return 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v8 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  if (!WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary)
    return 0;
  v2 = 1;
  v4 = (const __CFArray *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics((WebCore *)1, v3);
  if (v4)
  {
    v5 = v4;
    v2 = CFArrayGetCount(v4) == 0;
    CFRelease(v5);
  }
  return v2;
}

BOOL WebCore::CaptionUserPreferencesMediaAF::userPrefersTextDescriptions(WebCore::CaptionUserPreferencesMediaAF *this)
{
  _BOOL8 v2;
  WebCore *v3;
  const __CFBoolean *v4;
  const __CFBoolean *v5;
  _QWORD block[4];
  char v8;

  if ((WebCore::CaptionUserPreferences::userPrefersTextDescriptions(this) & 1) != 0)
    return 1;
  v3 = (WebCore *)(*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)this + 208))(this);
  if ((v3 & 1) != 0)
    return 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v8 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  if (!WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary)
    return 0;
  v4 = (const __CFBoolean *)WebCore::softLinkMediaAccessibilityMAAudibleMediaPrefCopyPreferDescriptiveVideo(v3);
  if (!v4)
    return 0;
  v5 = v4;
  v2 = CFBooleanGetValue(v4) != 0;
  CFRelease(v5);
  return v2;
}

void WebCore::CaptionUserPreferencesMediaAF::setInterestedInCaptionPreferenceChanges(WebCore::CaptionUserPreferencesMediaAF *this)
{
  const void *v2;
  CFTypeRef v3;
  const void *v4;
  CFTypeRef v5;
  const void *v6;
  char v7;
  WTF::MonotonicTime *LocalCenter;
  __CFNotificationCenter *v9;
  const __CFString *v10;
  double v11;
  uint64_t *v12;
  CFTypeRef cf;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  char v17;

  if (!*((_BYTE *)this + 208))
  {
    v2 = (const void *)MEMORY[0x1E0C809B0];
    cf = (CFTypeRef)MEMORY[0x1E0C809B0];
    v14 = 0x40000000;
    v15 = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
    v16 = &__block_descriptor_tmp_8;
    v17 = 0;
    if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
      dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, &cf);
    if (WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary)
    {
      if (WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::once != -1)
        dispatch_once(&WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::once, &__block_literal_global_46);
      if (!WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::constantMediaAccessibilitykMAXCaptionAppearanceSettingsChangedNotification)
      {
        {
          if (!WebCore::canLoad_MediaAccessibility_kMAAudibleMediaSettingsChangedNotification(void)::loaded)
            return;
        }
        else
        {
          cf = v2;
          v14 = 0x40000000;
          v15 = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
          v16 = &__block_descriptor_tmp_8;
          v17 = 0;
          if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
            dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, &cf);
          v12 = (uint64_t *)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "kMAAudibleMediaSettingsChangedNotification");
          if (!v12)
          {
            WebCore::canLoad_MediaAccessibility_kMAAudibleMediaSettingsChangedNotification(void)::loaded = 0;
            return;
          }
          WebCore::constantMediaAccessibilitykMAAudibleMediaSettingsChangedNotification = *v12;
          WebCore::canLoad_MediaAccessibility_kMAAudibleMediaSettingsChangedNotification(void)::loaded = 1;
        }
      }
      *((_WORD *)this + 104) = 257;
      v3 = (CFTypeRef)*((_QWORD *)this + 18);
      if (v3)
        goto LABEL_17;
      WebCore::CaptionUserPreferencesMediaAF::createWeakObserver(this, &cf);
      v3 = cf;
      cf = 0;
      v4 = (const void *)*((_QWORD *)this + 18);
      *((_QWORD *)this + 18) = v3;
      if (v4)
      {
        CFRelease(v4);
        v5 = cf;
        cf = 0;
        if (v5)
          CFRelease(v5);
        v3 = (CFTypeRef)*((_QWORD *)this + 18);
      }
      if (v3)
      {
LABEL_17:
        v6 = v2;
        CFRetain(v3);
        v7 = 0;
      }
      else
      {
        v6 = v2;
        v7 = 1;
      }
      LocalCenter = CFNotificationCenterGetLocalCenter();
      v9 = LocalCenter;
      if (WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::once != -1)
        dispatch_once(&WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::once, &__block_literal_global_46);
      if (WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::constantMediaAccessibilitykMAXCaptionAppearanceSettingsChangedNotification)
        CFNotificationCenterAddObserver(v9, v3, (CFNotificationCallback)WebCore::userCaptionPreferencesChangedNotificationCallback, (CFStringRef)WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::constantMediaAccessibilitykMAXCaptionAppearanceSettingsChangedNotification, 0, (CFNotificationSuspensionBehavior)1026);
      {
        if (!WebCore::canLoad_MediaAccessibility_kMAAudibleMediaSettingsChangedNotification(void)::loaded)
          goto LABEL_26;
        v10 = (const __CFString *)WebCore::constantMediaAccessibilitykMAAudibleMediaSettingsChangedNotification;
      }
      else
      {
        cf = v6;
        v14 = 0x40000000;
        v15 = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
        v16 = &__block_descriptor_tmp_8;
        v17 = 0;
        if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
          dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, &cf);
        LocalCenter = (WTF::MonotonicTime *)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "kMAAudibleMediaSettingsChangedNotification");
        if (!LocalCenter)
        {
          WebCore::canLoad_MediaAccessibility_kMAAudibleMediaSettingsChangedNotification(void)::loaded = 0;
LABEL_26:
          *((_BYTE *)this + 209) = 0;
          *((_QWORD *)this + 22) = 0;
          WTF::MonotonicTime::now(LocalCenter);
          WebCore::TimerBase::setNextFireTime((uint64_t)this + 152, v11 + 0.0);
          if ((v7 & 1) == 0)
            CFRelease(v3);
          return;
        }
        v10 = *(const __CFString **)LocalCenter;
        WebCore::constantMediaAccessibilitykMAAudibleMediaSettingsChangedNotification = *(_QWORD *)LocalCenter;
        WebCore::canLoad_MediaAccessibility_kMAAudibleMediaSettingsChangedNotification(void)::loaded = 1;
      }
      CFNotificationCenterAddObserver(v9, v3, (CFNotificationCallback)WebCore::userCaptionPreferencesChangedNotificationCallback, v10, 0, (CFNotificationSuspensionBehavior)1026);
      goto LABEL_26;
    }
  }
}

void WebCore::userCaptionPreferencesChangedNotificationCallback(WebCore *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  void (*v9[4])(_QWORD);
  _DWORD *v10;
  _DWORD *v11;

  WebCore::CaptionUserPreferencesMediaAF::extractCaptionUserPreferencesMediaAF(a2, &v11);
  v6 = v11;
  if (v11)
  {
    v9[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
    v9[1] = (void (*)(_QWORD))1174405120;
    v9[2] = (void (*)(_QWORD))___ZN7WebCoreL49userCaptionPreferencesChangedNotificationCallbackEP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke;
    v9[3] = (void (*)(_QWORD))&__block_descriptor_tmp_7;
    ++v11[2];
    v10 = v6;
    WebThreadRun(v9);
    v7 = v10;
    v10 = 0;
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
    }
  }
}

_BYTE *WebCore::CaptionUserPreferencesMediaAF::captionPreferencesChanged(_BYTE *this)
{
  _BYTE *v1;

  if (!this[209])
  {
    v1 = this;
    if (this[208])
      WebCore::CaptionUserPreferences::updateCaptionStyleSheetOverride((WebCore::CaptionUserPreferences *)this);
    return (_BYTE *)WebCore::PageGroup::captionPreferencesChanged(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8));
  }
  return this;
}

uint64_t WebCore::CaptionUserPreferencesMediaAF::colorPropertyCSS(WTF::StringImpl **a1, unsigned int a2, WebCore *this, int a4)
{
  unsigned int v7;
  char **v8;
  char *v9;
  _OWORD *v10;
  size_t v11;
  const char *v12;
  size_t v13;
  WTF::StringImpl *v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int8x16_t v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  size_t v38;
  uint64_t v39;
  _BYTE *v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  int8x16_t v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  char *v49;
  char *v50;
  __int16 v51;
  char *v52;
  uint64_t v53;
  __int16 v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t result;
  unsigned __int128 *v59;
  unsigned __int128 *v60;
  unsigned __int128 v61;
  char v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  int v66;
  char v67;
  int8x16x2_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;
  int8x16x2_t v73;

  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 1;
  WebCore::serializationForHTML(this, &v63);
  v7 = a2 - 2;
  if (a2 < 2 || v7 > 0x227)
  {
    v10 = 0;
    goto LABEL_4;
  }
  v8 = &(&WebCore::propertyNameStrings)[2 * v7];
  v10 = *v8;
  v9 = v8[1];
  if (!v9)
  {
LABEL_4:
    v11 = 0;
    goto LABEL_5;
  }
  v11 = (size_t)(v9 - 1);
  if ((unint64_t)(v9 - 1) >> 31)
  {
    result = 124;
    __break(0xC471u);
    return result;
  }
LABEL_5:
  if (a4)
    v12 = " !important;";
  else
    v12 = ";";
  if (a4)
    v13 = 12;
  else
    v13 = 1;
  v14 = v63;
  if (v63)
  {
    v15 = *((_DWORD *)v63 + 1);
    v16 = __CFADD__(v15, (_DWORD)v13);
    v17 = v15 + v13;
    if (v16)
    {
LABEL_74:
      v18 = -1;
      goto LABEL_14;
    }
  }
  else
  {
    v17 = v13;
  }
  v16 = __CFADD__(v17, 1);
  v18 = v17 + 1;
  if (v16)
    goto LABEL_74;
LABEL_14:
  v16 = __CFADD__(v18, (_DWORD)v11);
  v19 = v18 + v11;
  if (v16)
    v20 = 0xFFFFFFFFLL;
  else
    v20 = v19;
  if (!v63 || (*((_BYTE *)v63 + 16) & 4) != 0)
  {
    v35 = (_BYTE *)MEMORY[0x19AEA4824](&v64, v20);
    if (v35)
    {
      v36 = v35;
      if ((_DWORD)v11)
      {
        if ((_DWORD)v11 == 1)
          *v35 = *(_BYTE *)v10;
        else
          memcpy(v35, v10, v11);
      }
      v36[v11] = 58;
      v37 = &v36[v11 + 1];
      if (v14)
      {
        v22 = (_OWORD *)*((_QWORD *)v14 + 1);
        v38 = *((unsigned int *)v14 + 1);
        if ((*((_BYTE *)v14 + 16) & 4) != 0)
        {
          if ((_DWORD)v38)
          {
            if ((_DWORD)v38 == 1)
              *v37 = *(_BYTE *)v22;
            else
              memcpy(&v36[v11 + 1], v22, v38);
          }
        }
        else
        {
          if (v38 < 0x10)
          {
            v59 = (unsigned __int128 *)&v36[v11 + 1];
          }
          else
          {
            v59 = (unsigned __int128 *)&v37[v38 & 0xFFFFFFF0];
            v60 = (unsigned __int128 *)&v36[v11 + 1];
            do
            {
              v61 = (unsigned __int128)vld2q_s8((const char *)v22);
              v22 += 2;
              *v60++ = v61;
            }
            while (v60 != v59);
          }
          while (v59 != (unsigned __int128 *)&v37[v38])
          {
            v62 = *(_BYTE *)v22;
            v22 = (_OWORD *)((char *)v22 + 2);
            *(_BYTE *)v59 = v62;
            v59 = (unsigned __int128 *)((char *)v59 + 1);
          }
        }
        v39 = *((unsigned int *)v14 + 1);
      }
      else
      {
        v39 = 0;
      }
      v40 = &v37[v39];
      if ((a4 & 1) != 0)
        memcpy(v40, " !important;", v13);
      else
        *v40 = 59;
    }
  }
  else
  {
    v21 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v64);
    if (v21)
    {
      v23 = &v21[2 * v11];
      if ((v11 & 0x7FFFFFC0) != 0)
      {
        v24 = &v21[2 * (v11 & 0x7FFFFFC0)];
        v25 = 0uLL;
        do
        {
          v68.val[0] = (int8x16_t)*v10;
          v26 = *((int8x16_t *)v10 + 1);
          v70.val[0] = (int8x16_t)v10[2];
          v27 = v10[3];
          v10 += 4;
          v28 = v27;
          v70.val[1] = 0uLL;
          v72.val[0] = v26;
          v68.val[1] = 0uLL;
          v29 = v21;
          vst2q_s8(v29, v68);
          v29 += 32;
          v72.val[1] = 0uLL;
          vst2q_s8(v29, v72);
          v30 = v21 + 64;
          vst2q_s8(v30, v70);
          v31 = v21 + 96;
          vst2q_s8(v31, *(int8x16x2_t *)(&v25 - 1));
          v21 += 128;
        }
        while (v21 != v24);
        v21 = v24;
      }
      while (v21 != v23)
      {
        v32 = *(unsigned __int8 *)v10;
        v10 = (_OWORD *)((char *)v10 + 1);
        *(_WORD *)v21 = v32;
        v21 += 2;
      }
      *(_WORD *)v23 = 58;
      v33 = v23 + 2;
      v22 = (_OWORD *)*((_QWORD *)v14 + 1);
      v34 = *((unsigned int *)v14 + 1);
      if ((*((_BYTE *)v14 + 16) & 4) != 0)
      {
        v41 = &v33[2 * v34];
        if (v34 >= 0x40)
        {
          v42 = &v33[2 * (v34 & 0xFFFFFFC0)];
          v43 = 0uLL;
          v44 = v33;
          do
          {
            v69.val[0] = (int8x16_t)*v22;
            v45 = *((int8x16_t *)v22 + 1);
            v71.val[0] = (int8x16_t)v22[2];
            v46 = v22[3];
            v22 += 4;
            v47 = v46;
            v71.val[1] = 0uLL;
            v73.val[0] = v45;
            v69.val[1] = 0uLL;
            v48 = v44;
            vst2q_s8(v48, v69);
            v48 += 32;
            v73.val[1] = 0uLL;
            vst2q_s8(v48, v73);
            v49 = v44 + 64;
            vst2q_s8(v49, v71);
            v50 = v44 + 96;
            vst2q_s8(v50, *(int8x16x2_t *)(&v43 - 1));
            v44 += 128;
          }
          while (v44 != v42);
        }
        else
        {
          v42 = v33;
        }
        while (v42 != v41)
        {
          v51 = *(unsigned __int8 *)v22;
          v22 = (_OWORD *)((char *)v22 + 1);
          *(_WORD *)v42 = v51;
          v42 += 2;
        }
      }
      else if ((_DWORD)v34 == 1)
      {
        *(_WORD *)v33 = *(_WORD *)v22;
      }
      else if ((_DWORD)v34)
      {
        memcpy(v33, v22, 2 * v34);
      }
      v52 = &v33[2 * *((unsigned int *)v14 + 1)];
      v53 = 2 * v13;
      do
      {
        v54 = *(unsigned __int8 *)v12++;
        *(_WORD *)v52 = v54;
        v52 += 2;
        v53 -= 2;
      }
      while (v53);
    }
  }
  v55 = v63;
  v63 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)v55 -= 2;
  }
  v56 = v64;
  if (v64
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v64),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v64),
        (v56 = v64) != 0))
  {
    *(_DWORD *)v56 += 2;
  }
  *a1 = v56;
  v57 = v65;
  v65 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)v57 -= 2;
  }
  result = (uint64_t)v64;
  v64 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::CaptionUserPreferencesMediaAF::captionStrokeWidthForFont(WebCore::CaptionUserPreferencesMediaAF *this, float a2, const WTF::String *a3, float *a4, BOOL *a5)
{
  const void *v8;
  _BOOL8 v9;
  float v10;
  CFTypeRef v11;
  const WTF::String *v13;
  double v14;
  CFTypeRef cf;
  _QWORD block[4];
  char v17;

  {
    v13 = a3;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
    block[3] = &__block_descriptor_tmp_8;
    v17 = 0;
    if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
      dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
    WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyFontDescriptorWithStrokeForStyle = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceCopyFontDescriptorWithStrokeForStyle");
    WebCore::canLoad_MediaAccessibility_MACaptionAppearanceCopyFontDescriptorWithStrokeForStyle(void)::loaded = WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyFontDescriptorWithStrokeForStyle != 0;
    a3 = v13;
    if (WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyFontDescriptorWithStrokeForStyle)
      goto LABEL_3;
    return 0;
  }
  if (!WebCore::canLoad_MediaAccessibility_MACaptionAppearanceCopyFontDescriptorWithStrokeForStyle(void)::loaded)
    return 0;
LABEL_3:
  block[0] = 0;
  WTF::String::createCFString(a3);
  v14 = 0.0;
  v8 = (const void *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyFontDescriptorWithStrokeForStyle(1, block, 0, cf, &v14, a2);
  v9 = v8 != 0;
  if (v8)
  {
    v10 = v14 + v14;
    *a4 = v10;
    *a5 = block[0] == 0;
    CFRelease(v8);
  }
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  return v9;
}

float WebCore::CaptionUserPreferencesMediaAF::captionFontSizeScaleAndImportance(WebCore::CaptionUserPreferencesMediaAF *this, BOOL *a2)
{
  MACaptionAppearanceBehavior *v3;
  double v4;
  _QWORD block[4];
  char v7;

  if (((*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)this + 208))(this) & 1) != 0)
    goto LABEL_7;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v7 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  if (!WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary)
  {
LABEL_7:
    *a2 = 0;
  }
  else
  {
    block[0] = 0;
    *a2 = 0;
    WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetRelativeCharacterSize((WebCore *)1, (MACaptionAppearanceDomain)block, v3);
    if (v4 != 0.0)
    {
      *a2 = block[0] == 0;
      return v4 * 0.0500000007;
    }
  }
  return 0.05;
}

void WebCore::CaptionUserPreferencesMediaAF::platformSetPreferredLanguage(WebCore::CaptionUserPreferencesMediaAF *this, const WTF::String *a2)
{
  const __CFString *v2;
  CFTypeRef cf;

  WTF::String::createCFString(this);
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceAddSelectedLanguage((WebCore *)1, (MACaptionAppearanceDomain)cf, v2);
  if (cf)
    CFRelease(cf);
}

void WebCore::CaptionUserPreferencesMediaAF::setPreferredLanguage(WTF::StringImpl **this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  double v7;
  const __CFString *v8;
  const void *v9;
  MACaptionAppearanceDomain block[4];
  char v11;

  if (*((_BYTE *)this + 32) != 3)
  {
    if (((*((uint64_t (**)(WTF::StringImpl **))*this + 26))(this) & 1) != 0)
      goto LABEL_9;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = (MACaptionAppearanceDomain)___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
    block[3] = (MACaptionAppearanceDomain)&__block_descriptor_tmp_8;
    v11 = 0;
    if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
      dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
    if (!WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary)
    {
LABEL_9:
      v5 = *a2;
      if (*a2)
        *(_DWORD *)v5 += 2;
      v6 = this[12];
      this[12] = v5;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          v6 = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v4);
        else
          *(_DWORD *)v6 -= 2;
      }
      if (!*((_DWORD *)this + 32))
      {
        *((_BYTE *)this + 132) = 1;
        if (((unint64_t)this[9] & 0xFFFFFFFFFFFFLL) == 0
          || *(double *)(((unint64_t)this[9] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          this[8] = 0;
          WTF::MonotonicTime::now(v6);
          WebCore::TimerBase::setNextFireTime((uint64_t)(this + 5), v7 + 0.0);
        }
      }
    }
    else
    {
      if ((byte_1EE337E22 & 1) != 0)
      {
        if (qword_1EE337E30)
        {
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)qword_1EE337E30 + 24))(qword_1EE337E30, a2);
          return;
        }
      }
      else
      {
        qword_1EE337E30 = 0;
        byte_1EE337E22 = 1;
      }
      WTF::String::createCFString((WTF::String *)a2);
      WebCore::softLinkMediaAccessibilityMACaptionAppearanceAddSelectedLanguage((WebCore *)1, block[0], v8);
      v9 = (const void *)block[0];
      block[0] = kMACaptionAppearanceDomainDefault;
      if (v9)
        CFRelease(v9);
    }
  }
}

void WebCore::CaptionUserPreferencesMediaAF::preferredLanguages(WebCore::CaptionUserPreferencesMediaAF *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _DWORD **v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  _QWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  const __CFArray *v19;
  const __CFArray *v20;
  uint64_t v21;
  unint64_t v22;
  WTF *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  WTF *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  void *__src;
  uint64_t v49;
  WTF *block;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  void *v53;
  char v54;

  WTF::userPreferredLanguages();
  if ((*(unsigned int (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)this + 208))(this))
  {
    v5 = (_DWORD **)((char *)this + 96);
    v4 = *((_QWORD *)this + 12);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 4))
      {
        v14 = HIDWORD(v49);
        if (HIDWORD(v49) == (_DWORD)v49)
        {
          v5 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__src, HIDWORD(v49) + 1, (unint64_t)this + 96);
          v14 = HIDWORD(v49);
        }
        v15 = __src;
        memmove((char *)__src + 8, __src, 8 * v14);
        v16 = *v5;
        if (*v5)
          *v16 += 2;
        *v15 = v16;
        ++HIDWORD(v49);
      }
    }
  }
  if (((*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)this + 208))(this) & 1) != 0)
    goto LABEL_17;
  block = (WTF *)MEMORY[0x1E0C809B0];
  v51 = 0x40000000;
  v52 = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  v53 = &__block_descriptor_tmp_8;
  v54 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, &block);
  if (!WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary)
  {
LABEL_17:
    *a2 = (uint64_t)__src;
    v12 = v49;
    __src = 0;
    v49 = 0;
    a2[1] = v12;
    goto LABEL_18;
  }
  if ((byte_1EE337E23 & 1) != 0)
  {
    if (byte_1EE337E48)
    {
      v7 = dword_1EE337E44;
      *a2 = 0;
      a2[1] = 0;
      *((_DWORD *)a2 + 3) = v7;
      if (!(_DWORD)v7)
        goto LABEL_18;
      if (!(v7 >> 29))
      {
        v8 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v7));
        *((_DWORD *)a2 + 2) = v7;
        *a2 = (uint64_t)v8;
        if (dword_1EE337E44)
        {
          v9 = (_DWORD **)qword_1EE337E38;
          v10 = 8 * dword_1EE337E44;
          do
          {
            v11 = *v9;
            if (*v9)
              *v11 += 2;
            *v8++ = v11;
            ++v9;
            v10 -= 8;
          }
          while (v10);
        }
        goto LABEL_18;
      }
LABEL_91:
      __break(0xC471u);
      JUMPOUT(0x19607304CLL);
    }
  }
  else
  {
    LOBYTE(qword_1EE337E38) = 0;
    byte_1EE337E48 = 0;
    byte_1EE337E23 = 1;
  }
  v19 = (const __CFArray *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopySelectedLanguages((WebCore *)1, (MACaptionAppearanceDomain)v6);
  if (!v19)
  {
    block = 0;
    v51 = 0;
    goto LABEL_56;
  }
  v20 = v19;
  WTF::makeVector<WTF::String,__CFString const*>((uint64_t)&block, v19);
  CFRelease(v20);
  v21 = HIDWORD(v51);
  if (!HIDWORD(v51))
  {
LABEL_56:
    *a2 = (uint64_t)__src;
    v34 = v49;
    __src = 0;
    v49 = 0;
    a2[1] = v34;
    goto LABEL_72;
  }
  *a2 = 0;
  a2[1] = 0;
  v22 = HIDWORD(v49) + v21;
  if (v22 >> 29)
    goto LABEL_91;
  v23 = (WTF *)WTF::fastMalloc((WTF *)(8 * v22));
  *((_DWORD *)a2 + 2) = v22;
  *a2 = (uint64_t)v23;
  v24 = HIDWORD(v51);
  if (v22 < HIDWORD(v51))
  {
    v25 = v22 + (v22 >> 2);
    if (v25 >= 0x10)
      v26 = v25 + 1;
    else
      v26 = 16;
    if (v26 <= HIDWORD(v51))
      v22 = HIDWORD(v51);
    else
      v22 = v26;
    if (v22 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x196073054);
    }
    v27 = WTF::fastMalloc((WTF *)(8 * v22));
    *((_DWORD *)a2 + 2) = v22;
    *a2 = v27;
    if ((WTF *)v27 == v23)
    {
      LODWORD(v22) = 0;
      v29 = 0;
      *a2 = 0;
      *((_DWORD *)a2 + 2) = 0;
    }
    else
    {
      v29 = (WTF *)v27;
    }
    WTF::fastFree(v23, v28);
    v24 = HIDWORD(v51);
    v23 = v29;
  }
  if ((_DWORD)v24)
  {
    v30 = 0;
    v31 = block;
    v32 = 8 * v24;
    do
    {
      v33 = *((_QWORD *)v31 + v30);
      *((_QWORD *)v31 + v30) = 0;
      *((_QWORD *)v23 + v30++) = v33;
      v32 -= 8;
    }
    while (v32);
    *((_DWORD *)a2 + 3) = v30;
  }
  else
  {
    LODWORD(v30) = 0;
  }
  v35 = HIDWORD(v49);
  v36 = HIDWORD(v49) + (unint64_t)v30;
  if (v36 > v22)
  {
    v37 = v22 + ((unint64_t)v22 >> 2);
    if (v37 >= 0x10)
      v38 = v37 + 1;
    else
      v38 = 16;
    if (v38 <= v36)
      v39 = HIDWORD(v49) + (unint64_t)v30;
    else
      v39 = v38;
    if (v39 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19607305CLL);
    }
    v40 = (WTF *)WTF::fastMalloc((WTF *)(8 * v39));
    *((_DWORD *)a2 + 2) = v39;
    *a2 = (uint64_t)v40;
    memcpy(v40, v23, 8 * v30);
    if (v23)
    {
      if (v40 == v23)
      {
        *a2 = 0;
        *((_DWORD *)a2 + 2) = 0;
      }
      WTF::fastFree(v23, v6);
    }
    v35 = HIDWORD(v49);
  }
  if ((_DWORD)v35)
  {
    v41 = (uint64_t *)__src;
    v42 = *a2;
    v43 = 8 * v35;
    do
    {
      v44 = *v41;
      *v41++ = 0;
      *(_QWORD *)(v42 + 8 * v30) = v44;
      LODWORD(v30) = v30 + 1;
      v43 -= 8;
    }
    while (v43);
    *((_DWORD *)a2 + 3) = v30;
  }
LABEL_72:
  v45 = block;
  if (!HIDWORD(v51))
  {
    if (!block)
      goto LABEL_18;
    goto LABEL_74;
  }
  v46 = 8 * HIDWORD(v51);
  do
  {
    v47 = *(WTF::StringImpl **)v45;
    *(_QWORD *)v45 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v47 -= 2;
    }
    v45 = (WTF *)((char *)v45 + 8);
    v46 -= 8;
  }
  while (v46);
  v45 = block;
  if (block)
  {
LABEL_74:
    block = 0;
    LODWORD(v51) = 0;
    WTF::fastFree(v45, v6);
  }
LABEL_18:
  v13 = (WTF *)__src;
  if (!HIDWORD(v49))
  {
    if (!__src)
      return;
LABEL_35:
    __src = 0;
    LODWORD(v49) = 0;
    WTF::fastFree(v13, v6);
    return;
  }
  v17 = 8 * HIDWORD(v49);
  do
  {
    v18 = *(WTF::StringImpl **)v13;
    *(_QWORD *)v13 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v18 -= 2;
    }
    v13 = (WTF *)((char *)v13 + 8);
    v17 -= 8;
  }
  while (v17);
  v13 = (WTF *)__src;
  if (__src)
    goto LABEL_35;
}

unsigned int *std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,void>(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;

  v1 = result;
  if (byte_1EE337E48)
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&qword_1EE337E38, result);
  v2 = result[3];
  qword_1EE337E38 = 0;
  *(_QWORD *)&dword_1EE337E40 = 0;
  dword_1EE337E44 = v2;
  if (!(_DWORD)v2)
    goto LABEL_4;
  if (!(v2 >> 29))
  {
    result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v2));
    dword_1EE337E40 = v2;
    qword_1EE337E38 = (uint64_t)result;
    v3 = v1[3];
    if ((_DWORD)v3)
    {
      v4 = *(_DWORD ***)v1;
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        if (*v4)
          *v6 += 2;
        *(_QWORD *)result = v6;
        result += 2;
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
LABEL_4:
    byte_1EE337E48 = 1;
    return result;
  }
  __break(0xC471u);
  return result;
}

void WebCore::CaptionUserPreferencesMediaAF::setPreferredAudioCharacteristic(WTF::StringImpl **this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  double v7;
  _QWORD block[4];
  char v9;

  if (((*((uint64_t (**)(WTF::StringImpl **))*this + 26))(this) & 1) != 0)
    goto LABEL_5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v9 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  if (!WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary)
  {
LABEL_5:
    v5 = *a2;
    if (*a2)
      *(_DWORD *)v5 += 2;
    v6 = this[13];
    this[13] = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        v6 = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    if (!*((_DWORD *)this + 32))
    {
      *((_BYTE *)this + 132) = 1;
      if (((unint64_t)this[9] & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)(((unint64_t)this[9] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        this[8] = 0;
        WTF::MonotonicTime::now(v6);
        WebCore::TimerBase::setNextFireTime((uint64_t)(this + 5), v7 + 0.0);
      }
    }
  }
}

void WebCore::CaptionUserPreferencesMediaAF::preferredAudioCharacteristics(WebCore::CaptionUserPreferencesMediaAF *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD **v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _QWORD block[4];
  char v22;

  if (((*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)this + 208))(this) & 1) != 0)
    goto LABEL_18;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v22 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  if (!WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary)
    goto LABEL_18;
  {
    if (!WebCore::canLoad_MediaAccessibility_MAAudibleMediaCopyPreferredCharacteristics(void)::loaded)
      goto LABEL_18;
    v4 = WebCore::softLinkMediaAccessibilityMAAudibleMediaCopyPreferredCharacteristics;
  }
  else
  {
    v4 = dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MAAudibleMediaCopyPreferredCharacteristics");
    WebCore::softLinkMediaAccessibilityMAAudibleMediaCopyPreferredCharacteristics = v4;
    WebCore::canLoad_MediaAccessibility_MAAudibleMediaCopyPreferredCharacteristics(void)::loaded = v4 != 0;
    if (!v4)
      goto LABEL_18;
  }
  v5 = (const __CFArray *)((uint64_t (*)(void))v4)();
  if (v5)
  {
    v6 = v5;
    if (CFArrayGetCount(v5))
    {
      WTF::makeVector<WTF::String,__CFString const*>(a2, v6);
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v9 = *((_QWORD *)this + 13);
      v8 = (char *)this + 104;
      v7 = v9;
      if (v9 && *(_DWORD *)(v7 + 4))
      {
        v10 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, 1uLL, (unint64_t)v8);
        v11 = *(unsigned int *)(a2 + 12);
        v12 = *(_QWORD *)a2;
        v13 = *v10;
        if (*v10)
          *v13 += 2;
        *(_QWORD *)(v12 + 8 * v11) = v13;
        *(_DWORD *)(a2 + 12) = v11 + 1;
      }
    }
    CFRelease(v6);
    return;
  }
LABEL_18:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v16 = *((_QWORD *)this + 13);
  v15 = (char *)this + 104;
  v14 = v16;
  if (v16 && *(_DWORD *)(v14 + 4))
  {
    v17 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, 1uLL, (unint64_t)v15);
    v18 = *(unsigned int *)(a2 + 12);
    v19 = *(_QWORD *)a2;
    v20 = *v17;
    if (*v17)
      *v20 += 2;
    *(_QWORD *)(v19 + 8 * v18) = v20;
    *(_DWORD *)(a2 + 12) = v18 + 1;
  }
}

unsigned int *WebCore::CaptionUserPreferencesMediaAF::captionsStyleSheetOverride@<X0>(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  unsigned int *result;
  _OWORD *v5;
  MACaptionAppearanceBehavior *v6;
  WTF::StringImpl *v7;
  void *v8;
  CGColor *v9;
  void *v10;
  unint64_t v11;
  MACaptionAppearanceBehavior *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  BOOL v16;
  int v17;
  float v18;
  void *v19;
  MACaptionAppearanceBehavior *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t TextEdgeStyle;
  WTF::StringImpl *v25;
  MACaptionAppearanceFontStyle v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  const __CTFontDescriptor *v38;
  MACaptionAppearanceBehavior *v39;
  const __CTFontDescriptor *v40;
  const __CFString *v41;
  const __CFString *v42;
  const __CFString *v43;
  const __CFString *v44;
  uint64_t v45;
  const __CFArray *v46;
  const __CFArray *v47;
  CFIndex v48;
  const __CTFontDescriptor *ValueAtIndex;
  CFTypeRef v50;
  const void *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WebCore *v55;
  CGColor *v56;
  unint64_t v57;
  MACaptionAppearanceBehavior *v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  BOOL v62;
  int v63;
  float v64;
  void *v65;
  MACaptionAppearanceBehavior *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  _WORD *v72;
  int8x16_t *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  size_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  _BYTE *v84;
  size_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  char *v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  char *v93;
  char *v94;
  char *v95;
  __int16 v96;
  _WORD *v97;
  char *v98;
  int8x16_t *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  char *v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  char *v109;
  char *v110;
  char *v111;
  __int16 v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  _WORD *v116;
  int8x16_t *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  size_t v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  size_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  char *v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  char *v137;
  char *v138;
  char *v139;
  __int16 v140;
  _WORD *v141;
  char *v142;
  int8x16_t *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  __int128 v148;
  char *v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  char *v153;
  char *v154;
  char *v155;
  __int16 v156;
  WebCore *v157;
  CGColor *v158;
  unint64_t v159;
  MACaptionAppearanceBehavior *v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  double v164;
  BOOL v165;
  int v166;
  float v167;
  _BYTE *v168;
  size_t v169;
  WTF::StringImpl *v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  int v175;
  int v176;
  double v177;
  const char *v178;
  uint64_t v179;
  int v180;
  size_t v181;
  WTF::StringImpl *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  int8x16_t *p_block;
  WTF::StringImpl *v187;
  uint64_t v188;
  _BYTE *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  __int128 v194;
  int8x16_t v195;
  int8x16_t v196;
  int8x16_t v197;
  char *v198;
  char *v199;
  char *v200;
  __int16 v201;
  _WORD *v202;
  uint64_t v203;
  __int16 v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  uint64_t v208;
  WTF::StringImpl *v209;
  uint64_t v210;
  _WORD *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  _BYTE *v216;
  size_t v217;
  uint64_t v218;
  _BYTE *v219;
  _BYTE *v220;
  size_t v221;
  uint64_t v222;
  _BYTE *v223;
  size_t v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  char *v228;
  int8x16_t v229;
  __int128 v230;
  __int128 v231;
  char *v232;
  char *v233;
  char *v234;
  __int16 v235;
  _WORD *v236;
  char *v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  __int128 v242;
  char *v243;
  int8x16_t v244;
  __int128 v245;
  __int128 v246;
  char *v247;
  char *v248;
  char *v249;
  __int16 v250;
  char *v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  __int128 v256;
  char *v257;
  int8x16_t v258;
  __int128 v259;
  __int128 v260;
  char *v261;
  char *v262;
  char *v263;
  __int16 v264;
  WTF::StringImpl *v265;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  unsigned __int128 *v268;
  unsigned __int128 *v269;
  unsigned __int128 v270;
  char v271;
  unsigned __int128 *v272;
  unsigned __int128 *v273;
  unsigned __int128 v274;
  unsigned __int128 *v275;
  unsigned __int128 *v276;
  unsigned __int128 v277;
  unsigned __int128 *v278;
  unsigned __int128 *v279;
  unsigned __int128 v280;
  char v281;
  char v282;
  char v283;
  unsigned __int128 *v284;
  unsigned __int128 *v285;
  unsigned __int128 v286;
  unsigned __int128 *v287;
  unsigned __int128 *v288;
  unsigned __int128 v289;
  unsigned __int128 *v290;
  unsigned __int128 *v291;
  unsigned __int128 v292;
  unsigned __int128 *v293;
  unsigned __int128 *v294;
  unsigned __int128 v295;
  char v296;
  char v297;
  char v298;
  char v299;
  unsigned int *v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int *v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int *v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int *v311;
  unsigned int v312;
  unsigned int v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  int v319;
  char v320;
  WTF::StringImpl *v321;
  WTF::StringImpl *v322;
  int v323;
  char v324;
  uint64_t v325;
  char __s[16];
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 block;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  uint64_t v350;
  int8x16x2_t v351;
  int8x16x2_t v352;
  int8x16x2_t v353;
  int8x16x2_t v354;
  int8x16x2_t v355;
  int8x16x2_t v356;
  int8x16x2_t v357;
  int8x16x2_t v358;
  int8x16x2_t v359;
  int8x16x2_t v360;
  int8x16x2_t v361;
  int8x16x2_t v362;
  int8x16x2_t v363;
  int8x16x2_t v364;
  int8x16x2_t v365;
  int8x16x2_t v366;
  int8x16x2_t v367;
  int8x16x2_t v368;
  int8x16x2_t v369;
  int8x16x2_t v370;
  int8x16x2_t v371;
  int8x16x2_t v372;
  int8x16x2_t v373;
  int8x16x2_t v374;

  v350 = *MEMORY[0x1E0C80C00];
  result = (unsigned int *)(*((uint64_t (**)(WTF::StringImpl **))*this + 26))(this);
  if ((_DWORD)result)
  {
    v7 = this[14];
    if (v7)
      *(_DWORD *)v7 += 2;
    *a2 = v7;
    return result;
  }
  v317 = 0;
  v318 = 0;
  v319 = 0;
  v320 = 1;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  *(_QWORD *)&v343 = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  *((_QWORD *)&v343 + 1) = &__block_descriptor_tmp_8;
  LOBYTE(v344) = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, &block);
  if (!WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary)
  {
    v23 = this[14];
    if (v23)
      *(_DWORD *)v23 += 2;
    *a2 = v23;
    v318 = 0;
    goto LABEL_437;
  }
  *(_QWORD *)&block = 0;
  v8 = (void *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyForegroundColor((WebCore *)1, (MACaptionAppearanceDomain)&block, v6);
  v10 = v8;
  if (v8)
  {
    CFRetain(v8);
    CFRelease(v10);
  }
  v11 = WebCore::roundAndClampToSRGBALossy((WebCore *)v10, v9);
  v13 = bswap32(v11) | 0x1104000000000000;
  if (!BYTE4(v11))
    v13 = 0x11040000FFFFFFFFLL;
  *(_QWORD *)&v334 = v13;
  v14 = block;
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetForegroundOpacity((WebCore *)1, (MACaptionAppearanceDomain)&block, v12);
  if (v14)
    v16 = (_QWORD)block == 0;
  else
    v16 = 1;
  v17 = v16;
  v18 = v15;
  WebCore::Color::colorWithAlpha((uint64_t)&v334, v18, (uint64_t *)__s);
  if (v10)
    CFRelease(v10);
  v21 = *(_QWORD *)__s;
  if ((*(_QWORD *)__s & 0x4000000000000) != 0)
  {
    WebCore::CaptionUserPreferencesMediaAF::colorPropertyCSS(&v316, 5u, (WebCore *)__s, v17);
    v21 = *(_QWORD *)__s;
  }
  else
  {
    v22 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v22 += 2;
    v316 = v22;
  }
  if ((v21 & 0x8000000000000) != 0)
  {
    v300 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    do
    {
      v301 = __ldaxr(v300);
      v302 = v301 - 1;
    }
    while (__stlxr(v302, v300));
    if (!v302)
    {
      atomic_store(1u, v300);
      WTF::fastFree((WTF *)v300, v19);
    }
  }
  *(_QWORD *)&v334 = 0;
  TextEdgeStyle = WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetTextEdgeStyle((WebCore *)1, (MACaptionAppearanceDomain)&v334, v20);
  if (TextEdgeStyle <= 1)
  {
    v27 = *MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v27 += 2;
    goto LABEL_74;
  }
  block = 0uLL;
  LODWORD(v343) = 0;
  BYTE4(v343) = 1;
  switch(TextEdgeStyle)
  {
    case 5uLL:
      if ((_QWORD)v334)
        v34 = ";";
      else
        v34 = " !important;";
      if ((_QWORD)v334)
        v35 = 2;
      else
        v35 = 13;
      WTF::StringBuilder::append<WTF::ASCIILiteral,char,WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&block, "text-shadow", 12, 58, "0 .1em .16em black", 19, v34, v35);
      break;
    case 3uLL:
      if ((_QWORD)v334)
        v28 = ";";
      else
        v28 = " !important;";
      if ((_QWORD)v334)
        v29 = 2;
      else
        v29 = 13;
      v30 = "text-shadow";
      v31 = ".1em .1em .16em black";
      v32 = 12;
      v33 = 22;
      goto LABEL_64;
    case 2uLL:
      if ((_QWORD)v334)
        v28 = ";";
      else
        v28 = " !important;";
      if ((_QWORD)v334)
        v29 = 2;
      else
        v29 = 13;
      v30 = "text-shadow";
      v31 = "-.1em -.1em .16em black";
      v32 = 12;
      v33 = 24;
      goto LABEL_64;
    default:
      if ((TextEdgeStyle & 0xFFFFFFFFFFFFFFFELL) != 4)
        goto LABEL_65;
      if ((_QWORD)v334)
        v34 = ";";
      else
        v34 = " !important;";
      if ((_QWORD)v334)
        v35 = 2;
      else
        v35 = 13;
      break;
  }
  WTF::StringBuilder::append<WTF::ASCIILiteral,char,WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&block, "stroke-color", 13, 58, "black", 6, v34, v35);
  WTF::StringBuilder::append<WTF::ASCIILiteral,char,WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&block, "paint-order", 12, 58, "stroke", 7, v34, v35);
  WTF::StringBuilder::append<WTF::ASCIILiteral,char,WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&block, "stroke-linejoin", 16, 58, "round", 6, v34, v35);
  v30 = "stroke-linecap";
  v32 = 15;
  v31 = "round";
  v33 = 6;
  v28 = v34;
  v29 = v35;
LABEL_64:
  WTF::StringBuilder::append<WTF::ASCIILiteral,char,WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&block, v30, v32, 58, v31, v33, v28, v29);
LABEL_65:
  v27 = block;
  if ((_QWORD)block
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&block),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&block),
        (v27 = block) != 0))
  {
    *(_DWORD *)v27 += 2;
  }
  v36 = (WTF::StringImpl *)*((_QWORD *)&block + 1);
  *((_QWORD *)&block + 1) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v25);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = (WTF::StringImpl *)block;
  *(_QWORD *)&block = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v25);
    else
      *(_DWORD *)v37 -= 2;
  }
LABEL_74:
  v321 = 0;
  v38 = (const __CTFontDescriptor *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyFontDescriptorForStyle((WebCore *)1, (MACaptionAppearanceDomain)&v321, 0, v26);
  if (v38)
  {
    v40 = v38;
    v41 = (const __CFString *)*MEMORY[0x1E0CA8380];
    v42 = (const __CFString *)CTFontDescriptorCopyAttribute(v38, (CFStringRef)*MEMORY[0x1E0CA8380]);
    if (v42)
    {
      v43 = v42;
      if (CFStringGetLength(v42) >= 1 && CFStringGetCharacterAtIndex(v43, 0) == 46)
      {
        if (CFStringHasPrefix(CFSTR(".AppleSystemUIFontMonospaced"), v43))
        {
          v44 = CFSTR("system-ui-monospaced");
        }
        else
        {
          CFStringHasPrefix(CFSTR(".AppleSystemUIFont"), v43);
          v44 = CFSTR("system-ui");
        }
        CFRetain(v44);
        CFRelease(v43);
        v43 = v44;
      }
      block = 0uLL;
      LODWORD(v343) = 0;
      BYTE4(v343) = 1;
      *(_QWORD *)&v334 = "font-family: \"";
      DWORD2(v334) = 14;
      *(_QWORD *)__s = v43;
      LOBYTE(v325) = 34;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<__CFString const*,void>,WTF::StringTypeAdapter<char,void>>((uint64_t *)&block, (int8x16_t **)&v334, (CFStringRef *)__s, (char *)&v325);
      v46 = (const __CFArray *)CTFontDescriptorCopyAttribute(v40, (CFStringRef)*MEMORY[0x1E0CA81D8]);
      if (v46)
      {
        v47 = v46;
        if (CFArrayGetCount(v46) >= 1)
        {
          v48 = 0;
          do
          {
            ValueAtIndex = (const __CTFontDescriptor *)CFArrayGetValueAtIndex(v47, v48);
            if (ValueAtIndex)
            {
              v50 = CTFontDescriptorCopyAttribute(ValueAtIndex, v41);
              if (v50)
              {
                v51 = v50;
                *(_QWORD *)&v334 = ", \"";
                DWORD2(v334) = 3;
                *(_QWORD *)__s = v50;
                LOBYTE(v325) = 34;
                WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<__CFString const*,void>,WTF::StringTypeAdapter<char,void>>((uint64_t *)&block, (int8x16_t **)&v334, (CFStringRef *)__s, (char *)&v325);
                CFRelease(v51);
              }
            }
            ++v48;
          }
          while (v48 < CFArrayGetCount(v47));
        }
        CFRelease(v47);
      }
      WTF::StringBuilder::append();
      v45 = block;
      if ((_QWORD)block
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&block),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&block),
            (v45 = block) != 0))
      {
        *(_DWORD *)v45 += 2;
      }
      v53 = (WTF::StringImpl *)*((_QWORD *)&block + 1);
      *((_QWORD *)&block + 1) = 0;
      v54 = (WTF::StringImpl *)v45;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
        {
          WTF::StringImpl::destroy(v53, v52);
          v54 = (WTF::StringImpl *)block;
        }
        else
        {
          *(_DWORD *)v53 -= 2;
          v54 = (WTF::StringImpl *)v45;
        }
      }
      *(_QWORD *)&block = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v52);
        else
          *(_DWORD *)v54 -= 2;
      }
      CFRelease(v43);
    }
    else
    {
      v45 = *MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v45 += 2;
    }
    CFRelease(v40);
  }
  else
  {
    v45 = *MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v45 += 2;
  }
  *(_QWORD *)&block = 0;
  v55 = (WebCore *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyBackgroundColor((WebCore *)1, (MACaptionAppearanceDomain)&block, v39);
  v57 = WebCore::roundAndClampToSRGBALossy(v55, v56);
  v59 = bswap32(v57) | 0x1104000000000000;
  if (!BYTE4(v57))
    v59 = 0x11040000000000CCLL;
  *(_QWORD *)&v334 = v59;
  v60 = block;
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetBackgroundOpacity((WebCore *)1, (MACaptionAppearanceDomain)&block, v58);
  if (v60)
    v62 = (_QWORD)block == 0;
  else
    v62 = 1;
  v63 = v62;
  v64 = v61;
  WebCore::Color::colorWithAlpha((uint64_t)&v334, v64, (uint64_t *)__s);
  WebCore::CaptionUserPreferencesMediaAF::colorPropertyCSS(&v315, 0x3Du, (WebCore *)__s, v63);
  if ((*(_QWORD *)__s & 0x8000000000000) != 0)
  {
    v303 = (unsigned int *)(*(_QWORD *)__s & 0xFFFFFFFFFFFFLL);
    do
    {
      v304 = __ldaxr(v303);
      v305 = v304 - 1;
    }
    while (__stlxr(v305, v303));
    if (!v305)
    {
      atomic_store(1u, v303);
      WTF::fastFree((WTF *)v303, v65);
    }
  }
  if ((v334 & 0x8000000000000) != 0)
  {
    v306 = (unsigned int *)(v334 & 0xFFFFFFFFFFFFLL);
    do
    {
      v307 = __ldaxr(v306);
      v308 = v307 - 1;
    }
    while (__stlxr(v308, v306));
    if (!v308)
    {
      atomic_store(1u, v306);
      WTF::fastFree((WTF *)v306, v65);
    }
  }
  if (v55)
    CFRelease(v55);
  v67 = v315;
  if (!v315)
  {
    v68 = v316;
    goto LABEL_119;
  }
  v68 = v316;
  if (!*((_DWORD *)v315 + 1))
  {
LABEL_119:
    if ((!v68 || !*((_DWORD *)v68 + 1)) && (!v27 || !*(_DWORD *)(v27 + 4)) && (!v45 || !*(_DWORD *)(v45 + 4)))
      goto LABEL_255;
  }
  {
    *(_QWORD *)&block = "cue";
    *((_QWORD *)&block + 1) = 4;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::cue(void)::cue, (uint64_t)&block);
  }
  v69 = WebCore::UserAgentParts::cue(void)::cue;
  v70 = v318;
  if ((v318 || (v70 = v317) != 0) && (*((_BYTE *)v70 + 16) & 4) == 0
    || WebCore::UserAgentParts::cue(void)::cue && (*(_BYTE *)(WebCore::UserAgentParts::cue(void)::cue + 16) & 4) == 0
    || v67 && (*((_BYTE *)v67 + 16) & 4) == 0
    || v68 && (*((_BYTE *)v68 + 16) & 4) == 0
    || v27 && (*(_BYTE *)(v27 + 16) & 4) == 0
    || v45 && (*(_BYTE *)(v45 + 16) & 4) == 0)
  {
    v71 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v317);
    if (v71)
    {
      *(_DWORD *)v71 = 3801120;
      *(_WORD *)(v71 + 4) = 58;
      v72 = (_WORD *)(v71 + 6);
      if (v69)
      {
        v73 = *(int8x16_t **)(v69 + 8);
        v74 = *(unsigned int *)(v69 + 4);
        if ((*(_BYTE *)(v69 + 16) & 4) != 0)
        {
          v75 = (char *)&v72[v74];
          if (v74 >= 0x40)
          {
            v76 = (char *)&v72[v74 & 0xFFFFFFC0];
            v88 = 0uLL;
            v89 = (char *)(v71 + 6);
            do
            {
              v351.val[0] = *v73;
              v90 = v73[1];
              v359.val[0] = v73[2];
              v91 = v73[3];
              v73 += 4;
              v92 = v91;
              v359.val[1] = 0uLL;
              v367.val[0] = v90;
              v351.val[1] = 0uLL;
              v93 = v89;
              vst2q_s8(v93, v351);
              v93 += 32;
              v367.val[1] = 0uLL;
              vst2q_s8(v93, v367);
              v94 = v89 + 64;
              vst2q_s8(v94, v359);
              v95 = v89 + 96;
              vst2q_s8(v95, *(int8x16x2_t *)(&v88 - 1));
              v89 += 128;
            }
            while (v89 != v76);
          }
          else
          {
            v76 = (char *)(v71 + 6);
          }
          while (v76 != v75)
          {
            v96 = v73->u8[0];
            v73 = (int8x16_t *)((char *)v73 + 1);
            *(_WORD *)v76 = v96;
            v76 += 2;
          }
        }
        else if ((_DWORD)v74 == 1)
        {
          *v72 = v73->i16[0];
        }
        else if ((_DWORD)v74)
        {
          memcpy((void *)(v71 + 6), v73, 2 * v74);
        }
        v87 = *(unsigned int *)(v69 + 4);
      }
      else
      {
        v87 = 0;
      }
      v97 = &v72[v87];
      *v97 = 123;
      v98 = (char *)(v97 + 1);
      if (v67)
      {
        v99 = (int8x16_t *)*((_QWORD *)v67 + 1);
        v100 = *((unsigned int *)v67 + 1);
        if ((*((_BYTE *)v67 + 16) & 4) != 0)
        {
          v101 = &v98[2 * v100];
          if (v100 >= 0x40)
          {
            v102 = &v98[2 * (v100 & 0xFFFFFFC0)];
            v104 = 0uLL;
            v105 = v98;
            do
            {
              v352.val[0] = *v99;
              v106 = v99[1];
              v360.val[0] = v99[2];
              v107 = v99[3];
              v99 += 4;
              v108 = v107;
              v360.val[1] = 0uLL;
              v368.val[0] = v106;
              v352.val[1] = 0uLL;
              v109 = v105;
              vst2q_s8(v109, v352);
              v109 += 32;
              v368.val[1] = 0uLL;
              vst2q_s8(v109, v368);
              v110 = v105 + 64;
              vst2q_s8(v110, v360);
              v111 = v105 + 96;
              vst2q_s8(v111, *(int8x16x2_t *)(&v104 - 1));
              v105 += 128;
            }
            while (v105 != v102);
          }
          else
          {
            v102 = v98;
          }
          while (v102 != v101)
          {
            v112 = v99->u8[0];
            v99 = (int8x16_t *)((char *)v99 + 1);
            *(_WORD *)v102 = v112;
            v102 += 2;
          }
        }
        else if ((_DWORD)v100 == 1)
        {
          *(_WORD *)v98 = v99->i16[0];
        }
        else if ((_DWORD)v100)
        {
          memcpy(v98, v99, 2 * v100);
        }
        v103 = *((unsigned int *)v67 + 1);
      }
      else
      {
        v103 = 0;
      }
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v98[2 * v103], (uint64_t)v68, v27, v45, 125);
    }
  }
  else
  {
    v77 = MEMORY[0x19AEA4824](&v317);
    if (v77)
    {
      *(_BYTE *)(v77 + 2) = 58;
      *(_WORD *)v77 = 14880;
      v78 = (_BYTE *)(v77 + 3);
      if (v69)
      {
        v79 = *(_BYTE **)(v69 + 8);
        v80 = *(unsigned int *)(v69 + 4);
        if ((*(_BYTE *)(v69 + 16) & 4) != 0)
        {
          if ((_DWORD)v80)
          {
            if ((_DWORD)v80 == 1)
              *v78 = *v79;
            else
              memcpy((void *)(v77 + 3), v79, v80);
          }
        }
        else
        {
          if (v80 < 0x10)
          {
            v284 = (unsigned __int128 *)(v77 + 3);
          }
          else
          {
            v284 = (unsigned __int128 *)&v78[v80 & 0xFFFFFFF0];
            v285 = (unsigned __int128 *)(v77 + 3);
            do
            {
              v286 = (unsigned __int128)vld2q_s8(v79);
              v79 += 32;
              *v285++ = v286;
            }
            while (v285 != v284);
          }
          while (v284 != (unsigned __int128 *)&v78[v80])
          {
            v296 = *v79;
            v79 += 2;
            *(_BYTE *)v284 = v296;
            v284 = (unsigned __int128 *)((char *)v284 + 1);
          }
        }
        v81 = *(unsigned int *)(v69 + 4);
      }
      else
      {
        v81 = 0;
      }
      v82 = &v78[v81];
      *v82 = 123;
      v83 = v82 + 1;
      if (v67)
      {
        v84 = (_BYTE *)*((_QWORD *)v67 + 1);
        v85 = *((unsigned int *)v67 + 1);
        if ((*((_BYTE *)v67 + 16) & 4) != 0)
        {
          if ((_DWORD)v85)
          {
            if ((_DWORD)v85 == 1)
              *v83 = *v84;
            else
              memcpy(v83, v84, v85);
          }
        }
        else
        {
          if (v85 < 0x10)
          {
            v287 = (unsigned __int128 *)v83;
          }
          else
          {
            v287 = (unsigned __int128 *)&v83[v85 & 0xFFFFFFF0];
            v288 = (unsigned __int128 *)v83;
            do
            {
              v289 = (unsigned __int128)vld2q_s8(v84);
              v84 += 32;
              *v288++ = v289;
            }
            while (v288 != v287);
          }
          while (v287 != (unsigned __int128 *)&v83[v85])
          {
            v297 = *v84;
            v84 += 2;
            *(_BYTE *)v287 = v297;
            v287 = (unsigned __int128 *)((char *)v287 + 1);
          }
        }
        v86 = *((unsigned int *)v67 + 1);
      }
      else
      {
        v86 = 0;
      }
      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v83[v86], (uint64_t)v68, v27, v45, 125);
    }
  }
  {
    *(_QWORD *)&block = "cue";
    *((_QWORD *)&block + 1) = 4;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::cue(void)::cue, (uint64_t)&block);
  }
  v113 = WebCore::UserAgentParts::cue(void)::cue;
  v114 = v318;
  if ((v318 || (v114 = v317) != 0) && (*((_BYTE *)v114 + 16) & 4) == 0
    || WebCore::UserAgentParts::cue(void)::cue && (*(_BYTE *)(WebCore::UserAgentParts::cue(void)::cue + 16) & 4) == 0
    || v67 && (*((_BYTE *)v67 + 16) & 4) == 0
    || v68 && (*((_BYTE *)v68 + 16) & 4) == 0
    || v27 && (*(_BYTE *)(v27 + 16) & 4) == 0
    || v45 && (*(_BYTE *)(v45 + 16) & 4) == 0)
  {
    v115 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v317);
    if (v115)
    {
      *(_DWORD *)v115 = 3801120;
      *(_WORD *)(v115 + 4) = 58;
      v116 = (_WORD *)(v115 + 6);
      if (v113)
      {
        v117 = *(int8x16_t **)(v113 + 8);
        v118 = *(unsigned int *)(v113 + 4);
        if ((*(_BYTE *)(v113 + 16) & 4) != 0)
        {
          v119 = (char *)&v116[v118];
          if (v118 >= 0x40)
          {
            v120 = (char *)&v116[v118 & 0xFFFFFFC0];
            v132 = 0uLL;
            v133 = (char *)(v115 + 6);
            do
            {
              v353.val[0] = *v117;
              v134 = v117[1];
              v361.val[0] = v117[2];
              v135 = v117[3];
              v117 += 4;
              v136 = v135;
              v361.val[1] = 0uLL;
              v369.val[0] = v134;
              v353.val[1] = 0uLL;
              v137 = v133;
              vst2q_s8(v137, v353);
              v137 += 32;
              v369.val[1] = 0uLL;
              vst2q_s8(v137, v369);
              v138 = v133 + 64;
              vst2q_s8(v138, v361);
              v139 = v133 + 96;
              vst2q_s8(v139, *(int8x16x2_t *)(&v132 - 1));
              v133 += 128;
            }
            while (v133 != v120);
          }
          else
          {
            v120 = (char *)(v115 + 6);
          }
          while (v120 != v119)
          {
            v140 = v117->u8[0];
            v117 = (int8x16_t *)((char *)v117 + 1);
            *(_WORD *)v120 = v140;
            v120 += 2;
          }
        }
        else if ((_DWORD)v118 == 1)
        {
          *v116 = v117->i16[0];
        }
        else if ((_DWORD)v118)
        {
          memcpy((void *)(v115 + 6), v117, 2 * v118);
        }
        v131 = *(unsigned int *)(v113 + 4);
      }
      else
      {
        v131 = 0;
      }
      v141 = &v116[v131];
      *(_QWORD *)v141 = 0x29007400720028;
      *((_DWORD *)v141 + 2) = 8060960;
      v142 = (char *)(v141 + 6);
      if (v67)
      {
        v143 = (int8x16_t *)*((_QWORD *)v67 + 1);
        v144 = *((unsigned int *)v67 + 1);
        if ((*((_BYTE *)v67 + 16) & 4) != 0)
        {
          v145 = &v142[2 * v144];
          if (v144 >= 0x40)
          {
            v146 = &v142[2 * (v144 & 0xFFFFFFC0)];
            v148 = 0uLL;
            v149 = v142;
            do
            {
              v354.val[0] = *v143;
              v150 = v143[1];
              v362.val[0] = v143[2];
              v151 = v143[3];
              v143 += 4;
              v152 = v151;
              v362.val[1] = 0uLL;
              v370.val[0] = v150;
              v354.val[1] = 0uLL;
              v153 = v149;
              vst2q_s8(v153, v354);
              v153 += 32;
              v370.val[1] = 0uLL;
              vst2q_s8(v153, v370);
              v154 = v149 + 64;
              vst2q_s8(v154, v362);
              v155 = v149 + 96;
              vst2q_s8(v155, *(int8x16x2_t *)(&v148 - 1));
              v149 += 128;
            }
            while (v149 != v146);
          }
          else
          {
            v146 = v142;
          }
          while (v146 != v145)
          {
            v156 = v143->u8[0];
            v143 = (int8x16_t *)((char *)v143 + 1);
            *(_WORD *)v146 = v156;
            v146 += 2;
          }
        }
        else if ((_DWORD)v144 == 1)
        {
          *(_WORD *)v142 = v143->i16[0];
        }
        else if ((_DWORD)v144)
        {
          memcpy(v142, v143, 2 * v144);
        }
        v147 = *((unsigned int *)v67 + 1);
      }
      else
      {
        v147 = 0;
      }
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v142[2 * v147], (uint64_t)v68, v27, v45, 125);
    }
  }
  else
  {
    v121 = MEMORY[0x19AEA4824](&v317);
    if (v121)
    {
      *(_BYTE *)(v121 + 2) = 58;
      *(_WORD *)v121 = 14880;
      v122 = (_BYTE *)(v121 + 3);
      if (v113)
      {
        v123 = *(_BYTE **)(v113 + 8);
        v124 = *(unsigned int *)(v113 + 4);
        if ((*(_BYTE *)(v113 + 16) & 4) != 0)
        {
          if ((_DWORD)v124)
          {
            if ((_DWORD)v124 == 1)
              *v122 = *v123;
            else
              memcpy((void *)(v121 + 3), v123, v124);
          }
        }
        else
        {
          if (v124 < 0x10)
          {
            v290 = (unsigned __int128 *)(v121 + 3);
          }
          else
          {
            v290 = (unsigned __int128 *)&v122[v124 & 0xFFFFFFF0];
            v291 = (unsigned __int128 *)(v121 + 3);
            do
            {
              v292 = (unsigned __int128)vld2q_s8(v123);
              v123 += 32;
              *v291++ = v292;
            }
            while (v291 != v290);
          }
          while (v290 != (unsigned __int128 *)&v122[v124])
          {
            v298 = *v123;
            v123 += 2;
            *(_BYTE *)v290 = v298;
            v290 = (unsigned __int128 *)((char *)v290 + 1);
          }
        }
        v125 = *(unsigned int *)(v113 + 4);
      }
      else
      {
        v125 = 0;
      }
      v126 = &v122[v125];
      *((_WORD *)v126 + 2) = 31520;
      *(_DWORD *)v126 = 695497256;
      v127 = v126 + 6;
      if (v67)
      {
        v128 = (_BYTE *)*((_QWORD *)v67 + 1);
        v129 = *((unsigned int *)v67 + 1);
        if ((*((_BYTE *)v67 + 16) & 4) != 0)
        {
          if ((_DWORD)v129)
          {
            if ((_DWORD)v129 == 1)
              *v127 = *v128;
            else
              memcpy(v127, v128, v129);
          }
        }
        else
        {
          if (v129 < 0x10)
          {
            v293 = (unsigned __int128 *)(v126 + 6);
          }
          else
          {
            v293 = (unsigned __int128 *)&v127[v129 & 0xFFFFFFF0];
            v294 = (unsigned __int128 *)(v126 + 6);
            do
            {
              v295 = (unsigned __int128)vld2q_s8(v128);
              v128 += 32;
              *v294++ = v295;
            }
            while (v294 != v293);
          }
          while (v293 != (unsigned __int128 *)&v127[v129])
          {
            v299 = *v128;
            v128 += 2;
            *(_BYTE *)v293 = v299;
            v293 = (unsigned __int128 *)((char *)v293 + 1);
          }
        }
        v130 = *((unsigned int *)v67 + 1);
      }
      else
      {
        v130 = 0;
      }
      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v127[v130], (uint64_t)v68, v27, v45, 125);
    }
  }
LABEL_255:
  *(_QWORD *)&v334 = 0;
  v157 = (WebCore *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyWindowColor((WebCore *)1, (MACaptionAppearanceDomain)&v334, v66);
  v159 = WebCore::roundAndClampToSRGBALossy(v157, v158);
  v161 = bswap32(v159) | 0x1104000000000000;
  if (!BYTE4(v159))
    v161 = 0x1104000000000000;
  *(_QWORD *)__s = v161;
  v162 = v334;
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetWindowOpacity((WebCore *)1, (MACaptionAppearanceDomain)&v334, v160);
  v164 = v163;
  if (v162)
    v165 = (_QWORD)v334 == 0;
  else
    v165 = 1;
  v166 = v165;
  v167 = v163;
  WebCore::Color::colorWithAlpha((uint64_t)__s, v167, (uint64_t *)&block);
  result = (unsigned int *)WebCore::CaptionUserPreferencesMediaAF::colorPropertyCSS(&v321, 0x3Du, (WebCore *)&block, v166);
  if ((block & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(block & 0xFFFFFFFFFFFFLL);
    do
    {
      v309 = __ldaxr(result);
      v310 = v309 - 1;
    }
    while (__stlxr(v310, result));
    if (!v310)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v168);
    }
  }
  v170 = v321;
  if (v164 == 0.0)
  {
    v314 = v321;
    goto LABEL_282;
  }
  if (!v321)
  {
    result = (unsigned int *)WTF::tryFastCompactMalloc((WTF *)0x2D);
    v192 = block;
    if ((_QWORD)block)
    {
      *(_QWORD *)block = 0x1900000002;
      qmemcpy((void *)(v192 + 20), "padding: .4em !important;", 25);
      *(_QWORD *)(v192 + 8) = v192 + 20;
      *(_DWORD *)(v192 + 16) = 4;
      v314 = (WTF::StringImpl *)v192;
      goto LABEL_282;
    }
    goto LABEL_549;
  }
  v171 = *((_DWORD *)v321 + 1);
  *(_DWORD *)v321 += 2;
  if (v171 < 0)
    goto LABEL_549;
  v172 = (v171 + 25);
  if (__OFADD__(v171, 25))
    goto LABEL_549;
  if ((*((_BYTE *)v170 + 16) & 4) == 0)
  {
    result = (unsigned int *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v172, 0, (uint64_t)v170, "padding", 7u, ": .4em !important;",
                               0x12u,
                               &v314);
    if (!v314)
      goto LABEL_550;
    goto LABEL_278;
  }
  result = (unsigned int *)WTF::tryFastCompactMalloc((WTF *)(v172 + 20));
  v173 = block;
  if (!(_QWORD)block)
  {
LABEL_549:
    v314 = 0;
LABEL_550:
    __break(0xC471u);
    return result;
  }
  v174 = (_BYTE *)(block + 20);
  *(_DWORD *)block = 2;
  *(_DWORD *)(v173 + 4) = v172;
  *(_QWORD *)(v173 + 8) = v173 + 20;
  *(_DWORD *)(v173 + 16) = 4;
  v168 = (_BYTE *)*((_QWORD *)v170 + 1);
  v169 = *((unsigned int *)v170 + 1);
  if ((*((_BYTE *)v170 + 16) & 4) != 0)
  {
    if ((_DWORD)v169)
    {
      if ((_DWORD)v169 == 1)
        *v174 = *v168;
      else
        memcpy((void *)(v173 + 20), v168, v169);
    }
  }
  else
  {
    if (v169 < 0x10)
    {
      v268 = (unsigned __int128 *)(v173 + 20);
    }
    else
    {
      v268 = (unsigned __int128 *)&v174[v169 & 0xFFFFFFF0];
      v269 = (unsigned __int128 *)(v173 + 20);
      do
      {
        v270 = (unsigned __int128)vld2q_s8(v168);
        v168 += 32;
        *v269++ = v270;
      }
      while (v269 != v268);
    }
    while (v268 != (unsigned __int128 *)&v174[v169])
    {
      v271 = *v168;
      v168 += 2;
      *(_BYTE *)v268 = v271;
      v268 = (unsigned __int128 *)((char *)v268 + 1);
    }
  }
  qmemcpy(&v174[*((unsigned int *)v170 + 1)], "padding: .4em !important;", 25);
  v314 = (WTF::StringImpl *)v173;
LABEL_278:
  v175 = *(_DWORD *)v170 - 2;
  if (*(_DWORD *)v170 == 2)
  {
    WTF::StringImpl::destroy(v170, (WTF::StringImpl *)v168);
    v175 = *(_DWORD *)v170;
  }
  else
  {
    *(_DWORD *)v170 = v175;
  }
  v176 = v175 - 2;
  if (v176)
    *(_DWORD *)v170 = v176;
  else
    WTF::StringImpl::destroy(v170, (WTF::StringImpl *)v168);
LABEL_282:
  if ((*(_QWORD *)__s & 0x8000000000000) != 0)
  {
    v311 = (unsigned int *)(*(_QWORD *)__s & 0xFFFFFFFFFFFFLL);
    do
    {
      v312 = __ldaxr(v311);
      v313 = v312 - 1;
    }
    while (__stlxr(v313, v311));
    if (!v313)
    {
      atomic_store(1u, v311);
      WTF::fastFree((WTF *)v311, v168);
    }
  }
  if (v157)
    CFRelease(v157);
  v325 = 0;
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetWindowRoundedCornerRadius((WebCore *)1, (MACaptionAppearanceDomain)&v325, (MACaptionAppearanceBehavior *)v169);
  if (v177 == 0.0)
  {
    v187 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v187 += 2;
  }
  else
  {
    v321 = 0;
    v322 = 0;
    v323 = 0;
    v324 = 1;
    v178 = " !important;";
    v179 = v325;
    WTF::numberToString();
    v180 = strlen(__s);
    if (v179)
      v178 = ";";
    HIDWORD(v333) = v180;
    if (v179)
      v181 = 1;
    else
      v181 = 12;
    v182 = v322;
    if ((v322 || (v182 = v321) != 0) && (*((_BYTE *)v182 + 16) & 4) == 0)
    {
      v183 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v321);
      if (v183)
      {
        v338 = v330;
        v339 = v331;
        v340 = v332;
        v341 = v333;
        v334 = *(_OWORD *)__s;
        v335 = v327;
        v336 = v328;
        v337 = v329;
        *(_OWORD *)v183 = xmmword_1969F61C0;
        *(_QWORD *)(v183 + 16) = 0x75006900640061;
        *(_WORD *)(v183 + 24) = 115;
        v346 = v338;
        v347 = v339;
        v344 = v336;
        v345 = v337;
        v348 = v340;
        v349 = v341;
        v184 = (char *)(v183 + 28);
        block = v334;
        v343 = v335;
        *(_WORD *)(v183 + 26) = 58;
        v185 = (char *)(v183 + 28 + 2 * HIDWORD(v349));
        if (HIDWORD(v349) >= 0x40)
        {
          v193 = &v184[2 * (HIDWORD(v349) & 0xFFFFFFC0)];
          p_block = (int8x16_t *)&block;
          v194 = 0uLL;
          do
          {
            v355.val[0] = *p_block;
            v195 = p_block[1];
            v363.val[0] = p_block[2];
            v196 = p_block[3];
            p_block += 4;
            v197 = v196;
            v363.val[1] = 0uLL;
            v371.val[0] = v195;
            v355.val[1] = 0uLL;
            v198 = v184;
            vst2q_s8(v198, v355);
            v198 += 32;
            v371.val[1] = 0uLL;
            vst2q_s8(v198, v371);
            v199 = v184 + 64;
            vst2q_s8(v199, v363);
            v200 = v184 + 96;
            vst2q_s8(v200, *(int8x16x2_t *)(&v194 - 1));
            v184 += 128;
          }
          while (v184 != v193);
          v184 = v193;
        }
        else
        {
          p_block = (int8x16_t *)&block;
        }
        while (v184 != v185)
        {
          v201 = p_block->u8[0];
          p_block = (int8x16_t *)((char *)p_block + 1);
          *(_WORD *)v184 = v201;
          v184 += 2;
        }
        *(_DWORD *)v185 = 7864432;
        v202 = v185 + 4;
        v203 = 2 * v181;
        do
        {
          v204 = *(unsigned __int8 *)v178++;
          *v202++ = v204;
          v203 -= 2;
        }
        while (v203);
      }
    }
    else
    {
      v188 = MEMORY[0x19AEA4824](&v321);
      if (v188)
      {
        v346 = v330;
        v347 = v331;
        v348 = v332;
        v349 = v333;
        block = *(_OWORD *)__s;
        v343 = v327;
        v344 = v328;
        v345 = v329;
        qmemcpy((void *)v188, "border-radius:", 14);
        v189 = (_BYTE *)(v188 + 14);
        v190 = HIDWORD(v349);
        if (HIDWORD(v349))
        {
          if (HIDWORD(v349) == 1)
            *v189 = block;
          else
            memcpy((void *)(v188 + 14), &block, HIDWORD(v349));
        }
        *(_WORD *)&v189[v190] = 30832;
        v191 = &v189[v190 + 2];
        if ((_DWORD)v181 == 1)
          *v191 = *v178;
        else
          memcpy(v191, v178, v181);
      }
    }
    v187 = v321;
    if (v321
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v321),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v321),
          (v187 = v321) != 0))
    {
      *(_DWORD *)v187 += 2;
    }
    v205 = v322;
    v322 = 0;
    v206 = v187;
    if (v205)
    {
      if (*(_DWORD *)v205 == 2)
      {
        WTF::StringImpl::destroy(v205, (WTF::StringImpl *)v5);
        v206 = v321;
      }
      else
      {
        *(_DWORD *)v205 -= 2;
        v206 = v187;
      }
    }
    v321 = 0;
    if (v206)
    {
      if (*(_DWORD *)v206 == 2)
        WTF::StringImpl::destroy(v206, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v206 -= 2;
    }
  }
  v207 = v314;
  if (v314 && *((_DWORD *)v314 + 1) || v187 && *((_DWORD *)v187 + 1))
  {
    {
      v208 = WebCore::UserAgentParts::webkitMediaTextTrackDisplayBackdrop(void)::webkitMediaTextTrackDisplayBackdrop;
    }
    else
    {
      WTF::AtomStringImpl::add();
      WebCore::UserAgentParts::webkitMediaTextTrackDisplayBackdrop(void)::webkitMediaTextTrackDisplayBackdrop = block;
      v208 = block;
      v207 = v314;
    }
    v209 = v318;
    if ((v318 || (v209 = v317) != 0) && (*((_BYTE *)v209 + 16) & 4) == 0
      || v208 && (*(_BYTE *)(v208 + 16) & 4) == 0
      || v207 && (*((_BYTE *)v207 + 16) & 4) == 0
      || v187 && (*((_BYTE *)v187 + 16) & 4) == 0)
    {
      v210 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v317);
      if (v210)
      {
        *(_DWORD *)v210 = 3801120;
        *(_WORD *)(v210 + 4) = 58;
        v211 = (_WORD *)(v210 + 6);
        if (v208)
        {
          v5 = *(_OWORD **)(v208 + 8);
          v212 = *(unsigned int *)(v208 + 4);
          if ((*(_BYTE *)(v208 + 16) & 4) != 0)
          {
            v213 = (char *)&v211[v212];
            if (v212 >= 0x40)
            {
              v214 = (char *)&v211[v212 & 0xFFFFFFC0];
              v227 = 0uLL;
              v228 = (char *)(v210 + 6);
              do
              {
                v356.val[0] = (int8x16_t)*v5;
                v229 = *((int8x16_t *)v5 + 1);
                v364.val[0] = (int8x16_t)v5[2];
                v230 = v5[3];
                v5 += 4;
                v231 = v230;
                v364.val[1] = 0uLL;
                v372.val[0] = v229;
                v356.val[1] = 0uLL;
                v232 = v228;
                vst2q_s8(v232, v356);
                v232 += 32;
                v372.val[1] = 0uLL;
                vst2q_s8(v232, v372);
                v233 = v228 + 64;
                vst2q_s8(v233, v364);
                v234 = v228 + 96;
                vst2q_s8(v234, *(int8x16x2_t *)(&v227 - 1));
                v228 += 128;
              }
              while (v228 != v214);
            }
            else
            {
              v214 = (char *)(v210 + 6);
            }
            while (v214 != v213)
            {
              v235 = *(unsigned __int8 *)v5;
              v5 = (_OWORD *)((char *)v5 + 1);
              *(_WORD *)v214 = v235;
              v214 += 2;
            }
          }
          else if ((_DWORD)v212 == 1)
          {
            *v211 = *(_WORD *)v5;
          }
          else if ((_DWORD)v212)
          {
            memcpy((void *)(v210 + 6), v5, 2 * v212);
          }
          v226 = *(unsigned int *)(v208 + 4);
        }
        else
        {
          v226 = 0;
        }
        v236 = &v211[v226];
        *v236 = 123;
        v237 = (char *)(v236 + 1);
        if (v207)
        {
          v5 = (_OWORD *)*((_QWORD *)v207 + 1);
          v238 = *((unsigned int *)v207 + 1);
          if ((*((_BYTE *)v207 + 16) & 4) != 0)
          {
            v239 = &v237[2 * v238];
            if (v238 >= 0x40)
            {
              v240 = &v237[2 * (v238 & 0xFFFFFFC0)];
              v242 = 0uLL;
              v243 = v237;
              do
              {
                v357.val[0] = (int8x16_t)*v5;
                v244 = *((int8x16_t *)v5 + 1);
                v365.val[0] = (int8x16_t)v5[2];
                v245 = v5[3];
                v5 += 4;
                v246 = v245;
                v365.val[1] = 0uLL;
                v373.val[0] = v244;
                v357.val[1] = 0uLL;
                v247 = v243;
                vst2q_s8(v247, v357);
                v247 += 32;
                v373.val[1] = 0uLL;
                vst2q_s8(v247, v373);
                v248 = v243 + 64;
                vst2q_s8(v248, v365);
                v249 = v243 + 96;
                vst2q_s8(v249, *(int8x16x2_t *)(&v242 - 1));
                v243 += 128;
              }
              while (v243 != v240);
            }
            else
            {
              v240 = v237;
            }
            while (v240 != v239)
            {
              v250 = *(unsigned __int8 *)v5;
              v5 = (_OWORD *)((char *)v5 + 1);
              *(_WORD *)v240 = v250;
              v240 += 2;
            }
          }
          else if ((_DWORD)v238 == 1)
          {
            *(_WORD *)v237 = *(_WORD *)v5;
          }
          else if ((_DWORD)v238)
          {
            memcpy(v237, v5, 2 * v238);
          }
          v241 = *((unsigned int *)v207 + 1);
        }
        else
        {
          v241 = 0;
        }
        v251 = &v237[2 * v241];
        if (v187)
        {
          v5 = (_OWORD *)*((_QWORD *)v187 + 1);
          v252 = *((unsigned int *)v187 + 1);
          if ((*((_BYTE *)v187 + 16) & 4) != 0)
          {
            v253 = &v251[2 * v252];
            if (v252 >= 0x40)
            {
              v254 = &v251[2 * (v252 & 0xFFFFFFC0)];
              v256 = 0uLL;
              v257 = v251;
              do
              {
                v358.val[0] = (int8x16_t)*v5;
                v258 = *((int8x16_t *)v5 + 1);
                v366.val[0] = (int8x16_t)v5[2];
                v259 = v5[3];
                v5 += 4;
                v260 = v259;
                v366.val[1] = 0uLL;
                v374.val[0] = v258;
                v358.val[1] = 0uLL;
                v261 = v257;
                vst2q_s8(v261, v358);
                v261 += 32;
                v374.val[1] = 0uLL;
                vst2q_s8(v261, v374);
                v262 = v257 + 64;
                vst2q_s8(v262, v366);
                v263 = v257 + 96;
                vst2q_s8(v263, *(int8x16x2_t *)(&v256 - 1));
                v257 += 128;
              }
              while (v257 != v254);
            }
            else
            {
              v254 = v251;
            }
            while (v254 != v253)
            {
              v264 = *(unsigned __int8 *)v5;
              v5 = (_OWORD *)((char *)v5 + 1);
              *(_WORD *)v254 = v264;
              v254 += 2;
            }
          }
          else if ((_DWORD)v252 == 1)
          {
            *(_WORD *)v251 = *(_WORD *)v5;
          }
          else if ((_DWORD)v252)
          {
            memcpy(v251, v5, 2 * v252);
          }
          v255 = *((unsigned int *)v187 + 1);
        }
        else
        {
          v255 = 0;
        }
        *(_WORD *)&v251[2 * v255] = 125;
      }
    }
    else
    {
      v215 = MEMORY[0x19AEA4824](&v317);
      if (v215)
      {
        *(_BYTE *)(v215 + 2) = 58;
        *(_WORD *)v215 = 14880;
        v216 = (_BYTE *)(v215 + 3);
        if (v208)
        {
          v5 = *(_OWORD **)(v208 + 8);
          v217 = *(unsigned int *)(v208 + 4);
          if ((*(_BYTE *)(v208 + 16) & 4) != 0)
          {
            if ((_DWORD)v217)
            {
              if ((_DWORD)v217 == 1)
                *v216 = *(_BYTE *)v5;
              else
                memcpy((void *)(v215 + 3), v5, v217);
            }
          }
          else
          {
            if (v217 < 0x10)
            {
              v272 = (unsigned __int128 *)(v215 + 3);
            }
            else
            {
              v272 = (unsigned __int128 *)&v216[v217 & 0xFFFFFFF0];
              v273 = (unsigned __int128 *)(v215 + 3);
              do
              {
                v274 = (unsigned __int128)vld2q_s8((const char *)v5);
                v5 += 2;
                *v273++ = v274;
              }
              while (v273 != v272);
            }
            while (v272 != (unsigned __int128 *)&v216[v217])
            {
              v281 = *(_BYTE *)v5;
              v5 = (_OWORD *)((char *)v5 + 2);
              *(_BYTE *)v272 = v281;
              v272 = (unsigned __int128 *)((char *)v272 + 1);
            }
          }
          v218 = *(unsigned int *)(v208 + 4);
        }
        else
        {
          v218 = 0;
        }
        v219 = &v216[v218];
        *v219 = 123;
        v220 = v219 + 1;
        if (v207)
        {
          v5 = (_OWORD *)*((_QWORD *)v207 + 1);
          v221 = *((unsigned int *)v207 + 1);
          if ((*((_BYTE *)v207 + 16) & 4) != 0)
          {
            if ((_DWORD)v221)
            {
              if ((_DWORD)v221 == 1)
                *v220 = *(_BYTE *)v5;
              else
                memcpy(v220, v5, v221);
            }
          }
          else
          {
            if (v221 < 0x10)
            {
              v275 = (unsigned __int128 *)v220;
            }
            else
            {
              v275 = (unsigned __int128 *)&v220[v221 & 0xFFFFFFF0];
              v276 = (unsigned __int128 *)v220;
              do
              {
                v277 = (unsigned __int128)vld2q_s8((const char *)v5);
                v5 += 2;
                *v276++ = v277;
              }
              while (v276 != v275);
            }
            while (v275 != (unsigned __int128 *)&v220[v221])
            {
              v282 = *(_BYTE *)v5;
              v5 = (_OWORD *)((char *)v5 + 2);
              *(_BYTE *)v275 = v282;
              v275 = (unsigned __int128 *)((char *)v275 + 1);
            }
          }
          v222 = *((unsigned int *)v207 + 1);
        }
        else
        {
          v222 = 0;
        }
        v223 = &v220[v222];
        if (v187)
        {
          v5 = (_OWORD *)*((_QWORD *)v187 + 1);
          v224 = *((unsigned int *)v187 + 1);
          if ((*((_BYTE *)v187 + 16) & 4) != 0)
          {
            if ((_DWORD)v224)
            {
              if ((_DWORD)v224 == 1)
                *v223 = *(_BYTE *)v5;
              else
                memcpy(v223, v5, v224);
            }
          }
          else
          {
            if (v224 < 0x10)
            {
              v278 = (unsigned __int128 *)v223;
            }
            else
            {
              v278 = (unsigned __int128 *)&v223[v224 & 0xFFFFFFF0];
              v279 = (unsigned __int128 *)v223;
              do
              {
                v280 = (unsigned __int128)vld2q_s8((const char *)v5);
                v5 += 2;
                *v279++ = v280;
              }
              while (v279 != v278);
            }
            while (v278 != (unsigned __int128 *)&v223[v224])
            {
              v283 = *(_BYTE *)v5;
              v5 = (_OWORD *)((char *)v5 + 2);
              *(_BYTE *)v278 = v283;
              v278 = (unsigned __int128 *)((char *)v278 + 1);
            }
          }
          v225 = *((unsigned int *)v187 + 1);
        }
        else
        {
          v225 = 0;
        }
        v223[v225] = 125;
      }
    }
  }
  v265 = v317;
  if (v317
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v317),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v317),
        (v265 = v317) != 0))
  {
    *(_DWORD *)v265 += 2;
  }
  *a2 = v265;
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
      WTF::StringImpl::destroy(v187, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v187 -= 2;
  }
  v266 = v314;
  v314 = 0;
  if (v266)
  {
    if (*(_DWORD *)v266 == 2)
      WTF::StringImpl::destroy(v266, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v266 -= 2;
  }
  if (!v315)
  {
LABEL_425:
    if (v45)
      goto LABEL_426;
    goto LABEL_428;
  }
  if (*(_DWORD *)v315 != 2)
  {
    *(_DWORD *)v315 -= 2;
    goto LABEL_425;
  }
  WTF::StringImpl::destroy(v315, (WTF::StringImpl *)v5);
  if (v45)
  {
LABEL_426:
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v45, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v45 -= 2;
  }
LABEL_428:
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v27, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (v316)
  {
    if (*(_DWORD *)v316 == 2)
      WTF::StringImpl::destroy(v316, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v316 -= 2;
  }
  v267 = v318;
  v318 = 0;
  if (v267)
  {
    if (*(_DWORD *)v267 == 2)
      WTF::StringImpl::destroy(v267, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v267 -= 2;
  }
LABEL_437:
  result = (unsigned int *)v317;
  v317 = 0;
  if (result)
  {
    if (*result == 2)
      return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v5);
    else
      *result -= 2;
  }
  return result;
}

void WebCore::CaptionUserPreferencesMediaAF::displayNameForTrack(WebCore::AudioTrack *a1@<X1>, WebCore *a2@<X8>)
{
  WebCore::trackDisplayName(a2, a1);
}

void WebCore::trackDisplayName(WebCore *this, const WebCore::TrackBase *a2)
{
  const WebCore::TrackBase *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  int v10;
  int v11;
  WTF *v12;
  WTF::StringImpl *v13;
  const __CFAllocator *v14;
  const __CFLocale *v15;
  CFLocaleIdentifier v16;
  const __CFString *CanonicalLocaleIdentifierFromString;
  CFStringRef v18;
  WTF::StringImpl *v19;
  __CFString *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF *v23;
  const __CFString *v24;
  CFStringRef v25;
  WTF::StringImpl *v26;
  CFStringRef v27;
  __CFString *v28;
  WTF::StringImpl *v29;
  CFStringRef v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  CFLocaleIdentifier v34;
  WTF::StringImpl *v35;
  int v36;
  CFStringRef v37;
  WTF::StringImpl *v38;
  int v39;
  __CFString *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  CFStringRef v47;
  int v48;
  CFLocaleIdentifier v49;
  uint64_t v50;
  WTF::StringImpl *isa;
  WTF *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  CFStringRef value;
  CFLocaleIdentifier localeIdentifier;
  uint64_t v57;
  char v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  int v62;
  unsigned int v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  __CFString *v66;

  v4 = (const WebCore::TrackBase *)WebCore::TextTrack::captionMenuOffItem(this);
  if (v4 == a2)
  {
    WebCore::textTrackOffMenuItemText((uint64_t)this);
    return;
  }
  if ((const WebCore::TrackBase *)WebCore::TextTrack::captionMenuAutomaticItem(v4) == a2)
  {
    WebCore::textTrackAutomaticMenuItemText((uint64_t)this);
    return;
  }
  v66 = 0;
  v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
  if (v6)
  {
    v7 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 4;
    v65 = v6;
    v8 = v7 + 2;
    if (v8)
      *(_DWORD *)v6 = v8;
    else
      WTF::StringImpl::destroy(v6, v5);
  }
  else
  {
    v65 = 0;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
  if (v9)
  {
    v10 = *(_DWORD *)v9;
    *(_DWORD *)v9 += 4;
    v64 = v9;
    v11 = v10 + 2;
    if (v11)
      *(_DWORD *)v9 = v11;
    else
      WTF::StringImpl::destroy(v9, v5);
  }
  else
  {
    v64 = 0;
  }
  WTF::userPreferredLanguages();
  if (v63)
    v12 = v61;
  else
    v12 = (WTF *)MEMORY[0x1E0CBF738];
  v13 = *(WTF::StringImpl **)v12;
  if (v13)
    *(_DWORD *)v13 += 2;
  v60 = v13;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  WTF::String::createCFString((WTF::String *)&v60);
  v15 = CFLocaleCreate(v14, localeIdentifier);
  v16 = localeIdentifier;
  localeIdentifier = 0;
  if (v16)
    CFRelease(v16);
  WTF::String::createCFString((WTF::String *)&v64);
  CanonicalLocaleIdentifierFromString = CFLocaleCreateCanonicalLocaleIdentifierFromString(v14, localeIdentifier);
  localeIdentifier = 0;
  v18 = CFLocaleCopyDisplayNameForPropertyValue(v15, (CFLocaleKey)*MEMORY[0x1E0C9B088], CanonicalLocaleIdentifierFromString);
  MEMORY[0x19AEA5508](&v59, v18);
  if (v18)
    CFRelease(v18);
  v58 = 0;
  v19 = v60;
  if (v60)
    *(_DWORD *)v60 += 2;
  v20 = (__CFString *)WTF::fastMalloc((WTF *)8);
  v57 = 1;
  localeIdentifier = v20;
  if (v19)
    *(_DWORD *)v19 += 2;
  v20->isa = v19;
  HIDWORD(v57) = 1;
  v22 = WTF::indexOfBestMatchingLanguageInList();
  v49 = localeIdentifier;
  v50 = 8;
  do
  {
    isa = (WTF::StringImpl *)v49->isa;
    v49->isa = 0;
    if (isa)
    {
      if (*(_DWORD *)isa == 2)
        WTF::StringImpl::destroy(isa, v21);
      else
        *(_DWORD *)isa -= 2;
    }
    v49 = (CFLocaleIdentifier)((char *)v49 + 8);
    v50 -= 8;
  }
  while (v50);
  v23 = (WTF *)localeIdentifier;
  if (localeIdentifier)
  {
    localeIdentifier = 0;
    LODWORD(v57) = 0;
    WTF::fastFree(v23, v21);
    if (!v19)
      goto LABEL_27;
  }
  else if (!v19)
  {
    goto LABEL_27;
  }
  if (*(_DWORD *)v19 == 2)
    WTF::StringImpl::destroy(v19, v21);
  else
    *(_DWORD *)v19 -= 2;
LABEL_27:
  if (v65 && *((_DWORD *)v65 + 1) && (!v22 || v59 && *((_DWORD *)v59 + 1) && WTF::StringImpl::find() != -1))
  {
    WebCore::addTrackKindDisplayNameIfNeeded((WebCore **)&localeIdentifier, a2, (const WTF::String *)&v65);
    v34 = localeIdentifier;
    localeIdentifier = 0;
    v35 = (WTF::StringImpl *)v66;
    v66 = (__CFString *)v34;
    if (!v35)
      goto LABEL_61;
    v36 = *(_DWORD *)v35 - 2;
    if (*(_DWORD *)v35 != 2)
    {
LABEL_60:
      *(_DWORD *)v35 = v36;
      goto LABEL_61;
    }
    goto LABEL_47;
  }
  v24 = (const __CFString *)*MEMORY[0x1E0C9B080];
  WTF::String::createCFString((WTF::String *)&v64);
  v25 = CFLocaleCopyDisplayNameForPropertyValue(v15, v24, value);
  MEMORY[0x19AEA5508](&localeIdentifier, v25);
  if (v25)
    CFRelease(v25);
  v27 = value;
  value = 0;
  if (v27)
    CFRelease(v27);
  v28 = (__CFString *)localeIdentifier;
  if (localeIdentifier && HIDWORD(localeIdentifier->isa) || (v28 = (__CFString *)v59) != 0 && *((_DWORD *)v59 + 1))
  {
    LODWORD(v28->isa) += 2;
    v31 = (WTF::StringImpl *)v66;
    v66 = v28;
    if (!v31)
      goto LABEL_54;
  }
  else
  {
    MEMORY[0x19AEA5508](&value, CanonicalLocaleIdentifierFromString);
    v30 = value;
    value = 0;
    v31 = (WTF::StringImpl *)v66;
    v66 = (__CFString *)v30;
    if (!v31)
      goto LABEL_54;
    v32 = *(_DWORD *)v31 - 2;
    if (*(_DWORD *)v31 != 2)
      goto LABEL_53;
    WTF::StringImpl::destroy(v31, v29);
    v31 = (WTF::StringImpl *)value;
    value = 0;
    if (!v31)
      goto LABEL_54;
  }
  v32 = *(_DWORD *)v31 - 2;
  if (*(_DWORD *)v31 != 2)
  {
LABEL_53:
    *(_DWORD *)v31 = v32;
    goto LABEL_54;
  }
  WTF::StringImpl::destroy(v31, v26);
LABEL_54:
  WebCore::addTrackKindDisplayNameIfNeeded((WebCore **)&value, a2, (const WTF::String *)&v66);
  v37 = value;
  value = 0;
  v38 = (WTF::StringImpl *)v66;
  v66 = (__CFString *)v37;
  if (!v38)
    goto LABEL_57;
  v39 = *(_DWORD *)v38 - 2;
  if (*(_DWORD *)v38 != 2)
    goto LABEL_56;
  WTF::StringImpl::destroy(v38, v33);
  v38 = (WTF::StringImpl *)value;
  value = 0;
  if (v38)
  {
    v39 = *(_DWORD *)v38 - 2;
    if (*(_DWORD *)v38 != 2)
    {
LABEL_56:
      *(_DWORD *)v38 = v39;
      goto LABEL_57;
    }
    WTF::StringImpl::destroy(v38, v33);
  }
LABEL_57:
  if (v65 && *((_DWORD *)v65 + 1) && (!v66 || WTF::StringImpl::find() == -1))
  {
    WebCore::addTrackLabelAsSuffix((WebCore *)&v66, (const WTF::String *)&v65, (uint64_t)&value);
    v47 = value;
    value = 0;
    v35 = (WTF::StringImpl *)v66;
    v66 = (__CFString *)v47;
    if (v35)
    {
      v48 = *(_DWORD *)v35 - 2;
      if (*(_DWORD *)v35 != 2)
      {
LABEL_93:
        *(_DWORD *)v35 = v48;
        goto LABEL_58;
      }
      WTF::StringImpl::destroy(v35, v33);
      v35 = (WTF::StringImpl *)value;
      value = 0;
      if (v35)
      {
        v48 = *(_DWORD *)v35 - 2;
        if (*(_DWORD *)v35 == 2)
        {
LABEL_47:
          WTF::StringImpl::destroy(v35, v33);
          goto LABEL_58;
        }
        goto LABEL_93;
      }
    }
  }
LABEL_58:
  v35 = (WTF::StringImpl *)localeIdentifier;
  localeIdentifier = 0;
  if (v35)
  {
    v36 = *(_DWORD *)v35 - 2;
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::destroy(v35, v33);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
LABEL_61:
  v40 = v66;
  if (v66 && HIDWORD(v66->isa))
  {
    v66 = 0;
    *(_QWORD *)this = v40;
  }
  else
  {
    WebCore::trackNoLabelText((uint64_t)this);
  }
  v41 = v59;
  v59 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::destroy(v41, v33);
      if (!CanonicalLocaleIdentifierFromString)
        goto LABEL_68;
      goto LABEL_67;
    }
    *(_DWORD *)v41 -= 2;
  }
  if (CanonicalLocaleIdentifierFromString)
LABEL_67:
    CFRelease(CanonicalLocaleIdentifierFromString);
LABEL_68:
  if (v15)
    CFRelease(v15);
  v42 = v60;
  v60 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v33);
    else
      *(_DWORD *)v42 -= 2;
  }
  if (v63)
  {
    v52 = v61;
    v53 = 8 * v63;
    do
    {
      v54 = *(WTF::StringImpl **)v52;
      *(_QWORD *)v52 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v33);
        else
          *(_DWORD *)v54 -= 2;
      }
      v52 = (WTF *)((char *)v52 + 8);
      v53 -= 8;
    }
    while (v53);
  }
  v43 = v61;
  if (v61)
  {
    v61 = 0;
    v62 = 0;
    WTF::fastFree(v43, v33);
  }
  v44 = v64;
  v64 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v33);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = v65;
  v65 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v33);
    else
      *(_DWORD *)v45 -= 2;
  }
  v46 = (WTF::StringImpl *)v66;
  v66 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v33);
    else
      *(_DWORD *)v46 -= 2;
  }
}

void WebCore::CaptionUserPreferencesMediaAF::displayNameForTrack(WebCore::TextTrack *a1@<X1>, WebCore *a2@<X8>)
{
  WebCore::trackDisplayName(a2, a1);
}

void WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20[3];
  WTF::StringImpl *v21;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *((unsigned int *)a1 + 17);
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*((_QWORD *)a1 + 7) + 8 * v6);
      if (*(_DWORD *)(v8 + 40) != 2)
      {
LABEL_35:
        __break(0xC471u);
        JUMPOUT(0x196075B74);
      }
      v9 = v6;
      v10 = *(WTF::StringImpl **)(v8 + 80);
      if (v10)
        *(_DWORD *)v10 += 2;
      v21 = v10;
      WTF::displayNameForLanguageLocale((WTF *)&v21, a1);
      v11 = v21;
      v21 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a1);
        else
          *(_DWORD *)v11 -= 2;
      }
      if (v6 == *(_DWORD *)(a2 + 8))
      {
        ++v6;
        v12 = v9 + (v9 >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= v6)
          v14 = v9 + 1;
        else
          v14 = v13;
        if (v14 >> 29)
          goto LABEL_35;
        v15 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
        *(_DWORD *)(a2 + 8) = v14;
        *(_QWORD *)a2 = v15;
        memcpy(v15, v7, 8 * v9);
        if (v7)
        {
          if (v15 == v7)
          {
            v15 = 0;
            *(_QWORD *)a2 = 0;
            *(_DWORD *)(a2 + 8) = 0;
          }
          WTF::fastFree((WTF *)v7, a1);
        }
        ++*(_DWORD *)(v8 + 16);
        v7 = v15;
      }
      else
      {
        ++*(_DWORD *)(v8 + 16);
        ++v6;
      }
      *((_QWORD *)v7 + v9) = v8;
      *(_DWORD *)(a2 + 12) = v6;
      v16 = v20[0];
      v20[0] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, a1);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
    while (v6 != v3);
    v17 = *(_QWORD *)a2;
  }
  else
  {
    v17 = 0;
  }
  MEMORY[0x19AEA5694](v20, 0, 0);
  v21 = (WTF::StringImpl *)v20;
  v18 = 126 - 2 * __clz(v3);
  if ((_DWORD)v3)
    v19 = v18;
  else
    v19 = 0;
  std::__introsort<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *,false>(v17, (const WebCore::TrackBase **)(v17 + 8 * v3), (uint64_t *)&v21, v19, 1);
  WTF::Collator::~Collator((WTF::Collator *)v20);
}

WTF::StringImpl **WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _DWORD *a4@<X8>)
{
  int v7;
  int v8;
  const WTF::String *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  const WTF::StringImpl *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl **v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  int v65;
  WTF *v66;
  int v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  const WTF::StringImpl *v89;
  WTF::StringImpl **v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  WTF::StringImpl **v94;
  int v95;
  uint64_t v96;
  int v97;
  WTF *v98;
  const WTF::StringImpl *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  WTF::StringImpl *v104;
  uint64_t *v105;
  uint64_t *v106;
  WebCore::TextTrack *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  size_t v113;
  void *v114;
  WebCore::TextTrack *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  WTF::StringImpl **result;
  int v126;
  WTF::StringImpl **i;
  int v128;
  WTF::StringImpl **j;
  int v130;
  int v131;
  int v132;
  int v133;
  _BOOL4 v134;
  _QWORD *v135;
  WTF::StringImpl *v137[3];
  WTF::StringImpl *v138;
  WTF::StringImpl **v139;

  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v139 = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_DWORD *)(v10 - 8);
    v12 = v11 & 0x4636B9C9;
    v13 = *(_DWORD *)(v10 + 4 * (v11 & 0x4636B9C9));
    if (!v13)
      goto LABEL_14;
    v14 = 1;
    while (v13 != 0x7FFFFFFF)
    {
      v12 = (v12 + v14) & v11;
      v13 = *(_DWORD *)(v10 + 4 * v12);
      ++v14;
      if (!v13)
        goto LABEL_14;
    }
    v15 = v11 & 0x62BAF5A0;
    v16 = *(_DWORD *)(v10 + 4 * (v11 & 0x62BAF5A0));
    if (v16 == 1)
      goto LABEL_14;
    v17 = 1;
    while (v16 != 0x7FFFFFFF)
    {
      v15 = (v15 + v17) & v11;
      v16 = *(_DWORD *)(v10 + 4 * v15);
      ++v17;
      if (v16 == 1)
        goto LABEL_14;
    }
    v18 = v11 & 0xFF4D1170;
    v19 = *(_DWORD *)(v10 + 4 * (v11 & 0xFF4D1170));
    if (v19 == 2)
    {
LABEL_14:
      v134 = 1;
    }
    else
    {
      v126 = 1;
      do
      {
        v134 = v19 != 0x7FFFFFFF;
        if (v19 == 0x7FFFFFFF)
          break;
        v18 = (v18 + v126) & v11;
        v19 = *(_DWORD *)(v10 + 4 * v18);
        ++v126;
      }
      while (v19 != 2);
    }
  }
  else
  {
    v134 = 0;
  }
  v20 = *(_DWORD *)(a2 + 124) + *(_DWORD *)(a2 + 108);
  v21 = *(_DWORD *)(a2 + 68);
  v22 = (v20 + v21);
  v135 = a3;
  if (v20 + v21)
  {
    v130 = v8;
    v132 = v7;
    v23 = 0;
    v24 = 0;
    LODWORD(v25) = 0;
    v26 = 0;
    while (1)
    {
      v27 = *(unsigned int *)(a2 + 124);
      if (v23 >= v27)
      {
        v29 = v23 - v27;
        v30 = *(_DWORD *)(a2 + 108);
        v31 = v29 >= v30;
        v32 = v29 - v30;
        if (v31)
        {
          if (*(_DWORD *)(a2 + 68) <= v32)
          {
            v28 = 0;
          }
          else
          {
            v28 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v32);
            if (v28 && *(_DWORD *)(v28 + 40) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1960767B4);
            }
          }
        }
        else
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8 * v29);
          if (v28 && *(_DWORD *)(v28 + 40) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x196076754);
          }
        }
      }
      else
      {
        v28 = *(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v23);
        if (v28 && *(_DWORD *)(v28 + 40) != 1)
          goto LABEL_235;
      }
      v33 = *a3;
      if (*a3)
        break;
LABEL_108:
      if (++v23 == v22)
        goto LABEL_134;
    }
    v34 = *(_DWORD *)(v28 + 228);
    v35 = *(_DWORD *)(v33 - 8);
    v36 = 9 * ((v34 + ~(v34 << 15)) ^ ((v34 + ~(v34 << 15)) >> 10));
    v37 = (v36 ^ (v36 >> 6)) + ~((v36 ^ (v36 >> 6)) << 11);
    v38 = v35 & (v37 ^ HIWORD(v37));
    v39 = *(_DWORD *)(v33 + 4 * v38);
    if (v39 != v34)
    {
      v40 = 1;
      while (v39 != 0x7FFFFFFF)
      {
        v38 = (v38 + v40) & v35;
        v39 = *(_DWORD *)(v33 + 4 * v38);
        ++v40;
        if (v39 == v34)
          goto LABEL_35;
      }
      goto LABEL_108;
    }
LABEL_35:
    v41 = *(WTF::StringImpl **)(v28 + 80);
    if (v41)
      *(_DWORD *)v41 += 2;
    v137[0] = v41;
    WTF::displayNameForLanguageLocale((WTF *)v137, v9);
    v42 = v137[0];
    v137[0] = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v9);
      else
        *(_DWORD *)v42 -= 2;
    }
    if (v7 == 3)
    {
      v43 = v26;
      if (v26 == (_DWORD)v25)
      {
        v44 = v26 + ((unint64_t)v26 >> 2);
        if (v44 >= 0x10)
          v45 = v44 + 1;
        else
          v45 = 16;
        if (v45 <= (unint64_t)v26 + 1)
          v25 = v26 + 1;
        else
          v25 = v45;
        if (v25 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1960767C4);
        }
        v46 = (char *)WTF::fastMalloc((WTF *)(8 * v25));
        a4[2] = v25;
        *(_QWORD *)a4 = v46;
        memcpy(v46, v24, 8 * v26);
        if (v24)
        {
          if (v46 == v24)
          {
            v46 = 0;
            LODWORD(v25) = 0;
            *(_QWORD *)a4 = 0;
            a4[2] = 0;
          }
          WTF::fastFree((WTF *)v24, v9);
        }
        ++*(_DWORD *)(v28 + 16);
        v47 = &v46[8 * v26];
        v24 = v46;
LABEL_54:
        a3 = v135;
        v7 = v132;
LABEL_104:
        ++v26;
        *(_QWORD *)v47 = v28;
        a4[3] = v26;
        goto LABEL_105;
      }
      goto LABEL_84;
    }
    if (!v134)
      goto LABEL_86;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 152))(v28) & 1) != 0)
      goto LABEL_105;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 168))(v28))
    {
      if (v138 && *((_DWORD *)v138 + 1))
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v139, &v138, v48, (uint64_t)v137);
      v43 = v26;
      if (v26 == (_DWORD)v25)
      {
        v49 = v26 + ((unint64_t)v26 >> 2);
        if (v49 >= 0x10)
          v50 = v49 + 1;
        else
          v50 = 16;
        if (v50 <= (unint64_t)v26 + 1)
          v25 = v26 + 1;
        else
          v25 = v50;
        if (v25 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1960767CCLL);
        }
LABEL_79:
        v53 = (char *)WTF::fastMalloc((WTF *)(8 * v25));
        a4[2] = v25;
        *(_QWORD *)a4 = v53;
        memcpy(v53, v24, 8 * v43);
        if (v24)
        {
          if (v53 == v24)
          {
            v53 = 0;
            LODWORD(v25) = 0;
            *(_QWORD *)a4 = 0;
            a4[2] = 0;
          }
          WTF::fastFree((WTF *)v24, v9);
        }
        ++*(_DWORD *)(v28 + 16);
        v47 = &v53[8 * v43];
        v24 = v53;
        goto LABEL_54;
      }
      goto LABEL_84;
    }
    if (*(_DWORD *)(v28 + 224) == 2)
    {
      if (v138 && *((_DWORD *)v138 + 1))
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v139, &v138, v48, (uint64_t)v137);
      v43 = v26;
      if (v26 == (_DWORD)v25)
      {
        v51 = v26 + ((unint64_t)v26 >> 2);
        if (v51 >= 0x10)
          v52 = v51 + 1;
        else
          v52 = 16;
        if (v52 <= (unint64_t)v26 + 1)
          v25 = v26 + 1;
        else
          v25 = v52;
        if (v25 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1960767D4);
        }
        goto LABEL_79;
      }
LABEL_84:
      v47 = &v24[8 * v43];
      goto LABEL_102;
    }
    if (!v138)
    {
LABEL_86:
      if (v26 == (_DWORD)v25)
      {
        v54 = v26 + ((unint64_t)v26 >> 2);
        if (v54 >= 0x10)
          v55 = v54 + 1;
        else
          v55 = 16;
        if (v55 <= (unint64_t)v26 + 1)
          v25 = v26 + 1;
        else
          v25 = v55;
        if (v25 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1960767DCLL);
        }
        v56 = (char *)WTF::fastMalloc((WTF *)(8 * v25));
        a4[2] = v25;
        *(_QWORD *)a4 = v56;
        memcpy(v56, v24, 8 * v26);
        if (v24)
        {
          if (v56 == v24)
          {
            v56 = 0;
            LODWORD(v25) = 0;
            *(_QWORD *)a4 = 0;
            a4[2] = 0;
          }
          WTF::fastFree((WTF *)v24, v9);
        }
        v24 = v56;
        v7 = v132;
        if (v28)
          ++*(_DWORD *)(v28 + 16);
        v47 = &v24[8 * v26];
        goto LABEL_103;
      }
      v47 = &v24[8 * v26];
      if (!v28)
      {
LABEL_103:
        a3 = v135;
        goto LABEL_104;
      }
LABEL_102:
      ++*(_DWORD *)(v28 + 16);
      goto LABEL_103;
    }
    if (*((_DWORD *)v138 + 1) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 160))(v28))
    {
      v58 = *(_DWORD *)(v28 + 228);
      if (v130)
      {
        if (v58 == 1)
          goto LABEL_119;
      }
      else if (v58 != 1)
      {
        v59 = v139;
        if (v139)
        {
          v60 = *((unsigned int *)v139 - 2);
          v61 = *((_DWORD *)v138 + 4);
          if (v61 < 0x100)
          {
            v63 = v139;
            v62 = WTF::StringImpl::hashSlowCase(v138);
            v59 = v63;
          }
          else
          {
            v62 = v61 >> 8;
          }
          v128 = 0;
          for (i = v59; ; v59 = i)
          {
            v64 = v60;
            v65 = v62 & v60;
            v66 = v59[v65];
            if (!v66)
              break;
            if (v66 != (WTF *)-1 && (WTF::equal(v66, v138, v48) & 1) != 0)
              goto LABEL_123;
            v62 = ++v128 + v65;
            v60 = v64;
          }
        }
        goto LABEL_119;
      }
LABEL_123:
      a3 = v135;
      v7 = v132;
LABEL_105:
      v57 = v138;
      v138 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v9);
        else
          *(_DWORD *)v57 -= 2;
      }
      goto LABEL_108;
    }
LABEL_119:
    v7 = v132;
    if (v138 && *((_DWORD *)v138 + 1))
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v139, &v138, v48, (uint64_t)v137);
    goto LABEL_86;
  }
  v26 = 0;
LABEL_134:
  if (v134)
  {
    v67 = *(_DWORD *)(a2 + 124) + *(_DWORD *)(a2 + 108);
    v68 = *(_DWORD *)(a2 + 68);
    v69 = (v67 + v68);
    if (v67 + v68)
    {
      v70 = 0;
      v71 = *(char **)a4;
      v133 = a4[2];
      while (1)
      {
        v72 = *(unsigned int *)(a2 + 124);
        if (v70 >= v72)
        {
          v74 = v70 - v72;
          v75 = *(_DWORD *)(a2 + 108);
          v31 = v74 >= v75;
          v76 = v74 - v75;
          if (v31)
          {
            v73 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v76);
            if (*(_DWORD *)(v73 + 40) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x196076794);
            }
          }
          else
          {
            v73 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8 * v74);
            if (*(_DWORD *)(v73 + 40) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x196076774);
            }
          }
        }
        else
        {
          v73 = *(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v70);
          if (*(_DWORD *)(v73 + 40) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x196076734);
          }
        }
        v77 = *(WTF::StringImpl **)(v73 + 72);
        if (v77)
          *(_DWORD *)v77 += 2;
        v137[0] = v77;
        WTF::displayNameForLanguageLocale((WTF *)v137, v9);
        v78 = v137[0];
        v137[0] = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
            WTF::StringImpl::destroy(v78, v9);
          else
            *(_DWORD *)v78 -= 2;
        }
        v79 = v26;
        if (v26)
        {
          v80 = 0;
          while (*(_QWORD *)&v71[v80] != v73)
          {
            v80 += 8;
            if (8 * v26 == v80)
              goto LABEL_153;
          }
          goto LABEL_187;
        }
LABEL_153:
        v81 = *a3;
        if (!*a3)
          goto LABEL_187;
        v82 = *(_DWORD *)(v73 + 228);
        v83 = *(_DWORD *)(v81 - 8);
        v84 = 9 * ((v82 + ~(v82 << 15)) ^ ((v82 + ~(v82 << 15)) >> 10));
        v85 = (v84 ^ (v84 >> 6)) + ~((v84 ^ (v84 >> 6)) << 11);
        v86 = v83 & (v85 ^ HIWORD(v85));
        v87 = *(_DWORD *)(v81 + 4 * v86);
        if (v87 != v82)
          break;
LABEL_158:
        if (v138)
        {
          if (*((_DWORD *)v138 + 1) && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 152))(v73) & 1) == 0)
          {
            v90 = v139;
            if (v139)
            {
              v91 = *((unsigned int *)v139 - 2);
              v92 = *((_DWORD *)v138 + 4);
              if (v92 < 0x100)
              {
                v94 = v139;
                v93 = WTF::StringImpl::hashSlowCase(v138);
                v90 = v94;
              }
              else
              {
                v93 = v92 >> 8;
              }
              v95 = 0;
              for (j = v90; ; v90 = j)
              {
                v96 = v91;
                v97 = v93 & v91;
                v98 = v90[v97];
                if (!v98)
                  break;
                v131 = v95;
                if (v98 != (WTF *)-1 && (WTF::equal(v98, v138, v89) & 1) != 0)
                  goto LABEL_186;
                v95 = v131 + 1;
                v93 = v131 + 1 + v97;
                v91 = v96;
              }
            }
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 160))(v73))
            {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v139, &v138, v99, (uint64_t)v137);
              if (v26 == v133)
              {
                v100 = v26 + ((unint64_t)v26 >> 2);
                if (v100 >= 0x10)
                  v101 = v100 + 1;
                else
                  v101 = 16;
                if (v101 <= (unint64_t)v26 + 1)
                  v102 = v26 + 1;
                else
                  v102 = v101;
                v133 = v102;
                if (v102 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1960767E4);
                }
                v103 = (char *)WTF::fastMalloc((WTF *)(8 * v102));
                a4[2] = v133;
                *(_QWORD *)a4 = v103;
                memcpy(v103, v71, 8 * v26);
                if (v71)
                {
                  if (v103 == v71)
                  {
                    v133 = 0;
                    v103 = 0;
                    *(_QWORD *)a4 = 0;
                    a4[2] = 0;
                  }
                  WTF::fastFree((WTF *)v71, v9);
                }
              }
              else
              {
                v103 = v71;
              }
              ++*(_DWORD *)(v73 + 16);
              ++v26;
              *(_QWORD *)&v103[8 * v79] = v73;
              a4[3] = v26;
              v71 = v103;
            }
LABEL_186:
            a3 = v135;
          }
LABEL_187:
          v104 = v138;
          v138 = 0;
          if (v104)
          {
            if (*(_DWORD *)v104 == 2)
              WTF::StringImpl::destroy(v104, v9);
            else
              *(_DWORD *)v104 -= 2;
          }
        }
        if (++v70 == v69)
          goto LABEL_193;
      }
      v88 = 1;
      while (v87 != 0x7FFFFFFF)
      {
        v86 = (v86 + v88) & v83;
        v87 = *(_DWORD *)(v81 + 4 * v86);
        ++v88;
        if (v87 == v82)
          goto LABEL_158;
      }
      goto LABEL_187;
    }
  }
LABEL_193:
  if (v26)
  {
    v105 = *(uint64_t **)a4;
    v106 = (uint64_t *)(*(_QWORD *)a4 + 8 * v26);
    v137[0] = (WTF::StringImpl *)WebCore::textTrackCompare;
    v107 = (WebCore::TextTrack *)std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*,false>((uint64_t)v105, v106, (uint64_t (**)(uint64_t *, uint64_t *))v137, 126 - 2 * __clz(v26), 1);
    if (v134)
    {
      v108 = WebCore::TextTrack::captionMenuOffItem(v107);
      if (v26 == a4[2])
      {
        v109 = v26 + ((unint64_t)v26 >> 2);
        if (v109 >= 0x10)
          v110 = v109 + 1;
        else
          v110 = 16;
        if (v110 <= (unint64_t)v26 + 1)
          v111 = v26 + 1;
        else
          v111 = v110;
        if (v111 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1960767ECLL);
        }
        v112 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v111));
        a4[2] = v111;
        *(_QWORD *)a4 = v112;
        v113 = 8 * v26;
        memcpy(v112, v105, v113);
        if (v105)
        {
          if (v112 == v105)
          {
            v112 = 0;
            *(_QWORD *)a4 = 0;
            a4[2] = 0;
          }
          WTF::fastFree((WTF *)v105, v114);
        }
        v105 = v112;
      }
      else
      {
        v113 = 8 * v26;
      }
      v115 = (WebCore::TextTrack *)memmove(v105 + 1, v105, v113);
      ++*(_DWORD *)(v108 + 16);
      *v105 = v108;
      v116 = v26 + 1;
      a4[3] = v116;
      v117 = WebCore::TextTrack::captionMenuAutomaticItem(v115);
      if ((_DWORD)v116 == a4[2])
      {
        v118 = v116 + (v116 >> 2);
        if (v118 >= 0x10)
          v119 = v118 + 1;
        else
          v119 = 16;
        if (v119 <= v116 + 1)
          v120 = v116 + 1;
        else
          v120 = v119;
        if (v120 >> 29)
        {
LABEL_235:
          __break(0xC471u);
          JUMPOUT(0x196076714);
        }
        v121 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v120));
        a4[2] = v120;
        *(_QWORD *)a4 = v121;
        v122 = 8 * v116;
        memcpy(v121, v105, 8 * v116);
        if (v121 == v105)
        {
          *(_QWORD *)a4 = 0;
          a4[2] = 0;
        }
        WTF::fastFree((WTF *)v105, v123);
      }
      else
      {
        v122 = 8 * v116;
      }
      v124 = *(_QWORD *)a4;
      memmove((void *)(*(_QWORD *)a4 + 16), (const void *)(*(_QWORD *)a4 + 8), v122 - 8);
      ++*(_DWORD *)(v117 + 16);
      *(_QWORD *)(v124 + 8) = v117;
      a4[3] = v26 + 2;
    }
  }
  result = v139;
  if (v139)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v139, v9);
  return result;
}

uint64_t WebCore::textTrackCompare(const WebCore::TrackBase **a1, const WebCore::TrackBase **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF *v42;
  WTF *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  char v52;
  char v53;
  WTF *v54;
  int v55;
  unsigned int v56;
  WTF::StringImpl *v57;

  WTF::userPreferredLanguages();
  v4 = (WTF::StringImpl *)*((_QWORD *)*a1 + 10);
  if (v4)
    *(_DWORD *)v4 += 2;
  v53 = 0;
  v47 = v4;
  v6 = WTF::indexOfBestMatchingLanguageInList();
  v7 = v47;
  v47 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v52 = 0;
  v8 = (WTF::StringImpl *)*((_QWORD *)*a2 + 10);
  if (v8)
    *(_DWORD *)v8 += 2;
  v47 = v8;
  v10 = WTF::indexOfBestMatchingLanguageInList();
  v11 = v47;
  v47 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (v6 != v10)
  {
    v20 = v6 < v10;
    goto LABEL_80;
  }
  if (v53 != v52)
  {
    v20 = v53 != 0;
    goto LABEL_80;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)*a1 + 10);
  if (v12)
  {
    v13 = *(_DWORD *)v12;
    *(_DWORD *)v12 += 2;
    v49 = v12;
    v14 = *((_DWORD *)v12 + 1);
    if (v14)
    {
      if (v14 >= 3
        && ((v15 = *((_DWORD *)v12 + 4), v16 = *((_QWORD *)v12 + 1), (v15 & 4) == 0)
          ? (v17 = *(unsigned __int16 *)(v16 + 4))
          : (v17 = *(unsigned __int8 *)(v16 + 2)),
            v17 == 95 || v17 == 45))
      {
        v18 = (v15 & 4) == 0;
        v19 = 2;
        if (!v18)
          v19 = 0x100000002;
        v47 = (WTF::StringImpl *)v16;
        v48 = v19;
        WTF::StringView::convertToASCIILowercase((WTF::StringView *)&v47);
        v12 = v57;
      }
      else
      {
        WTF::String::convertToASCIILowercase((WTF::String *)&v49);
        v12 = v47;
      }
    }
    else
    {
      *(_DWORD *)v12 = v13 + 4;
    }
  }
  else
  {
    v49 = 0;
  }
  v50 = v12;
  WTF::displayNameForLanguageLocale((WTF *)&v50, v9);
  v22 = v50;
  v50 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v49;
  v49 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)*a2 + 10);
  if (v24)
  {
    v25 = *(_DWORD *)v24;
    *(_DWORD *)v24 += 2;
    v49 = v24;
    v26 = *((_DWORD *)v24 + 1);
    if (v26)
    {
      if (v26 >= 3
        && ((v27 = *((_DWORD *)v24 + 4), v28 = *((_QWORD *)v24 + 1), (v27 & 4) == 0)
          ? (v29 = *(unsigned __int16 *)(v28 + 4))
          : (v29 = *(unsigned __int8 *)(v28 + 2)),
            v29 == 95 || v29 == 45))
      {
        v18 = (v27 & 4) == 0;
        v30 = 2;
        if (!v18)
          v30 = 0x100000002;
        v47 = (WTF::StringImpl *)v28;
        v48 = v30;
        WTF::StringView::convertToASCIILowercase((WTF::StringView *)&v47);
        v24 = v57;
      }
      else
      {
        WTF::String::convertToASCIILowercase((WTF::String *)&v49);
        v24 = v47;
      }
    }
    else
    {
      *(_DWORD *)v24 = v25 + 4;
    }
  }
  else
  {
    v49 = 0;
  }
  v50 = v24;
  WTF::displayNameForLanguageLocale((WTF *)&v50, v21);
  v32 = v50;
  v50 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v49;
  v49 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v31);
    else
      *(_DWORD *)v33 -= 2;
  }
  MEMORY[0x19AEA5694](&v47, 0, 0);
  v34 = WTF::Collator::collate();
  if (!v34)
  {
    v20 = (*(uint64_t (**)(const WebCore::TrackBase *))(*(_QWORD *)*a1 + 160))(*a1);
    if ((_DWORD)v20 != (*(unsigned int (**)(const WebCore::TrackBase *))(*(_QWORD *)*a2 + 160))(*a2))
      goto LABEL_74;
    v20 = (*(uint64_t (**)(const WebCore::TrackBase *))(*(_QWORD *)*a1 + 136))(*a1);
    if ((_DWORD)v20 != (*(unsigned int (**)(const WebCore::TrackBase *))(*(_QWORD *)*a2 + 136))(*a2))
      goto LABEL_74;
    WebCore::trackDisplayName((WebCore *)&v50, *a1);
    WebCore::trackDisplayName((WebCore *)&v49, *a2);
    v36 = WTF::Collator::collate();
    v37 = v49;
    v49 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v35);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = v50;
    v50 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::destroy(v38, v35);
        if (v36)
          goto LABEL_62;
        goto LABEL_73;
      }
      *(_DWORD *)v38 -= 2;
    }
    if (v36)
    {
LABEL_62:
      v20 = v36 >> 31;
      goto LABEL_74;
    }
LABEL_73:
    v39 = (*(uint64_t (**)(const WebCore::TrackBase *))(*(_QWORD *)*a1 + 40))(*a1);
    v20 = v39 < (*(int (**)(const WebCore::TrackBase *))(*(_QWORD *)*a2 + 40))(*a2);
    goto LABEL_74;
  }
  v20 = v34 >> 31;
LABEL_74:
  WTF::Collator::~Collator((WTF::Collator *)&v47);
  v40 = v57;
  v57 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v9);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = v51;
  v51 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v9);
    else
      *(_DWORD *)v41 -= 2;
  }
LABEL_80:
  if (v56)
  {
    v44 = v54;
    v45 = 8 * v56;
    do
    {
      v46 = *(WTF::StringImpl **)v44;
      *(_QWORD *)v44 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v9);
        else
          *(_DWORD *)v46 -= 2;
      }
      v44 = (WTF *)((char *)v44 + 8);
      v45 -= 8;
    }
    while (v45);
  }
  v42 = v54;
  if (v54)
  {
    v54 = 0;
    v55 = 0;
    WTF::fastFree(v42, v9);
  }
  return v20;
}

float WebCore::CSPViolationReportBody::create@<S0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v4 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3403050;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(v4 + 16) = v5;
  v6 = *(_DWORD **)(a1 + 16);
  if (v6 || (v6 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v6 += 2;
  *(_QWORD *)(v4 + 24) = v6;
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(v4 + 32) = v7;
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(v4 + 40) = v8;
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(v4 + 48) = v9;
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(v4 + 56) = v10;
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(v4 + 64) = v11;
  *(_BYTE *)(v4 + 72) = *(_BYTE *)(a1 + 72);
  *(_WORD *)(v4 + 74) = *(_WORD *)(a1 + 74);
  v12 = *(_QWORD *)(a1 + 76);
  *(_QWORD *)&v13 = v12;
  *((_QWORD *)&v13 + 1) = HIDWORD(v12);
  *(_OWORD *)(v4 + 80) = v13;
  *a2 = v4;
  return *(float *)&v12;
}

uint64_t WebCore::CSPViolationReportBody::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, char a8@<W7>, uint64_t *a9@<X8>, __int16 a10, uint64_t a11, uint64_t a12)
{
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  result = bmalloc::api::isoAllocate();
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3403050;
  v20 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 16) = v20;
  v21 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 24) = v21;
  v22 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 32) = v22;
  v23 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 40) = v23;
  v24 = *a5;
  *a5 = 0;
  *(_QWORD *)(result + 48) = v24;
  v25 = *a6;
  *a6 = 0;
  *(_QWORD *)(result + 56) = v25;
  v26 = *a7;
  *a7 = 0;
  *(_QWORD *)(result + 64) = v26;
  *(_BYTE *)(result + 72) = a8;
  *(_WORD *)(result + 74) = a10;
  *(_QWORD *)(result + 80) = a11;
  *(_QWORD *)(result + 88) = a12;
  *a9 = result;
  return result;
}

uint64_t *WebCore::CSPViolationReportBody::type(WebCore::CSPViolationReportBody *this)
{
  if ((_MergedGlobals_283 & 1) == 0)
  {
    dword_1ECE7BD80 += 2;
    qword_1EE337E28 = (uint64_t)&dword_1ECE7BD80;
    _MergedGlobals_283 = 1;
  }
  return &qword_1EE337E28;
}

uint64_t *WebCore::CSPViolationReportBody::createReportFormDataForViolation@<X0>(WebCore::CSPViolationReportBody *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  WTF::JSONImpl::Value *v7;
  uint64_t *v8;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  const WTF::String *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  const WTF::String *v28;
  WTF::StringImpl *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t *v36;
  const WTF::String *v37;
  WTF::StringImpl *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t *v45;
  const WTF::String *v46;
  WTF::StringImpl *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  const WTF::String *v55;
  WTF::StringImpl *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t *v63;
  WTF::StringImpl *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t *v71;
  const WTF::String *v72;
  WTF::StringImpl *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t *v80;
  const WTF::String *v81;
  WTF::StringImpl *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t *v89;
  WTF::StringImpl *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  uint64_t *v97;
  const WTF::String *v98;
  WTF::StringImpl *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  uint64_t *v106;
  const WTF::String *v107;
  WTF::StringImpl *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  uint64_t *v115;
  const WTF::String *v116;
  WTF::StringImpl *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  uint64_t *v124;
  const WTF::String *v125;
  WTF::StringImpl *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  uint64_t *v133;
  const WTF::String *v134;
  WTF::StringImpl *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  uint64_t *v142;
  const WTF::String *v143;
  WTF::StringImpl *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  uint64_t *v151;
  WTF::StringImpl *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  uint64_t *v158;
  const WTF::String *v159;
  WTF::StringImpl *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  uint64_t *v167;
  WTF::StringImpl *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  const WTF::String *v182;
  WTF::StringImpl *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  const WTF::String *v191;
  WTF::StringImpl *v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  _BYTE *v208;
  unint64_t v209;
  uint64_t v210;
  void *v211;
  WTF *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  uint64_t *result;
  _DWORD **v216;
  uint64_t v217;
  _DWORD *v218;
  _DWORD **v219;
  uint64_t v220;
  _DWORD *v221;
  _DWORD **v222;
  uint64_t v223;
  _DWORD *v224;
  _DWORD **v225;
  uint64_t v226;
  _DWORD *v227;
  _DWORD **v228;
  uint64_t v229;
  _DWORD *v230;
  _DWORD **v231;
  uint64_t v232;
  _DWORD *v233;
  _DWORD **v234;
  uint64_t v235;
  _DWORD *v236;
  _DWORD **v237;
  uint64_t v238;
  _DWORD *v239;
  _DWORD **v240;
  uint64_t v241;
  _DWORD *v242;
  _DWORD **v243;
  uint64_t v244;
  _DWORD *v245;
  _DWORD **v246;
  uint64_t v247;
  _DWORD *v248;
  _DWORD **v249;
  uint64_t v250;
  _DWORD *v251;
  _DWORD **v252;
  uint64_t v253;
  _DWORD *v254;
  _DWORD **v255;
  uint64_t v256;
  _DWORD *v257;
  _DWORD **v258;
  uint64_t v259;
  _DWORD *v260;
  _DWORD **v261;
  uint64_t v262;
  _DWORD *v263;
  _DWORD **v264;
  uint64_t v265;
  _DWORD *v266;
  _DWORD **v267;
  uint64_t v268;
  _DWORD *v269;
  _DWORD **v270;
  uint64_t v271;
  _DWORD *v272;
  _DWORD **v273;
  uint64_t v274;
  _DWORD *v275;
  _DWORD **v276;
  uint64_t v277;
  _DWORD *v278;
  _DWORD **v279;
  uint64_t v280;
  _DWORD *v281;
  _DWORD **v282;
  uint64_t v283;
  _DWORD *v284;
  WTF::StringImpl *v285;
  WTF::StringImpl *v286;
  uint64_t *v287;
  WTF::StringImpl *v288;
  WTF *v289[2];
  char v290;

  WTF::JSONImpl::Object::create(this);
  v6 = v287;
  v7 = (WebCore::CSPViolationReportBody *)((char *)this + 16);
  v8 = v287 + 2;
  if (a2)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::JSONImpl::Value::create((WebCore::CSPViolationReportBody *)((char *)this + 16), v9);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v11 = v6 + 3;
      v12 = *((unsigned int *)v6 + 9);
      if ((_DWORD)v12 == *((_DWORD *)v6 + 8))
      {
        v228 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)&v286);
        v12 = *((unsigned int *)v6 + 9);
        v229 = v6[3];
        v230 = *v228;
        if (*v228)
          *v230 += 2;
        *(_QWORD *)(v229 + 8 * v12) = v230;
      }
      else
      {
        v13 = *v11;
        v14 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v13 + 8 * v12) = v14;
      }
      *((_DWORD *)v6 + 9) = v12 + 1;
    }
    v15 = v288;
    v288 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v15;
    }
    v16 = v286;
    v286 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v10);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v287;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v285 = v289[0];
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v285, v18);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v17 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v20 = v17 + 3;
      v21 = *((unsigned int *)v17 + 9);
      if ((_DWORD)v21 == *((_DWORD *)v17 + 8))
      {
        v231 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v286);
        v21 = *((unsigned int *)v17 + 9);
        v232 = v17[3];
        v233 = *v231;
        if (*v231)
          *v233 += 2;
        *(_QWORD *)(v232 + 8 * v21) = v233;
      }
      else
      {
        v22 = *v20;
        v23 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v22 + 8 * v21) = v23;
      }
      *((_DWORD *)v17 + 9) = v21 + 1;
    }
    v24 = v288;
    v288 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v24;
    }
    v25 = v285;
    v285 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v19);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v286;
    v286 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v19);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v287;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::JSONImpl::Value::create((WebCore::CSPViolationReportBody *)((char *)this + 24), v28);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v27 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v30 = v27 + 3;
      v31 = *((unsigned int *)v27 + 9);
      if ((_DWORD)v31 == *((_DWORD *)v27 + 8))
      {
        v234 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v31 + 1, (unint64_t)&v286);
        v31 = *((unsigned int *)v27 + 9);
        v235 = v27[3];
        v236 = *v234;
        if (*v234)
          *v236 += 2;
        *(_QWORD *)(v235 + 8 * v31) = v236;
      }
      else
      {
        v32 = *v30;
        v33 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v32 + 8 * v31) = v33;
      }
      *((_DWORD *)v27 + 9) = v31 + 1;
    }
    v34 = v288;
    v288 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v34;
    }
    v35 = v286;
    v286 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v29);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = v287;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::JSONImpl::Value::create((WebCore::CSPViolationReportBody *)((char *)this + 40), v37);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v36 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v39 = v36 + 3;
      v40 = *((unsigned int *)v36 + 9);
      if ((_DWORD)v40 == *((_DWORD *)v36 + 8))
      {
        v237 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v40 + 1, (unint64_t)&v286);
        v40 = *((unsigned int *)v36 + 9);
        v238 = v36[3];
        v239 = *v237;
        if (*v237)
          *v239 += 2;
        *(_QWORD *)(v238 + 8 * v40) = v239;
      }
      else
      {
        v41 = *v39;
        v42 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v41 + 8 * v40) = v42;
      }
      *((_DWORD *)v36 + 9) = v40 + 1;
    }
    v43 = v288;
    v288 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v43;
    }
    v44 = v286;
    v286 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v38);
      else
        *(_DWORD *)v44 -= 2;
    }
    v45 = v287;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::JSONImpl::Value::create((WebCore::CSPViolationReportBody *)((char *)this + 32), v46);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v45 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v48 = v45 + 3;
      v49 = *((unsigned int *)v45 + 9);
      if ((_DWORD)v49 == *((_DWORD *)v45 + 8))
      {
        v240 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v286);
        v49 = *((unsigned int *)v45 + 9);
        v241 = v45[3];
        v242 = *v240;
        if (*v240)
          *v242 += 2;
        *(_QWORD *)(v241 + 8 * v49) = v242;
      }
      else
      {
        v50 = *v48;
        v51 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v50 + 8 * v49) = v51;
      }
      *((_DWORD *)v45 + 9) = v49 + 1;
    }
    v52 = v288;
    v288 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v52;
    }
    v53 = v286;
    v286 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v47);
      else
        *(_DWORD *)v53 -= 2;
    }
    v54 = v287;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::JSONImpl::Value::create((WebCore::CSPViolationReportBody *)((char *)this + 48), v55);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v54 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v57 = v54 + 3;
      v58 = *((unsigned int *)v54 + 9);
      if ((_DWORD)v58 == *((_DWORD *)v54 + 8))
      {
        v243 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v58 + 1, (unint64_t)&v286);
        v58 = *((unsigned int *)v54 + 9);
        v244 = v54[3];
        v245 = *v243;
        if (*v243)
          *v245 += 2;
        *(_QWORD *)(v244 + 8 * v58) = v245;
      }
      else
      {
        v59 = *v57;
        v60 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v59 + 8 * v58) = v60;
      }
      *((_DWORD *)v54 + 9) = v58 + 1;
    }
    v61 = v288;
    v288 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v61;
    }
    v62 = v286;
    v286 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v56);
      else
        *(_DWORD *)v62 -= 2;
    }
    v63 = v287;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned __int16 *)this + 37));
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v63 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v65 = v63 + 3;
      v66 = *((unsigned int *)v63 + 9);
      if ((_DWORD)v66 == *((_DWORD *)v63 + 8))
      {
        v246 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v286);
        v66 = *((unsigned int *)v63 + 9);
        v247 = v63[3];
        v248 = *v246;
        if (*v246)
          *v248 += 2;
        *(_QWORD *)(v247 + 8 * v66) = v248;
      }
      else
      {
        v67 = *v65;
        v68 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v67 + 8 * v66) = v68;
      }
      *((_DWORD *)v63 + 9) = v66 + 1;
    }
    v69 = v288;
    v288 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v69;
    }
    v70 = v286;
    v286 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v64);
      else
        *(_DWORD *)v70 -= 2;
    }
    v71 = v287;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::JSONImpl::Value::create((WebCore::CSPViolationReportBody *)((char *)this + 64), v72);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v71 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v74 = v71 + 3;
      v75 = *((unsigned int *)v71 + 9);
      if ((_DWORD)v75 == *((_DWORD *)v71 + 8))
      {
        v249 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v74, v75 + 1, (unint64_t)&v286);
        v75 = *((unsigned int *)v71 + 9);
        v250 = v71[3];
        v251 = *v249;
        if (*v249)
          *v251 += 2;
        *(_QWORD *)(v250 + 8 * v75) = v251;
      }
      else
      {
        v76 = *v74;
        v77 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v76 + 8 * v75) = v77;
      }
      *((_DWORD *)v71 + 9) = v75 + 1;
    }
    v78 = v288;
    v288 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v78;
    }
    v79 = v286;
    v286 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        v79 = (WTF::StringImpl *)WTF::StringImpl::destroy(v79, v73);
      else
        *(_DWORD *)v79 -= 2;
    }
    if (*((_QWORD *)this + 7))
    {
      v80 = v287;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v286 = v289[0];
      WTF::JSONImpl::Value::create((WebCore::CSPViolationReportBody *)((char *)this + 56), v81);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v80 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
      if (v290)
      {
        v83 = v80 + 3;
        v84 = *((unsigned int *)v80 + 9);
        if ((_DWORD)v84 == *((_DWORD *)v80 + 8))
        {
          v273 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v83, v84 + 1, (unint64_t)&v286);
          v84 = *((unsigned int *)v80 + 9);
          v274 = v80[3];
          v275 = *v273;
          if (*v273)
            *v275 += 2;
          *(_QWORD *)(v274 + 8 * v84) = v275;
        }
        else
        {
          v85 = *v83;
          v86 = v286;
          if (v286)
            *(_DWORD *)v286 += 2;
          *(_QWORD *)(v85 + 8 * v84) = v86;
        }
        *((_DWORD *)v80 + 9) = v84 + 1;
      }
      v87 = v288;
      v288 = 0;
      if (v87)
      {
        if (*(_DWORD *)v87 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v87;
      }
      v88 = v286;
      v286 = 0;
      if (v88)
      {
        if (*(_DWORD *)v88 == 2)
          WTF::StringImpl::destroy(v88, v82);
        else
          *(_DWORD *)v88 -= 2;
      }
      v89 = v287;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v286 = v289[0];
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)this + 20));
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v89 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
      if (v290)
      {
        v91 = v89 + 3;
        v92 = *((unsigned int *)v89 + 9);
        if ((_DWORD)v92 == *((_DWORD *)v89 + 8))
        {
          v276 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v91, v92 + 1, (unint64_t)&v286);
          v92 = *((unsigned int *)v89 + 9);
          v277 = v89[3];
          v278 = *v276;
          if (*v276)
            *v278 += 2;
          *(_QWORD *)(v277 + 8 * v92) = v278;
        }
        else
        {
          v93 = *v91;
          v94 = v286;
          if (v286)
            *(_DWORD *)v286 += 2;
          *(_QWORD *)(v93 + 8 * v92) = v94;
        }
        *((_DWORD *)v89 + 9) = v92 + 1;
      }
      v95 = v288;
      v288 = 0;
      if (v95)
      {
        if (*(_DWORD *)v95 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v95;
      }
      v96 = v286;
      v286 = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
          WTF::StringImpl::destroy(v96, v90);
        else
          *(_DWORD *)v96 -= 2;
      }
      v97 = v287;
LABEL_237:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v286 = v289[0];
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)this + 22));
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v97 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
      if (v290)
      {
        v176 = v97 + 3;
        v177 = *((unsigned int *)v97 + 9);
        if ((_DWORD)v177 == *((_DWORD *)v97 + 8))
        {
          v225 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v176, v177 + 1, (unint64_t)&v286);
          v177 = *((unsigned int *)v97 + 9);
          v226 = v97[3];
          v227 = *v225;
          if (*v225)
            *v227 += 2;
          *(_QWORD *)(v226 + 8 * v177) = v227;
        }
        else
        {
          v178 = *v176;
          v179 = v286;
          if (v286)
            *(_DWORD *)v286 += 2;
          *(_QWORD *)(v178 + 8 * v177) = v179;
        }
        *((_DWORD *)v97 + 9) = v177 + 1;
      }
      v180 = v288;
      v288 = 0;
      if (v180)
      {
        if (*(_DWORD *)v180 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v180;
      }
      v79 = v286;
      v286 = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
          v79 = (WTF::StringImpl *)WTF::StringImpl::destroy(v79, v175);
        else
          *(_DWORD *)v79 -= 2;
      }
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::JSONImpl::Value::create((WebCore::CSPViolationReportBody *)((char *)this + 16), v98);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v100 = v6 + 3;
      v101 = *((unsigned int *)v6 + 9);
      if ((_DWORD)v101 == *((_DWORD *)v6 + 8))
      {
        v252 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v100, v101 + 1, (unint64_t)&v286);
        v101 = *((unsigned int *)v6 + 9);
        v253 = v6[3];
        v254 = *v252;
        if (*v252)
          *v254 += 2;
        *(_QWORD *)(v253 + 8 * v101) = v254;
      }
      else
      {
        v102 = *v100;
        v103 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v102 + 8 * v101) = v103;
      }
      *((_DWORD *)v6 + 9) = v101 + 1;
    }
    v104 = v288;
    v288 = 0;
    if (v104)
    {
      if (*(_DWORD *)v104 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v104;
    }
    v105 = v286;
    v286 = 0;
    if (v105)
    {
      if (*(_DWORD *)v105 == 2)
        WTF::StringImpl::destroy(v105, v99);
      else
        *(_DWORD *)v105 -= 2;
    }
    v106 = v287;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::JSONImpl::Value::create((WebCore::CSPViolationReportBody *)((char *)this + 24), v107);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v106 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v109 = v106 + 3;
      v110 = *((unsigned int *)v106 + 9);
      if ((_DWORD)v110 == *((_DWORD *)v106 + 8))
      {
        v255 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v109, v110 + 1, (unint64_t)&v286);
        v110 = *((unsigned int *)v106 + 9);
        v256 = v106[3];
        v257 = *v255;
        if (*v255)
          *v257 += 2;
        *(_QWORD *)(v256 + 8 * v110) = v257;
      }
      else
      {
        v111 = *v109;
        v112 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v111 + 8 * v110) = v112;
      }
      *((_DWORD *)v106 + 9) = v110 + 1;
    }
    v113 = v288;
    v288 = 0;
    if (v113)
    {
      if (*(_DWORD *)v113 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v113;
    }
    v114 = v286;
    v286 = 0;
    if (v114)
    {
      if (*(_DWORD *)v114 == 2)
        WTF::StringImpl::destroy(v114, v108);
      else
        *(_DWORD *)v114 -= 2;
    }
    v115 = v287;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::JSONImpl::Value::create((WebCore::CSPViolationReportBody *)((char *)this + 40), v116);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v115 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v118 = v115 + 3;
      v119 = *((unsigned int *)v115 + 9);
      if ((_DWORD)v119 == *((_DWORD *)v115 + 8))
      {
        v258 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v118, v119 + 1, (unint64_t)&v286);
        v119 = *((unsigned int *)v115 + 9);
        v259 = v115[3];
        v260 = *v258;
        if (*v258)
          *v260 += 2;
        *(_QWORD *)(v259 + 8 * v119) = v260;
      }
      else
      {
        v120 = *v118;
        v121 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v120 + 8 * v119) = v121;
      }
      *((_DWORD *)v115 + 9) = v119 + 1;
    }
    v122 = v288;
    v288 = 0;
    if (v122)
    {
      if (*(_DWORD *)v122 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v122;
    }
    v123 = v286;
    v286 = 0;
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
        WTF::StringImpl::destroy(v123, v117);
      else
        *(_DWORD *)v123 -= 2;
    }
    v124 = v287;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::JSONImpl::Value::create((WebCore::CSPViolationReportBody *)((char *)this + 40), v125);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v124 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v127 = v124 + 3;
      v128 = *((unsigned int *)v124 + 9);
      if ((_DWORD)v128 == *((_DWORD *)v124 + 8))
      {
        v261 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v127, v128 + 1, (unint64_t)&v286);
        v128 = *((unsigned int *)v124 + 9);
        v262 = v124[3];
        v263 = *v261;
        if (*v261)
          *v263 += 2;
        *(_QWORD *)(v262 + 8 * v128) = v263;
      }
      else
      {
        v129 = *v127;
        v130 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v129 + 8 * v128) = v130;
      }
      *((_DWORD *)v124 + 9) = v128 + 1;
    }
    v131 = v288;
    v288 = 0;
    if (v131)
    {
      if (*(_DWORD *)v131 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v131;
    }
    v132 = v286;
    v286 = 0;
    if (v132)
    {
      if (*(_DWORD *)v132 == 2)
        WTF::StringImpl::destroy(v132, v126);
      else
        *(_DWORD *)v132 -= 2;
    }
    v133 = v287;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::JSONImpl::Value::create((WebCore::CSPViolationReportBody *)((char *)this + 48), v134);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v133 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v136 = v133 + 3;
      v137 = *((unsigned int *)v133 + 9);
      if ((_DWORD)v137 == *((_DWORD *)v133 + 8))
      {
        v264 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, v137 + 1, (unint64_t)&v286);
        v137 = *((unsigned int *)v133 + 9);
        v265 = v133[3];
        v266 = *v264;
        if (*v264)
          *v266 += 2;
        *(_QWORD *)(v265 + 8 * v137) = v266;
      }
      else
      {
        v138 = *v136;
        v139 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v138 + 8 * v137) = v139;
      }
      *((_DWORD *)v133 + 9) = v137 + 1;
    }
    v140 = v288;
    v288 = 0;
    if (v140)
    {
      if (*(_DWORD *)v140 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v140;
    }
    v141 = v286;
    v286 = 0;
    if (v141)
    {
      if (*(_DWORD *)v141 == 2)
        WTF::StringImpl::destroy(v141, v135);
      else
        *(_DWORD *)v141 -= 2;
    }
    v142 = v287;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::JSONImpl::Value::create((WebCore::CSPViolationReportBody *)((char *)this + 32), v143);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v142 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v145 = v142 + 3;
      v146 = *((unsigned int *)v142 + 9);
      if ((_DWORD)v146 == *((_DWORD *)v142 + 8))
      {
        v267 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v145, v146 + 1, (unint64_t)&v286);
        v146 = *((unsigned int *)v142 + 9);
        v268 = v142[3];
        v269 = *v267;
        if (*v267)
          *v269 += 2;
        *(_QWORD *)(v268 + 8 * v146) = v269;
      }
      else
      {
        v147 = *v145;
        v148 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v147 + 8 * v146) = v148;
      }
      *((_DWORD *)v142 + 9) = v146 + 1;
    }
    v149 = v288;
    v288 = 0;
    if (v149)
    {
      if (*(_DWORD *)v149 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v149;
    }
    v150 = v286;
    v286 = 0;
    if (v150)
    {
      if (*(_DWORD *)v150 == 2)
        WTF::StringImpl::destroy(v150, v144);
      else
        *(_DWORD *)v150 -= 2;
    }
    v151 = v287;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v286 = v289[0];
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned __int16 *)this + 37));
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v151 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
    if (v290)
    {
      v153 = v151 + 3;
      v154 = *((unsigned int *)v151 + 9);
      if ((_DWORD)v154 == *((_DWORD *)v151 + 8))
      {
        v270 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v153, v154 + 1, (unint64_t)&v286);
        v154 = *((unsigned int *)v151 + 9);
        v271 = v151[3];
        v272 = *v270;
        if (*v270)
          *v272 += 2;
        *(_QWORD *)(v271 + 8 * v154) = v272;
      }
      else
      {
        v155 = *v153;
        v156 = v286;
        if (v286)
          *(_DWORD *)v286 += 2;
        *(_QWORD *)(v155 + 8 * v154) = v156;
      }
      *((_DWORD *)v151 + 9) = v154 + 1;
    }
    v157 = v288;
    v288 = 0;
    if (v157)
    {
      if (*(_DWORD *)v157 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v157;
    }
    v79 = v286;
    v286 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        v79 = (WTF::StringImpl *)WTF::StringImpl::destroy(v79, v152);
      else
        *(_DWORD *)v79 -= 2;
    }
    if (*((_QWORD *)this + 7))
    {
      v158 = v287;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v286 = v289[0];
      WTF::JSONImpl::Value::create((WebCore::CSPViolationReportBody *)((char *)this + 56), v159);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v158 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
      if (v290)
      {
        v161 = v158 + 3;
        v162 = *((unsigned int *)v158 + 9);
        if ((_DWORD)v162 == *((_DWORD *)v158 + 8))
        {
          v279 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v161, v162 + 1, (unint64_t)&v286);
          v162 = *((unsigned int *)v158 + 9);
          v280 = v158[3];
          v281 = *v279;
          if (*v279)
            *v281 += 2;
          *(_QWORD *)(v280 + 8 * v162) = v281;
        }
        else
        {
          v163 = *v161;
          v164 = v286;
          if (v286)
            *(_DWORD *)v286 += 2;
          *(_QWORD *)(v163 + 8 * v162) = v164;
        }
        *((_DWORD *)v158 + 9) = v162 + 1;
      }
      v165 = v288;
      v288 = 0;
      if (v165)
      {
        if (*(_DWORD *)v165 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v165;
      }
      v166 = v286;
      v286 = 0;
      if (v166)
      {
        if (*(_DWORD *)v166 == 2)
          WTF::StringImpl::destroy(v166, v160);
        else
          *(_DWORD *)v166 -= 2;
      }
      v167 = v287;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v286 = v289[0];
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)this + 20));
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v167 + 2, &v286, (const WTF::StringImpl *)&v288, (uint64_t)v289);
      if (v290)
      {
        v169 = v167 + 3;
        v170 = *((unsigned int *)v167 + 9);
        if ((_DWORD)v170 == *((_DWORD *)v167 + 8))
        {
          v282 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v169, v170 + 1, (unint64_t)&v286);
          v170 = *((unsigned int *)v167 + 9);
          v283 = v167[3];
          v284 = *v282;
          if (*v282)
            *v284 += 2;
          *(_QWORD *)(v283 + 8 * v170) = v284;
        }
        else
        {
          v171 = *v169;
          v172 = v286;
          if (v286)
            *(_DWORD *)v286 += 2;
          *(_QWORD *)(v171 + 8 * v170) = v172;
        }
        *((_DWORD *)v167 + 9) = v170 + 1;
      }
      v173 = v288;
      v288 = 0;
      if (v173)
      {
        if (*(_DWORD *)v173 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v173;
      }
      v174 = v286;
      v286 = 0;
      if (v174)
      {
        if (*(_DWORD *)v174 == 2)
          WTF::StringImpl::destroy(v174, v168);
        else
          *(_DWORD *)v174 -= 2;
      }
      v97 = v287;
      goto LABEL_237;
    }
  }
  WTF::JSONImpl::Object::create(v79);
  v181 = v286;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v285 = v289[0];
  if ((_MergedGlobals_283 & 1) == 0)
  {
    dword_1ECE7BD80 += 2;
    qword_1EE337E28 = (uint64_t)&dword_1ECE7BD80;
    _MergedGlobals_283 = 1;
  }
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&qword_1EE337E28, v182);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v181 + 2, &v285, (const WTF::StringImpl *)&v288, (uint64_t)v289);
  if (v290)
  {
    v184 = (uint64_t *)((char *)v181 + 24);
    v185 = *((unsigned int *)v181 + 9);
    if ((_DWORD)v185 == *((_DWORD *)v181 + 8))
    {
      v216 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v184, v185 + 1, (unint64_t)&v285);
      v185 = *((unsigned int *)v181 + 9);
      v217 = *((_QWORD *)v181 + 3);
      v218 = *v216;
      if (*v216)
        *v218 += 2;
      *(_QWORD *)(v217 + 8 * v185) = v218;
    }
    else
    {
      v186 = *v184;
      v187 = v285;
      if (v285)
        *(_DWORD *)v285 += 2;
      *(_QWORD *)(v186 + 8 * v185) = v187;
    }
    *((_DWORD *)v181 + 9) = v185 + 1;
  }
  v188 = v288;
  v288 = 0;
  if (v188)
  {
    if (*(_DWORD *)v188 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v188;
  }
  v189 = v285;
  v285 = 0;
  if (v189)
  {
    if (*(_DWORD *)v189 == 2)
      WTF::StringImpl::destroy(v189, v183);
    else
      *(_DWORD *)v189 -= 2;
  }
  v190 = v286;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v285 = v289[0];
  WTF::JSONImpl::Value::create(v7, v191);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v190 + 2, &v285, (const WTF::StringImpl *)&v288, (uint64_t)v289);
  if (v290)
  {
    v193 = (uint64_t *)((char *)v190 + 24);
    v194 = *((unsigned int *)v190 + 9);
    if ((_DWORD)v194 == *((_DWORD *)v190 + 8))
    {
      v219 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v193, v194 + 1, (unint64_t)&v285);
      v194 = *((unsigned int *)v190 + 9);
      v220 = *((_QWORD *)v190 + 3);
      v221 = *v219;
      if (*v219)
        *v221 += 2;
      *(_QWORD *)(v220 + 8 * v194) = v221;
    }
    else
    {
      v195 = *v193;
      v196 = v285;
      if (v285)
        *(_DWORD *)v285 += 2;
      *(_QWORD *)(v195 + 8 * v194) = v196;
    }
    *((_DWORD *)v190 + 9) = v194 + 1;
  }
  v197 = v288;
  v288 = 0;
  if (v197)
  {
    if (*(_DWORD *)v197 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v197;
  }
  v198 = v285;
  v285 = 0;
  if (v198)
  {
    if (*(_DWORD *)v198 == 2)
      WTF::StringImpl::destroy(v198, v192);
    else
      *(_DWORD *)v198 -= 2;
  }
  v199 = v286;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v288 = v289[0];
  v200 = (WTF::StringImpl *)v287;
  v287 = 0;
  v285 = v200;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v199 + 2, &v288, (const WTF::StringImpl *)&v285, (uint64_t)v289);
  if (v290)
  {
    v202 = (uint64_t *)((char *)v199 + 24);
    v203 = *((unsigned int *)v199 + 9);
    if ((_DWORD)v203 == *((_DWORD *)v199 + 8))
    {
      v222 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v202, v203 + 1, (unint64_t)&v288);
      v203 = *((unsigned int *)v199 + 9);
      v223 = *((_QWORD *)v199 + 3);
      v224 = *v222;
      if (*v222)
        *v224 += 2;
      *(_QWORD *)(v223 + 8 * v203) = v224;
    }
    else
    {
      v204 = *v202;
      v205 = v288;
      if (v288)
        *(_DWORD *)v288 += 2;
      *(_QWORD *)(v204 + 8 * v203) = v205;
    }
    *((_DWORD *)v199 + 9) = v203 + 1;
  }
  v206 = v285;
  v285 = 0;
  if (v206)
  {
    if (*(_DWORD *)v206 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v206;
  }
  v207 = v288;
  v288 = 0;
  if (v207)
  {
    if (*(_DWORD *)v207 == 2)
      WTF::StringImpl::destroy(v207, v201);
    else
      *(_DWORD *)v207 -= 2;
  }
  WTF::JSONImpl::Value::toJSONString(v286);
  WTF::String::utf8();
  if (v289[0])
  {
    v208 = (char *)v289[0] + 16;
    v209 = *((_QWORD *)v289[0] + 1);
  }
  else
  {
    v209 = 0;
    v208 = 0;
  }
  v210 = bmalloc::api::isoAllocate();
  *(_DWORD *)v210 = 1;
  *(_BYTE *)(v210 + 64) = 0;
  *(_QWORD *)(v210 + 16) = 0;
  *(_QWORD *)(v210 + 24) = 0;
  *(_QWORD *)(v210 + 8) = 0;
  *(_BYTE *)(v210 + 32) = 0;
  *(_QWORD *)(v210 + 40) = 0;
  *(_QWORD *)(v210 + 48) = 0;
  *(_BYTE *)(v210 + 56) = 0;
  *a3 = v210;
  WebCore::FormData::appendData(v210, v208, v209);
  v212 = v289[0];
  v289[0] = 0;
  if (v212)
  {
    if (*(_DWORD *)v212 == 1)
      WTF::fastFree(v212, v211);
    else
      --*(_DWORD *)v212;
  }
  v213 = v288;
  v288 = 0;
  if (v213)
  {
    if (*(_DWORD *)v213 == 2)
      WTF::StringImpl::destroy(v213, (WTF::StringImpl *)v211);
    else
      *(_DWORD *)v213 -= 2;
  }
  v214 = v286;
  v286 = 0;
  if (v214)
  {
    if (*(_DWORD *)v214 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v214;
  }
  result = v287;
  v287 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (uint64_t *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::ContentSecurityPolicy::inheritHeadersFrom(uint64_t this, WTF::StringImpl **a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (!*(_BYTE *)(this + 183))
  {
    v2 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v2)
    {
      v3 = this;
      v4 = *a2;
      v5 = 16 * v2;
      do
      {
        v6 = *((_BYTE *)v4 + 8);
        v8 = 0;
        WebCore::ContentSecurityPolicy::didReceiveHeader(v3, v4, v6, 3, (uint64_t *)&v8, 0);
        this = (uint64_t)v8;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            this = WTF::StringImpl::destroy(v8, v7);
          else
            *(_DWORD *)v8 -= 2;
        }
        v4 = (WTF::StringImpl *)((char *)v4 + 16);
        v5 -= 16;
      }
      while (v5);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::ContentSecurityPolicy::createPolicyForPluginDocumentFrom(WTF::StringImpl *this, const WebCore::ContentSecurityPolicy *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  _DWORD *v9;
  WTF::StringImpl *v10;

  if (!*((_BYTE *)this + 183))
  {
    v3 = (uint64_t)this;
    v4 = *((unsigned int *)a2 + 37);
    if ((_DWORD)v4)
    {
      v5 = *((_QWORD *)a2 + 17);
      v6 = 8 * v4;
      do
      {
        v7 = (WTF::StringImpl *)(*(_QWORD *)v5 + 8);
        v8 = *(_BYTE *)(*(_QWORD *)v5 + 16);
        v10 = 0;
        WebCore::ContentSecurityPolicy::didReceiveHeader(v3, v7, v8, 4, (uint64_t *)&v10, 0);
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, a2);
          else
            *(_DWORD *)v10 -= 2;
        }
        v5 += 8;
        v6 -= 8;
      }
      while (v6);
    }
    v9 = (_DWORD *)*((_QWORD *)a2 + 21);
    if (v9)
      *v9 += 2;
    this = *(WTF::StringImpl **)(v3 + 168);
    *(_QWORD *)(v3 + 168) = v9;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
      else
        *(_DWORD *)this -= 2;
    }
    *(_DWORD *)(v3 + 184) = *((_DWORD *)a2 + 46);
  }
  return this;
}

uint64_t WebCore::ContentSecurityPolicy::copyUpgradeInsecureRequestStateFrom(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int **v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *i;
  uint64_t v15;
  uint64_t v16;
  WebCore::ContentSecurityPolicy *v17;
  const WTF::URL *v18;
  unsigned int *v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;

  *(_BYTE *)(a1 + 182) = *(_BYTE *)(a2 + 182);
  v4 = (unsigned int **)(a2 + 192);
  if (a3)
    WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>>::copy((uint64_t)&v19, v4);
  else
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable((uint64_t *)&v19, v4);
  result = (uint64_t)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable(&v20, &v19);
  v7 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v20;
  v20 = v7;
  if (v7)
  {
    v9 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v9)
    {
      v10 = v7;
      while (1)
      {
        v11 = *(unsigned int *)(v10 + 24);
        if ((_DWORD)v11 == -1)
          break;
        v22 = (uint64_t *)&v21;
        if ((((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v11])(&v22, v10) & 1) == 0)
        {
          v12 = *(unsigned int *)(v10 + 24);
          if ((_DWORD)v12 != -1)
            ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v12])(&v22, v10);
          *(_DWORD *)(v10 + 24) = -1;
        }
        v10 += 32;
        if (!--v9)
          goto LABEL_15;
      }
LABEL_25:
      v17 = (WebCore::ContentSecurityPolicy *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::ContentSecurityPolicy::allowRunningOrDisplayingInsecureContent(v17, v18);
    }
LABEL_15:
    result = WTF::fastFree((WTF *)(v7 - 16), v6);
  }
  v8 = v19;
  if (v19)
  {
    v13 = *(v19 - 1);
    if (!(_DWORD)v13)
      return WTF::fastFree((WTF *)(v8 - 4), v6);
    for (i = v19; ; i += 8)
    {
      v15 = i[6];
      if ((_DWORD)v15 == -1)
        break;
      v22 = &v20;
      if ((((uint64_t (*)(uint64_t **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v15])(&v22, i) & 1) == 0)
      {
        v16 = i[6];
        if ((_DWORD)v16 != -1)
          ((void (*)(uint64_t **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v16])(&v22, i);
        i[6] = -1;
      }
      if (!--v13)
        return WTF::fastFree((WTF *)(v8 - 4), v6);
    }
    goto LABEL_25;
  }
  return result;
}

uint64_t WebCore::ContentSecurityPolicy::allowRunningOrDisplayingInsecureContent(WebCore::ContentSecurityPolicy *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t *i;
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int32x2_t v23[2];
  WTF::StringImpl *v24[2];
  WTF::StringImpl *v25[5];

  v2 = *((unsigned int *)this + 37);
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    v6 = 1;
    for (i = (uint64_t *)*((_QWORD *)this + 17); !*(_BYTE *)(*i + 20); ++i)
    {
LABEL_27:
      v5 -= 8;
      if (!v5)
        return v6 & 1;
    }
    v8 = *(unsigned __int8 *)(*i + 17);
    if (*(_BYTE *)(*i + 17))
      v9 = "[Report Only] ";
    else
      v9 = "";
    if (*(_BYTE *)(*i + 17))
      v10 = 15;
    else
      v10 = 1;
    WTF::URL::stringCenterEllipsizedToLength(a2);
    v25[0] = (WTF::StringImpl *)v9;
    v25[1] = (WTF::StringImpl *)v10;
    v24[0] = (WTF::StringImpl *)"Blocked mixed content ";
    v24[1] = (WTF::StringImpl *)23;
    v23[0] = (int32x2_t)" because 'block-all-mixed-content' appears in the Content Security Policy.";
    v23[1] = (int32x2_t)75;
    result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)v25, (uint64_t)v24, (uint64_t *)&v21, (uint64_t)v23, &v22);
    if (!v22)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v21;
    v21 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = v25[0];
    v20 = v25[0];
    v15 = *i;
    v24[0] = 0;
    v23[0] = (int32x2_t)-1;
    v25[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v25);
    WebCore::ContentSecurityPolicy::reportViolation((uint64_t)this, &v20, v15, (WTF::StringImpl **)a2, (uint64_t)&v22, (uint64_t)v24, 0, 0x100000000, v23, 0, (uint64_t)v25, 0);
    v17 = v25[0];
    v25[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v24[0];
    v24[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v16);
        if (v14)
        {
LABEL_21:
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v16);
          else
            *(_DWORD *)v14 -= 2;
        }
LABEL_23:
        v19 = v22;
        v22 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v16);
          else
            *(_DWORD *)v19 -= 2;
        }
        v6 &= v8 != 0;
        goto LABEL_27;
      }
      *(_DWORD *)v18 -= 2;
    }
    if (v14)
      goto LABEL_21;
    goto LABEL_23;
  }
  v6 = 1;
  return v6 & 1;
}

uint64_t WebCore::ContentSecurityPolicy::requireTrustedTypesForSinkGroup(WebCore::ContentSecurityPolicy *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *((unsigned int *)this + 37);
  if (!(_DWORD)v2)
    return 0;
  v5 = *((_QWORD *)this + 17);
  v6 = 8 * v2;
  while (!*(_BYTE *)(*(_QWORD *)v5 + 21) || (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "script", 6) & 1) == 0)
  {
    result = 0;
    v5 += 8;
    v6 -= 8;
    if (!v6)
      return result;
  }
  return 1;
}

BOOL WebCore::ContentSecurityPolicy::urlMatchesSelf(WebCore::ContentSecurityPolicy *this, const WTF::URL *a2, int a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[5];

  if (a3 && WTF::URL::protocolIs())
  {
    v5 = *((_QWORD *)this + 15);
    WebCore::BlobURL::getOriginURL((uint64_t *)v13, a2);
    if (!WebCore::ContentSecurityPolicySource::schemeMatches((WebCore::ContentSecurityPolicySource *)v5, (const WTF::URL *)v13))goto LABEL_20;
    v7 = *(_QWORD *)(v5 + 16);
    if ((!v7 || !*(_DWORD *)(v7 + 4)) && !*(_BYTE *)(v5 + 36))
    {
      v8 = 1;
      goto LABEL_21;
    }
    if (WebCore::ContentSecurityPolicySource::hostMatches((WebCore::ContentSecurityPolicySource *)v5, (const WTF::URL *)v13)&& WebCore::ContentSecurityPolicySource::portMatches((WebCore::ContentSecurityPolicySource *)v5, (const WTF::URL *)v13))
    {
      v8 = WebCore::ContentSecurityPolicySource::pathMatches((WebCore::ContentSecurityPolicySource *)v5, (const WTF::URL *)v13);
    }
    else
    {
LABEL_20:
      v8 = 0;
    }
LABEL_21:
    v12 = v13[0];
    v13[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v6);
      else
        *(_DWORD *)v12 -= 2;
    }
    return v8;
  }
  v9 = *((_QWORD *)this + 15);
  if (!WebCore::ContentSecurityPolicySource::schemeMatches((WebCore::ContentSecurityPolicySource *)v9, a2))
    return 0;
  v10 = *(_QWORD *)(v9 + 16);
  if (v10 && *(_DWORD *)(v10 + 4) || *(_BYTE *)(v9 + 36))
  {
    if (WebCore::ContentSecurityPolicySource::hostMatches((WebCore::ContentSecurityPolicySource *)v9, a2)
      && WebCore::ContentSecurityPolicySource::portMatches((WebCore::ContentSecurityPolicySource *)v9, a2))
    {
      return WebCore::ContentSecurityPolicySource::pathMatches((WebCore::ContentSecurityPolicySource *)v9, a2);
    }
    return 0;
  }
  return 1;
}

uint64_t WebCore::ContentSecurityPolicy::allowJavaScriptURLs(uint64_t a1, uint64_t (**a2)(), uint64_t (**a3)(), uint64_t (**a4)(), uint64_t a5)
{
  uint64_t (*v9)();
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t (***v13)();
  uint64_t (**v14)();
  uint64_t v15;
  WebCore::ContentSecurityPolicyDirectiveList **v16;
  WebCore::ContentSecurityPolicyDirectiveList **v17;
  char v18;
  const WTF::String *v19;
  WebCore::ContentSecurityPolicyDirectiveList *v20;
  WebCore::ContentSecurityPolicySourceListDirective *v21;
  WTF::String *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void *v29;
  WTF *v30;
  uint64_t v31;
  char *v32;
  WTF *v33;
  WTF *v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  WTF::String *v39;

  v38 = a5;
  v37 = 0;
  v9 = *a4;
  if (*a4)
  {
    v10 = *((_QWORD *)v9 + 1);
    v11 = *((unsigned int *)v9 + 1) | ((unint64_t)((*((_DWORD *)v9 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v10 = 0;
    v11 = 0x100000000;
  }
  WebCore::generateHashesForContent((WTF *)&v35, v10, v11, *(_BYTE *)(a1 + 188));
  v13 = (uint64_t (***)())operator new(0x38uLL);
  v14 = &off_1E3403168;
  *v13 = &off_1E3403168;
  v13[1] = (uint64_t (**)())a1;
  v13[2] = a2;
  v13[3] = a4;
  v13[4] = a3;
  v13[5] = (uint64_t (**)())&v38;
  v13[6] = (uint64_t (**)())&v37;
  v15 = *(unsigned int *)(a1 + 148);
  if ((_DWORD)v15)
  {
    v16 = *(WebCore::ContentSecurityPolicyDirectiveList ***)(a1 + 136);
    v17 = &v16[v15];
    v18 = 1;
    v19 = (const WTF::String *)MEMORY[0x1E0CBEF70];
    while (1)
    {
      v20 = *v16;
      v21 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)*v16 + 19);
      if (qword_1EE2E4108)
      {
        if (qword_1EE2E4108 == 1)
        {
          *(_DWORD *)v19 += 2;
          v21 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(v20, v21, v19);
          v22 = v19;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v22 = v39;
          v21 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(v20, v21, v39);
          if (!v22)
            goto LABEL_10;
        }
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v12);
        else
          *(_DWORD *)v22 -= 2;
      }
      else
      {
        if (v21 || (v21 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)v20 + 17)) != 0)
        {
          v26 = (WTF::StringImpl *)*((_QWORD *)v21 + 4);
          *((_QWORD *)v21 + 4) = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v12);
            else
              *(_DWORD *)v26 -= 2;
          }
LABEL_11:
          if (*((_BYTE *)v21 + 120) && v36)
          {
            v23 = (unsigned __int8 *)v35;
            v24 = 24 * v36;
            while ((WTF::HashTable<WebCore::ResourceCryptographicDigest,WebCore::ResourceCryptographicDigest,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>>,WebCore::ResourceCryptographicDigest>((uint64_t *)v21 + 11, v23) & 1) == 0)
            {
              v23 += 24;
              v24 -= 24;
              if (!v24)
                goto LABEL_16;
            }
          }
          else
          {
LABEL_16:
            if (!*((_BYTE *)v21 + 115)
              || (v25 = *((_QWORD *)v21 + 11)) != 0 && *(_DWORD *)(v25 - 12)
              || *((_DWORD *)v21 + 19))
            {
              v18 &= *(_BYTE *)(*((_QWORD *)v21 + 3) + 17) != 0;
              ((void (*)(uint64_t (***)(), WebCore::ContentSecurityPolicySourceListDirective *))(*v13)[6])(v13, v21);
            }
          }
          goto LABEL_21;
        }
        v27 = *((_QWORD *)v20 + 7);
        if (v27)
        {
          v28 = *(WTF::StringImpl **)(v27 + 32);
          *(_QWORD *)(v27 + 32) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v12);
            else
              *(_DWORD *)v28 -= 2;
          }
        }
        v21 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)v20 + 7);
      }
LABEL_10:
      if (v21)
        goto LABEL_11;
LABEL_21:
      if (++v16 == v17)
      {
        v14 = *v13;
        goto LABEL_38;
      }
    }
  }
  v18 = 1;
LABEL_38:
  ((void (*)(uint64_t (***)()))v14[5])(v13);
  v30 = v35;
  if (v36)
  {
    v31 = 24 * v36;
    v32 = (char *)v35 + 8;
    do
    {
      v33 = *(WTF **)v32;
      if (*(_QWORD *)v32)
      {
        *(_QWORD *)v32 = 0;
        *((_DWORD *)v32 + 2) = 0;
        WTF::fastFree(v33, v29);
      }
      v32 += 24;
      v31 -= 24;
    }
    while (v31);
  }
  if (v30)
    WTF::fastFree(v30, v29);
  return v18 & 1;
}

uint64_t WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)const,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char v10;
  uint64_t (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  if (a2)
  {
    v9 = 8 * a2;
    v10 = 1;
    while (1)
    {
      v11 = *(uint64_t (**)(_QWORD *, uint64_t))a4;
      v12 = *(_QWORD *)(a4 + 8);
      v13 = (_QWORD *)(*a1 + (v12 >> 1));
      if ((v12 & 1) != 0)
        v11 = *(uint64_t (**)(_QWORD *, uint64_t))(*v13 + v11);
      v14 = v11(v13, a5);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)(a3 + 24);
        if (!v16)
        {
          v18 = std::__throw_bad_function_call[abi:sn180100]();
          return WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18, v19);
        }
        v10 &= *(_BYTE *)(*(_QWORD *)(v15 + 24) + 17) != 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
      }
      ++a1;
      v9 -= 8;
      if (!v9)
        return v10 & 1;
    }
  }
  v10 = 1;
  return v10 & 1;
}

uint64_t WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  char *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    v6 = (char *)v4 + 8;
    do
    {
      v7 = *(WTF **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
        WTF::fastFree(v7, a2);
      }
      v6 += 24;
      v5 -= 24;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebCore::ContentSecurityPolicy::allowInlineEventHandlers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD v17[2];
  _BYTE v18[23];
  char v19;
  uint64_t v20;
  _BYTE v21[24];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v20 = a5;
  if ((a6 & 1) != 0 || !*(_DWORD *)(a1 + 148))
    return 1;
  v19 = 0;
  v12 = *a4;
  if (*a4)
  {
    v13 = *(_QWORD *)(v12 + 8);
    v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v13 = 0;
    v14 = 0x100000000;
  }
  WebCore::generateHashesForContent((WTF *)v18, v13, v14, *(_BYTE *)(a1 + 188));
  v15 = operator new(0x38uLL);
  *v15 = &off_1E34031B0;
  v15[1] = a1;
  v15[2] = a2;
  v15[3] = a4;
  v15[4] = a3;
  v15[5] = &v20;
  v15[6] = &v19;
  v22 = v15;
  v17[0] = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForInlineEventHandlers;
  v17[1] = 0;
  v7 = WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)const,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>(*(_QWORD **)(a1 + 136), *(_DWORD *)(a1 + 148), (uint64_t)v21, (uint64_t)v17, (uint64_t)v18);
  (*(void (**)(_QWORD *))(*v15 + 40))(v15);
  WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v16);
  return v7;
}

WebCore::ContentSecurityPolicySourceListDirective *WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForInlineEventHandlers(WebCore::ContentSecurityPolicyDirectiveList *a1, uint64_t a2)
{
  WebCore::ContentSecurityPolicySourceListDirective *v4;
  WebCore::ContentSecurityPolicySourceListDirective *v5;
  WTF::StringImpl *v6;
  WebCore::ContentSecurityPolicySourceListDirective *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::String *v13;

  v4 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)a1 + 20);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(a1, v4, v13);
  v7 = v5;
  if (!v13)
  {
LABEL_4:
    if (!v5)
      return v7;
    goto LABEL_5;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v13, v6);
  if (!v7)
    return v7;
LABEL_5:
  if (*((_BYTE *)v7 + 120) && (v8 = *(unsigned int *)(a2 + 12), (_DWORD)v8))
  {
    v9 = *(unsigned __int8 **)a2;
    v10 = 24 * v8;
    while ((WTF::HashTable<WebCore::ResourceCryptographicDigest,WebCore::ResourceCryptographicDigest,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>>,WebCore::ResourceCryptographicDigest>((uint64_t *)v7 + 11, v9) & 1) == 0)
    {
      v9 += 24;
      v10 -= 24;
      if (!v10)
        goto LABEL_10;
    }
    return 0;
  }
  else
  {
LABEL_10:
    if (*((_BYTE *)v7 + 115))
    {
      v11 = *((_QWORD *)v7 + 11);
      if ((!v11 || !*(_DWORD *)(v11 - 12)) && !*((_DWORD *)v7 + 19))
        return 0;
    }
  }
  return v7;
}

uint64_t WebCore::ContentSecurityPolicy::allPoliciesWithDispositionAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::String const&)const,WTF::String&>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD *, uint64_t);
  uint64_t v11;
  _QWORD *v12;

  v4 = *(unsigned int *)(a1 + 148);
  if (!(_DWORD)v4)
    return 1;
  v8 = *(_QWORD *)(a1 + 136);
  v9 = 8 * v4;
  while (1)
  {
    if ((a2 != 1) != (*(_BYTE *)(*(_QWORD *)v8 + 17) != 0))
    {
      v10 = *(uint64_t (**)(_QWORD *, uint64_t))a3;
      v11 = *(_QWORD *)(a3 + 8);
      v12 = (_QWORD *)(*(_QWORD *)v8 + (v11 >> 1));
      if ((v11 & 1) != 0)
        v10 = *(uint64_t (**)(_QWORD *, uint64_t))(*v12 + v10);
      if (v10(v12, a4))
        break;
    }
    v8 += 8;
    v9 -= 8;
    if (!v9)
      return 1;
  }
  return 0;
}

WebCore::ContentSecurityPolicySourceListDirective *WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForScriptNonce(WebCore::ContentSecurityPolicyDirectiveList *this, WTF::StringImpl **a2)
{
  WebCore::ContentSecurityPolicySourceListDirective *v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  WebCore::ContentSecurityPolicySourceListDirective *v8;
  WTF::String *v10;

  v4 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)this + 19);
  if (!qword_1EE2E40F8)
  {
    v8 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v4, 0);
    goto LABEL_6;
  }
  if (qword_1EE2E40F8 == 1)
  {
    v5 = (const WTF::String *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v8 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v4, v5);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v10;
    v8 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v4, v10);
    if (!v10)
      goto LABEL_6;
  }
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v6);
  else
    *(_DWORD *)v5 -= 2;
LABEL_6:
  if (!v8
    || *a2
    && *((_DWORD *)*a2 + 1)
    && WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)v8 + 8, a2, v7))
  {
    return 0;
  }
  return v8;
}

WebCore::ContentSecurityPolicySourceListDirective *WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForStyleNonce(WebCore::ContentSecurityPolicyDirectiveList *this, WTF::StringImpl **a2)
{
  WebCore::ContentSecurityPolicySourceListDirective *v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  WebCore::ContentSecurityPolicySourceListDirective *v8;
  WTF::String *v10;

  v4 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)this + 21);
  if (!qword_1EE2E41B8)
  {
    v8 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveStyle(this, v4, 0);
    goto LABEL_6;
  }
  if (qword_1EE2E41B8 == 1)
  {
    v5 = (const WTF::String *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v8 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveStyle(this, v4, v5);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v10;
    v8 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveStyle(this, v4, v10);
    if (!v10)
      goto LABEL_6;
  }
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v6);
  else
    *(_DWORD *)v5 -= 2;
LABEL_6:
  if (!v8
    || *a2
    && *((_DWORD *)*a2 + 1)
    && WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)v8 + 8, a2, v7))
  {
    return 0;
  }
  return v8;
}

BOOL WebCore::ContentSecurityPolicyDirectiveList::strictDynamicIncluded(WebCore::ContentSecurityPolicyDirectiveList *this)
{
  WebCore::ContentSecurityPolicySourceListDirective *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  WebCore::ContentSecurityPolicySourceListDirective *v5;
  WTF::String *v7;

  v2 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)this + 19);
  if (qword_1EE2E40F8)
  {
    if (qword_1EE2E40F8 == 1)
    {
      v3 = (const WTF::String *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      v5 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v2, v3);
LABEL_4:
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v4);
      else
        *(_DWORD *)v3 -= 2;
      return v5 && *((_BYTE *)v5 + 119) != 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v3 = v7;
    v5 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v2, v7);
    if (v7)
      goto LABEL_4;
  }
  else
  {
    v5 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v2, 0);
  }
  return v5 && *((_BYTE *)v5 + 119) != 0;
}

uint64_t WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::String const&,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::URL const&,WebCore::ParserInserted)const,WTF::String&,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,WTF::URL const&,WebCore::ParserInserted&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  uint64_t v7;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  uint64_t (*v17)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::ContentSecurityPolicyDirectiveList *v24;

  v7 = *(unsigned int *)(a1 + 148);
  if ((_DWORD)v7)
  {
    v14 = *(_QWORD **)(a1 + 136);
    v15 = 8 * v7;
    v16 = 1;
    while (1)
    {
      v17 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))a3;
      v18 = *(_QWORD *)(a3 + 8);
      v19 = (_QWORD *)(*v14 + (v18 >> 1));
      if ((v18 & 1) != 0)
        v17 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))(*v19 + v17);
      v20 = v17(v19, a4, a5, a6, *a7);
      if (v20)
      {
        v21 = v20;
        v22 = *(_QWORD *)(a2 + 24);
        if (!v22)
        {
          v24 = (WebCore::ContentSecurityPolicyDirectiveList *)std::__throw_bad_function_call[abi:sn180100]();
          return WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForNonParserInsertedScripts(v24);
        }
        v16 &= *(_BYTE *)(*(_QWORD *)(v21 + 24) + 17) != 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
      }
      ++v14;
      v15 -= 8;
      if (!v15)
        return v16 & 1;
    }
  }
  v16 = 1;
  return v16 & 1;
}

WebCore::ContentSecurityPolicySourceListDirective *WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForNonParserInsertedScripts(WebCore::ContentSecurityPolicyDirectiveList *this, WTF::StringImpl **a2, uint64_t a3, const WTF::URL *a4, int a5)
{
  WebCore::ContentSecurityPolicySourceListDirective *v10;
  const WTF::String *v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WebCore::ContentSecurityPolicySourceListDirective *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v19;
  WTF::String *v20;

  v10 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)this + 19);
  if (qword_1EE2E4108)
  {
    if (qword_1EE2E4108 == 1)
    {
      v11 = (const WTF::String *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      v14 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v10, v11);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v11 = v20;
      v14 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v10, v20);
      if (!v20)
        goto LABEL_6;
    }
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
  else
  {
    v14 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v10, 0);
  }
LABEL_6:
  if (!v14)
    return v14;
  v15 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v15)
  {
    v16 = *(unsigned __int8 **)a3;
    v17 = 24 * v15;
    while ((WTF::HashTable<WebCore::ResourceCryptographicDigest,WebCore::ResourceCryptographicDigest,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>>,WebCore::ResourceCryptographicDigest>((uint64_t *)v14 + 11, v16) & 1) == 0)
    {
      v16 += 24;
      v17 -= 24;
      if (!v17)
        goto LABEL_11;
    }
    return 0;
  }
LABEL_11:
  if (*((_BYTE *)v14 + 119) && !a5
    || *a2
    && *((_DWORD *)*a2 + 1)
    && (WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)v14 + 8, a2, v13) & 1) != 0)
  {
    return 0;
  }
  if (*(_QWORD *)a4)
  {
    if (!*(_DWORD *)(*(_QWORD *)a4 + 4)
      || !WebCore::ContentSecurityPolicySourceList::matches((WebCore::ContentSecurityPolicySourceListDirective *)((char *)v14 + 40), a4, 0)|| WebCore::ContentSecurityPolicyDirectiveList::strictDynamicIncluded(this))
    {
      if (*(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
        return v14;
      goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  if (*((_BYTE *)v14 + 115))
  {
    v19 = *((_QWORD *)v14 + 11);
    if ((!v19 || !*(_DWORD *)(v19 - 12)) && !*((_DWORD *)v14 + 19))
      return 0;
  }
  return v14;
}

uint64_t WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::String const&,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)const,WTF::String&,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::ContentSecurityPolicyDirectiveList *v20;

  v5 = *(unsigned int *)(a1 + 148);
  if ((_DWORD)v5)
  {
    v10 = *(_QWORD **)(a1 + 136);
    v11 = 8 * v5;
    v12 = 1;
    while (1)
    {
      v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))a3;
      v14 = *(_QWORD *)(a3 + 8);
      v15 = (_QWORD *)(*v10 + (v14 >> 1));
      if ((v14 & 1) != 0)
        v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v15 + v13);
      v16 = v13(v15, a4, a5);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)(a2 + 24);
        if (!v18)
        {
          v20 = (WebCore::ContentSecurityPolicyDirectiveList *)std::__throw_bad_function_call[abi:sn180100]();
          return WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForUnsafeInlineScriptElement(v20);
        }
        v12 &= *(_BYTE *)(*(_QWORD *)(v17 + 24) + 17) != 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
      }
      ++v10;
      v11 -= 8;
      if (!v11)
        return v12 & 1;
    }
  }
  v12 = 1;
  return v12 & 1;
}

WebCore::ContentSecurityPolicySourceListDirective *WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForUnsafeInlineScriptElement(WebCore::ContentSecurityPolicyDirectiveList *this, WTF::StringImpl **a2, uint64_t a3)
{
  WebCore::ContentSecurityPolicySourceListDirective *v6;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WebCore::ContentSecurityPolicySourceListDirective *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::String *v16;

  v6 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)this + 19);
  if (qword_1EE2E4108)
  {
    if (qword_1EE2E4108 == 1)
    {
      v7 = (const WTF::String *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      v10 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v6, v7);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = v16;
      v10 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v6, v16);
      if (!v16)
        goto LABEL_6;
    }
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v8);
    else
      *(_DWORD *)v7 -= 2;
  }
  else
  {
    v10 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v6, 0);
  }
LABEL_6:
  if (v10)
  {
    v11 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v11)
    {
      v12 = *(unsigned __int8 **)a3;
      v13 = 24 * v11;
      while ((WTF::HashTable<WebCore::ResourceCryptographicDigest,WebCore::ResourceCryptographicDigest,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>>,WebCore::ResourceCryptographicDigest>((uint64_t *)v10 + 11, v12) & 1) == 0)
      {
        v12 += 24;
        v13 -= 24;
        if (!v13)
          goto LABEL_11;
      }
      return 0;
    }
LABEL_11:
    if (*a2
      && *((_DWORD *)*a2 + 1)
      && (WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)v10 + 8, a2, v9) & 1) != 0)
    {
      return 0;
    }
    if (*((_BYTE *)v10 + 115))
    {
      v14 = *((_QWORD *)v10 + 11);
      if ((!v14 || !*(_DWORD *)(v14 - 12)) && !*((_DWORD *)v10 + 19))
        return 0;
    }
  }
  return v10;
}

WebCore::ContentSecurityPolicySourceListDirective *WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForUnsafeInlineStyleAttribute(WebCore::ContentSecurityPolicyDirectiveList *a1, WTF::StringImpl **a2, uint64_t a3)
{
  WebCore::ContentSecurityPolicySourceListDirective *v6;
  WebCore::ContentSecurityPolicySourceListDirective *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WebCore::ContentSecurityPolicySourceListDirective *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::String *v16;

  v6 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)a1 + 22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveStyle(a1, v6, v16);
  v10 = v7;
  if (!v16)
  {
LABEL_4:
    if (!v7)
      return v10;
    goto LABEL_5;
  }
  if (*(_DWORD *)v16 != 2)
  {
    *(_DWORD *)v16 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v16, v8);
  if (!v10)
    return v10;
LABEL_5:
  if (*((_BYTE *)v10 + 120))
  {
    v11 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v11)
    {
      v12 = *(unsigned __int8 **)a3;
      v13 = 24 * v11;
      while ((WTF::HashTable<WebCore::ResourceCryptographicDigest,WebCore::ResourceCryptographicDigest,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>>,WebCore::ResourceCryptographicDigest>((uint64_t *)v10 + 11, v12) & 1) == 0)
      {
        v12 += 24;
        v13 -= 24;
        if (!v13)
          goto LABEL_10;
      }
      return 0;
    }
  }
LABEL_10:
  if (*a2
    && *((_DWORD *)*a2 + 1)
    && (WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)v10 + 8, a2, v9) & 1) != 0)
  {
    return 0;
  }
  if (*((_BYTE *)v10 + 115))
  {
    v14 = *((_QWORD *)v10 + 11);
    if ((!v14 || !*(_DWORD *)(v14 - 12)) && !*((_DWORD *)v10 + 19))
      return 0;
  }
  return v10;
}

WebCore::ContentSecurityPolicySourceListDirective *WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForUnsafeInlineStyleElement(WebCore::ContentSecurityPolicyDirectiveList *a1, WTF::StringImpl **a2, uint64_t a3)
{
  WebCore::ContentSecurityPolicySourceListDirective *v6;
  WebCore::ContentSecurityPolicySourceListDirective *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WebCore::ContentSecurityPolicySourceListDirective *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::String *v16;

  v6 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)a1 + 21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveStyle(a1, v6, v16);
  v10 = v7;
  if (!v16)
  {
LABEL_4:
    if (!v7)
      return v10;
    goto LABEL_5;
  }
  if (*(_DWORD *)v16 != 2)
  {
    *(_DWORD *)v16 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v16, v8);
  if (!v10)
    return v10;
LABEL_5:
  v11 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v11)
  {
    v12 = *(unsigned __int8 **)a3;
    v13 = 24 * v11;
    while ((WTF::HashTable<WebCore::ResourceCryptographicDigest,WebCore::ResourceCryptographicDigest,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>>,WebCore::ResourceCryptographicDigest>((uint64_t *)v10 + 11, v12) & 1) == 0)
    {
      v12 += 24;
      v13 -= 24;
      if (!v13)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  if (*a2
    && *((_DWORD *)*a2 + 1)
    && (WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)v10 + 8, a2, v9) & 1) != 0)
  {
    return 0;
  }
  if (*((_BYTE *)v10 + 115))
  {
    v14 = *((_QWORD *)v10 + 11);
    if ((!v14 || !*(_DWORD *)(v14 - 12)) && !*((_DWORD *)v10 + 19))
      return 0;
  }
  return v10;
}

uint64_t WebCore::ContentSecurityPolicy::allowEval(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  char v6;
  uint64_t v7;
  WTF::StringImpl *v9;
  _QWORD *v10;
  uint64_t v11;
  WebCore::ContentSecurityPolicyDirectiveList **v12;
  uint64_t v13;
  char v15;
  char v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[0] = a4;
  v18[1] = a5;
  v17 = a2;
  v16 = a3;
  v6 = 1;
  v7 = *(unsigned int *)(a1 + 148);
  if ((_DWORD)v7 && (a6 & 1) == 0)
  {
    v15 = 0;
    v10 = operator new(0x30uLL);
    *v10 = &off_1E34032D0;
    v10[1] = &v16;
    v10[2] = a1;
    v10[3] = &v17;
    v10[4] = v18;
    v10[5] = &v15;
    v11 = 8 * v7;
    v12 = *(WebCore::ContentSecurityPolicyDirectiveList ***)(a1 + 136);
    do
    {
      v13 = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForUnsafeEval(*v12, v9);
      if (v13)
      {
        v6 &= *(_BYTE *)(*(_QWORD *)(v13 + 24) + 17) != 0;
        (*(void (**)(_QWORD *, uint64_t))(*v10 + 48))(v10, v13);
      }
      ++v12;
      v11 -= 8;
    }
    while (v11);
    (*(void (**)(_QWORD *))(*v10 + 40))(v10);
  }
  return v6 & 1;
}

uint64_t WebCore::ContentSecurityPolicy::allowFrameAncestors(WebCore::ContentSecurityPolicy *this, const WebCore::LocalFrame *a2, const WTF::URL *a3, char a4)
{
  uint64_t v4;
  _QWORD *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD v14[2];
  uint64_t v15;
  WTF::StringImpl *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = 1;
  if (!*((_DWORD *)this + 37)
    || (a4 & 1) != 0
    || (const WebCore::LocalFrame *)WebCore::FrameTree::top((const WebCore::LocalFrame *)((char *)a2 + 48)) == a2)
  {
    return v4;
  }
  v16 = 0;
  v15 = 0xFFFFFFFFLL;
  v9 = operator new(0x28uLL);
  *v9 = &off_1E3403318;
  v9[1] = a3;
  v9[2] = this;
  v9[3] = &v16;
  v9[4] = &v15;
  v18 = v9;
  v14[0] = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForFrameAncestor;
  v14[1] = 0;
  v4 = WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WebCore::LocalFrame const&)const,WebCore::LocalFrame const&>((uint64_t)this, (uint64_t)v17, (uint64_t)v14, (uint64_t)a2);
  v11 = v18;
  if (v18 == v17)
  {
    v12 = 4;
    v11 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_9;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_9:
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v4;
}

uint64_t WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WebCore::LocalFrame const&)const,WebCore::LocalFrame const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::ContentSecurityPolicyDirectiveList *v18;
  const WebCore::LocalFrame *v19;

  v4 = *(unsigned int *)(a1 + 148);
  if ((_DWORD)v4)
  {
    v8 = *(_QWORD **)(a1 + 136);
    v9 = 8 * v4;
    v10 = 1;
    while (1)
    {
      v11 = *(uint64_t (**)(_QWORD *, uint64_t))a3;
      v12 = *(_QWORD *)(a3 + 8);
      v13 = (_QWORD *)(*v8 + (v12 >> 1));
      if ((v12 & 1) != 0)
        v11 = *(uint64_t (**)(_QWORD *, uint64_t))(*v13 + v11);
      v14 = v11(v13, a4);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)(a2 + 24);
        if (!v16)
        {
          v18 = (WebCore::ContentSecurityPolicyDirectiveList *)std::__throw_bad_function_call[abi:sn180100]();
          return WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForFrameAncestor(v18, v19);
        }
        v10 &= *(_BYTE *)(*(_QWORD *)(v15 + 24) + 17) != 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
      }
      ++v8;
      v9 -= 8;
      if (!v9)
        return v10 & 1;
    }
  }
  v10 = 1;
  return v10 & 1;
}

uint64_t WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForFrameAncestor(WebCore::ContentSecurityPolicyDirectiveList *this, const WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::ContentSecurityPolicySourceList *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22[5];

  v2 = *((_QWORD *)this + 10);
  if (!v2)
    return 0;
  v3 = *((_QWORD *)a2 + 7);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v6 = (WebCore::ContentSecurityPolicySourceList *)(v2 + 40);
  while (1)
  {
    if (*(_BYTE *)(v4 + 144))
      goto LABEL_25;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v4 + 296) + 192), a2);
    v8 = v7;
    v22[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v22);
    v9 = *(unsigned int *)(v8 + 32);
    if ((_DWORD)v9 == 1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      goto LABEL_10;
    }
    if ((_DWORD)v9 == -1)
      break;
    v19 = (WTF::StringImpl *)&v21;
    v10 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v9])(&v19, v8 + 8);
    if (MEMORY[0x19AEA53F4](*v10, "file", 4) && *(_BYTE *)(v8 + 59))
      WTF::String::String(&v21, (uint64_t)"null", 5);
    else
      WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v8 + 8), &v21);
LABEL_10:
    MEMORY[0x19AEA52F8](&v19, v22, &v21, 0);
    v11 = v21;
    v21 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v22[0];
    v22[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, a2);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v19;
    if ((v20 & 1) != 0)
    {
      if (v19)
      {
        v15 = *((_DWORD *)v19 + 1);
        if (v15)
        {
          v15 = WebCore::ContentSecurityPolicySourceList::matches(v6, (const WTF::URL *)&v19, 0);
          v13 = v19;
        }
      }
      else
      {
        v15 = 0;
      }
      v14 = v15 ^ 1;
    }
    else
    {
      v14 = 1;
    }
    v19 = 0;
    if (!v13)
      goto LABEL_24;
    if (*(_DWORD *)v13 != 2)
    {
      *(_DWORD *)v13 -= 2;
LABEL_24:
      if (v14)
        return *((_QWORD *)this + 10);
      goto LABEL_25;
    }
    WTF::StringImpl::destroy(v13, a2);
    if (v14)
      return *((_QWORD *)this + 10);
LABEL_25:
    v16 = *(_QWORD *)(v4 + 56);
    if (!v16)
      return 0;
    result = 0;
    v4 = *(_QWORD *)(v16 + 8);
    if (!v4)
      return result;
  }
  v18 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::ContentSecurityPolicy::allowFrameAncestors(v18);
}

uint64_t WebCore::ContentSecurityPolicy::allowFrameAncestors(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _QWORD v13[2];
  uint64_t v14;
  WTF::StringImpl *v15;
  _BYTE v16[24];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 148);
  v5 = 1;
  if (v4)
  {
    if ((a4 & 1) == 0)
    {
      if (*(_DWORD *)(a2 + 12))
      {
        v15 = 0;
        v14 = 0xFFFFFFFFLL;
        v10 = operator new(0x28uLL);
        *v10 = &off_1E3403360;
        v10[1] = a3;
        v10[2] = a1;
        v10[3] = &v15;
        v10[4] = &v14;
        v17 = v10;
        v13[0] = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForFrameAncestorOrigins;
        v13[1] = 0;
        v5 = WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)const,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>(*(_QWORD **)(a1 + 136), v4, (uint64_t)v16, (uint64_t)v13, a2);
        (*(void (**)(_QWORD *))(*v10 + 40))(v10);
        v12 = v15;
        v15 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
  }
  return v5;
}

uint64_t WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForFrameAncestorOrigins(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::ContentSecurityPolicySourceList *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t result;
  WebCore::ContentSecurityPolicy *v17;
  WTF::StringImpl **v18;
  const WTF::String *v19;
  const WTF::URL *v20;
  char v21;
  WTF::StringImpl *v22;
  char v23;
  WTF::StringImpl *v24[5];
  char v25;
  WTF::StringImpl *v26;

  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
    return 0;
  v3 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v3)
    return 0;
  v5 = (WebCore::ContentSecurityPolicySourceList *)(v2 + 40);
  v6 = *(uint64_t **)a2;
  v7 = 8 * v3;
  while (1)
  {
    v8 = *v6;
    v24[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v24);
    v9 = *(unsigned int *)(v8 + 32);
    if ((_DWORD)v9 == 1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      goto LABEL_8;
    }
    if ((_DWORD)v9 == -1)
      break;
    v26 = (WTF::StringImpl *)&v25;
    v10 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v9])(&v26, v8 + 8);
    if (MEMORY[0x19AEA53F4](*v10, "file", 4) && *(_BYTE *)(v8 + 59))
      WTF::String::String(&v26, (uint64_t)"null", 5);
    else
      WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v8 + 8), &v26);
LABEL_8:
    MEMORY[0x19AEA52F8](&v22, v24, &v26, 0);
    v12 = v26;
    v26 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v24[0];
    v24[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v22;
    if ((v23 & 1) == 0)
    {
LABEL_30:
      v22 = 0;
      if (v14)
      {
LABEL_31:
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v11);
        else
          *(_DWORD *)v14 -= 2;
      }
      return *(_QWORD *)(a1 + 80);
    }
    if (!v22)
      return *(_QWORD *)(a1 + 80);
    if (!*((_DWORD *)v22 + 1))
    {
      v22 = 0;
      goto LABEL_31;
    }
    v15 = WebCore::ContentSecurityPolicySourceList::matches(v5, (const WTF::URL *)&v22, 0);
    v14 = v22;
    if (!v15)
      goto LABEL_30;
    v22 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = 0;
    ++v6;
    v7 -= 8;
    if (!v7)
      return result;
  }
  v17 = (WebCore::ContentSecurityPolicy *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::ContentSecurityPolicy::allowPluginType(v17, v18, v19, v20, v21);
}

uint64_t WebCore::ContentSecurityPolicy::allowPluginType(WebCore::ContentSecurityPolicy *this, WTF::StringImpl **a2, const WTF::String *a3, const WTF::URL *a4, char a5)
{
  uint64_t v5;
  char v6;
  _QWORD *v11;
  WebCore::ContentSecurityPolicyDirectiveList **v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v18;
  WTF::StringImpl *v19;

  v5 = *((unsigned int *)this + 37);
  v6 = 1;
  if ((_DWORD)v5 && (a5 & 1) == 0)
  {
    v19 = 0;
    v18 = 0xFFFFFFFFLL;
    v11 = operator new(0x28uLL);
    *v11 = &off_1E34033A8;
    v11[1] = a4;
    v11[2] = this;
    v11[3] = &v19;
    v11[4] = &v18;
    v12 = (WebCore::ContentSecurityPolicyDirectiveList **)*((_QWORD *)this + 17);
    v13 = 8 * v5;
    do
    {
      v14 = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForPluginType(*v12, a2, a3);
      if (v14)
      {
        v6 &= *(_BYTE *)(*(_QWORD *)(v14 + 24) + 17) != 0;
        (*(void (**)(_QWORD *, uint64_t))(*v11 + 48))(v11, v14);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
    (*(void (**)(_QWORD *))(*v11 + 40))(v11);
    v16 = v19;
    v19 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  return v6 & 1;
}

uint64_t WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForPluginType(WebCore::ContentSecurityPolicyDirectiveList *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v7;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  unsigned __int8 *v17;
  unint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;

  v3 = *((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
    return *((_QWORD *)this + 3);
  v7 = *(unsigned int *)(v5 + 4);
  if (!(_DWORD)v7)
    return *((_QWORD *)this + 3);
  v9 = *(unsigned __int8 **)(v5 + 8);
  v10 = (unint64_t)*(unsigned int *)(v5 + 16) >> 2;
  v11 = v7 & 0xFFFFFFFEFFFFFFFFLL | ((v10 & 1) << 32);
  v12 = (v7 - 1);
  if ((v10 & 1) == 0)
  {
    v15 = 0;
    v14 = v9;
    while (1)
    {
      v20 = *(unsigned __int16 *)v14;
      if (v20 > 0xFF)
      {
        v39 = v9;
        v35 = v12;
        v37 = v11;
        v29 = v15;
        v31 = v7;
        v33 = v14;
        v21 = MEMORY[0x19AEA858C](v20);
        v14 = v33;
        v12 = v35;
        v15 = v29;
        v7 = v31;
        v11 = v37;
        v22 = v21;
        v9 = v39;
        if (v22 != 9)
          goto LABEL_32;
      }
      else if ((v20 - 9) >= 5 && (_DWORD)v20 != 32)
      {
LABEL_32:
        if (!(_DWORD)v12)
          goto LABEL_51;
        v23 = v12;
        while (v23 < v7)
        {
          v24 = *(unsigned __int16 *)&v9[2 * v23];
          if (v24 > 0xFF)
          {
            v40 = v9;
            v36 = v12;
            v38 = v11;
            v30 = v15;
            v32 = v7;
            v34 = v14;
            v28 = v23;
            v25 = MEMORY[0x19AEA858C](v24);
            v23 = v28;
            v15 = v30;
            v14 = v34;
            v12 = v36;
            v7 = v32;
            v11 = v38;
            v26 = v25;
            v9 = v40;
            if (v26 != 9)
              goto LABEL_41;
          }
          else if ((v24 - 9) >= 5 && (_DWORD)v24 != 32)
          {
LABEL_41:
            if ((_DWORD)v15 || (_DWORD)v23 != (_DWORD)v12)
              goto LABEL_43;
            goto LABEL_19;
          }
          if (!(_DWORD)--v23)
            goto LABEL_41;
        }
        do
        {
LABEL_50:
          __break(1u);
LABEL_51:
          if (!(_DWORD)v15)
            break;
          LODWORD(v23) = 0;
LABEL_43:
          v11 = (v23 - v15 + 1);
          v9 = v14;
        }
        while (v7 - v15 < v11);
        goto LABEL_19;
      }
      ++v15;
      v14 += 2;
      if (v7 == v15)
      {
        v11 = 0x100000000;
        v9 = "";
        goto LABEL_19;
      }
    }
  }
  v13 = 0;
  while (1)
  {
    v14 = (unsigned __int8 *)v9[v13];
    if (((_DWORD)v14 - 9) >= 5 && (_DWORD)v14 != 32)
      break;
    if (v7 == ++v13)
    {
      v11 = 0x100000000;
      v9 = "";
      goto LABEL_19;
    }
  }
  if ((_DWORD)v7 != 1)
  {
    v15 = (v7 - 1);
    while (v15 < v7)
    {
      v14 = (unsigned __int8 *)v9[v15];
      if (((_DWORD)v14 - 9) < 5 || (_DWORD)v14 == 32)
      {
        if ((_DWORD)--v15)
          continue;
      }
      if ((_DWORD)v13 || (_DWORD)v15 != (_DWORD)v12)
        goto LABEL_48;
      goto LABEL_19;
    }
    goto LABEL_50;
  }
  if ((_DWORD)v13)
  {
    v15 = 0;
LABEL_48:
    v27 = (v15 - v13 + 1);
    v7 -= v13;
    if (v7 < v27)
      goto LABEL_50;
    v9 += v13;
    v11 = v27 | 0x100000000;
  }
LABEL_19:
  v16 = *a2;
  if (*a2)
  {
    v17 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
    v18 = *((unsigned int *)v16 + 1) | ((unint64_t)((*((_DWORD *)v16 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v17 = 0;
    v18 = 0x100000000;
  }
  if (WTF::operator==(v9, v11, v17, v18)
    && (WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v3 + 32), a2, v19) & 1) != 0)
  {
    return 0;
  }
  else
  {
    return *((_QWORD *)this + 3);
  }
}

uint64_t WebCore::ContentSecurityPolicy::allowObjectFromSource(uint64_t a1, WTF::URL *this, char a3, WTF::URL *a4)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  char v13;
  int v14;
  char v15;
  WTF::URL *v16;
  uint64_t (***v17)();
  uint64_t (**v18)();
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v26;
  WTF::StringImpl *v27[2];

  if (!*(_DWORD *)(a1 + 148))
    goto LABEL_12;
  v27[0] = (WTF::StringImpl *)WTF::URL::protocol(this);
  v27[1] = v8;
  if (!v27[0])
    goto LABEL_15;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::schemeRegistryLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
LABEL_7:
  {
    WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes = 0;
  }
  v12 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes, (unsigned __int8 **)v27, v9, v10);
  v13 = v12;
  v14 = __ldxr(WebCore::schemeRegistryLock);
  if (v14 != 1)
  {
    __clrex();
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
    if ((v13 & 1) != 0)
      goto LABEL_12;
    goto LABEL_15;
  }
  if (__stlxr(0, WebCore::schemeRegistryLock))
    goto LABEL_14;
  if ((v12 & 1) != 0)
  {
LABEL_12:
    v15 = 1;
    return v15 & 1;
  }
LABEL_15:
  v27[0] = 0;
  v26 = 0xFFFFFFFFLL;
  if (*(_QWORD *)a4)
    v16 = a4;
  else
    v16 = this;
  v17 = (uint64_t (***)())operator new(0x30uLL);
  v18 = &off_1E34033F0;
  *v17 = &off_1E34033F0;
  v17[1] = (uint64_t (**)())this;
  v17[2] = (uint64_t (**)())a1;
  v17[3] = (uint64_t (**)())v16;
  v17[4] = (uint64_t (**)())v27;
  v17[5] = (uint64_t (**)())&v26;
  v19 = *(unsigned int *)(a1 + 148);
  if ((_DWORD)v19)
  {
    v20 = *(uint64_t **)(a1 + 136);
    v21 = 8 * v19;
    v15 = 1;
    do
    {
      v22 = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForObjectSource(*v20, this, a3, 1);
      if (v22)
      {
        v15 &= *(_BYTE *)(*(_QWORD *)(v22 + 24) + 17) != 0;
        ((void (*)(uint64_t (***)(), uint64_t))(*v17)[6])(v17, v22);
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
    v18 = *v17;
  }
  else
  {
    v15 = 1;
  }
  ((void (*)(uint64_t (***)()))v18[5])(v17);
  v24 = v27[0];
  v27[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  return v15 & 1;
}

uint64_t WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForObjectSource(uint64_t a1, const WTF::URL *a2, char a3, char a4)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  if ((WTF::URL::protocolIs() & 1) != 0)
    return 0;
  v9 = *(_QWORD *)(a1 + 120);
  if (qword_1EE2E4168)
  {
    v8 = (WTF::StringImpl *)(qword_1EE2E4168 - 1);
    if (qword_1EE2E4168 == 1)
    {
      v10 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      v11 = *MEMORY[0x1E0CBEF70] + 2;
      *MEMORY[0x1E0CBEF70] = v11;
      if (v9)
      {
LABEL_7:
        *(_DWORD *)v10 = v11 + 2;
        goto LABEL_8;
      }
      v20 = *(_QWORD *)(a1 + 56);
      v14 = (uint64_t *)(a1 + 56);
      v19 = v20;
      if (v20)
      {
        v16 = (WTF::StringImpl **)(v19 + 32);
LABEL_15:
        *(_DWORD *)v10 = v11 + 2;
        goto LABEL_16;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v10 = v23;
      if (v9)
      {
        if (!v23)
          goto LABEL_8;
        v11 = *(_DWORD *)v23;
        goto LABEL_7;
      }
      v15 = *(_QWORD *)(a1 + 56);
      v14 = (uint64_t *)(a1 + 56);
      v13 = v15;
      if (v15)
      {
        v16 = (WTF::StringImpl **)(v13 + 32);
        if (!v23)
          goto LABEL_16;
        v11 = *(_DWORD *)v23;
        goto LABEL_15;
      }
    }
LABEL_19:
    v9 = *v14;
    goto LABEL_20;
  }
  if (!v9)
  {
    v22 = *(_QWORD *)(a1 + 56);
    v14 = (uint64_t *)(a1 + 56);
    v21 = v22;
    if (v22)
    {
      v10 = 0;
      v16 = (WTF::StringImpl **)(v21 + 32);
LABEL_16:
      v17 = *v16;
      *v16 = v10;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v8);
        else
          *(_DWORD *)v17 -= 2;
      }
      goto LABEL_19;
    }
    v10 = 0;
    goto LABEL_19;
  }
  v10 = 0;
LABEL_8:
  v12 = *(WTF::StringImpl **)(v9 + 32);
  *(_QWORD *)(v9 + 32) = v10;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v8);
      if (!v10)
        goto LABEL_23;
    }
    else
    {
      *(_DWORD *)v12 -= 2;
      if (!v10)
        goto LABEL_23;
    }
LABEL_21:
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
    goto LABEL_23;
  }
LABEL_20:
  if (v10)
    goto LABEL_21;
LABEL_23:
  if (!v9)
    return 0;
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    if ((WebCore::ContentSecurityPolicySourceList::matches((WebCore::ContentSecurityPolicySourceList *)(v9 + 40), a2, a3) & 1) == 0)return v9;
    return 0;
  }
  if ((a4 & 1) != 0 && !*(_BYTE *)(v9 + 118))
    return 0;
  return v9;
}

uint64_t WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL)const,WTF::URL const&,BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t (*v13)(_QWORD *, uint64_t, _QWORD);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v5 = *(unsigned int *)(a1 + 148);
  if ((_DWORD)v5)
  {
    v10 = *(_QWORD **)(a1 + 136);
    v11 = 8 * v5;
    v12 = 1;
    while (1)
    {
      v13 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))a3;
      v14 = *(_QWORD *)(a3 + 8);
      v15 = (_QWORD *)(*v10 + (v14 >> 1));
      if ((v14 & 1) != 0)
        v13 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v15 + v13);
      v16 = v13(v15, a4, *a5);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)(a2 + 24);
        if (!v18)
        {
          v20 = std::__throw_bad_function_call[abi:sn180100]();
          return WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*&)(WTF::URL const&,BOOL)const,WTF::URL const&,BOOL>(v20);
        }
        v12 &= *(_BYTE *)(*(_QWORD *)(v17 + 24) + 17) != 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
      }
      ++v10;
      v11 -= 8;
      if (!v11)
        return v12 & 1;
    }
  }
  v12 = 1;
  return v12 & 1;
}

uint64_t WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*&)(WTF::URL const&,BOOL)const,WTF::URL const&,BOOL>(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v11;
  char v12;
  uint64_t (*v13)(_QWORD *, uint64_t, _QWORD);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  WTF::URL *v21;

  if (a2)
  {
    v11 = 8 * a2;
    v12 = 1;
    while (1)
    {
      v13 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))a4;
      v14 = *(_QWORD *)(a4 + 8);
      v15 = (_QWORD *)(*a1 + (v14 >> 1));
      if ((v14 & 1) != 0)
        v13 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v15 + v13);
      v16 = v13(v15, a5, *a6);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
        {
          v20 = std::__throw_bad_function_call[abi:sn180100]();
          return WebCore::ContentSecurityPolicy::allowWorkerFromSource(v20, v21);
        }
        v12 &= *(_BYTE *)(*(_QWORD *)(v17 + 24) + 17) != 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
      }
      ++a1;
      v11 -= 8;
      if (!v11)
        return v12 & 1;
    }
  }
  v12 = 1;
  return v12 & 1;
}

uint64_t WebCore::ContentSecurityPolicy::allowWorkerFromSource(uint64_t a1, WTF::URL *this, unsigned __int8 a3, WTF::URL *a4)
{
  uint64_t v4;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unsigned __int8 v19;
  _QWORD v20[2];
  uint64_t v21;
  WTF::StringImpl *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 148))
    return 1;
  v10 = (unsigned __int8 *)WTF::URL::protocol(this);
  if ((WebCore::LegacySchemeRegistry::schemeShouldBypassContentSecurityPolicy(v10, v11, v12, v13) & 1) != 0)
    return 1;
  v22 = 0;
  if (!*(_QWORD *)a4)
    a4 = this;
  v21 = 0xFFFFFFFFLL;
  v14 = operator new(0x30uLL);
  *v14 = &off_1E34034C8;
  v14[1] = this;
  v14[2] = a1;
  v14[3] = a4;
  v14[4] = &v22;
  v14[5] = &v21;
  v24 = v14;
  v20[0] = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForWorker;
  v20[1] = 0;
  v19 = a3;
  v4 = WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL)const,WTF::URL const&,BOOL>(a1, (uint64_t)v23, (uint64_t)v20, (uint64_t)this, &v19);
  v16 = v24;
  if (v24 == v23)
  {
    v17 = 4;
    v16 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_12;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_12:
  v18 = v22;
  v22 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  return v4;
}

WebCore::ContentSecurityPolicySourceListDirective *WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForWorker(WebCore::ContentSecurityPolicyDirectiveList *this, const WTF::URL *a2, char a3)
{
  WebCore::ContentSecurityPolicySourceListDirective *v6;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  WebCore::ContentSecurityPolicySourceListDirective *v9;
  WTF::String *v11;

  v6 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)this + 24);
  if (!qword_1EE2E41C8)
  {
    v9 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveForWorkerSrc(this, v6, 0);
    goto LABEL_6;
  }
  if (qword_1EE2E41C8 == 1)
  {
    v7 = (const WTF::String *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v9 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveForWorkerSrc(this, v6, v7);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v11;
    v9 = WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveForWorkerSrc(this, v6, v11);
    if (!v11)
      goto LABEL_6;
  }
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v8);
  else
    *(_DWORD *)v7 -= 2;
LABEL_6:
  if (!v9
    || *(_QWORD *)a2
    && *(_DWORD *)(*(_QWORD *)a2 + 4)
    && (WebCore::ContentSecurityPolicySourceList::matches((WebCore::ContentSecurityPolicySourceListDirective *)((char *)v9 + 40), a2, a3) & 1) != 0)
  {
    return 0;
  }
  if (*((_BYTE *)v9 + 119))
    return 0;
  return v9;
}

WTF *WebCore::parseSubResourceIntegrityIntoDigests(WebCore *this, const WTF::String *a2)
{
  WTF *result;
  void *v4;
  unsigned int v5;
  int v6;
  WTF *v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  WTF *v17;
  unint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF *v32;
  int v33;
  unsigned int v34;
  char v35;
  _BYTE v36[8];
  WTF *v37;
  uint64_t v38;
  _BYTE v39[8];
  WTF *v40;
  uint64_t v41;
  char v42;

  result = WebCore::parseIntegrityMetadata(a2, (uint64_t)&v32);
  if (!v35)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return result;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v5 = v34;
  if (!v34)
    goto LABEL_14;
  if (v34 >= 0xAAAAAAB)
    goto LABEL_47;
  v6 = 24 * v34;
  result = (WTF *)WTF::fastMalloc((WTF *)(24 * v34));
  v5 = (v6 & 0xFFFFFFF8) / 0x18;
  *((_DWORD *)this + 2) = v5;
  *(_QWORD *)this = result;
  if (v34)
  {
    v7 = result;
    v8 = 0;
    v9 = v32;
    v10 = 16 * v34;
    do
    {
      result = (WTF *)WebCore::decodeEncodedResourceCryptographicDigest(v9, (uint64_t)v39);
      if (v42)
      {
        v36[0] = v39[0];
        v37 = v40;
        v11 = v41;
        v40 = 0;
        v41 = 0;
        v38 = v11;
        if (v8 == *((_DWORD *)this + 2))
        {
          v12 = WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)this, v8 + 1, (unint64_t)v36);
          v13 = *((_DWORD *)this + 3);
          v7 = *(WTF **)this;
          v14 = *(_QWORD *)this + 24 * v13;
          *(_BYTE *)v14 = *(_BYTE *)v12;
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 16) = 0;
          v15 = *(_QWORD *)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          *(_QWORD *)(v14 + 8) = v15;
          LODWORD(v15) = *(_DWORD *)(v12 + 16);
          *(_DWORD *)(v12 + 16) = 0;
          *(_DWORD *)(v14 + 16) = v15;
          LODWORD(v15) = *(_DWORD *)(v12 + 20);
          *(_DWORD *)(v12 + 20) = 0;
          *(_DWORD *)(v14 + 20) = v15;
        }
        else
        {
          v16 = (char *)v7 + 24 * v8;
          *v16 = v39[0];
          *((_QWORD *)v16 + 1) = 0;
          *((_QWORD *)v16 + 2) = 0;
          v17 = v37;
          v37 = 0;
          *((_QWORD *)v16 + 1) = v17;
          *((_DWORD *)v16 + 4) = v38;
          LODWORD(v17) = HIDWORD(v38);
          HIDWORD(v38) = 0;
          *((_DWORD *)v16 + 5) = (_DWORD)v17;
          v13 = *((_DWORD *)this + 3);
        }
        v8 = v13 + 1;
        *((_DWORD *)this + 3) = v13 + 1;
        result = v37;
        if (v37)
        {
          v37 = 0;
          LODWORD(v38) = 0;
          result = (WTF *)WTF::fastFree(result, v4);
        }
      }
      v9 = (WTF *)((char *)v9 + 16);
      v10 -= 16;
    }
    while (v10);
    v18 = v8;
    v5 = *((_DWORD *)this + 2);
  }
  else
  {
LABEL_14:
    v8 = 0;
    v18 = 0;
  }
  if (v18 < v5)
  {
    v19 = *(WTF **)this;
    if (v18 < v8)
    {
      v20 = 24 * v8 - 24 * v18;
      v21 = (uint64_t)v19 + 24 * v18 + 8;
      do
      {
        result = *(WTF **)v21;
        if (*(_QWORD *)v21)
        {
          *(_QWORD *)v21 = 0;
          *(_DWORD *)(v21 + 8) = 0;
          result = (WTF *)WTF::fastFree(result, v4);
        }
        v21 += 24;
        v20 -= 24;
      }
      while (v20);
      *((_DWORD *)this + 3) = v18;
      v8 = v18;
    }
    v22 = v19;
    if (!v18)
      goto LABEL_30;
    if (v18 < 0xAAAAAAB)
    {
      v23 = (WTF *)(24 * v18);
      result = (WTF *)WTF::fastMalloc(v23);
      v22 = result;
      *((_DWORD *)this + 2) = (v23 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)this = result;
      if (v8 && result != v19)
      {
        v24 = 0;
        v25 = 24 * v8;
        do
        {
          v26 = (char *)v22 + v24;
          v27 = (char *)v19 + v24;
          *v26 = *((_BYTE *)v19 + v24);
          *((_QWORD *)v26 + 1) = 0;
          *((_QWORD *)v26 + 2) = 0;
          v28 = *(_QWORD *)((char *)v19 + v24 + 8);
          *((_QWORD *)v27 + 1) = 0;
          *((_QWORD *)v26 + 1) = v28;
          LODWORD(v28) = *(_DWORD *)((char *)v19 + v24 + 16);
          *((_DWORD *)v27 + 4) = 0;
          *((_DWORD *)v26 + 4) = v28;
          LODWORD(v28) = *(_DWORD *)((char *)v19 + v24 + 20);
          *((_DWORD *)v27 + 5) = 0;
          *((_DWORD *)v26 + 5) = v28;
          result = *(WTF **)((char *)v19 + v24 + 8);
          if (result)
          {
            *((_QWORD *)v27 + 1) = 0;
            *((_DWORD *)v27 + 4) = 0;
            result = (WTF *)WTF::fastFree(result, v4);
          }
          v24 += 24;
        }
        while (v25 != v24);
      }
LABEL_30:
      if (v19)
      {
        if (v22 == v19)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
        }
        result = (WTF *)WTF::fastFree(v19, v4);
      }
      goto LABEL_34;
    }
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x19607B61CLL);
  }
LABEL_34:
  if (v35)
  {
    result = v32;
    if (v34)
    {
      v29 = 16 * v34;
      v30 = (WTF::StringImpl **)((char *)v32 + 8);
      do
      {
        v31 = *v30;
        *v30 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v4);
          else
            *(_DWORD *)v31 -= 2;
        }
        v30 += 2;
        v29 -= 16;
      }
      while (v29);
      result = v32;
    }
    if (result)
    {
      v32 = 0;
      v33 = 0;
      return (WTF *)WTF::fastFree(result, v4);
    }
  }
  return result;
}

uint64_t WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)const,WTF::URL const&,BOOL,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,WTF::String&>(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  char v16;
  uint64_t (*v17)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::ContentSecurityPolicyDirectiveList *v24;

  if (a2)
  {
    v15 = 8 * a2;
    v16 = 1;
    while (1)
    {
      v17 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t))a4;
      v18 = *(_QWORD *)(a4 + 8);
      v19 = (_QWORD *)(*a1 + (v18 >> 1));
      if ((v18 & 1) != 0)
        v17 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t))(*v19 + v17);
      v20 = v17(v19, a5, *a6, a7, a8);
      if (v20)
      {
        v21 = v20;
        v22 = *(_QWORD *)(a3 + 24);
        if (!v22)
        {
          v24 = (WebCore::ContentSecurityPolicyDirectiveList *)std::__throw_bad_function_call[abi:sn180100]();
          return WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForScript(v24);
        }
        v16 &= *(_BYTE *)(*(_QWORD *)(v21 + 24) + 17) != 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
      }
      ++a1;
      v15 -= 8;
      if (!v15)
        return v16 & 1;
    }
  }
  v16 = 1;
  return v16 & 1;
}

uint64_t *WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForScript(WebCore::ContentSecurityPolicyDirectiveList *this, const WTF::URL *a2, char a3, uint64_t a4, WTF::StringImpl **a5)
{
  WebCore::ContentSecurityPolicySourceListDirective *v10;
  const WTF::String *v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  WTF::String *v19;

  v10 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)this + 19);
  if (qword_1EE2E4108)
  {
    if (qword_1EE2E4108 == 1)
    {
      v11 = (const WTF::String *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      v14 = (uint64_t *)WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v10, v11);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v11 = v19;
      v14 = (uint64_t *)WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v10, v19);
      if (!v19)
        goto LABEL_6;
    }
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
  else
  {
    v14 = (uint64_t *)WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(this, v10, 0);
  }
LABEL_6:
  if (v14)
  {
    v15 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v15)
    {
      v16 = *(unsigned __int8 **)a4;
      v17 = 24 * v15;
      while ((WTF::HashTable<WebCore::ResourceCryptographicDigest,WebCore::ResourceCryptographicDigest,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>>,WebCore::ResourceCryptographicDigest>(v14 + 11, v16) & 1) != 0)
      {
        v16 += 24;
        v17 -= 24;
        if (!v17)
          return 0;
      }
    }
    if (*a5
      && *((_DWORD *)*a5 + 1)
      && (WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(v14 + 8, a5, v13) & 1) != 0|| *(_QWORD *)a2&& *(_DWORD *)(*(_QWORD *)a2 + 4)&& WebCore::ContentSecurityPolicySourceList::matches((WebCore::ContentSecurityPolicySourceList *)(v14 + 5), a2, a3)&& !WebCore::ContentSecurityPolicyDirectiveList::strictDynamicIncluded(this))
    {
      return 0;
    }
  }
  return v14;
}

uint64_t WebCore::ContentSecurityPolicy::allowPrefetchFromSource(uint64_t a1, WTF::URL *a2, unsigned __int8 a3, WTF::URL *a4)
{
  return WebCore::ContentSecurityPolicy::allowResourceFromSource(a1, a2, a3, (uint64_t)WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForPrefetch, 0, a4);
}

uint64_t WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForPrefetch(WebCore::ContentSecurityPolicyDirectiveList *this, const WTF::URL *a2, char a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;

  v6 = *((_QWORD *)this + 16);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (!v6)
  {
    v9 = *((_QWORD *)this + 7);
    if (v9)
    {
      if (v12)
        *(_DWORD *)v12 += 2;
      v10 = *(WTF::StringImpl **)(v9 + 32);
      *(_QWORD *)(v9 + 32) = v12;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v7);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    v6 = *((_QWORD *)this + 7);
LABEL_15:
    if (!v12)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (v12)
    *(_DWORD *)v12 += 2;
  v8 = *(WTF::StringImpl **)(v6 + 32);
  *(_QWORD *)(v6 + 32) = v12;
  if (!v8)
    goto LABEL_15;
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::destroy(v8, v7);
    if (!v12)
      goto LABEL_18;
  }
  else
  {
    *(_DWORD *)v8 -= 2;
    if (!v12)
      goto LABEL_18;
  }
LABEL_16:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, v7);
  else
    *(_DWORD *)v12 -= 2;
LABEL_18:
  if (!v6
    || *(_QWORD *)a2
    && *(_DWORD *)(*(_QWORD *)a2 + 4)
    && WebCore::ContentSecurityPolicySourceList::matches((WebCore::ContentSecurityPolicySourceList *)(v6 + 40), a2, a3))
  {
    return 0;
  }
  return v6;
}

uint64_t WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL,WTF::String const&)const,WTF::URL const&,BOOL,WTF::String&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t (*v15)(_QWORD *, uint64_t, _QWORD, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::ContentSecurityPolicyDirectiveList *v22;
  const WTF::URL *v23;
  BOOL v24;
  const WTF::String *v25;

  v6 = *(unsigned int *)(a1 + 148);
  if ((_DWORD)v6)
  {
    v12 = *(_QWORD **)(a1 + 136);
    v13 = 8 * v6;
    v14 = 1;
    while (1)
    {
      v15 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))a3;
      v16 = *(_QWORD *)(a3 + 8);
      v17 = (_QWORD *)(*v12 + (v16 >> 1));
      if ((v16 & 1) != 0)
        v15 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v17 + v15);
      v18 = v15(v17, a4, *a5, a6);
      if (v18)
      {
        v19 = v18;
        v20 = *(_QWORD *)(a2 + 24);
        if (!v20)
        {
          v22 = (WebCore::ContentSecurityPolicyDirectiveList *)std::__throw_bad_function_call[abi:sn180100]();
          return WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForStyle(v22, v23, v24, v25);
        }
        v14 &= *(_BYTE *)(*(_QWORD *)(v19 + 24) + 17) != 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
      }
      ++v12;
      v13 -= 8;
      if (!v13)
        return v14 & 1;
    }
  }
  v14 = 1;
  return v14 & 1;
}

_QWORD *WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForStyle(WebCore::ContentSecurityPolicyDirectiveList *this, const WTF::URL *a2, char a3, WTF::StringImpl **a4)
{
  _QWORD *v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;

  v8 = (_QWORD *)*((_QWORD *)this + 18);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (!v8)
  {
    v12 = *((_QWORD *)this + 7);
    if (v12)
    {
      if (v15)
        *(_DWORD *)v15 += 2;
      v13 = *(WTF::StringImpl **)(v12 + 32);
      *(_QWORD *)(v12 + 32) = v15;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v9);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v8 = (_QWORD *)*((_QWORD *)this + 7);
LABEL_15:
    if (!v15)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (v15)
    *(_DWORD *)v15 += 2;
  v11 = (WTF::StringImpl *)v8[4];
  v8[4] = v15;
  if (!v11)
    goto LABEL_15;
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::destroy(v11, v9);
    if (!v15)
      goto LABEL_18;
  }
  else
  {
    *(_DWORD *)v11 -= 2;
    if (!v15)
      goto LABEL_18;
  }
LABEL_16:
  if (*(_DWORD *)v15 == 2)
    WTF::StringImpl::destroy(v15, v9);
  else
    *(_DWORD *)v15 -= 2;
LABEL_18:
  if (v8)
  {
    if (*a4
      && *((_DWORD *)*a4 + 1)
      && (WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(v8 + 8, a4, v10) & 1) != 0)
    {
      return 0;
    }
    else if (*(_QWORD *)a2
           && *(_DWORD *)(*(_QWORD *)a2 + 4)
           && WebCore::ContentSecurityPolicySourceList::matches((WebCore::ContentSecurityPolicySourceList *)(v8 + 5), a2, a3))
    {
      return 0;
    }
  }
  return v8;
}

uint64_t WebCore::ContentSecurityPolicy::allowManifestFromSource(uint64_t a1, WTF::URL *a2, unsigned __int8 a3, WTF::URL *a4)
{
  return WebCore::ContentSecurityPolicy::allowResourceFromSource(a1, a2, a3, (uint64_t)WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForManifest, 0, a4);
}

uint64_t WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForManifest(WebCore::ContentSecurityPolicyDirectiveList *this, const WTF::URL *a2, char a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;

  v6 = *((_QWORD *)this + 13);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (!v6)
  {
    v9 = *((_QWORD *)this + 7);
    if (v9)
    {
      if (v12)
        *(_DWORD *)v12 += 2;
      v10 = *(WTF::StringImpl **)(v9 + 32);
      *(_QWORD *)(v9 + 32) = v12;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v7);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    v6 = *((_QWORD *)this + 7);
LABEL_15:
    if (!v12)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (v12)
    *(_DWORD *)v12 += 2;
  v8 = *(WTF::StringImpl **)(v6 + 32);
  *(_QWORD *)(v6 + 32) = v12;
  if (!v8)
    goto LABEL_15;
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::destroy(v8, v7);
    if (!v12)
      goto LABEL_18;
  }
  else
  {
    *(_DWORD *)v8 -= 2;
    if (!v12)
      goto LABEL_18;
  }
LABEL_16:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, v7);
  else
    *(_DWORD *)v12 -= 2;
LABEL_18:
  if (!v6
    || *(_QWORD *)a2
    && *(_DWORD *)(*(_QWORD *)a2 + 4)
    && WebCore::ContentSecurityPolicySourceList::matches((WebCore::ContentSecurityPolicySourceList *)(v6 + 40), a2, a3))
  {
    return 0;
  }
  return v6;
}

uint64_t WebCore::ContentSecurityPolicy::allowMediaFromSource(uint64_t a1, WTF::URL *a2, unsigned __int8 a3, WTF::URL *a4)
{
  return WebCore::ContentSecurityPolicy::allowResourceFromSource(a1, a2, a3, (uint64_t)WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForMedia, 0, a4);
}

uint64_t WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForMedia(WebCore::ContentSecurityPolicyDirectiveList *this, const WTF::URL *a2, char a3)
{
  const WTF::URL *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  v4 = a2;
  v6 = *((_QWORD *)this + 14);
  if (qword_1EE2E40D8)
  {
    a2 = (const WTF::URL *)(qword_1EE2E40D8 - 1);
    if (qword_1EE2E40D8 == 1)
    {
      v7 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      v8 = *MEMORY[0x1E0CBEF70] + 2;
      *MEMORY[0x1E0CBEF70] = v8;
      if (v6)
      {
LABEL_6:
        *(_DWORD *)v7 = v8 + 2;
        goto LABEL_7;
      }
      v11 = (uint64_t *)((char *)this + 56);
      v16 = *((_QWORD *)this + 7);
      if (v16)
      {
        v13 = (WTF::StringImpl **)(v16 + 32);
LABEL_14:
        *(_DWORD *)v7 = v8 + 2;
        goto LABEL_15;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = v18;
      if (v6)
      {
        if (!v18)
          goto LABEL_7;
        v8 = *(_DWORD *)v18;
        goto LABEL_6;
      }
      v12 = *((_QWORD *)this + 7);
      v11 = (uint64_t *)((char *)this + 56);
      v10 = v12;
      if (v12)
      {
        v13 = (WTF::StringImpl **)(v10 + 32);
        if (!v18)
          goto LABEL_15;
        v8 = *(_DWORD *)v18;
        goto LABEL_14;
      }
    }
LABEL_18:
    v6 = *v11;
LABEL_19:
    if (!v7)
      goto LABEL_22;
    goto LABEL_20;
  }
  if (!v6)
  {
    v11 = (uint64_t *)((char *)this + 56);
    v17 = *((_QWORD *)this + 7);
    if (v17)
    {
      v7 = 0;
      v13 = (WTF::StringImpl **)(v17 + 32);
LABEL_15:
      v14 = *v13;
      *v13 = v7;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      goto LABEL_18;
    }
    v7 = 0;
    goto LABEL_18;
  }
  v7 = 0;
LABEL_7:
  v9 = *(WTF::StringImpl **)(v6 + 32);
  *(_QWORD *)(v6 + 32) = v7;
  if (!v9)
    goto LABEL_19;
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    if (!v7)
      goto LABEL_22;
  }
  else
  {
    *(_DWORD *)v9 -= 2;
    if (!v7)
      goto LABEL_22;
  }
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, a2);
  else
    *(_DWORD *)v7 -= 2;
LABEL_22:
  if (!v6
    || *(_QWORD *)v4
    && *(_DWORD *)(*(_QWORD *)v4 + 4)
    && WebCore::ContentSecurityPolicySourceList::matches((WebCore::ContentSecurityPolicySourceList *)(v6 + 40), v4, a3))
  {
    return 0;
  }
  return v6;
}

uint64_t WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForFormAction(WebCore::ContentSecurityPolicyDirectiveList *this, const WTF::URL *a2, char a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    if ((WebCore::ContentSecurityPolicySourceList::matches((WebCore::ContentSecurityPolicySourceList *)(result + 40), a2, a3) & 1) != 0)return 0;
    else
      return *((_QWORD *)this + 9);
  }
  return result;
}

uint64_t WebCore::ContentSecurityPolicy::allowBaseURI(WebCore::ContentSecurityPolicy *this, const WTF::URL *a2, char a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;
  int v11;
  char v12;
  uint64_t (***v13)();
  uint64_t (**v14)();
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v23;
  WTF::StringImpl *v24[2];

  if ((a3 & 1) != 0 || !*((_DWORD *)this + 37))
    goto LABEL_13;
  v24[0] = (WTF::StringImpl *)WTF::URL::protocol(a2);
  v24[1] = v5;
  if (!v24[0])
    goto LABEL_16;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::schemeRegistryLock))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
LABEL_8:
  {
    WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes = 0;
  }
  v9 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::ContentSecurityPolicyBypassingSchemes(void)::schemes, (unsigned __int8 **)v24, v6, v7);
  v10 = v9;
  v11 = __ldxr(WebCore::schemeRegistryLock);
  if (v11 != 1)
  {
    __clrex();
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
    if ((v10 & 1) != 0)
      goto LABEL_13;
    goto LABEL_16;
  }
  if (__stlxr(0, WebCore::schemeRegistryLock))
    goto LABEL_15;
  if ((v9 & 1) != 0)
  {
LABEL_13:
    v12 = 1;
    return v12 & 1;
  }
LABEL_16:
  v24[0] = 0;
  v23 = 0xFFFFFFFFLL;
  v13 = (uint64_t (***)())operator new(0x28uLL);
  v14 = &off_1E34035E8;
  *v13 = &off_1E34035E8;
  v13[1] = (uint64_t (**)())a2;
  v13[2] = (uint64_t (**)())this;
  v13[3] = (uint64_t (**)())v24;
  v13[4] = (uint64_t (**)())&v23;
  v15 = *((unsigned int *)this + 37);
  if ((_DWORD)v15)
  {
    v16 = (uint64_t *)*((_QWORD *)this + 17);
    v17 = 8 * v15;
    v12 = 1;
    do
    {
      v18 = *v16;
      v19 = *(_QWORD *)(*v16 + 32);
      if (v19)
      {
        if (!*(_QWORD *)a2
          || !*(_DWORD *)(*(_QWORD *)a2 + 4)
          || (WebCore::ContentSecurityPolicySourceList::matches((WebCore::ContentSecurityPolicySourceList *)(v19 + 40), a2, 0) & 1) == 0&& (v19 = *(_QWORD *)(v18 + 32)) != 0)
        {
          v12 &= *(_BYTE *)(*(_QWORD *)(v19 + 24) + 17) != 0;
          ((void (*)(uint64_t (***)()))(*v13)[6])(v13);
        }
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
    v14 = *v13;
  }
  else
  {
    v12 = 1;
  }
  ((void (*)(uint64_t (***)()))v14[5])(v13);
  v21 = v24[0];
  v24[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  return v12 & 1;
}

uint64_t WebCore::ContentSecurityPolicy::allowTrustedTypesPolicy(uint64_t (**this)(), WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t (***v6)();
  uint64_t (**v7)();
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned __int8 v19;
  uint64_t v20;
  WTF::StringImpl *v21;

  v21 = 0;
  v20 = 0xFFFFFFFFLL;
  v19 = 0;
  v6 = (uint64_t (***)())operator new(0x28uLL);
  v7 = &off_1E3403630;
  *v6 = &off_1E3403630;
  v6[1] = (uint64_t (**)())a2;
  v6[2] = this;
  v6[3] = (uint64_t (**)())&v21;
  v6[4] = (uint64_t (**)())&v20;
  v8 = *((unsigned int *)this + 37);
  if ((_DWORD)v8)
  {
    v9 = this[17];
    v10 = 8 * v8;
    v11 = 1;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)v9 + 184);
      if (v12
        && (WebCore::ContentSecurityPolicyTrustedTypesDirective::allows(*(_QWORD *)(*(_QWORD *)v9 + 184), a2, a3, (char *)&v19) & 1) == 0)
      {
        v11 &= *(_BYTE *)(*(_QWORD *)(v12 + 24) + 17) != 0;
        ((void (*)(uint64_t (***)(), uint64_t))(*v6)[6])(v6, v12);
      }
      v9 = (uint64_t (*)())((char *)v9 + 8);
      v10 -= 8;
    }
    while (v10);
    v7 = *v6;
    v13 = v19;
  }
  else
  {
    v13 = 0;
    v11 = 1;
  }
  ((void (*)(uint64_t (***)()))v7[5])(v6);
  v15 = MEMORY[0x19AEA53F4](*a2, "default", 7);
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  if ((v11 & 1) != 0)
    v17 = 0;
  else
    v17 = v13;
  if ((v15 & a3) != 0)
    return 2;
  else
    return v17;
}

uint64_t WebCore::ContentSecurityPolicy::allowMissingTrustedTypesForSinkGroup(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, _QWORD *a4, const char *a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const char *v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  char v22;
  unsigned int v23;
  int v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v37;
  char *v38;
  char v40;
  int v41;
  uint64_t v42;
  WTF::StringImpl *v46[5];
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  _QWORD v51[2];
  _QWORD v52[3];

  v6 = *(unsigned int *)(a1 + 148);
  if (!(_DWORD)v6)
    return 1;
  v7 = a4;
  v8 = 40;
  v9 = *(uint64_t **)(a1 + 136);
  if ((a6 & 0xFF00000000) != 0)
    v8 = 0x100000028;
  if (a6 <= 0x28)
    v8 = a6;
  if ((_DWORD)a6)
    v10 = v8;
  else
    v10 = 0x100000000;
  if ((_DWORD)a6)
    v11 = a5;
  else
    v11 = "";
  v12 = __OFADD__((_DWORD)v10, 1);
  v40 = v12;
  v41 = v10 + 1;
  v37 = v10 & 0xFF00000000;
  v38 = (char *)v11;
  v13 = 8 * v6;
  v42 = v10;
  while (1)
  {
    if (!*(_BYTE *)(*v9 + 21) || !MEMORY[0x19AEA53F4](*v7, "script", 6))
      goto LABEL_57;
    v14 = *(unsigned __int8 *)(*v9 + 17);
    v15 = "";
    if (*(_BYTE *)(*v9 + 17))
      v15 = "[Report Only] ";
    v16 = 15;
    if (!*(_BYTE *)(*v9 + 17))
      v16 = 1;
    v17 = *a2;
    if (*a2)
      *(_DWORD *)v17 += 2;
    v49 = v17;
    v46[0] = (WTF::StringImpl *)v15;
    v46[1] = (WTF::StringImpl *)v16;
    v52[0] = "This requires a ";
    v52[1] = 17;
    v51[0] = " value else it violates the following Content Security Policy directive: \"require-trusted-types-for 'script'\"";
    v51[1] = 110;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)v46, (uint64_t)v52, (uint64_t *)&v49, (uint64_t)v51, &v50);
    if (!v50)
      goto LABEL_73;
    v19 = v49;
    v49 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *a3;
    if (*a3)
    {
      v21 = *(_DWORD *)(v20 + 4);
      *(_DWORD *)v20 += 2;
    }
    else
    {
      v21 = 0;
    }
    v22 = v40;
    if (v21 < 0)
      v22 = 1;
    if ((v10 & 0x80000000) != 0 || (v22 & 1) != 0 || (v23 = v21 + v41, __OFADD__(v21, v41)))
    {
LABEL_73:
      __break(0xC471u);
      JUMPOUT(0x19607C630);
    }
    if (v20)
    {
      v24 = (*(_BYTE *)(v20 + 16) & 4) != 0 && v37 != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(v52, v23, v24, v20, v38, v10);
      v26 = v52[0];
      if (!v52[0])
        goto LABEL_73;
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v20, v25);
      else
        *(_DWORD *)v20 -= 2;
    }
    else
    {
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(v52, v23, v37 != 0, 0, v38, v10);
      v26 = v52[0];
      if (!v52[0])
        goto LABEL_73;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v27 = v46[0];
    v51[0] = v46[0];
    v28 = *v9;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v29 = v46[0];
    v48 = v46[0];
    v30 = *(_QWORD *)(v26 + 8);
    v31 = *(unsigned int *)(v26 + 4);
    v32 = (*(_DWORD *)(v26 + 16) >> 2) & 1;
    v47 = 0xFFFFFFFFLL;
    v46[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v46);
    WebCore::ContentSecurityPolicy::reportViolation(a1, v51, v28, &v48, (uint64_t)&v50, MEMORY[0x1E0CBF6F0], v30, v31 | (v32 << 32), (int32x2_t *)&v47, 0, (uint64_t)v46, 0);
    v34 = v46[0];
    v46[0] = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v33);
      else
        *(_DWORD *)v34 -= 2;
    }
    v10 = v42;
    v7 = a4;
    if (!v29)
      goto LABEL_48;
    if (*(_DWORD *)v29 != 2)
    {
      *(_DWORD *)v29 -= 2;
LABEL_48:
      if (v27)
        goto LABEL_49;
      goto LABEL_51;
    }
    WTF::StringImpl::destroy(v29, v33);
    if (v27)
    {
LABEL_49:
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v33);
      else
        *(_DWORD *)v27 -= 2;
    }
LABEL_51:
    v52[0] = 0;
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v26, v33);
    else
      *(_DWORD *)v26 -= 2;
    v35 = v50;
    v50 = 0;
    if (!v35)
      goto LABEL_56;
    if (*(_DWORD *)v35 != 2)
    {
      *(_DWORD *)v35 -= 2;
LABEL_56:
      if (!v14)
        return 0;
      goto LABEL_57;
    }
    WTF::StringImpl::destroy(v35, v33);
    if (!v14)
      return 0;
LABEL_57:
    ++v9;
    v13 -= 8;
    if (!v13)
      return 1;
  }
}

uint64_t WebCore::ContentSecurityPolicy::createURLForReporting(WebCore::ContentSecurityPolicy *this, const WTF::URL *a2, const WTF::String *a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t result;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  WTF *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  char v41;
  _QWORD v42[2];
  int v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (qword_1EE2E40E8)
    v10 = qword_1EE2E40E8 - 1;
  else
    v10 = 0;
  if ((MEMORY[0x19AEA53F4](*a4, WebCore::ContentSecurityPolicyDirectiveNames::frameSrc, v10) & 1) != 0
    || (qword_1EE2E4168 ? (v11 = qword_1EE2E4168 - 1) : (v11 = 0),
        (MEMORY[0x19AEA53F4](*a4, WebCore::ContentSecurityPolicyDirectiveNames::objectSrc, v11) & 1) != 0))
  {
    v12 = 0;
  }
  else
  {
    v12 = MEMORY[0x19AEA53F4](*a4, "block-all-mixed-content", 23) ^ 1;
  }
  v13 = *((_QWORD *)a2 + 15);
  v14 = *(_DWORD *)(v13 + 32);
  v15 = *(_DWORD **)(v13 + 8);
  if (v15)
    *v15 += 2;
  v16 = *(_DWORD **)(v13 + 16);
  if (v16)
    *v16 += 2;
  v42[0] = v15;
  v42[1] = v16;
  v43 = v14 & 0xFFFFFF;
  v44 = 0;
  if (v15 == (_DWORD *)-1)
  {
    __break(0xC471u);
    JUMPOUT(0x19607C9B8);
  }
  result = WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)v42, &v40);
  if (v44 != -1)
    result = ((uint64_t (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v44])(&v39, v42);
  v19 = *((_DWORD *)a3 + 2);
  if ((v19 & 1) == 0)
  {
    *(_QWORD *)this = 0;
    goto LABEL_24;
  }
  if ((v19 & 4) != 0 || WTF::URL::protocolIs())
  {
    WTF::URL::protocol(a3);
    if ((v20 & 0xFF00000000) != 0)
      result = WTF::String::String();
    else
      result = WTF::String::String();
    goto LABEL_24;
  }
  v24 = v40;
  if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
    || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
  {
    v25 = &WebCore::EmptyOriginAccessPatterns::singleton(void)::instance;
      goto LABEL_33;
    WebCore::EmptyOriginAccessPatterns::singleton(void)::instance = (uint64_t)&off_1E3400560;
  }
  else
  {
    v25 = &WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance;
      goto LABEL_33;
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  *v26 = 1;
LABEL_33:
  if ((WebCore::SecurityOrigin::canRequest((uint64_t)v24, a3, (uint64_t (***)(_QWORD, uint64_t))v25) | v12) == 1)
  {
    if (a5)
      result = WTF::URL::strippedForUseAsReferrerWithExplicitPort(a3);
    else
      result = WTF::URL::strippedForUseAsReferrer(a3);
    *(_QWORD *)this = v42[0];
  }
  else
  {
    WebCore::SecurityOrigin::create(a3, &v39);
    v27 = v39;
    v28 = *(unsigned int *)(v39 + 32);
    if ((_DWORD)v28 == 1)
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    else
    {
      if ((_DWORD)v28 == -1)
      {
        v38 = std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::ContentSecurityPolicy::reportViolation(v38);
      }
      v42[0] = &v41;
      v29 = (_QWORD *)((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v28])(v42, v39 + 8);
      if (MEMORY[0x19AEA53F4](*v29, "file", 4) && *(_BYTE *)(v27 + 59))
        result = (uint64_t)WTF::String::String(this, (uint64_t)"null", 5);
      else
        result = WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v27 + 8), this);
    }
    v39 = 0;
    do
    {
      v30 = __ldaxr((unsigned int *)v27);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, (unsigned int *)v27));
    if (!v31)
    {
      atomic_store(1u, (unsigned int *)v27);
      v32 = *(WTF::StringImpl **)(v27 + 48);
      *(_QWORD *)(v27 + 48) = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v18);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = *(WTF::StringImpl **)(v27 + 40);
      *(_QWORD *)(v27 + 40) = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v18);
        else
          *(_DWORD *)v33 -= 2;
      }
      v34 = *(unsigned int *)(v27 + 32);
      if ((_DWORD)v34 != -1)
        ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v34])(v42, v27 + 8);
      *(_DWORD *)(v27 + 32) = -1;
      result = WTF::fastFree((WTF *)v27, v18);
    }
  }
LABEL_24:
  v21 = v40;
  v40 = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v35 = (WTF::StringImpl *)*((_QWORD *)v21 + 6);
      *((_QWORD *)v21 + 6) = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v18);
        else
          *(_DWORD *)v35 -= 2;
      }
      v36 = (WTF::StringImpl *)*((_QWORD *)v21 + 5);
      *((_QWORD *)v21 + 5) = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v18);
        else
          *(_DWORD *)v36 -= 2;
      }
      v37 = *((unsigned int *)v21 + 8);
      if ((_DWORD)v37 != -1)
        ((void (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v37])(v42, (char *)v21 + 8);
      *((_DWORD *)v21 + 8) = -1;
      return WTF::fastFree(v21, v18);
    }
  }
  return result;
}

void WebCore::ContentSecurityPolicy::reportViolation(uint64_t a1, _QWORD *a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x2_t *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _BYTE *v19;
  WTF::StringImpl *v20;
  void (***v21)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD);
  int v22;
  int32x2_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  int32x2_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WebCore::CSPViolationReportBody *v50;
  WTF::StringImpl *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  __int128 v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unsigned int *v63;
  unsigned int *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  WebCore *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  Inspector **v73;
  WTF::StringImpl *v74;
  char v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF *v79;
  WTF *v80;
  _DWORD *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF *v94;
  WTF *v95;
  void *v96;
  WTF *v97;
  void *v98;
  bmalloc::api *v99;
  void *v100;
  WTF *v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::URL *v108;
  int v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  _DWORD *v112;
  WTF::StringImpl *v113;
  _DWORD *v114;
  _DWORD *v115;
  _DWORD *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  unsigned int v120;
  WTF *v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _BYTE v130[12];
  WTF::StringImpl *v131;

  if (*(_QWORD *)a5 && *(_DWORD *)(*(_QWORD *)a5 + 4) && *(_BYTE *)(a1 + 181))
  {
    v21 = *(void (****)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 16);
    if (v21)
    {
      (**v21)(v21, 8, 2, a5, 0);
    }
    else
    {
      v25 = *(_QWORD *)(a1 + 8);
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 8);
        if (v26)
        {
          v27 = (a9->i32[0] + 1);
          v28 = (a9->i32[1] + 1);
          v125 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)(v26 - 96) + 416))(v26 - 96, 8, 2, a5, a6, v27, v28, &v125, a10, 0);
          v29 = v125;
          v125 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 1)
            {
              v97 = (WTF *)MEMORY[0x19AEA6024]();
              WTF::fastFree(v97, v98);
            }
            else
            {
              --*(_DWORD *)v29;
            }
          }
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 181))
  {
    v109 = *(_DWORD *)(a3 + 212);
    if ((MEMORY[0x19AEA53F4](*a4, "eval", 4) & 1) != 0
      || (MEMORY[0x19AEA53F4](*a4, "inline", 6) & 1) != 0
      || (MEMORY[0x19AEA53F4](*a4, "trusted-types-policy", 20) & 1) != 0
      || MEMORY[0x19AEA53F4](*a4, "trusted-types-sink", 18))
    {
      v18 = *a4;
      if (!*a4)
      {
        v20 = 0;
        v19 = (_BYTE *)(a1 + 112);
        v108 = (WTF::URL *)(a1 + 72);
        if (!*(_BYTE *)(a1 + 112))
        {
LABEL_17:
          if (qword_1EE2E41B8)
            v22 = qword_1EE2E41B8 - 1;
          else
            v22 = 0;
          v23 = *a9;
          if (*a2)
          {
            if ((WTF::StringImpl::startsWith() & 1) != 0)
            {
LABEL_21:
              v24 = (uint64_t *)(a3 + 144);
              goto LABEL_43;
            }
          }
          else if (!v22)
          {
            goto LABEL_21;
          }
          if (qword_1EE2E40F8)
            v35 = qword_1EE2E40F8 - 1;
          else
            v35 = 0;
          if (*a2)
          {
            if ((WTF::StringImpl::startsWith() & 1) == 0)
            {
              if (!*a2
                || (WTF::StringImpl::startsWith() & 1) == 0 && (!*a2 || (WTF::StringImpl::startsWith() & 1) == 0))
              {
LABEL_55:
                v37 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                if (*MEMORY[0x1E0CBF738])
                  *(_DWORD *)v37 += 2;
LABEL_57:
                if (v37)
                {
                  v38 = *(_DWORD *)v37;
                  *(_DWORD *)v37 += 2;
                  v125 = 0;
                  if (v38)
                    *(_DWORD *)v37 = v38;
                  else
                    WTF::StringImpl::destroy(v37, v17);
                }
                v39 = vadd_s32(v23, (int32x2_t)0x100000001);
                if (*(_QWORD *)(a1 + 16))
                {
                  v40 = 0;
LABEL_62:
                  if (MEMORY[0x19AEA53F4](*(_QWORD *)(a1 + 128), "http", 4))
                    v41 = *(_DWORD *)(a1 + 184);
                  else
                    LOWORD(v41) = 0;
                  if (v109)
                    v41 = *(_DWORD *)(a1 + 184);
                  LOWORD(v125) = 0;
                  BYTE2(v125) = 0;
                  *(_WORD *)&v130[2] = 0;
                  *(_DWORD *)&v130[4] = 0;
                  *(_DWORD *)&v130[8] = 0;
                  v126 = 0u;
                  v127 = 0u;
                  v128 = 0u;
                  v129 = 0u;
                  v130[0] = 0;
                  if (v18)
                    *(_DWORD *)v18 += 2;
                  *(_QWORD *)&v126 = v18;
                  v44 = *(_DWORD **)(a1 + 168);
                  if (v44)
                    *v44 += 2;
                  *((_QWORD *)&v126 + 1) = v44;
                  if (v20)
                    *(_DWORD *)v20 += 2;
                  *(_QWORD *)&v127 = v20;
                  v45 = (_DWORD *)*a2;
                  if (*a2)
                    *v45 += 4;
                  *((_QWORD *)&v127 + 1) = v45;
                  *(_QWORD *)&v128 = v45;
                  v46 = *(_DWORD **)(a3 + 8);
                  if (v46)
                    *v46 += 2;
                  *((_QWORD *)&v128 + 1) = v46;
                  v47 = v40;
                  if (v40)
                    goto LABEL_83;
                  *(_QWORD *)&v129 = 0;
                  if (!v109)
                  {
                    v47 = 0;
LABEL_85:
                    v130[0] = *(_BYTE *)(a3 + 17);
                    *(_WORD *)&v130[2] = v41;
                    *(int32x2_t *)&v130[4] = v39;
                    if (v37)
                      *(_DWORD *)v37 += 2;
                    *((_QWORD *)&v129 + 1) = v37;
                    LOBYTE(v125) = 1;
                    BYTE2(v125) = 1;
                    v123 = 0;
                    v124 = 0;
                    v121 = 0;
                    v122 = 0;
                    LOWORD(v110) = (_WORD)v125;
                    BYTE2(v110) = 1;
                    if (v18)
                      *(_DWORD *)v18 += 2;
                    v111 = v18;
                    if (v44)
                      *v44 += 2;
                    v112 = v44;
                    if (v20)
                      *(_DWORD *)v20 += 2;
                    v113 = v20;
                    if (v45)
                      *v45 += 4;
                    v114 = v45;
                    v115 = v45;
                    if (v46)
                      *v46 += 2;
                    v116 = v46;
                    if (v47)
                      *(_DWORD *)v47 += 2;
                    v117 = v47;
                    if (v37)
                      *(_DWORD *)v37 += 2;
                    v118 = v37;
                    v119 = *(_QWORD *)v130;
                    v120 = *(_DWORD *)&v130[8];
                    v48 = bmalloc::api::isoAllocate();
                    v50 = (WebCore::CSPViolationReportBody *)v48;
                    *(_DWORD *)(v48 + 8) = 1;
                    *(_QWORD *)v48 = off_1E3403050;
                    v51 = v111;
                    v111 = 0;
                    *(_QWORD *)(v48 + 16) = v51;
                    v52 = v112;
                    if (v112 || (v52 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
                      *v52 += 2;
                    *(_QWORD *)(v48 + 24) = v52;
                    *(_QWORD *)(v48 + 32) = v113;
                    v53 = v115;
                    v113 = 0;
                    v115 = 0;
                    *(_QWORD *)(v48 + 40) = v53;
                    v54 = v116;
                    v116 = 0;
                    *(_QWORD *)(v48 + 48) = v54;
                    v55 = v117;
                    v117 = 0;
                    *(_QWORD *)(v48 + 56) = v55;
                    v56 = v118;
                    v118 = 0;
                    *(_QWORD *)(v48 + 64) = v56;
                    *(_BYTE *)(v48 + 72) = v119;
                    *(_WORD *)(v48 + 74) = WORD1(v119);
                    *(_QWORD *)&v57 = HIDWORD(v119);
                    *((_QWORD *)&v57 + 1) = v120;
                    *(_OWORD *)(v48 + 80) = v57;
                    WebCore::SecurityPolicyViolationEventInit::~SecurityPolicyViolationEventInit((WebCore::SecurityPolicyViolationEventInit *)&v110, v49);
                    if (v109 && (v58 = *(_QWORD *)(a1 + 24)) != 0)
                    {
                      if ((_MergedGlobals_283 & 1) == 0)
                      {
                        dword_1ECE7BD80 += 2;
                        qword_1EE337E28 = (uint64_t)&dword_1ECE7BD80;
                        _MergedGlobals_283 = 1;
                      }
                      ++*((_DWORD *)v50 + 2);
                      v59 = (WTF::StringImpl *)bmalloc::api::isoAllocate();
                      *(_DWORD *)v59 = 1;
                      v60 = qword_1EE337E28;
                      if (qword_1EE337E28)
                        *(_DWORD *)qword_1EE337E28 += 2;
                      *((_QWORD *)v59 + 1) = v60;
                      if (v18)
                        *(_DWORD *)v18 += 2;
                      *((_QWORD *)v59 + 2) = v18;
                      *((_QWORD *)v59 + 3) = v50;
                      v110 = v59;
                      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v58 + 16))(v58, &v110);
                      v62 = v110;
                      v110 = 0;
                      if (v62)
                      {
                        if (*(_DWORD *)v62 == 1)
                        {
                          v81 = (_DWORD *)*((_QWORD *)v62 + 3);
                          *((_QWORD *)v62 + 3) = 0;
                          if (v81)
                          {
                            if (v81[2] == 1)
                              (*(void (**)(_DWORD *))(*(_QWORD *)v81 + 8))(v81);
                            else
                              --v81[2];
                          }
                          v82 = (WTF::StringImpl *)*((_QWORD *)v62 + 2);
                          *((_QWORD *)v62 + 2) = 0;
                          if (v82)
                          {
                            if (*(_DWORD *)v82 == 2)
                              WTF::StringImpl::destroy(v82, v61);
                            else
                              *(_DWORD *)v82 -= 2;
                          }
                          v83 = (WTF::StringImpl *)*((_QWORD *)v62 + 1);
                          *((_QWORD *)v62 + 1) = 0;
                          if (v83)
                          {
                            if (*(_DWORD *)v83 == 2)
                              WTF::StringImpl::destroy(v83, v61);
                            else
                              *(_DWORD *)v83 -= 2;
                          }
                          bmalloc::api::isoDeallocate(v62, v61);
                        }
                        else
                        {
                          --*(_DWORD *)v62;
                        }
                      }
                      v63 = (unsigned int *)&v121;
                      v64 = (unsigned int *)(a3 + 200);
                    }
                    else
                    {
                      v64 = (unsigned int *)(a3 + 216);
                      v63 = (unsigned int *)&v123;
                    }
                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v63, v64);
                    v65 = *(_QWORD *)(a1 + 16);
                    if (v65)
                    {
                      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v65 + 24))(v65, &v125);
                    }
                    else
                    {
                      v67 = *(_QWORD *)(a1 + 8);
                      if (v67)
                      {
                        v68 = *(_QWORD *)(v67 + 8);
                        if (v68)
                          v67 = v68 - 96;
                        else
                          v67 = 0;
                      }
                      if (*(_BYTE *)(v67 + 274))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19607D86CLL);
                      }
                      v69 = (WebCore *)(v67 - 192);
                      if (a12 && *(WebCore **)(*(_QWORD *)(a12 + 40) + 8) == v69)
                        WebCore::Element::enqueueSecurityPolicyViolationEvent(a12, (WTF::StringImpl *)&v125);
                      else
                        WebCore::Document::enqueueSecurityPolicyViolationEvent(v69, (unsigned __int8 *)&v125);
                    }
                    if (HIDWORD(v124) | HIDWORD(v122))
                    {
                      if (*(_QWORD *)(a1 + 24))
                      {
                        if (*v19)
                        {
                          WTF::URL::strippedForUseAsReferrer(v108);
                          v76 = v110;
                        }
                        else if (v20)
                        {
                          *(_DWORD *)v20 += 2;
                          v76 = v20;
                        }
                        else
                        {
                          v76 = 0;
                        }
                        WebCore::CSPViolationReportBody::createReportFormDataForViolation(v50, v109 != 0, (uint64_t *)&v110);
                        (*(void (**)(_QWORD, uint64_t, WTF **, WTF **, WTF::StringImpl **, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1 + 32, &v123, &v121, &v110, 2);
                        v78 = v110;
                        v110 = 0;
                        if (v78)
                        {
                          if (*(_DWORD *)v78 == 1)
                          {
                            WebCore::FormData::~FormData(v78, v66);
                            bmalloc::api::isoDeallocate(v99, v100);
                          }
                          else
                          {
                            --*(_DWORD *)v78;
                          }
                        }
                        if (v76)
                        {
                          if (*(_DWORD *)v76 == 2)
                            WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v66);
                          else
                            *(_DWORD *)v76 -= 2;
                        }
                      }
                      else if (*(_QWORD *)(a1 + 16) || (v77 = *(_QWORD *)(a1 + 8)) != 0 && *(_QWORD *)(v77 + 8))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19607D318);
                      }
                    }
                    if (*((_DWORD *)v50 + 2) == 1)
                      (*(void (**)(WebCore::CSPViolationReportBody *))(*(_QWORD *)v50 + 8))(v50);
                    else
                      --*((_DWORD *)v50 + 2);
                    if (HIDWORD(v122))
                    {
                      v101 = v121;
                      v102 = 8 * HIDWORD(v122);
                      do
                      {
                        v103 = *(WTF::StringImpl **)v101;
                        *(_QWORD *)v101 = 0;
                        if (v103)
                        {
                          if (*(_DWORD *)v103 == 2)
                            WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v66);
                          else
                            *(_DWORD *)v103 -= 2;
                        }
                        v101 = (WTF *)((char *)v101 + 8);
                        v102 -= 8;
                      }
                      while (v102);
                    }
                    v79 = v121;
                    if (v121)
                    {
                      v121 = 0;
                      LODWORD(v122) = 0;
                      WTF::fastFree(v79, v66);
                    }
                    if (HIDWORD(v124))
                    {
                      v104 = v123;
                      v105 = 8 * HIDWORD(v124);
                      do
                      {
                        v106 = *(WTF::StringImpl **)v104;
                        *(_QWORD *)v104 = 0;
                        if (v106)
                        {
                          if (*(_DWORD *)v106 == 2)
                            WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v66);
                          else
                            *(_DWORD *)v106 -= 2;
                        }
                        v104 = (WTF *)((char *)v104 + 8);
                        v105 -= 8;
                      }
                      while (v105);
                    }
                    v80 = v123;
                    if (v123)
                    {
                      v123 = 0;
                      LODWORD(v124) = 0;
                      WTF::fastFree(v80, v66);
                    }
                    WebCore::SecurityPolicyViolationEventInit::~SecurityPolicyViolationEventInit((WebCore::SecurityPolicyViolationEventInit *)&v125, (WTF::StringImpl *)v66);
                    if (!v20)
                    {
LABEL_161:
                      if (v37)
                      {
                        if (*(_DWORD *)v37 == 2)
                        {
                          WTF::StringImpl::destroy(v37, v17);
                          if (!v40)
                            goto LABEL_167;
                          goto LABEL_165;
                        }
                        *(_DWORD *)v37 -= 2;
                      }
                      if (!v40)
                        goto LABEL_167;
LABEL_165:
                      if (*(_DWORD *)v40 == 2)
                        WTF::StringImpl::destroy(v40, v17);
                      else
                        *(_DWORD *)v40 -= 2;
LABEL_167:
                      if (v18)
                      {
                        if (*(_DWORD *)v18 == 2)
                          WTF::StringImpl::destroy(v18, v17);
                        else
                          *(_DWORD *)v18 -= 2;
                      }
                      return;
                    }
LABEL_159:
                    if (*(_DWORD *)v20 == 2)
                      WTF::StringImpl::destroy(v20, v17);
                    else
                      *(_DWORD *)v20 -= 2;
                    goto LABEL_161;
                  }
                  v47 = v18;
                  if (v18)
LABEL_83:
                    *(_DWORD *)v47 += 2;
                  *(_QWORD *)&v129 = v47;
                  goto LABEL_85;
                }
                v42 = *(_QWORD *)(a1 + 8);
                if (v42)
                {
                  v43 = *(_QWORD *)(v42 + 8);
                  if (v43)
                  {
                    if (!*(_BYTE *)(v43 + 178))
                    {
                      v70 = *(_DWORD *)(v43 - 264);
                      *(_DWORD *)(v43 - 264) = v70 + 2;
                      v71 = *(_QWORD *)(v43 + 240);
                      if (v71 && *(_QWORD *)(v71 + 8))
                      {
                        if ((*(_BYTE *)(v43 + 456) & 4) != 0 || WTF::URL::protocolIs())
                        {
                          WTF::URL::protocol((WTF::URL *)(v43 + 448));
                          if ((v72 & 0xFF00000000) != 0)
                            v73 = (Inspector **)WTF::String::String();
                          else
                            v73 = (Inspector **)WTF::String::String();
                          v75 = 1;
                        }
                        else
                        {
                          v73 = (Inspector **)WTF::URL::strippedForUseAsReferrer((WTF::URL *)(v43 + 448));
                          v75 = 0;
                          v84 = v131;
                          v131 = 0;
                          v125 = v84;
                        }
                        v107 = v125;
                        v125 = 0;
                        if (v18)
                        {
                          if (*(_DWORD *)v18 == 2)
                          {
                            WTF::StringImpl::destroy(v18, v74);
                            v73 = (Inspector **)v125;
                            v125 = 0;
                            if (v73)
                            {
                              if (*(_DWORD *)v73 == 2)
                                v73 = (Inspector **)WTF::StringImpl::destroy((WTF::StringImpl *)v73, v74);
                              else
                                *(_DWORD *)v73 -= 2;
                            }
                          }
                          else
                          {
                            *(_DWORD *)v18 -= 2;
                            v125 = 0;
                          }
                        }
                        if ((v75 & 1) == 0)
                        {
                          v73 = (Inspector **)v131;
                          v131 = 0;
                          if (v73)
                          {
                            if (*(_DWORD *)v73 == 2)
                              v73 = (Inspector **)WTF::StringImpl::destroy((WTF::StringImpl *)v73, v74);
                            else
                              *(_DWORD *)v73 -= 2;
                          }
                        }
                        v85 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                        if (!v85 || (v73 = *(Inspector ***)(v85 + 96)) == 0)
                          v73 = (Inspector **)WebCore::threadGlobalDataSlow((WebCore *)v73);
                        Inspector::createScriptCallStack(v73[8], (JSC::JSGlobalObject *)2);
                        v86 = Inspector::ScriptCallStack::firstNonNativeCallFrame(v123);
                        if (v86)
                        {
                          v87 = v86;
                          v88 = (_DWORD *)(v43 - 264);
                          if (*(_DWORD *)(v86 + 28))
                          {
                            v89 = *(WTF::StringImpl **)(v86 + 16);
                            if (v89 && *((_DWORD *)v89 + 1) || (v89 = *(WTF::StringImpl **)(v86 + 8)) != 0)
                              *(_DWORD *)v89 += 2;
                            v110 = v89;
                            MEMORY[0x19AEA52D4](&v125, &v110, 0);
                            v91 = v110;
                            v110 = 0;
                            if (v91)
                            {
                              if (*(_DWORD *)v91 == 2)
                                WTF::StringImpl::destroy(v91, v90);
                              else
                                *(_DWORD *)v91 -= 2;
                            }
                            WebCore::ContentSecurityPolicy::createURLForReporting((WebCore::ContentSecurityPolicy *)&v110, (const WTF::URL *)a1, (const WTF::String *)&v125, a2, v109 != 0);
                            v40 = v110;
                            v110 = 0;
                            v93 = v125;
                            v125 = 0;
                            v88 = (_DWORD *)(v43 - 264);
                            if (v93)
                            {
                              if (*(_DWORD *)v93 == 2)
                              {
                                WTF::StringImpl::destroy(v93, v92);
                                v88 = (_DWORD *)(v43 - 264);
                              }
                              else
                              {
                                *(_DWORD *)v93 -= 2;
                              }
                            }
                            v39 = *(int32x2_t *)(v87 + 28);
                          }
                          else
                          {
                            v40 = 0;
                          }
                        }
                        else
                        {
                          v40 = 0;
                          v88 = (_DWORD *)(v43 - 264);
                        }
                        v94 = v123;
                        v123 = 0;
                        if (v94)
                        {
                          if (*(_DWORD *)v94 == 1)
                          {
                            v95 = (WTF *)MEMORY[0x19AEA6024]();
                            WTF::fastFree(v95, v96);
                            v88 = (_DWORD *)(v43 - 264);
                          }
                          else
                          {
                            --*(_DWORD *)v94;
                          }
                        }
                        if (*v88 == 2)
                        {
                          if ((*(_WORD *)(v43 - 258) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)(v43 - 288));
                        }
                        else
                        {
                          *v88 -= 2;
                        }
                        v18 = v107;
                        goto LABEL_62;
                      }
                      if (v70)
                      {
                        v40 = 0;
                        *(_DWORD *)(v43 - 264) = v70;
                        if (!v20)
                          goto LABEL_161;
                        goto LABEL_159;
                      }
                      if ((*(_WORD *)(v43 - 258) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)(v43 - 288));
                    }
                  }
                }
                v40 = 0;
                if (!v20)
                  goto LABEL_161;
                goto LABEL_159;
              }
LABEL_50:
              if ((a8 & 0xFF00000000) != 0)
                WTF::String::String();
              else
                WTF::String::String();
              v37 = v125;
              goto LABEL_57;
            }
          }
          else if (v35)
          {
            goto LABEL_55;
          }
          v24 = (uint64_t *)(a3 + 136);
LABEL_43:
          v36 = *v24;
          if (!v36 || !*(_BYTE *)(v36 + 121))
            goto LABEL_55;
          goto LABEL_50;
        }
LABEL_10:
        v20 = v18;
        WTF::URL::strippedForUseAsReferrer(v108);
        v18 = v125;
        goto LABEL_17;
      }
      *(_DWORD *)v18 += 2;
    }
    else
    {
      v30 = *(WTF::StringImpl **)a11;
      if (*(_QWORD *)a11)
      {
        *(_DWORD *)v30 += 2;
        v125 = v30;
        v126 = *(_OWORD *)(a11 + 8);
        v127 = *(_OWORD *)(a11 + 24);
      }
      else
      {
        v31 = *a4;
        if (*a4)
          *(_DWORD *)v31 += 2;
        v110 = v31;
        MEMORY[0x19AEA52D4](&v125, &v110, 0);
        v33 = v110;
        v110 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v32);
          else
            *(_DWORD *)v33 -= 2;
        }
      }
      WebCore::ContentSecurityPolicy::createURLForReporting((WebCore::ContentSecurityPolicy *)&v110, (const WTF::URL *)a1, (const WTF::String *)&v125, a2, v109 != 0);
      v18 = v110;
      v110 = 0;
      v34 = v125;
      v125 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v17);
        else
          *(_DWORD *)v34 -= 2;
      }
    }
    v19 = (_BYTE *)(a1 + 112);
    v108 = (WTF::URL *)(a1 + 72);
    if (!*(_BYTE *)(a1 + 112))
    {
      if (v18)
      {
        *(_DWORD *)v18 += 2;
        v20 = v18;
      }
      else
      {
        v20 = 0;
      }
      goto LABEL_17;
    }
    goto LABEL_10;
  }
}

WTF::StringImpl *WebCore::ContentSecurityPolicy::reportUnsupportedDirective(WebCore::ContentSecurityPolicy *this, const WTF::String *a2)
{
  int v4;
  BOOL v5;
  int v6;
  _BOOL4 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  void (***v10)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD);
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *result;
  WTF *v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  if (!a2)
  {
    v4 = 0;
    goto LABEL_3;
  }
  v4 = *((_DWORD *)a2 + 1);
  switch(v4)
  {
    case 5:
      v15 = *((_QWORD *)a2 + 1);
      if ((*((_BYTE *)a2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v15 & 0xDF) != 0x41
          || (*(_BYTE *)(v15 + 1) & 0xDF) != 0x4C
          || (*(_BYTE *)(v15 + 2) & 0xDF) != 0x4C
          || (*(_BYTE *)(v15 + 3) & 0xDF) != 0x4F)
        {
          goto LABEL_93;
        }
        v16 = *(unsigned __int8 *)(v15 + 4);
      }
      else
      {
        if ((*(_WORD *)v15 & 0xFFDF) != 0x41
          || (*(_WORD *)(v15 + 2) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v15 + 4) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v15 + 6) & 0xFFDF) != 0x4F)
        {
          goto LABEL_93;
        }
        v16 = *(unsigned __int16 *)(v15 + 8);
      }
      if ((v16 & 0xFFFFFFDF) == 0x57)
        goto LABEL_63;
      goto LABEL_93;
    case 7:
      v17 = *((_QWORD *)a2 + 1);
      if ((*((_BYTE *)a2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v17 & 0xDF) != 0x4F
          || (*(_BYTE *)(v17 + 1) & 0xDF) != 0x50
          || (*(_BYTE *)(v17 + 2) & 0xDF) != 0x54
          || (*(_BYTE *)(v17 + 3) & 0xDF) != 0x49
          || (*(_BYTE *)(v17 + 4) & 0xDF) != 0x4F
          || (*(_BYTE *)(v17 + 5) & 0xDF) != 0x4E)
        {
          goto LABEL_93;
        }
        v18 = *(unsigned __int8 *)(v17 + 6);
      }
      else
      {
        if ((*(_WORD *)v17 & 0xFFDF) != 0x4F
          || (*(_WORD *)(v17 + 2) & 0xFFDF) != 0x50
          || (*(_WORD *)(v17 + 4) & 0xFFDF) != 0x54
          || (*(_WORD *)(v17 + 6) & 0xFFDF) != 0x49
          || (*(_WORD *)(v17 + 8) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v17 + 10) & 0xFFDF) != 0x4E)
        {
          goto LABEL_93;
        }
        v18 = *(unsigned __int16 *)(v17 + 12);
      }
      if ((v18 & 0xFFFFFFDF) == 0x53)
      {
LABEL_63:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v9 = v26;
        v24 = 0;
        v25 = v26;
        if (!v26)
          goto LABEL_64;
        goto LABEL_14;
      }
LABEL_93:
      *(_DWORD *)a2 += 2;
      goto LABEL_3;
    case 10:
      v19 = *((_QWORD *)a2 + 1);
      if ((*((_BYTE *)a2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v19 & 0xDF) == 0x50)
        {
          if ((*(_BYTE *)(v19 + 1) & 0xDF) != 0x4F
            || (*(_BYTE *)(v19 + 2) & 0xDF) != 0x4C
            || (*(_BYTE *)(v19 + 3) & 0xDF) != 0x49
            || (*(_BYTE *)(v19 + 4) & 0xDF) != 0x43
            || (*(_BYTE *)(v19 + 5) & 0xDF) != 0x59
            || (*(_BYTE *)(v19 + 6) & 0xDF) != 0xD
            || (*(_BYTE *)(v19 + 7) & 0xDF) != 0x55
            || (*(_BYTE *)(v19 + 8) & 0xDF) != 0x52)
          {
            goto LABEL_94;
          }
          v20 = *(unsigned __int8 *)(v19 + 9);
LABEL_62:
          if ((v20 & 0xFFFFFFDF) == 0x49)
            goto LABEL_63;
LABEL_94:
          *(_DWORD *)a2 += 2;
          v4 = 10;
          goto LABEL_3;
        }
      }
      else if ((*(_WORD *)v19 & 0xFFDF) == 0x50)
      {
        if ((*(_WORD *)(v19 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v19 + 4) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v19 + 6) & 0xFFDF) != 0x49
          || (*(_WORD *)(v19 + 8) & 0xFFDF) != 0x43
          || (*(_WORD *)(v19 + 10) & 0xFFDF) != 0x59
          || (*(_WORD *)(v19 + 12) & 0xFFDF) != 0xD
          || (*(_WORD *)(v19 + 14) & 0xFFDF) != 0x55
          || (*(_WORD *)(v19 + 16) & 0xFFDF) != 0x52)
        {
          goto LABEL_94;
        }
        v20 = *(unsigned __int16 *)(v19 + 18);
        goto LABEL_62;
      }
      goto LABEL_93;
  }
  *(_DWORD *)a2 += 2;
  if (v4 < 0)
  {
LABEL_30:
    v26 = 0;
    goto LABEL_31;
  }
LABEL_3:
  v5 = __OFADD__(v4, 3);
  v6 = v4 + 3;
  if (v5 || __OFADD__(v6, 48))
    goto LABEL_30;
  v7 = !a2 || (*((_BYTE *)a2 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v6 + 48), v7, (int8x16_t *)"Unrecognized Content-Security-Policy directive '", 0x30u, (uint64_t)a2, (int8x16_t *)"'.\n", 3u, &v26);
  v9 = v26;
  if (!v26)
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x19607DA4CLL);
  }
  v25 = v26;
  v26 = 0;
  if (a2)
  {
    if (*(_DWORD *)a2 == 2)
      WTF::StringImpl::destroy(a2, v8);
    else
      *(_DWORD *)a2 -= 2;
  }
  v24 = 0;
LABEL_14:
  if (*((_DWORD *)v9 + 1) && *((_BYTE *)this + 181))
  {
    v10 = (void (***)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))*((_QWORD *)this + 2);
    if (v10)
    {
      (**v10)(v10, 8, 2, &v25, 0);
    }
    else
    {
      v11 = *((_QWORD *)this + 1);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          v26 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD, _QWORD, WTF::StringImpl **, _QWORD, _QWORD))(*(_QWORD *)(v12 - 96) + 416))(v12 - 96, 8, 2, &v25, &v24, 0, 0, &v26, 0, 0);
          v13 = v26;
          v26 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
            {
              v22 = (WTF *)MEMORY[0x19AEA6024]();
              WTF::fastFree(v22, v23);
            }
            else
            {
              --*(_DWORD *)v13;
            }
          }
          v14 = v24;
          v24 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v8);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
    }
  }
LABEL_64:
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ContentSecurityPolicy::reportDirectiveAsSourceExpression(uint64_t a1, uint64_t *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  size_t v19;
  _BYTE *v20;
  char *v21;
  _BYTE *v22;
  size_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  _WORD *v27;
  int8x16_t *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  char *v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  _WORD *v42;
  _WORD *v43;
  _OWORD *v44;
  char *v45;
  int8x16_t *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  char *v56;
  char *v57;
  char *v58;
  __int16 v59;
  char *v60;
  _WORD *v61;
  _WORD *v62;
  void (***v63)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD);
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *result;
  int v69;
  int v70;
  WTF *v71;
  void *v72;
  char *v73;
  const char *v74;
  unsigned __int128 *v75;
  unsigned __int128 v76;
  unsigned __int128 *v77;
  unsigned __int128 *v78;
  unsigned __int128 v79;
  unsigned __int128 *v80;
  unsigned __int128 *v81;
  unsigned __int128 v82;
  unsigned __int128 *v83;
  unsigned __int128 *v84;
  unsigned __int128 v85;
  char v86;
  char v87;
  char v88;
  char v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;
  int8x16x2_t v97;
  int8x16x2_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;

  v7 = *a2;
  if (*a2)
  {
    v8 = *(_DWORD *)(v7 + 4);
    *(_DWORD *)v7 += 4;
    if ((a4 & 0x80000000) != 0)
      goto LABEL_56;
  }
  else
  {
    v8 = 0;
    if ((a4 & 0x80000000) != 0)
      goto LABEL_56;
  }
  if (__OFADD__((_DWORD)a4, 26))
    goto LABEL_56;
  v9 = a4 + 32;
  if (__OFADD__(a4 + 26, 6))
    goto LABEL_56;
  if (v8 < 0)
    goto LABEL_56;
  v10 = __OFADD__(v8, v9);
  v11 = v8 + v9;
  if (v10)
    goto LABEL_56;
  v10 = __OFADD__(v11, 40);
  v12 = v11 + 40;
  if (v10
    || (v10 = __OFADD__((_DWORD)a4, v12), v13 = a4 + v12, v10)
    || (v10 = __OFADD__(v13, 12), v14 = v13 + 12, v10)
    || (v10 = __OFADD__(v8, v14), v15 = v8 + v14, v10)
    || (v16 = (v15 + 39), __OFADD__(v15, 39)))
  {
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x19607E10CLL);
  }
  if (v7)
  {
    if ((a4 & 0xFF00000000) != 0 && (*(_DWORD *)(v7 + 16) & 4) != 0)
    {
LABEL_15:
      if (v15 != -39)
      {
        if ((v16 & 0x80000000) == 0)
        {
          WTF::tryFastCompactMalloc((WTF *)(v16 + 20));
          v17 = v93;
          if (v93)
          {
            *(_OWORD *)(v93 + 20) = *(_OWORD *)"The Content Security Policy directive '";
            *(_DWORD *)v17 = 2;
            *((_DWORD *)v17 + 1) = v16;
            *((_QWORD *)v17 + 1) = v17 + 20;
            *((_DWORD *)v17 + 4) = 4;
            qmemcpy(v17 + 36, "rity Policy directive '", 23);
            v18 = v17 + 59;
            if (v7)
            {
              a2 = *(uint64_t **)(v7 + 8);
              v19 = *(unsigned int *)(v7 + 4);
              if ((*(_BYTE *)(v7 + 16) & 4) != 0)
              {
                if ((_DWORD)v19)
                {
                  if ((_DWORD)v19 == 1)
                    *v18 = *(_BYTE *)a2;
                  else
                    memcpy(v17 + 59, a2, v19);
                }
              }
              else
              {
                if (v19 < 0x10)
                {
                  v80 = (unsigned __int128 *)(v17 + 59);
                }
                else
                {
                  v80 = (unsigned __int128 *)&v18[v19 & 0xFFFFFFF0];
                  v81 = (unsigned __int128 *)(v17 + 59);
                  do
                  {
                    v82 = (unsigned __int128)vld2q_s8((const char *)a2);
                    a2 += 4;
                    *v81++ = v82;
                  }
                  while (v81 != v80);
                }
                while (v80 != (unsigned __int128 *)&v18[v19])
                {
                  v88 = *(_BYTE *)a2;
                  a2 = (uint64_t *)((char *)a2 + 2);
                  *(_BYTE *)v80 = v88;
                  v80 = (unsigned __int128 *)((char *)v80 + 1);
                }
              }
              v18 += *(unsigned int *)(v7 + 4);
            }
            *((_DWORD *)v18 + 2) = 656438126;
            *(_QWORD *)v18 = *(_QWORD *)"' contains '";
            v20 = v18 + 12;
            if ((a4 & 0xFF00000000) != 0)
            {
              if ((_DWORD)a4)
              {
                if ((_DWORD)a4 == 1)
                  *v20 = *a3;
                else
                  memcpy(v20, a3, a4);
              }
            }
            else
            {
              if (a4 < 0x10)
              {
                v74 = a3;
                v73 = v20;
              }
              else
              {
                v73 = &v20[a4 & 0xFFFFFFF0];
                v74 = a3;
                v75 = (unsigned __int128 *)v20;
                do
                {
                  v76 = (unsigned __int128)vld2q_s8(v74);
                  v74 += 32;
                  *v75++ = v76;
                }
                while (v75 != (unsigned __int128 *)v73);
              }
              while (v73 != &v20[a4])
              {
                v86 = *v74;
                v74 += 2;
                *v73++ = v86;
              }
            }
            v21 = &v20[a4];
            qmemcpy(v21, "' as a source expression. Did you mean '", 40);
            v22 = v21 + 40;
            if (v7)
            {
              a2 = *(uint64_t **)(v7 + 8);
              v23 = *(unsigned int *)(v7 + 4);
              if ((*(_BYTE *)(v7 + 16) & 4) != 0)
              {
                if ((_DWORD)v23)
                {
                  if ((_DWORD)v23 == 1)
                    *v22 = *(_BYTE *)a2;
                  else
                    memcpy(v22, a2, v23);
                }
              }
              else
              {
                if (v23 < 0x10)
                {
                  v83 = (unsigned __int128 *)(v21 + 40);
                }
                else
                {
                  v83 = (unsigned __int128 *)&v22[v23 & 0xFFFFFFF0];
                  v84 = (unsigned __int128 *)(v21 + 40);
                  do
                  {
                    v85 = (unsigned __int128)vld2q_s8((const char *)a2);
                    a2 += 4;
                    *v84++ = v85;
                  }
                  while (v84 != v83);
                }
                while (v83 != (unsigned __int128 *)&v22[v23])
                {
                  v89 = *(_BYTE *)a2;
                  a2 = (uint64_t *)((char *)a2 + 2);
                  *(_BYTE *)v83 = v89;
                  v83 = (unsigned __int128 *)((char *)v83 + 1);
                }
              }
              v24 = *(unsigned int *)(v7 + 4);
            }
            else
            {
              v24 = 0;
            }
            v25 = &v22[v24];
            *((_WORD *)v25 + 2) = 8251;
            *(_DWORD *)v25 = 774778400;
            v26 = v25 + 6;
            if ((a4 & 0xFF00000000) != 0)
            {
              if ((_DWORD)a4)
              {
                if ((_DWORD)a4 == 1)
                  *v26 = *a3;
                else
                  memcpy(v25 + 6, a3, a4);
              }
            }
            else
            {
              if (a4 < 0x10)
              {
                v77 = (unsigned __int128 *)(v25 + 6);
              }
              else
              {
                v77 = (unsigned __int128 *)&v26[a4 & 0xFFFFFFF0];
                v78 = (unsigned __int128 *)(v25 + 6);
                do
                {
                  v79 = (unsigned __int128)vld2q_s8(a3);
                  a3 += 32;
                  *v78++ = v79;
                }
                while (v78 != v77);
              }
              while (v77 != (unsigned __int128 *)&v26[a4])
              {
                v87 = *a3;
                a3 += 2;
                *(_BYTE *)v77 = v87;
                v77 = (unsigned __int128 *)((char *)v77 + 1);
              }
            }
            qmemcpy(&v26[a4], "...' (note the semicolon)?", 26);
            goto LABEL_81;
          }
        }
        goto LABEL_56;
      }
LABEL_108:
      v17 = (_BYTE *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_81;
    }
  }
  else if ((a4 & 0xFF00000000) != 0)
  {
    goto LABEL_15;
  }
  if (v15 == -39)
    goto LABEL_108;
  if (v16 > 0x7FFFFFEF)
    goto LABEL_56;
  WTF::tryFastCompactMalloc((WTF *)(2 * v16 + 20));
  v17 = v93;
  if (!v93)
    goto LABEL_56;
  *(_DWORD *)v93 = 2;
  *((_DWORD *)v17 + 1) = v16;
  *(_OWORD *)(v17 + 20) = xmmword_1969F61D0;
  *((_QWORD *)v17 + 1) = v17 + 20;
  *((_DWORD *)v17 + 4) = 0;
  v27 = v17 + 98;
  *(_OWORD *)(v17 + 36) = xmmword_1969F61E0;
  *(_OWORD *)(v17 + 52) = xmmword_1969F61F0;
  *(_OWORD *)(v17 + 68) = xmmword_1969F6200;
  *(_QWORD *)(v17 + 84) = 0x76006900740063;
  *((_DWORD *)v17 + 23) = 2097253;
  *((_WORD *)v17 + 48) = 39;
  if (v7)
  {
    v28 = *(int8x16_t **)(v7 + 8);
    v29 = *(unsigned int *)(v7 + 4);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      v30 = (char *)&v27[v29];
      if (v29 >= 0x40)
      {
        v31 = (char *)&v27[v29 & 0xFFFFFFC0];
        v33 = 0uLL;
        v34 = v17 + 98;
        do
        {
          v95.val[0] = *v28;
          v35 = v28[1];
          v97.val[0] = v28[2];
          v36 = v28[3];
          v28 += 4;
          v37 = v36;
          v97.val[1] = 0uLL;
          v99.val[0] = v35;
          v95.val[1] = 0uLL;
          v38 = v34;
          vst2q_s8(v38, v95);
          v38 += 32;
          v99.val[1] = 0uLL;
          vst2q_s8(v38, v99);
          v39 = v34 + 64;
          vst2q_s8(v39, v97);
          v40 = v34 + 96;
          vst2q_s8(v40, *(int8x16x2_t *)(&v33 - 1));
          v34 += 128;
        }
        while (v34 != v31);
      }
      else
      {
        v31 = v17 + 98;
      }
      while (v31 != v30)
      {
        v41 = v28->u8[0];
        v28 = (int8x16_t *)((char *)v28 + 1);
        *(_WORD *)v31 = v41;
        v31 += 2;
      }
    }
    else if ((_DWORD)v29 == 1)
    {
      *v27 = v28->i16[0];
    }
    else if ((_DWORD)v29)
    {
      memcpy(v17 + 98, v28, 2 * v29);
    }
    v32 = *(unsigned int *)(v7 + 4);
  }
  else
  {
    v32 = 0;
  }
  v42 = &v27[v32];
  *(_OWORD *)v42 = xmmword_1969F6210;
  *((_QWORD *)v42 + 2) = 0x2700200073006ELL;
  v43 = v42 + 12;
  v91 = (WTF::StringImpl *)a3;
  v92 = a4;
  WTF::StringView::getCharacters<char16_t>(&v91, (char *)v42 + 24);
  v44 = &v43[v92];
  *v44 = xmmword_1969F6220;
  v44[1] = xmmword_1969F6230;
  v44[2] = xmmword_1969F6240;
  v44[3] = xmmword_1969F6250;
  v44[4] = xmmword_1969F6260;
  v45 = (char *)(v44 + 5);
  if (v7)
  {
    v46 = *(int8x16_t **)(v7 + 8);
    v47 = *(unsigned int *)(v7 + 4);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      v48 = &v45[2 * v47];
      if (v47 >= 0x40)
      {
        v49 = &v45[2 * (v47 & 0xFFFFFFC0)];
        v51 = 0uLL;
        v52 = v45;
        do
        {
          v96.val[0] = *v46;
          v53 = v46[1];
          v98.val[0] = v46[2];
          v54 = v46[3];
          v46 += 4;
          v55 = v54;
          v98.val[1] = 0uLL;
          v100.val[0] = v53;
          v96.val[1] = 0uLL;
          v56 = v52;
          vst2q_s8(v56, v96);
          v56 += 32;
          v100.val[1] = 0uLL;
          vst2q_s8(v56, v100);
          v57 = v52 + 64;
          vst2q_s8(v57, v98);
          v58 = v52 + 96;
          vst2q_s8(v58, *(int8x16x2_t *)(&v51 - 1));
          v52 += 128;
        }
        while (v52 != v49);
      }
      else
      {
        v49 = v45;
      }
      while (v49 != v48)
      {
        v59 = v46->u8[0];
        v46 = (int8x16_t *)((char *)v46 + 1);
        *(_WORD *)v49 = v59;
        v49 += 2;
      }
    }
    else if ((_DWORD)v47 == 1)
    {
      *(_WORD *)v45 = v46->i16[0];
    }
    else if ((_DWORD)v47)
    {
      memcpy(v45, v46, 2 * v47);
    }
    v50 = *(unsigned int *)(v7 + 4);
  }
  else
  {
    v50 = 0;
  }
  v60 = &v45[2 * v50];
  *(_WORD *)v60 = 32;
  *(_QWORD *)(v60 + 2) = 0x3B002E002E002ELL;
  *((_WORD *)v60 + 5) = 32;
  v61 = v60 + 12;
  v93 = a3;
  v94 = a4;
  WTF::StringView::getCharacters<char16_t>(&v93, v60 + 12);
  v62 = &v61[v94];
  *v62 = 46;
  *(_OWORD *)(v62 + 1) = xmmword_1969F6270;
  *(_OWORD *)(v62 + 9) = xmmword_1969F6280;
  *(_OWORD *)(v62 + 17) = xmmword_1969F6290;
  v62[25] = 63;
LABEL_81:
  v90 = 0;
  v91 = (WTF::StringImpl *)v17;
  if (*((_DWORD *)v17 + 1) && *(_BYTE *)(a1 + 181))
  {
    v63 = *(void (****)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(a1 + 16);
    if (v63)
    {
      (**v63)(v63, 8, 2, &v91, 0);
    }
    else
    {
      v64 = *(_QWORD *)(a1 + 8);
      if (v64)
      {
        v65 = *(_QWORD *)(v64 + 8);
        if (v65)
        {
          v93 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD, _QWORD, _BYTE **, _QWORD, _QWORD))(*(_QWORD *)(v65 - 96) + 416))(v65 - 96, 8, 2, &v91, &v90, 0, 0, &v93, 0, 0);
          v66 = v93;
          v93 = 0;
          if (v66)
          {
            if (*v66 == 1)
            {
              v71 = (WTF *)MEMORY[0x19AEA6024]();
              WTF::fastFree(v71, v72);
            }
            else
            {
              --*v66;
            }
          }
          v67 = v90;
          v90 = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
              WTF::StringImpl::destroy(v67, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v67 -= 2;
          }
        }
      }
    }
  }
  result = v91;
  v91 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      if (!v7)
        return result;
      goto LABEL_97;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v7)
    return result;
LABEL_97:
  v69 = *(_DWORD *)v7 - 2;
  if (*(_DWORD *)v7 == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, (WTF::StringImpl *)a2);
    v69 = *(_DWORD *)v7;
  }
  else
  {
    *(_DWORD *)v7 = v69;
  }
  v70 = v69 - 2;
  if (!v70)
    return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, (WTF::StringImpl *)a2);
  *(_DWORD *)v7 = v70;
  return result;
}

uint64_t WebCore::ContentSecurityPolicy::reportDuplicateDirective(uint64_t this, const WTF::String *a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  _BOOL4 v7;
  WTF::StringImpl *v8;
  void (***v9)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD);
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;

  v3 = this;
  if (a2)
  {
    v4 = *((_DWORD *)a2 + 1);
    *(_DWORD *)a2 += 2;
    if (v4 < 0)
    {
LABEL_35:
      v17 = 0;
LABEL_36:
      __break(0xC471u);
      return this;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = __OFADD__(v4, 3);
  v6 = v4 + 3;
  if (v5)
    goto LABEL_35;
  this = (v6 + 54);
  if (__OFADD__(v6, 54))
    goto LABEL_35;
  v7 = !a2 || (*((_BYTE *)a2 + 16) & 4) != 0;
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(this, v7, (int8x16_t *)"Ignoring duplicate Content-Security-Policy directive '", 0x36u, (uint64_t)a2, (int8x16_t *)"'.\n", 3u, &v17);
  if (!v17)
    goto LABEL_36;
  v16 = 0;
  if (*((_DWORD *)v17 + 1) && *(_BYTE *)(v3 + 181))
  {
    v9 = *(void (****)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(v3 + 16);
    if (v9)
    {
      (**v9)(v9, 8, 2, &v17, 0);
    }
    else
    {
      v10 = *(_QWORD *)(v3 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v18 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD, _QWORD, _DWORD **, _QWORD, _QWORD))(*(_QWORD *)(v11 - 96) + 416))(v11 - 96, 8, 2, &v17, &v16, 0, 0, &v18, 0, 0);
          v12 = v18;
          v18 = 0;
          if (v12)
          {
            if (*v12 == 1)
            {
              v14 = (WTF *)MEMORY[0x19AEA6024]();
              WTF::fastFree(v14, v15);
            }
            else
            {
              --*v12;
            }
          }
          v13 = v16;
          v16 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v8);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
      }
    }
  }
  this = (uint64_t)v17;
  v17 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v8);
      if (!a2)
        return this;
      goto LABEL_26;
    }
    *(_DWORD *)this -= 2;
  }
  if (!a2)
    return this;
LABEL_26:
  if (*(_DWORD *)a2 == 2)
    return WTF::StringImpl::destroy(a2, v8);
  *(_DWORD *)a2 -= 2;
  return this;
}

uint64_t WebCore::ContentSecurityPolicy::reportInvalidPluginTypes(uint64_t this, WTF::StringImpl **a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  int v4;
  BOOL v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void (***v9)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD);
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v2 = this;
  v3 = *a2;
  if (!*a2)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = v18;
    v16 = 0;
    v17 = v18;
    if (!v18)
      return this;
    goto LABEL_9;
  }
  v4 = *((_DWORD *)v3 + 1);
  *(_DWORD *)v3 += 2;
  if (v4 < 0 || (v5 = __OFADD__(v4, 3), v6 = v4 + 3, v5) || (this = (v6 + 74), __OFADD__(v6, 74)))
  {
    v18 = 0;
    goto LABEL_32;
  }
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(this, (*((_DWORD *)v3 + 4) >> 2) & 1, (int8x16_t *)"Invalid plugin type in 'plugin-types' Content Security Policy directive: '", 0x4Au, (uint64_t)v3, (int8x16_t *)"'.\n", 3u, &v18);
  v8 = v18;
  if (!v18)
  {
LABEL_32:
    __break(0xC471u);
    return this;
  }
  v17 = v18;
  v18 = 0;
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v7);
  else
    *(_DWORD *)v3 -= 2;
  v16 = 0;
LABEL_9:
  if (*((_DWORD *)v8 + 1) && *(_BYTE *)(v2 + 181))
  {
    v9 = *(void (****)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(v2 + 16);
    if (v9)
    {
      (**v9)(v9, 8, 2, &v17, 0);
    }
    else
    {
      v10 = *(_QWORD *)(v2 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v18 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD, _QWORD, WTF::StringImpl **, _QWORD, _QWORD))(*(_QWORD *)(v11 - 96) + 416))(v11 - 96, 8, 2, &v17, &v16, 0, 0, &v18, 0, 0);
          v12 = v18;
          v18 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 1)
            {
              v14 = (WTF *)MEMORY[0x19AEA6024]();
              WTF::fastFree(v14, v15);
            }
            else
            {
              --*(_DWORD *)v12;
            }
          }
          v13 = v16;
          v16 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v7);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
      }
    }
  }
  this = (uint64_t)v17;
  v17 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::ContentSecurityPolicy::reportInvalidTrustedTypesPolicy(WTF::StringImpl *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  WTF::StringImpl *v9;
  _BYTE *v10;
  size_t v11;
  _BYTE *v12;
  void (***v13)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD);
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  void *v19;
  unsigned __int128 *v20;
  unsigned __int128 *v21;
  unsigned __int128 v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;

  v2 = this;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_DWORD *)(v3 + 4);
    *(_DWORD *)v3 += 2;
    if (v4 < 0)
      goto LABEL_50;
  }
  else
  {
    v4 = 0;
  }
  v5 = __OFADD__(v4, 3);
  v6 = v4 + 3;
  if (v5)
    goto LABEL_50;
  v7 = (v6 + 75);
  if (__OFADD__(v6, 75))
    goto LABEL_50;
  if (!v3)
  {
    this = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v7 + 20));
    v9 = (WTF::StringImpl *)v26;
    if (v26)
    {
      *(_OWORD *)(v26 + 36) = *(_OWORD *)"ame in 'trusted-types' Content Security Policy directive: '";
      qmemcpy((char *)v9 + 52, "types' Content Security Policy directive: ''.\n", 46);
      *(_DWORD *)v9 = 2;
      *((_DWORD *)v9 + 1) = v7;
      *((_QWORD *)v9 + 1) = (char *)v9 + 20;
      *((_DWORD *)v9 + 4) = 4;
      *(_OWORD *)((char *)v9 + 20) = *(_OWORD *)"Invalid policy name in 'trusted-types' Content Security Policy directive: '";
      v24 = 0;
      v25 = v9;
      goto LABEL_17;
    }
    goto LABEL_50;
  }
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    this = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v7 + 20));
    v9 = (WTF::StringImpl *)v26;
    if (v26)
    {
      *(_OWORD *)(v26 + 20) = *(_OWORD *)"Invalid policy name in 'trusted-types' Content Security Policy directive: '";
      *(_DWORD *)v9 = 2;
      *((_DWORD *)v9 + 1) = v7;
      *((_QWORD *)v9 + 1) = (char *)v9 + 20;
      *((_DWORD *)v9 + 4) = 4;
      qmemcpy((char *)v9 + 36, "ame in 'trusted-types' Content Security Policy directive: '", 59);
      v10 = (char *)v9 + 95;
      v8 = *(_BYTE **)(v3 + 8);
      v11 = *(unsigned int *)(v3 + 4);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        if ((_DWORD)v11)
        {
          if ((_DWORD)v11 == 1)
            *v10 = *v8;
          else
            memcpy((char *)v9 + 95, v8, v11);
        }
      }
      else
      {
        if (v11 < 0x10)
        {
          v20 = (unsigned __int128 *)((char *)v9 + 95);
        }
        else
        {
          v20 = (unsigned __int128 *)&v10[v11 & 0xFFFFFFF0];
          v21 = (unsigned __int128 *)((char *)v9 + 95);
          do
          {
            v22 = (unsigned __int128)vld2q_s8(v8);
            v8 += 32;
            *v21++ = v22;
          }
          while (v21 != v20);
        }
        while (v20 != (unsigned __int128 *)&v10[v11])
        {
          v23 = *v8;
          v8 += 2;
          *(_BYTE *)v20 = v23;
          v20 = (unsigned __int128 *)((char *)v20 + 1);
        }
      }
      v12 = &v10[*(unsigned int *)(v3 + 4)];
      v12[2] = 10;
      *(_WORD *)v12 = 11815;
      v25 = v9;
      goto LABEL_15;
    }
LABEL_50:
    v25 = 0;
LABEL_51:
    __break(0xC471u);
    return this;
  }
  this = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v7, 0, (int8x16_t *)"Invalid policy name in 'trusted-types' Content Security Policy directive: '", 0x4Bu, v3, (int8x16_t *)"'.\n", 3u, &v25);
  v9 = v25;
  if (!v25)
    goto LABEL_51;
LABEL_15:
  if (*(_DWORD *)v3 == 2)
  {
    this = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v3, (WTF::StringImpl *)v8);
    v9 = v25;
    v24 = 0;
    if (!v25)
      return this;
  }
  else
  {
    *(_DWORD *)v3 -= 2;
    v24 = 0;
  }
LABEL_17:
  if (*((_DWORD *)v9 + 1) && *((_BYTE *)v2 + 181))
  {
    v13 = (void (***)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))*((_QWORD *)v2 + 2);
    if (v13)
    {
      (**v13)(v13, 8, 2, &v25, 0);
    }
    else
    {
      v14 = *((_QWORD *)v2 + 1);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          v26 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD, _QWORD, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)(v15 - 96) + 416))(v15 - 96, 8, 2, &v25, &v24, 0, 0, &v26, 0, 0);
          v16 = (_DWORD *)v26;
          v26 = 0;
          if (v16)
          {
            if (*v16 == 1)
            {
              v18 = (WTF *)MEMORY[0x19AEA6024]();
              WTF::fastFree(v18, v19);
            }
            else
            {
              --*v16;
            }
          }
          v17 = v24;
          v24 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
      }
    }
  }
  this = v25;
  v25 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::ContentSecurityPolicy::reportInvalidTrustedTypesNoneKeyword(WebCore::ContentSecurityPolicy *this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  void (***v4)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD);
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = 0;
  v12 = v13;
  if (v13)
  {
    if (*((_DWORD *)v13 + 1) && *((_BYTE *)this + 181))
    {
      v4 = (void (***)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))*((_QWORD *)this + 2);
      if (v4)
      {
        (**v4)(v4, 8, 2, &v12, 0);
      }
      else
      {
        v5 = *((_QWORD *)this + 1);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
          {
            v13 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD, _QWORD, WTF::StringImpl **, _QWORD, _QWORD))(*(_QWORD *)(v6 - 96) + 416))(v6 - 96, 8, 2, &v12, &v11, 0, 0, &v13, 0, 0);
            v7 = v13;
            v13 = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 1)
              {
                v9 = (WTF *)MEMORY[0x19AEA6024]();
                WTF::fastFree(v9, v10);
              }
              else
              {
                --*(_DWORD *)v7;
              }
            }
            v8 = v11;
            v11 = 0;
            if (v8)
            {
              if (*(_DWORD *)v8 == 2)
                WTF::StringImpl::destroy(v8, v3);
              else
                *(_DWORD *)v8 -= 2;
            }
          }
        }
      }
    }
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::ContentSecurityPolicy::reportInvalidTrustedTypesSinkGroup(WTF::StringImpl *this, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  int v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  WTF::StringImpl *v9;
  _BYTE *v10;
  size_t v11;
  _BYTE *v12;
  void (***v13)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD);
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  void *v19;
  unsigned __int128 *v20;
  unsigned __int128 *v21;
  unsigned __int128 v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;

  v3 = this;
  if (a2)
  {
    v4 = *((_DWORD *)a2 + 1);
    *(_DWORD *)a2 += 2;
    if (v4 < 0)
      goto LABEL_50;
  }
  else
  {
    v4 = 0;
  }
  v5 = __OFADD__(v4, 3);
  v6 = v4 + 3;
  if (v5)
    goto LABEL_50;
  v7 = (v6 + 86);
  if (__OFADD__(v6, 86))
    goto LABEL_50;
  if (!a2)
  {
    this = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v7 + 20));
    v9 = (WTF::StringImpl *)v26;
    if (v26)
    {
      *(_OWORD *)(v26 + 52) = *(_OWORD *)"rusted-types-for' Content Security Policy directive: '";
      qmemcpy((char *)v9 + 68, "' Content Security Policy directive: ''.\n", 41);
      qmemcpy((char *)v9 + 20, "Invalid sink group in 'require-t", 32);
      *(_DWORD *)v9 = 2;
      *((_DWORD *)v9 + 1) = v7;
      *((_QWORD *)v9 + 1) = (char *)v9 + 20;
      *((_DWORD *)v9 + 4) = 4;
      v24 = 0;
      v25 = v9;
      goto LABEL_17;
    }
    goto LABEL_50;
  }
  if ((*((_BYTE *)a2 + 16) & 4) != 0)
  {
    this = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v7 + 20));
    v9 = (WTF::StringImpl *)v26;
    if (v26)
    {
      *(_OWORD *)(v26 + 20) = *(_OWORD *)"Invalid sink group in 'require-trusted-types-for' Content Security Policy directive: '";
      qmemcpy((char *)v9 + 36, "up in 'require-trusted-types-for' Content Security Policy directive: '", 70);
      *(_DWORD *)v9 = 2;
      *((_DWORD *)v9 + 1) = v7;
      *((_QWORD *)v9 + 1) = (char *)v9 + 20;
      *((_DWORD *)v9 + 4) = 4;
      v10 = (char *)v9 + 106;
      v8 = (_BYTE *)*((_QWORD *)a2 + 1);
      v11 = *((unsigned int *)a2 + 1);
      if ((*((_BYTE *)a2 + 16) & 4) != 0)
      {
        if ((_DWORD)v11)
        {
          if ((_DWORD)v11 == 1)
            *v10 = *v8;
          else
            memcpy((char *)v9 + 106, v8, v11);
        }
      }
      else
      {
        if (v11 < 0x10)
        {
          v20 = (unsigned __int128 *)((char *)v9 + 106);
        }
        else
        {
          v20 = (unsigned __int128 *)&v10[v11 & 0xFFFFFFF0];
          v21 = (unsigned __int128 *)((char *)v9 + 106);
          do
          {
            v22 = (unsigned __int128)vld2q_s8(v8);
            v8 += 32;
            *v21++ = v22;
          }
          while (v21 != v20);
        }
        while (v20 != (unsigned __int128 *)&v10[v11])
        {
          v23 = *v8;
          v8 += 2;
          *(_BYTE *)v20 = v23;
          v20 = (unsigned __int128 *)((char *)v20 + 1);
        }
      }
      v12 = &v10[*((unsigned int *)a2 + 1)];
      v12[2] = 10;
      *(_WORD *)v12 = 11815;
      v25 = v9;
      goto LABEL_15;
    }
LABEL_50:
    v25 = 0;
LABEL_51:
    __break(0xC471u);
    return this;
  }
  this = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v7, 0, (int8x16_t *)"Invalid sink group in 'require-trusted-types-for' Content Security Policy directive: '", 0x56u, (uint64_t)a2, (int8x16_t *)"'.\n", 3u, &v25);
  v9 = v25;
  if (!v25)
    goto LABEL_51;
LABEL_15:
  if (*(_DWORD *)a2 == 2)
  {
    this = (WTF::StringImpl *)WTF::StringImpl::destroy(a2, (WTF::StringImpl *)v8);
    v9 = v25;
    v24 = 0;
    if (!v25)
      return this;
  }
  else
  {
    *(_DWORD *)a2 -= 2;
    v24 = 0;
  }
LABEL_17:
  if (*((_DWORD *)v9 + 1) && *((_BYTE *)v3 + 181))
  {
    v13 = (void (***)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))*((_QWORD *)v3 + 2);
    if (v13)
    {
      (**v13)(v13, 8, 2, &v25, 0);
    }
    else
    {
      v14 = *((_QWORD *)v3 + 1);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          v26 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD, _QWORD, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)(v15 - 96) + 416))(v15 - 96, 8, 2, &v25, &v24, 0, 0, &v26, 0, 0);
          v16 = (_DWORD *)v26;
          v26 = 0;
          if (v16)
          {
            if (*v16 == 1)
            {
              v18 = (WTF *)MEMORY[0x19AEA6024]();
              WTF::fastFree(v18, v19);
            }
            else
            {
              --*v16;
            }
          }
          v17 = v24;
          v24 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
      }
    }
  }
  this = v25;
  v25 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::ContentSecurityPolicy::reportInvalidDirectiveInReportOnlyMode(uint64_t this, const WTF::String *a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  _BOOL4 v7;
  WTF::StringImpl *v8;
  void (***v9)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD);
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;

  v3 = this;
  if (a2)
  {
    v4 = *((_DWORD *)a2 + 1);
    *(_DWORD *)a2 += 2;
    if (v4 < 0)
    {
LABEL_35:
      v17 = 0;
LABEL_36:
      __break(0xC471u);
      return this;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = __OFADD__(v4, 52);
  v6 = v4 + 52;
  if (v5)
    goto LABEL_35;
  this = (v6 + 39);
  if (__OFADD__(v6, 39))
    goto LABEL_35;
  v7 = !a2 || (*((_BYTE *)a2 + 16) & 4) != 0;
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(this, v7, (int8x16_t *)"The Content Security Policy directive '", 0x27u, (uint64_t)a2, (int8x16_t *)"' is ignored when delivered in a report-only policy.", 0x34u, &v17);
  if (!v17)
    goto LABEL_36;
  v16 = 0;
  if (*((_DWORD *)v17 + 1) && *(_BYTE *)(v3 + 181))
  {
    v9 = *(void (****)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(v3 + 16);
    if (v9)
    {
      (**v9)(v9, 8, 2, &v17, 0);
    }
    else
    {
      v10 = *(_QWORD *)(v3 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v18 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD, _QWORD, _DWORD **, _QWORD, _QWORD))(*(_QWORD *)(v11 - 96) + 416))(v11 - 96, 8, 2, &v17, &v16, 0, 0, &v18, 0, 0);
          v12 = v18;
          v18 = 0;
          if (v12)
          {
            if (*v12 == 1)
            {
              v14 = (WTF *)MEMORY[0x19AEA6024]();
              WTF::fastFree(v14, v15);
            }
            else
            {
              --*v12;
            }
          }
          v13 = v16;
          v16 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v8);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
      }
    }
  }
  this = (uint64_t)v17;
  v17 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v8);
      if (!a2)
        return this;
      goto LABEL_26;
    }
    *(_DWORD *)this -= 2;
  }
  if (!a2)
    return this;
LABEL_26:
  if (*(_DWORD *)a2 == 2)
    return WTF::StringImpl::destroy(a2, v8);
  *(_DWORD *)a2 -= 2;
  return this;
}

uint64_t WebCore::ContentSecurityPolicy::reportInvalidDirectiveInHTTPEquivMeta(uint64_t this, const WTF::String *a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  _BOOL4 v7;
  WTF::StringImpl *v8;
  void (***v9)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD);
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;

  v3 = this;
  if (a2)
  {
    v4 = *((_DWORD *)a2 + 1);
    *(_DWORD *)a2 += 2;
    if (v4 < 0)
    {
LABEL_35:
      v17 = 0;
LABEL_36:
      __break(0xC471u);
      return this;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = __OFADD__(v4, 53);
  v6 = v4 + 53;
  if (v5)
    goto LABEL_35;
  this = (v6 + 39);
  if (__OFADD__(v6, 39))
    goto LABEL_35;
  v7 = !a2 || (*((_BYTE *)a2 + 16) & 4) != 0;
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(this, v7, (int8x16_t *)"The Content Security Policy directive '", 0x27u, (uint64_t)a2, (int8x16_t *)"' is ignored when delivered via an HTML meta element.", 0x35u, &v17);
  if (!v17)
    goto LABEL_36;
  v16 = 0;
  if (*((_DWORD *)v17 + 1) && *(_BYTE *)(v3 + 181))
  {
    v9 = *(void (****)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(v3 + 16);
    if (v9)
    {
      (**v9)(v9, 8, 2, &v17, 0);
    }
    else
    {
      v10 = *(_QWORD *)(v3 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v18 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD, _QWORD, _DWORD **, _QWORD, _QWORD))(*(_QWORD *)(v11 - 96) + 416))(v11 - 96, 8, 2, &v17, &v16, 0, 0, &v18, 0, 0);
          v12 = v18;
          v18 = 0;
          if (v12)
          {
            if (*v12 == 1)
            {
              v14 = (WTF *)MEMORY[0x19AEA6024]();
              WTF::fastFree(v14, v15);
            }
            else
            {
              --*v12;
            }
          }
          v13 = v16;
          v16 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v8);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
      }
    }
  }
  this = (uint64_t)v17;
  v17 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v8);
      if (!a2)
        return this;
      goto LABEL_26;
    }
    *(_DWORD *)this -= 2;
  }
  if (!a2)
    return this;
LABEL_26:
  if (*(_DWORD *)a2 == 2)
    return WTF::StringImpl::destroy(a2, v8);
  *(_DWORD *)a2 -= 2;
  return this;
}

WTF::StringImpl *WebCore::ContentSecurityPolicy::reportInvalidDirectiveValueCharacter(WebCore::ContentSecurityPolicy *this, const WTF::String *a2, const WTF::String *a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  void (***v6)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD);
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];

  if (a2)
    *(_DWORD *)a2 += 2;
  v16 = a2;
  if (a3)
    *(_DWORD *)a3 += 2;
  v15 = a3;
  v20[0] = "The value for Content Security Policy directive '";
  v20[1] = 50;
  v19[0] = "' contains an invalid character: '";
  v19[1] = 35;
  v18[0] = "'. Non-whitespace characters outside ASCII 0x21-0x7E must be percent-encoded, as described in RFC 3986, secti"
           "on 2.1: http://tools.ietf.org/html/rfc3986#section-2.1.";
  v18[1] = 165;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)v20, (uint64_t *)&v16, (uint64_t)v19, (uint64_t *)&v15, (uint64_t)v18, &v17);
  if (v17)
  {
    v19[0] = 0;
    if (*((_DWORD *)v17 + 1) && *((_BYTE *)this + 181))
    {
      v6 = (void (***)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))*((_QWORD *)this + 2);
      if (v6)
      {
        (**v6)(v6, 8, 2, &v17, 0);
      }
      else
      {
        v7 = *((_QWORD *)this + 1);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            v20[0] = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD *, _QWORD, _QWORD, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)(v8 - 96) + 416))(v8 - 96, 8, 2, &v17, v19, 0, 0, v20, 0, 0);
            v9 = (_DWORD *)v20[0];
            v20[0] = 0;
            if (v9)
            {
              if (*v9 == 1)
              {
                v13 = (WTF *)MEMORY[0x19AEA6024]();
                WTF::fastFree(v13, v14);
              }
              else
              {
                --*v9;
              }
            }
            v10 = (WTF::StringImpl *)v19[0];
            v19[0] = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, v5);
              else
                *(_DWORD *)v10 -= 2;
            }
          }
        }
      }
    }
    v11 = v17;
    v17 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v5);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v5);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::ContentSecurityPolicy::reportInvalidPathCharacter(WebCore::ContentSecurityPolicy *this, WTF::StringImpl **a2, WTF::StringImpl **a3, int a4)
{
  uint64_t v5;
  int8x16_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  void (***v11)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD);
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;

  v5 = 61;
  if (a4 == 63)
    v5 = 57;
  v6 = (int8x16_t *)"The fragment identifier, including the '#', will be ignored.";
  v7 = *a2;
  if (a4 == 63)
    v6 = (int8x16_t *)"The query component, including the '?', will be ignored.";
  if (v7)
    *(_DWORD *)v7 += 2;
  v8 = *a3;
  if (*a3)
    *(_DWORD *)v8 += 2;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v19, "The source list for Content Security Policy directive '", 56, (uint64_t)v7, (int8x16_t *)"' contains a source with an invalid path: '", 44, (uint64_t)v8, (int8x16_t *)"'. ", 4, v6, v5);
  if (!v19)
  {
    __break(0xC471u);
    return result;
  }
  v18 = 0;
  if (*((_DWORD *)v19 + 1) && *((_BYTE *)this + 181))
  {
    v11 = (void (***)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))*((_QWORD *)this + 2);
    if (v11)
    {
      (**v11)(v11, 8, 2, &v19, 0);
    }
    else
    {
      v12 = *((_QWORD *)this + 1);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v20 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD, _QWORD, _DWORD **, _QWORD, _QWORD))(*(_QWORD *)(v13 - 96) + 416))(v13 - 96, 8, 2, &v19, &v18, 0, 0, &v20, 0, 0);
          v14 = v20;
          v20 = 0;
          if (v14)
          {
            if (*v14 == 1)
            {
              v16 = (WTF *)MEMORY[0x19AEA6024]();
              WTF::fastFree(v16, v17);
            }
            else
            {
              --*v14;
            }
          }
          v15 = v18;
          v18 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v10);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
      }
    }
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      if (!v8)
        goto LABEL_28;
      goto LABEL_26;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v8)
    goto LABEL_28;
LABEL_26:
  if (*(_DWORD *)v8 == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v10);
  else
    *(_DWORD *)v8 -= 2;
LABEL_28:
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v10);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ContentSecurityPolicy::reportInvalidSourceExpression(WebCore::ContentSecurityPolicy *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  int8x16_t *v7;
  uint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  void (***v11)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD);
  uint64_t v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _DWORD *v24;

  v4 = *a2;
  if (*a2)
    *(_DWORD *)v4 += 2;
  v5 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
    goto LABEL_5;
  v6 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v6 != 6)
    goto LABEL_5;
  v12 = *(_QWORD *)(v5 + 8);
  if ((*(_BYTE *)(v5 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v12 & 0xFFDF) == 7
      && (*(_WORD *)(v12 + 2) & 0xFFDF) == 0x4E
      && (*(_WORD *)(v12 + 4) & 0xFFDF) == 0x4F
      && (*(_WORD *)(v12 + 6) & 0xFFDF) == 0x4E)
    {
      v7 = (int8x16_t *)"";
      if ((*(_WORD *)(v12 + 8) & 0xFFDF) != 0x45)
        goto LABEL_6;
      v13 = *(unsigned __int16 *)(v12 + 10);
      goto LABEL_19;
    }
LABEL_5:
    v7 = (int8x16_t *)"";
LABEL_6:
    v8 = 1;
    goto LABEL_7;
  }
  if ((*(_BYTE *)v12 & 0xDF) != 7
    || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x4E
    || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x4F
    || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x4E)
  {
    goto LABEL_5;
  }
  v7 = (int8x16_t *)"";
  if ((*(_BYTE *)(v12 + 4) & 0xDF) != 0x45)
    goto LABEL_6;
  v13 = *(unsigned __int8 *)(v12 + 5);
LABEL_19:
  v14 = v13 & 0xFFFFFFDF;
  v15 = v14 == 7;
  if (v14 == 7)
    v7 = (int8x16_t *)" Note that 'none' has no effect unless it is the only expression in the source list.";
  v8 = 85;
  if (!v15)
    v8 = 1;
LABEL_7:
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v23, "The source list for Content Security Policy directive '", 56, (uint64_t)v4, (int8x16_t *)"' contains an invalid source: '", 32, v5, (int8x16_t *)"'. It will be ignored.", 23, v7, v8);
  if (!v23)
  {
    __break(0xC471u);
    return result;
  }
  v22 = 0;
  if (*((_DWORD *)v23 + 1) && *((_BYTE *)this + 181))
  {
    v11 = (void (***)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))*((_QWORD *)this + 2);
    if (v11)
    {
      (**v11)(v11, 8, 2, &v23, 0);
    }
    else
    {
      v16 = *((_QWORD *)this + 1);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        if (v17)
        {
          v24 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD, _QWORD, _DWORD **, _QWORD, _QWORD))(*(_QWORD *)(v17 - 96) + 416))(v17 - 96, 8, 2, &v23, &v22, 0, 0, &v24, 0, 0);
          v18 = v24;
          v24 = 0;
          if (v18)
          {
            if (*v18 == 1)
            {
              v20 = (WTF *)MEMORY[0x19AEA6024]();
              WTF::fastFree(v20, v21);
            }
            else
            {
              --*v18;
            }
          }
          v19 = v22;
          v22 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v10);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
      }
    }
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      if (!v5)
        goto LABEL_38;
      goto LABEL_36;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v5)
    goto LABEL_38;
LABEL_36:
  if (*(_DWORD *)v5 == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, v10);
  else
    *(_DWORD *)v5 -= 2;
LABEL_38:
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v10);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded(uint64_t a1, WebCore::ResourceRequest *this, unsigned int a3, int a4)
{
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  __int128 v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v8 = *(WTF::StringImpl **)this;
  if (*(_QWORD *)this)
    *(_DWORD *)v8 += 2;
  v14 = v8;
  v9 = *(_OWORD *)((char *)this + 24);
  v15 = *(_OWORD *)((char *)this + 8);
  v16 = v9;
  WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded(a1, (WebCore::SecurityOriginData *)&v14, a3, a4);
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  result = v14;
  if (v14)
    *(_DWORD *)v14 += 2;
  v12 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = result;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v10);
      result = v14;
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  v13 = v16;
  *(_OWORD *)((char *)this + 8) = v15;
  *(_OWORD *)((char *)this + 24) = v13;
  *((_BYTE *)this + 148) &= ~0x20u;
  *((_BYTE *)this + 184) &= ~2u;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded(uint64_t a1, WebCore::SecurityOriginData *a2, unsigned int a3, int a4)
{
  const WTF::URL *v8;
  uint64_t result;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  char v23;
  _BYTE v24[24];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((WTF::URL::protocolIs() & 1) == 0)
  {
    result = WTF::URL::protocolIs();
    if (!(_DWORD)result)
      return result;
  }
  if (WebCore::SecurityOriginData::shouldTreatAsOpaqueOrigin(a2, v8))
    WebCore::SecurityOriginData::createOpaque((uint64_t)v24);
  else
    WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(a2, (uint64_t)v24);
  result = *(_QWORD *)(a1 + 192);
  if (result)
  {
    result = (uint64_t)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(result, (uint64_t)v24);
    v10 = result != 0;
  }
  else
  {
    v10 = 0;
  }
  if (v25 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v25])(&v23, v24);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11
    && (result = *(_QWORD *)(v11 + 8)) != 0
    && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result - 96) + 136))(result - 96),
        (*(_QWORD *)(result + 464) & 0x4000000000000000) != 0))
  {
    v12 = *(_QWORD *)(a1 + 8);
    if (v12)
    {
      result = *(_QWORD *)(v12 + 8);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result - 96) + 136))(result - 96);
        LODWORD(v12) = 0;
        v13 = (*(_QWORD *)(result + 448) & 0x200000) == 0;
        goto LABEL_14;
      }
      LODWORD(v12) = 0;
    }
  }
  else
  {
    LODWORD(v12) = 1;
  }
  v13 = 1;
LABEL_14:
  if (a3 > 1)
  {
    if (!v10)
      goto LABEL_16;
  }
  else if (!(*(unsigned __int8 *)(a1 + 182) | v10))
  {
LABEL_16:
    if (((v12 | a4 ^ 1) & 1) != 0)
      return result;
    v14 = v13;
    v15 = WTF::URL::host(a2);
    result = WebCore::SecurityOrigin::isLocalhostAddress(v15, v16);
    if ((_DWORD)result)
    {
      if ((v14 & a4 & 1) != 0)
        return result;
    }
  }
  WTF::URL::protocolIs();
  WTF::URL::setProtocol();
  result = WTF::URL::port(a2);
  if ((result & 0xFF0000) != 0 && (unsigned __int16)result == 80)
    return WTF::URL::setPort();
  v17 = *(_QWORD *)(a1 + 8);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      if (!*(_BYTE *)(v18 + 178))
      {
        v19 = *(_QWORD *)(v18 + 240);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v20)
          {
            v21 = *(_QWORD *)(v20 + 24);
            if (v21)
            {
              result = *(_QWORD *)(v21 + 8);
              if (result)
              {
                result = WebCore::Page::portsForUpgradingInsecureSchemeForTesting((WebCore::Page *)result);
                if ((result & 0xFF00000000) != 0)
                {
                  v22 = result;
                  result = WTF::URL::port(a2);
                  if ((result & 0xFF0000) != 0 && (unsigned __int16)result == v22)
                    return WTF::URL::setPort();
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::ContentSecurityPolicy::inheritInsecureNavigationRequestsToUpgradeFromOpener(uint64_t this, const WebCore::ContentSecurityPolicy *a2)
{
  uint64_t *v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  char v14;

  v2 = (uint64_t *)this;
  v3 = (unsigned int *)*((_QWORD *)a2 + 24);
  if (v3)
  {
    v5 = *(v3 - 1);
    v6 = &v3[8 * v5];
    if (!*(v3 - 3))
      goto LABEL_28;
    if (!(_DWORD)v5)
    {
      v4 = *((_QWORD *)a2 + 24);
      goto LABEL_4;
    }
    v11 = 32 * v5;
    do
    {
      this = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v3);
      if ((this & 1) == 0)
      {
        v12 = v3[6];
        if ((_DWORD)v12 == -1)
          goto LABEL_27;
        v13[0] = &v14;
        this = ((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v12])(v13, v3);
        if (!(_DWORD)this)
          goto LABEL_26;
      }
      v3 += 8;
      v11 -= 32;
    }
    while (v11);
    v3 = v6;
LABEL_26:
    v4 = (uint64_t)v3;
    v3 = (unsigned int *)*((_QWORD *)a2 + 24);
    goto LABEL_4;
  }
  v4 = 0;
  v5 = 0;
  while (1)
  {
    v6 = &v3[8 * v5];
LABEL_4:
    if (v3)
      v3 += 8 * *(v3 - 1);
    if (v3 == (unsigned int *)v4)
      return this;
    v2 += 24;
    while (1)
    {
      this = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(v2, v4, (uint64_t)v13);
      v7 = v4 + 32;
      v4 = (uint64_t)v6;
      if ((unsigned int *)v7 != v6)
        break;
LABEL_16:
      if ((unsigned int *)v4 == v3)
        return this;
    }
    v4 = v7;
    while (1)
    {
      v8 = *(unsigned int *)(v4 + 24);
      if ((_DWORD)v8 == -1)
        break;
      v13[0] = &v14;
      this = ((uint64_t (*)(_QWORD *, uint64_t))off_1E34030D0[v8])(v13, v4);
      if ((this & 1) == 0)
      {
        v9 = *(unsigned int *)(v4 + 24);
        if ((_DWORD)v9 == -1)
          break;
        v13[0] = &v14;
        this = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v9])(v13, v4);
        if (!(_DWORD)this)
          goto LABEL_16;
      }
      v4 += 32;
      if ((unsigned int *)v4 == v6)
      {
        v4 = (uint64_t)v6;
        goto LABEL_16;
      }
    }
LABEL_27:
    this = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_28:
    v4 = (uint64_t)v6;
  }
}

uint64_t WebCore::ContentSecurityPolicy::setInsecureNavigationRequestsToUpgrade(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  WebCore::ContentSecurityPolicyDirectiveList *v8;
  WebCore::ContentSecurityPolicySourceListDirective *v9;
  const WTF::String *v10;
  char v11;
  char *v12;
  char v13;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(result + 192);
  *(_QWORD *)(result + 192) = v2;
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = v3; ; i += 32)
      {
        v6 = *(unsigned int *)(i + 24);
        if ((_DWORD)v6 == -1)
          break;
        v12 = &v11;
        if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v6])(&v12, i) & 1) == 0)
        {
          v7 = *(unsigned int *)(i + 24);
          if ((_DWORD)v7 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v7])(&v13, i);
          *(_DWORD *)(i + 24) = -1;
        }
        if (!--v4)
          return WTF::fastFree((WTF *)(v3 - 16), a2);
      }
      v8 = (WebCore::ContentSecurityPolicyDirectiveList *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveForWorkerSrc(v8, v9, v10);
    }
    else
    {
      return WTF::fastFree((WTF *)(v3 - 16), a2);
    }
  }
  return result;
}

WebCore::ContentSecurityPolicySourceListDirective *WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveForWorkerSrc(WebCore::ContentSecurityPolicyDirectiveList *this, WebCore::ContentSecurityPolicySourceListDirective *a2, const WTF::String *a3)
{
  WebCore::ContentSecurityPolicySourceListDirective *v3;
  WTF::StringImpl *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v9;
  WTF::StringImpl *v10;

  if (a2)
  {
    v3 = a2;
LABEL_3:
    if (a3)
      *(_DWORD *)a3 += 2;
    v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 4);
    *((_QWORD *)v3 + 4) = a3;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    return v3;
  }
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    if (a3)
      *(_DWORD *)a3 += 2;
    v7 = *(WTF::StringImpl **)(v6 + 32);
    *(_QWORD *)(v6 + 32) = a3;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, 0);
      else
        *(_DWORD *)v7 -= 2;
    }
    return (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)this + 6);
  }
  else
  {
    v3 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)this + 17);
    if (v3)
      goto LABEL_3;
    v9 = *((_QWORD *)this + 7);
    if (v9)
    {
      if (a3)
        *(_DWORD *)a3 += 2;
      v10 = *(WTF::StringImpl **)(v9 + 32);
      *(_QWORD *)(v9 + 32) = a3;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, 0);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    return (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)this + 7);
  }
}

void WebCore::WorkerNavigator::~WorkerNavigator(WebCore::WorkerNavigator *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::WorkerNavigator::~WorkerNavigator(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::GPU *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WTF *v9;
  void *v10;

  v3 = (WebCore::GPU *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::GPU::~GPU(v3, a2);
      WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 7);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = (uint64_t *)(v5 + 16);
      do
      {
        if (*(v7 - 2) != -1)
        {
          v8 = *v7;
          *v7 = 0;
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        }
        v7 += 3;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  WebCore::NavigatorBase::~NavigatorBase(this, a2);
}

void WebCore::CSPViolationReportBody::~CSPViolationReportBody(WebCore::CSPViolationReportBody *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSPViolationReportBody::~CSPViolationReportBody(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

uint64_t WebCore::CSPViolationReportBody::reportBodyType(WebCore::CSPViolationReportBody *this)
{
  return 2;
}

uint64_t WebCore::ContentSecurityPolicyDirective::nameForReporting(WebCore::ContentSecurityPolicyDirective *this)
{
  return (uint64_t)this + 8;
}

uint64_t ___ZN7WebCoreL49userCaptionPreferencesChangedNotificationCallbackEP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 136))(*(_QWORD *)(a1 + 32));
}

uint64_t __copy_helper_block_8_32c115_ZTSN3WTF6RefPtrIN7WebCore29CaptionUserPreferencesMediaAFENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 32);
  if (v2)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)(result + 32) = v2;
  return result;
}

_DWORD *__destroy_helper_block_8_32c115_ZTSN3WTF6RefPtrIN7WebCore29CaptionUserPreferencesMediaAFENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEE(uint64_t a1)
{
  _DWORD *result;

  result = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void WebCore::addTrackKindDisplayNameIfNeeded(WebCore **this, const WebCore::TrackBase *a2, const WTF::String *a3)
{
  int v6;
  WTF::StringImpl *v7;
  WebCore *v8;
  BOOL v9;
  WebCore *v10;
  WebCore *v11;
  WebCore *v12;
  WebCore *v13;
  WTF::StringImpl *v14;
  BOOL v15;
  WebCore *v16;
  BOOL v17;
  WebCore *v18;
  WebCore *v19;
  int v20;
  WTF::StringImpl *v21;
  WebCore *v22;
  WebCore *v23;
  WTF::StringImpl *v24;
  BOOL v25;
  WTF::StringImpl *v26;
  WebCore *v27;
  WTF::StringImpl *v28;
  int v29;
  WebCore *v30;
  WTF::StringImpl *v31;
  BOOL v32;
  WTF::StringImpl *v33;
  WebCore *v34;
  WTF::StringImpl *v35;
  int v36;
  WebCore *v37;
  WTF::StringImpl *v38;
  _BOOL4 v39;
  WTF::StringImpl *v40;
  WebCore *v41;
  WTF::StringImpl *v42;
  int v43;
  WebCore *v44;
  BOOL v45;
  WebCore *v46;
  BOOL v47;
  WebCore *v48;
  BOOL v49;
  WebCore *v50;
  WTF::StringImpl *v51;
  _BOOL4 v52;
  WebCore *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WebCore *v57;

  v6 = *((_DWORD *)a2 + 10);
  if (v6 == 2)
  {
    {
      v10 = (WebCore *)WebCore::AudioTrack::descriptionKeyword(void)::description;
    }
    else
    {
      WTF::AtomStringImpl::add();
      v10 = v57;
      WebCore::AudioTrack::descriptionKeyword(void)::description = (uint64_t)v57;
    }
    v11 = (WebCore *)*((_QWORD *)a2 + 15);
    if (v11 != v10)
    {
      {
        v12 = (WebCore *)WebCore::AudioTrack::mainDescKeyword(void)::mainDesc;
      }
      else
      {
        WTF::AtomStringImpl::add();
        v12 = v57;
        WebCore::AudioTrack::mainDescKeyword(void)::mainDesc = (uint64_t)v57;
        v11 = (WebCore *)*((_QWORD *)a2 + 15);
      }
      if (v11 != v12)
      {
LABEL_102:
        if (v11 != (WebCore *)WebCore::commentaryAtomData)
          goto LABEL_154;
        WebCore::audioTrackKindCommentaryDisplayName((uint64_t)&v57);
        v50 = v57;
        if (v57)
          v51 = (WTF::StringImpl *)*((_QWORD *)v57 + 1);
        else
          v51 = 0;
        if (*(_QWORD *)a3)
        {
          v52 = WTF::StringImpl::find() == -1;
          v50 = v57;
        }
        else
        {
          v52 = 1;
        }
        v57 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
          {
            WTF::StringImpl::destroy(v50, v51);
            if (!v52)
              goto LABEL_154;
            goto LABEL_112;
          }
          *(_DWORD *)v50 -= 2;
        }
        if (!v52)
          goto LABEL_154;
LABEL_112:
        WebCore::addAudioTrackKindCommentarySuffix(a3, (uint64_t)this);
        return;
      }
    }
    WebCore::audioTrackKindDescriptionsDisplayName((uint64_t)&v57);
    v13 = v57;
    if (v57)
      v14 = (WTF::StringImpl *)*((_QWORD *)v57 + 1);
    else
      v14 = 0;
    if (*(_QWORD *)a3)
    {
      v15 = WTF::StringImpl::find() == -1;
      v13 = v57;
    }
    else
    {
      v15 = 1;
    }
    v57 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v14);
        if (v15)
          goto LABEL_28;
LABEL_101:
        v11 = (WebCore *)*((_QWORD *)a2 + 15);
        goto LABEL_102;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (v15)
    {
LABEL_28:
      WebCore::addAudioTrackKindDescriptionsSuffix(a3, (uint64_t)this);
      return;
    }
    goto LABEL_101;
  }
  if (v6 != 1)
  {
LABEL_154:
    v53 = *(WebCore **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v53 += 2;
    *this = v53;
    return;
  }
  *this = 0;
  if (!(*(unsigned int (**)(const WebCore::TrackBase *))(*(_QWORD *)a2 + 136))(a2))
  {
    switch(*((_DWORD *)a2 + 57))
    {
      case 1:
        WebCore::textTrackKindCaptionsDisplayName((uint64_t)&v57);
        v16 = v57;
        if (v57)
          v7 = (WTF::StringImpl *)*((_QWORD *)v57 + 1);
        else
          v7 = 0;
        if (*(_QWORD *)a3)
        {
          v17 = WTF::StringImpl::find() != -1;
          v16 = v57;
        }
        else
        {
          v17 = 0;
        }
        v57 = 0;
        if (!v16)
          goto LABEL_121;
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::destroy(v16, v7);
          if (v17)
            goto LABEL_38;
        }
        else
        {
          *(_DWORD *)v16 -= 2;
LABEL_121:
          if (v17)
            goto LABEL_38;
        }
        WebCore::addTextTrackKindCaptionsSuffix(a3, (uint64_t)&v57);
        goto LABEL_35;
      case 2:
        WebCore::textTrackKindDescriptionsDisplayName((uint64_t)&v57);
        v44 = v57;
        if (v57)
          v7 = (WTF::StringImpl *)*((_QWORD *)v57 + 1);
        else
          v7 = 0;
        if (*(_QWORD *)a3)
        {
          v45 = WTF::StringImpl::find() != -1;
          v44 = v57;
        }
        else
        {
          v45 = 0;
        }
        v57 = 0;
        if (!v44)
          goto LABEL_127;
        if (*(_DWORD *)v44 == 2)
        {
          WTF::StringImpl::destroy(v44, v7);
          if (v45)
            goto LABEL_38;
        }
        else
        {
          *(_DWORD *)v44 -= 2;
LABEL_127:
          if (v45)
            goto LABEL_38;
        }
        WebCore::addTextTrackKindDescriptionsSuffix(a3, (uint64_t)&v57);
        goto LABEL_35;
      case 3:
        WebCore::textTrackKindChaptersDisplayName((uint64_t)&v57);
        v46 = v57;
        if (v57)
          v7 = (WTF::StringImpl *)*((_QWORD *)v57 + 1);
        else
          v7 = 0;
        if (*(_QWORD *)a3)
        {
          v47 = WTF::StringImpl::find() != -1;
          v46 = v57;
        }
        else
        {
          v47 = 0;
        }
        v57 = 0;
        if (!v46)
          goto LABEL_133;
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::destroy(v46, v7);
          if (v47)
            goto LABEL_38;
        }
        else
        {
          *(_DWORD *)v46 -= 2;
LABEL_133:
          if (v47)
            goto LABEL_38;
        }
        WebCore::addTextTrackKindChaptersSuffix(a3, (uint64_t)&v57);
        goto LABEL_35;
      case 4:
        WebCore::textTrackKindMetadataDisplayName((uint64_t)&v57);
        v48 = v57;
        if (v57)
          v7 = (WTF::StringImpl *)*((_QWORD *)v57 + 1);
        else
          v7 = 0;
        if (*(_QWORD *)a3)
        {
          v49 = WTF::StringImpl::find() != -1;
          v48 = v57;
        }
        else
        {
          v49 = 0;
        }
        v57 = 0;
        if (!v48)
          goto LABEL_139;
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::destroy(v48, v7);
          if (v49)
            goto LABEL_38;
        }
        else
        {
          *(_DWORD *)v48 -= 2;
LABEL_139:
          if (v49)
            goto LABEL_38;
        }
        WebCore::addTextTrackKindMetadataSuffix(a3, (uint64_t)&v57);
        goto LABEL_35;
      default:
        goto LABEL_38;
    }
  }
  WebCore::textTrackKindClosedCaptionsDisplayName((uint64_t)&v57);
  v8 = v57;
  if (v57)
    v7 = (WTF::StringImpl *)*((_QWORD *)v57 + 1);
  else
    v7 = 0;
  if (*(_QWORD *)a3)
  {
    v9 = WTF::StringImpl::find() != -1;
    v8 = v57;
  }
  else
  {
    v9 = 0;
  }
  v57 = 0;
  if (!v8)
    goto LABEL_33;
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
LABEL_33:
    if (v9)
      goto LABEL_38;
    goto LABEL_34;
  }
  WTF::StringImpl::destroy(v8, v7);
  if (v9)
    goto LABEL_38;
LABEL_34:
  WebCore::addTextTrackKindClosedCaptionsSuffix(a3, (uint64_t)&v57);
LABEL_35:
  v18 = v57;
  v57 = 0;
  v19 = *this;
  *this = v18;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v7);
      v19 = v57;
      v57 = 0;
      if (!v19)
        goto LABEL_38;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v7);
        goto LABEL_38;
      }
    }
    *(_DWORD *)v19 = v20;
  }
LABEL_38:
  v21 = *this;
  if (!*this || !*((_DWORD *)v21 + 1))
  {
    v22 = *(WebCore **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v22 += 2;
    *this = v22;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v7);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  if (!(*(unsigned int (**)(const WebCore::TrackBase *))(*(_QWORD *)a2 + 144))(a2))
    goto LABEL_59;
  WebCore::textTrackKindSDHDisplayName((uint64_t)&v57);
  v23 = v57;
  if (v57)
    v24 = (WTF::StringImpl *)*((_QWORD *)v57 + 1);
  else
    v24 = 0;
  if (*(_QWORD *)a3)
  {
    v25 = WTF::StringImpl::find() != -1;
    v23 = v57;
  }
  else
  {
    v25 = 0;
  }
  v57 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::destroy(v23, v24);
      if (v25)
        goto LABEL_59;
      goto LABEL_56;
    }
    *(_DWORD *)v23 -= 2;
  }
  if (v25)
    goto LABEL_59;
LABEL_56:
  WebCore::addTextTrackKindSDHSuffix((WebCore *)this, (uint64_t)&v57);
  v27 = v57;
  v57 = 0;
  v28 = *this;
  *this = v27;
  if (!v28)
    goto LABEL_59;
  v29 = *(_DWORD *)v28 - 2;
  if (*(_DWORD *)v28 != 2)
    goto LABEL_58;
  WTF::StringImpl::destroy(v28, v26);
  v28 = v57;
  v57 = 0;
  if (v28)
  {
    v29 = *(_DWORD *)v28 - 2;
    if (*(_DWORD *)v28 != 2)
    {
LABEL_58:
      *(_DWORD *)v28 = v29;
      goto LABEL_59;
    }
    WTF::StringImpl::destroy(v28, v54);
  }
LABEL_59:
  if (!(*(unsigned int (**)(const WebCore::TrackBase *))(*(_QWORD *)a2 + 168))(a2))
    goto LABEL_72;
  WebCore::textTrackKindEasyReaderDisplayName((uint64_t)&v57);
  v30 = v57;
  if (v57)
    v31 = (WTF::StringImpl *)*((_QWORD *)v57 + 1);
  else
    v31 = 0;
  if (*(_QWORD *)a3)
  {
    v32 = WTF::StringImpl::find() != -1;
    v30 = v57;
  }
  else
  {
    v32 = 0;
  }
  v57 = 0;
  if (!v30)
    goto LABEL_68;
  if (*(_DWORD *)v30 != 2)
  {
    *(_DWORD *)v30 -= 2;
LABEL_68:
    if (v32)
      goto LABEL_72;
    goto LABEL_69;
  }
  WTF::StringImpl::destroy(v30, v31);
  if (v32)
    goto LABEL_72;
LABEL_69:
  WebCore::addTextTrackKindEasyReaderSuffix((WebCore *)this, (uint64_t)&v57);
  v34 = v57;
  v57 = 0;
  v35 = *this;
  *this = v34;
  if (v35)
  {
    v36 = *(_DWORD *)v35 - 2;
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::destroy(v35, v33);
      v35 = v57;
      v57 = 0;
      if (!v35)
        goto LABEL_72;
      v36 = *(_DWORD *)v35 - 2;
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::destroy(v35, v55);
        goto LABEL_72;
      }
    }
    *(_DWORD *)v35 = v36;
  }
LABEL_72:
  if (((*(uint64_t (**)(const WebCore::TrackBase *))(*(_QWORD *)a2 + 152))(a2) & 1) == 0
    && *((_DWORD *)a2 + 57) != 5)
  {
    return;
  }
  WebCore::textTrackKindForcedDisplayName((uint64_t)&v57);
  v37 = v57;
  if (v57)
    v38 = (WTF::StringImpl *)*((_QWORD *)v57 + 1);
  else
    v38 = 0;
  if (*(_QWORD *)a3)
  {
    v39 = WTF::StringImpl::find() == -1;
    v37 = v57;
  }
  else
  {
    v39 = 1;
  }
  v57 = 0;
  if (!v37)
    goto LABEL_82;
  if (*(_DWORD *)v37 != 2)
  {
    *(_DWORD *)v37 -= 2;
LABEL_82:
    if (!v39)
      return;
    goto LABEL_83;
  }
  WTF::StringImpl::destroy(v37, v38);
  if (!v39)
    return;
LABEL_83:
  WebCore::addTextTrackKindForcedSuffix((WebCore *)this, (uint64_t)&v57);
  v41 = v57;
  v57 = 0;
  v42 = *this;
  *this = v41;
  if (v42)
  {
    v43 = *(_DWORD *)v42 - 2;
    if (*(_DWORD *)v42 != 2)
    {
LABEL_85:
      *(_DWORD *)v42 = v43;
      return;
    }
    WTF::StringImpl::destroy(v42, v40);
    v42 = v57;
    v57 = 0;
    if (v42)
    {
      v43 = *(_DWORD *)v42 - 2;
      if (*(_DWORD *)v42 != 2)
        goto LABEL_85;
      WTF::StringImpl::destroy(v42, v56);
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *,false>(uint64_t result, const WebCore::TrackBase **a2, uint64_t *a3, uint64_t a4, char a5)
{
  const WebCore::TrackBase **v7;
  const WebCore::TrackBase **v8;
  const WebCore::TrackBase **v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const WebCore::TrackBase **v13;
  const WebCore::TrackBase *v14;
  const WebCore::TrackBase **v15;
  const WebCore::TrackBase *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  const WebCore::TrackBase **v21;
  unint64_t v22;
  const WebCore::TrackBase **v23;
  const WebCore::TrackBase *v24;
  WebCore::TrackBase *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  WebCore::TrackBase **v32;
  const WebCore::TrackBase *v33;
  const WebCore::TrackBase *v34;
  WebCore::TrackBase *v35;
  WebCore::TrackBase *v36;
  BOOL v37;
  BOOL v38;
  WebCore::TrackBase *v39;
  const WebCore::TrackBase **v40;
  const WebCore::TrackBase **v41;
  const WebCore::TrackBase *v42;
  WebCore::TrackBase *v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  WTF::StringImpl *v49;
  WebCore::TrackBase **v50;
  const WebCore::TrackBase *v51;
  const WebCore::TrackBase *v52;
  WebCore::TrackBase *v53;
  WebCore::TrackBase *v54;
  const WebCore::TrackBase *v55;
  const WebCore::TrackBase **v56;
  const WebCore::TrackBase **v57;
  const WebCore::TrackBase *v58;
  const WebCore::TrackBase **v59;
  const WebCore::TrackBase **v60;
  BOOL v61;
  char v62;
  uint64_t v63;
  const WebCore::TrackBase **v64;
  const WebCore::TrackBase **v65;
  _DWORD *v66;
  const WebCore::TrackBase *v67;
  _QWORD *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t *v74;
  int64_t v75;
  int64_t v76;
  uint64_t v77;
  const WebCore::TrackBase **v78;
  const WebCore::TrackBase **v79;
  WTF::StringImpl *v80;
  const WebCore::TrackBase **v81;
  const WebCore::TrackBase *v82;
  const WebCore::TrackBase *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  const WebCore::TrackBase *v86;
  uint64_t v87;
  uint64_t v88;
  const WebCore::TrackBase **v89;
  const WebCore::TrackBase **v90;
  const WebCore::TrackBase *v91;
  int64_t v92;
  const WebCore::TrackBase **v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  unsigned int v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  _BOOL4 v100;
  const WebCore::TrackBase *v101;
  const WebCore::TrackBase *v102;
  const WebCore::TrackBase **v103;
  const WebCore::TrackBase **v104;
  const WebCore::TrackBase *v105;
  const WebCore::TrackBase *v106;
  uint64_t v107;
  unint64_t v108;
  const WebCore::TrackBase **v109;
  uint64_t *v110;
  const WebCore::TrackBase *v111;
  const WebCore::TrackBase *v112;
  WTF::StringImpl *v113;
  int v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const WebCore::TrackBase **v121;
  const WebCore::TrackBase *v122;
  const WebCore::TrackBase **v123;
  const WebCore::TrackBase *v124;
  const WebCore::TrackBase **v125;
  WTF::StringImpl *v126;
  int v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  const WebCore::TrackBase *v130;
  WebCore::TrackBase *v132;
  WebCore::TrackBase *v133;
  uint64_t v134;
  uint64_t v135;
  int64_t v136;
  uint64_t v137;
  const WebCore::TrackBase **v139;
  WebCore::TrackBase *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;

  v139 = (const WebCore::TrackBase **)result;
LABEL_2:
  v7 = a2;
  v8 = v139;
  v9 = a2 - 1;
  while (2)
  {
    v10 = (char *)v7 - (char *)v8;
    v11 = v7 - v8;
    v139 = v8;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v9, v8);
        if ((_DWORD)result)
        {
          v55 = *v8;
          *v8 = *v9;
          *v9 = v55;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v8, v8 + 1, v9, a3);
      case 4uLL:
        v56 = v8 + 1;
        v57 = v8 + 2;
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v8, v8 + 1, v8 + 2, a3);
        result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v9, v8 + 2);
        if ((_DWORD)result)
        {
          v58 = *v57;
          *v57 = *v9;
          *v9 = v58;
          result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v57, v56);
          if ((_DWORD)result)
          {
            *(int8x16_t *)(v8 + 1) = vextq_s8(*(int8x16_t *)(v8 + 1), *(int8x16_t *)(v8 + 1), 8uLL);
            result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v56, v8);
            if ((_DWORD)result)
              *(int8x16_t *)v8 = vextq_s8(*(int8x16_t *)v8, *(int8x16_t *)v8, 8uLL);
          }
        }
        return result;
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *,0>(v8, v8 + 1, v8 + 2, v8 + 3, v9, a3);
      default:
        if (v10 <= 191)
        {
          v61 = v8 == v7;
          v59 = v7;
          v60 = v8 + 1;
          v61 = v61 || v60 == v59;
          v62 = v61;
          if ((a5 & 1) != 0)
          {
            if ((v62 & 1) != 0)
              return result;
            v63 = 0;
            v64 = v139;
LABEL_167:
            v65 = v64;
            v64 = v60;
            result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v60, v65);
            if (!(_DWORD)result)
              goto LABEL_193;
            v66 = 0;
            v67 = *v60;
            v135 = v63;
            *v64 = 0;
            while (1)
            {
              v68 = (const WebCore::TrackBase **)((char *)v139 + v63);
              v69 = *(uint64_t *)((char *)v139 + v63);
              *v68 = 0;
              v68[1] = v69;
              if (!v66)
                goto LABEL_172;
              if (v66[4] != 1)
                break;
              (*(void (**)(_DWORD *))(*(_QWORD *)v66 + 16))(v66);
              if (!v63)
              {
LABEL_188:
                v74 = (uint64_t *)v139;
LABEL_190:
                result = *v74;
                *v74 = (uint64_t)v67;
                v63 = v135;
                if (result)
                {
                  if (*(_DWORD *)(result + 16) == 1)
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                  else
                    --*(_DWORD *)(result + 16);
                }
LABEL_193:
                v60 = v64 + 1;
                v63 += 8;
                if (v64 + 1 == a2)
                  return result;
                goto LABEL_167;
              }
LABEL_173:
              WebCore::trackDisplayName((WebCore *)&v142, v67);
              WebCore::trackDisplayName((WebCore *)&v141, *(const WebCore::TrackBase **)((char *)v139 + v63 - 8));
              v71 = WTF::Collator::collate();
              v72 = v141;
              v141 = 0;
              if (v72)
              {
                if (*(_DWORD *)v72 == 2)
                  WTF::StringImpl::destroy(v72, v70);
                else
                  *(_DWORD *)v72 -= 2;
              }
              v73 = v142;
              v142 = 0;
              if (!v73)
                goto LABEL_179;
              if (*(_DWORD *)v73 != 2)
              {
                *(_DWORD *)v73 -= 2;
LABEL_179:
                if (v71)
                  goto LABEL_180;
                goto LABEL_186;
              }
              WTF::StringImpl::destroy(v73, v70);
              if (v71)
              {
LABEL_180:
                if ((v71 & 0x80000000) == 0)
                  goto LABEL_189;
                goto LABEL_187;
              }
LABEL_186:
              if (*((_DWORD *)v67 + 11) >= (*(_DWORD **)((char *)v139 + v63 - 8))[11])
              {
LABEL_189:
                v74 = (uint64_t *)((char *)v139 + v63);
                goto LABEL_190;
              }
LABEL_187:
              v66 = (_DWORD *)*v68;
              v63 -= 8;
            }
            --v66[4];
LABEL_172:
            if (!v63)
              goto LABEL_188;
            goto LABEL_173;
          }
          if ((v62 & 1) != 0)
            return result;
          v118 = 0;
          v119 = 1;
          while (1)
          {
            v120 = v118;
            v118 = v119;
            v121 = v139;
            result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v60, &v139[v120]);
            if ((_DWORD)result)
              break;
LABEL_311:
            v119 = v118 + 1;
            v60 = &v121[v118 + 1];
            if (v60 == a2)
              return result;
          }
          result = 0;
          v122 = *v60;
          *v60 = 0;
          while (1)
          {
            v123 = &v121[v120];
            v124 = *v123;
            *v123 = 0;
            v123[1] = v124;
            if (result)
            {
              if (*(_DWORD *)(result + 16) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
              else
                --*(_DWORD *)(result + 16);
            }
            if (v120 == -1)
              goto LABEL_314;
            WebCore::trackDisplayName((WebCore *)&v142, v122);
            v125 = &v139[v120];
            WebCore::trackDisplayName((WebCore *)&v141, *(v125 - 1));
            v127 = WTF::Collator::collate();
            v128 = v141;
            v141 = 0;
            if (v128)
            {
              if (*(_DWORD *)v128 == 2)
                WTF::StringImpl::destroy(v128, v126);
              else
                *(_DWORD *)v128 -= 2;
            }
            v129 = v142;
            v142 = 0;
            if (!v129)
              goto LABEL_300;
            if (*(_DWORD *)v129 != 2)
              break;
            WTF::StringImpl::destroy(v129, v126);
            if (v127)
            {
LABEL_301:
              if ((v127 & 0x80000000) == 0)
                goto LABEL_308;
              goto LABEL_307;
            }
LABEL_306:
            if (*((_DWORD *)v122 + 11) >= *((_DWORD *)*(v125 - 1) + 11))
            {
LABEL_308:
              v121 = v139;
              result = (uint64_t)v139[v120];
              v139[v120] = v122;
              if (result)
              {
                if (*(_DWORD *)(result + 16) == 1)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                else
                  --*(_DWORD *)(result + 16);
              }
              goto LABEL_311;
            }
LABEL_307:
            v121 = v139;
            result = (uint64_t)v139[v120--];
          }
          *(_DWORD *)v129 -= 2;
LABEL_300:
          if (v127)
            goto LABEL_301;
          goto LABEL_306;
        }
        if (!a4)
        {
          if (v8 == v7)
            return result;
          v75 = (v11 - 2) >> 1;
          v136 = v75;
          do
          {
            v76 = v75;
            if (v136 >= v75)
            {
              v77 = (2 * v75) | 1;
              v78 = &v139[v77];
              if (2 * v75 + 2 < (uint64_t)v11
                && WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, &v139[v77], v78 + 1))
              {
                ++v78;
                v77 = 2 * v76 + 2;
              }
              v79 = &v139[v76];
              if (!WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v78, v79))
              {
                v80 = *v79;
                *v79 = 0;
                v142 = v80;
                do
                {
                  v81 = v78;
                  v82 = *v78;
                  *v78 = 0;
                  v83 = *v79;
                  *v79 = v82;
                  if (v83)
                  {
                    if (*((_DWORD *)v83 + 4) == 1)
                      (*(void (**)(const WebCore::TrackBase *))(*(_QWORD *)v83 + 16))(v83);
                    else
                      --*((_DWORD *)v83 + 4);
                  }
                  if (v136 < v77)
                    break;
                  v84 = (2 * v77) | 1;
                  v78 = &v139[v84];
                  if (2 * v77 + 2 < (uint64_t)v11
                    && WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, &v139[v84], v78 + 1))
                  {
                    ++v78;
                    v84 = 2 * v77 + 2;
                  }
                  v79 = v81;
                  v77 = v84;
                }
                while (!WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v78, &v142));
                v85 = v142;
                v142 = 0;
                v86 = *v81;
                *v81 = v85;
                if (v86)
                {
                  if (*((_DWORD *)v86 + 4) == 1)
                    (*(void (**)(const WebCore::TrackBase *))(*(_QWORD *)v86 + 16))(v86);
                  else
                    --*((_DWORD *)v86 + 4);
                }
                if (v142)
                {
                  if (*((_DWORD *)v142 + 4) == 1)
                    (*(void (**)(void))(*(_QWORD *)v142 + 16))();
                  else
                    --*((_DWORD *)v142 + 4);
                }
              }
            }
            v75 = v76 - 1;
          }
          while (v76);
          v87 = (unint64_t)v10 >> 3;
          while (1)
          {
            v88 = 0;
            v89 = a2;
            v90 = v139;
            v91 = *v139;
            *v139 = 0;
            v92 = (unint64_t)(v87 - 2) >> 1;
            v137 = v87;
            v130 = v91;
            v132 = (WebCore::TrackBase *)v92;
            do
            {
              v93 = v90;
              v90 += v88 + 1;
              v94 = 2 * v88;
              v88 = (2 * v88) | 1;
              v95 = v94 + 2;
              if (v94 + 2 >= v87)
                goto LABEL_240;
              WebCore::trackDisplayName((WebCore *)&v142, *v90);
              WebCore::trackDisplayName((WebCore *)&v141, v90[1]);
              v97 = WTF::Collator::collate();
              v98 = v141;
              v141 = 0;
              v87 = v137;
              if (v98)
              {
                if (*(_DWORD *)v98 == 2)
                  WTF::StringImpl::destroy(v98, v96);
                else
                  *(_DWORD *)v98 -= 2;
              }
              v99 = v142;
              v142 = 0;
              if (!v99)
                goto LABEL_232;
              if (*(_DWORD *)v99 != 2)
              {
                *(_DWORD *)v99 -= 2;
LABEL_232:
                if (!v97)
                  goto LABEL_236;
                goto LABEL_233;
              }
              WTF::StringImpl::destroy(v99, v96);
              if (!v97)
              {
LABEL_236:
                v100 = *((_DWORD *)*v90 + 11) < *((_DWORD *)v90[1] + 11);
                goto LABEL_237;
              }
LABEL_233:
              v100 = v97 >> 31;
LABEL_237:
              v89 = a2;
              if (v100)
              {
                ++v90;
                v88 = v95;
              }
              v92 = (int64_t)v132;
LABEL_240:
              v101 = *v90;
              *v90 = 0;
              v102 = *v93;
              *v93 = v101;
              v103 = v139;
              if (v102)
              {
                if (*((_DWORD *)v102 + 4) == 1)
                  (*(void (**)(const WebCore::TrackBase *))(*(_QWORD *)v102 + 16))(v102);
                else
                  --*((_DWORD *)v102 + 4);
              }
            }
            while (v88 <= v92);
            v104 = v89 - 1;
            a2 = v104;
            if (v90 != v104)
            {
              v105 = *v104;
              *v104 = 0;
              v106 = *v90;
              *v90 = v105;
              if (v106)
              {
                if (*((_DWORD *)v106 + 4) == 1)
                  (*(void (**)(const WebCore::TrackBase *))(*(_QWORD *)v106 + 16))(v106);
                else
                  --*((_DWORD *)v106 + 4);
              }
              result = (uint64_t)*v104;
              *v104 = v130;
              if (result)
              {
                if (*(_DWORD *)(result + 16) == 1)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                else
                  --*(_DWORD *)(result + 16);
              }
              v107 = (char *)(v90 + 1) - (char *)v139;
              if (v107 < 9)
                goto LABEL_279;
              v108 = (((unint64_t)v107 >> 3) - 2) >> 1;
              v109 = &v139[v108];
              result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v109, v90);
              if (!(_DWORD)result)
                goto LABEL_279;
              v133 = *v90;
              *v90 = 0;
              while (1)
              {
                v110 = (uint64_t *)v109;
                v111 = *v109;
                *v109 = 0;
                v112 = *v90;
                *v90 = v111;
                if (!v112)
                  goto LABEL_259;
                if (*((_DWORD *)v112 + 4) != 1)
                  break;
                (*(void (**)(const WebCore::TrackBase *))(*(_QWORD *)v112 + 16))(v112);
                if (!v108)
                  goto LABEL_274;
LABEL_260:
                v108 = (v108 - 1) >> 1;
                v109 = &v103[v108];
                WebCore::trackDisplayName((WebCore *)&v142, *v109);
                WebCore::trackDisplayName((WebCore *)&v141, v133);
                v114 = WTF::Collator::collate();
                v115 = v141;
                v141 = 0;
                v103 = v139;
                if (v115)
                {
                  if (*(_DWORD *)v115 == 2)
                    WTF::StringImpl::destroy(v115, v113);
                  else
                    *(_DWORD *)v115 -= 2;
                }
                v116 = v142;
                v142 = 0;
                if (!v116)
                  goto LABEL_266;
                if (*(_DWORD *)v116 != 2)
                {
                  *(_DWORD *)v116 -= 2;
LABEL_266:
                  if (v114)
                    goto LABEL_267;
                  goto LABEL_273;
                }
                WTF::StringImpl::destroy(v116, v113);
                if (v114)
                {
LABEL_267:
                  v90 = (const WebCore::TrackBase **)v110;
                  if ((v114 & 0x80000000) == 0)
                    goto LABEL_274;
                  continue;
                }
LABEL_273:
                v90 = (const WebCore::TrackBase **)v110;
                if (*((_DWORD *)*v109 + 11) >= *((_DWORD *)v133 + 11))
                {
LABEL_274:
                  result = *v110;
                  *v110 = (uint64_t)v133;
                  if (!result)
                    goto LABEL_279;
LABEL_277:
                  if (*(_DWORD *)(result + 16) == 1)
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                  else
                    --*(_DWORD *)(result + 16);
                  goto LABEL_279;
                }
              }
              --*((_DWORD *)v112 + 4);
LABEL_259:
              if (!v108)
                goto LABEL_274;
              goto LABEL_260;
            }
            result = (uint64_t)*v90;
            *v90 = v130;
            if (result)
              goto LABEL_277;
LABEL_279:
            if (v87-- <= 2)
              return result;
          }
        }
        v12 = v11 >> 1;
        v13 = &v8[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(&v8[v11 >> 1], v8, v9, a3);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v8, &v8[v11 >> 1], v9, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v8 + 1, v13 - 1, a2 - 2, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v8 + 2, &v8[v12 + 1], a2 - 3, a3);
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v13 - 1, &v8[v11 >> 1], &v8[v12 + 1], a3);
          v14 = *v8;
          *v8 = *v13;
          *v13 = v14;
        }
        v15 = v8;
        v134 = a4 - 1;
        if ((a5 & 1) == 0)
        {
          result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v8 - 1, v8);
          if ((result & 1) == 0)
          {
            v39 = *v8;
            *v8 = 0;
            v140 = v39;
            result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, &v140, v9);
            if ((result & 1) != 0)
            {
              do
              {
                if (++v8 == v7)
                  goto LABEL_314;
                result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, &v140, v8);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v40 = v8 + 1;
              do
              {
                v8 = v40;
                if (v40 >= v7)
                  break;
                result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, &v140, v40);
                v40 = v8 + 1;
              }
              while (!(_DWORD)result);
            }
            v41 = v7;
            if (v8 < v7)
            {
              v41 = v7;
              do
              {
                if (v41 == v15)
                  goto LABEL_314;
                result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, &v140, --v41);
              }
              while ((result & 1) != 0);
            }
LABEL_100:
            if (v8 >= v41)
            {
              v50 = v8 - 1;
              a4 = v134;
              if (v8 - 1 != v139)
              {
                v51 = *v50;
                *v50 = 0;
                v52 = *v139;
                *v139 = v51;
                if (v52)
                {
                  if (*((_DWORD *)v52 + 4) == 1)
                    (*(void (**)(const WebCore::TrackBase *))(*(_QWORD *)v52 + 16))(v52);
                  else
                    --*((_DWORD *)v52 + 4);
                }
              }
              v53 = v140;
              v140 = 0;
              v54 = *v50;
              *v50 = v53;
              if (v54)
              {
                if (*((_DWORD *)v54 + 4) == 1)
                  (*(void (**)(WebCore::TrackBase *))(*(_QWORD *)v54 + 16))(v54);
                else
                  --*((_DWORD *)v54 + 4);
              }
              result = (uint64_t)v140;
              if (v140)
              {
                if (*((_DWORD *)v140 + 4) == 1)
                  result = (*(uint64_t (**)(void))(*(_QWORD *)v140 + 16))();
                else
                  --*((_DWORD *)v140 + 4);
              }
              goto LABEL_85;
            }
            v42 = *v8;
            *v8++ = *v41;
            *v41 = v42;
            if (v8 == v7)
              goto LABEL_314;
            v43 = v140;
            while (2)
            {
              WebCore::trackDisplayName((WebCore *)&v142, v43);
              WebCore::trackDisplayName((WebCore *)&v141, *v8);
              v45 = WTF::Collator::collate();
              v46 = v141;
              v141 = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, v44);
                else
                  *(_DWORD *)v46 -= 2;
              }
              result = (uint64_t)v142;
              v142 = 0;
              if (result)
              {
                if (*(_DWORD *)result != 2)
                {
                  *(_DWORD *)result -= 2;
                  goto LABEL_109;
                }
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v44);
                if (!v45)
                {
LABEL_114:
                  if (*((_DWORD *)v43 + 11) >= *((_DWORD *)*v8 + 11))
                  {
LABEL_115:
                    if (++v8 == v7)
                      goto LABEL_314;
                    continue;
                  }
LABEL_117:
                  if (v41 == v139)
                    goto LABEL_314;
                  --v41;
                  while (2)
                  {
                    WebCore::trackDisplayName((WebCore *)&v142, v43);
                    WebCore::trackDisplayName((WebCore *)&v141, *v41);
                    v48 = WTF::Collator::collate();
                    v49 = v141;
                    v141 = 0;
                    if (v49)
                    {
                      if (*(_DWORD *)v49 == 2)
                        WTF::StringImpl::destroy(v49, v47);
                      else
                        *(_DWORD *)v49 -= 2;
                    }
                    result = (uint64_t)v142;
                    v142 = 0;
                    if (result)
                    {
                      if (*(_DWORD *)result != 2)
                      {
                        *(_DWORD *)result -= 2;
                        goto LABEL_125;
                      }
                      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v47);
                      if (!v48)
                      {
LABEL_130:
                        if (*((_DWORD *)v43 + 11) >= *((_DWORD *)*v41 + 11))
                          goto LABEL_100;
                        goto LABEL_131;
                      }
                    }
                    else
                    {
LABEL_125:
                      if (!v48)
                        goto LABEL_130;
                    }
                    if ((v48 & 0x80000000) == 0)
                      goto LABEL_100;
LABEL_131:
                    v61 = v41-- == v139;
                    if (v61)
                      goto LABEL_314;
                    continue;
                  }
                }
              }
              else
              {
LABEL_109:
                if (!v45)
                  goto LABEL_114;
              }
              break;
            }
            if (v45 < 0)
              goto LABEL_117;
            goto LABEL_115;
          }
        }
        v16 = *v8;
        *v8 = 0;
        v140 = v16;
        if (v8 + 1 == v7)
          goto LABEL_314;
        v17 = 1;
        while (1)
        {
          WebCore::trackDisplayName((WebCore *)&v142, v15[v17]);
          WebCore::trackDisplayName((WebCore *)&v141, v16);
          v19 = WTF::Collator::collate();
          v20 = v141;
          v141 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v18);
            else
              *(_DWORD *)v20 -= 2;
          }
          result = (uint64_t)v142;
          v142 = 0;
          if (!result)
            goto LABEL_19;
          if (*(_DWORD *)result != 2)
          {
            *(_DWORD *)result -= 2;
LABEL_19:
            if (v19)
              goto LABEL_20;
            goto LABEL_24;
          }
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
          if (v19)
          {
LABEL_20:
            v15 = v8;
            if ((v19 & 0x80000000) == 0)
              break;
            goto LABEL_25;
          }
LABEL_24:
          v15 = v8;
          if (*((_DWORD *)v8[v17] + 11) >= *((_DWORD *)v16 + 11))
            break;
LABEL_25:
          if (&v15[++v17] == v7)
            goto LABEL_314;
        }
        v21 = v7;
        v22 = (unint64_t)&v15[v17];
        if (v17 == 1)
        {
          v21 = a2;
          do
          {
            if (v22 >= (unint64_t)v21)
              break;
            result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, --v21, &v140);
          }
          while ((result & 1) == 0);
LABEL_34:
          v8 = &v15[v17];
          if (v22 < (unint64_t)v21)
          {
            v23 = v21;
            while (1)
            {
              v24 = *v8;
              *v8++ = *v23;
              *v23 = v24;
              if (v8 == a2)
                goto LABEL_314;
              v25 = v140;
              while (1)
              {
                WebCore::trackDisplayName((WebCore *)&v142, *v8);
                WebCore::trackDisplayName((WebCore *)&v141, v25);
                v27 = WTF::Collator::collate();
                v28 = v141;
                v141 = 0;
                if (v28)
                {
                  if (*(_DWORD *)v28 == 2)
                    WTF::StringImpl::destroy(v28, v26);
                  else
                    *(_DWORD *)v28 -= 2;
                }
                result = (uint64_t)v142;
                v142 = 0;
                if (result)
                  break;
LABEL_44:
                if (!v27)
                  goto LABEL_49;
LABEL_45:
                if ((v27 & 0x80000000) == 0)
                  goto LABEL_52;
LABEL_50:
                if (++v8 == a2)
                  goto LABEL_314;
              }
              if (*(_DWORD *)result != 2)
                break;
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
              if (v27)
                goto LABEL_45;
LABEL_49:
              if (*((_DWORD *)*v8 + 11) < *((_DWORD *)v25 + 11))
                goto LABEL_50;
LABEL_52:
              if (v23 == v139)
                goto LABEL_314;
              --v23;
              while (2)
              {
                WebCore::trackDisplayName((WebCore *)&v142, *v23);
                WebCore::trackDisplayName((WebCore *)&v141, v25);
                v30 = WTF::Collator::collate();
                v31 = v141;
                v141 = 0;
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2)
                    WTF::StringImpl::destroy(v31, v29);
                  else
                    *(_DWORD *)v31 -= 2;
                }
                result = (uint64_t)v142;
                v142 = 0;
                if (!result)
                {
LABEL_60:
                  if (!v30)
                    goto LABEL_65;
LABEL_61:
                  if (v30 < 0)
                    goto LABEL_69;
LABEL_66:
                  v61 = v23-- == v139;
                  if (v61)
                    goto LABEL_314;
                  continue;
                }
                break;
              }
              if (*(_DWORD *)result != 2)
              {
                *(_DWORD *)result -= 2;
                goto LABEL_60;
              }
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v29);
              if (v30)
                goto LABEL_61;
LABEL_65:
              if (*((_DWORD *)*v23 + 11) >= *((_DWORD *)v25 + 11))
                goto LABEL_66;
LABEL_69:
              if (v8 >= v23)
                goto LABEL_70;
            }
            *(_DWORD *)result -= 2;
            goto LABEL_44;
          }
LABEL_70:
          v32 = v8 - 1;
          v9 = a2 - 1;
          a4 = v134;
          if (v8 - 1 != v139)
          {
            v33 = *v32;
            *v32 = 0;
            v34 = *v139;
            *v139 = v33;
            if (v34)
            {
              if (*((_DWORD *)v34 + 4) == 1)
                (*(void (**)(const WebCore::TrackBase *))(*(_QWORD *)v34 + 16))(v34);
              else
                --*((_DWORD *)v34 + 4);
            }
          }
          v35 = v140;
          v140 = 0;
          v36 = *v32;
          *v32 = v35;
          if (v36)
          {
            if (*((_DWORD *)v36 + 4) == 1)
              (*(void (**)(WebCore::TrackBase *))(*(_QWORD *)v36 + 16))(v36);
            else
              --*((_DWORD *)v36 + 4);
          }
          if (v140)
          {
            if (*((_DWORD *)v140 + 4) == 1)
              (*(void (**)(void))(*(_QWORD *)v140 + 16))();
            else
              --*((_DWORD *)v140 + 4);
          }
          v37 = v22 >= (unint64_t)v21;
          v7 = a2;
          if (!v37)
            goto LABEL_84;
          v38 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v139, v8 - 1, a3);
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v8, a2, a3);
          if (!(_DWORD)result)
          {
            if (v38)
              continue;
LABEL_84:
            result = std::__introsort<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *,false>(v139, v8 - 1, a3, v134, a5 & 1);
LABEL_85:
            a5 = 0;
            continue;
          }
          a2 = v8 - 1;
          if (v38)
            return result;
          goto LABEL_2;
        }
        while (v21 != v15)
        {
          result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, --v21, &v140);
          if ((_DWORD)result)
            goto LABEL_34;
        }
LABEL_314:
        __break(1u);
        return result;
    }
  }
}

BOOL WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(uint64_t a1, const WebCore::TrackBase **a2, const WebCore::TrackBase **a3)
{
  WTF::StringImpl *v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  WebCore::trackDisplayName((WebCore *)&v11, *a2);
  WebCore::trackDisplayName((WebCore *)&v10, *a3);
  v6 = WTF::Collator::collate();
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v5);
      if (v6)
        return v6 >> 31;
      return *((_DWORD *)*a2 + 11) < *((_DWORD *)*a3 + 11);
    }
    *(_DWORD *)v8 -= 2;
  }
  if (v6)
    return v6 >> 31;
  return *((_DWORD *)*a2 + 11) < *((_DWORD *)*a3 + 11);
}

BOOL std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *,0>(const WebCore::TrackBase **a1, const WebCore::TrackBase **a2, const WebCore::TrackBase **a3, const WebCore::TrackBase **a4, const WebCore::TrackBase **a5, uint64_t *a6)
{
  const WebCore::TrackBase *v12;
  const WebCore::TrackBase *v13;
  const WebCore::TrackBase *v14;
  _BOOL8 result;
  const WebCore::TrackBase *v16;
  const WebCore::TrackBase *v17;
  const WebCore::TrackBase *v18;
  const WebCore::TrackBase *v19;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(a1, a2, a3, a6);
  if (WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a6, a4, a3))
  {
    v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    if (WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a6, a3, a2))
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      if (WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a6, a2, a1))
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a6, a5, a4);
  if (result)
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a6, a4, a3);
    if (result)
    {
      v17 = *a3;
      *a3 = *a4;
      *a4 = v17;
      result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a6, a3, a2);
      if (result)
      {
        v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a6, a2, a1);
        if (result)
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(const WebCore::TrackBase **a1, const WebCore::TrackBase **a2, const WebCore::TrackBase **a3, uint64_t *a4)
{
  BOOL v8;
  _BOOL8 result;
  const WebCore::TrackBase *v10;
  const WebCore::TrackBase *v11;
  const WebCore::TrackBase *v12;

  v8 = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a4, a2, a1);
  result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a4, a3, a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a4, a3, a2);
      if (!result)
        return result;
      v10 = *a2;
      *a2 = *a3;
    }
    *a3 = v10;
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a4, a2, a1);
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(const WebCore::TrackBase **a1, const WebCore::TrackBase **a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  const WebCore::TrackBase **v8;
  const WebCore::TrackBase *v9;
  const WebCore::TrackBase **v10;
  const WebCore::TrackBase **v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  const WebCore::TrackBase *v15;
  uint64_t i;
  char *v17;
  uint64_t v18;
  const WebCore::TrackBase **v19;
  const WebCore::TrackBase *v20;
  const WebCore::TrackBase *v21;
  const WebCore::TrackBase **v22;
  const WebCore::TrackBase **v23;
  const WebCore::TrackBase *v24;
  const WebCore::TrackBase *v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if (WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      v22 = a1 + 2;
      v23 = a2 - 1;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(a1, a1 + 1, a1 + 2, a3);
      if (WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v23, a1 + 2))
      {
        v24 = *v22;
        *v22 = *v23;
        *v23 = v24;
        if (WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, a1 + 2, a1 + 1))
        {
          *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
          if (WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, a1 + 1, a1))
          {
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v11, v10))
    {
      v14 = 0;
      v15 = *v11;
      *v11 = 0;
      v25 = v15;
      for (i = v12; ; i -= 8)
      {
        v17 = (char *)a1 + i;
        v18 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = v18;
        if (v14)
        {
          if (v14[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
          else
            --v14[4];
        }
        if (i == -16)
        {
          v19 = a1;
          goto LABEL_17;
        }
        if (!WebCore::CaptionUserPreferencesMediaAF::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, &v25, (const WebCore::TrackBase **)((char *)a1 + i + 8)))break;
        v14 = (_DWORD *)*((_QWORD *)v17 + 2);
      }
      v19 = (const WebCore::TrackBase **)((char *)a1 + i + 16);
LABEL_17:
      v20 = v25;
      v25 = 0;
      v21 = *v19;
      *v19 = v20;
      if (v21)
      {
        if (*((_DWORD *)v21 + 4) == 1)
          (*(void (**)(const WebCore::TrackBase *))(*(_QWORD *)v21 + 16))(v21);
        else
          --*((_DWORD *)v21 + 4);
      }
      if (v25)
      {
        if (*((_DWORD *)v25 + 4) == 1)
          (*(void (**)(void))(*(_QWORD *)v25 + 16))();
        else
          --*((_DWORD *)v25 + 4);
      }
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

WTF::StringImpl **std::unique_ptr<WebCore::ContentSecurityPolicySource>::reset[abi:sn180100](WTF::StringImpl **result, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>>::copy(uint64_t result, unsigned int **a2)
{
  uint64_t *v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;

  v2 = (uint64_t *)result;
  v3 = 0;
  v4 = 0;
  v20 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)result = 0;
  v5 = *a2;
  if (*a2)
  {
    v4 = *(v5 - 1);
    v6 = &v5[8 * v4];
    if (!*(v5 - 3))
      goto LABEL_32;
    if (!(_DWORD)v4)
    {
      v3 = *a2;
      goto LABEL_3;
    }
    v13 = 32 * v4;
    do
    {
      result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v5);
      if ((result & 1) == 0)
      {
        v14 = v5[6];
        if ((_DWORD)v14 == -1)
          goto LABEL_31;
        v18[0] = v16;
        result = ((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v14])(v18, v5);
        if (!(_DWORD)result)
          goto LABEL_30;
      }
      v5 += 8;
      v13 -= 32;
    }
    while (v13);
    v5 = v6;
LABEL_30:
    v3 = v5;
    v5 = *a2;
    goto LABEL_3;
  }
  while (1)
  {
    v6 = &v5[8 * v4];
LABEL_3:
    if (v5)
      v5 += 8 * *(v5 - 1);
    if (v5 == v3)
      return result;
    while (1)
    {
      v7 = v3[6];
      if ((_DWORD)v7 == -1)
        break;
      v16[0] = &v15;
      ((void (*)(_QWORD *__return_ptr, _QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSJ_EUlRT_E_EEJRKNS0_6__implIJSB_SI_EEEEEEDcOSN_DpOT0____fmatrix[v7])(v18, v16, v3);
      LOBYTE(v16[0]) = 0;
      v17 = -1;
      v8 = v19;
      if (v19 != -1)
      {
        ((void (*)(char *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v19])(&v15, v16, v18);
        v17 = v8;
        if (v19 != -1)
          ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v19])(&v15, v18);
      }
      result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(v2, (uint64_t)v16, (uint64_t)v18);
      if (v17 != -1)
        result = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v17])(v18, v16);
      v9 = v3 + 8;
      v3 = v6;
      if (v9 != v6)
      {
        v3 = v9;
        while (1)
        {
          v10 = v3[6];
          if ((_DWORD)v10 == -1)
            goto LABEL_31;
          v18[0] = v16;
          result = ((uint64_t (*)(_QWORD *, unsigned int *))off_1E34030D0[v10])(v18, v3);
          if ((result & 1) == 0)
          {
            v11 = v3[6];
            if ((_DWORD)v11 == -1)
              goto LABEL_31;
            v18[0] = v16;
            result = ((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v11])(v18, v3);
            if (!(_DWORD)result)
              break;
          }
          v3 += 8;
          if (v3 == v6)
          {
            v3 = v6;
            break;
          }
        }
      }
      if (v3 == v5)
        return result;
    }
LABEL_31:
    result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_32:
    v3 = v6;
  }
}

unint64_t WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 24 * v4;
        v9 = (_DWORD *)((char *)v3 + 16);
        do
        {
          *(_BYTE *)v7 = *((_BYTE *)v9 - 16);
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          v10 = *((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = 0;
          *((_QWORD *)v7 + 1) = v10;
          LODWORD(v10) = *v9;
          *v9 = 0;
          v7[4] = v10;
          LODWORD(v10) = v9[1];
          v9[1] = 0;
          v7[5] = v10;
          result = (unsigned int *)*((_QWORD *)v9 - 1);
          if (result)
          {
            *((_QWORD *)v9 - 1) = 0;
            *v9 = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v9 += 6;
          v7 += 6;
          v8 -= 24;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL4 v12;
  BOOL v13;
  char v14;
  char v16;
  char *v17;

  if (a1)
  {
    v4 = *(_DWORD *)(a1 - 8);
    v5 = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(a2) & v4;
    v6 = (unsigned int *)(a1 + 32 * v5);
    if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v6) & 1) == 0)
    {
      v7 = 1;
      do
      {
        v8 = v6[6];
        if ((_DWORD)v8 == -1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          JUMPOUT(0x196082C84);
        }
        v17 = &v16;
        if ((((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v8])(&v17, v6) & 1) == 0)
        {
          if (v6 == (unsigned int *)a2)
            return (unsigned int *)a2;
          v9 = v6[6];
          v10 = *(_DWORD *)(a2 + 24);
          v12 = v10 == (_DWORD)v9 && v10 != -1;
          if ((_DWORD)v9 == -1 || !v12)
          {
            v13 = v10 == -1;
            if ((_DWORD)v9 == -1)
              v14 = v13;
            else
              v14 = v12;
            if ((v14 & 1) != 0)
              return v6;
          }
          else
          {
            v17 = &v16;
            if ((((uint64_t (*)(char **, unsigned int *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v9])(&v17, v6, a2) & 1) != 0)return v6;
          }
        }
        v5 = ((_DWORD)v5 + v7) & v4;
        v6 = (unsigned int *)(a1 + 32 * v5);
        ++v7;
      }
      while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v6));
    }
  }
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::CaptionUserPreferencesMediaAF::*&)(void),WebCore::CaptionUserPreferencesMediaAF*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,char,WTF::ASCIILiteral,WTF::ASCIILiteral>(WTF::StringBuilder *a1, _OWORD *a2, uint64_t a3, char a4, _OWORD *a5, uint64_t a6, _OWORD *a7, uint64_t a8)
{
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  char *result;
  char *v17;
  char *v18;
  __int128 v19;
  int8x16_t v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  int8x16_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  char *v36;
  __int16 v37;
  char *v38;
  char *v39;
  __int128 v40;
  int8x16_t v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  char *v45;
  char *v46;
  __int16 v47;
  char *v48;
  char *v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;

  if (a3)
  {
    v12 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_50;
  }
  else
  {
    v12 = 0;
  }
  if (a6)
  {
    v13 = a6 - 1;
    if ((unint64_t)(a6 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x196082F8CLL);
    }
  }
  else
  {
    v13 = 0;
  }
  if (!a8)
  {
    v14 = 0;
    goto LABEL_7;
  }
  v14 = a8 - 1;
  if ((unint64_t)(a8 - 1) >> 31)
  {
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x196082F60);
  }
LABEL_7:
  v15 = *((_QWORD *)a1 + 1);
  if (!v15 && (v15 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v15 + 16) & 4) != 0)
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (!result)
      return result;
    v48 = result;
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 1)
        *result = *(_BYTE *)a2;
      else
        result = (char *)memcpy(result, a2, v12);
    }
    v48[v12] = a4;
    v49 = &v48[v12 + 1];
    if ((_DWORD)v13)
    {
      if ((_DWORD)v13 == 1)
      {
        *v49 = *(_BYTE *)a5;
        if (!(_DWORD)v14)
          return result;
LABEL_38:
        result = &v49[v13];
        if ((_DWORD)v14 != 1)
          return (char *)memcpy(result, a7, v14);
        *result = *(_BYTE *)a7;
        return result;
      }
      result = (char *)memcpy(&v48[v12 + 1], a5, v13);
    }
    if (!(_DWORD)v14)
      return result;
    goto LABEL_38;
  }
  result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v17 = &result[2 * v12];
    if ((v12 & 0x7FFFFFC0) != 0)
    {
      v18 = &result[2 * (v12 & 0x7FFFFFC0)];
      v19 = 0uLL;
      do
      {
        v50.val[0] = (int8x16_t)*a2;
        v20 = *((int8x16_t *)a2 + 1);
        v53.val[0] = (int8x16_t)a2[2];
        v21 = a2[3];
        a2 += 4;
        v22 = v21;
        v53.val[1] = 0uLL;
        v56.val[0] = v20;
        v50.val[1] = 0uLL;
        v23 = result;
        vst2q_s8(v23, v50);
        v23 += 32;
        v56.val[1] = 0uLL;
        vst2q_s8(v23, v56);
        v24 = result + 64;
        vst2q_s8(v24, v53);
        v25 = result + 96;
        vst2q_s8(v25, *(int8x16x2_t *)(&v19 - 1));
        result += 128;
      }
      while (result != v18);
      result = v18;
    }
    while (result != v17)
    {
      v26 = *(unsigned __int8 *)a2;
      a2 = (_OWORD *)((char *)a2 + 1);
      *(_WORD *)result = v26;
      result += 2;
    }
    *(_WORD *)v17 = a4;
    v27 = v17 + 2;
    v28 = &v27[2 * v13];
    if ((v13 & 0x7FFFFFC0) != 0)
    {
      v29 = &v27[2 * (v13 & 0x7FFFFFC0)];
      v30 = 0uLL;
      do
      {
        v51.val[0] = (int8x16_t)*a5;
        v31 = *((int8x16_t *)a5 + 1);
        v54.val[0] = (int8x16_t)a5[2];
        v32 = a5[3];
        a5 += 4;
        v33 = v32;
        v54.val[1] = 0uLL;
        v57.val[0] = v31;
        v51.val[1] = 0uLL;
        v34 = v27;
        vst2q_s8(v34, v51);
        v34 += 32;
        v57.val[1] = 0uLL;
        vst2q_s8(v34, v57);
        v35 = v27 + 64;
        vst2q_s8(v35, v54);
        v36 = v27 + 96;
        vst2q_s8(v36, *(int8x16x2_t *)(&v30 - 1));
        v27 += 128;
      }
      while (v27 != v29);
      v27 = v29;
    }
    while (v27 != v28)
    {
      v37 = *(unsigned __int8 *)a5;
      a5 = (_OWORD *)((char *)a5 + 1);
      *(_WORD *)v27 = v37;
      v27 += 2;
    }
    v38 = &v28[2 * v14];
    if ((v14 & 0x7FFFFFC0) != 0)
    {
      v39 = &v28[2 * (v14 & 0x7FFFFFC0)];
      v40 = 0uLL;
      do
      {
        v52.val[0] = (int8x16_t)*a7;
        v41 = *((int8x16_t *)a7 + 1);
        v55.val[0] = (int8x16_t)a7[2];
        v42 = a7[3];
        a7 += 4;
        v43 = v42;
        v55.val[1] = 0uLL;
        v58.val[0] = v41;
        v52.val[1] = 0uLL;
        v44 = v28;
        vst2q_s8(v44, v52);
        v44 += 32;
        v58.val[1] = 0uLL;
        vst2q_s8(v44, v58);
        v45 = v28 + 64;
        vst2q_s8(v45, v55);
        v46 = v28 + 96;
        vst2q_s8(v46, *(int8x16x2_t *)(&v40 - 1));
        v28 += 128;
      }
      while (v28 != v39);
      v28 = v39;
    }
    while (v28 != v38)
    {
      v47 = *(unsigned __int8 *)a7;
      a7 = (_OWORD *)((char *)a7 + 1);
      *(_WORD *)v28 = v47;
      v28 += 2;
    }
  }
  return result;
}

